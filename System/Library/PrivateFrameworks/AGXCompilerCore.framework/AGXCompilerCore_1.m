uint64_t AGCLLVMUserMeshShaderSW::addGenericVarying(uint64_t a1, uint64_t a2, int a3, int a4)
{
  llvm::MDString *v8;
  const char *v9;
  llvm::MDString *v10;
  const char *v11;
  BOOL v12;
  llvm::MDString *v13;
  int Key;
  llvm *v16;
  unsigned int v17;
  int v18;
  int v20;
  int v21;
  int v22;
  void *String;
  size_t v24;
  long long v25;
  uint64_t v26;
  unsigned int v27[6];
  long long __p;
  uint64_t v29;
  unsigned int v30;

  v8 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (a3) {
    v9 = "air.primitive_data";
  }
  else {
    v9 = "air.vertex_data";
  }
  if (isStringMDNode(v8, v9))
  {
    v30 = 0;
  }
  else
  {
    v10 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8));
    if (a3) {
      v11 = "air.mesh_primitive_data";
    }
    else {
      v11 = "air.mesh_vertex_data";
    }
    v12 = 0;
    v30 = 0;
    if (!isStringMDNode(v10, v11)) {
      return v12;
    }
  }
  v27[0] = 1;
  if (!parseMDInt(0, a2, v27, &v30)) {
    return 0;
  }
  v13 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (!v13 || *(unsigned char *)v13) {
    return 0;
  }
  llvm::MDString::getString(v13);
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 4584)) {
    return 1;
  }
  v16 = *(llvm **)(*(void *)(a1 + 4576) + 8 * Key);
  v17 = *((_DWORD *)v16 + 2);
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v16, (void *)(*(void *)v16 + 17));
  v18 = v17 & 0xF;
  v12 = !a3 && v18 != 3 || a3 == 1 && v18 == 3;
  if (a3) {
    v20 = 8;
  }
  else {
    v20 = 7;
  }
  v21 = v20 + 2 * v30;
  if (v30 > 0xFFFFFFF8) {
    v22 = ~v30;
  }
  else {
    v22 = v21;
  }
  GenericVarying::GenericVarying((uint64_t)v27, HIBYTE(v17) & 0x7F, BYTE2(v17), v18, BYTE1(v17), v22, a4);
  String = (void *)llvm::MDString::getString(v13);
  if (String)
  {
    std::string::basic_string[abi:nn180100](&v25, String, v24);
  }
  else
  {
    v25 = 0uLL;
    v26 = 0;
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__p);
  }
  __p = v25;
  v29 = v26;
  GenericVaryingAllocator::addVarying(a1 + 4704, (unint64_t)v27);
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__p);
  }
  return v12;
}

uint64_t AGCLLVMUserMeshShaderSW::wrapperPrefixData(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t v1 = *(unsigned int *)(*(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 816)
                       + 52);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = llvm::ConstantInt::get();
  return MEMORY[0x1F417B000](v1, v2);
}

uint64_t AGCLLVMUserMeshShaderSW::addWrapperPrefix(AGCLLVMUserMeshShaderSW *this)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 1, 1);
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  if ((*(unsigned char *)(*((void *)this + 565) + 17) & 1) == 0)
  {
    v12[0] = "bounds_check_failed";
    __int16 v13 = 259;
    operator new();
  }
  v3 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  LODWORD(v14[0]) = 0;
  __int16 v13 = 257;
  uint64_t Value = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v3, GridProperties, (uint64_t)v14, 1, (uint64_t)v12);
  v14[0] = AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 3, 0);
  v14[1] = Value;
  v5 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v6 = (uint64_t)(v5 + 32);
  uint64_t v7 = *((void *)v5 + 22);
  uint64_t v8 = llvm::PointerType::get();
  uint64_t v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v6, (uint64_t)"air.gpe.emit_nop_token", 22, v7, v8, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232));
  v10 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  __int16 v13 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)v10, *(void *)(v9 + 24), v9, (uint64_t)v14, 2, (uint64_t)v12);
  AGCLLVMTargetBuilder::CreateBarrier((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 32));
  return 1;
}

uint64_t AGCLLVMUserMeshShaderSW::initCompile(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t v2 = validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1092), *(_DWORD *)(*((void *)this + 565) + 20), *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 864), (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (unsigned int *)this + 1092);
  if (v2)
  {
    v3 = (BOOL *)this + 4384;
    AGCLLVMUserObjectShaderBase::initCompile(this);
    v4 = (std::string *)std::string::basic_string[abi:nn180100]<0>(&v23, "air.get_global_size");
    v5 = std::string::append(v4, ".i32");
    std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
    long long v25 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v26 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (llvm::Module::getFunction())
    {
      BOOL *v3 = 1;
    }
    else
    {
      std::string::basic_string[abi:nn180100]<0>(&v20, "air.get_global_size");
      uint64_t v7 = std::string::append(&v20, ".i16");
      std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)v21 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v22 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (llvm::Module::getFunction())
      {
        BOOL *v3 = 1;
      }
      else
      {
        std::string::basic_string[abi:nn180100]<0>(&v17, "air.get_num_groups");
        uint64_t v9 = std::string::append(&v17, ".i32");
        std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)v18 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        std::string::size_type v19 = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (llvm::Module::getFunction())
        {
          BOOL *v3 = 1;
        }
        else
        {
          std::string::basic_string[abi:nn180100]<0>(&v14, "air.get_num_groups");
          v11 = std::string::append(&v14, ".i16");
          std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          std::string::size_type v16 = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          BOOL *v3 = llvm::Module::getFunction() != 0;
          if (SHIBYTE(v16) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v14.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v19) < 0) {
          operator delete(v18[0]);
        }
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v22) < 0) {
        operator delete(v21[0]);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    if (v24 < 0) {
      operator delete(v23);
    }
    std::string::basic_string[abi:nn180100]<0>(&v25, "air.object_threadgroup_position_in_grid");
    *((unsigned char *)this + 4385) = llvm::Module::getFunction() != 0;
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
  }
  return v2;
}

uint64_t virtual thunk to'AGCLLVMUserObjectShader::isDMAPromotionDisabled(AGCLLVMUserObjectShader *this)
{
  return *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 208) + 4520) + 12) >> 7;
}

BOOL virtual thunk to'AGCLLVMUserObjectShader::enableSoftFaultOptimization(AGCLLVMUserObjectShader *this)
{
  return (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 200) + 4520) + 15) & 0x40) == 0;
}

uint64_t virtual thunk to'AGCLLVMUserObjectShader::getBufferBoundsCheckMode(AGCLLVMUserObjectShader *this)
{
  return (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 192) + 4520) + 12) >> 4) & 7;
}

uint64_t virtual thunk to'AGCLLVMUserObjectShaderBase::getTempRegistersLimit(AGCLLVMUserObjectShaderBase *this, unsigned int *a2)
{
  return AGCLLVMUserObjectShaderBase::getTempRegistersLimit((AGCLLVMUserObjectShaderBase *)((char *)this + *(void *)(*(void *)this - 176)), a2);
}

uint64_t AGCLLVMUserObjectShaderBase::getTempRegistersLimit(AGCLLVMUserObjectShaderBase *this, unsigned int *a2)
{
  v4 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *a2 = *(_DWORD *)(v4[50] + 884);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 96))(v4);
  if (result)
  {
    *a2 = result;
    uint64_t result = result != *(_DWORD *)(v4[50] + 884);
  }
  unsigned int v6 = *((_DWORD *)this + 1092);
  if (v6)
  {
    unsigned int v7 = 0;
    std::string::size_type v8 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v9 = *((void *)v8 + 58);
    unsigned int v10 = *(_DWORD *)(*((void *)v8 + 50) + 884);
    unsigned int v11 = *(_DWORD *)(v9 + 440);
    unsigned int v12 = v11 - 1;
    uint64_t v13 = *(void *)(v9 + 432);
    do
    {
      unsigned int v14 = (v12 + v7) >> 1;
      if (*(_DWORD *)(v13 + 4 * v14) < v6) {
        unsigned int v12 = v14 - 1;
      }
      else {
        unsigned int v7 = v14 + 1;
      }
    }
    while (v7 <= v12);
    unsigned int v15 = v10 / v11 * v12;
    if (v15 >= *a2) {
      unsigned int v15 = *a2;
    }
    *a2 = v15;
    return 1;
  }
  return result;
}

BOOL virtual thunk to'AGCLLVMUserObjectShader::constructReply(AGCLLVMUserObjectShader *this)
{
  return AGCLLVMUserObjectShader::constructReply((AGCLLVMUserObjectShader *)((char *)this
                                                                           + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMUserObjectShader::constructReply(AGCLLVMUserObjectShader *this)
{
  BOOL result = AGCDeserializedReply::deserialize((AGCLLVMUserObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUserObjectShader *)((char *)this + *(void *)(*(void *)this - 24)));
    int v3 = AGCLLVMUserObject::constructFlatReply(this);
    v4 = (char *)this + *(void *)(*(void *)this - 24);
    v5 = (flatbuffers::FlatBufferBuilder *)(v4 + 2472);
    v4[2542] = 1;
    int v6 = *((_DWORD *)v4 + 626) - *((_DWORD *)v4 + 630) + *((_DWORD *)v4 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v4 + 309, 4, *((_DWORD *)this + 1098));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, 6, *((_DWORD *)this + 1099));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, 8, *((_DWORD *)this + 1100));
    LODWORD(v5) = flatbuffers::FlatBufferBuilder::EndTable(v5, v6);
    unsigned int v7 = (char *)this + *(void *)(*(void *)this - 24);
    std::string::size_type v8 = (flatbuffers::FlatBufferBuilder *)(v7 + 2472);
    v7[2542] = 1;
    int v9 = *((_DWORD *)v7 + 626) - *((_DWORD *)v7 + 630) + *((_DWORD *)v7 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v7 + 309, 4, *((_DWORD *)this + 1138));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v8, 6, *((_DWORD *)this + 1139));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v8, 8, *((_DWORD *)this + 1140));
    LODWORD(v8) = flatbuffers::FlatBufferBuilder::EndTable(v8, v9);
    unsigned int v10 = (char *)this + *(void *)(*(void *)this - 24);
    unsigned int v11 = (flatbuffers::FlatBufferBuilder *)(v10 + 2472);
    v10[2542] = 1;
    int v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v10 + 2472), 4, (int)v5);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v11, 6, (int)v8);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, *((_DWORD *)this + 1094));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 10, *((_DWORD *)this + 1095));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 12, *((_DWORD *)this + 1092));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v11, 14, *((unsigned __int8 *)this + 12), 0);
    LODWORD(v5) = flatbuffers::FlatBufferBuilder::EndTable(v11, v12);
    uint64_t v13 = (char *)this + *(void *)(*(void *)this - 24);
    unsigned int v14 = (flatbuffers::FlatBufferBuilder *)(v13 + 2472);
    v13[2542] = 1;
    LODWORD(v11) = *((_DWORD *)v13 + 626) - *((_DWORD *)v13 + 630) + *((_DWORD *)v13 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v13 + 2472), v3);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ObjectShaderInfo>(v14, (int)v5);
    unsigned int v15 = (AGCLLVMUserObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v16 = flatbuffers::FlatBufferBuilder::EndTable(v14, (__int16)v11);
    flatbuffers::FlatBufferBuilder::Finish(v15, v16, v17);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
    int v18 = AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(this);
    std::string::size_type v19 = (char *)this + *(void *)(*(void *)this - 24);
    std::string v20 = (flatbuffers::FlatBufferBuilder *)(v19 + 2568);
    v19[2638] = 1;
    LODWORD(v5) = *((_DWORD *)v19 + 650) - *((_DWORD *)v19 + 654) + *((_DWORD *)v19 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v19 + 2568), v18);
    v21 = (AGCLLVMUserObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 2568);
    int v22 = flatbuffers::FlatBufferBuilder::EndTable(v20, (__int16)v5);
    flatbuffers::FlatBufferBuilder::Finish(v21, v22, v23);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
    return AGCLLVMUserObjectShaderBase::validateReply(this);
  }
  return result;
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ObjectShaderInfo>(flatbuffers::FlatBufferBuilder *result, int a2)
{
  if (a2)
  {
    int v3 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 20, v4);
  }
  return result;
}

BOOL AGCLLVMUserObjectShaderBase::validateReply(AGCLLVMUserObjectShaderBase *this)
{
  uint64_t v2 = *(void *)(*(void *)this - 24);
  int v3 = (char *)this + v2;
  uint64_t v4 = *(void *)((char *)this + v2 + 696);
  if (v4)
  {
    if (*((void *)v3 + 88)) {
      v5 = (void *)((char *)this + v2 + 696);
    }
    else {
      v5 = v3 + 1256;
    }
  }
  else
  {
    v5 = v3 + 1256;
  }
  int v6 = (int *)(*v5 + *(unsigned int *)*v5);
  unsigned int v7 = (unsigned int *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 4));
  std::string::size_type v8 = (unsigned int *)((char *)v7
                      + *v7
                      + *(unsigned __int16 *)((char *)v7 + *v7 - *(unsigned int *)((char *)v7 + *v7) + 8));
  if (v4)
  {
    if (*((void *)v3 + 88)) {
      int v9 = (char *)this + v2 + 696;
    }
    else {
      int v9 = v3 + 1256;
    }
  }
  else
  {
    int v9 = v3 + 1256;
  }
  unsigned int v11 = *(unsigned int **)v9;
  uint64_t v10 = *((void *)v9 + 1);
  if (v11) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = (int *)((char *)v11 + *v11);
  }
  unsigned int v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (uint64_t v15 = v14[2]) != 0) {
    int v16 = (int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = *(unsigned int *)((char *)v8 + *v8);
  int v18 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v18 >= 0x3Du && (uint64_t v19 = v18[30]) != 0) {
    unsigned int v20 = *(int *)((char *)v16 + v19);
  }
  else {
    unsigned int v20 = 0;
  }
  if (v17 <= 0x20)
  {
    BOOL result = validateUserLocalMemoryUsage(v20, *(_DWORD *)(*(void *)((char *)this + v2 + 400) + 856), (std::string *)(v3 + 8));
    if (!result) {
      return result;
    }
    unsigned int v22 = *((_DWORD *)this + 1093);
    uint64_t v23 = *(void *)(*(void *)this - 24);
    unsigned int v24 = *(_DWORD *)(*(void *)((char *)this + v23 + 400) + 892);
    if (v22 <= v24) {
      return 1;
    }
    long long v25 = (std::string *)((char *)this + v23 + 8);
    std::to_string(&v41, v22);
    std::string::size_type v26 = std::string::insert(&v41, 0, "Object shader payload size (");
    std::string::size_type v27 = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v42, ") ");
    std::string::size_type v29 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v43, "exceeds the maximum payload size allowed (");
    std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v24);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    v34 = std::string::append(&v44, (const std::string::value_type *)p_p, size);
    std::string::size_type v35 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v45, ")");
    std::string::size_type v37 = v36->__r_.__value_.__r.__words[2];
    long long v46 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    uint64_t v47 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (v47 >= 0) {
      v38 = (const std::string::value_type *)&v46;
    }
    else {
      v38 = (const std::string::value_type *)v46;
    }
    if (v47 >= 0) {
      std::string::size_type v39 = HIBYTE(v47);
    }
    else {
      std::string::size_type v39 = *((void *)&v46 + 1);
    }
    std::string::append(v25, v38, v39);
    if (SHIBYTE(v47) < 0) {
      operator delete((void *)v46);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
  }
  return 0;
}

void virtual thunk to'AGCLLVMUserObjectShader::getCompilationKeyDescription(AGCLLVMUserObjectShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMUserObjectShader::getCompilationKeyDescription(AGCLLVMUserObjectShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  int v3 = (_DWORD *)*((void *)this + 565);
  std::string::basic_string[abi:nn180100]<0>(v36, "AGCObjectContextStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v34, "mutableBuffers");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v40);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v41[1] + *(void *)(v41[0] - 24)) = *(_DWORD *)((unsigned char *)&v41[1] + *(void *)(v41[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v44, (const void **)v34, (uint64_t)__p);
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  v40[0] = *(void **)MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void **)((char *)v40 + *((void *)v40[0] - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
  v41[0] = v4;
  v41[1] = MEMORY[0x1E4FBA470] + 16;
  if (v42 < 0) {
    operator delete((void *)v41[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB7A0710](v43);
  std::string::basic_string[abi:nn180100]<0>(v40, "maxTotalThreadsPerThreadgroup");
  _agcFieldString<unsigned int>(&v45, (const void **)v40, v3[5]);
  std::string::basic_string[abi:nn180100]<0>(__p, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v46, (const void **)__p, v3[3] & 1);
  std::string::basic_string[abi:nn180100]<0>(v32, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v47, (const void **)v32, (v3[3] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v30, "customBorderColor");
  _agcFieldString<unsigned int>(&v48, (const void **)v30, v3[4] & 1);
  std::string::basic_string[abi:nn180100]<0>(v28, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v49, (const void **)v28, (v3[3] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v26, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v50, (const void **)v26, (v3[3] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v24, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v51, (const void **)v24, (v3[3] >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(v22, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v52, (const void **)v22, (v3[3] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v20, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v53, (const void **)v20, (v3[3] >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v18, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v54, (const void **)v18, (unsigned __int16)(v3[3] >> 10));
  std::string::basic_string[abi:nn180100]<0>(v16, "enableStackShadow");
  _agcFieldString<unsigned int>(&v55, (const void **)v16, (v3[3] >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v14, "bufferBoundsCheckMode");
  _agcFieldString<unsigned int>(&v56, (const void **)v14, (v3[3] >> 4) & 7);
  std::string::basic_string[abi:nn180100]<0>(v12, "disableDMAPromotion");
  _agcFieldString<unsigned int>(&v57, (const void **)v12, (v3[3] >> 7) & 1);
  std::string::basic_string[abi:nn180100]<0>(v10, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v58, (const void **)v10, v3[3] >> 31);
  std::string::basic_string[abi:nn180100]<0>(v8, "meshNeedsTGCounts");
  _agcFieldString<unsigned int>(&v59, (const void **)v8, (v3[4] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v6, "meshNeedsOSGridPosition");
  _agcFieldString<unsigned int>(&v60, (const void **)v6, (v3[4] >> 2) & 1);
  _agcGroupWithHeader(a2, (uint64_t)v36, (uint64_t)&v44, 17);
  uint64_t v5 = 408;
  do
  {
    if (v44.__r_.__value_.__s.__data_[v5 - 1] < 0) {
      operator delete(*(void **)&v43[v5 + 128]);
    }
    v5 -= 24;
  }
  while (v5);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v41[0]) < 0) {
    operator delete(v40[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
}

uint64_t virtual thunk to'AGCLLVMUserObjectShader::getForwardProgressMode(AGCLLVMUserObjectShader *this)
{
  return *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 128) + 4520) + 12) >> 31;
}

uint64_t virtual thunk to'AGCLLVMUserObjectShader::getShaderType(AGCLLVMUserObjectShader *this)
{
  return 1;
}

const char *virtual thunk to'AGCLLVMUserObjectShader::dumpType(AGCLLVMUserObjectShader *this)
{
  return "object";
}

void virtual thunk to'AGCLLVMUserObjectShader::~AGCLLVMUserObjectShader(AGCLLVMUserObjectShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F25784F0;
  v1[571] = &unk_1F2578828;
  v1[575] = &unk_1F2578918;
  uint64_t v2 = v1[568];
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 566));
  }
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase((AGCLLVMUserObjectShaderBase *)v1, (uint64_t *)off_1F2578928);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 571));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F25784F0;
  v1[571] = &unk_1F2578828;
  v1[575] = &unk_1F2578918;
  uint64_t v2 = v1[568];
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 566));
  }
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase((AGCLLVMUserObjectShaderBase *)v1, (uint64_t *)off_1F2578928);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 571));
}

uint64_t AGCLLVMUserObjectShaderBase::replacePayloadBufferAccesses(AGCLLVMUserObjectShaderBase *this, llvm::Type **a2)
{
  uint64_t v4 = (char *)this + 4384;
  uint64_t v5 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v6 = *((void *)v5 + 50);
  long long v19 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v20, (llvm::IRBuilderBase *)(v5 + 40));
  int v21 = *((_DWORD *)v5 + 34);
  GEP = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v6 + 320))(v6, &v19);
  if (v20) {
    llvm::MetadataTracking::untrack();
  }
  if (*v4)
  {
    std::string::size_type v8 = (char *)this + *(void *)(*(void *)this - 24);
    char v9 = (llvm::Type *)*((void *)v8 + 27);
    uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v18 = 257;
    GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v8 + 40), v9, GEP, v10, (const llvm::Twine *)v17);
  }
  if (v4[1])
  {
    char v11 = (char *)this + *(void *)(*(void *)this - 24);
    BOOL v12 = (llvm::Type *)*((void *)v11 + 27);
    char v13 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v18 = 257;
    GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v11 + 40), v12, GEP, v13, (const llvm::Twine *)v17);
  }
  unsigned int v14 = (AGCLLVMUserObjectShaderBase *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  char v15 = *a2;
  __int16 v18 = 257;
  llvm::IRBuilderBase::CreatePointerCast(v14, (llvm::Type **)GEP, v15, (const llvm::Twine *)v17);
  llvm::Value::replaceAllUsesWith();
  return 1;
}

uint64_t AGCLLVMUserObjectShaderBase::replaceBuiltins(AGCLLVMUserObjectShaderBase *this)
{
  v26[30] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = AGCLLVMUserObject::replaceBuiltins(this);
  if (v2)
  {
    int v3 = *(llvm::LLVMContext ***)((char *)this + *(void *)(*(void *)this - 24) + 368);
    AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v22, *v3);
    v26[29] = this;
    unsigned int v22 = &unk_1F25799D8;
    v26[25] = v3;
    {
      std::string::basic_string[abi:nn180100]<0>(AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions, "air.get_global_size");
      dword_1EA613340 = 1;
      qword_1EA613348 = (uint64_t)AGCLLVMUserObjectShaderBase::buildGlobalSize;
      unk_1EA613350 = 0;
      dword_1EA613358 = 4;
      word_1EA61335C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613360, "air.get_global_id");
      dword_1EA613378 = 1;
      qword_1EA613380 = (uint64_t)AGCLLVMUserObjectShaderBase::buildGlobalID;
      unk_1EA613388 = 0;
      dword_1EA613390 = 4;
      word_1EA613394 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613398, "air.get_local_size");
      dword_1EA6133B0 = 1;
      qword_1EA6133B8 = (uint64_t)AGCLLVMUserObjectShaderBase::buildLocalSize;
      unk_1EA6133C0 = 0;
      dword_1EA6133C8 = 4;
      word_1EA6133CC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA6133D0, "air.get_local_id");
      dword_1EA6133E8 = 1;
      qword_1EA6133F0 = (uint64_t)AGCLLVMUserObjectShaderBase::buildLocalID;
      unk_1EA6133F8 = 0;
      dword_1EA613400 = 4;
      word_1EA613404 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EA613406[2], "air.get_local_linear_id");
      dword_1EA613420 = 1;
      qword_1EA613428 = (uint64_t)AGCLLVMUserObjectShaderBase::buildLocalLinearID;
      unk_1EA613430 = 0;
      dword_1EA613438 = 2;
      word_1EA61343C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613440, "air.get_num_groups");
      dword_1EA613458 = 1;
      qword_1EA613460 = (uint64_t)AGCLLVMUserObjectShaderBase::buildNumGroups;
      unk_1EA613468 = 0;
      dword_1EA613470 = 4;
      word_1EA613474 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613478, "air.get_group_id");
      dword_1EA613490 = 1;
      qword_1EA613498 = (uint64_t)AGCLLVMUserObjectShaderBase::buildGroupID;
      unk_1EA6134A0 = 0;
      dword_1EA6134A8 = 4;
      word_1EA6134AC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA6134B0, "air.get_dispatch_local_size");
      dword_1EA6134C8 = 1;
      qword_1EA6134D0 = (uint64_t)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize;
      unk_1EA6134D8 = 0;
      dword_1EA6134E0 = 4;
      word_1EA6134E4 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EA6134E6[2], "air.get_quadgroups_per_threadgroup");
      dword_1EA613500 = 1;
      qword_1EA613508 = (uint64_t)AGCLLVMUserObjectShaderBase::buildQuadgroupsPerThreadgroup;
      unk_1EA613510 = 0;
      dword_1EA613518 = 2;
      word_1EA61351C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613520, "air.get_simdgroups_per_threadgroup");
      dword_1EA613538 = 1;
      qword_1EA613540 = (uint64_t)AGCLLVMUserObjectShaderBase::buildSimdgroupsPerThreadgroup;
      qword_1EA613548 = 0;
      dword_1EA613550 = 2;
      word_1EA613554 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613558, "air.get_dispatch_quadgroups_per_threadgroup");
      dword_1EA613570 = 1;
      qword_1EA613578 = (uint64_t)AGCLLVMUserObjectShaderBase::buildDispatchQuadgroupsPerThreadgroup;
      qword_1EA613580 = 0;
      dword_1EA613588 = 2;
      word_1EA61358C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613590, "air.get_dispatch_simdgroups_per_threadgroup");
      dword_1EA6135A8 = 1;
      qword_1EA6135B0 = (uint64_t)AGCLLVMUserObjectShaderBase::buildDispatchSimdgroupsPerThreadgroup;
      qword_1EA6135B8 = 0;
      dword_1EA6135C0 = 2;
      word_1EA6135C4 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EA6135C6[2], "air.get_quad_group");
      dword_1EA6135E0 = 1;
      qword_1EA6135E8 = (uint64_t)AGCLLVMUserObjectShaderBase::buildQuadGroup;
      qword_1EA6135F0 = 0;
      dword_1EA6135F8 = 2;
      word_1EA6135FC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613600, "air.get_thread_index_in_simdgroup");
      dword_1EA613618 = 1;
      qword_1EA613620 = (uint64_t)AGCLLVMUserObjectShaderBase::buildThreadIndexInSimdGroup;
      qword_1EA613628 = 0;
      dword_1EA613630 = 2;
      word_1EA613634 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613638, "air.get_simdgroup_index_in_threadgroup");
      dword_1EA613650 = 1;
      qword_1EA613658 = (uint64_t)AGCLLVMUserObjectShaderBase::buildSimdGroupIndexInThreadgroup;
      qword_1EA613660 = 0;
      dword_1EA613668 = 2;
      word_1EA61366C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613670, "air.get_dispatch_threads_per_threadgroup");
      dword_1EA613688 = 1;
      qword_1EA613690 = (uint64_t)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize;
      qword_1EA613698 = 0;
      dword_1EA6136A0 = 4;
      word_1EA6136A4 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EA6136A6[2], "air.get_quadgroup_index_in_threadgroup");
      dword_1EA6136C0 = 1;
      qword_1EA6136C8 = (uint64_t)AGCLLVMUserObjectShaderBase::buildQuadGroup;
      qword_1EA6136D0 = 0;
      dword_1EA6136D8 = 2;
      word_1EA6136DC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA6136E0, "air.get_thread_index_in_quadgroup");
      dword_1EA6136F8 = 1;
      qword_1EA613700 = (uint64_t)AGCLLVMUserObjectShaderBase::buildQuadElement;
      qword_1EA613708 = 0;
      dword_1EA613710 = 2;
      word_1EA613714 = 0;
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_512, 0, &dword_1CAC02000);
    }
    for (uint64_t i = 0; i != 1008; i += 56)
    {
      uint64_t v5 = &AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[i];
      if (AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[i + 23] >= 0) {
        size_t v6 = AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[i + 23];
      }
      else {
        size_t v6 = *(void *)&AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[i + 8];
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v6 + 4);
      if (v19 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v6)
      {
        if (v5[23] >= 0) {
          std::string::size_type v8 = &AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[i];
        }
        else {
          std::string::size_type v8 = *(char **)v5;
        }
        memmove(p_p, v8, v6);
      }
      strcpy((char *)p_p + v6, ".i32");
      if (v19 >= 0) {
        char v9 = &__p;
      }
      else {
        char v9 = __p;
      }
      if (v19 >= 0) {
        uint64_t v10 = HIBYTE(v19);
      }
      else {
        uint64_t v10 = (uint64_t)v18;
      }
      AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderBase>::doReplacement((uint64_t)&v22, (uint64_t)v9, v10, (uint64_t)(v5 + 24));
      if (SHIBYTE(v19) < 0) {
        operator delete(__p);
      }
      if (v5[23] >= 0) {
        size_t v11 = v5[23];
      }
      else {
        size_t v11 = *((void *)v5 + 1);
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v11 + 4);
      if (v19 >= 0) {
        BOOL v12 = &__p;
      }
      else {
        BOOL v12 = __p;
      }
      if (v11)
      {
        if (v5[23] >= 0) {
          char v13 = &AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[i];
        }
        else {
          char v13 = *(char **)v5;
        }
        memmove(v12, v13, v11);
      }
      strcpy((char *)v12 + v11, ".i16");
      if (v19 >= 0) {
        unsigned int v14 = &__p;
      }
      else {
        unsigned int v14 = __p;
      }
      if (v19 >= 0) {
        uint64_t v15 = HIBYTE(v19);
      }
      else {
        uint64_t v15 = (uint64_t)v18;
      }
      AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderBase>::doReplacement((uint64_t)&v22, (uint64_t)v14, v15, (uint64_t)(v5 + 24));
      if (SHIBYTE(v19) < 0) {
        operator delete(__p);
      }
    }
    LODWORD(__p) = 1;
    __int16 v18 = AGCLLVMUserObjectShaderBase::getEmulationPayloadBuffer;
    uint64_t v19 = 0;
    int v20 = 1;
    __int16 v21 = 0;
    AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderBase>::doReplacement((uint64_t)&v22, (uint64_t)"agc.gpe.get_payload_buffer", 26, (uint64_t)&__p);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v26);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v25);
    if (v23 != &v24) {
      free(v23);
    }
  }
  return v2;
}

uint64_t AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderBase>::doReplacement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::Module::getFunction();
  if (result)
  {
    size_t v6 = (llvm::Function *)result;
    int v7 = *(_DWORD *)(a4 + 24);
    if (v7 == 12)
    {
      uint64_t v10 = *(void *)(result + 8);
      while (v10)
      {
        uint64_t v11 = *(void *)(v10 + 24);
        uint64_t v10 = *(void *)(v10 + 8);
        BOOL v12 = *(void (**)(void *, uint64_t))(a4 + 8);
        uint64_t v13 = *(void *)(a4 + 16);
        unsigned int v14 = (void *)(*(void *)(a1 + 368) + (v13 >> 1));
        if (v13) {
          BOOL v12 = *(void (**)(void *, uint64_t))(*v14 + v12);
        }
        v12(v14, v11);
      }
      return llvm::Function::eraseFromParent(v6);
    }
    if (v7 == 11)
    {
      std::string::size_type v8 = *(unsigned char **)(a4 + 8);
      if (v8)
      {
        size_t v9 = strlen(*(const char **)(a4 + 8));
        *(void *)&v93[0] = (char *)&v93[1] + 8;
        *(_OWORD *)((char *)v93 + 8) = xmmword_1CADD6290;
        llvm::SmallVectorImpl<char>::append<char const*,void>(v93, v8, &v8[v9]);
      }
      else
      {
        *(void *)&v93[1] = 64;
        *(void *)&v93[0] = (char *)&v93[1] + 8;
        *((void *)&v93[0] + 1) = 0;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(v93, ".", "");
      if (*(void *)&v93[1] < *((void *)&v93[0] + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      llvm::Module::getOrInsertFunction();
      llvm::Value::replaceAllUsesWith();
      if (*(_OWORD **)&v93[0] != (_OWORD *)((char *)&v93[1] + 8)) {
        free(*(void **)&v93[0]);
      }
      return llvm::Function::eraseFromParent(v6);
    }
    uint64_t v15 = **(void **)(*(void *)(result + 24) + 16);
    BOOL v16 = (*(_DWORD *)(v15 + 8) & 0xFE) != 0x12 || *(unsigned char *)(a4 + 29) == 0;
    int v17 = !v16;
    if (v16) {
      int v18 = 1;
    }
    else {
      int v18 = *(_DWORD *)(v15 + 32);
    }
    int v80 = v18;
    int v78 = *(_DWORD *)(a1 + 104);
    v79 = (llvm::Function *)result;
    uint64_t v19 = *(void *)(result + 8);
    if (!v19)
    {
LABEL_110:
      *(_DWORD *)(a1 + 104) = v78;
      size_t v6 = v79;
      return llvm::Function::eraseFromParent(v6);
    }
    int v20 = (llvm::IRBuilderBase *)(a1 + 8);
    uint64_t v82 = a4;
    while (1)
    {
      __int16 v21 = *(llvm::Instruction **)(v19 + 24);
      uint64_t v22 = *(void *)(v19 + 8);
      if (*(_DWORD *)a4 == 1)
      {
        int v23 = 0;
      }
      else
      {
        if (*(_DWORD *)a4 != 2) {
          goto LABEL_27;
        }
        int v23 = 121;
      }
      *(_DWORD *)(a1 + 104) = v23;
LABEL_27:
      uint64_t v81 = v22;
      llvm::IRBuilderBase::SetInsertPoint(v20, v21);
      uint64_t v24 = llvm::UndefValue::get();
      if (v80)
      {
        for (uint64_t i = 0; i != v80; ++i)
        {
          v83 = (llvm::Value *)v24;
          uint64_t v94 = 0;
          memset(v93, 0, sizeof(v93));
          unint64_t v26 = llvm::CallBase::arg_end(v21) - (void)v21 + 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF);
          if ((v26 & 0x1FFFFFFFE0) != 0)
          {
            uint64_t v27 = (v26 >> 5);
            v28 = (llvm::Value **)v93;
            char v29 = v21;
            do
            {
              v30 = (llvm::Value **)((char *)v29 - 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
              char v31 = *v30;
              std::string *v28 = *v30;
              if (v17 && (*(_DWORD *)(*(void *)v31 + 8) & 0xFE) == 0x12)
              {
                __int16 v92 = 257;
                v32 = (llvm::Value *)llvm::ConstantInt::get();
                std::string *v28 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v20, v31, v32, (const llvm::Twine *)v91);
              }
              ++v28;
              char v29 = (llvm::Instruction *)((char *)v29 + 32);
              --v27;
            }
            while (v27);
          }
          if (*(unsigned char *)(v82 + 28))
          {
            char v33 = **(llvm::Type ***)&v93[0];
            if ((*(_DWORD *)(**(void **)&v93[0] + 8) & 0xFE) == 0x12) {
              char v33 = (llvm::Type *)**((void **)v33 + 2);
            }
            v91[0] = llvm::Type::getPrimitiveSizeInBits(v33);
            v91[1] = v34;
            if (llvm::TypeSize::operator unsigned long long() == 32)
            {
              int v35 = 0;
            }
            else
            {
              v36 = *(llvm::Type **)(a1 + 168);
              if ((*(_DWORD *)(**(void **)&v93[0] + 8) & 0xFE) == 0x12) {
                v36 = (llvm::Type *)llvm::FixedVectorType::get();
              }
              if ((v26 & 0x1FFFFFFFE0) != 0)
              {
                uint64_t v37 = (v26 >> 5);
                v38 = (llvm::Value **)v93;
                do
                {
                  char v39 = *v38;
                  __int16 v92 = 257;
                  *v38++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v20, v39, v36, (const llvm::Twine *)v91);
                  --v37;
                }
                while (v37);
                int v35 = 1;
              }
              else
              {
                int v35 = 1;
              }
            }
          }
          else
          {
            int v35 = 0;
          }
          if (llvm::FPMathOperator::classof((uint64_t)v21)) {
            unsigned int FastMathFlags = llvm::Instruction::getFastMathFlags(v21);
          }
          else {
            unsigned int FastMathFlags = 0;
          }
          uint64_t v41 = *(void *)(**(void **)(a1 + 368) - 24) + *(void *)(a1 + 368);
          long long v88 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v89, v20);
          int v90 = *(_DWORD *)(a1 + 104);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v88, v41 + 40);
          if (v89) {
            llvm::MetadataTracking::untrack();
          }
          switch(*(_DWORD *)(v82 + 24))
          {
            case 1:
              char v42 = *(uint64_t (**)(void *))(v82 + 8);
              uint64_t v43 = *(void *)(v82 + 16);
              std::string v44 = (void *)(*(void *)(a1 + 368) + (v43 >> 1));
              if (v43) {
                char v42 = *(uint64_t (**)(void *))(*v44 + v42);
              }
              uint64_t v73 = v42(v44);
              goto LABEL_95;
            case 2:
              std::string v46 = *(uint64_t (**)(void *, uint64_t))(v82 + 8);
              uint64_t v47 = *(void *)(v82 + 16);
              uint64_t v48 = *(void *)v21;
              std::string v49 = (void *)(*(void *)(a1 + 368) + (v47 >> 1));
              if ((v47 & 1) == 0) {
                goto LABEL_78;
              }
              goto LABEL_77;
            case 3:
              std::string v46 = *(uint64_t (**)(void *, uint64_t))(v82 + 8);
              uint64_t v50 = *(void *)(v82 + 16);
              uint64_t v48 = *(void *)&v93[0];
              std::string v49 = (void *)(*(void *)(a1 + 368) + (v50 >> 1));
              if ((v50 & 1) == 0) {
                goto LABEL_78;
              }
LABEL_77:
              std::string v46 = *(uint64_t (**)(void *, uint64_t))(*v49 + v46);
LABEL_78:
              uint64_t v73 = v46(v49, v48);
              goto LABEL_95;
            case 4:
              std::string v51 = (unsigned int *)(*(void *)&v93[0] + 24);
              if (*(_DWORD *)(*(void *)&v93[0] + 32) >= 0x41u) {
                std::string v51 = *(unsigned int **)v51;
              }
              uint64_t v52 = *v51;
              std::string v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v82 + 8);
              uint64_t v54 = *(void *)(v82 + 16);
              uint64_t v55 = *(void *)v21;
              std::string v56 = (void *)(*(void *)(a1 + 368) + (v54 >> 1));
              if (v54) {
                std::string v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v56 + v53);
              }
              goto LABEL_82;
            case 5:
              std::string v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v82 + 8);
              uint64_t v57 = *(void *)(v82 + 16);
              uint64_t v52 = *((void *)&v93[0] + 1);
              uint64_t v55 = *(void *)&v93[0];
              std::string v56 = (void *)(*(void *)(a1 + 368) + (v57 >> 1));
              if (v57) {
                std::string v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v56 + v53);
              }
LABEL_82:
              uint64_t v73 = v53(v56, v55, v52);
              goto LABEL_95;
            case 6:
              std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v59 = *(void *)(v82 + 16);
              uint64_t v61 = (const char *)*((void *)&v93[0] + 1);
              std::string v60 = *(_OWORD **)&v93[0];
              v62 = (void *)(*(void *)(a1 + 368) + (v59 >> 1));
              if (v59) {
                std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(*v62 + v58);
              }
              uint64_t v64 = FastMathFlags;
              goto LABEL_91;
            case 7:
              std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v63 = *(void *)(v82 + 16);
              uint64_t v61 = (const char *)*((void *)&v93[0] + 1);
              std::string v60 = *(_OWORD **)&v93[0];
              uint64_t v64 = *(void *)&v93[1];
              v62 = (void *)(*(void *)(a1 + 368) + (v63 >> 1));
              if (v63) {
                std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(*v62 + v58);
              }
              goto LABEL_91;
            case 8:
              v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v66 = *(void *)(v82 + 16);
              v68 = (_OWORD *)*((void *)&v93[0] + 1);
              uint64_t v67 = *(void *)&v93[0];
              v69 = *(const char **)&v93[1];
              v70 = (void *)(*(void *)(a1 + 368) + (v66 >> 1));
              if (v66) {
                v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(*v70 + v65);
              }
              uint64_t v74 = FastMathFlags;
              goto LABEL_94;
            case 9:
              std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v71 = *(void *)(v82 + 16);
              v62 = (void *)(*(void *)(a1 + 368) + (v71 >> 1));
              if (v71) {
                std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(*v62 + v58);
              }
              std::string v60 = v93;
              uint64_t v61 = "";
              uint64_t v64 = 0;
LABEL_91:
              uint64_t v73 = v58(v62, v60, v61, v64);
              goto LABEL_95;
            case 0xA:
              v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v72 = *(void *)(v82 + 16);
              uint64_t v67 = *(void *)v21;
              v70 = (void *)(*(void *)(a1 + 368) + (v72 >> 1));
              if (v72) {
                v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(*v70 + v65);
              }
              v68 = v93;
              v69 = "";
              uint64_t v74 = 0;
LABEL_94:
              uint64_t v73 = v65(v70, v67, v68, v69, v74);
LABEL_95:
              FPTrunc = (llvm::Value *)v73;
              break;
            default:
              FPTrunc = 0;
              break;
          }
          uint64_t v75 = *(void *)(**(void **)(a1 + 368) - 24) + *(void *)(a1 + 368);
          long long v85 = *(_OWORD *)(v75 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v86, (llvm::IRBuilderBase *)(v75 + 40));
          int v87 = *(_DWORD *)(v75 + 136);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v85, (uint64_t)v20);
          if (v86) {
            llvm::MetadataTracking::untrack();
          }
          if (v35)
          {
            uint64_t v76 = *(void *)v21;
            if (v17 && (*(_DWORD *)(v76 + 8) & 0xFE) == 0x12) {
              uint64_t v76 = **(void **)(v76 + 16);
            }
            __int16 v92 = 257;
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v20, FPTrunc, (llvm::Type *)v76, (const llvm::Twine *)v91);
            if (!v17) {
              goto LABEL_106;
            }
          }
          else if (!v17)
          {
            goto LABEL_106;
          }
          __int16 v92 = 257;
          v77 = (llvm::Value *)llvm::ConstantInt::get();
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v20, v83, FPTrunc, v77, (const llvm::Twine *)v91);
LABEL_106:
          uint64_t v24 = (uint64_t)FPTrunc;
        }
      }
      if (*(void *)v21 != *(void *)(a1 + 144)) {
        llvm::Value::replaceAllUsesWith();
      }
      llvm::Instruction::eraseFromParent(v21);
      a4 = v82;
      uint64_t v19 = v81;
      if (!v81) {
        goto LABEL_110;
      }
    }
  }
  return result;
}

uint64_t AGCLLVMUserObjectShaderBase::getEmulationPayloadBuffer(AGCLLVMUserObjectShaderBase *this)
{
  return AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 2, 0);
}

uint64_t AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(void *a1, int a2, char a3)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  if (!a1[561])
  {
    uint64_t v6 = *a1;
    v156 = *(char **)((char *)a1 + *(void *)(*a1 - 24) + 232);
    uint64_t v157 = *(void *)((char *)a1 + *(void *)(v6 - 24) + 232);
    uint64_t v158 = *(void *)((char *)a1 + *(void *)(v6 - 24) + 232);
    uint64_t v159 = *(void *)((char *)a1 + *(void *)(v6 - 24) + 232);
    uint64_t v160 = *(void *)((char *)a1 + *(void *)(v6 - 24) + 232);
    uint64_t v161 = *(void *)((char *)a1 + *(void *)(v6 - 24) + 232);
    uint64_t v162 = *(void *)((char *)a1 + *(void *)(v6 - 24) + 232);
    llvm::StructType::create();
    int v7 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    llvm::PointerType::get();
    v156 = "agc.mesh_state_buffer";
    LOWORD(v160) = 259;
    llvm::GlobalVariable::GlobalVariable();
    *((unsigned char *)v7 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    std::string::size_type v8 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v9 = *((void *)v8 + 47);
    uint64_t v10 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v8 + 32), v7);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v9, v10);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 559), (uint64_t)v7);
  }
  if (!a1[564])
  {
    uint64_t v11 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    llvm::PointerType::get();
    llvm::PointerType::get();
    v156 = "agc.gpe_mailbox_state_base";
    LOWORD(v160) = 259;
    llvm::GlobalVariable::GlobalVariable();
    *((unsigned char *)v11 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    BOOL v12 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v13 = *((void *)v12 + 47);
    uint64_t v14 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v12 + 32), v11);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v13, v14);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 562), (uint64_t)v11);
  }
  uint64_t __src = llvm::PointerType::get();
  v156 = (char *)&v158;
  uint64_t v157 = 0x100000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v156, &__src, v154);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v16 = v15;
  if (v156 != (char *)&v158) {
    free(v156);
  }
  EmulationStateCacheForCurrentFunction = AGCLLVMUserObjectShaderBase::getEmulationStateCacheForCurrentFunction((AGCLLVMUserObjectShaderBase *)a1);
  uint64_t TypeByName = llvm::StructType::getTypeByName();
  int v18 = (char *)a1 + *(void *)(*a1 - 24);
  long long v146 = *(_OWORD *)(v18 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v147, (llvm::IRBuilderBase *)(v18 + 40));
  int v148 = *((_DWORD *)v18 + 34);
  if ((a3 & 1) == 0)
  {
    int v20 = (char *)a1 + *(void *)(*a1 - 24);
    __int16 v21 = (llvm::IRBuilderBase *)(v20 + 40);
    uint64_t v22 = *(void *)(*(void *)(*((void *)v20 + 11) + 56) + 80);
    if (v22) {
      int v23 = (llvm::BasicBlock *)(v22 - 24);
    }
    else {
      int v23 = 0;
    }
    uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v23);
    if (FirstInsertionPt) {
      uint64_t v25 = (llvm::Instruction *)(FirstInsertionPt - 24);
    }
    else {
      uint64_t v25 = 0;
    }
    llvm::IRBuilderBase::SetInsertPoint(v21, v25);
  }
  if (!EmulationStateCacheForCurrentFunction[11])
  {
    unint64_t v26 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    uint64_t v27 = (llvm::Type **)a1[561];
    LOWORD(v160) = 257;
    v28 = AGCLLVMBuilder::tryDeducePointeeType(v27, v19);
    uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v26 + 5, v28, (uint64_t)v27, 0, (uint64_t)&v156);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 9), AlignedLoad);
  }
  if (!EmulationStateCacheForCurrentFunction[5])
  {
    llvm::IRBuilderBase::SetInsertPoint((char **)((char *)a1 + *(void *)(*a1 - 24) + 40), *(char **)(EmulationStateCacheForCurrentFunction[11] + 40), *(char **)(EmulationStateCacheForCurrentFunction[11] + 32));
    v149[0] = 0;
    v30 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    char v31 = (llvm::Type **)a1[564];
    LOWORD(v160) = 257;
    char v33 = AGCLLVMBuilder::tryDeducePointeeType(v31, v32);
    v30 += 5;
    uint64_t v34 = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad(v30, v33, (uint64_t)v31, 0, (uint64_t)&v156);
    int v35 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v155 = 257;
    uint64_t v37 = AGCLLVMBuilder::tryDeducePointeeType(v34, v36);
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v30, v37, (llvm::Value *)v34, v35, (const llvm::Twine *)&__src);
    __int16 v145 = 257;
    v40 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v39);
    v149[0] = llvm::IRBuilderBase::CreateAlignedLoad(v30, v40, (uint64_t)GEP, 0, (uint64_t)v144);
    uint64_t v41 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
    LOWORD(v160) = 257;
    char v42 = llvm::IRBuilderBase::CreateCall(v41, *(void *)(v16 + 24), v16, (uint64_t)v149, 1, (uint64_t)&v156);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 3), (uint64_t)v42);
  }
  if (!EmulationStateCacheForCurrentFunction[8])
  {
    llvm::IRBuilderBase::SetInsertPoint((char **)((char *)a1 + *(void *)(*a1 - 24) + 40), *(char **)(EmulationStateCacheForCurrentFunction[11] + 40), *(char **)(EmulationStateCacheForCurrentFunction[11] + 32));
    v149[0] = 0;
    uint64_t v43 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    std::string v44 = (llvm::Type **)a1[564];
    LOWORD(v160) = 257;
    std::string v46 = AGCLLVMBuilder::tryDeducePointeeType(v44, v45);
    v43 += 5;
    uint64_t v47 = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad(v43, v46, (uint64_t)v44, 0, (uint64_t)&v156);
    uint64_t v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v155 = 257;
    uint64_t v50 = AGCLLVMBuilder::tryDeducePointeeType(v47, v49);
    std::string v51 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v43, v50, (llvm::Value *)v47, v48, (const llvm::Twine *)&__src);
    __int16 v145 = 257;
    std::string v53 = AGCLLVMBuilder::tryDeducePointeeType(v51, v52);
    v149[0] = llvm::IRBuilderBase::CreateAlignedLoad(v43, v53, (uint64_t)v51, 0, (uint64_t)v144);
    uint64_t v54 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
    LOWORD(v160) = 257;
    uint64_t v55 = llvm::IRBuilderBase::CreateCall(v54, *(void *)(v16 + 24), v16, (uint64_t)v149, 1, (uint64_t)&v156);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 6), (uint64_t)v55);
  }
  switch(a2)
  {
    case 0:
      llvm::IRBuilderBase::SetInsertPoint((char **)((char *)a1 + *(void *)(*a1 - 24) + 40), *(char **)(EmulationStateCacheForCurrentFunction[5] + 40), *(char **)(EmulationStateCacheForCurrentFunction[5] + 32));
      std::string v56 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 12);
      if (EmulationStateCacheForCurrentFunction[14]) {
        goto LABEL_34;
      }
      uint64_t v57 = (llvm::Value *)EmulationStateCacheForCurrentFunction[5];
      std::string v58 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v59 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v152 = llvm::ConstantInt::get();
      std::string v60 = (uint64_t *)(v58 + 40);
      LOWORD(v160) = 257;
      uint64_t v61 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v58 + 40), TypeByName, v59, &v151, 2, (uint64_t)&v156);
      __int16 v155 = 257;
      uint64_t v63 = AGCLLVMBuilder::tryDeducePointeeType(v61, v62);
      uint64_t v64 = llvm::IRBuilderBase::CreateAlignedLoad(v60, v63, (uint64_t)v61, 0, (uint64_t)&__src);
      uint64_t v65 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 240);
      __int16 v145 = 257;
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v60, 39, v64, v65, (uint64_t)v144);
      __int16 v150 = 257;
      uint64_t Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v60, v57, Cast, (const llvm::Twine *)v149);
      uint64_t v68 = llvm::PointerType::get();
      v69 = "agc.gpe.object_metadata";
      goto LABEL_33;
    case 1:
      llvm::IRBuilderBase::SetInsertPoint((char **)((char *)a1 + *(void *)(*a1 - 24) + 40), *(char **)(EmulationStateCacheForCurrentFunction[8] + 40), *(char **)(EmulationStateCacheForCurrentFunction[8] + 32));
      std::string v56 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 15);
      if (EmulationStateCacheForCurrentFunction[17]) {
        goto LABEL_34;
      }
      v103 = (llvm::Value *)EmulationStateCacheForCurrentFunction[8];
      v104 = (char *)a1 + *(void *)(*a1 - 24);
      v105 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v152 = llvm::ConstantInt::get();
      std::string v60 = (uint64_t *)(v104 + 40);
      LOWORD(v160) = 257;
      v106 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v104 + 40), TypeByName, v105, &v151, 2, (uint64_t)&v156);
      __int16 v155 = 257;
      v108 = AGCLLVMBuilder::tryDeducePointeeType(v106, v107);
      uint64_t v109 = llvm::IRBuilderBase::CreateAlignedLoad(v60, v108, (uint64_t)v106, 0, (uint64_t)&__src);
      uint64_t v110 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 240);
      __int16 v145 = 257;
      v111 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v60, 39, v109, v110, (uint64_t)v144);
      __int16 v150 = 257;
      uint64_t Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v60, v103, v111, (const llvm::Twine *)v149);
      uint64_t v68 = llvm::PointerType::get();
      v69 = "agc.gpe.mesh_metadata";
      goto LABEL_33;
    case 2:
      llvm::IRBuilderBase::SetInsertPoint((char **)((char *)a1 + *(void *)(*a1 - 24) + 40), *(char **)(EmulationStateCacheForCurrentFunction[5] + 40), *(char **)(EmulationStateCacheForCurrentFunction[5] + 32));
      uint64_t v71 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 18);
      if (EmulationStateCacheForCurrentFunction[20]) {
        goto LABEL_40;
      }
      uint64_t v72 = (llvm::Value *)EmulationStateCacheForCurrentFunction[5];
      uint64_t v73 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v74 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v152 = llvm::ConstantInt::get();
      uint64_t v75 = (uint64_t *)(v73 + 40);
      LOWORD(v160) = 257;
      uint64_t v76 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v73 + 40), TypeByName, v74, &v151, 2, (uint64_t)&v156);
      __int16 v155 = 257;
      int v78 = AGCLLVMBuilder::tryDeducePointeeType(v76, v77);
      uint64_t v79 = llvm::IRBuilderBase::CreateAlignedLoad(v75, v78, (uint64_t)v76, 0, (uint64_t)&__src);
      uint64_t v80 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 240);
      __int16 v145 = 257;
      uint64_t v81 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v75, 39, v79, v80, (uint64_t)v144);
      __int16 v150 = 257;
      uint64_t v82 = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v75, v72, v81, (const llvm::Twine *)v149);
      uint64_t v83 = llvm::PointerType::get();
      v84 = "agc.gpe.payload_buffer";
      goto LABEL_39;
    case 3:
      llvm::IRBuilderBase::SetInsertPoint((char **)((char *)a1 + *(void *)(*a1 - 24) + 40), *(char **)(EmulationStateCacheForCurrentFunction[8] + 40), *(char **)(EmulationStateCacheForCurrentFunction[8] + 32));
      std::string v56 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 21);
      if (EmulationStateCacheForCurrentFunction[23]) {
        goto LABEL_34;
      }
      long long v85 = (llvm::Value *)EmulationStateCacheForCurrentFunction[8];
      uint64_t v86 = (char *)a1 + *(void *)(*a1 - 24);
      int v87 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v152 = llvm::ConstantInt::get();
      std::string v60 = (uint64_t *)(v86 + 40);
      LOWORD(v160) = 257;
      long long v88 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v86 + 40), TypeByName, v87, &v151, 2, (uint64_t)&v156);
      __int16 v155 = 257;
      int v90 = AGCLLVMBuilder::tryDeducePointeeType(v88, v89);
      uint64_t v91 = llvm::IRBuilderBase::CreateAlignedLoad(v60, v90, (uint64_t)v88, 0, (uint64_t)&__src);
      uint64_t v92 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 240);
      __int16 v145 = 257;
      v93 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v60, 39, v91, v92, (uint64_t)v144);
      __int16 v150 = 257;
      uint64_t Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v60, v85, v93, (const llvm::Twine *)v149);
      uint64_t v68 = llvm::PointerType::get();
      v69 = "agc.gpe.vdm_stream";
LABEL_33:
      v142[0] = v69;
      __int16 v143 = 259;
      uint64_t v112 = llvm::IRBuilderBase::CreateCast((uint64_t)v60, 48, Add, v68, (uint64_t)v142);
      llvm::ValueHandleBase::operator=(v56, v112);
LABEL_34:
      v113 = (char *)a1 + *(void *)(*a1 - 24);
      v114 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)&v156, 2u, v56);
      uint64_t v115 = *((void *)v113 + 29);
      goto LABEL_41;
    case 4:
      llvm::IRBuilderBase::SetInsertPoint((char **)((char *)a1 + *(void *)(*a1 - 24) + 40), *(char **)(EmulationStateCacheForCurrentFunction[8] + 40), *(char **)(EmulationStateCacheForCurrentFunction[8] + 32));
      uint64_t v71 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 24);
      if (EmulationStateCacheForCurrentFunction[26]) {
        goto LABEL_40;
      }
      uint64_t v94 = (llvm::Value *)EmulationStateCacheForCurrentFunction[8];
      uint64_t v95 = (char *)a1 + *(void *)(*a1 - 24);
      v96 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v152 = llvm::ConstantInt::get();
      uint64_t v75 = (uint64_t *)(v95 + 40);
      LOWORD(v160) = 257;
      v97 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v95 + 40), TypeByName, v96, &v151, 2, (uint64_t)&v156);
      __int16 v155 = 257;
      v99 = AGCLLVMBuilder::tryDeducePointeeType(v97, v98);
      uint64_t v100 = llvm::IRBuilderBase::CreateAlignedLoad(v75, v99, (uint64_t)v97, 0, (uint64_t)&__src);
      uint64_t v101 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 240);
      __int16 v145 = 257;
      v102 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v75, 39, v100, v101, (uint64_t)v144);
      __int16 v150 = 257;
      uint64_t v82 = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v75, v94, v102, (const llvm::Twine *)v149);
      uint64_t v83 = llvm::PointerType::get();
      v84 = "agc.gpe.index_buffer";
      goto LABEL_39;
    case 5:
      llvm::IRBuilderBase::SetInsertPoint((char **)((char *)a1 + *(void *)(*a1 - 24) + 40), *(char **)(EmulationStateCacheForCurrentFunction[8] + 40), *(char **)(EmulationStateCacheForCurrentFunction[8] + 32));
      uint64_t v71 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 27);
      if (EmulationStateCacheForCurrentFunction[29]) {
        goto LABEL_40;
      }
      v116 = (llvm::Value *)EmulationStateCacheForCurrentFunction[8];
      v117 = (char *)a1 + *(void *)(*a1 - 24);
      v118 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v152 = llvm::ConstantInt::get();
      uint64_t v75 = (uint64_t *)(v117 + 40);
      LOWORD(v160) = 257;
      v119 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v117 + 40), TypeByName, v118, &v151, 2, (uint64_t)&v156);
      __int16 v155 = 257;
      v121 = AGCLLVMBuilder::tryDeducePointeeType(v119, v120);
      uint64_t v122 = llvm::IRBuilderBase::CreateAlignedLoad(v75, v121, (uint64_t)v119, 0, (uint64_t)&__src);
      uint64_t v123 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 240);
      __int16 v145 = 257;
      v124 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v75, 39, v122, v123, (uint64_t)v144);
      __int16 v150 = 257;
      uint64_t v82 = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v75, v116, v124, (const llvm::Twine *)v149);
      uint64_t v83 = llvm::PointerType::get();
      v84 = "agc.gpe.vertex_buffer";
      goto LABEL_39;
    case 6:
      llvm::IRBuilderBase::SetInsertPoint((char **)((char *)a1 + *(void *)(*a1 - 24) + 40), *(char **)(EmulationStateCacheForCurrentFunction[8] + 40), *(char **)(EmulationStateCacheForCurrentFunction[8] + 32));
      uint64_t v71 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 30);
      if (EmulationStateCacheForCurrentFunction[32]) {
        goto LABEL_40;
      }
      v125 = (llvm::Value *)EmulationStateCacheForCurrentFunction[8];
      v126 = (char *)a1 + *(void *)(*a1 - 24);
      v127 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v152 = llvm::ConstantInt::get();
      uint64_t v75 = (uint64_t *)(v126 + 40);
      LOWORD(v160) = 257;
      v128 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v126 + 40), TypeByName, v127, &v151, 2, (uint64_t)&v156);
      __int16 v155 = 257;
      v130 = AGCLLVMBuilder::tryDeducePointeeType(v128, v129);
      uint64_t v131 = llvm::IRBuilderBase::CreateAlignedLoad(v75, v130, (uint64_t)v128, 0, (uint64_t)&__src);
      uint64_t v132 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 240);
      __int16 v145 = 257;
      v133 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v75, 39, v131, v132, (uint64_t)v144);
      __int16 v150 = 257;
      uint64_t v82 = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v75, v125, v133, (const llvm::Twine *)v149);
      uint64_t v83 = llvm::PointerType::get();
      v84 = "agc.gpe.primitive_buffer";
LABEL_39:
      v142[0] = v84;
      __int16 v143 = 259;
      uint64_t v134 = llvm::IRBuilderBase::CreateCast((uint64_t)v75, 48, v82, v83, (uint64_t)v142);
      llvm::ValueHandleBase::operator=(v71, v134);
LABEL_40:
      v135 = (char *)a1 + *(void *)(*a1 - 24);
      v114 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)&v156, 2u, v71);
      uint64_t v115 = *((void *)v135 + 27);
LABEL_41:
      uint64_t v159 = v115;
      uint64_t v70 = v158;
      if (v158 != -8192 && v158 != -4096 && v158) {
        llvm::ValueHandleBase::RemoveFromUseList(v114);
      }
LABEL_45:
      uint64_t v136 = (uint64_t)a1 + *(void *)(*a1 - 24) + 32;
      long long v139 = v146;
      uint64_t v140 = v147;
      if (v147) {
        llvm::MetadataTracking::track();
      }
      int v141 = v148;
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v139, v136 + 8);
      if (v140) {
        llvm::MetadataTracking::untrack();
      }
      if (v147) {
        llvm::MetadataTracking::untrack();
      }
      return v70;
    default:
      uint64_t v70 = 0;
      goto LABEL_45;
  }
}

uint64_t AGCLLVMUserObjectShaderBase::buildQuadElement(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = AGCLLVMGen3TargetLowerer::buildQuadElement(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserObjectShaderBase::buildSimdGroupIndexInThreadgroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type *))(*(void *)v5 + 1544))(v5, &v9, a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserObjectShaderBase::buildThreadIndexInSimdGroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type *))(*(void *)v5 + 1536))(v5, &v9, a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserObjectShaderBase::buildQuadGroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = AGCLLVMGen3TargetLowerer::buildQuadGroup(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserObjectShaderBase::buildDispatchSimdgroupsPerThreadgroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  return AGCLLVMUserObjectShaderBase::buildGroupsPerThreadgroup<5u>(this, a2, 1);
}

uint64_t AGCLLVMUserObjectShaderBase::buildGroupsPerThreadgroup<5u>(AGCLLVMUserObjectShaderBase *a1, llvm::Type *a2, int a3)
{
  uint64_t v5 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  if (a3)
  {
    uint64_t v6 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(a1, a2, 0);
    uint64_t v7 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(a1, a2, 1);
    __int16 v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v20);
    long long v9 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    uint64_t v10 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(a1, a2, 2);
  }
  else
  {
    int v11 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalSize(a1, a2, 0);
    BOOL v12 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalSize(a1, a2, 1);
    __int16 v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v11, v12, (const llvm::Twine *)v20);
    long long v9 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    uint64_t v10 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalSize(a1, a2, 2);
  }
  __int16 v21 = 257;
  uint64_t v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Mul, v10, (const llvm::Twine *)v20);
  uint64_t v14 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v21 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v20);
  int v17 = (llvm::Value *)llvm::ConstantInt::get();
  v19[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v14, Add, v17, (const llvm::Twine *)v19);
}

uint64_t AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  std::string::size_type v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildThreadgroupDispatchSize(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMUserObjectShaderBase::buildLocalSize(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  std::string::size_type v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildLocalSize(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMUserObjectShaderBase::buildDispatchQuadgroupsPerThreadgroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  return AGCLLVMUserObjectShaderBase::buildGroupsPerThreadgroup<2u>(this, a2, 1);
}

uint64_t AGCLLVMUserObjectShaderBase::buildGroupsPerThreadgroup<2u>(AGCLLVMUserObjectShaderBase *a1, llvm::Type *a2, int a3)
{
  uint64_t v5 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  if (a3)
  {
    uint64_t v6 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(a1, a2, 0);
    uint64_t v7 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(a1, a2, 1);
    __int16 v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v20);
    uint64_t v9 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    uint64_t v10 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(a1, a2, 2);
  }
  else
  {
    long long v11 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalSize(a1, a2, 0);
    uint64_t v12 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalSize(a1, a2, 1);
    __int16 v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v11, v12, (const llvm::Twine *)v20);
    uint64_t v9 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    uint64_t v10 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalSize(a1, a2, 2);
  }
  __int16 v21 = 257;
  int v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Mul, v10, (const llvm::Twine *)v20);
  uint64_t v14 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v21 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v20);
  int v17 = (llvm::Value *)llvm::ConstantInt::get();
  v19[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v14, Add, v17, (const llvm::Twine *)v19);
}

uint64_t AGCLLVMUserObjectShaderBase::buildSimdgroupsPerThreadgroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  return AGCLLVMUserObjectShaderBase::buildGroupsPerThreadgroup<5u>(this, a2, 0);
}

uint64_t AGCLLVMUserObjectShaderBase::buildQuadgroupsPerThreadgroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  return AGCLLVMUserObjectShaderBase::buildGroupsPerThreadgroup<2u>(this, a2, 0);
}

uint64_t AGCLLVMUserObjectShaderBase::buildGroupID(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  std::string::size_type v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMUserObjectShaderBase::buildNumGroups(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 504))();
}

uint64_t AGCLLVMUserObjectShaderBase::buildLocalLinearID(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = AGCLLVMGen3TargetLowerer::buildLocalLinearID(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserObjectShaderBase::buildLocalID(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  std::string::size_type v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type *, uint64_t))(*(void *)v7 + 256))(v7, &v11, a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMUserObjectShaderBase::buildGlobalID(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  std::string::size_type v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildGlobalID(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMUserObjectShaderBase::buildGlobalSize(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 496))();
}

uint64_t AGCLLVMUserObjectShaderBase::setupShaderOutputs(AGCLLVMUserObjectShaderBase *this)
{
  Function = (llvm::Function *)llvm::Module::getFunction();
  llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(*((void *)Function + 1) + 24));
  llvm::Function::eraseFromParent(Function);
  return 1;
}

uint64_t AGCLLVMUserObjectShaderBase::setupShaderInputs(AGCLLVMUserObjectShaderBase *this)
{
  v34[3] = *MEMORY[0x1E4F143B8];
  char v31 = (char *)this + 4384;
  uint64_t v2 = *((void *)this + 22);
  uint64_t v3 = *(void *)(v2 + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    uint64_t v6 = *((void *)this + 22);
    uint64_t v5 = *(void *)(v2 + 88);
    if (*(_WORD *)(v6 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    }
    uint64_t v2 = v6;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 88);
  }
  uint64_t v7 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
  if (v5 == v7)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      if (*(void *)(v5 + 8))
      {
        uint64_t v9 = *(void *)(v4 + 40);
        uint64_t v10 = v9 ? (llvm::Instruction *)(v9 - 24) : 0;
        AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v10, *((void *)this + 6));
        uint64_t v11 = *(unsigned int *)(v5 + 32);
        uint64_t v12 = *(void *)(*((void *)this + 11) + 8 * v11);
        if ((AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v5, v11, v12) & 1) == 0)
        {
          if (isStringMDNode(*(llvm::MDString **)(v12 - 8 * *(unsigned int *)(v12 + 8) + 8), "air.payload"))
          {
            v32[0] = 2;
            if (*(_DWORD *)(v12 + 8) >= 3u)
            {
              do
              {
                if (*((_DWORD *)this + 1094)
                  || !parseMDInt("air.arg_type_size", v12, v32, (_DWORD *)this + 1094))
                {
                  char v14 = parseMDInt("air.arg_type_align_size", v12, v32, (_DWORD *)this + 1095);
                  unsigned int v13 = v32[0];
                  if ((v14 & 1) == 0) {
                    unsigned int v13 = ++v32[0];
                  }
                }
                else
                {
                  unsigned int v13 = v32[0];
                }
              }
              while (v13 < *(_DWORD *)(v12 + 8));
            }
            uint64_t v8 = v5;
          }
          else if (isStringMDNode(*(llvm::MDString **)(v12 - 8 * *(unsigned int *)(v12 + 8) + 8), "air.amplification_count"))
          {
            uint64_t v16 = (llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32);
            VertexAmpCount = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpCount(this, v15);
            AGCLLVMBuilder::truncateToSmall(v16, VertexAmpCount, *(llvm::Type **)v5);
            llvm::Value::replaceAllUsesWith();
            v31[20] = 1;
          }
        }
      }
      v5 += 40;
    }
    while (v5 != v7);
  }
  int v18 = *((_DWORD *)this + 1094);
  *((_DWORD *)this + 1093) = v18;
  if (*v31)
  {
    v18 += 16;
    *((_DWORD *)this + 1094) = v18;
    unsigned int v19 = *((_DWORD *)this + 1095);
    if (v19 <= 4) {
      unsigned int v19 = 4;
    }
    *((_DWORD *)this + 1095) = v19;
    *((_DWORD *)this + 1097) = 16;
  }
  if (v31[1])
  {
    *((_DWORD *)this + 1094) = v18 + 16;
    unsigned int v20 = *((_DWORD *)this + 1095);
    if (v20 <= 4) {
      unsigned int v20 = 4;
    }
    *((_DWORD *)this + 1095) = v20;
  }
  if (v8) {
    (*(void (**)(AGCLLVMUserObjectShaderBase *, uint64_t))(*(void *)this + 512))(this, v8);
  }
  if ((*(unsigned int (**)(AGCLLVMUserObjectShaderBase *))(*(void *)this + 488))(this)
    && *((_DWORD *)this + 1094))
  {
    uint64_t v21 = *(void *)(v4 + 48);
    if (v21) {
      uint64_t v22 = (llvm::Instruction *)(v21 - 24);
    }
    else {
      uint64_t v22 = 0;
    }
    AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v22, *((void *)this + 6));
    int v23 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v24 = (uint64_t)(v23 + 32);
    uint64_t v25 = *((void *)v23 + 50);
    uint64_t v26 = *(void *)(v25 + 960);
    if (v26) {
      size_t v27 = strlen(*(const char **)(v25 + 960));
    }
    else {
      size_t v27 = 0;
    }
    uint64_t v28 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(v24, v26, v27, *(void *)(v24 + 144), *(void *)(v24 + 192), *(void *)(v24 + 192), *(void *)(v24 + 192));
    v34[0] = llvm::ConstantInt::get();
    v34[1] = llvm::ConstantInt::get();
    v34[2] = llvm::ConstantInt::get();
    char v29 = (char *)this + *(void *)(*(void *)this - 24) + 40;
    __int16 v33 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v29, *(void *)(v28 + 24), v28, (uint64_t)v34, 3, (uint64_t)v32);
  }
  return 1;
}

uint64_t AGCLLVMUserObjectShaderBase::getVertexAmpCount(AGCLLVMUserObjectShaderBase *this, llvm::Value *a2)
{
  if (*((unsigned char *)this + 4405))
  {
    if (!*((void *)this + 553))
    {
      uint64_t v4 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      uint64_t v12 = "agc.driver_constants.amp_count";
      __int16 v13 = 259;
      uint64_t v5 = llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v5 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v7 = *((void *)v6 + 47);
      uint64_t v8 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v6 + 32), v4);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v7, v8);
      llvm::ValueHandleBase::operator=((AGCLLVMUserObjectShaderBase *)((char *)this + 4408), (uint64_t)v4);
    }
    uint64_t v9 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
    uint64_t v10 = (llvm::Type **)*((void *)this + 553);
    __int16 v13 = 257;
    uint64_t v11 = AGCLLVMBuilder::tryDeducePointeeType(v10, a2);
    return llvm::IRBuilderBase::CreateAlignedLoad(v9 + 5, v11, (uint64_t)v10, 0, (uint64_t)&v12);
  }
  else
  {
    return llvm::ConstantInt::get();
  }
}

uint64_t AGCLLVMUserObjectShaderBase::initCompile(AGCLLVMUserObjectShaderBase *this)
{
  AGCLLVMUserObject::initCompile(this);
  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  uint64_t v2 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4 != v2 + 8)
  {
    do
    {
      if (v4) {
        uint64_t v5 = (uint64_t *)(v4 - 56);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *v5;
      if (*v5)
      {
        int v7 = *(_DWORD *)(v6 + 8);
        if ((v7 & 0xFE) == 0x12) {
          int v7 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
        }
        if ((v7 & 0xFFFFFF00) == 0x300) {
          llvm::GlobalObject::setSection();
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
  }
  return 1;
}

uint64_t AGCLLVMUserObjectShader::isDMAPromotionDisabled(AGCLLVMUserObjectShader *this)
{
  return *(unsigned __int8 *)(*((void *)this + 565) + 12) >> 7;
}

BOOL AGCLLVMUserObjectShader::enableSoftFaultOptimization(AGCLLVMUserObjectShader *this)
{
  return (*(unsigned char *)(*((void *)this + 565) + 15) & 0x40) == 0;
}

uint64_t AGCLLVMUserObjectShader::getForwardProgressMode(AGCLLVMUserObjectShader *this)
{
  return *(_DWORD *)(*((void *)this + 565) + 12) >> 31;
}

uint64_t AGCLLVMUserObjectShader::getBufferBoundsCheckMode(AGCLLVMUserObjectShader *this)
{
  return (*(_DWORD *)(*((void *)this + 565) + 12) >> 4) & 7;
}

uint64_t AGCLLVMUserObjectShader::getShaderType(AGCLLVMUserObjectShader *this)
{
  return 1;
}

const char *AGCLLVMUserObjectShader::dumpType(AGCLLVMUserObjectShader *this)
{
  return "object";
}

uint64_t AGCLLVMUserObjectShader::buildNumGroups(AGCLLVMUserObjectShader *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserObjectShader *))(*(void *)this + 496))(this);
  int v7 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(this, a2, a3);
  uint64_t v8 = (AGCLLVMUserObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v16 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v8, v6, v7, (const llvm::Twine *)v15);
  uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
  v14[16] = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v8, Add, v10, (const llvm::Twine *)v14);
  uint64_t v12 = (AGCLLVMUserObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v16 = 257;
  return llvm::IRBuilderBase::CreateUDiv(v12, Sub, v7, (const llvm::Twine *)v15);
}

uint64_t AGCLLVMUserObjectShader::buildGlobalSize(AGCLLVMUserObjectShader *this, llvm::Type *a2, unsigned int a3)
{
  return AGCLLVMUserShader::buildGlobalSizeCommon(this, a2, a3, 0, 0);
}

uint64_t AGCLLVMUserObjectShader::usesCustomBorderColor(AGCLLVMUserObjectShader *this)
{
  return *(_DWORD *)(*((void *)this + 565) + 16) & 1;
}

uint64_t AGCLLVMUserObjectShader::replaceBuiltins(AGCLLVMUserObjectShader *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = AGCLLVMUserObjectShaderBase::replaceBuiltins(this);
  if (v2)
  {
    uint64_t v3 = *(llvm::LLVMContext ***)((char *)this + *(void *)(*(void *)this - 24) + 368);
    AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v23, *v3);
    char v29 = this;
    int v23 = &unk_1F2579B10;
    v28[25] = v3;
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v5 = (llvm::Function *)Function;
      int v16 = v26;
      uint64_t v6 = *(void *)(Function + 8);
      while (v6)
      {
        int v7 = *(llvm::Instruction **)(v6 + 24);
        uint64_t v6 = *(void *)(v6 + 8);
        int v26 = 0;
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v24, v7);
        llvm::UndefValue::get();
        uint64_t v31 = 0;
        memset(v30, 0, sizeof(v30));
        unint64_t v8 = llvm::CallBase::arg_end(v7) - (void)v7 + 32 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF);
        if ((v8 & 0x1FFFFFFFE0) != 0)
        {
          uint64_t v9 = (v8 >> 5);
          uint64_t v10 = (uint64_t *)((char *)v7 - 32 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF));
          uint64_t v11 = v30;
          do
          {
            uint64_t v12 = *v10;
            v10 += 4;
            *v11++ = v12;
            --v9;
          }
          while (v9);
        }
        if (llvm::FPMathOperator::classof((uint64_t)v7)) {
          llvm::Instruction::getFastMathFlags(v7);
        }
        __int16 v13 = (char *)v29 + *(void *)(*(void *)v29 - 24);
        long long v20 = v25[2];
        llvm::IRBuilderBase::getCurrentDebugLocation(&v21, (llvm::IRBuilderBase *)v24);
        int v22 = v26;
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v20, (uint64_t)(v13 + 40));
        if (v21) {
          llvm::MetadataTracking::untrack();
        }
        AGCLLVMUserObjectShader::buildSetMeshGridProperties(v29, *(llvm::Type ***)&v30[0], *((llvm::Value **)&v30[0] + 1));
        char v14 = (char *)v29 + *(void *)(*(void *)v29 - 24);
        long long v17 = *(_OWORD *)(v14 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v18, (llvm::IRBuilderBase *)(v14 + 40));
        int v19 = *((_DWORD *)v14 + 34);
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v17, (uint64_t)v24);
        if (v18) {
          llvm::MetadataTracking::untrack();
        }
        if (*(void *)v7 != v28[1]) {
          llvm::Value::replaceAllUsesWith();
        }
        llvm::Instruction::eraseFromParent(v7);
      }
      int v26 = v16;
      llvm::Function::eraseFromParent(v5);
    }
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v28);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v27);
    if (v24[0] != v25) {
      free(v24[0]);
    }
  }
  return v2;
}

uint64_t AGCLLVMUserObjectShader::buildSetMeshGridProperties(AGCLLVMUserObjectShader *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v5 = (char *)this + 4384;
  uint64_t v6 = (AGCLLVMUserObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  int v7 = (llvm::Type *)*((void *)this + 545);
  __int16 v46 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v6, a2, v7, (const llvm::Twine *)v45);
  uint64_t v9 = (llvm::Type **)AGCLLVMBuilder::extendVector((AGCLLVMUserObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 32), a3, 4);
  uint64_t v10 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v11 = *((void *)v10 + 50);
  long long v42 = *(_OWORD *)(v10 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v43, (llvm::IRBuilderBase *)(v10 + 40));
  int v44 = *((_DWORD *)v10 + 34);
  (*(void (**)(uint64_t, long long *, llvm::Value *, llvm::Type **))(*(void *)v11 + 296))(v11, &v42, PointerCast, v9);
  if (v43) {
    llvm::MetadataTracking::untrack();
  }
  if (*v5)
  {
    uint64_t v12 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v13 = *((void *)v12 + 50);
    long long v39 = *(_OWORD *)(v12 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v40, (llvm::IRBuilderBase *)(v12 + 40));
    int v41 = *((_DWORD *)v12 + 34);
    char v14 = (llvm::Type **)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v13 + 320))(v13, &v39);
    uint64_t v15 = (llvm::Type *)llvm::PointerType::get();
    __int16 v46 = 257;
    int v16 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v12 + 40), v14, v15, (const llvm::Twine *)v45);
    if (v40) {
      llvm::MetadataTracking::untrack();
    }
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v9, (uint64_t)v16, 0);
  }
  if (v5[1])
  {
    long long v17 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v18 = (llvm::Type *)*((void *)v17 + 27);
    uint64_t v19 = *((void *)v17 + 50);
    long long v36 = *(_OWORD *)(v17 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v37, (llvm::IRBuilderBase *)(v17 + 40));
    int v38 = *((_DWORD *)v17 + 34);
    long long v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v19 + 320))(v19, &v36);
    uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v46 = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v17 + 40), v18, v20, v21, (const llvm::Twine *)v45);
    int v23 = (llvm::Type *)llvm::PointerType::get();
    __int16 v35 = 257;
    uint64_t v24 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v17 + 40), GEP, v23, (const llvm::Twine *)v34);
    if (v37) {
      llvm::MetadataTracking::untrack();
    }
    for (uint64_t i = 0; i != 3; ++i)
    {
      uint64_t v26 = *(void *)(*(void *)this - 24);
      uint64_t v27 = (uint64_t *)((char *)this + v26 + 40);
      uint64_t v28 = (llvm::Type **)AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + v26 + 232), i);
      char v29 = (char *)this + *(void *)(*(void *)this - 24);
      v30 = (llvm::Type *)*((void *)v29 + 29);
      uint64_t v31 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v46 = 257;
      uint64_t v32 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v29 + 40), v30, v24, v31, (const llvm::Twine *)v45);
      llvm::IRBuilderBase::CreateAlignedStore(v27, v28, v32, 0);
    }
  }
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserObjectShader::setupShaderInputs(llvm::Function **this)
{
  AGCLLVMUserObjectShaderBase::setupShaderInputs((AGCLLVMUserObjectShaderBase *)this);
  uint64_t v2 = this[22];
  if (*((_WORD *)v2 + 9))
  {
    llvm::Function::BuildLazyArguments(this[22]);
    uint64_t v4 = this[22];
    uint64_t v3 = *((void *)v2 + 11);
    if (*((_WORD *)v4 + 9)) {
      llvm::Function::BuildLazyArguments(this[22]);
    }
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = *((void *)v2 + 11);
  }
  for (uint64_t i = *((void *)v2 + 11) + 40 * *((void *)v2 + 12); v3 != i; v3 += 40)
  {
    uint64_t v6 = *((void *)this[11] + *(unsigned int *)(v3 + 32));
    if (v6
      && isStringMDNode(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8), "air.mesh_grid_properties"))
    {
      ChildcountGlobal = (llvm::Type **)AGCLLVMUserObjectShader::getOrCreateChildcountGlobal((AGCLLVMUserObjectShader *)this);
      unint64_t v8 = (llvm::IRBuilderBase *)((char *)this + *((void *)*this - 3) + 40);
      uint64_t v9 = *(llvm::Type **)v3;
      __int16 v12 = 257;
      llvm::IRBuilderBase::CreatePointerCast(v8, ChildcountGlobal, v9, (const llvm::Twine *)v11);
      llvm::Value::replaceAllUsesWith();
    }
  }
  return 1;
}

uint64_t AGCLLVMUserObjectShader::getOrCreateChildcountGlobal(AGCLLVMUserObjectShader *this)
{
  uint64_t result = *((void *)this + 568);
  if (!result)
  {
    uint64_t v3 = *(llvm::Constant **)((char *)this + *(void *)(*(void *)this - 24) + 344);
    uint64_t v4 = llvm::User::operator new((llvm::User *)0x58);
    llvm::Constant::getNullValue(v3, v5);
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    llvm::ValueHandleBase::operator=((AGCLLVMUserObjectShader *)((char *)this + 4528), v4);
    return *((void *)this + 568);
  }
  return result;
}

void AGCLLVMUserObjectShader::addWrapperPostfix(AGCLLVMUserObjectShader *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  AGCLLVMUserObjectShader::getOrCreateChildcountGlobal(this);
  v14[0] = llvm::ConstantInt::get();
  v14[1] = llvm::ConstantInt::get();
  AGCLLVMObject::buildWGBarrier((uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t)v14, 2);
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v3 = *((void *)v2 + 50);
  long long v11 = *(_OWORD *)(v2 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v2 + 40));
  int v13 = *((_DWORD *)v2 + 34);
  (*(void (**)(uint64_t, long long *))(*(void *)v3 + 312))(v3, &v11);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v4 = llvm::FunctionType::get();
  v14[0] = "agc.object.write_childcount";
  __int16 v15 = 259;
  uint64_t v5 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v6 = llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x1CB79FC90](v6, v4, 7, 0xFFFFFFFFLL, v14, v5);
  llvm::Function::addFnAttr();
  int v7 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v15 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)(v7 + 40), **(void **)(*(void *)v6 + 16), v6, 0, 0, (uint64_t)v14);
  unint64_t v8 = (char *)this + *(void *)(*(void *)this - 24);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(v8 + 40));
  int v10 = *((_DWORD *)v8 + 34);
  v14[0] = "entry";
  __int16 v15 = 259;
  operator new();
}

uint64_t AGCLLVMUserObjectShader::initCompile(AGCLLVMUserObjectShader *this)
{
  uint64_t v2 = validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1092), *(_DWORD *)(*((void *)this + 565) + 20), *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 864), (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (unsigned int *)this + 1092);
  if (v2) {
    AGCLLVMUserObjectShaderBase::initCompile(this);
  }
  return v2;
}

void AGCLLVMUserObjectShader::~AGCLLVMUserObjectShader(AGCLLVMUserObjectShader *this)
{
  *(void *)this = &unk_1F25784F0;
  uint64_t v2 = (AGCLLVMUserObjectShader *)((char *)this + 4568);
  *((void *)this + 571) = &unk_1F2578828;
  *((void *)this + 575) = &unk_1F2578918;
  uint64_t v3 = *((void *)this + 568);
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShader *)((char *)this + 4528));
  }
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase(this, (uint64_t *)off_1F2578928);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  uint64_t v3;

  *(void *)this = &unk_1F25784F0;
  uint64_t v2 = (AGCLLVMUserObjectShader *)((char *)this + 4568);
  *((void *)this + 571) = &unk_1F2578828;
  *((void *)this + 575) = &unk_1F2578918;
  uint64_t v3 = *((void *)this + 568);
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShader *)((char *)this + 4528));
  }
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase(this, (uint64_t *)off_1F2578928);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

BOOL virtual thunk to'AGCLLVMPassThroughObjectShader::constructReply(AGCLLVMPassThroughObjectShader *this)
{
  return AGCLLVMPassThroughObjectShader::constructReply((AGCLLVMPassThroughObjectShader *)((char *)this
                                                                                         + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMPassThroughObjectShader::constructReply(AGCLLVMPassThroughObjectShader *this)
{
  if (!AGCDeserializedReply::deserialize((AGCLLVMPassThroughObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160)))return 0; {
  AGCLLVMObject::validateBackendReply((AGCLLVMPassThroughObjectShader *)((char *)this
  }
                                                                       + *(void *)(*(void *)this - 24)));
  uint64_t v2 = AGCLLVMObject::constructFlatReply((AGCLLVMPassThroughObjectShader *)((char *)this
                                                                          + *(void *)(*(void *)this - 24)));
  int v4 = flatbuffers::FlatBufferBuilder::EndTable(v2, v3);
  uint64_t v5 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v6 = (flatbuffers::FlatBufferBuilder *)(v5 + 2472);
  v5[2542] = 1;
  int v7 = *((_DWORD *)v5 + 626) - *((_DWORD *)v5 + 630) + *((_DWORD *)v5 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v5 + 309, 4, *((_DWORD *)this + 25));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v6, 6, *((_DWORD *)this + 26));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v6, 8, *((_DWORD *)this + 27));
  LODWORD(v6) = flatbuffers::FlatBufferBuilder::EndTable(v6, v7);
  unint64_t v8 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v9 = (flatbuffers::FlatBufferBuilder *)(v8 + 2472);
  v8[2542] = 1;
  int v10 = *((_DWORD *)v8 + 626) - *((_DWORD *)v8 + 630) + *((_DWORD *)v8 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v8 + 309, 4, *((_DWORD *)this + 18));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v9, 6, *((_DWORD *)this + 19));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v9, 8, *((_DWORD *)this + 20));
  LODWORD(v9) = flatbuffers::FlatBufferBuilder::EndTable(v9, v10);
  long long v11 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v12 = (flatbuffers::FlatBufferBuilder *)(v11 + 2472);
  v11[2542] = 1;
  int v13 = *((_DWORD *)v11 + 626) - *((_DWORD *)v11 + 630) + *((_DWORD *)v11 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v11 + 2472), 4, (int)v6);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v12, 6, (int)v9);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v12, 8, *((_DWORD *)this + 22));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v12, 10, *((_DWORD *)this + 23));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v12, 12, *((_DWORD *)this + 21));
  LODWORD(v6) = flatbuffers::FlatBufferBuilder::EndTable(v12, v13);
  char v14 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v15 = (flatbuffers::FlatBufferBuilder *)(v14 + 2472);
  v14[2542] = 1;
  LODWORD(v12) = *((_DWORD *)v14 + 626) - *((_DWORD *)v14 + 630) + *((_DWORD *)v14 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v14 + 2472), v4);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ObjectShaderInfo>(v15, (int)v6);
  uint64_t v16 = (AGCLLVMPassThroughObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
  int v17 = flatbuffers::FlatBufferBuilder::EndTable(v15, (__int16)v12);
  flatbuffers::FlatBufferBuilder::Finish(v16, v17, v18);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMPassThroughObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  uint64_t v19 = *(void *)this;
  long long v20 = (char *)this + *(void *)(*(void *)this - 24);
  v20[2638] = 1;
  uint64_t v21 = (AGCLLVMPassThroughObjectShader *)((char *)this + *(void *)(v19 - 24) + 2568);
  int v22 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v20 + 2568), *((_WORD *)v20 + 1300) - *((_WORD *)v20 + 1308) + *((_WORD *)v20 + 1304));
  flatbuffers::FlatBufferBuilder::Finish(v21, v22, v23);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMPassThroughObjectShader *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
  uint64_t v24 = *(void *)(*(void *)this - 24);
  uint64_t v25 = (char *)this + v24;
  uint64_t v26 = *(void *)((char *)this + v24 + 696);
  if (v26) {
    uint64_t v27 = *((void *)v25 + 88)
  }
        ? (AGCLLVMPassThroughObjectShader *)((char *)this + v24 + 696)
        : (AGCLLVMPassThroughObjectShader *)(v25 + 1256);
  else {
    uint64_t v27 = (AGCLLVMPassThroughObjectShader *)(v25 + 1256);
  }
  uint64_t v28 = (int *)(*(void *)v27 + **(unsigned int **)v27);
  char v29 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 - *v28 + 4));
  v30 = (unsigned int *)((char *)v29
                       + *v29
                       + *(unsigned __int16 *)((char *)v29 + *v29 - *(unsigned int *)((char *)v29 + *v29) + 8));
  if (v26)
  {
    uint64_t v31 = (unsigned int **)(v25 + 1256);
    if (*((void *)v25 + 88)) {
      uint64_t v31 = (unsigned int **)((char *)this + v24 + 696);
    }
  }
  else
  {
    uint64_t v31 = (unsigned int **)(v25 + 1256);
  }
  uint64_t v32 = 0;
  if (*v31 && v31[1]) {
    uint64_t v32 = (int *)((char *)*v31 + **v31);
  }
  __int16 v33 = (unsigned __int16 *)((char *)v32 - *v32);
  if (*v33 >= 5u && (uint64_t v34 = v33[2]) != 0) {
    __int16 v35 = (int *)((char *)v32 + v34 + *(unsigned int *)((char *)v32 + v34));
  }
  else {
    __int16 v35 = 0;
  }
  unsigned int v36 = *(unsigned int *)((char *)v30 + *v30);
  uint64_t v37 = (unsigned __int16 *)((char *)v35 - *v35);
  if (*v37 >= 0x3Du && (uint64_t v38 = v37[30]) != 0) {
    unsigned int v39 = *(int *)((char *)v35 + v38);
  }
  else {
    unsigned int v39 = 0;
  }
  if (v36 > 0x20) {
    return 0;
  }
  unsigned int v40 = *(_DWORD *)(*(void *)((char *)this + v24 + 400) + 856);
  return validateUserLocalMemoryUsage(v39, v40, (std::string *)(v25 + 8));
}

void *virtual thunk to'AGCLLVMDriverShader::debugName@<X0>(AGCLLVMDriverShader *this@<X0>, void *a2@<X8>)
{
  __int16 v3 = (char *)this
     + *(void *)(*(void *)this - 144)
     + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 144)) - 24);
  int v4 = (char *)(*(uint64_t (**)(char *))(*(void *)v3 + 56))(v3);
  return std::string::basic_string[abi:nn180100]<0>(a2, v4);
}

void virtual thunk to'AGCLLVMPassThroughObjectShader::getCompilationKeyDescription(AGCLLVMPassThroughObjectShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMPassThroughObjectShader::getCompilationKeyDescription(AGCLLVMPassThroughObjectShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v6, "");
  std::string::basic_string[abi:nn180100]<0>(__p, "mesh_needs_tgs");
  std::to_string(&v8, *((unsigned __int8 *)this + 96));
  _agcFieldString<std::string>(&v9, (const void **)__p, (uint64_t)&v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  _agcGroupWithHeader(a2, (uint64_t)v6, (uint64_t)&v9, 1);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

uint64_t virtual thunk to'AGCLLVMDriverShader::getMaxTempRegistersOverride(AGCLLVMDriverShader *this)
{
  return 0;
}

uint64_t virtual thunk to'AGCLLVMPassThroughObjectShader::getShaderType(AGCLLVMPassThroughObjectShader *this)
{
  return 32;
}

const char *virtual thunk to'AGCLLVMPassThroughObjectShader::dumpType(AGCLLVMPassThroughObjectShader *this)
{
  return "object_passthrough";
}

void *virtual thunk to'AGCLLVMPassThroughObjectShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.passthrough_object");
}

void virtual thunk to'AGCLLVMPassThroughObjectShader::~AGCLLVMPassThroughObjectShader(AGCLLVMPassThroughObjectShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassThroughObjectShader *)((char *)this
                                                                 + *(void *)(*(void *)this - 48)
                                                                 + 112));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassThroughObjectShader *)((char *)this
                                                                 + *(void *)(*(void *)this - 48)
                                                                 + 112));
}

void *AGCLLVMPassThroughObjectShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.passthrough_object");
}

uint64_t AGCLLVMPassThroughObjectShader::getShaderType(AGCLLVMPassThroughObjectShader *this)
{
  return 32;
}

const char *AGCLLVMPassThroughObjectShader::dumpType(AGCLLVMPassThroughObjectShader *this)
{
  return "object_passthrough";
}

void AGCLLVMPassThroughObjectShader::~AGCLLVMPassThroughObjectShader(AGCLLVMPassThroughObjectShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassThroughObjectShader *)((char *)this + 112));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassThroughObjectShader *)((char *)this + 112));
}

void *AGCLLVMDriverShader::debugName@<X0>(AGCLLVMDriverShader *this@<X0>, void *a2@<X8>)
{
  __int16 v3 = (char *)(*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 56))((char *)this + *(void *)(*(void *)this - 24));
  return std::string::basic_string[abi:nn180100]<0>(a2, v3);
}

uint64_t AGCLLVMDriverShader::getMaxTempRegistersOverride(AGCLLVMDriverShader *this)
{
  return 0;
}

void AGCLLVMUserObjectShaderBase::AGCLLVMUserObjectShaderBase(AGCLLVMUserObjectShaderBase *this, AGCLLVMCtx *a2, llvm::Module *a3, char *a4)
{
  uint64_t v6 = AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)this, (uint64_t *)a2 + 1, (uint64_t)a3, a4, (uint64_t)&default_cs, 0, 0);
  uint64_t v7 = *(void *)a2;
  *uint64_t v6 = *(void *)a2;
  *(void *)((char *)this + *(void *)(v7 - 24)) = *((void *)a2 + 7);
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = *((void *)a2 + 8);
  *((void *)this + 540) = llvm::PointerType::get();
  *((void *)this + 541) = llvm::PointerType::get();
  *((void *)this + 542) = llvm::PointerType::get();
  *((void *)this + 543) = llvm::PointerType::get();
  *((void *)this + 544) = llvm::PointerType::get();
  *((void *)this + 545) = llvm::PointerType::get();
  *((_OWORD *)this + 273) = xmmword_1CADD6320;
  *((_WORD *)this + 2192) = 0;
  *(_OWORD *)((char *)this + 4388) = 0u;
  *((_WORD *)this + 2202) = 0;
  *((void *)this + 551) = 4;
  *((_OWORD *)this + 276) = 0u;
  *((_OWORD *)this + 277) = 0u;
  *((_OWORD *)this + 278) = 0u;
  *((_DWORD *)this + 1116) = 1065353216;
  *((void *)this + 559) = 4;
  *((void *)this + 561) = 0;
  *((void *)this + 560) = 0;
  *((void *)this + 562) = 4;
  *((void *)this + 564) = 0;
  *((void *)this + 563) = 0;
  uint64_t Operand = llvm::NamedMDNode::getOperand(*((llvm::NamedMDNode **)this + 8));
  unsigned int v15 = 3;
  if (*(_DWORD *)(Operand + 8) >= 4u)
  {
    uint64_t v9 = Operand;
    do
    {
      char v10 = parseMDUint3(v9, "air.work_group_size", &v15, (_DWORD *)this + 1098);
      unsigned int v11 = v15;
      if ((v10 & 1) == 0)
      {
        uint64_t v12 = *(unsigned __int8 **)(v9 - 8 * *(unsigned int *)(v9 + 8) + 8 * v15);
        unint64_t v13 = *v12;
        BOOL v14 = v13 > 0x22 || ((0x7FFFFFFF0uLL >> v13) & 1) == 0;
        if (v14 || (unsigned int v17 = 0, !*((_DWORD *)v12 + 2)))
        {
LABEL_11:
          unsigned int v15 = ++v11;
        }
        else
        {
          while (1)
          {
            int v16 = 0;
            if (parseMDInt("air.max_work_group_size", (uint64_t)v12, &v17, &v16)) {
              break;
            }
            if (++v17 >= *((_DWORD *)v12 + 2)) {
              goto LABEL_11;
            }
          }
          unsigned int v15 = ++v11;
          *((_DWORD *)this + 1092) = v16;
        }
      }
    }
    while (v11 < *(_DWORD *)(v9 + 8));
  }
}

uint64_t AGCLLVMUserObjectShaderBase::getVertexAmpId(AGCLLVMUserObjectShaderBase *this)
{
  if (*((unsigned char *)this + 4405))
  {
    EmulationStateCacheForCurrentuint64_t Function = (llvm::ValueHandleBase *)AGCLLVMUserObjectShaderBase::getEmulationStateCacheForCurrentFunction(this);
    uint64_t result = *((void *)EmulationStateCacheForCurrentFunction + 2);
    if (!result)
    {
      int v4 = (char *)this + *(void *)(*(void *)this - 24);
      long long v26 = *(_OWORD *)(v4 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v27, (llvm::IRBuilderBase *)(v4 + 40));
      int v28 = *((_DWORD *)v4 + 34);
      char v5 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v6 = (char **)(v5 + 40);
      uint64_t v7 = *(void *)(*(void *)(*((void *)v5 + 11) + 56) + 80);
      if (v7) {
        std::string v8 = (llvm::BasicBlock *)(v7 - 24);
      }
      else {
        std::string v8 = 0;
      }
      uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v8);
      llvm::IRBuilderBase::SetInsertPoint(v6, (char *)v8, FirstInsertionPt);
      uint64_t VertexAmpCount = AGCLLVMUserObjectShaderBase::getVertexAmpCount(this, v10);
      unsigned int v11 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v12 = (uint64_t)(v11 + 32);
      uint64_t v13 = *((void *)v11 + 50);
      uint64_t v14 = *(void *)(v13 + 1488);
      if (v14) {
        size_t v15 = strlen(*(const char **)(v13 + 1488));
      }
      else {
        size_t v15 = 0;
      }
      uint64_t v16 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(v12, v14, v15, *(void *)(v12 + 200), *(void *)(v12 + 200));
      unsigned int v17 = (char *)this + *(void *)(*(void *)this - 24) + 40;
      __int16 v24 = 257;
      uint64_t v18 = llvm::IRBuilderBase::CreateCall((uint64_t)v17, *(void *)(v16 + 24), v16, (uint64_t)&VertexAmpCount, 1, (uint64_t)v23);
      llvm::ValueHandleBase::operator=(EmulationStateCacheForCurrentFunction, (uint64_t)v18);
      uint64_t v19 = (char *)this + *(void *)(*(void *)this - 24) + 32;
      long long v20 = v26;
      uint64_t v21 = v27;
      if (v27) {
        llvm::MetadataTracking::track();
      }
      int v22 = v28;
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v20, (uint64_t)(v19 + 8));
      if (v21) {
        llvm::MetadataTracking::untrack();
      }
      if (v27) {
        llvm::MetadataTracking::untrack();
      }
      return *((void *)EmulationStateCacheForCurrentFunction + 2);
    }
  }
  else
  {
    return llvm::ConstantInt::get();
  }
  return result;
}

void AGCLLVMUserObjectShaderBase::mutateValueAddressSpace(AGCLLVMUserObjectShaderBase *this, llvm::Value *a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = *((void *)a2 + 1);
  if (*(unsigned char *)(*(void *)a2 + 8) != 15) {
    uint64_t v2 = 0;
  }
  unsigned int v29 = *(_DWORD *)(v2 + 8);
  __int16 v33 = v37;
  uint64_t v34 = v37;
  uint64_t v35 = 16;
  int v36 = 0;
  int v4 = 0;
  if (v3)
  {
    char v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v3 + 24);
      if ((unint64_t)v5 >= v6)
      {
        uint64_t v8 = (v5 - v4) >> 3;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 61) {
LABEL_61:
        }
          abort();
        if ((uint64_t)(v6 - (void)v4) >> 2 > v9) {
          unint64_t v9 = (uint64_t)(v6 - (void)v4) >> 2;
        }
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = (char *)(v10 + 8 * v8);
        *(void *)uint64_t v12 = v7;
        uint64_t v13 = v12 + 8;
        while (v5 != v4)
        {
          uint64_t v14 = *((void *)v5 - 1);
          v5 -= 8;
          *((void *)v12 - 1) = v14;
          v12 -= 8;
        }
        unint64_t v6 = v10 + 8 * v11;
        if (v4) {
          operator delete(v4);
        }
        int v4 = v12;
        char v5 = v13;
      }
      else
      {
        *(void *)char v5 = v7;
        v5 += 8;
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
    while (v4 != v5)
    {
      uint64_t v16 = (uint64_t *)*((void *)v5 - 1);
      v5 -= 8;
      size_t v15 = v16;
      if (v16)
      {
        unsigned int v17 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)&v33, v15);
        uint64_t v18 = v34 == v33 ? (uint64_t *)((char *)&v35 + 4) : &v35;
        if (&v34[8 * *(unsigned int *)v18] == (char *)v17)
        {
          llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v32, (llvm::SmallPtrSetImplBase *)&v33, v15);
          if (llvm::MemCpyInst::classof((uint64_t)v15))
          {
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObjectShaderBase *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Instruction *)v15);
            llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v15 + 8));
            llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v15 + 8));
            llvm::IRBuilderBase::CreateMemTransferInst();
            llvm::Instruction::eraseFromParent((llvm::Instruction *)v15);
          }
          else
          {
            int v19 = *(_DWORD *)(*v15 + 8);
            if (v19 == 15)
            {
              if ((v19 & 0xFE) == 0x12) {
                int v19 = *(_DWORD *)(**(void **)(*v15 + 16) + 8);
              }
              if ((v19 ^ v29) <= 0xFF)
              {
                *size_t v15 = llvm::PointerType::get();
                uint64_t v20 = v15[1];
                if (v20)
                {
                  uint64_t v21 = v5;
                  do
                  {
                    uint64_t v22 = *(void *)(v20 + 24);
                    if ((unint64_t)v21 >= v6)
                    {
                      uint64_t v23 = (v21 - v4) >> 3;
                      unint64_t v24 = v23 + 1;
                      if ((unint64_t)(v23 + 1) >> 61) {
                        goto LABEL_61;
                      }
                      if ((uint64_t)(v6 - (void)v4) >> 2 > v24) {
                        unint64_t v24 = (uint64_t)(v6 - (void)v4) >> 2;
                      }
                      if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v25 = v24;
                      }
                      if (v25) {
                        unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v25);
                      }
                      else {
                        uint64_t v26 = 0;
                      }
                      uint64_t v27 = (char *)(v25 + 8 * v23);
                      *(void *)uint64_t v27 = v22;
                      char v5 = v27 + 8;
                      while (v21 != v4)
                      {
                        uint64_t v28 = *((void *)v21 - 1);
                        v21 -= 8;
                        *((void *)v27 - 1) = v28;
                        v27 -= 8;
                      }
                      unint64_t v6 = v25 + 8 * v26;
                      if (v4) {
                        operator delete(v4);
                      }
                      int v4 = v27;
                    }
                    else
                    {
                      *(void *)uint64_t v21 = v22;
                      char v5 = v21 + 8;
                    }
                    uint64_t v20 = *(void *)(v20 + 8);
                    uint64_t v21 = v5;
                  }
                  while (v20);
                }
              }
            }
          }
        }
      }
    }
  }
  *(void *)a2 = llvm::PointerType::get();
  if (v34 != v33) {
    free(v34);
  }
  if (v4) {
    operator delete(v4);
  }
}

BOOL llvm::MemCpyInst::classof(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 84) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 - 32);
  if (!v1 || *(unsigned char *)(v1 + 16) || *(void *)(v1 + 24) != *(void *)(a1 + 72) || (*(unsigned char *)(v1 + 33) & 0x20) == 0) {
    return 0;
  }
  int v3 = *(_DWORD *)(v1 + 36);
  return v3 == 194 || v3 == 196;
}

void *AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(AGCLLVMUserObjectShaderBase *this, int a2, int a3)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  int v99 = a3;
  int v100 = a2;
  v127 = 0;
  *(_OWORD *)v96 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v98 = 1065353216;
  int v4 = operator new(0x30uLL);
  void *v4 = &unk_1F25799F0;
  v4[1] = v96;
  v4[2] = &v100;
  v4[3] = &v99;
  v4[4] = v124;
  v4[5] = this;
  v125 = v4;
  v122[0] = &unk_1F2579A38;
  v122[1] = v126;
  uint64_t v123 = v122;
  char v5 = operator new(0x20uLL);
  void *v5 = &unk_1F2579A80;
  v5[1] = v126;
  v5[2] = &v100;
  v5[3] = &v99;
  v121 = v5;
  unint64_t v6 = operator new(0x20uLL);
  *unint64_t v6 = &unk_1F2579AC8;
  v6[1] = v120;
  v6[2] = v124;
  v6[3] = v122;
  v127 = v6;
  v119[1] = 0;
  std::__function::__value_func<llvm::Type * ()(llvm::Type *)>::~__value_func[abi:nn180100](&v117);
  v117 = v119;
  uint64_t v118 = 0x800000000;
  v115[0] = v116;
  v115[1] = (void *)0x800000000;
  uint64_t v10 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v11 = *(void *)(v10 + 32);
  uint64_t v89 = v10 + 24;
  if (v11 == v10 + 24) {
    goto LABEL_142;
  }
  do
  {
    if (v11) {
      uint64_t v12 = v11 - 56;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v112 = v114;
    uint64_t v113 = 0x800000000;
    if (v12 == *((void *)this + 22) || v12 == *((void *)this + 21))
    {
      uint64_t v94 = v11;
LABEL_22:
      char v17 = 0;
      goto LABEL_23;
    }
    if ((*(unsigned char *)(v12 + 33) & 0x20) != 0) {
      goto LABEL_95;
    }
    Name = (_DWORD *)llvm::Value::getName((llvm::Value *)v12);
    if (v7 >= 4 && *Name == 778266465) {
      goto LABEL_95;
    }
    uint64_t v14 = (_DWORD *)llvm::Value::getName((llvm::Value *)v12);
    if (v7 >= 4 && *v14 == 779250017) {
      goto LABEL_95;
    }
    uint64_t v94 = v11;
    if (!*(void *)(v12 + 96)) {
      goto LABEL_22;
    }
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    char v17 = 0;
    do
    {
      if (*(_WORD *)(v12 + 18)) {
        llvm::Function::BuildLazyArguments((llvm::Function *)v12);
      }
      uint64_t v18 = *(void *)(v12 + 88);
      uint64_t v19 = *(void *)(v18 + v15);
      uint64_t v20 = std::function<llvm::Type * ()(llvm::Type *)>::operator()((uint64_t)v127, v19);
      if (v20)
      {
        *(void *)(v18 + v15) = v20;
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v112, v20);
        char v17 = 1;
      }
      else
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v112, v19);
      }
      ++v16;
      v15 += 40;
    }
    while (*(void *)(v12 + 96) > v16);
LABEL_23:
    char v91 = v17;
    uint64_t v109 = v111;
    uint64_t v110 = 0x800000000;
    v106 = v108;
    uint64_t v107 = 0x800000000;
    v103 = v105;
    uint64_t v104 = 0x800000000;
    uint64_t v92 = (llvm::Function *)v12;
    uint64_t v21 = *(void *)(v12 + 80);
    uint64_t v90 = v12 + 72;
    if (v21 == v12 + 72) {
      goto LABEL_73;
    }
    do
    {
      uint64_t v22 = v21 - 24;
      if (!v21) {
        uint64_t v22 = 0;
      }
      uint64_t v23 = v22 + 40;
      for (uint64_t i = *(void *)(v22 + 48); i != v23; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v25 = i - 24;
        }
        else {
          uint64_t v25 = 0;
        }
        BOOL v26 = llvm::MemCpyInst::classof(v25);
        if (i && v26)
        {
          if (v110 >= (unint64_t)HIDWORD(v110)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v109 + v110) = v25;
          LODWORD(v110) = v110 + 1;
          continue;
        }
        if (*(unsigned char *)(v25 + 16) == 84)
        {
          uint64_t v27 = *(void *)(v25 - 32);
          if (v27)
          {
            if (!*(unsigned char *)(v27 + 16)
              && *(void *)(v27 + 24) == *(void *)(v25 + 72)
              && (*(unsigned char *)(v27 + 33) & 0x20) != 0
              && i
              && *(_DWORD *)(v27 + 36) == 199)
            {
              if (v107 >= (unint64_t)HIDWORD(v107)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v106 + v107) = v25;
              LODWORD(v107) = v107 + 1;
              continue;
            }
          }
        }
        uint64_t v28 = std::function<llvm::Type * ()(llvm::Type *)>::operator()((uint64_t)v127, *(void *)v25);
        if (v28)
        {
          *(void *)uint64_t v25 = v28;
          int v29 = *(unsigned __int8 *)(v25 + 16);
          if (v29 == 62)
          {
            if ((*(_DWORD *)(v28 + 8) & 0xFE) == 0x12) {
              uint64_t v28 = **(void **)(v28 + 16);
            }
            *(void *)(v25 + 72) = **(void **)(v28 + 16);
            goto LABEL_49;
          }
        }
        else
        {
          int v29 = *(unsigned __int8 *)(v25 + 16);
        }
        if (v29 == 59)
        {
          uint64_t v30 = std::function<llvm::Type * ()(llvm::Type *)>::operator()((uint64_t)v127, *(void *)(v25 + 64));
          if (!v30) {
            continue;
          }
LABEL_60:
          *(void *)(v25 + 64) = v30;
          continue;
        }
        if (v29 == 78)
        {
          uint64_t v31 = **(void **)(v25 - 32);
          unsigned int v32 = *(_DWORD *)(v31 + 8);
          if ((v32 & 0xFE) == 0x12) {
            unsigned int v32 = *(_DWORD *)(**(void **)(v31 + 16) + 8);
          }
          int v33 = *(_DWORD *)(*(void *)v25 + 8);
          if ((v33 & 0xFE) == 0x12) {
            int v33 = *(_DWORD *)(**(void **)(*(void *)v25 + 16) + 8);
          }
          if ((v33 ^ v32) <= 0xFF)
          {
            if (v104 >= (unint64_t)HIDWORD(v104)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v103 + v104) = v25;
            LODWORD(v104) = v104 + 1;
          }
          continue;
        }
        if (v29 != 62) {
          continue;
        }
LABEL_49:
        unint64_t v7 = *(void *)(v25 + 64);
        if (*(unsigned char *)(v7 + 8) == 16)
        {
          uint64_t v30 = std::function<llvm::StructType * ()(llvm::StructType *)>::operator()((uint64_t)v125, v7);
          if (v30) {
            goto LABEL_60;
          }
        }
      }
      uint64_t v21 = *(void *)(v21 + 8);
    }
    while (v21 != v12 + 72);
    if (v110)
    {
      uint64_t v34 = (uint64_t *)v109;
      uint64_t v35 = 8 * v110;
      do
      {
        uint64_t v36 = *v34++;
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObjectShaderBase *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Instruction *)v36);
        llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v36 + 64));
        llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v36 + 64));
        llvm::IRBuilderBase::CreateMemTransferInst();
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v36);
        v35 -= 8;
      }
      while (v35);
    }
LABEL_73:
    if (v107)
    {
      uint64_t v37 = (uint64_t *)v106;
      uint64_t v38 = 8 * v107;
      unint64_t v39 = v93;
      do
      {
        uint64_t v41 = *v37++;
        unsigned int v40 = (llvm::Instruction *)v41;
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObjectShaderBase *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Instruction *)v41);
        __int16 ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v41 + 64));
        uint64_t v43 = (63 - __clz((1 << ParamAlignment))) | 0x100;
        uint64_t v44 = 511;
        if ((ParamAlignment & 0xFF00) != 0) {
          uint64_t v44 = v43;
        }
        unint64_t v39 = v44 | v39 & 0xFFFFFFFFFFFF0000;
        llvm::IRBuilderBase::CreateMemSet();
        llvm::Instruction::eraseFromParent(v40);
        v38 -= 8;
      }
      while (v38);
    }
    else
    {
      unint64_t v39 = v93;
    }
    unint64_t v93 = v39;
    if (v104)
    {
      std::string v45 = (llvm::Instruction **)v103;
      uint64_t v46 = 8 * v104;
      do
      {
        uint64_t v47 = *v45++;
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObjectShaderBase *)((char *)this + *(void *)(*(void *)this - 24) + 40), v47);
        uint64_t v48 = (AGCLLVMUserObjectShaderBase *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        std::string v49 = (llvm::Type **)*((void *)v47 - 4);
        uint64_t v50 = *(llvm::Type **)v47;
        __int16 v102 = 257;
        llvm::IRBuilderBase::CreatePointerCast(v48, v49, v50, (const llvm::Twine *)v101);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v47);
        v46 -= 8;
      }
      while (v46);
    }
    if (v91)
    {
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      uint64_t v52 = (uint64_t)v51;
      llvm::Function::stealArgumentListFrom(v51, v92);
      if (*((void *)v92 + 9) != v90) {
        llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(v52 + 72, v52 + 72, v90, *((void *)v92 + 10), v90);
      }
      v101[0] = *((void *)v92 + 14);
      uint64_t FnAttrs = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)v101);
      if (FnAttrs)
      {
        LODWORD(v101[0]) = -1;
        v101[1] = FnAttrs;
        *(void *)(v52 + 112) = llvm::AttributeList::get();
      }
      llvm::Value::takeName();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v117, (uint64_t)v92);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v115, v52);
    }
    if (v103 != v105) {
      free(v103);
    }
    uint64_t v11 = v94;
    if (v106 != v108) {
      free(v106);
    }
    if (v109 != v111) {
      free(v109);
    }
LABEL_95:
    if (v112 != v114) {
      free(v112);
    }
    uint64_t v11 = *(void *)(v11 + 8);
  }
  while (v11 != v89);
  if (!v118) {
    goto LABEL_142;
  }
  uint64_t v54 = 0;
  uint64_t v55 = (char *)this + 8;
  while (2)
  {
    std::string v56 = (llvm::Function *)*((void *)v117 + v54);
    uint64_t v95 = v54;
    uint64_t v57 = *((void *)v115[0] + v54);
    while (2)
    {
      uint64_t v58 = *((void *)v56 + 1);
      if (v58)
      {
        uint64_t v59 = *(uint64_t **)(v58 + 24);
        int v60 = *((unsigned __int8 *)v59 + 16);
        if (v59 && v60 == 84)
        {
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObjectShaderBase *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Instruction *)v59);
          uint64_t v112 = v114;
          uint64_t v113 = 0x800000000;
          uint64_t v61 = &v59[-4 * (*((_DWORD *)v59 + 5) & 0x7FFFFFF)];
          uint64_t v62 = llvm::CallBase::arg_end((llvm::CallBase *)v59);
          while (v61 != (uint64_t *)v62)
          {
            uint64_t v63 = *v61;
            v61 += 4;
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v112, v63);
          }
          uint64_t v64 = (uint64_t)&v55[*(void *)(*(void *)this - 24) + 32];
          v111[8] = 257;
          uint64_t v65 = llvm::IRBuilderBase::CreateCall(v64, *(void *)(v57 + 24), v57, (uint64_t)v112, v113, (uint64_t)&v109);
          *((_WORD *)v65 + 9) = *((_WORD *)v65 + 9) & 0xFFFC | *((_WORD *)v59 + 9) & 3;
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v59);
          goto LABEL_122;
        }
        if (v59) {
          BOOL v66 = v60 == 5;
        }
        else {
          BOOL v66 = 0;
        }
        if (!v66)
        {
          llvm::User::replaceUsesOfWith();
          continue;
        }
        uint64_t v67 = *v59;
        uint64_t v68 = std::function<llvm::Type * ()(llvm::Type *)>::operator()((uint64_t)v127, *v59);
        uint64_t v69 = v68;
        uint64_t v112 = v114;
        uint64_t v113 = 0x400000000;
        int v70 = *((_DWORD *)v59 + 5);
        uint64_t v71 = v59;
        uint64_t v72 = v70 & 0x7FFFFFF;
        if ((v70 & 0x7FFFFFF) != 0)
        {
          do
          {
            if ((llvm::Function *)v71[-4 * (*((_DWORD *)v59 + 5) & 0x7FFFFFF)] == v56) {
              uint64_t v73 = v57;
            }
            else {
              uint64_t v73 = v71[-4 * (*((_DWORD *)v59 + 5) & 0x7FFFFFF)];
            }
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v112, v73);
            v71 += 4;
            --v72;
          }
          while (v72);
          if (v69)
          {
LABEL_118:
            llvm::ConstantExpr::getWithOperands();
            *uint64_t v59 = v69;
LABEL_121:
            llvm::Value::replaceAllUsesWith();
            *uint64_t v59 = v67;
            llvm::Constant::destroyConstant((llvm::Constant *)v59);
LABEL_122:
            if (v112 != v114) {
              free(v112);
            }
            continue;
          }
        }
        else if (v68)
        {
          goto LABEL_118;
        }
        llvm::ConstantExpr::getWithOperands();
        goto LABEL_121;
      }
      break;
    }
    uint64_t v74 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
    uint64_t v75 = (llvm::NamedMDNode *)(v74 + 72);
    for (j = *(llvm::NamedMDNode **)(v74 + 80); j != v75; j = (llvm::NamedMDNode *)*((void *)j + 1))
    {
      int NumOperands = llvm::NamedMDNode::getNumOperands(j);
      if (NumOperands)
      {
        int v78 = NumOperands;
        for (int k = 0; k != v78; ++k)
        {
          uint64_t Operand = llvm::NamedMDNode::getOperand(j);
          unint64_t v81 = *(unsigned int *)(Operand + 8);
          if (v81)
          {
            uint64_t v82 = Operand;
            for (unint64_t m = 0; m < v81; ++m)
            {
              v84 = *(llvm::Function **)(v82 - 8 * v81 + 8 * m);
              if (v84)
              {
                if (*(unsigned __int8 *)v84 - 1 > 1)
                {
                  v84 = 0;
                }
                else
                {
                  v84 = (llvm::Function *)*((void *)v84 + 16);
                  if (*((unsigned char *)v84 + 16)) {
                    v84 = 0;
                  }
                }
              }
              if (v84 == v56)
              {
                llvm::ValueAsMetadata::get();
                llvm::MDNode::replaceOperandWith();
                unint64_t v81 = *(unsigned int *)(v82 + 8);
              }
            }
          }
        }
      }
    }
    llvm::Function::eraseFromParent(v56);
    uint64_t v55 = (char *)this + 8;
    uint64_t v54 = v95 + 1;
    if (v95 + 1 < (unint64_t)v118) {
      continue;
    }
    break;
  }
LABEL_142:
  if (v115[0] != v116) {
    free(v115[0]);
  }
  if (v117 != v119) {
    free(v117);
  }
  if (v121 == v120)
  {
    (*(void (**)(void *))(v120[0] + 32))(v120);
  }
  else if (v121)
  {
    (*(void (**)(void *, unint64_t, uint64_t, uint64_t))(*v121 + 40))(v121, v7, v8, v9);
  }
  if (v123 == v122)
  {
    (*(void (**)(void *))(v122[0] + 32))(v122);
  }
  else if (v123)
  {
    (*(void (**)(void *, unint64_t, uint64_t, uint64_t))(*v123 + 40))(v123, v7, v8, v9);
  }
  if (v125 == v124)
  {
    (*(void (**)(void *))(v124[0] + 32))(v124);
  }
  else if (v125)
  {
    (*(void (**)(void *, unint64_t, uint64_t, uint64_t))(*v125 + 40))(v125, v7, v8, v9);
  }
  long long v85 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v86 = (void *)*v85;
      operator delete(v85);
      long long v85 = v86;
    }
    while (v86);
  }
  int v87 = v96[0];
  v96[0] = 0;
  if (v87) {
    operator delete(v87);
  }
  return std::__function::__value_func<llvm::Type * ()(llvm::Type *)>::~__value_func[abi:nn180100](v126);
}

void *std::__function::__value_func<llvm::Type * ()(llvm::Type *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::function<llvm::Type * ()(llvm::Type *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = ((uint64_t (*)(void))std::__throw_bad_function_call[abi:nn180100])();
  return std::function<llvm::StructType * ()(llvm::StructType *)>::operator()(v3);
}

uint64_t std::function<llvm::StructType * ()(llvm::StructType *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = ((uint64_t (*)(void))std::__throw_bad_function_call[abi:nn180100])();
  return std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3>,llvm::Type * ()(llvm::Type *)>::operator()(v3);
}

void std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3>,llvm::Type * ()(llvm::Type *)>::operator()(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = *(unsigned __int8 *)(v2 + 8);
  switch(v3)
  {
    case 14:
      uint64_t v6 = a1[3];
      uint64_t v9 = v2;
      uint64_t v5 = *(void *)(v6 + 24);
      if (v5) {
        goto LABEL_5;
      }
LABEL_12:
      uint64_t v8 = (void *)((uint64_t (*)(void))std::__throw_bad_function_call[abi:nn180100])();
      std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3>,llvm::Type * ()(llvm::Type *)>::destroy_deallocate(v8);
      return;
    case 16:
      uint64_t v7 = *(void *)(a1[2] + 24);
      std::function<llvm::StructType * ()(llvm::StructType *)>::operator()(v7, v2);
      break;
    case 15:
      uint64_t v4 = a1[1];
      uint64_t v9 = v2;
      uint64_t v5 = *(void *)(v4 + 24);
      if (v5)
      {
LABEL_5:
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v9);
        return;
      }
      goto LABEL_12;
  }
}

__n128 std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3>,llvm::Type * ()(llvm::Type *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2579AC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3>,llvm::Type * ()(llvm::Type *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F2579AC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3>,llvm::Type * ()(llvm::Type *)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2>,llvm::PointerType * ()(llvm::PointerType *)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(*(void *)a2 + 8);
  if ((v3 & 0xFE) == 0x12) {
    unsigned int v3 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  unsigned int v4 = v3 >> 8;
  uint64_t v5 = std::function<llvm::Type * ()(llvm::Type *)>::operator()(*(void *)(*(void *)(a1 + 8) + 24), **(void **)(*(void *)a2 + 16));
  if (v4 != **(_DWORD **)(a1 + 16) && !v5) {
    return 0;
  }
  return llvm::PointerType::get();
}

__n128 std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2>,llvm::PointerType * ()(llvm::PointerType *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2579A80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2>,llvm::PointerType * ()(llvm::PointerType *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F2579A80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2>,llvm::PointerType * ()(llvm::PointerType *)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1>,llvm::FunctionType * ()(llvm::FunctionType *)>::operator()(uint64_t a1, uint64_t *a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  v13[0] = v14;
  v13[1] = (void *)0x800000000;
  unsigned int v4 = *(uint64_t **)(v3 + 16);
  uint64_t v5 = *v4;
  char v6 = 0;
  if (8 * *(unsigned int *)(v3 + 12) != 8)
  {
    uint64_t v7 = v4 + 1;
    uint64_t v8 = 8 * ((8 * *(unsigned int *)(v3 + 12) - 8) >> 3);
    do
    {
      uint64_t v9 = std::function<llvm::Type * ()(llvm::Type *)>::operator()(*(void *)(*(void *)(a1 + 8) + 24), *v7);
      if (v9)
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v13, v9);
        char v6 = 1;
      }
      else
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v13, *v7);
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  uint64_t v10 = std::function<llvm::Type * ()(llvm::Type *)>::operator()(*(void *)(*(void *)(a1 + 8) + 24), v5);
  if (v10 || (v6 & 1) != 0) {
    uint64_t v11 = llvm::FunctionType::get();
  }
  else {
    uint64_t v11 = 0;
  }
  if (v13[0] != v14) {
    free(v13[0]);
  }
  return v11;
}

uint64_t std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1>,llvm::FunctionType * ()(llvm::FunctionType *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2579A38;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1>,llvm::FunctionType * ()(llvm::FunctionType *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2579A38;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1>,llvm::FunctionType * ()(llvm::FunctionType *)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0>,llvm::StructType * ()(llvm::StructType *)>::operator()(uint64_t a1, unint64_t *a2)
{
  v30[8] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *a2;
  unint64_t v28 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  int8x8_t v5 = *(int8x8_t *)(v4 + 8);
  if (v5)
  {
    unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v3) + 8) ^ HIDWORD(v3));
    unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v3) ^ (v6 >> 47) ^ v6);
    unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v5);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = v8;
      if (v8 >= *(void *)&v5) {
        unint64_t v10 = v8 % *(void *)&v5;
      }
    }
    else
    {
      unint64_t v10 = v8 & (*(void *)&v5 - 1);
    }
    uint64_t v11 = *(void **)(*(void *)v4 + 8 * v10);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v3) {
            return std::__hash_table<std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::__unordered_map_hasher<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::hash<llvm::StructType *>,std::equal_to<llvm::StructType *>,true>,std::__unordered_map_equal<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::equal_to<llvm::StructType *>,std::hash<llvm::StructType *>,true>,std::allocator<std::__hash_value_type<llvm::StructType *,llvm::StructType *>>>::__emplace_unique_key_args<llvm::StructType *,std::piecewise_construct_t const&,std::tuple<llvm::StructType * const&>,std::tuple<>>((float *)v4, v3, &v28)[3];
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= *(void *)&v5) {
              v13 %= *(void *)&v5;
            }
          }
          else
          {
            v13 &= *(void *)&v5 - 1;
          }
          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }
  if ((*(unsigned char *)(v3 + 9) & 1) == 0)
  {
    uint64_t v24 = 0;
    std::__hash_table<std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::__unordered_map_hasher<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::hash<llvm::StructType *>,std::equal_to<llvm::StructType *>,true>,std::__unordered_map_equal<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::equal_to<llvm::StructType *>,std::hash<llvm::StructType *>,true>,std::allocator<std::__hash_value_type<llvm::StructType *,llvm::StructType *>>>::__emplace_unique_key_args<llvm::StructType *,std::piecewise_construct_t const&,std::tuple<llvm::StructType * const&>,std::tuple<>>((float *)v4, v3, &v28)[3] = 0;
    return v24;
  }
  v29[0] = v30;
  v29[1] = (void *)0x800000000;
  uint64_t v14 = *(unsigned int *)(v3 + 12);
  if (!v14)
  {
    uint64_t v24 = 0;
    goto LABEL_44;
  }
  char v15 = 0;
  unint64_t v16 = *(uint64_t **)(v3 + 16);
  char v17 = &v16[v14];
  do
  {
    while (1)
    {
      uint64_t v18 = *v16;
      unsigned int v19 = *(_DWORD *)(*v16 + 8);
      if (v19 == 16) {
        break;
      }
      if (v19 != 15) {
        goto LABEL_31;
      }
      if ((v19 & 0xFE) == 0x12) {
        unsigned int v19 = *(_DWORD *)(**(void **)(v18 + 16) + 8);
      }
      if (**(_DWORD **)(a1 + 16) != v19 >> 8) {
        goto LABEL_31;
      }
      uint64_t v20 = llvm::PointerType::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, v20);
      ++v16;
      char v15 = 1;
      if (v16 == v17) {
        goto LABEL_33;
      }
    }
    uint64_t v18 = std::function<llvm::StructType * ()(llvm::StructType *)>::operator()(*(void *)(*(void *)(a1 + 32) + 24), v18);
    BOOL v21 = v18 != 0;
    if (!v18) {
      uint64_t v18 = *v16;
    }
    v15 |= v21;
LABEL_31:
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, v18);
    ++v16;
  }
  while (v16 != v17);
  if ((v15 & 1) == 0)
  {
    uint64_t v24 = 0;
    goto LABEL_43;
  }
LABEL_33:
  if ((*(unsigned char *)(v3 + 9) & 4) != 0 || !*(void *)(v3 + 24))
  {
    uint64_t v24 = llvm::StructType::get();
  }
  else
  {
    Name = (void *)llvm::StructType::getName((llvm::StructType *)v3);
    if (Name)
    {
      std::string::basic_string[abi:nn180100](__p, Name, v23);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v27 = 0;
    }
    llvm::StructType::setName();
    uint64_t v24 = llvm::StructType::create();
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_43:
  uint64_t v4 = *(void *)(a1 + 8);
LABEL_44:
  std::__hash_table<std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::__unordered_map_hasher<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::hash<llvm::StructType *>,std::equal_to<llvm::StructType *>,true>,std::__unordered_map_equal<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::equal_to<llvm::StructType *>,std::hash<llvm::StructType *>,true>,std::allocator<std::__hash_value_type<llvm::StructType *,llvm::StructType *>>>::__emplace_unique_key_args<llvm::StructType *,std::piecewise_construct_t const&,std::tuple<llvm::StructType * const&>,std::tuple<>>((float *)v4, v3, &v28)[3] = v24;
  if (v29[0] != v30) {
    free(v29[0]);
  }
  return v24;
}

void *std::__hash_table<std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::__unordered_map_hasher<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::hash<llvm::StructType *>,std::equal_to<llvm::StructType *>,true>,std::__unordered_map_equal<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::equal_to<llvm::StructType *>,std::hash<llvm::StructType *>,true>,std::allocator<std::__hash_value_type<llvm::StructType *,llvm::StructType *>>>::__emplace_unique_key_args<llvm::StructType *,std::piecewise_construct_t const&,std::tuple<llvm::StructType * const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v20 = operator new(8 * *(void *)&prime);
          BOOL v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          size_t v23 = (void *)*((void *)a1 + 2);
          if (v23)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = a1 + 4;
            int v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  void *v23 = *v29;
                  *int v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v30) = v29;
                  int v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                size_t v23 = v29;
                int v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v31 = *(void **)a1;
  unsigned int v32 = *(void **)(*(void *)a1 + 8 * v3);
  if (v32)
  {
    *uint64_t i = *v32;
LABEL_72:
    void *v32 = i;
    goto LABEL_73;
  }
  *uint64_t i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v31[v3] = a1 + 4;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9) {
        v33 %= v9;
      }
    }
    else
    {
      v33 &= v9 - 1;
    }
    unsigned int v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

__n128 std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0>,llvm::StructType * ()(llvm::StructType *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25799F0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0>,llvm::StructType * ()(llvm::StructType *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F25799F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0>,llvm::StructType * ()(llvm::StructType *)>::~__func()
{
}

void *AGCLLVMUserObjectShaderBase::replaceEmulatedPayloadBufferAccesses(AGCLLVMUserObjectShaderBase *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::PointerType::get();
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  unint64_t v7 = (char *)this + *(void *)(*(void *)this - 24);
  unint64_t v8 = (llvm::Type *)*((void *)v7 + 27);
  __int16 v26 = 257;
  unint64_t v9 = (llvm::IRBuilderBase *)(v7 + 40);
  uint8x8_t v10 = llvm::IRBuilderBase::CreateCall((uint64_t)(v7 + 40), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v25);
  uint64_t v11 = (AGCLLVMUserObjectShaderBase *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v12, a3, (const llvm::Twine *)v23);
  __int16 v22 = 257;
  GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v9, v8, v10, Mul, (const llvm::Twine *)v21);
  if (*((unsigned char *)this + 4385))
  {
    float v15 = (char *)this + *(void *)(*(void *)this - 24);
    BOOL v16 = (llvm::Type *)*((void *)v15 + 27);
    unint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v26 = 257;
    GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v15 + 40), v16, GEP, v17, (const llvm::Twine *)v25);
  }
  unint64_t v18 = (AGCLLVMUserObjectShaderBase *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  unsigned int v19 = (llvm::Type *)llvm::PointerType::get();
  __int16 v26 = 257;
  llvm::IRBuilderBase::CreatePointerCast(v18, (llvm::Type **)GEP, v19, (const llvm::Twine *)v25);
  AGCLLVMUserObjectShaderBase::mutateValueAddressSpace(this, a2);
  llvm::Value::replaceAllUsesWith();
  return AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(this, 6, 1);
}

uint64_t AGCLLVMUserObjectShaderBase::accumulateAPIMeshSize(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unsigned int v20 = 0;
  unsigned int v7 = *(_DWORD *)(result + 8);
  if (!v7)
  {
    int v15 = 0;
    goto LABEL_20;
  }
  uint64_t v8 = result;
  uint64_t v19 = a4;
  char v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 10;
  do
  {
    __n128 result = isStringMDNode(*(llvm::MDString **)(v8 - 8 * v7 + 8 * v10), "air.shared");
    if (result)
    {
      char v9 = 1;
    }
    else if (isStringMDNode(*(llvm::MDString **)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8 * v10), "air.arg_type_name"))
    {
      String = (char *)llvm::MDString::getString(*(llvm::MDString **)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8 * ++v10));
      __n128 result = AGCLLVMBuilder::getComponentType(String, v13, (int *)&v20);
      unsigned int v11 = result;
    }
    else
    {
      __n128 result = isStringMDNode(*(llvm::MDString **)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8 * v10), "air.primitive_culled");
      if (result) {
        return result;
      }
    }
    ++v10;
    unsigned int v7 = *(_DWORD *)(v8 + 8);
  }
  while (v10 < v7);
  a4 = v19;
  if (v11 > 9)
  {
LABEL_19:
    int v14 = 0;
    int v15 = 0;
    unsigned int v7 = v20;
    if (v9) {
      goto LABEL_18;
    }
LABEL_20:
    uint64_t v17 = (*(_DWORD *)(a4 + 4 * a2) + v15);
    *(_DWORD *)(a4 + 4 * a2) = v17 + v15 + ~((v17 - 1) % (unint64_t)v15);
    goto LABEL_21;
  }
  if (((1 << v11) & 0x89) != 0)
  {
    unsigned int v7 = v20;
    int v14 = 4 * v20;
  }
  else
  {
    if (((1 << v11) & 0x112) == 0)
    {
      if (((1 << v11) & 0x224) != 0)
      {
        int v14 = v20;
        unsigned int v7 = v20;
        goto LABEL_17;
      }
      goto LABEL_19;
    }
    unsigned int v7 = v20;
    int v14 = 2 * v20;
  }
LABEL_17:
  int v15 = v14;
  if ((v9 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_18:
  uint64_t v16 = (*(_DWORD *)(a3 + 4 * a2) + v14);
  *(_DWORD *)(a3 + 4 * a2) = v16 + v14 + ~((v16 - 1) % (unint64_t)v14);
LABEL_21:
  *a5 += v7;
  return result;
}

uint64_t virtual thunk to'AGCLLVMUserObjectShaderSW::isDMAPromotionDisabled(AGCLLVMUserObjectShaderSW *this)
{
  return *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 208) + 4520) + 12) >> 7;
}

BOOL virtual thunk to'AGCLLVMUserObjectShaderSW::enableSoftFaultOptimization(AGCLLVMUserObjectShaderSW *this)
{
  return (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 200) + 4520) + 15) & 0x40) == 0;
}

uint64_t virtual thunk to'AGCLLVMUserObjectShaderSW::getBufferBoundsCheckMode(AGCLLVMUserObjectShaderSW *this)
{
  return (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 192) + 4520) + 12) >> 4) & 7;
}

BOOL virtual thunk to'AGCLLVMUserObjectShaderSW::constructReply(AGCLLVMUserObjectShaderSW *this)
{
  return AGCLLVMUserObjectShaderSW::constructReply((AGCLLVMUserObjectShaderSW *)((char *)this
                                                                               + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMUserObjectShaderSW::constructReply(AGCLLVMUserObjectShaderSW *this)
{
  BOOL result = AGCDeserializedReply::deserialize((AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24)));
    int v3 = AGCLLVMUserObject::constructFlatReply(this);
    uint64_t v4 = (char *)this + *(void *)(*(void *)this - 24);
    int8x8_t v5 = (flatbuffers::FlatBufferBuilder *)(v4 + 2472);
    v4[2542] = 1;
    int v6 = *((_DWORD *)v4 + 626) - *((_DWORD *)v4 + 630) + *((_DWORD *)v4 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v4 + 309, 4, *((_DWORD *)this + 1098));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, 6, *((_DWORD *)this + 1099));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, 8, *((_DWORD *)this + 1100));
    LODWORD(v5) = flatbuffers::FlatBufferBuilder::EndTable(v5, v6);
    unsigned int v7 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v8 = (flatbuffers::FlatBufferBuilder *)(v7 + 2472);
    v7[2542] = 1;
    int v9 = *((_DWORD *)v7 + 626) - *((_DWORD *)v7 + 630) + *((_DWORD *)v7 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v7 + 309, 4, *((_DWORD *)this + 1216));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v8, 6, *((_DWORD *)this + 1216));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v8, 8, *((_DWORD *)this + 1216));
    LODWORD(v8) = flatbuffers::FlatBufferBuilder::EndTable(v8, v9);
    unsigned int v10 = (char *)this + *(void *)(*(void *)this - 24);
    unsigned int v11 = (flatbuffers::FlatBufferBuilder *)(v10 + 2472);
    v10[2542] = 1;
    int v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v10 + 2472), 4, (int)v5);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v11, 6, (int)v8);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, *((_DWORD *)this + 1094));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 10, *((_DWORD *)this + 1095));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 12, *((_DWORD *)this + 1092));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v11, 14, *((unsigned __int8 *)this + 12), 0);
    LODWORD(v5) = flatbuffers::FlatBufferBuilder::EndTable(v11, v12);
    unint64_t v13 = (char *)this + *(void *)(*(void *)this - 24);
    int v14 = (flatbuffers::FlatBufferBuilder *)(v13 + 2472);
    int v15 = *(_DWORD *)(*((void *)v13 + 50) + 864);
    v13[2542] = 1;
    LODWORD(v11) = *((_DWORD *)v13 + 626) - *((_DWORD *)v13 + 630) + *((_DWORD *)v13 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v13 + 309, 12, v15);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v14, 14, 0, 0);
    unsigned int v16 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v14, 1);
    flatbuffers::FlatBufferBuilder::TrackField(v14, 10, v16);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v14, 8, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v14, 6, 0, 0);
    LODWORD(v14) = flatbuffers::FlatBufferBuilder::EndTable(v14, (__int16)v11);
    uint64_t v17 = (char *)this + *(void *)(*(void *)this - 24);
    v17[2542] = 1;
    int v18 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v17 + 2472), (unsigned __int16)*((_DWORD *)v17 + 626) - (unsigned __int16)*((_DWORD *)v17 + 630) + *((_DWORD *)v17 + 628));
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 2472), v18, v19);
    unsigned int v20 = (char *)this + *(void *)(*(void *)this - 24);
    BOOL v21 = (flatbuffers::FlatBufferBuilder *)(v20 + 2568);
    v20[2638] = 1;
    int v22 = *((_DWORD *)v20 + 650) - *((_DWORD *)v20 + 654) + *((_DWORD *)v20 + 652);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v20 + 321, 4, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v21, 6, 0, 0);
    LODWORD(v21) = flatbuffers::FlatBufferBuilder::EndTable(v21, v22);
    size_t v23 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v24 = (flatbuffers::FlatBufferBuilder *)(v23 + 2472);
    v23[2542] = 1;
    int v25 = *((_DWORD *)v23 + 626) - *((_DWORD *)v23 + 630) + *((_DWORD *)v23 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v23 + 2472), v3);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ObjectShaderInfo>(v24, (int)v5);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v24, (int)v14);
    __int16 v26 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v27 = flatbuffers::FlatBufferBuilder::EndTable(v24, v25);
    flatbuffers::FlatBufferBuilder::Finish(v26, v27, v28);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
    int v29 = (char *)this + *(void *)(*(void *)this - 24);
    unint64_t v30 = (flatbuffers::FlatBufferBuilder *)(v29 + 2568);
    v29[2638] = 1;
    LODWORD(v5) = *((_DWORD *)v29 + 650) - *((_DWORD *)v29 + 654) + *((_DWORD *)v29 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v29 + 2568), (int)v21);
    uint64_t v31 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 2568);
    int v32 = flatbuffers::FlatBufferBuilder::EndTable(v30, (__int16)v5);
    flatbuffers::FlatBufferBuilder::Finish(v31, v32, v33);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
    return AGCLLVMUserObjectShaderBase::validateReply(this);
  }
  return result;
}

void virtual thunk to'AGCLLVMUserObjectShaderSW::getCompilationKeyDescription(AGCLLVMUserObjectShaderSW *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMUserObjectShaderSW::getCompilationKeyDescription(AGCLLVMUserObjectShaderSW *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  int v3 = (_DWORD *)*((void *)this + 565);
  std::string::basic_string[abi:nn180100]<0>(&v52, "AGCObjectContextStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v50, "mutableBuffers");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v53);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v53.__r_.__value_.__r.__words[2], (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v53.__r_.__value_.__r + *(void *)(v53.__r_.__value_.__r.__words[2] - 24) + 24) = *(_DWORD *)((char *)&v53.__r_.__value_.__r + *(void *)(v53.__r_.__value_.__r.__words[2] - 24) + 24) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v66, (const void **)v50, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v53.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + *(void *)(v53.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v53.__r_.__value_.__r.__words[2] = v4;
  uint64_t v54 = MEMORY[0x1E4FBA470] + 16;
  if (v56 < 0) {
    operator delete(v55);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB7A0710](&v57);
  std::string::basic_string[abi:nn180100]<0>(v48, "maxTotalThreadsPerThreadgroup");
  _agcFieldString<unsigned int>(&v67, (const void **)v48, v3[5]);
  std::string::basic_string[abi:nn180100]<0>(v46, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v68, (const void **)v46, v3[3] & 1);
  std::string::basic_string[abi:nn180100]<0>(v44, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v69, (const void **)v44, (v3[3] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v42, "customBorderColor");
  _agcFieldString<unsigned int>(&v70, (const void **)v42, v3[4] & 1);
  std::string::basic_string[abi:nn180100]<0>(v40, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v71, (const void **)v40, (v3[3] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v38, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v72, (const void **)v38, (v3[3] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v36, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v73, (const void **)v36, (v3[3] >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(v34, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v74, (const void **)v34, (v3[3] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v32, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v75, (const void **)v32, (v3[3] >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v30, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v76, (const void **)&v30, (unsigned __int16)(v3[3] >> 10));
  std::string::basic_string[abi:nn180100]<0>(v28, "enableStackShadow");
  _agcFieldString<unsigned int>(&v77, (const void **)v28, (v3[3] >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v26, "bufferBoundsCheckMode");
  _agcFieldString<unsigned int>(&v78, (const void **)v26, (v3[3] >> 4) & 7);
  std::string::basic_string[abi:nn180100]<0>(v24, "disableDMAPromotion");
  _agcFieldString<unsigned int>(&v79, (const void **)v24, (v3[3] >> 7) & 1);
  std::string::basic_string[abi:nn180100]<0>(v22, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v80, (const void **)v22, v3[3] >> 31);
  std::string::basic_string[abi:nn180100]<0>(v20, "meshNeedsTGCounts");
  _agcFieldString<unsigned int>(&v81, (const void **)v20, (v3[4] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v18, "meshNeedsOSGridPosition");
  _agcFieldString<unsigned int>(&v82, (const void **)v18, (v3[4] >> 2) & 1);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v64, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
  }
  else {
    std::string v64 = v52;
  }
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v64, 0);
  std::string::basic_string[abi:nn180100]<0>(v59, "{");
  _agcIndentedLine(&v61, (std::string::value_type *)v59, 0);
  if ((v63 & 0x80u) == 0) {
    int8x8_t v5 = (const std::string::value_type *)&v61;
  }
  else {
    int8x8_t v5 = (const std::string::value_type *)v61;
  }
  if ((v63 & 0x80u) == 0) {
    std::string::size_type v6 = v63;
  }
  else {
    std::string::size_type v6 = v62;
  }
  unsigned int v7 = std::string::append(&__p, v5, v6);
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((char)v63 < 0) {
    operator delete(v61);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = 0; i != 51; i += 3)
  {
    unsigned int v10 = (char *)&v66 + i * 8;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[i + 2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else {
      std::string __p = *(std::string *)v10;
    }
    int v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v58 = __p;
    }
    _agcIndentedLine(&v61, (std::string::value_type *)&v58, 1);
    if ((v63 & 0x80u) == 0) {
      int v12 = (const std::string::value_type *)&v61;
    }
    else {
      int v12 = (const std::string::value_type *)v61;
    }
    if ((v63 & 0x80u) == 0) {
      std::string::size_type v13 = v63;
    }
    else {
      std::string::size_type v13 = v62;
    }
    std::string::append(&v53, v12, v13);
    if ((char)v63 < 0) {
      operator delete(v61);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v58.__r_.__value_.__l.__data_);
      if ((v11 & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v61, "}");
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v61, 0);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v14 = &v53;
  }
  else {
    int v14 = (std::string *)v53.__r_.__value_.__r.__words[0];
  }
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v53.__r_.__value_.__l.__size_;
  }
  unsigned int v16 = std::string::insert(&__p, 0, (const std::string::value_type *)v14, size);
  *a2 = *v16;
  v16->__r_.__value_.__r.__words[0] = 0;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v63 < 0) {
    operator delete(v61);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = 51;
  do
  {
    if (v66.__r_.__value_.__s.__data_[v17 * 8 - 1] < 0) {
      operator delete((void *)__p.__r_.__value_.__r.__words[v17 + 1]);
    }
    v17 -= 3;
  }
  while (v17 * 8);
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v31 < 0) {
    operator delete(v30);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
}

uint64_t virtual thunk to'AGCLLVMUserObjectShaderSW::getForwardProgressMode(AGCLLVMUserObjectShaderSW *this)
{
  return *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 128) + 4520) + 12) >> 31;
}

uint64_t virtual thunk to'AGCLLVMUserObjectShaderSW::getShaderType(AGCLLVMUserObjectShaderSW *this)
{
  return 3;
}

const char *virtual thunk to'AGCLLVMUserObjectShaderSW::dumpType(AGCLLVMUserObjectShaderSW *this)
{
  return "object";
}

void virtual thunk to'AGCLLVMUserObjectShaderSW::~AGCLLVMUserObjectShaderSW(AGCLLVMUserObjectShaderSW *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F2579B30;
  v1[610] = &unk_1F2579E68;
  v1[614] = &unk_1F2579F58;
  uint64_t v2 = v1[607];
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 605));
  }
  AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderBase::FunctionStateCache *)(v1 + 566));
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase((AGCLLVMUserObjectShaderBase *)v1, (uint64_t *)off_1F2579F68);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 610));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F2579B30;
  v1[610] = &unk_1F2579E68;
  v1[614] = &unk_1F2579F58;
  uint64_t v2 = v1[607];
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 605));
  }
  AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderBase::FunctionStateCache *)(v1 + 566));
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase((AGCLLVMUserObjectShaderBase *)v1, (uint64_t *)off_1F2579F68);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 610));
}

uint64_t AGCLLVMUserObjectShaderSW::isDMAPromotionDisabled(AGCLLVMUserObjectShaderSW *this)
{
  return *(unsigned __int8 *)(*((void *)this + 565) + 12) >> 7;
}

BOOL AGCLLVMUserObjectShaderSW::enableSoftFaultOptimization(AGCLLVMUserObjectShaderSW *this)
{
  return (*(unsigned char *)(*((void *)this + 565) + 15) & 0x40) == 0;
}

uint64_t AGCLLVMUserObjectShaderSW::getForwardProgressMode(AGCLLVMUserObjectShaderSW *this)
{
  return *(_DWORD *)(*((void *)this + 565) + 12) >> 31;
}

uint64_t AGCLLVMUserObjectShaderSW::getBufferBoundsCheckMode(AGCLLVMUserObjectShaderSW *this)
{
  return (*(_DWORD *)(*((void *)this + 565) + 12) >> 4) & 7;
}

uint64_t AGCLLVMUserObjectShaderSW::getShaderType(AGCLLVMUserObjectShaderSW *this)
{
  return 3;
}

const char *AGCLLVMUserObjectShaderSW::dumpType(AGCLLVMUserObjectShaderSW *this)
{
  return "object";
}

uint64_t AGCLLVMUserObjectShaderSW::replacePayloadBufferAccesses(AGCLLVMUserObjectShaderSW *this, llvm::Value *a2)
{
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  int8x8_t v5 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v9 = 257;
  std::string::size_type v6 = llvm::IRBuilderBase::CreateCall((uint64_t)(v5 + 40), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v8);
  AGCLLVMUserObjectShaderBase::replaceEmulatedPayloadBufferAccesses(this, a2, v6);
  return 1;
}

uint64_t AGCLLVMUserObjectShaderSW::buildNumGroups(AGCLLVMUserObjectShaderSW *this, llvm::Type *a2, int a3)
{
  std::string::size_type v6 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserObjectShaderSW *))(*(void *)this + 496))(this);
  unsigned int v7 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(this, a2, a3);
  std::string::size_type v8 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v16 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v8, v6, v7, (const llvm::Twine *)v15);
  unsigned int v10 = (llvm::Value *)llvm::ConstantInt::get();
  v14[16] = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v8, Add, v10, (const llvm::Twine *)v14);
  int v12 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v16 = 257;
  return llvm::IRBuilderBase::CreateUDiv(v12, Sub, v7, (const llvm::Twine *)v15);
}

uint64_t AGCLLVMUserObjectShaderSW::buildGlobalSize(llvm::Type ***this, llvm::Type *a2)
{
  if (!this[535])
  {
    std::string::size_type v4 = (llvm::Type *)llvm::PointerType::get();
    unsigned int v5 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 368))();
    v43[0] = "agc.indirect_wg_size_buffer_pointer.";
    uint64_t v44 = v5;
    __int16 v45 = 2051;
    unsigned int v6 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 368))();
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v4, (const llvm::Twine *)v43, v6, 12, 5, 0);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 533), (uint64_t)GlobalBufferBinding);
  }
  std::string::size_type v8 = (uint64_t *)((char *)this + (void)*(*this - 3));
  __int16 v9 = this[535];
  __int16 v45 = 257;
  unsigned int v10 = AGCLLVMBuilder::tryDeducePointeeType(v9, a2);
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, (uint64_t)v9, 0, (uint64_t)v43);
  int v12 = (char *)this + (void)*(*this - 3);
  std::string::size_type v13 = (llvm::Type *)*((void *)v12 + 29);
  int v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v45 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v12 + 40), v13, AlignedLoad, v14, (const llvm::Twine *)v43);
  __int16 v16 = (uint64_t *)((char *)this + (void)*(*this - 3) + 40);
  __int16 v45 = 257;
  int v18 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v17);
  uint64_t v19 = llvm::IRBuilderBase::CreateAlignedLoad(v16, v18, (uint64_t)GEP, 0, (uint64_t)v43);
  __int16 v42 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v16, 38, v19, (uint64_t)a2, (uint64_t)v41);
  if (!this[538])
  {
    int v22 = (llvm::Type *)llvm::PointerType::get();
    unsigned int v23 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 360))();
    v43[0] = "agc.indirect_wg_count_buffer_pointer.";
    uint64_t v44 = v23;
    __int16 v45 = 2051;
    unsigned int v24 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 360))();
    char v25 = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v22, (const llvm::Twine *)v43, v24, 12, 5, 0);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 536), (uint64_t)v25);
  }
  __int16 v26 = (uint64_t *)((char *)this + (void)*(*this - 3));
  char v27 = this[538];
  __int16 v45 = 257;
  uint64_t v28 = AGCLLVMBuilder::tryDeducePointeeType(v27, v20);
  char v29 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v26 + 5, v28, (uint64_t)v27, 0, (uint64_t)v43);
  unint64_t v30 = (char *)this + (void)*(*this - 3);
  char v31 = (llvm::Type *)*((void *)v30 + 29);
  int v32 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v45 = 257;
  char v33 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v30 + 40), v31, v29, v32, (const llvm::Twine *)v43);
  uint64_t v34 = (uint64_t *)((char *)this + (void)*(*this - 3) + 40);
  __int16 v45 = 257;
  uint64_t v36 = AGCLLVMBuilder::tryDeducePointeeType(v33, v35);
  uint64_t v37 = llvm::IRBuilderBase::CreateAlignedLoad(v34, v36, (uint64_t)v33, 0, (uint64_t)v43);
  __int16 v42 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v34, 38, v37, (uint64_t)a2, (uint64_t)v41);
  char v39 = (llvm::IRBuilderBase *)((char *)this + (void)*(*this - 3) + 40);
  __int16 v45 = 257;
  return llvm::IRBuilderBase::CreateMul(v39, Cast, v38, (const llvm::Twine *)v43);
}

uint64_t AGCLLVMUserObjectShaderSW::usesCustomBorderColor(AGCLLVMUserObjectShaderSW *this)
{
  return *(_DWORD *)(*((void *)this + 565) + 16) & 1;
}

uint64_t AGCLLVMUserObjectShaderSW::replacePreRuntimeLinkBuiltins(AGCLLVMUserObjectShaderSW *this)
{
  v13[30] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(llvm::LLVMContext ***)((char *)this + *(void *)(*(void *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v9, *v2);
  v13[29] = this;
  __int16 v9 = &unk_1F257AB70;
  v13[25] = v2;
  int v4 = 1;
  unsigned int v5 = (uint64_t (*)(AGCLLVMUserObjectShaderSW *))AGCLLVMUserObjectShaderSW::buildSetMeshGridProperties;
  uint64_t v6 = 0;
  int v7 = 5;
  __int16 v8 = 0;
  AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderSW>::doReplacement((uint64_t)&v9, (uint64_t)"air.set_threadgroups_per_grid_mesh_properties", 45, (uint64_t)&v4);
  int v4 = 1;
  unsigned int v5 = AGCLLVMUserObjectShaderSW::getLinearThreadgroupID;
  uint64_t v6 = 0;
  int v7 = 1;
  __int16 v8 = 0;
  AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderSW>::doReplacement((uint64_t)&v9, (uint64_t)"agc.gpe.get_payload_id", 22, (uint64_t)&v4);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v13);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v12);
  if (v10 != &v11) {
    free(v10);
  }
  return 1;
}

uint64_t AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderSW>::doReplacement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::Module::getFunction();
  if (result)
  {
    uint64_t v6 = (llvm::Function *)result;
    int v7 = *(_DWORD *)(a4 + 24);
    if (v7 == 12)
    {
      uint64_t v10 = *(void *)(result + 8);
      while (v10)
      {
        uint64_t v11 = *(void *)(v10 + 24);
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = *(void (**)(void *, uint64_t))(a4 + 8);
        uint64_t v13 = *(void *)(a4 + 16);
        int v14 = (void *)(*(void *)(a1 + 368) + (v13 >> 1));
        if (v13) {
          uint64_t v12 = *(void (**)(void *, uint64_t))(*v14 + v12);
        }
        v12(v14, v11);
      }
      return llvm::Function::eraseFromParent(v6);
    }
    if (v7 == 11)
    {
      __int16 v8 = *(unsigned char **)(a4 + 8);
      if (v8)
      {
        size_t v9 = strlen(*(const char **)(a4 + 8));
        *(void *)&v93[0] = (char *)&v93[1] + 8;
        *(_OWORD *)((char *)v93 + 8) = xmmword_1CADD6290;
        llvm::SmallVectorImpl<char>::append<char const*,void>(v93, v8, &v8[v9]);
      }
      else
      {
        *(void *)&v93[1] = 64;
        *(void *)&v93[0] = (char *)&v93[1] + 8;
        *((void *)&v93[0] + 1) = 0;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(v93, ".", "");
      if (*(void *)&v93[1] < *((void *)&v93[0] + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      llvm::Module::getOrInsertFunction();
      llvm::Value::replaceAllUsesWith();
      if (*(_OWORD **)&v93[0] != (_OWORD *)((char *)&v93[1] + 8)) {
        free(*(void **)&v93[0]);
      }
      return llvm::Function::eraseFromParent(v6);
    }
    uint64_t v15 = **(void **)(*(void *)(result + 24) + 16);
    BOOL v16 = (*(_DWORD *)(v15 + 8) & 0xFE) != 0x12 || *(unsigned char *)(a4 + 29) == 0;
    int v17 = !v16;
    if (v16) {
      int v18 = 1;
    }
    else {
      int v18 = *(_DWORD *)(v15 + 32);
    }
    int v80 = v18;
    int v78 = *(_DWORD *)(a1 + 104);
    std::string v79 = (llvm::Function *)result;
    uint64_t v19 = *(void *)(result + 8);
    if (!v19)
    {
LABEL_110:
      *(_DWORD *)(a1 + 104) = v78;
      uint64_t v6 = v79;
      return llvm::Function::eraseFromParent(v6);
    }
    unsigned int v20 = (llvm::IRBuilderBase *)(a1 + 8);
    uint64_t v82 = a4;
    while (1)
    {
      char v21 = *(llvm::Instruction **)(v19 + 24);
      uint64_t v22 = *(void *)(v19 + 8);
      if (*(_DWORD *)a4 == 1)
      {
        int v23 = 0;
      }
      else
      {
        if (*(_DWORD *)a4 != 2) {
          goto LABEL_27;
        }
        int v23 = 121;
      }
      *(_DWORD *)(a1 + 104) = v23;
LABEL_27:
      uint64_t v81 = v22;
      llvm::IRBuilderBase::SetInsertPoint(v20, v21);
      uint64_t v24 = llvm::UndefValue::get();
      if (v80)
      {
        for (uint64_t i = 0; i != v80; ++i)
        {
          uint64_t v83 = (llvm::Value *)v24;
          uint64_t v94 = 0;
          memset(v93, 0, sizeof(v93));
          unint64_t v26 = llvm::CallBase::arg_end(v21) - (void)v21 + 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF);
          if ((v26 & 0x1FFFFFFFE0) != 0)
          {
            uint64_t v27 = (v26 >> 5);
            uint64_t v28 = (llvm::Value **)v93;
            char v29 = v21;
            do
            {
              unint64_t v30 = (llvm::Value **)((char *)v29 - 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
              char v31 = *v30;
              llvm::Type *v28 = *v30;
              if (v17 && (*(_DWORD *)(*(void *)v31 + 8) & 0xFE) == 0x12)
              {
                __int16 v92 = 257;
                int v32 = (llvm::Value *)llvm::ConstantInt::get();
                llvm::Type *v28 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v20, v31, v32, (const llvm::Twine *)v91);
              }
              ++v28;
              char v29 = (llvm::Instruction *)((char *)v29 + 32);
              --v27;
            }
            while (v27);
          }
          if (*(unsigned char *)(v82 + 28))
          {
            char v33 = **(llvm::Type ***)&v93[0];
            if ((*(_DWORD *)(**(void **)&v93[0] + 8) & 0xFE) == 0x12) {
              char v33 = (llvm::Type *)**((void **)v33 + 2);
            }
            v91[0] = llvm::Type::getPrimitiveSizeInBits(v33);
            v91[1] = v34;
            if (llvm::TypeSize::operator unsigned long long() == 32)
            {
              int v35 = 0;
            }
            else
            {
              uint64_t v36 = *(llvm::Type **)(a1 + 168);
              if ((*(_DWORD *)(**(void **)&v93[0] + 8) & 0xFE) == 0x12) {
                uint64_t v36 = (llvm::Type *)llvm::FixedVectorType::get();
              }
              if ((v26 & 0x1FFFFFFFE0) != 0)
              {
                uint64_t v37 = (v26 >> 5);
                uint64_t v38 = (llvm::Value **)v93;
                do
                {
                  char v39 = *v38;
                  __int16 v92 = 257;
                  *v38++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v20, v39, v36, (const llvm::Twine *)v91);
                  --v37;
                }
                while (v37);
                int v35 = 1;
              }
              else
              {
                int v35 = 1;
              }
            }
          }
          else
          {
            int v35 = 0;
          }
          if (llvm::FPMathOperator::classof((uint64_t)v21)) {
            unsigned int FastMathFlags = llvm::Instruction::getFastMathFlags(v21);
          }
          else {
            unsigned int FastMathFlags = 0;
          }
          uint64_t v41 = *(void *)(**(void **)(a1 + 368) - 24) + *(void *)(a1 + 368);
          long long v88 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v89, v20);
          int v90 = *(_DWORD *)(a1 + 104);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v88, v41 + 40);
          if (v89) {
            llvm::MetadataTracking::untrack();
          }
          switch(*(_DWORD *)(v82 + 24))
          {
            case 1:
              __int16 v42 = *(uint64_t (**)(void *))(v82 + 8);
              uint64_t v43 = *(void *)(v82 + 16);
              uint64_t v44 = (void *)(*(void *)(a1 + 368) + (v43 >> 1));
              if (v43) {
                __int16 v42 = *(uint64_t (**)(void *))(*v44 + v42);
              }
              uint64_t v73 = v42(v44);
              goto LABEL_95;
            case 2:
              uint64_t v46 = *(uint64_t (**)(void *, uint64_t))(v82 + 8);
              uint64_t v47 = *(void *)(v82 + 16);
              uint64_t v48 = *(void *)v21;
              char v49 = (void *)(*(void *)(a1 + 368) + (v47 >> 1));
              if ((v47 & 1) == 0) {
                goto LABEL_78;
              }
              goto LABEL_77;
            case 3:
              uint64_t v46 = *(uint64_t (**)(void *, uint64_t))(v82 + 8);
              uint64_t v50 = *(void *)(v82 + 16);
              uint64_t v48 = *(void *)&v93[0];
              char v49 = (void *)(*(void *)(a1 + 368) + (v50 >> 1));
              if ((v50 & 1) == 0) {
                goto LABEL_78;
              }
LABEL_77:
              uint64_t v46 = *(uint64_t (**)(void *, uint64_t))(*v49 + v46);
LABEL_78:
              uint64_t v73 = v46(v49, v48);
              goto LABEL_95;
            case 4:
              char v51 = (unsigned int *)(*(void *)&v93[0] + 24);
              if (*(_DWORD *)(*(void *)&v93[0] + 32) >= 0x41u) {
                char v51 = *(unsigned int **)v51;
              }
              uint64_t v52 = *v51;
              std::string v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v82 + 8);
              uint64_t v54 = *(void *)(v82 + 16);
              uint64_t v55 = *(void *)v21;
              char v56 = (void *)(*(void *)(a1 + 368) + (v54 >> 1));
              if (v54) {
                std::string v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v56 + v53);
              }
              goto LABEL_82;
            case 5:
              std::string v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v82 + 8);
              uint64_t v57 = *(void *)(v82 + 16);
              uint64_t v52 = *((void *)&v93[0] + 1);
              uint64_t v55 = *(void *)&v93[0];
              char v56 = (void *)(*(void *)(a1 + 368) + (v57 >> 1));
              if (v57) {
                std::string v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v56 + v53);
              }
LABEL_82:
              uint64_t v73 = v53(v56, v55, v52);
              goto LABEL_95;
            case 6:
              std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v59 = *(void *)(v82 + 16);
              uint64_t v61 = (const char *)*((void *)&v93[0] + 1);
              char v60 = *(_OWORD **)&v93[0];
              std::string::size_type v62 = (void *)(*(void *)(a1 + 368) + (v59 >> 1));
              if (v59) {
                std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(*v62 + v58);
              }
              uint64_t v64 = FastMathFlags;
              goto LABEL_91;
            case 7:
              std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v63 = *(void *)(v82 + 16);
              uint64_t v61 = (const char *)*((void *)&v93[0] + 1);
              char v60 = *(_OWORD **)&v93[0];
              uint64_t v64 = *(void *)&v93[1];
              std::string::size_type v62 = (void *)(*(void *)(a1 + 368) + (v63 >> 1));
              if (v63) {
                std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(*v62 + v58);
              }
              goto LABEL_91;
            case 8:
              uint64_t v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v66 = *(void *)(v82 + 16);
              std::string v68 = (_OWORD *)*((void *)&v93[0] + 1);
              uint64_t v67 = *(void *)&v93[0];
              std::string v69 = *(const char **)&v93[1];
              std::string v70 = (void *)(*(void *)(a1 + 368) + (v66 >> 1));
              if (v66) {
                uint64_t v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(*v70 + v65);
              }
              uint64_t v74 = FastMathFlags;
              goto LABEL_94;
            case 9:
              std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v71 = *(void *)(v82 + 16);
              std::string::size_type v62 = (void *)(*(void *)(a1 + 368) + (v71 >> 1));
              if (v71) {
                std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(*v62 + v58);
              }
              char v60 = v93;
              uint64_t v61 = "";
              uint64_t v64 = 0;
LABEL_91:
              uint64_t v73 = v58(v62, v60, v61, v64);
              goto LABEL_95;
            case 0xA:
              uint64_t v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v72 = *(void *)(v82 + 16);
              uint64_t v67 = *(void *)v21;
              std::string v70 = (void *)(*(void *)(a1 + 368) + (v72 >> 1));
              if (v72) {
                uint64_t v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(*v70 + v65);
              }
              std::string v68 = v93;
              std::string v69 = "";
              uint64_t v74 = 0;
LABEL_94:
              uint64_t v73 = v65(v70, v67, v68, v69, v74);
LABEL_95:
              FPTrunc = (llvm::Value *)v73;
              break;
            default:
              FPTrunc = 0;
              break;
          }
          uint64_t v75 = *(void *)(**(void **)(a1 + 368) - 24) + *(void *)(a1 + 368);
          long long v85 = *(_OWORD *)(v75 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v86, (llvm::IRBuilderBase *)(v75 + 40));
          int v87 = *(_DWORD *)(v75 + 136);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v85, (uint64_t)v20);
          if (v86) {
            llvm::MetadataTracking::untrack();
          }
          if (v35)
          {
            uint64_t v76 = *(void *)v21;
            if (v17 && (*(_DWORD *)(v76 + 8) & 0xFE) == 0x12) {
              uint64_t v76 = **(void **)(v76 + 16);
            }
            __int16 v92 = 257;
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v20, FPTrunc, (llvm::Type *)v76, (const llvm::Twine *)v91);
            if (!v17) {
              goto LABEL_106;
            }
          }
          else if (!v17)
          {
            goto LABEL_106;
          }
          __int16 v92 = 257;
          std::string v77 = (llvm::Value *)llvm::ConstantInt::get();
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v20, v83, FPTrunc, v77, (const llvm::Twine *)v91);
LABEL_106:
          uint64_t v24 = (uint64_t)FPTrunc;
        }
      }
      if (*(void *)v21 != *(void *)(a1 + 144)) {
        llvm::Value::replaceAllUsesWith();
      }
      llvm::Instruction::eraseFromParent(v21);
      a4 = v82;
      uint64_t v19 = v81;
      if (!v81) {
        goto LABEL_110;
      }
    }
  }
  return result;
}

uint64_t AGCLLVMUserObjectShaderSW::getLinearThreadgroupID(AGCLLVMUserObjectShaderSW *this)
{
  EmulationStateCacheForCurrentuint64_t Function = AGCLLVMUserObjectShaderBase::getEmulationStateCacheForCurrentFunction(this);
  uint64_t v3 = EmulationStateCacheForCurrentFunction[38];
  if (!v3)
  {
    int v4 = EmulationStateCacheForCurrentFunction;
    unsigned int v5 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 36);
    uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
    long long v36 = *(_OWORD *)(v6 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v37, (llvm::IRBuilderBase *)(v6 + 40));
    int v38 = *((_DWORD *)v6 + 34);
    int v7 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v8 = (llvm::IRBuilderBase *)(v7 + 40);
    uint64_t v9 = *(void *)(*(void *)(*((void *)v7 + 11) + 56) + 80);
    if (v9) {
      uint64_t v10 = (llvm::BasicBlock *)(v9 - 24);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v10);
    if (FirstInsertionPt) {
      uint64_t v12 = (llvm::Instruction *)(FirstInsertionPt - 24);
    }
    else {
      uint64_t v12 = 0;
    }
    llvm::IRBuilderBase::SetInsertPoint(v8, v12);
    uint64_t v13 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserObjectShaderSW *, void, void))(*(void *)this + 504))(this, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232), 0);
    int v14 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserObjectShaderSW *, void, uint64_t))(*(void *)this
                                                                                                 + 504))(this, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232), 1);
    uint64_t v15 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232), 0);
    BOOL v16 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232), 1);
    int v17 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232), 2);
    int v18 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    __int16 v35 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v18, v17, v14, (const llvm::Twine *)v34);
    __int16 v33 = 257;
    uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v18, Mul, v16, (const llvm::Twine *)v32);
    __int16 v31 = 257;
    char v21 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v18, Add, v13, (const llvm::Twine *)v30);
    __int16 v29 = 257;
    uint64_t v22 = llvm::IRBuilderBase::CreateAdd(v18, v21, v15, (const llvm::Twine *)v28);
    llvm::ValueHandleBase::operator=(v5, v22);
    int v23 = (char *)this + *(void *)(*(void *)this - 24) + 32;
    long long v25 = v36;
    uint64_t v26 = v37;
    if (v37) {
      llvm::MetadataTracking::track();
    }
    int v27 = v38;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v25, (uint64_t)(v23 + 8));
    if (v26) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v3 = v4[38];
    if (v37) {
      llvm::MetadataTracking::untrack();
    }
  }
  return v3;
}

uint64_t AGCLLVMUserObjectShaderSW::buildSetMeshGridProperties(AGCLLVMUserObjectShaderSW *this, llvm::Value *a2, llvm::Value *a3)
{
  if (*((unsigned char *)this + 4385))
  {
    EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 2, 0);
    int v7 = v6;
    __int16 v8 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
    LinearThreadgroupID = (llvm::Value *)AGCLLVMUserObjectShaderSW::getLinearThreadgroupID(this);
    __int16 v67 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v8, v9, LinearThreadgroupID, (const llvm::Twine *)v66);
    __int16 v65 = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v8, v7, EmulationStateBuffer, Mul, (const llvm::Twine *)v64);
    uint64_t v13 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    int v14 = (llvm::Type *)llvm::PointerType::get();
    __int16 v67 = 257;
    PointerCast = llvm::IRBuilderBase::CreatePointerCast(v13, GEP, v14, (const llvm::Twine *)v66);
    for (uint64_t i = 0; i != 3; ++i)
    {
      uint64_t v17 = *(void *)(*(void *)this - 24);
      int v18 = (uint64_t *)((char *)this + v17 + 40);
      uint64_t v19 = (llvm::Type **)AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + v17 + 232), i);
      unsigned int v20 = (char *)this + *(void *)(*(void *)this - 24);
      char v21 = (llvm::Type *)*((void *)v20 + 29);
      uint64_t v22 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v67 = 257;
      uint64_t v23 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v20 + 40), v21, PointerCast, v22, (const llvm::Twine *)v66);
      llvm::IRBuilderBase::CreateAlignedStore(v18, v19, v23, 0);
    }
  }
  uint64_t v24 = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 0, 0);
  uint64_t v26 = v25;
  int v27 = (llvm::Value *)AGCLLVMUserObjectShaderSW::getLinearThreadgroupID(this);
  uint64_t v28 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v67 = 257;
  __int16 v29 = (llvm::IRBuilderBase *)(v28 + 40);
  unint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
  Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v29, a3, v30, (const llvm::Twine *)v66);
  __int16 v65 = 257;
  int v32 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v33 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v29, Element, v32, (const llvm::Twine *)v64);
  uint64_t v34 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v67 = 257;
  __int16 v35 = (llvm::IRBuilderBase *)(v34 + 40);
  long long v36 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v37 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v35, a3, v36, (const llvm::Twine *)v66);
  __int16 v65 = 257;
  int v38 = (llvm::Value *)llvm::ConstantInt::get();
  char v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v35, v37, v38, (const llvm::Twine *)v64);
  unsigned int v40 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v63 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v35, v39, v40, (const llvm::Twine *)v62);
  __int16 v42 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v43 = (AGCLLVMBuilder *)(v42 + 32);
  __int16 v67 = 257;
  uint64_t v44 = (llvm::IRBuilderBase *)(v42 + 40);
  __int16 v45 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v46 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v44, a3, v45, (const llvm::Twine *)v66);
  uint64_t v47 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v48 = (llvm::Value *)AGCLLVMBuilder::buildICmpSel(v43, v46, v47, 34);
  char v49 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v65 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v44, v48, v49, (const llvm::Twine *)v64);
  __int16 v63 = 257;
  char v51 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v52 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v44, Sub, v51, (const llvm::Twine *)v62);
  std::string v53 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v54 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v67 = 257;
  uint64_t v55 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v53, v52, v54, (const llvm::Twine *)v66);
  char v56 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v67 = 257;
  uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v56, v33, Shl, (const llvm::Twine *)v66);
  __int16 v65 = 257;
  std::string v58 = (llvm::Type **)llvm::IRBuilderBase::CreateOr(v56, v57, v55, (const llvm::Twine *)v64);
  uint64_t v59 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v63 = 257;
  uint64_t v60 = llvm::IRBuilderBase::CreateGEP(v59, v26, v24, v27, (const llvm::Twine *)v62);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v56, v58, v60, 0);
}

uint64_t AGCLLVMUserObjectShaderSW::setupShaderInputs(llvm::Function **this)
{
  AGCLLVMUserObjectShaderBase::setupShaderInputs((AGCLLVMUserObjectShaderBase *)this);
  uint64_t v2 = this[22];
  if (*((_WORD *)v2 + 9))
  {
    llvm::Function::BuildLazyArguments(this[22]);
    int v4 = this[22];
    uint64_t v3 = *((void *)v2 + 11);
    if (*((_WORD *)v4 + 9)) {
      llvm::Function::BuildLazyArguments(this[22]);
    }
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = *((void *)v2 + 11);
  }
  uint64_t v5 = *((void *)v2 + 11) + 40 * *((void *)v2 + 12);
  if (v3 != v5)
  {
    uint64_t v6 = (llvm::ValueHandleBase *)(this + 605);
    int v7 = (char *)(this + 39);
    do
    {
      uint64_t v8 = *((void *)this[11] + *(unsigned int *)(v3 + 32));
      if (v8)
      {
        uint64_t v9 = *(llvm::MDString **)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8);
        if (!*(unsigned char *)v9)
        {
          String = (void *)llvm::MDString::getString(v9);
          if (v11 == 24)
          {
            BOOL v12 = *String == 0x6873656D2E726961 && String[1] == 0x72705F646972675FLL;
            if (v12 && String[2] == 0x736569747265706FLL)
            {
              int v14 = (llvm::Type **)this[607];
              if (!v14)
              {
                uint64_t v15 = &v7[*((void *)*this - 3)];
                BOOL v16 = v7;
                uint64_t v17 = v6;
                int v18 = (llvm::Constant *)*((void *)v15 + 4);
                uint64_t v24 = "agc.ms_childcount";
                __int16 v25 = 259;
                uint64_t v19 = llvm::User::operator new((llvm::User *)0x58);
                llvm::Constant::getNullValue(v18, v20);
                uint64_t v6 = v17;
                int v7 = v16;
                llvm::GlobalVariable::GlobalVariable();
                llvm::GlobalObject::setSection();
                llvm::ValueHandleBase::operator=(v6, v19);
                int v14 = (llvm::Type **)this[607];
              }
              char v21 = (llvm::IRBuilderBase *)((char *)this + *((void *)*this - 3) + 40);
              uint64_t v22 = *(llvm::Type **)v3;
              __int16 v25 = 257;
              llvm::IRBuilderBase::CreatePointerCast(v21, v14, v22, (const llvm::Twine *)&v24);
              llvm::Value::replaceAllUsesWith();
            }
          }
        }
      }
      v3 += 40;
    }
    while (v3 != v5);
  }
  return 1;
}

uint64_t AGCLLVMUserObjectShaderSW::wrapperPrefixData(AGCLLVMUserObjectShaderSW *this)
{
  uint64_t v1 = *(unsigned int *)(*(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 816)
                       + 52);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = llvm::ConstantInt::get();
  return MEMORY[0x1F417B000](v1, v2);
}

uint64_t AGCLLVMUserObjectShaderSW::addWrapperPrefix(AGCLLVMUserObjectShaderSW *this)
{
  EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 0, 1);
  int v4 = v3;
  LinearThreadgroupID = (llvm::Value *)AGCLLVMUserObjectShaderSW::getLinearThreadgroupID(this);
  uint64_t v6 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  int v7 = (llvm::Type **)llvm::ConstantInt::get();
  uint64_t v8 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v12 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v8, v4, EmulationStateBuffer, LinearThreadgroupID, (const llvm::Twine *)v11);
  llvm::IRBuilderBase::CreateAlignedStore(v6, v7, GEP, 0);
  AGCLLVMTargetBuilder::CreateBarrier((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 32));
  return 1;
}

uint64_t AGCLLVMUserObjectShaderSW::initCompile(AGCLLVMUserObjectShaderSW *this)
{
  uint64_t v2 = validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1092), *(_DWORD *)(*((void *)this + 565) + 20), *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 864), (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (unsigned int *)this + 1092);
  if (v2) {
    AGCLLVMUserObjectShaderBase::initCompile(this);
  }
  return v2;
}

void AGCLLVMUserObjectShaderSW::~AGCLLVMUserObjectShaderSW(AGCLLVMUserObjectShaderSW *this)
{
  *(void *)this = &unk_1F2579B30;
  uint64_t v2 = (AGCLLVMUserObjectShaderSW *)((char *)this + 4880);
  *((void *)this + 610) = &unk_1F2579E68;
  *((void *)this + 614) = &unk_1F2579F58;
  uint64_t v3 = *((void *)this + 607);
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderSW *)((char *)this + 4840));
  }
  AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderSW *)((char *)this + 4528));
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase(this, (uint64_t *)off_1F2579F68);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  uint64_t v3;

  *(void *)this = &unk_1F2579B30;
  uint64_t v2 = (AGCLLVMUserObjectShaderSW *)((char *)this + 4880);
  *((void *)this + 610) = &unk_1F2579E68;
  *((void *)this + 614) = &unk_1F2579F58;
  uint64_t v3 = *((void *)this + 607);
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderSW *)((char *)this + 4840));
  }
  AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderSW *)((char *)this + 4528));
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase(this, (uint64_t *)off_1F2579F68);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

BOOL virtual thunk to'AGCLLVMAGPVertexShaderAnalysis::constructReply(AGCLLVMAGPVertexShaderAnalysis *this)
{
  return AGCLLVMAGPVertexShaderAnalysis::constructReply((AGCLLVMAGPVertexShaderAnalysis *)((char *)this
                                                                                         + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMAGPVertexShaderAnalysis::constructReply(AGCLLVMAGPVertexShaderAnalysis *this)
{
  BOOL result = AGCDeserializedReply::deserialize((AGCLLVMAGPVertexShaderAnalysis *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMAGPVertexShaderAnalysis *)((char *)this
                                                                         + *(void *)(*(void *)this - 24)));
    int v3 = AGCLLVMUserObject::constructFlatReply(this);
    int v4 = AGCLLVMUserVertexShader::constructFlatReply(this);
    GenericVaryingAllocator::serialize((AGCLLVMAGPVertexShaderAnalysis *)((char *)this + 4320), (AGCLLVMAGPVertexShaderAnalysis *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
    uint64_t v16 = 0;
    BOOL VaryingSignature = GenericVaryingAllocator::getVaryingSignature((uint64_t)this + 4320, (AGCLLVMAGPVertexShaderAnalysis *)((char *)this + *(void *)(*(void *)this - 24) + 2472), (_DWORD *)&v16 + 1, &v16);
    uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
    int v7 = (flatbuffers::FlatBufferBuilder *)(v6 + 2472);
    v6[2542] = 1;
    int v8 = *((_DWORD *)v6 + 626) - *((_DWORD *)v6 + 630) + *((_DWORD *)v6 + 628);
    if (VaryingSignature)
    {
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v7, 10, SHIDWORD(v16));
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v7, 12, v16);
    }
    int v9 = flatbuffers::FlatBufferBuilder::EndTable(v7, v8);
    uint64_t v10 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v11 = (flatbuffers::FlatBufferBuilder *)(v10 + 2472);
    v10[2542] = 1;
    int v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v10 + 2472), v3);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v11, v4);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLVertexInfo>(v11, v9);
    uint64_t v13 = (AGCLLVMAGPVertexShaderAnalysis *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v14 = flatbuffers::FlatBufferBuilder::EndTable(v11, v12);
    flatbuffers::FlatBufferBuilder::Finish(v13, v14, v15);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMAGPVertexShaderAnalysis *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
    return AGCLLVMAGPVertexShader::validateReply(this);
  }
  return result;
}

uint64_t virtual thunk to'AGCLLVMAGPVertexShader::getForwardProgressMode(AGCLLVMAGPVertexShader *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 128) + 10044);
}

void virtual thunk to'AGCLLVMAGPVertexShaderAnalysis::~AGCLLVMAGPVertexShaderAnalysis(AGCLLVMAGPVertexShaderAnalysis *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F25805A0;
  v1[1257] = &off_1F25808F0;
  v1[1261] = &off_1F25809E0;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  int v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257AFF0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1257));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F25805A0;
  v1[1257] = &off_1F25808F0;
  v1[1261] = &off_1F25809E0;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  int v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257AFF0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1257));
}

uint64_t AGCLLVMAGPVertexShader::isDMAPromotionDisabled(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned __int8 *)this + 10048);
}

BOOL AGCLLVMAGPVertexShader::enableSoftFaultOptimization(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned char *)this + 10051) == 0;
}

uint64_t AGCLLVMAGPVertexShader::getForwardProgressMode(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned int *)this + 2511);
}

uint64_t AGCLLVMAGPVertexShader::getBufferBoundsCheckMode(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned int *)this + 2510);
}

uint64_t AGCLLVMUserVertexShader::getSupportExternalVisibleFunctions(AGCLLVMUserVertexShader *this)
{
  return *((unsigned __int8 *)this + 5060);
}

llvm::Value *AGCLLVMAGPVertexShader::getPointSize(AGCLLVMAGPVertexShader *this, llvm::Value *a2)
{
  if (a2) {
    return a2;
  }
  if (!*((unsigned char *)this + 9458)) {
    return 0;
  }
  return (llvm::Value *)llvm::ConstantFP::get();
}

uint64_t AGCLLVMAGPVertexShader::setupClipDistanceOutput(void *a1, llvm::Value *a2, uint64_t a3, llvm::Value **a4, _DWORD *a5)
{
  uint64_t v9 = *(void *)a2;
  if (*(void *)a2) {
    BOOL v10 = *(unsigned char *)(*(void *)a2 + 8) == 18;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    int v26 = 0;
    v24[0] = 1;
    parseMDInt(0, a3, v24, &v26);
    uint64_t v16 = *(unsigned int *)(v9 + 32);
    if (v16)
    {
      uint64_t v17 = 0;
      int v18 = 4 * v26;
      do
      {
        uint64_t v19 = (char *)a1 + *(void *)(*a1 - 24);
        __int16 v25 = 257;
        unsigned int v20 = (llvm::IRBuilderBase *)(v19 + 40);
        char v21 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v20, a2, v21, (const llvm::Twine *)v24);
        *a5 |= 1 << (v18 + v17);
        a4[(v18 + v17++)] = (llvm::Value *)Element;
      }
      while (v16 != v17);
    }
  }
  else
  {
    uint64_t v11 = *(void *)(*a1 - 24);
    if (v9 == *(void *)((char *)a1 + v11 + 200))
    {
      *a5 |= 1u;
      *a4 = a2;
    }
    else
    {
      unsigned int v12 = *(_DWORD *)(v9 + 32);
      if (v12 >= 9)
      {
        std::string::append((std::string *)((char *)a1 + v11 + 8), "Number of clip planes used exceeds supported maximum");
        return 0;
      }
      *a5 |= ~(-1 << v12);
      int v26 = 0;
      if (v12)
      {
        do
        {
          uint64_t v13 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
          __int16 v25 = 257;
          uint64_t Value = llvm::IRBuilderBase::CreateExtractValue(v13, (uint64_t)a2, (uint64_t)&v26, 1, (uint64_t)v24);
          int v15 = v26;
          a4[v26] = (llvm::Value *)Value;
          int v26 = v15 + 1;
        }
        while (v15 + 1 < v12);
      }
    }
  }
  return 1;
}

uint64_t AGCLLVMUserVertexShader::getShaderType(AGCLLVMUserVertexShader *this)
{
  return 0;
}

const char *AGCLLVMUserVertexShader::dumpType(AGCLLVMUserVertexShader *this)
{
  return "vertex";
}

uint64_t AGCLLVMAGPVertexShader::usesCustomBorderColor(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned __int8 *)this + 9457);
}

uint64_t AGCLLVMAGPVertexShader::disableGin1122SWWA(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned __int8 *)this + 10050);
}

BOOL AGCLLVMAGPVertexShader::needsPCFClamp(AGCLLVMAGPVertexShader *this)
{
  return *((_DWORD *)this + 1263) != 0;
}

uint64_t AGCLLVMAGPVertexShader::getPCFStateForUnit(AGCLLVMAGPVertexShader *this, char a2)
{
  return 16 * ((*((_DWORD *)this + 1263) >> a2) & 1u);
}

uint64_t AGCLLVMAGPVertexShader::supportsConstantSamplers(AGCLLVMAGPVertexShader *this)
{
  return 1;
}

uint64_t AGCLLVMUserVertexShader::getNextUnlinkedVarying()
{
  return 0;
}

uint64_t AGCLLVMUserVertexShader::getGenericVaryingInfo()
{
  return 0;
}

{
  return 0;
}

uint64_t AGCLLVMUserVertexShader::disableGin1122SWWA(AGCLLVMUserVertexShader *this)
{
  return 0;
}

uint64_t AGCLLVMAGPVertexShaderAnalysis::setupShaderOutputs(AGCLLVMAGPVertexShaderAnalysis *this)
{
  v64[8] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(llvm::CallBase **)(*(void *)(llvm::Module::getFunction() + 8) + 24);
  uint64_t v3 = llvm::CallBase::arg_end(v2);
  int v4 = (uint64_t **)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  if (((v3 - (void)v4) & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v5 = *v4;
    uint64_t v6 = **v4;
    uint64_t v54 = v6;
    if (*(unsigned char *)(v6 + 8) == 16) {
      unsigned int v7 = *(_DWORD *)(v6 + 12);
    }
    else {
      unsigned int v7 = 1;
    }
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v54 = 0;
    uint64_t v5 = 0;
  }
  v63[0] = v64;
  v63[1] = (void *)0x800000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)v63, v7, 0);
  if (v7)
  {
    if (*(unsigned char *)(v54 + 8) == 16) {
      AGCLLVMBuilder::unboxStruct((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v5, (uint64_t)v63);
    }
    else {
      *(void *)v63[0] = v5;
    }
  }
  char v8 = (*(uint64_t (**)(AGCLLVMAGPVertexShaderAnalysis *))(*(void *)this + 472))(this);
  printMessage((char **)&AGCPrinter, "------ Start flat varying analysis for %s shader %u  ------", v9, v10, v11, v12, v13, v14, v8);
  uint64_t v15 = v54;
  if (v7)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v17 = *(void *)(*((void *)this + 9) - 8 * *(unsigned int *)(*((void *)this + 9) + 8) + 8 * i);
      uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v17 - 8 * *(unsigned int *)(v17 + 8)));
      if (v19 == 17)
      {
        BOOL v20 = *(void *)String == 0x747265762E726961 && *(void *)(String + 8) == 0x757074756F5F7865;
        if (v20 && *(unsigned char *)(String + 16) == 116)
        {
          uint64_t v22 = (llvm::Value *)*((void *)v63[0] + i);
          uint64_t v23 = *(const llvm::Type **)(*(void *)(v15 + 16) + 8 * i);
          if ((*((_DWORD *)v23 + 2) & 0xFE) == 0x12)
          {
            *(_OWORD *)uint64_t v57 = 0u;
            *(_OWORD *)std::string __p = 0u;
            unsigned int v24 = AGCLLVMBuilder::unboxVector((AGCLLVMAGPVertexShaderAnalysis *)((char *)this + *(void *)(*(void *)this - 24) + 32), v22, v57);
            if (v24)
            {
              uint64_t v26 = 0;
              char v27 = 0;
              uint64_t v28 = v24;
              do
              {
                isVertexOutputUniforunint64_t m = AGCLLVMAGPVertexShaderAnalysis::isVertexOutputUniform(v57[v26], v25);
                int v30 = 1 << v26;
                if (!isVertexOutputUniform) {
                  LOBYTE(v30) = 0;
                }
                v27 |= v30;
                ++v26;
              }
              while (v28 != v26);
            }
            else
            {
              char v27 = 0;
            }
            uint64_t v15 = v54;
          }
          else
          {
            char v27 = AGCLLVMAGPVertexShaderAnalysis::isVertexOutputUniform(*((AGCLLVMAGPVertexShaderAnalysis **)v63[0] + i), v22);
          }
          if (v27)
          {
            __int16 v31 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v17 - 8 * *(unsigned int *)(v17 + 8) + 8));
            size_t v33 = v32;
            unsigned int ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)this + *(void *)(*(void *)this - 24) + 32), v23, (unsigned int *)v57);
            if ((*((_DWORD *)v23 + 2) & 0xFE) == 0x12) {
              int v41 = *((_DWORD *)v23 + 8);
            }
            else {
              int v41 = 1;
            }
            int v42 = *((_DWORD *)this + 2365) + 1;
            *((_DWORD *)this + 2365) = v42;
            v57[0] = (llvm::Value *)__PAIR64__(ComponentType, v41);
            v57[1] = 0;
            *(_DWORD *)std::string __p = v42;
            *(_OWORD *)&__p[8] = 0u;
            long long v59 = 0u;
            BOOL v60 = ComponentType == 1;
            __int16 v61 = 0;
            if (ComponentType == 1) {
              int v43 = 5;
            }
            else {
              int v43 = 1;
            }
            int v62 = v43;
            if (v31)
            {
              std::string::basic_string[abi:nn180100](__dst, v31, v33);
              if (SBYTE7(v59) < 0) {
                operator delete(*(void **)&__p[8]);
              }
              *(_OWORD *)&__p[8] = *(_OWORD *)__dst;
              *(void *)&long long v59 = v56;
              HIBYTE(v61) = v27;
              std::string::basic_string[abi:nn180100](__dst, v31, v33);
              uint64_t v44 = __dst;
              if (v56 < 0) {
                LOBYTE(v44) = __dst[0];
              }
            }
            else
            {
              *(void *)&__p[8] = 0;
              *(void *)&__p[16] = 0;
              *(void *)&long long v59 = 0;
              HIBYTE(v61) = v27;
              __dst[0] = 0;
              __dst[1] = 0;
              uint64_t v44 = __dst;
              uint64_t v56 = 0;
            }
            printMessage((char **)&AGCPrinter, "Promoted varying: {semantic: \"%s\", flat_components: %s%s%s%s}", v35, v36, v37, v38, v39, v40, (char)v44);
            if (SHIBYTE(v56) < 0) {
              operator delete(__dst[0]);
            }
            GenericVaryingAllocator::addVarying((uint64_t)this + 4320, (unint64_t)v57);
            if (SBYTE7(v59) < 0) {
              operator delete(*(void **)&__p[8]);
            }
          }
        }
      }
    }
  }
  char v45 = (*(uint64_t (**)(AGCLLVMAGPVertexShaderAnalysis *))(*(void *)this + 472))(this);
  printMessage((char **)&AGCPrinter, "------ End flat varying analysis for %s shader %u  ------\n", v46, v47, v48, v49, v50, v51, v45);
  uint64_t v52 = AGCLLVMAGPVertexShader::setupShaderOutputs(this);
  if (v63[0] != v64) {
    free(v63[0]);
  }
  return v52;
}

uint64_t AGCLLVMAGPVertexShaderAnalysis::isVertexOutputUniform(AGCLLVMAGPVertexShaderAnalysis *this, llvm::Value *a2)
{
  v92[20] = *MEMORY[0x1E4F143B8];
  uint64_t __src = this;
  uint64_t v88 = 0xFFFFFFFFLL;
  v84 = this;
  int v90 = v92;
  uint64_t v91 = 0xA00000000;
  llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::append<std::tuple<llvm::Value *,int> const*,void>((unsigned int *)&v90, &__src, &v89);
  uint64_t __src = 0;
  uint64_t v88 = 0;
  unsigned int v89 = 0;
  uint64_t v2 = (uint64_t *)&v84;
LABEL_2:
  *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, v2)+ 8) = 255;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            do
            {
              if (!v91)
              {
                uint64_t v11 = 1;
                goto LABEL_168;
              }
              uint64_t v3 = (char *)v90 + 16 * v91;
              uint64_t v5 = *((void *)v3 - 2);
              uint64_t v4 = *((void *)v3 - 1);
              LODWORD(v91) = v91 - 1;
              unsigned int v6 = *(unsigned __int8 *)(v5 + 16);
              if (v5) {
                BOOL v7 = v6 >= 0x15;
              }
              else {
                BOOL v7 = 1;
              }
            }
            while (!v7);
            if (v5) {
              BOOL v8 = v6 >= 0x1C;
            }
            else {
              BOOL v8 = 0;
            }
            if (!v8) {
              goto LABEL_167;
            }
            int v9 = *(unsigned __int8 *)(v5 + 16);
            BOOL v10 = (v9 - 59) > 0xFFFFFFED || *(unsigned __int8 *)(v5 + 16) - 83 > 0xFFFFFFFD;
            if (!v10 && v9 != 62 && v9 != 85) {
              break;
            }
            int v17 = *(_DWORD *)(v5 + 20);
            unint64_t v18 = v17 & 0x7FFFFFF;
            if ((v17 & 0x7FFFFFF) != 0)
            {
              uint64_t v19 = 0;
              unint64_t v20 = 0;
              do
              {
                if ((v17 & 0x40000000) != 0) {
                  uint64_t v21 = *(void *)(v5 - 8);
                }
                else {
                  uint64_t v21 = v5 - 32 * v18;
                }
                uint64_t v22 = *(unsigned char **)(v21 + v19);
                if (v22) {
                  BOOL v23 = v22[16] == 22;
                }
                else {
                  BOOL v23 = 0;
                }
                if (!v23)
                {
                  if ((*(_DWORD *)(*(void *)v22 + 8) & 0xFE) == 0x12) {
                    unsigned int v24 = v4;
                  }
                  else {
                    unsigned int v24 = -1;
                  }
                  long long v85 = *(unsigned char **)(v21 + v19);
                  uint64_t v86 = 0;
                  if (v24 == -1) {
                    int v25 = 255;
                  }
                  else {
                    int v25 = 1 << v24;
                  }
                  uint64_t v26 = __src;
                  uint64_t v27 = v89;
                  int v28 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, (uint64_t)v22, &v86);
                  __int16 v29 = v86;
                  if (v28) {
                    BOOL v30 = v86 == (_DWORD *)((char *)v26 + 16 * v27);
                  }
                  else {
                    BOOL v30 = 1;
                  }
                  if (v30)
                  {
                    llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, (uint64_t)v22, v24);
                    *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, (uint64_t *)&v85)+ 8) = v25;
                  }
                  else if ((v25 & ~v86[2]) != 0)
                  {
                    llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, (uint64_t)v22, v24);
                    v29[2] |= v25;
                  }
                  int v17 = *(_DWORD *)(v5 + 20);
                }
                ++v20;
                unint64_t v18 = v17 & 0x7FFFFFF;
                v19 += 32;
              }
              while (v20 < v18);
            }
          }
          if (v9 == 83) {
            goto LABEL_167;
          }
          if ((v9 - 79) < 0xFFFFFFF3) {
            break;
          }
          uint64_t v16 = *(unsigned char **)(v5 - 32);
          if ((*(_DWORD *)(*(void *)v16 + 8) & 0xFE) == 0x12)
          {
            if (v4 == -1) {
              goto LABEL_87;
            }
            if ((*(_DWORD *)(*(void *)v5 + 8) & 0xFE) == 0x12
              && *(_DWORD *)(*(void *)v16 + 32) == *(_DWORD *)(*(void *)v5 + 32))
            {
              long long v85 = *(unsigned char **)(v5 - 32);
              int v31 = 1 << v4;
              goto LABEL_88;
            }
          }
          else if (v4 == -1)
          {
LABEL_87:
            long long v85 = *(unsigned char **)(v5 - 32);
            int v31 = 255;
LABEL_88:
            uint64_t v86 = 0;
            uint64_t v47 = __src;
            uint64_t v48 = v89;
            int v49 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, (uint64_t)v16, &v86);
            uint64_t v38 = v86;
            if (v49) {
              BOOL v50 = v86 == (_DWORD *)((char *)v47 + 16 * v48);
            }
            else {
              BOOL v50 = 1;
            }
            if (!v50) {
              goto LABEL_150;
            }
LABEL_153:
            uint64_t v79 = (uint64_t)v16;
            unsigned int v80 = v4;
            goto LABEL_154;
          }
          long long v85 = *(unsigned char **)(v5 - 32);
          uint64_t v86 = 0;
          int v41 = __src;
          uint64_t v42 = v89;
          int v43 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, (uint64_t)v16, &v86);
          uint64_t v44 = v86;
          if (v43) {
            BOOL v45 = v86 == (_DWORD *)((char *)v41 + 16 * v42);
          }
          else {
            BOOL v45 = 1;
          }
          if (v45)
          {
            uint64_t v82 = (uint64_t)v16;
LABEL_163:
            llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v82, 0xFFFFFFFF);
            uint64_t v2 = (uint64_t *)&v85;
            goto LABEL_2;
          }
          if (*((unsigned __int8 *)v86 + 8) != 0xFF)
          {
            uint64_t v46 = (uint64_t)v16;
            goto LABEL_86;
          }
        }
        uint64_t v11 = 0;
        unsigned int v12 = *(unsigned __int8 *)(v5 + 16);
        if (v12 <= 0x59) {
          break;
        }
        if (v12 == 90)
        {
          uint64_t v53 = *(void *)(v5 - 32);
          if (*(unsigned char *)(v53 + 16) != 16) {
            uint64_t v53 = 0;
          }
          if (v4 == -1 || !v53)
          {
            uint64_t v62 = *(void *)(v5 - 64);
            long long v85 = (unsigned char *)v62;
            uint64_t v86 = 0;
            __int16 v63 = __src;
            uint64_t v64 = v89;
            int v65 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, v62, &v86);
            uint64_t v66 = v86;
            if (v65) {
              BOOL v67 = v86 == (_DWORD *)((char *)v63 + 16 * v64);
            }
            else {
              BOOL v67 = 1;
            }
            if (v67)
            {
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v62, 0xFFFFFFFF);
              *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, (uint64_t *)&v85)+ 8) = 255;
            }
            else if (*((unsigned __int8 *)v86 + 8) != 0xFF)
            {
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v62, 0xFFFFFFFF);
              v66[2] |= 0xFFu;
            }
LABEL_144:
            uint64_t v16 = *(unsigned char **)(v5 - 96);
            goto LABEL_145;
          }
          if (*(_DWORD *)(v53 + 32) >= 0x41u) {
            uint64_t v54 = **(void **)(v53 + 24);
          }
          else {
            uint64_t v54 = *(void *)(v53 + 24);
          }
          if (v54 != (int)v4) {
            goto LABEL_144;
          }
          uint64_t v74 = *(void *)(v5 - 64);
          long long v85 = (unsigned char *)v74;
          uint64_t v86 = 0;
          uint64_t v75 = __src;
          uint64_t v76 = v89;
          if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, v74, &v86)|| (uint64_t v44 = v86, v86 == (_DWORD *)((char *)v75 + 16 * v76)))
          {
            uint64_t v82 = v74;
            goto LABEL_163;
          }
          if (*((unsigned __int8 *)v86 + 8) != 0xFF)
          {
            uint64_t v46 = v74;
            goto LABEL_86;
          }
        }
        else
        {
          if (v12 != 91) {
            goto LABEL_168;
          }
          if (v4 == -1)
          {
            uint64_t v68 = *(void *)(v5 - 64);
            long long v85 = (unsigned char *)v68;
            uint64_t v86 = 0;
            std::string v69 = __src;
            uint64_t v70 = v89;
            int v71 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, v68, &v86);
            uint64_t v72 = v86;
            if (v71) {
              BOOL v73 = v86 == (_DWORD *)((char *)v69 + 16 * v70);
            }
            else {
              BOOL v73 = 1;
            }
            if (v73)
            {
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v68, 0xFFFFFFFF);
              *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, (uint64_t *)&v85)+ 8) = 255;
              std::string v69 = __src;
              uint64_t v70 = v89;
            }
            else if (*((unsigned __int8 *)v86 + 8) != 0xFF)
            {
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v68, 0xFFFFFFFF);
              v72[2] |= 0xFFu;
            }
            uint64_t v81 = *(void *)(v5 - 32);
            long long v85 = (unsigned char *)v81;
            uint64_t v86 = 0;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)v69, v70, v81, &v86)|| (uint64_t v44 = v86, v86 == (_DWORD *)((char *)v69 + 16 * v70)))
            {
              uint64_t v82 = v81;
              goto LABEL_163;
            }
            if (*((unsigned __int8 *)v86 + 8) != 0xFF)
            {
              uint64_t v46 = v81;
LABEL_86:
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v46, 0xFFFFFFFF);
              v44[2] |= 0xFFu;
            }
          }
          else
          {
            unsigned int v32 = *(_DWORD *)(*(void *)(v5 + 64) + 4 * v4);
            if (v32 != -1)
            {
              uint64_t v33 = *(void *)(v5 - 64);
              unsigned int v34 = *(_DWORD *)(*(void *)v33 + 32);
              BOOL v7 = v32 >= v34;
              unsigned int v35 = v32 - v34;
              if (v7)
              {
                uint64_t v33 = *(void *)(v5 - 32);
                unsigned int v32 = v35;
              }
              long long v85 = (unsigned char *)v33;
              uint64_t v86 = 0;
              if (v32 == -1) {
                int v31 = 255;
              }
              else {
                int v31 = 1 << v32;
              }
              uint64_t v36 = __src;
              uint64_t v37 = v89;
              if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, v33, &v86)|| (uint64_t v38 = v86, v86 == (_DWORD *)((char *)v36 + 16 * v37)))
              {
                uint64_t v79 = v33;
                unsigned int v80 = v32;
LABEL_154:
                llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v79, v80);
                *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, (uint64_t *)&v85)+ 8) = v31;
              }
              else if ((v31 & ~v86[2]) != 0)
              {
                uint64_t v39 = v33;
                unsigned int v40 = v32;
                goto LABEL_152;
              }
            }
          }
        }
      }
      if (v12 != 60)
      {
        if (v12 != 89) {
          goto LABEL_168;
        }
        uint64_t v13 = *(void *)(v5 - 32);
        if (v13) {
          BOOL v14 = *(unsigned char *)(v13 + 16) == 16;
        }
        else {
          BOOL v14 = 0;
        }
        if (v14)
        {
          uint64_t v15 = (void *)(v13 + 24);
          if (*(_DWORD *)(v13 + 32) >= 0x41u) {
            uint64_t v15 = (void *)*v15;
          }
          LODWORD(v4) = *(_DWORD *)v15;
        }
        uint64_t v16 = *(unsigned char **)(v5 - 64);
        goto LABEL_145;
      }
      uint64_t v16 = *(unsigned char **)(v5 - 32);
      if (v16 && v16[16] == 3) {
        break;
      }
      int v52 = *(_DWORD *)(*(void *)v16 + 8);
      if ((v52 & 0xFE) == 0x12) {
        int v52 = *(_DWORD *)(**(void **)(*(void *)v16 + 16) + 8);
      }
      if ((v52 & 0xFFFFFF00) != 0x200) {
        goto LABEL_167;
      }
LABEL_145:
      long long v85 = v16;
      uint64_t v86 = 0;
      if (v4 == -1) {
        int v31 = 255;
      }
      else {
        int v31 = 1 << v4;
      }
      std::string v77 = __src;
      uint64_t v78 = v89;
      if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, (uint64_t)v16, &v86))goto LABEL_153; {
      uint64_t v38 = v86;
      }
      if (v86 == (_DWORD *)((char *)v77 + 16 * v78)) {
        goto LABEL_153;
      }
LABEL_150:
      if ((v31 & ~v38[2]) != 0)
      {
        uint64_t v39 = (uint64_t)v16;
        unsigned int v40 = v4;
LABEL_152:
        llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v39, v40);
        v38[2] |= v31;
      }
    }
    if ((v16[34] & 0x40) == 0) {
      break;
    }
    SectionImpl = (void *)llvm::GlobalObject::getSectionImpl(*(llvm::GlobalObject **)(v5 - 32));
    if (v56 != 15) {
      break;
    }
    if (*SectionImpl != 0x625F726566667562 || *(void *)((char *)SectionImpl + 7) != 0x73676E69646E6962) {
      break;
    }
    uint64_t v58 = *(void *)v16;
    int v59 = *(_DWORD *)(*(void *)v16 + 8);
    if (v59 != 15) {
      break;
    }
    if ((v59 & 0xFE) == 0x12) {
      int v59 = *(_DWORD *)(**(void **)(v58 + 16) + 8);
    }
    if ((v59 & 0xFFFFFF00) != 0x4000) {
      break;
    }
    uint64_t v60 = **(void **)(v58 + 16);
    int v61 = *(_DWORD *)(v60 + 8);
    if (v61 != 15) {
      break;
    }
    if ((v61 & 0xFE) == 0x12) {
      int v61 = *(_DWORD *)(**(void **)(v60 + 16) + 8);
    }
  }
  while ((v61 & 0xFFFFFF00) == 0x200);
LABEL_167:
  uint64_t v11 = 0;
LABEL_168:
  llvm::deallocate_buffer(__src, (void *)(16 * v89));
  if (v90 != v92) {
    free(v90);
  }
  return v11;
}

unsigned int *llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::append<std::tuple<llvm::Value *,int> const*,void>(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  uint64_t v3 = result;
  size_t v4 = a3 - __src;
  uint64_t v5 = result[2];
  if (v5 + ((a3 - __src) >> 4) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (__src != a3)
  {
    BOOL result = (unsigned int *)memcpy((void *)(*(void *)result + 16 * v5), __src, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 4);
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::grow(a1, v7);
    uint64_t v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      BOOL v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          BOOL v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        int v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        int v6 = v10;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    return llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back(result, a2, a3);
  }
  uint64_t v4 = *(void *)result + 16 * v3;
  *(void *)uint64_t v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

void *llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (void *)MEMORY[0x1CB79F270](16 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    BOOL v12 = (void *)(16 * v3);
    if (v3)
    {
      uint64_t v13 = 16 * v3;
      BOOL v14 = v4;
      do
      {
        uint64_t v15 = *(void *)v14;
        if ((*(void *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(void *)a1, *(_DWORD *)(a1 + 16), v15, &v19);
          uint64_t v16 = v19;
          *uint64_t v19 = *(void *)v14;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
          ++*(_DWORD *)(a1 + 8);
        }
        BOOL v14 = (llvm *)((char *)v14 + 16);
        v13 -= 16;
      }
      while (v13);
    }
    return (void *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v17 = *(unsigned int *)(a1 + 16);
    if (v17)
    {
      uint64_t v18 = 16 * v17;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v18 -= 16;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShaderAnalysis::initCompile(AGCLLVMAGPVertexShaderAnalysis *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t Function = llvm::Module::getFunction();
  if (Function)
  {
    uint64_t v3 = *(void *)(Function + 80);
    uint64_t v4 = v3 - 24;
    if (!v3) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5 == v4 + 40)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v6 = v5 - 24;
      if (v5) {
        uint64_t v7 = v5 - 24;
      }
      else {
        uint64_t v7 = 0;
      }
      if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = v6;
      }
    }
    if (*(unsigned char *)(v8 + 16) != 29) {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(_DWORD *)(v8 + 20) & 0x7FFFFFF;
    if (v9 && (uint64_t v10 = *(void *)(v8 - 32 * v9)) != 0)
    {
      int v11 = *(unsigned __int8 *)(v10 + 16);
    }
    else
    {
      uint64_t v12 = *(void *)(v8 + 24);
      if (v12) {
        uint64_t v13 = v12 - 24;
      }
      else {
        uint64_t v13 = 0;
      }
      int v11 = *(unsigned __int8 *)(v13 + 16);
    }
    if (v11 == 84)
    {
      v15[0] = (char *)&v16;
      v15[1] = (char *)0x800000000;
      uint64_t v17 = v19;
      uint64_t v18 = 0x800000000;
      v19[64] = 1;
      llvm::InlineFunction();
      if (v17 != v19) {
        free(v17);
      }
      llvm::SmallVector<llvm::WeakTrackingVH,8u>::~SmallVector(v15);
    }
  }
  return AGCLLVMAGPVertexShader::initCompile(this);
}

char **llvm::SmallVector<llvm::WeakTrackingVH,8u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    do
    {
      uint64_t v5 = *(void *)&v2[v4 - 8];
      if (v5 != -8192 && v5 != -4096 && v5 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v2[v4 - 24]);
      }
      v4 -= 24;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void AGCLLVMAGPVertexShaderAnalysis::~AGCLLVMAGPVertexShaderAnalysis(AGCLLVMAGPVertexShaderAnalysis *this)
{
  *(void *)this = off_1F25805A0;
  uint64_t v2 = (AGCLLVMAGPVertexShaderAnalysis *)((char *)this + 10056);
  *((void *)this + 1257) = &off_1F25808F0;
  *((void *)this + 1261) = &off_1F25809E0;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257AFF0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(void *)this = off_1F25805A0;
  uint64_t v2 = (AGCLLVMAGPVertexShaderAnalysis *)((char *)this + 10056);
  *((void *)this + 1257) = &off_1F25808F0;
  *((void *)this + 1261) = &off_1F25809E0;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257AFF0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

BOOL virtual thunk to'AGCLLVMAGPVertexShaderRegular::constructReply(AGCLLVMAGPVertexShaderRegular *this)
{
  return AGCLLVMAGPVertexShaderRegular::constructReply((AGCLLVMAGPVertexShaderRegular *)((char *)this
                                                                                       + *(void *)(*(void *)this - 152)));
}

void virtual thunk to'AGCLLVMAGPVertexShaderRegular::~AGCLLVMAGPVertexShaderRegular(AGCLLVMAGPVertexShaderRegular *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F25815C8;
  v1[1261] = &off_1F2581918;
  v1[1265] = &off_1F2581A08;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257B4D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F25815C8;
  v1[1261] = &off_1F2581918;
  v1[1265] = &off_1F2581A08;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257B4D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
}

uint64_t llvm::Type::isSized(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 > 0x11) {
    goto LABEL_6;
  }
  uint64_t v2 = 1;
  if (((1 << v1) & 0xAC7F) != 0) {
    return v2;
  }
  if (((1 << v1) & 0x30000) == 0)
  {
LABEL_6:
    if ((v1 & 0xFE) != 0x12 && v1 != 21) {
      return 0;
    }
  }
  return MEMORY[0x1F417C838]();
}

uint64_t AGCLLVMAGPVertexShaderRegular::canDMAPromote(void *a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v193 = a3;
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 + 8);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  int v11 = a1;
  if (!*(void *)(v8 + 8))
  {
    uint64_t v12 = *(void *)(v8 + 24);
    if (*(unsigned char *)(v12 + 16) != 77) {
      uint64_t v12 = a2;
    }
    uint64_t v8 = *(void *)(v12 + 8);
    if (!v8) {
      return 1;
    }
  }
  v194 = (llvm::DataLayout *)(a1 + 29);
  char v13 = 1;
  while (1)
  {
    uint64_t v14 = *(void *)(v8 + 24);
    if (!v14 || *(unsigned char *)(v14 + 16) != 62) {
      break;
    }
    uint64_t v15 = *(void *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) + 32);
    if (v15 && *(unsigned char *)(v15 + 16) == 67) {
      uint64_t v15 = *(void *)(v15 - 32);
    }
    int v199 = 1;
    uint64_t v198 = 0;
    uint64_t v16 = AGCLLVMAGPVertexShaderRegular::extractDivisor(v15, &v199, &v198);
    uint64_t v23 = 0;
    if (v16)
    {
      if (*(unsigned char *)(v16 + 16) == 84)
      {
        uint64_t v23 = *(void *)(v16 - 32);
        if (!v23 || *(unsigned char *)(v23 + 16) || *(void *)(v23 + 24) != *(void *)(v16 + 72)) {
          uint64_t v23 = 0;
        }
      }
    }
    uint64_t v24 = v11[1257];
    if (v23 == v24) {
      uint64_t v25 = 1259;
    }
    else {
      uint64_t v25 = 1260;
    }
    uint64_t v26 = v198;
    int v27 = v198 != 0;
    if (!v23 || (uint64_t v28 = v11[v25], v23 != v24) && v23 != v11[1258])
    {
      v183 = "Cannot DMA promote %s : GEP not indexed with instance_id/vertex_id";
      goto LABEL_325;
    }
    if (v198 && v198 != v28)
    {
      v183 = "Cannot DMA promote %s: GEP indexed with index type not matching base type";
      goto LABEL_325;
    }
    if (v13)
    {
      BOOL v29 = v23 == v24;
      if (v23 == v24) {
        int v30 = 1;
      }
      else {
        int v30 = 2;
      }
      *a4 = v30;
      *(_DWORD *)(v10 + 24) = v199;
      *(unsigned char *)(v10 + 28) = v27;
      if (v29 && v26)
      {
        v183 = "Cannot DMA promote %s: GEP indexed with vertex_id and divisor with bias";
LABEL_325:
        printMessage((char **)&AGCPrinter, v183, v17, v18, v19, v20, v21, v22, v193);
        return 0;
      }
      goto LABEL_41;
    }
    if (*a4 == 2)
    {
      uint64_t v24 = v11[1258];
    }
    else if (*a4 != 1)
    {
      goto LABEL_39;
    }
    if (v23 != v24) {
      goto LABEL_322;
    }
LABEL_39:
    if (v199 != *(_DWORD *)(v10 + 24) || *(unsigned __int8 *)(v10 + 28) != v27)
    {
LABEL_322:
      v183 = "Cannot DMA promote %s : GEP indexed inconsistently";
      goto LABEL_325;
    }
LABEL_41:
    unsigned int v205 = 128;
    v204[0] = (llvm *)MEMORY[0x1CB79F270](0x4000, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty((uint64_t)v204);
    v206[0] = 0;
    v206[24] = 0;
    v222 = &v224;
    uint64_t v223 = 0x800000000;
    LOBYTE(v227) = 0;
    HIDWORD(v227) = 0;
    llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&v222, (char *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) + 64), (char *)v14);
    uint64_t v31 = v223;
    uint64_t v186 = v8;
    char v32 = 1;
    if (v223)
    {
      uint64_t v33 = v222;
      do
      {
        uint64_t v34 = *v33++;
        v32 &= *(unsigned char *)(v34 + 16) == 16;
        --v31;
      }
      while (v31);
    }
    LOBYTE(v227) = v32;
    uint64_t v35 = llvm::ValueMap<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v204, (llvm::Value *)v14);
    uint64_t v36 = llvm::SmallVectorImpl<llvm::Value *>::operator=(v35, (uint64_t)&v222);
    *(void *)(v36 + 80) = v227;
    uint64_t v37 = (char *)operator new(8uLL);
    *(void *)uint64_t v37 = v14;
    uint64_t v38 = v37 + 8;
    v197 = v37 + 8;
    uint64_t v188 = v14;
    while (1)
    {
      v189 = v38;
      v190 = v37;
      if (v37 == v38) {
        break;
      }
      uint64_t v40 = *((void *)v38 - 1);
      v38 -= 8;
      uint64_t v39 = v40;
      v216 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>((uint64_t)v204[0], v205, v40, &v216))uint64_t v48 = (char *)v216; {
      else
      }
        uint64_t v48 = (char *)v204[0] + 128 * (unint64_t)v205;
      v216 = &v218;
      uint64_t v217 = 0x800000000;
      int v49 = *((_DWORD *)v48 + 12);
      if (v49)
      {
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v216, (uint64_t)(v48 + 40));
        int v49 = v217;
      }
      unint64_t v221 = *((void *)v48 + 15);
      uint64_t v192 = v39;
      if (v39 != v14 || v49)
      {
        uint64_t SourceElementType = llvm::GEPOperator::getSourceElementType((llvm::GEPOperator *)v39);
        int v51 = *(_DWORD *)(v39 + 20);
        uint64_t v52 = v51 & 0x7FFFFFF;
        if ((v51 & 0x40000000) != 0) {
          uint64_t v53 = *(void *)(v39 - 8);
        }
        else {
          uint64_t v53 = v39 - 32 * v52;
        }
        uint64_t v54 = v53 + 32;
        unint64_t v55 = SourceElementType | 4;
        uint64_t v56 = v53 + 32 * v52;
        if (v53 + 32 == v56)
        {
          LODWORD(v196) = 0;
        }
        else
        {
          do
          {
            unint64_t v57 = v55;
            unint64_t TypeAtIndex = v55 & 0xFFFFFFFFFFFFFFF8;
            if ((v55 & 4) == 0 || !TypeAtIndex) {
              unint64_t TypeAtIndex = llvm::StructType::getTypeAtIndex();
            }
            int v59 = *(unsigned __int8 *)(TypeAtIndex + 8);
            if (TypeAtIndex && v59 == 17 || TypeAtIndex && (v59 & 0xFE) == 0x12)
            {
              unint64_t v55 = *(void *)(TypeAtIndex + 24) | 4;
            }
            else if (v59 == 16)
            {
              unint64_t v55 = TypeAtIndex & 0xFFFFFFFFFFFFFFFBLL;
            }
            else
            {
              unint64_t v55 = 0;
            }
            v54 += 32;
          }
          while (v54 != v56);
          uint64_t v196 = (v57 >> 2) & 1;
        }
      }
      else
      {
        LODWORD(v196) = 0;
        uint64_t v39 = v14;
      }
      uint64_t v60 = *(void *)(v39 + 8);
      if (!v60) {
        goto LABEL_257;
      }
      while (1)
      {
        if (*(unsigned __int8 *)(*(void *)(v60 + 24) + 16) <= 0x1Bu) {
          uint64_t v61 = 0;
        }
        else {
          uint64_t v61 = *(void *)(v60 + 24);
        }
        int v62 = *(unsigned __int8 *)(v61 + 16);
        if (v62 == 60 && v61 != 0)
        {
          AGCLLVMAGPVertexShaderRegular::LoadMap::addEntry(v9, (llvm::Value *)v61, (uint64_t)&v216);
          goto LABEL_256;
        }
        if (v62 == 62 && v61 != 0)
        {
          v126 = *(unsigned __int8 **)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 32);
          if (v126) {
            BOOL v127 = v126[16] > 0x14u;
          }
          else {
            BOOL v127 = 1;
          }
          if (!v127 && llvm::Constant::isNullValue((llvm::Constant *)v126))
          {
            TypeAllocSize = v209;
            uint64_t v208 = 0x800000000;
            if (v217) {
              llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&TypeAllocSize, (uint64_t)&v216);
            }
            unint64_t v215 = v221;
            llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&TypeAllocSize, (char *)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 64), (char *)v61);
            char v128 = v221;
            if ((_BYTE)v221)
            {
              uint64_t v129 = v208;
              if (v208)
              {
                char v128 = 1;
                v130 = (uint64_t *)TypeAllocSize;
                do
                {
                  uint64_t v131 = *v130++;
                  v128 &= *(unsigned char *)(v131 + 16) == 16;
                  --v129;
                }
                while (v129);
              }
              else
              {
                char v128 = 1;
              }
            }
            LOBYTE(v215) = v128;
            uint64_t v151 = llvm::ValueMap<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v204, (llvm::Value *)v61);
            uint64_t v152 = llvm::SmallVectorImpl<llvm::Value *>::operator=(v151, (uint64_t)&TypeAllocSize);
            *(void *)(v152 + 80) = v215;
            if (v38 < v197) {
              goto LABEL_238;
            }
            uint64_t v153 = (v38 - v37) >> 3;
            unint64_t v154 = v153 + 1;
            if (!((unint64_t)(v153 + 1) >> 61))
            {
              if ((v197 - v37) >> 2 > v154) {
                unint64_t v154 = (v197 - v37) >> 2;
              }
              if ((unint64_t)(v197 - v37) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v147 = v154;
              }
              if (v147) {
                unint64_t v147 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v147);
              }
              else {
                int v41 = 0;
              }
              int v148 = (char *)(v147 + 8 * v153);
              *(void *)int v148 = v61;
              v149 = v148 + 8;
              if (v38 != v37)
              {
                do
                {
                  uint64_t v155 = *((void *)v38 - 1);
                  v38 -= 8;
                  *((void *)v148 - 1) = v155;
                  v148 -= 8;
                }
                while (v38 != v37);
                goto LABEL_250;
              }
              goto LABEL_251;
            }
LABEL_327:
            abort();
          }
          if (v196)
          {
            uint64_t Add = (llvm::Constant **)*((void *)v216 + v217 - 1);
            v133 = *(llvm::Constant ***)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 32);
            if (v133 == (llvm::Constant **)llvm::Constant::getNullValue(*v133, v41)) {
              goto LABEL_216;
            }
            if (Add == (llvm::Constant **)llvm::Constant::getNullValue(*Add, v134))
            {
              uint64_t Add = v133;
LABEL_216:
              TypeAllocSize = v209;
              uint64_t v208 = 0x800000000;
              int v138 = v217;
              if (v217)
              {
                llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&TypeAllocSize, (uint64_t)&v216);
                int v138 = v208;
              }
              unint64_t v215 = v221;
              LODWORD(v208) = v138 - 1;
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&TypeAllocSize, (uint64_t)Add);
              llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&TypeAllocSize, (char *)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 64), (char *)v61);
              uint64_t v139 = v208;
              if (v208)
              {
                char v140 = 1;
                int v141 = (uint64_t *)TypeAllocSize;
                do
                {
                  uint64_t v142 = *v141++;
                  v140 &= *(unsigned char *)(v142 + 16) == 16;
                  --v139;
                }
                while (v139);
              }
              else
              {
                char v140 = 1;
              }
              LOBYTE(v215) = v140;
              uint64_t v143 = llvm::ValueMap<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v204, (llvm::Value *)v61);
              uint64_t v144 = llvm::SmallVectorImpl<llvm::Value *>::operator=(v143, (uint64_t)&TypeAllocSize);
              *(void *)(v144 + 80) = v215;
              if (v38 < v197)
              {
LABEL_238:
                *(void *)uint64_t v38 = v61;
                v38 += 8;
              }
              else
              {
                uint64_t v145 = (v38 - v37) >> 3;
                unint64_t v146 = v145 + 1;
                if ((unint64_t)(v145 + 1) >> 61) {
                  goto LABEL_327;
                }
                if ((v197 - v37) >> 2 > v146) {
                  unint64_t v146 = (v197 - v37) >> 2;
                }
                if ((unint64_t)(v197 - v37) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v147 = v146;
                }
                if (v147) {
                  unint64_t v147 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v147);
                }
                else {
                  int v41 = 0;
                }
                int v148 = (char *)(v147 + 8 * v145);
                *(void *)int v148 = v61;
                v149 = v148 + 8;
                if (v38 != v37)
                {
                  do
                  {
                    uint64_t v150 = *((void *)v38 - 1);
                    v38 -= 8;
                    *((void *)v148 - 1) = v150;
                    v148 -= 8;
                  }
                  while (v38 != v37);
LABEL_250:
                  uint64_t v38 = v37;
                }
LABEL_251:
                uint64_t v37 = v148;
                v197 = (char *)(v147 + 8 * (void)v41);
                if (v38) {
                  operator delete(v38);
                }
                uint64_t v38 = v149;
              }
              if (TypeAllocSize != v209) {
                free(TypeAllocSize);
              }
              goto LABEL_256;
            }
            if (*v133 == *Add)
            {
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40), (llvm::Instruction *)v61);
              v135 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
              Name = (void *)llvm::Value::getName((llvm::Value *)v61);
              LOWORD(v210) = 773;
              TypeAllocSize = Name;
              uint64_t v208 = v137;
              v209[0] = ".sum";
              uint64_t Add = (llvm::Constant **)llvm::IRBuilderBase::CreateAdd(v135, (llvm::Value *)v133, (llvm::Value *)Add, (const llvm::Twine *)&TypeAllocSize);
              goto LABEL_216;
            }
          }
          goto LABEL_269;
        }
        if (v62 != 77 || v61 == 0)
        {
          printMessage((char **)&AGCPrinter, "Cannot DMA promote %s : GEP not used in a load", v42, v43, v44, v45, v46, v47, v193);
          goto LABEL_269;
        }
        if (*(unsigned char *)(*(void *)v61 + 8) != 15)
        {
          printMessage((char **)&AGCPrinter, "Cannot DMA promote %s : pointer bitcast to non-pointer type", v42, v43, v44, v45, v46, v47, v193);
          goto LABEL_269;
        }
        uint64_t v66 = *(void *)(v61 + 8);
        if (v66) {
          break;
        }
LABEL_256:
        uint64_t v60 = *(void *)(v60 + 8);
        if (!v60)
        {
LABEL_257:
          TypeAllocSize = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>((uint64_t)v204[0], v205, v192, &TypeAllocSize))v156 = TypeAllocSize; {
          else
          }
            v156 = (void *)((char *)v204[0] + 128 * (unint64_t)v205);
          if ((void *)v204[0] + 16 * (unint64_t)v205 != v156) {
            llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::erase((int32x2_t *)v204, v156);
          }
          char v157 = 1;
          goto LABEL_270;
        }
      }
      uint64_t v67 = **(void **)(**(void **)(v61 - 32) + 16);
      uint64_t v68 = **(llvm::Type ***)(*(void *)v61 + 16);
      v195 = v68;
      while (1)
      {
        std::string v69 = *(uint64_t **)(v66 + 24);
        int v70 = *((unsigned __int8 *)v69 + 16);
        if (!v69 || v70 != 60) {
          break;
        }
        if ((*(_DWORD *)(v67 + 8) & 0xFE) == 0x12
          && (uint64_t v71 = *v69, (*(_DWORD *)(*v69 + 8) & 0xFE) == 0x12)
          && **(void **)(v67 + 16) == **(void **)(v71 + 16)
          && (uint64_t v72 = *(unsigned int *)(v71 + 32), v73 = *(unsigned int *)(v67 + 32),
                                                 v72 > v73))
        {
          uint64_t v74 = v69[1];
          if (v74)
          {
            while (1)
            {
              uint64_t v75 = *(void *)(v74 + 24);
              int v76 = *(unsigned __int8 *)(v75 + 16);
              if (v75 && v76 == 91)
              {
                uint64_t v77 = *(unsigned int *)(*(void *)v75 + 32);
                uint64_t v68 = v195;
                unint64_t v78 = 0;
                if (v77)
                {
                  uint64_t v79 = *(unsigned int **)(v75 + 64);
                  unint64_t v80 = -1;
                  while (1)
                  {
                    unsigned int v82 = *v79++;
                    unint64_t v81 = v82;
                    if ((v82 & 0x80000000) == 0
                      && v81 < v72
                      && *(uint64_t **)(v75 - 64) == v69)
                    {
                      goto LABEL_113;
                    }
                    BOOL v83 = v81 < v72 || v81 >= 2 * (int)v72;
                    if (!v83 && *(uint64_t **)(v75 - 32) == v69) {
                      break;
                    }
LABEL_117:
                    if (!--v77) {
                      goto LABEL_128;
                    }
                  }
                  unint64_t v81 = (v81 - v72);
LABEL_113:
                  if (v80 >= v81) {
                    unint64_t v80 = v81;
                  }
                  if (v78 <= v81) {
                    unint64_t v78 = v81;
                  }
                  goto LABEL_117;
                }
                unint64_t v80 = -1;
LABEL_128:
                unint64_t v84 = v78 + 1;
              }
              else
              {
                unint64_t v80 = 0;
                uint64_t v68 = v195;
                if (!v75) {
                  goto LABEL_126;
                }
                unint64_t v84 = v72;
                if (v76 == 89)
                {
                  uint64_t v85 = *(void *)(v75 - 32);
                  if (v85) {
                    BOOL v86 = *(unsigned char *)(v85 + 16) == 16;
                  }
                  else {
                    BOOL v86 = 0;
                  }
                  if (!v86)
                  {
                    unint64_t v80 = 0;
LABEL_126:
                    unint64_t v84 = v72;
                    goto LABEL_132;
                  }
                  int v87 = (unint64_t *)(v85 + 24);
                  if (*(_DWORD *)(v85 + 32) >= 0x41u) {
                    int v87 = (unint64_t *)*v87;
                  }
                  unint64_t v80 = *v87;
                  unint64_t v84 = v80 + 1;
                }
              }
LABEL_132:
              if (v80 >= v84 || v84 > v73) {
                goto LABEL_164;
              }
              uint64_t v74 = *(void *)(v74 + 8);
              int v88 = 1;
              unsigned int v89 = "DMA promotion %s : truncated extend bitcast pattern";
              if (!v74) {
                goto LABEL_169;
              }
            }
          }
          int v88 = 1;
          unsigned int v89 = "DMA promotion %s : truncated extend bitcast pattern";
        }
        else
        {
LABEL_164:
          if ((_BYTE)v221 && isReinterpretedArray(v68, (llvm::Type *)v67, v194, v196))
          {
            int v88 = 2;
            unsigned int v89 = "DMA promotion %s : reinterpreted array bitcast pattern";
          }
          else
          {
            TypeAllocSize = (void *)llvm::DataLayout::getTypeAllocSize(v194, v68);
            uint64_t v208 = v109;
            unint64_t v110 = llvm::TypeSize::operator unsigned long long();
            std::string __p = (void *)llvm::DataLayout::getTypeAllocSize(v194, (llvm::Type *)v67);
            uint64_t v201 = v111;
            if (v110 > llvm::TypeSize::operator unsigned long long())
            {
              printMessage((char **)&AGCPrinter, "DMA promotion %s : unrecognized GEP bitcast pattern: ", v42, v43, v44, v45, v46, v47, v193);
              std::string __p = 0;
              uint64_t v201 = 0;
              uint64_t v202 = 0;
              LODWORD(v208) = 0;
              char v211 = 0;
              uint64_t v212 = 0;
              int v213 = 1;
              v209[1] = 0;
              uint64_t v210 = 0;
              v209[0] = 0;
              TypeAllocSize = (void *)(MEMORY[0x1E4FBA010] + 16);
              p_p = &__p;
              llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&TypeAllocSize);
              llvm::Value::print((llvm::Value *)v61, (llvm::raw_ostream *)&TypeAllocSize);
              LOBYTE(v165) = (_BYTE)p_p;
              uint64_t v9 = a6;
              if (*((char *)p_p + 23) < 0) {
                v165 = *p_p;
              }
              uint64_t v14 = v188;
              printMessage((char **)&AGCPrinter, "bitcast: %s", v159, v160, v161, v162, v163, v164, (char)v165);
              if (SHIBYTE(v202) < 0)
              {
                *(unsigned char *)std::string __p = 0;
                uint64_t v201 = 0;
              }
              else
              {
                LOBYTE(__p) = 0;
                HIBYTE(v202) = 0;
              }
              llvm::Value::print((llvm::Value *)v69, (llvm::raw_ostream *)&TypeAllocSize);
              LOBYTE(v172) = (_BYTE)p_p;
              if (*((char *)p_p + 23) < 0) {
                v172 = *p_p;
              }
              printMessage((char **)&AGCPrinter, "load:    %s", v166, v167, v168, v169, v170, v171, (char)v172);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&TypeAllocSize);
              if (SHIBYTE(v202) < 0) {
                operator delete(__p);
              }
              char v157 = 0;
              goto LABEL_271;
            }
            int v88 = 3;
            unsigned int v89 = "DMA promotion %s : truncate to smaller sized type pattern";
            uint64_t v9 = a6;
          }
        }
LABEL_169:
        printMessage((char **)&AGCPrinter, v89, v42, v43, v44, v45, v46, v47, v193);
        if (HIDWORD(v221))
        {
          printMessage((char **)&AGCPrinter, "DMA promotion %s : can't combine bitcast types", v112, v113, v114, v115, v116, v117, v193);
          goto LABEL_269;
        }
        TypeAllocSize = v209;
        uint64_t v208 = 0x800000000;
        if (v217) {
          llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&TypeAllocSize, (uint64_t)&v216);
        }
        unint64_t v215 = __PAIR64__(v88, v221);
        AGCLLVMAGPVertexShaderRegular::LoadMap::addEntry(v9, (llvm::Value *)v69, (uint64_t)&TypeAllocSize);
        if (TypeAllocSize != v209) {
          free(TypeAllocSize);
        }
        uint64_t v68 = v195;
LABEL_195:
        uint64_t v66 = *(void *)(v66 + 8);
        if (!v66) {
          goto LABEL_256;
        }
      }
      if (v70 != 62 || v69 == 0)
      {
        uint64_t v158 = "Cannot DMA promote %s : unknown GEP bitcast use";
        goto LABEL_268;
      }
      if (HIDWORD(v221))
      {
        uint64_t v158 = "DMA promotion %s : GEP-of-bitcast can't combine bitcast types";
        goto LABEL_268;
      }
      if (!(_BYTE)v221 || !isReinterpretedArray(v68, (llvm::Type *)v67, v194, v196) || *((unsigned char *)v68 + 8) != 16)
      {
        uint64_t v158 = "Cannot DMA promote %s : unknown GEP-of-bitcast use";
LABEL_268:
        printMessage((char **)&AGCPrinter, v158, v42, v43, v44, v45, v46, v47, v193);
        goto LABEL_269;
      }
      if ((*((_DWORD *)v69 + 5) & 0x7FFFFFF) != 4)
      {
        uint64_t v158 = "Cannot DMA promote %s : GEP-of-bitcast needs to index to a scalar";
        goto LABEL_268;
      }
      if (*(unsigned __int8 *)(*(v69 - 12) + 16) >= 0x15u) {
        uint64_t v91 = 0;
      }
      else {
        uint64_t v91 = (llvm::Constant *)*(v69 - 12);
      }
      if (*(unsigned __int8 *)(*(v69 - 8) + 16) >= 0x15u) {
        __int16 v92 = 0;
      }
      else {
        __int16 v92 = (llvm::Constant *)*(v69 - 8);
      }
      if (v91) {
        BOOL v93 = v92 == 0;
      }
      else {
        BOOL v93 = 1;
      }
      if (!v93 && llvm::Constant::isNullValue(v91) && llvm::Constant::isNullValue(v92))
      {
        uint64_t v100 = v9;
        uint64_t v101 = (llvm::Value *)*((void *)v216 + v217 - 1);
        __int16 v102 = (llvm::Value *)v69[-4 * (*((_DWORD *)v69 + 5) & 0x7FFFFFF) + 12];
        if (*(void *)v102 != *(void *)v101)
        {
          char v157 = 0;
          uint64_t v9 = v100;
          goto LABEL_270;
        }
        printMessage((char **)&AGCPrinter, "DMA promotion %s : reinterpreted array bitcast pattern (through struct-array GEP)", v94, v95, v96, v97, v98, v99, v193);
        TypeAllocSize = v209;
        uint64_t v208 = 0x800000000;
        if (v217) {
          llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&TypeAllocSize, (uint64_t)&v216);
        }
        unint64_t v215 = v221;
        v103 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
        __int16 v203 = 257;
        uint64_t v104 = llvm::IRBuilderBase::CreateAdd(v103, v101, v102, (const llvm::Twine *)&__p);
        uint64_t v105 = v208;
        *((void *)TypeAllocSize + v208 - 1) = v104;
        char v106 = 1;
        if (v105)
        {
          uint64_t v107 = (uint64_t *)TypeAllocSize;
          uint64_t v9 = v100;
          do
          {
            uint64_t v108 = *v107++;
            v106 &= *(unsigned char *)(v108 + 16) == 16;
            --v105;
          }
          while (v105);
        }
        else
        {
          uint64_t v9 = v100;
        }
        LOBYTE(v215) = v106;
        HIDWORD(v215) = 2;
        uint64_t v118 = llvm::ValueMap<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v204, (llvm::Value *)v69);
        uint64_t v119 = llvm::SmallVectorImpl<llvm::Value *>::operator=(v118, (uint64_t)&TypeAllocSize);
        *(void *)(v119 + 80) = v215;
        if (v38 >= v197)
        {
          uint64_t v120 = (v38 - v37) >> 3;
          unint64_t v121 = v120 + 1;
          if ((unint64_t)(v120 + 1) >> 61) {
            goto LABEL_327;
          }
          if ((v197 - v37) >> 2 > v121) {
            unint64_t v121 = (v197 - v37) >> 2;
          }
          if ((unint64_t)(v197 - v37) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v121;
          }
          if (v122) {
            unint64_t v122 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v122);
          }
          else {
            int v41 = 0;
          }
          uint64_t v123 = (char *)(v122 + 8 * v120);
          *(void *)uint64_t v123 = v69;
          v124 = v123 + 8;
          if (v38 != v37)
          {
            do
            {
              uint64_t v125 = *((void *)v38 - 1);
              v38 -= 8;
              *((void *)v123 - 1) = v125;
              v123 -= 8;
            }
            while (v38 != v37);
            uint64_t v38 = v37;
          }
          uint64_t v37 = v123;
          v197 = (char *)(v122 + 8 * (void)v41);
          if (v38) {
            operator delete(v38);
          }
          uint64_t v38 = v124;
        }
        else
        {
          *(void *)uint64_t v38 = v69;
          v38 += 8;
        }
        uint64_t v68 = v195;
        if (TypeAllocSize != v209) {
          free(TypeAllocSize);
        }
        goto LABEL_195;
      }
LABEL_269:
      char v157 = 0;
LABEL_270:
      uint64_t v14 = v188;
LABEL_271:
      if (v216 != &v218) {
        free(v216);
      }
      if ((v157 & 1) == 0) {
        goto LABEL_289;
      }
    }
    uint64_t v37 = v38;
LABEL_289:
    if (v222 != &v224) {
      free(v222);
    }
    llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v206);
    v173 = v204[0];
    if (v205)
    {
      uint64_t v223 = 2;
      uint64_t v224 = 0;
      uint64_t v225 = -4096;
      uint64_t v226 = 0;
      v222 = (uint64_t *)&unk_1F25989C0;
      uint64_t v217 = 2;
      uint64_t v218 = 0;
      uint64_t v219 = -8192;
      uint64_t v220 = 0;
      v216 = &unk_1F25989C0;
      v174 = (char *)v204[0] + 56;
      unint64_t v175 = (unint64_t)v205 << 7;
      v176 = v189;
      do
      {
        uint64_t v177 = *((void *)v174 - 4);
        if (v177 != v225 && v177 != v219)
        {
          v179 = (char *)*((void *)v174 - 2);
          if (v174 != v179)
          {
            free(v179);
            uint64_t v177 = *((void *)v174 - 4);
          }
        }
        if (v177 != -8192 && v177 != -4096 && v177 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v174 - 48));
        }
        v174 += 128;
        v175 -= 128;
      }
      while (v175);
      if (v219 != -8192 && v219 != -4096 && v219) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v217);
      }
      if (v225 != -8192 && v225 != -4096 && v225) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v223);
      }
      v173 = v204[0];
      uint64_t v181 = v205;
    }
    else
    {
      uint64_t v181 = 0;
      v176 = v189;
    }
    llvm::deallocate_buffer(v173, (void *)(v181 << 7));
    if (v37) {
      operator delete(v37);
    }
    if (v190 != v176) {
      return 0;
    }
    char v13 = 0;
    uint64_t v8 = *(void *)(v186 + 8);
    uint64_t v10 = a5;
    int v11 = a1;
    if (!v8) {
      return 1;
    }
  }
  printMessage((char **)&AGCPrinter, "Cannot DMA promote %s : found a non-GEP use", a3, (uint64_t)a4, a5, a6, a7, a8, v193);
  return 0;
}

BOOL AGCLLVMAGPVertexShaderRegular::coerceStridedAccess(AGCLLVMAGPVertexShaderRegular *this, llvm::Value *a2, const char *a3, llvm::Type **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v103[8] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *((void *)a2 + 1);
  if (v12)
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    char v15 = 1;
    while (1)
    {
      BOOL result = 0;
      uint64_t v17 = *(void *)(v12 + 24);
      if (!v17 || *(unsigned char *)(v17 + 16) != 62) {
        return result;
      }
      uint64_t v18 = *(void *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) + 32);
      if (v18)
      {
        if (*(unsigned char *)(v18 + 16) == 67)
        {
          uint64_t v18 = *(void *)(v18 - 32);
          if (!v18) {
            return 0;
          }
        }
      }
      unsigned int v19 = *(unsigned __int8 *)(v18 + 16);
      if (v19 <= 0x1B)
      {
        if (v19 != 5)
        {
          LODWORD(v20) = 0;
LABEL_34:
          if (v19 != 5) {
            return 0;
          }
          int v21 = *(unsigned __int16 *)(v18 + 18);
LABEL_37:
          if (v21 == 17) {
            goto LABEL_41;
          }
          if (v21 != 25) {
            return 0;
          }
          goto LABEL_39;
        }
        int v21 = *(unsigned __int16 *)(v18 + 18);
        if (v21 != 13)
        {
          LODWORD(v20) = 0;
          goto LABEL_37;
        }
      }
      else if (v19 != 41)
      {
        LODWORD(v20) = 0;
        goto LABEL_31;
      }
      int v22 = *(_DWORD *)(v18 + 20);
      if ((v22 & 0x40000000) != 0) {
        uint64_t v23 = *(void *)(v18 - 8);
      }
      else {
        uint64_t v23 = v18 - 32 * (v22 & 0x7FFFFFF);
      }
      uint64_t v24 = *(void *)(v23 + 32);
      if (v24) {
        BOOL v25 = *(unsigned char *)(v24 + 16) == 16;
      }
      else {
        BOOL v25 = 0;
      }
      if (!v25) {
        return 0;
      }
      unsigned int v26 = *(_DWORD *)(v24 + 32);
      if (v26 > 0x40)
      {
        uint64_t v20 = **(void **)(v24 + 24);
        if (v20 < 0) {
          return 0;
        }
      }
      else
      {
        uint64_t v20 = *(void *)(v24 + 24);
        if (v20 << -(char)v26 < 0) {
          return 0;
        }
      }
      int v27 = (v22 & 0x40000000) != 0 ? *(uint64_t **)(v18 - 8) : (uint64_t *)(v18 - 32 * (v22 & 0x7FFFFFF));
      uint64_t v18 = *v27;
      if (!v18) {
        return 0;
      }
      unsigned int v19 = *(unsigned __int8 *)(v18 + 16);
      if (v19 <= 0x1B) {
        goto LABEL_34;
      }
LABEL_31:
      if (v19 != 53)
      {
        if (v19 != 45) {
          return 0;
        }
LABEL_41:
        int v30 = *(_DWORD *)(v18 + 20);
        if ((v30 & 0x40000000) != 0) {
          uint64_t v31 = *(uint64_t **)(v18 - 8);
        }
        else {
          uint64_t v31 = (uint64_t *)(v18 - 32 * (v30 & 0x7FFFFFF));
        }
        uint64_t v37 = v31[4];
        if (v37) {
          BOOL v38 = *(unsigned char *)(v37 + 16) == 16;
        }
        else {
          BOOL v38 = 0;
        }
        if (!v38) {
          return 0;
        }
        uint64_t v39 = (void *)(v37 + 24);
        if (*(_DWORD *)(v37 + 32) >= 0x41u) {
          uint64_t v39 = (void *)*v39;
        }
        unsigned int v40 = *(_DWORD *)v39;
        if (v20 >= *(_DWORD *)v39) {
          return 0;
        }
        goto LABEL_68;
      }
LABEL_39:
      int v28 = *(_DWORD *)(v18 + 20);
      if ((v28 & 0x40000000) != 0) {
        uint64_t v29 = *(void *)(v18 - 8);
      }
      else {
        uint64_t v29 = v18 - 32 * (v28 & 0x7FFFFFF);
      }
      uint64_t v32 = *(void *)(v29 + 32);
      if (v32) {
        BOOL v33 = *(unsigned char *)(v32 + 16) == 16;
      }
      else {
        BOOL v33 = 0;
      }
      if (!v33) {
        return 0;
      }
      uint64_t v34 = (void **)(v32 + 24);
      unsigned int v35 = *(_DWORD *)(v32 + 32);
      uint64_t v36 = v34;
      if (v35 >= 0x41) {
        uint64_t v36 = *v34;
      }
      if (*v36 > 0x1FuLL) {
        return 0;
      }
      if ((v28 & 0x40000000) != 0) {
        uint64_t v31 = *(uint64_t **)(v18 - 8);
      }
      else {
        uint64_t v31 = (uint64_t *)(v18 - 32 * (v28 & 0x7FFFFFF));
      }
      if (v35 >= 0x41) {
        uint64_t v34 = (void **)*v34;
      }
      unsigned int v40 = 1 << *(_DWORD *)v34;
      if (v40 <= v20) {
        return 0;
      }
LABEL_68:
      uint64_t v41 = *v31;
      if (v15)
      {
        uint64_t Divisor = AGCLLVMAGPVertexShaderRegular::extractDivisor(*v31, (int *)v98, v102);
        if (!Divisor
          || *(unsigned char *)(Divisor + 16) != 84
          || (uint64_t v43 = *(void *)(Divisor - 32)) == 0
          || *(unsigned char *)(v43 + 16)
          || *(void *)(v43 + 24) != *(void *)(Divisor + 72)
          || v43 != *((void *)this + 1257) && v43 != *((void *)this + 1258))
        {
          printMessage((char **)&AGCPrinter, "Will not coerce strided access %s : GEP not indexed with instance_id/vertex_id", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)a3);
          return 0;
        }
        uint64_t v13 = v41;
        unsigned int v14 = v40;
      }
      else
      {
        BOOL v44 = v14 == v40 && v13 == v41;
        uint64_t v41 = v13;
        unsigned int v40 = v14;
        if (!v44)
        {
          printMessage((char **)&AGCPrinter, "Will not coerce strided access %s : GEP indexed inconsistently", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)a3);
          return 0;
        }
      }
      char v15 = 0;
      uint64_t v12 = *(void *)(v12 + 8);
      if (!v12) {
        goto LABEL_85;
      }
    }
  }
  uint64_t v41 = 0;
  unsigned int v40 = 0;
LABEL_85:
  __int16 v92 = this;
  uint64_t v45 = **(void **)(*(void *)a2 + 16);
  v102[0] = v103;
  v102[1] = (void *)0x800000000;
  llvm::SmallVectorImpl<llvm::Type *>::assign((uint64_t)v102, v40);
  if (v40)
  {
    uint64_t v46 = 0;
    do
    {
      *(void *)((char *)v102[0] + v46) = v45;
      v46 += 8;
    }
    while (8 * v40 != v46);
  }
  int v47 = *(unsigned __int8 *)a3;
  uint64_t v48 = "agc.struct.coerced_arg";
  if (*a3)
  {
    v93[0] = "agc.struct.coerced_arg";
    v93[2] = a3;
    __int16 v94 = 771;
    char v49 = 2;
  }
  else
  {
    v93[0] = "agc.struct.coerced_arg";
    __int16 v94 = 259;
    char v49 = 3;
  }
  if (v47) {
    uint64_t v48 = (const char *)v93;
  }
  v95[0] = v48;
  v95[2] = "x";
  char v96 = v49;
  char v97 = 3;
  v98[0] = v95;
  v98[2] = v40;
  __int16 v99 = 2050;
  BOOL v50 = __p;
  llvm::Twine::str((uint64_t *)__p, (llvm::Twine *)v98);
  if ((v101 & 0x80000000) == 0 || (BOOL v50 = (void **)__p[0]) != 0) {
    strlen((const char *)v50);
  }
  int v51 = (llvm::Type *)llvm::StructType::create();
  *a4 = v51;
  if (v101 < 0)
  {
    operator delete(__p[0]);
    int v51 = *a4;
  }
  v98[0] = llvm::DataLayout::getTypeAllocSize((AGCLLVMAGPVertexShaderRegular *)((char *)v92 + 232), v51);
  v98[1] = v52;
  char v53 = llvm::TypeSize::operator unsigned long long();
  BOOL v89 = (v53 & 3) == 0;
  if ((v53 & 3) != 0)
  {
    printMessage((char **)&AGCPrinter, "Will not coerce pointer %s : type size %u not a multiple of 4", v54, v55, v56, v57, v58, v59, (char)a3);
  }
  else
  {
    uint64_t v60 = llvm::PointerType::get();
    uint64_t v61 = *(void *)(*((void *)v92 + 22) + 80);
    if (v61) {
      uint64_t v62 = v61 - 24;
    }
    else {
      uint64_t v62 = 0;
    }
    uint64_t v63 = *(void *)(v62 + 40);
    if (v63) {
      uint64_t v64 = (llvm::Instruction *)(v63 - 24);
    }
    else {
      uint64_t v64 = 0;
    }
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPVertexShaderRegular *)((char *)v92 + *(void *)(*(void *)v92 - 24) + 40), v64);
    uint64_t v65 = (uint64_t)v92 + *(void *)(*(void *)v92 - 24) + 40;
    __int16 v99 = 257;
    Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast(v65, 49, (uint64_t)a2, v60, (uint64_t)v98);
    uint64_t v66 = *((void *)a2 + 1);
    if (v66)
    {
      int v90 = (uint64_t *)a4;
      do
      {
        uint64_t v67 = *(void *)(v66 + 24);
        uint64_t v66 = *(void *)(v66 + 8);
        if (v67 && *(unsigned char *)(v67 + 16) == 62)
        {
          uint64_t v68 = operator new(8uLL);
          void *v68 = v41;
          uint64_t v69 = llvm::ConstantInt::get();
          int v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(2uLL);
          uint64_t v72 = v71;
          *((void *)v70 + 1) = v69;
          unint64_t v73 = v70 + 16;
          *(void *)int v70 = *v68;
          operator delete(v68);
          unint64_t v74 = *(_DWORD *)(v67 + 20) & 0x7FFFFFF;
          if (v74 < 3)
          {
            unint64_t v78 = v70 + 16;
          }
          else
          {
            uint64_t v75 = &v70[8 * v72];
            for (unint64_t i = 2; i < v74; ++i)
            {
              uint64_t v77 = *(void *)(v67 - 32 * v74 + 32 * i);
              if (v73 >= v75)
              {
                uint64_t v79 = (v73 - v70) >> 3;
                unint64_t v80 = v79 + 1;
                if ((unint64_t)(v79 + 1) >> 61) {
                  abort();
                }
                if ((v75 - v70) >> 2 > v80) {
                  unint64_t v80 = (v75 - v70) >> 2;
                }
                if ((unint64_t)(v75 - v70) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v81 = v80;
                }
                if (v81) {
                  unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v81);
                }
                else {
                  uint64_t v82 = 0;
                }
                BOOL v83 = (char *)(v81 + 8 * v79);
                *(void *)BOOL v83 = v77;
                unint64_t v78 = v83 + 8;
                while (v73 != v70)
                {
                  uint64_t v84 = *((void *)v73 - 1);
                  v73 -= 8;
                  *((void *)v83 - 1) = v84;
                  v83 -= 8;
                }
                uint64_t v75 = (char *)(v81 + 8 * v82);
                if (v70) {
                  operator delete(v70);
                }
                int v70 = v83;
              }
              else
              {
                *(void *)unint64_t v73 = v77;
                unint64_t v78 = v73 + 8;
              }
              unint64_t v74 = *(_DWORD *)(v67 + 20) & 0x7FFFFFF;
              unint64_t v73 = v78;
            }
          }
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPVertexShaderRegular *)((char *)v92 + *(void *)(*(void *)v92 - 24) + 40), (llvm::Instruction *)v67);
          char v85 = llvm::GetElementPtrInst::isInBounds((llvm::GetElementPtrInst *)v67);
          uint64_t v86 = *v90;
          uint64_t v87 = (v78 - v70) >> 3;
          uint64_t v88 = (uint64_t)v92 + *(void *)(*(void *)v92 - 24) + 40;
          __int16 v99 = 257;
          if (v85) {
            llvm::IRBuilderBase::CreateInBoundsGEP(v88, v86, Cast, (uint64_t **)v70, v87, (uint64_t)v98);
          }
          else {
            llvm::IRBuilderBase::CreateGEP(v88, v86, Cast, (uint64_t **)v70, v87, (uint64_t)v98);
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v67);
          if (v70) {
            operator delete(v70);
          }
        }
      }
      while (v66);
    }
  }
  if (v102[0] != v103) {
    free(v102[0]);
  }
  return v89;
}

uint64_t AGCLLVMAGPVertexShaderRegular::analyzeLoads(uint64_t a1, llvm::Type *a2, uint64_t *a3)
{
  uint64_t v5 = (llvm::DataLayout *)(a1 + 232);
  llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)(a1 + 232), a2);
  uint64_t v6 = llvm::TypeSize::operator unsigned long long();
  if ((*((_DWORD *)a2 + 2) & 0xFE) != 0x10) {
    return 0;
  }
  if (!*((_DWORD *)a3 + 2)) {
    return -1;
  }
  uint64_t v7 = *((unsigned int *)a3 + 4);
  if (v7)
  {
    uint64_t v8 = v7 << 7;
    for (uint64_t i = *a3; (*(void *)(i + 24) | 0x1000) == 0xFFFFFFFFFFFFF000; i += 128)
    {
      v8 -= 128;
      if (!v8) {
        return -1;
      }
    }
  }
  else
  {
    uint64_t i = *a3;
  }
  uint64_t v11 = *a3 + (v7 << 7);
  if (v11 == i) {
    return -1;
  }
  unint64_t v12 = 0;
  unint64_t v10 = -1;
LABEL_12:
  uint64_t v13 = *(llvm::Type ***)(i + 24);
  if (*(_DWORD *)(i + 48))
  {
    uint64_t v14 = **(void **)(i + 40);
    if (v14 && *(unsigned char *)(v14 + 16) == 16)
    {
      unsigned int v26 = *(llvm::Type ***)(i + 24);
      uint64_t v27 = v6;
      unint64_t v16 = 0;
      unint64_t v18 = 1;
      unsigned int v19 = a2;
      while (1)
      {
        uint64_t v20 = (unsigned int *)(v14 + 24);
        if (*(_DWORD *)(v14 + 32) >= 0x41u) {
          uint64_t v20 = *(unsigned int **)v20;
        }
        unint64_t v21 = *v20;
        int v22 = *((unsigned __int8 *)v19 + 8);
        if (v19 && v22 == 16)
        {
          if (*((_DWORD *)v19 + 3) <= v21) {
            return 0;
          }
          uint64_t v23 = *(void *)(llvm::DataLayout::getStructLayout() + 8 * v21 + 16);
          unsigned int v19 = *(llvm::Type **)(*((void *)v19 + 2) + 8 * v21);
        }
        else
        {
          if (!v19 || v22 != 17 || *((void *)v19 + 4) <= v21) {
            return 0;
          }
          unsigned int v19 = (llvm::Type *)*((void *)v19 + 3);
          llvm::DataLayout::getTypeAllocSize(v5, v19);
          uint64_t v23 = llvm::TypeSize::operator unsigned long long() * v21;
        }
        if (!v19) {
          return 0;
        }
        v16 += v23;
        llvm::DataLayout::getTypeSizeInBits(v5, v19);
        uint64_t v24 = llvm::TypeSize::operator unsigned long long();
        if (v18 < *(unsigned int *)(i + 48))
        {
          uint64_t v14 = *(void *)(*(void *)(i + 40) + 8 * v18);
          if (v14)
          {
            ++v18;
            if (*(unsigned char *)(v14 + 16) == 16) {
              continue;
            }
          }
        }
        unint64_t v17 = v24 + v16;
        uint64_t v13 = v26;
        uint64_t v6 = v27;
        goto LABEL_18;
      }
    }
  }
  unint64_t v16 = 0;
  unint64_t v17 = v6;
LABEL_18:
  if (*(_DWORD *)(i + 124) && *(unsigned char *)(i + 120))
  {
    llvm::DataLayout::getTypeSizeInBits(v5, *v13);
    unint64_t v17 = llvm::TypeSize::operator unsigned long long() + v16;
  }
  if (v16 < v10) {
    unint64_t v10 = v16;
  }
  if (v12 <= v17) {
    unint64_t v12 = v17;
  }
  while (1)
  {
    i += 128;
    if (i == v11) {
      return v10;
    }
    if ((*(void *)(i + 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (i != v11) {
        goto LABEL_12;
      }
      return v10;
    }
  }
}

uint64_t llvm::operator+(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *((unsigned __int8 *)a2 + 32);
  if (!*((unsigned char *)a2 + 32) || (int v4 = *((unsigned __int8 *)a3 + 32), !*((unsigned char *)a3 + 32)))
  {
    *(_WORD *)(result + 32) = 256;
    return result;
  }
  if (v3 == 1)
  {
    long long v5 = *((_OWORD *)a3 + 1);
    *(_OWORD *)BOOL result = *(_OWORD *)a3;
    *(_OWORD *)(result + 16) = v5;
    uint64_t v6 = a3[4];
LABEL_8:
    *(void *)(result + 32) = v6;
    return result;
  }
  if (v4 == 1)
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)BOOL result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v7;
    uint64_t v6 = a2[4];
    goto LABEL_8;
  }
  uint64_t v8 = (uint64_t *)*a2;
  uint64_t v9 = a2[1];
  if (*((unsigned char *)a2 + 33) != 1)
  {
    LOBYTE(v3) = 2;
    uint64_t v8 = a2;
  }
  uint64_t v10 = a3[1];
  if (*((unsigned char *)a3 + 33) == 1)
  {
    uint64_t v11 = (uint64_t *)*a3;
  }
  else
  {
    LOBYTE(v4) = 2;
    uint64_t v11 = a3;
  }
  *(void *)BOOL result = v8;
  *(void *)(result + 8) = v9;
  *(void *)(result + 16) = v11;
  *(void *)(result + 24) = v10;
  *(unsigned char *)(result + 32) = v3;
  *(unsigned char *)(result + 33) = v4;
  return result;
}

llvm::Value *AGCLLVMAGPVertexShaderRegular::materializeVertexAttribute(void *a1, llvm::Type *a2, int a3, void *a4, uint64_t a5)
{
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x10)
  {
    if (a3)
    {
      int v8 = *((_DWORD *)a2 + 2);
      if (v8 == 17)
      {
        BOOL result = (llvm::Value *)AGCLLVMAGPVertexShaderRegular::materializeArrayFromVI(a1, (uint64_t)a2, 0, a4);
        if (result) {
          return result;
        }
      }
      else if (v8 == 16)
      {
        BOOL result = (llvm::Value *)AGCLLVMAGPVertexShaderRegular::materializeStructFromVI(a1, (uint64_t)a2, 0, a4, a5);
        if (result) {
          return result;
        }
      }
    }
    unint64_t TypeAllocSize = llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(a1 + 29), a2);
    BOOL v30 = v10;
    unsigned int v11 = llvm::TypeSize::operator unsigned long long();
    unint64_t v12 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)((char *)a1 + *(void *)(*a1 - 24) + 232), (llvm::Type *)(v11 >> 2));
    Insertuint64_t Value = (llvm::Type **)llvm::UndefValue::get();
    unint64_t TypeAllocSize = (llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)(a1 + 29), a2) + 7) >> 3;
    BOOL v30 = v14 == 1;
    unsigned int v15 = llvm::TypeSize::operator unsigned long long();
    unsigned int v32 = 0;
    if (v15 >= 4)
    {
      unsigned int v16 = 0;
      unsigned int v17 = v15 >> 2;
      do
      {
        uint64_t v18 = *(void *)(*a1 - 24);
        uint64_t v19 = *(void *)(*a4 + 8 * v16);
        uint64_t v20 = *(void *)((char *)a1 + v18 + 232);
        __int16 v31 = 257;
        uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1 + v18 + 40, 49, v19, v20, (uint64_t)&TypeAllocSize);
        uint64_t v22 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
        __int16 v31 = 257;
        Insertuint64_t Value = (llvm::Type **)llvm::IRBuilderBase::CreateInsertValue(v22, (uint64_t)InsertValue, Cast, (uint64_t)&v32, 1, (uint64_t)&TypeAllocSize);
        unsigned int v16 = v32 + 1;
        unsigned int v32 = v16;
      }
      while (v16 < v17);
    }
    uint64_t v23 = (llvm::BasicBlock **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v31 = 257;
    Alloca = (llvm::Type **)llvm::IRBuilderBase::CreateAlloca(v23, v12, 0, (const llvm::Twine *)&TypeAllocSize);
    llvm::IRBuilderBase::CreateAlignedStore((void *)((char *)a1 + *(void *)(*a1 - 24) + 40), InsertValue, (uint64_t)Alloca, 0);
    BOOL v25 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    unsigned int v26 = (llvm::Type *)llvm::PointerType::get();
    __int16 v31 = 257;
    Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v25, Alloca, v26, (const llvm::Twine *)&TypeAllocSize);
    int v28 = (void *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v31 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v28, a2, (uint64_t)PointerCast, 0, (uint64_t)&TypeAllocSize);
  }
  else
  {
    return AGCLLVMAGPVertexShaderRegular::materializeVectorOrScalarFromVI(a1, a2, 0, a4);
  }
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 8 * v5), (const void *)(*(void *)a2 + 8 * v5), *(void *)a2 + 8 * v6 - (*(void *)a2 + 8 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

{
  const void *v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      long long v7 = *(unsigned int *)(a2 + 8);
      int v8 = *(unsigned int *)(a1 + 8);
      if (v8 >= v7)
      {
        if (v7) {
          memmove(*(void **)a1, v4, 8 * v7);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v7)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v8) {
          memmove(*(void **)a1, v4, 8 * v8);
        }
        else {
          int v8 = 0;
        }
        uint64_t v9 = *(unsigned int *)(a2 + 8);
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 8 * v8), (const void *)(*(void *)a2 + 8 * v8), *(void *)a2 + 8 * v9 - (*(void *)a2 + 8 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v7;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::erase(int32x2_t *a1, void *a2)
{
  uint64_t v4 = (void *)a2[5];
  if (v4 != a2 + 7) {
    free(v4);
  }
  v8[0] = 2;
  v8[1] = 0;
  uint64_t v9 = -8192;
  uint64_t v10 = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 1), v8);
  uint64_t v5 = v9;
  a2[4] = v10;
  if (v5 != -8192 && v5 != -4096 && v5 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t AGCLLVMAGPVertexShaderRegular::createExtractFromVertexAttribute(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >= 2
    && (uint64_t v8 = (uint64_t)(4 * a4 - 4) >> 2, (*(_DWORD *)(llvm::ExtractValueInst::getIndexedType() + 8) & 0xFE) == 0x12))
  {
    uint64_t v9 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
    __int16 v17 = 257;
    uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue(v9, a2, a3, v8, (uint64_t)v16);
    unsigned int v11 = (char *)a1 + *(void *)(*a1 - 24);
    __int16 v17 = 257;
    unint64_t v12 = (llvm::IRBuilderBase *)(v11 + 40);
    uint64_t v13 = (llvm::Value *)llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateExtractElement(v12, Value, v13, (const llvm::Twine *)v16);
  }
  else
  {
    uint64_t v15 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
    __int16 v17 = 257;
    return llvm::IRBuilderBase::CreateExtractValue(v15, a2, a3, a4, (uint64_t)v16);
  }
}

uint64_t AGCLLVMBuilder::CreateLoad(AGCLLVMBuilder *this, llvm::Type **a2, const llvm::Twine *a3)
{
  uint64_t v6 = AGCLLVMBuilder::tryDeducePointeeType(a2, (llvm::Value *)a2);
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v6, (uint64_t)a2, 0, (uint64_t)a3);
}

void *std::__function::__value_func<void ()(llvm::Value *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v13 = v4;
  int v28 = 0;
  int v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v12, &v28);
  unint64_t v6 = *(void *)v4 + ((unint64_t)v4[2].u32[0] << 7);
  if (v5) {
    long long v7 = v28;
  }
  else {
    long long v7 = (_DWORD *)v6;
  }
  uint64_t v8 = v13;
  if ((_DWORD *)(*(void *)v13 + ((unint64_t)v13[2].u32[0] << 7)) != v7)
  {
    uint64_t v24 = v26;
    uint64_t v25 = 0x800000000;
    if (v7[12])
    {
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v24, (uint64_t)(v7 + 10));
      uint64_t v8 = v13;
    }
    uint64_t v27 = *((void *)v7 + 15);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::erase(v8, v7);
    uint64_t v9 = (uint64_t)v13;
    uint64_t v19 = a2;
    uint64_t v20 = v22;
    uint64_t v21 = 0x800000000;
    if (v25)
    {
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v20, (uint64_t)&v24);
      a2 = v19;
    }
    uint64_t v23 = v27;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v14, a2);
    int v14 = &unk_1F2598998;
    uint64_t v17 = v9;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v29, (LODWORD(v15[0]) >> 1) & 3, v15);
    int v28 = &unk_1F2598998;
    uint64_t v31 = v17;
    unsigned int v32 = v34;
    uint64_t v33 = 0x800000000;
    if (v21) {
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v32, (uint64_t)&v20);
    }
    uint64_t v35 = v23;
    uint64_t v18 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(void *)v9, *(_DWORD *)(v9 + 16), v30, &v18) & 1) == 0)
    {
      uint64_t v10 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(v9, (uint64_t)&v28, v18);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v10 + 1), v29);
      v10[4] = v31;
      v10[5] = v10 + 7;
      v10[6] = 0x800000000;
      if (v33) {
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v10 + 5), (uint64_t)&v32);
      }
      v10[15] = v35;
    }
    if (v32 != v34) {
      free(v32);
    }
    if (v30 != -8192 && v30 != -4096 && v30) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v29);
    }
    if (v16 != -8192 && v16 != -4096 && v16) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
    }
    if (v20 != v22) {
      free(v20);
    }
    if (v24 != v26) {
      free(v24);
    }
  }
  if (v12 != -8192 && v12 != -4096)
  {
    if (v12) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = a1 + (v4 << 7);
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = a1 + (v4 << 7);
        uint64_t v6 = *(void *)(v5 + 24);
        uint64_t v7 = 1;
        if (v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        uint64_t v5 = v9;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x1CB79F270]((unint64_t)v8 << 7, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty(a1);
    v23[0] = 2;
    v23[1] = 0;
    uint64_t v24 = -4096;
    uint64_t v25 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = &unk_1F2598998;
    v19[0] = 2;
    v19[1] = 0;
    uint64_t v20 = -8192;
    uint64_t v9 = (char *)(v3 << 7);
    if (v3)
    {
      int v10 = 0;
      do
      {
        BOOL v11 = &v10[(void)v4];
        uint64_t v12 = *(void *)&v10[(void)v4 + 24];
        if (v12 != v24 && v12 != v20)
        {
          unsigned int v26 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v12, &v26);
          int v14 = v26;
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v26 + 1), (void *)v11 + 1);
          void v14[4] = *((void *)v11 + 4);
          v14[5] = v14 + 7;
          uint64_t v15 = (void **)(v11 + 40);
          v14[6] = 0x800000000;
          if (*((_DWORD *)v11 + 12)) {
            llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v14 + 5), (uint64_t)(v11 + 40));
          }
          v14[15] = *(void *)&v10[(void)v4 + 120];
          ++*(_DWORD *)(a1 + 8);
          if (&v10[(void)v4 + 56] != *v15) {
            free(*v15);
          }
        }
        uint64_t v16 = *((void *)v11 + 3);
        if (v16 != -8192 && v16 != -4096 && v16 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v10[(void)v4 + 8]);
        }
        v10 += 128;
      }
      while (v9 != v10);
      if (v20 != -8192 && v20 != -4096 && v20) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v19);
      }
    }
    if (v24 != -8192 && v24 != -4096 && v24) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
    }
    return llvm::deallocate_buffer(v4, v9);
  }
  else
  {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty(a1);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = (char *)(*(void *)result + (v1 << 7));
    int32x2_t result = *(void *)result + 8;
    do
    {
      uint64_t v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_1F2598998;
      *((void *)v4 + 3) = v9;
      unint64_t v5 = (char *)v4 + 120;
      int32x2_t result = (uint64_t)v4 + 128;
      v2 += 128;
    }
    while (v5 != v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v8, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v10 = v2;
  BOOL v11 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(void *)v2, *(_DWORD *)(v2 + 16), v9, &v11);
  if (result)
  {
    uint64_t v4 = v11;
    unint64_t v5 = (char *)v11[5];
    if (v5 != (char *)(v11 + 7)) {
      free(v5);
    }
    v12[0] = 2;
    v12[1] = 0;
    uint64_t v13 = -8192;
    uint64_t v14 = 0;
    BOOL v11 = &unk_1F2598998;
    uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v12);
    uint64_t v6 = v13;
    v4[4] = v14;
    if (v6 != -8192 && v6 != -4096 && v6) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShaderRegular::materializeStructFromVI(void *a1, uint64_t a2, int a3, void *a4, uint64_t a5)
{
  Insertuint64_t Value = llvm::UndefValue::get();
  uint64_t StructLayout = llvm::DataLayout::getStructLayout();
  unsigned int v40 = 0;
  if (*(_DWORD *)(a2 + 12))
  {
    unsigned int v12 = 0;
    uint64_t v13 = StructLayout + 16;
    while (1)
    {
      uint64_t v14 = *(llvm::Type **)(*(void *)(a2 + 16) + 8 * v12);
      unsigned int v15 = *(_DWORD *)(v13 + 8 * v12);
      unint64_t TypeAllocSize = llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(a1 + 29), v14);
      unint64_t v37 = v16;
      char v17 = llvm::TypeSize::operator unsigned long long();
      if ((v15 & 3) != 0 || (v17 & 3) != 0) {
        return 0;
      }
      uint64_t v19 = a3 + (v15 >> 2);
      if ((*((_DWORD *)v14 + 2) & 0xFE) == 0x10)
      {
        int v20 = *((_DWORD *)v14 + 2);
        if (v20 == 16)
        {
          __int16 v39 = 257;
          uint64_t v21 = AGCLLVMAGPVertexShaderRegular::materializeStructFromVI(a1, v14, v19, a4, &TypeAllocSize);
        }
        else
        {
          if (v20 != 17) {
            return 0;
          }
          uint64_t v21 = AGCLLVMAGPVertexShaderRegular::materializeArrayFromVI(a1, (uint64_t)v14, v19, a4);
        }
      }
      else
      {
        uint64_t v21 = (uint64_t)AGCLLVMAGPVertexShaderRegular::materializeVectorOrScalarFromVI(a1, v14, v19, a4);
      }
      if (!v21) {
        return 0;
      }
      uint64_t v22 = *(void *)(*a1 - 24);
      int v23 = *(unsigned __int8 *)(a5 + 32);
      if (v23 == 1) {
        break;
      }
      if (*(unsigned char *)(a5 + 32))
      {
        int v28 = *(const char **)a5;
        unint64_t v29 = *(void *)(a5 + 8);
        char v24 = 2;
        if (*(unsigned char *)(a5 + 33) != 1)
        {
          LOBYTE(v23) = 2;
          int v28 = (const char *)a5;
        }
        unsigned int v32 = v28;
        unint64_t v33 = v29;
        uint64_t v34 = ".elem";
        LOBYTE(v35) = v23;
        HIBYTE(v35) = 3;
        unint64_t v26 = v5 & 0xFFFFFFFF00000000;
        unint64_t v5 = v5 & 0xFFFFFFFF00000000 | v40;
        uint64_t v27 = &v32;
        goto LABEL_22;
      }
      char v24 = 0;
      __int16 v35 = 256;
      v5 &= 0xFFFFFFFF00000000;
      char v25 = 1;
LABEL_23:
      LOBYTE(v39) = v24;
      HIBYTE(v39) = v25;
      Insertuint64_t Value = llvm::IRBuilderBase::CreateInsertValue((uint64_t)a1 + v22 + 40, InsertValue, v21, (uint64_t)&v40, 1, (uint64_t)&TypeAllocSize);
      unsigned int v12 = v40 + 1;
      unsigned int v40 = v12;
      if (v12 >= *(_DWORD *)(a2 + 12)) {
        return InsertValue;
      }
    }
    unsigned int v32 = ".elem";
    __int16 v35 = 259;
    unint64_t v5 = v5 & 0xFFFFFFFF00000000 | v40;
    char v24 = 3;
    unint64_t v26 = v33;
    uint64_t v27 = (const char **)".elem";
LABEL_22:
    unint64_t TypeAllocSize = (unint64_t)v27;
    unint64_t v37 = v26;
    char v25 = 8;
    unint64_t v38 = v5;
    goto LABEL_23;
  }
  return InsertValue;
}

uint64_t AGCLLVMAGPVertexShaderRegular::materializeArrayFromVI(void *a1, uint64_t a2, unsigned int a3, void *a4)
{
  uint64_t v8 = *(llvm::Type **)(a2 + 24);
  v17[0] = llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(a1 + 29), v8);
  v17[1] = v9;
  unsigned int v10 = llvm::TypeSize::operator unsigned long long();
  if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x10 || (v10 & 3) != 0) {
    return 0;
  }
  Insertuint64_t Value = llvm::UndefValue::get();
  unsigned int v19 = 0;
  if (*(void *)(a2 + 32))
  {
    unsigned int v13 = v10 >> 2;
    do
    {
      uint64_t v14 = AGCLLVMAGPVertexShaderRegular::materializeVectorOrScalarFromVI(a1, v8, a3, a4);
      uint64_t v15 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v18 = 257;
      Insertuint64_t Value = llvm::IRBuilderBase::CreateInsertValue(v15, InsertValue, (uint64_t)v14, (uint64_t)&v19, 1, (uint64_t)v17);
      a3 += v13;
      ++v19;
    }
    while (*(void *)(a2 + 32) > (unint64_t)v19);
  }
  return InsertValue;
}

llvm::Value *AGCLLVMAGPVertexShaderRegular::materializeVectorOrScalarFromVI(void *a1, llvm::Type *this, unsigned int a3, void *a4)
{
  if ((*((_DWORD *)this + 2) & 0xFE) != 0x12)
  {
    uint64_t v20 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
    uint64_t v21 = *(void *)(*a4 + 8 * a3);
    __int16 v37 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateCast(v20, 49, v21, (uint64_t)this, (uint64_t)v36);
  }
  uint64_t v8 = **((void **)this + 2);
  int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(this);
  uint64_t v10 = *((unsigned int *)this + 8);
  if (ScalarSizeInBits == 8)
  {
    uint64_t v24 = llvm::FixedVectorType::get();
    uint64_t v25 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
    uint64_t v26 = *(void *)(*a4 + 8 * a3);
    __int16 v37 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v25, 49, v26, v24, (uint64_t)v36);
    if (v10 == 4) {
      return Cast;
    }
    uint64_t v27 = (AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32);
    int v28 = Cast;
    int v29 = v10;
    return (llvm::Value *)AGCLLVMBuilder::subrangeVector(v27, v28, 0, v29, 1);
  }
  if (ScalarSizeInBits == 16)
  {
    uint64_t v30 = llvm::FixedVectorType::get();
    uint64_t v31 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
    uint64_t v32 = *(void *)(*a4 + 8 * a3);
    __int16 v37 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v31, 49, v32, v30, (uint64_t)v36);
    if ((v10 - 3) > 1) {
      return Cast;
    }
    uint64_t v33 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
    uint64_t v34 = *(void *)(*a4 + 8 * (a3 + 1));
    __int16 v37 = 257;
    __int16 v35 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v33, 49, v34, v30, (uint64_t)v36);
    uint64_t Cast = (llvm::Value *)AGCLLVMBuilder::concatenateVectors((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), Cast, v35);
    if (v10 != 3) {
      return Cast;
    }
    uint64_t v27 = (AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32);
    int v28 = Cast;
    int v29 = 3;
    return (llvm::Value *)AGCLLVMBuilder::subrangeVector(v27, v28, 0, v29, 1);
  }
  if (ScalarSizeInBits != 32) {
    return 0;
  }
  uint64_t Cast = (llvm::Value *)llvm::UndefValue::get();
  if (v10)
  {
    uint64_t v12 = 0;
    unsigned int v13 = a3;
    do
    {
      uint64_t v14 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      uint64_t v15 = *(void *)(*a4 + 8 * (v13 + v12));
      __int16 v37 = 257;
      unint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v14, 49, v15, v8, (uint64_t)v36);
      char v17 = (char *)a1 + *(void *)(*a1 - 24);
      __int16 v37 = 257;
      __int16 v18 = (llvm::IRBuilderBase *)(v17 + 40);
      unsigned int v19 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v18, Cast, v16, v19, (const llvm::Twine *)v36);
      ++v12;
    }
    while (v10 != v12);
  }
  return Cast;
}

uint64_t llvm::SmallVectorImpl<llvm::Type *>::assign(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v2 = *(unsigned int *)(result + 8);
  if (v2 >= a2) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = *(unsigned int *)(result + 8);
  }
  if (v3)
  {
    uint64_t v4 = *(void **)result;
    do
    {
      *v4++ = 0;
      --v3;
    }
    while (v3);
  }
  unint64_t v5 = v2 - a2;
  if (v2 < a2)
  {
    uint64_t v6 = (void *)(*(void *)result + 8 * v2);
    do
      *v6++ = 0;
    while (!__CFADD__(v5++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

llvm::GetElementPtrInst *llvm::IRBuilderBase::CreateInBoundsGEP(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (llvm::GetElementPtrInst *)(*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t **, uint64_t, uint64_t))(**(void **)(a1 + 72) + 48))(*(void *)(a1 + 72), a2, a3, a4, a5, 1);
  if (!v12)
  {
    uint64_t v12 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(a2, a3, a4, a5);
    llvm::GetElementPtrInst::setIsInBounds(v12);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, (uint64_t)v12, a6);
  }
  return v12;
}

uint64_t AGCLLVMAGPVertexShaderRegular::extractDivisor(uint64_t result, int *a2, void *a3)
{
  unsigned int v3 = *(unsigned __int8 *)(result + 16);
  if (v3 <= 0x1B)
  {
    if (v3 != 5 || *(_WORD *)(result + 18) != 13) {
      return result;
    }
  }
  else if (v3 != 41)
  {
    int v4 = *(_DWORD *)(result + 20);
    uint64_t v5 = 0;
    if ((v4 & 0x40000000) != 0) {
      uint64_t v6 = *(uint64_t **)(result - 8);
    }
    else {
      uint64_t v6 = (uint64_t *)(result - 32 * (v4 & 0x7FFFFFF));
    }
    uint64_t v9 = result;
LABEL_20:
    uint64_t v13 = *v6;
    int v14 = *(unsigned __int8 *)(v9 + 16);
    if (v14 == 54)
    {
      int v17 = *(_DWORD *)(v9 + 20);
      if ((v17 & 0x40000000) != 0) {
        uint64_t v18 = *(void *)(v9 - 8);
      }
      else {
        uint64_t v18 = v9 - 32 * (v17 & 0x7FFFFFF);
      }
      uint64_t v25 = *(void *)(v18 + 32);
      if (v25) {
        BOOL v26 = *(unsigned char *)(v25 + 16) == 16;
      }
      else {
        BOOL v26 = 0;
      }
      if (v26)
      {
        if (*(_DWORD *)(v25 + 32) > 0x40u)
        {
          unint64_t v27 = **(void **)(v25 + 24);
          if (v27 > 0x1F) {
            return result;
          }
        }
        else
        {
          unint64_t v27 = *(void *)(v25 + 24);
          if (v27 >= 0x20) {
            return result;
          }
        }
        int v24 = 1 << v27;
LABEL_75:
        *a2 = v24;
        *a3 = v5;
        return v13;
      }
    }
    else if (v14 == 47)
    {
      int v15 = *(_DWORD *)(v9 + 20);
      uint64_t v16 = (v15 & 0x40000000) != 0 ? *(void *)(v9 - 8) : v9 - 32 * (v15 & 0x7FFFFFF);
      uint64_t v22 = *(void *)(v16 + 32);
      if (v22)
      {
        if (*(unsigned char *)(v22 + 16) == 16)
        {
          int v23 = (void *)(v22 + 24);
          if (*(_DWORD *)(v22 + 32) >= 0x41u) {
            int v23 = (void *)*v23;
          }
          int v24 = *(_DWORD *)v23;
          goto LABEL_75;
        }
      }
    }
    return result;
  }
  int v7 = *(_DWORD *)(result + 20);
  if ((v7 & 0x40000000) != 0) {
    uint64_t v8 = *(uint64_t **)(result - 8);
  }
  else {
    uint64_t v8 = (uint64_t *)(result - 32 * (v7 & 0x7FFFFFF));
  }
  uint64_t v9 = *v8;
  if (v9) {
    BOOL v10 = *(unsigned __int8 *)(v9 + 16) >= 0x1Cu;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    int v11 = *(_DWORD *)(v9 + 20);
    if ((v11 & 0x7FFFFFF) != 0)
    {
      uint64_t v12 = (v11 & 0x40000000) != 0 ? *(uint64_t **)(v9 - 8) : (uint64_t *)(v9 - 32 * (v11 & 0x7FFFFFF));
      uint64_t v19 = *v12;
      unsigned int v20 = *(unsigned __int8 *)(v19 + 16);
      if (v20 <= 0x1B)
      {
        if (v20 != 5 || *(_WORD *)(v19 + 18) != 15) {
          return result;
        }
      }
      else if (v20 != 43)
      {
        return result;
      }
      uint64_t v21 = (v7 & 0x40000000) != 0 ? *(void *)(result - 8) : result - 32 * (v7 & 0x7FFFFFF);
      uint64_t v28 = *(void *)(v21 + 32);
      uint64_t v29 = *(unsigned char *)(v28 + 16) == 84 ? v28 : 0;
      int v30 = *(_DWORD *)(v19 + 20);
      uint64_t v31 = (v30 & 0x40000000) != 0 ? *(void *)(v19 - 8) : v19 - 32 * (v30 & 0x7FFFFFF);
      uint64_t v32 = *(void *)(v31 + 32);
      uint64_t v33 = *(unsigned char *)(v32 + 16) == 84 ? v32 : 0;
      if (v29 && v33)
      {
        uint64_t v5 = *(void *)(v29 - 32);
        if (!v5
          || *(unsigned char *)(v5 + 16)
          || (v34 = *(void *)(v29 + 72), uint64_t v35 = *(void *)(v29 - 32), *(void *)(v5 + 24) != v34))
        {
          uint64_t v35 = 0;
        }
        uint64_t v36 = *(void *)(v33 - 32);
        if (!v36 || *(unsigned char *)(v36 + 16) || *(void *)(v36 + 24) != *(void *)(v33 + 72)) {
          uint64_t v36 = 0;
        }
        if (v35 == v36 && (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 0)
        {
          if ((v30 & 0x40000000) != 0) {
            uint64_t v6 = *(uint64_t **)(v19 - 8);
          }
          else {
            uint64_t v6 = (uint64_t *)(v19 - 32 * (v30 & 0x7FFFFFF));
          }
          goto LABEL_20;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    unsigned int v3 = (char *)(*(void *)result + (v1 << 7));
    uint64_t result = *(void *)result + 8;
    do
    {
      int v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_1F25989C0;
      *((void *)v4 + 3) = v9;
      uint64_t v5 = (char *)v4 + 120;
      uint64_t result = (uint64_t)v4 + 128;
      v2 += 128;
    }
    while (v5 != v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>(uint64_t result, char *a2, char *a3)
{
  unsigned int v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *(void *)v3;
      v3 += 32;
      *v5++ = v6;
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 5);
  return result;
}

uint64_t llvm::ValueMap<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  int v7 = &unk_1F25989C0;
  uint64_t v10 = a1;
  uint64_t v11 = 0;
  char v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  uint64_t v4 = v11;
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 8), v8);
    *(void *)(v4 + 32) = v10;
    *(void *)(v4 + 40) = v4 + 56;
    *(void *)(v4 + 48) = 0x800000000;
    *(unsigned char *)(v4 + 120) = 0;
    *(_DWORD *)(v4 + 124) = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 40;
}

uint64_t AGCLLVMAGPVertexShaderRegular::LoadMap::addEntry(uint64_t a1, llvm::Value *a2, uint64_t a3)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v10, a2);
  uint64_t v10 = &unk_1F2598998;
  uint64_t v13 = a1;
  uint64_t v14 = 0;
  char v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v12, &v14);
  uint64_t v6 = v14;
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v10, v14);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 8), v11);
    *(void *)(v6 + 32) = v13;
    *(void *)(v6 + 40) = v6 + 56;
    *(void *)(v6 + 48) = 0x800000000;
    *(unsigned char *)(v6 + 120) = 0;
    *(_DWORD *)(v6 + 124) = 0;
  }
  if (v12 != -8192 && v12 != -4096 && v12 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
  }
  uint64_t result = llvm::SmallVectorImpl<llvm::Value *>::operator=(v6 + 40, a3);
  *(void *)(v6 + 120) = *(void *)(a3 + 80);
  *(unsigned char *)(a1 + 64) &= *(unsigned char *)(a3 + 80);
  int v9 = *(_DWORD *)(a3 + 84);
  *(unsigned char *)(a1 + 65) |= v9 == 2;
  *(unsigned char *)(a1 + 66) |= v9 == 3;
  return result;
}

BOOL isReinterpretedArray(llvm::Type *a1, llvm::Type *a2, llvm::DataLayout *this, int a4)
{
  if (!a4) {
    return 0;
  }
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12) {
    return 0;
  }
  llvm::DataLayout::getTypeSizeInBits(this, a2);
  if (llvm::TypeSize::operator unsigned long long() != 4) {
    return 0;
  }
  if ((*((_DWORD *)a1 + 2) & 0xFE) != 0x10) {
    return 1;
  }
  if (*((_DWORD *)a1 + 2) != 16 || *((_DWORD *)a1 + 3) != 1) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v7 = **((void **)a1 + 2);
  if (v7 && *(unsigned char *)(v7 + 8) == 17)
  {
    if (*(void *)(v7 + 32) == 3)
    {
      llvm::DataLayout::getTypeSizeInBits(this, **(llvm::Type ***)(v7 + 16));
      return llvm::TypeSize::operator unsigned long long() == 4;
    }
    return 0;
  }
  return result;
}

void llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v13 = v4;
  uint64_t v28 = 0;
  int v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v12, &v28);
  unint64_t v6 = *(void *)v4 + ((unint64_t)v4[2].u32[0] << 7);
  if (v5) {
    uint64_t v7 = v28;
  }
  else {
    uint64_t v7 = (_DWORD *)v6;
  }
  uint64_t v8 = v13;
  if ((_DWORD *)(*(void *)v13 + ((unint64_t)v13[2].u32[0] << 7)) != v7)
  {
    int v24 = v26;
    uint64_t v25 = 0x800000000;
    if (v7[12])
    {
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v24, (uint64_t)(v7 + 10));
      uint64_t v8 = v13;
    }
    uint64_t v27 = *((void *)v7 + 15);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::erase(v8, v7);
    uint64_t v9 = (uint64_t)v13;
    uint64_t v19 = a2;
    unsigned int v20 = v22;
    uint64_t v21 = 0x800000000;
    if (v25)
    {
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v20, (uint64_t)&v24);
      a2 = v19;
    }
    uint64_t v23 = v27;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v14, a2);
    uint64_t v14 = &unk_1F25989C0;
    uint64_t v17 = v9;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v29, (LODWORD(v15[0]) >> 1) & 3, v15);
    uint64_t v28 = &unk_1F25989C0;
    uint64_t v31 = v17;
    uint64_t v32 = v34;
    uint64_t v33 = 0x800000000;
    if (v21) {
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v32, (uint64_t)&v20);
    }
    uint64_t v35 = v23;
    uint64_t v18 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(void *)v9, *(_DWORD *)(v9 + 16), v30, &v18) & 1) == 0)
    {
      uint64_t v10 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>>(v9, (uint64_t)&v28, v18);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v10 + 1), v29);
      v10[4] = v31;
      v10[5] = v10 + 7;
      v10[6] = 0x800000000;
      if (v33) {
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v10 + 5), (uint64_t)&v32);
      }
      v10[15] = v35;
    }
    if (v32 != v34) {
      free(v32);
    }
    if (v30 != -8192 && v30 != -4096 && v30) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v29);
    }
    if (v16 != -8192 && v16 != -4096 && v16) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
    }
    if (v20 != v22) {
      free(v20);
    }
    if (v24 != v26) {
      free(v24);
    }
  }
  if (v12 != -8192 && v12 != -4096)
  {
    if (v12) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
  }
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::erase(int32x2_t *a1, void *a2)
{
  uint64_t v4 = (void *)a2[5];
  if (v4 != a2 + 7) {
    free(v4);
  }
  v8[0] = 2;
  v8[1] = 0;
  uint64_t v9 = -8192;
  uint64_t v10 = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 1), v8);
  uint64_t v5 = v9;
  a2[4] = v10;
  if (v5 != -8192 && v5 != -4096 && v5 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x1CB79F270]((unint64_t)v8 << 7, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty(a1);
    v23[0] = 2;
    v23[1] = 0;
    uint64_t v24 = -4096;
    uint64_t v25 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = &unk_1F25989C0;
    v19[0] = 2;
    v19[1] = 0;
    uint64_t v20 = -8192;
    uint64_t v9 = (char *)(v3 << 7);
    if (v3)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = &v10[(void)v4];
        uint64_t v12 = *(void *)&v10[(void)v4 + 24];
        if (v12 != v24 && v12 != v20)
        {
          BOOL v26 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v12, &v26);
          uint64_t v14 = v26;
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v26 + 1), (void *)v11 + 1);
          void v14[4] = *((void *)v11 + 4);
          v14[5] = v14 + 7;
          int v15 = (void **)(v11 + 40);
          v14[6] = 0x800000000;
          if (*((_DWORD *)v11 + 12)) {
            llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v14 + 5), (uint64_t)(v11 + 40));
          }
          v14[15] = *(void *)&v10[(void)v4 + 120];
          ++*(_DWORD *)(a1 + 8);
          if (&v10[(void)v4 + 56] != *v15) {
            free(*v15);
          }
        }
        uint64_t v16 = *((void *)v11 + 3);
        if (v16 != -8192 && v16 != -4096 && v16 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v10[(void)v4 + 8]);
        }
        v10 += 128;
      }
      while (v9 != v10);
      if (v20 != -8192 && v20 != -4096 && v20) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v19);
      }
    }
    if (v24 != -8192 && v24 != -4096 && v24) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
    }
    return llvm::deallocate_buffer(v4, v9);
  }
  else
  {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty(a1);
  }
}

uint64_t llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v8, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v10 = v2;
  uint64_t v11 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(void *)v2, *(_DWORD *)(v2 + 16), v9, &v11);
  if (result)
  {
    uint64_t v4 = v11;
    unint64_t v5 = (char *)v11[5];
    if (v5 != (char *)(v11 + 7)) {
      free(v5);
    }
    v12[0] = 2;
    v12[1] = 0;
    uint64_t v13 = -8192;
    uint64_t v14 = 0;
    uint64_t v11 = &unk_1F25989C0;
    uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v12);
    uint64_t v6 = v13;
    v4[4] = v14;
    if (v6 != -8192 && v6 != -4096 && v6) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return result;
}

void AGCLLVMAGPVertexShaderRegular::~AGCLLVMAGPVertexShaderRegular(AGCLLVMAGPVertexShaderRegular *this)
{
  *(void *)this = off_1F25815C8;
  uint64_t v2 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + 10088);
  *((void *)this + 1261) = &off_1F2581918;
  *((void *)this + 1265) = &off_1F2581A08;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257B4D0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(void *)this = off_1F25815C8;
  uint64_t v2 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + 10088);
  *((void *)this + 1261) = &off_1F2581918;
  *((void *)this + 1265) = &off_1F2581A08;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257B4D0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

BOOL virtual thunk to'AGCLLVMAGPVertexShaderPostTessellationHW::constructReply(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  return AGCLLVMAGPVertexShaderPostTessellationHW::constructReply((AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMAGPVertexShaderPostTessellationHW::constructReply(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  BOOL v2 = AGCLLVMAGPVertexShaderPostTessellation::constructReply(this);
  if (v2)
  {
    uint64_t v3 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v4 = (flatbuffers::FlatBufferBuilder *)(v3 + 2568);
    int v5 = *((unsigned __int8 *)this + 5033);
    int v6 = *((unsigned __int8 *)this + 5034);
    int v7 = *((unsigned __int8 *)this + 5092);
    int v8 = *((unsigned __int8 *)this + 5093);
    int v9 = *((unsigned __int8 *)this + 5094);
    int v10 = *((unsigned __int8 *)this + 5095);
    v3[2638] = 1;
    int v11 = *((_DWORD *)v3 + 650) - *((_DWORD *)v3 + 654) + *((_DWORD *)v3 + 652);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)v3 + 321, 14, v10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 12, v9, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 10, v8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 8, v7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 6, v6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 4, v5, 0);
    int v12 = flatbuffers::FlatBufferBuilder::EndTable(v4, v11);
    uint64_t v13 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v14 = (flatbuffers::FlatBufferBuilder *)(v13 + 2568);
    v13[2638] = 1;
    int v15 = *((_DWORD *)v13 + 650) - *((_DWORD *)v13 + 654) + *((_DWORD *)v13 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v13 + 2568), v12);
    int v16 = flatbuffers::FlatBufferBuilder::EndTable(v14, v15);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + *(void *)(*(void *)this - 24) + 2568), v16, v17);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG11::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
  }
  return v2;
}

BOOL AGCLLVMAGPVertexShaderPostTessellation::constructReply(AGCLLVMAGPVertexShaderPostTessellation *this)
{
  BOOL result = AGCDeserializedReply::deserialize((AGCLLVMAGPVertexShaderPostTessellation *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMAGPVertexShaderPostTessellation *)((char *)this
                                                                                 + *(void *)(*(void *)this - 24)));
    int v3 = AGCLLVMUserObject::constructFlatReply(this);
    int v4 = AGCLLVMUserVertexShader::constructFlatReply(this);
    int v5 = AGCLLVMAGPVertexShader::constructMTLVertexInfo(this);
    int v6 = (char *)this + *(void *)(*(void *)this - 24);
    int v7 = (flatbuffers::FlatBufferBuilder *)(v6 + 2472);
    v6[2542] = 1;
    int v8 = *((_DWORD *)v6 + 626) - *((_DWORD *)v6 + 630) + *((_DWORD *)v6 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<signed char>((void *)v6 + 309, 4, *((char *)this + 10052));
    flatbuffers::FlatBufferBuilder::AddElement<signed char>(v7, 6, *((char *)this + 10056));
    flatbuffers::FlatBufferBuilder::AddElement<signed char>(v7, 8, *((char *)this + 10060));
    flatbuffers::FlatBufferBuilder::AddElement<signed char>(v7, 14, *((char *)this + 10064));
    int v9 = (*(uint64_t (**)(AGCLLVMAGPVertexShaderPostTessellation *))(*(void *)this + 640))(this);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v7, 16, v9, 0);
    LODWORD(v7) = flatbuffers::FlatBufferBuilder::EndTable(v7, v8);
    int v10 = (char *)this + *(void *)(*(void *)this - 24);
    int v11 = (flatbuffers::FlatBufferBuilder *)(v10 + 2472);
    v10[2542] = 1;
    int v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v10 + 2472), v3);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v11, v4);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLVertexInfo>(v11, v5);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLPostTessellationInfo>(v11, (int)v7);
    uint64_t v13 = (AGCLLVMAGPVertexShaderPostTessellation *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v14 = flatbuffers::FlatBufferBuilder::EndTable(v11, v12);
    flatbuffers::FlatBufferBuilder::Finish(v13, v14, v15);
    return AGCLLVMAGPVertexShader::validateReply(this);
  }
  return result;
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLPostTessellationInfo>(flatbuffers::FlatBufferBuilder *result, int a2)
{
  if (a2)
  {
    int v3 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 16, v4);
  }
  return result;
}

const char *virtual thunk to'AGCLLVMAGPVertexShaderPostTessellationHW::dumpType(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  return "post-tessellation-vertex-hw";
}

void virtual thunk to'AGCLLVMAGPVertexShaderPostTessellationHW::~AGCLLVMAGPVertexShaderPostTessellationHW(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F257B550;
  v1[1321] = &unk_1F257B8C8;
  v1[1325] = &unk_1F257B9B8;
  uint64_t v2 = v1[1319];
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 1317));
  }
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation((AGCLLVMAGPVertexShaderPostTessellation *)v1, (uint64_t *)off_1F257B9C8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1321));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F257B550;
  v1[1321] = &unk_1F257B8C8;
  v1[1325] = &unk_1F257B9B8;
  uint64_t v2 = v1[1319];
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 1317));
  }
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation((AGCLLVMAGPVertexShaderPostTessellation *)v1, (uint64_t *)off_1F257B9C8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1321));
}

void AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation(AGCLLVMAGPVertexShaderPostTessellation *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[13];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[14];
  uint64_t v5 = *((void *)this + 1316);
  if (v5 != -8192 && v5 != -4096 && v5 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellation *)((char *)this + 10512));
  }
  for (uint64_t i = 0; i != -360; i -= 24)
  {
    uint64_t v8 = *(void *)((char *)this + i + 10424);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellation *)((char *)this + i + 10408));
    }
  }
  uint64_t v10 = a2[1];
  *(void *)this = v10;
  *(void *)((char *)this + *(void *)(v10 - 24)) = a2[11];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[12];
  int v11 = (char *)*((void *)this + 1249);
  if (v11 != (char *)this + 10008) {
    free(v11);
  }
  int v12 = (char *)*((void *)this + 1183);
  if (v12 != (char *)this + 9480) {
    free(v12);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, a2 + 2);
}

BOOL virtual thunk to'AGCLLVMAGPVertexShaderPostTessellation::constructReply(AGCLLVMAGPVertexShaderPostTessellation *this)
{
  return AGCLLVMAGPVertexShaderPostTessellation::constructReply((AGCLLVMAGPVertexShaderPostTessellation *)((char *)this + *(void *)(*(void *)this - 152)));
}

uint64_t AGCLLVMAGPVertexShaderPostTessellation::needsRingEdgeVertex(AGCLLVMAGPVertexShaderPostTessellation *this)
{
  return 0;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellation::replaceBuiltins(AGCLLVMAGPVertexShaderPostTessellation *this)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = AGCLLVMUserObject::replaceBuiltins(this);
  if (!v2) {
    return v2;
  }
  int v3 = *(llvm::LLVMContext ***)((char *)this + *(void *)(*(void *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v82, *v3);
  uint64_t v88 = this;
  uint64_t v82 = &unk_1F25989E8;
  v87[25] = v3;
  {
    AGCLLVMAGPVertexShaderPostTessellation::replaceBuiltins(void)::tessellation_builtins = (uint64_t)"air.get_num_patch_control_points";
    dword_1EA611E40 = 1;
    qword_1EA611E48 = (uint64_t)AGCLLVMAGPVertexShaderPostTessellation::buildNumPatchControlPoints;
    dword_1EA611E50 = 0;
    dword_1EA611E58 = 2;
    word_1EA611E5C = 0;
  }
  if (AGCLLVMAGPVertexShaderPostTessellation::replaceBuiltins(void)::tessellation_builtins) {
    strlen((const char *)AGCLLVMAGPVertexShaderPostTessellation::replaceBuiltins(void)::tessellation_builtins);
  }
  uint64_t Function = llvm::Module::getFunction();
  if (Function)
  {
    uint64_t v5 = (llvm::Function *)Function;
    if (dword_1EA611E58 == 12)
    {
      uint64_t v8 = *(void *)(Function + 8);
      while (v8)
      {
        uint64_t v9 = *(void *)(v8 + 24);
        uint64_t v8 = *(void *)(v8 + 8);
        uint64_t v10 = (void (*)(void *, uint64_t))qword_1EA611E48;
        int v11 = (void *)((char *)v88 + (dword_1EA611E50 >> 1));
        if (dword_1EA611E50) {
          uint64_t v10 = *(void (**)(void *, uint64_t))(*v11 + qword_1EA611E48);
        }
        v10(v11, v9);
      }
      goto LABEL_119;
    }
    if (dword_1EA611E58 == 11)
    {
      int v6 = (llvm::Function *)Function;
      if (qword_1EA611E48)
      {
        size_t v7 = strlen((const char *)qword_1EA611E48);
        *(void *)&v89[0] = (char *)&v89[1] + 8;
        *(_OWORD *)((char *)v89 + 8) = xmmword_1CADD6290;
        llvm::SmallVectorImpl<char>::append<char const*,void>(v89, (unsigned char *)qword_1EA611E48, (unsigned char *)(qword_1EA611E48 + v7));
      }
      else
      {
        *(void *)&v89[1] = 64;
        *(void *)&v89[0] = (char *)&v89[1] + 8;
        *((void *)&v89[0] + 1) = 0;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(v89, ".", "");
      uint64_t v5 = v6;
      if (*(void *)&v89[1] < *((void *)&v89[0] + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      llvm::Module::getOrInsertFunction();
      llvm::Value::replaceAllUsesWith();
      if (*(_OWORD **)&v89[0] != (_OWORD *)((char *)&v89[1] + 8)) {
        free(*(void **)&v89[0]);
      }
      goto LABEL_119;
    }
    uint64_t v69 = (llvm::Function *)Function;
    uint64_t v12 = **(void **)(*(void *)(Function + 24) + 16);
    BOOL v13 = (*(_DWORD *)(v12 + 8) & 0xFE) != 0x12 || HIBYTE(word_1EA611E5C) == 0;
    int v14 = !v13;
    if (v13) {
      int v15 = 1;
    }
    else {
      int v15 = *(_DWORD *)(v12 + 32);
    }
    int v70 = v15;
    int v68 = v85;
    uint64_t v16 = *(void *)(Function + 8);
    if (!v16)
    {
LABEL_113:
      uint64_t v2 = v2;
      int v85 = v68;
      uint64_t v5 = v69;
LABEL_119:
      llvm::Function::eraseFromParent(v5);
      goto LABEL_120;
    }
    uint64_t v17 = &v78;
    while (1)
    {
      uint64_t v18 = *(llvm::Instruction **)(v16 + 24);
      uint64_t v19 = *(void *)(v16 + 8);
      if (dword_1EA611E40 == 1)
      {
        int v20 = 0;
      }
      else
      {
        if (dword_1EA611E40 != 2) {
          goto LABEL_31;
        }
        int v20 = 121;
      }
      int v85 = v20;
LABEL_31:
      uint64_t v71 = v19;
      llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v83, v18);
      uint64_t v21 = llvm::UndefValue::get();
      if (v70)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t v72 = (llvm::Value *)v21;
          uint64_t v73 = v22;
          uint64_t v23 = v17;
          uint64_t v90 = 0;
          memset(v89, 0, sizeof(v89));
          unint64_t v24 = llvm::CallBase::arg_end(v18) - (void)v18 + 32 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF);
          if ((v24 & 0x1FFFFFFFE0) != 0)
          {
            uint64_t v25 = (v24 >> 5);
            BOOL v26 = (llvm::Value **)v89;
            uint64_t v27 = v18;
            do
            {
              uint64_t v28 = (llvm::Value **)((char *)v27 - 32 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
              uint64_t v29 = *v28;
              *BOOL v26 = *v28;
              if (v14 && (*(_DWORD *)(*(void *)v29 + 8) & 0xFE) == 0x12)
              {
                __int16 v81 = 257;
                uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
                *BOOL v26 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v83, v29, v30, (const llvm::Twine *)v80);
              }
              ++v26;
              uint64_t v27 = (llvm::Instruction *)((char *)v27 + 32);
              --v25;
            }
            while (v25);
          }
          if ((_BYTE)word_1EA611E5C)
          {
            uint64_t v31 = **(llvm::Type ***)&v89[0];
            uint64_t v17 = v23;
            if ((*(_DWORD *)(**(void **)&v89[0] + 8) & 0xFE) == 0x12) {
              uint64_t v31 = (llvm::Type *)**((void **)v31 + 2);
            }
            v80[0] = llvm::Type::getPrimitiveSizeInBits(v31);
            v80[1] = v32;
            if (llvm::TypeSize::operator unsigned long long() == 32)
            {
              int v33 = 0;
            }
            else
            {
              uint64_t v34 = (llvm::Type *)v87[4];
              if ((*(_DWORD *)(**(void **)&v89[0] + 8) & 0xFE) == 0x12) {
                uint64_t v34 = (llvm::Type *)llvm::FixedVectorType::get();
              }
              if ((v24 & 0x1FFFFFFFE0) != 0)
              {
                uint64_t v35 = (v24 >> 5);
                uint64_t v36 = (llvm::Value **)v89;
                do
                {
                  __int16 v37 = *v36;
                  __int16 v81 = 257;
                  *v36++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v83, v37, v34, (const llvm::Twine *)v80);
                  --v35;
                }
                while (v35);
              }
              int v33 = 1;
            }
          }
          else
          {
            int v33 = 0;
            uint64_t v17 = v23;
          }
          if (llvm::FPMathOperator::classof((uint64_t)v18)) {
            unsigned int FastMathFlags = llvm::Instruction::getFastMathFlags(v18);
          }
          else {
            unsigned int FastMathFlags = 0;
          }
          __int16 v39 = (char *)v88 + *(void *)(*(void *)v88 - 24);
          long long v77 = v84[2];
          llvm::IRBuilderBase::getCurrentDebugLocation(v17, (llvm::IRBuilderBase *)v83);
          int v79 = v85;
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v77, (uint64_t)(v39 + 40));
          if (v78) {
            llvm::MetadataTracking::untrack();
          }
          switch(dword_1EA611E58)
          {
            case 1:
              unsigned int v40 = (uint64_t (*)(void *))qword_1EA611E48;
              uint64_t v41 = (void *)((char *)v88 + (dword_1EA611E50 >> 1));
              if (dword_1EA611E50) {
                unsigned int v40 = *(uint64_t (**)(void *))(*v41 + qword_1EA611E48);
              }
              uint64_t v61 = v40(v41);
              goto LABEL_98;
            case 2:
              uint64_t v43 = (uint64_t (*)(void *, uint64_t))qword_1EA611E48;
              uint64_t v44 = *(void *)v18;
              uint64_t v45 = (void *)((char *)v88 + (dword_1EA611E50 >> 1));
              if ((dword_1EA611E50 & 1) == 0) {
                goto LABEL_81;
              }
              goto LABEL_80;
            case 3:
              uint64_t v43 = (uint64_t (*)(void *, uint64_t))qword_1EA611E48;
              uint64_t v44 = *(void *)&v89[0];
              uint64_t v45 = (void *)((char *)v88 + (dword_1EA611E50 >> 1));
              if ((dword_1EA611E50 & 1) == 0) {
                goto LABEL_81;
              }
LABEL_80:
              uint64_t v43 = *(uint64_t (**)(void *, uint64_t))(*v45 + v43);
LABEL_81:
              uint64_t v61 = v43(v45, v44);
              goto LABEL_98;
            case 4:
              uint64_t v46 = (unsigned int *)(*(void *)&v89[0] + 24);
              if (*(_DWORD *)(*(void *)&v89[0] + 32) >= 0x41u) {
                uint64_t v46 = *(unsigned int **)v46;
              }
              uint64_t v47 = *v46;
              uint64_t v48 = (uint64_t (*)(void *, uint64_t, uint64_t))qword_1EA611E48;
              uint64_t v49 = *(void *)v18;
              BOOL v50 = (void *)((char *)v88 + (dword_1EA611E50 >> 1));
              if (dword_1EA611E50) {
                uint64_t v48 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v50 + qword_1EA611E48);
              }
              goto LABEL_85;
            case 5:
              uint64_t v48 = (uint64_t (*)(void *, uint64_t, uint64_t))qword_1EA611E48;
              uint64_t v47 = *((void *)&v89[0] + 1);
              uint64_t v49 = *(void *)&v89[0];
              BOOL v50 = (void *)((char *)v88 + (dword_1EA611E50 >> 1));
              if (dword_1EA611E50) {
                uint64_t v48 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v50 + qword_1EA611E48);
              }
LABEL_85:
              uint64_t v61 = v48(v50, v49, v47);
              goto LABEL_98;
            case 6:
              int v51 = (uint64_t (*)(void *, _OWORD *, const char *, uint64_t))qword_1EA611E48;
              char v53 = (const char *)*((void *)&v89[0] + 1);
              uint64_t v52 = *(_OWORD **)&v89[0];
              uint64_t v54 = (void *)((char *)v88 + (dword_1EA611E50 >> 1));
              if (dword_1EA611E50) {
                int v51 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(*v54
              }
                                                                                          + qword_1EA611E48);
              uint64_t v55 = FastMathFlags;
              goto LABEL_94;
            case 7:
              int v51 = (uint64_t (*)(void *, _OWORD *, const char *, uint64_t))qword_1EA611E48;
              char v53 = (const char *)*((void *)&v89[0] + 1);
              uint64_t v52 = *(_OWORD **)&v89[0];
              uint64_t v55 = *(void *)&v89[1];
              uint64_t v54 = (void *)((char *)v88 + (dword_1EA611E50 >> 1));
              if ((dword_1EA611E50 & 1) == 0) {
                goto LABEL_94;
              }
              uint64_t v61 = (*(uint64_t (**)(void *, void, void, void))(*v54 + qword_1EA611E48))(v54, *(void *)&v89[0], *((void *)&v89[0] + 1), *(void *)&v89[1]);
              goto LABEL_98;
            case 8:
              uint64_t v56 = (uint64_t (*)(void *, uint64_t, _OWORD *, const char *, uint64_t))qword_1EA611E48;
              uint64_t v58 = (_OWORD *)*((void *)&v89[0] + 1);
              uint64_t v57 = *(void *)&v89[0];
              uint64_t v59 = *(const char **)&v89[1];
              uint64_t v60 = (void *)((char *)v88 + (dword_1EA611E50 >> 1));
              if (dword_1EA611E50) {
                uint64_t v56 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(*v60 + qword_1EA611E48);
              }
              uint64_t v62 = FastMathFlags;
              goto LABEL_97;
            case 9:
              int v51 = (uint64_t (*)(void *, _OWORD *, const char *, uint64_t))qword_1EA611E48;
              uint64_t v54 = (void *)((char *)v88 + (dword_1EA611E50 >> 1));
              if (dword_1EA611E50) {
                int v51 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(*v54
              }
                                                                                          + qword_1EA611E48);
              uint64_t v52 = v89;
              char v53 = "";
              uint64_t v55 = 0;
LABEL_94:
              uint64_t v61 = v51(v54, v52, v53, v55);
              goto LABEL_98;
            case 10:
              uint64_t v56 = (uint64_t (*)(void *, uint64_t, _OWORD *, const char *, uint64_t))qword_1EA611E48;
              uint64_t v57 = *(void *)v18;
              uint64_t v60 = (void *)((char *)v88 + (dword_1EA611E50 >> 1));
              if (dword_1EA611E50) {
                uint64_t v56 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(*v60 + qword_1EA611E48);
              }
              uint64_t v58 = v89;
              uint64_t v59 = "";
              uint64_t v62 = 0;
LABEL_97:
              uint64_t v61 = v56(v60, v57, v58, v59, v62);
LABEL_98:
              FPTrunc = (llvm::Value *)v61;
              break;
            default:
              FPTrunc = 0;
              break;
          }
          uint64_t v63 = (char *)v88 + *(void *)(*(void *)v88 - 24);
          long long v74 = *(_OWORD *)(v63 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v75, (llvm::IRBuilderBase *)(v63 + 40));
          int v76 = *((_DWORD *)v63 + 34);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v74, (uint64_t)v83);
          if (v75) {
            llvm::MetadataTracking::untrack();
          }
          if (v33)
          {
            uint64_t v64 = *(void *)v18;
            if (v14 && (*(_DWORD *)(v64 + 8) & 0xFE) == 0x12) {
              uint64_t v64 = **(void **)(v64 + 16);
            }
            __int16 v81 = 257;
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v83, FPTrunc, (llvm::Type *)v64, (const llvm::Twine *)v80);
            if (v14)
            {
LABEL_108:
              __int16 v81 = 257;
              uint64_t v65 = v73;
              uint64_t v66 = (llvm::Value *)llvm::ConstantInt::get();
              FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v83, v72, FPTrunc, v66, (const llvm::Twine *)v80);
              goto LABEL_109;
            }
          }
          else if (v14)
          {
            goto LABEL_108;
          }
          uint64_t v65 = v73;
LABEL_109:
          uint64_t v22 = v65 + 1;
          uint64_t v21 = (uint64_t)FPTrunc;
        }
        while (v22 != v70);
      }
      if (*(void *)v18 != v87[1]) {
        llvm::Value::replaceAllUsesWith();
      }
      llvm::Instruction::eraseFromParent(v18);
      uint64_t v16 = v71;
      if (!v71) {
        goto LABEL_113;
      }
    }
  }
LABEL_120:
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v87);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v86);
  if (v83[0] != v84) {
    free(v83[0]);
  }
  return v2;
}

llvm::Value *AGCLLVMAGPVertexShaderPostTessellation::buildNumPatchControlPoints(AGCLLVMAGPVertexShaderPostTessellation *this, llvm::Type *a2)
{
  int v3 = (llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32);
  TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)0xD);
  return AGCLLVMBuilder::truncateToSmall(v3, TessConstant, a2);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(void *a1, llvm::Value *a2)
{
  int v3 = &a1[3 * a2];
  uint64_t v4 = (llvm::ValueHandleBase *)(v3 + 1259);
  if (!v3[1261])
  {
    uint64_t v5 = 3 * a2;
    char v6 = 1;
    size_t v7 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    uint64_t v8 = (&AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(AGCLLVMAGPVertexShaderPostTessellation::TessConstant)::tess_constant_info)[v5];
    HIBYTE(v17) = 1;
    if (*v8)
    {
      uint64_t v16 = v8;
      char v6 = 3;
    }
    LOBYTE(v17) = v6;
    llvm::GlobalVariable::GlobalVariable();
    *((unsigned char *)v7 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    uint64_t v9 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v10 = *((void *)v9 + 47);
    uint64_t v11 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v9 + 32), v7);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v10, v11);
    llvm::ValueHandleBase::operator=(v4, (uint64_t)v7);
  }
  uint64_t v12 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  BOOL v13 = (llvm::Type **)*((void *)v4 + 2);
  __int16 v17 = 257;
  int v14 = AGCLLVMBuilder::tryDeducePointeeType(v13, a2);
  return llvm::IRBuilderBase::CreateAlignedLoad(v12 + 5, v14, (uint64_t)v13, 0, (uint64_t)&v16);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellation::initCompile(llvm::Function **this)
{
  uint64_t inited = AGCLLVMAGPVertexShader::initCompile((AGCLLVMAGPVertexShader *)this);
  if (inited)
  {
    uint64_t v3 = *((void *)this[22] + 10);
    if (v3) {
      uint64_t v4 = (llvm::BasicBlock *)(v3 - 24);
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v4);
    if (AGCLLVMUserObject::hoistAllocas((uint64_t)this, (uint64_t)v4, &FirstInsertionPt))
    {
      __int16 v40 = 257;
      uint64_t v4 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    }
    uint64_t v5 = this[22];
    if (*((_WORD *)v5 + 9))
    {
      llvm::Function::BuildLazyArguments(this[22]);
      size_t v7 = this[22];
      uint64_t v6 = *((void *)v5 + 11);
      if (*((_WORD *)v7 + 9)) {
        llvm::Function::BuildLazyArguments(this[22]);
      }
      uint64_t v5 = v7;
    }
    else
    {
      uint64_t v6 = *((void *)v5 + 11);
    }
    uint64_t v8 = *((void *)v5 + 11) + 40 * *((void *)v5 + 12);
    if (v6 != v8)
    {
      uint64_t v9 = (char *)(this + 1);
      uint64_t v10 = (char *)(this + 46);
      do
      {
        if (*(void *)(v6 + 8))
        {
          uint64_t v11 = (char **)&v9[*((void *)*this - 3) + 32];
          uint64_t v12 = (char *)llvm::BasicBlock::getFirstInsertionPt(v4);
          llvm::IRBuilderBase::SetInsertPoint(v11, (char *)v4, v12);
          uint64_t v13 = *((void *)this[11] + *(unsigned int *)(v6 + 32));
          uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v13 - 8 * *(unsigned int *)(v13 + 8) + 8));
          if (v15 > 20)
          {
            if (v15 == 30)
            {
              if (*String != 0x746E6F632E726961
                || String[1] != 0x6E696F705F6C6F72
                || String[2] != 0x5F7865646E695F74
                || *(void *)((char *)String + 22) != 0x7265666675625F78)
              {
                goto LABEL_62;
              }
              uint64_t v30 = *(llvm::Type **)v6;
              v39[0] = "agc.control_point_index_buffer";
              __int16 v40 = 259;
              uint64_t v31 = *(void *)(*(void *)&v10[*((void *)*this - 3) + 32] + 824);
              unsigned int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 136))(v31);
              GlobalBufferBinding = (llvm::Type **)AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v30, (const llvm::Twine *)v39, v32, 0, 5, 0);
              uint64_t v34 = &v9[*((void *)*this - 3)];
              __int16 v40 = 257;
              uint64_t v36 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBufferBinding, v35);
              llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v34 + 4, v36, (uint64_t)GlobalBufferBinding, 0, (uint64_t)v39);
            }
            else
            {
              if (v15 != 21) {
                goto LABEL_62;
              }
              BOOL v20 = *String == 0x69736F702E726961 && String[1] == 0x5F6E695F6E6F6974;
              if (!v20 || *(void *)((char *)String + 13) != 0x68637461705F6E69) {
                goto LABEL_62;
              }
              (*((void (**)(llvm::Function **))*this + 77))(this);
            }
LABEL_61:
            llvm::Value::replaceAllUsesWith();
            goto LABEL_62;
          }
          if (v15 == 12)
          {
            if (*String == 0x637461702E726961 && *((_DWORD *)String + 2) == 1684627304)
            {
              (*((void (**)(llvm::Function **))*this + 79))(this);
              if (!this[1316])
              {
                uint64_t v23 = (llvm::Type *)llvm::PointerType::get();
                v39[0] = "agc.patch_index_buffer";
                __int16 v40 = 259;
                uint64_t v24 = *(void *)(*(void *)&v10[*((void *)*this - 3) + 32] + 824);
                unsigned int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 120))(v24);
                BOOL v26 = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v23, (const llvm::Twine *)v39, v25, 0, 5, 0);
                llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 1314), (uint64_t)v26);
              }
              v39[0] = "patch_id_merge";
              __int16 v40 = 259;
              llvm::BasicBlock::splitBasicBlock();
              v39[0] = "patch_id_indirect";
              __int16 v40 = 259;
              operator new();
            }
            goto LABEL_62;
          }
          if (v15 == 15)
          {
            if (*String == 0x637461702E726961 && *(void *)((char *)String + 7) == 0x74726174735F6863)
            {
              uint64_t v18 = (llvm::Function **)((char *)this + *((void *)*this - 3) + 32);
              TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)2);
            }
            else
            {
              if (*String != 0x74736E692E726961 || *(void *)((char *)String + 7) != 0x64695F65636E6174) {
                goto LABEL_62;
              }
              uint64_t v18 = (llvm::Function **)((char *)this + *((void *)*this - 3) + 32);
              TessConstant = (llvm::Value *)(*((uint64_t (**)(llvm::Function **))*this + 78))(this);
            }
            AGCLLVMBuilder::truncateToSmall(v18, TessConstant, *(llvm::Type **)v6);
            goto LABEL_61;
          }
        }
LABEL_62:
        v6 += 40;
      }
      while (v6 != v8);
    }
  }
  return inited;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationHW::needsRingEdgeVertex(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  return *((unsigned __int8 *)this + 10560);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationHW::getDrawPatchIndex(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t VIRead = AGCLLVMUserVertexShader::createVIRead(this, (uint64_t)this + 5024, 8);
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232);
  __int16 v7 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v2, 49, VIRead, v4, (uint64_t)v6);
}

llvm::Value *AGCLLVMAGPVertexShaderPostTessellationHW::getInstanceID(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v6 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(v3 + 40), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v5);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationHW::getPatchPosition(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  uint64_t v2 = (char *)this + 5024;
  uint64_t VIRead = (llvm::Value *)AGCLLVMUserVertexShader::createVIRead(this, (uint64_t)this + 5024, 6);
  uint64_t v4 = (llvm::Value *)AGCLLVMUserVertexShader::createVIRead(this, (uint64_t)v2, 7);
  if (*((_DWORD *)this + 2513))
  {
    uint64_t v5 = (llvm::Value *)llvm::UndefValue::get();
    __int16 v6 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v46 = 257;
    __int16 v7 = (llvm::IRBuilderBase *)(v6 + 40);
    uint64_t v8 = (llvm::Value *)llvm::ConstantInt::get();
    Insertuint64_t Element = llvm::IRBuilderBase::CreateInsertElement(v7, v5, VIRead, v8, (const llvm::Twine *)v45);
    uint64_t v10 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v46 = 257;
    uint64_t v11 = (llvm::IRBuilderBase *)(v10 + 40);
    uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v13 = v11;
    int v14 = (llvm::Value *)InsertElement;
    uint64_t v15 = v4;
  }
  else
  {
    uint64_t v16 = (llvm::Value *)llvm::UndefValue::get();
    __int16 v17 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v46 = 257;
    uint64_t v18 = (llvm::IRBuilderBase *)(v17 + 40);
    uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
    BOOL v20 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v18, v16, VIRead, v19, (const llvm::Twine *)v45);
    uint64_t v21 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v46 = 257;
    uint64_t v22 = (llvm::IRBuilderBase *)(v21 + 40);
    uint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v24 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v22, v20, v4, v23, (const llvm::Twine *)v45);
    unsigned int v25 = (char *)this + *(void *)(*(void *)this - 24) + 40;
    uint64_t v26 = llvm::ConstantFP::get();
    uint64_t v27 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v46 = 257;
    uint64_t v28 = (llvm::IRBuilderBase *)(v27 + 40);
    uint64_t v29 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v28, v24, v29, (const llvm::Twine *)v45);
    uint64_t v31 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v44 = 257;
    unsigned int v32 = (llvm::IRBuilderBase *)(v31 + 40);
    int v33 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v34 = llvm::IRBuilderBase::CreateExtractElement(v32, v24, v33, (const llvm::Twine *)v43);
    __int16 v42 = 257;
    Fuint64_t Add = llvm::IRBuilderBase::CreateFAdd((uint64_t)v28, Element, v34, (uint64_t)v41);
    v40[16] = 257;
    uint64_t FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)v25, v26, FAdd, (uint64_t)v40);
    __int16 v37 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v46 = 257;
    unint64_t v38 = (llvm::IRBuilderBase *)(v37 + 40);
    uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v13 = v38;
    int v14 = v24;
    uint64_t v15 = (llvm::Value *)FSub;
  }
  return llvm::IRBuilderBase::CreateInsertElement(v13, v14, v15, v12, (const llvm::Twine *)v45);
}

const char *AGCLLVMAGPVertexShaderPostTessellationHW::dumpType(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  return "post-tessellation-vertex-hw";
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationHW::initCompile(llvm::Function **this)
{
  uint64_t result = AGCLLVMAGPVertexShaderPostTessellation::initCompile(this);
  if (!result) {
    return result;
  }
  uint64_t v3 = this[22];
  uint64_t v4 = *((void *)v3 + 10);
  uint64_t v5 = v4 ? (llvm::BasicBlock *)(v4 - 24) : 0;
  if (*((_WORD *)v3 + 9))
  {
    llvm::Function::BuildLazyArguments(this[22]);
    __int16 v7 = this[22];
    uint64_t v6 = *((void *)v3 + 11);
    if (*((_WORD *)v7 + 9)) {
      llvm::Function::BuildLazyArguments(this[22]);
    }
    uint64_t v3 = v7;
  }
  else
  {
    uint64_t v6 = *((void *)v3 + 11);
  }
  uint64_t v8 = *((void *)v3 + 11) + 40 * *((void *)v3 + 12);
  uint64_t result = 1;
  if (v6 == v8) {
    return result;
  }
  uint64_t v9 = (char *)(this + 1);
  uint64_t v52 = (char *)(this + 23);
  while (1)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_62;
    }
    uint64_t v10 = (char **)&v9[*((void *)*this - 3) + 32];
    uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v5);
    llvm::IRBuilderBase::SetInsertPoint(v10, (char *)v5, FirstInsertionPt);
    uint64_t v12 = *((void *)this[11] + *(unsigned int *)(v6 + 32));
    uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v12 - 8 * *(unsigned int *)(v12 + 8) + 8));
    if (v14 > 27) {
      break;
    }
    if (v14 != 17)
    {
      if (v14 == 20
        && *(void *)String == 0x676E69722E726961
        && *(void *)(String + 8) == 0x65765F656764655FLL
        && *(_DWORD *)(String + 16) == 2019914866)
      {
        uint64_t VIRead = (llvm::Value *)AGCLLVMUserVertexShader::createVIRead(this, (uint64_t)(this + 628), 9);
        llvm::FixedVectorType::get();
        BOOL v50 = (llvm::Value *)llvm::UndefValue::get();
        uint64_t v18 = (llvm::IRBuilderBase *)((char *)this + *((void *)*this - 3) + 40);
        uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v60 = 257;
        uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v18, VIRead, v19, (const llvm::Twine *)v59);
        uint64_t v21 = *(void *)&v52[*((void *)*this - 3) + 32];
        __int16 v58 = 257;
        uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v18, 38, LShr, v21, (uint64_t)v57);
        __int16 v56 = 257;
        uint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v18, v50, Cast, v23, (const llvm::Twine *)v55);
        uint64_t v24 = (llvm::IRBuilderBase *)((char *)this + *((void *)*this - 3) + 40);
        unsigned int v25 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v60 = 257;
        uint64_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v24, VIRead, v25, (const llvm::Twine *)v59);
        uint64_t v27 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v58 = 257;
        uint64_t v28 = llvm::IRBuilderBase::CreateAnd(v24, v26, v27, (const llvm::Twine *)v57);
        uint64_t v29 = *(void *)&v52[*((void *)*this - 3) + 32];
        __int16 v56 = 257;
        uint64_t v30 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v24, 38, v28, v29, (uint64_t)v55);
        __int16 v54 = 257;
        uint64_t v31 = (llvm::Value *)llvm::ConstantInt::get();
        unsigned int v32 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v24, InsertElement, v30, v31, (const llvm::Twine *)v53);
        int v33 = (llvm::IRBuilderBase *)((char *)this + *((void *)*this - 3) + 40);
        uint64_t v34 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v60 = 257;
        uint64_t v35 = llvm::IRBuilderBase::CreateAnd(v33, VIRead, v34, (const llvm::Twine *)v59);
        uint64_t v36 = *(void *)&v52[*((void *)*this - 3) + 32];
        __int16 v58 = 257;
        __int16 v37 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v33, 38, v35, v36, (uint64_t)v57);
        __int16 v56 = 257;
        unint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
        llvm::IRBuilderBase::CreateInsertElement(v33, v32, v37, v38, (const llvm::Twine *)v55);
        llvm::Value::replaceAllUsesWith();
        *((unsigned char *)this + 10560) = 1;
      }
      goto LABEL_62;
    }
    if (*(void *)String == 0x657361622E726961
      && *(void *)(String + 8) == 0x636E6174736E695FLL
      && *(unsigned char *)(String + 16) == 101)
    {
      uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
      uint64_t v45 = &v9[*((void *)*this - 3)];
      __int16 v60 = 257;
      llvm::IRBuilderBase::CreateCall((uint64_t)(v45 + 32), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v59);
      goto LABEL_61;
    }
LABEL_62:
    v6 += 40;
    if (v6 == v8) {
      return 1;
    }
  }
  if (v14 != 28)
  {
    if (v14 != 30) {
      goto LABEL_62;
    }
    BOOL v39 = *(void *)String == 0x69736E692E726961 && *(void *)(String + 8) == 0x65737365745F6564;
    BOOL v40 = v39 && *(void *)(String + 16) == 0x5F6E6F6974616C6CLL;
    if (!v40 || *(void *)(String + 22) != 0x726F746361665F6ELL) {
      goto LABEL_62;
    }
    if (*(void *)v6 != *(void *)AGCLLVMAGPVertexShaderPostTessellationHW::getTessellationFactor((AGCLLVMAGPVertexShaderPostTessellationHW *)this, 1))
    {
      uint64_t v49 = "MTLTessellationFactorFormat and inside_tessellation_factor shader input type mismatch";
      goto LABEL_66;
    }
    goto LABEL_61;
  }
  if (*(void *)String != 0x656764652E726961
    || *(void *)(String + 8) != 0x6C6C65737365745FLL
    || *(void *)(String + 16) != 0x61665F6E6F697461
    || *(_DWORD *)(String + 24) != 1919906915)
  {
    goto LABEL_62;
  }
  if (*(void *)v6 == *(void *)AGCLLVMAGPVertexShaderPostTessellationHW::getTessellationFactor((AGCLLVMAGPVertexShaderPostTessellationHW *)this, 0))
  {
LABEL_61:
    llvm::Value::replaceAllUsesWith();
    goto LABEL_62;
  }
  uint64_t v49 = "MTLTessellationFactorFormat and edge_tessellation_factor shader input type mismatch";
LABEL_66:
  std::string::append((std::string *)((char *)this + *((void *)*this - 3) + 8), v49);
  return 0;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationHW::getTessellationFactor(AGCLLVMAGPVertexShaderPostTessellationHW *this, char a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 168;
  if (!*((_DWORD *)this + 2641)) {
    uint64_t v4 = 152;
  }
  uint64_t v5 = *(llvm::ArrayType **)((char *)this + v4 + *(void *)(*(void *)this - 24) + 32);
  if (!*((void *)this + 1319))
  {
    uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
    v53[0] = "agc.tessellation_factor_buffer";
    __int16 v54 = 259;
    uint64_t v7 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v6, (const llvm::Twine *)v53, v8, 0, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + 10536), (uint64_t)GlobalBufferBinding);
  }
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (*((_DWORD *)this + 2513))
  {
    uint64_t v10 = (char *)this + *(void *)(*(void *)this - 24) + 32;
    uint64_t v11 = 288;
    if (!*((_DWORD *)this + 2641)) {
      uint64_t v11 = 280;
    }
    uint64_t v12 = 224;
    if (!*((_DWORD *)this + 2641)) {
      uint64_t v12 = 216;
    }
    uint64_t v13 = *(void *)&v10[v11];
    uint64_t v14 = *(llvm::ArrayType **)&v10[v12];
    uint64_t v58 = v13;
    uint64_t v59 = v14;
  }
  else
  {
    uint64_t v58 = llvm::ArrayType::get(v5, (llvm::Type *)3);
    uint64_t v59 = v5;
  }
  uint64_t v15 = llvm::StructType::create();
  uint64_t v16 = llvm::PointerType::get();
  __int16 v17 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v18 = (llvm::Type **)*((void *)this + 1319);
  __int16 v54 = 257;
  BOOL v20 = AGCLLVMBuilder::tryDeducePointeeType(v18, v19);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v17, v20, (uint64_t)v18, 0, (uint64_t)v53);
  __int16 v52 = 257;
  uint64_t Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v17, 49, AlignedLoad, v16, (uint64_t)v51);
  switch(*((_DWORD *)this + 2515))
  {
    case 0:
      uint64_t v23 = (char *)this + *(void *)(*(void *)this - 24);
      v55[0] = (uint64_t *)llvm::ConstantInt::get();
      goto LABEL_18;
    case 1:
      unsigned int v25 = (uint64_t *)(*(uint64_t (**)(AGCLLVMAGPVertexShaderPostTessellationHW *))(*(void *)this + 632))(this);
      goto LABEL_17;
    case 2:
      unsigned int v25 = (uint64_t *)(*(uint64_t (**)(AGCLLVMAGPVertexShaderPostTessellationHW *))(*(void *)this + 624))(this);
LABEL_17:
      uint64_t v23 = (char *)this + *(void *)(*(void *)this - 24);
      v55[0] = v25;
LABEL_18:
      v55[1] = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v26 = (llvm::IRBuilderBase *)(v23 + 40);
      __int16 v54 = 257;
      uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v26, v15, Cast, v55, 2, (uint64_t)v53);
      __int16 v52 = 257;
      uint64_t v29 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v28);
      uint64_t v30 = v51;
      goto LABEL_20;
    case 3:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)0xE);
      unsigned int v32 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMAGPVertexShaderPostTessellationHW *))(*(void *)this
                                                                                                 + 632))(this);
      int v33 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMAGPVertexShaderPostTessellationHW *))(*(void *)this
                                                                                                 + 624))(this);
      uint64_t v26 = (AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      __int16 v54 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v26, v33, TessConstant, (const llvm::Twine *)v53);
      __int16 v52 = 257;
      v57[0] = (uint64_t *)llvm::IRBuilderBase::CreateAdd(v26, v32, Mul, (const llvm::Twine *)v51);
      v57[1] = (uint64_t *)llvm::ConstantInt::get();
      __int16 v56 = 257;
      uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v26, v15, Cast, v57, 2, (uint64_t)v55);
      __int16 v50 = 257;
      uint64_t v29 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v35);
      uint64_t v30 = &v49;
LABEL_20:
      uint64_t v24 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v26, v29, (uint64_t)GEP, 0, (uint64_t)v30);
      break;
    default:
      uint64_t v24 = 0;
      break;
  }
  if (!*((_DWORD *)this + 2513) && (a2 & 1) == 0)
  {
    uint64_t v36 = (llvm::Value *)llvm::UndefValue::get();
    __int16 v37 = (AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    LODWORD(v55[0]) = 0;
    __int16 v54 = 257;
    uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v37, v24, (uint64_t)v55, 1, (uint64_t)v53);
    __int16 v52 = 257;
    BOOL v39 = (llvm::Value *)llvm::ConstantInt::get();
    Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v37, v36, Value, v39, (const llvm::Twine *)v51);
    uint64_t v41 = (AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    LODWORD(v55[0]) = 1;
    __int16 v54 = 257;
    __int16 v42 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v41, v24, (uint64_t)v55, 1, (uint64_t)v53);
    __int16 v52 = 257;
    uint64_t v43 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v44 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v41, InsertElement, v42, v43, (const llvm::Twine *)v51);
    uint64_t v45 = (char *)this + *(void *)(*(void *)this - 24);
    LODWORD(v55[0]) = 2;
    __int16 v54 = 257;
    __int16 v46 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)(v45 + 40), v24, (uint64_t)v55, 1, (uint64_t)v53);
    __int16 v52 = 257;
    uint64_t v47 = (llvm::Value *)llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v45 + 40), v44, v46, v47, (const llvm::Twine *)v51);
  }
  return v24;
}

void AGCLLVMAGPVertexShaderPostTessellationHW::~AGCLLVMAGPVertexShaderPostTessellationHW(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  *(void *)this = &unk_1F257B550;
  uint64_t v2 = (AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + 10568);
  *((void *)this + 1321) = &unk_1F257B8C8;
  *((void *)this + 1325) = &unk_1F257B9B8;
  uint64_t v3 = *((void *)this + 1319);
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + 10536));
  }
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation(this, (uint64_t *)off_1F257B9C8);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  uint64_t v3;

  *(void *)this = &unk_1F257B550;
  uint64_t v2 = (AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + 10568);
  *((void *)this + 1321) = &unk_1F257B8C8;
  *((void *)this + 1325) = &unk_1F257B9B8;
  uint64_t v3 = *((void *)this + 1319);
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + 10536));
  }
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation(this, (uint64_t *)off_1F257B9C8);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *virtual thunk to'AGCLLVMAGPVertexShaderPostTessellationSW::dumpType(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  return "post-tessellation-vertex-sw";
}

void virtual thunk to'AGCLLVMAGPVertexShaderPostTessellationSW::~AGCLLVMAGPVertexShaderPostTessellationSW(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMAGPVertexShaderPostTessellationSW::~AGCLLVMAGPVertexShaderPostTessellationSW((AGCLLVMAGPVertexShaderPostTessellationSW *)v1);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10656));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMAGPVertexShaderPostTessellationSW::~AGCLLVMAGPVertexShaderPostTessellationSW((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 48)));
  uint64_t v2 = (AGCLLVMObject *)(v1 + 10656);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

void AGCLLVMAGPVertexShaderPostTessellationSW::~AGCLLVMAGPVertexShaderPostTessellationSW(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  *(void *)this = &unk_1F257BA68;
  *((void *)this + 1332) = &unk_1F257BDE0;
  *((void *)this + 1336) = &unk_1F257BED0;
  uint64_t v2 = *((void *)this + 1329);
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10616));
  }
  uint64_t v4 = *((void *)this + 1326);
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10592));
  }
  uint64_t v6 = *((void *)this + 1322);
  if (v6 != -8192 && v6 != -4096 && v6) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10560));
  }
  uint64_t v7 = *((void *)this + 1319);
  if (v7 != -8192 && v7 != -4096 && v7) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10536));
  }
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation(this, (uint64_t *)off_1F257BEE0);
}

{
  uint64_t v1;
  uint64_t vars8;

  AGCLLVMAGPVertexShaderPostTessellationSW::~AGCLLVMAGPVertexShaderPostTessellationSW(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10656));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMAGPVertexShaderPostTessellationSW::~AGCLLVMAGPVertexShaderPostTessellationSW(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10656));
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getDrawPatchIndex(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  switch(*((_DWORD *)this + 2515))
  {
    case 0:
    case 2:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)6);
      uint64_t v3 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)7);
      uint64_t v4 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)3);
      InternalInstanceID = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalInstanceID(this);
      goto LABEL_6;
    case 1:
      InternalPerPatchID = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 0);
      goto LABEL_7;
    case 3:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)6);
      uint64_t v3 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)7);
      uint64_t v4 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)3);
      InternalInstanceID = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 0);
LABEL_6:
      InternalPerPatchID = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::buildMulShiftMod(this, InternalInstanceID, v4, TessConstant, v3);
LABEL_7:
      uint64_t v6 = InternalPerPatchID;
      break;
    default:
      uint64_t v6 = 0;
      break;
  }
  unsigned int v8 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v9 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)2);
  __int16 v12 = 257;
  return llvm::IRBuilderBase::CreateAdd(v8, v6, v9, (const llvm::Twine *)v11);
}

llvm::Value *AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID(llvm::Type ***this, int a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  switch(*((_DWORD *)this + 2515))
  {
    case 0:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)0xA);
      uint64_t v5 = (AGCLLVMAGPVertexShaderPostTessellationSW *)this;
      uint64_t v6 = 11;
      goto LABEL_6;
    case 1:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)8);
      uint64_t v5 = (AGCLLVMAGPVertexShaderPostTessellationSW *)this;
      uint64_t v6 = 9;
      goto LABEL_6;
    case 2:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)6);
      uint64_t v5 = (AGCLLVMAGPVertexShaderPostTessellationSW *)this;
      uint64_t v6 = 7;
LABEL_6:
      unsigned int v8 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(v5, (llvm::Value *)v6);
      uint64_t v9 = (char *)*(*this - 3) + (void)this;
      InternalInstanceID = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalInstanceID((AGCLLVMAGPVertexShaderPostTessellationSW *)this);
      InternalDrawIndexOffset = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalDrawIndexOffset((AGCLLVMAGPVertexShaderPostTessellationSW *)this);
      __int16 v42 = 257;
      uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v9 + 40), InternalInstanceID, InternalDrawIndexOffset, (const llvm::Twine *)v41);
      uint64_t v13 = AGCLLVMObject::buildMulShiftDiv((AGCLLVMObject *)v9, Add, TessConstant, v8);
      goto LABEL_8;
    case 3:
      uint64_t v14 = (llvm::IRBuilderBase *)((char *)this + (void)*(*this - 3) + 40);
      uint64_t v15 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalInstanceID((AGCLLVMAGPVertexShaderPostTessellationSW *)this);
      uint64_t v16 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalDrawIndexOffset((AGCLLVMAGPVertexShaderPostTessellationSW *)this);
      __int16 v42 = 257;
      uint64_t v13 = llvm::IRBuilderBase::CreateAdd(v14, v15, v16, (const llvm::Twine *)v41);
LABEL_8:
      uint64_t v7 = (uint64_t *)v13;
      break;
    default:
      uint64_t v7 = 0;
      break;
  }
  v41[0] = *(llvm::Type ***)((char *)this + (void)*(*this - 3) + 232);
  uint64_t v18 = llvm::StructType::get();
  if (!this[1319])
  {
    uint64_t v19 = (llvm::Type *)llvm::PointerType::get();
    v41[0] = "agc.internal_per_patch_id";
    __int16 v42 = 259;
    uint64_t v20 = (*(void **)((char *)this + (void)*(*this - 3) + 400))[103];
    unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 64))(v20);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v19, (const llvm::Twine *)v41, v21, 0, 5, 0);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 1317), (uint64_t)GlobalBufferBinding);
  }
  uint64_t v23 = (uint64_t *)((char *)this + (void)*(*this - 3));
  uint64_t v24 = this[1319];
  __int16 v42 = 257;
  unsigned int v25 = AGCLLVMBuilder::tryDeducePointeeType(v24, v17);
  uint64_t AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad(v23 + 5, v25, (uint64_t)v24, 0, (uint64_t)v41);
  if (a2 == 1)
  {
    char v28 = 0;
    char v27 = 1;
  }
  else if (a2)
  {
    char v28 = 0;
    char v27 = 1;
  }
  else
  {
    char v27 = 0;
    char v28 = 1;
  }
  uint64_t v29 = (char *)this + (void)*(*this - 3);
  v40[0] = v7;
  v40[1] = (uint64_t *)llvm::ConstantInt::get();
  __int16 v42 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v29 + 40), v18, AlignedLoad, v40, 2, (uint64_t)v41);
  uint64_t v31 = (uint64_t *)((char *)this + (void)*(*this - 3));
  __int16 v42 = 257;
  int v33 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v32);
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v31 + 5, v33, (uint64_t)GEP, 0, (uint64_t)v41);
  if ((v27 & 1) == 0)
  {
    uint64_t v35 = (llvm::IRBuilderBase *)((char *)this + (void)*(*this - 3) + 40);
    uint64_t v36 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v42 = 257;
    uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v35, LShr, v36, (const llvm::Twine *)v41);
  }
  if ((v28 & 1) == 0)
  {
    __int16 v37 = (llvm::IRBuilderBase *)((char *)this + (void)*(*this - 3) + 40);
    unint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v42 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v37, LShr, v38, (const llvm::Twine *)v41);
  }
  return LShr;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getInternalInstanceID(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v9 = 257;
  uint64_t v4 = llvm::IRBuilderBase::CreateCall((uint64_t)(v3 + 40), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v8);
  uint64_t v5 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, 0);
  __int16 v9 = 257;
  return llvm::IRBuilderBase::CreateAdd(v5, v4, TessConstant, (const llvm::Twine *)v8);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::buildMulShiftMod(AGCLLVMAGPVertexShaderPostTessellationSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5)
{
  unsigned int v8 = (llvm::Value *)AGCLLVMObject::buildMulShiftDiv((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24)), a2, a4, a5);
  __int16 v9 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v14 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, v8, a3, (const llvm::Twine *)v13);
  uint64_t v11 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v14 = 257;
  return llvm::IRBuilderBase::CreateSub(v11, a2, Mul, (const llvm::Twine *)v13);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getInternalDrawIndexOffset(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  uint64_t v2 = (llvm::Type *)llvm::PointerType::get();
  if (!*((void *)this + 1329))
  {
    v13[0] = "agc.internal_draw_index_offset";
    __int16 v14 = 259;
    uint64_t v3 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 80))(v3);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v2, (const llvm::Twine *)v13, v4, 0, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10616), (uint64_t)GlobalBufferBinding);
  }
  uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v7 = (llvm::Type *)*((void *)v6 + 29);
  uint64_t v8 = *((void *)this + 1329);
  __int16 v9 = (uint64_t *)(v6 + 40);
  __int16 v14 = 257;
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v6 + 5, v2, v8, 0, (uint64_t)v13);
  v12[16] = 257;
  return llvm::IRBuilderBase::CreateAlignedLoad(v9, v7, AlignedLoad, 0, (uint64_t)v12);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getInstanceID(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  switch(*((_DWORD *)this + 2515))
  {
    case 0:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)0xA);
      uint64_t v3 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)0xB);
      InternalInstanceID = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalInstanceID(this);
      uint64_t v5 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      uint64_t v6 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)3);
      uint64_t v7 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)5);
      __int16 v28 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v27);
      uint64_t v9 = AGCLLVMAGPVertexShaderPostTessellationSW::buildMulShiftMod(this, InternalInstanceID, Mul, TessConstant, v3);
      uint64_t v10 = AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)6);
      uint64_t v11 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)7);
      __int16 v12 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24));
      uint64_t v13 = (llvm::Value *)v9;
      __int16 v14 = (llvm::Value *)v10;
      goto LABEL_7;
    case 1:
      uint64_t v16 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)8);
      __int16 v17 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)9);
      uint64_t v18 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)5);
      uint64_t v19 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalInstanceID(this);
      InternalPerPatchID = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::buildMulShiftMod(this, v19, v18, v16, v17);
      goto LABEL_8;
    case 2:
      InternalPerPatchID = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 0);
      goto LABEL_8;
    case 3:
      uint64_t v21 = AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)6);
      uint64_t v22 = AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)7);
      uint64_t v23 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24));
      uint64_t v13 = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 0);
      __int16 v12 = v23;
      __int16 v14 = (llvm::Value *)v21;
      uint64_t v11 = (llvm::Value *)v22;
LABEL_7:
      InternalPerPatchID = (llvm::Value *)AGCLLVMObject::buildMulShiftDiv(v12, v13, v14, v11);
LABEL_8:
      uint64_t v24 = InternalPerPatchID;
      unsigned int v25 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      uint64_t v26 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)4);
      __int16 v28 = 257;
      uint64_t result = llvm::IRBuilderBase::CreateAdd(v25, v24, v26, (const llvm::Twine *)v27);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getPatchPosition(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  uint64_t v354 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v3 = (char *)this + 10068;
  int v4 = *((unsigned __int8 *)this + 10068);
  if (*(unsigned char *)(*((void *)v2 + 50) + 1734))
  {
    uint64_t v5 = v2 + 32;
    uint64_t v6 = 304;
    if (!*((unsigned char *)this + 10068)) {
      uint64_t v6 = 240;
    }
    uint64_t v7 = *(llvm::Type **)&v5[v6];
    uint64_t v8 = (llvm::Type *)llvm::PointerType::get();
    v348 = "agc.vertex_location_in_patch.uv";
    __int16 v353 = 259;
    uint64_t v9 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 128))(v9);
    GlobalBufferBinding = (llvm::Type **)AGCLLVMUserObject::createGlobalBufferBinding(this, v8, (const llvm::Twine *)&v348, v10, 0, 5, 0);
    __int16 v12 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
    __int16 v353 = 257;
    __int16 v14 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBufferBinding, v13);
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v12 + 5, v14, (uint64_t)GlobalBufferBinding, 0, (uint64_t)&v348);
    uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
    __int16 v17 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v353 = 257;
    uint64_t v18 = llvm::IRBuilderBase::CreateCall((uint64_t)(v17 + 40), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)&v348);
    uint64_t v19 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    __int16 v353 = 257;
    uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v19, v7, AlignedLoad, v18, (const llvm::Twine *)&v348);
    uint64_t v21 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
    __int16 v353 = 257;
    uint64_t v23 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v22);
    Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v21 + 5, v23, (uint64_t)GEP, 0, (uint64_t)&v348);
    int v25 = *v3;
  }
  else
  {
    uint64_t VIRead = AGCLLVMUserVertexShader::createVIRead(this);
    char v27 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v28 = (uint64_t)(v27 + 40);
    uint64_t v29 = *((void *)v27 + 34);
    if (v4)
    {
      __int16 v353 = 257;
      uint64_t Cast = llvm::IRBuilderBase::CreateCast(v28, 49, (uint64_t)VIRead, v29, (uint64_t)&v348);
      uint64_t v31 = AGCLLVMUserVertexShader::createVIRead(this);
      unsigned int v32 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v33 = *((void *)v32 + 34);
      __int16 v353 = 257;
      uint64_t v34 = llvm::IRBuilderBase::CreateCast((uint64_t)(v32 + 40), 49, (uint64_t)v31, v33, (uint64_t)&v348);
      Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
      for (unint64_t i = 0; i != 4; ++i)
      {
        uint64_t v36 = (char *)this + *(void *)(*(void *)this - 24) + 32;
        __int16 v353 = 257;
        __int16 v37 = (llvm::IRBuilderBase *)(v36 + 8);
        unint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
        if (i > 1) {
          BOOL v39 = (llvm::Value *)v34;
        }
        else {
          BOOL v39 = (llvm::Value *)Cast;
        }
        uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v37, v39, v38, (const llvm::Twine *)&v348);
        uint64_t v41 = (char *)this + *(void *)(*(void *)this - 24);
        __int16 v353 = 257;
        __int16 v42 = (llvm::IRBuilderBase *)(v41 + 40);
        uint64_t v43 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v42, InsertElement, Element, v43, (const llvm::Twine *)&v348);
      }
    }
    else
    {
      __int16 v353 = 257;
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v28, 49, (uint64_t)VIRead, v29, (uint64_t)&v348);
    }
    char v352 = 0;
    int v44 = *((_DWORD *)this + 1256);
    int v351 = 1;
    LODWORD(v348) = v44;
    uint64_t v45 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    HIDWORD(v348) = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 128))(v45);
    if (*v3) {
      int v46 = 2;
    }
    else {
      int v46 = 1;
    }
    HIDWORD(v349) = v46;
    LODWORD(v350) = 0;
    HIDWORD(v350) = v46;
    LOBYTE(v349) = 0;
    uint64_t v47 = (_OWORD *)llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>((uint64_t)this + 9464, (unint64_t)&v348);
    uint64_t v48 = (_OWORD *)(*((void *)this + 1183) + 32 * *((unsigned int *)this + 2368));
    long long v49 = v47[1];
    *uint64_t v48 = *v47;
    v48[1] = v49;
    ++*((_DWORD *)this + 2368);
    int v25 = *v3;
    if (*v3) {
      int v50 = 2;
    }
    else {
      int v50 = 1;
    }
    *((_DWORD *)this + 1256) += v50;
  }
  uint64_t v51 = *(void *)(*(void *)this - 24);
  v341 = v3;
  if (v25)
  {
    char v52 = 1;
    uint64_t v53 = AGCLLVMBuilder::subrangeVector((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + v51 + 32), InsertElement, 0, 2, 1);
    __int16 v54 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v55 = *((void *)v54 + 35);
    __int16 v353 = 257;
    __int16 v56 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v54 + 40), 39, v53, v55, (uint64_t)&v348);
    uint64_t v57 = AGCLLVMBuilder::subrangeVector((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 32), InsertElement, 2u, 2, 1);
    uint64_t v58 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v59 = *((void *)v58 + 35);
    __int16 v353 = 257;
    v340 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v58 + 40), 40, v57, v59, (uint64_t)&v348);
    do
    {
      char v60 = v52;
      uint64_t v61 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      uint64_t v62 = (llvm::IRBuilderBase *)(v61 + 40);
      uint64_t v63 = (llvm::Value *)llvm::ConstantInt::get();
      llvm::IRBuilderBase::CreateExtractElement(v62, v56, v63, (const llvm::Twine *)&v348);
      uint64_t v64 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      uint64_t v65 = (llvm::IRBuilderBase *)(v64 + 40);
      uint64_t v66 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v67 = v56;
      int v68 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v65, InsertElement, v66, (const llvm::Twine *)&v348);
      uint64_t v69 = llvm::ConstantInt::get();
      __int16 v343 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v65, 32, v68, v69, (uint64_t)v342);
      llvm::ConstantInt::get();
      __int16 v347 = 257;
      Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      uint64_t v71 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      uint64_t v72 = (llvm::IRBuilderBase *)(v71 + 40);
      uint64_t v73 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v56 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v72, v67, Select, v73, (const llvm::Twine *)&v348);
      char v52 = 0;
    }
    while ((v60 & 1) != 0);
    long long v74 = v340;
    uint64_t v3 = v341;
  }
  else
  {
    uint64_t v75 = *(void *)((char *)this + v51 + 280);
    __int16 v353 = 257;
    llvm::IRBuilderBase::CreateCast((uint64_t)this + v51 + 40, 39, (uint64_t)InsertElement, v75, (uint64_t)&v348);
    int v76 = (char *)this + *(void *)(*(void *)this - 24);
    long long v77 = (uint64_t *)(v76 + 40);
    uint64_t v78 = (AGCLLVMBuilder *)(v76 + 32);
    int v79 = (llvm::Value *)llvm::ConstantInt::get();
    unint64_t v80 = AGCLLVMBuilder::splat(v78, 2, v79);
    __int16 v353 = 257;
    llvm::IRBuilderBase::CreateICmp(v77, 32, (llvm::CmpInst **)InsertElement, (uint64_t)v80, (uint64_t)&v348);
    __int16 v81 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 32);
    uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
    AGCLLVMBuilder::splat(v81, 2, v82);
    __int16 v343 = 257;
    __int16 v56 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    long long v74 = 0;
  }
  int v83 = *((_DWORD *)this + 2513);
  if (!v83)
  {
    uint64_t v84 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    int v85 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v86 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v353 = 257;
    uint64_t v87 = (llvm::IRBuilderBase *)(v86 + 40);
    uint64_t v88 = (llvm::Value *)llvm::ConstantInt::get();
    BOOL v89 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v87, v56, v88, (const llvm::Twine *)&v348);
    uint64_t v90 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v343 = 257;
    uint64_t v91 = v56;
    __int16 v92 = (llvm::IRBuilderBase *)(v90 + 40);
    BOOL v93 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v94 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v92, v91, v93, (const llvm::Twine *)v342);
    __int16 v347 = 257;
    uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v87, v89, v94, (const llvm::Twine *)v346);
    __int16 v345 = 257;
    Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v84, v85, Add, (const llvm::Twine *)v344);
    char v97 = AGCLLVMBuilder::extendVector((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 32), v91, 3);
    uint64_t v98 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v353 = 257;
    __int16 v99 = (llvm::IRBuilderBase *)(v98 + 40);
    uint64_t v100 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v56 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v99, v97, Sub, v100, (const llvm::Twine *)&v348);
    if (!*v3)
    {
      int v83 = *((_DWORD *)this + 2513);
      goto LABEL_36;
    }
    char v101 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    __int16 v102 = (llvm::Value *)llvm::ConstantInt::get();
    v103 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v353 = 257;
    uint64_t v104 = (llvm::IRBuilderBase *)(v103 + 40);
    uint64_t v105 = (llvm::Value *)llvm::ConstantInt::get();
    char v106 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v104, v74, v105, (const llvm::Twine *)&v348);
    uint64_t v107 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v343 = 257;
    uint64_t v108 = v56;
    uint64_t v109 = (llvm::IRBuilderBase *)(v107 + 40);
    unint64_t v110 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v111 = v109;
    __int16 v56 = v108;
    uint64_t v112 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v111, v74, v110, (const llvm::Twine *)v342);
    __int16 v347 = 257;
    uint64_t v113 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v104, v106, v112, (const llvm::Twine *)v346);
    __int16 v345 = 257;
    uint64_t v114 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v101, v102, v113, (const llvm::Twine *)v344);
    uint64_t v115 = AGCLLVMBuilder::extendVector((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 32), v74, 3);
    uint64_t v116 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v353 = 257;
    uint64_t v117 = (llvm::IRBuilderBase *)(v116 + 40);
    uint64_t v118 = (llvm::Value *)llvm::ConstantInt::get();
    long long v74 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v117, v115, v114, v118, (const llvm::Twine *)&v348);
    int v83 = *((_DWORD *)this + 2513);
  }
  if (*v3)
  {
    uint64_t v119 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    if (v83)
    {
      __int16 v353 = 257;
      uint64_t v120 = (llvm::Value *)llvm::ConstantInt::get();
      unint64_t v121 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v119, v56, v120, (const llvm::Twine *)&v348);
      unint64_t v122 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      uint64_t v123 = (llvm::IRBuilderBase *)(v122 + 40);
      v124 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v125 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v123, v74, v124, (const llvm::Twine *)&v348);
      v126 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      __int16 v353 = 257;
      BOOL v127 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateOr(v126, v121, v125, (const llvm::Twine *)&v348);
      uint64_t v128 = llvm::ConstantInt::get();
      __int16 v343 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v126, 32, v127, v128, (uint64_t)v342);
      InternalPerPatchID = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 1);
      v130 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 32);
      InternalPerPatchData = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)this, 0, InternalPerPatchID);
      AGCLLVMBuilder::splat(v130, 2, InternalPerPatchData);
      uint64_t v132 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      v133 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v353 = 257;
      uint64_t v134 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v132, InternalPerPatchID, v133, (const llvm::Twine *)&v348);
      v135 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      uint64_t v136 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v353 = 257;
      Xor = (llvm::Value *)llvm::IRBuilderBase::CreateXor(v135, v134, v136, (const llvm::Twine *)&v348);
      int v138 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)this, 1, v134);
      uint64_t v139 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)this, 1, Xor);
      char v140 = v74;
      int v141 = v56;
      uint64_t v142 = (llvm::Value *)llvm::UndefValue::get();
      uint64_t v143 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      uint64_t v144 = (llvm::IRBuilderBase *)(v143 + 40);
      uint64_t v145 = (llvm::Value *)llvm::ConstantInt::get();
      unint64_t v146 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v144, v142, v138, v145, (const llvm::Twine *)&v348);
      unint64_t v147 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      int v148 = (llvm::IRBuilderBase *)(v147 + 40);
      v149 = (llvm::Value *)llvm::ConstantInt::get();
      llvm::IRBuilderBase::CreateInsertElement(v148, v146, v139, v149, (const llvm::Twine *)&v348);
      __int16 v353 = 257;
      uint64_t v150 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      uint64_t v151 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      uint64_t v152 = (llvm::IRBuilderBase *)(v151 + 40);
      uint64_t v153 = (llvm::Value *)llvm::ConstantInt::get();
      unint64_t v154 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v152, v141, v153, (const llvm::Twine *)&v348);
      uint64_t v155 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      v156 = (llvm::IRBuilderBase *)(v155 + 40);
      char v157 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v158 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v156, v140, v157, (const llvm::Twine *)&v348);
      uint64_t v159 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      __int16 v353 = 257;
      uint64_t v160 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateOr(v159, v154, v158, (const llvm::Twine *)&v348);
      uint64_t v161 = llvm::ConstantInt::get();
      __int16 v343 = 257;
      ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v159, 33, v160, v161, (uint64_t)v342);
      uint64_t v163 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      IsOuterEdgeDraw = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getIsOuterEdgeDraw(this);
      __int16 v353 = 257;
      llvm::IRBuilderBase::CreateAnd(v163, ICmp, IsOuterEdgeDraw, (const llvm::Twine *)&v348);
      v165 = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 1);
      uint64_t v166 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      uint64_t v167 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v353 = 257;
      uint64_t v168 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v166, v165, v167, (const llvm::Twine *)&v348);
      uint64_t v169 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)this, 2, v168);
      OneOverTessIndexTableEntry = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getOneOverTessIndexTableEntry(this, v169);
      uint64_t v171 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      v172 = (llvm::Value *)llvm::ConstantInt::get();
      v173 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v171 + 40), OneOverTessIndexTableEntry, v172, (const llvm::Twine *)&v348);
      __int16 v343 = 257;
      v174 = (llvm::Value *)llvm::ConstantInt::get();
      llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v171 + 40), v141, v173, v174, (const llvm::Twine *)v342);
      unint64_t v175 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      v176 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v177 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v175 + 40), OneOverTessIndexTableEntry, v176, (const llvm::Twine *)&v348);
      __int16 v343 = 257;
      v178 = (llvm::Value *)llvm::ConstantInt::get();
      llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v175 + 40), v140, v177, v178, (const llvm::Twine *)v342);
      __int16 v353 = 257;
      __int16 v56 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      __int16 v353 = 257;
      v179 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      v180 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      __int16 v353 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v180, v179, v150, (const llvm::Twine *)&v348);
      v182 = (char *)this + *(void *)(*(void *)this - 24);
      v183 = (llvm::IRBuilderBase *)(v182 + 40);
      v184 = (AGCLLVMBuilder *)(v182 + 32);
      v185 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v186 = AGCLLVMBuilder::splat(v184, 2, v185);
      __int16 v353 = 257;
      uint64_t v3 = v341;
    }
    else
    {
      __int16 v353 = 257;
      v187 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v188 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v119, v56, v187, (const llvm::Twine *)&v348);
      v189 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      v190 = (llvm::IRBuilderBase *)(v189 + 40);
      v191 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v192 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v190, v74, v191, (const llvm::Twine *)&v348);
      char v193 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      __int16 v353 = 257;
      v194 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateOr(v193, v188, v192, (const llvm::Twine *)&v348);
      uint64_t v195 = llvm::ConstantInt::get();
      __int16 v343 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v193, 32, v194, v195, (uint64_t)v342);
      uint64_t v196 = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 1);
      AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)this, 0, v196);
      v197 = (llvm::Value *)llvm::ConstantInt::get();
      AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)this, 1, v197);
      __int16 v353 = 257;
      uint64_t v198 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      if (*((_DWORD *)this + 2514) == 3)
      {
        v348 = (const char *)llvm::ConstantInt::get();
        uint64_t v349 = llvm::ConstantInt::get();
        uint64_t v350 = llvm::ConstantInt::get();
        llvm::ConstantVector::get();
        v348 = (const char *)llvm::ConstantInt::get();
        uint64_t v349 = llvm::ConstantInt::get();
        uint64_t v350 = llvm::ConstantInt::get();
        llvm::ConstantVector::get();
        v348 = (const char *)llvm::ConstantInt::get();
        uint64_t v349 = llvm::ConstantInt::get();
        uint64_t v350 = llvm::ConstantInt::get();
        llvm::ConstantVector::get();
        v348 = (const char *)llvm::ConstantInt::get();
        uint64_t v349 = llvm::ConstantInt::get();
        uint64_t v350 = llvm::ConstantInt::get();
        llvm::ConstantVector::get();
        int v199 = (char *)this + *(void *)(*(void *)this - 24);
        __int16 v353 = 257;
        v200 = (llvm::IRBuilderBase *)(v199 + 40);
        uint64_t v201 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v202 = v3;
        __int16 v203 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v200, v56, v201, (const llvm::Twine *)&v348);
        uint64_t v204 = llvm::ConstantInt::get();
        __int16 v343 = 257;
        unsigned int v205 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v200, 32, v203, v204, (uint64_t)v342);
        v206 = (char *)this + *(void *)(*(void *)this - 24);
        __int16 v353 = 257;
        v207 = (llvm::IRBuilderBase *)(v206 + 40);
        uint64_t v208 = (llvm::Value *)llvm::ConstantInt::get();
        v209 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v207, v56, v208, (const llvm::Twine *)&v348);
        uint64_t v210 = llvm::ConstantInt::get();
        __int16 v343 = 257;
        char v211 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v207, 32, v209, v210, (uint64_t)v342);
        uint64_t v212 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        __int16 v353 = 257;
        int v213 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v212, v205, v211, (const llvm::Twine *)&v348);
        v214 = (llvm::CmpInst **)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 1);
        unint64_t v215 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        uint64_t v216 = llvm::ConstantInt::get();
        __int16 v353 = 257;
        uint64_t v217 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v215, 32, v214, v216, (uint64_t)&v348);
        uint64_t v218 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        uint64_t v219 = llvm::ConstantInt::get();
        __int16 v353 = 257;
        uint64_t v220 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v218, 32, v214, v219, (uint64_t)&v348);
        unint64_t v221 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        __int16 v353 = 257;
        llvm::IRBuilderBase::CreateAnd(v221, v217, v213, (const llvm::Twine *)&v348);
        v222 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        __int16 v353 = 257;
        llvm::IRBuilderBase::CreateAnd(v222, v220, v213, (const llvm::Twine *)&v348);
        uint64_t v223 = (llvm::Constant *)llvm::FixedVectorType::get();
        llvm::Constant::getNullValue(v223, v224);
        __int16 v353 = 257;
        llvm::IRBuilderBase::CreateSelect();
        __int16 v353 = 257;
        uint64_t v225 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
        uint64_t v226 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        __int16 v353 = 257;
        uint64_t v227 = llvm::IRBuilderBase::CreateAdd(v226, v74, v225, (const llvm::Twine *)&v348);
        __int16 v353 = 257;
        uint64_t v3 = v202;
        long long v74 = (llvm::Value *)v227;
        llvm::IRBuilderBase::CreateSelect();
        __int16 v353 = 257;
        __int16 v56 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      }
      uint64_t v228 = (char *)this + *(void *)(*(void *)this - 24);
      v229 = (llvm::IRBuilderBase *)(v228 + 40);
      v230 = AGCLLVMBuilder::splat((AGCLLVMBuilder *)(v228 + 32), 3, v198);
      __int16 v353 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v229, v74, v230, (const llvm::Twine *)&v348);
      v231 = (char *)this + *(void *)(*(void *)this - 24);
      v183 = (llvm::IRBuilderBase *)(v231 + 40);
      v232 = (AGCLLVMBuilder *)(v231 + 32);
      v233 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v186 = AGCLLVMBuilder::splat(v232, 3, v233);
      __int16 v353 = 257;
    }
    SDiv = (llvm::Value *)llvm::IRBuilderBase::CreateSDiv(v183, Mul, v186, (const llvm::Twine *)&v348);
    v235 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    __int16 v353 = 257;
    uint64_t v236 = llvm::IRBuilderBase::CreateAdd(v235, v56, SDiv, (const llvm::Twine *)&v348);
    goto LABEL_38;
  }
LABEL_36:
  if (v83 != 1) {
    goto LABEL_39;
  }
  v237 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v353 = 257;
  v238 = (llvm::IRBuilderBase *)(v237 + 40);
  v239 = (llvm::Value *)llvm::ConstantInt::get();
  v240 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v238, v56, v239, (const llvm::Twine *)&v348);
  v241 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v242 = llvm::ConstantInt::get();
  __int16 v353 = 257;
  v243 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v241, 33, v240, v242, (uint64_t)&v348);
  v244 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  v245 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getIsOuterEdgeDraw(this);
  __int16 v353 = 257;
  llvm::IRBuilderBase::CreateAnd(v244, v243, v245, (const llvm::Twine *)&v348);
  v246 = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 1);
  v247 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  v248 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v353 = 257;
  v249 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v247, v246, v248, (const llvm::Twine *)&v348);
  v250 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)this, 2, v249);
  v251 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getOneOverTessIndexTableEntry(this, v250);
  v252 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v353 = 257;
  v253 = (llvm::IRBuilderBase *)(v252 + 40);
  v254 = (llvm::Value *)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateInsertElement(v253, v56, v251, v254, (const llvm::Twine *)&v348);
  __int16 v353 = 257;
  uint64_t v236 = llvm::IRBuilderBase::CreateSelect();
LABEL_38:
  __int16 v56 = (llvm::Value *)v236;
LABEL_39:
  v255 = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 1);
  if (*((_DWORD *)this + 2513))
  {
    v256 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    v257 = (llvm::Value *)llvm::ConstantInt::get();
    v258 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v353 = 257;
    v259 = (llvm::IRBuilderBase *)(v258 + 40);
    v260 = (llvm::Value *)llvm::ConstantInt::get();
    v261 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v259, v56, v260, (const llvm::Twine *)&v348);
    __int16 v343 = 257;
    v262 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v256, v257, v261, (const llvm::Twine *)v342);
    v263 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v353 = 257;
    v264 = (llvm::IRBuilderBase *)(v263 + 40);
    v265 = (llvm::Value *)llvm::ConstantInt::get();
    v266 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v264, v56, v265, (const llvm::Twine *)&v348);
    v267 = (llvm::Value *)llvm::UndefValue::get();
    v268 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v353 = 257;
    v269 = (llvm::IRBuilderBase *)(v268 + 40);
    v270 = (llvm::Value *)llvm::ConstantInt::get();
    v271 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v269, v267, v262, v270, (const llvm::Twine *)&v348);
    v272 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v353 = 257;
    v273 = (llvm::IRBuilderBase *)(v272 + 40);
    v274 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::IRBuilderBase::CreateInsertElement(v273, v271, v266, v274, (const llvm::Twine *)&v348);
    v275 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    v276 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v353 = 257;
    v277 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v275, v255, v276, (const llvm::Twine *)&v348);
    v278 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    uint64_t v279 = llvm::ConstantInt::get();
    __int16 v353 = 257;
    llvm::IRBuilderBase::CreateICmp(v278, 33, v277, v279, (uint64_t)&v348);
    __int16 v353 = 257;
    v280 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    v281 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    llvm::ConstantInt::get();
    Splat = (llvm::Value *)llvm::ConstantDataVector::getSplat();
    __int16 v353 = 257;
    llvm::IRBuilderBase::CreateSub(v281, Splat, v280, (const llvm::Twine *)&v348);
    v283 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    v284 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v353 = 257;
    v285 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v283, v255, v284, (const llvm::Twine *)&v348);
    v286 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    uint64_t v287 = llvm::ConstantInt::get();
    __int16 v353 = 257;
    llvm::IRBuilderBase::CreateICmp(v286, 33, v285, v287, (uint64_t)&v348);
  }
  else
  {
    v346[0] = llvm::ConstantInt::get();
    v346[1] = llvm::ConstantInt::get();
    v346[2] = llvm::ConstantInt::get();
    v288 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    v289 = (llvm::Value *)llvm::ConstantVector::get();
    __int16 v353 = 257;
    llvm::IRBuilderBase::CreateShuffleVector(v288, v56, v56, v289, (const llvm::Twine *)&v348);
    v344[0] = llvm::ConstantInt::get();
    v344[1] = llvm::ConstantInt::get();
    v344[2] = llvm::ConstantInt::get();
    v290 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    v291 = (llvm::Value *)llvm::ConstantVector::get();
    __int16 v353 = 257;
    llvm::IRBuilderBase::CreateShuffleVector(v290, v56, v56, v291, (const llvm::Twine *)&v348);
    v292 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v353 = 257;
    v293 = (llvm::IRBuilderBase *)(v292 + 40);
    v294 = (llvm::Value *)llvm::ConstantInt::get();
    v295 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v293, v56, v294, (const llvm::Twine *)&v348);
    uint64_t v296 = llvm::ConstantInt::get();
    __int16 v343 = 257;
    v297 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v293, 32, v295, v296, (uint64_t)v342);
    v298 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v353 = 257;
    v299 = (llvm::IRBuilderBase *)(v298 + 40);
    v300 = (llvm::Value *)llvm::ConstantInt::get();
    v301 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v299, v56, v300, (const llvm::Twine *)&v348);
    uint64_t v302 = llvm::ConstantInt::get();
    __int16 v343 = 257;
    v303 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v299, 32, v301, v302, (uint64_t)v342);
    v304 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    __int16 v353 = 257;
    llvm::IRBuilderBase::CreateAnd(v304, v297, v303, (const llvm::Twine *)&v348);
    v305 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    uint64_t v306 = llvm::ConstantInt::get();
    __int16 v353 = 257;
    llvm::IRBuilderBase::CreateICmp(v305, 32, (llvm::CmpInst **)v255, v306, (uint64_t)&v348);
    v307 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    uint64_t v308 = llvm::ConstantInt::get();
    __int16 v353 = 257;
    llvm::IRBuilderBase::CreateICmp(v307, 32, (llvm::CmpInst **)v255, v308, (uint64_t)&v348);
    __int16 v353 = 257;
    llvm::IRBuilderBase::CreateSelect();
    __int16 v353 = 257;
    llvm::IRBuilderBase::CreateSelect();
  }
  __int16 v353 = 257;
  v309 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  if (*((_DWORD *)this + 2513))
  {
    v310 = (char *)this + *(void *)(*(void *)this - 24);
    v311 = (llvm::Type *)*((void *)v310 + 32);
    __int16 v353 = 257;
    uint64_t UIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(v310 + 40), v309, v311, (const llvm::Twine *)&v348);
    v313 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v314 = (uint64_t)(v313 + 40);
    v315 = (AGCLLVMBuilder *)(v313 + 32);
    v316 = (llvm::Value *)llvm::ConstantFP::get();
    v317 = v315;
    int v318 = 2;
  }
  else
  {
    if (*v3)
    {
      v319 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      v320 = (llvm::Value *)llvm::ConstantInt::get();
      v321 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      v322 = (llvm::IRBuilderBase *)(v321 + 40);
      v323 = (llvm::Value *)llvm::ConstantInt::get();
      v324 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v322, v309, v323, (const llvm::Twine *)&v348);
      v325 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v343 = 257;
      v326 = (llvm::IRBuilderBase *)(v325 + 40);
      v327 = (llvm::Value *)llvm::ConstantInt::get();
      v328 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v326, v309, v327, (const llvm::Twine *)v342);
      __int16 v347 = 257;
      v329 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v322, v324, v328, (const llvm::Twine *)v346);
      __int16 v345 = 257;
      v330 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v319, v320, v329, (const llvm::Twine *)v344);
      v331 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v353 = 257;
      v332 = (llvm::IRBuilderBase *)(v331 + 40);
      v333 = (llvm::Value *)llvm::ConstantInt::get();
      v309 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v332, v309, v330, v333, (const llvm::Twine *)&v348);
    }
    v334 = (char *)this + *(void *)(*(void *)this - 24);
    v335 = (llvm::Type *)*((void *)v334 + 37);
    __int16 v353 = 257;
    uint64_t UIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(v334 + 40), v309, v335, (const llvm::Twine *)&v348);
    v336 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v314 = (uint64_t)(v336 + 40);
    v337 = (AGCLLVMBuilder *)(v336 + 32);
    v316 = (llvm::Value *)llvm::ConstantFP::get();
    v317 = v337;
    int v318 = 3;
  }
  v338 = AGCLLVMBuilder::splat(v317, v318, v316);
  __int16 v353 = 257;
  return llvm::IRBuilderBase::CreateFMul(v314, UIToFP, (uint64_t)v338, (uint64_t)&v348);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getIsOuterEdgeDraw(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  TessConstant = (llvm::CmpInst **)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)0xC);
  uint64_t v3 = llvm::ConstantInt::get();
  __int16 v6 = 257;
  return llvm::IRBuilderBase::CreateICmp(v1, 33, TessConstant, v3, (uint64_t)v5);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  InternalPerPatchID = (uint64_t *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)a1, 0);
  if (!*(void *)(a1 + 10576))
  {
    uint64_t v7 = 4;
    if (*(_DWORD *)(a1 + 10052) == 1)
    {
      if (*(unsigned char *)(a1 + 10068)) {
        int v8 = 6;
      }
      else {
        int v8 = 0;
      }
      if (*(unsigned char *)(a1 + 10068)) {
        int v9 = 4;
      }
      else {
        int v9 = -1;
      }
      if (*(unsigned char *)(a1 + 10068)) {
        int v10 = 0;
      }
      else {
        int v10 = -1;
      }
      if (*(unsigned char *)(a1 + 10068)) {
        uint64_t v7 = 8;
      }
      else {
        uint64_t v7 = 2;
      }
    }
    else
    {
      int v10 = 0;
      int v9 = 3;
      int v8 = -1;
    }
    *(_DWORD *)(a1 + 10640) = v10;
    *(_DWORD *)(a1 + 10644) = v9;
    *(_DWORD *)(a1 + 10648) = v8;
    llvm::ArrayType::get(*(llvm::ArrayType **)(*(void *)(*(void *)a1 - 24) + a1 + 224), (llvm::Type *)v7);
    uint64_t v11 = llvm::StructType::get();
    __int16 v12 = (llvm::Type *)llvm::PointerType::get();
    v34[0] = "agc.internal_per_patch_data";
    __int16 v35 = 259;
    uint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)a1 - 24) + a1 + 400) + 824);
    unsigned int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 72))(v13);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v12, (const llvm::Twine *)v34, v14, 0, 5, 0);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 10560), (uint64_t)GlobalBufferBinding);
    *(void *)(a1 + 10584) = v11;
  }
  uint64_t v16 = *(void *)(*(void *)a1 - 24) + a1;
  __int16 v17 = *(llvm::Type ***)(a1 + 10576);
  __int16 v35 = 257;
  uint64_t v18 = AGCLLVMBuilder::tryDeducePointeeType(v17, v5);
  uint64_t AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v16 + 40), v18, (uint64_t)v17, 0, (uint64_t)v34);
  uint64_t v20 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
  uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v35 = 257;
  uint64_t Add = (uint64_t *)llvm::IRBuilderBase::CreateAdd(v20, a3, v21, (const llvm::Twine *)v34);
  uint64_t v23 = *(void *)(*(void *)a1 - 24) + a1;
  uint64_t v24 = *(void *)(a1 + 10584);
  v33[0] = InternalPerPatchID;
  v33[1] = (uint64_t *)llvm::ConstantInt::get();
  v33[2] = Add;
  __int16 v35 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v23 + 40, v24, AlignedLoad, v33, 3, (uint64_t)v34);
  uint64_t v26 = *(void *)(*(void *)a1 - 24) + a1;
  __int16 v35 = 257;
  uint64_t v28 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v27);
  uint64_t v29 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v26 + 40), v28, (uint64_t)GEP, 0, (uint64_t)v34);
  uint64_t v30 = *(void *)(*(void *)a1 - 24) + a1;
  uint64_t v31 = *(void *)(v30 + 232);
  __int16 v35 = 257;
  return llvm::IRBuilderBase::CreateCast(v30 + 40, 39, v29, v31, (uint64_t)v34);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getOneOverTessIndexTableEntry(AGCLLVMAGPVertexShaderPostTessellationSW *this, llvm::Value *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 1326))
  {
    int v4 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10592);
    uint64_t v5 = (char *)this + 10068;
    uint64_t v6 = 248;
    if (!*((unsigned char *)this + 10068)) {
      uint64_t v6 = 200;
    }
    uint64_t v7 = *(llvm::ArrayType **)((char *)this + *(void *)(*(void *)this - 24) + v6 + 32);
    uint64_t v8 = *((unsigned int *)this + 2514);
    if (v8 >= 4)
    {
      int v10 = 0;
      uint64_t v28 = v30;
      uint64_t v29 = 0x1000000000;
    }
    else
    {
      int v9 = 0;
      int v10 = (llvm::Type *)dword_1CADD68B0[v8];
      uint64_t v24 = v7;
      uint64_t v28 = v30;
      uint64_t v29 = 0x1000000000;
      int v11 = -1;
      do
      {
        uint64_t v12 = llvm::ConstantInt::get();
        uint64_t v13 = v12;
        if (*v5)
        {
          v26[0] = v12;
          v26[1] = llvm::ConstantInt::get();
          uint64_t v13 = llvm::ConstantVector::get();
        }
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v28, v13);
        ++v9;
        v11 += 2;
      }
      while (v10 != v9);
      int v4 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10592);
      uint64_t v7 = v24;
    }
    llvm::ArrayType::get(v7, v10);
    llvm::ConstantArray::get();
    uint64_t v14 = llvm::User::operator new((llvm::User *)0x58);
    v26[0] = "agc.one_over_inner_tess_table";
    __int16 v27 = 259;
    uint64_t v15 = llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v15 + 80) |= 1u;
    llvm::ValueHandleBase::operator=(v4, v14);
    if (v28 != v30) {
      free(v28);
    }
  }
  uint64_t v16 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  __int16 v17 = (llvm::Type **)*((void *)this + 1326);
  v25[0] = (uint64_t *)llvm::ConstantInt::get();
  v25[1] = (uint64_t *)a2;
  v30[8] = 257;
  uint64_t v19 = AGCLLVMBuilder::tryDeducePointeeType(v17, v18);
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v16 + 5), (uint64_t)v19, (uint64_t *)v17, v25, 2, (uint64_t)&v28);
  __int16 v27 = 257;
  uint64_t v22 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v21);
  return llvm::IRBuilderBase::CreateAlignedLoad(v16 + 5, v22, (uint64_t)GEP, 0, (uint64_t)v26);
}

uint64_t llvm::IRBuilderBase::CreateSDiv(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 9) + 112))(*((void *)this + 9));
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t llvm::IRBuilderBase::CreateXor(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6 = llvm::IRBuilderBase::foldConstant((uint64_t)this, 30, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  if (!v6)
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

const char *AGCLLVMAGPVertexShaderPostTessellationSW::dumpType(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  return "post-tessellation-vertex-sw";
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::initCompile(llvm::Function **this)
{
  uint64_t inited = AGCLLVMAGPVertexShaderPostTessellation::initCompile(this);
  if (inited)
  {
    uint64_t v3 = this[22];
    uint64_t v4 = *((void *)v3 + 10);
    if (v4) {
      uint64_t v5 = (llvm::BasicBlock *)(v4 - 24);
    }
    else {
      uint64_t v5 = 0;
    }
    if (*((_WORD *)v3 + 9))
    {
      llvm::Function::BuildLazyArguments(this[22]);
      BOOL v7 = this[22];
      uint64_t v6 = *((void *)v3 + 11);
      if (*((_WORD *)v7 + 9)) {
        llvm::Function::BuildLazyArguments(this[22]);
      }
      uint64_t v3 = v7;
    }
    else
    {
      uint64_t v6 = *((void *)v3 + 11);
    }
    for (uint64_t i = *((void *)v3 + 11) + 40 * *((void *)v3 + 12); v6 != i; v6 += 40)
    {
      if (*(void *)(v6 + 8))
      {
        int v9 = (char **)((char *)this + *((void *)*this - 3) + 40);
        uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v5);
        llvm::IRBuilderBase::SetInsertPoint(v9, (char *)v5, FirstInsertionPt);
        uint64_t v11 = *((void *)this[11] + *(unsigned int *)(v6 + 32));
        uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8));
        if (v13 == 17
          && *(void *)String == 0x657361622E726961
          && *(void *)(String + 8) == 0x636E6174736E695FLL
          && *(unsigned char *)(String + 16) == 101)
        {
          uint64_t v16 = (llvm::Function **)((char *)this + *((void *)*this - 3) + 32);
          TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)4);
          AGCLLVMBuilder::truncateToSmall(v16, TessConstant, *(llvm::Type **)v6);
          llvm::Value::replaceAllUsesWith();
        }
      }
    }
  }
  return inited;
}

void virtual thunk to'AGCLLVMDriverTessellationShader::getCompilationKeyDescription(AGCLLVMDriverTessellationShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMDriverTessellationShader::getCompilationKeyDescription(AGCLLVMDriverTessellationShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (_DWORD *)*((void *)this + 1261);
  if (v3)
  {
    std::string::basic_string[abi:nn180100]<0>(v13, "AGCTessellationDriverState");
    std::string::basic_string[abi:nn180100]<0>(v11, "patch_type");
    _agcFieldString<char const*>(&v15, (const void **)v11, _agcTessellationPatchTypeStrings[*v3 & 3]);
    std::string::basic_string[abi:nn180100]<0>(v9, "partition_mode");
    _agcFieldString<char const*>(&v16, (const void **)v9, _agcTessellationPartitionModeStrings[((unint64_t)*v3 >> 2) & 7]);
    std::string::basic_string[abi:nn180100]<0>(v7, "step_function");
    _agcFieldString<char const*>(&v17, (const void **)v7, _agcTessellationStepFunctionStrings[*v3 >> 5]);
    std::string::basic_string[abi:nn180100]<0>(__p, "unused");
    _agcFieldString<unsigned int>(&v18, (const void **)__p, *v3 >> 8);
    _agcGroupWithHeader(a2, (uint64_t)v13, (uint64_t)&v15, 4);
    for (uint64_t i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v18.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v18.__r_.__value_.__l.__data_ + i * 8));
      }
    }
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(a2, "");
  }
}

uint64_t virtual thunk to'AGCLLVMDriverTessellationShader::getShaderType(AGCLLVMDriverTessellationShader *this)
{
  return 28;
}

void virtual thunk to'AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(AGCLLVMDriverTessellationShader *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  uint64_t v2 = (AGCLLVMObject *)(v1 + 10128);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

void AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(AGCLLVMDriverTessellationShader *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[16];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[17];
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  uint64_t v5 = a2[2];
  *(void *)this = v5;
  *(void *)((char *)this + *(void *)(v5 - 24)) = a2[12];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[13];
  char v6 = (char *)*((void *)this + 1249);
  if (v6 != (char *)this + 10008) {
    free(v6);
  }
  BOOL v7 = (char *)*((void *)this + 1183);
  if (v7 != (char *)this + 9480) {
    free(v7);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, a2 + 3);
}

uint64_t llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 33));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t AGCLLVMDriverTessellationShader::getShaderType(AGCLLVMDriverTessellationShader *this)
{
  return 28;
}

uint64_t AGCLLVMDriverTessellationShader::setupShaderInputs(AGCLLVMDriverTessellationShader *this)
{
  uint64_t v2 = *((unsigned int *)this + 2368);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 1183);
    uint64_t v4 = v3 + 32 * v2;
    uint64_t v5 = (uint64_t *)*((void *)this + 1262);
    uint64_t v6 = *((unsigned int *)this + 2526);
    BOOL v7 = &v5[v6];
    do
    {
      uint64_t i = v5;
      if (v6)
      {
        for (uint64_t i = v5; !*i || *i == -8; ++i)
          ;
      }
      int v10 = *(_DWORD *)(v3 + 4);
      if (i != v7)
      {
        uint64_t v11 = *i;
        while (*(_DWORD *)(v11 + 8) != v10)
        {
          do
          {
            uint64_t v12 = i[1];
            ++i;
            uint64_t v11 = v12;
            if (v12) {
              BOOL v13 = v11 == -8;
            }
            else {
              BOOL v13 = 1;
            }
          }
          while (v13);
          if (i == v7) {
            goto LABEL_21;
          }
        }
        int v10 = *(_DWORD *)(v11 + 16);
      }
LABEL_21:
      *(_DWORD *)(v3 + 4) = v10;
      v3 += 32;
    }
    while (v3 != v4);
  }
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 10096);
  return AGCLLVMAGPVertexShader::setupShaderInputs(this);
}

uint64_t AGCLLVMDriverTessellationShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2 = AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(this);
  if (v2)
  {
    uint64_t v3 = *(uint64_t *)((char *)this + *((void *)*this - 3) + 400);
    (*(void (**)(uint64_t, llvm::Function *))(*(void *)v3 + 408))(v3, this[21]);
  }
  return v2;
}

void AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(AGCLLVMDriverTessellationShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
}

const char *virtual thunk to'AGCLLVMDriverVDMNOPDBGShader::dumpType(AGCLLVMDriverVDMNOPDBGShader *this)
{
  return "vdmnopdbg-driver";
}

void virtual thunk to'AGCLLVMDriverVDMNOPDBGShader::~AGCLLVMDriverVDMNOPDBGShader(AGCLLVMDriverVDMNOPDBGShader *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader((AGCLLVMDriverTessellationShader *)v1, (uint64_t *)off_1F257E220);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader((AGCLLVMDriverVDMNOPDBGShader *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)off_1F257E220);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 10128);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *AGCLLVMDriverVDMNOPDBGShader::dumpType(AGCLLVMDriverVDMNOPDBGShader *this)
{
  return "vdmnopdbg-driver";
}

uint64_t AGCLLVMDriverVDMNOPDBGShader::setupShaderWrapper(llvm::Function **this)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  uint64_t result = AGCLLVMDriverTessellationShader::setupShaderWrapper(this);
  if (result)
  {
    uint64_t result = llvm::Module::getFunction();
    if (result)
    {
      uint64_t v3 = (llvm::Function *)result;
      uint64_t v4 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this + *((void *)*this - 3) + 32, (uint64_t)"llvm.agx1.nop.dbg", 17, *(uint64_t *)((char *)this + *((void *)*this - 3) + 176), *(uint64_t *)((char *)this + *((void *)*this - 3) + 224));
      v11[0] = llvm::ConstantInt::get();
      uint64_t v5 = *((void *)v3 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = *(void *)(v5 + 8);
          BOOL v7 = *(llvm::Instruction **)(v5 + 24);
          llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)this + *((void *)*this - 3) + 40), v7);
          char v8 = (char *)this + *((void *)*this - 3) + 40;
          __int16 v10 = 257;
          llvm::IRBuilderBase::CreateCall((uint64_t)v8, *(void *)(v4 + 24), v4, (uint64_t)v11, 1, (uint64_t)v9);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v7);
          uint64_t v5 = v6;
        }
        while (v6);
      }
      llvm::Function::eraseFromParent(v3);
      return 1;
    }
  }
  return result;
}

void AGCLLVMDriverVDMNOPDBGShader::~AGCLLVMDriverVDMNOPDBGShader(AGCLLVMDriverVDMNOPDBGShader *this)
{
  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(this, (uint64_t *)off_1F257E220);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(this, (uint64_t *)off_1F257E220);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
}

uint64_t virtual thunk to'AGCLLVMDriverExecuteIndirectESLGenerationShader::getShaderType(AGCLLVMDriverExecuteIndirectESLGenerationShader *this)
{
  return 27;
}

const char *virtual thunk to'AGCLLVMDriverExecuteIndirectESLGenerationShader::dumpType(AGCLLVMDriverExecuteIndirectESLGenerationShader *this)
{
  return "graphics-execute-indirect-esl-driver";
}

void virtual thunk to'AGCLLVMDriverExecuteIndirectESLGenerationShader::~AGCLLVMDriverExecuteIndirectESLGenerationShader(AGCLLVMDriverExecuteIndirectESLGenerationShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F257E2D8;
  v1[1265] = &unk_1F257E630;
  v1[1269] = &unk_1F257E720;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1261));
  *uint64_t v1 = off_1F2588140;
  v1[1265] = &off_1F2588490;
  v1[1269] = &off_1F2588580;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257E740);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1265));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F257E2D8;
  v1[1265] = &unk_1F257E630;
  v1[1269] = &unk_1F257E720;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1261));
  *uint64_t v1 = off_1F2588140;
  v1[1265] = &off_1F2588490;
  v1[1269] = &off_1F2588580;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257E740);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1265));
}

uint64_t AGCLLVMDriverExecuteIndirectESLGenerationShader::getShaderType(AGCLLVMDriverExecuteIndirectESLGenerationShader *this)
{
  return 27;
}

const char *AGCLLVMDriverExecuteIndirectESLGenerationShader::dumpType(AGCLLVMDriverExecuteIndirectESLGenerationShader *this)
{
  return "graphics-execute-indirect-esl-driver";
}

uint64_t AGCLLVMDriverExecuteIndirectESLGenerationShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2 = AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(this);
  if (v2)
  {
    uint64_t v3 = *(uint64_t *)((char *)this + *((void *)*this - 3) + 400);
    (*(void (**)(uint64_t, llvm::Function *))(*(void *)v3 + 408))(v3, this[21]);
  }
  return v2;
}

void AGCLLVMDriverExecuteIndirectESLGenerationShader::~AGCLLVMDriverExecuteIndirectESLGenerationShader(AGCLLVMDriverExecuteIndirectESLGenerationShader *this)
{
  *(void *)this = &unk_1F257E2D8;
  uint64_t v2 = (AGCLLVMDriverExecuteIndirectESLGenerationShader *)((char *)this + 10120);
  *((void *)this + 1265) = &unk_1F257E630;
  *((void *)this + 1269) = &unk_1F257E720;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10088);
  *(void *)this = off_1F2588140;
  *((void *)this + 1265) = &off_1F2588490;
  *((void *)this + 1269) = &off_1F2588580;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257E740);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(void *)this = &unk_1F257E2D8;
  uint64_t v2 = (AGCLLVMDriverExecuteIndirectESLGenerationShader *)((char *)this + 10120);
  *((void *)this + 1265) = &unk_1F257E630;
  *((void *)this + 1269) = &unk_1F257E720;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10088);
  *(void *)this = off_1F2588140;
  *((void *)this + 1265) = &off_1F2588490;
  *((void *)this + 1269) = &off_1F2588580;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257E740);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::getShaderType(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this)
{
  return 27;
}

const char *virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this)
{
  return "graphics-execute-indirect-range-driver";
}

void virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::~AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F257E7D0;
  v1[1265] = &unk_1F257EB28;
  v1[1269] = &unk_1F257EC18;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1261));
  *uint64_t v1 = off_1F25895D0;
  v1[1265] = &off_1F2589920;
  v1[1269] = &off_1F2589A10;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257EC38);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1265));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F257E7D0;
  v1[1265] = &unk_1F257EB28;
  v1[1269] = &unk_1F257EC18;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1261));
  *uint64_t v1 = off_1F25895D0;
  v1[1265] = &off_1F2589920;
  v1[1269] = &off_1F2589A10;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257EC38);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1265));
}

uint64_t AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::getShaderType(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this)
{
  return 27;
}

const char *AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this)
{
  return "graphics-execute-indirect-range-driver";
}

uint64_t AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2 = AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(this);
  if (v2)
  {
    uint64_t v3 = *(uint64_t *)((char *)this + *((void *)*this - 3) + 400);
    (*(void (**)(uint64_t, llvm::Function *))(*(void *)v3 + 408))(v3, this[21]);
  }
  return v2;
}

void AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::~AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this)
{
  *(void *)this = &unk_1F257E7D0;
  uint64_t v2 = (AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *)((char *)this + 10120);
  *((void *)this + 1265) = &unk_1F257EB28;
  *((void *)this + 1269) = &unk_1F257EC18;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10088);
  *(void *)this = off_1F25895D0;
  *((void *)this + 1265) = &off_1F2589920;
  *((void *)this + 1269) = &off_1F2589A10;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257EC38);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(void *)this = &unk_1F257E7D0;
  uint64_t v2 = (AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *)((char *)this + 10120);
  *((void *)this + 1265) = &unk_1F257EB28;
  *((void *)this + 1269) = &unk_1F257EC18;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10088);
  *(void *)this = off_1F25895D0;
  *((void *)this + 1265) = &off_1F2589920;
  *((void *)this + 1269) = &off_1F2589A10;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257EC38);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t virtual thunk to'AGCLLVMDriverVRRPatchVertexShader::getShaderType(AGCLLVMDriverVRRPatchVertexShader *this)
{
  return 31;
}

const char *virtual thunk to'AGCLLVMDriverVRRPatchVertexShader::dumpType(AGCLLVMDriverVRRPatchVertexShader *this)
{
  return "vrr-patchup-vertex-driver";
}

void virtual thunk to'AGCLLVMDriverVRRPatchVertexShader::~AGCLLVMDriverVRRPatchVertexShader(AGCLLVMDriverVRRPatchVertexShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F258AA60;
  v1[1261] = &off_1F258ADB0;
  v1[1265] = &off_1F258AEA0;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257F130);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F258AA60;
  v1[1261] = &off_1F258ADB0;
  v1[1265] = &off_1F258AEA0;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257F130);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
}

uint64_t AGCLLVMDriverVRRPatchVertexShader::getShaderType(AGCLLVMDriverVRRPatchVertexShader *this)
{
  return 31;
}

const char *AGCLLVMDriverVRRPatchVertexShader::dumpType(AGCLLVMDriverVRRPatchVertexShader *this)
{
  return "vrr-patchup-vertex-driver";
}

uint64_t AGCLLVMDriverVRRPatchVertexShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2 = AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(this);
  if (v2)
  {
    uint64_t v3 = *(uint64_t *)((char *)this + *((void *)*this - 3) + 400);
    (*(void (**)(uint64_t, llvm::Function *))(*(void *)v3 + 408))(v3, this[21]);
  }
  return v2;
}

void AGCLLVMDriverVRRPatchVertexShader::~AGCLLVMDriverVRRPatchVertexShader(AGCLLVMDriverVRRPatchVertexShader *this)
{
  *(void *)this = off_1F258AA60;
  uint64_t v2 = (AGCLLVMDriverVRRPatchVertexShader *)((char *)this + 10088);
  *((void *)this + 1261) = &off_1F258ADB0;
  *((void *)this + 1265) = &off_1F258AEA0;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257F130);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(void *)this = off_1F258AA60;
  uint64_t v2 = (AGCLLVMDriverVRRPatchVertexShader *)((char *)this + 10088);
  *((void *)this + 1261) = &off_1F258ADB0;
  *((void *)this + 1265) = &off_1F258AEA0;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257F130);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t virtual thunk to'AGCLLVMDriverGPUGatherVertexShader::getShaderType(AGCLLVMDriverGPUGatherVertexShader *this)
{
  return 23;
}

const char *virtual thunk to'AGCLLVMDriverGPUGatherVertexShader::dumpType(AGCLLVMDriverGPUGatherVertexShader *this)
{
  return "gpu-gather-vertex-driver";
}

void virtual thunk to'AGCLLVMDriverGPUGatherVertexShader::~AGCLLVMDriverGPUGatherVertexShader(AGCLLVMDriverGPUGatherVertexShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F258BEF0;
  v1[1261] = &off_1F258C240;
  v1[1265] = &off_1F258C330;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257F628);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F258BEF0;
  v1[1261] = &off_1F258C240;
  v1[1265] = &off_1F258C330;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257F628);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
}

uint64_t AGCLLVMDriverGPUGatherVertexShader::getShaderType(AGCLLVMDriverGPUGatherVertexShader *this)
{
  return 23;
}

const char *AGCLLVMDriverGPUGatherVertexShader::dumpType(AGCLLVMDriverGPUGatherVertexShader *this)
{
  return "gpu-gather-vertex-driver";
}

uint64_t AGCLLVMDriverGPUGatherVertexShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2 = AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(this);
  if (v2)
  {
    uint64_t v3 = *(uint64_t *)((char *)this + *((void *)*this - 3) + 400);
    (*(void (**)(uint64_t, llvm::Function *))(*(void *)v3 + 408))(v3, this[21]);
  }
  return v2;
}

void AGCLLVMDriverGPUGatherVertexShader::~AGCLLVMDriverGPUGatherVertexShader(AGCLLVMDriverGPUGatherVertexShader *this)
{
  *(void *)this = off_1F258BEF0;
  uint64_t v2 = (AGCLLVMDriverGPUGatherVertexShader *)((char *)this + 10088);
  *((void *)this + 1261) = &off_1F258C240;
  *((void *)this + 1265) = &off_1F258C330;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257F628);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(void *)this = off_1F258BEF0;
  uint64_t v2 = (AGCLLVMDriverGPUGatherVertexShader *)((char *)this + 10088);
  *((void *)this + 1261) = &off_1F258C240;
  *((void *)this + 1265) = &off_1F258C330;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257F628);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t virtual thunk to'AGCLLVMDriverFastClearVertexShaders::getShaderType(AGCLLVMDriverFastClearVertexShaders *this)
{
  return 27;
}

const char *virtual thunk to'AGCLLVMDriverFastClearVertexShaders::dumpType(AGCLLVMDriverFastClearVertexShaders *this)
{
  return "blit-fast-clear-vertex-driver";
}

void virtual thunk to'AGCLLVMDriverFastClearVertexShaders::~AGCLLVMDriverFastClearVertexShaders(AGCLLVMDriverFastClearVertexShaders *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F258D380;
  v1[1261] = &off_1F258D6D0;
  v1[1265] = &off_1F258D7C0;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257FB20);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F258D380;
  v1[1261] = &off_1F258D6D0;
  v1[1265] = &off_1F258D7C0;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F257FB20);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
}

uint64_t AGCLLVMDriverFastClearVertexShaders::getShaderType(AGCLLVMDriverFastClearVertexShaders *this)
{
  return 27;
}

const char *AGCLLVMDriverFastClearVertexShaders::dumpType(AGCLLVMDriverFastClearVertexShaders *this)
{
  return "blit-fast-clear-vertex-driver";
}

void AGCLLVMDriverFastClearVertexShaders::~AGCLLVMDriverFastClearVertexShaders(AGCLLVMDriverFastClearVertexShaders *this)
{
  *(void *)this = off_1F258D380;
  uint64_t v2 = (AGCLLVMDriverFastClearVertexShaders *)((char *)this + 10088);
  *((void *)this + 1261) = &off_1F258D6D0;
  *((void *)this + 1265) = &off_1F258D7C0;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257FB20);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(void *)this = off_1F258D380;
  uint64_t v2 = (AGCLLVMDriverFastClearVertexShaders *)((char *)this + 10088);
  *((void *)this + 1261) = &off_1F258D6D0;
  *((void *)this + 1265) = &off_1F258D7C0;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F257FB20);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t virtual thunk to'AGCLLVMDriverPDSPatchUpVertexShader::getShaderType(AGCLLVMDriverPDSPatchUpVertexShader *this)
{
  return 25;
}

const char *virtual thunk to'AGCLLVMDriverPDSPatchUpVertexShader::dumpType(AGCLLVMDriverPDSPatchUpVertexShader *this)
{
  return "pds-patchup-vertex-driver";
}

void virtual thunk to'AGCLLVMDriverPDSPatchUpVertexShader::~AGCLLVMDriverPDSPatchUpVertexShader(AGCLLVMDriverPDSPatchUpVertexShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F258E810;
  v1[1261] = &off_1F258EB60;
  v1[1265] = &off_1F258EC50;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F2580018);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F258E810;
  v1[1261] = &off_1F258EB60;
  v1[1265] = &off_1F258EC50;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F2580018);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
}

uint64_t AGCLLVMDriverPDSPatchUpVertexShader::getShaderType(AGCLLVMDriverPDSPatchUpVertexShader *this)
{
  return 25;
}

const char *AGCLLVMDriverPDSPatchUpVertexShader::dumpType(AGCLLVMDriverPDSPatchUpVertexShader *this)
{
  return "pds-patchup-vertex-driver";
}

uint64_t AGCLLVMDriverPDSPatchUpVertexShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2 = AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(this);
  if (v2)
  {
    uint64_t v3 = *(uint64_t *)((char *)this + *((void *)*this - 3) + 400);
    (*(void (**)(uint64_t, llvm::Function *))(*(void *)v3 + 408))(v3, this[21]);
  }
  return v2;
}

void AGCLLVMDriverPDSPatchUpVertexShader::~AGCLLVMDriverPDSPatchUpVertexShader(AGCLLVMDriverPDSPatchUpVertexShader *this)
{
  *(void *)this = off_1F258E810;
  uint64_t v2 = (AGCLLVMDriverPDSPatchUpVertexShader *)((char *)this + 10088);
  *((void *)this + 1261) = &off_1F258EB60;
  *((void *)this + 1265) = &off_1F258EC50;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F2580018);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(void *)this = off_1F258E810;
  uint64_t v2 = (AGCLLVMDriverPDSPatchUpVertexShader *)((char *)this + 10088);
  *((void *)this + 1261) = &off_1F258EB60;
  *((void *)this + 1265) = &off_1F258EC50;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F2580018);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

void AGCLLVMAGPVertexShaderGen4::~AGCLLVMAGPVertexShaderGen4(AGCLLVMAGPVertexShaderGen4 *this)
{
  *(void *)this = off_1F258FCA0;
  uint64_t v2 = (AGCLLVMAGPVertexShaderGen4 *)((char *)this + 10088);
  *((void *)this + 1261) = &off_1F258FFF0;
  *((void *)this + 1265) = &off_1F25900E0;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F2580510);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(void *)this = off_1F258FCA0;
  uint64_t v2 = (AGCLLVMAGPVertexShaderGen4 *)((char *)this + 10088);
  *((void *)this + 1261) = &off_1F258FFF0;
  *((void *)this + 1265) = &off_1F25900E0;
  uint64_t v3 = (char *)*((void *)this + 1249);
  if (v3 != (char *)this + 10008) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 1183);
  if (v4 != (char *)this + 9480) {
    free(v4);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F2580510);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellation::AGCLLVMAGPVertexShaderPostTessellation(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  int v9 = (void *)AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader(a1, a2 + 1, a3, a4, a5, a6);
  uint64_t v10 = *a2;
  *int v9 = *a2;
  *(void *)(a1 + *(void *)(v10 - 24)) = a2[13];
  *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 32) = a2[14];
  *(_DWORD *)(a1 + 10056) = (*(_DWORD *)(a4 + 16) >> 8) & 3;
  *(_DWORD *)(a1 + 10060) = (*(_DWORD *)(a4 + 16) >> 10) & 3;
  uint64_t v11 = -360;
  do
  {
    uint64_t v12 = a1 + v11;
    *(void *)(v12 + 10432) = 4;
    *(_OWORD *)(v12 + 10440) = 0uLL;
    v11 += 24;
  }
  while (v11);
  *(void *)(a1 + 10512) = 4;
  *(void *)(a1 + 10528) = 0;
  *(void *)(a1 + 10520) = 0;
  uint64_t Operand = llvm::NamedMDNode::getOperand(*(llvm::NamedMDNode **)(a1 + 64));
  uint64_t v14 = *(void *)(Operand - 8 * *(unsigned int *)(Operand + 8) + 24);
  uint64_t String = (_DWORD *)llvm::MDString::getString(*(llvm::MDString **)(v14 - 8 * *(unsigned int *)(v14 + 8) + 8));
  BOOL v16 = 0;
  if (v17 == 4) {
    BOOL v16 = *String == 1684108657;
  }
  *(_DWORD *)(a1 + 10052) = v16;
  *(unsigned char *)(a1 + 10068) = (*(_DWORD *)(a1 + 10056) & 0xFFFFFFFE) == 2;
  uint64_t v18 = *(void *)a1;
  *(void *)(a1 + 10432) = *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 200);
  *(void *)(a1 + 10440) = *(void *)(*(void *)(v18 - 24) + a1 + 184);
  *(void *)(a1 + 10448) = *(void *)(*(void *)(v18 - 24) + a1 + 208);
  *(void *)(a1 + 10456) = *(void *)(*(void *)(v18 - 24) + a1 + 232);
  *(void *)(a1 + 10464) = *(void *)(*(void *)(v18 - 24) + a1 + 224);
  *(void *)(a1 + 10472) = *(void *)(*(void *)(v18 - 24) + a1 + 216);
  *(void *)(a1 + 10488) = *(void *)(*(void *)(v18 - 24) + a1 + 232);
  *(void *)(a1 + 10496) = *(void *)(*(void *)(v18 - 24) + a1 + 224);
  *(void *)(a1 + 10504) = *(void *)(*(void *)(v18 - 24) + a1 + 216);
  return a1;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationHW::AGCLLVMAGPVertexShaderPostTessellationHW(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 10568), a2, *a3);
  uint64_t result = AGCLLVMAGPVertexShaderPostTessellation::AGCLLVMAGPVertexShaderPostTessellation(a1, (uint64_t *)off_1F257B9C8, (uint64_t)a3, a4, a5, a6);
  *(void *)a1 = &unk_1F257B550;
  *(void *)(a1 + 10568) = &unk_1F257B8C8;
  *(void *)(a1 + 10600) = &unk_1F257B9B8;
  *(void *)(a1 + 10536) = 4;
  *(void *)(a1 + 10552) = 0;
  *(void *)(a1 + 10544) = 0;
  *(unsigned char *)(a1 + 10560) = 0;
  *(_DWORD *)(a1 + 10564) = (*(_DWORD *)(a4 + 16) >> 22) & 1;
  *(_DWORD *)(a1 + 10064) = 2;
  return result;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::AGCLLVMAGPVertexShaderPostTessellationSW(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 10656), a2, *a3);
  uint64_t result = AGCLLVMAGPVertexShaderPostTessellation::AGCLLVMAGPVertexShaderPostTessellation(a1, (uint64_t *)off_1F257BEE0, (uint64_t)a3, a4, a5, a6);
  *(void *)a1 = &unk_1F257BA68;
  *(void *)(a1 + 10656) = &unk_1F257BDE0;
  *(void *)(a1 + 10688) = &unk_1F257BED0;
  *(void *)(a1 + 10536) = 4;
  *(void *)(a1 + 10552) = 0;
  *(void *)(a1 + 10544) = 0;
  *(void *)(a1 + 10560) = 4;
  *(void *)(a1 + 10568) = 0;
  *(void *)(a1 + 10584) = 0;
  *(void *)(a1 + 10576) = 0;
  *(void *)(a1 + 10592) = 4;
  *(void *)(a1 + 10608) = 0;
  *(void *)(a1 + 10600) = 0;
  *(void *)(a1 + 10616) = 4;
  *(void *)(a1 + 10624) = 0;
  *(void *)(a1 + 10640) = 0;
  *(void *)(a1 + 10632) = 0;
  *(_DWORD *)(a1 + 10648) = 0;
  *(_DWORD *)(a1 + 10064) = 1;
  return result;
}

uint64_t AGCLLVMDriverTessellationShader::AGCLLVMDriverTessellationShader(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  {
    uint64_t v10 = a3;
    a3 = v10;
    if (v9)
    {
      AGCLLVMDriverTessellationShader::getDefaultCS(void)::defaultCS = 0;
      *(void *)algn_1EA613728 = 0;
      qword_1EA613730 = 0;
      a3 = v10;
    }
  }
  AGCLLVMAGPVertexShaderRegular::AGCLLVMAGPVertexShaderRegular(a1, a2 + 1, a3, (uint64_t)&AGCLLVMDriverTessellationShader::getDefaultCS(void)::defaultCS, 0, 0);
  uint64_t v7 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v7 - 24)) = a2[16];
  *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 32) = a2[17];
  *(void *)(a1 + 10088) = a4;
  *(_OWORD *)(a1 + 10096) = 0u;
  *(_DWORD *)(a1 + 10112) = 0;
  *(_DWORD *)(a1 + 10116) = 32;
  return a1;
}

uint64_t *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      uint64_t v8 = i[1];
      ++i;
      uint64_t v7 = v8;
    }
    return i;
  }
  uint64_t v10 = MEMORY[0x1CB79F270](a3 + 33, 8);
  uint64_t v11 = v10;
  uint64_t v12 = v10 + 32;
  if (a3) {
    memcpy((void *)(v10 + 32), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  *(void *)uint64_t v11 = a3;
  *(_DWORD *)(v11 + 24) = 0;
  *uint64_t i = v11;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

const char *virtual thunk to'AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader::dumpType(AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader *this)
{
  return "tessellation-non-bucketed-emit-draw-commands-driver";
}

void virtual thunk to'AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader::~AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader(AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader((AGCLLVMDriverTessellationShader *)v1, (uint64_t *)off_1F257C8D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader((AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)off_1F257C8D0);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 10128);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader::dumpType(AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader *this)
{
  return "tessellation-non-bucketed-emit-draw-commands-driver";
}

void AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader::~AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader(AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader *this)
{
  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(this, (uint64_t *)off_1F257C8D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(this, (uint64_t *)off_1F257C8D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
}

const char *virtual thunk to'AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader::dumpType(AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader *this)
{
  return "bucketed-tessellation-driver-emit-draw-commands-driver";
}

void virtual thunk to'AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader::~AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader(AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader((AGCLLVMDriverTessellationShader *)v1, (uint64_t *)off_1F257CDE0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader((AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)off_1F257CDE0);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 10128);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader::dumpType(AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader *this)
{
  return "bucketed-tessellation-driver-emit-draw-commands-driver";
}

void AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader::~AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader(AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader *this)
{
  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(this, (uint64_t *)off_1F257CDE0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(this, (uint64_t *)off_1F257CDE0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
}

const char *virtual thunk to'AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader::dumpType(AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader *this)
{
  return "bucketed-tessellation-compute-instance-counts-driver";
}

void virtual thunk to'AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader::~AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader(AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader((AGCLLVMDriverTessellationShader *)v1, (uint64_t *)off_1F257D2F0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader((AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)off_1F257D2F0);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 10128);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader::dumpType(AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader *this)
{
  return "bucketed-tessellation-compute-instance-counts-driver";
}

void AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader::~AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader(AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader *this)
{
  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(this, (uint64_t *)off_1F257D2F0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(this, (uint64_t *)off_1F257D2F0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
}

const char *virtual thunk to'AGCLLVMDriverTessellationBucketedSumInstanceCountsShader::dumpType(AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *this)
{
  return "bucketed-tessellation-driver-sum-instance-counts-driver";
}

void virtual thunk to'AGCLLVMDriverTessellationBucketedSumInstanceCountsShader::~AGCLLVMDriverTessellationBucketedSumInstanceCountsShader(AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader((AGCLLVMDriverTessellationShader *)v1, (uint64_t *)off_1F257D800);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader((AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)off_1F257D800);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 10128);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *AGCLLVMDriverTessellationBucketedSumInstanceCountsShader::dumpType(AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *this)
{
  return "bucketed-tessellation-driver-sum-instance-counts-driver";
}

void AGCLLVMDriverTessellationBucketedSumInstanceCountsShader::~AGCLLVMDriverTessellationBucketedSumInstanceCountsShader(AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *this)
{
  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(this, (uint64_t *)off_1F257D800);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(this, (uint64_t *)off_1F257D800);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
}

const char *virtual thunk to'AGCLLVMDriverTessellationClearInstanceCountsShader::dumpType(AGCLLVMDriverTessellationClearInstanceCountsShader *this)
{
  return "bucketed-clear-instance-counts-driver";
}

void virtual thunk to'AGCLLVMDriverTessellationClearInstanceCountsShader::~AGCLLVMDriverTessellationClearInstanceCountsShader(AGCLLVMDriverTessellationClearInstanceCountsShader *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader((AGCLLVMDriverTessellationShader *)v1, (uint64_t *)off_1F257DD10);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader((AGCLLVMDriverTessellationClearInstanceCountsShader *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)off_1F257DD10);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 10128);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *AGCLLVMDriverTessellationClearInstanceCountsShader::dumpType(AGCLLVMDriverTessellationClearInstanceCountsShader *this)
{
  return "bucketed-clear-instance-counts-driver";
}

void AGCLLVMDriverTessellationClearInstanceCountsShader::~AGCLLVMDriverTessellationClearInstanceCountsShader(AGCLLVMDriverTessellationClearInstanceCountsShader *this)
{
  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(this, (uint64_t *)off_1F257DD10);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(this, (uint64_t *)off_1F257DD10);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 10128));
}

void AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader::create(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  std::string::basic_string[abi:nn180100]<0>(v19, "tess_nb_0_");
  std::string::basic_string[abi:nn180100]<0>(v20, "tess_nb_1_");
  uint64_t v5 = (const std::string::value_type **)&v19[3 * (*a3 & 3)];
  if (*((char *)v5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *v5, (std::string::size_type)v5[1]);
  }
  else {
    std::string v23 = *(std::string *)v5;
  }
  uint64_t v6 = 0;
  while (1)
  {
    if (SHIBYTE(v20[v6 + 2]) < 0) {
      operator delete((void *)v19[v6 + 3]);
    }
    v6 -= 3;
    if (v6 == -6)
    {
      std::string::basic_string[abi:nn180100]<0>(v19, "0_");
      std::string::basic_string[abi:nn180100]<0>(v20, "1_");
      std::string::basic_string[abi:nn180100]<0>(v21, "2_");
      std::string::basic_string[abi:nn180100]<0>(v22, "3_");
      uint64_t v7 = (const std::string::value_type **)&v19[3 * ((*a3 >> 2) & 7)];
      int v8 = *((char *)v7 + 23);
      if (v8 >= 0) {
        int v9 = (const std::string::value_type *)&v19[3 * ((*a3 >> 2) & 7)];
      }
      else {
        int v9 = *v7;
      }
      if (v8 >= 0) {
        std::string::size_type v10 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)v7[1];
      }
      std::string::append(&v23, v9, v10);
      uint64_t v11 = 0;
      while (1)
      {
        if (SHIBYTE(v22[v11 + 2]) < 0) {
          operator delete((void *)v22[v11]);
        }
        v11 -= 3;
        if (v11 == -12)
        {
          std::string::basic_string[abi:nn180100]<0>(v19, "0");
          std::string::basic_string[abi:nn180100]<0>(v20, "1");
          std::string::basic_string[abi:nn180100]<0>(v21, "2");
          std::string::basic_string[abi:nn180100]<0>(v22, "3");
          uint64_t v12 = (const std::string::value_type **)&v19[3 * (*a3 >> 5)];
          int v13 = *((char *)v12 + 23);
          if (v13 >= 0) {
            uint64_t v14 = (const std::string::value_type *)&v19[3 * (*a3 >> 5)];
          }
          else {
            uint64_t v14 = *v12;
          }
          if (v13 >= 0) {
            std::string::size_type v15 = *((unsigned __int8 *)v12 + 23);
          }
          else {
            std::string::size_type v15 = (std::string::size_type)v12[1];
          }
          std::string::append(&v23, v14, v15);
          uint64_t v16 = 0;
          while (1)
          {
            if (SHIBYTE(v22[v16 + 2]) < 0) {
              operator delete((void *)v22[v16]);
            }
            v16 -= 3;
            if (v16 == -12)
            {
              if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v17 = &v23;
              }
              else {
                uint64_t v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
              }
              if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v23.__r_.__value_.__l.__size_;
              }
              AGCLLVMObject::readBitcode(a2, (const UInt8 *)v17, size, 0);
              operator new();
            }
          }
        }
      }
    }
  }
}

void AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader::create(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  std::string::basic_string[abi:nn180100]<0>(v19, "tess_b3_0_");
  std::string::basic_string[abi:nn180100]<0>(v20, "tess_b3_1_");
  uint64_t v5 = (const std::string::value_type **)&v19[3 * (*a3 & 3)];
  if (*((char *)v5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *v5, (std::string::size_type)v5[1]);
  }
  else {
    std::string v23 = *(std::string *)v5;
  }
  uint64_t v6 = 0;
  while (1)
  {
    if (SHIBYTE(v20[v6 + 2]) < 0) {
      operator delete((void *)v19[v6 + 3]);
    }
    v6 -= 3;
    if (v6 == -6)
    {
      std::string::basic_string[abi:nn180100]<0>(v19, "0_");
      std::string::basic_string[abi:nn180100]<0>(v20, "1_");
      std::string::basic_string[abi:nn180100]<0>(v21, "2_");
      std::string::basic_string[abi:nn180100]<0>(v22, "3_");
      uint64_t v7 = (const std::string::value_type **)&v19[3 * ((*a3 >> 2) & 7)];
      int v8 = *((char *)v7 + 23);
      if (v8 >= 0) {
        int v9 = (const std::string::value_type *)&v19[3 * ((*a3 >> 2) & 7)];
      }
      else {
        int v9 = *v7;
      }
      if (v8 >= 0) {
        std::string::size_type v10 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)v7[1];
      }
      std::string::append(&v23, v9, v10);
      uint64_t v11 = 0;
      while (1)
      {
        if (SHIBYTE(v22[v11 + 2]) < 0) {
          operator delete((void *)v22[v11]);
        }
        v11 -= 3;
        if (v11 == -12)
        {
          std::string::basic_string[abi:nn180100]<0>(v19, "0");
          std::string::basic_string[abi:nn180100]<0>(v20, "1");
          std::string::basic_string[abi:nn180100]<0>(v21, "2");
          std::string::basic_string[abi:nn180100]<0>(v22, "3");
          uint64_t v12 = (const std::string::value_type **)&v19[3 * (*a3 >> 5)];
          int v13 = *((char *)v12 + 23);
          if (v13 >= 0) {
            uint64_t v14 = (const std::string::value_type *)&v19[3 * (*a3 >> 5)];
          }
          else {
            uint64_t v14 = *v12;
          }
          if (v13 >= 0) {
            std::string::size_type v15 = *((unsigned __int8 *)v12 + 23);
          }
          else {
            std::string::size_type v15 = (std::string::size_type)v12[1];
          }
          std::string::append(&v23, v14, v15);
          uint64_t v16 = 0;
          while (1)
          {
            if (SHIBYTE(v22[v16 + 2]) < 0) {
              operator delete((void *)v22[v16]);
            }
            v16 -= 3;
            if (v16 == -12)
            {
              if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v17 = &v23;
              }
              else {
                uint64_t v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
              }
              if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v23.__r_.__value_.__l.__size_;
              }
              AGCLLVMObject::readBitcode(a2, (const UInt8 *)v17, size, 0);
              operator new();
            }
          }
        }
      }
    }
  }
}

void AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader::create(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  std::string::basic_string[abi:nn180100]<0>(v19, "tess_b1_0_");
  std::string::basic_string[abi:nn180100]<0>(v20, "tess_b1_1_");
  uint64_t v5 = (const std::string::value_type **)&v19[3 * (*a3 & 3)];
  if (*((char *)v5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *v5, (std::string::size_type)v5[1]);
  }
  else {
    std::string v23 = *(std::string *)v5;
  }
  uint64_t v6 = 0;
  while (1)
  {
    if (SHIBYTE(v20[v6 + 2]) < 0) {
      operator delete((void *)v19[v6 + 3]);
    }
    v6 -= 3;
    if (v6 == -6)
    {
      std::string::basic_string[abi:nn180100]<0>(v19, "0_");
      std::string::basic_string[abi:nn180100]<0>(v20, "1_");
      std::string::basic_string[abi:nn180100]<0>(v21, "2_");
      std::string::basic_string[abi:nn180100]<0>(v22, "3_");
      uint64_t v7 = (const std::string::value_type **)&v19[3 * ((*a3 >> 2) & 7)];
      int v8 = *((char *)v7 + 23);
      if (v8 >= 0) {
        int v9 = (const std::string::value_type *)&v19[3 * ((*a3 >> 2) & 7)];
      }
      else {
        int v9 = *v7;
      }
      if (v8 >= 0) {
        std::string::size_type v10 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)v7[1];
      }
      std::string::append(&v23, v9, v10);
      uint64_t v11 = 0;
      while (1)
      {
        if (SHIBYTE(v22[v11 + 2]) < 0) {
          operator delete((void *)v22[v11]);
        }
        v11 -= 3;
        if (v11 == -12)
        {
          std::string::basic_string[abi:nn180100]<0>(v19, "0");
          std::string::basic_string[abi:nn180100]<0>(v20, "1");
          std::string::basic_string[abi:nn180100]<0>(v21, "2");
          std::string::basic_string[abi:nn180100]<0>(v22, "3");
          uint64_t v12 = (const std::string::value_type **)&v19[3 * (*a3 >> 5)];
          int v13 = *((char *)v12 + 23);
          if (v13 >= 0) {
            uint64_t v14 = (const std::string::value_type *)&v19[3 * (*a3 >> 5)];
          }
          else {
            uint64_t v14 = *v12;
          }
          if (v13 >= 0) {
            std::string::size_type v15 = *((unsigned __int8 *)v12 + 23);
          }
          else {
            std::string::size_type v15 = (std::string::size_type)v12[1];
          }
          std::string::append(&v23, v14, v15);
          uint64_t v16 = 0;
          while (1)
          {
            if (SHIBYTE(v22[v16 + 2]) < 0) {
              operator delete((void *)v22[v16]);
            }
            v16 -= 3;
            if (v16 == -12)
            {
              if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v17 = &v23;
              }
              else {
                uint64_t v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
              }
              if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v23.__r_.__value_.__l.__size_;
              }
              AGCLLVMObject::readBitcode(a2, (const UInt8 *)v17, size, 0);
              operator new();
            }
          }
        }
      }
    }
  }
}

void AGCLLVMDriverTessellationBucketedSumInstanceCountsShader::create(AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
}

void AGCLLVMDriverTessellationClearInstanceCountsShader::create(AGCLLVMDriverTessellationClearInstanceCountsShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
}

void AGCLLVMDriverVDMNOPDBGShader::create(AGCLLVMDriverVDMNOPDBGShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
}

void AGCLLVMDriverExecuteIndirectESLGenerationShader::create(AGCLLVMDriverExecuteIndirectESLGenerationShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  v39[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&v33, "gei_esl_gen");
  switch(*(_DWORD *)(*((void *)this + 4) + 28))
  {
    case 4:
      uint64_t v6 = "gei_pds_gen_gen1";
      goto LABEL_9;
    case 6:
    case 7:
      uint64_t v6 = "gei_pds_gen_gen2";
LABEL_9:
      MEMORY[0x1CB7A04E0](&v33, v6);
      break;
    case 8:
      uint64_t v5 = "_tmp_gen1";
      goto LABEL_11;
    case 9:
    case 0xA:
    case 0xB:
    case 0x17:
      uint64_t v5 = "_tmp_gen2";
      goto LABEL_11;
    case 0xE:
    case 0x10:
    case 0x19:
    case 0x1A:
    case 0x1B:
      uint64_t v5 = "2";
      goto LABEL_11;
    case 0x11:
    case 0x12:
      uint64_t v5 = "3";
      goto LABEL_11;
    case 0x13:
    case 0x14:
    case 0x15:
      uint64_t v5 = "3x";
      goto LABEL_11;
    case 0x16:
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v33.__r_.__value_.__l.__size_;
      }
      std::string::size_type v10 = __p;
      std::string::basic_string[abi:nn180100]((uint64_t)__p, size + 6);
      if (v31 < 0) {
        std::string::size_type v10 = (void **)__p[0];
      }
      if (size)
      {
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v11 = &v33;
        }
        else {
          uint64_t v11 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        memmove(v10, v11, size);
      }
      strcpy((char *)v10 + size, "4_g15p");
      unsigned int v12 = *(_DWORD *)(*((void *)this + 4) + 24);
      v34[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v35, "a0");
      int v36 = 3;
      std::string::basic_string[abi:nn180100]<0>(v37, "b0");
      uint64_t v13 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      __int16 v27 = &v28;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v27, (uint64_t *)&v28, v34[v13], (uint64_t)&v34[v13]);
        v13 += 8;
      }
      while (v13 != 16);
      getFullBitcodePath(&v32, (const void **)__p, v12, (uint64_t)&v27);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      std::string v33 = v32;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v28);
      for (uint64_t i = 0; i != -8; i -= 4)
      {
        if (SHIBYTE(v37[i + 2]) < 0) {
          operator delete((void *)v37[i]);
        }
      }
      goto LABEL_75;
    case 0x18:
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v15 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v15 = v33.__r_.__value_.__l.__size_;
      }
      uint64_t v16 = __p;
      std::string::basic_string[abi:nn180100]((uint64_t)__p, v15 + 6);
      if (v31 < 0) {
        uint64_t v16 = (void **)__p[0];
      }
      if (v15)
      {
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v17 = &v33;
        }
        else {
          uint64_t v17 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        memmove(v16, v17, v15);
      }
      strcpy((char *)v16 + v15, "4_g15g");
      unsigned int v18 = *(_DWORD *)(*((void *)this + 4) + 24);
      v34[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v35, "a0");
      int v36 = 3;
      std::string::basic_string[abi:nn180100]<0>(v37, "b0");
      int v38 = 5;
      std::string::basic_string[abi:nn180100]<0>(v39, "c0");
      uint64_t v19 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      __int16 v27 = &v28;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v27, (uint64_t *)&v28, v34[v19], (uint64_t)&v34[v19]);
        v19 += 8;
      }
      while (v19 != 24);
      getFullBitcodePath(&v32, (const void **)__p, v18, (uint64_t)&v27);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      std::string v33 = v32;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v28);
      for (uint64_t j = 0; j != -12; j -= 4)
      {
        if (SHIBYTE(v39[j + 2]) < 0) {
          operator delete((void *)v39[j]);
        }
      }
      goto LABEL_75;
    case 0x1F:
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v21 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = v33.__r_.__value_.__l.__size_;
      }
      uint64_t v22 = __p;
      std::string::basic_string[abi:nn180100]((uint64_t)__p, v21 + 6);
      if (v31 < 0) {
        uint64_t v22 = (void **)__p[0];
      }
      if (v21)
      {
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v23 = &v33;
        }
        else {
          std::string v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        memmove(v22, v23, v21);
      }
      strcpy((char *)v22 + v21, "4_g16p");
      unsigned int v24 = *(_DWORD *)(*((void *)this + 4) + 24);
      v34[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v35, "a0");
      int v36 = 3;
      std::string::basic_string[abi:nn180100]<0>(v37, "b0");
      int v38 = 4;
      std::string::basic_string[abi:nn180100]<0>(v39, "b0");
      uint64_t v25 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      __int16 v27 = &v28;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v27, (uint64_t *)&v28, v34[v25], (uint64_t)&v34[v25]);
        v25 += 8;
      }
      while (v25 != 24);
      getFullBitcodePath(&v32, (const void **)__p, v24, (uint64_t)&v27);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      std::string v33 = v32;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v28);
      for (uint64_t k = 0; k != -12; k -= 4)
      {
        if (SHIBYTE(v39[k + 2]) < 0) {
          operator delete((void *)v39[k]);
        }
      }
LABEL_75:
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      break;
    case 0x20:
    case 0x22:
      uint64_t v5 = "4_hal200";
LABEL_11:
      std::string::append(&v33, v5);
      break;
    default:
      break;
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v33;
  }
  else {
    uint64_t v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v33.__r_.__value_.__l.__size_;
  }
  AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)v7, v8, 0);
  operator new();
}

uint64_t *std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>(uint64_t *result, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = result + 1;
  if (result + 1 == a2 || (int v7 = *((_DWORD *)a2 + 8), v7 > a3))
  {
    uint64_t v8 = *a2;
    if ((uint64_t *)*result == a2)
    {
      std::string::size_type v10 = a2;
LABEL_16:
      if (v8) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = a2;
      }
      if (v8) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = a2;
      }
      goto LABEL_22;
    }
    if (v8)
    {
      int v9 = (uint64_t *)*a2;
      do
      {
        std::string::size_type v10 = v9;
        int v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      std::string::size_type v15 = a2;
      do
      {
        std::string::size_type v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        std::string::size_type v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 8) < a3) {
      goto LABEL_16;
    }
    uint64_t v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t *)v17;
          int v18 = *(_DWORD *)(v17 + 32);
          if (v18 <= a3) {
            break;
          }
          uint64_t v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        uint64_t v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }
LABEL_51:
      uint64_t v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3) {
      return result;
    }
    uint64_t v11 = a2 + 1;
    unsigned int v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        uint64_t v11 = v12;
        unsigned int v12 = (uint64_t *)*v12;
        uint64_t v13 = v11;
        uint64_t v14 = v11;
      }
      while (v12);
    }
    else
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v19 = v14;
        uint64_t v14 = (uint64_t *)v14[2];
      }
      while ((uint64_t *)*v14 != v19);
      uint64_t v13 = a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 8) > a3)
    {
LABEL_22:
      uint64_t v6 = v11;
      if (*v11) {
        return result;
      }
      goto LABEL_44;
    }
    uint64_t v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t *)v20;
          int v21 = *(_DWORD *)(v20 + 32);
          if (v21 <= a3) {
            break;
          }
          uint64_t v20 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v21 >= a3) {
          goto LABEL_51;
        }
        uint64_t v6 = v13 + 1;
        uint64_t v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }
  }
  uint64_t v13 = result + 1;
LABEL_44:
  uint64_t v22 = (char *)operator new(0x40uLL);
  *((_DWORD *)v22 + 8) = *(_DWORD *)a4;
  std::string v23 = (std::string *)(v22 + 40);
  if (*(char *)(a4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)(a4 + 8), *(void *)(a4 + 16));
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 8);
    *((void *)v22 + 7) = *(void *)(a4 + 24);
  }
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = v13;
  *uint64_t v6 = (uint64_t)v22;
  uint64_t v24 = *(void *)*v5;
  if (v24)
  {
    uint64_t *v5 = v24;
    uint64_t v22 = (char *)*v6;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], (uint64_t *)v22);
  ++v5[2];
  return result;
}

void getFullBitcodePath(std::string *this, const void **a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 + 8);
  uint64_t v6 = a4 + 8;
  uint64_t v7 = v8;
  if (!v8) {
    goto LABEL_11;
  }
  signed int v9 = HIWORD(a3);
  uint64_t v10 = v6;
  do
  {
    int v11 = *(_DWORD *)(v7 + 32);
    BOOL v12 = v11 < v9;
    if (v11 >= v9) {
      uint64_t v13 = (uint64_t *)v7;
    }
    else {
      uint64_t v13 = (uint64_t *)(v7 + 8);
    }
    if (!v12) {
      uint64_t v10 = v7;
    }
    uint64_t v7 = *v13;
  }
  while (*v13);
  if (v10 != v6 && v9 >= *(_DWORD *)(v10 + 32))
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v16 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v16 = (size_t)a2[1];
    }
    uint64_t v17 = &v26;
    std::string::basic_string[abi:nn180100]((uint64_t)&v26, v16 + 1);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if (v16)
    {
      if (*((char *)a2 + 23) >= 0) {
        int v18 = a2;
      }
      else {
        int v18 = *a2;
      }
      memmove(v17, v18, v16);
    }
    *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 95;
    int v21 = *(const std::string::value_type **)(v10 + 40);
    uint64_t v20 = v10 + 40;
    uint64_t v19 = v21;
    int v22 = *(char *)(v20 + 23);
    if (v22 >= 0) {
      std::string v23 = (const std::string::value_type *)v20;
    }
    else {
      std::string v23 = v19;
    }
    if (v22 >= 0) {
      std::string::size_type v24 = *(unsigned __int8 *)(v20 + 23);
    }
    else {
      std::string::size_type v24 = *(void *)(v20 + 8);
    }
    uint64_t v25 = std::string::append(&v26, v23, v24);
    *this = *v25;
    v25->__r_.__value_.__r.__words[0] = 0;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
  else
  {
LABEL_11:
    if (*((char *)a2 + 23) < 0)
    {
      uint64_t v14 = (const std::string::value_type *)*a2;
      std::string::size_type v15 = (std::string::size_type)a2[1];
      std::string::__init_copy_ctor_external(this, v14, v15);
    }
    else
    {
      *this = *(std::string *)a2;
    }
  }
}

void std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

void AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::create(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  _OWORD v30[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&v24, "gei_esl_gen");
  switch(*(_DWORD *)(*((void *)this + 4) + 28))
  {
    case 4:
      uint64_t v5 = "gei_pds_gen_range_exec_gen1";
      goto LABEL_12;
    case 6:
    case 7:
      uint64_t v5 = "gei_pds_gen_range_exec_gen2";
      goto LABEL_12;
    case 8:
      uint64_t v6 = "_tmp_range_exec_gen1";
      goto LABEL_4;
    case 9:
    case 0xA:
    case 0xB:
    case 0x17:
      uint64_t v6 = "_tmp_range_exec_gen2";
LABEL_4:
      std::string::append(&v24, v6);
      break;
    case 0xC:
      uint64_t v5 = "gei_esl_range_exec_gen";
      goto LABEL_12;
    case 0xE:
    case 0x10:
    case 0x19:
    case 0x1A:
    case 0x1B:
      uint64_t v5 = "gei_esl_range_exec_gen2";
      goto LABEL_12;
    case 0x11:
    case 0x12:
      uint64_t v5 = "gei_esl_range_exec_gen3";
      goto LABEL_12;
    case 0x13:
    case 0x14:
    case 0x15:
      uint64_t v5 = "gei_esl_range_exec_gen3x";
      goto LABEL_12;
    case 0x16:
      std::string::basic_string[abi:nn180100]<0>(__p, "gei_esl_range_exec_gen4_g15p");
      unsigned int v9 = *(_DWORD *)(*((void *)this + 4) + 24);
      v25[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v26, "a0");
      int v27 = 3;
      std::string::basic_string[abi:nn180100]<0>(v28, "b0");
      uint64_t v10 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v18 = &v19;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v18, (uint64_t *)&v19, v25[v10], (uint64_t)&v25[v10]);
        v10 += 8;
      }
      while (v10 != 16);
      getFullBitcodePath(&v23, (const void **)__p, v9, (uint64_t)&v18);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      std::string v24 = v23;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v19);
      for (uint64_t i = 0; i != -8; i -= 4)
      {
        if (SHIBYTE(v28[i + 2]) < 0) {
          operator delete((void *)v28[i]);
        }
      }
      goto LABEL_46;
    case 0x18:
      std::string::basic_string[abi:nn180100]<0>(__p, "gei_esl_range_exec_gen4_g15g");
      unsigned int v12 = *(_DWORD *)(*((void *)this + 4) + 24);
      v25[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v26, "a0");
      int v27 = 3;
      std::string::basic_string[abi:nn180100]<0>(v28, "b0");
      int v29 = 5;
      std::string::basic_string[abi:nn180100]<0>(v30, "c0");
      uint64_t v13 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v18 = &v19;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v18, (uint64_t *)&v19, v25[v13], (uint64_t)&v25[v13]);
        v13 += 8;
      }
      while (v13 != 24);
      getFullBitcodePath(&v23, (const void **)__p, v12, (uint64_t)&v18);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      std::string v24 = v23;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v19);
      for (uint64_t j = 0; j != -12; j -= 4)
      {
        if (SHIBYTE(v30[j + 2]) < 0) {
          operator delete((void *)v30[j]);
        }
      }
      goto LABEL_46;
    case 0x1F:
      std::string::basic_string[abi:nn180100]<0>(__p, "gei_esl_range_exec_gen4_g16p");
      unsigned int v15 = *(_DWORD *)(*((void *)this + 4) + 24);
      v25[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v26, "a0");
      int v27 = 3;
      std::string::basic_string[abi:nn180100]<0>(v28, "b0");
      int v29 = 4;
      std::string::basic_string[abi:nn180100]<0>(v30, "b0");
      uint64_t v16 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v18 = &v19;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v18, (uint64_t *)&v19, v25[v16], (uint64_t)&v25[v16]);
        v16 += 8;
      }
      while (v16 != 24);
      getFullBitcodePath(&v23, (const void **)__p, v15, (uint64_t)&v18);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      std::string v24 = v23;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v19);
      for (uint64_t k = 0; k != -12; k -= 4)
      {
        if (SHIBYTE(v30[k + 2]) < 0) {
          operator delete((void *)v30[k]);
        }
      }
LABEL_46:
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      break;
    case 0x20:
    case 0x22:
      uint64_t v5 = "gei_esl_range_exec_gen4_hal200";
LABEL_12:
      MEMORY[0x1CB7A04E0](&v24, v5);
      break;
    default:
      break;
  }
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v24;
  }
  else {
    uint64_t v7 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v24.__r_.__value_.__l.__size_;
  }
  AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)v7, size, 0);
  operator new();
}

void AGCLLVMDriverVRRPatchVertexShader::create(AGCLLVMDriverVRRPatchVertexShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  v29[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&__p, "");
  switch(*(_DWORD *)(*((void *)this + 4) + 28))
  {
    case 0xC:
      uint64_t v5 = "late_latched_vrr_g12";
      goto LABEL_7;
    case 0xE:
    case 0x10:
    case 0x19:
    case 0x1A:
    case 0x1B:
      uint64_t v5 = "late_latched_vrr_g13";
      goto LABEL_7;
    case 0x11:
    case 0x12:
      uint64_t v5 = "late_latched_vrr_g14";
      goto LABEL_7;
    case 0x13:
    case 0x14:
    case 0x15:
      uint64_t v5 = "late_latched_vrr_g14x";
      goto LABEL_7;
    case 0x16:
      std::string::basic_string[abi:nn180100]<0>(v20, "late_latched_vrr_g15p");
      unsigned int v8 = *(_DWORD *)(*((void *)this + 4) + 24);
      v24[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v25, "a0");
      int v26 = 3;
      std::string::basic_string[abi:nn180100]<0>(v27, "b0");
      uint64_t v9 = 0;
      int v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v17, (uint64_t *)&v18, v24[v9], (uint64_t)&v24[v9]);
        v9 += 8;
      }
      while (v9 != 16);
      getFullBitcodePath(&v22, (const void **)v20, v8, (uint64_t)&v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v22;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v18);
      for (uint64_t i = 0; i != -8; i -= 4)
      {
        if (SHIBYTE(v27[i + 2]) < 0) {
          operator delete((void *)v27[i]);
        }
      }
      goto LABEL_41;
    case 0x18:
      std::string::basic_string[abi:nn180100]<0>(v20, "late_latched_vrr_g15g");
      unsigned int v11 = *(_DWORD *)(*((void *)this + 4) + 24);
      v24[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v25, "a0");
      int v26 = 3;
      std::string::basic_string[abi:nn180100]<0>(v27, "b0");
      int v28 = 5;
      std::string::basic_string[abi:nn180100]<0>(v29, "c0");
      uint64_t v12 = 0;
      int v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v17, (uint64_t *)&v18, v24[v12], (uint64_t)&v24[v12]);
        v12 += 8;
      }
      while (v12 != 24);
      getFullBitcodePath(&v22, (const void **)v20, v11, (uint64_t)&v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v22;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v18);
      for (uint64_t j = 0; j != -12; j -= 4)
      {
        if (SHIBYTE(v29[j + 2]) < 0) {
          operator delete((void *)v29[j]);
        }
      }
      goto LABEL_41;
    case 0x1F:
      std::string::basic_string[abi:nn180100]<0>(v20, "late_latched_vrr_g16p");
      unsigned int v14 = *(_DWORD *)(*((void *)this + 4) + 24);
      v24[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v25, "a0");
      int v26 = 3;
      std::string::basic_string[abi:nn180100]<0>(v27, "b0");
      int v28 = 4;
      std::string::basic_string[abi:nn180100]<0>(v29, "b0");
      uint64_t v15 = 0;
      int v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v17, (uint64_t *)&v18, v24[v15], (uint64_t)&v24[v15]);
        v15 += 8;
      }
      while (v15 != 24);
      getFullBitcodePath(&v22, (const void **)v20, v14, (uint64_t)&v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v22;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v18);
      for (uint64_t k = 0; k != -12; k -= 4)
      {
        if (SHIBYTE(v29[k + 2]) < 0) {
          operator delete((void *)v29[k]);
        }
      }
LABEL_41:
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      break;
    case 0x20:
    case 0x22:
      uint64_t v5 = "late_latched_vrr_hal200";
LABEL_7:
      MEMORY[0x1CB7A04E0](&__p, v5);
      break;
    default:
      break;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)p_p, size, 1);
  operator new();
}

void AGCLLVMDriverGPUGatherVertexShader::create(AGCLLVMDriverGPUGatherVertexShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  unsigned int v5 = *(_DWORD *)(*((void *)this + 4) + 28) - 4;
  if (v5 <= 0x1E && ((0x50FFF5FDu >> v5) & 1) != 0) {
    MEMORY[0x1CB7A04E0](__p, off_1E65EA630[v5]);
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    CFIndex v7 = v9;
  }
  else {
    CFIndex v7 = (CFIndex)__p[1];
  }
  AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)v6, v7, 0);
  operator new();
}

void AGCLLVMDriverFastClearVertexShaders::create(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 3) == 1)
  {
    if ((a3 & 4) != 0)
    {
      uint64_t v6 = "blit_vertex_fast_clear_gen1_meta";
    }
    else
    {
      uint64_t v4 = 0;
      int v8 = (a3 >> 3);
      uint64_t v6 = "blit_vertex_fast_clear_gen1_1";
      size_t v7 = 0;
      switch(v8)
      {
        case 1:
          break;
        case 2:
          uint64_t v6 = "blit_vertex_fast_clear_gen1_2";
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_13;
        case 4:
          uint64_t v6 = "blit_vertex_fast_clear_gen1_4";
          break;
        case 8:
          uint64_t v6 = "blit_vertex_fast_clear_gen1_8";
          break;
        default:
          size_t v7 = 0;
          if (v8 != 16) {
            goto LABEL_13;
          }
          uint64_t v6 = "blit_vertex_fast_clear_gen1_16";
          break;
      }
    }
  }
  else
  {
    if ((a3 & 3) != 2)
    {
      uint64_t v4 = 0;
      size_t v7 = 0;
      goto LABEL_13;
    }
    if ((a3 & 4) != 0)
    {
      uint64_t v6 = "blit_vertex_fast_clear_gen2_meta";
    }
    else
    {
      uint64_t v4 = 0;
      int v5 = (a3 >> 3);
      uint64_t v6 = "blit_vertex_fast_clear_gen2_1";
      size_t v7 = 0;
      switch(v5)
      {
        case 1:
          break;
        case 2:
          uint64_t v6 = "blit_vertex_fast_clear_gen2_2";
          break;
        case 3:
        case 6:
        case 7:
          goto LABEL_13;
        case 4:
          uint64_t v6 = "blit_vertex_fast_clear_gen2_4";
          break;
        case 5:
          uint64_t v6 = "blit_vertex_fast_clear_gen2_5";
          break;
        case 8:
          uint64_t v6 = "blit_vertex_fast_clear_gen2_8";
          break;
        default:
          size_t v7 = 0;
          if (v5 != 16) {
            goto LABEL_13;
          }
          uint64_t v6 = "blit_vertex_fast_clear_gen2_16";
          break;
      }
    }
  }
  size_t v7 = strlen(v6);
  uint64_t v4 = (const UInt8 *)v6;
LABEL_13:
  AGCLLVMObject::readBitcode(a2, v4, v7, 1);
  operator new();
}

void AGCLLVMDriverPDSPatchUpVertexShader::create(AGCLLVMDriverPDSPatchUpVertexShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
}

char *AGCArgumentBuffer::parseMDRoot(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 56);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v12 = v9 % v10;
      }
    }
    else
    {
      unint64_t v12 = v9 & (v10 - 1);
    }
    uint64_t v13 = *(void **)(*(void *)(a1 + 48) + 8 * v12);
    if (v13)
    {
      for (uint64_t i = (void *)*v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (i[2] == a2) {
            return (char *)(i + 3);
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  int v50 = 3;
  long long v49 = &unk_1F2598A40;
  uint64_t v51 = 0;
  uint64_t v52 = 1;
  v53[0] = v54;
  v53[1] = (void *)0x800000000;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  int v58 = 1;
  if (v10)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v17 = *(void ***)(*(void *)(a1 + 48) + 8 * v3);
    if (v17)
    {
      int v18 = *v17;
      if (*v17)
      {
        do
        {
          unint64_t v19 = v18[1];
          if (v19 == v9)
          {
            if (v18[2] == a2) {
              goto LABEL_90;
            }
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v19 >= v10) {
                v19 %= v10;
              }
            }
            else
            {
              v19 &= v10 - 1;
            }
            if (v19 != v3) {
              break;
            }
          }
          int v18 = (void *)*v18;
        }
        while (v18);
      }
    }
  }
  uint64_t v20 = (void *)(a1 + 64);
  int v18 = operator new(0x70uLL);
  *int v18 = 0;
  v18[1] = v9;
  *((_DWORD *)v18 + 8) = 2;
  v18[5] = v18 + 7;
  v18[6] = 0x400000000;
  v18[2] = a2;
  v18[3] = &unk_1F2598AE0;
  v18[11] = 0;
  v18[12] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 72) + 1);
  float v22 = *(float *)(a1 + 80);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    BOOL v23 = 1;
    if (v10 >= 3) {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v10);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v10 = *(void *)(a1 + 56);
    }
    if (*(void *)&prime > v10) {
      goto LABEL_46;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v10 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 56);
      }
      else
      {
        if (prime)
        {
LABEL_46:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int v27 = operator new(8 * *(void *)&prime);
          int v28 = *(void **)(a1 + 48);
          *(void *)(a1 + 48) = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + 56) = prime;
          do
            *(void *)(*(void *)(a1 + 48) + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          uint64_t v30 = (void *)*v20;
          if (*v20)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 48) + 8 * v31) = v20;
            int v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  uint64_t v38 = *(void *)(a1 + 48);
                  if (!*(void *)(v38 + 8 * v37))
                  {
                    *(void *)(v38 + 8 * v37) = v30;
                    goto LABEL_71;
                  }
                  void *v30 = *v36;
                  void *v36 = **(void **)(*(void *)(a1 + 48) + 8 * v37);
                  **(void **)(*(void *)(a1 + 48) + 8 * v37) = v36;
                  int v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_71:
                uint64_t v30 = v36;
                int v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_75;
        }
        uint64_t v45 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = 0;
        if (v45) {
          operator delete(v45);
        }
        unint64_t v10 = 0;
        *(void *)(a1 + 56) = 0;
      }
    }
LABEL_75:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v39 = *(void *)(a1 + 48);
  BOOL v40 = *(void **)(v39 + 8 * v3);
  if (v40)
  {
    *int v18 = *v40;
  }
  else
  {
    *int v18 = *v20;
    *uint64_t v20 = v18;
    *(void *)(v39 + 8 * v3) = v20;
    if (!*v18) {
      goto LABEL_89;
    }
    unint64_t v41 = *(void *)(*v18 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v41 >= v10) {
        v41 %= v10;
      }
    }
    else
    {
      v41 &= v10 - 1;
    }
    BOOL v40 = (void *)(*(void *)(a1 + 48) + 8 * v41);
  }
  void *v40 = v18;
LABEL_89:
  ++*(void *)(a1 + 72);
LABEL_90:
  int v44 = (char *)(v18 + 3);
  AGCArgumentBuffer::ResourceTracker::pushArray((AGCArgumentBuffer::ResourceTracker *)v53, (AGCArgumentBuffer::Array *)&v49, 0);
  AGCArgumentBuffer::parseMDStruct((uint64_t)v46, a1, a2, a3, 0, (uint64_t)(v18 + 3), (int32x2_t *)v53);
  AGCArgumentBuffer::ResourceTracker::popArray((uint64_t *)v53);
  *((_DWORD *)v18 + 22) = HIDWORD(v52);
  *((_DWORD *)v18 + 23) = v55;
  *((_DWORD *)v18 + 24) = v56;
  *((_DWORD *)v18 + 25) = HIDWORD(v55);
  v18[13] = a3;
  if (v48 < 0) {
    operator delete(__p);
  }
  if (v53[0] != v54) {
    free(v53[0]);
  }
  uint64_t v42 = v51;
  long long v49 = &unk_1F2598A40;
  uint64_t v51 = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  return v44;
}

void llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::destroy_range(char *a1, char *a2)
{
  if (a2 != a1)
  {
    unint64_t v3 = a2 - 40;
    do
    {
      uint64_t v4 = (char *)*((void *)v3 - 2);
      if (v3 != v4) {
        free(v4);
      }
      int v5 = (char *)*((void *)v3 - 8);
      if (v3 - 48 != v5) {
        free(v5);
      }
      uint64_t v6 = v3 - 64;
      v3 -= 104;
    }
    while (v6 != a1);
  }
}

uint64_t llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::push_back(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v10 = v5 + 104 * v4;
    if (v5 > (unint64_t)a2 || v10 <= (unint64_t)a2) {
      llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::grow();
    }
    llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::grow();
  }
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  unint64_t v7 = (void *)(v5 + 104 * v6);
  *unint64_t v7 = v7 + 2;
  v7[1] = 0x400000000;
  if (a2[2]) {
    llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)v7, (uint64_t)a2);
  }
  unint64_t v8 = v5 + 104 * v6;
  *(void *)(v8 + 48) = v8 + 64;
  uint64_t result = v8 + 48;
  *(void *)(result + 8) = 0x400000000;
  if (a2[14]) {
    uint64_t result = llvm::SmallVectorImpl<llvm::Value *>::operator=(result, (uint64_t)(a2 + 12));
  }
  *(_DWORD *)(v5 + 104 * v6 + 96) = a2[24];
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::buildStruct(AGCArgumentBuffer::Tier1TypeBuilder *this, AGCArgumentBuffer::Struct *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  AGCArgumentBuffer::Tier1TypeBuilder::endGroup(this);
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 1000, *(_DWORD *)(*((void *)this + 19) + 104 * *((unsigned int *)this + 40) - 96));
  AGCArgumentBuffer::Tier1TypeBuilder::pushArrayIndices((uint64_t)this);
  float v22 = v24;
  uint64_t v23 = 0x400000000;
  if (*((_DWORD *)this + 16))
  {
    llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v22, (uint64_t)this + 56);
    unint64_t v25 = v27;
    uint64_t v26 = 0x400000000;
    uint64_t v29 = v31;
    uint64_t v30 = 0x400000000;
    if (v23) {
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v29, (uint64_t)&v22);
    }
  }
  else
  {
    unint64_t v25 = v27;
    uint64_t v26 = 0x400000000;
    uint64_t v29 = v31;
    uint64_t v30 = 0x400000000;
  }
  v31[8] = 0;
  llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::push_back((uint64_t)this + 152, &v25);
  if (v29 != v31) {
    free(v29);
  }
  if (v25 != v27) {
    free(v25);
  }
  if (v22 != v24) {
    free(v22);
  }
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  uint64_t v4 = *((void *)this + 19) + 104 * *((unsigned int *)this + 40);
  *(_DWORD *)(v4 - 8) = *(_DWORD *)(v4 - 96);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v4 - 104, 0);
  uint64_t v5 = *((unsigned int *)a2 + 6);
  if (v5)
  {
    int v6 = 0;
    unint64_t v7 = (uint64_t *)*((void *)a2 + 2);
    uint64_t v8 = 8 * v5;
    do
    {
      if (*v7) {
        v6 |= AGCArgumentBuffer::Tier1TypeBuilder::buildField((uint64_t)this, *v7);
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  LODWORD(v26) = 7;
  v27[0] = v28;
  v27[1] = (void *)0x400000000;
  uint8x8_t v32 = v34;
  uint64_t v33 = 0x800000000;
  uint64_t v35 = v37;
  uint64_t v36 = 0x400000000;
  v37[4] = 0;
  int v38 = 0;
  unint64_t v25 = &unk_1F2598A60;
  uint64_t v39 = 0;
  if (v6)
  {
    AGCArgumentBuffer::Tier1TypeBuilder::endConstantGroup((uint64_t)this);
    uint64_t v39 = *((void *)this + 3);
    AGCArgumentBuffer::Tier1TypeBuilder::buildConstant(this, (AGCArgumentBuffer::Constant *)&v25);
  }
  AGCArgumentBuffer::Tier1TypeBuilder::endGroup(this);
  unint64_t v9 = (void *)((char *)this + 56);
  llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)this + 56, *((void *)this + 19) + 104 * *((unsigned int *)this + 40) - 56);
  unint64_t v10 = (llvm::ArrayType *)llvm::StructType::get();
  uint64_t v11 = *((unsigned int *)this + 16);
  if (v11)
  {
    uint64_t v12 = *v9 + 8 * v11;
    do
    {
      uint64_t v13 = *(void *)(v12 - 8);
      v12 -= 8;
      unint64_t v10 = (llvm::ArrayType *)llvm::ArrayType::get(v10, (llvm::Type *)*(unsigned int *)(v13 + 24));
    }
    while (v12 != *v9);
    int v14 = *((_DWORD *)this + 16);
    if (v14)
    {
      int v15 = *((_DWORD *)this + 264) - v14;
      int v16 = *((_DWORD *)this + 252) - v14;
      *((_DWORD *)this + 264) = v15;
      *((_DWORD *)this + 252) = v16;
    }
  }
  --*((_DWORD *)this + 252);
  unsigned int v17 = *((_DWORD *)this + 40) - 1;
  *((_DWORD *)this + 40) = v17;
  uint64_t v18 = *((void *)this + 19) + 104 * v17;
  unint64_t v19 = *(void **)(v18 + 48);
  if (v19 != (void *)(v18 + 64)) {
    free(v19);
  }
  if (*(void *)v18 != v18 + 16) {
    free(*(void **)v18);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(*((void *)this + 19) + 104 * *((unsigned int *)this + 40) - 104, (uint64_t)v10);
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  uint64_t v20 = *((void *)this + 19) + 104 * *((unsigned int *)this + 40);
  *(_DWORD *)(v20 - 8) = *(_DWORD *)(v20 - 96);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v20 - 104, 0);
  unint64_t v25 = &unk_1F2598A00;
  if (v35 != v37) {
    free(v35);
  }
  if (v32 != v34) {
    free(v32);
  }
  if (v27[0] != v28) {
    free(v27[0]);
  }
  return v6 & 1;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::buildField(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (a2 && !v3)
  {
    do
    {
      a2 = *(void *)(a2 + 16);
      int v3 = *(_DWORD *)(a2 + 8);
      if (a2) {
        BOOL v4 = v3 == 0;
      }
      else {
        BOOL v4 = 0;
      }
    }
    while (v4);
  }
  if ((v3 - 3) >= 0xFFFFFFFE)
  {
    return AGCArgumentBuffer::Tier1TypeBuilder::buildStruct((AGCArgumentBuffer::Tier1TypeBuilder *)a1, (AGCArgumentBuffer::Struct *)a2);
  }
  else
  {
    switch(v3)
    {
      case 3:
        unsigned int v5 = *(_DWORD *)(a1 + 64);
        if (v5 >= *(_DWORD *)(a1 + 68)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 56) + 8 * v5) = a2;
        ++*(_DWORD *)(a1 + 64);
        uint64_t result = AGCArgumentBuffer::Tier1TypeBuilder::buildField(a1, *(void *)(a2 + 16));
        --*(_DWORD *)(a1 + 64);
        return result;
      case 4:
        unint64_t v7 = (unsigned int *)(a1 + 48);
        goto LABEL_17;
      case 5:
        unint64_t v7 = (unsigned int *)(a1 + 40);
        goto LABEL_17;
      case 6:
        unint64_t v7 = (unsigned int *)(a1 + 44);
LABEL_17:
        AGCArgumentBuffer::Tier1TypeBuilder::buildResource((AGCArgumentBuffer::Tier1TypeBuilder *)a1, (AGCArgumentBuffer::Resource *)a2, v7);
        return 1;
      case 7:
        AGCArgumentBuffer::Tier1TypeBuilder::buildConstant((AGCArgumentBuffer::Tier1TypeBuilder *)a1, (AGCArgumentBuffer::Constant *)a2);
        goto LABEL_19;
      default:
LABEL_19:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::buildConstant(AGCArgumentBuffer::Tier1TypeBuilder *this, AGCArgumentBuffer::Constant *a2)
{
  BOOL v4 = (char *)this + 1000;
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 1000, *(_DWORD *)(*((void *)this + 19) + 104 * *((unsigned int *)this + 40) - 96));
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)v4, *((_DWORD *)this + 28));
  AGCArgumentBuffer::Tier1TypeBuilder::pushArrayIndices((uint64_t)this);
  llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)a2 + 184, (uint64_t)this + 1048);
  uint64_t v5 = *((unsigned int *)this + 252);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 125);
    uint64_t v7 = 4 * v5;
    do
    {
      v6 += 4;
      uint64_t v8 = llvm::ConstantInt::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)a2 + 104, v8);
      v7 -= 4;
    }
    while (v7);
  }
  unint64_t v9 = (llvm::ArrayType *)*((void *)a2 + 31);
  uint64_t v10 = *((unsigned int *)this + 16);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 7) + 8 * v10;
    do
    {
      uint64_t v12 = *(void *)(v11 - 8);
      v11 -= 8;
      unint64_t v9 = (llvm::ArrayType *)llvm::ArrayType::get(v9, (llvm::Type *)*(unsigned int *)(v12 + 24));
    }
    while (v11 != *((void *)this + 7));
  }
  uint64_t result = llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this + 104, (uint64_t)v9);
  int v14 = *((_DWORD *)this + 16);
  int v15 = *((_DWORD *)this + 252);
  if (v14)
  {
    v15 -= v14;
    *((_DWORD *)this + 264) -= v14;
  }
  *((_DWORD *)this + 252) = v15 - 2;
  return result;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::buildResource(AGCArgumentBuffer::Tier1TypeBuilder *this, AGCArgumentBuffer::Resource *a2, unsigned int *a3)
{
  AGCArgumentBuffer::Tier1TypeBuilder::endConstantGroup((uint64_t)this);
  *((_DWORD *)a2 + 25) = *a3;
  llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)a2 + 184, (uint64_t)this + 1048);
  uint64_t v6 = *((unsigned int *)this + 252);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 125);
    uint64_t v8 = 4 * v6;
    do
    {
      v7 += 4;
      uint64_t v9 = llvm::ConstantInt::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)a2 + 104, v9);
      v8 -= 4;
    }
    while (v8);
  }
  uint64_t v10 = *((unsigned int *)this + 16);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)*((void *)this + 7);
    uint64_t v12 = 8 * v10;
    int v13 = 1;
    do
    {
      uint64_t v14 = *v11++;
      v13 *= *(_DWORD *)(v14 + 24);
      v12 -= 8;
    }
    while (v12);
  }
  else
  {
    int v13 = 1;
  }
  int v15 = (char *)a2 + 104;
  uint64_t v16 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v15, v16);
  uint64_t v17 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v15, v17);
  uint64_t v18 = llvm::ConstantInt::get();
  uint64_t result = llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v15, v18);
  *a3 += v13;
  return result;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::endConstantGroup(uint64_t this)
{
  if (*(_DWORD *)(this + 112))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(this + 152) + 104 * *(unsigned int *)(this + 160) - 104;
    uint64_t v3 = llvm::StructType::get();
    this = llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v2, v3);
    *(_DWORD *)(v1 + 112) = 0;
  }
  return this;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::pushArrayIndices(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 64);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(uint64_t **)(this + 56);
    uint64_t v4 = this + 1048;
    uint64_t v5 = this + 1000;
    uint64_t v6 = 8 * v1;
    do
    {
      uint64_t v7 = *v3++;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v4, *(unsigned int *)(v7 + 32) | ((unint64_t)*(unsigned int *)(v2 + 1008) << 32));
      this = llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v5, 0);
      v6 -= 8;
    }
    while (v6);
  }
  return this;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::endGroup(AGCArgumentBuffer::Tier1TypeBuilder *this)
{
  uint64_t v2 = (llvm::ArrayType *)*((void *)this + 4);
  uint64_t v3 = (llvm::ArrayType *)llvm::ArrayType::get(v2, (llvm::Type *)*(unsigned int *)(*((void *)this + 1) + 1704));
  uint64_t v4 = (llvm::ArrayType *)llvm::ArrayType::get(v3, (llvm::Type *)*((unsigned int *)this + 10));
  uint64_t v5 = (llvm::ArrayType *)llvm::ArrayType::get(*((llvm::ArrayType **)this + 4), (llvm::Type *)*(unsigned int *)(*((void *)this + 1) + 1708));
  uint64_t v6 = (llvm::ArrayType *)llvm::ArrayType::get(v5, (llvm::Type *)*((unsigned int *)this + 11));
  uint64_t v7 = (llvm::ArrayType *)llvm::ArrayType::get(*((llvm::ArrayType **)this + 3), (llvm::Type *)*(unsigned int *)(*((void *)this + 1) + 1756));
  uint64_t v8 = (llvm::ArrayType *)*((void *)this + 4);
  llvm::ArrayType::get(v8, 0);
  uint64_t v9 = (llvm::Type *)*((unsigned int *)this + 12);
  if (v9) {
    llvm::ArrayType::get(v2, v9);
  }
  if (*((_DWORD *)this + 10)) {
    llvm::ArrayType::get(v4, (llvm::Type *)2);
  }
  if (*((_DWORD *)this + 11)) {
    llvm::ArrayType::get(v6, (llvm::Type *)1);
  }
  uint64_t v10 = (llvm::Type *)*((unsigned int *)this + 10);
  if (v10)
  {
    llvm::ArrayType::get(v7, v10);
    uint64_t v11 = (llvm::Type *)*((unsigned int *)this + 10);
    if (v11) {
      llvm::ArrayType::get(v8, v11);
    }
  }
  uint64_t v12 = (llvm::Type *)*((unsigned int *)this + 11);
  if (v12) {
    llvm::ArrayType::get(v8, v12);
  }
  if (*((_DWORD *)this + 12) || *((_DWORD *)this + 10))
  {
    uint64_t v13 = *((void *)this + 19) + 104 * *((unsigned int *)this + 40) - 104;
  }
  else
  {
    uint64_t v13 = *((void *)this + 19) + 104 * *((unsigned int *)this + 40) - 104;
    if (!*((_DWORD *)this + 11))
    {
      uint64_t v14 = llvm::StructType::get();
      goto LABEL_16;
    }
  }
  uint64_t v14 = llvm::StructType::get();
LABEL_16:
  *(void *)(*(void *)v13 + 8 * *(unsigned int *)(v13 + 96)) = v14;
  return AGCArgumentBuffer::Tier1TypeBuilder::endConstantGroup((uint64_t)this);
}

void AGCArgumentBuffer::Resource::~Resource(AGCArgumentBuffer::Resource *this)
{
  *(void *)this = &unk_1F2598A00;
  uint64_t v2 = (char *)*((void *)this + 23);
  if (v2 != (char *)this + 200) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 2);
  if (v4 != (char *)this + 32) {
    free(v4);
  }
  JUMPOUT(0x1CB7A0780);
}

{
  char *v2;
  char *v3;
  char *v4;

  *(void *)this = &unk_1F2598A00;
  uint64_t v2 = (char *)*((void *)this + 23);
  if (v2 != (char *)this + 200) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 2);
  if (v4 != (char *)this + 32) {
    free(v4);
  }
}

void AGCArgumentBuffer::Constant::~Constant(AGCArgumentBuffer::Constant *this)
{
  *(void *)this = &unk_1F2598A00;
  uint64_t v2 = (char *)*((void *)this + 23);
  if (v2 != (char *)this + 200) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 2);
  if (v4 != (char *)this + 32) {
    free(v4);
  }
  JUMPOUT(0x1CB7A0780);
}

{
  char *v2;
  char *v3;
  char *v4;

  *(void *)this = &unk_1F2598A00;
  uint64_t v2 = (char *)*((void *)this + 23);
  if (v2 != (char *)this + 200) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 2);
  if (v4 != (char *)this + 32) {
    free(v4);
  }
}

void llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::grow()
{
}

__n128 AGCArgumentBuffer::ResourceTracker::pushArray(AGCArgumentBuffer::ResourceTracker *this, AGCArgumentBuffer::Array *a2, int a3)
{
  int v3 = *((_DWORD *)this + 72);
  *(void *)uint64_t v10 = a2;
  v10[8] = a3;
  *(void *)&v10[12] = 0;
  *(_DWORD *)&v10[20] = 0;
  *(_DWORD *)&v10[24] = v3;
  uint64_t v4 = *((unsigned int *)this + 2);
  unint64_t v5 = *(void *)this;
  if (v4 >= *((_DWORD *)this + 3))
  {
    BOOL v9 = v5 + 32 * v4 > (unint64_t)v10;
    if (v5 > (unint64_t)v10 || !v9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v6 = (_OWORD *)(v5 + 32 * *((unsigned int *)this + 2));
  __n128 result = *(__n128 *)v10;
  long long v8 = *(_OWORD *)&v10[16];
  *uint64_t v6 = *(_OWORD *)v10;
  v6[1] = v8;
  ++*((_DWORD *)this + 2);
  *((_DWORD *)this + 74) *= *((_DWORD *)a2 + 6);
  LODWORD(v6) = *((_DWORD *)this + 73) + a3;
  *((_DWORD *)this + 73) = v6 + 1;
  *((_DWORD *)a2 + 8) = v6;
  return result;
}

void AGCArgumentBuffer::parseMDStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int32x2_t *a7)
{
  uint64_t v12 = a1;
  v134[2] = *MEMORY[0x1E4F143B8];
  *(_WORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v119 = (std::string *)(a1 + 8);
  std::string::push_back((std::string *)(a1 + 8), 123);
  unint64_t v13 = *(unsigned int *)(a4 + 12);
  uint64_t v132 = v134;
  uint64_t v133 = 0x400000000;
  llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)&v132, v13, 0);
  uint64_t v15 = *(void *)a7 + 32 * a7[1].u32[0];
  if (!*(unsigned char *)(v15 - 16))
  {
    *(unsigned char *)(v15 - 16) = 1;
    *(_DWORD *)(v15 - 20) = a5;
  }
  a7[36] = vadd_s32(a7[36], (int32x2_t)0x100000001);
  uint64_t v118 = (void *)(a6 + 16);
  uint64_t v16 = *(unsigned int *)(a6 + 24);
  if (v16 != v13)
  {
    if (v16 <= v13)
    {
      if (*(_DWORD *)(a6 + 28) < v13)
      {
        __dst[0] = 0;
        llvm::SmallVectorBase<unsigned int>::mallocForGrow();
      }
      if (v16 != v13) {
        bzero((void *)(*v118 + 8 * v16), 8 * v13 - 8 * v16);
      }
    }
    else
    {
      uint64_t v17 = 8 * v13 - 8 * v16;
      uint64_t v18 = (uint64_t *)(*v118 + 8 * v16 - 8);
      do
      {
        uint64_t v19 = *v18;
        *uint64_t v18 = 0;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
        --v18;
        v17 += 8;
      }
      while (v17);
    }
    *(_DWORD *)(a6 + 24) = v13;
  }
  if (v13)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 8), v14);
      __dst[0] = llvm::ConstantInt::get();
      __dst[1] = llvm::ConstantInt::get();
      v132[i] = llvm::DataLayout::getIndexedOffsetInType();
    }
  }
  unsigned int v21 = *(_DWORD *)(a3 + 8);
  if (v21)
  {
    unsigned int v22 = 0;
    uint64_t v113 = a2;
    uint64_t v117 = v12;
    unsigned int v121 = *(_DWORD *)(a3 + 8);
    uint64_t v115 = a4;
    do
    {
      uint64_t v130 = 0;
      int v128 = -1;
      int v129 = 0;
      if (isStringMDNode(*(llvm::MDString **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * v22), "air.struct_type_info"))
      {
        uint64_t v23 = *(unsigned char **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * (v22 + 1));
        if (v23 && ((*v23 < 0x23uLL) & (0x7FFFFFFF0uLL >> *v23)) == 0) {
          uint64_t v23 = 0;
        }
        if (v23) {
          BOOL v24 = *(unsigned char *)v12 == 0;
        }
        else {
          BOOL v24 = 1;
        }
        char v25 = !v24;
        *(unsigned char *)uint64_t v12 = v25;
        v22 += 2;
      }
      LODWORD(__dst[0]) = v22;
      char v26 = parseMDInt(0, a3, (unsigned int *)__dst, (_DWORD *)&v130 + 1);
      if (*(unsigned char *)v12) {
        char v27 = v26;
      }
      else {
        char v27 = 0;
      }
      *(unsigned char *)uint64_t v12 = v27;
      LODWORD(__dst[0]) = v22 + 1;
      char v28 = parseMDInt(0, a3, (unsigned int *)__dst, &v130);
      if (*(unsigned char *)v12) {
        char v29 = v28;
      }
      else {
        char v29 = 0;
      }
      *(unsigned char *)uint64_t v12 = v29;
      unsigned int v30 = v22 + 3;
      LODWORD(__dst[0]) = v22 + 2;
      char v31 = parseMDInt(0, a3, (unsigned int *)__dst, &v129);
      if (*(unsigned char *)v12) {
        char v32 = v31;
      }
      else {
        char v32 = 0;
      }
      uint64_t v33 = a3 - 8 * *(unsigned int *)(a3 + 8);
      uint8x8_t v34 = *(unsigned char **)(v33 + 8 * v30);
      if (v34)
      {
        if (*v34) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = *(llvm::MDString **)(v33 + 8 * v30);
        }
      }
      else
      {
        uint64_t v35 = 0;
      }
      if (!v35) {
        char v32 = 0;
      }
      uint64_t v36 = *(llvm::MDString **)(v33 + 8 * (v22 + 4));
      if (v36)
      {
        if (*(unsigned char *)v36) {
          unint64_t v37 = 0;
        }
        else {
          unint64_t v37 = v36;
        }
      }
      else
      {
        unint64_t v37 = 0;
      }
      if (!v37) {
        char v32 = 0;
      }
      *(unsigned char *)uint64_t v12 = v32;
      uint64_t String = (_DWORD *)llvm::MDString::getString(v35);
      size_t __n = v39;
      llvm::MDString::getString(v37);
      unint64_t v40 = v133;
      if (v133)
      {
        unint64_t v41 = v132;
        do
        {
          unint64_t v42 = v40 >> 1;
          uint64_t v43 = (unsigned int *)&v41[4 * (v40 >> 1)];
          unsigned int v45 = *v43;
          int v44 = v43 + 1;
          v40 += ~(v40 >> 1);
          if (v45 < HIDWORD(v130)) {
            unint64_t v41 = v44;
          }
          else {
            unint64_t v40 = v42;
          }
        }
        while (v40);
      }
      else
      {
        unint64_t v41 = v132;
      }
      if (__n >= 7 && *String == 1801675120 && *(_DWORD *)((char *)String + 3) == 1600415083) {
        v129 *= *((char *)String + __n - 1) - 48;
      }
      uint64_t v47 = *(void *)(*(void *)(a4 + 16) + 8 * ((unint64_t)(v41 - (unsigned char *)v132) >> 2));
      if (*(unsigned char *)(v47 + 8) == 17) {
        operator new();
      }
      v22 += 5;
      while (v22 < v21)
      {
        char v48 = *(llvm::MDString **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * v22);
        if (isStringMDNode(v48, "air.render_target")
          || isStringMDNode(v48, "air.raster_order_group")
          || isStringMDNode(v48, "air.imageblock_index"))
        {
          v22 += 2;
        }
        else
        {
          if (!isStringMDNode(v48, "air.indirect_argument")) {
            break;
          }
          LODWORD(__dst[0]) = v22 + 1;
          if (parseMDInt(0, a3, (unsigned int *)__dst, &v128))
          {
            v128 += a5;
            operator new();
          }
          long long v49 = *(unsigned __int8 **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * (v22 + 1));
          if (v49)
          {
            unint64_t v50 = *v49;
            if (v50 <= 0x22 && ((0x7FFFFFFF0uLL >> v50) & 1) != 0)
            {
              uint64_t v52 = (char *)llvm::MDString::getString(*(llvm::MDString **)&v49[-8 * *((unsigned int *)v49 + 2) + 8]);
              int v127 = 0;
              __int16 v126 = 0;
              int v125 = 0;
              switch(v53)
              {
                case 10:
                  if (*(void *)v52 != 0x666675622E726961 || *((_WORD *)v52 + 4) != 29285) {
                    break;
                  }
                  goto LABEL_124;
                case 11:
                  if (*(void *)v52 == 0x747865742E726961 && *(void *)(v52 + 3) == 0x657275747865742ELL)
                  {
                    LOBYTE(__dst[0]) = 0;
                    LOBYTE(v124) = 0;
                    BOOL v103 = parseMDTexture((uint64_t)v49, &v128, &v127, (char *)__dst, (BOOL *)&v126 + 1, (BOOL *)&v124, &v126, &v125);
                    if (*(unsigned char *)v12) {
                      BOOL v104 = v103;
                    }
                    else {
                      BOOL v104 = 0;
                    }
                    *(unsigned char *)uint64_t v12 = v104;
                    v128 += a5;
                    if (HIBYTE(v126)) {
                      AGCArgumentBuffer::unwrapArray();
                    }
                    operator new();
                  }
                  if (*(void *)v52 == 0x706D61732E726961 && *(void *)(v52 + 3) == 0x72656C706D61732ELL)
                  {
                    char v57 = parseMDSampler((uint64_t)v49, &v128, &v127, (BOOL *)&v126 + 1);
                    if (*(unsigned char *)v12) {
                      char v58 = v57;
                    }
                    else {
                      char v58 = 0;
                    }
                    *(unsigned char *)uint64_t v12 = v58;
                    v128 += a5;
                    if (HIBYTE(v126)) {
                      AGCArgumentBuffer::unwrapArray();
                    }
                    operator new();
                  }
                  break;
                case 18:
                  if (*(void *)v52 != 0x6D6D6F632E726961
                    || *((void *)v52 + 1) != 0x666675625F646E61
                    || *((_WORD *)v52 + 8) != 29285)
                  {
                    break;
                  }
                  goto LABEL_210;
                case 19:
                  if (*(void *)v52 != 0x69646E692E726961
                    || *((void *)v52 + 1) != 0x6675625F74636572
                    || *(void *)(v52 + 11) != 0x7265666675625F74)
                  {
                    break;
                  }
LABEL_124:
                  HIBYTE(v126) = 0;
                  unsigned int v63 = *(_DWORD *)(v47 + 8);
                  if (v63 == 16 && *(unsigned char *)(**(void **)(v47 + 16) + 8) == 17)
                  {
                    LODWORD(__dst[0]) = 2;
                    unsigned int v124 = 0;
                    parseMDLocationIndex((uint64_t)v49, __dst, &v128, &v127);
                    uint64_t v64 = (LODWORD(__dst[0]) + 1);
                    LODWORD(__dst[0]) = v64;
                    if (isStringMDNode(*(llvm::MDString **)&v49[8 * v64 + -8 * *((unsigned int *)v49 + 2)], "air.address_space"))
                    {
                      parseMDInt("air.address_space", (uint64_t)v49, (unsigned int *)__dst, &v124);
                      uint64_t v64 = LODWORD(__dst[0]);
                    }
                    if (isStringMDNode(*(llvm::MDString **)&v49[8 * v64 + -8 * *((unsigned int *)v49 + 2)], "air.arg_type_name"))
                    {
                      LODWORD(__dst[0]) = v64 + 1;
                      uint64_t v65 = llvm::MDString::getString(*(llvm::MDString **)&v49[8 * (v64 + 1)
                                                                             + -8 * *((unsigned int *)v49 + 2)]);
                      BOOL v67 = v66 >= 5 && *(_DWORD *)v65 == 1634890337 && *(unsigned char *)(v65 + 4) == 121;
                      HIBYTE(v126) = v67;
                    }
                    AGCArgumentBuffer::unwrapArray();
                  }
                  if (v63 == 16) {
                    operator new();
                  }
                  int v123 = 0;
                  unsigned int v124 = 0;
                  __dst[0] = 0;
                  __int16 v122 = 0;
                  if ((v63 & 0xFE) == 0x12) {
                    unsigned int v63 = *(_DWORD *)(**(void **)(v47 + 16) + 8);
                  }
                  BOOL v106 = parseMDBuffer((uint64_t)v49, v63 >> 8, &v128, &v127, &v124, &v123, __dst, (char *)&v122, &v126, &v125, (char *)&v122 + 1);
                  if (*(unsigned char *)v12) {
                    BOOL v107 = v106;
                  }
                  else {
                    BOOL v107 = 0;
                  }
                  *(unsigned char *)uint64_t v12 = v107;
                  v128 += a5;
                  operator new();
                case 21:
                  if (*(void *)v52 == 0x69646E692E726961
                    && *((void *)v52 + 1) == 0x6E6F635F74636572
                    && *(void *)(v52 + 13) == 0x746E6174736E6F63)
                  {
                    BOOL v70 = isStringMDNode(*(llvm::MDString **)&v49[-8 * *((unsigned int *)v49 + 2) + 8], "air.indirect_constant");
                    if (v70)
                    {
                      unsigned int v71 = *((_DWORD *)v49 + 2);
                      LODWORD(__dst[0]) = 2;
                      if (v71 >= 3)
                      {
                        do
                        {
                          char v72 = parseMDLocationIndex((uint64_t)v49, __dst, &v128, &v127);
                          unsigned int v73 = __dst[0];
                          if ((v72 & 1) == 0) {
                            unsigned int v73 = ++LODWORD(__dst[0]);
                          }
                        }
                        while (v73 < v71);
                      }
                    }
                    if (*(unsigned char *)v12) {
                      BOOL v74 = v70;
                    }
                    else {
                      BOOL v74 = 0;
                    }
                    *(unsigned char *)uint64_t v12 = v74;
                    v128 += a5;
                    operator new();
                  }
                  break;
                case 23:
                  if (*(void *)v52 != 0x747065642E726961
                    || *((void *)v52 + 1) != 0x69636E6574735F68
                    || *(void *)(v52 + 15) != 0x65746174735F6C69)
                  {
                    break;
                  }
                  goto LABEL_210;
                case 25:
                  int v77 = v52[24];
                  BOOL v79 = *(void *)v52 == 0x646E65722E726961
                     && *((void *)v52 + 1) == 0x6C657069705F7265
                     && *((void *)v52 + 2) == 0x746174735F656E69;
                  int v80 = 101;
                  goto LABEL_181;
                case 26:
                  if (*(void *)v52 == 0x706D6F632E726961
                    && *((void *)v52 + 1) == 0x657069705F657475
                    && *((void *)v52 + 2) == 0x6174735F656E696CLL
                    && *((_WORD *)v52 + 12) == 25972)
                  {
                    goto LABEL_210;
                  }
                  int v77 = *((unsigned __int16 *)v52 + 12);
                  BOOL v79 = *(void *)v52 == 0x697369762E726961
                     && *((void *)v52 + 1) == 0x636E75665F656C62
                     && *((void *)v52 + 2) == 0x6261745F6E6F6974;
                  int v80 = 25964;
LABEL_181:
                  if (!v79 || v77 != v80) {
                    break;
                  }
                  goto LABEL_210;
                case 27:
                  uint64_t v86 = *(void *)(v52 + 19);
                  BOOL v88 = *(void *)v52 == 0x69646E692E726961
                     && *((void *)v52 + 1) == 0x6D6F635F74636572
                     && *((void *)v52 + 2) == 0x6675625F646E616DLL;
                  uint64_t v89 = 0x7265666675625F64;
                  goto LABEL_201;
                case 31:
                  uint64_t v86 = *(void *)(v52 + 23);
                  BOOL v88 = *(void *)v52 == 0x65746E692E726961
                     && *((void *)v52 + 1) == 0x6E6F697463657372
                     && *((void *)v52 + 2) == 0x6F6974636E75665FLL;
                  uint64_t v89 = 0x656C6261745F6E6FLL;
LABEL_201:
                  if (!v88 || v86 != v89) {
                    break;
                  }
                  goto LABEL_210;
                case 35:
                  __int16 v92 = "air.instance_acceleration_structure";
                  size_t v93 = 35;
                  goto LABEL_209;
                case 36:
                  __int16 v92 = "air.primitive_acceleration_structure";
                  size_t v93 = 36;
LABEL_209:
                  a2 = v113;
                  if (!memcmp(v52, v92, v93))
                  {
LABEL_210:
                    if (isStringMDNode(*(llvm::MDString **)&v49[-8 * *((unsigned int *)v49 + 2) + 8], "air.indirect_command_buffer")|| isStringMDNode(*(llvm::MDString **)&v49[-8 * *((unsigned int *)v49 + 2) + 8], "air.command_buffer")|| isStringMDNode(*(llvm::MDString **)&v49[-8 * *((unsigned int *)v49 + 2) + 8], "air.compute_pipeline_state")|| isStringMDNode(*(llvm::MDString **)&v49[-8 * *((unsigned int *)v49 + 2) + 8], "air.render_pipeline_state")|| isStringMDNode(*(llvm::MDString **)&v49[-8 * *((unsigned int *)v49 + 2) + 8], "air.visible_function_table")|| isStringMDNode(*(llvm::MDString **)&v49[-8 * *((unsigned int *)v49 + 2) + 8], "air.primitive_acceleration_structure")|| isStringMDNode(*(llvm::MDString **)&v49[-8 * *((unsigned int *)v49 + 2) + 8],
                           "air.instance_acceleration_structure")
                      || isStringMDNode(*(llvm::MDString **)&v49[-8 * *((unsigned int *)v49 + 2) + 8], "air.intersection_function_table")|| isStringMDNode(*(llvm::MDString **)&v49[-8 * *((unsigned int *)v49 + 2) + 8], "air.depth_stencil_state"))
                    {
                      BOOL v114 = 0;
                      HIBYTE(v126) = 0;
                      int v127 = 1;
                      unsigned int v94 = *((_DWORD *)v49 + 2);
                      LODWORD(__dst[0]) = 2;
                      if (v94 >= 3)
                      {
                        BOOL v114 = 0;
                        do
                        {
                          char v95 = parseMDLocationIndex((uint64_t)v49, __dst, &v128, &v127);
                          uint64_t v96 = LODWORD(__dst[0]);
                          if ((v95 & 1) == 0)
                          {
                            int v97 = ++LODWORD(__dst[0]);
                            if (isStringMDNode(*(llvm::MDString **)&v49[8 * v96 + -8 * *((unsigned int *)v49 + 2)], "air.arg_type_name"))
                            {
                              LODWORD(v96) = v96 + 2;
                              LODWORD(__dst[0]) = v96;
                              uint64_t v98 = llvm::MDString::getString(*(llvm::MDString **)&v49[8 * v97
                                                                                     + -8 * *((unsigned int *)v49 + 2)]);
                              if (v99 >= 5)
                              {
                                BOOL v101 = *(_DWORD *)v98 == 1634890337 && *(unsigned char *)(v98 + 4) == 121;
                                BOOL v114 = v101;
                              }
                              else
                              {
                                BOOL v114 = 0;
                              }
                            }
                            else
                            {
                              LODWORD(v96) = v96 + 1;
                            }
                            uint64_t v12 = v117;
                          }
                        }
                        while (v96 < v94);
                        HIBYTE(v126) = v114;
                      }
                      char v102 = 1;
                    }
                    else
                    {
                      BOOL v114 = 0;
                      char v102 = 0;
                    }
                    if (!*(unsigned char *)v12) {
                      char v102 = 0;
                    }
                    *(unsigned char *)uint64_t v12 = v102;
                    v128 += a5;
                    if (v114) {
                      AGCArgumentBuffer::unwrapArray();
                    }
                    operator new();
                  }
                  return;
                default:
                  break;
              }
              v22 += 2;
            }
          }
          unsigned int v21 = v121;
        }
      }
      a4 = v115;
    }
    while (v22 < v21);
  }
  std::string::push_back(v119, 125);
  if (*(unsigned char *)(v12 + 1))
  {
    uint64_t v108 = *(unsigned __int8 *)(v12 + 31);
    if ((v108 & 0x80u) == 0) {
      uint64_t v109 = v119;
    }
    else {
      uint64_t v109 = *(std::string **)(v12 + 8);
    }
    if ((v108 & 0x80u) != 0) {
      uint64_t v108 = *(void *)(v12 + 16);
    }
    if (v108)
    {
      unsigned __int16 v110 = -1;
      do
      {
        int v111 = v109->__r_.__value_.__s.__data_[0];
        uint64_t v109 = (std::string *)((char *)v109 + 1);
        unsigned __int16 v110 = crc_table[v111 ^ ((unsigned __int16)(v110 & 0xFF00) >> 8)] ^ (v110 << 8);
        --v108;
      }
      while (v108);
      int v112 = v110 | 0x7FE00000;
    }
    else
    {
      int v112 = 2145452031;
    }
    *(_DWORD *)a2 = v112;
  }
  a7[36] = vadd_s32(a7[36], (int32x2_t)-1);
  if (v132 != (_DWORD *)v134) {
    free(v132);
  }
}

uint64_t *AGCArgumentBuffer::ResourceTracker::popArray(uint64_t *this)
{
  uint64_t v1 = *this;
  uint64_t v2 = *((unsigned int *)this + 2);
  uint64_t v3 = *this + 32 * v2;
  uint64_t v4 = *(void *)(v3 - 32);
  int v5 = *(unsigned __int8 *)(v3 - 24);
  uint64_t v6 = *(void *)(v3 - 20);
  int v7 = *(_DWORD *)(v3 - 12);
  unsigned int v8 = *(_DWORD *)(v4 + 24);
  *((_DWORD *)this + 74) /= v8;
  int v9 = v7 - v6 + 1;
  *(_DWORD *)(v4 + 28) = v9;
  uint64_t v10 = (v2 - 1);
  *((_DWORD *)this + 2) = v10;
  if (v10)
  {
    uint64_t v11 = v1 + 32 * v10;
    if (!*(unsigned char *)(v11 - 16))
    {
      *(void *)(v11 - 20) = v6;
      unsigned int v8 = *(_DWORD *)(v4 + 24);
      int v9 = *(_DWORD *)(v4 + 28);
    }
    unsigned int v12 = v6 + v9 * v8 - 1;
    if (*(_DWORD *)(v11 - 12) > v12) {
      unsigned int v12 = *(_DWORD *)(v11 - 12);
    }
    *(_DWORD *)(v11 - 12) = v12;
  }
  if (v5) {
    int v13 = -2;
  }
  else {
    int v13 = -1;
  }
  *((_DWORD *)this + 73) += v13;
  return this;
}

uint64_t AGCArgumentBuffer::ResourceTracker::addResource(uint64_t this, AGCArgumentBuffer::Resource *a2, unsigned int *a3)
{
  uint64_t v3 = *(unsigned int *)(this + 8);
  if (v3 == 1)
  {
    unsigned int v4 = *((_DWORD *)a2 + 6);
  }
  else
  {
    uint64_t v14 = *(void *)this + 32 * v3;
    unsigned int v4 = *((_DWORD *)a2 + 6);
    unsigned int v15 = 1;
    uint64_t v16 = v14;
    do
    {
      uint64_t v18 = *(void *)(v16 - 32);
      v16 -= 32;
      uint64_t v17 = v18;
      if (v4 >= *((_DWORD *)a2 + 7)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v19 = (void *)(*((void *)a2 + 2) + 16 * v4);
      *uint64_t v19 = v17;
      v19[1] = v15;
      unsigned int v4 = *((_DWORD *)a2 + 6) + 1;
      *((_DWORD *)a2 + 6) = v4;
      v15 *= *(_DWORD *)(*(void *)(v14 - 32) + 24);
      uint64_t v14 = v16;
    }
    while (v16 != *(void *)this + 32);
  }
  unint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = (_OWORD *)(v5 + 16 * v4 - 16);
  if (v4) {
    BOOL v7 = (unint64_t)v6 > v5;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    unint64_t v8 = v5 + 16;
    do
    {
      long long v9 = *(_OWORD *)(v8 - 16);
      *(_OWORD *)(v8 - 16) = *v6;
      *v6-- = v9;
      BOOL v10 = v8 >= (unint64_t)v6;
      v8 += 16;
    }
    while (!v10);
  }
  uint64_t v11 = *(unsigned int *)(this + 8);
  uint64_t v12 = *(void *)this + 32 * v11;
  if (v11 == 1)
  {
    uint64_t v13 = *(void *)this + 32;
  }
  else
  {
    uint64_t v20 = 32 * v11 - 32;
    uint64_t v13 = *(void *)this + 32;
    while (*(_DWORD *)(v13 + 24) != *(_DWORD *)(this + 288))
    {
      v13 += 32;
      v20 -= 32;
      if (!v20)
      {
        uint64_t v13 = v12;
        break;
      }
    }
  }
  *((_DWORD *)a2 + 24) = (unint64_t)(v13 - (*(void *)this + 32)) >> 5;
  unsigned int v21 = *((_DWORD *)a2 + 58);
  if (!*(unsigned char *)(v12 - 16))
  {
    *(unsigned char *)(v12 - 16) = 1;
    *(_DWORD *)(v12 - 20) = v21;
  }
  if (*(_DWORD *)(v12 - 12) > v21) {
    unsigned int v21 = *(_DWORD *)(v12 - 12);
  }
  *(_DWORD *)(v12 - 12) = v21;
  *((_DWORD *)a2 + 59) = *a3;
  int v22 = *(_DWORD *)(this + 296);
  *((_DWORD *)a2 + 60) = v22;
  *a3 += v22;
  return this;
}

void bufferTypeMap(void)
{
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  {
    std::string::basic_string[abi:nn180100]<0>(v2, "float");
    int v3 = 3;
    std::string::basic_string[abi:nn180100]<0>(v4, "float2");
    int v5 = 4;
    std::string::basic_string[abi:nn180100]<0>(v6, "float3");
    int v7 = 5;
    std::string::basic_string[abi:nn180100]<0>(v8, "float4");
    int v9 = 6;
    std::string::basic_string[abi:nn180100]<0>(v10, "packed_float");
    int v11 = 3;
    std::string::basic_string[abi:nn180100]<0>(v12, "packed_float2");
    int v13 = 4;
    std::string::basic_string[abi:nn180100]<0>(v14, "packed_float3");
    int v15 = 5;
    std::string::basic_string[abi:nn180100]<0>(v16, "packed_float4");
    int v17 = 6;
    std::string::basic_string[abi:nn180100]<0>(v18, "half");
    int v19 = 16;
    std::string::basic_string[abi:nn180100]<0>(v20, "half2");
    int v21 = 17;
    std::string::basic_string[abi:nn180100]<0>(v22, "half3");
    int v23 = 18;
    std::string::basic_string[abi:nn180100]<0>(v24, "half4");
    int v25 = 19;
    std::string::basic_string[abi:nn180100]<0>(v26, "packed_half");
    int v27 = 16;
    std::string::basic_string[abi:nn180100]<0>(v28, "packed_half2");
    int v29 = 17;
    std::string::basic_string[abi:nn180100]<0>(v30, "packed_half3");
    int v31 = 18;
    std::string::basic_string[abi:nn180100]<0>(v32, "packed_half4");
    int v33 = 19;
    std::string::basic_string[abi:nn180100]<0>(v34, "int");
    int v35 = 29;
    std::string::basic_string[abi:nn180100]<0>(v36, "int2");
    int v37 = 30;
    std::string::basic_string[abi:nn180100]<0>(v38, "int3");
    int v39 = 31;
    std::string::basic_string[abi:nn180100]<0>(v40, "int4");
    int v41 = 32;
    std::string::basic_string[abi:nn180100]<0>(v42, "packed_int");
    int v43 = 29;
    std::string::basic_string[abi:nn180100]<0>(v44, "packed_int2");
    int v45 = 30;
    std::string::basic_string[abi:nn180100]<0>(v46, "packed_int3");
    int v47 = 31;
    std::string::basic_string[abi:nn180100]<0>(v48, "packed_int4");
    int v49 = 32;
    std::string::basic_string[abi:nn180100]<0>(v50, "uint");
    int v51 = 33;
    std::string::basic_string[abi:nn180100]<0>(v52, "uint2");
    int v53 = 34;
    std::string::basic_string[abi:nn180100]<0>(v54, "uint3");
    int v55 = 35;
    std::string::basic_string[abi:nn180100]<0>(v56, "uint4");
    int v57 = 36;
    std::string::basic_string[abi:nn180100]<0>(v58, "packed_uint");
    int v59 = 33;
    std::string::basic_string[abi:nn180100]<0>(v60, "packed_uint2");
    int v61 = 34;
    std::string::basic_string[abi:nn180100]<0>(v62, "packed_uint3");
    int v63 = 35;
    std::string::basic_string[abi:nn180100]<0>(v64, "packed_uint4");
    int v65 = 36;
    std::string::basic_string[abi:nn180100]<0>(v66, "short");
    int v67 = 37;
    std::string::basic_string[abi:nn180100]<0>(v68, "short2");
    int v69 = 38;
    std::string::basic_string[abi:nn180100]<0>(v70, "short3");
    int v71 = 39;
    std::string::basic_string[abi:nn180100]<0>(v72, "short4");
    int v73 = 40;
    std::string::basic_string[abi:nn180100]<0>(v74, "packed_short");
    int v75 = 37;
    std::string::basic_string[abi:nn180100]<0>(v76, "packed_short2");
    int v77 = 38;
    std::string::basic_string[abi:nn180100]<0>(v78, "packed_short3");
    int v79 = 39;
    std::string::basic_string[abi:nn180100]<0>(v80, "packed_short4");
    int v81 = 40;
    std::string::basic_string[abi:nn180100]<0>(v82, "ushort");
    int v83 = 41;
    std::string::basic_string[abi:nn180100]<0>(v84, "ushort2");
    int v85 = 42;
    std::string::basic_string[abi:nn180100]<0>(v86, "ushort3");
    int v87 = 43;
    std::string::basic_string[abi:nn180100]<0>(v88, "ushort4");
    int v89 = 44;
    std::string::basic_string[abi:nn180100]<0>(v90, "packed_ushort");
    int v91 = 41;
    std::string::basic_string[abi:nn180100]<0>(v92, "packed_ushort2");
    int v93 = 42;
    std::string::basic_string[abi:nn180100]<0>(v94, "packed_ushort3");
    int v95 = 43;
    std::string::basic_string[abi:nn180100]<0>(v96, "packed_ushort4");
    int v97 = 44;
    std::string::basic_string[abi:nn180100]<0>(v98, "char");
    int v99 = 45;
    std::string::basic_string[abi:nn180100]<0>(v100, "char2");
    int v101 = 46;
    std::string::basic_string[abi:nn180100]<0>(v102, "char3");
    int v103 = 47;
    std::string::basic_string[abi:nn180100]<0>(v104, "char4");
    int v105 = 48;
    std::string::basic_string[abi:nn180100]<0>(v106, "packed_char");
    int v107 = 45;
    std::string::basic_string[abi:nn180100]<0>(v108, "packed_char2");
    int v109 = 46;
    std::string::basic_string[abi:nn180100]<0>(v110, "packed_char3");
    int v111 = 47;
    std::string::basic_string[abi:nn180100]<0>(v112, "packed_char4");
    int v113 = 48;
    std::string::basic_string[abi:nn180100]<0>(v114, "uchar");
    int v115 = 49;
    std::string::basic_string[abi:nn180100]<0>(v116, "uchar2");
    int v117 = 50;
    std::string::basic_string[abi:nn180100]<0>(v118, "uchar3");
    int v119 = 51;
    std::string::basic_string[abi:nn180100]<0>(v120, "uchar4");
    int v121 = 52;
    std::string::basic_string[abi:nn180100]<0>(v122, "packed_uchar");
    int v123 = 49;
    std::string::basic_string[abi:nn180100]<0>(v124, "packed_uchar2");
    int v125 = 50;
    std::string::basic_string[abi:nn180100]<0>(v126, "packed_uchar3");
    int v127 = 51;
    std::string::basic_string[abi:nn180100]<0>(v128, "packed_uchar4");
    int v129 = 52;
    std::string::basic_string[abi:nn180100]<0>(v130, "BOOL");
    int v131 = 53;
    std::string::basic_string[abi:nn180100]<0>(v132, "BOOL2");
    int v133 = 54;
    std::string::basic_string[abi:nn180100]<0>(v134, "BOOL3");
    int v135 = 55;
    std::string::basic_string[abi:nn180100]<0>(v136, "BOOL4");
    int v137 = 56;
    std::string::basic_string[abi:nn180100]<0>(v138, "packed_BOOL");
    int v139 = 53;
    std::string::basic_string[abi:nn180100]<0>(v140, "packed_BOOL2");
    int v141 = 54;
    std::string::basic_string[abi:nn180100]<0>(v142, "packed_BOOL3");
    int v143 = 55;
    std::string::basic_string[abi:nn180100]<0>(v144, "packedBOOL");
    int v145 = 56;
    std::string::basic_string[abi:nn180100]<0>(v146, "float2x2");
    int v147 = 7;
    std::string::basic_string[abi:nn180100]<0>(v148, "float2x3");
    int v149 = 8;
    std::string::basic_string[abi:nn180100]<0>(v150, "float2x4");
    int v151 = 9;
    std::string::basic_string[abi:nn180100]<0>(v152, "float3x2");
    int v153 = 10;
    std::string::basic_string[abi:nn180100]<0>(v154, "float3x3");
    int v155 = 11;
    std::string::basic_string[abi:nn180100]<0>(v156, "float3x4");
    int v157 = 12;
    std::string::basic_string[abi:nn180100]<0>(v158, "float4x2");
    int v159 = 13;
    std::string::basic_string[abi:nn180100]<0>(v160, "float4x3");
    int v161 = 14;
    std::string::basic_string[abi:nn180100]<0>(v162, "float4x4");
    int v163 = 15;
    std::string::basic_string[abi:nn180100]<0>(v164, "half2x2");
    int v165 = 20;
    std::string::basic_string[abi:nn180100]<0>(v166, "half2x3");
    int v167 = 21;
    std::string::basic_string[abi:nn180100]<0>(v168, "half2x4");
    int v169 = 22;
    std::string::basic_string[abi:nn180100]<0>(v170, "half3x2");
    int v171 = 23;
    std::string::basic_string[abi:nn180100]<0>(v172, "half3x3");
    int v173 = 24;
    std::string::basic_string[abi:nn180100]<0>(v174, "half3x4");
    int v175 = 25;
    std::string::basic_string[abi:nn180100]<0>(v176, "half4x2");
    int v177 = 26;
    std::string::basic_string[abi:nn180100]<0>(v178, "half4x3");
    int v179 = 27;
    std::string::basic_string[abi:nn180100]<0>(v180, "half4x4");
    uint64_t v0 = 0;
    int v181 = 28;
    qword_1EA6125B0 = 0;
    qword_1EA6125A8 = 0;
    bufferTypeMap(void)::localBufferTypeMap = (uint64_t)&qword_1EA6125A8;
    do
    {
      std::__tree<std::__value_type<std::string,MTLCompilerDataType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerDataType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerDataType>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MTLCompilerDataType> const&>((uint64_t)&bufferTypeMap(void)::localBufferTypeMap, &qword_1EA6125A8, &v2[v0], (uint64_t)&v2[v0]);
      v0 += 4;
    }
    while (v0 != 360);
    uint64_t v1 = 360;
    do
    {
      if (*((char *)&v2[v1 - 1] - 1) < 0) {
        operator delete((void *)v2[v1 - 4]);
      }
      v1 -= 4;
    }
    while (v1 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,MTLCompilerDataType>::~map[abi:nn180100], &bufferTypeMap(void)::localBufferTypeMap, &dword_1CAC02000);
  }
}

void *std::__tree<std::__value_type<std::string,MTLCompilerDataType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerDataType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerDataType>>>::find<std::string>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  int v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = std::less<std::string>::operator()[abi:nn180100](v3 + 4, a2);
    int v7 = v3 + 1;
    if (!v6)
    {
      int v7 = v3;
      int v5 = v3;
    }
    int v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<std::string>::operator()[abi:nn180100](a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

void pixelTypeMap(void)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  {
    std::string::basic_string[abi:nn180100]<0>(v2, "r8unorm");
    int v3 = 62;
    std::string::basic_string[abi:nn180100]<0>(v4, "r8snorm");
    int v5 = 63;
    std::string::basic_string[abi:nn180100]<0>(v6, "r16unorm");
    int v7 = 64;
    std::string::basic_string[abi:nn180100]<0>(v8, "r16snorm");
    int v9 = 65;
    std::string::basic_string[abi:nn180100]<0>(v10, "rg8unorm");
    int v11 = 66;
    std::string::basic_string[abi:nn180100]<0>(v12, "rg8snorm");
    int v13 = 67;
    std::string::basic_string[abi:nn180100]<0>(v14, "rg16unorm");
    int v15 = 68;
    std::string::basic_string[abi:nn180100]<0>(v16, "rg16snorm");
    int v17 = 69;
    std::string::basic_string[abi:nn180100]<0>(v18, "rgba8unorm");
    int v19 = 70;
    std::string::basic_string[abi:nn180100]<0>(v20, "srgba8unorm");
    int v21 = 71;
    std::string::basic_string[abi:nn180100]<0>(v22, "rgba8snorm");
    int v23 = 72;
    std::string::basic_string[abi:nn180100]<0>(v24, "rgba16unorm");
    int v25 = 73;
    std::string::basic_string[abi:nn180100]<0>(v26, "rgba16snorm");
    int v27 = 74;
    std::string::basic_string[abi:nn180100]<0>(v28, "rgb10a2");
    int v29 = 75;
    std::string::basic_string[abi:nn180100]<0>(v30, "rg11b10f");
    int v31 = 76;
    std::string::basic_string[abi:nn180100]<0>(v32, "rgb9e5");
    uint64_t v0 = 0;
    int v33 = 77;
    qword_1EA613810 = 0;
    qword_1EA613808 = 0;
    pixelTypeMap(void)::localPixelFormatTypeMap = (uint64_t)&qword_1EA613808;
    do
    {
      std::__tree<std::__value_type<std::string,MTLCompilerDataType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerDataType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerDataType>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MTLCompilerDataType> const&>((uint64_t)&pixelTypeMap(void)::localPixelFormatTypeMap, &qword_1EA613808, &v2[v0], (uint64_t)&v2[v0]);
      v0 += 4;
    }
    while (v0 != 64);
    uint64_t v1 = 64;
    do
    {
      if (*((char *)&v2[v1 - 1] - 1) < 0) {
        operator delete((void *)v2[v1 - 4]);
      }
      v1 -= 4;
    }
    while (v1 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,MTLCompilerDataType>::~map[abi:nn180100], &pixelTypeMap(void)::localPixelFormatTypeMap, &dword_1CAC02000);
  }
}

void AGCArgumentBuffer::unwrapArray()
{
}

void AGCArgumentBuffer::Sampler::~Sampler(AGCArgumentBuffer::Sampler *this)
{
  *(void *)this = &unk_1F2598A00;
  uint64_t v2 = (char *)*((void *)this + 23);
  if (v2 != (char *)this + 200) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unsigned int v4 = (char *)*((void *)this + 2);
  if (v4 != (char *)this + 32) {
    free(v4);
  }
  JUMPOUT(0x1CB7A0780);
}

{
  char *v2;
  char *v3;
  char *v4;

  *(void *)this = &unk_1F2598A00;
  uint64_t v2 = (char *)*((void *)this + 23);
  if (v2 != (char *)this + 200) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unsigned int v4 = (char *)*((void *)this + 2);
  if (v4 != (char *)this + 32) {
    free(v4);
  }
}

void AGCArgumentBuffer::Texture::~Texture(AGCArgumentBuffer::Texture *this)
{
  *(void *)this = &unk_1F2598A00;
  uint64_t v2 = (char *)*((void *)this + 23);
  if (v2 != (char *)this + 200) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unsigned int v4 = (char *)*((void *)this + 2);
  if (v4 != (char *)this + 32) {
    free(v4);
  }
  JUMPOUT(0x1CB7A0780);
}

{
  char *v2;
  char *v3;
  char *v4;

  *(void *)this = &unk_1F2598A00;
  uint64_t v2 = (char *)*((void *)this + 23);
  if (v2 != (char *)this + 200) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unsigned int v4 = (char *)*((void *)this + 2);
  if (v4 != (char *)this + 32) {
    free(v4);
  }
}

void AGCArgumentBuffer::DummyStruct::~DummyStruct(AGCArgumentBuffer::DummyStruct *this)
{
  *(void *)this = &unk_1F2598A20;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F2598A20;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void AGCArgumentBuffer::Buffer::~Buffer(AGCArgumentBuffer::Buffer *this)
{
  *(void *)this = &unk_1F2598A00;
  uint64_t v2 = (char *)*((void *)this + 23);
  if (v2 != (char *)this + 200) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unsigned int v4 = (char *)*((void *)this + 2);
  if (v4 != (char *)this + 32) {
    free(v4);
  }
  JUMPOUT(0x1CB7A0780);
}

{
  char *v2;
  char *v3;
  char *v4;

  *(void *)this = &unk_1F2598A00;
  uint64_t v2 = (char *)*((void *)this + 23);
  if (v2 != (char *)this + 200) {
    free(v2);
  }
  int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unsigned int v4 = (char *)*((void *)this + 2);
  if (v4 != (char *)this + 32) {
    free(v4);
  }
}

uint64_t std::__tree<std::__value_type<std::string,MTLCompilerDataType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerDataType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerDataType>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MTLCompilerDataType> const&>(uint64_t result, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = (void *)(result + 8);
  if ((void *)(result + 8) != a2)
  {
    __n128 result = std::less<std::string>::operator()[abi:nn180100](a3, a2 + 4);
    if (!result)
    {
      __n128 result = std::less<std::string>::operator()[abi:nn180100](a2 + 4, a3);
      if (!result)
      {
        int v22 = a2;
        int v23 = a2;
        uint64_t v14 = &v22;
        if (a2) {
          return result;
        }
        goto LABEL_31;
      }
      uint64_t v12 = a2[1];
      if (v12)
      {
        int v13 = (void *)a2[1];
        do
        {
          uint64_t v14 = v13;
          int v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        int v17 = a2;
        do
        {
          uint64_t v14 = (void *)v17[2];
          BOOL v16 = *v14 == (void)v17;
          int v17 = v14;
        }
        while (!v16);
      }
      if (v14 == v8 || (__n128 result = std::less<std::string>::operator()[abi:nn180100](a3, v14 + 4), result))
      {
        if (v12)
        {
          int v23 = v14;
        }
        else
        {
          int v23 = a2;
          uint64_t v14 = a2 + 1;
        }
LABEL_30:
        if (*v14) {
          return result;
        }
        goto LABEL_31;
      }
LABEL_29:
      __n128 result = (uint64_t)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v7, &v23, a3);
      uint64_t v14 = (void *)result;
      goto LABEL_30;
    }
  }
  uint64_t v9 = *a2;
  if (*(void **)v7 != a2)
  {
    if (v9)
    {
      BOOL v10 = (void *)*a2;
      do
      {
        int v11 = v10;
        BOOL v10 = (void *)v10[1];
      }
      while (v10);
    }
    else
    {
      int v15 = a2;
      do
      {
        int v11 = (void *)v15[2];
        BOOL v16 = *v11 == (void)v15;
        int v15 = v11;
      }
      while (v16);
    }
    __n128 result = std::less<std::string>::operator()[abi:nn180100](v11 + 4, a3);
    if (result) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
  int v11 = a2;
LABEL_17:
  if (v9)
  {
    int v23 = v11;
    uint64_t v14 = v11 + 1;
    goto LABEL_30;
  }
  int v23 = a2;
  uint64_t v14 = a2;
LABEL_31:
  uint64_t v18 = (char *)operator new(0x40uLL);
  int v19 = (std::string *)(v18 + 32);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *((void *)v18 + 6) = *(void *)(a4 + 16);
  }
  *((_DWORD *)v18 + 14) = *(_DWORD *)(a4 + 24);
  uint64_t v20 = v23;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = v20;
  *uint64_t v14 = v18;
  uint64_t v21 = **(void **)v7;
  if (v21)
  {
    *(void *)uint64_t v7 = v21;
    uint64_t v18 = (char *)*v14;
  }
  __n128 result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), (uint64_t *)v18);
  ++*(void *)(v7 + 16);
  return result;
}

uint64_t std::map<std::string,MTLCompilerDataType>::~map[abi:nn180100](uint64_t a1)
{
  return a1;
}

void AGCArgumentBuffer::Struct::~Struct(char **this)
{
  *this = (char *)&unk_1F25C47B8;
  llvm::SmallVector<std::unique_ptr<AGCArgumentBuffer::Field>,4u>::~SmallVector(this + 2);
  JUMPOUT(0x1CB7A0780);
}

{
  *this = (char *)&unk_1F25C47B8;
  llvm::SmallVector<std::unique_ptr<AGCArgumentBuffer::Field>,4u>::~SmallVector(this + 2);
}

char **llvm::SmallVector<std::unique_ptr<AGCArgumentBuffer::Field>,4u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    int v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v4 -= 8;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void AGCArgumentBuffer::Root::~Root(char **this)
{
  *this = (char *)&unk_1F25C47B8;
  llvm::SmallVector<std::unique_ptr<AGCArgumentBuffer::Field>,4u>::~SmallVector(this + 2);
  JUMPOUT(0x1CB7A0780);
}

{
  *this = (char *)&unk_1F25C47B8;
  llvm::SmallVector<std::unique_ptr<AGCArgumentBuffer::Field>,4u>::~SmallVector(this + 2);
}

void AGCArgumentBuffer::Array::~Array(AGCArgumentBuffer::Array *this)
{
  *(void *)this = &unk_1F2598A40;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F2598A40;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

uint64_t AGCArgumentBuffer::AGCArgumentBuffer(uint64_t a1, AGCArgumentBuffer::Struct *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = a7;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  uint64_t v9 = AGCArgumentBuffer::parseMDRoot(a1, a5, a6);
  *(void *)(a1 + 32) = v9;
  if (*((unsigned char *)a2 + 1755))
  {
    int v11 = *(AGCArgumentBuffer::Struct **)(a1 + 8);
    v15[0] = (AGCArgumentBuffer::Struct *)v9;
    v15[1] = a2;
    void v15[2] = v11;
    v15[3] = (AGCArgumentBuffer::Struct *)llvm::Type::getInt32Ty(v11, v10);
    v15[4] = (AGCArgumentBuffer::Struct *)llvm::Type::getInt64Ty(v11, v12);
    uint64_t v16 = 0;
    int v17 = 0;
    uint64_t v18 = v20;
    uint64_t v19 = 0x400000000;
    uint64_t v21 = v23;
    uint64_t v22 = 0x400000000;
    BOOL v24 = v26;
    uint64_t v25 = 0x800000000;
    int v27 = v29;
    uint64_t v28 = 0x800000000;
    v30[0] = v31;
    v30[1] = (void *)0x400000000;
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v30, 0);
    v32[0] = v33;
    v32[1] = (void *)0x400000000;
    uint64_t v34 = v36;
    uint64_t v35 = 0x400000000;
    v36[8] = 0;
    llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::push_back((uint64_t)&v24, v32);
    if (v34 != v36) {
      free(v34);
    }
    if (v32[0] != v33) {
      free(v32[0]);
    }
    uint64_t v16 = 0;
    int v17 = 0;
    int v13 = (char *)v24 + 104 * v25;
    *((_DWORD *)v13 - 2) = *((_DWORD *)v13 - 24);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)(v13 - 104), 0);
    AGCArgumentBuffer::Tier1TypeBuilder::buildStruct((AGCArgumentBuffer::Tier1TypeBuilder *)v15, v15[0]);
    *(void *)(a1 + 40) = *(void *)(*((void *)v24 + 13 * v25 - 13) + 8);
    if (v30[0] != v31) {
      free(v30[0]);
    }
    if (v27 != v29) {
      free(v27);
    }
    llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::destroy_range((char *)v24, (char *)v24 + 104 * v25);
    if (v24 != v26) {
      free(v24);
    }
    if (v21 != v23) {
      free(v21);
    }
    if (v18 != v20) {
      free(v18);
    }
  }
  return a1;
}

AGCArgumentBuffer *AGCArgumentBuffer::lookup(AGCArgumentBuffer *this, const llvm::GetElementPtrInst *a2, const llvm::Use **a3, BOOL *a4)
{
  *a4 = 1;
  uint64_t v6 = (const llvm::GetElementPtrInst *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 64);
  if (v6 < a2)
  {
    BOOL v9 = 1;
    do
    {
      uint64_t v10 = *(void *)v6;
      if (*(void *)v6) {
        BOOL v11 = *(unsigned char *)(*(void *)v6 + 16) == 16;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11)
      {
        int v13 = (llvm::APInt *)(v10 + 24);
        unsigned int v14 = *(_DWORD *)(v10 + 32);
        if (v14 > 0x40) {
          BOOL v15 = llvm::APInt::countLeadingZerosSlowCase(v13) == v14;
        }
        else {
          BOOL v15 = *(void *)v13 == 0;
        }
        char v12 = v15;
      }
      else
      {
        char v12 = 0;
      }
      if (v9) {
        BOOL v9 = v12;
      }
      else {
        BOOL v9 = 0;
      }
      *a4 = v9;
      int v16 = *((_DWORD *)this + 2);
      if ((v16 - 3) < 0xFFFFFFFE || this == 0)
      {
        BOOL v18 = v16 != 3 || this == 0;
        if (v18 && (v16 || !this))
        {
          if ((v16 - 5) >= 2) {
            break;
          }
        }
        else
        {
          this = (AGCArgumentBuffer *)*((void *)this + 2);
        }
      }
      else
      {
        uint64_t v19 = (unsigned int *)(v10 + 24);
        if (*(_DWORD *)(v10 + 32) >= 0x41u) {
          uint64_t v19 = *(unsigned int **)v19;
        }
        this = *(AGCArgumentBuffer **)(*((void *)this + 2) + 8 * *v19);
        if (!this) {
          return this;
        }
      }
      uint64_t v6 = (const llvm::Use *)((char *)v6 + 32);
    }
    while (v6 < a2);
  }
  *a3 = v6;
  return this;
}

llvm::Value *AGCArgumentBuffer::Resource::getResourceId(uint64_t a1, llvm::Type **a2, uint64_t a3)
{
  llvm::Type::getInt32Ty(a2[8], (llvm::LLVMContext *)a2);
  uint64_t Add = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = v9 + 16 * v8;
    do
    {
      BOOL v11 = *(llvm::Type ***)(a3
                            + 32
                            - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)
                            + 32 * *(unsigned int *)(*(void *)v9 + 32));
      Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty(a2[8], v6);
      __int16 v19 = 257;
      ZExtOrTrunc = llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)a2, v11, Int32Ty, (const llvm::Twine *)v18);
      llvm::Type::getInt32Ty(a2[8], v14);
      BOOL v15 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v19 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)a2, v15, (llvm::Value *)ZExtOrTrunc, (const llvm::Twine *)v18);
      __int16 v19 = 257;
      uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)a2, Add, Mul, (const llvm::Twine *)v18);
      v9 += 16;
    }
    while (v9 != v10);
  }
  return Add;
}

unint64_t AGCArgumentBuffer::Resource::getResourceIdBounds(AGCArgumentBuffer::Resource *this, llvm::GetElementPtrInst *a2)
{
  uint64_t v2 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  uint64_t v5 = *((void *)v2 + 4);
  uint64_t v4 = v2 + 32;
  uint64_t v3 = v5;
  int v6 = *(unsigned __int8 *)(v5 + 16);
  if (v5) {
    BOOL v7 = v6 == 16;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    goto LABEL_8;
  }
  uint64_t v9 = (llvm::APInt *)(v3 + 24);
  unsigned int v10 = *(_DWORD *)(v3 + 32);
  if (v10 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v9) != v10) {
      goto LABEL_8;
    }
  }
  else if (*(void *)v9)
  {
LABEL_8:
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    return v12 | v11;
  }
  uint64_t v13 = *((unsigned int *)this + 6);
  if (v13)
  {
    LODWORD(v11) = 0;
    int v14 = 0;
    uint64_t v15 = 16 * v13;
    int v16 = (_DWORD *)(*((void *)this + 2) + 8);
    do
    {
      uint64_t v17 = *((void *)v16 - 1);
      uint64_t v18 = *(void *)&v4[32 * *(unsigned int *)(v17 + 32)];
      if (v18) {
        BOOL v19 = *(unsigned char *)(v18 + 16) == 16;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19)
      {
        uint64_t v20 = (void *)(v18 + 24);
        if (*(_DWORD *)(v18 + 32) >= 0x41u) {
          uint64_t v20 = (void *)*v20;
        }
        LODWORD(v11) = v11 + *v16 * *(_DWORD *)v20;
      }
      else
      {
        v14 += (*(_DWORD *)(v17 + 24) - 1) * *v16;
      }
      v16 += 4;
      v15 -= 16;
    }
    while (v15);
  }
  else
  {
    int v14 = 0;
    LODWORD(v11) = 0;
  }
  unint64_t v12 = v11 & 0xFFFFFF00 | ((unint64_t)(v11 + v14) << 32);
  uint64_t v11 = v11;
  return v12 | v11;
}

llvm::Value *AGCArgumentBuffer::Resource::getResourceArrayIndex(uint64_t a1, llvm::Type **a2, void *a3)
{
  llvm::Type::getInt32Ty(a2[8], (llvm::LLVMContext *)a2);
  uint64_t Add = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v8 = *(int *)(a1 + 96);
  if (v8 != *(_DWORD *)(a1 + 24))
  {
    uint64_t v9 = *(void *)(a1 + 16) + 16 * v8;
    do
    {
      unsigned int v10 = *(llvm::Type ***)(*a3 + 8 * *(unsigned int *)(*(void *)v9 + 32));
      Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty(a2[8], v6);
      __int16 v18 = 257;
      ZExtOrTrunc = llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)a2, v10, Int32Ty, (const llvm::Twine *)v17);
      llvm::Type::getInt32Ty(a2[8], v13);
      int v14 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v18 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)a2, (llvm::Value *)ZExtOrTrunc, v14, (const llvm::Twine *)v17);
      __int16 v18 = 257;
      uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)a2, Add, Mul, (const llvm::Twine *)v17);
      v9 += 16;
    }
    while (v9 != *(void *)(a1 + 16) + 16 * *(unsigned int *)(a1 + 24));
  }
  return Add;
}

llvm::Value *AGCArgumentBuffer::Buffer::remapToTier1Indices(void *a1, uint64_t a2, llvm::Type **a3, void *a4)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 112)) {
    llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)a1, a2 + 104);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 192);
  if (v8)
  {
    uint64_t v9 = *(unsigned int **)(a2 + 184);
    unsigned int v10 = &v9[2 * v8];
    do
    {
      uint64_t v11 = *v9;
      uint64_t v12 = v9[1];
      v9 += 2;
      *(void *)(*a1 + 8 * v12) = *(void *)(*a4 + 8 * v11);
    }
    while (v9 != v10);
  }
  __n128 result = AGCArgumentBuffer::Resource::getResourceArrayIndex(a2, a3, a4);
  *(void *)(*a1 + 8 * *((unsigned int *)a1 + 2) - 8) = result;
  return result;
}

uint64_t AGCArgumentBuffer::Sampler::typeSet(AGCArgumentBuffer::Sampler *this, AGCLLVMTargetLowerer *a2, llvm::LLVMContext *a3)
{
  *(void *)this = (char *)this + 16;
  *((void *)this + 1) = 0x300000000;
  Int64Ty = (llvm::ArrayType *)llvm::Type::getInt64Ty(a3, a2);
  uint64_t v7 = llvm::ArrayType::get(Int64Ty, (llvm::Type *)*((unsigned int *)a2 + 427));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, v7);
  uint64_t v9 = llvm::Type::getInt64Ty(a3, v8);
  return llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, v9);
}

uint64_t AGCArgumentBuffer::Texture::typeSet(AGCArgumentBuffer::Texture *this, AGCLLVMTargetLowerer *a2, llvm::LLVMContext *a3)
{
  *(void *)this = (char *)this + 16;
  *((void *)this + 1) = 0x400000000;
  Int64Ty = (llvm::ArrayType *)llvm::Type::getInt64Ty(a3, a2);
  uint64_t v7 = llvm::ArrayType::get(Int64Ty, (llvm::Type *)*((unsigned int *)a2 + 426));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, v7);
  uint64_t v9 = (llvm::ArrayType *)llvm::Type::getInt64Ty(a3, v8);
  uint64_t v10 = llvm::ArrayType::get(v9, (llvm::Type *)*((unsigned int *)a2 + 426));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, v10);
  Int32Ty = (llvm::ArrayType *)llvm::Type::getInt32Ty(a3, v11);
  uint64_t v13 = llvm::ArrayType::get(Int32Ty, (llvm::Type *)*((unsigned int *)a2 + 439));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, v13);
  uint64_t v15 = llvm::Type::getInt64Ty(a3, v14);
  return llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, v15);
}

void *AGCArgumentBuffer::Constant::remapToTier1Indices(void *result, uint64_t a2, void *a3)
{
  *__n128 result = result + 2;
  result[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 112)) {
    __n128 result = (void *)llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)result, a2 + 104);
  }
  uint64_t v5 = *(unsigned int *)(a2 + 192);
  if (v5)
  {
    int v6 = *(unsigned int **)(a2 + 184);
    uint64_t v7 = &v6[2 * v5];
    do
    {
      uint64_t v8 = *v6;
      uint64_t v9 = v6[1];
      v6 += 2;
      *(void *)(*result + 8 * v9) = *(void *)(*a3 + 8 * v8);
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t AGCLLVMAirBuiltins::buildCoordinateDewarp()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildCoordinateWarp()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdGroupIndexInThreadgroup()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildThreadIndexInSimdGroup()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildThreadsPerSimdgroup()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadElement()
{
  return 0;
}

llvm::Value *AGCLLVMAirBuiltins::buildSimdBarrier(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 368);
  if (*(void *)(v2 + 952)) {
    strlen(*(const char **)(v2 + 952));
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v6 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v5);
}

uint64_t AGCLLVMAirBuiltins::buildWGBarrier()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetRenderTargetArrayIndex()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetPatchID()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetAmplificationID()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetInstanceID()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetVertexID()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetSampleID()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetPosition()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetThreadPositionInGrid()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdYield()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadVoteAny()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadVoteAll()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdVoteAny()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdVoteAll()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadAny()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadAll()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdAny()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdAll()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadActiveThreadsMask(AGCLLVMAirBuiltins *this)
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdActiveThreadsMask()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdBallot()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleRotateDown()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleRotateUp()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleXor()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleDown()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleUp()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffle()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdBroadcast()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadBallot()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleRotateDown()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleRotateUp()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleXor()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleDown()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleUp()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffle()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadBroadcast()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildAtomic(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)*a2;
  int v5 = *(_DWORD *)(v4 + 8);
  if ((v5 & 0xFE) == 0x12) {
    int v5 = *(_DWORD *)(**(void **)(v4 + 16) + 8);
  }
  unsigned int v6 = v5 & 0xFFFFFF00;
  uint64_t v7 = *(void *)(a1 + 752);
  if (v6 == 256)
  {
    if (v7) {
      *(unsigned char *)(v7 + 9) = 1;
    }
  }
  else if (v7)
  {
    *(unsigned char *)(v7 + 8) = 1;
  }
  {
    AGCLLVMAirBuiltins::initializeAtomicMap(void)::atomic_map = 0;
    *(void *)&dword_1EBD0DCB8 = 0;
    qword_1EBD0DCC0 = 0x1800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMAirBuiltins::initializeAtomicMap(void)::atomic_map, &dword_1CAC02000);
  }
  int v8 = dword_1EBD0DCBC;
  int v169 = v2;
  if (!dword_1EBD0DCBC)
  {
    uint64_t v9 = 0;
    memset(&v195, 0, sizeof(v195));
    uint64_t v10 = ".s";
    uint64_t v11 = ".u";
    uint64_t v12 = ".i32";
    qmemcpy(v170, ".load.i3.store.i.cmpxchg.weak.i3.xchg.i3", sizeof(v170));
    int v13 = 1;
    do
    {
      int v171 = v13;
      LODWORD(v172) = v8;
      std::string::basic_string[abi:nn180100]<0>(&__str, off_1E65EA8A0[v9]);
      int v14 = 0;
      do
      {
        int v173 = v14;
        uint64_t v15 = (const std::string::value_type **)&(&off_1E65EA830)[2 * (void)v14];
        char v16 = 1;
        do
        {
          std::string::operator=(&v195, &__str);
          std::string::append(&v195, *v15);
          int v17 = v16 & 1;
          if (v16) {
            __int16 v18 = v11;
          }
          else {
            __int16 v18 = v10;
          }
          if (v16) {
            BOOL v19 = (int *)v15 + 3;
          }
          else {
            BOOL v19 = (int *)(v15 + 1);
          }
          std::string::append(&v195, v18);
          std::string::append(&v195, v12);
          uint64_t v20 = v12;
          uint64_t v21 = v11;
          uint64_t v22 = v10;
          int v23 = *v19;
          if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v24 = &v195;
          }
          else {
            BOOL v24 = (std::string *)v195.__r_.__value_.__r.__words[0];
          }
          if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v195.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v195.__r_.__value_.__l.__size_;
          }
          char v16 = 0;
          char v26 = (_DWORD *)*llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v24, size);
          v26[2] = 0;
          void v26[3] = v23;
          uint64_t v10 = v22;
          uint64_t v11 = v21;
          uint64_t v12 = v20;
          void v26[4] = 0;
        }
        while (v17);
        int v14 = (llvm::Type *)((char *)v173 + 1);
      }
      while (v173 != (llvm::Type *)6);
      if (v171)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v27 = __str.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:nn180100]((uint64_t)&v193, v27 + 10);
        if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v28 = &v193;
        }
        else {
          uint64_t v28 = (std::string *)v193.__r_.__value_.__r.__words[0];
        }
        if (v27)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          memmove(v28, p_str, v27);
        }
        strcpy((char *)v28 + v27, ".max.u.i64");
        if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned int v30 = &v193;
        }
        else {
          unsigned int v30 = (std::string *)v193.__r_.__value_.__r.__words[0];
        }
        if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v31 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v31 = v193.__r_.__value_.__l.__size_;
        }
        uint64_t v32 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v30, v31);
        *(void *)(v32 + 8) = 0x900000000;
        *(_DWORD *)(v32 + 16) = 1;
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v193.__r_.__value_.__l.__data_);
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v33 = __str.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:nn180100]((uint64_t)&v193, v33 + 10);
        if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v34 = &v193;
        }
        else {
          uint64_t v34 = (std::string *)v193.__r_.__value_.__r.__words[0];
        }
        if (v33)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v35 = &__str;
          }
          else {
            uint64_t v35 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          memmove(v34, v35, v33);
        }
        strcpy((char *)v34 + v33, ".min.u.i64");
        if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v36 = &v193;
        }
        else {
          uint64_t v36 = (std::string *)v193.__r_.__value_.__r.__words[0];
        }
        if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v37 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v37 = v193.__r_.__value_.__l.__size_;
        }
        uint64_t v38 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v36, v37);
        *(void *)(v38 + 8) = 0xA00000000;
        *(_DWORD *)(v38 + 16) = 1;
        if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v193.__r_.__value_.__l.__data_);
        }
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v39 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v39 = __str.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&v193, v39 + 9);
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v40 = &v193;
      }
      else {
        unint64_t v40 = (std::string *)v193.__r_.__value_.__r.__words[0];
      }
      if (v39)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v41 = &__str;
        }
        else {
          int v41 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v40, v41, v39);
      }
      unint64_t v42 = (char *)v40 + v39;
      *(void *)unint64_t v42 = *(void *)&v170[32];
      *((_WORD *)v42 + 4) = 50;
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v195.__r_.__value_.__l.__data_);
      }
      std::string v195 = v193;
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v43 = &v195;
      }
      else {
        int v43 = (std::string *)v195.__r_.__value_.__r.__words[0];
      }
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v44 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v44 = v195.__r_.__value_.__l.__size_;
      }
      uint64_t v45 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v43, v44);
      *(void *)(v45 + 8) = 0;
      *(_DWORD *)(v45 + 16) = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v46 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v46 = __str.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&v193, v46 + 17);
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v47 = &v193;
      }
      else {
        int v47 = (std::string *)v193.__r_.__value_.__r.__words[0];
      }
      if (v46)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v48 = &__str;
        }
        else {
          char v48 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v47, v48, v46);
      }
      int v49 = (char *)v47 + v46;
      *(_OWORD *)int v49 = *(_OWORD *)&v170[16];
      *((_WORD *)v49 + 8) = 50;
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v195.__r_.__value_.__l.__data_);
      }
      std::string v195 = v193;
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v50 = &v195;
      }
      else {
        unint64_t v50 = (std::string *)v195.__r_.__value_.__r.__words[0];
      }
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v51 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v51 = v195.__r_.__value_.__l.__size_;
      }
      uint64_t v52 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v50, v51);
      *(void *)(v52 + 8) = 0xD00000001;
      *(_DWORD *)(v52 + 16) = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v53 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v53 = __str.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&v193, v53 + 10);
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v54 = &v193;
      }
      else {
        __int16 v54 = (std::string *)v193.__r_.__value_.__r.__words[0];
      }
      if (v53)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v55 = &__str;
        }
        else {
          int v55 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v54, v55, v53);
      }
      *(std::string::size_type *)((char *)v54->__r_.__value_.__r.__words + v53) = *(void *)&v170[8];
      strcpy(&v54->__r_.__value_.__s.__data_[v53 + 8], "32");
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v195.__r_.__value_.__l.__data_);
      }
      std::string v195 = v193;
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v56 = &v195;
      }
      else {
        uint64_t v56 = (std::string *)v195.__r_.__value_.__r.__words[0];
      }
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v57 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v57 = v195.__r_.__value_.__l.__size_;
      }
      uint64_t v58 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v56, v57);
      *(void *)(v58 + 8) = 0xD00000003;
      *(_DWORD *)(v58 + 16) = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v59 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v59 = __str.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&v193, v59 + 9);
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v60 = &v193;
      }
      else {
        char v60 = (std::string *)v193.__r_.__value_.__r.__words[0];
      }
      if (v59)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v61 = &__str;
        }
        else {
          int v61 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v60, v61, v59);
      }
      uint64_t v62 = (char *)v60 + v59;
      *(void *)uint64_t v62 = *(void *)v170;
      *((_WORD *)v62 + 4) = 50;
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v195.__r_.__value_.__l.__data_);
      }
      std::string v195 = v193;
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v63 = &v195;
      }
      else {
        int v63 = (std::string *)v195.__r_.__value_.__r.__words[0];
      }
      if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v64 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v64 = v195.__r_.__value_.__l.__size_;
      }
      uint64_t v65 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v63, v64);
      *(void *)(v65 + 8) = 0xD00000002;
      *(_DWORD *)(v65 + 16) = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      int v13 = 0;
      int v8 = 1;
      uint64_t v9 = 1;
      uint64_t v12 = v20;
    }
    while ((v172 & 1) == 0);
    uint64_t v66 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>("global.add.f32", 0xEuLL);
    *(void *)(v66 + 8) = 0xB00000000;
    *(_DWORD *)(v66 + 16) = 2;
    uint64_t v67 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>("global.sub.f32", 0xEuLL);
    *(void *)(v67 + 8) = 0xC00000000;
    *(_DWORD *)(v67 + 16) = 2;
    uint64_t v68 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>("global.xchg.f32", 0xFuLL);
    *(void *)(v68 + 8) = 0;
    *(_DWORD *)(v68 + 16) = 2;
    uint64_t v69 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>("global.cmpxchg.weak.f32", 0x17uLL);
    *(void *)(v69 + 8) = 0xD00000001;
    *(_DWORD *)(v69 + 16) = 2;
    uint64_t v70 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>("global.store.f32", 0x10uLL);
    *(void *)(v70 + 8) = 0xD00000003;
    *(_DWORD *)(v70 + 16) = 2;
    uint64_t v71 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>("global.load.f32", 0xFuLL);
    *(void *)(v71 + 8) = 0xD00000002;
    *(_DWORD *)(v71 + 16) = 2;
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v195.__r_.__value_.__l.__data_);
    }
    uint64_t v2 = v169;
  }
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t v74 = Key;
  if (Key == -1) {
    uint64_t v74 = dword_1EBD0DCB8;
  }
  int v75 = *(_DWORD **)(AGCLLVMAirBuiltins::initializeAtomicMap(void)::atomic_map + 8 * v74);
  switch(v75[2])
  {
    case 0:
      uint64_t v76 = *v2;
      uint64_t v77 = v2[2];
      uint64_t v78 = v2[3];
      int v79 = (void *)(v77 + 24);
      if (*(_DWORD *)(v77 + 32) >= 0x41u) {
        int v79 = (void *)*v79;
      }
      int v80 = *(_DWORD *)v79;
      unsigned int v81 = v80 - 2;
      int v82 = v80 + 2;
      if (v81 >= 4) {
        int v82 = 2;
      }
      LODWORD(v173) = v82;
      int v83 = (llvm::Type **)v2[1];
      uint64_t v84 = *(void *)(a1 + 368);
      long long v190 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v191, (llvm::IRBuilderBase *)(a1 + 8));
      int v192 = *(_DWORD *)(a1 + 104);
      uint64_t v85 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v84 + 64))(v84, &v190, v76, v78);
      if (v191) {
        llvm::MetadataTracking::untrack();
      }
      int v86 = v75[4];
      if (v86 != 2) {
        goto LABEL_165;
      }
      int v87 = *(unsigned char **)(a1 + 368);
      if (!v87[1794])
      {
        std::string::basic_string[abi:nn180100]<0>(v188, "Unsupported float atomic operation for given target.");
        if ((v189 & 0x80u) == 0) {
          v156 = (const std::string::value_type *)v188;
        }
        else {
          v156 = (const std::string::value_type *)v188[0];
        }
        if ((v189 & 0x80u) == 0) {
          std::string::size_type v157 = v189;
        }
        else {
          std::string::size_type v157 = v188[1];
        }
        std::string::append((std::string *)(*(void *)(a1 + 752) + *(void *)(**(void **)(a1 + 752) - 24) + 8), v156, v157);
        *(unsigned char *)(a1 + 768) = 0;
        if ((char)v189 < 0)
        {
          uint64_t v158 = (void *)v188[0];
LABEL_248:
          operator delete(v158);
        }
        return 0;
      }
      if (v87[1796])
      {
        BOOL v88 = *(void **)(a1 + 752);
        if (!v88 || (*((unsigned char *)v88 + *(void *)(*v88 - 24) + 136) & 1) == 0)
        {
          long long v185 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v186, (llvm::IRBuilderBase *)(a1 + 8));
          int v187 = *(_DWORD *)(a1 + 104);
          uint64_t v85 = (*(uint64_t (**)(unsigned char *, long long *, uint64_t))(*(void *)v87 + 72))(v87, &v185, v85);
          if (v186) {
            llvm::MetadataTracking::untrack();
          }
        }
      }
      int v86 = v75[4];
LABEL_165:
      if (v86 == 1 && !*(unsigned char *)(*(void *)(a1 + 368) + 1787))
      {
        std::string::basic_string[abi:nn180100]<0>(__p, "Unsupported float atomic operation for given target.");
        if ((v184 & 0x80u) == 0) {
          int v165 = __p;
        }
        else {
          int v165 = (void **)__p[0];
        }
        if ((v184 & 0x80u) == 0) {
          std::string::size_type v166 = v184;
        }
        else {
          std::string::size_type v166 = (std::string::size_type)__p[1];
        }
        std::string::append((std::string *)(*(void *)(a1 + 752) + *(void *)(**(void **)(a1 + 752) - 24) + 8), (const std::string::value_type *)v165, v166);
        *(unsigned char *)(a1 + 768) = 0;
        if ((char)v184 < 0)
        {
          uint64_t v158 = __p[0];
          goto LABEL_248;
        }
        return 0;
      }
      AtomicRMW = (llvm::Type **)llvm::IRBuilderBase::CreateAtomicRMW((uint64_t *)(a1 + 8), v75[3], v85, v83);
      setVolatility<llvm::AtomicRMWInst>((uint64_t)AtomicRMW, v169[4]);
      return (uint64_t)AtomicRMW;
    case 1:
      uint64_t Cast = *v2;
      uint64_t v90 = v2[1];
      __int16 v92 = (llvm::Type **)v2[2];
      int v93 = *v92;
      unsigned int v94 = (uint64_t *)(a1 + 8);
      __int16 v196 = 257;
      *(void *)&v170[16] = v90;
      uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v93, v90, 0, (uint64_t)&v195);
      v172 = *(llvm::Type **)(a1 + 168);
      int v173 = *v92;
      if (*v92 == v172)
      {
        uint64_t v96 = llvm::PointerType::get();
        __int16 v196 = 257;
        uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, Cast, v96, (uint64_t)&v195);
        uint64_t v97 = *(void *)(a1 + 200);
        __int16 v196 = 257;
        llvm::IRBuilderBase::CreateCast(a1 + 8, 49, AlignedLoad, v97, (uint64_t)&v195);
        uint64_t v98 = *(void *)(a1 + 200);
        __int16 v196 = 257;
        __int16 v92 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v92, v98, (uint64_t)&v195);
      }
      uint64_t v99 = v2[3];
      uint64_t v100 = (void *)(v99 + 24);
      if (*(_DWORD *)(v99 + 32) >= 0x41u) {
        uint64_t v100 = (void *)*v100;
      }
      int v101 = *(_DWORD *)v100;
      if ((v101 - 2) >= 4) {
        int v102 = 2;
      }
      else {
        int v102 = v101 + 2;
      }
      int v171 = v102;
      uint64_t v103 = v2[4];
      BOOL v104 = (void *)(v103 + 24);
      if (*(_DWORD *)(v103 + 32) >= 0x41u) {
        BOOL v104 = (void *)*v104;
      }
      int v105 = *(_DWORD *)v104;
      unsigned int v106 = v105 - 2;
      int v107 = v105 + 2;
      if (v106 >= 4) {
        int v108 = 2;
      }
      else {
        int v108 = v107;
      }
      *(_DWORD *)&v170[32] = v108;
      uint64_t v109 = v2[5];
      uint64_t v110 = *(void *)(a1 + 368);
      long long v180 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v181, (llvm::IRBuilderBase *)(a1 + 8));
      int v182 = *(_DWORD *)(a1 + 104);
      (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v110 + 64))(v110, &v180, Cast, v109);
      if (v181) {
        llvm::MetadataTracking::untrack();
      }
      Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 56));
      DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
      v195.__r_.__value_.__r.__words[0] = (llvm::DataLayout::getTypeSizeInBits(DataLayout, *v92) + 7) >> 3;
      v195.__r_.__value_.__l.__size_ = v113 == 1;
      llvm::TypeSize::operator unsigned long long();
      uint64_t v114 = llvm::User::operator new((llvm::User *)0x40);
      llvm::AtomicCmpXchgInst::AtomicCmpXchgInst();
      __int16 v196 = 257;
      (*(void (**)(void, uint64_t, std::string *, void, void))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), v114, &v195, *(void *)(a1 + 56), *(void *)(a1 + 64));
      uint64_t v115 = *(unsigned int *)(a1 + 16);
      if (v115)
      {
        uint64_t v116 = *(void *)(a1 + 8);
        uint64_t v117 = v116 + 16 * v115;
        do
        {
          llvm::Instruction::setMetadata();
          v116 += 16;
        }
        while (v116 != v117);
      }
      uint64_t v118 = v169[6];
      if (v118 && *(unsigned char *)(v118 + 16) == 16)
      {
        int v119 = (llvm::APInt *)(v118 + 24);
        unsigned int v120 = *(_DWORD *)(v118 + 32);
        if (v120 > 0x40) {
          BOOL v121 = llvm::APInt::countLeadingZerosSlowCase(v119) == v120;
        }
        else {
          BOOL v121 = *(void *)v119 == 0;
        }
        __int16 v163 = v121;
        *(_WORD *)(v114 + 18) = *(_WORD *)(v114 + 18) & 0xFFFE | v163 ^ 1;
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 0;
      __int16 v196 = 257;
      AtomicRMW = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v94, v114, (uint64_t)&__str, 1, (uint64_t)&v195);
      if (v173 == v172)
      {
        uint64_t v164 = *(void *)(a1 + 168);
        __int16 v196 = 257;
        AtomicRMW = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v94, 49, (uint64_t)AtomicRMW, v164, (uint64_t)&v195);
      }
      llvm::IRBuilderBase::CreateAlignedStore(v94, AtomicRMW, *(uint64_t *)&v170[16], 0);
      return (uint64_t)AtomicRMW;
    case 2:
      uint64_t v122 = *v2;
      int v123 = *(llvm::Type **)(a1 + 72);
      if (v75[4]) {
        FloatTy = (llvm::Type *)llvm::Type::getFloatTy(v123, v73);
      }
      else {
        FloatTy = (llvm::Type *)llvm::Type::getInt32Ty(v123, v73);
      }
      uint64_t v142 = v2[1];
      uint64_t v143 = v2[2];
      uint64_t v144 = (void *)(v142 + 24);
      if (*(_DWORD *)(v142 + 32) >= 0x41u) {
        uint64_t v144 = (void *)*v144;
      }
      unsigned int v145 = *(_DWORD *)v144 - 2;
      if (v145 >= 4) {
        __int16 v146 = 256;
      }
      else {
        __int16 v146 = ((_WORD)v145 << 7) + 512;
      }
      int v147 = (void *)(v143 + 24);
      if (*(_DWORD *)(v143 + 32) >= 0x41u) {
        int v147 = (void *)*v147;
      }
      BOOL v148 = (*(_DWORD *)v147 - 1) < 2;
      int v149 = *(_DWORD *)(*(void *)v122 + 8);
      if ((v149 & 0xFE) == 0x12) {
        int v149 = *(_DWORD *)(**(void **)(*(void *)v122 + 16) + 8);
      }
      uint64_t v150 = (llvm::IRBuilderBase *)(a1 + 8);
      if ((v149 & 0xFFFFFF00) == 0x300)
      {
        __int16 v196 = 257;
        AtomicRMW = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), FloatTy, v122, 0, (uint64_t)&v195);
        setVolatility<llvm::AtomicRMWInst>((uint64_t)AtomicRMW, v169[3]);
      }
      else
      {
        uint64_t v151 = *(void *)(a1 + 368);
        long long v177 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)&v178, v150);
        int v179 = *(_DWORD *)(a1 + 104);
        uint64_t v152 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v151 + 64))(v151, &v177, v122, v143);
        int v153 = v178;
        if (v178) {
          llvm::MetadataTracking::untrack();
        }
        unint64_t v154 = *(llvm::Type **)(a1 + 72);
        if (v75[4]) {
          uint64_t Int32Ty = llvm::Type::getFloatTy(v154, v153);
        }
        else {
          uint64_t Int32Ty = llvm::Type::getInt32Ty(v154, v153);
        }
        uint64_t v159 = Int32Ty;
        if (Int32Ty == *(void *)(a1 + 168))
        {
          uint64_t v161 = llvm::PointerType::get();
          __int16 v196 = 257;
          uint64_t v152 = llvm::IRBuilderBase::CreateCast((uint64_t)v150, 49, v152, v161, (uint64_t)&v195);
          uint64_t v160 = *(llvm::Type **)(a1 + 200);
        }
        else
        {
          uint64_t v160 = (llvm::Type *)Int32Ty;
        }
        __int16 v196 = 257;
        uint64_t v162 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v150, v160, v152, 0, (uint64_t)&v195);
        *(_WORD *)(v162 + 18) = *(_WORD *)(v162 + 18) & 0xFC7F | v146;
        *(unsigned char *)(v162 + 60) = v148;
        setVolatility<llvm::AtomicRMWInst>(v162, v169[3]);
        __int16 v196 = 257;
        return llvm::IRBuilderBase::CreateCast((uint64_t)v150, 49, v162, v159, (uint64_t)&v195);
      }
      return (uint64_t)AtomicRMW;
    case 3:
      uint64_t v125 = *v2;
      uint64_t v126 = v2[3];
      int v127 = (llvm::Type **)v2[1];
      int v128 = *(_DWORD *)(*(void *)*v2 + 8);
      if ((v128 & 0xFE) == 0x12) {
        int v128 = *(_DWORD *)(**(void **)(*(void *)v125 + 16) + 8);
      }
      if ((v128 & 0xFFFFFF00) != 0x300)
      {
        uint64_t v135 = *(void *)(a1 + 368);
        uint64_t v136 = a1;
        int v137 = (llvm::IRBuilderBase *)(a1 + 8);
        long long v174 = *(_OWORD *)(v136 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v175, v137);
        int v176 = *(_DWORD *)(v136 + 104);
        uint64_t v138 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v135 + 64))(v135, &v174, v125, v126);
        if (v175) {
          llvm::MetadataTracking::untrack();
        }
        if (*v127 == *(llvm::Type **)(v136 + 168))
        {
          uint64_t v139 = llvm::PointerType::get();
          __int16 v196 = 257;
          uint64_t v138 = llvm::IRBuilderBase::CreateCast((uint64_t)v137, 49, v138, v139, (uint64_t)&v195);
          uint64_t v140 = *(void *)(v136 + 200);
          __int16 v196 = 257;
          int v127 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v137, 49, (uint64_t)v127, v140, (uint64_t)&v195);
        }
        uint64_t v141 = llvm::IRBuilderBase::CreateAtomicRMW((uint64_t *)v137, 0, v138, v127);
        setVolatility<llvm::AtomicRMWInst>(v141, v169[4]);
        return 0;
      }
      uint64_t AlignedStore = llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)v2[1], *v2, 0);
      uint64_t v130 = v2[4];
      if (!v130 || *(unsigned char *)(v130 + 16) != 16) {
        return 0;
      }
      uint64_t v131 = AlignedStore;
      uint64_t v132 = (llvm::APInt *)(v130 + 24);
      unsigned int v133 = *(_DWORD *)(v130 + 32);
      if (v133 > 0x40) {
        BOOL v134 = llvm::APInt::countLeadingZerosSlowCase(v132) == v133;
      }
      else {
        BOOL v134 = *(void *)v132 == 0;
      }
      __int16 v168 = v134;
      AtomicRMW = 0;
      *(_WORD *)(v131 + 18) = *(_WORD *)(v131 + 18) & 0xFFFE | v168 ^ 1;
      return (uint64_t)AtomicRMW;
    default:
      return 0;
  }
}

uint64_t llvm::IRBuilderBase::CreateAtomicRMW(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::Type **a4)
{
  Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
  v14[0] = (llvm::DataLayout::getTypeSizeInBits(DataLayout, *a4) + 7) >> 3;
  v14[1] = v8 == 1;
  llvm::TypeSize::operator unsigned long long();
  uint64_t v9 = llvm::User::operator new((llvm::User *)0x40);
  llvm::AtomicRMWInst::AtomicRMWInst();
  __int16 v15 = 257;
  (*(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v9, v14, a1[6], a1[7]);
  uint64_t v10 = *((unsigned int *)a1 + 2);
  if (v10)
  {
    uint64_t v11 = *a1;
    uint64_t v12 = v11 + 16 * v10;
    do
    {
      llvm::Instruction::setMetadata();
      v11 += 16;
    }
    while (v11 != v12);
  }
  return v9;
}

uint64_t setVolatility<llvm::AtomicRMWInst>(uint64_t a1, uint64_t a2)
{
  if (a2 && *(unsigned char *)(a2 + 16) == 16)
  {
    uint64_t v3 = (llvm::APInt *)(a2 + 24);
    unsigned int v4 = *(_DWORD *)(a2 + 32);
    if (v4 > 0x40) {
      BOOL v5 = llvm::APInt::countLeadingZerosSlowCase(v3) == v4;
    }
    else {
      BOOL v5 = *(void *)v3 == 0;
    }
    __int16 v6 = v5;
    *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFFE | v6 ^ 1;
  }
  return a1;
}

uint64_t *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(AGCLLVMAirBuiltins::initializeAtomicMap(void)::atomic_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EBD0DCC0) = qword_1EBD0DCC0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x1CB79F270](a2 + 25, 8);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 24;
  if (a2) {
    memcpy((void *)(v8 + 24), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *(void *)uint64_t v9 = a2;
  *(void *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = 0;
  *uint64_t i = v9;
  ++dword_1EBD0DCBC;
  for (uint64_t i = (uint64_t *)(AGCLLVMAirBuiltins::initializeAtomicMap(void)::atomic_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMAirBuiltins::initializeAtomicMap(void)::atomic_map));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 25));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t AGCLLVMAirBuiltins::buildCoherentStore()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildCoherentLoad()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildUnpackSRGB(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 > 4)
  {
    unsigned int v10 = bswap32(*(_DWORD *)(a3 + a4 - 5));
    if (v10 == 1983145521)
    {
      int v11 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
    }
    else if (v10 < 0x76346631)
    {
      int v11 = -1;
    }
    else
    {
      int v11 = 1;
    }
    uint64_t v5 = (llvm::IRBuilderBase *)(a1 + 8);
    uint64_t v12 = *(void *)(a1 + 296);
    __int16 v38 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a2, v12, (uint64_t)v37);
    BOOL v14 = v11 == 0;
    uint64_t v7 = (llvm::Value *)Cast;
    int v8 = v14;
    if (v14) {
      uint64_t v9 = 16;
    }
    else {
      uint64_t v9 = 32;
    }
  }
  else
  {
    uint64_t v5 = (llvm::IRBuilderBase *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 296);
    __int16 v38 = 257;
    uint64_t v7 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a2, v6, (uint64_t)v37);
    int v8 = 0;
    uint64_t v9 = 32;
  }
  __int16 v15 = (llvm::Value *)llvm::UndefValue::get();
  uint64_t v16 = *(void *)(a1 + 368);
  long long v34 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v35, v5);
  int v36 = *(_DWORD *)(a1 + 104);
  __int16 v38 = 257;
  int v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v18 = v7;
  uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v7, v17, (const llvm::Twine *)v37);
  uint64_t v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v16 + 96))(v16, &v34, Element, 8, 0, v9);
  if (v35) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v38 = 257;
  uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v15, v20, v21, (const llvm::Twine *)v37);
  uint64_t v23 = 0;
  if (v8) {
    uint64_t v24 = 152;
  }
  else {
    uint64_t v24 = 168;
  }
  do
  {
    __int16 v38 = 257;
    uint64_t v25 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v26 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v18, v25, (const llvm::Twine *)v37);
    uint64_t v27 = *(void *)(a1 + 368);
    long long v31 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v32, v5);
    int v33 = *(_DWORD *)(a1 + 104);
    uint64_t v28 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, void, void))(*(void *)v27 + 152))(v27, &v31, v26, 0, *(void *)(a1 + v24));
    if (v32) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v38 = 257;
    int v29 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t result = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v28, v29, (const llvm::Twine *)v37);
    Insertuint64_t Element = (llvm::Value *)result;
    ++v23;
  }
  while (v23 != 3);
  return result;
}

uint64_t AGCLLVMAirBuiltins::buildPackSRGB(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = (llvm::Value *)llvm::UndefValue::get();
  __int16 v26 = 257;
  uint64_t v5 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((AGCLLVMAirBuiltins *)((char *)this + 8), a2, v5, (const llvm::Twine *)v25);
  uint64_t v7 = *((void *)this + 46);
  long long v22 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v23, (AGCLLVMAirBuiltins *)((char *)this + 8));
  int v24 = *((_DWORD *)this + 26);
  int v8 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v7 + 88))(v7, &v22, Element, 8, 0, 1);
  __int16 v26 = 257;
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltins *)((char *)this + 8), v4, v8, v9, (const llvm::Twine *)v25);
  if (v23) {
    llvm::MetadataTracking::untrack();
  }
  for (uint64_t i = 0; i != 3; ++i)
  {
    __int16 v26 = 257;
    uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v13 = llvm::IRBuilderBase::CreateExtractElement((AGCLLVMAirBuiltins *)((char *)this + 8), a2, v12, (const llvm::Twine *)v25);
    uint64_t v14 = *((void *)this + 46);
    long long v19 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v20, (AGCLLVMAirBuiltins *)((char *)this + 8));
    int v21 = *((_DWORD *)this + 26);
    __int16 v15 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, void, void))(*(void *)v14 + 144))(v14, &v19, v13, 0, *((void *)this + 23));
    if (v20) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v26 = 257;
    uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
    Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltins *)((char *)this + 8), InsertElement, v15, v16, (const llvm::Twine *)v25);
  }
  uint64_t v17 = *((void *)this + 25);
  __int16 v26 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)InsertElement, v17, (uint64_t)v25);
}

llvm::Value *AGCLLVMAirBuiltins::buildUnpackNorm(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  int v5 = a3[1];
  if (v5 == 16)
  {
    uint64_t v10 = *(void *)(a1 + 240);
    __int16 v21 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a2, v10, (uint64_t)v20);
    uint64_t v12 = *(void *)(a1 + 368);
    long long v14 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v15, (llvm::IRBuilderBase *)(a1 + 8));
    int v16 = *(_DWORD *)(a1 + 104);
    uint64_t v9 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v12 + 96))(v12, &v14, Cast, 16, a3[3], 32);
    if (!v15) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v5 != 8) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 296);
  __int16 v21 = 257;
  uint64_t v7 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a2, v6, (uint64_t)v20);
  uint64_t v8 = *(void *)(a1 + 368);
  long long v17 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v18, (llvm::IRBuilderBase *)(a1 + 8));
  int v19 = *(_DWORD *)(a1 + 104);
  uint64_t v9 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v8 + 96))(v8, &v17, v7, 8, a3[3], 32);
  if (v18) {
LABEL_6:
  }
    llvm::MetadataTracking::untrack();
LABEL_7:
  if (*a3 == 16) {
    return AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, v9, *(llvm::Type **)(a1 + 152));
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltins::buildPackNorm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a3 + 1);
  if (v6 == 16)
  {
    uint64_t v9 = *(void *)(a1 + 368);
    long long v14 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v15, (llvm::IRBuilderBase *)(a1 + 8));
    int v16 = *(_DWORD *)(a1 + 104);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v9 + 88))(v9, &v14, a2, 16, *(unsigned __int8 *)(a3 + 3), 1);
    if (!v15)
    {
LABEL_7:
      uint64_t v10 = *(void *)(a1 + 200);
      __int16 v13 = 257;
      return llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v8, v10, (uint64_t)v12);
    }
LABEL_6:
    llvm::MetadataTracking::untrack();
    goto LABEL_7;
  }
  if (v6 == 8)
  {
    uint64_t v7 = *(void *)(a1 + 368);
    long long v17 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v18, (llvm::IRBuilderBase *)(a1 + 8));
    int v19 = *(_DWORD *)(a1 + 104);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v7 + 88))(v7, &v17, a2, 8, *(unsigned __int8 *)(a3 + 3), 1);
    if (!v18) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildTrunc(llvm::Type **this, llvm::Type **a2)
{
  uint64_t v4 = *a2;
  llvm::ConstantFP::get();
  AGCLLVMTargetBuilder::CreateFabs((AGCLLVMTargetBuilder *)this, (llvm::Value *)a2);
  __int16 v10 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  int v5 = this[25];
  __int16 v10 = 257;
  FPToSI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToSI((llvm::IRBuilderBase *)(this + 1), (llvm::Value *)a2, v5, (const llvm::Twine *)v9);
  unsigned char v8[16] = 257;
  llvm::IRBuilderBase::CreateSIToFP((llvm::IRBuilderBase *)(this + 1), FPToSI, v4, (const llvm::Twine *)v8);
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t llvm::IRBuilderBase::CreateFPToSI(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((unsigned char *)this + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return llvm::IRBuilderBase::CreateCast((uint64_t)this, 42, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t llvm::IRBuilderBase::CreateSIToFP(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((unsigned char *)this + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return llvm::IRBuilderBase::CreateCast((uint64_t)this, 44, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t AGCLLVMAirBuiltins::buildRNE(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v15 = a2;
  uint64_t v4 = *((void *)this + 46);
  uint64_t v5 = *(void *)(v4 + 1280);
  if (v5) {
    size_t v6 = strlen(*(const char **)(v4 + 1280));
  }
  else {
    size_t v6 = 0;
  }
  uint64_t v7 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, v5, v6, *((void *)this + 25), *((void *)this + 21));
  AGCLLVMTargetBuilder::CreateFabs(this, a2);
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v14 = 257;
  uint64_t v8 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, **(void **)(*(void *)v7 + 16), v7, (uint64_t)&v15, 1, (uint64_t)v13);
  uint64_t v9 = (llvm::Type *)*((void *)this + 21);
  __int16 v12 = 257;
  llvm::IRBuilderBase::CreateSIToFP((AGCLLVMAirBuiltins *)((char *)this + 8), v8, v9, (const llvm::Twine *)v11);
  __int16 v14 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::buildPow(llvm::Type **this, llvm::Value *a2, llvm::Value *a3)
{
  size_t v6 = (llvm::IRBuilderBase *)(this + 1);
  AGCLLVMTargetBuilder::CreateFabs((AGCLLVMTargetBuilder *)this, a3);
  llvm::ConstantFP::get();
  __int16 v22 = 257;
  FCmpHelper = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper();
  uint64_t v8 = this[25];
  __int16 v22 = 257;
  FPToSI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToSI(v6, a3, v8, (const llvm::Twine *)v21);
  __int16 v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  int v11 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v6, FPToSI, v10, (const llvm::Twine *)v21);
  uint64_t v12 = llvm::ConstantInt::get();
  __int16 v20 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v6, 32, v11, v12, (uint64_t)&v19);
  __int16 v22 = 257;
  __int16 v14 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v6, ICmp, FCmpHelper, (const llvm::Twine *)v21);
  llvm::ConstantFP::get();
  __int16 v22 = 257;
  uint64_t v15 = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v22 = 257;
  llvm::IRBuilderBase::CreateAnd(v6, v15, v14, (const llvm::Twine *)v21);
  Fabs = AGCLLVMTargetBuilder::CreateFabs((AGCLLVMTargetBuilder *)this, a2);
  long long v17 = AGCLLVMAirBuiltins::buildPowr((AGCLLVMAirBuiltins *)this, Fabs, a3);
  __int16 v22 = 257;
  llvm::IRBuilderBase::CreateFNeg((uint64_t)v6, (uint64_t)v17, (uint64_t)v21);
  __int16 v20 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *AGCLLVMAirBuiltins::buildPowr(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  void v11[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2 == *((void *)this + 19))
  {
    uint64_t v8 = "llvm.agx.powr.f16";
LABEL_6:
    uint64_t v7 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this, (uint64_t)v8, 17, v6, v6, v6);
    goto LABEL_7;
  }
  if (v6 == *((void *)this + 21))
  {
    uint64_t v8 = "llvm.agx.powr.f32";
    goto LABEL_6;
  }
  uint64_t v7 = 0;
LABEL_7:
  v11[0] = a2;
  v11[1] = a3;
  v10[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v7 + 24), v7, (uint64_t)v11, 2, (uint64_t)v10);
}

uint64_t llvm::IRBuilderBase::CreateFNeg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    uint64_t v5 = llvm::UnaryOperator::Create();
    llvm::IRBuilderBase::setFPAttrs(a1, v5);
LABEL_9:
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v5, a3);
    return v5;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 200))(*(void *)(a1 + 72));
  if (v5) {
    BOOL v6 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    goto LABEL_9;
  }
  return v5;
}

uint64_t AGCLLVMAirBuiltins::buildCeil(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v3 = (char *)this + 8;
  __int16 v8 = 257;
  FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)a2, (uint64_t)v7);
  Floor = AGCLLVMTargetBuilder::CreateFloor(this, FNeg);
  __int16 v8 = 257;
  return llvm::IRBuilderBase::CreateFNeg((uint64_t)v3, (uint64_t)Floor, (uint64_t)v7);
}

llvm::Value *AGCLLVMTargetBuilder::CreateFloor(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMTargetBuilder *)((char *)this + 8));
  int v5 = *((_DWORD *)this + 26);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  BOOL v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.floor");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltins::buildTan(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = (*(uint64_t (**)(AGCLLVMAirBuiltins *, llvm::Value *, void))(*(void *)this + 24))(this, a2, 0);
  uint64_t v5 = (*(uint64_t (**)(AGCLLVMAirBuiltins *, llvm::Value *, uint64_t))(*(void *)this + 24))(this, a2, 1);
  __int16 v8 = 257;
  return llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v4, v5, (uint64_t)v7);
}

uint64_t AGCLLVMAirBuiltins::buildArcsin(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  uint64_t v5 = llvm::ConstantFP::get();
  __int16 v16 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v15);
  __int16 v14 = 257;
  uint64_t FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v4, FMul, (uint64_t)v13);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, FSub);
  __int16 v16 = 257;
  Fuint64_t Add = llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, v4, (uint64_t)Sqrt, (uint64_t)v15);
  __int16 v16 = 257;
  uint64_t FDiv = llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, (uint64_t)a2, FAdd, (uint64_t)v15);
  uint64_t v11 = (*(uint64_t (**)(AGCLLVMAirBuiltins *, uint64_t))(*(void *)this + 32))(this, FDiv);
  __int16 v14 = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, v5, v11, (uint64_t)v13);
}

uint64_t AGCLLVMAirBuiltins::buildArccos(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  llvm::ConstantFP::get();
  uint64_t v4 = llvm::ConstantFP::get();
  uint64_t v5 = llvm::ConstantFP::get();
  __int16 v18 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v17);
  __int16 v16 = 257;
  uint64_t FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v4, FMul, (uint64_t)v15);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, FSub);
  __int16 v18 = 257;
  Fuint64_t Add = llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, v4, (uint64_t)a2, (uint64_t)v17);
  __int16 v18 = 257;
  uint64_t FDiv = llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v4, (uint64_t)Sqrt, (uint64_t)v17);
  __int16 v18 = 257;
  llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, FDiv, FAdd, (uint64_t)v17);
  __int16 v18 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v18 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v18 = 257;
  uint64_t v12 = llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v4, Select, (uint64_t)v17);
  uint64_t v13 = (*(uint64_t (**)(AGCLLVMAirBuiltins *, uint64_t))(*(void *)this + 32))(this, v12);
  __int16 v16 = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, v5, v13, (uint64_t)v15);
}

void AGCLLVMAirBuiltins::buildArctan(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v6 = 1240;
  if (*(void *)a2 == *((void *)this + 21)) {
    uint64_t v6 = 1232;
  }
  uint64_t v5 = *((void *)this + 46);
  uint64_t v7 = *(void *)(v5 + v6);
  if (v7) {
    size_t v8 = strlen(*(const char **)(v5 + v6));
  }
  else {
    size_t v8 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, v7, v8, v4, v4);
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  AGCLLVMTargetBuilder::CreateFabs(this, a2);
  llvm::BasicBlock::splitBasicBlock();
  operator new();
}

llvm::Value *AGCLLVMAirBuiltins::buildSinCos(AGCLLVMAirBuiltins *this, llvm::Value *a2, int a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = llvm::ConstantFP::get();
  __int16 v21 = 257;
  uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, v7, (uint64_t)v20);
  if (a3)
  {
    uint64_t v9 = llvm::ConstantFP::get();
    __int16 v21 = 257;
    uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, (uint64_t)FMul, v9, (uint64_t)v20);
  }
  Floor = AGCLLVMTargetBuilder::CreateFloor(this, FMul);
  __int16 v21 = 257;
  uint64_t FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, (uint64_t)FMul, (uint64_t)Floor, (uint64_t)v20);
  uint64_t v12 = llvm::ConstantFP::get();
  __int16 v21 = 257;
  uint64_t v19 = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, FSub, v12, (uint64_t)v20);
  uint64_t v14 = 1248;
  if (v6 == *((void *)this + 19)) {
    uint64_t v14 = 1256;
  }
  uint64_t v13 = *((void *)this + 46);
  uint64_t v15 = *(void *)(v13 + v14);
  if (v15) {
    size_t v16 = strlen(*(const char **)(v13 + v14));
  }
  else {
    size_t v16 = 0;
  }
  uint64_t v17 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, v15, v16, v6, v6);
  __int16 v21 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v17 + 24), v17, (uint64_t)&v19, 1, (uint64_t)v20);
}

void AGCLLVMAirBuiltinsGen2::buildArcsin(AGCLLVMAirBuiltinsGen2 *this, llvm::Value *a2)
{
}

llvm::Instruction *AGCLLVMAirBuiltinsGen2::buildInverseTrigPolynomialWithSquare(AGCLLVMAirBuiltinsGen2 *this, llvm::Value *a2)
{
  uint64_t v4 = (llvm::Value *)llvm::ConstantFP::get();
  uint64_t v5 = 4u;
  do
  {
    uint64_t v6 = (llvm::Value *)llvm::ConstantFP::get();
    uint64_t result = AGCLLVMBuilder::buildFma(this, v4, a2, v6);
    uint64_t v4 = result;
    v5 += 4;
  }
  while (v5 != 28);
  return result;
}

void AGCLLVMAirBuiltinsGen2::buildArccos(AGCLLVMAirBuiltinsGen2 *this, llvm::Value *a2)
{
}

llvm::Value *AGCLLVMTargetBuilder::CreateRsqrt(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMTargetBuilder *)((char *)this + 8));
  int v5 = *((_DWORD *)this + 26);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  uint64_t v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.rsqrt");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltinsGen2::buildArctan(AGCLLVMAirBuiltinsGen2 *this, llvm::Value *a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  AGCLLVMTargetBuilder::CreateFabs(this, a2);
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v14 = 257;
  llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v4, (uint64_t)a2, (uint64_t)v13);
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v14 = 257;
  uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, Select, Select, (uint64_t)v13);
  uint64_t v7 = (llvm::Value *)llvm::ConstantFP::get();
  uint64_t v8 = 4u;
  do
  {
    uint64_t v9 = (llvm::Value *)llvm::ConstantFP::get();
    uint64_t v7 = AGCLLVMBuilder::buildFma(this, v7, FMul, v9);
    v8 += 4;
  }
  while (v8 != 32);
  __int16 v14 = 257;
  uint64_t v10 = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, Select, (uint64_t)v7, (uint64_t)v13);
  llvm::ConstantFP::get();
  __int16 v14 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  __int16 v14 = 257;
  uint64_t v11 = llvm::IRBuilderBase::CreateSelect();
  __int16 v14 = 257;
  llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v11, v10, (uint64_t)v13);
  return llvm::IRBuilderBase::CreateSelect();
}

void AGCLLVMAirBuiltinsGen2::~AGCLLVMAirBuiltinsGen2(AGCLLVMAirBuiltinsGen2 *this)
{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CB7A0780);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdGroupIndexInThreadgroup(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 752);
  if (v5) {
    *(unsigned char *)(v5 + 16) = 1;
  }
  if (a4 == 3)
  {
    unsigned int v6 = bswap32(*a3) >> 16;
    if (v6 == 26931)
    {
      int v7 = *((unsigned __int8 *)a3 + 2) - 50;
    }
    else if (v6 < 0x6933)
    {
      int v7 = -1;
    }
    else
    {
      int v7 = 1;
    }
    if (v7) {
      uint64_t v8 = (uint64_t *)(a1 + 192);
    }
    else {
      uint64_t v8 = (uint64_t *)(a1 + 200);
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 192);
  }
  uint64_t v9 = *v8;
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
  long long v13 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v14, (llvm::IRBuilderBase *)(a1 + 8));
  int v15 = *(_DWORD *)(a1 + 104);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v10 + 1544))(v10, &v13, v9);
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  return v11;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildThreadIndexInSimdGroup(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 752);
  if (v5) {
    *(unsigned char *)(v5 + 16) = 1;
  }
  if (a4 == 3)
  {
    unsigned int v6 = bswap32(*a3) >> 16;
    if (v6 == 26931)
    {
      int v7 = *((unsigned __int8 *)a3 + 2) - 50;
    }
    else if (v6 < 0x6933)
    {
      int v7 = -1;
    }
    else
    {
      int v7 = 1;
    }
    if (v7) {
      uint64_t v8 = (uint64_t *)(a1 + 192);
    }
    else {
      uint64_t v8 = (uint64_t *)(a1 + 200);
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 192);
  }
  uint64_t v9 = *v8;
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
  long long v13 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v14, (llvm::IRBuilderBase *)(a1 + 8));
  int v15 = *(_DWORD *)(a1 + 104);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v10 + 1536))(v10, &v13, v9);
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  return v11;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildThreadsPerSimdgroup(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 752);
  if (v1) {
    *(unsigned char *)(v1 + 16) = 1;
  }
  return llvm::ConstantInt::get();
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadElement(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 752);
  if (v5) {
    *(unsigned char *)(v5 + 16) = 1;
  }
  if (a4 == 3)
  {
    unsigned int v6 = bswap32(*a3) >> 16;
    if (v6 == 26931)
    {
      int v7 = *((unsigned __int8 *)a3 + 2) - 50;
    }
    else if (v6 < 0x6933)
    {
      int v7 = -1;
    }
    else
    {
      int v7 = 1;
    }
    if (v7) {
      uint64_t v8 = (uint64_t *)(a1 + 192);
    }
    else {
      uint64_t v8 = (uint64_t *)(a1 + 200);
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 192);
  }
  uint64_t v9 = *v8;
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
  long long v13 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v14, (llvm::IRBuilderBase *)(a1 + 8));
  int v15 = *(_DWORD *)(a1 + 104);
  uint64_t v11 = AGCLLVMGen3TargetLowerer::buildQuadElement(v10, (uint64_t)&v13, v9);
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  return v11;
}

llvm::Value *AGCLLVMAirBuiltinsGen3::buildSimdBarrier(uint64_t *a1, uint64_t a2)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[94];
  if (v4) {
    *(unsigned char *)(v4 + 16) = 1;
  }
  uint64_t v5 = a1[46];
  uint64_t v6 = *(void *)(v5 + 952);
  if (v6) {
    size_t v7 = strlen(*(const char **)(v5 + 952));
  }
  else {
    size_t v7 = 0;
  }
  uint64_t v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, v6, v7, a1[18], a1[24], a1[24]);
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    uint64_t v10 = a1[24];
    __int16 v15 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v9, v10, (uint64_t)v14);
  }
  else
  {
    uint64_t Cast = llvm::ConstantInt::get();
  }
  uint64_t v12 = Cast;
  v16[0] = AGCLLVMAirBuiltinsGen3::remapAIRMemoryFlags((AGCLLVMAirBuiltinsGen3 *)a1, *(llvm::Value **)a2);
  v16[1] = v12;
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v8 + 24), v8, (uint64_t)v16, 2, (uint64_t)v14);
}

uint64_t AGCLLVMAirBuiltinsGen3::remapAIRMemoryFlags(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2)
{
  uint64_t v4 = (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8);
  uint64_t v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v16 = 257;
  uint64_t v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v15);
  size_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  v14[16] = 257;
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v14);
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v16 = 257;
  uint64_t v10 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v9, (const llvm::Twine *)v15);
  __int16 v16 = 257;
  uint64_t v11 = llvm::IRBuilderBase::CreateOr(v4, v10, LShr, (const llvm::Twine *)v15);
  uint64_t v12 = *((void *)this + 24);
  __int16 v16 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, v11, v12, (uint64_t)v15);
}

llvm::Value *AGCLLVMAirBuiltinsGen3::buildWGBarrier(uint64_t *a1, uint64_t a2)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)a1[94];
  if (v4) {
    *((unsigned char *)v4 + *(void *)(*v4 - 24) + 456) = 1;
  }
  uint64_t v5 = a1[46];
  uint64_t v6 = *(void *)(v5 + 936);
  if (v6) {
    size_t v7 = strlen(*(const char **)(v5 + 936));
  }
  else {
    size_t v7 = 0;
  }
  uint64_t v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, v6, v7, a1[18], a1[24], a1[24]);
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    uint64_t v10 = a1[24];
    __int16 v15 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v9, v10, (uint64_t)v14);
  }
  else
  {
    uint64_t Cast = llvm::ConstantInt::get();
  }
  uint64_t v12 = Cast;
  v16[0] = AGCLLVMAirBuiltinsGen3::remapAIRMemoryFlags((AGCLLVMAirBuiltinsGen3 *)a1, *(llvm::Value **)a2);
  v16[1] = v12;
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v8 + 24), v8, (uint64_t)v16, 2, (uint64_t)v14);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdBroadcastFirstActiveThread(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = *(void *)(a1 + 752);
  if (v4) {
    *(unsigned char *)(v4 + 17) = 1;
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = (llvm::Type **)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
  long long v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (llvm::IRBuilderBase *)(a1 + 8));
  int v7 = *(_DWORD *)(a1 + 104);
  int v14 = v7;
  long long v24 = v12;
  uint64_t v25 = v13;
  if (v13)
  {
    llvm::MetadataTracking::track();
    int v7 = v14;
  }
  int v26 = v7;
  uint64_t v8 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, void))(*(void *)v6 + 1536))(v6, &v24, *(void *)(v6 + 192));
  if (v25) {
    llvm::MetadataTracking::untrack();
  }
  long long v21 = *(_OWORD *)(v6 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v22, (llvm::IRBuilderBase *)(v6 + 8));
  int v23 = *(_DWORD *)(v6 + 104);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildSimdGroupScratchMemoryPtr(v6, (uint64_t)&v21, v8);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  long long v18 = *(_OWORD *)(v6 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v19, (llvm::IRBuilderBase *)(v6 + 8));
  int v20 = *(_DWORD *)(v6 + 104);
  ActiveThreadIndex = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedFirstActiveThreadIndex(v6, (uint64_t)&v18, (uint64_t *)v8, v9);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  long long v15 = v12;
  uint64_t v16 = v13;
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v17 = v14;
  AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v6, (uint64_t)&v15, v5, ActiveThreadIndex, 0, *(_DWORD *)(v6 + 872));
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdIsFirstActiveThread(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = *(void *)(a1 + 752);
  if (v4) {
    *(unsigned char *)(v4 + 17) = 1;
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
  long long v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (llvm::IRBuilderBase *)(a1 + 8));
  int v6 = *(_DWORD *)(a1 + 104);
  int v14 = v6;
  long long v23 = v12;
  uint64_t v24 = v13;
  if (v13)
  {
    llvm::MetadataTracking::track();
    int v6 = v14;
  }
  int v25 = v6;
  int v7 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, void))(*(void *)v5 + 1536))(v5, &v23, *(void *)(v5 + 192));
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (uint64_t *)(v5 + 8);
  long long v20 = *(_OWORD *)(v5 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v21, (llvm::IRBuilderBase *)(v5 + 8));
  int v22 = *(_DWORD *)(v5 + 104);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildSimdGroupScratchMemoryPtr(v5, (uint64_t)&v20, v7);
  if (v21) {
    llvm::MetadataTracking::untrack();
  }
  long long v17 = *(_OWORD *)(v5 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v18, (llvm::IRBuilderBase *)(v5 + 8));
  int v19 = *(_DWORD *)(v5 + 104);
  uint64_t ActiveThreadIndex = AGCLLVMGen3TargetLowerer::buildEmulatedFirstActiveThreadIndex(v5, (uint64_t)&v17, (uint64_t *)v7, v9);
  if (v18) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v16 = 257;
  llvm::IRBuilderBase::CreateICmp(v8, 32, (llvm::CmpInst **)v7, ActiveThreadIndex, (uint64_t)v15);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdReduce(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = *(void *)(a1 + 752);
  if (v4) {
    *(unsigned char *)(v4 + 17) = 1;
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = *((void *)a2 - 4);
  if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *((void *)a2 + 9)) {
    uint64_t v5 = 0;
  }
  int v6 = (llvm::Type **)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  Name = (char *)llvm::Value::getName((llvm::Value *)v5);
  v77[0] = 0;
  v77[1] = 0;
  int v75 = 0;
  unint64_t v76 = 0;
  Prefix = (AGCLLVMAirBuiltinsGen3 *)AGCLLVMBuilder::findPrefix(Name, v8, v77, &v75, "air.", 4uLL);
  AGCLLVMAirBuiltinsGen3::initializeReduceMap(Prefix);
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t v11 = Key;
  if (Key == -1) {
    uint64_t v11 = dword_1EA613828;
  }
  uint64_t v12 = *(void *)(AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map + 8 * v11);
  char v13 = v76 >= 2 && *(_WORD *)v75 == 11891;
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
  long long v72 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v73, (llvm::IRBuilderBase *)(a1 + 8));
  int v15 = *(_DWORD *)(a1 + 104);
  int v74 = v15;
  int v16 = *(_DWORD *)(v12 + 8);
  if (*(unsigned char *)(v12 + 12))
  {
    long long v78 = v72;
    uint64_t v79 = v73;
    if (v73)
    {
      llvm::MetadataTracking::track();
      int v15 = v74;
      int v80 = v74;
      long long v104 = v78;
      uint64_t v105 = v79;
      if (v79)
      {
        llvm::MetadataTracking::track();
        int v15 = v80;
      }
    }
    else
    {
      int v80 = v15;
      long long v104 = v78;
      uint64_t v105 = 0;
    }
    int v106 = v15;
    AGCLLVMTargetLowerer::SetIP(v14, &v104);
    if (v105) {
      llvm::MetadataTracking::untrack();
    }
    long long v17 = *v6;
    if ((*((_DWORD *)*v6 + 2) & 0xFE) != 0x12 || **((void **)v17 + 2) == *(void *)(v14 + 200))
    {
      long long v101 = *(_OWORD *)(v14 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v102, (llvm::IRBuilderBase *)(v14 + 8));
      int v103 = *(_DWORD *)(v14 + 104);
      AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(v14, (uint64_t)&v101, v6, v16, v13);
      if (v102) {
        llvm::MetadataTracking::untrack();
      }
    }
    else
    {
      uint64_t v18 = *((unsigned int *)v17 + 8);
      llvm::FixedVectorType::get();
      Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
      int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v17);
      if (ScalarSizeInBits == 8)
      {
        uint64_t v21 = 200;
        if (v18 == 2) {
          uint64_t v21 = 192;
        }
        uint64_t v22 = *(void *)(v14 + v21);
        uint64_t v70 = llvm::FixedVectorType::get();
        if (v18 == 3) {
          int v6 = (llvm::Type **)AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)v14, (llvm::Value *)v6, 4);
        }
        long long v98 = *(_OWORD *)(v14 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v99, (llvm::IRBuilderBase *)(v14 + 8));
        int v100 = *(_DWORD *)(v14 + 104);
        __int16 v97 = 257;
        uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast(v14 + 8, 49, (uint64_t)v6, v22, (uint64_t)&v94);
        uint64_t v24 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(v14, (uint64_t)&v98, Cast, v16, v13);
        if (v99) {
          llvm::MetadataTracking::untrack();
        }
        __int16 v97 = 257;
        uint64_t v25 = llvm::IRBuilderBase::CreateCast(v14 + 8, 49, v24, v70, (uint64_t)&v94);
        if (v18)
        {
          int v26 = (llvm::Value *)v25;
          for (uint64_t i = 0; i != v18; ++i)
          {
            __int16 v97 = 257;
            uint64_t v28 = (llvm::Value *)llvm::ConstantInt::get();
            uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v26, v28, (const llvm::Twine *)&v94);
            __int16 v93 = 257;
            unsigned int v30 = (llvm::Value *)llvm::ConstantInt::get();
            Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v14 + 8), InsertElement, Element, v30, (const llvm::Twine *)v92);
          }
        }
      }
      else if (v18 != 3 && ScalarSizeInBits == 16)
      {
        uint64_t v60 = 248;
        if (v18 == 2) {
          uint64_t v60 = 200;
        }
        uint64_t v69 = *(void *)(v14 + v60);
        uint64_t v71 = llvm::FixedVectorType::get();
        long long v89 = *(_OWORD *)(v14 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v90, (llvm::IRBuilderBase *)(v14 + 8));
        int v91 = *(_DWORD *)(v14 + 104);
        __int16 v97 = 257;
        int v61 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(v14 + 8, 49, (uint64_t)v6, v69, (uint64_t)&v94);
        uint64_t v62 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(v14, (uint64_t)&v89, v61, v16, v13);
        if (v90) {
          llvm::MetadataTracking::untrack();
        }
        __int16 v97 = 257;
        uint64_t v63 = llvm::IRBuilderBase::CreateCast(v14 + 8, 49, v62, v71, (uint64_t)&v94);
        if (v18)
        {
          std::string::size_type v64 = (llvm::Value *)v63;
          for (uint64_t j = 0; j != v18; ++j)
          {
            __int16 v97 = 257;
            uint64_t v66 = (llvm::Value *)llvm::ConstantInt::get();
            uint64_t v67 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v64, v66, (const llvm::Twine *)&v94);
            __int16 v93 = 257;
            uint64_t v68 = (llvm::Value *)llvm::ConstantInt::get();
            Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v14 + 8), InsertElement, v67, v68, (const llvm::Twine *)v92);
          }
        }
      }
      else if (v18 == 3 && ScalarSizeInBits == 16)
      {
        long long v34 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)v14, (llvm::Value *)v6, 4);
        uint64_t v35 = *(void *)(v14 + 248);
        __int16 v97 = 257;
        int v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v14 + 8, 49, (uint64_t)v34, v35, (uint64_t)&v94);
        __int16 v97 = 257;
        std::string::size_type v37 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v38 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v36, v37, (const llvm::Twine *)&v94);
        long long v86 = *(_OWORD *)(v14 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v87, (llvm::IRBuilderBase *)(v14 + 8));
        int v88 = *(_DWORD *)(v14 + 104);
        uint64_t v39 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(v14, (uint64_t)&v86, v38, v16, v13);
        if (v87) {
          llvm::MetadataTracking::untrack();
        }
        __int16 v97 = 257;
        unint64_t v40 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v41 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v36, v40, (const llvm::Twine *)&v94);
        uint64_t v42 = *(void *)(v14 + 240);
        __int16 v93 = 257;
        int v43 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v14 + 8, 49, v41, v42, (uint64_t)v92);
        __int16 v85 = 257;
        std::string::size_type v44 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v45 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v43, v44, (const llvm::Twine *)v84);
        long long v81 = *(_OWORD *)(v14 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v82, (llvm::IRBuilderBase *)(v14 + 8));
        int v83 = *(_DWORD *)(v14 + 104);
        std::string::size_type v46 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(v14, (uint64_t)&v81, v45, v16, v13);
        if (v82) {
          llvm::MetadataTracking::untrack();
        }
        uint64_t v47 = *(void *)(v14 + 240);
        __int16 v97 = 257;
        char v48 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v14 + 8, 49, v39, v47, (uint64_t)&v94);
        __int16 v93 = 257;
        int v49 = (llvm::Value *)llvm::ConstantInt::get();
        unint64_t v50 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v48, v49, (const llvm::Twine *)v92);
        uint64_t v51 = *(void *)(v14 + 240);
        __int16 v97 = 257;
        uint64_t v52 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v14 + 8, 49, v39, v51, (uint64_t)&v94);
        __int16 v93 = 257;
        std::string::size_type v53 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v54 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v52, v53, (const llvm::Twine *)v92);
        __int16 v97 = 257;
        int v55 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v56 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v14 + 8), InsertElement, v50, v55, (const llvm::Twine *)&v94);
        __int16 v97 = 257;
        std::string::size_type v57 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v58 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v14 + 8), v56, v54, v57, (const llvm::Twine *)&v94);
        __int16 v97 = 257;
        std::string::size_type v59 = (llvm::Value *)llvm::ConstantInt::get();
        llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v14 + 8), v58, v46, v59, (const llvm::Twine *)&v94);
      }
    }
    if (v79) {
LABEL_39:
    }
      llvm::MetadataTracking::untrack();
  }
  else
  {
    long long v94 = v72;
    uint64_t v95 = v73;
    if (v73)
    {
      llvm::MetadataTracking::track();
      int v15 = v74;
    }
    int v96 = v15;
    AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(v14, (uint64_t)&v94, v6, v16, v13);
    if (v95) {
      goto LABEL_39;
    }
  }
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

void AGCLLVMAirBuiltinsGen3::initializeReduceMap(AGCLLVMAirBuiltinsGen3 *this)
{
  {
    AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map = 0;
    *(void *)&dword_1EA613828 = 0;
    qword_1EA613830 = 0x1000000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map, &dword_1CAC02000);
  }
  if (!dword_1EA61382C)
  {
    uint64_t v1 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_and", 8uLL);
    *(_DWORD *)(v1 + 8) = 0;
    *(unsigned char *)(v1 + 12) = 1;
    uint64_t v2 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_or", 7uLL);
    *(_DWORD *)(v2 + 8) = 1;
    *(unsigned char *)(v2 + 12) = 1;
    uint64_t v3 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_xor", 8uLL);
    *(_DWORD *)(v3 + 8) = 2;
    *(unsigned char *)(v3 + 12) = 1;
    uint64_t v4 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_product", 0xCuLL);
    *(_DWORD *)(v4 + 8) = 3;
    *(unsigned char *)(v4 + 12) = 0;
    uint64_t v5 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_sum", 8uLL);
    *(_DWORD *)(v5 + 8) = 4;
    *(unsigned char *)(v5 + 12) = 0;
    uint64_t v6 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_max", 8uLL);
    *(_DWORD *)(v6 + 8) = 5;
    *(unsigned char *)(v6 + 12) = 0;
    uint64_t v7 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_min", 8uLL);
    *(_DWORD *)(v7 + 8) = 6;
    *(unsigned char *)(v7 + 12) = 0;
    uint64_t v8 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_prefix_inclusive_product", 0x1DuLL);
    *(_DWORD *)(v8 + 8) = 7;
    *(unsigned char *)(v8 + 12) = 0;
    uint64_t v9 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_prefix_inclusive_sum", 0x19uLL);
    *(_DWORD *)(v9 + 8) = 8;
    *(unsigned char *)(v9 + 12) = 0;
    uint64_t v10 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_prefix_exclusive_product", 0x1DuLL);
    *(_DWORD *)(v10 + 8) = 9;
    *(unsigned char *)(v10 + 12) = 0;
    uint64_t v11 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_prefix_exclusive_sum", 0x19uLL);
    *(_DWORD *)(v11 + 8) = 10;
    *(unsigned char *)(v11 + 12) = 0;
    uint64_t v12 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_all", 8uLL);
    *(_DWORD *)(v12 + 8) = 0;
    *(unsigned char *)(v12 + 12) = 0;
    uint64_t v13 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_any", 8uLL);
    *(_DWORD *)(v13 + 8) = 1;
    *(unsigned char *)(v13 + 12) = 0;
    uint64_t v14 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_and", 8uLL);
    *(_DWORD *)(v14 + 8) = 0;
    *(unsigned char *)(v14 + 12) = 1;
    uint64_t v15 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_or", 7uLL);
    *(_DWORD *)(v15 + 8) = 1;
    *(unsigned char *)(v15 + 12) = 1;
    uint64_t v16 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_xor", 8uLL);
    *(_DWORD *)(v16 + 8) = 2;
    *(unsigned char *)(v16 + 12) = 1;
    uint64_t v17 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_product", 0xCuLL);
    *(_DWORD *)(v17 + 8) = 3;
    *(unsigned char *)(v17 + 12) = 0;
    uint64_t v18 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_sum", 8uLL);
    *(_DWORD *)(v18 + 8) = 4;
    *(unsigned char *)(v18 + 12) = 0;
    uint64_t v19 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_max", 8uLL);
    *(_DWORD *)(v19 + 8) = 5;
    *(unsigned char *)(v19 + 12) = 0;
    uint64_t v20 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_min", 8uLL);
    *(_DWORD *)(v20 + 8) = 6;
    *(unsigned char *)(v20 + 12) = 0;
    uint64_t v21 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_prefix_inclusive_product", 0x1DuLL);
    *(_DWORD *)(v21 + 8) = 7;
    *(unsigned char *)(v21 + 12) = 0;
    uint64_t v22 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_prefix_inclusive_sum", 0x19uLL);
    *(_DWORD *)(v22 + 8) = 8;
    *(unsigned char *)(v22 + 12) = 0;
    uint64_t v23 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_prefix_exclusive_product", 0x1DuLL);
    *(_DWORD *)(v23 + 8) = 9;
    *(unsigned char *)(v23 + 12) = 0;
    uint64_t v24 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_prefix_exclusive_sum", 0x19uLL);
    *(_DWORD *)(v24 + 8) = 10;
    *(unsigned char *)(v24 + 12) = 0;
    uint64_t v25 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_all", 8uLL);
    *(_DWORD *)(v25 + 8) = 0;
    *(unsigned char *)(v25 + 12) = 0;
    uint64_t v26 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_any", 8uLL);
    *(_DWORD *)(v26 + 8) = 1;
    *(unsigned char *)(v26 + 12) = 0;
  }
}

uint64_t *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EA613830) = qword_1EA613830 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x1CB79F270](a2 + 17, 8);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v8 + 16;
  if (a2) {
    memcpy((void *)(v8 + 16), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *uint64_t v9 = a2;
  v9[1] = 0;
  *uint64_t i = (uint64_t)v9;
  ++dword_1EA61382C;
  for (uint64_t i = (uint64_t *)(AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadBroadcastFirstActiveThread(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = *(void *)(a1 + 752);
  if (v4) {
    *(unsigned char *)(v4 + 16) = 1;
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = (llvm::Type **)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
  long long v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(a1 + 8));
  int v7 = *(_DWORD *)(a1 + 104);
  int v13 = v7;
  long long v20 = v11;
  uint64_t v21 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    int v7 = v13;
  }
  int v22 = v7;
  uint64_t v8 = (llvm::Type **)AGCLLVMGen3TargetLowerer::buildQuadElement(v6, (uint64_t)&v20, *(void *)(v6 + 192));
  if (v21) {
    llvm::MetadataTracking::untrack();
  }
  long long v17 = v11;
  uint64_t v18 = v12;
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v19 = v13;
  uint64_t v9 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedQuadReduce(v6, (uint64_t)&v17, v8, 6u, 0);
  if (v18) {
    llvm::MetadataTracking::untrack();
  }
  long long v14 = *(_OWORD *)(v6 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v15, (llvm::IRBuilderBase *)(v6 + 8));
  int v16 = *(_DWORD *)(v6 + 104);
  AGCLLVMGen3TargetLowerer::buildQuadBroadcast((char **)v6, (uint64_t)&v14, v5, v9);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadIsFirstActiveThread(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = *(void *)(a1 + 752);
  if (v4) {
    *(unsigned char *)(v4 + 16) = 1;
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
  long long v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (llvm::IRBuilderBase *)(a1 + 8));
  int v6 = *(_DWORD *)(a1 + 104);
  int v12 = v6;
  long long v18 = v10;
  uint64_t v19 = v11;
  if (v11)
  {
    llvm::MetadataTracking::track();
    int v6 = v12;
  }
  int v20 = v6;
  int v7 = (llvm::Type **)AGCLLVMGen3TargetLowerer::buildQuadElement(v5, (uint64_t)&v18, *(void *)(v5 + 192));
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  long long v15 = v10;
  uint64_t v16 = v11;
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v17 = v12;
  uint64_t v8 = AGCLLVMGen3TargetLowerer::buildEmulatedQuadReduce(v5, (uint64_t)&v15, v7, 6u, 0);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v14 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)(v5 + 8), 32, v7, v8, (uint64_t)v13);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadReduce(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = *(void *)(a1 + 752);
  if (v4) {
    *(unsigned char *)(v4 + 16) = 1;
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = *((void *)a2 - 4);
  if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *((void *)a2 + 9)) {
    uint64_t v5 = 0;
  }
  int v6 = (llvm::Type **)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  Name = (char *)llvm::Value::getName((llvm::Value *)v5);
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  Prefix = (AGCLLVMAirBuiltinsGen3 *)AGCLLVMBuilder::findPrefix(Name, v8, v23, &v21, "air.", 4uLL);
  AGCLLVMAirBuiltinsGen3::initializeReduceMap(Prefix);
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t v11 = Key;
  if (Key == -1) {
    uint64_t v11 = dword_1EA613828;
  }
  uint64_t v12 = *(void *)(AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map + 8 * v11);
  int v13 = v22 >= 2 && *(unsigned __int16 *)v21 == 11891;
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
  long long v18 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v19, (llvm::IRBuilderBase *)(a1 + 8));
  int v15 = *(_DWORD *)(a1 + 104);
  int v20 = v15;
  unsigned int v16 = *(_DWORD *)(v12 + 8);
  long long v24 = v18;
  uint64_t v25 = v19;
  if (v19)
  {
    llvm::MetadataTracking::track();
    int v15 = v20;
  }
  int v26 = v15;
  AGCLLVMGen3TargetLowerer::buildEmulatedQuadReduce(v14, (uint64_t)&v24, v6, v16, v13);
  if (v25) {
    llvm::MetadataTracking::untrack();
  }
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadActiveThreadsMask(AGCLLVMAirBuiltinsGen3 *this)
{
  uint64_t v2 = *((void *)this + 94);
  if (v2) {
    *(unsigned char *)(v2 + 16) = 1;
  }
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v8, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v4 = *((_DWORD *)this + 26);
  int v9 = v4;
  long long v10 = v7;
  uint64_t v11 = v8;
  if (v8)
  {
    llvm::MetadataTracking::track();
    int v4 = v9;
  }
  int v12 = v4;
  llvm::ConstantInt::get();
  uint64_t v5 = AGCLLVMGen3TargetLowerer::buildQuadBallot(v3, &v10);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return v5;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdActiveThreadsMask(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 752);
  if (v7) {
    *(unsigned char *)(v7 + 17) = 1;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
  long long v18 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v19, (llvm::IRBuilderBase *)(a1 + 8));
  int v9 = *(_DWORD *)(a1 + 104);
  int v20 = v9;
  long long v14 = v18;
  uint64_t v15 = v19;
  if (v19)
  {
    llvm::MetadataTracking::track();
    int v9 = v20;
  }
  int v16 = v9;
  llvm::ConstantInt::get();
  uint64_t v10 = AGCLLVMGen3TargetLowerer::buildSimdBallot(v8, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  if (a4 > 2 && *(_WORD *)(a3 + a4 - 3) == 13929 && *(unsigned char *)(a3 + a4 - 1) == 52)
  {
    uint64_t v12 = *(void *)(a1 + 208);
    __int16 v17 = 257;
    return llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v10, v12, (uint64_t)&v14);
  }
  return v10;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdBallot(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 752);
  if (v7) {
    *(unsigned char *)(v7 + 17) = 1;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
  long long v15 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v16, (llvm::IRBuilderBase *)(a1 + 8));
  int v17 = *(_DWORD *)(a1 + 104);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildSimdBallot(v8, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  if (a4 > 2 && *(_WORD *)(a3 + a4 - 3) == 13929 && *(unsigned char *)(a3 + a4 - 1) == 52)
  {
    uint64_t v11 = *(void *)(a1 + 208);
    __int16 v14 = 257;
    return llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v9, v11, (uint64_t)v13);
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdShuffleRotateDown(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v8 = *((_DWORD *)this + 26);
  int v13 = v8;
  long long v14 = v11;
  uint64_t v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    int v8 = v13;
  }
  int v16 = v8;
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 5, *(_DWORD *)(v7 + 872));
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdShuffleRotateUp(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v8 = *((_DWORD *)this + 26);
  int v13 = v8;
  long long v14 = v11;
  uint64_t v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    int v8 = v13;
  }
  int v16 = v8;
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 4, *(_DWORD *)(v7 + 872));
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdShuffleXor(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v8 = *((_DWORD *)this + 26);
  int v13 = v8;
  long long v14 = v11;
  uint64_t v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    int v8 = v13;
  }
  int v16 = v8;
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 3, *(_DWORD *)(v7 + 872));
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdShuffleDown(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *))(*(void *)v7 + 1584))(v7, &v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdShuffleUp(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *))(*(void *)v7 + 1576))(v7, &v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdShuffle(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v8 = *((_DWORD *)this + 26);
  int v13 = v8;
  long long v14 = v11;
  uint64_t v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    int v8 = v13;
  }
  int v16 = v8;
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 0, *(_DWORD *)(v7 + 872));
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdBroadcast(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v8 = *((_DWORD *)this + 26);
  int v13 = v8;
  long long v14 = v11;
  uint64_t v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    int v8 = v13;
  }
  int v16 = v8;
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 0, *(_DWORD *)(v7 + 872));
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadBallot(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2)
{
  uint64_t v3 = *((void *)this + 94);
  if (v3) {
    *(unsigned char *)(v3 + 16) = 1;
  }
  uint64_t v4 = (*(uint64_t (**)(void, llvm::Value *))(**((void **)this + 46) + 680))(*((void *)this + 46), a2);
  long long v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v8, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v9 = *((_DWORD *)this + 26);
  uint64_t v5 = AGCLLVMGen3TargetLowerer::buildQuadBallot(v4, &v7);
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return v5;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadShuffleRotateDown(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 16) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v8 = *((_DWORD *)this + 26);
  int v13 = v8;
  long long v14 = v11;
  uint64_t v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    int v8 = v13;
  }
  int v16 = v8;
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 5, 4);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadShuffleRotateUp(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 16) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v8 = *((_DWORD *)this + 26);
  int v13 = v8;
  long long v14 = v11;
  uint64_t v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    int v8 = v13;
  }
  int v16 = v8;
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 4, 4);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadShuffleXor(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 16) = 1;
  }
  uint64_t v7 = (char **)(*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = AGCLLVMGen3TargetLowerer::buildQuadShuffleXor(v7, (uint64_t)&v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadShuffleDown(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 16) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *))(*(void *)v7 + 1568))(v7, &v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadShuffleUp(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 16) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *))(*(void *)v7 + 1560))(v7, &v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadShuffle(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 16) = 1;
  }
  uint64_t v7 = (char **)(*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = AGCLLVMGen3TargetLowerer::buildQuadShuffle(v7, (uint64_t)&v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadBroadcast(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 16) = 1;
  }
  uint64_t v7 = (char **)(*(uint64_t (**)(void))(**((void **)this + 46) + 680))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = AGCLLVMGen3TargetLowerer::buildQuadBroadcast(v7, (uint64_t)&v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

llvm::Value *AGCLLVMAirBuiltinsGen3::buildAtomic(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  if (a4 == 5 && (*(_DWORD *)a3 == 1668179302 ? (BOOL v6 = *(unsigned char *)(a3 + 4) == 101) : (BOOL v6 = 0), v6))
  {
    uint64_t v8 = a1[46];
    uint64_t v9 = *(void *)(v8 + 960);
    if (v9) {
      size_t v10 = strlen(*(const char **)(v8 + 960));
    }
    else {
      size_t v10 = 0;
    }
    uint64_t v11 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)a1, v9, v10, a1[18], a1[24], a1[24], a1[24]);
    v19[0] = AGCLLVMAirBuiltinsGen3::remapAIRMemoryFlags((AGCLLVMAirBuiltinsGen3 *)a1, *(llvm::Value **)a2);
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = a1[24];
    __int16 v18 = 257;
    v19[1] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v12, v13, (uint64_t)v17);
    uint64_t v14 = *(void *)(a2 + 16);
    uint64_t v15 = a1[24];
    v16[16] = 257;
    void v19[2] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v14, v15, (uint64_t)v16);
    __int16 v18 = 257;
    return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v11 + 24), v11, (uint64_t)v19, 3, (uint64_t)v17);
  }
  else
  {
    return (llvm::Value *)AGCLLVMAirBuiltins::buildAtomic((uint64_t)a1, (uint64_t *)a2);
  }
}

uint64_t AGCLLVMAirBuiltinsGen3::buildCoherentStore(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v22[8] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  int v20 = v22;
  uint64_t v21 = 0x400000000;
  llvm::StringRef::split();
  BOOL v6 = v22[3] == 8 && **((void **)v20 + 2) == 0x656C6974616C6F76;
  if (*((void *)v20 + 1) == 15)
  {
    unint64_t v7 = 0x6465766963655F63;
    unint64_t v8 = bswap64(**(void **)v20);
    if (v8 == 0x6465766963655F63
      && (unint64_t v7 = 0x636F686572656E74, v8 = bswap64(*(void *)(*(void *)v20 + 7)), v8 == 0x636F686572656E74))
    {
      int v9 = 0;
    }
    else if (v8 < v7)
    {
      int v9 = -1;
    }
    else
    {
      int v9 = 1;
    }
    if (v9) {
      uint64_t v10 = 3;
    }
    else {
      uint64_t v10 = 2;
    }
  }
  else
  {
    uint64_t v10 = 3;
  }
  uint64_t v11 = *(void *)(a1 + 368);
  long long v15 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v16, (llvm::IRBuilderBase *)(a1 + 8));
  int v17 = *(_DWORD *)(a1 + 104);
  uint64_t v12 = 16;
  if (v6) {
    uint64_t v12 = 32;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, long long *, void, void, void, void, uint64_t, BOOL))(*(void *)v11 + 432))(v11, &v15, a2[1], *a2, *(void *)((char *)v20 + v12), *(void *)((char *)v20 + v12 + 8), v10, v6);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  if (v20 != v22) {
    free(v20);
  }
  return v13;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildCoherentLoad(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v24[8] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  unint64_t v22 = v24;
  uint64_t v23 = 0x400000000;
  llvm::StringRef::split();
  BOOL v8 = v24[3] == 8 && **((void **)v22 + 2) == 0x656C6974616C6F76;
  if (*((void *)v22 + 1) == 15)
  {
    unint64_t v9 = 0x6465766963655F63;
    unint64_t v10 = bswap64(**(void **)v22);
    if (v10 == 0x6465766963655F63
      && (unint64_t v9 = 0x636F686572656E74, v10 = bswap64(*(void *)(*(void *)v22 + 7)), v10 == 0x636F686572656E74))
    {
      int v11 = 0;
    }
    else if (v10 < v9)
    {
      int v11 = -1;
    }
    else
    {
      int v11 = 1;
    }
    if (v11) {
      uint64_t v12 = 3;
    }
    else {
      uint64_t v12 = 2;
    }
  }
  else
  {
    uint64_t v12 = 3;
  }
  uint64_t v13 = *(void *)(a1 + 368);
  long long v17 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v18, (llvm::IRBuilderBase *)(a1 + 8));
  int v19 = *(_DWORD *)(a1 + 104);
  uint64_t v14 = 16;
  if (v8) {
    uint64_t v14 = 32;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, long long *, void, uint64_t, void, void, uint64_t, BOOL))(*(void *)v13 + 424))(v13, &v17, *a3, a2, *(void *)((char *)v22 + v14), *(void *)((char *)v22 + v14 + 8), v12, v8);
  if (v18) {
    llvm::MetadataTracking::untrack();
  }
  if (v22 != v24) {
    free(v22);
  }
  return v15;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildUnpackSRGB(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 > 4)
  {
    unsigned int v6 = bswap32(*(_DWORD *)(a3 + a4 - 5));
    if (v6 == 1983145521)
    {
      int v7 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
    }
    else if (v6 < 0x76346631)
    {
      int v7 = -1;
    }
    else
    {
      int v7 = 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t *)(a1 + 288);
    }
    else {
      uint64_t v5 = (uint64_t *)(a1 + 280);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 288);
  }
  uint64_t v8 = *v5;
  uint64_t v9 = *(void *)(a1 + 296);
  __int16 v18 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a2, v9, (uint64_t)v17);
  uint64_t v11 = *(void *)(a1 + 368);
  long long v14 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v15, (llvm::IRBuilderBase *)(a1 + 8));
  int v16 = *(_DWORD *)(a1 + 104);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t))(*(void *)v11 + 152))(v11, &v14, Cast, 0, v8);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  return v12;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildPackSRGB(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  uint64_t v5 = (char *)this + 8;
  long long v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  int v13 = *((_DWORD *)this + 26);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, void, void))(*(void *)v4 + 144))(v4, &v11, a2, 0, *((void *)this + 37));
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = *((void *)this + 25);
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v5, 49, v6, v7, (uint64_t)v9);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildUnpackNorm(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = *(void *)(a1 + 368);
  long long v9 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(a1 + 8));
  int v11 = *(_DWORD *)(a1 + 104);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, void, void))(*(void *)v6 + 96))(v6, &v9, a2, a3[1], a3[3], *a3);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildPackNorm(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = *(void *)(a1 + 368);
  long long v9 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(a1 + 8));
  int v11 = *(_DWORD *)(a1 + 104);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, void, void))(*(void *)v6 + 88))(v6, &v9, a2, a3[1], a3[3], a3[2]);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

void AGCLLVMAirBuiltinsGen3::~AGCLLVMAirBuiltinsGen3(AGCLLVMAirBuiltinsGen3 *this)
{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CB7A0780);
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdMatrixThreadElementsInit(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = *(void *)(a1 + 752);
  if (v4) {
    *(unsigned char *)(v4 + 12) = 1;
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = *((void *)a2 - 4);
  if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *((void *)a2 + 9)) {
    uint64_t v5 = 0;
  }
  uint64_t Name = llvm::Value::getName((llvm::Value *)v5);
  uint64_t v17 = v6;
  BOOL v7 = llvm::StringRef::find() != -1;
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void, const char *, uint64_t))(*(void *)a1 + 528))(a1, 0, "i32", 3);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))();
  long long v13 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v14, (llvm::IRBuilderBase *)(a1 + 8));
  int v15 = *(_DWORD *)(a1 + 104);
  (*(void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, BOOL))(*(void *)v11 + 1808))(v11, &v13, v8, v9, v10, v7);
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdMatrixMultiplyAccumulate(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = *(void *)(a1 + 752);
  if (v4) {
    *(unsigned char *)(v4 + 12) = 1;
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = (uint64_t *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[4];
  uint64_t v9 = v6[8];
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))(*(void *)(a1 + 368));
  long long v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (llvm::IRBuilderBase *)(a1 + 8));
  int v14 = *(_DWORD *)(a1 + 104);
  (*(void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 1800))(v10, &v12, v5, v7, v8, v9);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdMatrixStore(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = *(void *)(a1 + 752);
  if (v4) {
    *(unsigned char *)(v4 + 12) = 1;
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = *((void *)a2 - 4);
  if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *((void *)a2 + 9)) {
    uint64_t v5 = 0;
  }
  uint64_t Name = llvm::Value::getName((llvm::Value *)v5);
  uint64_t v15 = v6;
  BOOL v7 = llvm::StringRef::find() != -1;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void, const char *, uint64_t))(*(void *)a1 + 528))(a1, 0, "i32", 3);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))();
  long long v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(a1 + 8));
  int v13 = *(_DWORD *)(a1 + 104);
  (*(void (**)(uint64_t, long long *, uint64_t, llvm::Instruction *, uint64_t, BOOL))(*(void *)v9 + 1792))(v9, &v11, 1, a2, v8, v7);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdMatrixLoad(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = *(void *)(a1 + 752);
  if (v4) {
    *(unsigned char *)(v4 + 12) = 1;
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = *((void *)a2 - 4);
  if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *((void *)a2 + 9)) {
    uint64_t v5 = 0;
  }
  uint64_t Name = llvm::Value::getName((llvm::Value *)v5);
  uint64_t v15 = v6;
  BOOL v7 = llvm::StringRef::find() != -1;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void, const char *, uint64_t))(*(void *)a1 + 528))(a1, 0, "i32", 3);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))();
  long long v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(a1 + 8));
  int v13 = *(_DWORD *)(a1 + 104);
  (*(void (**)(uint64_t, long long *, void, llvm::Instruction *, uint64_t, BOOL))(*(void *)v9 + 1792))(v9, &v11, 0, a2, v8, v7);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen4::buildCoordinateDewarp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))(*(void *)(a1 + 368));
  long long v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(a1 + 8));
  int v13 = *(_DWORD *)(a1 + 104);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 1664))(v8, &v11, a2, a3, a4);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildCoordinateWarp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))(*(void *)(a1 + 368));
  long long v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(a1 + 8));
  int v13 = *(_DWORD *)(a1 + 104);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 1656))(v8, &v11, a2, a3, a4);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetRenderTargetArrayIndex(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::declareDebugTraceBufferTLSGlobal(this, "agc.trace_buffer_render_target_array_index");
}

uint64_t AGCLLVMAirBuiltins::declareDebugTraceBufferTLSGlobal(AGCLLVMAirBuiltins *this, const char *__s)
{
  if (__s) {
    strlen(__s);
  }
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    char v6 = 1;
    uint64_t GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
    HIBYTE(v10) = 1;
    if (*__s)
    {
      uint64_t v9 = __s;
      char v6 = 3;
    }
    LOBYTE(v10) = v6;
    llvm::GlobalVariable::GlobalVariable();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFE3FF | 0x400;
  }
  __int16 v10 = 257;
  BOOL v7 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)GlobalVariable, v4);
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v7, GlobalVariable, 0, (uint64_t)&v9);
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetPatchID(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::declareDebugTraceBufferTLSGlobal(this, "agc.trace_buffer_patch_id");
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetAmplificationID(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::declareDebugTraceBufferTLSGlobal(this, "agc.trace_buffer_amplification_id");
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetInstanceID(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::declareDebugTraceBufferTLSGlobal(this, "agc.trace_buffer_instance_id");
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetVertexID(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::declareDebugTraceBufferTLSGlobal(this, "agc.trace_buffer_vertex_id");
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetSampleID()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetPosition()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetThreadPositionInGrid(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, llvm::Value *))(**((void **)this + 46) + 688))(*((void *)this + 46), a2);
  long long v24 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v25, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v26 = *((_DWORD *)this + 26);
  uint64_t v4 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildGlobalID(v3, (uint64_t)&v24, *((void *)this + 25), 0);
  if (v25) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v21 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v22, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v23 = *((_DWORD *)this + 26);
  char v6 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildGlobalID(v5, (uint64_t)&v21, *((void *)this + 25), 1);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v18 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v19, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v20 = *((_DWORD *)this + 26);
  uint64_t v8 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildGlobalID(v7, (uint64_t)&v18, *((void *)this + 25), 2);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  llvm::FixedVectorType::get();
  uint64_t v9 = (llvm::Value *)llvm::UndefValue::get();
  __int16 v17 = 257;
  __int16 v10 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8), v9, v4, v10, (const llvm::Twine *)v16);
  __int16 v17 = 257;
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  int v13 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8), InsertElement, v6, v12, (const llvm::Twine *)v16);
  __int16 v17 = 257;
  int v14 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8), v13, v8, v14, (const llvm::Twine *)v16);
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadVoteAny(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v8, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v9 = *((_DWORD *)this + 26);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, uint64_t))(*(void *)v4 + 1784))(v4, &v7, a2, 1);
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return v5;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadVoteAll(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v8, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v9 = *((_DWORD *)this + 26);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, uint64_t))(*(void *)v4 + 1776))(v4, &v7, a2, 1);
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return v5;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdVoteAny(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  if (a4 > 2 && (*(_WORD *)(a3 + a4 - 3) == 13929 ? (BOOL v5 = *(unsigned char *)(a3 + a4 - 1) == 52) : (BOOL v5 = 0), v5))
  {
    uint64_t v7 = *a2;
    uint64_t v8 = *(void *)(a1 + 200);
    __int16 v16 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v7, v8, (uint64_t)v15);
  }
  else
  {
    uint64_t Cast = *a2;
  }
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))(*(void *)(a1 + 368));
  long long v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (llvm::IRBuilderBase *)(a1 + 8));
  int v14 = *(_DWORD *)(a1 + 104);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)v9 + 1784))(v9, &v12, Cast, 0);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  return v10;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdVoteAll(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  if (a4 > 2 && (*(_WORD *)(a3 + a4 - 3) == 13929 ? (BOOL v5 = *(unsigned char *)(a3 + a4 - 1) == 52) : (BOOL v5 = 0), v5))
  {
    uint64_t v7 = *a2;
    uint64_t v8 = *(void *)(a1 + 200);
    __int16 v16 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v7, v8, (uint64_t)v15);
  }
  else
  {
    uint64_t Cast = *a2;
  }
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))(*(void *)(a1 + 368));
  long long v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (llvm::IRBuilderBase *)(a1 + 8));
  int v14 = *(_DWORD *)(a1 + 104);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)v9 + 1776))(v9, &v12, Cast, 0);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  return v10;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadAny(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 94);
  if (v4) {
    *(unsigned char *)(v4 + 16) = 1;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v10 = *((_DWORD *)this + 26);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *))(*(void *)v5 + 1768))(v5, &v8, a2);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadAll(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 94);
  if (v4) {
    *(unsigned char *)(v4 + 16) = 1;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v10 = *((_DWORD *)this + 26);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *))(*(void *)v5 + 1760))(v5, &v8, a2);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdAny(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 94);
  if (v4) {
    *(unsigned char *)(v4 + 17) = 1;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v10 = *((_DWORD *)this + 26);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *))(*(void *)v5 + 1752))(v5, &v8, a2);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdAll(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 94);
  if (v4) {
    *(unsigned char *)(v4 + 17) = 1;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v10 = *((_DWORD *)this + 26);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *))(*(void *)v5 + 1744))(v5, &v8, a2);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadActiveThreadsMask(AGCLLVMAirBuiltinsGen4 *this)
{
  uint64_t v2 = *((void *)this + 94);
  if (v2) {
    *(unsigned char *)(v2 + 16) = 1;
  }
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v6 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v7, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v8 = *((_DWORD *)this + 26);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v3 + 1736))(v3, &v6);
  if (v7) {
    llvm::MetadataTracking::untrack();
  }
  return v4;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdActiveThreadsMask(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 752);
  if (v7) {
    *(unsigned char *)(v7 + 17) = 1;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))(*(void *)(a1 + 368));
  long long v15 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v16, (llvm::IRBuilderBase *)(a1 + 8));
  int v17 = *(_DWORD *)(a1 + 104);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v8 + 1728))(v8, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  if (a4 > 2 && *(_WORD *)(a3 + a4 - 3) == 13929 && *(unsigned char *)(a3 + a4 - 1) == 52)
  {
    uint64_t v11 = *(void *)(a1 + 208);
    __int16 v14 = 257;
    return llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v9, v11, (uint64_t)v13);
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdBallot(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 752);
  if (v8) {
    *(unsigned char *)(v8 + 17) = 1;
  }
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))(*(void *)(a1 + 368));
  long long v16 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v17, (llvm::IRBuilderBase *)(a1 + 8));
  int v18 = *(_DWORD *)(a1 + 104);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, void))(*(void *)v9 + 1720))(v9, &v16, *a2);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  if (a4 > 2 && *(_WORD *)(a3 + a4 - 3) == 13929 && *(unsigned char *)(a3 + a4 - 1) == 52)
  {
    uint64_t v12 = *(void *)(a1 + 208);
    __int16 v15 = 257;
    return llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v10, v12, (uint64_t)v14);
  }
  return v10;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdShuffleRotateDown(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v16 = 257;
  uint64_t Sub = llvm::IRBuilderBase::CreateSub((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8), v7, a3, (const llvm::Twine *)v15);
  uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))();
  long long v12 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v14 = *((_DWORD *)this + 26);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, uint64_t))(*(void *)v9 + 1712))(v9, &v12, a2, Sub);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  return v10;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdShuffleRotateUp(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *))(*(void *)v7 + 1712))(v7, &v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdShuffleXor(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *))(*(void *)v7 + 1704))(v7, &v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdShuffleDown(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *))(*(void *)v7 + 1584))(v7, &v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdShuffleUp(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *))(*(void *)v7 + 1576))(v7, &v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdShuffle(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *))(*(void *)v7 + 1696))(v7, &v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdBroadcast(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *))(*(void *)v7 + 1688))(v7, &v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadBallot(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 94);
  if (v4) {
    *(unsigned char *)(v4 + 16) = 1;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v10 = *((_DWORD *)this + 26);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *))(*(void *)v5 + 1680))(v5, &v8, a2);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadShuffleRotateDown(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 16) = 1;
  }
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v16 = 257;
  uint64_t Sub = llvm::IRBuilderBase::CreateSub((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8), v7, a3, (const llvm::Twine *)v15);
  uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))();
  long long v12 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v14 = *((_DWORD *)this + 26);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, uint64_t))(*(void *)v9 + 1672))(v9, &v12, a2, Sub);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  return v10;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadShuffleRotateUp(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 16) = 1;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))(*((void *)this + 46));
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *))(*(void *)v7 + 1672))(v7, &v10, a2, a3);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

void AGCLLVMAirBuiltinsGen4::~AGCLLVMAirBuiltinsGen4(AGCLLVMAirBuiltinsGen4 *this)
{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CB7A0780);
}

uint64_t AGCLLVMAirBuiltinsGen5::buildShuffleAndFill(uint64_t a1, uint64_t a2)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::IRBuilderBase *)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), (llvm::Instruction *)a2);
  uint64_t v5 = *(void *)(a2 - 32);
  if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *(void *)(a2 + 72)) {
    uint64_t v5 = 0;
  }
  uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v5);
  size_t v8 = v7;
  int v20 = Name;
  size_t v21 = v7;
  uint64_t v9 = (void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  long long v10 = (uint64_t *)v9[4];
  v22[0] = *v9;
  v22[1] = v10;
  uint64_t v11 = v9[8];
  uint64_t v12 = v9[12];
  v22[2] = v11;
  void v22[3] = v12;
  llvm::UndefValue::get();
  if (AGCLLVMAirBuiltins::validateScalarOrVectorArgument(a1, *(void *)v22[0], Name, v8))
  {
    if (AGCLLVMAirBuiltins::validateScalarOrVectorArgument(a1, *v10, Name, v8))
    {
      uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))(*(void *)(a1 + 368));
      long long v17 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v18, v4);
      int v19 = *(_DWORD *)(a1 + 104);
      BOOL v14 = llvm::StringRef::find() != -1;
      BOOL v15 = llvm::StringRef::find() != -1;
      (*(void (**)(uint64_t, long long *, void *, uint64_t, BOOL, BOOL))(*(void *)v13 + 1872))(v13, &v17, v22, 4, v14, v15);
      if (v18) {
        llvm::MetadataTracking::untrack();
      }
    }
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
}

uint64_t AGCLLVMAirBuiltins::validateScalarOrVectorArgument(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  if ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x12 || *(_DWORD *)(a2 + 32) < 5u) {
    return 1;
  }
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v22);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"n = ", 4);
  size_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)" in vec<T,n> is an invalid argument to ", 39);
  if (a3)
  {
    std::string::basic_string[abi:nn180100](&__p, a3, a4);
    unsigned int v9 = HIBYTE(v21);
    long long v10 = (void **)__p;
    uint64_t v11 = v20;
  }
  else
  {
    uint64_t v11 = 0;
    long long v10 = 0;
    unsigned int v9 = 0;
    std::string __p = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
  }
  if ((v9 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = v10;
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = v11;
  }
  BOOL v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)". ", 2);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"n must be less or equal to 4.", 29);
  std::stringbuf::str();
  if ((v18 & 0x80u) == 0) {
    BOOL v15 = v17;
  }
  else {
    BOOL v15 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v16 = v18;
  }
  else {
    std::string::size_type v16 = (std::string::size_type)v17[1];
  }
  std::string::append((std::string *)(*(void *)(a1 + 752) + *(void *)(**(void **)(a1 + 752) - 24) + 8), (const std::string::value_type *)v15, v16);
  *(unsigned char *)(a1 + 768) = 0;
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  v22[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v22[1] = MEMORY[0x1E4FBA470] + 16;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CB7A0710](&v24);
  return 0;
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 24;
  uint64_t v3 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(void *)a1 = v2;
  *(void *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

uint64_t AGCLLVMAirBuiltinsGen5::buildBroadcastFirstActiveThread(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (llvm::IRBuilderBase *)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), (llvm::Instruction *)a2);
  uint64_t v5 = *(void *)(a2 - 32);
  if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *(void *)(a2 + 72)) {
    uint64_t v5 = 0;
  }
  v33[0] = llvm::Value::getName((llvm::Value *)v5);
  v33[1] = v6;
  uint64_t v7 = llvm::StringRef::find();
  size_t v8 = *(llvm::Type ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  unsigned int v9 = (char **)(*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))();
  long long v22 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v23, v4);
  int v10 = *(_DWORD *)(a1 + 104);
  int v24 = v10;
  long long v28 = v22;
  uint64_t v29 = v23;
  if (v23)
  {
    llvm::MetadataTracking::track();
    int v10 = v24;
  }
  int v30 = v10;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v28, (uint64_t)(v9 + 1));
  if (v29) {
    llvm::MetadataTracking::untrack();
  }
  long long v25 = *(_OWORD *)(v9 + 7);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v26, (llvm::IRBuilderBase *)(v9 + 1));
  int v11 = *((_DWORD *)v9 + 26);
  int v27 = v11;
  long long v42 = v25;
  uint64_t v43 = v26;
  if (v26)
  {
    llvm::MetadataTracking::track();
    int v11 = v27;
  }
  int v44 = v11;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v42, (uint64_t)(v9 + 1));
  if (v43) {
    llvm::MetadataTracking::untrack();
  }
  long long v39 = *(_OWORD *)(v9 + 7);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v40, (llvm::IRBuilderBase *)(v9 + 1));
  int v41 = *((_DWORD *)v9 + 26);
  uint64_t IsFirstActiveThread = AGCLLVMGen5TargetLowerer::buildIsFirstActiveThread((uint64_t)v9, &v39, v7 != -1);
  if (v40) {
    llvm::MetadataTracking::untrack();
  }
  long long v36 = *(_OWORD *)(v9 + 7);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v37, (llvm::IRBuilderBase *)(v9 + 1));
  int v38 = *((_DWORD *)v9 + 26);
  if (v7 == -1) {
    uint64_t v13 = (*((uint64_t (**)(char **, long long *, uint64_t))*v9 + 215))(v9, &v36, IsFirstActiveThread);
  }
  else {
    uint64_t v13 = (*((uint64_t (**)(char **, long long *, uint64_t))*v9 + 210))(v9, &v36, IsFirstActiveThread);
  }
  uint64_t v14 = v13;
  if (v37) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v15 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)v9, (uint64_t)"llvm.agx2.ft1", 13, (uint64_t)v9[25], (uint64_t)v9[25]);
  uint64_t v16 = (uint64_t)v9[25];
  __int16 v34 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v9 + 1), 39, v14, v16, (uint64_t)v33);
  __int16 v32 = 257;
  long long v17 = llvm::IRBuilderBase::CreateCall((uint64_t)(v9 + 1), *(void *)(v15 + 24), v15, (uint64_t)&Cast, 1, (uint64_t)v31);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  long long v42 = *(_OWORD *)(v9 + 7);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v43, (llvm::IRBuilderBase *)(v9 + 1));
  int v44 = *((_DWORD *)v9 + 26);
  uint64_t v18 = (uint64_t)v9[24];
  if (v7 == -1)
  {
    __int16 v32 = 257;
    uint64_t v20 = llvm::IRBuilderBase::CreateCast((uint64_t)(v9 + 1), 38, (uint64_t)v17, v18, (uint64_t)v31);
    (*((void (**)(char **, long long *, llvm::Type **, uint64_t))*v9 + 211))(v9, &v42, v8, v20);
  }
  else
  {
    __int16 v34 = 257;
    int v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v9 + 1), 38, (uint64_t)v17, v18, (uint64_t)v33);
    AGCLLVMGen3TargetLowerer::buildQuadBroadcast(v9, (uint64_t)&v42, v8, v19);
  }
  if (v43) {
    llvm::MetadataTracking::untrack();
  }
  if (v23) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
}

uint64_t AGCLLVMAirBuiltinsGen5::buildIsFirstActiveThread(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = (llvm::IRBuilderBase *)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = *((void *)a2 - 4);
  if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *((void *)a2 + 9)) {
    uint64_t v5 = 0;
  }
  uint64_t Name = llvm::Value::getName((llvm::Value *)v5);
  uint64_t v14 = v6;
  BOOL v7 = llvm::StringRef::find() != -1;
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))();
  long long v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, v4);
  int v12 = *(_DWORD *)(a1 + 104);
  AGCLLVMGen5TargetLowerer::buildIsFirstActiveThread(v8, &v10, v7);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen5::buildIsHelperThread(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = (llvm::IRBuilderBase *)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))(*(void *)(a1 + 368));
  long long v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, v4);
  int v6 = *(_DWORD *)(a1 + 104);
  int v13 = v6;
  long long v18 = v11;
  uint64_t v19 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    int v6 = v13;
  }
  int v20 = v6;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v18, v5 + 8);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  if (*(void *)(v5 + 2760)) {
    strlen(*(const char **)(v5 + 2760));
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v17 = 257;
  uint64_t v8 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCall(v5 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v16);
  uint64_t v9 = llvm::ConstantInt::get();
  __int16 v15 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)(v5 + 8), 32, v8, v9, (uint64_t)v14);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen5::buildReduce(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (llvm::IRBuilderBase *)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), (llvm::Instruction *)a2);
  uint64_t v5 = *(void *)(a2 - 32);
  if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *(void *)(a2 + 72)) {
    uint64_t v5 = 0;
  }
  uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v5);
  size_t v8 = v7;
  uint64_t v9 = *(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  llvm::UndefValue::get();
  if (AGCLLVMAirBuiltins::validateScalarOrVectorArgument(a1, *(void *)v9, Name, v8))
  {
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 688))(*(void *)(a1 + 368));
    long long v12 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v13, v4);
    int v14 = *(_DWORD *)(a1 + 104);
    AGCLLVMGen5TargetLowerer::buildReduce(v10, &v12, (uint64_t)Name, v8, v9);
    if (v13) {
      llvm::MetadataTracking::untrack();
    }
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
}

llvm::Value *AGCLLVMAirBuiltinsGen5::buildTrunc(AGCLLVMAirBuiltinsGen5 *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v8, (AGCLLVMAirBuiltinsGen5 *)((char *)this + 8));
  int v9 = *((_DWORD *)this + 26);
  uint64_t v5 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v7, (uint64_t *)a2, "llvm.trunc");
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return v5;
}

llvm::Value *AGCLLVMAirBuiltinsGen5::buildRNE(AGCLLVMAirBuiltinsGen5 *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v8, (AGCLLVMAirBuiltinsGen5 *)((char *)this + 8));
  int v9 = *((_DWORD *)this + 26);
  uint64_t v5 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v7, (uint64_t *)a2, "llvm.rint");
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return v5;
}

llvm::Value *AGCLLVMAirBuiltinsGen5::buildPow(AGCLLVMAirBuiltinsGen5 *this, llvm::Value *a2, llvm::Value *a3)
{
  void v11[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2 == *((void *)this + 19))
  {
    uint64_t v8 = "llvm.agx2.pow.f16";
LABEL_6:
    uint64_t v7 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this, (uint64_t)v8, 17, v6, v6, v6);
    goto LABEL_7;
  }
  if (v6 == *((void *)this + 21))
  {
    uint64_t v8 = "llvm.agx2.pow.f32";
    goto LABEL_6;
  }
  uint64_t v7 = 0;
LABEL_7:
  v11[0] = a2;
  v11[1] = a3;
  v10[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v7 + 24), v7, (uint64_t)v11, 2, (uint64_t)v10);
}

llvm::Value *AGCLLVMAirBuiltinsGen5::buildCeil(AGCLLVMAirBuiltinsGen5 *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v8, (AGCLLVMAirBuiltinsGen5 *)((char *)this + 8));
  int v9 = *((_DWORD *)this + 26);
  uint64_t v5 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v7, (uint64_t *)a2, "llvm.ceil");
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return v5;
}

void AGCLLVMAirBuiltinsGen5::~AGCLLVMAirBuiltinsGen5(AGCLLVMAirBuiltinsGen5 *this)
{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CB7A0780);
}

uint64_t AGCLLVMAirBuiltinsGen6::buildSimdShuffleRotateDown(AGCLLVMAirBuiltinsGen6 *this, llvm::Value *a2, llvm::Value *a3)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  if (*(unsigned char *)(*((void *)this + 46) + 1790)
    || MGGetBoolAnswer()
    && (uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SIMD_ROTATE_AS_SHUFFLE_AND_FILL", v10)) != 0
    && *Value != 48
    && atoi(Value))
  {
    v15[0] = a2;
    v15[1] = a2;
    void v15[2] = a3;
    v15[3] = llvm::ConstantInt::get();
    uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))();
    long long v12 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (AGCLLVMAirBuiltinsGen6 *)((char *)this + 8));
    int v14 = *((_DWORD *)this + 26);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, void))(*(void *)v7 + 1872))(v7, &v12, v15, 4, 1, 0);
    if (v13) {
      llvm::MetadataTracking::untrack();
    }
    return v8;
  }
  else
  {
    return AGCLLVMAirBuiltinsGen4::buildSimdShuffleRotateDown(this, a2, a3);
  }
}

uint64_t AGCLLVMAirBuiltinsGen6::buildSimdShuffleRotateUp(AGCLLVMAirBuiltinsGen6 *this, llvm::Value *a2, llvm::Value *a3)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 17) = 1;
  }
  if (*(unsigned char *)(*((void *)this + 46) + 1790)
    || MGGetBoolAnswer()
    && (uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SIMD_ROTATE_AS_SHUFFLE_AND_FILL", v10)) != 0
    && *Value != 48
    && atoi(Value))
  {
    v15[0] = a2;
    v15[1] = a2;
    void v15[2] = a3;
    v15[3] = llvm::ConstantInt::get();
    uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))();
    long long v12 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (AGCLLVMAirBuiltinsGen6 *)((char *)this + 8));
    int v14 = *((_DWORD *)this + 26);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, void *, uint64_t, void, void))(*(void *)v7 + 1872))(v7, &v12, v15, 4, 0, 0);
    if (v13) {
      llvm::MetadataTracking::untrack();
    }
    return v8;
  }
  else
  {
    return AGCLLVMAirBuiltinsGen4::buildSimdShuffleRotateUp(this, a2, a3);
  }
}

uint64_t AGCLLVMAirBuiltinsGen6::buildQuadShuffleRotateDown(AGCLLVMAirBuiltinsGen6 *this, llvm::Value *a2, llvm::Value *a3)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 16) = 1;
  }
  if (*(unsigned char *)(*((void *)this + 46) + 1790)
    || MGGetBoolAnswer()
    && (uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SIMD_ROTATE_AS_SHUFFLE_AND_FILL", v10)) != 0
    && *Value != 48
    && atoi(Value))
  {
    v15[0] = a2;
    v15[1] = a2;
    void v15[2] = a3;
    v15[3] = llvm::ConstantInt::get();
    uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))();
    long long v12 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (AGCLLVMAirBuiltinsGen6 *)((char *)this + 8));
    int v14 = *((_DWORD *)this + 26);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 1872))(v7, &v12, v15, 4, 1, 1);
    if (v13) {
      llvm::MetadataTracking::untrack();
    }
    return v8;
  }
  else
  {
    return AGCLLVMAirBuiltinsGen4::buildQuadShuffleRotateDown(this, a2, a3);
  }
}

uint64_t AGCLLVMAirBuiltinsGen6::buildQuadShuffleRotateUp(AGCLLVMAirBuiltinsGen6 *this, llvm::Value *a2, llvm::Value *a3)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 94);
  if (v6) {
    *(unsigned char *)(v6 + 16) = 1;
  }
  if (*(unsigned char *)(*((void *)this + 46) + 1790)
    || MGGetBoolAnswer()
    && (uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SIMD_ROTATE_AS_SHUFFLE_AND_FILL", v10)) != 0
    && *Value != 48
    && atoi(Value))
  {
    v15[0] = a2;
    v15[1] = a2;
    void v15[2] = a3;
    v15[3] = llvm::ConstantInt::get();
    uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 46) + 688))();
    long long v12 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (AGCLLVMAirBuiltinsGen6 *)((char *)this + 8));
    int v14 = *((_DWORD *)this + 26);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, void *, uint64_t, void, uint64_t))(*(void *)v7 + 1872))(v7, &v12, v15, 4, 0, 1);
    if (v13) {
      llvm::MetadataTracking::untrack();
    }
    return v8;
  }
  else
  {
    return AGCLLVMAirBuiltinsGen4::buildQuadShuffleRotateUp(this, a2, a3);
  }
}

void AGCLLVMAirBuiltinsGen6::~AGCLLVMAirBuiltinsGen6(AGCLLVMAirBuiltinsGen6 *this)
{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CB7A0780);
}

uint64_t AGCLLVMAirBuiltinsGen7::buildSimdYield(AGCLLVMAirBuiltinsGen7 *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 94);
  if (v4) {
    *(unsigned char *)(v4 + 17) = 1;
  }
  uint64_t v5 = *((void *)this + 46);
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMAirBuiltinsGen7 *)((char *)this + 8));
  int v10 = *((_DWORD *)this + 26);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *))(*(void *)v5 + 744))(v5, &v8, a2);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltinsGen7::buildTan(AGCLLVMAirBuiltinsGen7 *this, llvm::Value *a2)
{
  FPExt = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = (llvm::Value *)llvm::ConstantFP::get();
  uint64_t v6 = (llvm::Value *)llvm::ConstantFP::get();
  uint64_t v7 = (llvm::Value *)llvm::ConstantFP::get();
  long long v8 = (llvm::Value *)llvm::ConstantFP::get();
  if (v4 == *((void *)this + 19))
  {
    uint64_t v9 = (llvm::Type *)*((void *)this + 21);
    __int16 v54 = 257;
    FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), FPExt, v9, (const llvm::Twine *)v53);
  }
  int v10 = AGCLLVMBuilder::buildFma(this, FPExt, v6, v5);
  __int16 v54 = 257;
  uint64_t FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, (uint64_t)v5, (uint64_t)v10, (uint64_t)v53);
  long long v12 = AGCLLVMBuilder::buildFma(this, FPExt, v6, FSub);
  uint64_t v13 = AGCLLVMBuilder::buildFma(this, FPExt, v7, v12);
  if (v4 == *((void *)this + 19))
  {
    __int16 v54 = 257;
    uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)v13, (uint64_t)v13, (uint64_t)v53);
    __int16 v32 = (llvm::Value *)llvm::ConstantFP::get();
    int v33 = (llvm::Value *)llvm::ConstantFP::get();
    __int16 v34 = AGCLLVMBuilder::buildFma(this, FMul, v32, v33);
    uint64_t v35 = (llvm::Value *)llvm::ConstantFP::get();
    long long v36 = AGCLLVMBuilder::buildFma(this, v34, FMul, v35);
    uint64_t v37 = (llvm::Value *)llvm::ConstantFP::get();
    int v38 = AGCLLVMBuilder::buildFma(this, v36, FMul, v37);
    __int16 v54 = 257;
    uint64_t v39 = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)v13, (uint64_t)v38, (uint64_t)v53);
    uint64_t v40 = llvm::ConstantFP::get();
    __int16 v54 = 257;
    uint64_t FNeg = llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, v39, (uint64_t)v53);
    __int16 v50 = 257;
    llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v40, FNeg, (uint64_t)v49);
    uint64_t v42 = *((void *)this + 25);
    __int16 v54 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v10, v42, (uint64_t)v53);
    int v44 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v54 = 257;
    uint64_t v45 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), Cast, v44, (const llvm::Twine *)v53);
    uint64_t v46 = llvm::ConstantInt::get();
    __int16 v54 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, 32, v45, v46, (uint64_t)v53);
    __int16 v54 = 257;
    uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    char v48 = (llvm::Type *)*((void *)this + 19);
    __int16 v50 = 257;
    return llvm::IRBuilderBase::CreateFPTrunc((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), Select, v48, (const llvm::Twine *)v49);
  }
  else
  {
    int v14 = AGCLLVMBuilder::buildFma(this, FPExt, v8, v13);
    uint64_t v51 = v14;
    uint64_t v15 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, (uint64_t)"llvm.agx2.sinc.f32", 18, v4, v4);
    __int16 v54 = 257;
    uint64_t v16 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v15 + 24), v15, (uint64_t)&v51, 1, (uint64_t)v53);
    __int16 v50 = 257;
    llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)v14, (uint64_t)v16, (uint64_t)v49);
    uint64_t v17 = llvm::ConstantFP::get();
    Fabs = AGCLLVMTargetBuilder::CreateFabs(this, v51);
    __int16 v54 = 257;
    uint64_t v52 = llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v17, (uint64_t)Fabs, (uint64_t)v53);
    __int16 v54 = 257;
    uint64_t v19 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v15 + 24), v15, (uint64_t)&v52, 1, (uint64_t)v53);
    int v20 = AGCLLVMTargetBuilder::CreateFabs(this, v51);
    __int16 v54 = 257;
    uint64_t v21 = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)v20, (uint64_t)v53);
    long long v22 = AGCLLVMBuilder::buildFma(this, v19, v21, v19);
    uint64_t v23 = *((void *)this + 25);
    __int16 v54 = 257;
    int v24 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v10, v23, (uint64_t)v53);
    long long v25 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v54 = 257;
    uint64_t v26 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), v24, v25, (const llvm::Twine *)v53);
    uint64_t v27 = llvm::ConstantInt::get();
    __int16 v54 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, 32, v26, v27, (uint64_t)v53);
    __int16 v54 = 257;
    uint64_t v28 = llvm::IRBuilderBase::CreateSelect();
    __int16 v54 = 257;
    llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)v22, (uint64_t)v53);
    __int16 v50 = 257;
    uint64_t v29 = llvm::IRBuilderBase::CreateSelect();
    __int16 v54 = 257;
    llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v29, v28, (uint64_t)v53);
    AGCLLVMTargetBuilder::CreateFabs(this, FPExt);
    llvm::ConstantFP::get();
    __int16 v54 = 257;
    llvm::IRBuilderBase::CreateFCmpHelper();
    __int16 v50 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
}

uint64_t AGCLLVMAirBuiltinsGen7::buildArcsin(llvm::Type **this, llvm::Value *a2)
{
  if (*(llvm::Type **)a2 != this[19])
  {
    AGCLLVMAirBuiltinsGen2::buildArcsin((AGCLLVMAirBuiltinsGen2 *)this, a2);
  }
  uint64_t v3 = this[21];
  __int16 v24 = 257;
  FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(this + 1), a2, v3, (const llvm::Twine *)v23);
  Fabs = AGCLLVMTargetBuilder::CreateFabs((AGCLLVMTargetBuilder *)this, FPExt);
  llvm::ConstantFP::get();
  __int16 v24 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  uint64_t v6 = (llvm::Value *)llvm::ConstantFP::get();
  uint64_t v7 = (llvm::Value *)llvm::ConstantFP::get();
  long long v8 = AGCLLVMBuilder::buildFma((AGCLLVMBuilder *)this, v6, Fabs, v7);
  long long v22 = v8;
  uint64_t v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, (uint64_t)"llvm.agx2.sqrt.step.f32", 23, (uint64_t)this[21], (uint64_t)this[21]);
  __int16 v24 = 257;
  int v10 = llvm::IRBuilderBase::CreateCall((uint64_t)(this + 1), *(void *)(v9 + 24), v9, (uint64_t)&v22, 1, (uint64_t)v23);
  __int16 v21 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), (uint64_t)v8, (uint64_t)v10, (uint64_t)v20);
  __int16 v24 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v24 = 257;
  uint64_t v13 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), Select, Select, (uint64_t)v23);
  int v14 = AGCLLVMAirBuiltinsGen2::buildInverseTrigPolynomialWithSquare((AGCLLVMAirBuiltinsGen2 *)this, v13);
  __int16 v24 = 257;
  llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), (uint64_t)v14, (uint64_t)Fabs, (uint64_t)v23);
  uint64_t v15 = llvm::ConstantFP::get();
  __int16 v24 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), v15, FMul, (uint64_t)v23);
  uint64_t v17 = (llvm::Value *)llvm::ConstantFP::get();
  long long v22 = AGCLLVMBuilder::buildFma((AGCLLVMBuilder *)this, v16, v14, v17);
  __int16 v24 = 257;
  long long v22 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  llvm::ConstantFP::get();
  __int16 v24 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v24 = 257;
  llvm::IRBuilderBase::CreateFNeg((uint64_t)(this + 1), (uint64_t)v22, (uint64_t)v23);
  __int16 v21 = 257;
  long long v22 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  long long v18 = this[19];
  __int16 v24 = 257;
  return llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(this + 1), v22, v18, (const llvm::Twine *)v23);
}

uint64_t AGCLLVMAirBuiltinsGen7::buildArccos(llvm::Type **this, llvm::Value *a2)
{
  if (*(llvm::Type **)a2 != this[19])
  {
    AGCLLVMAirBuiltinsGen2::buildArccos((AGCLLVMAirBuiltinsGen2 *)this, a2);
  }
  uint64_t v3 = this[21];
  __int16 v24 = 257;
  FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(this + 1), a2, v3, (const llvm::Twine *)v23);
  Fabs = AGCLLVMTargetBuilder::CreateFabs((AGCLLVMTargetBuilder *)this, FPExt);
  uint64_t v6 = (llvm::Value *)llvm::ConstantFP::get();
  uint64_t v7 = (llvm::Value *)llvm::ConstantFP::get();
  long long v8 = AGCLLVMBuilder::buildFma((AGCLLVMBuilder *)this, v6, Fabs, v7);
  uint64_t Select = v8;
  uint64_t v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, (uint64_t)"llvm.agx2.sqrt.step.f32", 23, (uint64_t)this[21], (uint64_t)this[21]);
  __int16 v24 = 257;
  int v10 = llvm::IRBuilderBase::CreateCall((uint64_t)(this + 1), *(void *)(v9 + 24), v9, (uint64_t)&Select, 1, (uint64_t)v23);
  __int16 v21 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), (uint64_t)v8, (uint64_t)v10, (uint64_t)v20);
  uint64_t v12 = llvm::ConstantFP::get();
  __int16 v24 = 257;
  uint64_t v13 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), FMul, FMul, (uint64_t)v23);
  int v14 = AGCLLVMAirBuiltinsGen2::buildInverseTrigPolynomialWithSquare((AGCLLVMAirBuiltinsGen2 *)this, v13);
  __int16 v24 = 257;
  uint64_t v15 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), v12, (uint64_t)v14, (uint64_t)v23);
  llvm::ConstantFP::get();
  __int16 v24 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v24 = 257;
  uint64_t FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)(this + 1), FMul, (uint64_t)v23);
  uint64_t v17 = (llvm::Value *)llvm::ConstantFP::get();
  AGCLLVMBuilder::buildFma((AGCLLVMBuilder *)this, FNeg, v15, v17);
  __int16 v21 = 257;
  llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), (uint64_t)v15, FMul, (uint64_t)v20);
  uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  long long v18 = this[19];
  __int16 v24 = 257;
  return llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(this + 1), Select, v18, (const llvm::Twine *)v23);
}

uint64_t AGCLLVMAirBuiltinsGen7::buildSinCos(AGCLLVMAirBuiltinsGen7 *this, llvm::Type **a2, int a3)
{
  FPExt = (llvm::Value *)a2;
  uint64_t v6 = *a2;
  uint64_t v7 = (llvm::Value *)llvm::ConstantFP::get();
  long long v8 = (llvm::Value *)llvm::ConstantFP::get();
  uint64_t v9 = (llvm::Value *)llvm::ConstantFP::get();
  int v10 = (llvm::Value *)llvm::ConstantFP::get();
  if (v6 == *((llvm::Type **)this + 19))
  {
    long long v11 = (llvm::Type *)*((void *)this + 21);
    __int16 v38 = 257;
    FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), FPExt, v11, (const llvm::Twine *)v37);
  }
  uint64_t v12 = AGCLLVMBuilder::buildFma(this, FPExt, v8, v7);
  __int16 v38 = 257;
  uint64_t FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, (uint64_t)v7, (uint64_t)v12, (uint64_t)v37);
  int v14 = AGCLLVMBuilder::buildFma(this, FPExt, v8, FSub);
  uint64_t v15 = AGCLLVMBuilder::buildFma(this, FPExt, v9, v14);
  if (v6 == *((llvm::Type **)this + 21))
  {
    uint64_t v15 = AGCLLVMBuilder::buildFma(this, FPExt, v10, v15);
    uint64_t v36 = (uint64_t)v15;
  }
  uint64_t v16 = llvm::ConstantFP::get();
  Fabs = AGCLLVMTargetBuilder::CreateFabs(this, v15);
  __int16 v38 = 257;
  llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v16, (uint64_t)Fabs, (uint64_t)v37);
  uint64_t v18 = *((void *)this + 25);
  __int16 v38 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v12, v18, (uint64_t)v37);
  int v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v38 = 257;
  __int16 v21 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), Cast, v20, (const llvm::Twine *)v37);
  uint64_t v22 = llvm::ConstantInt::get();
  __int16 v38 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, 32, v21, v22, (uint64_t)v37);
  __int16 v38 = 257;
  if (a3)
  {
    llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)v15, (uint64_t)v37);
    __int16 v35 = 257;
  }
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  uint64_t v24 = *((void *)this + 25);
  __int16 v38 = 257;
  long long v25 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v12, v24, (uint64_t)v37);
  uint64_t v26 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v38 = 257;
  uint64_t v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), v25, v26, (const llvm::Twine *)v37);
  uint64_t v28 = llvm::ConstantInt::get();
  __int16 v38 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, 32, v27, v28, (uint64_t)v37);
  __int16 v38 = 257;
  llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, Select, (uint64_t)v37);
  __int16 v35 = 257;
  uint64_t v29 = llvm::IRBuilderBase::CreateSelect();
  uint64_t v36 = v29;
  uint64_t v30 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, (uint64_t)"llvm.agx2.sinc.f32", 18, *((void *)this + 21), *((void *)this + 21));
  __int16 v38 = 257;
  long long v31 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v30 + 24), v30, (uint64_t)&v36, 1, (uint64_t)v37);
  __int16 v35 = 257;
  uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, v29, (uint64_t)v31, (uint64_t)v34);
  uint64_t v36 = (uint64_t)FMul;
  if (v6 == *((llvm::Type **)this + 19))
  {
    __int16 v38 = 257;
    return llvm::IRBuilderBase::CreateFPTrunc((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), FMul, v6, (const llvm::Twine *)v37);
  }
  else
  {
    AGCLLVMTargetBuilder::CreateFabs(this, FPExt);
    llvm::ConstantFP::get();
    __int16 v38 = 257;
    llvm::IRBuilderBase::CreateFCmpHelper();
    if (a3) {
      llvm::ConstantFP::get();
    }
    __int16 v35 = 257;
    llvm::IRBuilderBase::CreateSelect();
    llvm::ConstantFP::get();
    __int16 v38 = 257;
    llvm::IRBuilderBase::CreateFCmpHelper();
    llvm::ConstantFP::get();
    __int16 v35 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
}

uint64_t AGCLLVMAirBuiltins::buildArctan2(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  uint64_t v6 = (char *)this + 8;
  __int16 v12 = 257;
  uint64_t FDiv = llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a3, (uint64_t)v11);
  uint64_t v8 = (*(uint64_t (**)(AGCLLVMAirBuiltins *, uint64_t))(*(void *)this + 32))(this, FDiv);
  __int16 v12 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v12 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v12 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v12 = 257;
  llvm::IRBuilderBase::CreateFAdd((uint64_t)v6, v8, Select, (uint64_t)v11);
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *AGCLLVMAirBuiltins::buildMetalSinCos(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12
    && (uint64_t v6 = *(unsigned int *)(*(void *)a2 + 32), v6 != 1))
  {
    int v10 = (llvm::Value *)llvm::UndefValue::get();
    Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        __int16 v21 = 257;
        uint64_t v13 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((AGCLLVMAirBuiltins *)((char *)this + 8), a2, v13, (const llvm::Twine *)v20);
        uint64_t v15 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMAirBuiltins *, uint64_t, uint64_t))(*(void *)this + 24))(this, Element, 1);
        __int16 v21 = 257;
        uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltins *)((char *)this + 8), InsertElement, v15, v16, (const llvm::Twine *)v20);
        uint64_t v17 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMAirBuiltins *, uint64_t, void))(*(void *)this + 24))(this, Element, 0);
        __int16 v21 = 257;
        uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
        int v10 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltins *)((char *)this + 8), v10, v17, v18, (const llvm::Twine *)v20);
      }
    }
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)this + 1, (llvm::Type **)InsertElement, (uint64_t)a3, 0);
    return v10;
  }
  else
  {
    uint64_t v7 = (llvm::Type **)(*(uint64_t (**)(AGCLLVMAirBuiltins *, llvm::Value *, uint64_t))(*(void *)this + 24))(this, a2, 1);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)this + 1, v7, (uint64_t)a3, 0);
    uint64_t v8 = *(uint64_t (**)(AGCLLVMAirBuiltins *, llvm::Value *, void))(*(void *)this + 24);
    return (llvm::Value *)v8(this, a2, 0);
  }
}

llvm::Value *AGCLLVMAirBuiltins::buildArccosh(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = (char *)this + 8;
  __int16 v13 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v12);
  uint64_t v6 = llvm::ConstantFP::get();
  unsigned char v11[16] = 257;
  uint64_t FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)v4, FMul, v6, (uint64_t)v11);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, FSub);
  __int16 v13 = 257;
  Fuint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)v4, (uint64_t)a2, (uint64_t)Sqrt, (uint64_t)v12);
  return AGCLLVMTargetBuilder::CreateLog(this, FAdd);
}

llvm::Value *AGCLLVMTargetBuilder::CreateLog(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMTargetBuilder *)((char *)this + 8));
  int v5 = *((_DWORD *)this + 26);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  uint64_t v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.log");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

llvm::Value *AGCLLVMAirBuiltins::buildArcsinh(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = (char *)this + 8;
  __int16 v13 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v12);
  uint64_t v6 = llvm::ConstantFP::get();
  unsigned char v11[16] = 257;
  Fuint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)v4, FMul, v6, (uint64_t)v11);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, FAdd);
  __int16 v13 = 257;
  uint64_t v9 = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)v4, (uint64_t)a2, (uint64_t)Sqrt, (uint64_t)v12);
  return AGCLLVMTargetBuilder::CreateLog(this, v9);
}

uint64_t AGCLLVMAirBuiltins::buildArctanh(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  __int16 v12 = 257;
  Fuint64_t Add = llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, v4, (uint64_t)a2, (uint64_t)v11);
  __int16 v12 = 257;
  uint64_t FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v4, (uint64_t)a2, (uint64_t)v11);
  __int16 v12 = 257;
  uint64_t FDiv = (llvm::Value *)llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, FAdd, FSub, (uint64_t)v11);
  Log = AGCLLVMTargetBuilder::CreateLog(this, FDiv);
  uint64_t v9 = llvm::ConstantFP::get();
  __int16 v12 = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)Log, v9, (uint64_t)v11);
}

uint64_t AGCLLVMAirBuiltins::buildCosh(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  Exp = AGCLLVMTargetBuilder::CreateExp(this, a2);
  __int16 v12 = 257;
  uint64_t FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)a2, (uint64_t)v11);
  uint64_t v6 = AGCLLVMTargetBuilder::CreateExp(this, FNeg);
  __int16 v12 = 257;
  Fuint64_t Add = llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, (uint64_t)Exp, (uint64_t)v6, (uint64_t)v11);
  uint64_t v8 = llvm::ConstantFP::get();
  v10[16] = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, FAdd, v8, (uint64_t)v10);
}

llvm::Value *AGCLLVMTargetBuilder::CreateExp(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMTargetBuilder *)((char *)this + 8));
  int v5 = *((_DWORD *)this + 26);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  uint64_t v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.exp");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltins::buildFmod(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = (AGCLLVMAirBuiltins *)((char *)this + 8);
  __int16 v18 = 257;
  uint64_t FDiv = (uint64_t *)llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a3, (uint64_t)v17);
  uint64_t v8 = *((void *)this + 46);
  long long v19 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v20, v6);
  int v9 = *((_DWORD *)this + 26);
  int v21 = v9;
  long long v13 = v19;
  uint64_t v14 = v20;
  if (v20)
  {
    llvm::MetadataTracking::track();
    int v9 = v21;
  }
  int v15 = v9;
  int v10 = AGCLLVMTargetLowerer::CallFPIntrinsic(v8, (uint64_t)&v13, FDiv, "llvm.trunc");
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  if (v20) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v18 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)v6, (uint64_t)v10, (uint64_t)a3, (uint64_t)v17);
  __int16 v16 = 257;
  return llvm::IRBuilderBase::CreateFSub((uint64_t)v6, (uint64_t)a2, FMul, (uint64_t)&v13);
}

uint64_t AGCLLVMAirBuiltins::buildMod(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = (char *)this + 8;
  __int16 v13 = 257;
  uint64_t FDiv = (llvm::Value *)llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a3, (uint64_t)v12);
  Floor = AGCLLVMTargetBuilder::CreateFloor(this, FDiv);
  __int16 v13 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)v6, (uint64_t)Floor, (uint64_t)a3, (uint64_t)v12);
  unsigned char v11[16] = 257;
  return llvm::IRBuilderBase::CreateFSub((uint64_t)v6, (uint64_t)a2, FMul, (uint64_t)v11);
}

uint64_t AGCLLVMAirBuiltins::buildFract(llvm::Type **this, llvm::Value *a2)
{
  uint64_t v4 = *(void *)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
  {
    if (*(unsigned char *)(**(void **)(v4 + 16) + 8) == 2)
    {
      int v5 = *(_DWORD *)(v4 + 32);
      uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v7 = (uint64_t)AGCLLVMBuilder::splat((AGCLLVMBuilder *)this, v5, v6);
LABEL_6:
      uint64_t v8 = v7;
      int v9 = (llvm::Value *)AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)this, a2, this[25]);
      __int16 v16 = 257;
      int v10 = (llvm::Value *)llvm::ConstantInt::get();
      Shl = (llvm::CmpInst **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(this + 1), v9, v10, (const llvm::Twine *)v15);
      __int16 v16 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, 32, Shl, v8, (uint64_t)v15);
      Floor = AGCLLVMTargetBuilder::CreateFloor((AGCLLVMTargetBuilder *)this, a2);
      __int16 v16 = 257;
      llvm::IRBuilderBase::CreateFSub((uint64_t)(this + 1), (uint64_t)a2, (uint64_t)Floor, (uint64_t)v15);
      llvm::ConstantFP::get();
      __int16 v16 = 257;
      llvm::IRBuilderBase::CreateFCmpHelper();
      llvm::ConstantFP::get();
      llvm::IRBuilderBase::CreateSelect();
      llvm::ConstantFP::get();
      __int16 v16 = 257;
      return llvm::IRBuilderBase::CreateSelect();
    }
  }
  else if (*(_DWORD *)(*(void *)a2 + 8) == 2)
  {
    uint64_t v7 = llvm::ConstantInt::get();
    goto LABEL_6;
  }
  uint64_t v14 = AGCLLVMTargetBuilder::CreateFloor((AGCLLVMTargetBuilder *)this, a2);
  __int16 v16 = 257;
  return llvm::IRBuilderBase::CreateFSub((uint64_t)(this + 1), (uint64_t)a2, (uint64_t)v14, (uint64_t)v15);
}

uint64_t AGCLLVMAirBuiltins::buildFastFract(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = (char *)this + 8;
  Floor = AGCLLVMTargetBuilder::CreateFloor(this, a2);
  __int16 v16 = 257;
  uint64_t FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)v4, (uint64_t)a2, (uint64_t)Floor, (uint64_t)v15);
  uint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(*(void *)a2 + 8);
  int v9 = v8;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    int v9 = *(unsigned __int8 *)(**(void **)(v7 + 16) + 8);
  }
  if (v9 == 2)
  {
    int v10 = (void *)*((void *)this + 94);
    if (!v10 || (*((unsigned char *)v10 + *(void *)(*v10 - 24) + 136) & 4) == 0)
    {
      if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
        int v8 = *(unsigned __int8 *)(**(void **)(v7 + 16) + 8);
      }
      if (v8 == 2)
      {
        uint64_t v11 = llvm::ConstantInt::get();
        uint64_t v12 = *((void *)this + 21);
      }
      else
      {
        uint64_t v11 = llvm::ConstantInt::get();
        uint64_t v12 = *((void *)this + 19);
      }
      __int16 v16 = 257;
      uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v4, 49, v11, v12, (uint64_t)v15);
      if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12) {
        AGCLLVMBuilder::splat(this, *(_DWORD *)(v7 + 32), Cast);
      }
      AGCLLVMTargetBuilder::CreateFabs(this, a2);
      __int16 v16 = 257;
      llvm::IRBuilderBase::CreateFCmpHelper();
      llvm::ConstantFP::get();
      __int16 v16 = 257;
      return llvm::IRBuilderBase::CreateSelect();
    }
  }
  return FSub;
}

uint64_t AGCLLVMAirBuiltins::buildFmad(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  int v5 = (char *)this + 8;
  __int16 v9 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a3, (uint64_t)v8);
  __int16 v9 = 257;
  return llvm::IRBuilderBase::CreateFAdd((uint64_t)v5, FMul, (uint64_t)a4, (uint64_t)v8);
}

llvm::Value *AGCLLVMAirBuiltins::buildExp10(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  __int16 v8 = 257;
  uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, v4, (uint64_t)v7);
  return AGCLLVMTargetBuilder::CreateExp2(this, FMul);
}

llvm::Value *AGCLLVMTargetBuilder::CreateExp2(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMTargetBuilder *)((char *)this + 8));
  int v5 = *((_DWORD *)this + 26);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  uint64_t v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.exp2");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltins::buildLog10(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  Log2 = AGCLLVMTargetBuilder::CreateLog2(this, a2);
  __int16 v8 = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)Log2, v4, (uint64_t)v7);
}

llvm::Value *AGCLLVMTargetBuilder::CreateLog2(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMTargetBuilder *)((char *)this + 8));
  int v5 = *((_DWORD *)this + 26);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  uint64_t v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.log2");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltins::buildRound(llvm::Type **this, llvm::Value *a2)
{
  AGCLLVMTargetBuilder::CreateFabs((AGCLLVMTargetBuilder *)this, a2);
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateSelect();
  __int16 v11 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v13 = 257;
  Fuint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)(this + 1), (uint64_t)a2, Select, (uint64_t)v12);
  uint64_t v6 = this[25];
  __int16 v13 = 257;
  FPToSI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToSI((llvm::IRBuilderBase *)(this + 1), FAdd, v6, (const llvm::Twine *)v12);
  long long v8 = this[21];
  __int16 v11 = 257;
  llvm::IRBuilderBase::CreateSIToFP((llvm::IRBuilderBase *)(this + 1), FPToSI, v8, (const llvm::Twine *)&v10);
  llvm::ConstantFP::get();
  __int16 v13 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  __int16 v13 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::buildSinh(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  Exp = AGCLLVMTargetBuilder::CreateExp(this, a2);
  __int16 v12 = 257;
  uint64_t FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)a2, (uint64_t)v11);
  uint64_t v6 = AGCLLVMTargetBuilder::CreateExp(this, FNeg);
  __int16 v12 = 257;
  uint64_t FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, (uint64_t)Exp, (uint64_t)v6, (uint64_t)v11);
  uint64_t v8 = llvm::ConstantFP::get();
  v10[16] = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, FSub, v8, (uint64_t)v10);
}

uint64_t AGCLLVMAirBuiltins::buildTanh(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = (char *)this + 8;
  uint64_t v5 = llvm::ConstantFP::get();
  __int16 v14 = 257;
  uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)v4, (uint64_t)a2, v5, (uint64_t)v13);
  Exp = AGCLLVMTargetBuilder::CreateExp(this, FMul);
  uint64_t v8 = llvm::ConstantFP::get();
  __int16 v14 = 257;
  uint64_t FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)v4, (uint64_t)Exp, v8, (uint64_t)v13);
  uint64_t v10 = llvm::ConstantFP::get();
  __int16 v14 = 257;
  Fuint64_t Add = llvm::IRBuilderBase::CreateFAdd((uint64_t)v4, (uint64_t)Exp, v10, (uint64_t)v13);
  __int16 v14 = 257;
  return llvm::IRBuilderBase::CreateFDiv((uint64_t)v4, FSub, FAdd, (uint64_t)v13);
}

llvm::Value *llvm::IRBuilderBase::CreateIntCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, BOOL a4, const llvm::Twine *a5)
{
  Integeruint64_t Cast = (llvm::Value *)a2;
  if (*a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      Integeruint64_t Cast = (llvm::Value *)llvm::CastInst::CreateIntegerCast();
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)IntegerCast, (uint64_t)a5);
    }
    else
    {
      Integeruint64_t Cast = (llvm::Value *)(*(uint64_t (**)(void, llvm::Type **))(**((void **)this + 9) + 248))(*((void *)this + 9), a2);
      if (IntegerCast) {
        BOOL v8 = *((unsigned __int8 *)IntegerCast + 16) >= 0x1Cu;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8) {
        llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)IntegerCast, (uint64_t)a5);
      }
    }
  }
  return IntegerCast;
}

void *llvm::SmallVectorTemplateBase<char,true>::push_back(void *result, char a2)
{
  uint64_t v2 = result[1];
  if ((unint64_t)(v2 + 1) > result[2]) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(unsigned char *)(*result + v2) = a2;
  ++result[1];
  return result;
}

uint64_t llvm::StringMap<AGCLLVMAirBuiltins::ConversionFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 25));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t AGCLLVMAirBuiltins::buildPack(uint64_t a1, llvm::Value **a2)
{
  AGCLLVMAirBuiltins::initializePackUnpackMap((AGCLLVMAirBuiltins *)a1);
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t v5 = AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map;
  if (Key == -1) {
    uint64_t v6 = dword_1EBD0E0E8;
  }
  else {
    uint64_t v6 = Key;
  }
  uint64_t v7 = *(void *)(AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map + 8 * v6);
  switch(*(_DWORD *)(v7 + 8))
  {
    case 0:
      BOOL v8 = *a2;
      uint64_t v9 = *(uint64_t (**)(uint64_t, llvm::Value *, uint64_t))(*(void *)a1 + 96);
      return v9(a1, v8, v7 + 12);
    case 1:
      uint64_t v11 = *(void *)*a2;
      if (*(_DWORD *)(v11 + 32) == 3)
      {
        if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
          uint64_t v11 = **(void **)(v11 + 16);
        }
        __int16 v12 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, *a2, 4);
        *a2 = v12;
        Nulluint64_t Value = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)v11, v13);
        __int16 v36 = 257;
        int v15 = (llvm::Value *)llvm::ConstantInt::get();
        *a2 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v12, NullValue, v15, (const llvm::Twine *)v35);
      }
      uint64_t v16 = *(void *)(a1 + 368);
      long long v32 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v33, (llvm::IRBuilderBase *)(a1 + 8));
      int v34 = *(_DWORD *)(a1 + 104);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, llvm::Value *, uint64_t, void))(*(void *)v16 + 104))(v16, &v32, 5, *(void *)(a1 + 200), *a2, 1, *(unsigned __int8 *)(*(void *)(v5 + 8 * v6) + 12));
      if (v33) {
        goto LABEL_19;
      }
      return v17;
    case 2:
      uint64_t v18 = *(void *)(a1 + 368);
      long long v29 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v30, (llvm::IRBuilderBase *)(a1 + 8));
      int v31 = *(_DWORD *)(a1 + 104);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, void, void, llvm::Value *, uint64_t, void))(*(void *)v18 + 104))(v18, &v29, 0, *(void *)(a1 + 192), *a2, 1, 0);
      if (!v30) {
        return v17;
      }
      goto LABEL_19;
    case 3:
      uint64_t v19 = *(void *)(a1 + 368);
      long long v26 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v27, (llvm::IRBuilderBase *)(a1 + 8));
      int v28 = *(_DWORD *)(a1 + 104);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, llvm::Value *, uint64_t, void))(*(void *)v19 + 104))(v19, &v26, 7, *(void *)(a1 + 192), *a2, 1, 0);
      if (!v27) {
        return v17;
      }
      goto LABEL_19;
    case 4:
      uint64_t v20 = *(void *)(a1 + 368);
      long long v23 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v24, (llvm::IRBuilderBase *)(a1 + 8));
      int v25 = *(_DWORD *)(a1 + 104);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, llvm::Value *, uint64_t, void))(*(void *)v20 + 104))(v20, &v23, 8, *(void *)(a1 + 192), *a2, 1, 0);
      if (v24) {
LABEL_19:
      }
        llvm::MetadataTracking::untrack();
      return v17;
    case 5:
      int v21 = *a2;
      uint64_t v22 = *(uint64_t (**)(uint64_t, llvm::Value *))(*(void *)a1 + 112);
      return v22(a1, v21);
    default:
      return 0;
  }
}

void AGCLLVMAirBuiltins::initializePackUnpackMap(AGCLLVMAirBuiltins *this)
{
  {
    AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map = 0;
    *(void *)&dword_1EBD0E0E8 = 0;
    qword_1EBD0E0F0 = 0x1000000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map, &dword_1CAC02000);
  }
  char v1 = dword_1EBD0E0EC;
  if (!dword_1EBD0E0EC)
  {
    uint64_t v2 = 0;
    do
    {
      char v3 = 0;
      uint64_t v4 = 0;
      char v62 = v1;
      uint64_t v5 = off_1E65EA7F8[v2];
      do
      {
        uint64_t v6 = 0;
        char v64 = v3;
        uint64_t v7 = off_1E65EA808[v4];
        do
        {
          unsigned __int8 v8 = atoi(v5);
          unsigned __int8 v9 = atoi(v7);
          uint64_t v10 = off_1E65EA818[v6];
          unsigned __int8 v11 = atoi(v10);
          std::string::basic_string[abi:nn180100]<0>(&v70, ".");
          if ((v11 & 0xFE) != 0)
          {
            std::string::append(&v70, "v");
            std::string::append(&v70, v10);
          }
          std::string::append(&v70, "f");
          std::string::append(&v70, v5);
          std::string::basic_string[abi:nn180100]<0>(&v69, v10);
          std::string::append(&v69, "x");
          std::string::append(&v69, v7);
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v12 = &v70;
          }
          else {
            __int16 v12 = (std::string *)v70.__r_.__value_.__r.__words[0];
          }
          if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v70.__r_.__value_.__l.__size_;
          }
          std::string::append(&v69, (const std::string::value_type *)v12, size);
          std::operator+<char>();
          if ((v68 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          if ((v68 & 0x80u) == 0) {
            size_t v15 = v68;
          }
          else {
            size_t v15 = v67;
          }
          unint64_t v16 = ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v11 << 48);
          *(void *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(p_p, v15)+ 8) = v16 | 0x100000000000000;
          if ((char)v68 < 0) {
            operator delete(__p);
          }
          std::operator+<char>();
          if ((v68 & 0x80u) == 0) {
            uint64_t v17 = &__p;
          }
          else {
            uint64_t v17 = __p;
          }
          if ((v68 & 0x80u) == 0) {
            size_t v18 = v68;
          }
          else {
            size_t v18 = v67;
          }
          *(void *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(v17, v18)+ 8) = v16;
          if ((char)v68 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v69.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          ++v6;
        }
        while (v6 != 3);
        char v3 = 1;
        uint64_t v4 = 1;
      }
      while ((v64 & 1) == 0);
      char v1 = 1;
      uint64_t v2 = 1;
    }
    while ((v62 & 1) == 0);
    char v19 = 0;
    uint64_t v20 = 0;
    uint64_t v63 = 0x10000000001;
    do
    {
      char v61 = v19;
      char v21 = 1;
      do
      {
        char v65 = v21;
        BOOL v22 = (v21 & 1) == 0;
        if (v21) {
          long long v23 = ".rgb10.v3f";
        }
        else {
          long long v23 = ".rgb10a2.v4f";
        }
        uint64_t v24 = 0x1000000000000;
        if (!v22) {
          uint64_t v24 = 0;
        }
        uint64_t v25 = v63 | v24;
        char v26 = 1;
        do
        {
          char v27 = v26;
          if (v26) {
            int v28 = "unorm";
          }
          else {
            int v28 = "snorm";
          }
          if (v26) {
            uint64_t v29 = 0;
          }
          else {
            uint64_t v29 = 0x100000000;
          }
          uint64_t v30 = v25 | v29;
          char v31 = 1;
          do
          {
            char v32 = v31;
            std::string::basic_string[abi:nn180100]<0>(&v70, v28);
            std::string::append(&v70, v23);
            std::string::append(&v70, off_1E65EA7F8[v20]);
            if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v33 = &v70;
            }
            else {
              uint64_t v33 = (std::string *)v70.__r_.__value_.__r.__words[0];
            }
            if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v34 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v34 = v70.__r_.__value_.__l.__size_;
            }
            *(void *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(v33, v34)+ 8) = v30;
            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v70.__r_.__value_.__l.__data_);
            }
            char v31 = 0;
          }
          while ((v32 & 1) != 0);
          char v26 = 0;
        }
        while ((v27 & 1) != 0);
        char v21 = 0;
      }
      while ((v65 & 1) != 0);
      uint64_t v63 = 1;
      char v19 = 1;
      uint64_t v20 = 1;
    }
    while ((v61 & 1) == 0);
    uint64_t v35 = 0;
    char v36 = 1;
    do
    {
      char v37 = v36;
      std::string::basic_string[abi:nn180100]<0>(&v70, "unorm.rgb565.v3f");
      std::string::append(&v70, off_1E65EA7F8[v35]);
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v38 = &v70;
      }
      else {
        __int16 v38 = (std::string *)v70.__r_.__value_.__r.__words[0];
      }
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v39 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v39 = v70.__r_.__value_.__l.__size_;
      }
      *(void *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(v38, v39)+ 8) = 2;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      char v36 = 0;
      uint64_t v35 = 1;
    }
    while ((v37 & 1) != 0);
    uint64_t v40 = 0;
    char v41 = 1;
    do
    {
      char v42 = v41;
      std::string::basic_string[abi:nn180100]<0>(&v69, "unorm4x8.srgb.v4f");
      uint64_t v43 = std::string::append(&v69, off_1E65EA7F8[v40]);
      std::string::size_type v44 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v45 = &v70;
      }
      else {
        uint64_t v45 = (std::string *)v70.__r_.__value_.__r.__words[0];
      }
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v46 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v46 = v70.__r_.__value_.__l.__size_;
      }
      *(void *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(v45, v46)+ 8) = 5;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      char v41 = 0;
      uint64_t v40 = 1;
    }
    while ((v42 & 1) != 0);
    uint64_t v47 = 0;
    char v48 = 1;
    do
    {
      char v49 = v48;
      std::string::basic_string[abi:nn180100]<0>(&v69, "unorm.rg11b10f.v3f");
      __int16 v50 = std::string::append(&v69, off_1E65EA7F8[v47]);
      std::string::size_type v51 = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v52 = &v70;
      }
      else {
        uint64_t v52 = (std::string *)v70.__r_.__value_.__r.__words[0];
      }
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v53 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v53 = v70.__r_.__value_.__l.__size_;
      }
      *(void *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(v52, v53)+ 8) = 3;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      char v48 = 0;
      uint64_t v47 = 1;
    }
    while ((v49 & 1) != 0);
    uint64_t v54 = 0;
    char v55 = 1;
    do
    {
      char v56 = v55;
      std::string::basic_string[abi:nn180100]<0>(&v69, "unorm.rgb9e5.v3f");
      std::string::size_type v57 = std::string::append(&v69, off_1E65EA7F8[v54]);
      std::string::size_type v58 = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v59 = &v70;
      }
      else {
        std::string::size_type v59 = (std::string *)v70.__r_.__value_.__r.__words[0];
      }
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v60 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v60 = v70.__r_.__value_.__l.__size_;
      }
      *(void *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(v59, v60)+ 8) = 4;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      char v55 = 0;
      uint64_t v54 = 1;
    }
    while ((v56 & 1) != 0);
  }
}

uint64_t *llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EBD0E0F0) = qword_1EBD0E0F0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x1CB79F270](a2 + 17, 8);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 16;
  if (a2) {
    memcpy((void *)(v8 + 16), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *(void *)uint64_t v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  *uint64_t i = v9;
  ++dword_1EBD0E0EC;
  for (uint64_t i = (uint64_t *)(AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t AGCLLVMAirBuiltins::buildUnpack(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  AGCLLVMAirBuiltins::initializePackUnpackMap((AGCLLVMAirBuiltins *)a1);
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t v9 = AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map;
  if (Key == -1) {
    uint64_t v10 = dword_1EBD0E0E8;
  }
  else {
    uint64_t v10 = Key;
  }
  uint64_t v11 = *(void *)(AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map + 8 * v10);
  switch(*(_DWORD *)(v11 + 8))
  {
    case 0:
      uint64_t v12 = *a2;
      __int16 v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104);
      return v13(a1, v12, v11 + 12);
    case 1:
      if (*(unsigned char *)(v11 + 14)) {
        uint64_t v19 = 5;
      }
      else {
        uint64_t v19 = 4;
      }
      BOOL v20 = *(unsigned char *)(v11 + 13) == 0;
      uint64_t v21 = 152;
      if (v20) {
        uint64_t v21 = 168;
      }
      uint64_t v22 = *(void *)(a1 + v21);
      uint64_t v23 = *(void *)(a1 + 368);
      long long v47 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v48, (llvm::IRBuilderBase *)(a1 + 8));
      int v49 = *(_DWORD *)(a1 + 104);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t, void))(*(void *)v23 + 112))(v23, &v47, v19, v22, *a2, 1, *(unsigned __int8 *)(*(void *)(v9 + 8 * v10) + 12));
      if (v48) {
        goto LABEL_54;
      }
      return v18;
    case 2:
      if (a4 > 2)
      {
        unsigned int v26 = bswap32(*(unsigned __int16 *)(a3 + a4 - 3)) >> 16;
        if (v26 == 26161)
        {
          int v27 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
        }
        else if (v26 < 0x6631)
        {
          int v27 = -1;
        }
        else
        {
          int v27 = 1;
        }
        if (v27) {
          size_t v15 = (uint64_t *)(a1 + 168);
        }
        else {
          size_t v15 = (uint64_t *)(a1 + 152);
        }
      }
      else
      {
        size_t v15 = (uint64_t *)(a1 + 168);
      }
      uint64_t v32 = *v15;
      uint64_t v33 = *(void *)(a1 + 368);
      long long v44 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v45, (llvm::IRBuilderBase *)(a1 + 8));
      int v46 = *(_DWORD *)(a1 + 104);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, long long *, void, uint64_t, void, uint64_t, void))(*(void *)v33 + 112))(v33, &v44, 0, v32, *a2, 1, 0);
      if (!v45) {
        return v18;
      }
      goto LABEL_54;
    case 3:
      if (a4 > 2)
      {
        unsigned int v28 = bswap32(*(unsigned __int16 *)(a3 + a4 - 3)) >> 16;
        if (v28 == 26161)
        {
          int v29 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
        }
        else if (v28 < 0x6631)
        {
          int v29 = -1;
        }
        else
        {
          int v29 = 1;
        }
        if (v29) {
          unint64_t v16 = (uint64_t *)(a1 + 168);
        }
        else {
          unint64_t v16 = (uint64_t *)(a1 + 152);
        }
      }
      else
      {
        unint64_t v16 = (uint64_t *)(a1 + 168);
      }
      uint64_t v34 = *v16;
      uint64_t v35 = *(void *)(a1 + 368);
      long long v41 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v42, (llvm::IRBuilderBase *)(a1 + 8));
      int v43 = *(_DWORD *)(a1 + 104);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t, void))(*(void *)v35 + 112))(v35, &v41, 7, v34, *a2, 1, 0);
      if (!v42) {
        return v18;
      }
      goto LABEL_54;
    case 4:
      if (a4 > 2)
      {
        unsigned int v30 = bswap32(*(unsigned __int16 *)(a3 + a4 - 3)) >> 16;
        if (v30 == 26161)
        {
          int v31 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
        }
        else if (v30 < 0x6631)
        {
          int v31 = -1;
        }
        else
        {
          int v31 = 1;
        }
        if (v31) {
          uint64_t v17 = (uint64_t *)(a1 + 168);
        }
        else {
          uint64_t v17 = (uint64_t *)(a1 + 152);
        }
      }
      else
      {
        uint64_t v17 = (uint64_t *)(a1 + 168);
      }
      uint64_t v36 = *v17;
      uint64_t v37 = *(void *)(a1 + 368);
      long long v38 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v39, (llvm::IRBuilderBase *)(a1 + 8));
      int v40 = *(_DWORD *)(a1 + 104);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t, void))(*(void *)v37 + 112))(v37, &v38, 8, v36, *a2, 1, 0);
      if (v39) {
LABEL_54:
      }
        llvm::MetadataTracking::untrack();
      return v18;
    case 5:
      uint64_t v24 = *a2;
      uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)a1 + 120);
      return v25(a1, v24, a3, a4);
    default:
      return 0;
  }
}

uint64_t AGCLLVMAirBuiltins::buildClamp(AGCLLVMBuilder *this, uint64_t a2, unsigned __int8 *a3)
{
  int v4 = *a3;
  if (v4 == 117)
  {
    uint64_t v10 = *(llvm::Value **)(a2 + 16);
    uint64_t v6 = (llvm::CmpInst **)AGCLLVMBuilder::buildICmpSel(this, *(llvm::CmpInst ***)a2, *(llvm::Value **)(a2 + 8), 34);
    uint64_t v7 = this;
    uint64_t v8 = v10;
    uint64_t v9 = 36;
    goto LABEL_5;
  }
  if (v4 == 115)
  {
    uint64_t v5 = *(llvm::Value **)(a2 + 16);
    uint64_t v6 = (llvm::CmpInst **)AGCLLVMBuilder::buildICmpSel(this, *(llvm::CmpInst ***)a2, *(llvm::Value **)(a2 + 8), 38);
    uint64_t v7 = this;
    uint64_t v8 = v5;
    uint64_t v9 = 40;
LABEL_5:
    return AGCLLVMBuilder::buildICmpSel(v7, v6, v8, v9);
  }
  uint64_t v12 = *(llvm::CmpInst ***)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = *((void *)this + 46);
  long long v18 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v19, (AGCLLVMBuilder *)((char *)this + 8));
  int v20 = *((_DWORD *)this + 26);
  unint64_t v16 = *v12;
  if ((*((_DWORD *)*v12 + 2) & 0xFE) == 0x12) {
    unint64_t v16 = (llvm::CmpInst *)**((void **)v16 + 2);
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, llvm::CmpInst **, uint64_t, uint64_t, BOOL))(*(void *)v15 + 80))(v15, &v18, v12, v13, v14, v16 == *((llvm::CmpInst **)this + 21));
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  return v17;
}

uint64_t AGCLLVMAirBuiltins::buildPopCount(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)this + 24);
  BOOL v6 = *(void *)a2 == *((void *)this + 23) || v4 == v5;
  uint64_t v7 = *(void *)a2;
  if (v6)
  {
    if (*(unsigned char *)(*(void *)(*((void *)this + 46) + 816) + 44)) {
      uint64_t v7 = *((void *)this + 25);
    }
    else {
      uint64_t v7 = *((void *)this + 24);
    }
  }
  if (v7 == v5) {
    uint64_t v8 = "llvm.ctpop.i16";
  }
  else {
    uint64_t v8 = "llvm.ctpop.i32";
  }
  uint64_t v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, (uint64_t)v8, 14, v4, v4);
  uint64_t v10 = (char *)this + 8;
  __int16 v16 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v10, 39, (uint64_t)a2, v7, (uint64_t)v15);
  __int16 v14 = 257;
  uint64_t v11 = llvm::IRBuilderBase::CreateCall((uint64_t)v10, *(void *)(v9 + 24), v9, (uint64_t)&Cast, 1, (uint64_t)v13);
  __int16 v16 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v10, 38, (uint64_t)v11, v4, (uint64_t)v15);
}

uint64_t AGCLLVMAirBuiltins::buildBitMask(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = (llvm::Value *)llvm::ConstantInt::get();
  this = (AGCLLVMAirBuiltins *)((char *)this + 8);
  __int16 v9 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(this, v4, a2, (const llvm::Twine *)v8);
  v7[16] = 257;
  return llvm::IRBuilderBase::CreateSub(this, Shl, v4, (const llvm::Twine *)v7);
}

uint64_t AGCLLVMAirBuiltins::buildExtractBits(AGCLLVMAirBuiltins *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = *(uint64_t **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v28 = **(void **)a2;
  uint64_t v7 = 200;
  if (*(_DWORD *)(v28 + 8) >> 8 == 64) {
    uint64_t v7 = 208;
  }
  uint64_t v8 = *(llvm::Constant **)((char *)a1 + v7);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = (AGCLLVMAirBuiltins *)((char *)a1 + 8);
  __int16 v32 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 39, (uint64_t)v5, (uint64_t)v8, (uint64_t)v31);
  __int16 v32 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 39, v6, (uint64_t)v8, (uint64_t)v31);
  __int16 v32 = 257;
  uint64_t v13 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 39, v9, (uint64_t)v8, (uint64_t)v31);
  __int16 v32 = 257;
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v10, Cast, v12, (const llvm::Twine *)v31);
  uint64_t v15 = (llvm::Value *)AGCLLVMAirBuiltins::buildBitMask(a1, v13);
  __int16 v30 = 257;
  __int16 v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v10, LShr, v15, (const llvm::Twine *)v29);
  if (*a3 == 115)
  {
    uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v32 = 257;
    uint64_t Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v10, v13, v17, (const llvm::Twine *)v31);
    __int16 v30 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v10, v17, Sub, (const llvm::Twine *)v29);
    __int16 v32 = 257;
    int v20 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v10, v16, Shl, (const llvm::Twine *)v31);
    uint64_t v21 = llvm::ConstantInt::get();
    __int16 v30 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)v10, 33, v20, v21, (uint64_t)v29);
    AllOnesuint64_t Value = (llvm::Value *)llvm::Constant::getAllOnesValue(v8, v22);
    __int16 v32 = 257;
    uint64_t v24 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v10, AllOnesValue, v13, (const llvm::Twine *)v31);
    __int16 v30 = 257;
    llvm::IRBuilderBase::CreateOr(v10, v16, v24, (const llvm::Twine *)v29);
    __int16 v32 = 257;
    llvm::IRBuilderBase::CreateSelect();
  }
  uint64_t v25 = llvm::ConstantInt::get();
  __int16 v32 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)v10, 32, (llvm::CmpInst **)v13, v25, (uint64_t)v31);
  __int16 v30 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v32 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v10, 38, Select, v28, (uint64_t)v31);
}

uint64_t AGCLLVMAirBuiltins::buildInsertBits(AGCLLVMAirBuiltins *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v5 = **(void **)a2;
  uint64_t v6 = 200;
  if (*(_DWORD *)(v5 + 8) >> 8 == 64) {
    uint64_t v6 = 208;
  }
  uint64_t v7 = *(void *)((char *)a1 + v6);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = (AGCLLVMAirBuiltins *)((char *)a1 + 8);
  __int16 v27 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 39, v8, v7, (uint64_t)v26);
  __int16 v27 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 39, v9, v7, (uint64_t)v26);
  uint64_t v13 = (llvm::Value *)AGCLLVMAirBuiltins::buildBitMask(a1, v12);
  __int16 v27 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v10, v13, Cast, (const llvm::Twine *)v26);
  __int16 v27 = 257;
  uint64_t v15 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 39, (uint64_t)v4, v7, (uint64_t)v26);
  __int16 v27 = 257;
  __int16 v16 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 39, v3, v7, (uint64_t)v26);
  __int16 v27 = 257;
  Not = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v10, Shl, (const llvm::Twine *)v26);
  __int16 v25 = 257;
  long long v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v10, v15, Not, (const llvm::Twine *)v24);
  __int16 v27 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v10, v16, Cast, (const llvm::Twine *)v26);
  __int16 v25 = 257;
  int v20 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v10, v19, Shl, (const llvm::Twine *)v24);
  __int16 v27 = 257;
  llvm::IRBuilderBase::CreateOr(v10, v18, v20, (const llvm::Twine *)v26);
  uint64_t v21 = llvm::ConstantInt::get();
  __int16 v27 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)v10, 32, (llvm::CmpInst **)v12, v21, (uint64_t)v26);
  __int16 v25 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v27 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v10, 38, Select, v5, (uint64_t)v26);
}

uint64_t AGCLLVMAirBuiltins::buildReverseBits(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = *(void *)a2;
  if (*(_DWORD *)(*(void *)a2 + 8) >> 8 > 0x20u)
  {
    uint64_t v12 = *((void *)this + 25);
    __int16 v31 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 38, (uint64_t)a2, v12, (uint64_t)v30);
    __int16 v14 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v31 = 257;
    uint64_t LShr = llvm::IRBuilderBase::CreateLShr((AGCLLVMAirBuiltins *)((char *)this + 8), a2, v14, (const llvm::Twine *)v30);
    uint64_t v16 = *((void *)this + 25);
    __int16 v29 = 257;
    uint64_t v17 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 38, LShr, v16, (uint64_t)__p);
    uint64_t v18 = AGCLLVMAirBuiltins::buildReverseBits(this, Cast);
    uint64_t v19 = AGCLLVMAirBuiltins::buildReverseBits(this, v17);
    uint64_t v20 = *((void *)this + 26);
    __int16 v31 = 257;
    uint64_t v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, v18, v20, (uint64_t)v30);
    uint64_t v22 = *((void *)this + 26);
    __int16 v31 = 257;
    uint64_t v23 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, v19, v22, (uint64_t)v30);
    uint64_t v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v31 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((AGCLLVMAirBuiltins *)((char *)this + 8), v21, v24, (const llvm::Twine *)v30);
    __int16 v29 = 257;
    return llvm::IRBuilderBase::CreateOr((AGCLLVMAirBuiltins *)((char *)this + 8), Shl, v23, (const llvm::Twine *)__p);
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(__p, *(char **)(*((void *)this + 46) + 1208));
    if ((v28 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v28 & 0x80u) == 0) {
      uint64_t v6 = v28;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    uint64_t v7 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, (uint64_t)v5, v6, *((void *)this + 25), *((void *)this + 25));
    uint64_t v8 = *((void *)this + 25);
    __int16 v31 = 257;
    uint64_t v32 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, (uint64_t)a2, v8, (uint64_t)v30);
    __int16 v31 = 257;
    uint64_t v9 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v7 + 24), v7, (uint64_t)&v32, 1, (uint64_t)v30);
    uint64_t v32 = (uint64_t)v9;
    uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v31 = 257;
    uint64_t v32 = llvm::IRBuilderBase::CreateLShr((AGCLLVMAirBuiltins *)((char *)this + 8), v9, v10, (const llvm::Twine *)v30);
    __int16 v31 = 257;
    uint64_t v11 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 38, v32, v4, (uint64_t)v30);
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  return v11;
}

uint64_t AGCLLVMAirBuiltins::buildSign(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Instruction *AGCLLVMAirBuiltins::buildMix(AGCLLVMBuilder *a1, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, int a5)
{
  uint64_t v5 = a2;
  if ((~a5 & 6) != 0) {
    int v6 = 0;
  }
  else {
    int v6 = 6;
  }
  *((_DWORD *)a1 + 26) = v6 | a5 & 8;
  if (a2 != a3)
  {
    __int16 v14 = 257;
    uint64_t FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)a1 + 8, (uint64_t)a4, (uint64_t)v13);
    uint64_t v11 = AGCLLVMBuilder::buildFma(a1, v5, FNeg, v5);
    return AGCLLVMBuilder::buildFma(a1, a3, a4, v11);
  }
  return v5;
}

llvm::Value *AGCLLVMAirBuiltins::buildDot(AGCLLVMBuilder *a1, llvm::Value *a2, llvm::Value *a3, int a4)
{
  if ((~a4 & 6) != 0) {
    int v4 = 0;
  }
  else {
    int v4 = 6;
  }
  *((_DWORD *)a1 + 26) = v4 | a4 & 8;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
  {
    return AGCLLVMBuilder::buildDotProduct(a1, a2, a3);
  }
  else
  {
    __int16 v7 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)a1 + 8, (uint64_t)a2, (uint64_t)a3, (uint64_t)v6);
  }
}

uint64_t AGCLLVMAirBuiltins::buildGCmp(AGCLLVMAirBuiltins *this, llvm::Value *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)this + 46);
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltins *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v7 = 192;
  if (*(void *)a2 == *((void *)this + 21)) {
    uint64_t v7 = 200;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, uint64_t, void))(*(void *)v6 + 144))(v6, &v10, a2, a3, *(void *)((char *)this + v7));
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltins::buildGExp(AGCLLVMAirBuiltins *this, llvm::Value *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)this + 46);
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltins *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v7 = 152;
  if (*(void *)a2 == *((void *)this + 25)) {
    uint64_t v7 = 168;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, uint64_t, void))(*(void *)v6 + 152))(v6, &v10, a2, a3, *(void *)((char *)this + v7));
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltins::buildFMedian3(void *a1, llvm::Value **a2)
{
  int v4 = *a2;
  uint64_t v5 = a2[1];
  AGCLLVMAirBuiltins::buildNanFMin((AGCLLVMAirBuiltins *)a1, *a2, v5);
  AGCLLVMAirBuiltins::buildNanFMax((AGCLLVMAirBuiltins *)a1, v4, v5);
  __int16 v15 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateSelect();
  uint64_t Select = (void *)llvm::IRBuilderBase::CreateSelect();
  uint64_t v7 = (llvm::Value *)AGCLLVMAirBuiltins::buildNanFMin((AGCLLVMAirBuiltins *)a1, *a2, a2[1]);
  AGCLLVMAirBuiltins::buildNanFMin((AGCLLVMAirBuiltins *)a1, v7, a2[2]);
  if (*Select == a1[21]) {
    uint64_t v8 = a1[25];
  }
  else {
    uint64_t v8 = a1[24];
  }
  __int16 v15 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, (uint64_t)Select, v8, (uint64_t)v14);
  long long v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v15 = 257;
  uint64_t v11 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), Cast, v10, (const llvm::Twine *)v14);
  uint64_t v12 = llvm::ConstantInt::get();
  __int16 v15 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 34, v11, v12, (uint64_t)v14);
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::buildNanFMin(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 46);
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltins *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v7 = *(void *)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v7 = **(void **)(v7 + 16);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *, BOOL))(*(void *)v6 + 48))(v6, &v10, a2, a3, v7 == *((void *)this + 21));
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltins::buildNanFMax(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = *((void *)this + 46);
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMAirBuiltins *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  uint64_t v7 = *(void *)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v7 = **(void **)(v7 + 16);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *, BOOL))(*(void *)v6 + 56))(v6, &v10, a2, a3, v7 == *((void *)this + 21));
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMAirBuiltins::buildFastFMedian3(AGCLLVMAirBuiltins *a1, llvm::Value **a2)
{
  uint64_t v3 = *a2;
  int v4 = a2[1];
  AGCLLVMAirBuiltins::buildFastFMin(a1, *a2, v4);
  AGCLLVMAirBuiltins::buildFastFMax(a1, v3, v4);
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateSelect();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::buildProjectiveCoordinates(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  ShuffleVector = a2;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(*(void *)a2 + 32);
  if (*((unsigned char *)a2 + 16) == 74)
  {
    uint64_t v5 = *((void *)a2 - 4);
    int v6 = *(unsigned __int8 *)(v5 + 16);
    if (v5 && v6 == 91)
    {
      int v7 = *(unsigned __int8 *)(*(void *)(v5 - 64) + 16);
      if (v7 == 73) {
        uint64_t v8 = *(void *)(v5 - 64);
      }
      else {
        uint64_t v8 = 0;
      }
      int v9 = *(unsigned __int8 *)(*(void *)(v5 - 32) + 16);
      if (v9 == 73) {
        uint64_t v10 = *(void *)(v5 - 32);
      }
      else {
        uint64_t v10 = 0;
      }
      if (v8 | v10
        && ((v7 - 11) < 2 || *(void *)(**(void **)(v8 - 32) + 24) == *((void *)this + 21))
        && ((v9 - 11) <= 1 || *(void *)(**(void **)(v10 - 32) + 24) == *((void *)this + 21)))
      {
        llvm::VectorType::get();
        if (v8)
        {
          uint64_t v11 = *(void *)(v8 - 32);
          if (v10)
          {
LABEL_23:
            uint64_t v12 = *(void *)(v10 - 32);
LABEL_26:
            uint64_t v13 = *(void *)(v5 + 64);
            uint64_t v14 = *(unsigned int *)(v5 + 72);
            __int16 v22 = 257;
            ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)this + 8, v11, v12, v13, v14, (uint64_t)v21);
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v11 = llvm::UndefValue::get();
          if (v10) {
            goto LABEL_23;
          }
        }
        uint64_t v12 = llvm::UndefValue::get();
        goto LABEL_26;
      }
    }
    else if (v5 && v6 == 73 && *(void *)(**(void **)(v5 - 32) + 24) == *((void *)this + 21))
    {
      ShuffleVector = *(llvm::Value **)(v5 - 32);
    }
  }
LABEL_27:
  uint64_t v27 = llvm::ConstantInt::get();
  uint64_t v28 = llvm::ConstantInt::get();
  uint64_t v29 = llvm::ConstantInt::get();
  uint64_t v15 = AGCLLVMBuilder::subrangeVector(this, ShuffleVector, 0, v4 - 1, 1);
  uint64_t v16 = (llvm::Value *)llvm::ConstantVector::get();
  __int16 v22 = 257;
  uint64_t v17 = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((AGCLLVMAirBuiltins *)((char *)this + 8), ShuffleVector, ShuffleVector, v16, (const llvm::Twine *)v21);
  __int16 v22 = 257;
  uint64_t FDiv = (llvm::Value *)llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v15, (uint64_t)v17, (uint64_t)v21);
  uint64_t v23 = llvm::ConstantInt::get();
  uint64_t v24 = llvm::ConstantInt::get();
  uint64_t v25 = llvm::ConstantInt::get();
  uint64_t v26 = llvm::ConstantInt::get();
  uint64_t v19 = (llvm::Value *)llvm::ConstantVector::get();
  __int16 v22 = 257;
  return llvm::IRBuilderBase::CreateShuffleVector((AGCLLVMAirBuiltins *)((char *)this + 8), FDiv, v17, v19, (const llvm::Twine *)v21);
}

uint64_t AGCLLVMAirBuiltins::buildAssert(AGCLLVMAirBuiltins *this)
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdWidth()
{
  return llvm::ConstantInt::get();
}

uint64_t AGCLLVMAirBuiltins::buildThreadExecutionWidth()
{
  return llvm::ConstantInt::get();
}

void AGCLLVMAirBuiltins::replaceIsUniform(uint64_t a1, llvm::Instruction *a2)
{
  if (MGGetBoolAnswer()
    && (uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_IS_UNIFORM_STRIPPING", v3)) != 0
    && *Value != 48
    && atoi(Value))
  {
    uint64_t Function = (llvm::Function *)llvm::Module::getFunction();
    uint64_t v6 = *((void *)a2 + 1);
    if (v6)
    {
      do
      {
        uint64_t v7 = *(void *)(v6 + 8);
        llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v6 + 24));
        uint64_t v6 = v7;
      }
      while (v7);
    }
    llvm::Instruction::eraseFromParent(a2);
    if (!*((void *)Function + 1))
    {
      llvm::Function::eraseFromParent(Function);
    }
  }
  else
  {
    uint64_t v8 = (llvm::Value *)*((void *)a2 - 4);
    uint64_t v9 = *((void *)v8 + 3);
    uint64_t Name = llvm::Value::getName(v8);
    if (Name)
    {
      if (v11 >= 0xE) {
        uint64_t v12 = 14;
      }
      else {
        uint64_t v12 = v11;
      }
      std::string::basic_string[abi:nn180100](&__dst, (void *)(Name + v12), v11 - v12);
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
    }
    uint64_t v13 = std::string::insert(&__dst, 0, "llvm.agx.is.uniform");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    llvm::Module::getOrInsertFunction();
    *((void *)a2 + 9) = v9;
    llvm::CallBase::setCalledOperand((uint64_t)a2, v15);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
  }
}

uint64_t llvm::CallBase::setCalledOperand(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (void *)(result - 32);
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v3 = *(void *)(result - 24);
    if (v3) {
      *(void *)(v3 + 16) = *(void *)(result - 16);
    }
  }
  *uint64_t v2 = a2;
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    int v4 = (void *)(a2 + 8);
    uint64_t v5 = v6;
    *(void *)(result - 24) = v6;
    if (v6) {
      *(void *)(v5 + 16) = result - 24;
    }
    *(void *)(result - 16) = v4;
    void *v4 = v2;
  }
  return result;
}

uint64_t AGCLLVMAirBuiltins::buildGetUniqueIdentifierPsoIcbVft(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v2 = *((void *)this + 26);
  __int16 v5 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 47, (uint64_t)a2, v2, (uint64_t)v4);
}

uint64_t *AGCLLVMAirBuiltinsMap::insertBuiltinReplacementsBase(AGCLLVMAirBuiltinsMap *this, const AGCLLVMTargetConfig *a2)
{
  uint64_t v2 = a2;
  char v4 = *((unsigned char *)a2 + 41);
  uint64_t v5 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "acos", 4uLL);
  *(_DWORD *)(v5 + 8) = 1;
  *(void *)(v5 + 16) = AGCLLVMAirBuiltins::buildArccos;
  *(void *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 32) = 3;
  *(unsigned char *)(v5 + 36) = v4;
  *(unsigned char *)(v5 + 37) = 1;
  char v6 = *((unsigned char *)v2 + 42);
  uint64_t v7 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "asin", 4uLL);
  *(_DWORD *)(v7 + 8) = 1;
  *(void *)(v7 + 16) = AGCLLVMAirBuiltins::buildArcsin;
  *(void *)(v7 + 24) = 0;
  *(_DWORD *)(v7 + 32) = 3;
  *(unsigned char *)(v7 + 36) = v6;
  *(unsigned char *)(v7 + 37) = 1;
  uint64_t v8 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "atan", 4uLL);
  *(_DWORD *)(v8 + 8) = 1;
  *(void *)(v8 + 16) = AGCLLVMAirBuiltins::buildArctan;
  *(void *)(v8 + 24) = 0;
  *(_DWORD *)(v8 + 32) = 3;
  *(_WORD *)(v8 + 36) = 257;
  uint64_t v9 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "atan2", 5uLL);
  *(_DWORD *)(v9 + 8) = 1;
  *(void *)(v9 + 16) = AGCLLVMAirBuiltins::buildArctan2;
  *(void *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 32) = 5;
  *(_WORD *)(v9 + 36) = 257;
  uint64_t v10 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "acosh", 5uLL);
  *(_DWORD *)(v10 + 8) = 1;
  *(void *)(v10 + 16) = AGCLLVMAirBuiltins::buildArccosh;
  *(void *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 32) = 3;
  *(_WORD *)(v10 + 36) = 257;
  uint64_t v11 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "asinh", 5uLL);
  *(_DWORD *)(v11 + 8) = 1;
  *(void *)(v11 + 16) = AGCLLVMAirBuiltins::buildArcsinh;
  *(void *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 32) = 3;
  *(_WORD *)(v11 + 36) = 257;
  uint64_t v12 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "atanh", 5uLL);
  *(_DWORD *)(v12 + 8) = 1;
  *(void *)(v12 + 16) = AGCLLVMAirBuiltins::buildArctanh;
  *(void *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 32) = 3;
  *(_WORD *)(v12 + 36) = 257;
  uint64_t v13 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "pow", 3uLL);
  *(_DWORD *)(v13 + 8) = 1;
  *(void *)(v13 + 16) = AGCLLVMAirBuiltins::buildPow;
  *(void *)(v13 + 24) = 0;
  *(_DWORD *)(v13 + 32) = 5;
  *(_WORD *)(v13 + 36) = 257;
  uint64_t v14 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "powr", 4uLL);
  *(_DWORD *)(v14 + 8) = 1;
  *(void *)(v14 + 16) = AGCLLVMAirBuiltins::buildPowr;
  *(void *)(v14 + 24) = 0;
  *(_DWORD *)(v14 + 32) = 5;
  *(_WORD *)(v14 + 36) = 257;
  uint64_t v15 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "cosh", 4uLL);
  *(_DWORD *)(v15 + 8) = 1;
  *(void *)(v15 + 16) = AGCLLVMAirBuiltins::buildCosh;
  *(void *)(v15 + 24) = 0;
  *(_DWORD *)(v15 + 32) = 3;
  *(_WORD *)(v15 + 36) = 257;
  uint64_t v16 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "sinh", 4uLL);
  *(_DWORD *)(v16 + 8) = 1;
  *(void *)(v16 + 16) = AGCLLVMAirBuiltins::buildSinh;
  *(void *)(v16 + 24) = 0;
  *(_DWORD *)(v16 + 32) = 3;
  *(_WORD *)(v16 + 36) = 257;
  uint64_t v17 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "tanh", 4uLL);
  *(_DWORD *)(v17 + 8) = 1;
  *(void *)(v17 + 16) = AGCLLVMAirBuiltins::buildTanh;
  *(void *)(v17 + 24) = 0;
  *(_DWORD *)(v17 + 32) = 3;
  *(_WORD *)(v17 + 36) = 257;
  uint64_t v18 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "exp10", 5uLL);
  *(_DWORD *)(v18 + 8) = 1;
  *(void *)(v18 + 16) = AGCLLVMAirBuiltins::buildExp10;
  *(void *)(v18 + 24) = 0;
  *(_DWORD *)(v18 + 32) = 3;
  *(_WORD *)(v18 + 36) = 257;
  uint64_t v19 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "log10", 5uLL);
  *(_DWORD *)(v19 + 8) = 1;
  *(void *)(v19 + 16) = AGCLLVMAirBuiltins::buildLog10;
  *(void *)(v19 + 24) = 0;
  *(_DWORD *)(v19 + 32) = 3;
  *(_WORD *)(v19 + 36) = 257;
  char v20 = *((unsigned char *)v2 + 40);
  uint64_t v21 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "cos", 3uLL);
  *(_DWORD *)(v21 + 8) = 1;
  *(void *)(v21 + 16) = AGCLLVMAirBuiltins::buildCos;
  *(void *)(v21 + 24) = 0;
  *(_DWORD *)(v21 + 32) = 3;
  *(unsigned char *)(v21 + 36) = v20;
  *(unsigned char *)(v21 + 37) = 1;
  char v22 = *((unsigned char *)v2 + 40);
  uint64_t v23 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "sin", 3uLL);
  *(_DWORD *)(v23 + 8) = 1;
  *(void *)(v23 + 16) = AGCLLVMAirBuiltins::buildSin;
  *(void *)(v23 + 24) = 0;
  *(_DWORD *)(v23 + 32) = 3;
  *(unsigned char *)(v23 + 36) = v22;
  *(unsigned char *)(v23 + 37) = 1;
  char v24 = *((unsigned char *)v2 + 40);
  uint64_t v25 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "tan", 3uLL);
  *(_DWORD *)(v25 + 8) = 1;
  *(void *)(v25 + 16) = AGCLLVMAirBuiltins::buildTan;
  *(void *)(v25 + 24) = 0;
  *(_DWORD *)(v25 + 32) = 3;
  *(unsigned char *)(v25 + 36) = v24;
  *(unsigned char *)(v25 + 37) = 1;
  uint64_t v26 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "sincos", 6uLL);
  *(_DWORD *)(v26 + 8) = 1;
  *(void *)(v26 + 16) = AGCLLVMAirBuiltins::buildMetalSinCos;
  *(void *)(v26 + 24) = 0;
  *(_DWORD *)(v26 + 32) = 5;
  *(_WORD *)(v26 + 36) = 0;
  uint64_t v27 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "rint", 4uLL);
  *(_DWORD *)(v27 + 8) = 1;
  *(void *)(v27 + 16) = AGCLLVMAirBuiltins::buildRNE;
  *(void *)(v27 + 24) = 0;
  *(_DWORD *)(v27 + 32) = 3;
  *(_WORD *)(v27 + 36) = 257;
  uint64_t v28 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "round", 5uLL);
  *(_DWORD *)(v28 + 8) = 1;
  *(void *)(v28 + 16) = AGCLLVMAirBuiltins::buildRound;
  *(void *)(v28 + 24) = 0;
  *(_DWORD *)(v28 + 32) = 3;
  *(_WORD *)(v28 + 36) = 257;
  uint64_t v29 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fmod", 4uLL);
  *(_DWORD *)(v29 + 8) = 1;
  *(void *)(v29 + 16) = AGCLLVMAirBuiltins::buildFmod;
  *(void *)(v29 + 24) = 0;
  *(_DWORD *)(v29 + 32) = 5;
  *(_WORD *)(v29 + 36) = 1;
  uint64_t v30 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mod", 3uLL);
  *(_DWORD *)(v30 + 8) = 1;
  *(void *)(v30 + 16) = AGCLLVMAirBuiltins::buildMod;
  *(void *)(v30 + 24) = 0;
  *(_DWORD *)(v30 + 32) = 5;
  *(_WORD *)(v30 + 36) = 1;
  uint64_t v31 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "ceil", 4uLL);
  *(_DWORD *)(v31 + 8) = 1;
  *(void *)(v31 + 16) = AGCLLVMAirBuiltins::buildCeil;
  *(void *)(v31 + 24) = 0;
  *(_DWORD *)(v31 + 32) = 3;
  *(_WORD *)(v31 + 36) = 256;
  uint64_t v32 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "exp", 3uLL);
  *(_DWORD *)(v32 + 8) = 1;
  *(void *)(v32 + 16) = AGCLLVMTargetBuilder::CreateExp;
  *(void *)(v32 + 24) = 0;
  *(_DWORD *)(v32 + 32) = 3;
  *(_WORD *)(v32 + 36) = 1;
  uint64_t v33 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "exp2", 4uLL);
  *(_DWORD *)(v33 + 8) = 1;
  *(void *)(v33 + 16) = AGCLLVMTargetBuilder::CreateExp2;
  *(void *)(v33 + 24) = 0;
  *(_DWORD *)(v33 + 32) = 3;
  *(_WORD *)(v33 + 36) = 0;
  uint64_t v34 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fabs", 4uLL);
  *(_DWORD *)(v34 + 8) = 1;
  *(void *)(v34 + 16) = AGCLLVMTargetBuilder::CreateFabs;
  *(void *)(v34 + 24) = 0;
  *(_DWORD *)(v34 + 32) = 3;
  *(_WORD *)(v34 + 36) = 0;
  uint64_t v35 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "floor", 5uLL);
  *(_DWORD *)(v35 + 8) = 1;
  *(void *)(v35 + 16) = AGCLLVMTargetBuilder::CreateFloor;
  *(void *)(v35 + 24) = 0;
  *(_DWORD *)(v35 + 32) = 3;
  *(_WORD *)(v35 + 36) = 0;
  uint64_t v36 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fma", 3uLL);
  *(_DWORD *)(v36 + 8) = 1;
  *(void *)(v36 + 16) = AGCLLVMBuilder::buildFma;
  *(void *)(v36 + 24) = 0;
  *(_DWORD *)(v36 + 32) = 7;
  *(_WORD *)(v36 + 36) = 0;
  uint64_t v37 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fmax", 4uLL);
  *(_DWORD *)(v37 + 8) = 1;
  *(void *)(v37 + 16) = AGCLLVMAirBuiltins::buildNanFMax;
  *(void *)(v37 + 24) = 0;
  *(_DWORD *)(v37 + 32) = 5;
  *(_WORD *)(v37 + 36) = 256;
  uint64_t v38 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fmin", 4uLL);
  *(_DWORD *)(v38 + 8) = 1;
  *(void *)(v38 + 16) = AGCLLVMAirBuiltins::buildNanFMin;
  *(void *)(v38 + 24) = 0;
  *(_DWORD *)(v38 + 32) = 5;
  *(_WORD *)(v38 + 36) = 256;
  uint64_t v39 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fract", 5uLL);
  *(_DWORD *)(v39 + 8) = 1;
  *(void *)(v39 + 16) = AGCLLVMAirBuiltins::buildFract;
  *(void *)(v39 + 24) = 0;
  *(_DWORD *)(v39 + 32) = 3;
  *(_WORD *)(v39 + 36) = 0;
  uint64_t v40 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "ldexp", 5uLL);
  *(_DWORD *)(v40 + 8) = 1;
  *(void *)(v40 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(void *)(v40 + 24) = 0;
  *(_DWORD *)(v40 + 32) = 9;
  *(_WORD *)(v40 + 36) = 256;
  uint64_t v41 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "log", 3uLL);
  *(_DWORD *)(v41 + 8) = 1;
  *(void *)(v41 + 16) = AGCLLVMTargetBuilder::CreateLog;
  *(void *)(v41 + 24) = 0;
  *(_DWORD *)(v41 + 32) = 3;
  *(_WORD *)(v41 + 36) = 1;
  uint64_t v42 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "log2", 4uLL);
  *(_DWORD *)(v42 + 8) = 1;
  *(void *)(v42 + 16) = AGCLLVMTargetBuilder::CreateLog2;
  *(void *)(v42 + 24) = 0;
  *(_DWORD *)(v42 + 32) = 3;
  *(_WORD *)(v42 + 36) = 0;
  uint64_t v43 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mad", 3uLL);
  *(_DWORD *)(v43 + 8) = 1;
  *(void *)(v43 + 16) = AGCLLVMAirBuiltins::buildFmad;
  *(void *)(v43 + 24) = 0;
  *(_DWORD *)(v43 + 32) = 7;
  *(_WORD *)(v43 + 36) = 0;
  uint64_t v44 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "rsqrt", 5uLL);
  *(_DWORD *)(v44 + 8) = 1;
  *(void *)(v44 + 16) = AGCLLVMTargetBuilder::CreateRsqrt;
  *(void *)(v44 + 24) = 0;
  *(_DWORD *)(v44 + 32) = 3;
  *(_WORD *)(v44 + 36) = 256;
  uint64_t v45 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "sqrt", 4uLL);
  *(_DWORD *)(v45 + 8) = 1;
  *(void *)(v45 + 16) = AGCLLVMTargetBuilder::CreateSqrt;
  *(void *)(v45 + 24) = 0;
  *(_DWORD *)(v45 + 32) = 3;
  *(_WORD *)(v45 + 36) = 0;
  uint64_t v46 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "trunc", 5uLL);
  *(_DWORD *)(v46 + 8) = 1;
  *(void *)(v46 + 16) = AGCLLVMAirBuiltins::buildTrunc;
  *(void *)(v46 + 24) = 0;
  *(_DWORD *)(v46 + 32) = 3;
  *(_WORD *)(v46 + 36) = 256;
  char v47 = *((unsigned char *)v2 + 41);
  uint64_t v48 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_acos", 9uLL);
  *(_DWORD *)(v48 + 8) = 2;
  *(void *)(v48 + 16) = AGCLLVMAirBuiltins::buildArccos;
  *(void *)(v48 + 24) = 0;
  *(_DWORD *)(v48 + 32) = 3;
  *(unsigned char *)(v48 + 36) = v47;
  *(unsigned char *)(v48 + 37) = 1;
  char v49 = *((unsigned char *)v2 + 42);
  uint64_t v50 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_asin", 9uLL);
  *(_DWORD *)(v50 + 8) = 2;
  *(void *)(v50 + 16) = AGCLLVMAirBuiltins::buildArcsin;
  *(void *)(v50 + 24) = 0;
  *(_DWORD *)(v50 + 32) = 3;
  *(unsigned char *)(v50 + 36) = v49;
  *(unsigned char *)(v50 + 37) = 1;
  uint64_t v51 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_atan", 9uLL);
  *(_DWORD *)(v51 + 8) = 2;
  *(void *)(v51 + 16) = AGCLLVMAirBuiltins::buildArctan;
  *(void *)(v51 + 24) = 0;
  *(_DWORD *)(v51 + 32) = 3;
  *(_WORD *)(v51 + 36) = 257;
  uint64_t v52 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_atan2", 0xAuLL);
  *(_DWORD *)(v52 + 8) = 2;
  *(void *)(v52 + 16) = AGCLLVMAirBuiltins::buildArctan2;
  *(void *)(v52 + 24) = 0;
  *(_DWORD *)(v52 + 32) = 5;
  *(_WORD *)(v52 + 36) = 257;
  uint64_t v53 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_exp10", 0xAuLL);
  *(_DWORD *)(v53 + 8) = 2;
  *(void *)(v53 + 16) = AGCLLVMAirBuiltins::buildExp10;
  *(void *)(v53 + 24) = 0;
  *(_DWORD *)(v53 + 32) = 3;
  *(_WORD *)(v53 + 36) = 0;
  uint64_t v54 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_log10", 0xAuLL);
  *(_DWORD *)(v54 + 8) = 2;
  *(void *)(v54 + 16) = AGCLLVMAirBuiltins::buildLog10;
  *(void *)(v54 + 24) = 0;
  *(_DWORD *)(v54 + 32) = 3;
  *(_WORD *)(v54 + 36) = 1;
  uint64_t v55 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_acosh", 0xAuLL);
  *(_DWORD *)(v55 + 8) = 2;
  *(void *)(v55 + 16) = AGCLLVMAirBuiltins::buildArccosh;
  *(void *)(v55 + 24) = 0;
  *(_DWORD *)(v55 + 32) = 3;
  *(unsigned char *)(v55 + 36) = 1;
  *(unsigned char *)(v55 + 37) = 1;
  uint64_t v56 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_asinh", 0xAuLL);
  *(_DWORD *)(v56 + 8) = 2;
  *(void *)(v56 + 16) = AGCLLVMAirBuiltins::buildArcsinh;
  *(void *)(v56 + 24) = 0;
  *(_DWORD *)(v56 + 32) = 3;
  *(unsigned char *)(v56 + 36) = 1;
  *(unsigned char *)(v56 + 37) = 1;
  uint64_t v57 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_atanh", 0xAuLL);
  *(_DWORD *)(v57 + 8) = 2;
  *(void *)(v57 + 16) = AGCLLVMAirBuiltins::buildArctanh;
  *(void *)(v57 + 24) = 0;
  *(_DWORD *)(v57 + 32) = 3;
  *(unsigned char *)(v57 + 36) = 1;
  *(unsigned char *)(v57 + 37) = 1;
  uint64_t v58 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_pow", 8uLL);
  *(_DWORD *)(v58 + 8) = 2;
  *(void *)(v58 + 16) = AGCLLVMAirBuiltins::buildPow;
  *(void *)(v58 + 24) = 0;
  *(_DWORD *)(v58 + 32) = 5;
  *(unsigned char *)(v58 + 36) = 1;
  *(unsigned char *)(v58 + 37) = 1;
  uint64_t v59 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_powr", 9uLL);
  *(_DWORD *)(v59 + 8) = 2;
  *(void *)(v59 + 16) = AGCLLVMAirBuiltins::buildPowr;
  *(void *)(v59 + 24) = 0;
  *(_DWORD *)(v59 + 32) = 5;
  *(unsigned char *)(v59 + 36) = 1;
  *(unsigned char *)(v59 + 37) = 1;
  uint64_t v60 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_cosh", 9uLL);
  *(_DWORD *)(v60 + 8) = 2;
  *(void *)(v60 + 16) = AGCLLVMAirBuiltins::buildCosh;
  *(void *)(v60 + 24) = 0;
  *(_DWORD *)(v60 + 32) = 3;
  *(unsigned char *)(v60 + 36) = 1;
  *(unsigned char *)(v60 + 37) = 1;
  uint64_t v61 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_sinh", 9uLL);
  *(_DWORD *)(v61 + 8) = 2;
  *(void *)(v61 + 16) = AGCLLVMAirBuiltins::buildSinh;
  *(void *)(v61 + 24) = 0;
  *(_DWORD *)(v61 + 32) = 3;
  *(unsigned char *)(v61 + 36) = 1;
  *(unsigned char *)(v61 + 37) = 1;
  uint64_t v62 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_tanh", 9uLL);
  *(_DWORD *)(v62 + 8) = 2;
  *(void *)(v62 + 16) = AGCLLVMAirBuiltins::buildTanh;
  *(void *)(v62 + 24) = 0;
  *(_DWORD *)(v62 + 32) = 3;
  *(unsigned char *)(v62 + 36) = 1;
  *(unsigned char *)(v62 + 37) = 1;
  char v63 = *((unsigned char *)v2 + 40);
  uint64_t v64 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_cos", 8uLL);
  *(_DWORD *)(v64 + 8) = 2;
  *(void *)(v64 + 16) = AGCLLVMAirBuiltins::buildCos;
  *(void *)(v64 + 24) = 0;
  *(_DWORD *)(v64 + 32) = 3;
  *(unsigned char *)(v64 + 36) = v63;
  *(unsigned char *)(v64 + 37) = 1;
  char v65 = *((unsigned char *)v2 + 40);
  uint64_t v66 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_sin", 8uLL);
  *(_DWORD *)(v66 + 8) = 2;
  *(void *)(v66 + 16) = AGCLLVMAirBuiltins::buildSin;
  *(void *)(v66 + 24) = 0;
  *(_DWORD *)(v66 + 32) = 3;
  *(unsigned char *)(v66 + 36) = v65;
  *(unsigned char *)(v66 + 37) = 1;
  uint64_t v67 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_tan", 8uLL);
  *(_DWORD *)(v67 + 8) = 2;
  *(void *)(v67 + 16) = AGCLLVMAirBuiltins::buildTan;
  *(void *)(v67 + 24) = 0;
  *(_DWORD *)(v67 + 32) = 3;
  *(unsigned char *)(v67 + 36) = 1;
  *(unsigned char *)(v67 + 37) = 1;
  uint64_t v68 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_sincos", 0xBuLL);
  *(_DWORD *)(v68 + 8) = 2;
  *(void *)(v68 + 16) = AGCLLVMAirBuiltins::buildMetalSinCos;
  *(void *)(v68 + 24) = 0;
  *(_DWORD *)(v68 + 32) = 5;
  *(_WORD *)(v68 + 36) = 0;
  uint64_t v69 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_round", 0xAuLL);
  *(_DWORD *)(v69 + 8) = 2;
  *(void *)(v69 + 16) = AGCLLVMAirBuiltins::buildRound;
  *(void *)(v69 + 24) = 0;
  *(_DWORD *)(v69 + 32) = 3;
  *(unsigned char *)(v69 + 36) = 1;
  *(unsigned char *)(v69 + 37) = 1;
  uint64_t v70 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fmod", 9uLL);
  *(_DWORD *)(v70 + 8) = 2;
  *(void *)(v70 + 16) = AGCLLVMAirBuiltins::buildFmod;
  *(void *)(v70 + 24) = 0;
  *(_DWORD *)(v70 + 32) = 5;
  *(_WORD *)(v70 + 36) = 1;
  uint64_t v71 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_mod", 8uLL);
  *(_DWORD *)(v71 + 8) = 2;
  *(void *)(v71 + 16) = AGCLLVMAirBuiltins::buildMod;
  *(void *)(v71 + 24) = 0;
  *(_DWORD *)(v71 + 32) = 5;
  *(_WORD *)(v71 + 36) = 1;
  uint64_t v72 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_exp", 8uLL);
  *(_DWORD *)(v72 + 8) = 2;
  *(void *)(v72 + 16) = AGCLLVMTargetBuilder::CreateExp;
  *(void *)(v72 + 24) = 0;
  *(_DWORD *)(v72 + 32) = 3;
  *(_WORD *)(v72 + 36) = 0;
  uint64_t v73 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_exp2", 9uLL);
  *(_DWORD *)(v73 + 8) = 2;
  *(void *)(v73 + 16) = AGCLLVMTargetBuilder::CreateExp2;
  *(void *)(v73 + 24) = 0;
  *(_DWORD *)(v73 + 32) = 3;
  *(_WORD *)(v73 + 36) = 0;
  uint64_t v74 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_ldexp", 0xAuLL);
  *(_DWORD *)(v74 + 8) = 2;
  *(void *)(v74 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(void *)(v74 + 24) = 0;
  *(_DWORD *)(v74 + 32) = 9;
  *(unsigned char *)(v74 + 36) = 0;
  *(unsigned char *)(v74 + 37) = 1;
  uint64_t v75 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_log", 8uLL);
  *(_DWORD *)(v75 + 8) = 2;
  *(void *)(v75 + 16) = AGCLLVMTargetBuilder::CreateLog;
  *(void *)(v75 + 24) = 0;
  *(_DWORD *)(v75 + 32) = 3;
  *(_WORD *)(v75 + 36) = 0;
  uint64_t v76 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_log2", 9uLL);
  *(_DWORD *)(v76 + 8) = 2;
  *(void *)(v76 + 16) = AGCLLVMTargetBuilder::CreateLog2;
  *(void *)(v76 + 24) = 0;
  *(_DWORD *)(v76 + 32) = 3;
  *(_WORD *)(v76 + 36) = 0;
  uint64_t v77 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_rsqrt", 0xAuLL);
  *(_DWORD *)(v77 + 8) = 2;
  *(void *)(v77 + 16) = AGCLLVMTargetBuilder::CreateRsqrt;
  *(void *)(v77 + 24) = 0;
  *(_DWORD *)(v77 + 32) = 3;
  *(unsigned char *)(v77 + 36) = 0;
  *(unsigned char *)(v77 + 37) = 1;
  uint64_t v78 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_sqrt", 9uLL);
  *(_DWORD *)(v78 + 8) = 2;
  *(void *)(v78 + 16) = AGCLLVMTargetBuilder::CreateSqrt;
  *(void *)(v78 + 24) = 0;
  *(_DWORD *)(v78 + 32) = 3;
  *(_WORD *)(v78 + 36) = 0;
  uint64_t v79 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_ceil", 9uLL);
  *(_DWORD *)(v79 + 8) = 2;
  *(void *)(v79 + 16) = AGCLLVMAirBuiltins::buildCeil;
  *(void *)(v79 + 24) = 0;
  *(_DWORD *)(v79 + 32) = 3;
  *(unsigned char *)(v79 + 36) = 0;
  *(unsigned char *)(v79 + 37) = 1;
  uint64_t v80 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fabs", 9uLL);
  *(_DWORD *)(v80 + 8) = 2;
  *(void *)(v80 + 16) = AGCLLVMTargetBuilder::CreateFabs;
  *(void *)(v80 + 24) = 0;
  *(_DWORD *)(v80 + 32) = 3;
  *(_WORD *)(v80 + 36) = 0;
  uint64_t v81 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_floor", 0xAuLL);
  *(_DWORD *)(v81 + 8) = 2;
  *(void *)(v81 + 16) = AGCLLVMTargetBuilder::CreateFloor;
  *(void *)(v81 + 24) = 0;
  *(_DWORD *)(v81 + 32) = 3;
  *(_WORD *)(v81 + 36) = 0;
  uint64_t v82 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fract", 0xAuLL);
  *(_DWORD *)(v82 + 8) = 2;
  *(void *)(v82 + 16) = AGCLLVMAirBuiltins::buildFastFract;
  *(void *)(v82 + 24) = 0;
  *(_DWORD *)(v82 + 32) = 3;
  *(_WORD *)(v82 + 36) = 0;
  uint64_t v83 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_rint", 9uLL);
  *(_DWORD *)(v83 + 8) = 2;
  *(void *)(v83 + 16) = AGCLLVMAirBuiltins::buildRNE;
  *(void *)(v83 + 24) = 0;
  *(_DWORD *)(v83 + 32) = 3;
  *(unsigned char *)(v83 + 36) = 1;
  *(unsigned char *)(v83 + 37) = 1;
  uint64_t v84 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_trunc", 0xAuLL);
  *(_DWORD *)(v84 + 8) = 2;
  *(void *)(v84 + 16) = AGCLLVMAirBuiltins::buildTrunc;
  *(void *)(v84 + 24) = 0;
  *(_DWORD *)(v84 + 32) = 3;
  *(unsigned char *)(v84 + 36) = 0;
  *(unsigned char *)(v84 + 37) = 1;
  uint64_t v85 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fmax", 9uLL);
  *(_DWORD *)(v85 + 8) = 2;
  *(void *)(v85 + 16) = AGCLLVMAirBuiltins::buildFastFMax;
  *(void *)(v85 + 24) = 0;
  *(_DWORD *)(v85 + 32) = 5;
  *(unsigned char *)(v85 + 36) = 0;
  *(unsigned char *)(v85 + 37) = 1;
  uint64_t v86 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fmin", 9uLL);
  *(_DWORD *)(v86 + 8) = 2;
  *(void *)(v86 + 16) = AGCLLVMAirBuiltins::buildFastFMin;
  *(void *)(v86 + 24) = 0;
  *(_DWORD *)(v86 + 32) = 5;
  *(unsigned char *)(v86 + 36) = 0;
  *(unsigned char *)(v86 + 37) = 1;
  uint64_t v87 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "gamma_expand", 0xCuLL);
  *(_DWORD *)(v87 + 8) = 1;
  *(void *)(v87 + 16) = AGCLLVMAirBuiltins::buildGExp8;
  *(void *)(v87 + 24) = 0;
  *(_DWORD *)(v87 + 32) = 3;
  *(_WORD *)(v87 + 36) = 0;
  uint64_t v88 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "gamma_compress", 0xEuLL);
  *(_DWORD *)(v88 + 8) = 1;
  *(void *)(v88 + 16) = AGCLLVMAirBuiltins::buildGCmp8;
  *(void *)(v88 + 24) = 0;
  *(_DWORD *)(v88 + 32) = 3;
  *(_WORD *)(v88 + 36) = 0;
  uint64_t v89 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "gamma_expand_xr", 0xFuLL);
  *(_DWORD *)(v89 + 8) = 1;
  *(void *)(v89 + 16) = AGCLLVMAirBuiltins::buildGExp10;
  *(void *)(v89 + 24) = 0;
  *(_DWORD *)(v89 + 32) = 3;
  *(_WORD *)(v89 + 36) = 0;
  uint64_t v90 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "gamma_compress_xr", 0x11uLL);
  *(_DWORD *)(v90 + 8) = 1;
  *(void *)(v90 + 16) = AGCLLVMAirBuiltins::buildGCmp10;
  *(void *)(v90 + 24) = 0;
  *(_DWORD *)(v90 + 32) = 3;
  *(_WORD *)(v90 + 36) = 0;
  uint64_t v91 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "convert", 7uLL);
  *(_DWORD *)(v91 + 8) = 1;
  *(void *)(v91 + 16) = AGCLLVMAirBuiltins::buildConvert;
  *(void *)(v91 + 24) = 0;
  *(_DWORD *)(v91 + 32) = 9;
  *(unsigned char *)(v91 + 36) = 0;
  *(unsigned char *)(v91 + 37) = 1;
  uint64_t v92 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "pack", 4uLL);
  *(_DWORD *)(v92 + 8) = 1;
  *(void *)(v92 + 16) = AGCLLVMAirBuiltins::buildPack;
  *(void *)(v92 + 24) = 0;
  *(_DWORD *)(v92 + 32) = 9;
  *(_WORD *)(v92 + 36) = 0;
  uint64_t v93 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "unpack", 6uLL);
  *(_DWORD *)(v93 + 8) = 1;
  *(void *)(v93 + 16) = AGCLLVMAirBuiltins::buildUnpack;
  *(void *)(v93 + 24) = 0;
  *(_DWORD *)(v93 + 32) = 9;
  *(_WORD *)(v93 + 36) = 0;
  uint64_t v94 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "abs", 3uLL);
  *(_DWORD *)(v94 + 8) = 1;
  *(void *)(v94 + 16) = AGCLLVMAirBuiltins::buildAbs;
  *(void *)(v94 + 24) = 0;
  *(_DWORD *)(v94 + 32) = 9;
  *(unsigned char *)(v94 + 36) = 0;
  *(unsigned char *)(v94 + 37) = 1;
  uint64_t v95 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "abs_diff", 8uLL);
  *(_DWORD *)(v95 + 8) = 1;
  *(void *)(v95 + 16) = AGCLLVMAirBuiltins::buildAbsDiff;
  *(void *)(v95 + 24) = 0;
  *(_DWORD *)(v95 + 32) = 9;
  *(unsigned char *)(v95 + 36) = 0;
  *(unsigned char *)(v95 + 37) = 1;
  uint64_t v96 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "add_sat", 7uLL);
  *(_DWORD *)(v96 + 8) = 1;
  *(void *)(v96 + 16) = AGCLLVMAirBuiltins::buildAddSat;
  *(void *)(v96 + 24) = 0;
  *(_DWORD *)(v96 + 32) = 9;
  *(unsigned char *)(v96 + 36) = 0;
  *(unsigned char *)(v96 + 37) = 1;
  uint64_t v97 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "sub_sat", 7uLL);
  *(_DWORD *)(v97 + 8) = 1;
  *(void *)(v97 + 16) = AGCLLVMAirBuiltins::buildSubSat;
  *(void *)(v97 + 24) = 0;
  *(_DWORD *)(v97 + 32) = 9;
  *(unsigned char *)(v97 + 36) = 0;
  *(unsigned char *)(v97 + 37) = 1;
  uint64_t v98 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "hadd", 4uLL);
  *(_DWORD *)(v98 + 8) = 1;
  *(void *)(v98 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(void *)(v98 + 24) = 0;
  *(_DWORD *)(v98 + 32) = 9;
  *(unsigned char *)(v98 + 36) = 0;
  *(unsigned char *)(v98 + 37) = 1;
  uint64_t v99 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "rhadd", 5uLL);
  *(_DWORD *)(v99 + 8) = 1;
  *(void *)(v99 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(void *)(v99 + 24) = 0;
  *(_DWORD *)(v99 + 32) = 9;
  *(unsigned char *)(v99 + 36) = 0;
  *(unsigned char *)(v99 + 37) = 1;
  uint64_t v100 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "clamp", 5uLL);
  *(_DWORD *)(v100 + 8) = 1;
  *(void *)(v100 + 16) = AGCLLVMAirBuiltins::buildClamp;
  *(void *)(v100 + 24) = 0;
  *(_DWORD *)(v100 + 32) = 9;
  *(unsigned char *)(v100 + 36) = 0;
  *(unsigned char *)(v100 + 37) = 1;
  uint64_t v101 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "clz", 3uLL);
  *(_DWORD *)(v101 + 8) = 1;
  *(void *)(v101 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(void *)(v101 + 24) = 0;
  *(_DWORD *)(v101 + 32) = 9;
  *(unsigned char *)(v101 + 36) = 0;
  *(unsigned char *)(v101 + 37) = 1;
  uint64_t v102 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "ctz", 3uLL);
  *(_DWORD *)(v102 + 8) = 1;
  *(void *)(v102 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(void *)(v102 + 24) = 0;
  *(_DWORD *)(v102 + 32) = 9;
  *(unsigned char *)(v102 + 36) = 0;
  *(unsigned char *)(v102 + 37) = 1;
  uint64_t v103 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mad_hi", 6uLL);
  *(_DWORD *)(v103 + 8) = 1;
  *(void *)(v103 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(void *)(v103 + 24) = 0;
  *(_DWORD *)(v103 + 32) = 9;
  *(unsigned char *)(v103 + 36) = 0;
  *(unsigned char *)(v103 + 37) = 1;
  uint64_t v104 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mad_sat", 7uLL);
  *(_DWORD *)(v104 + 8) = 1;
  *(void *)(v104 + 16) = AGCLLVMAirBuiltins::buildMadSat;
  *(void *)(v104 + 24) = 0;
  *(_DWORD *)(v104 + 32) = 9;
  *(unsigned char *)(v104 + 36) = 0;
  *(unsigned char *)(v104 + 37) = 1;
  uint64_t v105 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "max", 3uLL);
  *(_DWORD *)(v105 + 8) = 1;
  *(void *)(v105 + 16) = AGCLLVMAirBuiltins::buildIMax;
  *(void *)(v105 + 24) = 0;
  *(_DWORD *)(v105 + 32) = 9;
  *(unsigned char *)(v105 + 36) = 0;
  *(unsigned char *)(v105 + 37) = 1;
  uint64_t v106 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "min", 3uLL);
  *(_DWORD *)(v106 + 8) = 1;
  *(void *)(v106 + 16) = AGCLLVMAirBuiltins::buildIMin;
  *(void *)(v106 + 24) = 0;
  *(_DWORD *)(v106 + 32) = 9;
  *(unsigned char *)(v106 + 36) = 0;
  *(unsigned char *)(v106 + 37) = 1;
  uint64_t v107 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mul_hi", 6uLL);
  *(_DWORD *)(v107 + 8) = 1;
  *(void *)(v107 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(void *)(v107 + 24) = 0;
  *(_DWORD *)(v107 + 32) = 9;
  *(unsigned char *)(v107 + 36) = 0;
  *(unsigned char *)(v107 + 37) = 1;
  uint64_t v108 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "rotate", 6uLL);
  *(_DWORD *)(v108 + 8) = 1;
  *(void *)(v108 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(void *)(v108 + 24) = 0;
  *(_DWORD *)(v108 + 32) = 9;
  *(unsigned char *)(v108 + 36) = 0;
  *(unsigned char *)(v108 + 37) = 1;
  uint64_t v109 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "popcount", 8uLL);
  *(_DWORD *)(v109 + 8) = 1;
  *(void *)(v109 + 16) = AGCLLVMAirBuiltins::buildPopCount;
  *(void *)(v109 + 24) = 0;
  *(_DWORD *)(v109 + 32) = 3;
  *(unsigned char *)(v109 + 36) = 0;
  *(unsigned char *)(v109 + 37) = 1;
  uint64_t v110 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "extract_bits", 0xCuLL);
  *(_DWORD *)(v110 + 8) = 1;
  *(void *)(v110 + 16) = AGCLLVMAirBuiltins::buildExtractBits;
  *(void *)(v110 + 24) = 0;
  *(_DWORD *)(v110 + 32) = 9;
  *(unsigned char *)(v110 + 36) = 0;
  *(unsigned char *)(v110 + 37) = 1;
  uint64_t v111 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "insert_bits", 0xBuLL);
  *(_DWORD *)(v111 + 8) = 1;
  *(void *)(v111 + 16) = AGCLLVMAirBuiltins::buildInsertBits;
  *(void *)(v111 + 24) = 0;
  *(_DWORD *)(v111 + 32) = 9;
  *(unsigned char *)(v111 + 36) = 0;
  *(unsigned char *)(v111 + 37) = 1;
  uint64_t v112 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "reverse_bits", 0xCuLL);
  *(_DWORD *)(v112 + 8) = 1;
  *(void *)(v112 + 16) = AGCLLVMAirBuiltins::buildReverseBits;
  *(void *)(v112 + 24) = 0;
  *(_DWORD *)(v112 + 32) = 3;
  *(unsigned char *)(v112 + 36) = 0;
  *(unsigned char *)(v112 + 37) = 1;
  uint64_t v113 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "any", 3uLL);
  *(_DWORD *)(v113 + 8) = 1;
  *(void *)(v113 + 16) = AGCLLVMAirBuiltins::buildAny;
  *(void *)(v113 + 24) = 0;
  *(_DWORD *)(v113 + 32) = 3;
  *(_WORD *)(v113 + 36) = 0;
  uint64_t v114 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "all", 3uLL);
  *(_DWORD *)(v114 + 8) = 1;
  *(void *)(v114 + 16) = AGCLLVMAirBuiltins::buildAll;
  *(void *)(v114 + 24) = 0;
  *(_DWORD *)(v114 + 32) = 3;
  *(_WORD *)(v114 + 36) = 0;
  uint64_t v115 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "any_msb", 7uLL);
  *(_DWORD *)(v115 + 8) = 1;
  *(void *)(v115 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(void *)(v115 + 24) = 0;
  *(_DWORD *)(v115 + 32) = 9;
  *(unsigned char *)(v115 + 36) = 0;
  *(unsigned char *)(v115 + 37) = 1;
  uint64_t v116 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "all_msb", 7uLL);
  *(_DWORD *)(v116 + 8) = 1;
  *(void *)(v116 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(void *)(v116 + 24) = 0;
  *(_DWORD *)(v116 + 32) = 9;
  *(unsigned char *)(v116 + 36) = 0;
  *(unsigned char *)(v116 + 37) = 1;
  uint64_t v117 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "saturate", 8uLL);
  *(_DWORD *)(v117 + 8) = 1;
  *(void *)(v117 + 16) = AGCLLVMAirBuiltins::buildNanFSaturate;
  *(void *)(v117 + 24) = 0;
  *(_DWORD *)(v117 + 32) = 3;
  *(unsigned char *)(v117 + 36) = 0;
  *(unsigned char *)(v117 + 37) = 1;
  uint64_t v118 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mix", 3uLL);
  *(_DWORD *)(v118 + 8) = 1;
  *(void *)(v118 + 16) = AGCLLVMAirBuiltins::buildMix;
  *(void *)(v118 + 24) = 0;
  *(_DWORD *)(v118 + 32) = 8;
  *(unsigned char *)(v118 + 36) = 0;
  *(unsigned char *)(v118 + 37) = 1;
  uint64_t v119 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "sign", 4uLL);
  *(_DWORD *)(v119 + 8) = 1;
  *(void *)(v119 + 16) = AGCLLVMAirBuiltins::buildSign;
  *(void *)(v119 + 24) = 0;
  *(_DWORD *)(v119 + 32) = 3;
  *(unsigned char *)(v119 + 36) = 0;
  *(unsigned char *)(v119 + 37) = 1;
  uint64_t v120 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "dot", 3uLL);
  *(_DWORD *)(v120 + 8) = 1;
  *(void *)(v120 + 16) = AGCLLVMAirBuiltins::buildDot;
  *(void *)(v120 + 24) = 0;
  *(_DWORD *)(v120 + 32) = 6;
  *(_WORD *)(v120 + 36) = 0;
  uint64_t v121 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_clamp", 0xAuLL);
  *(_DWORD *)(v121 + 8) = 2;
  *(void *)(v121 + 16) = AGCLLVMAirBuiltins::buildFastFClamp;
  *(void *)(v121 + 24) = 0;
  *(_DWORD *)(v121 + 32) = 7;
  *(unsigned char *)(v121 + 36) = 0;
  *(unsigned char *)(v121 + 37) = 1;
  uint64_t v122 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_saturate", 0xDuLL);
  *(_DWORD *)(v122 + 8) = 2;
  *(void *)(v122 + 16) = AGCLLVMAirBuiltins::buildFastFSaturate;
  *(void *)(v122 + 24) = 0;
  *(_DWORD *)(v122 + 32) = 3;
  *(unsigned char *)(v122 + 36) = 0;
  *(unsigned char *)(v122 + 37) = 1;
  char v123 = *((unsigned char *)v2 + 43);
  uint64_t v124 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "dfdx", 4uLL);
  *(_DWORD *)(v124 + 8) = 1;
  *(void *)(v124 + 16) = AGCLLVMAirBuiltins::buildDfdx;
  *(void *)(v124 + 24) = 0;
  *(_DWORD *)(v124 + 32) = 3;
  *(unsigned char *)(v124 + 36) = v123;
  *(unsigned char *)(v124 + 37) = 1;
  char v125 = *((unsigned char *)v2 + 43);
  uint64_t v126 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "dfdy", 4uLL);
  *(_DWORD *)(v126 + 8) = 1;
  *(void *)(v126 + 16) = AGCLLVMAirBuiltins::buildDfdy;
  *(void *)(v126 + 24) = 0;
  *(_DWORD *)(v126 + 32) = 3;
  *(unsigned char *)(v126 + 36) = v125;
  *(unsigned char *)(v126 + 37) = 1;
  LOBYTE(v2) = *((unsigned char *)v2 + 43);
  uint64_t v127 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fwidth", 6uLL);
  *(_DWORD *)(v127 + 8) = 1;
  *(void *)(v127 + 16) = AGCLLVMAirBuiltins::buildWidth;
  *(void *)(v127 + 24) = 0;
  *(_DWORD *)(v127 + 32) = 3;
  *(unsigned char *)(v127 + 36) = (_BYTE)v2;
  *(unsigned char *)(v127 + 37) = 1;
  uint64_t v128 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "atomic", 6uLL);
  *(_DWORD *)(v128 + 8) = 1;
  *(void *)(v128 + 16) = AGCLLVMAirBuiltins::buildAtomic;
  *(void *)(v128 + 24) = 0;
  *(_DWORD *)(v128 + 32) = 9;
  *(_WORD *)(v128 + 36) = 0;
  uint64_t v129 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "assert", 6uLL);
  *(_DWORD *)(v129 + 8) = 1;
  *(void *)(v129 + 16) = AGCLLVMAirBuiltins::buildAssert;
  *(void *)(v129 + 24) = 0;
  *(_DWORD *)(v129 + 32) = 1;
  *(_WORD *)(v129 + 36) = 0;
  uint64_t v130 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_simd_width", 0xEuLL);
  *(_DWORD *)(v130 + 8) = 1;
  *(void *)(v130 + 16) = AGCLLVMAirBuiltins::buildSimdWidth;
  *(void *)(v130 + 24) = 0;
  *(_DWORD *)(v130 + 32) = 9;
  *(_WORD *)(v130 + 36) = 0;
  uint64_t v131 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_simdgroup_size", 0x12uLL);
  *(_DWORD *)(v131 + 8) = 1;
  *(void *)(v131 + 16) = AGCLLVMAirBuiltins::buildSimdWidth;
  *(void *)(v131 + 24) = 0;
  *(_DWORD *)(v131 + 32) = 9;
  *(_WORD *)(v131 + 36) = 0;
  uint64_t v132 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_thread_execution_width", 0x1AuLL);
  *(_DWORD *)(v132 + 8) = 1;
  *(void *)(v132 + 16) = AGCLLVMAirBuiltins::buildThreadExecutionWidth;
  *(void *)(v132 + 24) = 0;
  *(_DWORD *)(v132 + 32) = 9;
  *(_WORD *)(v132 + 36) = 0;
  uint64_t v133 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "simdgroup", 9uLL);
  *(_DWORD *)(v133 + 8) = 1;
  *(void *)(v133 + 16) = AGCLLVMAirBuiltins::buildSimdBarrier;
  *(void *)(v133 + 24) = 0;
  *(_DWORD *)(v133 + 32) = 9;
  *(_WORD *)(v133 + 36) = 0;
  uint64_t v134 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "is_uniform", 0xAuLL);
  *(_DWORD *)(v134 + 8) = 1;
  *(void *)(v134 + 16) = AGCLLVMAirBuiltins::replaceIsUniform;
  *(void *)(v134 + 24) = 0;
  *(_DWORD *)(v134 + 32) = 12;
  *(_WORD *)(v134 + 36) = 0;
  uint64_t v135 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mul24", 5uLL);
  *(_DWORD *)(v135 + 8) = 1;
  *(void *)(v135 + 16) = AGCLLVMAirBuiltins::buildIMul24;
  *(void *)(v135 + 24) = 0;
  *(_DWORD *)(v135 + 32) = 9;
  *(unsigned char *)(v135 + 36) = 0;
  *(unsigned char *)(v135 + 37) = 1;
  uint64_t v136 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mad24", 5uLL);
  *(_DWORD *)(v136 + 8) = 1;
  *(void *)(v136 + 16) = AGCLLVMAirBuiltins::buildIMad24;
  *(void *)(v136 + 24) = 0;
  *(_DWORD *)(v136 + 32) = 9;
  *(unsigned char *)(v136 + 36) = 0;
  *(unsigned char *)(v136 + 37) = 1;
  uint64_t v137 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "min3", 4uLL);
  *(_DWORD *)(v137 + 8) = 1;
  *(void *)(v137 + 16) = AGCLLVMAirBuiltins::buildIMin3;
  *(void *)(v137 + 24) = 0;
  *(_DWORD *)(v137 + 32) = 9;
  *(unsigned char *)(v137 + 36) = 0;
  *(unsigned char *)(v137 + 37) = 1;
  uint64_t v138 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fmin3", 5uLL);
  *(_DWORD *)(v138 + 8) = 1;
  *(void *)(v138 + 16) = AGCLLVMAirBuiltins::buildFMin3;
  *(void *)(v138 + 24) = 0;
  *(_DWORD *)(v138 + 32) = 9;
  *(unsigned char *)(v138 + 36) = 0;
  *(unsigned char *)(v138 + 37) = 1;
  uint64_t v139 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fmin3", 0xAuLL);
  *(_DWORD *)(v139 + 8) = 2;
  *(void *)(v139 + 16) = AGCLLVMAirBuiltins::buildFastFMin3;
  *(void *)(v139 + 24) = 0;
  *(_DWORD *)(v139 + 32) = 9;
  *(unsigned char *)(v139 + 36) = 0;
  *(unsigned char *)(v139 + 37) = 1;
  uint64_t v140 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "max3", 4uLL);
  *(_DWORD *)(v140 + 8) = 1;
  *(void *)(v140 + 16) = AGCLLVMAirBuiltins::buildIMax3;
  *(void *)(v140 + 24) = 0;
  *(_DWORD *)(v140 + 32) = 9;
  *(unsigned char *)(v140 + 36) = 0;
  *(unsigned char *)(v140 + 37) = 1;
  uint64_t v141 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fmax3", 5uLL);
  *(_DWORD *)(v141 + 8) = 1;
  *(void *)(v141 + 16) = AGCLLVMAirBuiltins::buildFMax3;
  *(void *)(v141 + 24) = 0;
  *(_DWORD *)(v141 + 32) = 9;
  *(unsigned char *)(v141 + 36) = 0;
  *(unsigned char *)(v141 + 37) = 1;
  uint64_t v142 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fmax3", 0xAuLL);
  *(_DWORD *)(v142 + 8) = 2;
  *(void *)(v142 + 16) = AGCLLVMAirBuiltins::buildFastFMax3;
  *(void *)(v142 + 24) = 0;
  *(_DWORD *)(v142 + 32) = 9;
  *(unsigned char *)(v142 + 36) = 0;
  *(unsigned char *)(v142 + 37) = 1;
  uint64_t v143 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "median3", 7uLL);
  *(_DWORD *)(v143 + 8) = 1;
  *(void *)(v143 + 16) = AGCLLVMAirBuiltins::buildIMedian3;
  *(void *)(v143 + 24) = 0;
  *(_DWORD *)(v143 + 32) = 9;
  *(unsigned char *)(v143 + 36) = 0;
  *(unsigned char *)(v143 + 37) = 1;
  uint64_t v144 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fmedian3", 8uLL);
  *(_DWORD *)(v144 + 8) = 1;
  *(void *)(v144 + 16) = AGCLLVMAirBuiltins::buildFMedian3;
  *(void *)(v144 + 24) = 0;
  *(_DWORD *)(v144 + 32) = 9;
  *(unsigned char *)(v144 + 36) = 0;
  *(unsigned char *)(v144 + 37) = 1;
  uint64_t v145 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fmedian3", 0xDuLL);
  *(_DWORD *)(v145 + 8) = 2;
  *(void *)(v145 + 16) = AGCLLVMAirBuiltins::buildFastFMedian3;
  *(void *)(v145 + 24) = 0;
  *(_DWORD *)(v145 + 32) = 9;
  *(unsigned char *)(v145 + 36) = 0;
  *(unsigned char *)(v145 + 37) = 1;
  uint64_t v146 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "projective_coordinates", 0x16uLL);
  *(_DWORD *)(v146 + 8) = 1;
  *(void *)(v146 + 16) = AGCLLVMAirBuiltins::buildProjectiveCoordinates;
  *(void *)(v146 + 24) = 0;
  *(_DWORD *)(v146 + 32) = 3;
  *(_WORD *)(v146 + 36) = 0;
  uint64_t v147 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_unique_identifier_compute_pipeline_state", 0x2CuLL);
  *(_DWORD *)(v147 + 8) = 1;
  *(void *)(v147 + 16) = AGCLLVMAirBuiltins::buildGetUniqueIdentifierPsoIcbVft;
  *(void *)(v147 + 24) = 0;
  *(_DWORD *)(v147 + 32) = 3;
  *(unsigned char *)(v147 + 36) = 0;
  *(unsigned char *)(v147 + 37) = 1;
  uint64_t v148 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_unique_identifier_render_pipeline_state", 0x2BuLL);
  *(_DWORD *)(v148 + 8) = 1;
  *(void *)(v148 + 16) = AGCLLVMAirBuiltins::buildGetUniqueIdentifierPsoIcbVft;
  *(void *)(v148 + 24) = 0;
  *(_DWORD *)(v148 + 32) = 3;
  *(unsigned char *)(v148 + 36) = 0;
  *(unsigned char *)(v148 + 37) = 1;
  uint64_t v149 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_unique_identifier_command_buffer", 0x24uLL);
  *(_DWORD *)(v149 + 8) = 1;
  *(void *)(v149 + 16) = AGCLLVMAirBuiltins::buildGetUniqueIdentifierPsoIcbVft;
  *(void *)(v149 + 24) = 0;
  *(_DWORD *)(v149 + 32) = 3;
  *(unsigned char *)(v149 + 36) = 0;
  *(unsigned char *)(v149 + 37) = 1;
  uint64_t v150 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_unique_identifier_visible_function_table", 0x2CuLL);
  *(_DWORD *)(v150 + 8) = 1;
  *(void *)(v150 + 16) = AGCLLVMAirBuiltins::buildGetUniqueIdentifierPsoIcbVft;
  *(void *)(v150 + 24) = 0;
  *(_DWORD *)(v150 + 32) = 3;
  *(unsigned char *)(v150 + 36) = 0;
  *(unsigned char *)(v150 + 37) = 1;
  uint64_t result = llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_threads_per_simdgroup", 0x19uLL);
  uint64_t v152 = *result;
  *(_DWORD *)(v152 + 8) = 1;
  *(void *)(v152 + 16) = AGCLLVMAirBuiltins::buildThreadExecutionWidth;
  *(void *)(v152 + 24) = 0;
  *(_DWORD *)(v152 + 32) = 9;
  *(_WORD *)(v152 + 36) = 0;
  return result;
}

uint64_t *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      uint64_t v8 = i[1];
      ++i;
      uint64_t v7 = v8;
    }
    return i;
  }
  uint64_t v10 = MEMORY[0x1CB79F270](a3 + 41, 8);
  uint64_t v11 = v10;
  uint64_t v12 = v10 + 40;
  if (a3) {
    memcpy((void *)(v10 + 40), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  *(void *)uint64_t v11 = a3;
  *(_DWORD *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 32) = 0;
  *(_WORD *)(v11 + 36) = 0;
  *uint64_t i = v11;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t AGCLLVMAirBuiltins::buildIMedian3(AGCLLVMBuilder *a1, uint64_t a2, unsigned char *a3)
{
  char v4 = *(llvm::CmpInst ***)a2;
  uint64_t v5 = *(llvm::Value **)(a2 + 8);
  char v6 = *(llvm::CmpInst ***)(a2 + 16);
  uint64_t v7 = (uint64_t *)((char *)a1 + 8);
  uint64_t v8 = *(llvm::CmpInst ***)a2;
  if (*a3 == 115)
  {
    uint64_t v9 = AGCLLVMBuilder::buildICmpSel(a1, v8, v5, 40);
    uint64_t v10 = AGCLLVMBuilder::buildICmpSel(a1, v4, v5, 38);
    __int16 v18 = 257;
    llvm::IRBuilderBase::CreateICmp(v7, 41, v6, v9, (uint64_t)v17);
    __int16 v16 = 257;
    uint64_t v11 = v7;
    uint64_t v12 = 39;
  }
  else
  {
    uint64_t v13 = AGCLLVMBuilder::buildICmpSel(a1, v8, v5, 36);
    uint64_t v10 = AGCLLVMBuilder::buildICmpSel(a1, v4, v5, 34);
    __int16 v18 = 257;
    llvm::IRBuilderBase::CreateICmp(v7, 37, v6, v13, (uint64_t)v17);
    __int16 v16 = 257;
    uint64_t v11 = v7;
    uint64_t v12 = 35;
  }
  llvm::IRBuilderBase::CreateICmp(v11, v12, v6, v10, (uint64_t)v15);
  llvm::IRBuilderBase::CreateSelect();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::buildFastFMax3(AGCLLVMAirBuiltins *a1, llvm::Value **a2)
{
  char v4 = (llvm::Value *)AGCLLVMAirBuiltins::buildFastFMax(a1, *a2, a2[1]);
  uint64_t v5 = a2[2];
  return AGCLLVMAirBuiltins::buildFastFMax(a1, v4, v5);
}

uint64_t AGCLLVMAirBuiltins::buildFMax3(AGCLLVMAirBuiltins *a1, llvm::Value **a2)
{
  char v4 = (llvm::Value *)AGCLLVMAirBuiltins::buildNanFMax(a1, *a2, a2[1]);
  uint64_t v5 = a2[2];
  return AGCLLVMAirBuiltins::buildNanFMax(a1, v4, v5);
}

uint64_t AGCLLVMAirBuiltins::buildIMax3(AGCLLVMBuilder *a1, uint64_t a2, unsigned char *a3)
{
  char v4 = *(llvm::Value **)(a2 + 16);
  if (*a3 == 115) {
    uint64_t v5 = 38;
  }
  else {
    uint64_t v5 = 34;
  }
  char v6 = (llvm::CmpInst **)AGCLLVMBuilder::buildICmpSel(a1, *(llvm::CmpInst ***)a2, *(llvm::Value **)(a2 + 8), v5);
  return AGCLLVMBuilder::buildICmpSel(a1, v6, v4, v5);
}

uint64_t AGCLLVMAirBuiltins::buildFastFMin3(AGCLLVMAirBuiltins *a1, llvm::Value **a2)
{
  char v4 = (llvm::Value *)AGCLLVMAirBuiltins::buildFastFMin(a1, *a2, a2[1]);
  uint64_t v5 = a2[2];
  return AGCLLVMAirBuiltins::buildFastFMin(a1, v4, v5);
}

uint64_t AGCLLVMAirBuiltins::buildFMin3(AGCLLVMAirBuiltins *a1, llvm::Value **a2)
{
  char v4 = (llvm::Value *)AGCLLVMAirBuiltins::buildNanFMin(a1, *a2, a2[1]);
  uint64_t v5 = a2[2];
  return AGCLLVMAirBuiltins::buildNanFMin(a1, v4, v5);
}

uint64_t AGCLLVMAirBuiltins::buildIMin3(AGCLLVMBuilder *a1, uint64_t a2, unsigned char *a3)
{
  char v4 = *(llvm::Value **)(a2 + 16);
  if (*a3 == 115) {
    uint64_t v5 = 40;
  }
  else {
    uint64_t v5 = 36;
  }
  char v6 = (llvm::CmpInst **)AGCLLVMBuilder::buildICmpSel(a1, *(llvm::CmpInst ***)a2, *(llvm::Value **)(a2 + 8), v5);
  return AGCLLVMBuilder::buildICmpSel(a1, v6, v4, v5);
}

uint64_t AGCLLVMAirBuiltins::buildIMad24(AGCLLVMAirBuiltins *a1, llvm::Value **a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5 = (AGCLLVMAirBuiltins *)((char *)a1 + 8);
  char v6 = (llvm::Value *)AGCLLVMAirBuiltins::buildIMul24(a1, a2, a3, a4);
  uint64_t v7 = a2[2];
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateAdd(v5, v6, v7, (const llvm::Twine *)v9);
}

uint64_t AGCLLVMAirBuiltins::buildIMul24(AGCLLVMAirBuiltins *this, llvm::Value **a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a4) {
    BOOL v6 = *a3 == 115;
  }
  else {
    BOOL v6 = 0;
  }
  uint64_t v7 = (llvm::Value *)AGCLLVMAirBuiltins::truncateTo24B(this, *a2, v6);
  uint64_t v8 = (llvm::Value *)AGCLLVMAirBuiltins::truncateTo24B(this, a2[1], v6);
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateMul((AGCLLVMAirBuiltins *)((char *)this + 8), v7, v8, (const llvm::Twine *)v10);
}

uint64_t AGCLLVMAirBuiltins::truncateTo24B(AGCLLVMAirBuiltins *this, llvm::Value *a2, int a3)
{
  uint64_t v5 = (AGCLLVMAirBuiltins *)((char *)this + 8);
  __int16 v11 = 257;
  BOOL v6 = (llvm::Value *)llvm::ConstantInt::get();
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v5, a2, v6, (const llvm::Twine *)v10);
  __int16 v11 = 257;
  uint64_t v8 = (llvm::Value *)llvm::ConstantInt::get();
  if (a3) {
    return llvm::IRBuilderBase::CreateAShr(v5, Shl, v8, (const llvm::Twine *)v10);
  }
  else {
    return llvm::IRBuilderBase::CreateLShr(v5, Shl, v8, (const llvm::Twine *)v10);
  }
}

uint64_t AGCLLVMAirBuiltins::buildSimdBarrier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 504))();
}

uint64_t AGCLLVMAirBuiltins::buildAtomic(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t AGCLLVMAirBuiltins::buildFastFClamp(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v8 = *((void *)this + 46);
  long long v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (AGCLLVMAirBuiltins *)((char *)this + 8));
  int v13 = *((_DWORD *)this + 26);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *, llvm::Value *, void))(*(void *)v8 + 80))(v8, &v11, a2, a3, a4, 0);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltins::buildNanFSaturate(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMAirBuiltins *)((char *)this + 8));
  int v10 = *((_DWORD *)this + 26);
  uint64_t v5 = *(void *)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v5 = **(void **)(v5 + 16);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, BOOL))(*(void *)v4 + 40))(v4, &v8, a2, v5 == *((void *)this + 21));
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

llvm::Value *AGCLLVMAirBuiltins::buildAll(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::buildAnyOrAll(this, a2, 0);
}

uint64_t AGCLLVMAirBuiltins::buildIMin(AGCLLVMBuilder *a1, uint64_t a2, unsigned char *a3)
{
  if (*a3 == 115) {
    uint64_t v3 = 40;
  }
  else {
    uint64_t v3 = 36;
  }
  return AGCLLVMBuilder::buildICmpSel(a1, *(llvm::CmpInst ***)a2, *(llvm::Value **)(a2 + 8), v3);
}

uint64_t AGCLLVMAirBuiltins::buildIMax(AGCLLVMBuilder *a1, uint64_t a2, unsigned char *a3)
{
  if (*a3 == 115) {
    uint64_t v3 = 38;
  }
  else {
    uint64_t v3 = 34;
  }
  return AGCLLVMBuilder::buildICmpSel(a1, *(llvm::CmpInst ***)a2, *(llvm::Value **)(a2 + 8), v3);
}

llvm::Type **AGCLLVMAirBuiltins::buildMadSat(uint64_t a1, llvm::Type ***a2, unsigned __int8 *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = a2[2];
  int v7 = *a3;
  long long v8 = **a2;
  uint64_t v9 = *(void *)(a1 + 368);
  int v10 = (uint64_t *)(v9 + 1176);
  long long v11 = (uint64_t *)(v9 + 1144);
  if (v7 == 115) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v10;
  }
  IntIntrinsicuint64_t Name = (const char *)AGCLLVMTargetLowerer::getIntIntrinsicName(v12, **a2);
  if (IntIntrinsicName)
  {
    uint64_t v14 = (uint64_t)IntIntrinsicName;
    size_t v15 = strlen(IntIntrinsicName);
    uint64_t v16 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(a1, v14, v15, (uint64_t)v8, (uint64_t)v8, (uint64_t)v8, (uint64_t)v8);
    v38[0] = v5;
    v38[1] = v4;
    v38[2] = v6;
    __int16 v37 = 257;
    return (llvm::Type **)llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v16 + 24), v16, (uint64_t)v38, 3, (uint64_t)v36);
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v33 = 0;
    AGCLLVMTargetBuilder::getMinMaxConstants(*(AGCLLVMTargetBuilder **)(a1 + 72), v8, v7 == 115, &v35, &v34, &v33);
    __int16 v18 = (llvm::IRBuilderBase *)(a1 + 8);
    uint64_t v19 = v33;
    __int16 v37 = 257;
    if (v7 == 115)
    {
      SExtOrTrunc = llvm::IRBuilderBase::CreateSExtOrTrunc(v18, v5, v33, (const llvm::Twine *)v36);
      __int16 v37 = 257;
      uint64_t v21 = llvm::IRBuilderBase::CreateSExtOrTrunc(v18, v4, v19, (const llvm::Twine *)v36);
      __int16 v37 = 257;
      char v22 = llvm::IRBuilderBase::CreateSExtOrTrunc(v18, v6, v19, (const llvm::Twine *)v36);
      __int16 v37 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v18, (llvm::Value *)SExtOrTrunc, (llvm::Value *)v21, (const llvm::Twine *)v36);
      __int16 v37 = 257;
      uint64_t Add = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v18, Mul, (llvm::Value *)v22, (const llvm::Twine *)v36);
      __int16 v37 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 40, Add, (uint64_t)v35, (uint64_t)v36);
      __int16 v39 = 257;
      uint64_t Select = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSelect();
      __int16 v37 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 38, Select, (uint64_t)v34, (uint64_t)v36);
      __int16 v39 = 257;
      uint64_t v26 = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
      __int16 v37 = 257;
      return llvm::IRBuilderBase::CreateSExtOrTrunc(v18, v26, v8, (const llvm::Twine *)v36);
    }
    else
    {
      ZExtOrTrunc = llvm::IRBuilderBase::CreateZExtOrTrunc(v18, v5, v33, (const llvm::Twine *)v36);
      __int16 v37 = 257;
      uint64_t v28 = llvm::IRBuilderBase::CreateZExtOrTrunc(v18, v4, v19, (const llvm::Twine *)v36);
      __int16 v37 = 257;
      uint64_t v29 = llvm::IRBuilderBase::CreateZExtOrTrunc(v18, v6, v19, (const llvm::Twine *)v36);
      __int16 v37 = 257;
      uint64_t v30 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v18, (llvm::Value *)ZExtOrTrunc, (llvm::Value *)v28, (const llvm::Twine *)v36);
      __int16 v37 = 257;
      uint64_t v31 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v18, v30, (llvm::Value *)v29, (const llvm::Twine *)v36);
      __int16 v37 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 34, v31, (uint64_t)v34, (uint64_t)v36);
      __int16 v39 = 257;
      uint64_t v32 = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
      __int16 v37 = 257;
      return llvm::IRBuilderBase::CreateZExtOrTrunc(v18, v32, v8, (const llvm::Twine *)v36);
    }
  }
}

llvm::Value *AGCLLVMAirBuiltins::buildSubSat(uint64_t a1, llvm::Type ***a2, unsigned __int8 *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v5 = (llvm::Value *)a2[1];
  int v6 = *a3;
  int v7 = **a2;
  uint64_t v8 = *(void *)(a1 + 368);
  uint64_t v9 = (uint64_t *)(v8 + 1112);
  int v10 = (uint64_t *)(v8 + 1080);
  if (v6 == 115) {
    long long v11 = v10;
  }
  else {
    long long v11 = v9;
  }
  IntIntrinsicuint64_t Name = (const char *)AGCLLVMTargetLowerer::getIntIntrinsicName(v11, **a2);
  if (IntIntrinsicName)
  {
    uint64_t v13 = (uint64_t)IntIntrinsicName;
    size_t v14 = strlen(IntIntrinsicName);
    uint64_t v15 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v13, v14, (uint64_t)v7, (uint64_t)v7, (uint64_t)v7);
    v44[0] = v4;
    v44[1] = v5;
    __int16 v43 = 257;
    return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v15 + 24), v15, (uint64_t)v44, 2, (uint64_t)v42);
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    __int16 v39 = 0;
    AGCLLVMTargetBuilder::getMinMaxConstants(*(AGCLLVMTargetBuilder **)(a1 + 72), v7, v6 == 115, &v41, &v40, &v39);
    if (v6 == 115)
    {
      unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v39);
      __int16 v18 = (llvm::IRBuilderBase *)(a1 + 8);
      if (ScalarSizeInBits <= llvm::Type::getScalarSizeInBits(v7))
      {
        __int16 v43 = 257;
        Neg = (llvm::Type **)llvm::IRBuilderBase::CreateNeg((llvm::IRBuilderBase *)(a1 + 8), v5, (const llvm::Twine *)v42);
        AGCLLVMTargetBuilder::buildAddSat((AGCLLVMTargetBuilder *)a1, v4, Neg, 1);
        llvm::Type::getScalarSizeInBits(v7);
        __int16 v43 = 257;
        uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t LShr = (llvm::CmpInst **)llvm::IRBuilderBase::CreateLShr(v18, (llvm::Value *)v4, v30, (const llvm::Twine *)v42);
        uint64_t v32 = llvm::ConstantInt::get();
        __int16 v43 = 257;
        llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 32, LShr, v32, (uint64_t)v42);
        __int16 v45 = 257;
        llvm::IRBuilderBase::CreateSub(v18, (llvm::Value *)v4, v5, (const llvm::Twine *)v44);
        __int16 v38 = 257;
        llvm::IRBuilderBase::CreateSelect();
        __int16 v43 = 257;
        llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 32, (llvm::CmpInst **)v5, (uint64_t)v41, (uint64_t)v42);
        __int16 v45 = 257;
      }
      else
      {
        __int16 v43 = 257;
        uint64_t Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v4, v5, (const llvm::Twine *)v42);
        __int16 v43 = 257;
        Xor = (llvm::Value *)llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v4, v5, (const llvm::Twine *)v42);
        __int16 v45 = 257;
        uint64_t v21 = (llvm::Value *)llvm::IRBuilderBase::CreateXor(v18, v5, Sub, (const llvm::Twine *)v44);
        __int16 v38 = 257;
        Not = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v18, v21, (const llvm::Twine *)v37);
        __int16 v36 = 257;
        uint64_t v23 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v18, Xor, Not, (const llvm::Twine *)v35);
        uint64_t v24 = llvm::ConstantInt::get();
        __int16 v34 = 257;
        llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 40, v23, v24, (uint64_t)v33);
        uint64_t v25 = llvm::ConstantInt::get();
        __int16 v43 = 257;
        llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 39, v4, v25, (uint64_t)v42);
        uint64_t v26 = *v4;
        __int16 v43 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v18, 38, (uint64_t)v40, (uint64_t)v26, (uint64_t)v42);
        uint64_t v27 = *v4;
        __int16 v45 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v18, 38, (uint64_t)v41, (uint64_t)v27, (uint64_t)v44);
        __int16 v38 = 257;
        llvm::IRBuilderBase::CreateSelect();
        __int16 v43 = 257;
      }
    }
    else
    {
      __int16 v43 = 257;
      uint64_t v28 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v4, v5, (const llvm::Twine *)v42);
      __int16 v43 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 34, v28, (uint64_t)v4, (uint64_t)v42);
      llvm::ConstantInt::get();
      __int16 v45 = 257;
    }
    return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
}

llvm::Type **AGCLLVMAirBuiltins::buildAddSat(AGCLLVMTargetBuilder *a1, llvm::Type ***a2, unsigned __int8 *a3)
{
  return AGCLLVMTargetBuilder::buildAddSat(a1, *a2, a2[1], *a3 == 115);
}

uint64_t AGCLLVMAirBuiltins::buildAbsDiff(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *(llvm::CmpInst ***)a2;
  uint64_t v4 = *(llvm::Value **)(a2 + 8);
  uint64_t v5 = (llvm::IRBuilderBase *)(a1 + 8);
  if (*a3 == 117)
  {
    __int16 v12 = 257;
    int v6 = (uint64_t *)(a1 + 8);
    uint64_t v7 = 36;
  }
  else
  {
    __int16 v12 = 257;
    int v6 = (uint64_t *)(a1 + 8);
    uint64_t v7 = 40;
  }
  llvm::IRBuilderBase::CreateICmp(v6, v7, v3, (uint64_t)v4, (uint64_t)v11);
  __int16 v12 = 257;
  llvm::IRBuilderBase::CreateSub(v5, v4, (llvm::Value *)v3, (const llvm::Twine *)v11);
  __int16 v10 = 257;
  llvm::IRBuilderBase::CreateSub(v5, (llvm::Value *)v3, v4, (const llvm::Twine *)v9);
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *AGCLLVMAirBuiltins::buildAbs(uint64_t *a1, llvm::CmpInst ***a2, unsigned char *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  if (*a3 == 117) {
    return (llvm::Value *)v3;
  }
  uint64_t v5 = *v3;
  if ((*((_DWORD *)*v3 + 2) & 0xFE) == 0x12) {
    uint64_t v5 = (llvm::Type *)**((void **)*v3 + 2);
  }
  IntIntrinsicuint64_t Name = (const char *)AGCLLVMTargetLowerer::getIntIntrinsicName((uint64_t *)(a1[46] + 976), v5);
  if (!IntIntrinsicName)
  {
    uint64_t v15 = llvm::ConstantInt::get();
    uint64_t v16 = a1 + 1;
    __int16 v21 = 257;
    llvm::IRBuilderBase::CreateICmp(v16, 40, v3, v15, (uint64_t)v20);
    __int16 v21 = 257;
    llvm::IRBuilderBase::CreateNeg((llvm::IRBuilderBase *)v16, (llvm::Value *)v3, (const llvm::Twine *)v20);
    __int16 v21 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
  uint64_t v7 = (uint64_t)IntIntrinsicName;
  size_t v8 = strlen(IntIntrinsicName);
  uint64_t v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, v7, v8, (uint64_t)v5, (uint64_t)v5);
  char v22 = v3;
  if ((*((_DWORD *)*v3 + 2) & 0xFE) != 0x12)
  {
    __int16 v21 = 257;
    return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v9 + 24), v9, (uint64_t)&v22, 1, (uint64_t)v20);
  }
  llvm::FixedVectorType::get();
  Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
  *(_OWORD *)uint64_t v23 = 0u;
  long long v24 = 0u;
  AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, (llvm::Value *)v3, v23);
  uint64_t v11 = *((unsigned int *)*v3 + 8);
  if (v11)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      uint64_t v19 = v23[i];
      __int16 v21 = 257;
      uint64_t v13 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v9 + 24), v9, (uint64_t)&v19, 1, (uint64_t)v20);
      uint64_t v19 = v13;
      __int16 v21 = 257;
      size_t v14 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v13, v14, (const llvm::Twine *)v20);
    }
  }
  return InsertElement;
}

uint64_t AGCLLVMAirBuiltins::buildGCmp10(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::buildGCmp(this, a2, 1);
}

uint64_t AGCLLVMAirBuiltins::buildGExp10(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::buildGExp(this, a2, 1);
}

uint64_t AGCLLVMAirBuiltins::buildGCmp8(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::buildGCmp(this, a2, 0);
}

uint64_t AGCLLVMAirBuiltins::buildGExp8(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::buildGExp(this, a2, 0);
}

uint64_t AGCLLVMAirBuiltins::buildTrunc(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t AGCLLVMAirBuiltins::unimplemented()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildCeil(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t AGCLLVMAirBuiltins::buildRNE(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t AGCLLVMAirBuiltins::buildTan(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t AGCLLVMAirBuiltins::buildSin(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 24))(a1, a2, 0);
}

uint64_t AGCLLVMAirBuiltins::buildCos(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 1);
}

uint64_t AGCLLVMAirBuiltins::buildPow(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t AGCLLVMAirBuiltins::buildArctan(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t AGCLLVMAirBuiltins::buildArcsin(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t AGCLLVMAirBuiltins::buildArccos(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t AGCLLVMAirBuiltins::buildCoherentStore(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t AGCLLVMAirBuiltins::buildCoherentLoad(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadElement(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 512))();
}

uint64_t AGCLLVMAirBuiltins::buildWGBarrier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 496))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleRotateDown(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleRotateUp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 192))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleXor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleDown(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleUp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffle(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadBroadcast(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 152))();
}

uint64_t AGCLLVMAirBuiltins::buildGetRenderTargetArrayIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 424))();
}

uint64_t AGCLLVMAirBuiltins::buildGetPatchID(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 416))();
}

uint64_t AGCLLVMAirBuiltins::buildGetAmplificationID(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 408))();
}

uint64_t AGCLLVMAirBuiltins::buildGetInstanceID(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 400))();
}

uint64_t AGCLLVMAirBuiltins::buildGetVertexID(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 392))();
}

uint64_t AGCLLVMAirBuiltins::buildGetSampleID(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 384))();
}

uint64_t AGCLLVMAirBuiltins::buildGetPosition(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t AGCLLVMAirBuiltins::buildGetThreadPositionInGrid(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 368))();
}

uint64_t AGCLLVMAirBuiltins::buildShuffleAndFill(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 592))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdBroadcastFirstActiveThread(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 488))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdIsFirstActiveThread(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 480))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdIsHelperThread(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 472))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdReduce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 464))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadBroadcastFirstActiveThread(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 456))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadIsFirstActiveThread(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 448))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadIsHelperThread(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 440))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadReduce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 432))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdMatrixThreadElementsInit(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 584))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdMatrixMultiplyAccumulate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 576))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdMatrixStore(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 568))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdMatrixLoad(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 560))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadVoteAny(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 352))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadVoteAll(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 344))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdVoteAny(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 336))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdVoteAll(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 328))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadAny(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 320))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadAll(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 312))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdAny(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 304))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdAll(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 296))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadActiveThreadsMask(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 288))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdActiveThreadsMask(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 280))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdGroupIndexInThreadgroup(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 536))();
}

uint64_t AGCLLVMAirBuiltins::buildThreadIndexInSimdGroup(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 528))();
}

uint64_t AGCLLVMAirBuiltins::buildThreadsPerSimdgroup(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 520))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleRotateDown(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 264))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleRotateUp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 256))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleXor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 248))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleDown(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 240))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleUp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 232))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffle(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 224))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdBallot(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 272))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdBroadcast(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 216))();
}

uint64_t AGCLLVMAirBuiltins::buildQuadBallot(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t AGCLLVMAirBuiltins::buildCoordinateDewarp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 552))();
}

uint64_t AGCLLVMAirBuiltins::buildCoordinateWarp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 544))();
}

uint64_t AGCLLVMAirBuiltins::buildSimdYield(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 360))();
}

uint64_t *llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(AGCLLVMAirTrigIdentities::initializeTrigReplacementMap(void)::trig_replacements
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EBD0E7C8) = qword_1EBD0E7C8 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x1CB79F270](a2 + 41, 8);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v8 + 40;
  if (a2) {
    memcpy((void *)(v8 + 40), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *uint64_t v9 = a2;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = 0x1800000000;
  *uint64_t i = (uint64_t)v9;
  ++dword_1EBD0E7C4;
  for (uint64_t i = (uint64_t *)(AGCLLVMAirTrigIdentities::initializeTrigReplacementMap(void)::trig_replacements
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMAirTrigIdentities::initializeTrigReplacementMap(void)::trig_replacements));
        !*i || *i == -8;
  return i;
}

uint64_t AGCLLVMAirTrigIdentities::buildTanArccos(AGCLLVMAirTrigIdentities *this, llvm::Value *a2)
{
  uint64_t v3 = (char *)this + 8;
  uint64_t v4 = AGCLLVMAirTrigIdentities::buildPythagoreanIdentity(this, a2);
  __int16 v7 = 257;
  return llvm::IRBuilderBase::CreateFDiv((uint64_t)v3, (uint64_t)v4, (uint64_t)a2, (uint64_t)v6);
}

llvm::Value *AGCLLVMAirTrigIdentities::buildPythagoreanIdentity(AGCLLVMAirTrigIdentities *this, llvm::Value *a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  __int16 v10 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v9);
  unsigned char v8[16] = 257;
  uint64_t FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v4, FMul, (uint64_t)v8);
  return AGCLLVMTargetBuilder::CreateSqrt(this, FSub);
}

uint64_t AGCLLVMAirTrigIdentities::buildTanArcsin(AGCLLVMAirTrigIdentities *this, llvm::Value *a2)
{
  uint64_t v3 = (char *)this + 8;
  uint64_t v4 = AGCLLVMAirTrigIdentities::buildPythagoreanIdentity(this, a2);
  __int16 v7 = 257;
  return llvm::IRBuilderBase::CreateFDiv((uint64_t)v3, (uint64_t)a2, (uint64_t)v4, (uint64_t)v6);
}

uint64_t AGCLLVMAirTrigIdentities::buildCosArctan(AGCLLVMAirTrigIdentities *this, llvm::Value *a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  __int16 v11 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v10);
  v9[16] = 257;
  Fuint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, v4, FMul, (uint64_t)v9);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, FAdd);
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v4, (uint64_t)Sqrt, (uint64_t)v10);
}

uint64_t AGCLLVMAirTrigIdentities::buildSinArctan(AGCLLVMAirTrigIdentities *this, llvm::Value *a2)
{
  uint64_t v4 = llvm::ConstantFP::get();
  __int16 v11 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v10);
  v9[16] = 257;
  Fuint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, v4, FMul, (uint64_t)v9);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, FAdd);
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, (uint64_t)a2, (uint64_t)Sqrt, (uint64_t)v10);
}

uint64_t AGCLLVMAirTrigIdentities::buildNopIdentity(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        uint64_t v4 = *(uint64_t **)(*(void *)a1 + 8 * i);
        if (v4 != (uint64_t *)-8 && v4 != 0)
        {
          uint64_t v6 = *v4;
          if (*((_DWORD *)v4 + 5))
          {
            uint64_t v7 = *((unsigned int *)v4 + 4);
            if (v7)
            {
              uint64_t v8 = 0;
              uint64_t v9 = 8 * v7;
              do
              {
                __int16 v10 = *(llvm **)(v4[1] + v8);
                if (v10 != (llvm *)-8 && v10 != 0) {
                  llvm::deallocate_buffer(v10, (void *)(*(void *)v10 + 25));
                }
                v8 += 8;
              }
              while (v9 != v8);
            }
          }
          free((void *)v4[1]);
          llvm::deallocate_buffer((llvm *)v4, (void *)(v6 + 41));
        }
      }
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t virtual thunk to'AGCLLVMUserComputeKernelBase::enableImgWBlkPBECmp(AGCLLVMUserComputeKernelBase *this)
{
  return (*(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 232) + 4320) + 17) >> 1) & 1;
}

uint64_t virtual thunk to'AGCLLVMUserComputeKernelBase::getTextureWriteFPRoundingMode(AGCLLVMUserComputeKernelBase *this)
{
  return (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 224) + 4320) + 16) >> 3) & 3;
}

uint64_t virtual thunk to'AGCLLVMUserComputeKernelBase::needsThreadgroupMemoryOOBChecks(AGCLLVMUserComputeKernelBase *this)
{
  char v1 = (AGCLLVMUserComputeKernelBase *)((char *)this + *(void *)(*(void *)this - 216));
  if (*(unsigned char *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 1766)) {
    return AGCLLVMUserObject::isThreadgroupMemoryUsed(v1);
  }
  else {
    return 0;
  }
}

uint64_t virtual thunk to'AGCLLVMUserComputeKernelBase::isDMAPromotionDisabled(AGCLLVMUserComputeKernelBase *this)
{
  return *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 208) + 4320) + 12) >> 7;
}

BOOL virtual thunk to'AGCLLVMUserComputeKernelBase::enableSoftFaultOptimization(AGCLLVMUserComputeKernelBase *this)
{
  return (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 200) + 4320) + 15) & 0x40) == 0;
}

uint64_t virtual thunk to'AGCLLVMUserComputeKernelBase::getBufferBoundsCheckMode(AGCLLVMUserComputeKernelBase *this)
{
  return (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 192) + 4320) + 12) >> 4) & 7;
}

uint64_t virtual thunk to'AGCLLVMUserComputeKernelBase::getTempRegistersLimit(AGCLLVMUserComputeKernelBase *this, unsigned int *a2)
{
  return AGCLLVMUserComputeKernelBase::getTempRegistersLimit((AGCLLVMUserComputeKernelBase *)((char *)this + *(void *)(*(void *)this - 176)), a2);
}

uint64_t AGCLLVMUserComputeKernelBase::getTempRegistersLimit(AGCLLVMUserComputeKernelBase *this, unsigned int *a2)
{
  uint64_t v4 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *a2 = *(_DWORD *)(v4[50] + 884);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 96))(v4);
  if (result)
  {
    *a2 = result;
    uint64_t result = result != *(_DWORD *)(v4[50] + 884);
  }
  unsigned int v6 = *((_DWORD *)this + 1083);
  if (v6)
  {
    unsigned int v7 = 0;
    uint64_t v8 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v9 = *((void *)v8 + 58);
    unsigned int v10 = *(_DWORD *)(*((void *)v8 + 50) + 884);
    unsigned int v11 = *(_DWORD *)(v9 + 440);
    unsigned int v12 = v11 - 1;
    uint64_t v13 = *(void *)(v9 + 432);
    do
    {
      unsigned int v14 = (v12 + v7) >> 1;
      if (*(_DWORD *)(v13 + 4 * v14) < v6) {
        unsigned int v12 = v14 - 1;
      }
      else {
        unsigned int v7 = v14 + 1;
      }
    }
    while (v7 <= v12);
    unsigned int v15 = v10 / v11 * v12;
    if (v15 >= *a2) {
      unsigned int v15 = *a2;
    }
    *a2 = v15;
    return 1;
  }
  return result;
}

BOOL virtual thunk to'AGCLLVMUserComputeKernelLegacy::constructReply(AGCLLVMUserComputeKernelLegacy *this)
{
  return AGCLLVMUserComputeKernelLegacy::constructReply((AGCLLVMUserComputeKernelLegacy *)((char *)this
                                                                                         + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMUserComputeKernelLegacy::constructReply(AGCLLVMUserComputeKernelLegacy *this)
{
  if (!AGCDeserializedReply::deserialize((AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160)))return 0; {
  AGCLLVMObject::validateBackendReply((AGCLLVMUserComputeKernelLegacy *)((char *)this
  }
                                                                       + *(void *)(*(void *)this - 24)));
  int v31 = AGCLLVMUserObject::constructFlatReply(this);
  if (*((_DWORD *)this + 1086))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      unsigned int v6 = (char *)this + *(void *)(*(void *)this - 24);
      unsigned int v7 = (flatbuffers::FlatBufferBuilder *)(v6 + 2472);
      v6[2542] = 1;
      int v8 = *((_DWORD *)v6 + 626) - *((_DWORD *)v6 + 630) + *((_DWORD *)v6 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v6 + 309, 4, v2);
      flatbuffers::FlatBufferBuilder::AddElement<signed char>(v7, 6, *(char *)(*((void *)this + 542) + 4 * v2));
      int v9 = flatbuffers::FlatBufferBuilder::EndTable(v7, v8);
      int v10 = v9;
      if ((unint64_t)v4 >= v5)
      {
        uint64_t v12 = (v4 - v3) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          abort();
        }
        if ((uint64_t)(v5 - (void)v3) >> 1 > v13) {
          unint64_t v13 = (uint64_t)(v5 - (void)v3) >> 1;
        }
        if (v5 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = (char *)(v14 + 4 * v12);
        *(_DWORD *)uint64_t v16 = v10;
        unsigned int v11 = v16 + 4;
        while (v4 != v3)
        {
          int v17 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        unint64_t v5 = v14 + 4 * v15;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = v16;
      }
      else
      {
        *(_DWORD *)uint64_t v4 = v9;
        unsigned int v11 = v4 + 4;
      }
      ++v2;
      uint64_t v4 = v11;
    }
    while (v2 < *((unsigned int *)this + 1086));
  }
  else
  {
    uint64_t v3 = 0;
    unsigned int v11 = 0;
  }
  if (v11 == v3) {
    uint64_t v19 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>> const&)::t;
  }
  else {
    uint64_t v19 = v3;
  }
  int v20 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v19, (v11 - v3) >> 2);
  __int16 v21 = (char *)this + *(void *)(*(void *)this - 24);
  char v22 = (flatbuffers::FlatBufferBuilder *)(v21 + 2472);
  v21[2542] = 1;
  int v23 = *((_DWORD *)v21 + 626) - *((_DWORD *)v21 + 630) + *((_DWORD *)v21 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v21 + 2472), v20);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v22, 6, *((unsigned __int8 *)this + 8), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v22, 8, *((unsigned __int8 *)this + 9), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v22, 10, *((unsigned __int8 *)this + 4328), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v22, 12, *((_DWORD *)this + 1083));
  LODWORD(v22) = flatbuffers::FlatBufferBuilder::EndTable(v22, v23);
  long long v24 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v25 = (flatbuffers::FlatBufferBuilder *)(v24 + 2472);
  v24[2542] = 1;
  int v26 = *((_DWORD *)v24 + 626) - *((_DWORD *)v24 + 630) + *((_DWORD *)v24 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v24 + 2472), v31);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v25, (int)v22);
  uint64_t v27 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
  int v28 = flatbuffers::FlatBufferBuilder::EndTable(v25, v26);
  flatbuffers::FlatBufferBuilder::Finish(v27, v28, v29);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  BOOL v18 = AGCLLVMUserComputeKernelBase::validateReply(this);
  if (v3) {
    operator delete(v3);
  }
  return v18;
}

BOOL AGCLLVMUserComputeKernelBase::validateReply(AGCLLVMUserComputeKernelBase *this)
{
  unint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v3 = v2 + 696;
  uint64_t v4 = *((void *)v2 + 87);
  if (v4)
  {
    if (*((void *)v2 + 88)) {
      unint64_t v5 = v2 + 696;
    }
    else {
      unint64_t v5 = v2 + 1256;
    }
  }
  else
  {
    unint64_t v5 = v2 + 1256;
  }
  unsigned int v6 = (int *)(*v5 + *(unsigned int *)*v5);
  unsigned int v7 = (unsigned int *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 4));
  int v8 = (unsigned int *)((char *)v7
                      + *v7
                      + *(unsigned __int16 *)((char *)v7 + *v7 - *(unsigned int *)((char *)v7 + *v7) + 8));
  if (*(unsigned int *)((char *)v8 + *v8) > 0x20) {
    return 0;
  }
  if (v4)
  {
    uint64_t v9 = *((void *)v2 + 88);
    int v10 = v2 + 1256;
    if (v9) {
      int v10 = v3;
    }
  }
  else
  {
    int v10 = v2 + 1256;
  }
  unint64_t v13 = *(unsigned int **)v10;
  uint64_t v12 = *((void *)v10 + 1);
  if (v13) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = (int *)((char *)v13 + *v13);
  }
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    BOOL v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    BOOL v18 = 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 0x3Du && (uint64_t v20 = v19[30]) != 0) {
    unsigned int v21 = *(int *)((char *)v18 + v20);
  }
  else {
    unsigned int v21 = 0;
  }
  int v22 = (*(uint64_t (**)(AGCLLVMUserComputeKernelBase *))(*(void *)this + 568))(this);
  unsigned int v23 = v22 - (*(uint64_t (**)(AGCLLVMUserComputeKernelBase *))(*(void *)this + 576))(this);
  long long v24 = (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8);
  return validateUserLocalMemoryUsage(v21, v23, v24);
}

void virtual thunk to'AGCLLVMUserComputeKernelBase::getCompilationKeyDescription(AGCLLVMUserComputeKernelBase *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMUserComputeKernelBase::getCompilationKeyDescription(AGCLLVMUserComputeKernelBase *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unsigned int *)*((void *)this + 540);
  std::string::basic_string[abi:nn180100]<0>(&v48, "AGCComputeStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v46, "mutableBuffers");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v49);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v49.__r_.__value_.__r.__words[2], (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v49.__r_.__value_.__r + *(void *)(v49.__r_.__value_.__r.__words[2] - 24) + 24) = *(_DWORD *)((char *)&v49.__r_.__value_.__r + *(void *)(v49.__r_.__value_.__r.__words[2] - 24) + 24) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v62, (const void **)v46, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v49.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + *(void *)(v49.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v49.__r_.__value_.__r.__words[2] = v4;
  uint64_t v50 = MEMORY[0x1E4FBA470] + 16;
  if (v52 < 0) {
    operator delete(v51);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB7A0710](&v53);
  std::string::basic_string[abi:nn180100]<0>(v44, "maxTotalThreadsPerThreadgroup");
  _agcFieldString<unsigned int>(&v63, (const void **)v44, v3[2]);
  std::string::basic_string[abi:nn180100]<0>(v42, "wgSizeMultipleOfSIMDWidth");
  _agcFieldString<unsigned int>(&v64, (const void **)v42, v3[4] & 1);
  std::string::basic_string[abi:nn180100]<0>(v40, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v65, (const void **)v40, v3[3] & 1);
  std::string::basic_string[abi:nn180100]<0>(v38, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v66, (const void **)v38, (v3[3] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v36, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v67, (const void **)v36, (v3[3] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v34, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v68, (const void **)v34, (v3[3] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v32, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v69, (const void **)v32, (v3[3] >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(v30, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v70, (const void **)v30, (v3[3] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v28, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v71, (const void **)v28, (v3[3] >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v26, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v72, (const void **)&v26, (unsigned __int16)(v3[3] >> 10));
  std::string::basic_string[abi:nn180100]<0>(v24, "enableStackShadow");
  _agcFieldString<unsigned int>(&v73, (const void **)v24, (v3[3] >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v22, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v74, (const void **)v22, v3[3] >> 31);
  std::string::basic_string[abi:nn180100]<0>(v20, "textureWriteFPRoundingMode");
  _agcFieldString<unsigned int>(&v75, (const void **)v20, (v3[4] >> 3) & 3);
  std::string::basic_string[abi:nn180100]<0>(v18, "unused");
  _agcFieldString<unsigned int>(&v76, (const void **)v18, v3[4] >> 12);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v60, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  }
  else {
    std::string v60 = v48;
  }
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v60, 0);
  std::string::basic_string[abi:nn180100]<0>(v55, "{");
  _agcIndentedLine(&v57, (std::string::value_type *)v55, 0);
  if ((v59 & 0x80u) == 0) {
    unint64_t v5 = (const std::string::value_type *)&v57;
  }
  else {
    unint64_t v5 = (const std::string::value_type *)v57;
  }
  if ((v59 & 0x80u) == 0) {
    std::string::size_type v6 = v59;
  }
  else {
    std::string::size_type v6 = v58;
  }
  unsigned int v7 = std::string::append(&__p, v5, v6);
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((char)v59 < 0) {
    operator delete(v57);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = 0; i != 45; i += 3)
  {
    int v10 = (char *)&v62 + i * 8;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[i + 2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else {
      std::string __p = *(std::string *)v10;
    }
    int v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v54, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v54 = __p;
    }
    _agcIndentedLine(&v57, (std::string::value_type *)&v54, 1);
    if ((v59 & 0x80u) == 0) {
      uint64_t v12 = (const std::string::value_type *)&v57;
    }
    else {
      uint64_t v12 = (const std::string::value_type *)v57;
    }
    if ((v59 & 0x80u) == 0) {
      std::string::size_type v13 = v59;
    }
    else {
      std::string::size_type v13 = v58;
    }
    std::string::append(&v49, v12, v13);
    if ((char)v59 < 0) {
      operator delete(v57);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v54.__r_.__value_.__l.__data_);
      if ((v11 & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v57, "}");
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v57, 0);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v14 = &v49;
  }
  else {
    BOOL v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v49.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = std::string::insert(&__p, 0, (const std::string::value_type *)v14, size);
  *a2 = *v16;
  v16->__r_.__value_.__r.__words[0] = 0;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v59 < 0) {
    operator delete(v57);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = 45;
  do
  {
    if (v62.__r_.__value_.__s.__data_[v17 * 8 - 1] < 0) {
      operator delete((void *)__p.__r_.__value_.__r.__words[v17 + 1]);
    }
    v17 -= 3;
  }
  while (v17 * 8);
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v27 < 0) {
    operator delete(v26);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
}

uint64_t virtual thunk to'AGCLLVMUserComputeKernelBase::getForwardProgressMode(AGCLLVMUserComputeKernelBase *this)
{
  return *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 128) + 4320) + 12) >> 31;
}

uint64_t virtual thunk to'AGCLLVMUserComputeKernelBase::getSupportExternalVisibleFunctions(AGCLLVMUserComputeKernelBase *this)
{
  return (*(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 120) + 4320) + 16) >> 5) & 1;
}

const char *virtual thunk to'AGCLLVMUserComputeKernelBase::getMaxTempRegistersOverride(AGCLLVMUserComputeKernelBase *this)
{
  uint64_t v2 = *(void *)(*(void *)this - 112);
  uint64_t result = AGCLLVMObject::getMaxTempRegistersOverride(this);
  if (!result) {
    return (const char *)(unsigned __int16)(*(_DWORD *)(*(void *)((char *)this + v2 + 4320) + 12) >> 10);
  }
  return result;
}

const char *AGCLLVMUserComputeKernelBase::getMaxTempRegistersOverride(AGCLLVMUserComputeKernelBase *this)
{
  uint64_t result = AGCLLVMObject::getMaxTempRegistersOverride(this);
  if (!result) {
    return (const char *)(unsigned __int16)(*(_DWORD *)(*((void *)this + 540) + 12) >> 10);
  }
  return result;
}

uint64_t virtual thunk to'AGCLLVMUserComputeKernelBase::getShaderType(AGCLLVMUserComputeKernelBase *this)
{
  return 7;
}

const char *virtual thunk to'AGCLLVMUserComputeKernelBase::dumpType(AGCLLVMUserComputeKernelBase *this)
{
  return "compute";
}

void virtual thunk to'AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(AGCLLVMUserComputeKernelLegacy *this)
{
  char v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  uint64_t v2 = (AGCLLVMObject *)(v1 + 4792);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

void AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(AGCLLVMUserComputeKernelLegacy *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[10];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[11];
  uint64_t v5 = *((void *)this + 597);
  if (v5 != -8192 && v5 != -4096 && v5 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4760));
  }
  uint64_t v7 = *((void *)this + 594);
  if (v7 != -8192 && v7 != -4096 && v7) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4736));
  }
  uint64_t v8 = *((void *)this + 591);
  if (v8 != -8192 && v8 != -4096 && v8) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4712));
  }
  for (uint64_t i = 0; i != -72; i -= 24)
  {
    uint64_t v10 = *(void *)((char *)this + i + 4704);
    if (v10 != -8192 && v10 != -4096 && v10 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + i + 4688));
    }
  }
  uint64_t v12 = *((void *)this + 579);
  if (v12 != -8192 && v12 != -4096 && v12 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4616));
  }
  uint64_t v14 = *((void *)this + 576);
  if (v14 != -8192 && v14 != -4096 && v14) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4592));
  }
  uint64_t v15 = *((void *)this + 573);
  if (v15 != -8192 && v15 != -4096 && v15) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4568));
  }
  uint64_t v16 = *((void *)this + 570);
  if (v16 != -8192 && v16 != -4096 && v16) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4544));
  }
  for (uint64_t j = 0; j != -72; j -= 24)
  {
    uint64_t v18 = *(void *)((char *)this + j + 4536);
    if (v18 != -8192 && v18 != -4096 && v18 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + j + 4520));
    }
  }
  uint64_t v20 = *((void *)this + 558);
  if (v20 != -8192 && v20 != -4096 && v20 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4448));
  }
  for (uint64_t k = 0; k != -72; k -= 24)
  {
    uint64_t v23 = *(void *)((char *)this + k + 4440);
    if (v23 != -8192 && v23 != -4096 && v23 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + k + 4424));
    }
  }
  char v25 = (char *)*((void *)this + 542);
  if (v25 != (char *)this + 4352) {
    free(v25);
  }
  AGCLLVMUserShader::~AGCLLVMUserShader(this, a2 + 2);
}

uint64_t AGCLLVMUserComputeKernelBase::enableImgWBlkPBECmp(AGCLLVMUserComputeKernelBase *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 540) + 17) >> 1) & 1;
}

uint64_t AGCLLVMUserComputeKernelBase::getTextureWriteFPRoundingMode(AGCLLVMUserComputeKernelBase *this)
{
  return (*(_DWORD *)(*((void *)this + 540) + 16) >> 3) & 3;
}

uint64_t AGCLLVMUserComputeKernelBase::buildStageInSize(llvm::Type ***this, llvm::Type *a2, llvm::Type *a3, llvm::Value *a4)
{
  return AGCLLVMUserShader::buildStageInSizeCommon(this, a3, 0, a4);
}

uint64_t AGCLLVMUserComputeKernelBase::buildStageInOrigin(llvm::Type ***this, llvm::Type *a2, llvm::Type *a3, llvm::Value *a4)
{
  return AGCLLVMUserShader::buildStageInOriginCommon(this, a3, 0, a4);
}

uint64_t AGCLLVMUserComputeKernelBase::getReservedLocalMemorySize(AGCLLVMUserComputeKernelBase *this)
{
  return *(unsigned int *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 880);
}

uint64_t AGCLLVMUserComputeKernelBase::getMaxLocalMemorySize(AGCLLVMUserComputeKernelBase *this)
{
  return *(unsigned int *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 856);
}

uint64_t AGCLLVMUserComputeKernelBase::getSupportExternalVisibleFunctions(AGCLLVMUserComputeKernelBase *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 540) + 16) >> 5) & 1;
}

llvm::Value *AGCLLVMUserComputeKernelBase::constructStageInGridConstant(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (!a1[532])
  {
    uint64_t v8 = (llvm::Type *)llvm::PointerType::get();
    unsigned int v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 824) + 400))();
    v61[0] = "agc.stagein_buffer_pointer.";
    v61[2] = v9;
    __int16 v62 = 2051;
    unsigned int v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 824) + 400))();
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v8, (const llvm::Twine *)v61, v10, 24, 5, 0);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 530), (uint64_t)GlobalBufferBinding);
  }
  llvm::FixedVectorType::get();
  uint64_t v12 = (llvm::Value *)llvm::UndefValue::get();
  std::string::size_type v13 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  uint64_t v14 = (llvm::Type **)a1[532];
  __int16 v62 = 257;
  uint64_t v16 = AGCLLVMBuilder::tryDeducePointeeType(v14, v15);
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v16, (uint64_t)v14, 0, (uint64_t)v61);
  if (a3 == 22)
  {
    if (*a2 != 0x676174732E726961
      || a2[1] != 0x6972675F6E695F65
      || *(void *)((char *)a2 + 14) != 0x657A69735F646972)
    {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (a3 != 24) {
      return result;
    }
    if (*a2 != 0x676174732E726961 || a2[1] != 0x6972675F6E695F65 || a2[2] != 0x6E696769726F5F64) {
      return 0;
    }
  }
  uint64_t v23 = (char *)a1 + *(void *)(*a1 - 24);
  long long v24 = (llvm::Type *)*((void *)v23 + 29);
  char v25 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v62 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v23 + 40), v24, AlignedLoad, v25, (const llvm::Twine *)v61);
  char v27 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v62 = 257;
  char v29 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v28);
  uint64_t v30 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v27 + 5, v29, (uint64_t)GEP, 0, (uint64_t)v61);
  char v31 = (char *)a1 + *(void *)(*a1 - 24);
  __int16 v62 = 257;
  uint64_t v32 = (llvm::IRBuilderBase *)(v31 + 40);
  char v33 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v32, v12, v30, v33, (const llvm::Twine *)v61);
  char v35 = (char *)a1 + *(void *)(*a1 - 24);
  __int16 v36 = (llvm::Type *)*((void *)v35 + 29);
  char v37 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v62 = 257;
  __int16 v38 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v35 + 40), v36, AlignedLoad, v37, (const llvm::Twine *)v61);
  char v39 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v62 = 257;
  char v41 = AGCLLVMBuilder::tryDeducePointeeType(v38, v40);
  uint64_t v42 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v39 + 5, v41, (uint64_t)v38, 0, (uint64_t)v61);
  char v43 = (char *)a1 + *(void *)(*a1 - 24);
  __int16 v62 = 257;
  uint64_t v44 = (llvm::IRBuilderBase *)(v43 + 40);
  char v45 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v46 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v44, InsertElement, v42, v45, (const llvm::Twine *)v61);
  char v47 = (char *)a1 + *(void *)(*a1 - 24);
  std::string v48 = (llvm::Type *)*((void *)v47 + 29);
  std::string v49 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v62 = 257;
  uint64_t v50 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v47 + 40), v48, AlignedLoad, v49, (const llvm::Twine *)v61);
  uint64_t v51 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  __int16 v62 = 257;
  uint64_t v53 = AGCLLVMBuilder::tryDeducePointeeType(v50, v52);
  std::string v54 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v51 + 5, v53, (uint64_t)v50, 0, (uint64_t)v61);
  uint64_t v55 = (char *)a1 + *(void *)(*a1 - 24);
  __int16 v62 = 257;
  char v56 = (llvm::IRBuilderBase *)(v55 + 40);
  uint64_t v57 = (llvm::Value *)llvm::ConstantInt::get();
  std::string::size_type v58 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v56, v46, v54, v57, (const llvm::Twine *)v61);
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
    int v59 = *(_DWORD *)(a4 + 32);
  }
  else {
    int v59 = 1;
  }
  std::string v60 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), v58, 0, v59, 1);
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
    a4 = **(void **)(a4 + 16);
  }
  return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)a1 + *(void *)(*a1 - 24) + 32), v60, (llvm::Type *)a4);
}

uint64_t AGCLLVMUserComputeKernelBase::isDMAPromotionDisabled(AGCLLVMUserComputeKernelBase *this)
{
  return *(unsigned __int8 *)(*((void *)this + 540) + 12) >> 7;
}

BOOL AGCLLVMUserComputeKernelBase::enableSoftFaultOptimization(AGCLLVMUserComputeKernelBase *this)
{
  return (*(unsigned char *)(*((void *)this + 540) + 15) & 0x40) == 0;
}

uint64_t AGCLLVMUserComputeKernelBase::getForwardProgressMode(AGCLLVMUserComputeKernelBase *this)
{
  return *(_DWORD *)(*((void *)this + 540) + 12) >> 31;
}

uint64_t AGCLLVMUserComputeKernelBase::getBufferBoundsCheckMode(AGCLLVMUserComputeKernelBase *this)
{
  return (*(_DWORD *)(*((void *)this + 540) + 12) >> 4) & 7;
}

uint64_t AGCLLVMUserComputeKernelBase::needsThreadgroupMemoryOOBChecks(AGCLLVMUserComputeKernelBase *this)
{
  if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1766)) {
    return AGCLLVMUserObject::isThreadgroupMemoryUsed(this);
  }
  else {
    return 0;
  }
}

uint64_t AGCLLVMUserComputeKernelBase::getShaderType(AGCLLVMUserComputeKernelBase *this)
{
  return 7;
}

const char *AGCLLVMUserComputeKernelBase::dumpType(AGCLLVMUserComputeKernelBase *this)
{
  return "compute";
}

uint64_t AGCLLVMUserComputeKernelBase::debugTraceBufferEnabled(AGCLLVMUserComputeKernelBase *this)
{
  return *(unsigned char *)(*((void *)this + 540) + 17) & 1;
}

uint64_t AGCLLVMUserComputeKernelBase::usesCustomBorderColor(AGCLLVMUserComputeKernelBase *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 540) + 16) >> 1) & 1;
}

uint64_t AGCLLVMUserComputeKernelBase::needsPCFClamp(AGCLLVMUserComputeKernelBase *this)
{
  return 0;
}

uint64_t AGCLLVMUserComputeKernelBase::getPCFStateForUnit(AGCLLVMUserComputeKernelBase *this)
{
  return 0;
}

uint64_t AGCLLVMUserComputeKernelBase::supportsConstantSamplers(AGCLLVMUserComputeKernelBase *this)
{
  return 1;
}

uint64_t AGCLLVMUserComputeKernelBase::getMaxSharedRegisters(AGCLLVMUserComputeKernelBase *this)
{
  return *(unsigned int *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 852);
}

uint64_t AGCLLVMUserComputeKernelBase::improveDMAPromotionOpportunity(AGCLLVMUserComputeKernelBase *this)
{
  return 1;
}

uint64_t AGCLLVMUserComputeKernelBase::optimizeThreadgroupBarriers(uint64_t this)
{
  if ((*(_DWORD *)(this + 4332) - 33) >= 0xFFFFFFE0)
  {
    if (*(unsigned char *)(this + *(void *)(*(void *)this - 24) + 456))
    {
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      return llvm::Value::replaceAllUsesWith();
    }
  }
  return this;
}

uint64_t AGCLLVMUserComputeKernelBase::setupShaderOutputs(AGCLLVMUserComputeKernelBase *this)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  uint64_t Function = (llvm::Function *)llvm::Module::getFunction();
  llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(*((void *)Function + 1) + 24));
  llvm::Function::eraseFromParent(Function);
  if ((*(unsigned char *)(*((void *)this + 540) + 16) & 0x40) != 0)
  {
    uint64_t v3 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
    uint64_t v4 = v3 + 24;
    uint64_t v5 = *(void *)(v3 + 32);
    if (v5 != v3 + 24)
    {
      do
      {
        if (v5) {
          uint64_t v6 = v5 - 56;
        }
        else {
          uint64_t v6 = 0;
        }
        v9[0] = *(void *)(v6 + 112);
        llvm::AttributeList::getFnAttrs((llvm::AttributeList *)v9);
        uint64_t v8 = llvm::AttributeSet::addAttribute();
        LODWORD(v9[0]) = -1;
        v9[1] = v8;
        *(void *)(v6 + 112) = llvm::AttributeList::get();
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5 != v4);
    }
  }
  return 1;
}

uint64_t AGCLLVMUserComputeKernelBase::setupShaderInputs(AGCLLVMUserComputeKernelBase *this)
{
  uint64_t v2 = *((void *)this + 22);
  uint64_t v3 = *(void *)(v2 + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    uint64_t v6 = *((void *)this + 22);
    uint64_t v5 = *(void *)(v2 + 88);
    if (*(_WORD *)(v6 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    }
    uint64_t v2 = v6;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 88);
  }
  uint64_t v7 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
  while (v5 != v7)
  {
    if (*(void *)(v5 + 8))
    {
      uint64_t v8 = *(void *)(v4 + 40);
      unsigned int v9 = v8 ? (llvm::Instruction *)(v8 - 24) : 0;
      AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v9, *((void *)this + 6));
      uint64_t v10 = *(unsigned int *)(v5 + 32);
      uint64_t v11 = *(void *)(*((void *)this + 11) + 8 * v10);
      if ((AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v5, v10, v11) & 1) == 0)
      {
        uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8));
        uint64_t result = (*(uint64_t (**)(AGCLLVMUserComputeKernelBase *, uint64_t, uint64_t, void))(*(void *)this + 552))(this, String, v13, *(void *)v5);
        if (!result) {
          return result;
        }
        llvm::Value::replaceAllUsesWith();
      }
    }
    v5 += 40;
  }
  return 1;
}

uint64_t AGCLLVMUserComputeKernelBase::wrapperPrefixData(AGCLLVMUserComputeKernelBase *this)
{
  if (!*(_DWORD *)(*(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 816) + 52)) {
    return 0;
  }
  llvm::ConstantInt::get();
  return llvm::ConstantDataVector::getSplat();
}

uint64_t AGCLLVMUserComputeKernelBase::wrapperCallingConvention(AGCLLVMUserComputeKernelBase *this)
{
  return 106;
}

uint64_t AGCLLVMUserComputeKernelBase::initCompile(AGCLLVMUserComputeKernelBase *this)
{
  uint64_t v2 = validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1083), *(_DWORD *)(*((void *)this + 540) + 8), *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 864), (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (unsigned int *)this + 1083);
  if (v2)
  {
    AGCLLVMUserObject::initCompile(this);
    llvm::Module::getOrInsertNamedMetadata();
    llvm::MDString::get();
    (*(void (**)(AGCLLVMUserComputeKernelBase *))(*(void *)this + 568))(this);
    llvm::ConstantInt::get();
    llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    unsigned int v4 = 0;
    if (MGGetBoolAnswer())
    {
      uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_LM_SPILL_ID_MIN", v3);
      if (Value && *Value != 48) {
        unsigned int v4 = atoi(Value);
      }
      else {
        unsigned int v4 = 0;
      }
    }
    if (MGGetBoolAnswer()
      && (uint64_t v7 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_LM_SPILL_ID_MAX", v6)) != 0
      && *v7 != 48)
    {
      unsigned int v8 = atoi(v7);
    }
    else
    {
      unsigned int v8 = 0;
    }
    if (MGGetBoolAnswer()
      && (uint64_t v10 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_LM_SPILL_SIZE", v9)) != 0
      && *v10 != 48)
    {
      int v11 = atoi(v10);
    }
    else
    {
      int v11 = 0;
    }
    BOOL v14 = MGGetBoolAnswer()
       && (uint64_t v13 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_LM_SPILL_SGPR", v12)) != 0
       && *v13 != 48
       && atoi(v13) != 0;
    uint64_t v15 = *(void *)this;
    unsigned int v16 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 3272);
    if (v11) {
      int v17 = 1;
    }
    else {
      int v17 = v14;
    }
    if (v4 <= v16 && v16 <= v8 && v17)
    {
      llvm::Module::getOrInsertNamedMetadata();
      llvm::MDString::get();
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      if (v14) {
        llvm::Module::getOrInsertNamedMetadata();
      }
      uint64_t v15 = *(void *)this;
    }
    if (*((_DWORD *)this + 10) >= 2u)
    {
      llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(void *)((char *)this + *(void *)(v15 - 24) + 464) + 336), *(llvm::Module **)((char *)this + *(void *)(v15 - 24) + 368));
      uint64_t v15 = *(void *)this;
    }
    uint64_t v18 = *(void *)((char *)this + *(void *)(v15 - 24) + 368);
    uint64_t v19 = v18 + 8;
    uint64_t v20 = *(void *)(v18 + 16);
    if (v20 != v18 + 8)
    {
      do
      {
        if (v20) {
          char v21 = (uint64_t *)(v20 - 56);
        }
        else {
          char v21 = 0;
        }
        uint64_t v22 = *v21;
        if (*v21)
        {
          int v23 = *(_DWORD *)(v22 + 8);
          if ((v23 & 0xFE) == 0x12) {
            int v23 = *(_DWORD *)(**(void **)(v22 + 16) + 8);
          }
          if ((v23 & 0xFFFFFF00) == 0x300) {
            llvm::GlobalObject::setSection();
          }
        }
        uint64_t v20 = *(void *)(v20 + 8);
      }
      while (v20 != v19);
    }
  }
  return v2;
}

uint64_t AGCLLVMUserComputeKernelBase::getMaxTotalThreadsPerThreadgroup(AGCLLVMUserComputeKernelBase *this)
{
  return *((unsigned int *)this + 1083);
}

uint64_t AGCLLVMUserComputeKernelLegacy::replaceBuiltins(AGCLLVMUserComputeKernelLegacy *this)
{
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  unsigned int v125 = AGCLLVMUserObject::replaceBuiltins(this);
  if (!v125) {
    return v125;
  }
  char v1 = this;
  uint64_t v2 = *(void *)(*((void *)this + 21) + 80);
  if (v2) {
    uint64_t v3 = (llvm::BasicBlock *)(v2 - 24);
  }
  else {
    uint64_t v3 = 0;
  }
  if (*((unsigned char *)this + 4328))
  {
    *(void *)&long long v143 = llvm::BasicBlock::getFirstInsertionPt(v3);
    AGCLLVMUserObject::hoistAllocas((uint64_t)this, (uint64_t)v3, (uint64_t *)&v143);
    uint64_t v148 = "kernel_entry";
    __int16 v152 = 259;
    llvm::BasicBlock::splitBasicBlock();
    uint64_t v148 = "early_out_block";
    __int16 v152 = 259;
    operator new();
  }
  unsigned int v4 = (char **)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v3);
  llvm::IRBuilderBase::SetInsertPoint(v4, (char *)v3, FirstInsertionPt);
  uint64_t v6 = 0;
  uint64_t v7 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + 4376);
  char v8 = 1;
  do
  {
    uint64_t v9 = AGCLLVMUserComputeKernelLegacy::buildLocalIDInternal(this, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232), v6);
    llvm::ValueHandleBase::operator=(v7, v9);
    v8 &= *((void *)v7 + 2) != 0;
    ++v6;
    uint64_t v7 = (llvm::ValueHandleBase *)((char *)v7 + 24);
  }
  while (v6 != 3);
  if (v8)
  {
    uint64_t v10 = (llvm::Type **)((char *)this + *(void *)(*(void *)this - 24));
    int v11 = (llvm::IRBuilderBase *)(v10 + 5);
    uint64_t v12 = (llvm::Value *)*((void *)this + 555);
    uint64_t v13 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildLocalSize(this, v10[29], 1u);
    __int16 v152 = 257;
    uint64_t Mul = llvm::IRBuilderBase::CreateMul(v11, v12, v13, (const llvm::Twine *)&v148);
    llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4448), Mul);
    uint64_t v15 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    unsigned int v16 = (llvm::Value *)*((void *)this + 558);
    int v17 = (llvm::Value *)*((void *)this + 552);
    __int16 v152 = 257;
    uint64_t Add = llvm::IRBuilderBase::CreateAdd(v15, v16, v17, (const llvm::Twine *)&v148);
    llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4448), Add);
    uint64_t v19 = (llvm::Type **)((char *)this + *(void *)(*(void *)this - 24));
    uint64_t v20 = (llvm::IRBuilderBase *)(v19 + 5);
    char v21 = (llvm::Value *)*((void *)this + 558);
    uint64_t v22 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildLocalSize(this, v19[29], 0);
    __int16 v152 = 257;
    uint64_t v23 = llvm::IRBuilderBase::CreateMul(v20, v21, v22, (const llvm::Twine *)&v148);
    llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4448), v23);
    long long v24 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    char v25 = (llvm::Value *)*((void *)this + 558);
    int v26 = (llvm::Value *)*((void *)this + 549);
    __int16 v152 = 257;
    uint64_t v27 = llvm::IRBuilderBase::CreateAdd(v24, v25, v26, (const llvm::Twine *)&v148);
    llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4448), v27);
  }
  int v28 = *(llvm::LLVMContext ***)((char *)this + *(void *)(*(void *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v148, *v28);
  std::string::size_type v157 = this;
  uint64_t v148 = &unk_1F25BE978;
  v156[25] = v28;
  {
    AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[0] = (uint64_t)"air.get_global_size.i32";
    dword_1EBD0DCE0 = 1;
    qword_1EBD0DCE8 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGlobalSize;
    unk_1EBD0DCF0 = 0;
    dword_1EBD0DCF8 = 4;
    word_1EBD0DCFC = 0;
    qword_1EBD0DD00 = (uint64_t)"air.get_global_size.i16";
    dword_1EBD0DD08 = 1;
    qword_1EBD0DD10 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGlobalSize;
    unk_1EBD0DD18 = 0;
    dword_1EBD0DD20 = 4;
    word_1EBD0DD24 = 0;
    qword_1EBD0DD28 = (uint64_t)"air.get_global_id.i32";
    dword_1EBD0DD30 = 1;
    qword_1EBD0DD38 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGlobalID;
    unk_1EBD0DD40 = 0;
    dword_1EBD0DD48 = 4;
    word_1EBD0DD4C = 0;
    qword_1EBD0DD50 = (uint64_t)"air.get_global_id.i16";
    dword_1EBD0DD58 = 1;
    qword_1EBD0DD60 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGlobalID;
    unk_1EBD0DD68 = 0;
    dword_1EBD0DD70 = 4;
    word_1EBD0DD74 = 0;
    qword_1EBD0DD78 = (uint64_t)"air.get_local_size.i32";
    dword_1EBD0DD80 = 1;
    qword_1EBD0DD88 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildLocalSize;
    unk_1EBD0DD90 = 0;
    dword_1EBD0DD98 = 4;
    word_1EBD0DD9C = 0;
    qword_1EBD0DDA0 = (uint64_t)"air.get_local_size.i16";
    dword_1EBD0DDA8 = 1;
    qword_1EBD0DDB0 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildLocalSize;
    unk_1EBD0DDB8 = 0;
    dword_1EBD0DDC0 = 4;
    word_1EBD0DDC4 = 0;
    qword_1EBD0DDC8 = (uint64_t)"air.get_local_id.i32";
    dword_1EBD0DDD0 = 1;
    qword_1EBD0DDD8 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildLocalID;
    unk_1EBD0DDE0 = 0;
    dword_1EBD0DDE8 = 4;
    word_1EBD0DDEC = 0;
    qword_1EBD0DDF0 = (uint64_t)"air.get_local_id.i16";
    dword_1EBD0DDF8 = 1;
    qword_1EBD0DE00 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildLocalID;
    unk_1EBD0DE08 = 0;
    dword_1EBD0DE10 = 4;
    word_1EBD0DE14 = 0;
    qword_1EBD0DE18 = (uint64_t)"air.get_local_linear_id.i32";
    dword_1EBD0DE20 = 1;
    qword_1EBD0DE28 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildLocalLinearId;
    unk_1EBD0DE30 = 0;
    dword_1EBD0DE38 = 2;
    word_1EBD0DE3C = 0;
    qword_1EBD0DE40 = (uint64_t)"air.get_local_linear_id.i16";
    dword_1EBD0DE48 = 1;
    qword_1EBD0DE50 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildLocalLinearId;
    unk_1EBD0DE58 = 0;
    dword_1EBD0DE60 = 2;
    word_1EBD0DE64 = 0;
    qword_1EBD0DE68 = (uint64_t)"air.get_global_linear_id.i32";
    dword_1EBD0DE70 = 1;
    qword_1EBD0DE78 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGlobalLinearId;
    unk_1EBD0DE80 = 0;
    dword_1EBD0DE88 = 2;
    word_1EBD0DE8C = 0;
    qword_1EBD0DE90 = (uint64_t)"air.get_global_linear_id.i16";
    dword_1EBD0DE98 = 1;
    qword_1EBD0DEA0 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGlobalLinearId;
    unk_1EBD0DEA8 = 0;
    dword_1EBD0DEB0 = 2;
    word_1EBD0DEB4 = 0;
    qword_1EBD0DEB8 = (uint64_t)"air.get_num_groups.i32";
    dword_1EBD0DEC0 = 1;
    qword_1EBD0DEC8 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildNumGroups;
    unk_1EBD0DED0 = 0;
    dword_1EBD0DED8 = 4;
    word_1EBD0DEDC = 0;
    qword_1EBD0DEE0 = (uint64_t)"air.get_num_groups.i16";
    dword_1EBD0DEE8 = 1;
    qword_1EBD0DEF0 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildNumGroups;
    qword_1EBD0DEF8 = 0;
    dword_1EBD0DF00 = 4;
    word_1EBD0DF04 = 0;
    qword_1EBD0DF08 = (uint64_t)"air.get_group_id.i32";
    dword_1EBD0DF10 = 1;
    qword_1EBD0DF18 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGroupID;
    qword_1EBD0DF20 = 0;
    dword_1EBD0DF28 = 4;
    word_1EBD0DF2C = 0;
    qword_1EBD0DF30 = (uint64_t)"air.get_group_id.i16";
    dword_1EBD0DF38 = 1;
    qword_1EBD0DF40 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGroupID;
    qword_1EBD0DF48 = 0;
    dword_1EBD0DF50 = 4;
    word_1EBD0DF54 = 0;
    qword_1EBD0DF58 = (uint64_t)"air.get_stage_in_grid_origin.i32";
    dword_1EBD0DF60 = 1;
    qword_1EBD0DF68 = (uint64_t)AGCLLVMUserComputeKernelBase::buildStageInOrigin;
    qword_1EBD0DF70 = 0;
    dword_1EBD0DF78 = 4;
    word_1EBD0DF7C = 0;
    qword_1EBD0DF80 = (uint64_t)"air.get_stage_in_grid_origin.i16";
    dword_1EBD0DF88 = 1;
    qword_1EBD0DF90 = (uint64_t)AGCLLVMUserComputeKernelBase::buildStageInOrigin;
    qword_1EBD0DF98 = 0;
    dword_1EBD0DFA0 = 4;
    word_1EBD0DFA4 = 0;
    qword_1EBD0DFA8 = (uint64_t)"air.get_stage_in_grid_size.i32";
    dword_1EBD0DFB0 = 1;
    qword_1EBD0DFB8 = (uint64_t)AGCLLVMUserComputeKernelBase::buildStageInSize;
    qword_1EBD0DFC0 = 0;
    dword_1EBD0DFC8 = 4;
    word_1EBD0DFCC = 0;
    qword_1EBD0DFD0 = (uint64_t)"air.get_stage_in_grid_size.i16";
    dword_1EBD0DFD8 = 1;
    qword_1EBD0DFE0 = (uint64_t)AGCLLVMUserComputeKernelBase::buildStageInSize;
    qword_1EBD0DFE8 = 0;
    dword_1EBD0DFF0 = 4;
    word_1EBD0DFF4 = 0;
  }
  uint64_t v29 = 0;
  uint64_t v30 = &v141;
  do
  {
    uint64_t v129 = v29;
    if (AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * v29]) {
      strlen((const char *)AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * v29]);
    }
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v32 = &AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * v129];
      uint64_t v135 = v32 + 4;
      uint64_t v128 = (llvm::Function *)Function;
      if (*((_DWORD *)v32 + 8) == 12)
      {
        uint64_t v36 = *(void *)(Function + 8);
        if (v36)
        {
          char v37 = &AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * v129];
          __int16 v38 = (void (**)(void *, uint64_t))(v37 + 2);
          char v39 = v37 + 3;
          do
          {
            uint64_t v40 = *(void *)(v36 + 24);
            uint64_t v36 = *(void *)(v36 + 8);
            char v41 = *v38;
            uint64_t v42 = (void *)((char *)v157 + (*v39 >> 1));
            if (*v39) {
              char v41 = *(void (**)(void *, uint64_t))(*v42 + v41);
            }
            v41(v42, v40);
          }
          while (v36);
        }
        goto LABEL_129;
      }
      if (*((_DWORD *)v32 + 8) == 11)
      {
        char v33 = &AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * v129];
        __int16 v34 = (unsigned char *)v33[2];
        if (v34)
        {
          size_t v35 = strlen((const char *)v33[2]);
          *(void *)&v158[0] = (char *)&v158[1] + 8;
          *(_OWORD *)((char *)v158 + 8) = xmmword_1CADD6290;
          llvm::SmallVectorImpl<char>::append<char const*,void>(v158, v34, &v34[v35]);
        }
        else
        {
          *(void *)&v158[1] = 64;
          v158[0] = (unint64_t)&v158[1] + 8;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(v158, ".", "");
        if (*(void *)&v158[1] < *((void *)&v158[0] + 1)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        if (*(_OWORD **)&v158[0] != (_OWORD *)((char *)&v158[1] + 8)) {
          free(*(void **)&v158[0]);
        }
        goto LABEL_129;
      }
      uint64_t v43 = **(void **)(*(void *)(Function + 24) + 16);
      BOOL v44 = (*(_DWORD *)(v43 + 8) & 0xFE) != 0x12
         || BYTE5(AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * v129 + 4]) == 0;
      int v45 = !v44;
      if (v44) {
        uint64_t v46 = 1;
      }
      else {
        uint64_t v46 = *(unsigned int *)(v43 + 32);
      }
      uint64_t v136 = v46;
      int v126 = v154;
      uint64_t v47 = *(void *)(Function + 8);
      if (!v47)
      {
LABEL_123:
        int v154 = v126;
        char v1 = this;
LABEL_129:
        llvm::Function::eraseFromParent(v128);
        goto LABEL_130;
      }
      uint64_t v130 = &AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * v129 + 1];
      std::string v48 = &AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * v129];
      uint64_t v134 = (char *)v48 + 36;
      uint64_t v132 = v48 + 3;
      uint64_t v133 = (uint64_t (**)(void))(v48 + 2);
      while (1)
      {
        std::string v49 = *(llvm::Instruction **)(v47 + 24);
        uint64_t v50 = *(void *)(v47 + 8);
        if (*(_DWORD *)v130 == 1)
        {
          int v51 = 0;
        }
        else
        {
          if (*(_DWORD *)v130 != 2) {
            goto LABEL_42;
          }
          int v51 = 121;
        }
        int v154 = v51;
LABEL_42:
        uint64_t v131 = v50;
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v149, v49);
        uint64_t v52 = llvm::UndefValue::get();
        if (v136)
        {
          for (uint64_t i = 0; i != v136; ++i)
          {
            uint64_t v138 = (llvm::Value *)v52;
            std::string v54 = v30;
            uint64_t v160 = 0;
            long long v159 = 0u;
            memset(v158, 0, sizeof(v158));
            unint64_t v55 = llvm::CallBase::arg_end(v49) - (void)v49 + 32 * (*((_DWORD *)v49 + 5) & 0x7FFFFFF);
            if ((v55 & 0x1FFFFFFFE0) != 0)
            {
              uint64_t v56 = (v55 >> 5);
              uint64_t v57 = (llvm::Value **)v158;
              std::string::size_type v58 = v49;
              do
              {
                int v59 = (llvm::Value **)((char *)v58 - 32 * (*((_DWORD *)v49 + 5) & 0x7FFFFFF));
                std::string v60 = *v59;
                *uint64_t v57 = *v59;
                if (v45 && (*(_DWORD *)(*(void *)v60 + 8) & 0xFE) == 0x12)
                {
                  __int16 v147 = 257;
                  uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
                  *uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)&v149, v60, v61, (const llvm::Twine *)v146);
                }
                ++v57;
                std::string::size_type v58 = (llvm::Instruction *)((char *)v58 + 32);
                --v56;
              }
              while (v56);
            }
            if (*v134)
            {
              __int16 v62 = **(llvm::Type ***)&v158[0];
              uint64_t v30 = v54;
              if ((*(_DWORD *)(**(void **)&v158[0] + 8) & 0xFE) == 0x12) {
                __int16 v62 = (llvm::Type *)**((void **)v62 + 2);
              }
              v146[0] = llvm::Type::getPrimitiveSizeInBits(v62);
              v146[1] = v63;
              if (llvm::TypeSize::operator unsigned long long() == 32)
              {
                int v64 = 0;
              }
              else
              {
                std::string v65 = (llvm::Type *)v156[4];
                if ((*(_DWORD *)(**(void **)&v158[0] + 8) & 0xFE) == 0x12) {
                  std::string v65 = (llvm::Type *)llvm::FixedVectorType::get();
                }
                if ((v55 & 0x1FFFFFFFE0) != 0)
                {
                  uint64_t v66 = (v55 >> 5);
                  std::string v67 = (llvm::Value **)v158;
                  do
                  {
                    std::string v68 = *v67;
                    __int16 v147 = 257;
                    *v67++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)&v149, v68, v65, (const llvm::Twine *)v146);
                    --v66;
                  }
                  while (v66);
                }
                int v64 = 1;
              }
            }
            else
            {
              int v64 = 0;
              uint64_t v30 = v54;
            }
            if (llvm::FPMathOperator::classof((uint64_t)v49)) {
              unsigned int FastMathFlags = llvm::Instruction::getFastMathFlags(v49);
            }
            else {
              unsigned int FastMathFlags = 0;
            }
            std::string v70 = (char *)v157 + *(void *)(*(void *)v157 - 24);
            long long v143 = v153;
            llvm::IRBuilderBase::getCurrentDebugLocation(&v144, (llvm::IRBuilderBase *)&v149);
            int v145 = v154;
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v143, (uint64_t)(v70 + 40));
            if (v144) {
              llvm::MetadataTracking::untrack();
            }
            switch(*v135)
            {
              case 1:
                std::string v71 = *v133;
                std::string v72 = (void *)((char *)v157 + (*v132 >> 1));
                if (*v132) {
                  std::string v71 = *(uint64_t (**)(void))(*v72 + v71);
                }
                uint64_t v83 = v71(v72);
                goto LABEL_108;
              case 2:
                uint64_t v80 = *v133;
                uint64_t v81 = *(void *)v49;
                uint64_t v82 = (void *)((char *)v157 + (*v132 >> 1));
                if (*v132) {
                  goto LABEL_77;
                }
                goto LABEL_78;
              case 3:
                uint64_t v80 = *v133;
                uint64_t v81 = *(void *)&v158[0];
                uint64_t v82 = (void *)((char *)v157 + (*v132 >> 1));
                if ((*v132 & 1) == 0) {
                  goto LABEL_78;
                }
LABEL_77:
                uint64_t v80 = *(uint64_t (**)(void))(*v82 + v80);
LABEL_78:
                uint64_t v83 = ((uint64_t (*)(void *, uint64_t))v80)(v82, v81);
                goto LABEL_108;
              case 4:
                uint64_t v84 = (unsigned int *)(*(void *)&v158[0] + 24);
                if (*(_DWORD *)(*(void *)&v158[0] + 32) >= 0x41u) {
                  uint64_t v84 = *(unsigned int **)v84;
                }
                uint64_t v75 = *v84;
                std::string v73 = *v133;
                uint64_t v74 = *(void *)v49;
                std::string v76 = (void *)((char *)v157 + (*v132 >> 1));
                if (*v132) {
                  std::string v73 = *(uint64_t (**)(void))(*v76 + v73);
                }
                goto LABEL_93;
              case 5:
                std::string v73 = *v133;
                uint64_t v75 = *((void *)&v158[0] + 1);
                uint64_t v74 = *(void *)&v158[0];
                std::string v76 = (void *)((char *)v157 + (*v132 >> 1));
                if (*v132) {
                  std::string v73 = *(uint64_t (**)(void))(*v76 + v73);
                }
LABEL_93:
                uint64_t v83 = ((uint64_t (*)(void *, uint64_t, uint64_t))v73)(v76, v74, v75);
                goto LABEL_108;
              case 6:
                uint64_t v87 = *v133;
                uint64_t v89 = (const char *)*((void *)&v158[0] + 1);
                uint64_t v88 = *(_OWORD **)&v158[0];
                uint64_t v90 = (void *)((char *)v157 + (*v132 >> 1));
                if (*v132) {
                  uint64_t v87 = *(uint64_t (**)(void))(*v90 + v87);
                }
                uint64_t v92 = FastMathFlags;
                goto LABEL_107;
              case 7:
                uint64_t v87 = *v133;
                uint64_t v89 = (const char *)*((void *)&v158[0] + 1);
                uint64_t v88 = *(_OWORD **)&v158[0];
                uint64_t v92 = *(void *)&v158[1];
                uint64_t v90 = (void *)((char *)v157 + (*v132 >> 1));
                if ((*v132 & 1) == 0) {
                  goto LABEL_107;
                }
                uint64_t v83 = (*(uint64_t (**)(void *, void, void, void))(*v90 + v87))(v90, *(void *)&v158[0], *((void *)&v158[0] + 1), *(void *)&v158[1]);
                goto LABEL_108;
              case 8:
                uint64_t v77 = *v133;
                uint64_t v85 = (_OWORD *)*((void *)&v158[0] + 1);
                uint64_t v78 = *(void *)&v158[0];
                uint64_t v86 = *(const char **)&v158[1];
                uint64_t v79 = (void *)((char *)v157 + (*v132 >> 1));
                if (*v132) {
                  uint64_t v77 = *(uint64_t (**)(void))(*v79 + v77);
                }
                uint64_t v93 = FastMathFlags;
                goto LABEL_101;
              case 9:
                uint64_t v87 = *v133;
                uint64_t v90 = (void *)((char *)v157 + (*v132 >> 1));
                if (*v132) {
                  uint64_t v87 = *(uint64_t (**)(void))(*v90 + v87);
                }
                uint64_t v88 = v158;
                uint64_t v89 = "";
                uint64_t v92 = 0;
LABEL_107:
                uint64_t v83 = ((uint64_t (*)(void *, _OWORD *, const char *, uint64_t))v87)(v90, v88, v89, v92);
                goto LABEL_108;
              case 0xA:
                uint64_t v77 = *v133;
                uint64_t v78 = *(void *)v49;
                uint64_t v79 = (void *)((char *)v157 + (*v132 >> 1));
                if (*v132) {
                  uint64_t v77 = *(uint64_t (**)(void))(*v79 + v77);
                }
                uint64_t v85 = v158;
                uint64_t v86 = "";
                uint64_t v93 = 0;
LABEL_101:
                uint64_t v83 = ((uint64_t (*)(void *, uint64_t, _OWORD *, const char *, uint64_t))v77)(v79, v78, v85, v86, v93);
LABEL_108:
                FPTrunc = (llvm::Value *)v83;
                break;
              default:
                FPTrunc = 0;
                break;
            }
            uint64_t v94 = (char *)v157 + *(void *)(*(void *)v157 - 24);
            long long v140 = *(_OWORD *)(v94 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation(v30, (llvm::IRBuilderBase *)(v94 + 40));
            int v142 = *((_DWORD *)v94 + 34);
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v140, (uint64_t)&v149);
            if (v141) {
              llvm::MetadataTracking::untrack();
            }
            if (v64)
            {
              uint64_t v95 = *(void *)v49;
              if (v45 && (*(_DWORD *)(v95 + 8) & 0xFE) == 0x12) {
                uint64_t v95 = **(void **)(v95 + 16);
              }
              __int16 v147 = 257;
              FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)&v149, FPTrunc, (llvm::Type *)v95, (const llvm::Twine *)v146);
              if (!v45) {
                goto LABEL_119;
              }
            }
            else if (!v45)
            {
              goto LABEL_119;
            }
            __int16 v147 = 257;
            uint64_t v96 = (llvm::Value *)llvm::ConstantInt::get();
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)&v149, v138, FPTrunc, v96, (const llvm::Twine *)v146);
LABEL_119:
            uint64_t v52 = (uint64_t)FPTrunc;
          }
        }
        if (*(void *)v49 != v156[1]) {
          llvm::Value::replaceAllUsesWith();
        }
        llvm::Instruction::eraseFromParent(v49);
        uint64_t v47 = v131;
        if (!v131) {
          goto LABEL_123;
        }
      }
    }
LABEL_130:
    uint64_t v29 = v129 + 1;
  }
  while (v129 != 19);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v156);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v155);
  if (v149 != &v151) {
    free(v149);
  }
  if (*((unsigned char *)v1 + *(void *)(*(void *)v1 - 24) + 456))
  {
    if (!*((void *)this + 573))
    {
      uint64_t v148 = "agc.barrier_target_count";
      __int16 v152 = 259;
      uint64_t v97 = AGCLLVMUserComputeKernelBase::constructSHGlobal(this);
      llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4568), (uint64_t)v97);
    }
    if (!*((void *)this + 576))
    {
      uint64_t v98 = llvm::User::operator new((llvm::User *)0x58);
      uint64_t v148 = "agc.barrier_counter";
      __int16 v152 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4592), v98);
    }
    uint64_t v139 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + 8);
    uint64_t v99 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 3280) + 8);
    if (v99)
    {
      int v100 = 0;
      uint64_t v137 = (char *)this + 368;
      int v101 = 1;
      do
      {
        uint64_t v102 = *(llvm::Instruction **)(v99 + 24);
        uint64_t v103 = *((void *)v102 - 4 * (*((_DWORD *)v102 + 5) & 0x7FFFFFF));
        uint64_t v104 = (void *)(v103 + 24);
        if (*(_DWORD *)(v103 + 32) >= 0x41u) {
          uint64_t v104 = (void *)*v104;
        }
        uint64_t v99 = *(void *)(v99 + 8);
        uint64_t v105 = (void *)*v104;
        uint64_t v148 = &v150;
        uint64_t v149 = (void *)0x400000000;
        uint64_t v106 = llvm::PointerType::get();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v148, v106);
        uint64_t v107 = llvm::PointerType::get();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v148, v107);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v148, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232));
        uint64_t v108 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
        if (*(void *)(v108 + 944)) {
          BOOL v109 = (v105 & 1) == 0;
        }
        else {
          BOOL v109 = 1;
        }
        if (v109)
        {
          uint64_t v111 = (const char **)(v108 + 936);
        }
        else
        {
          uint64_t v110 = llvm::PointerType::get();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v148, v110);
          uint64_t v111 = (const char **)(*(void *)&v137[*(void *)(*(void *)this - 24) + 32] + 944);
        }
        uint64_t v112 = *v111;
        llvm::FunctionType::get();
        if (v112) {
          strlen(v112);
        }
        llvm::Module::getOrInsertFunction();
        uint64_t v114 = v113;
        if (v148 != &v150) {
          free(v148);
        }
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40), v102);
        uint64_t v148 = &v150;
        uint64_t v149 = (void *)0x400000000;
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v148, *((void *)this + 576));
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v148, *((void *)this + 573));
        uint64_t v115 = llvm::ConstantInt::get();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v148, v115);
        uint64_t v117 = *(void *)this;
        if (*(void *)(*(void *)&v137[*(void *)(*(void *)this - 24) + 32] + 944)
          && (v105 & 1) != 0)
        {
          if (!*((void *)this + 579))
          {
            *(void *)&v158[0] = "agc.mem_fence_addr";
            LOWORD(v159) = 259;
            llvm::PointerType::get();
            uint64_t v118 = AGCLLVMUserComputeKernelBase::constructSHGlobal(this);
            llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4616), (uint64_t)v118);
            uint64_t v117 = *(void *)this;
          }
          uint64_t v119 = (uint64_t *)((char *)v139 + *(void *)(v117 - 24));
          uint64_t v120 = (llvm::Type **)*((void *)this + 579);
          LOWORD(v159) = 257;
          uint64_t v121 = AGCLLVMBuilder::tryDeducePointeeType(v120, v116);
          uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v119 + 4, v121, (uint64_t)v120, 0, (uint64_t)v158);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v148, AlignedLoad);
          uint64_t v117 = *(void *)this;
        }
        uint64_t v123 = (uint64_t)v139 + *(void *)(v117 - 24) + 32;
        LOWORD(v159) = 257;
        llvm::IRBuilderBase::CreateCall(v123, *(void *)(v114 + 24), v114, (uint64_t)v148, v149, (uint64_t)v158);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v102);
        if (v148 != &v150) {
          free(v148);
        }
        ++v101;
        ++v100;
      }
      while (v99);
    }
  }
  return v125;
}

llvm::GlobalVariable *AGCLLVMUserComputeKernelBase::constructSHGlobal(void *a1)
{
  uint64_t v2 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  uint64_t v3 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v3 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  unsigned int v4 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v5 = *((void *)v4 + 47);
  uint64_t v6 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v4 + 32), v2);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v5, v6);
  return v2;
}

uint64_t AGCLLVMUserComputeKernelBase::buildStageInSize(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 592))();
}

uint64_t AGCLLVMUserComputeKernelBase::buildStageInOrigin(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 584))();
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildGroupID(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2, unsigned int a3)
{
  uint64_t v5 = (char *)this + 24 * a3;
  uint64_t v6 = (llvm::ValueHandleBase *)(v5 + 4640);
  if (!*((void *)v5 + 582))
  {
    uint64_t v7 = a3;
    uint64_t v8 = llvm::User::operator new((llvm::User *)0x58);
    uint64_t v9 = (&AGCLLVMDriverCDMShader::buildLocalSize(AGCLLVMBuilder::InsertPoint,llvm::Type *,unsigned int)::$_1::operator() const(void)::xyz)[v7];
    if (*v9)
    {
      v20[0] = "agx.group_id_";
      char v21 = v9;
      __int16 v10 = 771;
    }
    else
    {
      v20[0] = "agx.group_id_";
      __int16 v10 = 259;
    }
    __int16 v22 = v10;
    llvm::GlobalVariable::GlobalVariable();
    if (*v9)
    {
      v20[0] = "cl_group_id_";
      char v21 = v9;
      __int16 v11 = 771;
    }
    else
    {
      v20[0] = "cl_group_id_";
      __int16 v11 = 259;
    }
    __int16 v22 = v11;
    llvm::Twine::str((uint64_t *)&__p, (llvm::Twine *)v20);
    llvm::GlobalObject::setSection();
    if (v18 < 0) {
      operator delete(__p);
    }
    llvm::GlobalObject::setAlignment();
    llvm::ValueHandleBase::operator=(v6, v8);
  }
  uint64_t v12 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v13 = (llvm::Type **)*((void *)v6 + 2);
  __int16 v22 = 257;
  BOOL v14 = AGCLLVMBuilder::tryDeducePointeeType(v13, a2);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v12, v14, (uint64_t)v13, 0, (uint64_t)v20);
  __int16 v19 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v12, 38, AlignedLoad, (uint64_t)a2, (uint64_t)&__p);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildNumGroups(llvm::Type ***this, llvm::Type *a2)
{
  if (!this[538])
  {
    unsigned int v4 = (llvm::Type *)llvm::PointerType::get();
    unsigned int v5 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 360))();
    v22[0] = "agc.indirect_wg_count_buffer_pointer.";
    v22[2] = v5;
    __int16 v23 = 2051;
    unsigned int v6 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 360))();
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v4, (const llvm::Twine *)v22, v6, 12, 5, 0);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 536), (uint64_t)GlobalBufferBinding);
  }
  uint64_t v8 = (uint64_t *)((char *)this + (void)*(*this - 3));
  uint64_t v9 = this[538];
  __int16 v23 = 257;
  __int16 v10 = AGCLLVMBuilder::tryDeducePointeeType(v9, a2);
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, (uint64_t)v9, 0, (uint64_t)v22);
  uint64_t v12 = (char *)this + (void)*(*this - 3);
  uint64_t v13 = (llvm::Type *)*((void *)v12 + 29);
  BOOL v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v23 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v12 + 40), v13, AlignedLoad, v14, (const llvm::Twine *)v22);
  unsigned int v16 = (uint64_t *)((char *)this + (void)*(*this - 3) + 40);
  __int16 v23 = 257;
  char v18 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v17);
  uint64_t v19 = llvm::IRBuilderBase::CreateAlignedLoad(v16, v18, (uint64_t)GEP, 0, (uint64_t)v22);
  v21[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v16, 38, v19, (uint64_t)a2, (uint64_t)v21);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildGlobalLinearId(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2)
{
  unsigned int v4 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  unsigned int v5 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildGlobalID(this, a2, 2u);
  unsigned int v6 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildGlobalSize(this, a2, 1u);
  __int16 v18 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v4, v5, v6, (const llvm::Twine *)v17);
  uint64_t v8 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v9 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildGlobalID(this, a2, 1u);
  __int16 v18 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v8, Mul, v9, (const llvm::Twine *)v17);
  __int16 v11 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v12 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildGlobalSize(this, a2, 0);
  __int16 v18 = 257;
  uint64_t v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, Add, v12, (const llvm::Twine *)v17);
  BOOL v14 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v15 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildGlobalID(this, a2, 0);
  __int16 v18 = 257;
  return llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v17);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildGlobalID(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2, unsigned int a3)
{
  unsigned int v6 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v7 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildLocalSize(this, a2, a3);
  uint64_t v8 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildGroupID(this, a2, a3);
  __int16 v15 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v6, v7, v8, (const llvm::Twine *)v14);
  __int16 v10 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v11 = *((void *)this + 3 * a3 + 549);
  __int16 v15 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 38, v11, (uint64_t)a2, (uint64_t)v14);
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateAdd(v10, Mul, Cast, (const llvm::Twine *)v14);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildGlobalSize(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2, unsigned int a3)
{
  unsigned int v5 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  unsigned int v6 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildLocalSize(this, a2, a3);
  uint64_t v7 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildNumGroups((llvm::Type ***)this, a2);
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v9);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildLocalSize(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2, unsigned int a3)
{
  unsigned int v5 = (char *)this + 24 * a3;
  unsigned int v6 = (llvm::ValueHandleBase *)(v5 + 4472);
  if (!*((void *)v5 + 561))
  {
    *(void *)&long long v14 = "agc.";
    *(void *)&long long v15 = "local_size";
    LOWORD(v16) = 771;
    uint64_t v7 = AGCLLVMUserComputeKernelLegacy::buildLocalSize(llvm::Type *,unsigned int)::xyz[a3];
    if (*v7)
    {
      *(void *)&long long v17 = &v14;
      *(void *)&long long v18 = v7;
      LOWORD(v19) = 770;
    }
    else
    {
      long long v17 = v14;
      long long v18 = v15;
      uint64_t v19 = v16;
    }
    uint64_t v8 = AGCLLVMUserComputeKernelBase::constructSHGlobal(this);
    llvm::ValueHandleBase::operator=(v6, (uint64_t)v8);
  }
  uint64_t v9 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v10 = (llvm::Type **)*((void *)v6 + 2);
  LOWORD(v19) = 257;
  uint64_t v11 = AGCLLVMBuilder::tryDeducePointeeType(v10, a2);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v9, v11, (uint64_t)v10, 0, (uint64_t)&v17);
  LOWORD(v16) = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v9, 38, AlignedLoad, (uint64_t)a2, (uint64_t)&v14);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildLocalLinearId(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2)
{
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t v3 = *((void *)this + 558);
  __int16 v6 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v2, 38, v3, (uint64_t)a2, (uint64_t)v5);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildLocalID(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2, unsigned int a3)
{
  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t v4 = *((void *)this + 3 * a3 + 549);
  __int16 v7 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v3, 38, v4, (uint64_t)a2, (uint64_t)v6);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildLocalIDInternal(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2, unsigned int a3)
{
  int v3 = *((_DWORD *)this + a3 + 1090);
  if (v3 == -1) {
    return 0;
  }
  uint64_t v7 = *((void *)this + 21);
  if (*(_WORD *)(v7 + 18)) {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 21));
  }
  uint64_t v8 = 40 * (v3 - 1) + 40;
  if (!v3) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v7 + 88) + v8;
  if (a3)
  {
    __int16 v10 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v11 = *((void *)v10 + 34);
    __int16 v21 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v10 + 40), 49, v9, v11, (uint64_t)v20);
    uint64_t v13 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v21 = 257;
    long long v14 = (llvm::IRBuilderBase *)(v13 + 40);
    long long v15 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v14, Cast, v15, (const llvm::Twine *)v20);
    long long v17 = (char *)this + *(void *)(*(void *)this - 24) + 40;
    __int16 v21 = 257;
    uint64_t v9 = llvm::IRBuilderBase::CreateCast((uint64_t)v17, 39, Element, (uint64_t)a2, (uint64_t)v20);
  }
  uint64_t v19 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  __int16 v21 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v19, 38, v9, (uint64_t)a2, (uint64_t)v20);
}

uint64_t AGCLLVMUserComputeKernelLegacy::getWGPadSHGlobal(llvm::Type ***a1, llvm::Value *a2)
{
  if (a2 == 2)
  {
    int v3 = a1[597];
    if (!v3)
    {
      uint64_t v4 = a1 + 597;
      unsigned int v5 = (llvm::ValueHandleBase *)(a1 + 595);
      __int16 v10 = "agc.local_xdim_mul_and_shift";
      __int16 v11 = 259;
      goto LABEL_10;
    }
  }
  else if (a2 == 1)
  {
    int v3 = a1[594];
    if (!v3)
    {
      uint64_t v4 = a1 + 594;
      unsigned int v5 = (llvm::ValueHandleBase *)(a1 + 592);
      __int16 v10 = "agc.local_slice_mul_and_shift";
      __int16 v11 = 259;
      goto LABEL_10;
    }
  }
  else
  {
    if (a2)
    {
      int v3 = 0;
      goto LABEL_12;
    }
    int v3 = a1[591];
    if (!v3)
    {
      uint64_t v4 = a1 + 591;
      unsigned int v5 = (llvm::ValueHandleBase *)(a1 + 589);
      __int16 v10 = "agc.local_slice_and_linear_size";
      __int16 v11 = 259;
LABEL_10:
      __int16 v6 = AGCLLVMUserComputeKernelBase::constructSHGlobal(a1);
      llvm::ValueHandleBase::operator=(v5, (uint64_t)v6);
      int v3 = *v4;
    }
  }
LABEL_12:
  uint64_t v7 = (uint64_t *)((char *)a1 + (void)*(*a1 - 3));
  __int16 v11 = 257;
  uint64_t v8 = AGCLLVMBuilder::tryDeducePointeeType(v3, a2);
  return llvm::IRBuilderBase::CreateAlignedLoad(v7 + 5, v8, (uint64_t)v3, 0, (uint64_t)&v10);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildWGMulShiftMod(AGCLLVMUserComputeKernelLegacy *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value **a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  __int16 v10 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v48 = 257;
  __int16 v11 = (llvm::IRBuilderBase *)(v10 + 40);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v11, a4, v12, (const llvm::Twine *)v47);
  long long v14 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v48 = 257;
  long long v15 = (llvm::IRBuilderBase *)(v14 + 40);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  long long v17 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v15, a4, v16, (const llvm::Twine *)v47);
  long long v18 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v19 = (uint64_t)(v18 + 32);
  uint64_t v20 = *((void *)v18 + 50);
  uint64_t v21 = *(void *)(v20 + 1008);
  if (v21)
  {
    size_t v22 = strlen(*(const char **)(v20 + 1008));
    uint64_t v23 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(v19, v21, v22, *(void *)(v19 + 192), *(void *)(v19 + 192), *(void *)(v19 + 192), *(void *)(v19 + 192));
    v49[0] = a2;
    v49[1] = Element;
    v49[2] = a2;
    long long v24 = (char *)this + *(void *)(*(void *)this - 24) + 40;
    __int16 v48 = 257;
    char v25 = llvm::IRBuilderBase::CreateCall((uint64_t)v24, *(void *)(v23 + 24), v23, (uint64_t)v49, 3, (uint64_t)v47);
  }
  else
  {
    int v26 = (llvm::IRBuilderBase *)(v18 + 40);
    uint64_t v27 = *((void *)v18 + 29);
    __int16 v48 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v18 + 40), 39, Element, v27, (uint64_t)v47);
    __int16 v50 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v26, a2, Cast, (const llvm::Twine *)v49);
    uint64_t v30 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    __int16 v48 = 257;
    uint64_t Add = llvm::IRBuilderBase::CreateAdd(v30, Mul, a2, (const llvm::Twine *)v47);
    uint64_t v32 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v33 = *((void *)v32 + 34);
    __int16 v48 = 257;
    __int16 v34 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v32 + 40), 49, Add, v33, (uint64_t)v47);
    size_t v35 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v48 = 257;
    uint64_t v36 = (llvm::IRBuilderBase *)(v35 + 40);
    char v37 = (llvm::Value *)llvm::ConstantInt::get();
    char v25 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v36, v34, v37, (const llvm::Twine *)v47);
  }
  __int16 v38 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v48 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v38, v25, v17, (const llvm::Twine *)v47);
  uint64_t v40 = *(void *)a2;
  __int16 v50 = 257;
  char v41 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v38, 39, LShr, v40, (uint64_t)v49);
  uint64_t v42 = v41;
  if (a5) {
    *a5 = v41;
  }
  uint64_t v43 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v48 = 257;
  BOOL v44 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v43, v42, a3, (const llvm::Twine *)v47);
  int v45 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v48 = 257;
  return llvm::IRBuilderBase::CreateSub(v45, a2, v44, (const llvm::Twine *)v47);
}

uint64_t AGCLLVMUserComputeKernelLegacy::wrapperFunctionType(AGCLLVMUserComputeKernelLegacy *this)
{
  uint64_t v1 = *((unsigned int *)this + 1086);
  if (v1)
  {
    uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24) + 32;
    int v3 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(*((unsigned int *)this + 1086));
    uint64_t v4 = 0;
    do
    {
      *(void *)&v3[v4] = *((void *)v2 + 25);
      v4 += 8;
    }
    while (8 * v1 != v4);
    unsigned int v5 = v3;
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v6 = llvm::FunctionType::get();
  if (v5) {
    operator delete(v5);
  }
  return v6;
}

uint64_t AGCLLVMUserComputeKernelLegacy::initCompile(AGCLLVMUserComputeKernelLegacy *this)
{
  uint64_t v2 = *((void *)this + 22);
  long long v24 = (char *)this + 4328;
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v2);
    uint64_t v4 = *((void *)this + 22);
    uint64_t v3 = *(void *)(v2 + 88);
    if (*(_WORD *)(v4 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    }
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 88);
  }
  uint64_t v5 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
  if (v3 != v5)
  {
    while (1)
    {
      uint64_t v6 = *(void *)(*((void *)this + 11) + 8 * *(unsigned int *)(v3 + 32));
      if (!v6 || !*(void *)(v3 + 8)) {
        goto LABEL_37;
      }
      uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8));
      if (v8 == 34) {
        break;
      }
      if (v8 != 31)
      {
        if (v8 != 27) {
          goto LABEL_37;
        }
        BOOL v9 = *String == 0x657268742E726961 && String[1] == 0x7469736F705F6461;
        BOOL v10 = v9 && String[2] == 0x675F6E695F6E6F69;
        if (!v10 || *(void *)((char *)String + 19) != 0x646972675F6E695FLL) {
          goto LABEL_37;
        }
LABEL_25:
        if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) == 0x12) {
          goto LABEL_66;
        }
        goto LABEL_37;
      }
      if (*String == 0x657268742E726961
        && String[1] == 0x7865646E695F6461
        && String[2] == 0x657268745F6E695FLL
        && *(void *)((char *)String + 23) == 0x70756F7267646165)
      {
LABEL_66:
        v24[456] = 1;
        goto LABEL_38;
      }
LABEL_37:
      v3 += 40;
      if (v3 == v5) {
        goto LABEL_38;
      }
    }
    if (memcmp(String, "air.thread_position_in_threadgroup", 0x22uLL)) {
      goto LABEL_37;
    }
    goto LABEL_25;
  }
LABEL_38:
  uint64_t inited = AGCLLVMUserComputeKernelBase::initCompile(this);
  if (inited)
  {
    LOBYTE(v16) = 1;
    if (*v24)
    {
LABEL_57:
      *((void *)this + 545) = -1;
      *((_DWORD *)this + 1092) = -1;
LABEL_58:
      llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 4336, 0);
      *((_DWORD *)this + 1090) = 0;
    }
    else
    {
      unint64_t v17 = 0;
      int v16 = 0;
      do
      {
        strlen(off_1E65EA8C8[v17]);
        uint64_t Function = llvm::Module::getFunction();
        if (Function)
        {
          if (!*(void *)(Function + 96)) {
            goto LABEL_56;
          }
          uint64_t v19 = *(void *)(Function + 8);
          if (v19)
          {
            while (1)
            {
              uint64_t v20 = *(void *)(*(void *)(v19 + 24) - 32 * (*(_DWORD *)(*(void *)(v19 + 24) + 20) & 0x7FFFFFF));
              if (!v20 || *(unsigned char *)(v20 + 16) != 16) {
                break;
              }
              size_t v22 = (void *)(v20 + 24);
              if (*(_DWORD *)(v20 + 32) >= 0x41u) {
                size_t v22 = (void *)*v22;
              }
              v16 |= 1 << *(_DWORD *)v22;
              uint64_t v19 = *(void *)(v19 + 8);
              if (!v19) {
                goto LABEL_52;
              }
            }
LABEL_56:
            LOBYTE(v16) = 7;
            goto LABEL_57;
          }
        }
LABEL_52:
        if (v17 > 6) {
          break;
        }
        ++v17;
      }
      while (v16 != 7);
      *((void *)this + 545) = -1;
      *((_DWORD *)this + 1092) = -1;
      if (v16) {
        goto LABEL_58;
      }
    }
    if ((v16 & 6) != 0)
    {
      llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 4336, 3);
      if ((v16 & 2) != 0) {
        *((_DWORD *)this + 1091) = *((_DWORD *)this + 1086) - 1;
      }
      if ((v16 & 4) != 0) {
        *((_DWORD *)this + 1092) = *((_DWORD *)this + 1086) - 1;
      }
    }
    AGCLLVMUserShader::setUniformAtomicsMode(this);
  }
  return inited;
}

void AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(AGCLLVMUserComputeKernelLegacy *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
}

uint64_t virtual thunk to'AGCLLVMDriverGPUGatherComputeShaderLegacy::getShaderType(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  return 24;
}

const char *virtual thunk to'AGCLLVMDriverGPUGatherComputeShaderLegacy::dumpType(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  return "gpu-gather-compute-driver-legacy";
}

void virtual thunk to'AGCLLVMDriverGPUGatherComputeShaderLegacy::~AGCLLVMDriverGPUGatherComputeShaderLegacy(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259A5C8;
  v1[603] = &unk_1F259A928;
  v1[607] = &unk_1F259AA18;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1F259AA30);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 603));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259A5C8;
  v1[603] = &unk_1F259A928;
  v1[607] = &unk_1F259AA18;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1F259AA30);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 603));
}

uint64_t virtual thunk to'AGCLLVMDriverComputeKernelLegacy::getShaderType(AGCLLVMDriverComputeKernelLegacy *this)
{
  return 22;
}

void virtual thunk to'AGCLLVMDriverComputeKernelLegacy::~AGCLLVMDriverComputeKernelLegacy(AGCLLVMDriverComputeKernelLegacy *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1F259A540);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMDriverComputeKernelLegacy *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)&off_1F259A540);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 4792);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t AGCLLVMDriverComputeKernelLegacy::getShaderType(AGCLLVMDriverComputeKernelLegacy *this)
{
  return 22;
}

void AGCLLVMDriverComputeKernelLegacy::~AGCLLVMDriverComputeKernelLegacy(AGCLLVMDriverComputeKernelLegacy *this)
{
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F259A540);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F259A540);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
}

uint64_t AGCLLVMDriverGPUGatherComputeShaderLegacy::getShaderType(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  return 24;
}

const char *AGCLLVMDriverGPUGatherComputeShaderLegacy::dumpType(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  return "gpu-gather-compute-driver-legacy";
}

uint64_t AGCLLVMDriverGPUGatherComputeShaderLegacy::setupShaderInputs(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4792);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

void AGCLLVMDriverGPUGatherComputeShaderLegacy::~AGCLLVMDriverGPUGatherComputeShaderLegacy(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  *(void *)this = &unk_1F259A5C8;
  uint64_t v2 = (AGCLLVMDriverGPUGatherComputeShaderLegacy *)((char *)this + 4824);
  *((void *)this + 603) = &unk_1F259A928;
  *((void *)this + 607) = &unk_1F259AA18;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F259AA30);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F259A5C8;
  uint64_t v2 = (AGCLLVMDriverGPUGatherComputeShaderLegacy *)((char *)this + 4824);
  *((void *)this + 603) = &unk_1F259A928;
  *((void *)this + 607) = &unk_1F259AA18;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F259AA30);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t virtual thunk to'AGCLLVMDriverPDSPatchUpComputeShaderLegacy::getShaderType(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  return 26;
}

const char *virtual thunk to'AGCLLVMDriverPDSPatchUpComputeShaderLegacy::dumpType(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  return "pds-patchup-compute-driver-legacy";
}

void virtual thunk to'AGCLLVMDriverPDSPatchUpComputeShaderLegacy::~AGCLLVMDriverPDSPatchUpComputeShaderLegacy(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259AAC8;
  v1[603] = &unk_1F259AE28;
  v1[607] = &unk_1F259AF18;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1F259AF30);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 603));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259AAC8;
  v1[603] = &unk_1F259AE28;
  v1[607] = &unk_1F259AF18;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1F259AF30);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 603));
}

uint64_t AGCLLVMDriverPDSPatchUpComputeShaderLegacy::getShaderType(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  return 26;
}

const char *AGCLLVMDriverPDSPatchUpComputeShaderLegacy::dumpType(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  return "pds-patchup-compute-driver-legacy";
}

uint64_t AGCLLVMDriverPDSPatchUpComputeShaderLegacy::setupShaderInputs(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4792);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

void AGCLLVMDriverPDSPatchUpComputeShaderLegacy::~AGCLLVMDriverPDSPatchUpComputeShaderLegacy(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  *(void *)this = &unk_1F259AAC8;
  uint64_t v2 = (AGCLLVMDriverPDSPatchUpComputeShaderLegacy *)((char *)this + 4824);
  *((void *)this + 603) = &unk_1F259AE28;
  *((void *)this + 607) = &unk_1F259AF18;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F259AF30);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F259AAC8;
  uint64_t v2 = (AGCLLVMDriverPDSPatchUpComputeShaderLegacy *)((char *)this + 4824);
  *((void *)this + 603) = &unk_1F259AE28;
  *((void *)this + 607) = &unk_1F259AF18;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F259AF30);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

BOOL virtual thunk to'AGCLLVMUserComputeKernelG10::constructReply(AGCLLVMUserComputeKernelG10 *this)
{
  return AGCLLVMUserComputeKernelG10::constructReply((AGCLLVMUserComputeKernelG10 *)((char *)this
                                                                                   + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMUserComputeKernelG10::constructReply(AGCLLVMUserComputeKernelG10 *this)
{
  BOOL result = AGCDeserializedReply::deserialize((AGCLLVMUserComputeKernelG10 *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (!result) {
    return result;
  }
  AGCLLVMObject::validateBackendReply((AGCLLVMUserComputeKernelG10 *)((char *)this + *(void *)(*(void *)this - 24)));
  int v3 = AGCLLVMUserObject::constructFlatReply(this);
  uint64_t v4 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v5 = (flatbuffers::FlatBufferBuilder *)(v4 + 2472);
  int v6 = *((unsigned __int8 *)this + 8);
  int v7 = *((unsigned __int8 *)this + 9);
  int v8 = *((unsigned __int8 *)this + 4328);
  int v9 = *((_DWORD *)this + 1083);
  int v10 = *((unsigned __int8 *)this + 12);
  v4[2542] = 1;
  int v11 = *((_DWORD *)v4 + 626) - *((_DWORD *)v4 + 630) + *((_DWORD *)v4 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v4 + 309, 12, v9);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v5, 14, v10, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v5, 10, v8, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v5, 8, v7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v5, 6, v6, 0);
  LODWORD(v5) = flatbuffers::FlatBufferBuilder::EndTable(v5, v11);
  uint64_t v12 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v13 = (flatbuffers::FlatBufferBuilder *)(v12 + 2472);
  v12[2542] = 1;
  int v14 = *((_DWORD *)v12 + 626) - *((_DWORD *)v12 + 630) + *((_DWORD *)v12 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v12 + 2472), v3);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v13, (int)v5);
  int v15 = flatbuffers::FlatBufferBuilder::EndTable(v13, v14);
  flatbuffers::FlatBufferBuilder::Finish((AGCLLVMUserComputeKernelG10 *)((char *)this + *(void *)(*(void *)this - 24) + 2472), v15, v16);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserComputeKernelG10 *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  if (*((unsigned char *)this + 17))
  {
    uint64_t v17 = *(void *)this;
  }
  else
  {
    uint64_t v17 = *(void *)this;
    if (!*((unsigned char *)this + 16))
    {
      long long v18 = (char *)this + *(void *)(v17 - 24);
      if (!v18[456] && !*((_DWORD *)this + 1096))
      {
        uint64_t v19 = *((void *)v18 + 87);
        if (v19)
        {
          uint64_t v20 = (unsigned int **)(v18 + 1256);
          if (*((void *)v18 + 88)) {
            uint64_t v20 = (unsigned int **)(v18 + 696);
          }
        }
        else
        {
          uint64_t v20 = (unsigned int **)(v18 + 1256);
        }
        uint64_t v21 = 0;
        if (*v20 && v20[1]) {
          uint64_t v21 = (int *)((char *)*v20 + **v20);
        }
        size_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
        if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
          long long v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
        }
        else {
          long long v24 = 0;
        }
        if ((getBackendReplyReadsTGSRs(v24) & 1) == 0)
        {
          if (v19)
          {
            char v37 = (unsigned int **)(v18 + 1256);
            if (*((void *)v18 + 88)) {
              char v37 = (unsigned int **)(v18 + 696);
            }
          }
          else
          {
            char v37 = (unsigned int **)(v18 + 1256);
          }
          __int16 v38 = 0;
          if (*v37 && v37[1]) {
            __int16 v38 = (int *)((char *)*v37 + **v37);
          }
          char v39 = (unsigned __int16 *)((char *)v38 - *v38);
          if (*v39 >= 0xBu && (uint64_t v40 = v39[5]) != 0) {
            char v41 = (int *)((char *)v38 + v40 + *(unsigned int *)((char *)v38 + v40));
          }
          else {
            char v41 = 0;
          }
          uint64_t v42 = (unsigned __int16 *)((char *)v41 - *v41);
          if (*v42 < 9u || (uint64_t v43 = v42[4]) == 0 || !*(int *)((char *)v41 + v43))
          {
            int v25 = 1;
            goto LABEL_22;
          }
        }
      }
    }
  }
  int v25 = 0;
LABEL_22:
  int v26 = (char *)this + *(void *)(v17 - 24);
  uint64_t v27 = (flatbuffers::FlatBufferBuilder *)(v26 + 2568);
  int v28 = *((_DWORD *)this + 1096);
  v26[2638] = 1;
  int v29 = *((_DWORD *)v26 + 650) - *((_DWORD *)v26 + 654) + *((_DWORD *)v26 + 652);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v26 + 321, 4, v28);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v27, 6, v25, 0);
  LODWORD(v27) = flatbuffers::FlatBufferBuilder::EndTable(v27, v29);
  int v30 = AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(this);
  char v31 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v32 = (flatbuffers::FlatBufferBuilder *)(v31 + 2568);
  v31[2638] = 1;
  int v33 = *((_DWORD *)v31 + 650) - *((_DWORD *)v31 + 654) + *((_DWORD *)v31 + 652);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v31 + 2568), (int)v27);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v32, v30);
  __int16 v34 = (AGCLLVMUserComputeKernelG10 *)((char *)this + *(void *)(*(void *)this - 24) + 2568);
  int v35 = flatbuffers::FlatBufferBuilder::EndTable(v32, v33);
  flatbuffers::FlatBufferBuilder::Finish(v34, v35, v36);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserComputeKernelG10 *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
  return AGCLLVMUserComputeKernelBase::validateReply(this);
}

uint64_t getBackendReplyReadsTGSRs(int *a1)
{
  uint64_t v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 0x3Fu) {
    return 0;
  }
  uint64_t v2 = v1[31];
  if (!v2) {
    return 0;
  }
  int v3 = (unsigned int *)((char *)a1 + v2 + *(unsigned int *)((char *)a1 + v2));
  uint64_t v4 = *v3;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v3 + 1;
  while (1)
  {
    unsigned int v7 = *v5++;
    char v6 = v7;
    if (v7 < 0x36 && ((0x3F000000000777uLL >> v6) & 1) != 0) {
      break;
    }
    if (!--v4) {
      return 0;
    }
  }
  return 1;
}

void virtual thunk to'AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(AGCLLVMUserComputeKernelG10 *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4424));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  uint64_t v2 = (AGCLLVMObject *)(v1 + 4424);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

void AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(AGCLLVMUserComputeKernelG10 *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[10];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[11];
  uint64_t v5 = *((void *)this + 551);
  if (v5 != -8192 && v5 != -4096 && v5 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelG10 *)((char *)this + 4392));
  }
  uint64_t v7 = *((void *)this + 547);
  if (v7 != -8192 && v7 != -4096 && v7) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelG10 *)((char *)this + 4360));
  }
  uint64_t v8 = *((void *)this + 544);
  if (v8 != -8192 && v8 != -4096 && v8) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelG10 *)((char *)this + 4336));
  }
  AGCLLVMUserShader::~AGCLLVMUserShader(this, a2 + 2);
}

uint64_t AGCLLVMUserComputeKernelG10::supportComputeSplitDispatch(AGCLLVMUserComputeKernelG10 *this)
{
  return *((unsigned __int8 *)this + 4416);
}

llvm::Value *AGCLLVMUserComputeKernelG10::replaceBuiltinFunction(void *a1, uint64_t a2, llvm::Type *a3, uint64_t a4)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  int v5 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 824) + 520))();
  v77[0] = "air.threadgroup_position_in_grid";
  v77[1] = 32;
  LODWORD(v78) = v5;
  int v6 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 824) + 528))();
  uint64_t v79 = "air.threadgroups_per_grid";
  uint64_t v80 = 25;
  int v81 = v6;
  int v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 824) + 536))();
  uint64_t v82 = "air.thread_position_in_grid";
  uint64_t v83 = 27;
  int v84 = v7;
  int v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 824) + 544))();
  uint64_t v85 = "air.threads_per_grid";
  uint64_t v86 = 20;
  int v87 = v8;
  llvm::StringMapImpl::StringMapImpl((llvm::StringMapImpl *)&v73);
  for (uint64_t i = 0; i != 12; i += 3)
  {
    int v11 = (const void *)v77[i];
    size_t v10 = v77[i + 1];
    int v12 = v77[i + 2];
    unsigned int v13 = llvm::StringMapImpl::LookupBucketFor();
    uint64_t v14 = v73;
    uint64_t v15 = *(void *)(v73 + 8 * v13);
    if (v15)
    {
      if (v15 != -8) {
        continue;
      }
      --v76;
    }
    uint64_t v16 = MEMORY[0x1CB79F270](v10 + 17, 8);
    uint64_t v17 = v16;
    uint64_t v18 = v16 + 16;
    if (v10) {
      memcpy((void *)(v16 + 16), v11, v10);
    }
    *(unsigned char *)(v18 + v10) = 0;
    *(void *)uint64_t v17 = v10;
    *(_DWORD *)(v17 + 8) = v12;
    *(void *)(v14 + 8 * v13) = v17;
    ++v75;
    llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v73);
  }
  uint64_t v19 = (char *)a1 + *(void *)(*a1 - 24);
  v71[0] = llvm::ConstantInt::get();
  LOWORD(v80) = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateCall((uint64_t)(v19 + 40), *(void *)(a2 + 24), a2, (uint64_t)v71, 1, (uint64_t)v77);
  uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8));
  uint64_t v23 = v22;
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t v25 = v73;
  if (Key == -1) {
    uint64_t v26 = v74;
  }
  else {
    uint64_t v26 = Key;
  }
  if ((*(unsigned int (**)(void *))(*a1 + 424))(a1) && v25 + 8 * v26 != v73 + 8 * v74)
  {
    if (!a1[551])
    {
      int v28 = (llvm::Type *)llvm::PointerType::get();
      uint64_t v29 = *(void *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 824);
      unsigned int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 512))(v29);
      v77[0] = "agc.split_dispatch_parameters.";
      uint64_t v78 = v30;
      LOWORD(v80) = 2051;
      GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v28, (const llvm::Twine *)v77, v30, 0, 5, 0);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 549), (uint64_t)GlobalBufferBinding);
    }
    uint64_t v32 = (char *)a1 + *(void *)(*a1 - 24);
    int v33 = (llvm::Type *)*((void *)v32 + 29);
    __int16 v34 = (llvm::Type **)a1[551];
    LOWORD(v80) = 257;
    int v35 = AGCLLVMBuilder::tryDeducePointeeType(v34, v27);
    uint64_t v36 = (uint64_t *)(v32 + 40);
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v32 + 5, v35, (uint64_t)v34, 0, (uint64_t)v77);
    __int16 v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v72 = 257;
    uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v32 + 40), v33, AlignedLoad, v38, (const llvm::Twine *)v71);
    __int16 v70 = 257;
    char v41 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v40);
    uint64_t v42 = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad(v36, v41, (uint64_t)GEP, 0, (uint64_t)v69);
    uint64_t v43 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    LOWORD(v80) = 257;
    TruncOrBituint64_t Cast = llvm::IRBuilderBase::CreateTruncOrBitCast(v43, v42, a3, (const llvm::Twine *)v77);
    if (v23 == 32)
    {
      uint64_t v46 = String[2];
      uint64_t v47 = String[3];
      BOOL v48 = *String == 0x657268742E726961 && String[1] == 0x5F70756F72676461;
      uint64_t v49 = 0x6E6F697469736F70;
LABEL_26:
      if (v48 && v46 == v49 && v47 == 0x646972675F6E695FLL)
      {
        uint64_t v52 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
        LOWORD(v80) = 257;
        llvm::IRBuilderBase::CreateAdd(v52, TruncOrBitCast, Select, (const llvm::Twine *)v77);
      }
    }
    else if (v23 == 27)
    {
      uint64_t v46 = String[2];
      uint64_t v47 = *(void *)((char *)String + 19);
      BOOL v48 = *String == 0x657268742E726961 && String[1] == 0x7469736F705F6461;
      uint64_t v49 = 0x675F6E695F6E6F69;
      goto LABEL_26;
    }
    uint64_t v53 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    std::string v54 = (llvm::Type *)v53[29];
    unint64_t v55 = (llvm::Type **)a1[551];
    LOWORD(v80) = 257;
    uint64_t v56 = AGCLLVMBuilder::tryDeducePointeeType(v55, v44);
    v53 += 5;
    uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v53, v56, (uint64_t)v55, 0, (uint64_t)v77);
    (*(void (**)(void))(**(void **)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 824) + 552))();
    std::string::size_type v58 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v72 = 257;
    int v59 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v53, v54, v57, v58, (const llvm::Twine *)v71);
    __int16 v70 = 257;
    uint64_t v61 = AGCLLVMBuilder::tryDeducePointeeType(v59, v60);
    __int16 v62 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAlignedLoad(v53, v61, (uint64_t)v59, 0, (uint64_t)v69);
    uint64_t v63 = (void *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v64 = llvm::ConstantInt::get();
    LOWORD(v80) = 257;
    llvm::IRBuilderBase::CreateICmp(v63, 33, v62, v64, (uint64_t)v77);
    __int16 v72 = 257;
    uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)&v73);
  return Select;
}

llvm::Value *llvm::IRBuilderBase::CreateTruncOrBitCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  TruncOrBituint64_t Cast = (llvm::Value *)a2;
  if (*a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      TruncOrBituint64_t Cast = (llvm::Value *)llvm::CastInst::CreateTruncOrBitCast();
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)TruncOrBitCast, (uint64_t)a4);
    }
    else
    {
      TruncOrBituint64_t Cast = (llvm::Value *)(*(uint64_t (**)(void, llvm::Type **, llvm::Type *))(**((void **)this + 9) + 304))(*((void *)this + 9), a2, a3);
      if (TruncOrBitCast) {
        BOOL v7 = *((unsigned __int8 *)TruncOrBitCast + 16) >= 0x1Cu;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7) {
        llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)TruncOrBitCast, (uint64_t)a4);
      }
    }
  }
  return TruncOrBitCast;
}

uint64_t AGCLLVMUserComputeKernelG10::replaceBuiltins(AGCLLVMUserComputeKernelG10 *this)
{
  uint64_t v2 = AGCLLVMUserObject::replaceBuiltins(this);
  if (v2) {
    AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(this);
  }
  return v2;
}

void AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(AGCLLVMUserComputeKernelG10 *this)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(llvm::LLVMContext ***)((char *)this + *(void *)(*(void *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v91, *v2);
  uint64_t v97 = this;
  uint64_t v91 = &unk_1F25BE990;
  v96[25] = v2;
  {
    AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[0] = (uint64_t)"air.get_global_size.i32";
    dword_1EBD0E120 = 1;
    qword_1EBD0E128 = (uint64_t)AGCLLVMUserComputeKernelG10::buildGlobalSizeG10;
    unk_1EBD0E130 = 0;
    dword_1EBD0E138 = 4;
    word_1EBD0E13C = 0;
    qword_1EBD0E140 = (uint64_t)"air.get_global_size.i16";
    dword_1EBD0E148 = 1;
    qword_1EBD0E150 = (uint64_t)AGCLLVMUserComputeKernelG10::buildGlobalSizeG10;
    unk_1EBD0E158 = 0;
    dword_1EBD0E160 = 4;
    word_1EBD0E164 = 0;
    qword_1EBD0E168 = (uint64_t)"air.get_global_id.i32";
    dword_1EBD0E170 = 1;
    qword_1EBD0E178 = (uint64_t)AGCLLVMUserComputeKernelG10::buildGlobalIDG10;
    unk_1EBD0E180 = 0;
    dword_1EBD0E188 = 4;
    word_1EBD0E18C = 0;
    qword_1EBD0E190 = (uint64_t)"air.get_global_id.i16";
    dword_1EBD0E198 = 1;
    qword_1EBD0E1A0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildGlobalIDG10;
    unk_1EBD0E1A8 = 0;
    dword_1EBD0E1B0 = 4;
    word_1EBD0E1B4 = 0;
    qword_1EBD0E1B8 = (uint64_t)"air.get_local_size.i32";
    dword_1EBD0E1C0 = 1;
    qword_1EBD0E1C8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildLocalSizeG10;
    unk_1EBD0E1D0 = 0;
    dword_1EBD0E1D8 = 4;
    word_1EBD0E1DC = 0;
    qword_1EBD0E1E0 = (uint64_t)"air.get_local_size.i16";
    dword_1EBD0E1E8 = 1;
    qword_1EBD0E1F0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildLocalSizeG10;
    unk_1EBD0E1F8 = 0;
    dword_1EBD0E200 = 4;
    word_1EBD0E204 = 0;
    qword_1EBD0E208 = (uint64_t)"air.get_local_id.i32";
    dword_1EBD0E210 = 1;
    qword_1EBD0E218 = (uint64_t)AGCLLVMUserComputeKernelG10::buildLocalIDG10;
    unk_1EBD0E220 = 0;
    dword_1EBD0E228 = 4;
    word_1EBD0E22C = 0;
    qword_1EBD0E230 = (uint64_t)"air.get_local_id.i16";
    dword_1EBD0E238 = 1;
    qword_1EBD0E240 = (uint64_t)AGCLLVMUserComputeKernelG10::buildLocalIDG10;
    unk_1EBD0E248 = 0;
    dword_1EBD0E250 = 4;
    word_1EBD0E254 = 0;
    qword_1EBD0E258 = (uint64_t)"air.get_local_linear_id.i32";
    dword_1EBD0E260 = 1;
    qword_1EBD0E268 = (uint64_t)AGCLLVMUserComputeKernelG10::buildLocalLinearIDG10;
    unk_1EBD0E270 = 0;
    dword_1EBD0E278 = 2;
    word_1EBD0E27C = 0;
    qword_1EBD0E280 = (uint64_t)"air.get_local_linear_id.i16";
    dword_1EBD0E288 = 1;
    qword_1EBD0E290 = (uint64_t)AGCLLVMUserComputeKernelG10::buildLocalLinearIDG10;
    unk_1EBD0E298 = 0;
    dword_1EBD0E2A0 = 2;
    word_1EBD0E2A4 = 0;
    qword_1EBD0E2A8 = (uint64_t)"air.get_num_groups.i32";
    dword_1EBD0E2B0 = 1;
    qword_1EBD0E2B8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildNumGroupsG10;
    unk_1EBD0E2C0 = 0;
    dword_1EBD0E2C8 = 4;
    word_1EBD0E2CC = 0;
    qword_1EBD0E2D0 = (uint64_t)"air.get_num_groups.i16";
    dword_1EBD0E2D8 = 1;
    qword_1EBD0E2E0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildNumGroupsG10;
    unk_1EBD0E2E8 = 0;
    dword_1EBD0E2F0 = 4;
    word_1EBD0E2F4 = 0;
    qword_1EBD0E2F8 = (uint64_t)"air.get_group_id.i32";
    dword_1EBD0E300 = 1;
    qword_1EBD0E308 = (uint64_t)AGCLLVMUserComputeKernelG10::buildGroupIDG10;
    unk_1EBD0E310 = 0;
    dword_1EBD0E318 = 4;
    word_1EBD0E31C = 0;
    qword_1EBD0E320 = (uint64_t)"air.get_group_id.i16";
    dword_1EBD0E328 = 1;
    qword_1EBD0E330 = (uint64_t)AGCLLVMUserComputeKernelG10::buildGroupIDG10;
    qword_1EBD0E338 = 0;
    dword_1EBD0E340 = 4;
    word_1EBD0E344 = 0;
    qword_1EBD0E348 = (uint64_t)"air.get_dispatch_local_size.i32";
    dword_1EBD0E350 = 1;
    qword_1EBD0E358 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10;
    qword_1EBD0E360 = 0;
    dword_1EBD0E368 = 4;
    word_1EBD0E36C = 0;
    qword_1EBD0E370 = (uint64_t)"air.get_dispatch_local_size.i16";
    dword_1EBD0E378 = 1;
    qword_1EBD0E380 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10;
    qword_1EBD0E388 = 0;
    dword_1EBD0E390 = 4;
    word_1EBD0E394 = 0;
    qword_1EBD0E398 = (uint64_t)"air.get_quadgroups_per_threadgroup.i32";
    dword_1EBD0E3A0 = 1;
    qword_1EBD0E3A8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupG10;
    qword_1EBD0E3B0 = 0;
    dword_1EBD0E3B8 = 2;
    word_1EBD0E3BC = 0;
    qword_1EBD0E3C0 = (uint64_t)"air.get_quadgroups_per_threadgroup.i16";
    dword_1EBD0E3C8 = 1;
    qword_1EBD0E3D0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupG10;
    qword_1EBD0E3D8 = 0;
    dword_1EBD0E3E0 = 2;
    word_1EBD0E3E4 = 0;
    qword_1EBD0E3E8 = (uint64_t)"air.get_simdgroups_per_threadgroup.i32";
    dword_1EBD0E3F0 = 1;
    qword_1EBD0E3F8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildSimdgroupsPerThreadgroupG10;
    qword_1EBD0E400 = 0;
    dword_1EBD0E408 = 2;
    word_1EBD0E40C = 0;
    qword_1EBD0E410 = (uint64_t)"air.get_simdgroups_per_threadgroup.i16";
    dword_1EBD0E418 = 1;
    qword_1EBD0E420 = (uint64_t)AGCLLVMUserComputeKernelG10::buildSimdgroupsPerThreadgroupG10;
    qword_1EBD0E428 = 0;
    dword_1EBD0E430 = 2;
    word_1EBD0E434 = 0;
    qword_1EBD0E438 = (uint64_t)"air.get_dispatch_quadgroups_per_threadgroup.i32";
    dword_1EBD0E440 = 1;
    qword_1EBD0E448 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchQuadgroupsPerThreadgroupG10;
    qword_1EBD0E450 = 0;
    dword_1EBD0E458 = 2;
    word_1EBD0E45C = 0;
    qword_1EBD0E460 = (uint64_t)"air.get_dispatch_quadgroups_per_threadgroup.i16";
    dword_1EBD0E468 = 1;
    qword_1EBD0E470 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchQuadgroupsPerThreadgroupG10;
    qword_1EBD0E478 = 0;
    dword_1EBD0E480 = 2;
    word_1EBD0E484 = 0;
    qword_1EBD0E488 = (uint64_t)"air.get_dispatch_simdgroups_per_threadgroup.i32";
    dword_1EBD0E490 = 1;
    qword_1EBD0E498 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchSimdgroupsPerThreadgroupG10;
    qword_1EBD0E4A0 = 0;
    dword_1EBD0E4A8 = 2;
    word_1EBD0E4AC = 0;
    qword_1EBD0E4B0 = (uint64_t)"air.get_dispatch_simdgroups_per_threadgroup.i16";
    dword_1EBD0E4B8 = 1;
    qword_1EBD0E4C0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchSimdgroupsPerThreadgroupG10;
    qword_1EBD0E4C8 = 0;
    dword_1EBD0E4D0 = 2;
    word_1EBD0E4D4 = 0;
    qword_1EBD0E4D8 = (uint64_t)"air.get_quad_group.i32";
    dword_1EBD0E4E0 = 1;
    qword_1EBD0E4E8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadGroupG10;
    qword_1EBD0E4F0 = 0;
    dword_1EBD0E4F8 = 2;
    word_1EBD0E4FC = 0;
    qword_1EBD0E500 = (uint64_t)"air.get_quad_group.i16";
    dword_1EBD0E508 = 1;
    qword_1EBD0E510 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadGroupG10;
    qword_1EBD0E518 = 0;
    dword_1EBD0E520 = 2;
    word_1EBD0E524 = 0;
    qword_1EBD0E528 = (uint64_t)"air.get_thread_index_in_simdgroup.i32";
    dword_1EBD0E530 = 1;
    qword_1EBD0E538 = (uint64_t)AGCLLVMUserComputeKernelG10::buildThreadIndexInSimdGroupG10;
    qword_1EBD0E540 = 0;
    dword_1EBD0E548 = 2;
    word_1EBD0E54C = 0;
    qword_1EBD0E550 = (uint64_t)"air.get_thread_index_in_simdgroup.i16";
    dword_1EBD0E558 = 1;
    qword_1EBD0E560 = (uint64_t)AGCLLVMUserComputeKernelG10::buildThreadIndexInSimdGroupG10;
    qword_1EBD0E568 = 0;
    dword_1EBD0E570 = 2;
    word_1EBD0E574 = 0;
    qword_1EBD0E578 = (uint64_t)"air.get_simdgroup_index_in_threadgroup.i32";
    dword_1EBD0E580 = 1;
    qword_1EBD0E588 = (uint64_t)AGCLLVMUserComputeKernelG10::buildSimdGroupIndexInThreadgroupG10;
    qword_1EBD0E590 = 0;
    dword_1EBD0E598 = 2;
    word_1EBD0E59C = 0;
    qword_1EBD0E5A0 = (uint64_t)"air.get_simdgroup_index_in_threadgroup.i16";
    dword_1EBD0E5A8 = 1;
    qword_1EBD0E5B0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildSimdGroupIndexInThreadgroupG10;
    qword_1EBD0E5B8 = 0;
    dword_1EBD0E5C0 = 2;
    word_1EBD0E5C4 = 0;
    qword_1EBD0E5C8 = (uint64_t)"air.get_dispatch_threads_per_threadgroup.i32";
    dword_1EBD0E5D0 = 1;
    qword_1EBD0E5D8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10;
    qword_1EBD0E5E0 = 0;
    dword_1EBD0E5E8 = 4;
    word_1EBD0E5EC = 0;
    qword_1EBD0E5F0 = (uint64_t)"air.get_dispatch_threads_per_threadgroup.i16";
    dword_1EBD0E5F8 = 1;
    qword_1EBD0E600 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10;
    qword_1EBD0E608 = 0;
    dword_1EBD0E610 = 4;
    word_1EBD0E614 = 0;
    qword_1EBD0E618 = (uint64_t)"air.get_stage_in_grid_origin.i32";
    dword_1EBD0E620 = 1;
    qword_1EBD0E628 = (uint64_t)AGCLLVMUserComputeKernelBase::buildStageInOrigin;
    qword_1EBD0E630 = 0;
    dword_1EBD0E638 = 4;
    word_1EBD0E63C = 0;
    qword_1EBD0E640 = (uint64_t)"air.get_stage_in_grid_origin.i16";
    dword_1EBD0E648 = 1;
    qword_1EBD0E650 = (uint64_t)AGCLLVMUserComputeKernelBase::buildStageInOrigin;
    qword_1EBD0E658 = 0;
    dword_1EBD0E660 = 4;
    word_1EBD0E664 = 0;
    qword_1EBD0E668 = (uint64_t)"air.get_stage_in_grid_size.i32";
    dword_1EBD0E670 = 1;
    qword_1EBD0E678 = (uint64_t)AGCLLVMUserComputeKernelBase::buildStageInSize;
    qword_1EBD0E680 = 0;
    dword_1EBD0E688 = 4;
    word_1EBD0E68C = 0;
    qword_1EBD0E690 = (uint64_t)"air.get_stage_in_grid_size.i16";
    dword_1EBD0E698 = 1;
    qword_1EBD0E6A0 = (uint64_t)AGCLLVMUserComputeKernelBase::buildStageInSize;
    qword_1EBD0E6A8 = 0;
    dword_1EBD0E6B0 = 4;
    word_1EBD0E6B4 = 0;
    qword_1EBD0E6B8 = (uint64_t)"air.get_quadgroup_index_in_threadgroup.i32";
    dword_1EBD0E6C0 = 1;
    qword_1EBD0E6C8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadGroupG10;
    qword_1EBD0E6D0 = 0;
    dword_1EBD0E6D8 = 2;
    word_1EBD0E6DC = 0;
    qword_1EBD0E6E0 = (uint64_t)"air.get_quadgroup_index_in_threadgroup.i16";
    dword_1EBD0E6E8 = 1;
    qword_1EBD0E6F0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadGroupG10;
    qword_1EBD0E6F8 = 0;
    dword_1EBD0E700 = 2;
    word_1EBD0E704 = 0;
    qword_1EBD0E708 = (uint64_t)"air.get_thread_index_in_quadgroup.i32";
    dword_1EBD0E710 = 1;
    qword_1EBD0E718 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadElementG10;
    qword_1EBD0E720 = 0;
    dword_1EBD0E728 = 2;
    word_1EBD0E72C = 0;
    qword_1EBD0E730 = (uint64_t)"air.get_thread_index_in_quadgroup.i16";
    dword_1EBD0E738 = 1;
    qword_1EBD0E740 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadElementG10;
    qword_1EBD0E748 = 0;
    dword_1EBD0E750 = 2;
    word_1EBD0E754 = 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = &v87;
  do
  {
    if (AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v3]) {
      strlen((const char *)AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v3]);
    }
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      int v6 = (llvm::Function *)Function;
      BOOL v7 = &AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v3];
      uint64_t v80 = v7 + 4;
      if (*((_DWORD *)v7 + 8) == 12)
      {
        uint64_t v11 = *(void *)(Function + 8);
        if (v11)
        {
          int v12 = &AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v3];
          unsigned int v13 = (void (**)(void *, uint64_t))(v12 + 2);
          uint64_t v14 = v12 + 3;
          do
          {
            uint64_t v15 = *(void *)(v11 + 24);
            uint64_t v11 = *(void *)(v11 + 8);
            uint64_t v16 = *v13;
            uint64_t v17 = (void *)((char *)v97 + (*v14 >> 1));
            if (*v14) {
              uint64_t v16 = *(void (**)(void *, uint64_t))(*v17 + v16);
            }
            v16(v17, v15);
          }
          while (v11);
        }
        goto LABEL_119;
      }
      if (*((_DWORD *)v7 + 8) == 11)
      {
        int v8 = &AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v3];
        int v9 = (unsigned char *)v8[2];
        if (v9)
        {
          size_t v10 = strlen((const char *)v8[2]);
          *(void *)&v98[0] = (char *)&v98[1] + 8;
          *(_OWORD *)((char *)v98 + 8) = xmmword_1CADD6290;
          llvm::SmallVectorImpl<char>::append<char const*,void>(v98, v9, &v9[v10]);
        }
        else
        {
          *(void *)&v98[1] = 64;
          v98[0] = (unint64_t)&v98[1] + 8;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(v98, ".", "");
        if (*(void *)&v98[1] < *((void *)&v98[0] + 1)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        if (*(_OWORD **)&v98[0] != (_OWORD *)((char *)&v98[1] + 8)) {
          free(*(void **)&v98[0]);
        }
        goto LABEL_119;
      }
      uint64_t v73 = v3;
      unsigned int v74 = (llvm::Function *)Function;
      uint64_t v18 = **(void **)(*(void *)(Function + 24) + 16);
      BOOL v19 = (*(_DWORD *)(v18 + 8) & 0xFE) != 0x12
         || BYTE5(AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v3 + 4]) == 0;
      int v20 = !v19;
      if (v19) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = *(unsigned int *)(v18 + 32);
      }
      uint64_t v81 = v21;
      int v72 = v94;
      uint64_t v22 = *(void *)(Function + 8);
      if (!v22)
      {
LABEL_113:
        int v94 = v72;
        uint64_t v3 = v73;
        int v6 = v74;
LABEL_119:
        llvm::Function::eraseFromParent(v6);
        goto LABEL_120;
      }
      int v75 = &AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v3 + 1];
      uint64_t v23 = &AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v3];
      uint64_t v79 = (char *)v23 + 36;
      uint64_t v77 = v23 + 3;
      uint64_t v78 = (uint64_t (**)(void))(v23 + 2);
      while (1)
      {
        long long v24 = *(llvm::Instruction **)(v22 + 24);
        uint64_t v25 = *(void *)(v22 + 8);
        if (*(_DWORD *)v75 == 1)
        {
          int v26 = 0;
        }
        else
        {
          if (*(_DWORD *)v75 != 2) {
            goto LABEL_32;
          }
          int v26 = 121;
        }
        int v94 = v26;
LABEL_32:
        uint64_t v76 = v25;
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v92, v24);
        uint64_t v27 = llvm::UndefValue::get();
        if (v81)
        {
          for (uint64_t i = 0; i != v81; ++i)
          {
            uint64_t v82 = (llvm::Value *)v27;
            uint64_t v29 = v4;
            uint64_t v99 = 0;
            memset(v98, 0, sizeof(v98));
            unint64_t v30 = llvm::CallBase::arg_end(v24) - (void)v24 + 32 * (*((_DWORD *)v24 + 5) & 0x7FFFFFF);
            if ((v30 & 0x1FFFFFFFE0) != 0)
            {
              uint64_t v31 = (v30 >> 5);
              uint64_t v32 = (llvm::Value **)v98;
              int v33 = v24;
              do
              {
                __int16 v34 = (llvm::Value **)((char *)v33 - 32 * (*((_DWORD *)v24 + 5) & 0x7FFFFFF));
                int v35 = *v34;
                char *v32 = *v34;
                if (v20 && (*(_DWORD *)(*(void *)v35 + 8) & 0xFE) == 0x12)
                {
                  __int16 v90 = 257;
                  uint64_t v36 = (llvm::Value *)llvm::ConstantInt::get();
                  char *v32 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v92, v35, v36, (const llvm::Twine *)v89);
                }
                ++v32;
                int v33 = (llvm::Instruction *)((char *)v33 + 32);
                --v31;
              }
              while (v31);
            }
            if (*v79)
            {
              char v37 = **(llvm::Type ***)&v98[0];
              uint64_t v4 = v29;
              if ((*(_DWORD *)(**(void **)&v98[0] + 8) & 0xFE) == 0x12) {
                char v37 = (llvm::Type *)**((void **)v37 + 2);
              }
              v89[0] = llvm::Type::getPrimitiveSizeInBits(v37);
              v89[1] = v38;
              if (llvm::TypeSize::operator unsigned long long() == 32)
              {
                int v39 = 0;
              }
              else
              {
                uint64_t v40 = (llvm::Type *)v96[4];
                if ((*(_DWORD *)(**(void **)&v98[0] + 8) & 0xFE) == 0x12) {
                  uint64_t v40 = (llvm::Type *)llvm::FixedVectorType::get();
                }
                if ((v30 & 0x1FFFFFFFE0) != 0)
                {
                  uint64_t v41 = (v30 >> 5);
                  uint64_t v42 = (llvm::Value **)v98;
                  do
                  {
                    uint64_t v43 = *v42;
                    __int16 v90 = 257;
                    *v42++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v92, v43, v40, (const llvm::Twine *)v89);
                    --v41;
                  }
                  while (v41);
                }
                int v39 = 1;
              }
            }
            else
            {
              int v39 = 0;
              uint64_t v4 = v29;
            }
            if (llvm::FPMathOperator::classof((uint64_t)v24)) {
              unsigned int FastMathFlags = llvm::Instruction::getFastMathFlags(v24);
            }
            else {
              unsigned int FastMathFlags = 0;
            }
            int v45 = (char *)v97 + *(void *)(*(void *)v97 - 24);
            long long v86 = v93[2];
            llvm::IRBuilderBase::getCurrentDebugLocation(v4, (llvm::IRBuilderBase *)v92);
            int v88 = v94;
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v86, (uint64_t)(v45 + 40));
            if (v87) {
              llvm::MetadataTracking::untrack();
            }
            switch(*v80)
            {
              case 1:
                uint64_t v46 = *v78;
                uint64_t v47 = (void *)((char *)v97 + (*v77 >> 1));
                if (*v77) {
                  uint64_t v46 = *(uint64_t (**)(void))(*v47 + v46);
                }
                uint64_t v58 = v46(v47);
                goto LABEL_98;
              case 2:
                unint64_t v55 = *v78;
                uint64_t v56 = *(void *)v24;
                uint64_t v57 = (void *)((char *)v97 + (*v77 >> 1));
                if (*v77) {
                  goto LABEL_67;
                }
                goto LABEL_68;
              case 3:
                unint64_t v55 = *v78;
                uint64_t v56 = *(void *)&v98[0];
                uint64_t v57 = (void *)((char *)v97 + (*v77 >> 1));
                if ((*v77 & 1) == 0) {
                  goto LABEL_68;
                }
LABEL_67:
                unint64_t v55 = *(uint64_t (**)(void))(*v57 + v55);
LABEL_68:
                uint64_t v58 = ((uint64_t (*)(void *, uint64_t))v55)(v57, v56);
                goto LABEL_98;
              case 4:
                int v59 = (unsigned int *)(*(void *)&v98[0] + 24);
                if (*(_DWORD *)(*(void *)&v98[0] + 32) >= 0x41u) {
                  int v59 = *(unsigned int **)v59;
                }
                uint64_t v50 = *v59;
                BOOL v48 = *v78;
                uint64_t v49 = *(void *)v24;
                uint64_t v51 = (void *)((char *)v97 + (*v77 >> 1));
                if (*v77) {
                  BOOL v48 = *(uint64_t (**)(void))(*v51 + v48);
                }
                goto LABEL_83;
              case 5:
                BOOL v48 = *v78;
                uint64_t v50 = *((void *)&v98[0] + 1);
                uint64_t v49 = *(void *)&v98[0];
                uint64_t v51 = (void *)((char *)v97 + (*v77 >> 1));
                if (*v77) {
                  BOOL v48 = *(uint64_t (**)(void))(*v51 + v48);
                }
LABEL_83:
                uint64_t v58 = ((uint64_t (*)(void *, uint64_t, uint64_t))v48)(v51, v49, v50);
                goto LABEL_98;
              case 6:
                __int16 v62 = *v78;
                uint64_t v64 = (const char *)*((void *)&v98[0] + 1);
                uint64_t v63 = *(_OWORD **)&v98[0];
                std::string v65 = (void *)((char *)v97 + (*v77 >> 1));
                if (*v77) {
                  __int16 v62 = *(uint64_t (**)(void))(*v65 + v62);
                }
                uint64_t v67 = FastMathFlags;
                goto LABEL_97;
              case 7:
                __int16 v62 = *v78;
                uint64_t v64 = (const char *)*((void *)&v98[0] + 1);
                uint64_t v63 = *(_OWORD **)&v98[0];
                uint64_t v67 = *(void *)&v98[1];
                std::string v65 = (void *)((char *)v97 + (*v77 >> 1));
                if ((*v77 & 1) == 0) {
                  goto LABEL_97;
                }
                uint64_t v58 = (*(uint64_t (**)(void *, void, void, void))(*v65 + v62))(v65, *(void *)&v98[0], *((void *)&v98[0] + 1), *(void *)&v98[1]);
                goto LABEL_98;
              case 8:
                uint64_t v52 = *v78;
                std::string v60 = (_OWORD *)*((void *)&v98[0] + 1);
                uint64_t v53 = *(void *)&v98[0];
                uint64_t v61 = *(const char **)&v98[1];
                std::string v54 = (void *)((char *)v97 + (*v77 >> 1));
                if (*v77) {
                  uint64_t v52 = *(uint64_t (**)(void))(*v54 + v52);
                }
                uint64_t v68 = FastMathFlags;
                goto LABEL_91;
              case 9:
                __int16 v62 = *v78;
                std::string v65 = (void *)((char *)v97 + (*v77 >> 1));
                if (*v77) {
                  __int16 v62 = *(uint64_t (**)(void))(*v65 + v62);
                }
                uint64_t v63 = v98;
                uint64_t v64 = "";
                uint64_t v67 = 0;
LABEL_97:
                uint64_t v58 = ((uint64_t (*)(void *, _OWORD *, const char *, uint64_t))v62)(v65, v63, v64, v67);
                goto LABEL_98;
              case 0xA:
                uint64_t v52 = *v78;
                uint64_t v53 = *(void *)v24;
                std::string v54 = (void *)((char *)v97 + (*v77 >> 1));
                if (*v77) {
                  uint64_t v52 = *(uint64_t (**)(void))(*v54 + v52);
                }
                std::string v60 = v98;
                uint64_t v61 = "";
                uint64_t v68 = 0;
LABEL_91:
                uint64_t v58 = ((uint64_t (*)(void *, uint64_t, _OWORD *, const char *, uint64_t))v52)(v54, v53, v60, v61, v68);
LABEL_98:
                FPTrunc = (llvm::Value *)v58;
                break;
              default:
                FPTrunc = 0;
                break;
            }
            std::string v69 = (char *)v97 + *(void *)(*(void *)v97 - 24);
            long long v83 = *(_OWORD *)(v69 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v84, (llvm::IRBuilderBase *)(v69 + 40));
            int v85 = *((_DWORD *)v69 + 34);
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v83, (uint64_t)v92);
            if (v84) {
              llvm::MetadataTracking::untrack();
            }
            if (v39)
            {
              uint64_t v70 = *(void *)v24;
              if (v20 && (*(_DWORD *)(v70 + 8) & 0xFE) == 0x12) {
                uint64_t v70 = **(void **)(v70 + 16);
              }
              __int16 v90 = 257;
              FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v92, FPTrunc, (llvm::Type *)v70, (const llvm::Twine *)v89);
              if (!v20) {
                goto LABEL_109;
              }
            }
            else if (!v20)
            {
              goto LABEL_109;
            }
            __int16 v90 = 257;
            std::string v71 = (llvm::Value *)llvm::ConstantInt::get();
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v92, v82, FPTrunc, v71, (const llvm::Twine *)v89);
LABEL_109:
            uint64_t v27 = (uint64_t)FPTrunc;
          }
        }
        if (*(void *)v24 != v96[1]) {
          llvm::Value::replaceAllUsesWith();
        }
        llvm::Instruction::eraseFromParent(v24);
        uint64_t v22 = v76;
        if (!v76) {
          goto LABEL_113;
        }
      }
    }
LABEL_120:
    ++v3;
  }
  while (v3 != 40);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v96);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v95);
  if (v92[0] != v93) {
    free(v92[0]);
  }
}

uint64_t AGCLLVMUserComputeKernelG10::buildQuadElementG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  int v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = AGCLLVMGen3TargetLowerer::buildQuadElement(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserComputeKernelG10::buildSimdGroupIndexInThreadgroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  int v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type *))(*(void *)v5 + 1544))(v5, &v9, a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserComputeKernelG10::buildThreadIndexInSimdGroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  int v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type *))(*(void *)v5 + 1536))(v5, &v9, a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserComputeKernelG10::buildQuadGroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  int v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = AGCLLVMGen3TargetLowerer::buildQuadGroup(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserComputeKernelG10::buildDispatchSimdgroupsPerThreadgroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  return AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<5u>(this, a2, 1);
}

uint64_t AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<5u>(AGCLLVMUserComputeKernelG10 *a1, llvm::Type *a2, int a3)
{
  uint64_t v5 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  if (a3)
  {
    int v6 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(a1, a2, 0);
    uint64_t v7 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(a1, a2, 1);
    __int16 v21 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v20);
    long long v9 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    uint64_t v10 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(a1, a2, 2);
  }
  else
  {
    int v11 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalSizeG10(a1, a2, 0);
    int v12 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalSizeG10(a1, a2, 1);
    __int16 v21 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v11, v12, (const llvm::Twine *)v20);
    long long v9 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    uint64_t v10 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalSizeG10(a1, a2, 2);
  }
  __int16 v21 = 257;
  unsigned int v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Mul, v10, (const llvm::Twine *)v20);
  uint64_t v14 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v21 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v20);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  v19[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v14, Add, v17, (const llvm::Twine *)v19);
}

uint64_t AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  int v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildThreadgroupDispatchSize(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMUserComputeKernelG10::buildLocalSizeG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  int v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildLocalSize(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMUserComputeKernelG10::buildDispatchQuadgroupsPerThreadgroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  return AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<2u>(this, a2, 1);
}

uint64_t AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<2u>(AGCLLVMUserComputeKernelG10 *a1, llvm::Type *a2, int a3)
{
  uint64_t v5 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  if (a3)
  {
    uint64_t v6 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(a1, a2, 0);
    uint64_t v7 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(a1, a2, 1);
    __int16 v21 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v20);
    uint64_t v9 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    uint64_t v10 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(a1, a2, 2);
  }
  else
  {
    long long v11 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalSizeG10(a1, a2, 0);
    uint64_t v12 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalSizeG10(a1, a2, 1);
    __int16 v21 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v11, v12, (const llvm::Twine *)v20);
    uint64_t v9 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    uint64_t v10 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalSizeG10(a1, a2, 2);
  }
  __int16 v21 = 257;
  int v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Mul, v10, (const llvm::Twine *)v20);
  uint64_t v14 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v21 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v20);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  v19[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v14, Add, v17, (const llvm::Twine *)v19);
}

uint64_t AGCLLVMUserComputeKernelG10::buildSimdgroupsPerThreadgroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  return AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<5u>(this, a2, 0);
}

uint64_t AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  return AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<2u>(this, a2, 0);
}

uint64_t AGCLLVMUserComputeKernelG10::buildGroupIDG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  int v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMUserComputeKernelG10::buildNumGroupsG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, unsigned int a3)
{
  uint64_t v6 = (llvm::Value *)AGCLLVMUserShader::buildGlobalSizeCommon(this, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232), a3, 0, 0);
  uint64_t v7 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(this, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232), a3);
  int v8 = (AGCLLVMUserComputeKernelG10 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v17 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v8, v6, v7, (const llvm::Twine *)v16);
  uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
  v15[16] = 257;
  uint64_t Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v8, Add, v10, (const llvm::Twine *)v15);
  uint64_t v12 = AGCLLVMUserComputeKernelG10::buildFastDivideThreadgroupSize(this, Sub, v7);
  int v13 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  __int16 v17 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v13, 38, v12, (uint64_t)a2, (uint64_t)v16);
}

uint64_t AGCLLVMUserComputeKernelG10::buildFastDivideThreadgroupSize(AGCLLVMUserComputeKernelG10 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
  if (!*((void *)this + 547))
  {
    v30[0] = "agc.fast_integer_divide_buffer_pointer";
    __int16 v31 = 259;
    unsigned int v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400)
                                            + 824)
                              + 376))();
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v6, (const llvm::Twine *)v30, v7, 0, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelG10 *)((char *)this + 4360), (uint64_t)GlobalBufferBinding);
  }
  uint64_t v9 = *((void *)this + 547);
  uint64_t v10 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v31 = 257;
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v10, v6, v9, 0, (uint64_t)v30);
  uint64_t v12 = (AGCLLVMUserComputeKernelG10 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  int v13 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  uint64_t Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v12, a3, v13, (const llvm::Twine *)v30);
  uint64_t v15 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v16 = (llvm::Type *)*((void *)v15 + 35);
  __int16 v31 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v15 + 40), v16, AlignedLoad, Sub, (const llvm::Twine *)v30);
  uint64_t v18 = (char *)this + *(void *)(*(void *)this - 24);
  BOOL v19 = (llvm::Type *)*((void *)v18 + 35);
  __int16 v31 = 257;
  int v20 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v18 + 5, v19, GEP, 0, (uint64_t)v30);
  __int16 v21 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v31 = 257;
  uint64_t v22 = (llvm::IRBuilderBase *)(v21 + 40);
  uint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v22, v20, v23, (const llvm::Twine *)v30);
  uint64_t v25 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v31 = 257;
  int v26 = (llvm::IRBuilderBase *)(v25 + 40);
  uint64_t v27 = (llvm::Value *)llvm::ConstantInt::get();
  int v28 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v26, v20, v27, (const llvm::Twine *)v30);
  return AGCLLVMObject::buildMulShiftDiv((AGCLLVMUserComputeKernelG10 *)((char *)this + *(void *)(*(void *)this - 24)), a2, Element, v28);
}

uint64_t AGCLLVMUserComputeKernelG10::buildLocalLinearIDG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = AGCLLVMGen3TargetLowerer::buildLocalLinearID(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserComputeKernelG10::buildLocalIDG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  int v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type *, uint64_t))(*(void *)v7 + 256))(v7, &v11, a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMUserComputeKernelG10::buildGlobalIDG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  int v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildGlobalID(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMUserComputeKernelG10::buildGlobalSizeG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, unsigned int a3)
{
  return AGCLLVMUserShader::buildGlobalSizeCommon(this, a2, a3, 0, 0);
}

uint64_t AGCLLVMUserComputeKernelG10::setupImageBlocks(AGCLLVMUserComputeKernelG10 *this)
{
  if (!*((_DWORD *)this + 1096)) {
    return 1;
  }
  uint64_t v2 = 0;
  uint64_t v3 = "air.imageblock_data";
  while (1)
  {
    strlen(v3);
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v5 = *(void *)(Function + 8);
      if (v5) {
        break;
      }
    }
LABEL_10:
    uint64_t v9 = v2 + 1;
    uint64_t v3 = (&AGCLLVMUserComputeKernelG10::setupImageBlocks(void)::disallowed_functions_with_msaa_rates)[2 * v2 + 2];
    uint64_t v2 = 1;
    if (v9 == 2)
    {
      uint64_t v10 = 0;
      while (1)
      {
        strlen(AGCLLVMUserComputeKernelG10::setupImageBlocks(void)::disallowed_function_list[v10]);
        uint64_t v11 = llvm::Module::getFunction();
        if (v11)
        {
          if (*(void *)(v11 + 8)) {
            break;
          }
        }
        if (++v10 == 3) {
          operator new();
        }
      }
      goto LABEL_16;
    }
  }
  while (1)
  {
    uint64_t v6 = *(void *)(v5 + 24);
    uint64_t v5 = *(void *)(v5 + 8);
    if (*(void *)(v6 + 8))
    {
      uint64_t v7 = *(void *)(v6
                     - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)
                     + 32
                     * LOBYTE((&AGCLLVMUserComputeKernelG10::setupImageBlocks(void)::disallowed_functions_with_msaa_rates)[2 * v2 + 1]));
      int v8 = (void *)(v7 + 24);
      if (*(_DWORD *)(v7 + 32) >= 0x41u) {
        int v8 = (void *)*v8;
      }
      if ((*(_DWORD *)v8 - 1) < 2) {
        break;
      }
    }
    if (!v5) {
      goto LABEL_10;
    }
  }
LABEL_16:
  std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), "MSAA imageblock features are not available to compute kernels");
  return 0;
}

uint64_t AGCLLVMUserComputeKernelG10::setupShaderInputs(AGCLLVMUserComputeKernelG10 *this)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 22);
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    uint64_t v4 = *((void *)this + 22);
    uint64_t v3 = *(void *)(v2 + 88);
    if (*(_WORD *)(v4 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    }
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 88);
  }
  for (uint64_t i = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96); v3 != i; v3 += 40)
  {
    uint64_t v6 = *(void *)(*((void *)this + 11) + 8 * *(unsigned int *)(v3 + 32));
    if (v6)
    {
      uint64_t v7 = *(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8);
      if (!*(unsigned char *)v7)
      {
        uint64_t String = (void *)llvm::MDString::getString(v7);
        if (v9 == 14 && *String == 0x67616D692E726961 && *(void *)((char *)String + 6) == 0x6B636F6C62656761)
        {
          LODWORD(v100) = 2;
          if (*(_DWORD *)(v6 + 8) >= 3u)
          {
            do
            {
              if (parseMDInt("air.imageblock_data_size", v6, (unsigned int *)&v100, (_DWORD *)this + 1096)) {
                break;
              }
              LODWORD(v100) = v100 + 1;
            }
            while (v100 < *(_DWORD *)(v6 + 8));
          }
          llvm::UndefValue::get();
          llvm::Value::replaceAllUsesWith();
        }
      }
    }
  }
  if (!*((_DWORD *)this + 1096)) {
    return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
  }
  uint64_t v11 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  if (*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)v11 + 680))(v11) + 2392)) {
    return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
  }
  uint64_t v12 = *(void *)(*((void *)this + 22) + 80);
  int v13 = v12 ? (llvm::BasicBlock *)(v12 - 24) : 0;
  uint64_t v14 = (char **)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v13);
  llvm::IRBuilderBase::SetInsertPoint(v14, (char *)v13, FirstInsertionPt);
  unsigned int v94 = 128;
  v93[0] = (llvm *)MEMORY[0x1CB79F270](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::initEmpty((uint64_t)v93);
  v95[0] = 0;
  v95[24] = 0;
  uint64_t v16 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v17 = v16 + 8;
  uint64_t v18 = *(void *)(v16 + 16);
  if (v18 == v16 + 8)
  {
    int v80 = 1;
  }
  else
  {
    BOOL v19 = 0;
    int v20 = 0;
    unint64_t v92 = 0;
    uint64_t AlignedLoad = 0;
    uint64_t v89 = v16 + 8;
    do
    {
      if (v18) {
        uint64_t v22 = (uint64_t *)(v18 - 56);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = *v22;
      if (*v22)
      {
        int v24 = *(_DWORD *)(v23 + 8);
        if ((v24 & 0xFE) == 0x12) {
          int v24 = *(_DWORD *)(**(void **)(v23 + 16) + 8);
        }
        if ((v24 & 0xFFFFFF00) == 0x300 && v22[1])
        {
          uint64_t v91 = v22;
          uint64_t v25 = *(void *)this;
          if (!AlignedLoad)
          {
            uint64_t v100 = "agc.lib_size_in_bytes";
            LOWORD(v104) = 259;
            int v26 = (llvm::Type **)AGCLLVMUserComputeKernelBase::constructSHGlobal(this);
            uint64_t v27 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 8);
            LOWORD(v104) = 257;
            uint64_t v29 = AGCLLVMBuilder::tryDeducePointeeType(v26, v28);
            uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v27 + 4, v29, (uint64_t)v26, 0, (uint64_t)&v100);
            uint64_t v25 = *(void *)this;
          }
          unint64_t v30 = (char *)this + *(void *)(v25 - 24) + 40;
          uint64_t v31 = llvm::PointerType::get();
          LOWORD(v104) = 257;
          uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v30, 49, (uint64_t)v91, v31, (uint64_t)&v100);
          int v33 = (char *)this + *(void *)(*(void *)this - 24);
          __int16 v34 = (llvm::Type *)*((void *)v33 + 27);
          LOWORD(v104) = 257;
          __int16 v90 = AlignedLoad;
          uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v33 + 40), v34, Cast, AlignedLoad, (const llvm::Twine *)&v100);
          uint64_t v36 = (char *)this + *(void *)(*(void *)this - 24) + 40;
          LOWORD(v104) = 257;
          uint64_t v37 = llvm::IRBuilderBase::CreateCast((uint64_t)v36, 49, GEP, v23, (uint64_t)&v100);
          uint64_t v38 = (llvm::Use *)v91[1];
          while (v38)
          {
            while (1)
            {
              while (1)
              {
                int v39 = v38;
                uint64_t v38 = (llvm::Use *)*((void *)v38 + 1);
                uint64_t v40 = *((void *)v39 + 3);
                unsigned int v41 = *(unsigned __int8 *)(v40 + 16);
                if (v41 < 0x1C) {
                  break;
                }
                unsigned int OperandNo = llvm::Use::getOperandNo(v39);
                llvm::User::setOperand(v40, OperandNo, 0);
                uint64_t v43 = *((void *)v39 + 3);
                unsigned int v44 = llvm::Use::getOperandNo(v39);
                llvm::User::setOperand(v43, v44, v37);
                if (!v38) {
                  goto LABEL_62;
                }
              }
              if (v41 != 5) {
                goto LABEL_104;
              }
              if ((llvm::Value *)v40 != Cast) {
                break;
              }
LABEL_45:
              if (!v38) {
                goto LABEL_62;
              }
            }
            if ((unint64_t)v20 < v92)
            {
              *v20++ = v40;
              goto LABEL_45;
            }
            uint64_t v45 = v37;
            uint64_t v46 = Cast;
            uint64_t v47 = v20 - v19;
            unint64_t v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61) {
LABEL_133:
            }
              abort();
            if ((uint64_t)(v92 - (void)v19) >> 2 > v48) {
              unint64_t v48 = (uint64_t)(v92 - (void)v19) >> 2;
            }
            if (v92 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v49 = v48;
            }
            if (v49) {
              unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v49);
            }
            else {
              uint64_t v50 = 0;
            }
            uint64_t v51 = (uint64_t *)(v49 + 8 * v47);
            *uint64_t v51 = v40;
            uint64_t v52 = v51 + 1;
            while (v20 != v19)
            {
              uint64_t v53 = *--v20;
              *--uint64_t v51 = v53;
            }
            unint64_t v92 = v49 + 8 * v50;
            if (v19) {
              operator delete(v19);
            }
            BOOL v19 = v51;
            int v20 = v52;
            uint64_t Cast = v46;
            uint64_t v37 = v45;
          }
LABEL_62:
          *llvm::ValueMap<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v93, (llvm::Value *)v91) = v37;
          uint64_t v17 = v89;
          uint64_t AlignedLoad = v90;
        }
      }
      uint64_t v18 = *(void *)(v18 + 8);
    }
    while (v18 != v17);
    if (v19 == v20)
    {
LABEL_103:
      int v80 = 1;
    }
    else
    {
      while (1)
      {
        uint64_t v55 = *--v20;
        uint64_t v54 = v55;
        uint64_t v56 = (uint64_t *)*llvm::ValueMap<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v93, *(llvm::Value **)(v55 - 32 * (*(_DWORD *)(v55 + 20) & 0x7FFFFFF)));
        int v57 = *(unsigned __int16 *)(v55 + 18);
        switch(v57)
        {
          case '""':
            int v59 = (uint64_t **)&v102;
            uint64_t v100 = &v102;
            uint64_t v101 = 0x1000000000;
            unint64_t v60 = *(_DWORD *)(v54 + 20) & 0x7FFFFFF;
            if (v60 < 2)
            {
              uint64_t v63 = 0;
            }
            else
            {
              uint64_t v61 = v54 + 32;
              for (unint64_t j = 1; j < v60; ++j)
              {
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v100, *(void *)(v61 - 32 * v60));
                unint64_t v60 = *(_DWORD *)(v54 + 20) & 0x7FFFFFF;
                v61 += 32;
              }
              int v59 = (uint64_t **)v100;
              uint64_t v63 = v101;
            }
            LOWORD(v99) = 257;
            uint64_t v65 = *v56;
            if ((*(_DWORD *)(*v56 + 8) & 0xFE) == 0x12) {
              uint64_t v65 = **(void **)(v65 + 16);
            }
            uint64_t v58 = llvm::GetElementPtrInst::Create(**(void **)(v65 + 16), v56, v59, v63);
            if (v100 != &v102) {
              free(v100);
            }
            break;
          case '5':
            llvm::ConstantExpr::getPredicate((llvm::ConstantExpr *)v54);
            uint64_t v58 = llvm::User::operator new((llvm::User *)0x40);
            LOWORD(v104) = 257;
            llvm::CmpInst::makeCmpResultType((llvm::CmpInst *)*v56, v64);
            llvm::CmpInst::CmpInst();
            break;
          case '1':
            uint64_t v58 = llvm::User::operator new((llvm::User *)0x40);
            LOWORD(v104) = 257;
            llvm::BitCastInst::BitCastInst();
            break;
          default:
            goto LABEL_104;
        }
        llvm::Instruction::insertAfter();
        uint64_t v66 = *(llvm::Use **)(v54 + 8);
        if (v66) {
          break;
        }
LABEL_102:
        *llvm::ValueMap<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v93, (llvm::Value *)v54) = v58;
        if (v19 == v20) {
          goto LABEL_103;
        }
      }
      while (1)
      {
        while (1)
        {
          uint64_t v67 = v66;
          uint64_t v66 = (llvm::Use *)*((void *)v66 + 1);
          uint64_t v68 = *((void *)v67 + 3);
          unsigned int v69 = *(unsigned __int8 *)(v68 + 16);
          if (v69 < 0x1C) {
            break;
          }
          unsigned int v70 = llvm::Use::getOperandNo(v67);
          llvm::User::setOperand(v68, v70, 0);
          uint64_t v71 = *((void *)v67 + 3);
          unsigned int v72 = llvm::Use::getOperandNo(v67);
          llvm::User::setOperand(v71, v72, v58);
          if (!v66) {
            goto LABEL_102;
          }
        }
        if (v69 != 5) {
          break;
        }
        if ((unint64_t)v20 >= v92)
        {
          uint64_t v73 = v20 - v19;
          unint64_t v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 61) {
            goto LABEL_133;
          }
          if ((uint64_t)(v92 - (void)v19) >> 2 > v74) {
            unint64_t v74 = (uint64_t)(v92 - (void)v19) >> 2;
          }
          if (v92 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v75 = v74;
          }
          if (v75) {
            unint64_t v75 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v75);
          }
          else {
            uint64_t v76 = 0;
          }
          uint64_t v77 = (uint64_t *)(v75 + 8 * v73);
          uint64_t *v77 = v68;
          uint64_t v78 = v77 + 1;
          while (v20 != v19)
          {
            uint64_t v79 = *--v20;
            *--uint64_t v77 = v79;
          }
          unint64_t v92 = v75 + 8 * v76;
          if (v19) {
            operator delete(v19);
          }
          BOOL v19 = v77;
          int v20 = v78;
          if (!v66) {
            goto LABEL_102;
          }
        }
        else
        {
          *v20++ = v68;
          if (!v66) {
            goto LABEL_102;
          }
        }
      }
LABEL_104:
      int v80 = 0;
    }
    if (v19) {
      operator delete(v19);
    }
  }
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v95);
  uint64_t v81 = v93[0];
  if (v94)
  {
    uint64_t v101 = 2;
    uint64_t v102 = 0;
    uint64_t v103 = -4096;
    uint64_t v104 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = &unk_1F25BE950;
    v97[0] = 2;
    v97[1] = 0;
    uint64_t v98 = -8192;
    uint64_t v96 = &unk_1F25BE950;
    uint64_t v82 = (uint64_t *)((char *)v93[0] + 24);
    uint64_t v83 = 48 * v94;
    do
    {
      uint64_t v84 = *v82;
      if (*v82 != -8192 && v84 != -4096 && v84 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v82 - 2));
      }
      v82 += 6;
      v83 -= 48;
    }
    while (v83);
    if (v98 != -8192 && v98 != -4096 && v98 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v97);
    }
    if (v103 != -8192 && v103 != -4096)
    {
      if (v103) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v101);
      }
    }
    uint64_t v81 = v93[0];
    uint64_t v87 = 48 * v94;
  }
  else
  {
    uint64_t v87 = 0;
  }
  llvm::deallocate_buffer(v81, (void *)v87);
  if (v80) {
    return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
  }
  else {
    return 0;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::initEmpty(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 48 * v1;
    BOOL result = *(void *)result + 8;
    do
    {
      uint64_t v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_1F25BE950;
      *((void *)v4 + 3) = v9;
      uint64_t v5 = (char *)v4 + 40;
      BOOL result = (uint64_t)v4 + 48;
      v2 += 48;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t llvm::User::setOperand(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0) {
    uint64_t v4 = *(void *)(result - 8);
  }
  else {
    uint64_t v4 = result - 32 * (v3 & 0x7FFFFFF);
  }
  uint64_t v5 = v4 + 32 * a2;
  if (*(void *)v5)
  {
    **(void **)(v5 + 16) = *(void *)(v5 + 8);
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      *(void *)(v6 + 16) = *(void *)(v5 + 16);
    }
  }
  *(void *)uint64_t v5 = a3;
  if (a3)
  {
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v7 = (void *)(a3 + 8);
    uint64_t v8 = v9;
    uint64_t v10 = v4 + 32 * a2;
    *(void *)(v10 + 8) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v10 + 8;
    }
    *(void *)(v10 + 16) = v7;
    *uint64_t v7 = v5;
  }
  return result;
}

void *llvm::ValueMap<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  uint64_t v7 = &unk_1F25BE950;
  uint64_t v10 = a1;
  uint64_t v11 = 0;
  char v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  uint64_t v4 = v11;
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, (uint64_t)v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 5;
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v12, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v14 = v4;
  BOOL v19 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v13, &v19);
  if (result) {
    uint64_t v6 = v19;
  }
  else {
    uint64_t v6 = (void *)(*(void *)v4 + 48 * v4[2].u32[0]);
  }
  uint64_t v7 = v14;
  if ((void *)(*(void *)v14 + 48 * v14[2].u32[0]) != v6)
  {
    uint64_t v8 = v6[5];
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -8192;
    uint64_t v22 = 0;
    BOOL v19 = &unk_1F25BE950;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 1), v20);
    uint64_t v9 = v21;
    v6[4] = v22;
    if (v9 != -8192 && v9 != -4096 && v9) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    uint64_t v10 = (uint64_t)v14;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v15, a2);
    uint64_t v15 = &unk_1F25BE950;
    uint64_t v18 = v10;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v20, (LODWORD(v16[0]) >> 1) & 3, v16);
    BOOL v19 = &unk_1F25BE950;
    uint64_t v22 = v18;
    uint64_t v23 = v8;
    uint64_t v24 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)v10, *(_DWORD *)(v10 + 16), v21, &v24);
    if ((result & 1) == 0)
    {
      uint64_t v11 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(v10, (uint64_t)&v19, v24);
      uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v11 + 1), v20);
      v11[4] = v22;
      v11[5] = v23;
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    if (v17 != -8192 && v17 != -4096 && v17) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
    }
  }
  if (v13 != -8192 && v13 != -4096)
  {
    if (v13) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x1CB79F270]((void *)v8, 48 * v8, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::initEmpty(a1);
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -4096;
    uint64_t v22 = 0;
    uint64_t v18 = 0;
    BOOL v19 = &unk_1F25BE950;
    v16[0] = 2;
    v16[1] = 0;
    uint64_t v17 = -8192;
    if (v3)
    {
      uint64_t v9 = (uint64_t *)((char *)v4 + 24);
      uint64_t v10 = 48 * v3;
      do
      {
        uint64_t v11 = *v9;
        if (*v9 != v21 && v11 != v17)
        {
          uint64_t v23 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v23);
          uint64_t v13 = v23;
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v23 + 8), v9 - 2);
          *(void *)(v13 + 32) = v9[1];
          *(void *)(v13 + 40) = v9[2];
          ++*(_DWORD *)(a1 + 8);
          uint64_t v11 = *v9;
        }
        if (v11 != -8192 && v11 != -4096 && v11 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
        }
        v9 += 6;
        v10 -= 48;
      }
      while (v10);
      if (v17 != -8192 && v17 != -4096 && v17) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
      }
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    return llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::initEmpty(a1);
  }
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v9 = v2;
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if (result)
  {
    uint64_t v4 = v10;
    v11[0] = 2;
    v11[1] = 0;
    uint64_t v12 = -8192;
    uint64_t v13 = 0;
    uint64_t v10 = &unk_1F25BE950;
    uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v11);
    uint64_t v5 = v12;
    v4[4] = v13;
    if (v5 != -8192 && v5 != -4096 && v5) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  return result;
}

uint64_t AGCLLVMUserComputeKernelG10::wrapperFunctionType(AGCLLVMUserComputeKernelG10 *this)
{
  return llvm::FunctionType::get();
}

AGCLLVMUserComputeKernelG10 *AGCLLVMUserComputeKernelG10::addWrapperPostfix(AGCLLVMUserComputeKernelG10 *this)
{
  _DWORD v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v2 = (unsigned char *)*((void *)v1 + 50);
  if (v2[1793])
  {
    uint64_t v3 = this;
    uint64_t v4 = v1 + 32;
    long long v21 = *(_OWORD *)(v1 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v22, (llvm::IRBuilderBase *)(v1 + 40));
    int v23 = *((_DWORD *)v4 + 26);
    (*(void (**)(unsigned char *, long long *))(*(void *)v2 + 312))(v2, &v21);
    if (v22) {
      llvm::MetadataTracking::untrack();
    }
    v24[0] = llvm::ConstantInt::get();
    v24[1] = llvm::ConstantInt::get();
    AGCLLVMObject::buildWGBarrier((uint64_t)v3 + *(void *)(*(void *)v3 - 24), (uint64_t)v24, 2);
    uint64_t v5 = (uint64_t)v3 + *(void *)(*(void *)v3 - 24) + 40;
    uint64_t v6 = llvm::ConstantInt::get();
    uint64_t v7 = llvm::PointerType::get();
    __int16 v20 = 257;
    llvm::IRBuilderBase::CreateCast(v5, 48, v6, v7, (uint64_t)v19);
    v19[0] = "agc.lm_size";
    __int16 v20 = 259;
    uint64_t v8 = (llvm::Type **)AGCLLVMUserComputeKernelBase::constructSHGlobal(v3);
    uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v9 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalLinearIDG10(v3, *(llvm::Type **)((char *)v3 + *(void *)(*(void *)v3 - 24) + 232));
    uint64_t v10 = (AGCLLVMUserComputeKernelG10 *)((char *)v3 + *(void *)(*(void *)v3 - 24) + 40);
    __int16 v20 = 257;
    llvm::IRBuilderBase::CreateMul(v10, v9, v18, (const llvm::Twine *)v19);
    uint64_t v11 = (uint64_t *)((char *)v3 + *(void *)(*(void *)v3 - 24));
    __int16 v20 = 257;
    uint64_t v13 = AGCLLVMBuilder::tryDeducePointeeType(v8, v12);
    llvm::IRBuilderBase::CreateAlignedLoad(v11 + 5, v13, (uint64_t)v8, 0, (uint64_t)v19);
    uint64_t v14 = (llvm::Type **)((char *)v3 + *(void *)(*(void *)v3 - 24));
    uint64_t v15 = (llvm::IRBuilderBase *)(v14 + 5);
    uint64_t v16 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<5u>(v3, v14[29], 0);
    uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v20 = 257;
    llvm::IRBuilderBase::CreateMul(v15, v16, v17, (const llvm::Twine *)v19);
    v19[0] = "gin793.loop.end";
    __int16 v20 = 259;
    operator new();
  }
  return this;
}

uint64_t AGCLLVMUserComputeKernelG10::initCompile(AGCLLVMUserComputeKernelG10 *this)
{
  AGCLLVMUserShader::setUniformAtomicsMode(this);
  return AGCLLVMUserComputeKernelBase::initCompile(this);
}

void AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(AGCLLVMUserComputeKernelG10 *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4424));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4424));
}

uint64_t virtual thunk to'AGCLLVMDriverComputeKernel::enableSoftFaultOptimization(AGCLLVMDriverComputeKernel *this)
{
  return 0;
}

uint64_t virtual thunk to'AGCLLVMDriverComputeKernel::getShaderType(AGCLLVMDriverComputeKernel *this)
{
  return 22;
}

const char *virtual thunk to'AGCLLVMDriverTGSizeOptimizationShader::dumpType(AGCLLVMDriverTGSizeOptimizationShader *this)
{
  return "tg-size-optimization-driver";
}

void virtual thunk to'AGCLLVMDriverTGSizeOptimizationShader::~AGCLLVMDriverTGSizeOptimizationShader(AGCLLVMDriverTGSizeOptimizationShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259C380;
  v1[557] = &unk_1F259C6E0;
  v1[561] = &unk_1F259C7D0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259C7E8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259C380;
  v1[557] = &unk_1F259C6E0;
  v1[561] = &unk_1F259C7D0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259C7E8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

void virtual thunk to'AGCLLVMDriverComputeKernel::~AGCLLVMDriverComputeKernel(AGCLLVMDriverComputeKernel *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259C2F8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4424));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMDriverComputeKernel *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)&off_1F259C2F8);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 4424);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t AGCLLVMDriverComputeKernel::getMaxLocalMemorySize(AGCLLVMDriverComputeKernel *this)
{
  return *(unsigned int *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 860);
}

uint64_t AGCLLVMDriverComputeKernel::enableSoftFaultOptimization(AGCLLVMDriverComputeKernel *this)
{
  return 0;
}

uint64_t AGCLLVMDriverComputeKernel::getShaderType(AGCLLVMDriverComputeKernel *this)
{
  return 22;
}

void AGCLLVMDriverComputeKernel::~AGCLLVMDriverComputeKernel(AGCLLVMDriverComputeKernel *this)
{
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259C2F8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4424));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259C2F8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4424));
}

const char *AGCLLVMDriverTGSizeOptimizationShader::dumpType(AGCLLVMDriverTGSizeOptimizationShader *this)
{
  return "tg-size-optimization-driver";
}

uint64_t AGCLLVMDriverTGSizeOptimizationShader::replaceBuiltins(AGCLLVMDriverTGSizeOptimizationShader *this)
{
  uint64_t v2 = AGCLLVMUserObject::replaceBuiltins(this);
  if (v2)
  {
    AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(this);
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v4 = (llvm::Function *)Function;
      uint64_t v5 = *(void *)(Function + 8);
      if (v5)
      {
        do
        {
          uint64_t v6 = *(void *)(v5 + 8);
          uint64_t v7 = *(llvm::Instruction **)(v5 + 24);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMDriverTGSizeOptimizationShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v7);
          uint64_t v8 = (llvm::Value **)((char *)v7 - 32 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF));
          AGCLLVMUserComputeKernelG10::buildFastDivideThreadgroupSize(this, *v8, v8[4]);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v7);
          uint64_t v5 = v6;
        }
        while (v6);
      }
      llvm::Function::eraseFromParent(v4);
    }
  }
  return v2;
}

uint64_t AGCLLVMDriverTGSizeOptimizationShader::setupShaderInputs(AGCLLVMDriverTGSizeOptimizationShader *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

void AGCLLVMDriverTGSizeOptimizationShader::~AGCLLVMDriverTGSizeOptimizationShader(AGCLLVMDriverTGSizeOptimizationShader *this)
{
  *(void *)this = &unk_1F259C380;
  uint64_t v2 = (AGCLLVMDriverTGSizeOptimizationShader *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259C6E0;
  *((void *)this + 561) = &unk_1F259C7D0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259C7E8);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F259C380;
  uint64_t v2 = (AGCLLVMDriverTGSizeOptimizationShader *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259C6E0;
  *((void *)this + 561) = &unk_1F259C7D0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259C7E8);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *this)
{
  return "compute-ei-range-exec";
}

void virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::~AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259D780;
  v1[557] = &unk_1F259DAE0;
  v1[561] = &unk_1F259DBD0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259DBE8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259D780;
  v1[557] = &unk_1F259DAE0;
  v1[561] = &unk_1F259DBD0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259DBE8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

const char *AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *this)
{
  return "compute-ei-range-exec";
}

uint64_t AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::setupShaderInputs(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

void AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::~AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *this)
{
  *(void *)this = &unk_1F259D780;
  uint64_t v2 = (AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259DAE0;
  *((void *)this + 561) = &unk_1F259DBD0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259DBE8);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F259D780;
  uint64_t v2 = (AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259DAE0;
  *((void *)this + 561) = &unk_1F259DBD0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259DBE8);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderGen5::getShaderType(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  return 22;
}

const char *virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderGen5::dumpType(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  return "compute-ei-patch";
}

void virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderGen5::~AGCLLVMDriverExecuteIndirectComputeShaderGen5(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259DC80;
  v1[557] = &unk_1F259DFE0;
  v1[561] = &unk_1F259E0D0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259E0E0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259DC80;
  v1[557] = &unk_1F259DFE0;
  v1[561] = &unk_1F259E0D0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259E0E0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

uint64_t AGCLLVMDriverExecuteIndirectComputeShaderGen5::getShaderType(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  return 22;
}

const char *AGCLLVMDriverExecuteIndirectComputeShaderGen5::dumpType(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  return "compute-ei-patch";
}

uint64_t AGCLLVMDriverExecuteIndirectComputeShaderGen5::setupShaderInputs(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

void AGCLLVMDriverExecuteIndirectComputeShaderGen5::~AGCLLVMDriverExecuteIndirectComputeShaderGen5(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  *(void *)this = &unk_1F259DC80;
  uint64_t v2 = (AGCLLVMDriverExecuteIndirectComputeShaderGen5 *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259DFE0;
  *((void *)this + 561) = &unk_1F259E0D0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259E0E0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F259DC80;
  uint64_t v2 = (AGCLLVMDriverExecuteIndirectComputeShaderGen5 *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259DFE0;
  *((void *)this + 561) = &unk_1F259E0D0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259E0E0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *virtual thunk to'AGCLLVMDriverGPUGatherComputeShaderGen3::dumpType(AGCLLVMDriverGPUGatherComputeShaderGen3 *this)
{
  return "gpu-gather-compute-driver-gen3";
}

void virtual thunk to'AGCLLVMDriverGPUGatherComputeShaderGen3::~AGCLLVMDriverGPUGatherComputeShaderGen3(AGCLLVMDriverGPUGatherComputeShaderGen3 *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259E168;
  v1[557] = &unk_1F259E4C8;
  v1[561] = &unk_1F259E5B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259E5D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259E168;
  v1[557] = &unk_1F259E4C8;
  v1[561] = &unk_1F259E5B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259E5D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

const char *AGCLLVMDriverGPUGatherComputeShaderGen3::dumpType(AGCLLVMDriverGPUGatherComputeShaderGen3 *this)
{
  return "gpu-gather-compute-driver-gen3";
}

uint64_t AGCLLVMDriverGPUGatherComputeShaderGen3::setupShaderInputs(AGCLLVMDriverGPUGatherComputeShaderGen3 *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

void AGCLLVMDriverGPUGatherComputeShaderGen3::~AGCLLVMDriverGPUGatherComputeShaderGen3(AGCLLVMDriverGPUGatherComputeShaderGen3 *this)
{
  *(void *)this = &unk_1F259E168;
  uint64_t v2 = (AGCLLVMDriverGPUGatherComputeShaderGen3 *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259E4C8;
  *((void *)this + 561) = &unk_1F259E5B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259E5D0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F259E168;
  uint64_t v2 = (AGCLLVMDriverGPUGatherComputeShaderGen3 *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259E4C8;
  *((void *)this + 561) = &unk_1F259E5B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259E5D0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *virtual thunk to'AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::dumpType(AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *this)
{
  return "geometry-pipeline-emulation-setup-shader";
}

void virtual thunk to'AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::~AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader(AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259E668;
  v1[557] = &unk_1F259E9C8;
  v1[561] = &unk_1F259EAB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259EAD0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259E668;
  v1[557] = &unk_1F259E9C8;
  v1[561] = &unk_1F259EAB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259EAD0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

const char *AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::dumpType(AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *this)
{
  return "geometry-pipeline-emulation-setup-shader";
}

uint64_t AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::setupShaderInputs(AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

uint64_t AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::setupShaderWrapper(AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *this)
{
  uint64_t v2 = AGCLLVMUserObject::setupShaderWrapper(this);
  if (v2)
  {
    uint64_t v3 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)v3 + 416))(v3, *((void *)this + 21), 0x100000002, 0);
  }
  return v2;
}

void AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::~AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader(AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *this)
{
  *(void *)this = &unk_1F259E668;
  uint64_t v2 = (AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259E9C8;
  *((void *)this + 561) = &unk_1F259EAB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259EAD0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F259E668;
  uint64_t v2 = (AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259E9C8;
  *((void *)this + 561) = &unk_1F259EAB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259EAD0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *virtual thunk to'AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::dumpType(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *this)
{
  return "geometry-pipeline-emulation-post-os-shader";
}

void virtual thunk to'AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::~AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259EB68;
  v1[557] = &unk_1F259EEC8;
  v1[561] = &unk_1F259EFB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259EFD0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259EB68;
  v1[557] = &unk_1F259EEC8;
  v1[561] = &unk_1F259EFB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259EFD0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

const char *AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::dumpType(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *this)
{
  return "geometry-pipeline-emulation-post-os-shader";
}

uint64_t AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::setupShaderInputs(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

uint64_t AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::setupShaderWrapper(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *this)
{
  uint64_t v2 = AGCLLVMUserObject::setupShaderWrapper(this);
  if (v2)
  {
    uint64_t v3 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)v3 + 416))(v3, *((void *)this + 21), 0x100000002, 0);
  }
  return v2;
}

void AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::~AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *this)
{
  *(void *)this = &unk_1F259EB68;
  uint64_t v2 = (AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259EEC8;
  *((void *)this + 561) = &unk_1F259EFB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259EFD0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F259EB68;
  uint64_t v2 = (AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259EEC8;
  *((void *)this + 561) = &unk_1F259EFB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259EFD0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *virtual thunk to'AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::dumpType(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *this)
{
  return "geometry-pipeline-emulation-pre-ms-shader";
}

void virtual thunk to'AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::~AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259F068;
  v1[557] = &unk_1F259F3C8;
  v1[561] = &unk_1F259F4B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259F4D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259F068;
  v1[557] = &unk_1F259F3C8;
  v1[561] = &unk_1F259F4B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259F4D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

const char *AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::dumpType(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *this)
{
  return "geometry-pipeline-emulation-pre-ms-shader";
}

uint64_t AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::setupShaderInputs(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

uint64_t AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::setupShaderWrapper(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *this)
{
  uint64_t v2 = AGCLLVMUserObject::setupShaderWrapper(this);
  if (v2)
  {
    uint64_t v3 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)v3 + 416))(v3, *((void *)this + 21), 0x100000002, 0);
  }
  return v2;
}

void AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::~AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *this)
{
  *(void *)this = &unk_1F259F068;
  uint64_t v2 = (AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259F3C8;
  *((void *)this + 561) = &unk_1F259F4B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259F4D0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F259F068;
  uint64_t v2 = (AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259F3C8;
  *((void *)this + 561) = &unk_1F259F4B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259F4D0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *virtual thunk to'AGCLLVMDriverComputeProgressMarkerShaderGen3::dumpType(AGCLLVMDriverComputeProgressMarkerShaderGen3 *this)
{
  return "compute-progress-marker-driver-gen3";
}

void virtual thunk to'AGCLLVMDriverComputeProgressMarkerShaderGen3::~AGCLLVMDriverComputeProgressMarkerShaderGen3(AGCLLVMDriverComputeProgressMarkerShaderGen3 *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259FA68;
  v1[557] = &unk_1F259FDC8;
  v1[561] = &unk_1F259FEB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259FED0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259FA68;
  v1[557] = &unk_1F259FDC8;
  v1[561] = &unk_1F259FEB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259FED0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

const char *AGCLLVMDriverComputeProgressMarkerShaderGen3::dumpType(AGCLLVMDriverComputeProgressMarkerShaderGen3 *this)
{
  return "compute-progress-marker-driver-gen3";
}

uint64_t AGCLLVMDriverComputeProgressMarkerShaderGen3::setupShaderInputs(AGCLLVMDriverComputeProgressMarkerShaderGen3 *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

uint64_t AGCLLVMDriverComputeProgressMarkerShaderGen3::setupShaderWrapper(AGCLLVMDriverComputeProgressMarkerShaderGen3 *this)
{
  uint64_t v2 = AGCLLVMUserObject::setupShaderWrapper(this);
  if (v2)
  {
    uint64_t v3 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v3 + 416))(v3, *((void *)this + 21), 2, 0x100000000);
  }
  return v2;
}

void AGCLLVMDriverComputeProgressMarkerShaderGen3::~AGCLLVMDriverComputeProgressMarkerShaderGen3(AGCLLVMDriverComputeProgressMarkerShaderGen3 *this)
{
  *(void *)this = &unk_1F259FA68;
  uint64_t v2 = (AGCLLVMDriverComputeProgressMarkerShaderGen3 *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259FDC8;
  *((void *)this + 561) = &unk_1F259FEB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259FED0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F259FA68;
  uint64_t v2 = (AGCLLVMDriverComputeProgressMarkerShaderGen3 *)((char *)this + 4456);
  *((void *)this + 557) = &unk_1F259FDC8;
  *((void *)this + 561) = &unk_1F259FEB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259FED0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *virtual thunk to'AGCLLVMDriverComputeControlFlowPredicateShaderGen3::dumpType(AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *this)
{
  return "compute-control-flow-predicate-gen3";
}

void virtual thunk to'AGCLLVMDriverComputeControlFlowPredicateShaderGen3::~AGCLLVMDriverComputeControlFlowPredicateShaderGen3(AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259FF68;
  v1[558] = &unk_1F25A02C8;
  v1[562] = &unk_1F25A03B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F25A03D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 558));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F259FF68;
  v1[558] = &unk_1F25A02C8;
  v1[562] = &unk_1F25A03B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F25A03D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 558));
}

const char *AGCLLVMDriverComputeControlFlowPredicateShaderGen3::dumpType(AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *this)
{
  return "compute-control-flow-predicate-gen3";
}

uint64_t AGCLLVMDriverComputeControlFlowPredicateShaderGen3::setupShaderInputs(AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

uint64_t AGCLLVMDriverComputeControlFlowPredicateShaderGen3::setupShaderWrapper(AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *this)
{
  uint64_t result = AGCLLVMUserObject::setupShaderWrapper(this);
  if (result)
  {
    size_t v3 = strlen(off_1E65EAE70[*((unsigned int *)this + 1114)]);
    uint64_t v4 = (llvm::Function *)AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this + *(void *)(*(void *)this - 24) + 32, (uint64_t)off_1E65EAE70[*((unsigned int *)this + 1114)], v3, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 208), *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232), *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232));
    if (*((_WORD *)v4 + 9)) {
      llvm::Function::BuildLazyArguments(v4);
    }
    llvm::Value::setName();
    llvm::Value::setName();
    operator new();
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateRet(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 8);
  uint64_t v5 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x1CB79EB60](v5, v4, a2, 0);
  __int16 v8 = 257;
  return llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v5, (uint64_t)v7);
}

void AGCLLVMDriverComputeControlFlowPredicateShaderGen3::~AGCLLVMDriverComputeControlFlowPredicateShaderGen3(AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *this)
{
  *(void *)this = &unk_1F259FF68;
  uint64_t v2 = (AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *)((char *)this + 4464);
  *((void *)this + 558) = &unk_1F25A02C8;
  *((void *)this + 562) = &unk_1F25A03B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F25A03D0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F259FF68;
  uint64_t v2 = (AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *)((char *)this + 4464);
  *((void *)this + 558) = &unk_1F25A02C8;
  *((void *)this + 562) = &unk_1F25A03B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F25A03D0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *virtual thunk to'AGCLLVMDriverComputeProgressMarkerShaderLegacy::dumpType(AGCLLVMDriverComputeProgressMarkerShaderLegacy *this)
{
  return "compute-progress-marker-driver-legacy";
}

void virtual thunk to'AGCLLVMDriverComputeProgressMarkerShaderLegacy::~AGCLLVMDriverComputeProgressMarkerShaderLegacy(AGCLLVMDriverComputeProgressMarkerShaderLegacy *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F25A0468;
  v1[603] = &unk_1F25A07C8;
  v1[607] = &unk_1F25A08B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1F25A08D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 603));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F25A0468;
  v1[603] = &unk_1F25A07C8;
  v1[607] = &unk_1F25A08B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1F25A08D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 603));
}

const char *AGCLLVMDriverComputeProgressMarkerShaderLegacy::dumpType(AGCLLVMDriverComputeProgressMarkerShaderLegacy *this)
{
  return "compute-progress-marker-driver-legacy";
}

uint64_t AGCLLVMDriverComputeProgressMarkerShaderLegacy::setupShaderInputs(AGCLLVMDriverComputeProgressMarkerShaderLegacy *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4792);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

uint64_t AGCLLVMDriverComputeProgressMarkerShaderLegacy::setupShaderWrapper(AGCLLVMDriverComputeProgressMarkerShaderLegacy *this)
{
  uint64_t v2 = AGCLLVMUserObject::setupShaderWrapper(this);
  if (v2)
  {
    uint64_t v3 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v3 + 416))(v3, *((void *)this + 21), 0x100000002, 0x100000000);
  }
  return v2;
}

void AGCLLVMDriverComputeProgressMarkerShaderLegacy::~AGCLLVMDriverComputeProgressMarkerShaderLegacy(AGCLLVMDriverComputeProgressMarkerShaderLegacy *this)
{
  *(void *)this = &unk_1F25A0468;
  uint64_t v2 = (AGCLLVMDriverComputeProgressMarkerShaderLegacy *)((char *)this + 4824);
  *((void *)this + 603) = &unk_1F25A07C8;
  *((void *)this + 607) = &unk_1F25A08B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F25A08D0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F25A0468;
  uint64_t v2 = (AGCLLVMDriverComputeProgressMarkerShaderLegacy *)((char *)this + 4824);
  *((void *)this + 603) = &unk_1F25A07C8;
  *((void *)this + 607) = &unk_1F25A08B8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F25A08D0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *virtual thunk to'AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::dumpType(AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *this)
{
  return "compute-control-flow-predicate-legacy";
}

void virtual thunk to'AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::~AGCLLVMDriverComputeControlFlowPredicateShaderLegacy(AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F25A0968;
  v1[604] = &unk_1F25A0CC8;
  v1[608] = &unk_1F25A0DB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1F25A0DD0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 604));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F25A0968;
  v1[604] = &unk_1F25A0CC8;
  v1[608] = &unk_1F25A0DB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1F25A0DD0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 604));
}

const char *AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::dumpType(AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *this)
{
  return "compute-control-flow-predicate-legacy";
}

uint64_t AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::setupShaderInputs(AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4792);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

uint64_t AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::setupShaderWrapper(AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *this)
{
  uint64_t result = AGCLLVMUserObject::setupShaderWrapper(this);
  if (result)
  {
    size_t v3 = strlen(off_1E65EAE70[*((unsigned int *)this + 1206)]);
    uint64_t v4 = (llvm::Function *)AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this + *(void *)(*(void *)this - 24) + 32, (uint64_t)off_1E65EAE70[*((unsigned int *)this + 1206)], v3, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 208), *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232), *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232));
    if (*((_WORD *)v4 + 9)) {
      llvm::Function::BuildLazyArguments(v4);
    }
    llvm::Value::setName();
    llvm::Value::setName();
    operator new();
  }
  return result;
}

void AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::~AGCLLVMDriverComputeControlFlowPredicateShaderLegacy(AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *this)
{
  *(void *)this = &unk_1F25A0968;
  uint64_t v2 = (AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *)((char *)this + 4832);
  *((void *)this + 604) = &unk_1F25A0CC8;
  *((void *)this + 608) = &unk_1F25A0DB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F25A0DD0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;

  *(void *)this = &unk_1F25A0968;
  uint64_t v2 = (AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *)((char *)this + 4832);
  *((void *)this + 604) = &unk_1F25A0CC8;
  *((void *)this + 608) = &unk_1F25A0DB8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F25A0DD0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t AGCLLVMUserComputeKernelBase::AGCLLVMUserComputeKernelBase(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)a1, a2 + 1, a3, "air.kernel", (uint64_t)&default_cs, 0, 0);
  uint64_t v8 = *a2;
  *uint64_t v7 = *a2;
  *(void *)(a1 + *(void *)(v8 - 24)) = a2[7];
  *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 32) = a2[8];
  *(void *)(a1 + 4320) = a4;
  *(unsigned char *)(a1 + 4328) = (*(_DWORD *)(a4 + 16) & 1) == 0;
  *(unsigned char *)(a1 + 3712) = *(unsigned char *)(a4 + 13) & 1;
  *(unsigned char *)(a1 + 3713) = (*(_DWORD *)(a4 + 12) & 0x200) != 0;
  AGCLLVMUserShader::enableStatistics(a1, *(_DWORD *)(a4 + 12) & 1, (*(_DWORD *)(a4 + 12) >> 1) & 1);
  *(unsigned char *)(a1 + 18) = (*(unsigned char *)(a4 + 12) & 8) != 0;
  *(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 2760) = (*(_DWORD *)(a4 + 12) & 0x4000000) != 0;
  *(void *)(a1 + 3304) = *(void *)a4;
  *(_DWORD *)(a1 + 4332) = AGCLLVMUserShader::parseMaxTotalThreadsPerThreadgroup((AGCLLVMUserShader *)a1);
  *(unsigned char *)(a1 + 20) = (*(unsigned char *)(a4 + 12) & 4) != 0;
  uint64_t Function = llvm::Module::getFunction();
  if (Function) {
    BOOL v10 = *(void *)(Function + 8) != 0;
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v11 = a1 + *(void *)(*(void *)a1 - 24);
  *(unsigned char *)(v11 + 456) = v10;
  *(void *)(v11 + 3280) = Function;
  *(unsigned char *)(a1 + 19) = (*(_DWORD *)(a4 + 16) & 0x80) != 0;
  return a1;
}

uint64_t AGCLLVMDriverComputeKernelLegacy::AGCLLVMDriverComputeKernelLegacy(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = AGCLLVMUserComputeKernelBase::AGCLLVMUserComputeKernelBase(a1, a2 + 2, a3, a4);
  uint64_t v6 = a2[1];
  *(void *)uint64_t result = v6;
  *(void *)(result + *(void *)(v6 - 24)) = a2[11];
  *(void *)(*(void *)(*(void *)result - 24) + result + 32) = a2[12];
  *(void *)(result + 4336) = result + 4352;
  *(void *)(result + 4344) = 0x200000000;
  uint64_t v7 = 4376;
  do
  {
    uint64_t v8 = (void *)(result + v7);
    v8[1] = 0;
    void v8[2] = 0;
    *uint64_t v8 = 4;
    uint64_t v9 = result + v7 + 24;
    v7 += 24;
  }
  while (v9 != result + 4448);
  *(void *)(result + 4448) = 4;
  *(void *)(result + 4464) = 0;
  *(void *)(result + 4456) = 0;
  uint64_t v10 = 4472;
  do
  {
    uint64_t v11 = (void *)(result + v10);
    v11[1] = 0;
    void v11[2] = 0;
    void *v11 = 4;
    uint64_t v12 = result + v10 + 24;
    v10 += 24;
  }
  while (v12 != result + 4544);
  *(void *)(result + 4544) = 4;
  *(void *)(result + 4560) = 0;
  *(void *)(result + 4552) = 0;
  *(void *)(result + 4568) = 4;
  *(void *)(result + 4584) = 0;
  *(void *)(result + 4576) = 0;
  *(void *)(result + 4592) = 4;
  *(void *)(result + 4608) = 0;
  *(void *)(result + 4600) = 0;
  *(void *)(result + 4616) = 4;
  *(void *)(result + 4632) = 0;
  uint64_t v13 = 4640;
  *(void *)(result + 4624) = 0;
  do
  {
    uint64_t v14 = (void *)(result + v13);
    v14[1] = 0;
    v14[2] = 0;
    *uint64_t v14 = 4;
    uint64_t v15 = result + v13 + 24;
    v13 += 24;
  }
  while (v15 != result + 4712);
  *(void *)(result + 4712) = 4;
  *(void *)(result + 4728) = 0;
  *(void *)(result + 4720) = 0;
  *(void *)(result + 4736) = 4;
  *(void *)(result + 4752) = 0;
  *(void *)(result + 4744) = 0;
  *(void *)(result + 4760) = 4;
  *(void *)(result + 4776) = 0;
  *(void *)(result + 4768) = 0;
  *(unsigned char *)(result + 4784) = 0;
  uint64_t v16 = *a2;
  *(void *)uint64_t result = *a2;
  *(void *)(result + *(void *)(v16 - 24)) = a2[13];
  *(void *)(*(void *)(*(void *)result - 24) + result + 32) = a2[14];
  return result;
}

const char *virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderLegacy::dumpType(AGCLLVMDriverExecuteIndirectComputeShaderLegacy *this)
{
  return "execute-indirect-compute-driver-legacy";
}

void virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderLegacy::~AGCLLVMDriverExecuteIndirectComputeShaderLegacy(AGCLLVMDriverExecuteIndirectComputeShaderLegacy *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1F259B430);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMDriverExecuteIndirectComputeShaderLegacy *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)&off_1F259B430);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 4792);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *AGCLLVMDriverExecuteIndirectComputeShaderLegacy::dumpType(AGCLLVMDriverExecuteIndirectComputeShaderLegacy *this)
{
  return "execute-indirect-compute-driver-legacy";
}

void AGCLLVMDriverExecuteIndirectComputeShaderLegacy::~AGCLLVMDriverExecuteIndirectComputeShaderLegacy(AGCLLVMDriverExecuteIndirectComputeShaderLegacy *this)
{
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F259B430);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F259B430);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
}

const char *virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy *this)
{
  return "execute-indirect-range-exec-compute-driver-legacy";
}

void virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy::~AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1F259B930);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)&off_1F259B930);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 4792);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy *this)
{
  return "execute-indirect-range-exec-compute-driver-legacy";
}

void AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy::~AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy *this)
{
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F259B930);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1F259B930);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
}

uint64_t AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = AGCLLVMUserComputeKernelBase::AGCLLVMUserComputeKernelBase(a1, a2 + 1, a3, a4);
  BOOL v7 = 0;
  uint64_t v8 = *a2;
  *(void *)uint64_t result = *a2;
  *(void *)(result + *(void *)(v8 - 24)) = a2[10];
  *(void *)(*(void *)(*(void *)result - 24) + result + 32) = a2[11];
  *(void *)(result + 4336) = 4;
  *(void *)(result + 4352) = 0;
  *(void *)(result + 4344) = 0;
  *(void *)(result + 4360) = 4;
  *(void *)(result + 4376) = 0;
  *(void *)(result + 4368) = 0;
  *(_DWORD *)(result + 4384) = 0;
  *(void *)(result + 4392) = 4;
  *(void *)(result + 4408) = 0;
  *(void *)(result + 4400) = 0;
  if ((*(unsigned char *)(a4 + 16) & 4) != 0) {
    BOOL v7 = (*(unsigned char *)(a4 + 13) & 2) == 0;
  }
  *(unsigned char *)(result + 4416) = v7;
  return result;
}

uint64_t AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 4424), a2, *a3);
  AGCLLVMUserComputeKernelBase::AGCLLVMUserComputeKernelBase(a1, (uint64_t *)off_1F259BE28, (uint64_t)a3, a4);
  BOOL v7 = 0;
  *(void *)a1 = &unk_1F259B9C8;
  *(void *)(a1 + 4424) = &unk_1F259BD28;
  *(void *)(a1 + 4456) = &unk_1F259BE18;
  *(void *)(a1 + 4336) = 4;
  *(void *)(a1 + 4352) = 0;
  *(void *)(a1 + 4344) = 0;
  *(void *)(a1 + 4360) = 4;
  *(void *)(a1 + 4376) = 0;
  *(void *)(a1 + 4368) = 0;
  *(_DWORD *)(a1 + 4384) = 0;
  *(void *)(a1 + 4392) = 4;
  *(void *)(a1 + 4408) = 0;
  *(void *)(a1 + 4400) = 0;
  if ((*(unsigned char *)(a4 + 16) & 4) != 0) {
    BOOL v7 = (*(unsigned char *)(a4 + 13) & 2) == 0;
  }
  *(unsigned char *)(a1 + 4416) = v7;
  return a1;
}

void *AGCLLVMDriverComputeKernel::AGCLLVMDriverComputeKernel(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (void *)AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10(a1, a2 + 1, a3, a4);
  uint64_t v6 = *a2;
  *uint64_t result = *a2;
  *(void *)((char *)result + *(void *)(v6 - 24)) = a2[13];
  *(void *)((char *)result + *(void *)(*result - 24) + 32) = a2[14];
  return result;
}

void AGCLLVMDriverTGSizeOptimizationShader::create(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:nn180100]<0>(__p, "tg_size_opt");
  if ((v6 & 0x80u) == 0) {
    size_t v3 = __p;
  }
  else {
    size_t v3 = (void **)__p[0];
  }
  if ((v6 & 0x80u) == 0) {
    CFIndex v4 = v6;
  }
  else {
    CFIndex v4 = (CFIndex)__p[1];
  }
  AGCLLVMObject::readBitcode(a2, (const UInt8 *)v3, v4, 0);
  operator new();
}

uint64_t virtual thunk to'AGCLLVMDriverSparseShaders::dumpType(AGCLLVMDriverSparseShaders *this)
{
  return *(void *)((char *)this + *(void *)(*(void *)this - 72) + 4424);
}

void virtual thunk to'AGCLLVMDriverSparseShaders::~AGCLLVMDriverSparseShaders(AGCLLVMDriverSparseShaders *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259CCE8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4432));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMDriverSparseShaders *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)&off_1F259CCE8);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 4432);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t AGCLLVMDriverSparseShaders::dumpType(AGCLLVMDriverSparseShaders *this)
{
  return *((void *)this + 553);
}

void AGCLLVMDriverSparseShaders::~AGCLLVMDriverSparseShaders(AGCLLVMDriverSparseShaders *this)
{
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259CCE8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4432));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259CCE8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4432));
}

void AGCLLVMDriverSparseShaders::create(AGCLLVMDriverSparseShaders *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  unsigned int v4 = *(_DWORD *)(*((void *)this + 4) + 28);
  BOOL v5 = v4 > 0x22;
  uint64_t v6 = (1 << v4) & 0x581000000;
  if (v5 || v6 == 0) {
    uint64_t v8 = off_1E65EA970;
  }
  else {
    uint64_t v8 = off_1E65EA950;
  }
  uint64_t v9 = (const UInt8 *)v8[a3];
  if (v9) {
    size_t v10 = strlen(v8[a3]);
  }
  else {
    size_t v10 = 0;
  }
  AGCLLVMObject::readBitcode((uint64_t)a2, v9, v10, 1);
  {
    {
      AGCLLVMDriverSparseShaders::create(AGCLLVMCtx &,llvm::LLVMContext &,unsigned int)::computeCS = 0;
      *(void *)algn_1EA6138D8 = 0;
      qword_1EA6138E0 = 0;
    }
  }
  operator new();
}

uint64_t virtual thunk to'AGCLLVMDriverFastClearShaders::dumpType(AGCLLVMDriverFastClearShaders *this)
{
  return *(void *)((char *)this + *(void *)(*(void *)this - 72) + 4424);
}

void virtual thunk to'AGCLLVMDriverFastClearShaders::~AGCLLVMDriverFastClearShaders(AGCLLVMDriverFastClearShaders *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259D1E8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4432));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMDriverFastClearShaders *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)&off_1F259D1E8);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 4432);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t AGCLLVMDriverFastClearShaders::dumpType(AGCLLVMDriverFastClearShaders *this)
{
  return *((void *)this + 553);
}

void AGCLLVMDriverFastClearShaders::~AGCLLVMDriverFastClearShaders(AGCLLVMDriverFastClearShaders *this)
{
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259D1E8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4432));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259D1E8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4432));
}

void AGCLLVMDriverFastClearShaders::create(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 3) == 1)
  {
    if ((a3 & 4) != 0)
    {
      uint64_t v6 = "blit_fast_clear_gen1_meta";
    }
    else if ((a3 & 0x800) != 0)
    {
      uint64_t v6 = "blit_fast_clear_gen1_meta_copy";
    }
    else
    {
      unsigned int v4 = 0;
      int v8 = (a3 >> 3);
      uint64_t v6 = "blit_fast_clear_gen1_1";
      size_t v7 = 0;
      switch(v8)
      {
        case 1:
          break;
        case 2:
          uint64_t v6 = "blit_fast_clear_gen1_2";
          break;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_17;
        case 4:
          uint64_t v6 = "blit_fast_clear_gen1_4";
          break;
        case 8:
          uint64_t v6 = "blit_fast_clear_gen1_8";
          break;
        default:
          size_t v7 = 0;
          if (v8 != 16) {
            goto LABEL_17;
          }
          uint64_t v6 = "blit_fast_clear_gen1_16";
          break;
      }
    }
  }
  else
  {
    if ((a3 & 3) != 2)
    {
      unsigned int v4 = 0;
      size_t v7 = 0;
      goto LABEL_17;
    }
    if ((a3 & 4) != 0)
    {
      uint64_t v6 = "blit_fast_clear_gen2_meta";
    }
    else if ((a3 & 0x800) != 0)
    {
      uint64_t v6 = "blit_fast_clear_gen2_meta_copy";
    }
    else
    {
      unsigned int v4 = 0;
      int v5 = (a3 >> 3);
      uint64_t v6 = "blit_fast_clear_gen2_1";
      size_t v7 = 0;
      switch(v5)
      {
        case 1:
          break;
        case 2:
          uint64_t v6 = "blit_fast_clear_gen2_2";
          break;
        case 3:
        case 6:
        case 7:
          goto LABEL_17;
        case 4:
          uint64_t v6 = "blit_fast_clear_gen2_4";
          break;
        case 5:
          uint64_t v6 = "blit_fast_clear_gen2_5";
          break;
        case 8:
          uint64_t v6 = "blit_fast_clear_gen2_8";
          break;
        default:
          size_t v7 = 0;
          if (v5 != 16) {
            goto LABEL_17;
          }
          uint64_t v6 = "blit_fast_clear_gen2_16";
          break;
      }
    }
  }
  size_t v7 = strlen(v6);
  unsigned int v4 = (const UInt8 *)v6;
LABEL_17:
  AGCLLVMObject::readBitcode(a2, v4, v7, 1);
  {
    {
      AGCLLVMDriverFastClearShaders::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBlitFastClearState const*)::computeCS = 0;
      *(void *)algn_1EA6138F8 = 0;
      qword_1EA613900 = 0;
    }
  }
  operator new();
}

const char *virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *this)
{
  return "execute-indirect-range-exec-compute-driver-g10";
}

void virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10::~AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259D6E8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4424));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)&off_1F259D6E8);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 4424);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *this)
{
  return "execute-indirect-range-exec-compute-driver-g10";
}

void AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10::~AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *this)
{
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259D6E8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4424));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259D6E8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4424));
}

void AGCLLVMDriverExecuteIndirectComputeShaderG10::create(AGCLLVMDriverExecuteIndirectComputeShaderG10 *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  int v5 = *(_DWORD *)(*((void *)this + 4) + 28);
  if (v5 > 11)
  {
    if (v5 == 12)
    {
      uint64_t v6 = "cei_esl_gen_gen3";
      goto LABEL_9;
    }
    if (v5 != 23) {
      goto LABEL_10;
    }
  }
  else if ((v5 - 9) >= 3)
  {
    if (v5 != 8) {
      goto LABEL_10;
    }
    uint64_t v6 = "cei_esl_gen_gen1";
    goto LABEL_9;
  }
  uint64_t v6 = "cei_esl_gen_gen2";
LABEL_9:
  MEMORY[0x1CB7A04E0](__p, v6);
LABEL_10:
  if ((v10 & 0x80u) == 0) {
    size_t v7 = __p;
  }
  else {
    size_t v7 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    CFIndex v8 = v10;
  }
  else {
    CFIndex v8 = (CFIndex)__p[1];
  }
  AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)v7, v8, 0);
  {
    {
      AGCLLVMDriverExecuteIndirectComputeShaderG10::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
      *(void *)algn_1EA6139F8 = 0;
      qword_1EA613A00 = 0;
    }
  }
  operator new();
}

const char *virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderG10::dumpType(AGCLLVMDriverExecuteIndirectComputeShaderG10 *this)
{
  return "execute-indirect-compute-driver-g10";
}

void virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderG10::~AGCLLVMDriverExecuteIndirectComputeShaderG10(AGCLLVMDriverExecuteIndirectComputeShaderG10 *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F259F9D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4424));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMDriverExecuteIndirectComputeShaderG10 *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)&off_1F259F9D0);
  uint64_t v2 = (AGCLLVMObject *)(v1 + 4424);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

const char *AGCLLVMDriverExecuteIndirectComputeShaderG10::dumpType(AGCLLVMDriverExecuteIndirectComputeShaderG10 *this)
{
  return "execute-indirect-compute-driver-g10";
}

void AGCLLVMDriverExecuteIndirectComputeShaderG10::~AGCLLVMDriverExecuteIndirectComputeShaderG10(AGCLLVMDriverExecuteIndirectComputeShaderG10 *this)
{
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259F9D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4424));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F259F9D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4424));
}

const char *getComputeControlFlowBitcodeFileName(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 28) - 4;
  uint64_t result = "compute_control_flow_predicate_g5";
  switch(v1)
  {
    case 0:
      return result;
    case 2:
    case 3:
      uint64_t result = "compute_control_flow_predicate_g9";
      break;
    case 4:
      uint64_t result = "compute_control_flow_predicate_g10";
      break;
    case 5:
    case 6:
    case 7:
    case 19:
      uint64_t result = "compute_control_flow_predicate_g11";
      break;
    case 8:
      uint64_t result = "compute_control_flow_predicate_g12";
      break;
    case 10:
    case 12:
    case 21:
    case 22:
    case 23:
      uint64_t result = "compute_control_flow_predicate_g13";
      break;
    case 13:
    case 14:
      uint64_t result = "compute_control_flow_predicate_g14";
      break;
    case 15:
    case 16:
    case 17:
      uint64_t result = "compute_control_flow_predicate_g14x";
      break;
    case 18:
      uint64_t result = "compute_control_flow_predicate_g15p_b0";
      break;
    case 20:
      int v4 = HIWORD(*(_DWORD *)(a1 + 24));
      int v5 = "compute_control_flow_predicate_g15g_a0";
      if (v4 == 3) {
        int v5 = "compute_control_flow_predicate_g15g_b0";
      }
      if (v4 == 5) {
        uint64_t result = "compute_control_flow_predicate_g15g_c0";
      }
      else {
        uint64_t result = v5;
      }
      break;
    case 27:
      if (*(unsigned __int16 *)(a1 + 26) - 3 >= 2) {
        uint64_t result = "compute_control_flow_predicate_g16p_a0";
      }
      else {
        uint64_t result = "compute_control_flow_predicate_g16p_b0";
      }
      break;
    case 28:
    case 30:
      uint64_t result = "compute_control_flow_predicate_hal200";
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t virtual thunk to'AGCLLVMDriverBVHBuilderComputeShader::dumpType(AGCLLVMDriverBVHBuilderComputeShader *this)
{
  int v1 = (char *)this + *(void *)(*(void *)this - 72);
  llvm::SmallVectorTemplateBase<char,true>::push_back((void *)v1 + 557, 0);
  --*((void *)v1 + 558);
  return *((void *)v1 + 557);
}

void virtual thunk to'AGCLLVMDriverBVHBuilderComputeShader::~AGCLLVMDriverBVHBuilderComputeShader(AGCLLVMDriverBVHBuilderComputeShader *this)
{
  int v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *int v1 = &unk_1F25A0E68;
  v1[568] = &unk_1F25A11C8;
  v1[572] = &unk_1F25A12B8;
  uint64_t v2 = (void *)v1[557];
  if (v2 != v1 + 560) {
    free(v2);
  }
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F25A12D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 568));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  uint64_t vars8;

  int v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *int v1 = &unk_1F25A0E68;
  v1[568] = &unk_1F25A11C8;
  v1[572] = &unk_1F25A12B8;
  uint64_t v2 = (void *)v1[557];
  if (v2 != v1 + 560) {
    free(v2);
  }
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10((AGCLLVMUserComputeKernelG10 *)v1, (uint64_t *)&off_1F25A12D0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 568));
}

uint64_t AGCLLVMDriverBVHBuilderComputeShader::dumpType(AGCLLVMDriverBVHBuilderComputeShader *this)
{
  return *((void *)this + 557);
}

void AGCLLVMDriverBVHBuilderComputeShader::~AGCLLVMDriverBVHBuilderComputeShader(AGCLLVMDriverBVHBuilderComputeShader *this)
{
  *(void *)this = &unk_1F25A0E68;
  uint64_t v2 = (AGCLLVMDriverBVHBuilderComputeShader *)((char *)this + 4544);
  *((void *)this + 568) = &unk_1F25A11C8;
  *((void *)this + 572) = &unk_1F25A12B8;
  size_t v3 = (char *)*((void *)this + 557);
  if (v3 != (char *)this + 4480) {
    free(v3);
  }
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F25A12D0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  char *v3;

  *(void *)this = &unk_1F25A0E68;
  uint64_t v2 = (AGCLLVMDriverBVHBuilderComputeShader *)((char *)this + 4544);
  *((void *)this + 568) = &unk_1F25A11C8;
  *((void *)this + 572) = &unk_1F25A12B8;
  size_t v3 = (char *)*((void *)this + 557);
  if (v3 != (char *)this + 4480) {
    free(v3);
  }
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(this, (uint64_t *)&off_1F25A12D0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t virtual thunk to'AGCLLVMUserDynamicLibrary::isDMAPromotionDisabled(AGCLLVMUserDynamicLibrary *this)
{
  return **(unsigned __int8 **)((char *)this + *(void *)(*(void *)this - 208) + 4352) >> 7;
}

BOOL virtual thunk to'AGCLLVMUserDynamicLibrary::enableSoftFaultOptimization(AGCLLVMUserDynamicLibrary *this)
{
  return (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 200) + 4352) + 3) & 0x40) == 0;
}

uint64_t virtual thunk to'AGCLLVMUserDynamicLibrary::getBufferBoundsCheckMode(AGCLLVMUserDynamicLibrary *this)
{
  return (**(_DWORD **)((char *)this + *(void *)(*(void *)this - 192) + 4352) >> 4) & 7;
}

uint64_t virtual thunk to'AGCLLVMUserDynamicLibrary::finalizeDriverBindings(AGCLLVMUserDynamicLibrary *this, llvm::Function *a2)
{
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::finalizeDriverBindings(AGCLLVMUserDynamicLibrary *this, llvm::Function *a2)
{
  llvm::Module::getOrInsertNamedMetadata();
  uint64_t v3 = *(void *)this;
  int v4 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v5 = *((unsigned int *)v4 + 696);
  if (v5)
  {
    uint64_t v6 = *((void *)v4 + 347);
    uint64_t v7 = 8 * v5;
    do
    {
      CFIndex v8 = (void *)(*(void *)v6 - 8 * *(unsigned int *)(*(void *)v6 + 8));
      if (*v8)
      {
        uint64_t v9 = v8[1];
        if (v9)
        {
          if (*(unsigned char *)v9 == 1)
          {
            uint64_t v10 = *(void *)(v9 + 128);
            if (*(unsigned char *)(v10 + 16) == 16)
            {
              uint64_t v11 = (void *)(v10 + 24);
              if (*(_DWORD *)(v10 + 32) >= 0x41u) {
                uint64_t v11 = (void *)*v11;
              }
              uint64_t v12 = (void *)*v11;
              if (v12 == (void *)114 || v12 == (void *)18) {
                llvm::NamedMDNode::addOperand();
              }
            }
          }
        }
      }
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
    uint64_t v3 = *(void *)this;
  }
  uint64_t v14 = (char *)this + *(void *)(v3 - 24);
  uint64_t v15 = *((unsigned int *)v14 + 772);
  if (v15)
  {
    uint64_t v16 = *((void *)v14 + 385);
    uint64_t v17 = 8 * v15;
    do
    {
      v16 += 8;
      llvm::NamedMDNode::addOperand();
      v17 -= 8;
    }
    while (v17);
  }
  llvm::Module::getOrInsertNamedMetadata();
  uint64_t v18 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v19 = *((unsigned int *)v18 + 736);
  if (v19)
  {
    uint64_t v20 = *((void *)v18 + 367);
    uint64_t v21 = 8 * v19;
    do
    {
      v20 += 8;
      llvm::NamedMDNode::addOperand();
      v21 -= 8;
    }
    while (v21);
  }
  llvm::Module::getOrInsertNamedMetadata();
  uint64_t v22 = *((unsigned int *)this + 720);
  if (v22)
  {
    uint64_t v23 = *((void *)this + 359);
    uint64_t v24 = 8 * v22;
    do
    {
      v23 += 8;
      llvm::NamedMDNode::addOperand();
      v24 -= 8;
    }
    while (v24);
  }
  return 1;
}

uint64_t virtual thunk to'AGCLLVMUserDynamicLibrary::getTempRegistersLimit(AGCLLVMUserDynamicLibrary *this, unsigned int *a2)
{
  return AGCLLVMUserDynamicLibrary::getTempRegistersLimit((AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 176)), a2);
}

uint64_t AGCLLVMUserDynamicLibrary::getTempRegistersLimit(AGCLLVMUserDynamicLibrary *this, unsigned int *a2)
{
  int v4 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *a2 = *(_DWORD *)(v4[50] + 884);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 96))(v4);
  if (result)
  {
    *a2 = result;
    uint64_t result = result != *(_DWORD *)(v4[50] + 884);
  }
  unsigned int v6 = *((_DWORD *)this + 1086);
  if (v6)
  {
    unsigned int v7 = 0;
    CFIndex v8 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v9 = *((void *)v8 + 58);
    unsigned int v10 = *(_DWORD *)(*((void *)v8 + 50) + 884);
    unsigned int v11 = *(_DWORD *)(v9 + 440);
    unsigned int v12 = v11 - 1;
    uint64_t v13 = *(void *)(v9 + 432);
    do
    {
      unsigned int v14 = (v12 + v7) >> 1;
      if (*(_DWORD *)(v13 + 4 * v14) < v6) {
        unsigned int v12 = v14 - 1;
      }
      else {
        unsigned int v7 = v14 + 1;
      }
    }
    while (v7 <= v12);
    unsigned int v15 = v10 / v11 * v12;
    if (v15 >= *a2) {
      unsigned int v15 = *a2;
    }
    *a2 = v15;
    return 1;
  }
  return result;
}

BOOL virtual thunk to'AGCLLVMUserDynamicLibrary::constructReply(AGCLLVMUserDynamicLibrary *this)
{
  return AGCLLVMUserDynamicLibrary::constructReply((AGCLLVMUserDynamicLibrary *)((char *)this
                                                                               + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMUserDynamicLibrary::constructReply(AGCLLVMUserDynamicLibrary *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24)));
    int v3 = AGCLLVMUserObject::constructFlatReply(this);
    int v4 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v5 = (flatbuffers::FlatBufferBuilder *)(v4 + 2472);
    v4[2542] = 1;
    int v6 = *((_DWORD *)v4 + 626) - *((_DWORD *)v4 + 630) + *((_DWORD *)v4 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v4 + 2472), v3);
    unsigned int v7 = (AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v8 = flatbuffers::FlatBufferBuilder::EndTable(v5, v6);
    flatbuffers::FlatBufferBuilder::Finish(v7, v8, v9);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
    int v10 = AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(this);
    unsigned int v11 = (char *)this + *(void *)(*(void *)this - 24);
    unsigned int v12 = (flatbuffers::FlatBufferBuilder *)(v11 + 2568);
    v11[2638] = 1;
    int v13 = *((_DWORD *)v11 + 650) - *((_DWORD *)v11 + 654) + *((_DWORD *)v11 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v11 + 2568), v10);
    unsigned int v14 = (AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24) + 2568);
    int v15 = flatbuffers::FlatBufferBuilder::EndTable(v12, v13);
    flatbuffers::FlatBufferBuilder::Finish(v14, v15, v16);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
  }
  return v2;
}

void virtual thunk to'AGCLLVMUserDynamicLibrary::getCompilationKeyDescription(AGCLLVMUserDynamicLibrary *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMUserDynamicLibrary::getCompilationKeyDescription(AGCLLVMUserDynamicLibrary *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  int v3 = (_DWORD *)*((void *)this + 544);
  std::string::basic_string[abi:nn180100]<0>(&v41, "AGCDynamicLibraryStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v39, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v51, (const void **)v39, *v3 & 1);
  std::string::basic_string[abi:nn180100]<0>(v37, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v52, (const void **)v37, (*v3 >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v35, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v53, (const void **)v35, (*v3 >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v33, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v54, (const void **)v33, (*v3 >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v31, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v55, (const void **)v31, (*v3 >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(v29, "bufferBoundsCheckMode");
  _agcFieldString<unsigned int>(&v56, (const void **)v29, (*v3 >> 4) & 7);
  std::string::basic_string[abi:nn180100]<0>(v27, "disableDMAPromotion");
  _agcFieldString<unsigned int>(&v57, (const void **)v27, (*v3 >> 7) & 1);
  std::string::basic_string[abi:nn180100]<0>(v25, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v58, (const void **)v25, (*v3 >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v23, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v59, (const void **)v23, (*v3 >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v21, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v60, (const void **)v21, (unsigned __int16)(*v3 >> 10));
  std::string::basic_string[abi:nn180100]<0>(&v19, "enableStackShadow");
  _agcFieldString<unsigned int>(&v61, (const void **)&v19, (*v3 >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v17, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v62, (const void **)v17, *v3 >> 31);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v48, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  }
  else {
    std::string v48 = v41;
  }
  _agcIndentedLine((void **)&v49.__r_.__value_.__l.__data_, (std::string::value_type *)&v48, 0);
  std::string::basic_string[abi:nn180100]<0>(v43, "{");
  _agcIndentedLine(&__p, (std::string::value_type *)v43, 0);
  if ((v47 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v47 & 0x80u) == 0) {
    std::string::size_type v5 = v47;
  }
  else {
    std::string::size_type v5 = v46;
  }
  int v6 = std::string::append(&v49, p_p, v5);
  std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v47 < 0) {
    operator delete(__p);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = 0; i != 36; i += 3)
  {
    uint64_t v9 = (std::string *)((char *)&v51 + i * 8);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[i + 2]) < 0) {
      std::string::__init_copy_ctor_external(&v49, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else {
      std::string v49 = *v9;
    }
    int v10 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v42, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
    }
    else {
      std::string v42 = v49;
    }
    _agcIndentedLine(&__p, (std::string::value_type *)&v42, 1);
    if ((v47 & 0x80u) == 0) {
      unsigned int v11 = (const std::string::value_type *)&__p;
    }
    else {
      unsigned int v11 = (const std::string::value_type *)__p;
    }
    if ((v47 & 0x80u) == 0) {
      std::string::size_type v12 = v47;
    }
    else {
      std::string::size_type v12 = v46;
    }
    std::string::append(&v50, v11, v12);
    if ((char)v47 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, "}");
  _agcIndentedLine((void **)&v49.__r_.__value_.__l.__data_, (std::string::value_type *)&__p, 0);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v13 = &v50;
  }
  else {
    int v13 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v50.__r_.__value_.__l.__size_;
  }
  int v15 = std::string::insert(&v49, 0, (const std::string::value_type *)v13, size);
  *a2 = *v15;
  v15->__r_.__value_.__r.__words[0] = 0;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if ((char)v47 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = 288;
  do
  {
    if (v51.__r_.__value_.__s.__data_[v16 - 1] < 0) {
      operator delete(*(void **)((char *)&v50.__r_.__value_.__l.__data_ + v16));
    }
    v16 -= 24;
  }
  while (v16);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  if (v40 < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
}

uint64_t virtual thunk to'AGCLLVMUserDynamicLibrary::getForwardProgressMode(AGCLLVMUserDynamicLibrary *this)
{
  return **(_DWORD **)((char *)this + *(void *)(*(void *)this - 128) + 4352) >> 31;
}

uint64_t virtual thunk to'AGCLLVMUserDynamicLibrary::getSupportExternalVisibleFunctions(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t virtual thunk to'AGCLLVMUserDynamicLibrary::getRelocModel(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t virtual thunk to'AGCLLVMUserDynamicLibrary::getShaderType(AGCLLVMUserDynamicLibrary *this)
{
  return 8;
}

const char *virtual thunk to'AGCLLVMUserDynamicLibrary::dumpType(AGCLLVMUserDynamicLibrary *this)
{
  return "dynamic-library";
}

void virtual thunk to'AGCLLVMUserDynamicLibrary::~AGCLLVMUserDynamicLibrary(AGCLLVMUserDynamicLibrary *this)
{
  AGCLLVMUserDynamicLibrary::~AGCLLVMUserDynamicLibrary((AGCLLVMUserDynamicLibrary *)((char *)this
                                                                                    + *(void *)(*(void *)this - 48)));
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMUserDynamicLibrary::~AGCLLVMUserDynamicLibrary((AGCLLVMUserDynamicLibrary *)((char *)this
                                                                                    + *(void *)(*(void *)this - 48)));
  BOOL v2 = (AGCLLVMObject *)(v1 + 4384);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

void AGCLLVMUserDynamicLibrary::~AGCLLVMUserDynamicLibrary(AGCLLVMUserDynamicLibrary *this)
{
  AGCLLVMUserDynamicLibrary::~AGCLLVMUserDynamicLibrary(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4384));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F25BE9B0;
  *((void *)this + 548) = &unk_1F25BECD8;
  *((void *)this + 552) = &unk_1F25BEDC8;
  BOOL v2 = *((void *)this + 547);
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserDynamicLibrary *)((char *)this + 4360));
  }
  int v4 = *((void *)this + 542);
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserDynamicLibrary *)((char *)this + 4320));
  }
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1F25BEDD8);
}

{
  uint64_t v1;

  AGCLLVMUserDynamicLibrary::~AGCLLVMUserDynamicLibrary(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4384));
}

uint64_t AGCLLVMUserDynamicLibrary::getSupportExternalVisibleFunctions(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::isDMAPromotionDisabled(AGCLLVMUserDynamicLibrary *this)
{
  return **((unsigned __int8 **)this + 544) >> 7;
}

BOOL AGCLLVMUserDynamicLibrary::enableSoftFaultOptimization(AGCLLVMUserDynamicLibrary *this)
{
  return (*(unsigned char *)(*((void *)this + 544) + 3) & 0x40) == 0;
}

uint64_t AGCLLVMUserDynamicLibrary::getForwardProgressMode(AGCLLVMUserDynamicLibrary *this)
{
  return **((_DWORD **)this + 544) >> 31;
}

uint64_t AGCLLVMUserDynamicLibrary::getBufferBoundsCheckMode(AGCLLVMUserDynamicLibrary *this)
{
  return (**((_DWORD **)this + 544) >> 4) & 7;
}

uint64_t AGCLLVMUserDynamicLibrary::getRelocModel(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::getShaderType(AGCLLVMUserDynamicLibrary *this)
{
  return 8;
}

const char *AGCLLVMUserDynamicLibrary::dumpType(AGCLLVMUserDynamicLibrary *this)
{
  return "dynamic-library";
}

uint64_t AGCLLVMUserDynamicLibrary::getTileConstant(AGCLLVMUserDynamicLibrary *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 232);
  v19[0] = *(void *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 232);
  v19[1] = v2;
  void v19[2] = v2;
  void v19[3] = v2;
  uint64_t v3 = llvm::StructType::get();
  int v4 = (uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  DylibBuiltinPerCommandStateVar = (llvm::Type **)AGCLLVMUserDynamicLibrary::getDylibBuiltinPerCommandStateVar(a1);
  __int16 v20 = 257;
  std::string::size_type v7 = AGCLLVMBuilder::tryDeducePointeeType(DylibBuiltinPerCommandStateVar, v6);
  uint64_t AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad(v4, v7, (uint64_t)DylibBuiltinPerCommandStateVar, 0, (uint64_t)v19);
  uint64_t v9 = (llvm::Type *)llvm::PointerType::get();
  __int16 v17 = 257;
  Pointeruint64_t Cast = (uint64_t *)llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)v4, AlignedLoad, v9, (const llvm::Twine *)v16);
  unsigned int v11 = (uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24));
  v18[0] = (uint64_t *)llvm::ConstantInt::get();
  v18[1] = (uint64_t *)llvm::ConstantInt::get();
  __int16 v20 = 257;
  std::string::size_type v12 = (llvm::Type **)llvm::IRBuilderBase::CreateInBoundsGEP((uint64_t)(v11 + 5), v3, PointerCast, v18, 2, (uint64_t)v19);
  __int16 v17 = 257;
  unsigned int v14 = AGCLLVMBuilder::tryDeducePointeeType(v12, v13);
  return llvm::IRBuilderBase::CreateAlignedLoad(v11 + 5, v14, (uint64_t)v12, 0, (uint64_t)v16);
}

uint64_t AGCLLVMUserDynamicLibrary::getDylibBuiltinPerCommandStateVar(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t result = *((void *)this + 542);
  if (!result)
  {
    uint64_t v3 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    unsigned int v4 = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 576))(v3, 0);
    std::string::size_type v5 = (llvm::Type *)llvm::PointerType::get();
    uint64_t v9 = "agc.dylib_builtin_percommand_state_base";
    __int16 v10 = 259;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v5, (const llvm::Twine *)&v9, v4, 0, 5, 0);
    AGCLLVMUserObject::setDylibLinkage(GlobalBufferBinding, v7);
    int v8 = (AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24));
    (*(void (**)(void))(**(void **)(*((void *)v8 + 50) + 832) + 128))(*(void *)(*((void *)v8 + 50) + 832));
    AGCLLVMObject::addDylibBinding(v8, GlobalBufferBinding);
    llvm::ValueHandleBase::operator=((AGCLLVMUserDynamicLibrary *)((char *)this + 4320), (uint64_t)GlobalBufferBinding);
    return *((void *)this + 542);
  }
  return result;
}

uint64_t AGCLLVMUserDynamicLibrary::disableGin1122SWWA(AGCLLVMUserDynamicLibrary *this)
{
  return *((unsigned __int8 *)this + 4348);
}

uint64_t AGCLLVMUserDynamicLibrary::needsPCFClamp(AGCLLVMUserDynamicLibrary *this)
{
  return 0;
}

uint64_t AGCLLVMUserDynamicLibrary::getPCFStateForUnit(AGCLLVMUserDynamicLibrary *this)
{
  return 0;
}

uint64_t AGCLLVMUserDynamicLibrary::supportsConstantSamplers(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::getMaxSharedRegisters(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t v1 = *(_DWORD **)((char *)this + *(void *)(*(void *)this - 24) + 400);
  unsigned int v2 = v1[211];
  unsigned int v3 = v1[212];
  unsigned int v4 = v1[213];
  if (v3 < v2) {
    unsigned int v2 = v3;
  }
  if (v4 >= v2) {
    return v2;
  }
  else {
    return v4;
  }
}

uint64_t AGCLLVMUserDynamicLibrary::replaceBuiltins(AGCLLVMUserDynamicLibrary *this)
{
  v24[30] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = AGCLLVMUserObject::replaceBuiltins(this);
  if (v2)
  {
    unsigned int v3 = *(llvm::LLVMContext ***)((char *)this + *(void *)(*(void *)this - 24) + 368);
    AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v20, *v3);
    v24[29] = this;
    __int16 v20 = &unk_1F25BF5C0;
    v24[25] = v3;
    {
      std::string::basic_string[abi:nn180100]<0>(AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions, "air.get_dispatch_local_size");
      dword_1EA613AE0 = 1;
      qword_1EA613AE8 = (uint64_t)AGCLLVMUserDynamicLibrary::buildDispatchLocalSize;
      unk_1EA613AF0 = 0;
      dword_1EA613AF8 = 4;
      word_1EA613AFC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613B00, "air.get_dispatch_quadgroups_per_threadgroup");
      dword_1EA613B18 = 1;
      qword_1EA613B20 = (uint64_t)AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup;
      unk_1EA613B28 = 0;
      dword_1EA613B30 = 2;
      word_1EA613B34 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613B38, "air.get_dispatch_simdgroups_per_threadgroup");
      dword_1EA613B50 = 1;
      qword_1EA613B58 = (uint64_t)AGCLLVMUserDynamicLibrary::buildDispatchSimdgroupsPerThreadgroup;
      unk_1EA613B60 = 0;
      dword_1EA613B68 = 2;
      word_1EA613B6C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613B70, "air.get_dispatch_threads_per_threadgroup");
      dword_1EA613B88 = 1;
      qword_1EA613B90 = (uint64_t)AGCLLVMUserDynamicLibrary::buildDispatchLocalSize;
      unk_1EA613B98 = 0;
      dword_1EA613BA0 = 4;
      word_1EA613BA4 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EA613BA6[2], "air.get_global_id");
      dword_1EA613BC0 = 1;
      qword_1EA613BC8 = (uint64_t)AGCLLVMUserDynamicLibrary::buildGlobalID;
      unk_1EA613BD0 = 0;
      dword_1EA613BD8 = 4;
      word_1EA613BDC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613BE0, "air.get_global_size");
      dword_1EA613BF8 = 1;
      qword_1EA613C00 = (uint64_t)AGCLLVMUserDynamicLibrary::buildGlobalSize;
      unk_1EA613C08 = 0;
      dword_1EA613C10 = 4;
      word_1EA613C14 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613C18, "air.get_group_id");
      dword_1EA613C30 = 1;
      qword_1EA613C38 = (uint64_t)AGCLLVMUserDynamicLibrary::buildGroupID;
      unk_1EA613C40 = 0;
      dword_1EA613C48 = 4;
      word_1EA613C4C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613C50, "air.get_local_id");
      dword_1EA613C68 = 1;
      qword_1EA613C70 = (uint64_t)AGCLLVMUserDynamicLibrary::buildLocalID;
      unk_1EA613C78 = 0;
      dword_1EA613C80 = 4;
      word_1EA613C84 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EA613C86[2], "air.get_local_linear_id");
      dword_1EA613CA0 = 1;
      qword_1EA613CA8 = (uint64_t)AGCLLVMUserDynamicLibrary::buildLocalLinearID;
      unk_1EA613CB0 = 0;
      dword_1EA613CB8 = 2;
      word_1EA613CBC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613CC0, "air.get_local_size");
      dword_1EA613CD8 = 1;
      qword_1EA613CE0 = (uint64_t)AGCLLVMUserDynamicLibrary::buildLocalSize;
      qword_1EA613CE8 = 0;
      dword_1EA613CF0 = 4;
      word_1EA613CF4 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613CF8, "air.get_num_groups");
      dword_1EA613D10 = 1;
      qword_1EA613D18 = (uint64_t)AGCLLVMUserDynamicLibrary::buildNumGroups;
      qword_1EA613D20 = 0;
      dword_1EA613D28 = 4;
      word_1EA613D2C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613D30, "air.get_quadgroups_per_threadgroup");
      dword_1EA613D48 = 1;
      qword_1EA613D50 = (uint64_t)AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup;
      qword_1EA613D58 = 0;
      dword_1EA613D60 = 2;
      word_1EA613D64 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EA613D66[2], "air.get_quadgroup_index_in_threadgroup");
      dword_1EA613D80 = 1;
      qword_1EA613D88 = (uint64_t)AGCLLVMUserDynamicLibrary::buildQuadGroup;
      qword_1EA613D90 = 0;
      dword_1EA613D98 = 2;
      word_1EA613D9C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613DA0, "air.get_quad_group");
      dword_1EA613DB8 = 1;
      qword_1EA613DC0 = (uint64_t)AGCLLVMUserDynamicLibrary::buildQuadGroup;
      qword_1EA613DC8 = 0;
      dword_1EA613DD0 = 2;
      word_1EA613DD4 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613DD8, "air.get_simdgroups_per_threadgroup");
      dword_1EA613DF0 = 1;
      qword_1EA613DF8 = (uint64_t)AGCLLVMUserDynamicLibrary::buildSimdgroupsPerThreadgroup;
      qword_1EA613E00 = 0;
      dword_1EA613E08 = 2;
      word_1EA613E0C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613E10, "air.get_simdgroup_index_in_threadgroup");
      dword_1EA613E28 = 1;
      qword_1EA613E30 = (uint64_t)AGCLLVMUserDynamicLibrary::buildSimdGroupIndexInThreadgroup;
      qword_1EA613E38 = 0;
      dword_1EA613E40 = 2;
      word_1EA613E44 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EA613E46[2], "air.get_stage_in_grid_origin");
      dword_1EA613E60 = 1;
      qword_1EA613E68 = (uint64_t)AGCLLVMUserDynamicLibrary::buildStageInOrigin;
      qword_1EA613E70 = 0;
      dword_1EA613E78 = 4;
      word_1EA613E7C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613E80, "air.get_stage_in_grid_size");
      dword_1EA613E98 = 1;
      qword_1EA613EA0 = (uint64_t)AGCLLVMUserDynamicLibrary::buildStageInSize;
      qword_1EA613EA8 = 0;
      dword_1EA613EB0 = 4;
      word_1EA613EB4 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613EB8, "air.get_thread_index_in_quadgroup");
      dword_1EA613ED0 = 1;
      qword_1EA613ED8 = (uint64_t)AGCLLVMUserDynamicLibrary::buildQuadElement;
      qword_1EA613EE0 = 0;
      dword_1EA613EE8 = 2;
      word_1EA613EEC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EA613EF0, "air.get_thread_index_in_simdgroup");
      dword_1EA613F08 = 1;
      qword_1EA613F10 = (uint64_t)AGCLLVMUserDynamicLibrary::buildThreadIndexInSimdGroup;
      qword_1EA613F18 = 0;
      dword_1EA613F20 = 2;
      word_1EA613F24 = 0;
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1538, 0, &dword_1CAC02000);
    }
    for (uint64_t i = 0; i != 1120; i += 56)
    {
      std::string::size_type v5 = &AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[i];
      if (AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[i + 23] >= 0) {
        size_t v6 = AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[i + 23];
      }
      else {
        size_t v6 = *(void *)&AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[i + 8];
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v6 + 4);
      if ((v19 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v6)
      {
        if (v5[23] >= 0) {
          int v8 = &AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[i];
        }
        else {
          int v8 = *(char **)v5;
        }
        memmove(p_p, v8, v6);
      }
      strcpy((char *)p_p + v6, ".i16");
      if ((v19 & 0x80u) == 0) {
        uint64_t v9 = &__p;
      }
      else {
        uint64_t v9 = __p;
      }
      if ((v19 & 0x80u) == 0) {
        uint64_t v10 = v19;
      }
      else {
        uint64_t v10 = v18;
      }
      AGCLLVMAirBuiltinReplacement<AGCLLVMUserDynamicLibrary>::doReplacement((uint64_t)&v20, (uint64_t)v9, v10, (uint64_t)(v5 + 24));
      if ((char)v19 < 0) {
        operator delete(__p);
      }
      if (v5[23] >= 0) {
        size_t v11 = v5[23];
      }
      else {
        size_t v11 = *((void *)v5 + 1);
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v11 + 4);
      if ((v19 & 0x80u) == 0) {
        std::string::size_type v12 = &__p;
      }
      else {
        std::string::size_type v12 = __p;
      }
      if (v11)
      {
        if (v5[23] >= 0) {
          int v13 = &AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[i];
        }
        else {
          int v13 = *(char **)v5;
        }
        memmove(v12, v13, v11);
      }
      strcpy((char *)v12 + v11, ".i32");
      if ((v19 & 0x80u) == 0) {
        unsigned int v14 = &__p;
      }
      else {
        unsigned int v14 = __p;
      }
      if ((v19 & 0x80u) == 0) {
        uint64_t v15 = v19;
      }
      else {
        uint64_t v15 = v18;
      }
      AGCLLVMAirBuiltinReplacement<AGCLLVMUserDynamicLibrary>::doReplacement((uint64_t)&v20, (uint64_t)v14, v15, (uint64_t)(v5 + 24));
      if ((char)v19 < 0) {
        operator delete(__p);
      }
    }
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v24);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v23);
    if (v21 != &v22) {
      free(v21);
    }
  }
  return v2;
}

uint64_t AGCLLVMAirBuiltinReplacement<AGCLLVMUserDynamicLibrary>::doReplacement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t result = llvm::Module::getFunction();
  if (result)
  {
    size_t v6 = (llvm::Function *)result;
    int v7 = *(_DWORD *)(a4 + 24);
    if (v7 == 12)
    {
      uint64_t v10 = *(void *)(result + 8);
      while (v10)
      {
        uint64_t v11 = *(void *)(v10 + 24);
        uint64_t v10 = *(void *)(v10 + 8);
        std::string::size_type v12 = *(void (**)(void *, uint64_t))(a4 + 8);
        uint64_t v13 = *(void *)(a4 + 16);
        unsigned int v14 = (void *)(*(void *)(a1 + 368) + (v13 >> 1));
        if (v13) {
          std::string::size_type v12 = *(void (**)(void *, uint64_t))(*v14 + v12);
        }
        v12(v14, v11);
      }
      return llvm::Function::eraseFromParent(v6);
    }
    if (v7 == 11)
    {
      int v8 = *(unsigned char **)(a4 + 8);
      if (v8)
      {
        size_t v9 = strlen(*(const char **)(a4 + 8));
        *(void *)&v93[0] = (char *)&v93[1] + 8;
        *(_OWORD *)((char *)v93 + 8) = xmmword_1CADD6290;
        llvm::SmallVectorImpl<char>::append<char const*,void>(v93, v8, &v8[v9]);
      }
      else
      {
        *(void *)&v93[1] = 64;
        *(void *)&v93[0] = (char *)&v93[1] + 8;
        *((void *)&v93[0] + 1) = 0;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(v93, ".", "");
      if (*(void *)&v93[1] < *((void *)&v93[0] + 1)) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      llvm::Module::getOrInsertFunction();
      llvm::Value::replaceAllUsesWith();
      if (*(_OWORD **)&v93[0] != (_OWORD *)((char *)&v93[1] + 8)) {
        free(*(void **)&v93[0]);
      }
      return llvm::Function::eraseFromParent(v6);
    }
    uint64_t v15 = **(void **)(*(void *)(result + 24) + 16);
    BOOL v16 = (*(_DWORD *)(v15 + 8) & 0xFE) != 0x12 || *(unsigned char *)(a4 + 29) == 0;
    int v17 = !v16;
    if (v16) {
      int v18 = 1;
    }
    else {
      int v18 = *(_DWORD *)(v15 + 32);
    }
    int v80 = v18;
    int v78 = *(_DWORD *)(a1 + 104);
    uint64_t v79 = (llvm::Function *)result;
    uint64_t v19 = *(void *)(result + 8);
    if (!v19)
    {
LABEL_110:
      *(_DWORD *)(a1 + 104) = v78;
      size_t v6 = v79;
      return llvm::Function::eraseFromParent(v6);
    }
    __int16 v20 = (llvm::IRBuilderBase *)(a1 + 8);
    uint64_t v82 = a4;
    while (1)
    {
      uint64_t v21 = *(llvm::Instruction **)(v19 + 24);
      uint64_t v22 = *(void *)(v19 + 8);
      if (*(_DWORD *)a4 == 1)
      {
        int v23 = 0;
      }
      else
      {
        if (*(_DWORD *)a4 != 2) {
          goto LABEL_27;
        }
        int v23 = 121;
      }
      *(_DWORD *)(a1 + 104) = v23;
LABEL_27:
      uint64_t v81 = v22;
      llvm::IRBuilderBase::SetInsertPoint(v20, v21);
      uint64_t v24 = llvm::UndefValue::get();
      if (v80)
      {
        for (uint64_t i = 0; i != v80; ++i)
        {
          uint64_t v83 = (llvm::Value *)v24;
          uint64_t v94 = 0;
          memset(v93, 0, sizeof(v93));
          unint64_t v26 = llvm::CallBase::arg_end(v21) - (void)v21 + 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF);
          if ((v26 & 0x1FFFFFFFE0) != 0)
          {
            uint64_t v27 = (v26 >> 5);
            char v28 = (llvm::Value **)v93;
            uint64_t v29 = v21;
            do
            {
              char v30 = (llvm::Value **)((char *)v29 - 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
              uint64_t v31 = *v30;
              llvm::Value *v28 = *v30;
              if (v17 && (*(_DWORD *)(*(void *)v31 + 8) & 0xFE) == 0x12)
              {
                __int16 v92 = 257;
                char v32 = (llvm::Value *)llvm::ConstantInt::get();
                llvm::Value *v28 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v20, v31, v32, (const llvm::Twine *)v91);
              }
              ++v28;
              uint64_t v29 = (llvm::Instruction *)((char *)v29 + 32);
              --v27;
            }
            while (v27);
          }
          if (*(unsigned char *)(v82 + 28))
          {
            int v33 = **(llvm::Type ***)&v93[0];
            if ((*(_DWORD *)(**(void **)&v93[0] + 8) & 0xFE) == 0x12) {
              int v33 = (llvm::Type *)**((void **)v33 + 2);
            }
            v91[0] = llvm::Type::getPrimitiveSizeInBits(v33);
            v91[1] = v34;
            if (llvm::TypeSize::operator unsigned long long() == 32)
            {
              int v35 = 0;
            }
            else
            {
              char v36 = *(llvm::Type **)(a1 + 168);
              if ((*(_DWORD *)(**(void **)&v93[0] + 8) & 0xFE) == 0x12) {
                char v36 = (llvm::Type *)llvm::FixedVectorType::get();
              }
              if ((v26 & 0x1FFFFFFFE0) != 0)
              {
                uint64_t v37 = (v26 >> 5);
                char v38 = (llvm::Value **)v93;
                do
                {
                  int v39 = *v38;
                  __int16 v92 = 257;
                  *v38++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v20, v39, v36, (const llvm::Twine *)v91);
                  --v37;
                }
                while (v37);
                int v35 = 1;
              }
              else
              {
                int v35 = 1;
              }
            }
          }
          else
          {
            int v35 = 0;
          }
          if (llvm::FPMathOperator::classof((uint64_t)v21)) {
            unsigned int FastMathFlags = llvm::Instruction::getFastMathFlags(v21);
          }
          else {
            unsigned int FastMathFlags = 0;
          }
          uint64_t v41 = *(void *)(**(void **)(a1 + 368) - 24) + *(void *)(a1 + 368);
          long long v88 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v89, v20);
          int v90 = *(_DWORD *)(a1 + 104);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v88, v41 + 40);
          if (v89) {
            llvm::MetadataTracking::untrack();
          }
          switch(*(_DWORD *)(v82 + 24))
          {
            case 1:
              std::string v42 = *(uint64_t (**)(void *))(v82 + 8);
              uint64_t v43 = *(void *)(v82 + 16);
              char v44 = (void *)(*(void *)(a1 + 368) + (v43 >> 1));
              if (v43) {
                std::string v42 = *(uint64_t (**)(void *))(*v44 + v42);
              }
              uint64_t v73 = v42(v44);
              goto LABEL_95;
            case 2:
              std::string::size_type v46 = *(uint64_t (**)(void *, uint64_t))(v82 + 8);
              uint64_t v47 = *(void *)(v82 + 16);
              uint64_t v48 = *(void *)v21;
              std::string v49 = (void *)(*(void *)(a1 + 368) + (v47 >> 1));
              if ((v47 & 1) == 0) {
                goto LABEL_78;
              }
              goto LABEL_77;
            case 3:
              std::string::size_type v46 = *(uint64_t (**)(void *, uint64_t))(v82 + 8);
              uint64_t v50 = *(void *)(v82 + 16);
              uint64_t v48 = *(void *)&v93[0];
              std::string v49 = (void *)(*(void *)(a1 + 368) + (v50 >> 1));
              if ((v50 & 1) == 0) {
                goto LABEL_78;
              }
LABEL_77:
              std::string::size_type v46 = *(uint64_t (**)(void *, uint64_t))(*v49 + v46);
LABEL_78:
              uint64_t v73 = v46(v49, v48);
              goto LABEL_95;
            case 4:
              std::string v51 = (unsigned int *)(*(void *)&v93[0] + 24);
              if (*(_DWORD *)(*(void *)&v93[0] + 32) >= 0x41u) {
                std::string v51 = *(unsigned int **)v51;
              }
              uint64_t v52 = *v51;
              std::string v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v82 + 8);
              uint64_t v54 = *(void *)(v82 + 16);
              uint64_t v55 = *(void *)v21;
              std::string v56 = (void *)(*(void *)(a1 + 368) + (v54 >> 1));
              if (v54) {
                std::string v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v56 + v53);
              }
              goto LABEL_82;
            case 5:
              std::string v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v82 + 8);
              uint64_t v57 = *(void *)(v82 + 16);
              uint64_t v52 = *((void *)&v93[0] + 1);
              uint64_t v55 = *(void *)&v93[0];
              std::string v56 = (void *)(*(void *)(a1 + 368) + (v57 >> 1));
              if (v57) {
                std::string v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v56 + v53);
              }
LABEL_82:
              uint64_t v73 = v53(v56, v55, v52);
              goto LABEL_95;
            case 6:
              std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v59 = *(void *)(v82 + 16);
              std::string v61 = (const char *)*((void *)&v93[0] + 1);
              std::string v60 = *(_OWORD **)&v93[0];
              std::string v62 = (void *)(*(void *)(a1 + 368) + (v59 >> 1));
              if (v59) {
                std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(*v62 + v58);
              }
              uint64_t v64 = FastMathFlags;
              goto LABEL_91;
            case 7:
              std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v63 = *(void *)(v82 + 16);
              std::string v61 = (const char *)*((void *)&v93[0] + 1);
              std::string v60 = *(_OWORD **)&v93[0];
              uint64_t v64 = *(void *)&v93[1];
              std::string v62 = (void *)(*(void *)(a1 + 368) + (v63 >> 1));
              if (v63) {
                std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(*v62 + v58);
              }
              goto LABEL_91;
            case 8:
              uint64_t v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v66 = *(void *)(v82 + 16);
              uint64_t v68 = (_OWORD *)*((void *)&v93[0] + 1);
              uint64_t v67 = *(void *)&v93[0];
              unsigned int v69 = *(const char **)&v93[1];
              unsigned int v70 = (void *)(*(void *)(a1 + 368) + (v66 >> 1));
              if (v66) {
                uint64_t v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(*v70 + v65);
              }
              uint64_t v74 = FastMathFlags;
              goto LABEL_94;
            case 9:
              std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v71 = *(void *)(v82 + 16);
              std::string v62 = (void *)(*(void *)(a1 + 368) + (v71 >> 1));
              if (v71) {
                std::string v58 = *(uint64_t (**)(void *, _OWORD *, const char *, uint64_t))(*v62 + v58);
              }
              std::string v60 = v93;
              std::string v61 = "";
              uint64_t v64 = 0;
LABEL_91:
              uint64_t v73 = v58(v62, v60, v61, v64);
              goto LABEL_95;
            case 0xA:
              uint64_t v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(v82 + 8);
              uint64_t v72 = *(void *)(v82 + 16);
              uint64_t v67 = *(void *)v21;
              unsigned int v70 = (void *)(*(void *)(a1 + 368) + (v72 >> 1));
              if (v72) {
                uint64_t v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, const char *, uint64_t))(*v70 + v65);
              }
              uint64_t v68 = v93;
              unsigned int v69 = "";
              uint64_t v74 = 0;
LABEL_94:
              uint64_t v73 = v65(v70, v67, v68, v69, v74);
LABEL_95:
              FPTrunc = (llvm::Value *)v73;
              break;
            default:
              FPTrunc = 0;
              break;
          }
          uint64_t v75 = *(void *)(**(void **)(a1 + 368) - 24) + *(void *)(a1 + 368);
          long long v85 = *(_OWORD *)(v75 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v86, (llvm::IRBuilderBase *)(v75 + 40));
          int v87 = *(_DWORD *)(v75 + 136);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v85, (uint64_t)v20);
          if (v86) {
            llvm::MetadataTracking::untrack();
          }
          if (v35)
          {
            uint64_t v76 = *(void *)v21;
            if (v17 && (*(_DWORD *)(v76 + 8) & 0xFE) == 0x12) {
              uint64_t v76 = **(void **)(v76 + 16);
            }
            __int16 v92 = 257;
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v20, FPTrunc, (llvm::Type *)v76, (const llvm::Twine *)v91);
            if (!v17) {
              goto LABEL_106;
            }
          }
          else if (!v17)
          {
            goto LABEL_106;
          }
          __int16 v92 = 257;
          uint64_t v77 = (llvm::Value *)llvm::ConstantInt::get();
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v20, v83, FPTrunc, v77, (const llvm::Twine *)v91);
LABEL_106:
          uint64_t v24 = (uint64_t)FPTrunc;
        }
      }
      if (*(void *)v21 != *(void *)(a1 + 144)) {
        llvm::Value::replaceAllUsesWith();
      }
      llvm::Instruction::eraseFromParent(v21);
      a4 = v82;
      uint64_t v19 = v81;
      if (!v81) {
        goto LABEL_110;
      }
    }
  }
  return result;
}

uint64_t AGCLLVMUserDynamicLibrary::buildThreadIndexInSimdGroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  size_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type *))(*(void *)v5 + 1536))(v5, &v9, a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserDynamicLibrary::buildQuadElement(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  size_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = AGCLLVMGen3TargetLowerer::buildQuadElement(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserDynamicLibrary::buildStageInSize(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, llvm::Type *a3)
{
  ComputeBuiltinPerCommandStatePtr = (llvm::Value *)AGCLLVMUserDynamicLibrary::loadComputeBuiltinPerCommandStatePtr(this);
  return AGCLLVMUserShader::buildStageInSizeCommon((llvm::Type ***)this, a3, ComputeBuiltinPerCommandStatePtr, v6);
}

uint64_t AGCLLVMUserDynamicLibrary::loadComputeBuiltinPerCommandStatePtr(AGCLLVMUserDynamicLibrary *a1)
{
  v16[1] = *(uint64_t **)MEMORY[0x1E4F143B8];
  uint64_t v2 = (llvm::Type *)llvm::PointerType::get();
  unsigned int v3 = (uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24));
  uint64_t DylibBuiltinPerCommandStateVar = AGCLLVMUserDynamicLibrary::getDylibBuiltinPerCommandStateVar(a1);
  __int16 v15 = 257;
  uint64_t AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad(v3 + 5, v2, DylibBuiltinPerCommandStateVar, 0, (uint64_t)v14);
  size_t v6 = (char *)a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v7 = (llvm::Type *)*((void *)v6 + 30);
  v16[0] = (uint64_t *)llvm::ConstantInt::get();
  __int16 v15 = 257;
  int v8 = llvm::IRBuilderBase::CreateInBoundsGEP((uint64_t)(v6 + 40), (uint64_t)v7, AlignedLoad, v16, 1, (uint64_t)v14);
  v13[16] = 257;
  uint64_t v9 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v6 + 5, v7, (uint64_t)v8, 0, (uint64_t)v13);
  uint64_t v10 = llvm::PointerType::get();
  uint64_t v11 = (uint64_t)a1 + *(void *)(*(void *)a1 - 24) + 40;
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateCast(v11, 48, v9, v10, (uint64_t)v14);
}

uint64_t AGCLLVMUserDynamicLibrary::buildStageInOrigin(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, llvm::Type *a3)
{
  ComputeBuiltinPerCommandStatePtr = (llvm::Value *)AGCLLVMUserDynamicLibrary::loadComputeBuiltinPerCommandStatePtr(this);
  return AGCLLVMUserShader::buildStageInOriginCommon((llvm::Type ***)this, a3, ComputeBuiltinPerCommandStatePtr, v6);
}

uint64_t AGCLLVMUserDynamicLibrary::buildSimdGroupIndexInThreadgroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  size_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type *))(*(void *)v5 + 1544))(v5, &v9, a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserDynamicLibrary::buildSimdgroupsPerThreadgroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  return AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroupCommon<5u>(this, a2, 0);
}

uint64_t AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroupCommon<5u>(AGCLLVMUserDynamicLibrary *a1, llvm::Type *a2, int a3)
{
  uint64_t v5 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  if (a3)
  {
    size_t v6 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(a1, a2, 0);
    uint64_t v7 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(a1, a2, 1);
    __int16 v21 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v20);
    long long v9 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    uint64_t v10 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(a1, a2, 2);
  }
  else
  {
    int v11 = AGCLLVMUserDynamicLibrary::buildLocalSize(a1, a2, 0);
    std::string::size_type v12 = AGCLLVMUserDynamicLibrary::buildLocalSize(a1, a2, 1);
    __int16 v21 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v11, v12, (const llvm::Twine *)v20);
    long long v9 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    uint64_t v10 = AGCLLVMUserDynamicLibrary::buildLocalSize(a1, a2, 2);
  }
  __int16 v21 = 257;
  uint64_t v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Mul, v10, (const llvm::Twine *)v20);
  unsigned int v14 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  __int16 v15 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v21 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v20);
  int v17 = (llvm::Value *)llvm::ConstantInt::get();
  v19[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v14, Add, v17, (const llvm::Twine *)v19);
}

llvm::User *AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, int a3)
{
  size_t v6 = operator new(0x20uLL);
  *size_t v6 = &unk_1F25BF788;
  v6[1] = this;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  uint64_t v13 = v6;
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = &unk_1F25BF7D0;
  v7[1] = this;
  void v7[2] = a2;
  *((_DWORD *)v7 + 6) = a3;
  unsigned int v14 = v7;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  long long v11 = xmmword_1CADD6400;
  int v8 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v12, (uint64_t)&v11);
  for (uint64_t i = 96; i != -32; i -= 32)
    std::__function::__value_func<llvm::Value * ()(void)>::~__value_func[abi:nn180100](&v12[i]);
  return v8;
}

llvm::User *AGCLLVMUserDynamicLibrary::buildLocalSize(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, int a3)
{
  size_t v6 = operator new(0x20uLL);
  *size_t v6 = &unk_1F25BF668;
  v6[1] = this;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  uint64_t v13 = v6;
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = &unk_1F25BF6B0;
  v7[1] = this;
  void v7[2] = a2;
  *((_DWORD *)v7 + 6) = a3;
  unsigned int v14 = v7;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  long long v11 = xmmword_1CADD6400;
  int v8 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v12, (uint64_t)&v11);
  for (uint64_t i = 96; i != -32; i -= 32)
    std::__function::__value_func<llvm::Value * ()(void)>::~__value_func[abi:nn180100](&v12[i]);
  return v8;
}

llvm::User *AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(void *a1, llvm::Type *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  {
    std::string::basic_string[abi:nn180100]<0>(AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(llvm::Type *,std::array<std::function<llvm::Value * ()(void)>,4ul> const&,std::array<int,4ul> const&)::stage_name, "Tile");
    std::string::basic_string[abi:nn180100]<0>(&AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(llvm::Type *,std::array<std::function<llvm::Value * ()(void)>,4ul> const&,std::array<int,4ul> const&)::stage_name[24], "Compute");
    std::string::basic_string[abi:nn180100]<0>(&AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(llvm::Type *,std::array<std::function<llvm::Value * ()(void)>,4ul> const&,std::array<int,4ul> const&)::stage_name[48], "Object");
    std::string::basic_string[abi:nn180100]<0>(&AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(llvm::Type *,std::array<std::function<llvm::Value * ()(void)>,4ul> const&,std::array<int,4ul> const&)::stage_name[72], "Mesh");
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_43, 0, &dword_1CAC02000);
  }
  uint64_t v42 = 0x700000009;
  uint64_t v7 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 400);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 872))(v7)) {
    int v8 = 1;
  }
  else {
    int v8 = 3;
  }
  int v43 = v8;
  (*(void (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 24) + 400) + 872))();
  long long v9 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v10 = *((void *)v9 + 50);
  long long v39 = *(_OWORD *)(v9 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v40, (llvm::IRBuilderBase *)(v9 + 40));
  int v41 = *((_DWORD *)v9 + 34);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v10 + 968))(v10, &v39);
  if (v40) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v12 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 88);
  __int16 v38 = 257;
  uint64_t v13 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  uint64_t v34 = v12;
  uint64_t v16 = *(void *)(v12 + 40);
  uint64_t v15 = v12 + 40;
  uint64_t v14 = v16;
  if (v16 == v15)
  {
    uint64_t v19 = 0;
  }
  else
  {
    int v17 = (llvm::Instruction *)(v14 - 24);
    if (v14) {
      uint64_t v18 = v14 - 24;
    }
    else {
      uint64_t v18 = 0;
    }
    if (*(unsigned __int8 *)(v18 + 16) - 29 >= 0xB) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v17;
    }
  }
  llvm::Instruction::eraseFromParent(v19);
  __int16 v20 = (char *)a1 + *(void *)(*a1 - 24);
  *((void *)v20 + 11) = v34;
  *((void *)v20 + 12) = v15;
  uint64_t Switch = llvm::IRBuilderBase::CreateSwitch((void *)((char *)a1 + *(void *)(*a1 - 24) + 40), v11, (uint64_t)v13, 2);
  uint64_t v22 = (char **)((char *)a1 + *(void *)(*a1 - 24) + 40);
  uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v13);
  llvm::IRBuilderBase::SetInsertPoint(v22, (char *)v13, FirstInsertionPt);
  uint64_t v24 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  __int16 v38 = 257;
  PHI = llvm::IRBuilderBase::CreatePHI(v24, a2, 2, (const llvm::Twine *)&p_p);
  uint64_t v25 = 0;
  int v36 = 0;
  char v26 = 1;
  do
  {
    char v27 = v26;
    if (*(_DWORD *)(a4 + 4 * v25) != -1 && !*((unsigned char *)&v36 + v25))
    {
      std::operator+<char>();
      __int16 v38 = 260;
      p_p = &__p;
      operator new();
    }
    char v26 = 0;
    uint64_t v25 = 1;
  }
  while ((v27 & 1) != 0);
  int v28 = *(_DWORD *)(Switch + 20);
  if ((v28 & 0x40000000) != 0)
  {
    if (*(llvm::BasicBlock **)(*(void *)(Switch - 8) + 32) == v13)
    {
      uint64_t v29 = *(void *)(Switch - 8);
      goto LABEL_26;
    }
  }
  else if (*(llvm::BasicBlock **)(Switch - 32 * (v28 & 0x7FFFFFF) + 32) == v13)
  {
    uint64_t v29 = Switch - 32 * (v28 & 0x7FFFFFF);
LABEL_26:
    llvm::SwitchInst::setDefaultDest(Switch, *(void *)(v29 + 96));
  }
  char v30 = (char **)((char *)a1 + *(void *)(*a1 - 24) + 40);
  uint64_t v31 = (char *)llvm::BasicBlock::getFirstInsertionPt(v13);
  llvm::IRBuilderBase::SetInsertPoint(v30, (char *)v13, v31);
  return PHI;
}

void *std::__function::__value_func<llvm::Value * ()(void)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t llvm::IRBuilderBase::CreateSwitch(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x1CB79EC10](v8, a2, a3, a4, 0);
  __int16 v14 = 257;
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v8, v13, a1[6], a1[7]);
  uint64_t v9 = *((unsigned int *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = v10 + 16 * v9;
    do
    {
      llvm::Instruction::setMetadata();
      v10 += 16;
    }
    while (v10 != v11);
  }
  return v8;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)((char *)v2 + *(void *)(*v2 - 24) + 400);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 680))(v3);
  uint64_t v5 = (char *)v2 + *(void *)(*v2 - 24);
  long long v8 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(v5 + 40));
  int v10 = *((_DWORD *)v5 + 34);
  uint64_t v6 = AGCLLVMGen3TargetLowerer::buildLocalSize(v4, (uint64_t)&v8, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24));
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF6B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BF6B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::~__func()
{
}

llvm::Value *std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserShader::buildTileThreadsPerThreadgroup(*(AGCLLVMUserShader **)(a1 + 8), *(llvm::Type **)(a1 + 16), *(_DWORD *)(a1 + 24));
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF668;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BF668;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)((char *)v2 + *(void *)(*v2 - 24) + 400);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 680))(v3);
  uint64_t v5 = (char *)v2 + *(void *)(*v2 - 24);
  long long v8 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(v5 + 40));
  int v10 = *((_DWORD *)v5 + 34);
  uint64_t v6 = AGCLLVMGen3TargetLowerer::buildThreadgroupDispatchSize(v4, (uint64_t)&v8, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24));
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF7D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BF7D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::~__func()
{
}

llvm::Value *std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserShader::buildTileThreadsPerThreadgroup(*(AGCLLVMUserShader **)(a1 + 8), *(llvm::Type **)(a1 + 16), *(_DWORD *)(a1 + 24));
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF788;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BF788;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::~__func()
{
}

llvm::User *AGCLLVMUserDynamicLibrary::buildQuadGroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  v6[0] = &unk_1F25BF8F0;
  v6[1] = this;
  v6[2] = a2;
  void v6[3] = v6;
  v7[0] = &unk_1F25BF938;
  v7[1] = this;
  void v7[2] = a2;
  v7[3] = v7;
  v7[7] = 0;
  v7[11] = 0;
  long long v5 = xmmword_1CADD6400;
  uint64_t v2 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v6, (uint64_t)&v5);
  for (uint64_t i = 12; i != -4; i -= 4)
    std::__function::__value_func<llvm::Value * ()(void)>::~__value_func[abi:nn180100](&v6[i]);
  return v2;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)((char *)v2 + *(void *)(*v2 - 24) + 400);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 680))(v3);
  long long v5 = (char *)v2 + *(void *)(*v2 - 24);
  long long v8 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(v5 + 40));
  int v10 = *((_DWORD *)v5 + 34);
  uint64_t v6 = AGCLLVMGen3TargetLowerer::buildQuadGroup(v4, (uint64_t)&v8, *(void *)(a1 + 16));
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF938;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25BF938;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 456))(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF8F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25BF8F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::~__func()
{
}

llvm::User *AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  v6[0] = &unk_1F25BFA10;
  v6[1] = this;
  v6[2] = a2;
  void v6[3] = v6;
  v7[0] = &unk_1F25BFA58;
  v7[1] = this;
  void v7[2] = a2;
  v7[3] = v7;
  v7[7] = 0;
  v7[11] = 0;
  long long v5 = xmmword_1CADD6400;
  uint64_t v2 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v6, (uint64_t)&v5);
  for (uint64_t i = 12; i != -4; i -= 4)
    std::__function::__value_func<llvm::Value * ()(void)>::~__value_func[abi:nn180100](&v6[i]);
  return v2;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroupCommon<2u>(*(AGCLLVMUserDynamicLibrary **)(a1 + 8), *(llvm::Type **)(a1 + 16), 0);
}

uint64_t AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroupCommon<2u>(AGCLLVMUserDynamicLibrary *a1, llvm::Type *a2, int a3)
{
  long long v5 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  if (a3)
  {
    uint64_t v6 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(a1, a2, 0);
    uint64_t v7 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(a1, a2, 1);
    __int16 v21 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v20);
    uint64_t v9 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    int v10 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(a1, a2, 2);
  }
  else
  {
    uint64_t v11 = AGCLLVMUserDynamicLibrary::buildLocalSize(a1, a2, 0);
    uint64_t v12 = AGCLLVMUserDynamicLibrary::buildLocalSize(a1, a2, 1);
    __int16 v21 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v11, v12, (const llvm::Twine *)v20);
    uint64_t v9 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    int v10 = AGCLLVMUserDynamicLibrary::buildLocalSize(a1, a2, 2);
  }
  __int16 v21 = 257;
  uint64_t v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Mul, v10, (const llvm::Twine *)v20);
  __int16 v14 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v21 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v20);
  int v17 = (llvm::Value *)llvm::ConstantInt::get();
  v19[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v14, Add, v17, (const llvm::Twine *)v19);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BFA58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25BFA58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::~__func()
{
}

llvm::User *std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(*(AGCLLVMUserDynamicLibrary **)(a1 + 8), *(llvm::Type **)(a1 + 16));
}

llvm::User *AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  v6[0] = &unk_1F25BF980;
  v6[1] = this;
  v6[2] = a2;
  void v6[3] = v6;
  v7[0] = &unk_1F25BF9C8;
  v7[1] = this;
  void v7[2] = a2;
  v7[3] = v7;
  v7[7] = 0;
  v7[11] = 0;
  long long v5 = xmmword_1CADD6400;
  uint64_t v2 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v6, (uint64_t)&v5);
  for (uint64_t i = 12; i != -4; i -= 4)
    std::__function::__value_func<llvm::Value * ()(void)>::~__value_func[abi:nn180100](&v6[i]);
  return v2;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroupCommon<2u>(*(AGCLLVMUserDynamicLibrary **)(a1 + 8), *(llvm::Type **)(a1 + 16), 1);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF9C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25BF9C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::~__func()
{
}

llvm::Value *std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserShader::buildTileQuadgroupsPerThreadgroup(*(AGCLLVMUserShader **)(a1 + 8), *(llvm::Type **)(a1 + 16));
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF980;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25BF980;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BFA10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25BFA10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::~__func()
{
}

llvm::User *AGCLLVMUserDynamicLibrary::buildNumGroups(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1F25BFBC0;
  v6[1] = this;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  __int16 v20 = v6;
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = &unk_1F25BFC08;
  v7[1] = this;
  void v7[2] = a2;
  *((_DWORD *)v7 + 6) = a3;
  __int16 v21 = v7;
  long long v8 = operator new(0x20uLL);
  *long long v8 = &unk_1F25BFC50;
  v8[1] = this;
  void v8[2] = a2;
  *((_DWORD *)v8 + 6) = a3;
  uint64_t v22 = v8;
  uint64_t v9 = operator new(0x20uLL);
  *uint64_t v9 = &unk_1F25BFC98;
  v9[1] = this;
  v9[2] = a2;
  *((_DWORD *)v9 + 6) = a3;
  int v23 = v9;
  uint64_t v16 = 0x100000000;
  int v17 = 1;
  uint64_t v10 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 872))(v10, v11)) {
    int v12 = 2;
  }
  else {
    int v12 = 3;
  }
  int v18 = v12;
  uint64_t v13 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v19, (uint64_t)&v16);
  for (uint64_t i = 96; i != -32; i -= 32)
    std::__function::__value_func<llvm::Value * ()(void)>::~__value_func[abi:nn180100](&v19[i]);
  return v13;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::operator()()
{
  return 0;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BFC98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BFC98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::operator()()
{
  return 0;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BFC50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BFC50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(AGCLLVMUserDynamicLibrary **)(a1 + 8);
  uint64_t v3 = AGCLLVMUserDynamicLibrary::buildGlobalSize(v2, *(llvm::Type **)((char *)v2 + *(void *)(*(void *)v2 - 24) + 232), *(_DWORD *)(a1 + 24));
  uint64_t v4 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(v2, *(llvm::Type **)((char *)v2 + *(void *)(*(void *)v2 - 24) + 232), *(_DWORD *)(a1 + 24));
  long long v5 = (AGCLLVMUserDynamicLibrary *)((char *)v2 + *(void *)(*(void *)v2 - 24) + 40);
  __int16 v16 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v5, v3, v4, (const llvm::Twine *)v15);
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  v14[16] = 257;
  uint64_t Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v5, Add, v7, (const llvm::Twine *)v14);
  uint64_t v9 = (AGCLLVMUserDynamicLibrary *)((char *)v2 + *(void *)(*(void *)v2 - 24) + 40);
  __int16 v16 = 257;
  uint64_t UDiv = llvm::IRBuilderBase::CreateUDiv(v9, Sub, v4, (const llvm::Twine *)v15);
  uint64_t v11 = (uint64_t)v2 + *(void *)(*(void *)v2 - 24) + 40;
  uint64_t v12 = *(void *)(a1 + 16);
  __int16 v16 = 257;
  return llvm::IRBuilderBase::CreateCast(v11, 38, UDiv, v12, (uint64_t)v15);
}

llvm::User *AGCLLVMUserDynamicLibrary::buildGlobalSize(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1F25BFAA0;
  v6[1] = this;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  __int16 v20 = v6;
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = &unk_1F25BFAE8;
  v7[1] = this;
  void v7[2] = a2;
  *((_DWORD *)v7 + 6) = a3;
  __int16 v21 = v7;
  long long v8 = operator new(0x20uLL);
  *long long v8 = &unk_1F25BFB30;
  v8[1] = this;
  void v8[2] = a2;
  *((_DWORD *)v8 + 6) = a3;
  uint64_t v22 = v8;
  uint64_t v9 = operator new(0x20uLL);
  *uint64_t v9 = &unk_1F25BFB78;
  v9[1] = this;
  v9[2] = a2;
  *((_DWORD *)v9 + 6) = a3;
  int v23 = v9;
  uint64_t v16 = 0x100000000;
  int v17 = 1;
  uint64_t v10 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 872))(v10, v11)) {
    int v12 = 2;
  }
  else {
    int v12 = 3;
  }
  int v18 = v12;
  uint64_t v13 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v19, (uint64_t)&v16);
  for (uint64_t i = 96; i != -32; i -= 32)
    std::__function::__value_func<llvm::Value * ()(void)>::~__value_func[abi:nn180100](&v19[i]);
  return v13;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::operator()()
{
  return 0;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BFB78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BFB78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::operator()()
{
  return 0;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BFB30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BFB30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(AGCLLVMUserDynamicLibrary **)(a1 + 8);
  uint64_t v2 = *(llvm::Type **)(a1 + 16);
  unsigned int v3 = *(_DWORD *)(a1 + 24);
  ComputeBuiltinPerCommandStatePtr = (llvm::Value *)AGCLLVMUserDynamicLibrary::loadComputeBuiltinPerCommandStatePtr(v1);
  long long v5 = (llvm::Value *)AGCLLVMUserDynamicLibrary::loadComputeBuiltinPerCommandStatePtr(v1);
  return AGCLLVMUserShader::buildGlobalSizeCommon(v1, v2, v3, ComputeBuiltinPerCommandStatePtr, v5);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BFAE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BFAE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::~__func()
{
}

llvm::Value *std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserShader::buildTileThreadsPerGrid(*(AGCLLVMUserShader **)(a1 + 8), *(llvm::Type **)(a1 + 16), *(_DWORD *)(a1 + 24));
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BFAA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BFAA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BFC08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BFC08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::~__func()
{
}

llvm::Value *std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserShader::buildTileThreadgroupsPerGrid(*(AGCLLVMUserShader **)(a1 + 8), *(llvm::Type **)(a1 + 16), *(_DWORD *)(a1 + 24));
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BFBC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BFBC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::~__func()
{
}

llvm::User *AGCLLVMUserDynamicLibrary::buildLocalLinearID(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  v6[0] = &unk_1F25BF6F8;
  v6[1] = this;
  v6[2] = a2;
  void v6[3] = v6;
  v7[0] = &unk_1F25BF740;
  v7[1] = this;
  void v7[2] = a2;
  v7[3] = v7;
  v7[7] = 0;
  v7[11] = 0;
  long long v5 = xmmword_1CADD6400;
  uint64_t v2 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v6, (uint64_t)&v5);
  for (uint64_t i = 12; i != -4; i -= 4)
    std::__function::__value_func<llvm::Value * ()(void)>::~__value_func[abi:nn180100](&v6[i]);
  return v2;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)((char *)v2 + *(void *)(*v2 - 24) + 400);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 680))(v3);
  long long v5 = (char *)v2 + *(void *)(*v2 - 24);
  long long v8 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(v5 + 40));
  int v10 = *((_DWORD *)v5 + 34);
  uint64_t v6 = AGCLLVMGen3TargetLowerer::buildLocalLinearID(v4, (uint64_t)&v8, *(void *)(a1 + 16));
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF740;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25BF740;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0>,llvm::Value * ()(void)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserShader::buildTileThreadIndexInThreadgroup(*(AGCLLVMUserShader **)(a1 + 8), *(llvm::Type **)(a1 + 16));
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF6F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25BF6F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1>,llvm::Value * ()(void)>::~__func()
{
}

uint64_t AGCLLVMUserDynamicLibrary::buildLocalID(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  long long v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type *, uint64_t))(*(void *)v7 + 256))(v7, &v11, a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

llvm::User *AGCLLVMUserDynamicLibrary::buildGroupID(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1F25BF5D8;
  v6[1] = this;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  int v17 = v6;
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = &unk_1F25BF620;
  v7[1] = this;
  void v7[2] = a2;
  *((_DWORD *)v7 + 6) = a3;
  int v18 = v7;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  uint64_t v8 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 872))(v8, v9) ^ 1;
  int v10 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v16, (uint64_t)&v13);
  for (uint64_t i = 96; i != -32; i -= 32)
    std::__function::__value_func<llvm::Value * ()(void)>::~__value_func[abi:nn180100](&v16[i]);
  return v10;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::operator()()
{
  return 0;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF620;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BF620;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)((char *)v2 + *(void *)(*v2 - 24) + 400);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 680))(v3);
  long long v5 = (char *)v2 + *(void *)(*v2 - 24);
  long long v8 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(v5 + 40));
  int v10 = *((_DWORD *)v5 + 34);
  uint64_t v6 = AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v4, (uint64_t)&v8, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24));
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF5D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BF5D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::~__func()
{
}

llvm::User *AGCLLVMUserDynamicLibrary::buildGlobalID(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1F25BF818;
  v6[1] = this;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  uint64_t v19 = v6;
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = &unk_1F25BF860;
  v7[1] = this;
  void v7[2] = a2;
  *((_DWORD *)v7 + 6) = a3;
  uint64_t v20 = v7;
  long long v8 = operator new(0x20uLL);
  *long long v8 = &unk_1F25BF8A8;
  v8[1] = this;
  void v8[2] = a2;
  *((_DWORD *)v8 + 6) = a3;
  __int16 v21 = v8;
  uint64_t v22 = 0;
  uint64_t v15 = 0x100000000;
  int v16 = 1;
  uint64_t v9 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 872))(v9, v10)) {
    int v11 = 1;
  }
  else {
    int v11 = 2;
  }
  int v17 = v11;
  uint64_t v12 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v18, (uint64_t)&v15);
  for (uint64_t i = 96; i != -32; i -= 32)
    std::__function::__value_func<llvm::Value * ()(void)>::~__value_func[abi:nn180100](&v18[i]);
  return v12;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::operator()()
{
  return 0;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF8A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BF8A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)((char *)v2 + *(void *)(*v2 - 24) + 400);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 680))(v3);
  long long v5 = (char *)v2 + *(void *)(*v2 - 24);
  long long v8 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(v5 + 40));
  int v10 = *((_DWORD *)v5 + 34);
  uint64_t v6 = AGCLLVMGen3TargetLowerer::buildGlobalID(v4, (uint64_t)&v8, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24));
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF860;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BF860;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 448))(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24));
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25BF818;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25BF818;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::~__func()
{
}

uint64_t AGCLLVMUserDynamicLibrary::buildDispatchSimdgroupsPerThreadgroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  return AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroupCommon<5u>(this, a2, 1);
}

uint64_t AGCLLVMUserDynamicLibrary::setupInterpolationFunctions(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::setupShaderOutputs(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t Function = llvm::Module::getFunction();
  if (Function)
  {
    uint64_t v3 = (llvm::Function *)Function;
    uint64_t v4 = *(void *)(Function + 8);
    while (v4)
    {
      long long v5 = *(llvm::Instruction **)(v4 + 24);
      uint64_t v4 = *(void *)(v4 + 8);
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24) + 40), v5);
      uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v7 = *((void *)v6 + 50);
      long long v10 = *(_OWORD *)(v6 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (llvm::IRBuilderBase *)(v6 + 40));
      int v12 = *((_DWORD *)v6 + 34);
      uint64_t v8 = llvm::ConstantInt::get();
      (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v7 + 616))(v7, &v10, v8);
      if (v11) {
        llvm::MetadataTracking::untrack();
      }
      llvm::Instruction::eraseFromParent(v5);
    }
    llvm::Function::eraseFromParent(v3);
  }
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::setupShaderInputs(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t Function = llvm::Module::getFunction();
  if (Function)
  {
    uint64_t v76 = (char *)this + 8;
    uint64_t v85 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232);
    uint64_t v86 = v85;
    uint64_t v72 = (llvm::Function *)Function;
    uint64_t v73 = (llvm::Type *)llvm::StructType::get();
    uint64_t v3 = *((void *)v72 + 1);
    while (v3)
    {
      uint64_t v4 = *(llvm::Instruction **)(v3 + 24);
      uint64_t v3 = *(void *)(v3 + 8);
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24) + 40), v4);
      uint64_t v5 = llvm::CallBase::arg_end(v4);
      int v6 = *((_DWORD *)v4 + 5);
      uint64_t v7 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v8 = (llvm::IRBuilderBase *)(v7 + 40);
      long long v81 = *(_OWORD *)(v7 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v82, (llvm::IRBuilderBase *)(v7 + 40));
      int v83 = *((_DWORD *)v7 + 34);
      uint64_t DylibBaseGetterFunc = AGCLLVMUserObject::createDylibBaseGetterFunc(this);
      uint64_t v10 = *(void *)(*(void *)this - 24);
      long long v78 = v81;
      uint64_t v79 = v82;
      if (v82) {
        llvm::MetadataTracking::track();
      }
      int v80 = v83;
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v78, (uint64_t)&v76[v10 + 32]);
      if (v79) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v11 = &v76[*(void *)(*(void *)this - 24)];
      __int16 v87 = 257;
      int v12 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t)(v11 + 32), **(void **)(*(void *)DylibBaseGetterFunc + 16), DylibBaseGetterFunc, 0, 0, (uint64_t)&v85);
      if (v82) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v13 = (v5 - ((void)v4 - 32 * (v6 & 0x7FFFFFF))) & 0x1FFFFFFFE0;
      uint64_t v85 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232);
      uint64_t v86 = v85;
      llvm::StructType::get();
      int v14 = (llvm::Type *)llvm::PointerType::get();
      __int16 v87 = 257;
      Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v8, v12, v14, (const llvm::Twine *)&v85);
      uint64_t v16 = *(void *)(*(void *)this - 24);
      int v17 = (char *)this + v16 + 40;
      __int16 v87 = 257;
      uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)&v76[v16 + 32], v73, (uint64_t)PointerCast, 0, (uint64_t)&v85);
      if (v13 == 32)
      {
        LODWORD(v78) = 1;
        *(void *)&long long v81 = "colorSampleCount";
        __int16 v84 = 259;
        llvm::IRBuilderBase::CreateExtractValue((uint64_t)v17, AlignedLoad, (uint64_t)&v78, 1, (uint64_t)&v81);
        uint64_t v19 = *(void *)(*(void *)this - 24);
        uint64_t v20 = (char *)this + v19 + 40;
        __int16 v87 = 257;
        uint64_t v21 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)&v76[v19 + 32], v73, (uint64_t)PointerCast, 0, (uint64_t)&v85);
        LODWORD(v78) = 0;
        *(void *)&long long v81 = "sampleCount";
        __int16 v84 = 259;
        llvm::IRBuilderBase::CreateExtractValue((uint64_t)v20, v21, (uint64_t)&v78, 1, (uint64_t)&v81);
        uint64_t v22 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        int v23 = (llvm::CmpInst **)*((void *)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
        uint64_t v24 = llvm::ConstantInt::get();
        __int16 v87 = 257;
        llvm::IRBuilderBase::CreateICmp(v22, 32, v23, v24, (uint64_t)&v85);
        __int16 v87 = 257;
        llvm::IRBuilderBase::CreateSelect();
      }
      else
      {
        LODWORD(v78) = 0;
        *(void *)&long long v81 = "sampleCount";
        __int16 v84 = 259;
        llvm::IRBuilderBase::CreateExtractValue((uint64_t)v17, AlignedLoad, (uint64_t)&v78, 1, (uint64_t)&v81);
      }
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v4);
    }
    llvm::Function::eraseFromParent(v72);
  }
  uint64_t v25 = llvm::Module::getFunction();
  if (v25)
  {
    char v26 = (llvm::Function *)v25;
    uint64_t FragmentBuiltinEncoderStateType = AGCLLVMUserObject::getFragmentBuiltinEncoderStateType(this);
    uint64_t v74 = v26;
    uint64_t v28 = *((void *)v26 + 1);
    if (v28)
    {
      uint64_t v29 = FragmentBuiltinEncoderStateType;
      uint64_t v75 = (char *)this + 8;
      do
      {
        uint64_t v77 = *(void *)(v28 + 8);
        char v30 = *(llvm::Instruction **)(v28 + 24);
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24) + 40), v30);
        uint64_t PerEncoderIndirectionTableGlobal = AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal(this);
        uint64_t v33 = (uint64_t)v32;
        uint64_t v34 = (uint64_t *)&v75[*(void *)(*(void *)this - 24)];
        __int16 v87 = 257;
        int v35 = AGCLLVMBuilder::tryDeducePointeeType(v32, (llvm::Value *)v32);
        v34 += 4;
        int v36 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad(v34, v35, v33, 0, (uint64_t)&v85);
        *(void *)&long long v78 = llvm::ConstantInt::get();
        (*(void (**)(void))(**(void **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824)
                          + 1040))();
        *((void *)&v78 + 1) = llvm::ConstantInt::get();
        __int16 v84 = 257;
        uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v34, PerEncoderIndirectionTableGlobal, v36, (uint64_t **)&v78, 2, (uint64_t)&v81);
        __int16 v38 = (AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        AGCLLVMUserObject::getFragmentBuiltinEncoderStateType(this);
        long long v39 = (llvm::Type *)llvm::PointerType::get();
        __int16 v87 = 257;
        uint64_t v40 = (uint64_t *)llvm::IRBuilderBase::CreatePointerCast(v38, GEP, v39, (const llvm::Twine *)&v85);
        int v41 = (llvm::Value *)llvm::UndefValue::get();
        uint64_t v42 = *(void *)(*(void *)this - 24) + 32;
        *(void *)&long long v81 = llvm::ConstantInt::get();
        *((void *)&v81 + 1) = llvm::ConstantInt::get();
        __int16 v87 = 257;
        int v43 = (uint64_t *)llvm::IRBuilderBase::CreateGEP((uint64_t)&v75[v42], v29, v40, (uint64_t **)&v81, 2, (uint64_t)&v85);
        uint64_t v44 = (AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        uint64_t v45 = (llvm::Value *)*((void *)v30 - 4 * (*((_DWORD *)v30 + 5) & 0x7FFFFFF));
        std::string::size_type v46 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v87 = 257;
        uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v44, v45, v46, (const llvm::Twine *)&v85);
        uint64_t v48 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
        *(void *)&long long v78 = llvm::ConstantInt::get();
        *((void *)&v78 + 1) = Mul;
        v48 += 5;
        __int16 v87 = 257;
        uint64_t v49 = v29;
        uint64_t v50 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v48, v29, v43, (uint64_t **)&v78, 2, (uint64_t)&v85);
        __int16 v84 = 257;
        uint64_t v52 = AGCLLVMBuilder::tryDeducePointeeType(v50, v51);
        std::string v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v48, v52, (uint64_t)v50, 0, (uint64_t)&v81);
        uint64_t v54 = (char *)this + *(void *)(*(void *)this - 24);
        __int16 v87 = 257;
        uint64_t v55 = (llvm::IRBuilderBase *)(v54 + 40);
        std::string v56 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v55, v41, v53, v56, (const llvm::Twine *)&v85);
        std::string v58 = (AGCLLVMUserDynamicLibrary *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        uint64_t v59 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v87 = 257;
        uint64_t Add = llvm::IRBuilderBase::CreateAdd(v58, Mul, v59, (const llvm::Twine *)&v85);
        std::string v61 = (char *)this + *(void *)(*(void *)this - 24);
        uint64_t v62 = *((void *)v61 + 32);
        *(void *)&long long v78 = llvm::ConstantInt::get();
        *((void *)&v78 + 1) = Add;
        uint64_t v63 = (uint64_t *)(v61 + 40);
        uint64_t v29 = v49;
        __int16 v87 = 257;
        uint64_t v64 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v63, v62, v43, (uint64_t **)&v78, 2, (uint64_t)&v85);
        __int16 v84 = 257;
        uint64_t v66 = AGCLLVMBuilder::tryDeducePointeeType(v64, v65);
        uint64_t v67 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v63, v66, (uint64_t)v64, 0, (uint64_t)&v81);
        uint64_t v68 = (char *)this + *(void *)(*(void *)this - 24);
        __int16 v87 = 257;
        unsigned int v69 = (llvm::IRBuilderBase *)(v68 + 40);
        unsigned int v70 = (llvm::Value *)llvm::ConstantInt::get();
        llvm::IRBuilderBase::CreateInsertElement(v69, InsertElement, v67, v70, (const llvm::Twine *)&v85);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v30);
        uint64_t v28 = v77;
      }
      while (v77);
    }
    llvm::Function::eraseFromParent(v74);
  }
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::setupShaderWrapper(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::wrapperCallingConvention(AGCLLVMUserDynamicLibrary *this)
{
  return 107;
}

uint64_t AGCLLVMUserDynamicLibrary::wrapperFunctionType(AGCLLVMUserDynamicLibrary *this)
{
  return 0;
}

uint64_t AGCLLVMUserDynamicLibrary::initCompile(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t v2 = validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1086), 0, *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 864), (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (unsigned int *)this + 1086);
  if (v2) {
    AGCLLVMUserObject::initCompile(this);
  }
  return v2;
}

void AGCLLVMUserDynamicLibrary::simplifyGenericIR(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t v2 = *(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v20 = "air.visible_function_references";
  __int16 v21 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)&v20);
  if (NamedMetadata)
  {
    uint64_t v10 = NamedMetadata;
    int NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    if (NumOperands)
    {
      int v12 = NumOperands;
      for (int i = 0; i != v12; ++i)
      {
        uint64_t Operand = llvm::NamedMDNode::getOperand(v10);
        if (isStringMDNode(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)), "air.visible_function_reference"))
        {
          uint64_t v15 = Operand - 8 * *(unsigned int *)(Operand + 8);
          uint64_t v16 = *(unsigned __int8 **)(v15 + 8);
          if (v16 && *v16 - 1 <= 1)
          {
            int v17 = (llvm::Constant *)*((void *)v16 + 16);
            if (*((unsigned char *)v17 + 16)) {
              int v18 = 0;
            }
            else {
              int v18 = v17;
            }
          }
          else
          {
            int v18 = 0;
          }
          llvm::MDString::getString(*(llvm::MDString **)(v15 + 16));
          if (llvm::Module::getFunction())
          {
            llvm::ConstantExpr::getBitCast();
            llvm::Value::replaceAllUsesWith();
            llvm::Constant::removeDeadConstantUsers(v18);
            if (!*((void *)v18 + 1)) {
              llvm::Function::eraseFromParent(v18);
            }
          }
        }
      }
    }
    llvm::NamedMDNode::clearOperands(v10);
    llvm::NamedMDNode::eraseFromParent(v10);
  }
  SimplifyGenericIR(*(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368), *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 378), v4, v5, v6, v7, v8, v9, v19);
}

uint64_t AGCLLVMUserDynamicLibrary::getMaxTotalThreadsPerThreadgroup(AGCLLVMUserDynamicLibrary *this)
{
  return *((unsigned int *)this + 1086);
}

uint64_t AGCLLVMUserDynamicLibrary::AGCLLVMUserDynamicLibrary(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 4384), a2, *a3);
  uint64_t v7 = AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)a1, (uint64_t *)off_1F25BEDD8, (uint64_t)a3, "air.dylib", (uint64_t)&default_cs, 0, 1);
  *(void *)a1 = &unk_1F25BE9B0;
  *(void *)(a1 + 4384) = &unk_1F25BECD8;
  *(void *)(a1 + 4416) = &unk_1F25BEDC8;
  *(void *)(a1 + 432llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 4;
  *(void *)(a1 + 4336) = 0;
  *(void *)(a1 + 4328) = 0;
  *(void *)(a1 + 4341) = 0;
  *(void *)(a1 + 4352) = a4;
  *(void *)(a1 + 436llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 4;
  *(void *)(a1 + 4376) = 0;
  *(void *)(a1 + 4368) = 0;
  AGCLLVMUserShader::enableStatistics((uint64_t)v7, *(_DWORD *)a4 & 1, (*(_DWORD *)a4 >> 1) & 1);
  *(unsigned char *)(a1 + 18) = (*(unsigned char *)a4 & 8) != 0;
  *(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 276llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = (*(_DWORD *)a4 & 0x4000000) != 0;
  *(unsigned char *)(a1 + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = (*(unsigned char *)a4 & 4) != 0;
  *(unsigned char *)(a1 + 3712) = *(unsigned char *)(a4 + 1) & 1;
  *(_DWORD *)(a1 + 4344) = AGCLLVMUserShader::parseMaxTotalThreadsPerThreadgroup((AGCLLVMUserShader *)a1);
  *(unsigned char *)(a1 + 3713) = 1;
  *(unsigned char *)(a1 + 4348) = (*(_DWORD *)a4 & 0x20000000) != 0;
  uint64_t v8 = *(llvm::Module **)(*(void *)(*(void *)a1 - 24) + a1 + 368);
  uint64_t v16 = "llvm.module.flags";
  __int16 v17 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v8, (const llvm::Twine *)&v16);
  if (NamedMetadata)
  {
    uint64_t v10 = (llvm::NamedMDNode *)NamedMetadata;
    for (unsigned int i = 0; i < llvm::NamedMDNode::getNumOperands(v10); ++i)
    {
      uint64_t Operand = llvm::NamedMDNode::getOperand(v10);
      uint64_t v13 = 8 - 8 * *(unsigned int *)(Operand + 8);
      while (v13)
      {
        BOOL v14 = isStringMDNode(*(llvm::MDString **)(Operand + v13), "PIC Level");
        v13 += 8;
        if (v14)
        {
          llvm::ConstantInt::get();
          llvm::ValueAsMetadata::get();
          llvm::MDNode::replaceOperandWith();
          goto LABEL_10;
        }
      }
    }
  }
  llvm::Module::addModuleFlag();
LABEL_10:
  llvm::Module::getOrInsertNamedMetadata();
  return a1;
}

BOOL AGCLLVMUserFragmentShader::getEffectiveFragmentRate(int a1, uint64_t a2, uint64_t a3)
{
  if (a1 == 1 && a3 == 18)
  {
    return *(void *)a2 == 0x706D61732E726961
        && *(void *)(a2 + 8) == 0x5F6B73616D5F656CLL
        && *(_WORD *)(a2 + 16) == 28265;
  }
  else
  {
    if (a3 != 21) {
      return 0;
    }
    unint64_t v5 = 0x6169722E636F6C6FLL;
    unint64_t v6 = bswap64(*(void *)a2);
    if (v6 == 0x6169722E636F6C6FLL
      && (v5 = 0x725F73616D706C65, unint64_t v6 = bswap64(*(void *)(a2 + 8)), v6 == 0x725F73616D706C65)
      && (v5 = 0x706C655F6D61736BLL, unint64_t v6 = bswap64(*(void *)(a2 + 13)), v6 == 0x706C655F6D61736BLL))
    {
      int v7 = 0;
    }
    else if (v5 < v6)
    {
      int v7 = -1;
    }
    else
    {
      int v7 = 1;
    }
    return v7 == 0;
  }
}

llvm::GetElementPtrInst *AGCLLVMBuilder::CreateConstInBoundsGEP1_32(AGCLLVMBuilder *this, llvm::Type *a2, llvm::Value *a3)
{
  uint64_t v5 = *(void *)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v5 = **(void **)(v5 + 16);
  }
  uint64_t v6 = **(void **)(v5 + 16);
  __int16 v10 = 257;
  llvm::Type::getInt32Ty(*((llvm::Type **)this + 9), a2);
  int v12 = (uint64_t *)llvm::ConstantInt::get();
  int v7 = (llvm::GetElementPtrInst *)(*(uint64_t (**)(void, uint64_t, llvm::Type *, uint64_t **, uint64_t, uint64_t))(**((void **)this + 10) + 48))(*((void *)this + 10), v6, a2, &v12, 1, 1);
  if (!v7)
  {
    __int16 v11 = 257;
    int v7 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(v6, (uint64_t *)a2, &v12, 1);
    llvm::GetElementPtrInst::setIsInBounds(v7);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this + 1, (uint64_t)v7, (uint64_t)v9);
  }
  return v7;
}

llvm::GetElementPtrInst *AGCLLVMBuilder::CreateConstInBoundsGEP2_32(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unsigned int a4, unsigned int a5, const llvm::Twine *a6)
{
  unsigned int v6 = a3;
  uint64_t v8 = *(void *)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v8 = **(void **)(v8 + 16);
  }
  uint64_t v9 = **(llvm::Type ***)(v8 + 16);
  __int16 v12 = 257;
  return llvm::IRBuilderBase::CreateConstInBoundsGEP2_32(this + 1, v9, a2, v6, (uint64_t)v11, a6);
}

uint64_t AGCLLVMUserFragmentShader::buildAlphaQuantize(AGCLLVMUserFragmentShader *this, llvm::Value *a2)
{
  uint64_t v4 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v5 = *((void *)v4 + 50);
  long long v14 = *(_OWORD *)(v4 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v15, (llvm::IRBuilderBase *)(v4 + 40));
  int v16 = *((_DWORD *)v4 + 34);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, uint64_t, void, uint64_t))(*(void *)v5 + 88))(v5, &v14, a2, 8, 0, 1);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  int v7 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v8 = *((void *)v7 + 50);
  long long v11 = *(_OWORD *)(v7 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v7 + 40));
  int v13 = *((_DWORD *)v7 + 34);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)v8 + 96))(v8, &v11, v6, 8, 0, 32);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t blendIsNoOpForPassthrough(int a1, int a2, int a3)
{
  int v3 = a1 - 1;
  uint64_t result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((a2 != 2 || a3 != 1) && (a2 != 4 || a3 != 3) && (a2 != 4 || a3 != 7))
      {
        BOOL v6 = a3 == 3 || a3 == 7;
        BOOL v7 = v6;
        if ((a2 != 8 || !v7) && (a2 != 6 || a3 != 5) && (a2 != 6 || a3 != 9))
        {
          BOOL v8 = a3 == 5 || a3 == 9;
          BOOL v9 = v8;
          if ((a2 != 10 || !v9) && (a2 != 1 || a3 != 2) && (a2 != 3 || a3 != 4) && (a2 != 7 || a3 != 4))
          {
            BOOL v10 = a2 == 3 || a2 == 7;
            BOOL v11 = v10;
            if ((a3 != 8 || !v11) && (a2 != 5 || a3 != 6) && (a2 != 9 || a3 != 6))
            {
              BOOL v5 = (a2 == 5 || a2 == 9) && a3 == 10;
              goto LABEL_60;
            }
          }
        }
      }
      break;
    case 3:
      BOOL v5 = a2 == 2 && a3 == 1;
      goto LABEL_60;
    case 4:
    case 5:
      BOOL v5 = a2 == 1 && a3 == 2;
LABEL_60:
      uint64_t result = v5;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

llvm::GetElementPtrInst *llvm::IRBuilderBase::CreateConstInBoundsGEP2_32(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unsigned int a4, uint64_t a5, const llvm::Twine *a6)
{
  v13[2] = *(uint64_t **)MEMORY[0x1E4F143B8];
  llvm::Type::getInt32Ty(this[8], a2);
  v13[0] = (uint64_t *)llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(this[8], v10);
  v13[1] = (uint64_t *)llvm::ConstantInt::get();
  BOOL v11 = (llvm::GetElementPtrInst *)(*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, uint64_t))(*(void *)this[9] + 48))(this[9], a2, a3, v13, 2, 1);
  if (!v11)
  {
    BOOL v11 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, v13, 2);
    llvm::GetElementPtrInst::setIsInBounds(v11);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)v11, a5);
  }
  return v11;
}

BOOL virtual thunk to'AGCLLVMGLFragmentShader::constructReply(AGCLLVMGLFragmentShader *this)
{
  return AGCLLVMGLFragmentShader::constructReply((AGCLLVMGLFragmentShader *)((char *)this
                                                                           + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMGLFragmentShader::constructReply(AGCLLVMGLFragmentShader *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMGLFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMGLFragmentShader *)((char *)this + *(void *)(*(void *)this - 24)));
    int v3 = AGCLLVMUserObject::constructFlatReply(this);
    int v4 = AGCLLVMUserFragmentShader::constructFlatReply(this);
    BOOL v5 = (char *)this + *(void *)(*(void *)this - 24);
    BOOL v6 = (flatbuffers::FlatBufferBuilder *)(v5 + 2472);
    v5[2542] = 1;
    int v7 = *((_DWORD *)v5 + 626) - *((_DWORD *)v5 + 630) + *((_DWORD *)v5 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v5 + 2472), v3);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::FragmentShaderInfo>(v6, v4);
    BOOL v8 = (AGCLLVMGLFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v9 = flatbuffers::FlatBufferBuilder::EndTable(v6, v7);
    flatbuffers::FlatBufferBuilder::Finish(v8, v9, v10);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMGLFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  }
  return v2;
}

void virtual thunk to'AGCLLVMGLFragmentShader::getCompilationKeyDescription(AGCLLVMGLFragmentShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMGLFragmentShader::getCompilationKeyDescription(AGCLLVMGLFragmentShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  int v4 = (unsigned int *)*((void *)this + 727);
  std::string::basic_string[abi:nn180100]<0>(v49, "AGCFragmentContextStateGL");
  std::string::basic_string[abi:nn180100]<0>(&v54, "AGCFragmentContextState");
  std::string::basic_string[abi:nn180100]<0>(v52, "fragmentState");
  std::string::basic_string[abi:nn180100]<0>(&v90, "AGCFragmentState");
  std::string::basic_string[abi:nn180100]<0>(&v75, "GL and Metal state:");
  std::string::basic_string[abi:nn180100]<0>(&v73, "alphaToCoverage");
  _agcFieldString<unsigned int>(&v76, (const void **)&v73.__r_.__value_.__l.__data_, *v4 & 1);
  std::string::basic_string[abi:nn180100]<0>(v71, "alphaToOne");
  _agcFieldString<unsigned int>(&v77, (const void **)v71, (*v4 >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v69, "sampleCoverage");
  _agcFieldString<unsigned int>(&v78, (const void **)v69, (*v4 >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v79, "GL specific state:");
  std::string::basic_string[abi:nn180100]<0>(v67, "depthStencilWriteDisabled");
  _agcFieldString<unsigned int>(&v80, (const void **)v67, (*v4 >> 4) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v66, "logicOp");
  _agcFieldString<unsigned int>(&v81, (const void **)&v66.__r_.__value_.__l.__data_, (*v4 >> 5) & 1);
  std::string::basic_string[abi:nn180100]<0>(v64, "logicOpState");
  _agcFieldString<char const*>(&v82, (const void **)v64, _agcLogicOpStrings[((unint64_t)*v4 >> 6) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(&v63, "alphaTest");
  _agcFieldString<unsigned int>(&v83, (const void **)&v63.__r_.__value_.__l.__data_, (*v4 >> 11) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v62, "alphaTestFunc");
  _agcFieldString<char const*>(&v84, (const void **)&v62.__r_.__value_.__l.__data_, _agcCompareFuncStrings[(unsigned __int16)*v4 >> 12]);
  std::string::basic_string[abi:nn180100]<0>(&v61, "smoothPoints");
  _agcFieldString<unsigned int>(&v85, (const void **)&v61.__r_.__value_.__l.__data_, HIWORD(*v4) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v60, "pointSpriteEnabled");
  _agcFieldString<unsigned int>(&v86, (const void **)&v60.__r_.__value_.__l.__data_, (*v4 >> 17) & 1);
  std::string::basic_string[abi:nn180100]<0>(v58, "outputPointSize");
  _agcFieldString<unsigned int>(&v87, (const void **)v58, (*v4 >> 18) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v57, "shaderDebugEnable");
  _agcFieldString<unsigned int>(&v88, (const void **)&v57.__r_.__value_.__l.__data_, (*v4 >> 19) & 1);
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v89, (const void **)__p, *v4 >> 20);
  _agcGroupWithHeader(&v51, (uint64_t)&v90, 0, (uint64_t)&v75, 15);
  uint64_t v5 = 360;
  do
  {
    if (v75.__r_.__value_.__s.__data_[v5 - 1] < 0) {
      operator delete(*(void **)((char *)&v74.__r_.__value_.__l.__data_ + v5));
    }
    v5 -= 24;
  }
  while (v5);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  _agcFieldString<std::string>(&v90, (const void **)v52, (uint64_t)&v51);
  std::string::basic_string[abi:nn180100]<0>(v64, "colorMaskState");
  std::string::basic_string[abi:nn180100]<0>(&v73, "AGCColorMaskState");
  std::string::basic_string[abi:nn180100]<0>(v71, "redEnableBits");
  _agcFieldStringHex(&v75, (const void **)v71);
  std::string::basic_string[abi:nn180100]<0>(v69, "greenEnableBits");
  _agcFieldStringHex(&v76, (const void **)v69);
  std::string::basic_string[abi:nn180100]<0>(v67, "blueEnableBits");
  _agcFieldStringHex(&v77, (const void **)v67);
  std::string::basic_string[abi:nn180100]<0>(&v66, "alphaEnableBits");
  _agcFieldStringHex(&v78, (const void **)&v66.__r_.__value_.__l.__data_);
  _agcGroupWithHeader(&v63, (uint64_t)&v73, 0, (uint64_t)&v75, 4);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v78.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v78.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  _agcFieldString<std::string>(&v91, (const void **)v64, (uint64_t)&v63);
  _agcGroupWithHeader(&v73, (uint64_t)&v54, 0, (uint64_t)&v90, 2);
  for (uint64_t j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v91.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v90 + j * 8 + 24));
    }
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v61, "blendState");
  std::string::basic_string[abi:nn180100]<0>(&v90, "AGCBlendState");
  std::string::basic_string[abi:nn180100]<0>(v71, "enabled");
  if (v4[4]) {
    BOOL v8 = "yes";
  }
  else {
    BOOL v8 = "no";
  }
  _agcFieldString<char const*>(&v75, (const void **)v71, v8);
  std::string::basic_string[abi:nn180100]<0>(v69, "src");
  _agcFieldString<char const*>(&v76, (const void **)v69, _agcBlendFactorStrings[((unint64_t)v4[4] >> 1) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v67, "dst");
  _agcFieldString<char const*>(&v77, (const void **)v67, _agcBlendFactorStrings[((unint64_t)v4[4] >> 6) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(&v66, "srcA");
  _agcFieldString<char const*>(&v78, (const void **)&v66.__r_.__value_.__l.__data_, _agcBlendFactorStrings[(unsigned __int16)v4[4] >> 11]);
  std::string::basic_string[abi:nn180100]<0>(v64, "dstA");
  _agcFieldString<char const*>(&v79, (const void **)v64, _agcBlendFactorStrings[*((_WORD *)v4 + 9) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(&v63, "equation");
  _agcFieldString<char const*>(&v80, (const void **)&v63.__r_.__value_.__l.__data_, _agcBlendEquationStrings[((unint64_t)v4[4] >> 21) & 7]);
  std::string::basic_string[abi:nn180100]<0>(&v62, "equationA");
  _agcFieldString<char const*>(&v81, (const void **)&v62.__r_.__value_.__l.__data_, _agcBlendEquationStrings[*((unsigned char *)v4 + 19) & 7]);
  _agcGroupWithHeader(&v60, (uint64_t)&v90, 0, (uint64_t)&v75, 7);
  for (uint64_t k = 0; k != -21; k -= 3)
  {
    if (SHIBYTE(v81.__r_.__value_.__r.__words[k + 2]) < 0) {
      operator delete(*(void **)((char *)&v81.__r_.__value_.__l.__data_ + k * 8));
    }
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  _agcFieldString<std::string>(&v74, (const void **)&v61.__r_.__value_.__l.__data_, (uint64_t)&v60);
  _agcGroupWithHeader(&v38, (uint64_t)v49, 0, (uint64_t)&v73, 2);
  for (uint64_t m = 0; m != -6; m -= 3)
  {
    if (SHIBYTE(v74.__r_.__value_.__r.__words[m + 2]) < 0) {
      operator delete(*(void **)((char *)&v73 + m * 8 + 24));
    }
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  uint64_t v11 = *((void *)this + 614);
  std::string::basic_string[abi:nn180100]<0>(&v73, "AGCDrawBufferState");
  std::string::basic_string[abi:nn180100]<0>(v71, "enabledBits");
  _agcFieldStringHex(&v90, (const void **)v71);
  std::string::basic_string[abi:nn180100]<0>(v69, "sampleCount");
  _agcFieldString<unsigned int>(&v91, (const void **)v69, (*(_DWORD *)(v11 + 32) >> 8) & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v67, "colorSampleCount");
  _agcFieldString<unsigned int>(&v92, (const void **)v67, (unsigned __int16)*(_DWORD *)(v11 + 32) >> 12);
  std::string::basic_string[abi:nn180100]<0>(&v66, "outputPartitionSize");
  _agcFieldString<unsigned int>(&v93, (const void **)&v66.__r_.__value_.__l.__data_, *(_WORD *)(v11 + 34) & 0x1FF);
  std::string::basic_string[abi:nn180100]<0>(v64, "LIBSpilling");
  _agcFieldString<unsigned int>(&v94, (const void **)v64, (*(_DWORD *)(v11 + 32) >> 25) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v63, "unused");
  _agcFieldString<unsigned int>(&v95, (const void **)&v63.__r_.__value_.__l.__data_, *(_DWORD *)(v11 + 32) >> 27);
  std::string::basic_string[abi:nn180100]<0>(&v62, "encoded : ");
  std::string::basic_string[abi:nn180100]<0>(&v61, "encoded[0]");
  _agcStringRepresentation(&v60, (_DWORD *)v11);
  _agcFieldString<std::string>(&v75, (const void **)&v61.__r_.__value_.__l.__data_, (uint64_t)&v60);
  std::string::basic_string[abi:nn180100]<0>(v58, "encoded[1]");
  _agcStringRepresentation(&v57, (_DWORD *)(v11 + 4));
  _agcFieldString<std::string>(&v76, (const void **)v58, (uint64_t)&v57);
  std::string::basic_string[abi:nn180100]<0>(__p, "encoded[2]");
  _agcStringRepresentation(&v54, (_DWORD *)(v11 + 8));
  _agcFieldString<std::string>(&v77, (const void **)__p, (uint64_t)&v54);
  std::string::basic_string[abi:nn180100]<0>(v52, "encoded[3]");
  _agcStringRepresentation(&v51, (_DWORD *)(v11 + 12));
  _agcFieldString<std::string>(&v78, (const void **)v52, (uint64_t)&v51);
  std::string::basic_string[abi:nn180100]<0>(v49, "encoded[4]");
  _agcStringRepresentation(&v48, (_DWORD *)(v11 + 16));
  _agcFieldString<std::string>(&v79, (const void **)v49, (uint64_t)&v48);
  std::string::basic_string[abi:nn180100]<0>(v46, "encoded[5]");
  _agcStringRepresentation(&v45, (_DWORD *)(v11 + 20));
  _agcFieldString<std::string>(&v80, (const void **)v46, (uint64_t)&v45);
  std::string::basic_string[abi:nn180100]<0>(v43, "encoded[6]");
  _agcStringRepresentation(&v42, (_DWORD *)(v11 + 24));
  _agcFieldString<std::string>(&v81, (const void **)v43, (uint64_t)&v42);
  std::string::basic_string[abi:nn180100]<0>(v40, "encoded[7]");
  _agcStringRepresentation(&v39, (_DWORD *)(v11 + 28));
  _agcFieldString<std::string>(&v82, (const void **)v40, (uint64_t)&v39);
  _agcGroupWithHeader(&v96, (uint64_t)&v62, 0, (uint64_t)&v75, 8);
  _agcGroupWithHeader(&v37, (uint64_t)&v73, 0, (uint64_t)&v90, 7);
  for (uint64_t n = 0; n != -21; n -= 3)
  {
    if (SHIBYTE(v96.__r_.__value_.__r.__words[n + 2]) < 0) {
      operator delete(*(void **)((char *)&v96.__r_.__value_.__l.__data_ + n * 8));
    }
  }
  for (iuint64_t i = 0; ii != -24; ii -= 3)
  {
    if (SHIBYTE(v82.__r_.__value_.__r.__words[ii + 2]) < 0) {
      operator delete(*(void **)((char *)&v82.__r_.__value_.__l.__data_ + ii * 8));
    }
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (v65 < 0) {
    operator delete(v64[0]);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  long long v14 = (unsigned int *)*((void *)this + 737);
  std::string::basic_string[abi:nn180100]<0>(&v90, "");
  for (juint64_t j = 1; jj != 33; ++jj)
  {
    std::to_string(&v73, v14[jj]);
    int v16 = std::string::append(&v73, " ");
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v18 = &v75;
    }
    else {
      int v18 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v75.__r_.__value_.__l.__size_;
    }
    std::string::append(&v90, (const std::string::value_type *)v18, size);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:nn180100]<0>(&v73, "AGCSamplerRemapStateGL");
  std::string::basic_string[abi:nn180100]<0>(v71, "samplerCount");
  _agcFieldString<unsigned int>(&v75, (const void **)v71, *v14);
  std::string::basic_string[abi:nn180100]<0>(v69, "samplerToTexUnitMap");
  std::operator+<char>();
  uint64_t v20 = std::string::append(&v66, "]");
  std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v67 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v68 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  _agcFieldString<std::string>(&v76, (const void **)v69, (uint64_t)v67);
  _agcGroupWithHeader(&v60, (uint64_t)&v73, 0, (uint64_t)&v75, 2);
  for (kuint64_t k = 0; kk != -6; kk -= 3)
  {
    if (SHIBYTE(v76.__r_.__value_.__r.__words[kk + 2]) < 0) {
      operator delete(*(void **)((char *)&v75 + kk * 8 + 24));
    }
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  uint64_t v23 = *((void *)this + 735);
  if (v23)
  {
    int v36 = a2;
    std::string::basic_string[abi:nn180100]<0>(&v62, "");
    for (muint64_t m = 0; mm != 32; ++mm)
    {
      std::string::basic_string[abi:nn180100]<0>(&v90, "AGCSamplerPCFState");
      std::string::basic_string[abi:nn180100]<0>(&v73, "compareFunc");
      _agcFieldString<char const*>(&v75, (const void **)&v73.__r_.__value_.__l.__data_, _agcCompareFuncStrings[*(_WORD *)(v23 + 2 * mm) & 0xF]);
      std::string::basic_string[abi:nn180100]<0>(v71, "clampPCFEnabled");
      _agcFieldString<unsigned short>(&v76, (const void **)v71, (*(_WORD *)(v23 + 2 * mm) >> 4) & 1);
      std::string::basic_string[abi:nn180100]<0>(v69, "mipmapMinFilterEnabled");
      _agcFieldString<unsigned short>(&v77, (const void **)v69, (*(_WORD *)(v23 + 2 * mm) >> 5) & 1);
      std::string::basic_string[abi:nn180100]<0>(v67, "trilinearMinFilterEnabled");
      _agcFieldString<unsigned short>(&v78, (const void **)v67, (*(_WORD *)(v23 + 2 * mm) >> 6) & 1);
      std::string::basic_string[abi:nn180100]<0>(&v66, "linearMinFilterEnabled");
      _agcFieldString<unsigned short>(&v79, (const void **)&v66.__r_.__value_.__l.__data_, (*(_WORD *)(v23 + 2 * mm) >> 7) & 1);
      std::string::basic_string[abi:nn180100]<0>(v64, "linearMagFilterEnabled");
      _agcFieldString<unsigned short>(&v80, (const void **)v64, HIBYTE(*(_WORD *)(v23 + 2 * mm)) & 1);
      std::string::basic_string[abi:nn180100]<0>(&v63, "unused");
      _agcFieldString<unsigned short>(&v81, (const void **)&v63.__r_.__value_.__l.__data_, *(_WORD *)(v23 + 2 * mm) >> 9);
      _agcGroupWithHeader(&v61, (uint64_t)&v90, 1, (uint64_t)&v75, 7);
      for (nuint64_t n = 0; nn != -21; nn -= 3)
      {
        if (SHIBYTE(v81.__r_.__value_.__r.__words[nn + 2]) < 0) {
          operator delete(*(void **)((char *)&v81.__r_.__value_.__l.__data_ + nn * 8));
        }
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (v65 < 0) {
        operator delete(v64[0]);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v68) < 0) {
        operator delete(v67[0]);
      }
      if (v70 < 0) {
        operator delete(v69[0]);
      }
      if (v72 < 0) {
        operator delete(v71[0]);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v26 = &v61;
      }
      else {
        char v26 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = v61.__r_.__value_.__l.__size_;
      }
      std::string::append(&v62, (const std::string::value_type *)v26, v27);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
    }
    std::string::basic_string[abi:nn180100]<0>(&v90, "AGCSamplerPCFStates");
    std::string::basic_string[abi:nn180100]<0>(&v75, "pcf : ");
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v76, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    }
    else {
      std::string v76 = v62;
    }
    a2 = v36;
    _agcGroupWithHeader(&v73, (uint64_t)&v90, 0, (uint64_t)&v75, 2);
    for (uint64_t i1 = 0; i1 != -6; i1 -= 3)
    {
      if (SHIBYTE(v76.__r_.__value_.__r.__words[i1 + 2]) < 0) {
        operator delete(*(void **)((char *)&v75 + i1 * 8 + 24));
      }
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&v73, "");
  }
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v90, (const void **)&v38.__r_.__value_.__l.__data_, (const void **)&v37.__r_.__value_.__l.__data_);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v29 = &v60;
  }
  else {
    uint64_t v29 = (std::string *)v60.__r_.__value_.__r.__words[0];
  }
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = v60.__r_.__value_.__l.__size_;
  }
  uint64_t v31 = std::string::append(&v90, (const std::string::value_type *)v29, v30);
  std::string::size_type v32 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v33 = &v73;
  }
  else {
    uint64_t v33 = (std::string *)v73.__r_.__value_.__r.__words[0];
  }
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v34 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = v73.__r_.__value_.__l.__size_;
  }
  int v35 = std::string::append(&v75, (const std::string::value_type *)v33, v34);
  *a2 = *v35;
  v35->__r_.__value_.__r.__words[0] = 0;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void _agcGroupWithHeader(std::string *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v28 = *(std::string *)a2;
  }
  _agcIndentedLine((void **)&v29.__r_.__value_.__l.__data_, (std::string::value_type *)&v28, a3);
  std::string::basic_string[abi:nn180100]<0>(v23, "{");
  _agcIndentedLine(&__p, (std::string::value_type *)v23, a3);
  if ((v27 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v10 = v27;
  }
  else {
    std::string::size_type v10 = v26;
  }
  uint64_t v11 = std::string::append(&v29, p_p, v10);
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v27 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if (!a5) {
      goto LABEL_41;
    }
    goto LABEL_20;
  }
  if (a5)
  {
LABEL_20:
    for (uint64_t i = 24 * a5; i; i -= 24)
    {
      if (*(char *)(a4 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
      }
      else {
        std::string v29 = *(std::string *)a4;
      }
      int v14 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v22, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      }
      else {
        std::string v22 = v29;
      }
      _agcIndentedLine(&__p, (std::string::value_type *)&v22, a3 + 1);
      if ((v27 & 0x80u) == 0) {
        uint64_t v15 = (const std::string::value_type *)&__p;
      }
      else {
        uint64_t v15 = (const std::string::value_type *)__p;
      }
      if ((v27 & 0x80u) == 0) {
        std::string::size_type v16 = v27;
      }
      else {
        std::string::size_type v16 = v26;
      }
      std::string::append(&v30, v15, v16);
      if ((char)v27 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v22.__r_.__value_.__l.__data_);
        if (v14 < 0) {
LABEL_40:
        }
          operator delete(v29.__r_.__value_.__l.__data_);
      }
      else if (v14 < 0)
      {
        goto LABEL_40;
      }
      a4 += 24;
    }
  }
LABEL_41:
  std::string::basic_string[abi:nn180100]<0>(v20, "}");
  _agcIndentedLine((void **)&v29.__r_.__value_.__l.__data_, (std::string::value_type *)v20, a3);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = &v30;
  }
  else {
    std::string::size_type v17 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v30.__r_.__value_.__l.__size_;
  }
  char v19 = std::string::insert(&v29, 0, (const std::string::value_type *)v17, size);
  *a1 = *v19;
  v19->__r_.__value_.__r.__words[0] = 0;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void _agcFieldString<unsigned short>(std::string *a1, const void **a2, unsigned __int16 a3)
{
  std::to_string(&v5, a3);
  _agcFieldString<std::string>(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

uint64_t virtual thunk to'AGCLLVMGLFragmentShader::requiresDebugInfo(AGCLLVMGLFragmentShader *this)
{
  return (*(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 96) + 5816) + 2) >> 3) & 1;
}

void virtual thunk to'AGCLLVMGLFragmentShader::~AGCLLVMGLFragmentShader(AGCLLVMGLFragmentShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F25BFCE8;
  v1[742] = &unk_1F25C0068;
  v1[746] = &unk_1F25C0158;
  v1[540] = &unk_1F25BFF68;
  uint64_t v2 = v1[740];
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 738));
  }
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader((AGCLLVMUserFragmentShader *)v1, (uint64_t *)off_1F25C0168);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 742));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  uint64_t v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F25BFCE8;
  v1[742] = &unk_1F25C0068;
  v1[746] = &unk_1F25C0158;
  v1[540] = &unk_1F25BFF68;
  uint64_t v2 = v1[740];
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 738));
  }
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader((AGCLLVMUserFragmentShader *)v1, (uint64_t *)off_1F25C0168);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 742));
}

void non-virtual thunk to'AGCLLVMGLFragmentShader::~AGCLLVMGLFragmentShader(AGCLLVMGLFragmentShader *this)
{
  uint64_t v1 = (AGCLLVMGLFragmentShader *)((char *)this - 4320);
  *((void *)this - 54llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = &unk_1F25BFCE8;
  uint64_t v2 = (AGCLLVMGLFragmentShader *)((char *)this + 1616);
  *((void *)this + 202) = &unk_1F25C0068;
  *((void *)this + 206) = &unk_1F25C0158;
  *(void *)this = &unk_1F25BFF68;
  uint64_t v3 = *((void *)this + 200);
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGLFragmentShader *)((char *)this + 1584));
  }
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader(v1, (uint64_t *)off_1F25C0168);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMUserFragmentShader *v1;
  AGCLLVMObject *v2;
  uint64_t v3;
  uint64_t vars8;

  uint64_t v1 = (AGCLLVMGLFragmentShader *)((char *)this - 4320);
  *((void *)this - 54llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = &unk_1F25BFCE8;
  uint64_t v2 = (AGCLLVMGLFragmentShader *)((char *)this + 1616);
  *((void *)this + 202) = &unk_1F25C0068;
  *((void *)this + 206) = &unk_1F25C0158;
  *(void *)this = &unk_1F25BFF68;
  uint64_t v3 = *((void *)this + 200);
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGLFragmentShader *)((char *)this + 1584));
  }
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader(v1, (uint64_t *)off_1F25C0168);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t AGCLLVMGLFragmentShader::requiresDebugInfo(AGCLLVMGLFragmentShader *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 727) + 2) >> 3) & 1;
}

uint64_t AGCLLVMGLFragmentShader::adjustFragCoordY(AGCLLVMGLFragmentShader *this, llvm::Value *a2)
{
  FragCoordYAdjustAndType = (llvm::Type *)AGCLLVMGLFragmentShader::getFragCoordYAdjustAndType(this);
  ConstInBoundsGEP2_32 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32), FragCoordYAdjustAndType, 0, v5, v6, v7);
  std::string::size_type v12 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32), FragCoordYAdjustAndType, (llvm::Value *)1, v9, v10, v11);
  int v13 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  __int16 v26 = 257;
  uint64_t v15 = AGCLLVMBuilder::tryDeducePointeeType(ConstInBoundsGEP2_32, v14);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v15, (uint64_t)ConstInBoundsGEP2_32, 0, (uint64_t)v25);
  std::string::size_type v17 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  __int16 v26 = 257;
  char v19 = AGCLLVMBuilder::tryDeducePointeeType(v12, v18);
  uint64_t v20 = llvm::IRBuilderBase::CreateAlignedLoad(v17 + 5, v19, (uint64_t)v12, 0, (uint64_t)v25);
  char v21 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  __int16 v26 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)v21, (uint64_t)a2, AlignedLoad, (uint64_t)v25);
  v24[16] = 257;
  return llvm::IRBuilderBase::CreateFAdd((uint64_t)v21, FMul, v20, (uint64_t)v24);
}

uint64_t AGCLLVMGLFragmentShader::getFragCoordYAdjustAndType(AGCLLVMGLFragmentShader *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  v11[0] = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 200);
  v11[1] = v11[0];
  uint64_t v2 = llvm::StructType::get();
  uint64_t v3 = (AGCLLVMGLFragmentShader *)((char *)this + 5904);
  if (!*((void *)this + 740))
  {
    int v4 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v11[0] = "agc.frag_coord_y_adjust";
    __int16 v14 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    unsigned int v5 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v6 = *((void *)v5 + 47);
    uint64_t v7 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v5 + 32), v4);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v6, v7);
    llvm::ValueHandleBase::operator=(v3, (uint64_t)v4);
  }
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, 2u, v3);
  uint64_t v13 = v2;
  uint64_t v8 = v12;
  if (v12 != -8192 && v12 != -4096 && v12 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
  }
  return v8;
}

uint64_t AGCLLVMGLFragmentShader::getBarycentricCoordVarying@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0x500000000;
  *(void *)(a1 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = a1 + 56;
  return llvm::SmallVectorImpl<unsigned int>::assign(a1 + 40, 5uLL, -559038737);
}

uint64_t AGCLLVMGLFragmentShader::getPrimitiveIdVarying@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0x500000000;
  *(void *)(a1 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = a1 + 56;
  return llvm::SmallVectorImpl<unsigned int>::assign(a1 + 40, 5uLL, -559038737);
}

uint64_t AGCLLVMGLFragmentShader::getFragmentViewportOrLayerIdVarying@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0x500000000;
  *(void *)(a1 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = a1 + 56;
  return llvm::SmallVectorImpl<unsigned int>::assign(a1 + 40, 5uLL, -559038737);
}

void AGCLLVMGLFragmentShader::getFragmentVaryings(AGCLLVMBuilder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v49[3] = *MEMORY[0x1E4F143B8];
  *a4 = a4 + 2;
  a4[1] = 0x400000000;
  AGCLLVMBuilder::getVariableTypeMap(a1);
  AGCLLVMUserShader::getVaryingModeMap(v8);
  AGCLLVMUserShader::getInterpolationLocationMap(v9);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    int v10 = *(_DWORD *)(a2 + 32);
  }
  else {
    int v10 = 1;
  }
  unsigned int v42 = 0;
  LODWORD(v43) = 3;
  parseMDInt(0, a3, (unsigned int *)&v43, &v42);
  uint64_t v11 = a3 - 8 * *(unsigned int *)(a3 + 8);
  uint64_t v12 = *(unsigned char **)(v11 + 32);
  if (v12)
  {
    if (*v12) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = *(llvm::MDString **)(v11 + 32);
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  __int16 v14 = *(llvm::MDString **)(v11 + 40);
  if (v14)
  {
    if (*(unsigned char *)v14) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t String = (const void *)llvm::MDString::getString(v13);
  size_t v18 = v17;
  char v19 = (const void *)llvm::MDString::getString(v15);
  size_t v21 = v20;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v41 = 0;
  int v32 = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  int v38 = 1;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  uint64_t v31 = MEMORY[0x1E4FBA010] + 16;
  std::string v39 = __p;
  llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v31);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    a2 = **(void **)(a2 + 16);
  }
  llvm::Type::print((llvm::Type *)a2, (llvm::raw_ostream *)&v31);
  int v22 = *(_DWORD *)(*llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>(v19, v21) + 8);
  unsigned int v23 = *(_DWORD *)(*llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>(String, v18)+ 8);
  if (v23 == 1) {
    int v22 = 3;
  }
  unint64_t v43 = 0;
  uint64_t v44 = 0;
  unsigned int v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  v48[0] = v49;
  v48[1] = (void *)0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)v48, 5uLL, -559038737);
  unint64_t v43 = __PAIR64__(v23, v10);
  LODWORD(v44) = v22;
  int Key = llvm::StringMapImpl::FindKey();
  int v25 = 10;
  if (Key != -1 && Key != (unint64_t)dword_1EBD0E978) {
    int v25 = *(_DWORD *)(*(void *)(AGCLLVMBuilder::getVariableTypeMap(void)::variable_type_map + 8 * Key) + 8);
  }
  HIDWORD(v44) = v25;
  unsigned int v45 = v42;
  uint64_t v47 = AGCLLVMUserFragmentShader::setupInterpolation(a1, 1, v42, v43);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v31);
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v26 = llvm::SmallVectorTemplateCommon<AGCLLVMUserFragmentShader::FragmentVarying,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>>((uint64_t)a4, (unint64_t)&v43);
  uint64_t v27 = *a4 + 80 * *((unsigned int *)a4 + 2);
  long long v28 = *(_OWORD *)v26;
  long long v29 = *(_OWORD *)(v26 + 16);
  *(void *)(v27 + 32) = *(void *)(v26 + 32);
  *(_OWORD *)uint64_t v27 = v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(void *)(v27 + 48) = 0x500000000;
  *(void *)(v27 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v27 + 56;
  uint64_t v30 = v27 + 40;
  if (*(_DWORD *)(v26 + 48)) {
    llvm::SmallVectorImpl<unsigned int>::operator=(v30, v26 + 40);
  }
  ++*((_DWORD *)a4 + 2);
  if (v48[0] != v49) {
    free(v48[0]);
  }
}

uint64_t *std::__call_once_proxy[abi:nn180100]<std::tuple<AGCLLVMBuilder::getVariableTypeMap(void)::{lambda(llvm::StringMap<ComponentType,llvm::MallocAllocator> &)#1} &,llvm::StringMap<ComponentType,llvm::MallocAllocator> &>>(uint64_t a1)
{
  uint64_t v1 = *(llvm::StringMapImpl **)(*(void *)a1 + 8);
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "i1", 2uLL) + 8) = 2;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "BOOL", 4uLL) + 8) = 2;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "i8", 2uLL) + 8) = 5;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "char", 4uLL) + 8) = 5;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "int8_t", 6uLL) + 8) = 5;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "uchar", 5uLL) + 8) = 5;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "uint8_t", 7uLL) + 8) = 5;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "unsigned char", 0xDuLL) + 8) = 5;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "i16", 3uLL) + 8) = 4;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "short", 5uLL) + 8) = 4;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "int16_t", 7uLL) + 8) = 4;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "ushort", 6uLL) + 8) = 4;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "uint16_t", 8uLL) + 8) = 4;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "unsigned short", 0xEuLL) + 8) = 4;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "i32", 3uLL) + 8) = 3;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "int", 3uLL) + 8) = 3;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "int32_t", 7uLL) + 8) = 3;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "uint", 4uLL) + 8) = 3;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "uint32_t", 8uLL) + 8) = 3;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "unsigned int", 0xCuLL) + 8) = 3;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "half", 4uLL) + 8) = 1;
  uint64_t result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "float", 5uLL);
  *(_DWORD *)(*result + 8) = 0;
  return result;
}

uint64_t llvm::StringMap<ComponentType,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        unsigned int v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t AGCLLVMGLFragmentShader::areIndirectSamplersSupported(AGCLLVMGLFragmentShader *this)
{
  return 0;
}

uint64_t AGCLLVMGLFragmentShader::areIndirectTextureWritesSupported(AGCLLVMGLFragmentShader *this)
{
  return 0;
}

uint64_t AGCLLVMGLFragmentShader::areIndirectTexturesSupported(AGCLLVMGLFragmentShader *this)
{
  return 0;
}

uint64_t AGCLLVMGLFragmentShader::hasES1LodBias(AGCLLVMGLFragmentShader *this)
{
  return *((unsigned __int8 *)this + 5928);
}

uint64_t AGCLLVMGLFragmentShader::getTextureBiasStateForUnit(AGCLLVMGLFragmentShader *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 736);
  if (v2) {
    return *(unsigned __int8 *)(v2 + a2);
  }
  else {
    return 0;
  }
}

BOOL AGCLLVMGLFragmentShader::needsPCFClamp(AGCLLVMGLFragmentShader *this)
{
  return *((void *)this + 735) != 0;
}

uint64_t AGCLLVMGLFragmentShader::getPCFStateForUnit(AGCLLVMGLFragmentShader *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 735);
  if (v2) {
    return *(unsigned __int16 *)(v2 + 2 * a2);
  }
  else {
    return 0;
  }
}

uint64_t AGCLLVMGLFragmentShader::remapTexSampUnit(AGCLLVMGLFragmentShader *this, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 737);
  if (*v2 > a2) {
    return v2[a2 + 1];
  }
  return a2;
}

uint64_t AGCLLVMGLFragmentShader::initCompile(AGCLLVMGLFragmentShader *this)
{
  uint64_t inited = AGCLLVMUserFragmentShader::initCompile(this);
  uint64_t v3 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 168))(v3, *((void *)this + 614));
  return inited;
}

uint64_t AGCLLVMGLFragmentShader::adjustDfDyForInversion(AGCLLVMGLFragmentShader *this, llvm::Type **a2)
{
  FragCoordYAdjustAndType = (llvm::Type *)AGCLLVMGLFragmentShader::getFragCoordYAdjustAndType(this);
  ConstInBoundsGEP2_32 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32), FragCoordYAdjustAndType, 0, v5, v6, v7);
  unsigned int v9 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  __int16 v19 = 257;
  uint64_t v11 = AGCLLVMBuilder::tryDeducePointeeType(ConstInBoundsGEP2_32, v10);
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v9 + 5, v11, (uint64_t)ConstInBoundsGEP2_32, 0, (uint64_t)v18);
  uint64_t v13 = (AGCLLVMGLFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v14 = *a2;
  __int16 v19 = 257;
  uint64_t FPTrunc = llvm::IRBuilderBase::CreateFPTrunc(v13, AlignedLoad, v14, (const llvm::Twine *)v18);
  std::string::size_type v16 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  __int16 v19 = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)v16, (uint64_t)a2, FPTrunc, (uint64_t)v18);
}

void AGCLLVMGLFragmentShader::~AGCLLVMGLFragmentShader(AGCLLVMGLFragmentShader *this)
{
  *(void *)this = &unk_1F25BFCE8;
  uint64_t v2 = (AGCLLVMGLFragmentShader *)((char *)this + 5936);
  *((void *)this + 742) = &unk_1F25C0068;
  *((void *)this + 746) = &unk_1F25C0158;
  *((void *)this + 54llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = &unk_1F25BFF68;
  uint64_t v3 = *((void *)this + 740);
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGLFragmentShader *)((char *)this + 5904));
  }
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader(this, (uint64_t *)off_1F25C0168);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  uint64_t v3;

  *(void *)this = &unk_1F25BFCE8;
  uint64_t v2 = (AGCLLVMGLFragmentShader *)((char *)this + 5936);
  *((void *)this + 742) = &unk_1F25C0068;
  *((void *)this + 746) = &unk_1F25C0158;
  *((void *)this + 54llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = &unk_1F25BFF68;
  uint64_t v3 = *((void *)this + 740);
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGLFragmentShader *)((char *)this + 5904));
  }
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader(this, (uint64_t *)off_1F25C0168);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t AGCLLVMGLFragmentShader::AGCLLVMGLFragmentShader(uint64_t a1, AGCLLVMCtx *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 5936), a2, *(llvm::LLVMContext **)a3);
  uint64_t v15 = AGCLLVMUserFragmentShader::AGCLLVMUserFragmentShader(a1, (uint64_t *)off_1F25C0168, (llvm::Module *)a3, a4, a7, 1);
  *(void *)a1 = &unk_1F25BFCE8;
  *(void *)(a1 + 5936) = &unk_1F25C0068;
  *(void *)(a1 + 5968) = &unk_1F25C0158;
  *(void *)(a1 + 432llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = &unk_1F25BFF68;
  *(void *)(a1 + 588llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = a6;
  *(void *)(a1 + 5888) = a8;
  *(void *)(a1 + 5896) = a5;
  *(void *)(a1 + 5904) = 4;
  *(void *)(a1 + 592llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
  *(void *)(a1 + 5912) = 0;
  AGCLLVMUserShader::markNoAliasForGL(v15);
  std::string::size_type v16 = (void *)(a3 + 168);
  int v17 = *(char *)(a3 + 191);
  if (v17 < 0)
  {
    if (*(void *)(a3 + 176) != 22)
    {
LABEL_15:
      BOOL v23 = 0;
      goto LABEL_16;
    }
    std::string::size_type v16 = (void *)*v16;
  }
  else if (v17 != 22)
  {
    goto LABEL_15;
  }
  size_t v18 = (void *)*v16;
  uint64_t v19 = v16[1];
  uint64_t v20 = *(void *)((char *)v16 + 14);
  BOOL v23 = v18 == (void *)0x746E656D67617246 && v19 == 0x505F65746174535FLL && v20 == 0x6D6172676F72505FLL;
LABEL_16:
  *(unsigned char *)(a1 + 5928) = v23;
  return a1;
}

BOOL virtual thunk to'AGCLLVMGLVertexShader::constructReply(AGCLLVMGLVertexShader *this)
{
  return AGCLLVMGLVertexShader::constructReply((AGCLLVMGLVertexShader *)((char *)this
                                                                       + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMGLVertexShader::constructReply(AGCLLVMGLVertexShader *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMGLVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMGLVertexShader *)((char *)this + *(void *)(*(void *)this - 24)));
    int v3 = AGCLLVMUserObject::constructFlatReply(this);
    int v4 = AGCLLVMUserVertexShader::constructFlatReply(this);
    unsigned int v5 = (char *)this + *(void *)(*(void *)this - 24);
    unsigned int v6 = (flatbuffers::FlatBufferBuilder *)(v5 + 2472);
    v5[2542] = 1;
    int v7 = *((_DWORD *)v5 + 626) - *((_DWORD *)v5 + 630) + *((_DWORD *)v5 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v5 + 2472), v3);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v6, v4);
    uint64_t v8 = (AGCLLVMGLVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v9 = flatbuffers::FlatBufferBuilder::EndTable(v6, v7);
    flatbuffers::FlatBufferBuilder::Finish(v8, v9, v10);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMGLVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  }
  return v2;
}

void virtual thunk to'AGCLLVMGLVertexShader::getCompilationKeyDescription(AGCLLVMGLVertexShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMGLVertexShader::getCompilationKeyDescription(AGCLLVMGLVertexShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 1205);
  std::string::basic_string[abi:nn180100]<0>(v34, "AGCVertexContextStateGL");
  std::string::basic_string[abi:nn180100]<0>(v32, "vertexUnpackState");
  std::string::basic_string[abi:nn180100]<0>(&v37, "");
  if (*(_DWORD *)(v2 + 80))
  {
    unint64_t v3 = 0;
    do
    {
      int v4 = (unsigned __int8 *)(v2 + 4 * v3);
      std::string::basic_string[abi:nn180100]<0>(&v47, "AGCVertexElement");
      std::string::basic_string[abi:nn180100]<0>(&v46, "code");
      _agcFieldString<unsigned int>(&v49, (const void **)&v46.__r_.__value_.__l.__data_, *v4);
      std::string::basic_string[abi:nn180100]<0>(v44, "components");
      _agcFieldString<unsigned int>(&v50, (const void **)v44, v4[1]);
      std::string::basic_string[abi:nn180100]<0>(v42, "type");
      _agcFieldString<char const*>(&v51, (const void **)v42, _agcVertexElementTypeStrings[v4[2]]);
      std::string::basic_string[abi:nn180100]<0>(v40, "normalized");
      _agcFieldString<unsigned int>(&v52, (const void **)v40, HIBYTE(*(_DWORD *)v4) & 1);
      std::string::basic_string[abi:nn180100]<0>(&v39, "bgraSwizzle");
      _agcFieldString<unsigned int>(&v53, (const void **)&v39.__r_.__value_.__l.__data_, (*(_DWORD *)v4 >> 25) & 1);
      std::string::basic_string[abi:nn180100]<0>(&__p, "unused");
      _agcFieldString<unsigned int>(v54, (const void **)&__p.__r_.__value_.__l.__data_, *(_DWORD *)v4 >> 26);
      _agcGroupWithHeader(&v36, (uint64_t)&v47, 0, (uint64_t)&v49, 6);
      for (unint64_t i = 0; i != 0x1FFFFFFFFFFFFFEELL; i -= 3)
      {
        if (SHIBYTE(v54[0].__r_.__value_.__r.__words[i + 2]) < 0) {
          operator delete(v54[i / 3].__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v41) < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v6 = &v36;
      }
      else {
        unsigned int v6 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v36.__r_.__value_.__l.__size_;
      }
      std::string::append(&v37, (const std::string::value_type *)v6, size);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      ++v3;
    }
    while (v3 < *(unsigned int *)(v2 + 80));
  }
  std::string::basic_string[abi:nn180100]<0>(&v47, "AGCVertexUnpackState");
  std::string::basic_string[abi:nn180100]<0>(&v46, "currentAttribs");
  _agcFieldString<unsigned long long>(&v49, (const void **)&v46.__r_.__value_.__l.__data_, *(void *)(v2 + 64));
  std::string::basic_string[abi:nn180100]<0>(v44, "instancedAttribs");
  _agcFieldString<unsigned long long>(&v50, (const void **)v44, *(void *)(v2 + 72));
  std::string::basic_string[abi:nn180100]<0>(v42, "elementCount");
  _agcFieldString<unsigned long long>(&v51, (const void **)v42, *(unsigned int *)(v2 + 80));
  std::string::basic_string[abi:nn180100]<0>(v40, "vertexIDCode");
  _agcFieldString<unsigned long long>(&v52, (const void **)v40, *(unsigned __int8 *)(v2 + 84));
  std::string::basic_string[abi:nn180100]<0>(&v39, "instanceIDCode");
  _agcFieldString<unsigned long long>(&v53, (const void **)&v39.__r_.__value_.__l.__data_, *(unsigned __int8 *)(v2 + 85));
  std::string::basic_string[abi:nn180100]<0>(&__p, "unused");
  _agcFieldString<unsigned long long>(v54, (const void **)&__p.__r_.__value_.__l.__data_, *(unsigned __int16 *)(v2 + 86));
  std::string::basic_string[abi:nn180100]<0>(&v36, "elements : ");
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v48, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  }
  else {
    std::string v48 = v37;
  }
  _agcGroupWithHeader(&v55, (uint64_t)&v36, 0, (uint64_t)&v48, 1);
  _agcGroupWithHeader(&v31, (uint64_t)&v47, 0, (uint64_t)&v49, 7);
  for (uint64_t j = 0; j != -21; j -= 3)
  {
    if (SHIBYTE(v55.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v55.__r_.__value_.__l.__data_ + j * 8));
    }
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  _agcFieldString<std::string>(&v49, (const void **)v32, (uint64_t)&v31);
  std::string::basic_string[abi:nn180100]<0>(&v47, "clip_distance_enable_mask");
  _agcFieldString<unsigned long long>(&v50, (const void **)&v47.__r_.__value_.__l.__data_, *(unsigned __int8 *)(v2 + 88));
  std::string::basic_string[abi:nn180100]<0>(&v46, "outputPointSize");
  _agcFieldString<unsigned long long>(&v51, (const void **)&v46.__r_.__value_.__l.__data_, (*(void *)(v2 + 88) >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v44, "shaderDebugEnable");
  _agcFieldString<unsigned long long>(&v52, (const void **)v44, (*(void *)(v2 + 88) >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v42, "unused");
  _agcFieldString<unsigned long long>(&v53, (const void **)v42, *(void *)(v2 + 88) >> 10);
  _agcGroupWithHeader(&v30, (uint64_t)v34, 0, (uint64_t)&v49, 5);
  for (uint64_t k = 0; k != -15; k -= 3)
  {
    if (SHIBYTE(v53.__r_.__value_.__r.__words[k + 2]) < 0) {
      operator delete(*(void **)((char *)&v53.__r_.__value_.__l.__data_ + k * 8));
    }
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  uint64_t v10 = *((void *)this + 1206);
  if (v10)
  {
    std::string::basic_string[abi:nn180100]<0>(&v36, "");
    for (uint64_t m = 0; m != 32; ++m)
    {
      std::string::basic_string[abi:nn180100]<0>(&v47, "AGCSamplerPCFState");
      std::string::basic_string[abi:nn180100]<0>(&v46, "compareFunc");
      _agcFieldString<char const*>(&v49, (const void **)&v46.__r_.__value_.__l.__data_, _agcCompareFuncStrings[*(_WORD *)(v10 + 2 * m) & 0xF]);
      std::string::basic_string[abi:nn180100]<0>(v44, "clampPCFEnabled");
      _agcFieldString<unsigned short>(&v50, (const void **)v44, (*(_WORD *)(v10 + 2 * m) >> 4) & 1);
      std::string::basic_string[abi:nn180100]<0>(v42, "mipmapMinFilterEnabled");
      _agcFieldString<unsigned short>(&v51, (const void **)v42, (*(_WORD *)(v10 + 2 * m) >> 5) & 1);
      std::string::basic_string[abi:nn180100]<0>(v40, "trilinearMinFilterEnabled");
      _agcFieldString<unsigned short>(&v52, (const void **)v40, (*(_WORD *)(v10 + 2 * m) >> 6) & 1);
      std::string::basic_string[abi:nn180100]<0>(&v39, "linearMinFilterEnabled");
      _agcFieldString<unsigned short>(&v53, (const void **)&v39.__r_.__value_.__l.__data_, (*(_WORD *)(v10 + 2 * m) >> 7) & 1);
      std::string::basic_string[abi:nn180100]<0>(&__p, "linearMagFilterEnabled");
      _agcFieldString<unsigned short>(v54, (const void **)&__p.__r_.__value_.__l.__data_, HIBYTE(*(_WORD *)(v10 + 2 * m)) & 1);
      std::string::basic_string[abi:nn180100]<0>(&v37, "unused");
      _agcFieldString<unsigned short>(&v55, (const void **)&v37.__r_.__value_.__l.__data_, *(_WORD *)(v10 + 2 * m) >> 9);
      _agcGroupWithHeader(&v48, (uint64_t)&v47, 1, (uint64_t)&v49, 7);
      for (uint64_t n = 0; n != -21; n -= 3)
      {
        if (SHIBYTE(v55.__r_.__value_.__r.__words[n + 2]) < 0) {
          operator delete(*(void **)((char *)&v55.__r_.__value_.__l.__data_ + n * 8));
        }
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v41) < 0) {
        operator delete(v40[0]);
      }
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v13 = &v48;
      }
      else {
        uint64_t v13 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v14 = v48.__r_.__value_.__l.__size_;
      }
      std::string::append(&v36, (const std::string::value_type *)v13, v14);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
    }
    std::string::basic_string[abi:nn180100]<0>(&v47, "AGCSamplerPCFStates");
    std::string::basic_string[abi:nn180100]<0>(&v49, "pcf : ");
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v50, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    }
    else {
      std::string v50 = v36;
    }
    _agcGroupWithHeader(&__p, (uint64_t)&v47, 0, (uint64_t)&v49, 2);
    for (iunint64_t i = 0; ii != -6; ii -= 3)
    {
      if (SHIBYTE(v50.__r_.__value_.__r.__words[ii + 2]) < 0) {
        operator delete(*(void **)((char *)&v49 + ii * 8 + 24));
      }
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&__p, "");
  }
  std::string::size_type v16 = (unsigned int *)*((void *)this + 1207);
  std::string::basic_string[abi:nn180100]<0>(&v47, "");
  for (juint64_t j = 1; jj != 33; ++jj)
  {
    std::to_string(&v46, v16[jj]);
    size_t v18 = std::string::append(&v46, " ");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = &v49;
    }
    else {
      uint64_t v20 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = v49.__r_.__value_.__l.__size_;
    }
    std::string::append(&v47, (const std::string::value_type *)v20, v21);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:nn180100]<0>(&v46, "AGCSamplerRemapStateGL");
  std::string::basic_string[abi:nn180100]<0>(v44, "samplerCount");
  _agcFieldString<unsigned int>(&v49, (const void **)v44, *v16);
  std::string::basic_string[abi:nn180100]<0>(v42, "samplerToTexUnitMap");
  std::operator+<char>();
  int v22 = std::string::append(&v39, "]");
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v40 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  std::string::size_type v41 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  _agcFieldString<std::string>(&v50, (const void **)v42, (uint64_t)v40);
  _agcGroupWithHeader(&v37, (uint64_t)&v46, 0, (uint64_t)&v49, 2);
  for (kuint64_t k = 0; kk != -6; kk -= 3)
  {
    if (SHIBYTE(v50.__r_.__value_.__r.__words[kk + 2]) < 0) {
      operator delete(*(void **)((char *)&v49 + kk * 8 + 24));
    }
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v49, (const void **)&v30.__r_.__value_.__l.__data_, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v25 = &v37;
  }
  else {
    int v25 = (std::string *)v37.__r_.__value_.__r.__words[0];
  }
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v26 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v26 = v37.__r_.__value_.__l.__size_;
  }
  uint64_t v27 = std::string::append(&v49, (const std::string::value_type *)v25, v26);
  *a2 = *v27;
  v27->__r_.__value_.__r.__words[0] = 0;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

uint64_t virtual thunk to'AGCLLVMGLVertexShader::requiresDebugInfo(AGCLLVMGLVertexShader *this)
{
  return (*(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 96) + 9640) + 89) >> 1) & 1;
}

void virtual thunk to'AGCLLVMGLVertexShader::~AGCLLVMGLVertexShader(AGCLLVMGLVertexShader *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F25C1248;
  v1[1211] = &unk_1F25C1580;
  v1[1215] = &unk_1F25C1670;
  uint64_t v2 = (void *)v1[1208];
  if (v2)
  {
    v1[1209] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)v1[1201];
  if (v3)
  {
    v1[1202] = v3;
    operator delete(v3);
  }
  int v4 = (void *)v1[1178];
  if (v4 != v1 + 1180) {
    free(v4);
  }
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F25C1680);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1211));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F25C1248;
  v1[1211] = &unk_1F25C1580;
  v1[1215] = &unk_1F25C1670;
  uint64_t v2 = (void *)v1[1208];
  if (v2)
  {
    v1[1209] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)v1[1201];
  if (v3)
  {
    v1[1202] = v3;
    operator delete(v3);
  }
  int v4 = (void *)v1[1178];
  if (v4 != v1 + 1180) {
    free(v4);
  }
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F25C1680);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1211));
}

uint64_t AGCLLVMGLVertexShader::requiresDebugInfo(AGCLLVMGLVertexShader *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 1205) + 89) >> 1) & 1;
}

uint64_t AGCLLVMGLVertexShader::constructFlatVertexInputs(AGCLLVMGLVertexShader *this)
{
  if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1734)) {
    goto LABEL_68;
  }
  uint64_t Function = llvm::Module::getFunction();
  llvm::SmallBitVector::SmallBitVector((uint64_t *)&v80, *((unsigned int *)this + 1256));
  if (*(_WORD *)(Function + 18))
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
    uint64_t v3 = *(void *)(Function + 88);
    if (*(_WORD *)(Function + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)Function);
      uint64_t v4 = *(void *)(Function + 88);
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(Function + 88);
  }
  uint64_t v4 = v3;
LABEL_7:
  uint64_t v5 = v4 + 40 * *(void *)(Function + 96);
  if (v3 != v5)
  {
    unsigned int v6 = 0;
    do
    {
      if (*(void *)(v3 + 8))
      {
        if (v80) {
          unint64_t v80 = v80 & 0xFC00000000000000 | (2
        }
                                            * (((v80 >> 1) & ~(-1 << (v80 >> 58)) | (1 << v6)) & ~(-1 << (v80 >> 58)))) | 1;
        else {
          *(void *)(*(void *)v80 + 8 * (v6 >> 6)) |= 1 << v6;
        }
      }
      v3 += 40;
      ++v6;
    }
    while (v3 != v5);
  }
  uint64_t v7 = *((void *)this + 1201);
  if (*((void *)this + 1202) != v7)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    do
    {
      uint64_t v10 = v7 + 20 * v8;
      uint64_t v11 = *(unsigned int *)(v10 + 8);
      if (v11 > 0xA) {
        LODWORD(v12) = -1;
      }
      else {
        unint64_t v12 = (qword_1CADD6E40[v11] * (unint64_t)(*(_DWORD *)(v7 + 20 * v8) + 1) + 3) >> 2;
      }
      unint64_t v13 = *(unsigned int *)(v10 + 12);
      llvm::SmallBitVector::SmallBitVector((uint64_t *)&v79, *((unsigned int *)this + 1256));
      if (v12)
      {
        unsigned int v14 = v12 + v13;
        if (v79)
        {
          unint64_t v79 = v79 & 0xFC00000000000000 | (2
                                            * (((v79 >> 1) & ~(-1 << (v79 >> 58)) | ((1 << v14) + (-1 << v13))) & ~(-1 << (v79 >> 58)))) | 1;
          goto LABEL_30;
        }
        unint64_t v15 = v13 >> 6;
        if ((v13 >> 6) == v14 >> 6)
        {
          uint64_t v16 = (1 << v14) + (-1 << v13);
          int v17 = (uint64_t *)(*(void *)v79 + 8 * v15);
LABEL_29:
          *v17 |= v16;
          goto LABEL_30;
        }
        size_t v18 = *(uint64_t **)v79;
        *(void *)(*(void *)v79 + 8 * v15) |= -1 << v13;
        unsigned int v19 = (v13 + 63) & 0xFFFFFFC0;
        if (v19 + 64 <= v14)
        {
          do
          {
            v18[v19 >> 6] = -1;
            unsigned int v20 = v19 + 64;
            unsigned int v21 = v19 + 128;
            v19 += 64;
          }
          while (v21 <= v14);
        }
        else
        {
          unsigned int v20 = (v13 + 63) & 0xFFFFFFC0;
        }
        if (v20 < v14)
        {
          uint64_t v16 = ~(-1 << v14);
          int v17 = &v18[v20 >> 6];
          goto LABEL_29;
        }
      }
LABEL_30:
      if (v79)
      {
        unint64_t v32 = v79 >> 58;
        if ((v80 & 1) == 0)
        {
          unint64_t v33 = *(unsigned int *)(v80 + 64);
          goto LABEL_47;
        }
        if ((((v79 & v80) >> 1) & ~((-1 << v32) | (-1 << (v80 >> 58)))) == 0) {
          goto LABEL_63;
        }
      }
      else
      {
        if (v80)
        {
          unint64_t v32 = *(unsigned int *)(v79 + 64);
          unint64_t v33 = v80 >> 58;
LABEL_47:
          if (v33 < v32) {
            unint64_t v32 = v33;
          }
          if (!v32)
          {
LABEL_63:
            uint64_t v35 = *((void *)this + 1201) + 20 * (int)v9;
            uint64_t v36 = *((void *)this + 1202);
            uint64_t v37 = v36 - (v35 + 20);
            if (v36 != v35 + 20) {
              memmove((void *)(*((void *)this + 1201) + 20 * (int)v9), (const void *)(v35 + 20), v36 - (v35 + 20));
            }
            *((void *)this + 1202) = v35 + v37;
            goto LABEL_66;
          }
          uint64_t v34 = 0;
          while (2)
          {
            if (v79)
            {
              if (((v79 >> 1) & ~(-1 << (v79 >> 58)) & (1 << v34)) == 0) {
                goto LABEL_59;
              }
            }
            else if ((*(void *)(*(void *)v79 + 8 * (v34 >> 6)) & (1 << v34)) == 0)
            {
              goto LABEL_59;
            }
            if (v80)
            {
              if (((v80 >> 1) & ~(-1 << (v80 >> 58)) & (1 << v34)) != 0) {
                goto LABEL_62;
              }
            }
            else if ((*(void *)(*(void *)v80 + 8 * (v34 >> 6)) & (1 << v34)) != 0)
            {
              goto LABEL_62;
            }
LABEL_59:
            if (v32 == ++v34) {
              goto LABEL_63;
            }
            continue;
          }
        }
        LODWORD(v22) = *(_DWORD *)(v79 + 8);
        unsigned int v23 = *(_DWORD *)(v80 + 8);
        if (v23 >= v22) {
          uint64_t v22 = v22;
        }
        else {
          uint64_t v22 = v23;
        }
        if (!v22) {
          goto LABEL_63;
        }
        char v24 = *(uint64_t **)v79;
        int v25 = *(uint64_t **)v80;
        uint64_t v26 = v22 - 1;
        do
        {
          uint64_t v28 = *v24++;
          uint64_t v27 = v28;
          uint64_t v29 = *v25++;
          uint64_t v30 = v29 & v27;
          if (v30) {
            BOOL v31 = 1;
          }
          else {
            BOOL v31 = v26 == 0;
          }
          --v26;
        }
        while (!v31);
        if (!v30) {
          goto LABEL_63;
        }
      }
LABEL_62:
      ++v9;
LABEL_66:
      llvm::SmallBitVector::~SmallBitVector((void ***)&v79);
      uint64_t v8 = v9;
      uint64_t v7 = *((void *)this + 1201);
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 1202) - v7) >> 2) > v9);
  }
  llvm::SmallBitVector::~SmallBitVector((void ***)&v80);
LABEL_68:
  uint64_t v38 = *((void *)this + 1201);
  std::string v39 = 0;
  if (-858993459 * ((unint64_t)(*((void *)this + 1202) - v38) >> 2))
  {
    uint64_t v40 = 0;
    unint64_t v77 = 0;
    unint64_t v78 = 0;
    std::string::size_type v41 = 0;
    unsigned int v42 = 0;
    unint64_t v43 = 0;
    while (1)
    {
      uint64_t v44 = (int *)(v38 + 20 * v43);
      int v45 = v44[4];
      std::string v46 = (char *)this + *(void *)(*(void *)this - 24);
      std::string v47 = (flatbuffers::FlatBufferBuilder *)(v46 + 2472);
      v46[2542] = 1;
      int v48 = *((_DWORD *)v46 + 626) - *((_DWORD *)v46 + 630) + *((_DWORD *)v46 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v46 + 309, 4, *v44);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v47, 6, *(_DWORD *)(*((void *)this + 1201) + 20 * v43 + 4));
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v47, 8, *(_DWORD *)(*((void *)this + 1201) + 20 * v43 + 8));
      int v49 = *(_DWORD *)(*((void *)this + 1201) + 20 * v43 + 12);
      if (v45)
      {
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v47, 12, v49);
        flatbuffers::FlatBufferBuilder::AddElement<signed char>(v47, 10, *(char *)(*((void *)this + 1201) + 20 * v43 + 16));
        int v50 = flatbuffers::FlatBufferBuilder::EndTable(v47, v48);
        int v51 = v50;
        if ((unint64_t)v42 >= v78)
        {
          uint64_t v55 = (v42 - v41) >> 2;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 62) {
            goto LABEL_120;
          }
          if ((uint64_t)(v78 - (void)v41) >> 1 > v56) {
            unint64_t v56 = (uint64_t)(v78 - (void)v41) >> 1;
          }
          if (v78 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v56;
          }
          if (v57) {
            unint64_t v57 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v57);
          }
          else {
            uint64_t v58 = 0;
          }
          std::string v63 = (char *)(v57 + 4 * v55);
          *(_DWORD *)std::string v63 = v51;
          uint64_t v64 = v63 + 4;
          while (v42 != v41)
          {
            int v65 = *((_DWORD *)v42 - 1);
            v42 -= 4;
            *((_DWORD *)v63 - 1) = v65;
            v63 -= 4;
          }
          unint64_t v78 = v57 + 4 * v58;
          if (v41) {
            operator delete(v41);
          }
          std::string v54 = v40;
          std::string::size_type v41 = v63;
          unsigned int v42 = v64;
          goto LABEL_106;
        }
        *(_DWORD *)unsigned int v42 = v50;
        v42 += 4;
      }
      else
      {
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v47, 10, v49);
        int v52 = flatbuffers::FlatBufferBuilder::EndTable(v47, v48);
        int v53 = v52;
        if ((unint64_t)v40 >= v77)
        {
          uint64_t v59 = (v40 - v39) >> 2;
          unint64_t v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62) {
LABEL_120:
          }
            abort();
          if ((uint64_t)(v77 - (void)v39) >> 1 > v60) {
            unint64_t v60 = (uint64_t)(v77 - (void)v39) >> 1;
          }
          if (v77 - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v60;
          }
          if (v61) {
            unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v61);
          }
          else {
            uint64_t v62 = 0;
          }
          std::string v66 = (char *)(v61 + 4 * v59);
          *(_DWORD *)std::string v66 = v53;
          std::string v54 = v66 + 4;
          while (v40 != v39)
          {
            int v67 = *((_DWORD *)v40 - 1);
            v40 -= 4;
            *((_DWORD *)v66 - 1) = v67;
            v66 -= 4;
          }
          unint64_t v77 = v61 + 4 * v62;
          if (v39) {
            operator delete(v39);
          }
          std::string v39 = v66;
          goto LABEL_106;
        }
        *(_DWORD *)uint64_t v40 = v52;
        v40 += 4;
      }
      std::string v54 = v40;
LABEL_106:
      ++v43;
      uint64_t v38 = *((void *)this + 1201);
      uint64_t v40 = v54;
      if (v43 >= -858993459 * ((unint64_t)(*((void *)this + 1202) - v38) >> 2)) {
        goto LABEL_109;
      }
    }
  }
  std::string::size_type v41 = 0;
  unsigned int v42 = 0;
  std::string v54 = 0;
LABEL_109:
  if (v54 == v39) {
    std::string::size_type v68 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>> const&)::t;
  }
  else {
    std::string::size_type v68 = v39;
  }
  int v69 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v68, (v54 - v39) >> 2);
  if (v42 == v41) {
    char v70 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>> const&)::t;
  }
  else {
    char v70 = v41;
  }
  int v71 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v70, (v42 - v41) >> 2);
  char v72 = (char *)this + *(void *)(*(void *)this - 24);
  std::string v73 = (flatbuffers::FlatBufferBuilder *)(v72 + 2472);
  v72[2542] = 1;
  int v74 = *((_DWORD *)v72 + 626) - *((_DWORD *)v72 + 630) + *((_DWORD *)v72 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v72 + 2472), v69);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v73, v71);
  uint64_t v75 = flatbuffers::FlatBufferBuilder::EndTable(v73, v74);
  if (v41) {
    operator delete(v41);
  }
  if (v39) {
    operator delete(v39);
  }
  return v75;
}

uint64_t *llvm::SmallBitVector::SmallBitVector(uint64_t *this, uint64_t a2)
{
  *this = 1;
  if (a2 > 0x39) {
    operator new();
  }
  *this = (a2 << 58) | 1;
  return this;
}

void llvm::SmallBitVector::~SmallBitVector(void ***this)
{
  uint64_t v1 = *this;
  if ((*this & 1) == 0 && v1)
  {
    if (*v1 != v1 + 2) {
      free(*v1);
    }
    MEMORY[0x1CB7A0780](v1, 0x1080C40EF38A13ELL);
  }
}

uint64_t AGCLLVMGLVertexShader::getPointSize(AGCLLVMGLVertexShader *this, llvm::Value *a2)
{
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (llvm::Value *)llvm::ConstantFP::get();
  }
  uint64_t v4 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v19[0] = "agc.vertex_point_size_adjust";
  __int16 v20 = 259;
  uint64_t v5 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v5 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  unsigned int v6 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v7 = *((void *)v6 + 47);
  uint64_t v8 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v6 + 32), v4);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v7, v8);
  unsigned int v9 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v20 = 257;
  uint64_t v11 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v10);
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v9, v11, (uint64_t)v4, 0, (uint64_t)v19);
  unint64_t v13 = *(llvm::Type **)v3;
  __int16 v18 = 257;
  uint64_t FPTrunc = llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v9, AlignedLoad, v13, (const llvm::Twine *)v17);
  unint64_t v15 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  __int16 v20 = 257;
  return llvm::IRBuilderBase::CreateFAdd((uint64_t)v15, (uint64_t)v3, FPTrunc, (uint64_t)v19);
}

uint64_t AGCLLVMGLVertexShader::isPointSizePresent(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 9640) + 89) & 1;
}

uint64_t AGCLLVMGLVertexShader::getGenericVaryingInfo(AGCLLVMUserShader *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  AGCLLVMUserShader::getVaryingModeMap(a1);
  AGCLLVMUserShader::getInterpolationLocationMap(v11);
  unint64_t v12 = *(const llvm::Type **)(*(void *)(a2 + 16) + 8 * a3);
  int ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 32), v12, &v35);
  if ((*((_DWORD *)v12 + 2) & 0xFE) == 0x12) {
    int v14 = *((_DWORD *)v12 + 8);
  }
  else {
    int v14 = 1;
  }
  int v34 = 0;
  unsigned int v36 = 2;
  char v15 = parseMDInt(0, a4, &v36, &v34);
  uint64_t v16 = a4 - 8 * *(unsigned int *)(a4 + 8);
  int v17 = *(llvm::MDString **)(v16 + 24);
  if (v17 && *(unsigned char *)v17) {
    int v17 = 0;
  }
  __int16 v18 = *(llvm::MDString **)(v16 + 32);
  if (!v18) {
    return 0;
  }
  uint64_t v19 = 0;
  char v20 = v15 ^ 1;
  if (!v17) {
    char v20 = 1;
  }
  if ((v20 & 1) == 0 && !*(unsigned char *)v18)
  {
    uint64_t String = (const void *)llvm::MDString::getString(v17);
    uint64_t v23 = *(unsigned int *)(*llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>(String, v22)+ 8);
    char v24 = (const void *)llvm::MDString::getString(v18);
    int v26 = *(_DWORD *)(*llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>(v24, v25) + 8);
    if (v23 == 1) {
      int v26 = 3;
    }
    int v27 = v34;
    BOOL v28 = ComponentType == 1;
    switch((int)v23)
    {
      case 0:
        if (ComponentType == 1) {
          int v5 = 5;
        }
        else {
          int v5 = 1;
        }
        break;
      case 1:
        BOOL v29 = ComponentType == 1;
        int v30 = 2;
        int v31 = 6;
        goto LABEL_25;
      case 2:
        BOOL v29 = ComponentType == 1;
        int v30 = 3;
        int v31 = 7;
        goto LABEL_25;
      case 3:
        if (ComponentType == 1) {
          int v5 = 19;
        }
        else {
          int v5 = 18;
        }
        break;
      case 5:
        BOOL v29 = ComponentType == 1;
        int v30 = 4;
        int v31 = 8;
LABEL_25:
        if (v29) {
          int v5 = v31;
        }
        else {
          int v5 = v30;
        }
        break;
      default:
        break;
    }
    *(_DWORD *)a5 = v14;
    *(_DWORD *)(a5 + 4) = ComponentType;
    *(_DWORD *)(a5 + 8) = v23;
    *(_DWORD *)(a5 + 12) = v26;
    *(_DWORD *)(a5 + 16) = v27;
    unint64_t v32 = (void **)(a5 + 24);
    if (*(char *)(a5 + 47) < 0) {
      operator delete(*v32);
    }
    *(_OWORD *)unint64_t v32 = 0u;
    *(_OWORD *)(a5 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0u;
    *(unsigned char *)(a5 + 56) = v28;
    *(_WORD *)(a5 + 57) = 0;
    *(_DWORD *)(a5 + 6llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v5;
    return 1;
  }
  return v19;
}

uint64_t AGCLLVMGLVertexShader::setupClipDistanceOutput(void *a1, llvm::Value *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v22 = 0;
  v20[0] = 1;
  parseMDInt(0, a3, v20, &v22);
  uint64_t v9 = *(void *)a2;
  if (*(void *)a2) {
    BOOL v10 = *(unsigned char *)(*(void *)a2 + 8) == 18;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v12 = *(unsigned int *)(v9 + 32);
    if (v12)
    {
      uint64_t v13 = 0;
      int v14 = 4 * v22;
      do
      {
        char v15 = (char *)a1 + *(void *)(*a1 - 24);
        __int16 v21 = 257;
        uint64_t v16 = (llvm::IRBuilderBase *)(v15 + 40);
        int v17 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v16, a2, v17, (const llvm::Twine *)v20);
        *a5 |= 1 << (v14 + v13);
        *(void *)(a4 + 8 * (v14 + v13++)) = Element;
      }
      while (v12 != v13);
    }
  }
  else if (*(void *)((char *)a1 + *(void *)(*a1 - 24) + 200) == v9)
  {
    unsigned int v11 = 4 * v22;
    *a5 |= 1 << (4 * v22);
    *(void *)(a4 + 8 * v11) = a2;
  }
  return 1;
}

uint64_t AGCLLVMGLVertexShader::areIndirectSamplersSupported(AGCLLVMGLVertexShader *this)
{
  return 0;
}

uint64_t AGCLLVMGLVertexShader::areIndirectTextureWritesSupported(AGCLLVMGLVertexShader *this)
{
  return 0;
}

uint64_t AGCLLVMGLVertexShader::areIndirectTexturesSupported(AGCLLVMGLVertexShader *this)
{
  return 0;
}

BOOL AGCLLVMGLVertexShader::needsPCFClamp(AGCLLVMGLVertexShader *this)
{
  return *((void *)this + 1206) == 0;
}

uint64_t AGCLLVMGLVertexShader::getPCFStateForUnit(AGCLLVMGLVertexShader *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1206);
  if (v2) {
    return *(unsigned __int16 *)(v2 + 2 * a2);
  }
  else {
    return 0;
  }
}

uint64_t AGCLLVMGLVertexShader::remapTexSampUnit(AGCLLVMGLVertexShader *this, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 1207);
  if (*v2 > a2) {
    return v2[a2 + 1];
  }
  return a2;
}

uint64_t AGCLLVMGLVertexShader::setupShaderInputs(llvm::Function **this)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  AGCLLVMUserVertexShader::setupShaderInputs((AGCLLVMUserVertexShader *)this);
  uint64_t Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Function **)((char *)this + *((void *)*this - 3) + 392), (llvm::LLVMContext *)2);
  uint64_t v3 = *(uint64_t *)((char *)this + *((void *)*this - 3) + 232);
  v75[0] = Int8PtrTy;
  v75[1] = v3;
  llvm::StructType::get();
  uint64_t v4 = *((void *)this[22] + 10);
  if (v4) {
    int v5 = (llvm::BasicBlock *)(v4 - 24);
  }
  else {
    int v5 = 0;
  }
  unsigned int v6 = *this;
  if ((*(unsigned char **)((char *)this + *((void *)*this - 3) + 400))[1734])
  {
    uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v5);
    AGCLLVMUserObject::hoistAllocas((uint64_t)this, (uint64_t)v5, (uint64_t *)&FirstInsertionPt);
    llvm::IRBuilderBase::SetInsertPoint((char **)((char *)this + *((void *)*this - 3) + 40), (char *)v5, FirstInsertionPt);
    if (*((_DWORD *)this + 2409) != -1)
    {
      uint64_t v7 = (char *)this + *((void *)*this - 3) + 40;
      uint64_t VIRead = AGCLLVMUserVertexShader::createVIRead((AGCLLVMUserVertexShader *)this);
      uint64_t v9 = *(uint64_t *)((char *)this + *((void *)*this - 3) + 232);
      __int16 v76 = 257;
      uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v7, 49, (uint64_t)VIRead, v9, (uint64_t)v75);
      uint64_t v11 = *(uint64_t *)((char *)this + *((void *)*this - 3) + 240);
      __int16 v74 = 257;
      llvm::IRBuilderBase::CreateCast((uint64_t)v7, 39, Cast, v11, (uint64_t)v73);
    }
    if (*((_DWORD *)this + 2408) != -1)
    {
      BOOL v28 = (char *)this + *((void *)*this - 3) + 40;
      BOOL v29 = AGCLLVMUserVertexShader::createVIRead((AGCLLVMUserVertexShader *)this);
      uint64_t v30 = *(uint64_t *)((char *)this + *((void *)*this - 3) + 232);
      __int16 v76 = 257;
      uint64_t v31 = llvm::IRBuilderBase::CreateCast((uint64_t)v28, 49, (uint64_t)v29, v30, (uint64_t)v75);
      uint64_t v32 = *(uint64_t *)((char *)this + *((void *)*this - 3) + 240);
      __int16 v74 = 257;
      llvm::IRBuilderBase::CreateCast((uint64_t)v28, 39, v31, v32, (uint64_t)v73);
    }
    unint64_t v33 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v75[0] = "agc.primitive_buffer_path";
    __int16 v76 = 259;
    uint64_t v34 = llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v34 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    unsigned int v35 = (char *)this + *((void *)*this - 3);
    uint64_t v36 = *((void *)v35 + 47);
    uint64_t v37 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v35 + 32), v33);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v36, v37);
    __int16 v76 = 257;
    this[1200] = (llvm::Function *)llvm::BasicBlock::splitBasicBlock();
    v75[0] = "primbuf_path";
    __int16 v76 = 259;
    operator new();
  }
  this[1200] = v5;
  uint64_t v12 = (llvm::IRBuilderBase *)((char *)this + *((void *)v6 - 3) + 40);
  uint64_t v13 = llvm::BasicBlock::getFirstInsertionPt(v5);
  if (v13) {
    int v14 = (llvm::Instruction *)(v13 - 24);
  }
  else {
    int v14 = 0;
  }
  llvm::IRBuilderBase::SetInsertPoint(v12, v14);
  uint64_t v67 = *((unsigned int *)this + 2358);
  if (v67)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    do
    {
      int v17 = (llvm::Value *)*((unsigned int *)this[1178] + v15);
      uint64_t v18 = *((unsigned int *)this[1208] + (void)v17);
      uint64_t v19 = this[1205];
      llvm::FixedVectorType::get();
      Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
      if (v18)
      {
        std::string::size_type v68 = v19;
        int v69 = v17;
        for (uint64_t i = 0; i != v18; ++i)
        {
          int v22 = (char *)this + *((void *)*this - 3);
          uint64_t v23 = AGCLLVMUserVertexShader::createVIRead((AGCLLVMUserVertexShader *)this);
          __int16 v76 = 257;
          char v24 = (llvm::Value *)llvm::ConstantInt::get();
          Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v22 + 40), InsertElement, v23, v24, (const llvm::Twine *)v75);
        }
        v16 += i;
        int v17 = v69;
        int v25 = *((_DWORD *)v68 + (void)v69);
        int v26 = this;
        int v27 = InsertElement;
      }
      else
      {
        int v25 = *((_DWORD *)v19 + (void)v17);
        int v26 = this;
        int v27 = InsertElement;
      }
      this[(void)v17 + 1184] = AGCLLVMGLVertexShader::castAttribToElementType(v26, v25, v27);
      ++v15;
    }
    while (v15 != v67);
  }
  uint64_t Function = llvm::Module::getFunction();
  std::string v39 = (uint64_t *)Function;
  if (Function) {
    uint64_t v40 = *(llvm::Instruction **)(*(void *)(Function + 8) + 24);
  }
  else {
    uint64_t v40 = 0;
  }
  char v70 = v40;
  std::string::size_type v41 = this[1200];
  v73[0] = 0;
  unsigned int v42 = this[22];
  if (*((_WORD *)v42 + 9))
  {
    llvm::Function::BuildLazyArguments(this[22]);
    uint64_t v44 = this[22];
    uint64_t v43 = *((void *)v42 + 11);
    if (*((_WORD *)v44 + 9)) {
      llvm::Function::BuildLazyArguments(this[22]);
    }
    unsigned int v42 = v44;
  }
  else
  {
    uint64_t v43 = *((void *)v42 + 11);
  }
  for (uint64_t j = *((void *)v42 + 11) + 40 * *((void *)v42 + 12); v43 != j; v43 += 40)
  {
    if (*(void *)(v43 + 8))
    {
      uint64_t v46 = *((void *)v41 + 5);
      std::string v47 = v46 ? (llvm::Instruction *)(v46 - 24) : 0;
      llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)this + *((void *)*this - 3) + 40), v47);
      uint64_t v48 = *(unsigned int *)(v43 + 32);
      uint64_t v49 = *((void *)this[11] + v48);
      if ((AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v43, v48, v49) & 1) == 0)
      {
        uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v49 - 8 * *(unsigned int *)(v49 + 8) + 8));
        if (v51 == 16 && *String == 0x747265762E726961 && String[1] == 0x7475706E695F7865)
        {
          int v53 = *(unsigned char **)(v49 - 8 * *(unsigned int *)(v49 + 8) + 16);
          if (v53)
          {
            if (*v53) {
              std::string v54 = 0;
            }
            else {
              std::string v54 = *(llvm::MDString **)(v49 - 8 * *(unsigned int *)(v49 + 8) + 16);
            }
          }
          else
          {
            std::string v54 = 0;
          }
          uint64_t v55 = llvm::MDString::getString(v54);
          if (v56 == 12
            && (*(void *)v55 == 0x61636F6C2E726961 ? (BOOL v57 = *(_DWORD *)(v55 + 8) == 1852795252) : (BOOL v57 = 0), v57))
          {
            std::string v63 = *(uint64_t **)(*(void *)(v43 + 8) + 24);
            LODWORD(v75[0]) = 3;
            parseMDInt(0, v49, (unsigned int *)v75, v73);
            AGCLLVMGLVertexShader::replaceAttributeUses((uint64_t)this, v63[1], v73[0], 0);
            llvm::Instruction::eraseFromParent((llvm::Instruction *)v63);
          }
          else
          {
            v72[0] = 0;
            LODWORD(v75[0]) = 3;
            parseMDInt(0, v49, (unsigned int *)v75, v72);
            uint64_t v58 = v72[0];
            uint64_t v59 = this[1205];
            unint64_t v60 = this[v72[0] + 1184];
            uint64_t v61 = *((void *)this[1200] + 5);
            if (v61) {
              uint64_t v62 = (llvm::Instruction *)(v61 - 24);
            }
            else {
              uint64_t v62 = 0;
            }
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)this + *((void *)*this - 3) + 40), v62);
            AGCLLVMGLVertexShader::generateAttributeValue(this, (int *)v59 + v58, *(void *)v43, v60);
            llvm::Value::replaceAllUsesWith();
          }
        }
      }
    }
  }
  if (v39)
  {
    if (v70)
    {
      if (llvm::Value::getNumUses(v70)) {
        AGCLLVMGLVertexShader::replaceAttributeUses((uint64_t)this, v39[1], *((unsigned __int8 *)this[1205] + 84), 3);
      }
      else {
        llvm::Instruction::eraseFromParent(v70);
      }
    }
    llvm::Function::eraseFromParent((llvm::Function *)v39);
  }
  uint64_t v64 = llvm::Module::getFunction();
  if (v64)
  {
    int v65 = (llvm::Function *)v64;
    AGCLLVMGLVertexShader::replaceAttributeUses((uint64_t)this, *(void *)(v64 + 8), (unsigned __int16)WORD2(*((void *)this[1205] + 10)) >> 8, 1);
    llvm::Function::eraseFromParent(v65);
  }
  return 1;
}

uint64_t AGCLLVMGLVertexShader::replaceAttributeUses(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (a2)
  {
    uint64_t v5 = a2;
    unsigned int v6 = (uint64_t *)result;
    uint64_t v7 = *(void *)(result + 9640);
    uint64_t v8 = result + 200;
    unsigned int v9 = a4 & 0xFFFFFFFD;
    do
    {
      BOOL v10 = *(llvm::Instruction **)(v5 + 24);
      uint64_t v5 = *(void *)(v5 + 8);
      uint64_t v11 = *v6;
      uint64_t v12 = (uint64_t *)v10;
      if (v9 == 1) {
        uint64_t v12 = (uint64_t *)(*(void *)(v11 - 24) + v8 + 32);
      }
      uint64_t v13 = *v12;
      llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v6 + *(void *)(v11 - 24) + 40), v10);
      uint64_t v14 = v6[1205];
      uint64_t v15 = *(unsigned int *)(v14 + 80);
      if (*(_DWORD *)(v14 + 80))
      {
        uint64_t v16 = 0;
        while (*(unsigned __int8 *)(v7 + 4 * v16) != a3)
        {
          if (v15 == ++v16)
          {
            int v17 = 0;
            LODWORD(v16) = v15;
            goto LABEL_12;
          }
        }
        int v17 = (llvm::Value *)v6[v16 + 1184];
      }
      else
      {
        LODWORD(v16) = 0;
        int v17 = 0;
      }
LABEL_12:
      AGCLLVMGLVertexShader::generateAttributeValue(v6, (int *)(v7 + 4 * v16), v13, v17);
      llvm::Value::replaceAllUsesWith();
      uint64_t result = llvm::Instruction::eraseFromParent(v10);
    }
    while (v5);
  }
  return result;
}

llvm::Value *AGCLLVMGLVertexShader::generateAttributeValue(void *a1, int *a2, uint64_t a3, llvm::Value *a4)
{
  uint64_t v5 = (llvm::Type *)a3;
  unsigned int v6 = a2;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    unsigned int v8 = *(_DWORD *)(a3 + 32);
    uint64_t v5 = **(llvm::Type ***)(a3 + 16);
  }
  else
  {
    unsigned int v8 = 1;
  }
  unsigned int v9 = (char *)a1 + *(void *)(*a1 - 24);
  if (v5 == *((llvm::Type **)v9 + 25) || (BOOL v10 = v9 + 32, v5 == (llvm::Type *)v10[19]))
  {
    if (*((unsigned __int8 *)a2 + 2) - 9 >= 2) {
      llvm::FixedVectorType::get();
    }
    uint64_t v12 = llvm::ConstantFP::get();
    uint64_t v11 = llvm::ConstantFP::get();
    int v14 = *v6;
    if ((*v6 & 0x1000000) == 0)
    {
      if (BYTE2(v14) > 0xAu) {
        goto LABEL_9;
      }
      switch(BYTE2(v14))
      {
        case 1:
          std::string::size_type v41 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), a4, 1);
          goto LABEL_49;
        case 4:
        case 6:
        case 8:
          uint64_t v15 = (AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32);
          uint64_t v16 = a4;
          int v17 = 0;
          goto LABEL_27;
        case 9:
        case 0xA:
          BOOL v29 = (char *)a1 + *(void *)(*a1 - 24);
          uint64_t v30 = *((void *)v29 + 50);
          long long v69 = *(_OWORD *)(v29 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v70, (llvm::IRBuilderBase *)(v29 + 40));
          int v71 = *((_DWORD *)v29 + 34);
          ShuffleVector = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, void, llvm::Value *, void, BOOL))(*(void *)v30 + 112))(v30, &v69, 5, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 200), a4, 0, *((unsigned __int8 *)v6 + 2) << 16 == 589824);
          if (v70) {
            goto LABEL_29;
          }
          goto LABEL_51;
        default:
          uint64_t v15 = (AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32);
          uint64_t v16 = a4;
          int v17 = 1;
LABEL_27:
          uint64_t Cast = (uint64_t)AGCLLVMBuilder::f32Extend(v15, v16, v17);
          break;
      }
      goto LABEL_50;
    }
    uint64_t v18 = 1;
    uint64_t v19 = 16;
    switch(BYTE2(v14))
    {
      case 3:
        uint64_t v59 = v6;
        uint64_t v34 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), a4, 1);
        uint64_t v35 = llvm::ConstantFP::get();
        uint64_t v36 = llvm::ConstantFP::get();
        uint64_t v37 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
        __int16 v73 = 257;
        uint64_t FMul = llvm::IRBuilderBase::CreateFMul(v37, (uint64_t)v34, v35, (uint64_t)v72);
        std::string v39 = (char *)a1 + *(void *)(*a1 - 24);
        uint64_t v40 = *((void *)v39 + 50);
        long long v66 = *(_OWORD *)(v39 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v67, (llvm::IRBuilderBase *)(v39 + 40));
        int v68 = *((_DWORD *)v39 + 34);
        ShuffleVector = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v40 + 56))(v40, &v66, FMul, v36, 0);
        if (v67) {
          goto LABEL_46;
        }
        goto LABEL_47;
      case 4:
        std::string::size_type v41 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), a4, 0);
LABEL_49:
        uint64_t v44 = llvm::ConstantFP::get();
        uint64_t v45 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
        __int16 v73 = 257;
        uint64_t Cast = llvm::IRBuilderBase::CreateFMul(v45, (uint64_t)v41, v44, (uint64_t)v72);
        goto LABEL_50;
      case 5:
        goto LABEL_45;
      case 6:
        uint64_t v18 = 0;
        goto LABEL_45;
      case 7:
        goto LABEL_44;
      case 8:
        uint64_t v18 = 0;
LABEL_44:
        uint64_t v19 = 8;
LABEL_45:
        uint64_t v59 = v6;
        uint64_t v58 = a4;
        unsigned int v42 = (char *)a1 + *(void *)(*a1 - 24);
        uint64_t v43 = *((void *)v42 + 50);
        long long v60 = *(_OWORD *)(v42 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v61, (llvm::IRBuilderBase *)(v42 + 40));
        int v62 = *((_DWORD *)v42 + 34);
        ShuffleVector = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *, uint64_t, uint64_t, uint64_t))(*(void *)v43 + 96))(v43, &v60, v58, v19, v18, 32);
        if (v61) {
LABEL_46:
        }
          llvm::MetadataTracking::untrack();
LABEL_47:
        unsigned int v6 = v59;
        break;
      case 9:
      case 0xA:
        char v20 = (char *)a1 + *(void *)(*a1 - 24);
        uint64_t v21 = *((void *)v20 + 50);
        long long v63 = *(_OWORD *)(v20 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v64, (llvm::IRBuilderBase *)(v20 + 40));
        int v65 = *((_DWORD *)v20 + 34);
        ShuffleVector = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, void, llvm::Value *, uint64_t, BOOL))(*(void *)v21 + 112))(v21, &v63, 5, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 200), a4, 1, *((unsigned __int8 *)v6 + 2) << 16 == 589824);
        if (v64) {
LABEL_29:
        }
          llvm::MetadataTracking::untrack();
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
    if (v5 != (llvm::Type *)v10[25] && v5 != (llvm::Type *)v10[24])
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
LABEL_9:
      ShuffleVector = 0;
      goto LABEL_51;
    }
    uint64_t v11 = 0;
    unsigned int v22 = *((unsigned __int8 *)a2 + 2);
    if (v22 <= 0xA)
    {
      if (((1 << v22) & 0x2A8) != 0)
      {
        uint64_t v23 = (llvm::Type *)llvm::FixedVectorType::get();
        uint64_t v12 = llvm::ConstantInt::get();
        uint64_t v11 = llvm::ConstantInt::get();
        if (llvm::Type::getScalarSizeInBits(*(llvm::Type **)a4) <= 0x1F)
        {
          uint64_t v26 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
          __int16 v73 = 257;
          uint64_t v27 = 40;
LABEL_35:
          uint64_t Cast = llvm::IRBuilderBase::CreateCast(v26, v27, (uint64_t)a4, (uint64_t)v23, (uint64_t)v72);
          goto LABEL_50;
        }
      }
      else
      {
        if (((1 << v22) & 0x550) == 0)
        {
          uint64_t v12 = 0;
          ShuffleVector = 0;
          if (*((unsigned char *)a2 + 2)) {
            goto LABEL_51;
          }
          uint64_t v32 = (llvm::Type *)llvm::FixedVectorType::get();
          uint64_t v12 = llvm::ConstantInt::get();
          uint64_t v11 = llvm::ConstantInt::get();
          unint64_t v33 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
          __int16 v73 = 257;
          uint64_t Cast = llvm::IRBuilderBase::CreateFPToSI(v33, a4, v32, (const llvm::Twine *)v72);
          goto LABEL_50;
        }
        uint64_t v23 = (llvm::Type *)llvm::FixedVectorType::get();
        uint64_t v12 = llvm::ConstantInt::get();
        uint64_t v11 = llvm::ConstantInt::get();
        char v24 = *(llvm::Type **)a4;
        if ((*(_DWORD *)(*(void *)a4 + 8) & 0xFE) == 0x12) {
          unsigned int v25 = *(unsigned __int8 *)(**((void **)v24 + 2) + 8);
        }
        else {
          unsigned int v25 = *(_DWORD *)(*(void *)a4 + 8);
        }
        if (v25 <= 6)
        {
          uint64_t v31 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
          __int16 v73 = 257;
          uint64_t Cast = llvm::IRBuilderBase::CreateFPToUI(v31, a4, v23, (const llvm::Twine *)v72);
LABEL_50:
          ShuffleVector = (llvm::Value *)Cast;
          goto LABEL_51;
        }
        if (llvm::Type::getScalarSizeInBits(v24) <= 0x1F)
        {
          uint64_t v26 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
          __int16 v73 = 257;
          uint64_t v27 = 39;
          goto LABEL_35;
        }
      }
      ShuffleVector = a4;
      goto LABEL_51;
    }
    uint64_t v12 = 0;
    ShuffleVector = 0;
  }
LABEL_51:
  unsigned int v46 = *(_DWORD *)(*(void *)ShuffleVector + 32);
  int v47 = *v6;
  if ((*v6 & 0x2000000) != 0)
  {
    uint64_t v74 = llvm::ConstantInt::get();
    uint64_t v75 = llvm::ConstantInt::get();
    uint64_t v76 = llvm::ConstantInt::get();
    uint64_t v77 = llvm::ConstantInt::get();
    uint64_t v48 = (llvm::Value *)llvm::ConstantVector::get();
    uint64_t v49 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    int v50 = (llvm::Value *)llvm::UndefValue::get();
    __int16 v73 = 257;
    ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector(v49, ShuffleVector, v50, v48, (const llvm::Twine *)v72);
    int v47 = *v6;
  }
  unsigned int v51 = BYTE1(v47);
  unsigned int v52 = BYTE1(v47) + 1;
  if (v46 > v52) {
    ShuffleVector = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), ShuffleVector, 0, v52, 0);
  }
  if (v8 == 1 || v8 <= v51)
  {
    ShuffleVector = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), ShuffleVector, 0, v8, 1);
  }
  else if (v8 > v52)
  {
    ShuffleVector = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), ShuffleVector, v8);
    do
    {
      if (v52 == 3) {
        int v53 = (llvm::Value *)v11;
      }
      else {
        int v53 = (llvm::Value *)v12;
      }
      std::string v54 = (char *)a1 + *(void *)(*a1 - 24);
      __int16 v73 = 257;
      uint64_t v55 = (llvm::IRBuilderBase *)(v54 + 40);
      uint64_t v56 = (llvm::Value *)llvm::ConstantInt::get();
      ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v55, ShuffleVector, v53, v56, (const llvm::Twine *)v72);
      ++v52;
    }
    while (v8 != v52);
  }
  return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)a1 + *(void *)(*a1 - 24) + 32), ShuffleVector, v5);
}

llvm::Value *AGCLLVMGLVertexShader::castAttribToElementType(void *a1, int a2, llvm::Value *Cast)
{
  if (BYTE2(a2) > 0xAu) {
    return 0;
  }
  switch(BYTE2(a2))
  {
    case 1:
    case 3:
    case 4:
      uint64_t v5 = llvm::FixedVectorType::get();
      uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      uint64_t v7 = "as_i32";
      goto LABEL_9;
    case 2:
      uint64_t v5 = llvm::FixedVectorType::get();
      uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      uint64_t v7 = "as_half";
      goto LABEL_9;
    case 5:
    case 6:
      uint64_t v5 = llvm::FixedVectorType::get();
      uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      uint64_t v7 = "as_i16";
      goto LABEL_9;
    case 7:
    case 8:
      uint64_t v5 = llvm::FixedVectorType::get();
      uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      uint64_t v7 = "as_i8";
LABEL_9:
      v14[0] = v7;
      __int16 v15 = 259;
      uint64_t Element = (uint64_t)Cast;
      goto LABEL_10;
    case 9:
    case 0xA:
      unsigned int v8 = (char *)a1 + *(void *)(*a1 - 24);
      __int16 v15 = 257;
      unsigned int v9 = (llvm::IRBuilderBase *)(v8 + 40);
      BOOL v10 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v9, Cast, v10, (const llvm::Twine *)v14);
      uint64_t v12 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v6 = (uint64_t)(v12 + 40);
      uint64_t v5 = *((void *)v12 + 29);
      v14[0] = "as_packed_i32";
      __int16 v15 = 259;
LABEL_10:
      uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v6, 49, Element, v5, (uint64_t)v14);
      break;
    default:
      return Cast;
  }
  return Cast;
}

uint64_t AGCLLVMGLVertexShader::initCompile(AGCLLVMGLVertexShader *this)
{
  AGCLLVMUserObject::initCompile(this);
  uint64_t v2 = *((void *)this + 1205);
  uint64_t v3 = *(unsigned int *)(v2 + 80);
  if (*(_DWORD *)(v2 + 80))
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = (unsigned int *)*((void *)this + 1178);
      uint64_t v6 = *((unsigned int *)this + 2358);
      uint64_t v7 = v5;
      if (v6)
      {
        uint64_t v8 = 4 * v6;
        uint64_t v7 = (unsigned int *)*((void *)this + 1178);
        while (*(unsigned __int8 *)(*((void *)this + 1205) + 4 * v4) >= *(unsigned __int8 *)(*((void *)this + 1205) + 4 * *v7))
        {
          ++v7;
          v8 -= 4;
          if (!v8) {
            goto LABEL_13;
          }
        }
      }
      if (&v5[v6] == v7)
      {
LABEL_13:
        llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 9424, v4);
      }
      else
      {
        if (v6 >= *((_DWORD *)this + 2359)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v9 = *((void *)this + 1178);
        BOOL v10 = (_DWORD *)(v9 + 4 * (v7 - v5));
        *(_DWORD *)(v9 + 4 * v6) = *(_DWORD *)(v9 + 4 * v6 - 4);
        uint64_t v11 = *((unsigned int *)this + 2358);
        uint64_t v12 = v9 + 4 * v11 - 4;
        if ((_DWORD *)v12 != v10)
        {
          memmove(v10 + 1, v10, v12 - (void)v10);
          LODWORD(v11) = *((_DWORD *)this + 2358);
        }
        *((_DWORD *)this + 2358) = v11 + 1;
        _DWORD *v10 = v4;
      }
      ++v4;
    }
    while (v4 != v3);
  }
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 9664), *((unsigned int *)this + 2358));
  uint64_t v15 = *((unsigned int *)this + 2358);
  if (v15)
  {
    uint64_t v16 = 0;
    int v17 = 0;
    int v115 = 0;
    uint64_t v18 = (char *)this + 368;
    uint64_t v108 = *((unsigned int *)this + 2358);
    do
    {
      uint64_t v19 = *(unsigned int *)(*((void *)this + 1178) + 4 * v16);
      uint64_t v20 = *((void *)this + 1205);
      int v21 = *(_DWORD *)(v20 + 4 * v19);
      int v22 = v21;
      uint64_t v23 = *(void *)(v20 + 80);
      if (v21 == BYTE4(v23))
      {
        uint64_t v14 = 0;
        uint64_t v13 = 0;
        int v24 = 3;
      }
      else if (v21 == BYTE5(v23))
      {
        uint64_t v14 = 0;
        uint64_t v13 = 1;
        int v24 = 1;
      }
      else
      {
        uint64_t v13 = 0;
        int v24 = 0;
        uint64_t v14 = 1;
      }
      if (BYTE2(v21) > 0xAu) {
        unsigned int v25 = -1;
      }
      else {
        unsigned int v25 = (dword_1CADD6E10[BYTE2(v21)] + dword_1CADD6E10[BYTE2(v21)] * BYTE1(v21) + 3) >> 2;
      }
      *(_DWORD *)(*((void *)this + 1208) + 4 * v19) = v25;
      int v26 = *(_DWORD *)(v20 + 4 * v19);
      int v27 = BYTE1(v26);
      int v28 = v26;
      int v29 = BYTE2(v26);
      int v30 = *((_DWORD *)this + 1256);
      uint64_t v31 = (char *)*((void *)this + 1202);
      unint64_t v32 = *((void *)this + 1203);
      if ((unint64_t)v31 >= v32)
      {
        int v114 = v17;
        uint64_t v34 = (char *)*((void *)this + 1201);
        unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((v31 - v34) >> 2);
        unint64_t v36 = v35 + 1;
        if (v35 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          goto LABEL_137;
        }
        unsigned int v109 = v25;
        unsigned int v110 = v14;
        unsigned int v111 = v13;
        char v112 = BYTE4(v23);
        int v113 = v22;
        unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v32 - (void)v34) >> 2);
        if (2 * v37 > v36) {
          unint64_t v36 = 2 * v37;
        }
        if (v37 >= 0x666666666666666) {
          unint64_t v38 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AGCLLVMGLVertexShader::VertexInput>>(v38);
          uint64_t v31 = (char *)*((void *)this + 1202);
          uint64_t v34 = (char *)*((void *)this + 1201);
        }
        else
        {
          uint64_t v39 = 0;
        }
        uint64_t v40 = (_DWORD *)(v38 + 20 * v35);
        _DWORD *v40 = v27;
        v40[1] = v28;
        v40[2] = v29;
        void v40[3] = v30;
        v40[4] = v24;
        std::string::size_type v41 = v40;
        if (v31 != v34)
        {
          do
          {
            long long v42 = *(_OWORD *)(v31 - 20);
            *(v41 - 1) = *((_DWORD *)v31 - 1);
            *(_OWORD *)(v41 - 5) = v42;
            v41 -= 5;
            v31 -= 20;
          }
          while (v31 != v34);
          uint64_t v34 = (char *)*((void *)this + 1201);
        }
        *((void *)this + 1201) = v41;
        unint64_t v33 = v40 + 5;
        *((void *)this + 1202) = v40 + 5;
        *((void *)this + 1203) = v38 + 20 * v39;
        if (v34) {
          operator delete(v34);
        }
        int v22 = v113;
        int v17 = v114;
        uint64_t v18 = (char *)this + 368;
        uint64_t v15 = v108;
        BYTE4(v23) = v112;
        uint64_t v14 = v110;
        uint64_t v13 = v111;
        unsigned int v25 = v109;
      }
      else
      {
        *(_DWORD *)uint64_t v31 = v27;
        *((_DWORD *)v31 + 1) = v28;
        *((_DWORD *)v31 + 2) = v29;
        *((_DWORD *)v31 + 3) = v30;
        unint64_t v33 = v31 + 20;
        *((_DWORD *)v31 + 4) = v24;
      }
      *((void *)this + 1202) = v33;
      uint64_t v43 = *(void *)this;
      if (*(unsigned char *)(*(void *)&v18[*(void *)(*(void *)this - 24) + 32] + 1734))
      {
        if (v14)
        {
          unsigned int v25 = 0;
          v17 |= *(void *)(*((void *)this + 1205) + 72) >> *(unsigned char *)(v20 + 4 * v19);
          int v115 = 1;
        }
        else
        {
          int v44 = v13 | v115;
          if (v22 == BYTE4(v23)) {
            int v44 = 1;
          }
          int v115 = v44;
          if (v22 != BYTE4(v23)) {
            v17 |= v13;
          }
          unsigned int v25 = 0;
        }
      }
      *((_DWORD *)this + 1256) += v25;
      ++v16;
    }
    while (v16 != v15);
  }
  else
  {
    LOBYTE(v115) = 0;
    LOBYTE(v17) = 0;
    uint64_t v43 = *(void *)this;
  }
  if (*(unsigned char *)(*(void *)((char *)this + *(void *)(v43 - 24) + 400) + 1735))
  {
    char v45 = v17;
    uint64_t v46 = *((void *)this + 22);
    if (*(_WORD *)(v46 + 18))
    {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
      uint64_t v49 = *((void *)this + 22);
      uint64_t v47 = *(void *)(v46 + 88);
      if (*(_WORD *)(v49 + 18)) {
        llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
      }
      uint64_t v46 = v49;
    }
    else
    {
      uint64_t v47 = *(void *)(v46 + 88);
    }
    uint64_t v50 = *(void *)(v46 + 88) + 40 * *(void *)(v46 + 96);
    if (v47 == v50)
    {
LABEL_79:
      int v48 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v51 = *(void *)(*((void *)this + 11) + 8 * *(unsigned int *)(v47 + 32));
        if (*(void *)(v47 + 8) && v51 != 0)
        {
          int v53 = *(llvm::MDString **)(v51 - 8 * *(unsigned int *)(v51 + 8) + 8);
          if (!*(unsigned char *)v53)
          {
            uint64_t String = (unint64_t *)llvm::MDString::getString(v53);
            if (v55 == 29)
            {
              unint64_t v56 = bswap64(*String);
              unint64_t v57 = 0x6169722E76657274;
              if (v56 != 0x6169722E76657274) {
                goto LABEL_74;
              }
              unint64_t v56 = bswap64(String[1]);
              unint64_t v57 = 0x65785F7472616E73;
              if (v56 == 0x65785F7472616E73
                && (v57 = 0x666F726D5F666565, unint64_t v56 = bswap64(String[2]), v56 == 0x666F726D5F666565)
                && (unint64_t v57 = 0x666565646261636BLL,
                    unint64_t v56 = bswap64(*(unint64_t *)((char *)String + 21)),
                    v56 == 0x666565646261636BLL))
              {
                int v58 = 0;
              }
              else
              {
LABEL_74:
                int v58 = v56 < v57 ? -1 : 1;
              }
              if (!v58) {
                break;
              }
            }
          }
        }
        v47 += 40;
        if (v47 == v50) {
          goto LABEL_79;
        }
      }
      int v48 = 1;
    }
    LOBYTE(v17) = v45;
  }
  else
  {
    int v48 = 0;
  }
  if (v115)
  {
    char v59 = v17;
    uint64_t v60 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    int v61 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)v60 + 440))(v60, (char *)this + 5024, 4, v13, v14);
    int v62 = v61;
    int v63 = *(unsigned __int8 *)(*((void *)this + 1205) + 84);
    uint64_t v64 = (char *)*((void *)this + 1202);
    unint64_t v65 = *((void *)this + 1203);
    if ((unint64_t)v64 >= v65)
    {
      uint64_t v67 = (char *)*((void *)this + 1201);
      unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * ((v64 - v67) >> 2);
      unint64_t v69 = v68 + 1;
      if (v68 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        goto LABEL_137;
      }
      unint64_t v70 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (void)v67) >> 2);
      if (2 * v70 > v69) {
        unint64_t v69 = 2 * v70;
      }
      if (v70 >= 0x666666666666666) {
        unint64_t v71 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v71 = v69;
      }
      if (v71)
      {
        unint64_t v71 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AGCLLVMGLVertexShader::VertexInput>>(v71);
        uint64_t v64 = (char *)*((void *)this + 1202);
        uint64_t v67 = (char *)*((void *)this + 1201);
      }
      else
      {
        uint64_t v72 = 0;
      }
      __int16 v73 = (_DWORD *)(v71 + 20 * v68);
      unint64_t v74 = v71 + 20 * v72;
      *__int16 v73 = 0;
      v73[1] = v63;
      v73[2] = 3;
      v73[3] = v62;
      v73[4] = 4;
      long long v66 = v73 + 5;
      if (v64 != v67)
      {
        do
        {
          long long v75 = *(_OWORD *)(v64 - 20);
          *(v73 - 1) = *((_DWORD *)v64 - 1);
          *(_OWORD *)(v73 - 5) = v75;
          v73 -= 5;
          v64 -= 20;
        }
        while (v64 != v67);
        uint64_t v67 = (char *)*((void *)this + 1201);
      }
      *((void *)this + 1201) = v73;
      *((void *)this + 1202) = v66;
      *((void *)this + 1203) = v74;
      if (v67) {
        operator delete(v67);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v64 = 0;
      *((_DWORD *)v64 + 1) = v63;
      *((_DWORD *)v64 + 2) = 3;
      *((_DWORD *)v64 + 3) = v61;
      long long v66 = v64 + 20;
      *((_DWORD *)v64 + 4) = 4;
    }
    *((void *)this + 1202) = v66;
    *((_DWORD *)this + 2408) = v62;
    LOBYTE(v17) = v59;
  }
  if (v17)
  {
    uint64_t v76 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    int v77 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)v76 + 440))(v76, (char *)this + 5024, 2, v13, v14);
    int v78 = v77;
    int v79 = ((unsigned __int16)WORD2(*(void *)(*((void *)this + 1205) + 80)) >> 8);
    unint64_t v80 = (char *)*((void *)this + 1202);
    unint64_t v81 = *((void *)this + 1203);
    if ((unint64_t)v80 >= v81)
    {
      std::string v83 = (char *)*((void *)this + 1201);
      unint64_t v84 = 0xCCCCCCCCCCCCCCCDLL * ((v80 - v83) >> 2);
      unint64_t v85 = v84 + 1;
      if (v84 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        goto LABEL_137;
      }
      unint64_t v86 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v81 - (void)v83) >> 2);
      if (2 * v86 > v85) {
        unint64_t v85 = 2 * v86;
      }
      if (v86 >= 0x666666666666666) {
        unint64_t v87 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v87 = v85;
      }
      if (v87)
      {
        unint64_t v87 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AGCLLVMGLVertexShader::VertexInput>>(v87);
        unint64_t v80 = (char *)*((void *)this + 1202);
        std::string v83 = (char *)*((void *)this + 1201);
      }
      else
      {
        uint64_t v88 = 0;
      }
      std::string v89 = (_DWORD *)(v87 + 20 * v84);
      unint64_t v90 = v87 + 20 * v88;
      *std::string v89 = 0;
      v89[1] = v79;
      v89[2] = 3;
      _OWORD v89[3] = v78;
      void v89[4] = 2;
      std::string v82 = v89 + 5;
      if (v80 != v83)
      {
        do
        {
          long long v91 = *(_OWORD *)(v80 - 20);
          *(v89 - 1) = *((_DWORD *)v80 - 1);
          *(_OWORD *)(v89 - 5) = v91;
          v89 -= 5;
          v80 -= 20;
        }
        while (v80 != v83);
        std::string v83 = (char *)*((void *)this + 1201);
      }
      *((void *)this + 1201) = v89;
      *((void *)this + 1202) = v82;
      *((void *)this + 1203) = v90;
      if (v83) {
        operator delete(v83);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v80 = 0;
      *((_DWORD *)v80 + 1) = v79;
      *((_DWORD *)v80 + 2) = 3;
      *((_DWORD *)v80 + 3) = v77;
      std::string v82 = v80 + 20;
      *((_DWORD *)v80 + 4) = 2;
    }
    *((void *)this + 1202) = v82;
    *((_DWORD *)this + 2409) = v78;
  }
  if (v48)
  {
    uint64_t v92 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    int v93 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)v92 + 440))(v92, (char *)this + 5024, 5, v13, v14);
    int v94 = v93;
    std::string v95 = (char *)*((void *)this + 1202);
    unint64_t v96 = *((void *)this + 1203);
    if ((unint64_t)v95 < v96)
    {
      *(void *)std::string v95 = 0;
      *((_DWORD *)v95 + 2) = 3;
      *((_DWORD *)v95 + 3) = v93;
      uint64_t v97 = v95 + 20;
      *((_DWORD *)v95 + 4) = 5;
LABEL_134:
      *((void *)this + 1202) = v97;
      *((_DWORD *)this + 1299) = v94;
      return 1;
    }
    uint64_t v98 = (unsigned char *)*((void *)this + 1201);
    unint64_t v99 = 0xCCCCCCCCCCCCCCCDLL * ((v95 - v98) >> 2);
    unint64_t v100 = v99 + 1;
    if (v99 + 1 <= 0xCCCCCCCCCCCCCCCLL)
    {
      unint64_t v101 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v96 - (void)v98) >> 2);
      if (2 * v101 > v100) {
        unint64_t v100 = 2 * v101;
      }
      if (v101 >= 0x666666666666666) {
        unint64_t v102 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v102 = v100;
      }
      if (v102)
      {
        unint64_t v102 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AGCLLVMGLVertexShader::VertexInput>>(v102);
        std::string v95 = (char *)*((void *)this + 1202);
        uint64_t v98 = (unsigned char *)*((void *)this + 1201);
      }
      else
      {
        uint64_t v103 = 0;
      }
      unint64_t v104 = v102 + 20 * v99;
      unint64_t v105 = v102 + 20 * v103;
      *(void *)unint64_t v104 = 0;
      *(_DWORD *)(v104 + 8) = 3;
      *(_DWORD *)(v104 + 12) = v94;
      *(_DWORD *)(v104 + 16) = 5;
      uint64_t v97 = (char *)(v104 + 20);
      if (v95 != v98)
      {
        do
        {
          long long v106 = *(_OWORD *)(v95 - 20);
          *(_DWORD *)(v104 - 4) = *((_DWORD *)v95 - 1);
          *(_OWORD *)(v104 - 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v106;
          v104 -= 20;
          v95 -= 20;
        }
        while (v95 != v98);
        uint64_t v98 = (unsigned char *)*((void *)this + 1201);
      }
      *((void *)this + 1201) = v104;
      *((void *)this + 1202) = v97;
      *((void *)this + 1203) = v105;
      if (v98) {
        operator delete(v98);
      }
      goto LABEL_134;
    }
LABEL_137:
    abort();
  }
  return 1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<AGCLLVMGLVertexShader::VertexInput>>(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(20 * a1);
}

void AGCLLVMGLVertexShader::~AGCLLVMGLVertexShader(AGCLLVMGLVertexShader *this)
{
  *(void *)this = &unk_1F25C1248;
  uint64_t v2 = (AGCLLVMGLVertexShader *)((char *)this + 9688);
  *((void *)this + 1211) = &unk_1F25C1580;
  *((void *)this + 1215) = &unk_1F25C1670;
  uint64_t v3 = (void *)*((void *)this + 1208);
  if (v3)
  {
    *((void *)this + 1209) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1201);
  if (v4)
  {
    *((void *)this + 1202) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 1178);
  if (v5 != (char *)this + 9440) {
    free(v5);
  }
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F25C1680);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  void *v3;
  void *v4;
  char *v5;

  *(void *)this = &unk_1F25C1248;
  uint64_t v2 = (AGCLLVMGLVertexShader *)((char *)this + 9688);
  *((void *)this + 1211) = &unk_1F25C1580;
  *((void *)this + 1215) = &unk_1F25C1670;
  uint64_t v3 = (void *)*((void *)this + 1208);
  if (v3)
  {
    *((void *)this + 1209) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1201);
  if (v4)
  {
    *((void *)this + 1202) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 1178);
  if (v5 != (char *)this + 9440) {
    free(v5);
  }
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1F25C1680);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t AGCLLVMGLVertexShader::AGCLLVMGLVertexShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 9688), a2, *a3);
  uint64_t v11 = AGCLLVMUserVertexShader::AGCLLVMUserVertexShader(a1, (uint64_t *)off_1F25C1680, (uint64_t)a3, a4, 1);
  *(void *)a1 = &unk_1F25C1248;
  *(void *)(a1 + 9688) = &unk_1F25C1580;
  *(void *)(a1 + 972llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = &unk_1F25C1670;
  *(void *)(a1 + 9424) = a1 + 9440;
  *(void *)(a1 + 9432) = 0x800000000;
  *(_OWORD *)(a1 + 9472) = 0u;
  *(_OWORD *)(a1 + 9488) = 0u;
  *(_OWORD *)(a1 + 9504) = 0u;
  *(_OWORD *)(a1 + 952llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0u;
  *(_OWORD *)(a1 + 9536) = 0u;
  *(_OWORD *)(a1 + 9552) = 0u;
  *(_OWORD *)(a1 + 9568) = 0u;
  *(_OWORD *)(a1 + 9584) = 0u;
  *(void *)(a1 + 9608) = 0;
  *(_OWORD *)(a1 + 9616) = 0u;
  *(void *)(a1 + 9632) = -1;
  *(void *)(a1 + 964llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = a4;
  *(void *)(a1 + 9648) = a6;
  *(void *)(a1 + 9656) = a5;
  *(void *)(a1 + 968llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
  *(_OWORD *)(a1 + 9664) = 0u;
  *(_DWORD *)(a1 + 5048) = *(unsigned __int8 *)(a4 + 88);
  AGCLLVMUserShader::markNoAliasForGL(v11);
  return a1;
}

void AGCLLVMAirImageBlockGen3::~AGCLLVMAirImageBlockGen3(AGCLLVMAirImageBlockGen3 *this)
{
  AGCLLVMAirImageBlockGen3::~AGCLLVMAirImageBlockGen3(this);
  JUMPOUT(0x1CB7A0780);
}

{
  void *v2;
  unsigned int v3;
  llvm *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(void *)this = &unk_1F25C4550;
  uint64_t v2 = (void *)*((void *)this + 111);
  if (v2 != *((void **)this + 110)) {
    free(v2);
  }
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)this + 840);
  uint64_t v3 = *((_DWORD *)this + 208);
  uint64_t v4 = (llvm *)*((void *)this + 102);
  if (v3)
  {
    int v17 = 2;
    uint64_t v18 = 0;
    uint64_t v19 = -4096;
    uint64_t v20 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F25C4588;
    uint64_t v12 = 2;
    uint64_t v13 = 0;
    uint64_t v14 = -8192;
    uint64_t v5 = (char *)v4 + 64;
    uint64_t v6 = 104 * v3;
    do
    {
      uint64_t v7 = *((void *)v5 - 5);
      uint64_t v8 = v7 == v19 || v7 == v14;
      if (!v8 && v5[23] < 0)
      {
        operator delete(*(void **)v5);
        uint64_t v7 = *((void *)v5 - 5);
      }
      if (v7 != -8192 && v7 != -4096 && v7 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v5 - 56));
      }
      v5 += 104;
      v6 -= 104;
    }
    while (v6);
    uint64_t v4 = (llvm *)*((void *)this + 102);
    BOOL v10 = 104 * *((unsigned int *)this + 208);
  }
  else
  {
    BOOL v10 = 0;
  }
  llvm::deallocate_buffer(v4, (void *)v10);
  *(void *)this = &unk_1F25C45B0;
  MEMORY[0x1CB79EB30]((char *)this + 384);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((AGCLLVMAirImageBlockGen3 *)((char *)this + 136));
  llvm::IRBuilderFolder::~IRBuilderFolder((AGCLLVMAirImageBlockGen3 *)((char *)this + 128));
  uint64_t v11 = (char *)*((void *)this + 1);
  if (v11 != (char *)this + 24) {
    free(v11);
  }
}

void llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  _DWORD v34[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v18, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v20 = v4;
  unsigned int v25 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v19, &v25))uint64_t v5 = (uint64_t)v25; {
  else
  }
    uint64_t v5 = *(void *)v4 + 104 * v4[2].u32[0];
  uint64_t v6 = v20;
  if (*(void *)v20 + 104 * v20[2].u32[0] != v5)
  {
    long long v16 = *(_OWORD *)(v5 + 40);
    uint64_t v7 = *(void **)(v5 + 64);
    uint64_t v17 = *(void *)(v5 + 56);
    v34[0] = *(void *)(v5 + 72);
    *(void *)((char *)v34 + 7) = *(void *)(v5 + 79);
    char v8 = *(unsigned char *)(v5 + 87);
    *(void *)(v5 + 72) = 0;
    *(void *)(v5 + 8llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
    *(void *)(v5 + 64) = 0;
    *(void *)&void v15[5] = *(void *)(v5 + 93);
    *(void *)uint64_t v15 = *(void *)(v5 + 88);
    v26[0] = 2;
    v26[1] = 0;
    uint64_t v27 = -8192;
    uint64_t v28 = 0;
    unsigned int v25 = &unk_1F25C4588;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v5 + 8), v26);
    uint64_t v9 = v27;
    *(void *)(v5 + 32) = v28;
    if (v9 != -8192 && v9 != -4096 && v9) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v26);
    }
    v6[1] = vadd_s32(v6[1], (int32x2_t)0x1FFFFFFFFLL);
    uint64_t v10 = (uint64_t)v20;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v21, a2);
    int v21 = &unk_1F25C4588;
    uint64_t v24 = v10;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v26, (LODWORD(v22[0]) >> 1) & 3, v22);
    unsigned int v25 = &unk_1F25C4588;
    uint64_t v28 = v24;
    long long v29 = v16;
    uint64_t v30 = v17;
    __p[0] = v7;
    __p[1] = (void *)v34[0];
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v34 + 7);
    HIBYTE(__p[2]) = v8;
    v32[0] = *(void *)v15;
    *(void *)((char *)v32 + 5) = *(void *)&v15[5];
    uint64_t v33 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)v10, *(_DWORD *)(v10 + 16), v27, &v33))
    {
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      uint64_t v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(v10, (uint64_t)&v25, v33);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v11 + 8), v26);
      *(void *)(v11 + 32) = v28;
      long long v12 = v29;
      *(void *)(v11 + 56) = v30;
      *(_OWORD *)(v11 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v12;
      long long v13 = *(_OWORD *)__p;
      *(void **)(v11 + 8llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = __p[2];
      *(_OWORD *)(v11 + 64) = v13;
      memset(__p, 0, sizeof(__p));
      uint64_t v14 = *(void *)((char *)v32 + 5);
      *(void *)(v11 + 88) = v32[0];
      *(void *)(v11 + 93) = v14;
    }
    if (v27 != -8192 && v27 != -4096 && v27) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v26);
    }
    if (v23 != -8192 && v23 != -4096 && v23) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v22);
    }
  }
  if (v19 != -8192 && v19 != -4096)
  {
    if (v19) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x1CB79F270]((void *)v8, 104 * v8, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::initEmpty(a1);
    v24[0] = 2;
    v24[1] = 0;
    uint64_t v25 = -4096;
    uint64_t v26 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = &unk_1F25C4588;
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -8192;
    if (v3)
    {
      uint64_t v9 = (char *)v4 + 64;
      uint64_t v10 = 104 * v3;
      do
      {
        uint64_t v11 = *((void *)v9 - 5);
        if (v11 != v25 && v11 != v21)
        {
          uint64_t v27 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v27);
          uint64_t v13 = v27;
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v27 + 8), (void *)v9 - 7);
          *(void *)(v13 + 32) = *((void *)v9 - 4);
          long long v14 = *(_OWORD *)(v9 - 24);
          *(void *)(v13 + 56) = *((void *)v9 - 1);
          *(_OWORD *)(v13 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v14;
          long long v15 = *(_OWORD *)v9;
          *(void *)(v13 + 8llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *((void *)v9 + 2);
          *(_OWORD *)(v13 + 64) = v15;
          *((void *)v9 + 1) = 0;
          *((void *)v9 + 2) = 0;
          *(void *)uint64_t v9 = 0;
          uint64_t v16 = *((void *)v9 + 3);
          *(void *)(v13 + 93) = *(void *)(v9 + 29);
          *(void *)(v13 + 88) = v16;
          ++*(_DWORD *)(a1 + 8);
          if (v9[23] < 0) {
            operator delete(*(void **)v9);
          }
        }
        uint64_t v17 = *((void *)v9 - 5);
        if (v17 != -8192 && v17 != -4096 && v17 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 56));
        }
        v9 += 104;
        v10 -= 104;
      }
      while (v10);
      if (v21 != -8192 && v21 != -4096 && v21) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
      }
    }
    if (v25 != -8192 && v25 != -4096 && v25) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v24);
    }
    return llvm::deallocate_buffer(v4, (void *)(104 * v3));
  }
  else
  {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::initEmpty(a1);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::initEmpty(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 104 * v1;
    uint64_t result = *(void *)result + 8;
    do
    {
      uint64_t v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_1F25C4588;
      *((void *)v4 + 3) = v9;
      unint64_t v5 = (char *)v4 + 96;
      uint64_t result = (uint64_t)v4 + 104;
      v2 += 104;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v9 = v2;
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if (result)
  {
    uint64_t v4 = v10;
    if (*((char *)v10 + 87) < 0) {
      operator delete(v10[8]);
    }
    v11[0] = 2;
    v11[1] = 0;
    uint64_t v12 = -8192;
    uint64_t v13 = 0;
    uint64_t v10 = (void **)&unk_1F25C4588;
    uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v11);
    uint64_t v5 = v12;
    v4[4] = v13;
    if (v5 != -8192 && v5 != -4096 && v5) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  return result;
}

uint64_t AGCLLVMAirImageBlockGen3::setupImageBlocks(llvm::Value *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  v296[1] = *MEMORY[0x1E4F143B8];
  {
    AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::image_block_function_map = 0;
    *(void *)&dword_1EA611ED8 = 0;
    qword_1EA611EE0 = 0x3000000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::image_block_function_map, &dword_1CAC02000);
  }
  char v211 = a1;
  if (!dword_1EA611EDC)
  {
    unsigned int v209 = a3;
    uint64_t v205 = a4;
    *(_OWORD *)&__src[4] = 0uLL;
    uint64_t v7 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.imageblock_data", 0x13uLL);
    *(void *)(v7 + 8) = 0x300000000;
    *(_DWORD *)(v7 + 16) = 2;
    *(_DWORD *)(v7 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v7 + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(_OWORD *)__src;
    *(void *)(v7 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = -4261347073;
    *(void *)&__src[12] = 0;
    *(void *)&__src[4] = 0;
    uint64_t v8 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.implicit_imageblock_data", 0x1CuLL);
    *(void *)(v8 + 8) = 0x300000001;
    *(_DWORD *)(v8 + 16) = 2;
    *(_DWORD *)(v8 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v8 + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(_OWORD *)__src;
    *(void *)(v8 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = -4244504320;
    *(void *)&__src[12] = 0;
    *(void *)&__src[4] = 0;
    uint64_t v9 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.get_imageblock_width", 0x18uLL);
    *(void *)(v9 + 8) = 2;
    *(_DWORD *)(v9 + 16) = 2;
    *(_DWORD *)(v9 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v9 + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(_OWORD *)__src;
    *(void *)(v9 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = -1;
    *(void *)&__src[12] = 0;
    *(void *)&__src[4] = 0;
    uint64_t v10 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.get_imageblock_height", 0x19uLL);
    *(void *)(v10 + 8) = 0x100000002;
    *(_DWORD *)(v10 + 16) = 2;
    *(_DWORD *)(v10 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v10 + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(_OWORD *)__src;
    *(void *)(v10 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = -1;
    *(void *)&__src[12] = 0;
    *(void *)&__src[4] = 0;
    uint64_t v11 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.get_imageblock_samples", 0x1AuLL);
    *(void *)(v11 + 8) = 0x200000002;
    *(_DWORD *)(v11 + 16) = 2;
    *(_DWORD *)(v11 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v11 + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(_OWORD *)__src;
    *(void *)(v11 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = -1;
    *(void *)&__src[12] = 0;
    *(void *)&__src[4] = 0;
    uint64_t v12 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.get_imageblock_num_colors", 0x1DuLL);
    *(void *)(v12 + 8) = 0x300000005;
    *(_DWORD *)(v12 + 16) = 0;
    *(_DWORD *)(v12 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v12 + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(_OWORD *)__src;
    *(void *)(v12 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = -1;
    *(void *)&__src[12] = 0;
    *(void *)&__src[4] = 0;
    uint64_t v13 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.get_color_coverage_mask", 0x1BuLL);
    *(void *)(v13 + 8) = 0x300000005;
    *(_DWORD *)(v13 + 16) = 1;
    *(_DWORD *)(v13 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v13 + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(_OWORD *)__src;
    *(void *)(v13 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = -1;
    std::string::basic_string[abi:nn180100]<0>(v284, ".imageblock");
    std::string::basic_string[abi:nn180100]<0>(&v285[1], ".implicit_imageblock");
    std::string::basic_string[abi:nn180100]<0>(v289, ".mask");
    std::string::basic_string[abi:nn180100]<0>((void *)&v290 + 1, "");
    char v14 = 0;
    uint64_t v15 = 0;
    *(void *)uint64_t __src = v288;
    uint64_t v16 = "air.load";
    *(_OWORD *)&__src[8] = xmmword_1CADD6290;
    do
    {
      uint64_t v17 = 0;
      uint64_t v212 = v15;
      uint64_t v18 = &(&AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::op_types)[2 * v15 + 1];
      uint64_t v19 = ".i8";
      do
      {
        uint64_t v213 = v17;
        uint64_t v20 = 0;
        char v21 = 1;
        do
        {
          char v214 = v21;
          uint64_t v22 = &v284[3 * v20];
          int v216 = std::string::compare((const std::string *)v22, ".imageblock");
          if (v14 & 1 | (v216 != 0))
          {
            uint64_t v23 = 0;
            char v24 = 1;
            do
            {
              char v25 = v24;
              uint64_t v26 = &v289[3 * v23];
              int v27 = std::string::compare((const std::string *)v26, ".mask");
              if (v14 & 1 | (v27 != 0))
              {
                int v28 = v27;
                size_t v29 = strlen(v16);
                *(void *)&__src[8] = 0;
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, v16, &v16[v29]);
                int v30 = *((char *)v22 + 23);
                BOOL v31 = v30 < 0;
                if (v30 >= 0) {
                  unint64_t v32 = v22;
                }
                else {
                  unint64_t v32 = *v22;
                }
                uint64_t v33 = (llvm::Value *)*((unsigned __int8 *)v22 + 23);
                if (v31) {
                  uint64_t v33 = v22[1];
                }
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, v32, (unsigned char *)v33 + (void)v32);
                int v34 = *((char *)v26 + 23);
                BOOL v35 = v34 < 0;
                if (v34 >= 0) {
                  unint64_t v36 = v26;
                }
                else {
                  unint64_t v36 = *v26;
                }
                unint64_t v37 = (unsigned char *)*((unsigned __int8 *)v26 + 23);
                if (v35) {
                  unint64_t v37 = v26[1];
                }
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, v36, &v37[(void)v36]);
                size_t v38 = strlen(v19);
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, v19, &v19[v38]);
                int v39 = *(_DWORD *)v18;
                size_t v40 = strlen(v19);
                if (v40) {
                  std::string::size_type v41 = v19 + 1;
                }
                else {
                  std::string::size_type v41 = v19;
                }
                if (v39 == 4)
                {
                  unint64_t v43 = 0xFF00FF03FFFF0201;
                  if (v28) {
                    unint64_t v43 = 0xFF00FFFF04030201;
                  }
                  if (v216) {
                    uint64_t v42 = v43;
                  }
                  else {
                    uint64_t v42 = 0x3000102FFFFFFFFLL;
                  }
                }
                else if (v39 == 3)
                {
                  uint64_t v42 = -4244504320;
                }
                else
                {
                  uint64_t v42 = -1;
                }
                size_t v44 = v40 - (v40 != 0);
                uint64_t v45 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>(*(const void **)__src, *(size_t *)&__src[8]);
                *(_DWORD *)(v45 + 8) = v39;
                *(void *)(v45 + 12) = 0x200000003;
                *(void *)(v45 + 24) = v41;
                *(void *)(v45 + 32) = v44;
                *(void *)(v45 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v42;
              }
              char v24 = 0;
              uint64_t v23 = 1;
            }
            while ((v25 & 1) != 0);
          }
          char v21 = 0;
          uint64_t v20 = 1;
        }
        while ((v214 & 1) != 0);
        uint64_t v17 = v213 + 1;
        uint64_t v19 = (&pixel_data_types)[2 * v213 + 2];
      }
      while (v213 != 14);
      uint64_t v16 = (&AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::op_types)[2 * v212 + 2];
      char v14 = 1;
      uint64_t v15 = 1;
    }
    while (v212 != 1);
    if (*(unsigned char **)__src != v288) {
      free(*(void **)__src);
    }
    uint64_t v46 = 0;
    a4 = v205;
    a1 = v211;
    do
    {
      if (*((char *)&v291 + v46 + 15) < 0) {
        operator delete(*(void **)((char *)&v290 + v46 + 8));
      }
      v46 -= 24;
    }
    while (v46 != -48);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (*((char *)v286 + i * 8 + 15) < 0) {
        operator delete(v285[i + 1]);
      }
    }
    a3 = v209;
  }
  *(void *)uint64_t __src = &__src[16];
  *(void *)&__src[8] = 0x800000000;
  v289[0] = &v290;
  v289[1] = (void *)0x800000008;
  long long v290 = 0u;
  long long v291 = 0u;
  if (a4) {
    int v48 = *(unsigned char *)(a4 + 33) & 0xF;
  }
  else {
    int v48 = 1;
  }
  unsigned int v217 = v48;
  uint64_t v49 = *((void *)a1 + 42);
  uint64_t v50 = v49 + 24;
  uint64_t v51 = *(void *)(v49 + 32);
  if (v51 != v49 + 24)
  {
    unint64_t v52 = 0x1EA611000uLL;
    do
    {
      uint64_t v53 = v51 - 56;
      if (!v51) {
        uint64_t v53 = 0;
      }
      uint64_t v54 = v53 + 72;
      for (uint64_t j = *(void *)(v53 + 80); j != v54; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v56 = j - 24;
        if (!j) {
          uint64_t v56 = 0;
        }
        uint64_t v57 = *(void *)(v56 + 48);
        if (v57 != v56 + 40)
        {
          while (1)
          {
LABEL_95:
            if (j == v54) {
              goto LABEL_96;
            }
            if (v57) {
              uint64_t v58 = v57 - 24;
            }
            else {
              uint64_t v58 = 0;
            }
            int v59 = *(unsigned __int8 *)(v58 + 16);
            if (v59 == 84) {
              uint64_t v60 = v58;
            }
            else {
              uint64_t v60 = 0;
            }
            if (v57 && v59 == 84)
            {
              uint64_t v61 = *(void *)(v60 - 32);
              if (!v61 || *(unsigned char *)(v61 + 16) || *(void *)(v61 + 24) != *(void *)(v60 + 72)) {
                goto LABEL_86;
              }
              llvm::Value::getName((llvm::Value *)v61);
              int Key = llvm::StringMapImpl::FindKey();
              if (Key == -1 || Key == (unint64_t)dword_1EA611ED8) {
                goto LABEL_86;
              }
              if (*(_DWORD *)(*(void *)(*(void *)(v52 + 3792) + 8 * Key) + 8) <= 1u)
              {
                uint64_t v64 = *(unsigned int *)&__src[8];
                if (*(_DWORD *)&__src[8])
                {
                  uint64_t v65 = a4;
                  uint64_t v66 = a3;
                  if (*(_DWORD *)&__src[8] >= *(_DWORD *)&__src[12]) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v67 = *(uint64_t **)__src;
                  *(void *)(*(void *)__src + 8 * *(unsigned int *)&__src[8]) = *(void *)(*(void *)__src
                                                                                               + 8
                                                                                               * *(unsigned int *)&__src[8]
                                                                                               - 8);
                  uint64_t v68 = *(void *)__src + 8 * v64 - 8;
                  if ((uint64_t *)v68 != v67)
                  {
                    memmove(v67 + 1, v67, v68 - (void)v67);
                    LODWORD(v64) = *(_DWORD *)&__src[8];
                  }
                  *(_DWORD *)&__src[8] = v64 + 1;
                  *uint64_t v67 = v58;
                  a3 = v66;
                  a4 = v65;
                  unint64_t v52 = 0x1EA611000;
                  goto LABEL_86;
                }
              }
            }
            else if ((v59 & 0xFE) != 0x3C || v57 == 0)
            {
              goto LABEL_86;
            }
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__src, v58);
LABEL_86:
            uint64_t v57 = *(void *)(v57 + 8);
            uint64_t v70 = j - 24;
            if (!j) {
              uint64_t v70 = 0;
            }
            if (v57 == v70 + 40)
            {
              while (1)
              {
                uint64_t j = *(void *)(j + 8);
                if (j == v54) {
                  goto LABEL_96;
                }
                uint64_t v71 = j - 24;
                if (!j) {
                  uint64_t v71 = 0;
                }
                uint64_t v57 = *(void *)(v71 + 48);
                if (v57 != v71 + 40) {
                  goto LABEL_95;
                }
              }
            }
          }
        }
      }
LABEL_96:
      uint64_t v51 = *(void *)(v51 + 8);
    }
    while (v51 != v50);
    if (*(_DWORD *)&__src[8])
    {
      uint64_t v72 = (llvm::Value *)((char *)v211 + 8);
      __int16 v73 = *(uint64_t **)__src;
      unint64_t v215 = (llvm::Value *)((char *)v211 + 384);
      uint64_t v74 = 8 * *(unsigned int *)&__src[8];
      while (1)
      {
        uint64_t v75 = *v73;
        int v76 = *(unsigned __int8 *)(*v73 + 16);
        int v77 = v76 == 60 ? (unsigned __int16 *)*v73 : 0;
        int v78 = v76 == 61 ? (unsigned __int16 *)*v73 : 0;
        if (!v75) {
          break;
        }
        if (v76 != 84) {
          break;
        }
        uint64_t v79 = *(void *)(v75 - 32);
        if (!v79 || *(unsigned char *)(v79 + 16) || *(void *)(v79 + 24) != *(void *)(v75 + 72)) {
          break;
        }
        uint64_t Name = llvm::Value::getName(*(llvm::Value **)(v75 - 32));
        uint64_t v273 = v102;
        int v103 = llvm::StringMapImpl::FindKey();
        uint64_t v104 = AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::image_block_function_map;
        if (v103 == -1) {
          uint64_t v105 = dword_1EA611ED8;
        }
        else {
          uint64_t v105 = v103;
        }
        llvm::IRBuilderBase::SetInsertPoint(v72, (llvm::Instruction *)v75);
        uint64_t v106 = *(void *)(v104 + 8 * v105);
        long long v107 = *(_OWORD *)(v106 + 24);
        long long v269 = *(_OWORD *)(v106 + 8);
        *(_OWORD *)__leuint64_t n = v107;
        uint64_t v271 = *(void *)(v106 + 40);
        switch((int)v269)
        {
          case 0:
          case 1:
            memset(v286, 0, 29);
            *(_OWORD *)v285 = 0u;
            *(_OWORD *)v284 = 0u;
            uint64_t v206 = a4;
            if (v269)
            {
              uint64_t v108 = *(void *)(v75 - 32 * (*(_DWORD *)(v75 + 20) & 0x7FFFFFF) + 32 * v271);
              unsigned int v109 = (void *)(v108 + 24);
              if (*(_DWORD *)(v108 + 32) >= 0x41u) {
                unsigned int v109 = (void *)*v109;
              }
              unsigned int v110 = (void *)*v109;
              v284[0] = (llvm::Value *)llvm::ConstantInt::get();
              if (AGCLLVMAirImageBlockGen3::getRTZModeFromImageBlockUser((uint64_t)v211, (uint64_t)v284, v75))*((_DWORD *)v289[0] + v11llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = DWORD2(v286[1]); {
            }
              }
            else
            {
              v284[0] = (llvm::Value *)llvm::ConstantInt::get();
            }
            v285[0] = *(void **)(v75 - 32 * (*(_DWORD *)(v75 + 20) & 0x7FFFFFF) + 32 * BYTE1(v271));
            uint64_t v160 = (llvm::Value *)v285[0];
            ImageBlockSampleMasuint64_t k = (llvm::Value *)AGCLLVMAirImageBlockGen3::getImageBlockSampleMask((uint64_t)v211, (unsigned __int8 *)&v269, v75);
            v284[1] = ImageBlockSampleMask;
            uint64_t v204 = *(llvm::Value **)v75;
            uint64_t v162 = (llvm::Value *)llvm::UndefValue::get();
            __int16 v163 = v284[0];
            __int16 v283 = 257;
            uint64_t v164 = (llvm::Value *)llvm::ConstantInt::get();
            Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v72, v162, v163, v164, (const llvm::Twine *)&v280);
            __int16 v283 = 257;
            std::string::size_type v166 = (llvm::Value *)llvm::ConstantInt::get();
            uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v72, v160, v166, (const llvm::Twine *)&v280);
            __int16 v294 = 257;
            __int16 v168 = (llvm::Value *)llvm::ConstantInt::get();
            int v169 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v72, InsertElement, Element, v168, (const llvm::Twine *)&v292);
            __int16 v283 = 257;
            uint64_t v170 = (llvm::Value *)llvm::ConstantInt::get();
            int v171 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v72, v160, v170, (const llvm::Twine *)&v280);
            __int16 v294 = 257;
            v172 = (llvm::Value *)llvm::ConstantInt::get();
            int v173 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v72, v169, v171, v172, (const llvm::Twine *)&v292);
            __int16 v283 = 257;
            long long v174 = (llvm::Value *)llvm::ConstantInt::get();
            uint64_t v175 = llvm::IRBuilderBase::CreateInsertElement(v72, v173, ImageBlockSampleMask, v174, (const llvm::Twine *)&v280);
            uint64_t v176 = *((void *)v211 + 26);
            __int16 v283 = 257;
            uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v72, 49, v175, v176, (uint64_t)&v280);
            __int16 v294 = 257;
            ShuffleVector = (llvm::Constant **)llvm::IRBuilderBase::CreateCast((uint64_t)v72, 48, Cast, (uint64_t)v204, (uint64_t)&v292);
            if (SHIBYTE(v286[0]) < 0) {
              operator delete(v285[1]);
            }
            a4 = v206;
            goto LABEL_237;
          case 2:
            switch(DWORD1(v269))
            {
              case 0:
                goto LABEL_234;
              case 2:
                uint64_t v191 = llvm::ConstantInt::get();
                break;
              case 1:
LABEL_234:
                llvm::FunctionType::get();
                llvm::Module::getOrInsertFunction();
                LOWORD(v286[0]) = 257;
                unsigned __int8 v189 = llvm::IRBuilderBase::CreateCall((uint64_t)v72, **(void **)(*(void *)v188 + 16), v188, 0, 0, (uint64_t)v284);
                uint64_t v190 = *(void *)v75;
                LOWORD(v286[0]) = 257;
                uint64_t v191 = llvm::IRBuilderBase::CreateCast((uint64_t)v72, 38, (uint64_t)v189, v190, (uint64_t)v284);
                break;
              default:
                goto LABEL_239;
            }
            ShuffleVector = (llvm::Constant **)v191;
            goto LABEL_237;
          case 3:
            memset(v286, 0, 29);
            *(_OWORD *)v285 = 0u;
            *(_OWORD *)v284 = 0u;
            v285[0] = *(void **)(v75 - 32 * (*(_DWORD *)(v75 + 20) & 0x7FFFFFF) + 32 * BYTE1(v271));
            v284[1] = (llvm::Value *)AGCLLVMAirImageBlockGen3::getImageBlockSampleMask((uint64_t)v211, (unsigned __int8 *)&v269, v75);
            uint64_t v116 = *(void *)(v75 - 32 * (*(_DWORD *)(v75 + 20) & 0x7FFFFFF) + 32 * v271);
            uint64_t v117 = (void *)(v116 + 24);
            if (*(_DWORD *)(v116 + 32) >= 0x41u) {
              uint64_t v117 = (void *)*v117;
            }
            uint64_t v118 = (void *)*v117;
            v119.n128_f64[0] = AGCLLVMAirImageBlockGen3::getImageBlockOffsetAndFormatFromDrawBuffer(*((void *)v211 + 24), *(unsigned int *)(*((void *)v211 + 46) + 868), (uint64_t)v284, a4, *v117);
            uint64_t v120 = (*(uint64_t (**)(__n128))(**((void **)v211 + 46) + 680))(v119);
            long long v254 = *(_OWORD *)((char *)v211 + 56);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v255, v72);
            int v256 = *((_DWORD *)v211 + 26);
            if (v286[0] >= 0) {
              uint64_t v121 = &v285[1];
            }
            else {
              uint64_t v121 = (void **)v285[1];
            }
            if (v286[0] >= 0) {
              uint64_t v122 = HIBYTE(v286[0]);
            }
            else {
              uint64_t v122 = *(void *)&v286[0];
            }
            ShuffleVector = (llvm::Constant **)AGCLLVMGen3TargetLowerer::buildReadOutputPartitionFromIR(v120, &v254, (uint64_t)v121, v122, v217, a2, *(llvm::Type ****)v75, (uint64_t)v284[0], (uint64_t)v284[1], (uint64_t)v285[0]);
            if (v255) {
              llvm::MetadataTracking::untrack();
            }
            if ((*(_DWORD *)(a4 + 4 * v118) & 0xE00) == 0xC00)
            {
              uint64_t v124 = *ShuffleVector;
              long long v292 = 0u;
              long long v293 = 0u;
              *(void *)&long long v292 = llvm::ConstantInt::get();
              *((void *)&v292 + 1) = llvm::ConstantInt::get();
              *(void *)&long long v293 = llvm::ConstantInt::get();
              *((void *)&v293 + 1) = llvm::ConstantInt::get();
              Nulluint64_t Value = (llvm::Value *)llvm::Constant::getNullValue(v124, v125);
              uint64_t v127 = (llvm::Value *)llvm::ConstantVector::get();
              __int16 v283 = 257;
              ShuffleVector = (llvm::Constant **)llvm::IRBuilderBase::CreateShuffleVector(v72, (llvm::Value *)ShuffleVector, NullValue, v127, (const llvm::Twine *)&v280);
            }
            if (llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)ShuffleVector))
            {
              NextNonDebugInstructiouint64_t n = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)ShuffleVector);
              llvm::IRBuilderBase::SetInsertPoint(v72, NextNonDebugInstruction);
            }
            else
            {
              v183 = ShuffleVector[5];
              *((void *)v211 + 7) = v183;
              *((void *)v211 + 8) = (char *)v183 + 40;
            }
            if (SHIBYTE(v286[0]) < 0) {
              operator delete(v285[1]);
            }
            goto LABEL_237;
          case 4:
            memset(v286, 0, 29);
            *(_OWORD *)v285 = 0u;
            *(_OWORD *)v284 = 0u;
            uint64_t v128 = *(llvm::Value **)(v75 - 32 * (*(_DWORD *)(v75 + 20) & 0x7FFFFFF) + 32 * BYTE6(v271));
            if (llvm::StringRef::find() == -1)
            {
              uint64_t v179 = llvm::CallBase::arg_end((llvm::CallBase *)v75);
              uint64_t v180 = v75 - 32 * (*(_DWORD *)(v75 + 20) & 0x7FFFFFF);
              if (((v179 - v180) & 0x1FFFFFFFE0) == 0xA0)
              {
                uint64_t v181 = *(void *)(v180 + 32 * HIBYTE(v271));
                int v182 = (unsigned int *)(v181 + 24);
                if (*(_DWORD *)(v181 + 32) >= 0x41u) {
                  int v182 = *(unsigned int **)v182;
                }
                unint64_t v136 = *v182;
              }
              else
              {
                unint64_t v136 = 0;
              }
              int v192 = *(unsigned __int8 **)(v180 + 32 * BYTE5(v271));
              if (__len[0])
              {
                std::string::basic_string[abi:nn180100](__dst, (void *)__len[0], __len[1]);
              }
              else
              {
                __dst[1] = 0;
                __dst[0] = 0;
                uint64_t v253 = 0;
              }
              AGCLLVMAirImageBlockGen3::unpackImageBlockData(v211, (uint64_t)v284, v192, (uint64_t)__dst);
              if (SHIBYTE(v253) < 0) {
                operator delete(__dst[0]);
              }
              std::string v193 = (llvm::Value *)llvm::ConstantInt::get();
              __int16 v283 = 257;
              v284[0] = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v72, v193, v284[0], (const llvm::Twine *)&v280);
            }
            else
            {
              v285[0] = *(void **)(v75 - 32 * (*(_DWORD *)(v75 + 20) & 0x7FFFFFF) + 32 * BYTE1(v271));
              uint64_t v129 = *(void *)(v75 - 32 * (*(_DWORD *)(v75 + 20) & 0x7FFFFFF) + 32 * v271);
              uint64_t v130 = (void *)(v129 + 24);
              if (*(_DWORD *)(v129 + 32) >= 0x41u) {
                uint64_t v130 = (void *)*v130;
              }
              uint64_t v131 = (void *)*v130;
              AGCLLVMAirImageBlockGen3::getImageBlockOffsetAndFormatFromDrawBuffer(*((void *)v211 + 24), *(unsigned int *)(*((void *)v211 + 46) + 868), (uint64_t)v284, a4, *v130);
              BYTE12(v286[1]) = 1;
              DWORD2(v286[1]) = *((_DWORD *)v289[0] + v131);
              if ((*(_DWORD *)(a4 + 4 * v131) & 0xE00) == 0xC00)
              {
                uint64_t v132 = *(llvm::Constant **)v128;
                long long v292 = 0u;
                long long v293 = 0u;
                *(void *)&long long v292 = llvm::ConstantInt::get();
                *((void *)&v292 + 1) = llvm::ConstantInt::get();
                *(void *)&long long v293 = llvm::ConstantInt::get();
                *((void *)&v293 + 1) = llvm::ConstantInt::get();
                uint64_t v134 = (llvm::Value *)llvm::Constant::getNullValue(v132, v133);
                uint64_t v135 = (llvm::Value *)llvm::ConstantVector::get();
                __int16 v283 = 257;
                uint64_t v128 = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector(v72, v128, v134, v135, (const llvm::Twine *)&v280);
              }
              unint64_t v136 = 0;
            }
            v284[1] = (llvm::Value *)AGCLLVMAirImageBlockGen3::getImageBlockSampleMask((uint64_t)v211, (unsigned __int8 *)&v269, v75);
            if (BYTE4(v271) != 255) {
              *((unsigned char *)v211 + 944) = 1;
            }
            long long v249 = *(_OWORD *)((char *)v211 + 56);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v250, v72);
            int v251 = *((_DWORD *)v211 + 26);
            v194 = AGCLLVMAirImageBlockGen3::buildEmulatedRTZConversion((uint64_t)v211, &v249, (uint64_t *)v128, (uint64_t)v284);
            if (v250) {
              llvm::MetadataTracking::untrack();
            }
            long long v280 = 0uLL;
            int v282 = 0;
            uint64_t v281 = 0;
            if (!v136) {
              goto LABEL_260;
            }
            (*(void (**)(void))(**((void **)v211 + 46) + 680))(*((void *)v211 + 46));
            std::string v195 = (llvm::Type *)*v194;
            if (*(unsigned char *)(*v194 + 8) == 15) {
              std::string v195 = (llvm::Type *)**((void **)v195 + 2);
            }
            if (v136 % llvm::DataLayout::getABITypeAlignment(v215, v195))
            {
              uint64_t v196 = (*(uint64_t (**)(void))(**((void **)v211 + 46) + 680))(*((void *)v211 + 46));
              long long v246 = *(_OWORD *)((char *)v211 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(&v247, v72);
              int v248 = *((_DWORD *)v211 + 26);
              AGCLLVMGen3TargetLowerer::splitUnalignedStore((uint64_t)&v292, v196, &v246, 0, v217, a2, (llvm::Type **)v194, v284[0], (uint64_t)v284[1], (uint64_t)v285[0]);
              long long v280 = v292;
              llvm::TrackingMDRef::operator=(&v281, &v293);
              int v282 = DWORD2(v293);
              if ((void)v293) {
                llvm::MetadataTracking::untrack();
              }
              if (v247) {
                goto LABEL_269;
              }
            }
            else
            {
LABEL_260:
              uint64_t v197 = (*(uint64_t (**)(void))(**((void **)v211 + 46) + 680))(*((void *)v211 + 46));
              long long v243 = *(_OWORD *)((char *)v211 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(&v244, v72);
              int v245 = *((_DWORD *)v211 + 26);
              if (v286[0] >= 0) {
                uint64_t v198 = &v285[1];
              }
              else {
                uint64_t v198 = (void **)v285[1];
              }
              if (v286[0] >= 0) {
                uint64_t v199 = HIBYTE(v286[0]);
              }
              else {
                uint64_t v199 = *(void *)&v286[0];
              }
              AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromIR((uint64_t)&v292, v197, &v243, (uint64_t)v198, v199, v217, a2, (llvm::Type **)v194, (uint64_t)v284[0], DWORD2(v286[1]) == 1, (uint64_t)v284[1], (uint64_t)v285[0], SBYTE12(v286[1]));
              long long v280 = v292;
              llvm::TrackingMDRef::operator=(&v281, &v293);
              int v282 = DWORD2(v293);
              if ((void)v293) {
                llvm::MetadataTracking::untrack();
              }
              if (v244) {
LABEL_269:
              }
                llvm::MetadataTracking::untrack();
            }
            if ((void)v280)
            {
              long long v240 = v280;
              uint64_t v241 = v281;
              if (v281) {
                llvm::MetadataTracking::track();
              }
              int v242 = v282;
              AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v240, (uint64_t)v72);
              if (v241) {
                llvm::MetadataTracking::untrack();
              }
            }
            if (v281) {
              llvm::MetadataTracking::untrack();
            }
            if (SHIBYTE(v286[0]) < 0) {
              operator delete(v285[1]);
            }
LABEL_239:
            llvm::Instruction::eraseFromParent((llvm::Instruction *)v75);
            if (!*(void *)(v79 + 8)) {
              llvm::Function::eraseFromParent((llvm::Function *)v79);
            }
            break;
          case 5:
            uint64_t v137 = (uint64_t *)(v75 - 32 * (*(_DWORD *)(v75 + 20) & 0x7FFFFFF));
            uint64_t v138 = *v137;
            if (DWORD2(v269) == 1)
            {
              uint64_t v208 = a4;
              unsigned __int8 v184 = (llvm::Value *)v137[4];
              long long v185 = (void *)(*(uint64_t (**)(void))(**((void **)v211 + 46) + 680))(*((void *)v211 + 46));
              long long v260 = *(_OWORD *)((char *)v211 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(&v261, v72);
              int v262 = *((_DWORD *)v211 + 26);
              uint64_t v186 = AGCLLVMGen3TargetLowerer::buildColorCoverageMaskSet(v185, &v260, v138);
              if (v261) {
                llvm::MetadataTracking::untrack();
              }
              int v187 = (void *)(*(uint64_t (**)(void))(**((void **)v211 + 46) + 680))(*((void *)v211 + 46));
              long long v257 = *(_OWORD *)((char *)v211 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(&v258, v72);
              int v259 = *((_DWORD *)v211 + 26);
              ShuffleVector = (llvm::Constant **)AGCLLVMGen3TargetLowerer::buildExtractColorCoverageMask(v187, &v257, v186, v184);
              if (v258) {
                llvm::MetadataTracking::untrack();
              }
              a4 = v208;
            }
            else
            {
              if (DWORD2(v269)) {
                goto LABEL_239;
              }
              uint64_t v139 = (void *)(*(uint64_t (**)(void))(**((void **)v211 + 46) + 680))(*((void *)v211 + 46));
              long long v266 = *(_OWORD *)((char *)v211 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(&v267, v72);
              int v268 = *((_DWORD *)v211 + 26);
              long long v140 = AGCLLVMGen3TargetLowerer::buildColorCoverageMaskSet(v139, &v266, v138);
              if (v267) {
                llvm::MetadataTracking::untrack();
              }
              uint64_t v141 = (void *)(*(uint64_t (**)(void))(**((void **)v211 + 46) + 680))(*((void *)v211 + 46));
              long long v263 = *(_OWORD *)((char *)v211 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(&v264, v72);
              int v265 = *((_DWORD *)v211 + 26);
              uint64_t v202 = (*(uint64_t (**)(void *))(*v141 + 1520))(v141);
              long long v277 = v263;
              uint64_t v278 = v264;
              if (v264) {
                llvm::MetadataTracking::track();
              }
              int v279 = v265;
              AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v277, (uint64_t)(v141 + 1));
              if (v278) {
                llvm::MetadataTracking::untrack();
              }
              __int16 v203 = v140;
              long long v274 = v263;
              uint64_t v275 = v264;
              if (v264) {
                llvm::MetadataTracking::track();
              }
              int v276 = v265;
              uint64_t v201 = v141[26];
              uint64_t v142 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)v141, (uint64_t)"llvm.agx2.ft1", 13, v141[25], v141[25]);
              uint64_t v143 = v141[25];
              LOWORD(v286[0]) = 257;
              v296[0] = llvm::IRBuilderBase::CreateCast((uint64_t)(v141 + 1), 38, (uint64_t)v203, v143, (uint64_t)v284);
              LOWORD(v286[0]) = 257;
              uint64_t v144 = llvm::IRBuilderBase::CreateCall((uint64_t)(v141 + 1), *(void *)(v142 + 24), v142, (uint64_t)v296, 1, (uint64_t)v284);
              uint64_t v145 = v141[24];
              __int16 v283 = 257;
              uint64_t Select = llvm::IRBuilderBase::CreateCast((uint64_t)(v141 + 1), 38, (uint64_t)v144, v145, (uint64_t)&v280);
              if (v202 == v201)
              {
                __int16 v147 = (llvm::Value *)llvm::ConstantInt::get();
                LOWORD(v286[0]) = 257;
                uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(v141 + 1), v203, v147, (const llvm::Twine *)v284);
                uint64_t v149 = v141[25];
                __int16 v283 = 257;
                uint64_t v295 = llvm::IRBuilderBase::CreateCast((uint64_t)(v141 + 1), 38, LShr, v149, (uint64_t)&v280);
                LOWORD(v286[0]) = 257;
                uint64_t v150 = llvm::IRBuilderBase::CreateCall((uint64_t)(v141 + 1), *(void *)(v142 + 24), v142, (uint64_t)&v295, 1, (uint64_t)v284);
                uint64_t v151 = v141[24];
                __int16 v283 = 257;
                __int16 v152 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v141 + 1), 38, (uint64_t)v150, v151, (uint64_t)&v280);
                uint64_t v207 = a4;
                long long v153 = (llvm::CmpInst **)v295;
                uint64_t v154 = llvm::ConstantInt::get();
                LOWORD(v286[0]) = 257;
                llvm::IRBuilderBase::CreateICmp(v141 + 1, 32, v153, v154, (uint64_t)v284);
                uint64_t v155 = (llvm::Value *)llvm::ConstantInt::get();
                __int16 v283 = 257;
                llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v141 + 1), v152, v155, (const llvm::Twine *)&v280);
                __int16 v294 = 257;
                a4 = v207;
                uint64_t Select = llvm::IRBuilderBase::CreateSelect();
              }
              v156 = (llvm::Value *)Select;
              if (v275) {
                llvm::MetadataTracking::untrack();
              }
              std::string::size_type v157 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(v286[0]) = 257;
              uint64_t UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv((llvm::IRBuilderBase *)(v141 + 1), v156, v157, (const llvm::Twine *)v284);
              long long v159 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(v286[0]) = 257;
              ShuffleVector = (llvm::Constant **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v141 + 1), UDiv, v159, (const llvm::Twine *)v284);
              if (v264) {
                llvm::MetadataTracking::untrack();
              }
            }
LABEL_237:
            if (ShuffleVector) {
              llvm::Value::replaceAllUsesWith();
            }
            goto LABEL_239;
          default:
            goto LABEL_239;
        }
LABEL_176:
        ++v73;
        v74 -= 8;
        if (!v74) {
          goto LABEL_279;
        }
      }
      if (v77)
      {
        uint64_t v80 = **((void **)v77 - 4);
        int v81 = *(_DWORD *)(v80 + 8);
        if ((v81 & 0xFE) == 0x12) {
          int v81 = *(_DWORD *)(**(void **)(v80 + 16) + 8);
        }
        if ((v81 & 0xFFFFFF00) != 0x400) {
          goto LABEL_176;
        }
        llvm::IRBuilderBase::SetInsertPoint(v72, (llvm::Instruction *)v77);
        memset(v286, 0, 29);
        *(_OWORD *)v285 = 0u;
        *(_OWORD *)v284 = 0u;
        std::string v82 = (unsigned __int8 *)*((void *)v77 - 4);
        __p[1] = 0;
        __p[0] = 0;
        uint64_t v239 = 0;
        AGCLLVMAirImageBlockGen3::unpackImageBlockData(v211, (uint64_t)v284, v82, (uint64_t)__p);
        if (SHIBYTE(v239) < 0) {
          operator delete(__p[0]);
        }
        std::string v83 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v283 = 257;
        v284[0] = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v72, v83, v284[0], (const llvm::Twine *)&v280);
        unint64_t v84 = *(llvm::Type ****)v77;
        (*(void (**)(void))(**((void **)v211 + 46) + 680))();
        uint64_t v85 = **((void **)v77 - 4);
        if (*(unsigned char *)(v85 + 8) == 15) {
          uint64_t v85 = **(void **)(v85 + 16);
        }
        unint64_t v86 = (1 << ((unint64_t)v77[9] >> 1));
        unint64_t v87 = v86 % llvm::DataLayout::getABITypeAlignment(v215, (llvm::Type *)v85);
        uint64_t v88 = (*(uint64_t (**)(void))(**((void **)v211 + 46) + 680))(*((void *)v211 + 46));
        if (v87)
        {
          long long v235 = *(_OWORD *)((char *)v211 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v236, v72);
          int v237 = *((_DWORD *)v211 + 26);
          std::string v89 = AGCLLVMGen3TargetLowerer::splitUnalignedLoads(v88, &v235, 0, v217, a2, (uint64_t)v84, v284[0], (uint64_t)v284[1], (uint64_t)v285[0]);
          if (v236) {
            llvm::MetadataTracking::untrack();
          }
        }
        else
        {
          long long v232 = *(_OWORD *)((char *)v211 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v233, v72);
          int v234 = *((_DWORD *)v211 + 26);
          if (v286[0] >= 0) {
            unint64_t v99 = &v285[1];
          }
          else {
            unint64_t v99 = (void **)v285[1];
          }
          if (v286[0] >= 0) {
            uint64_t v100 = HIBYTE(v286[0]);
          }
          else {
            uint64_t v100 = *(void *)&v286[0];
          }
          std::string v89 = (llvm::Instruction *)AGCLLVMGen3TargetLowerer::buildReadOutputPartitionFromIR(v88, &v232, (uint64_t)v99, v100, v217, a2, v84, (uint64_t)v284[0], (uint64_t)v284[1], (uint64_t)v285[0]);
          if (v233) {
            llvm::MetadataTracking::untrack();
          }
          if (llvm::Instruction::getNextNonDebugInstruction(v89))
          {
            unint64_t v101 = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction(v89);
            llvm::IRBuilderBase::SetInsertPoint(v72, v101);
          }
          else
          {
            uint64_t v114 = *((void *)v89 + 5);
            *((void *)v211 + 7) = v114;
            *((void *)v211 + 8) = v114 + 40;
          }
        }
        uint64_t v115 = *(void *)v77;
        __int16 v283 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v72, 49, (uint64_t)v89, v115, (uint64_t)&v280);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v77);
        goto LABEL_174;
      }
      if (!v78) {
        goto LABEL_176;
      }
      uint64_t v90 = **((void **)v78 - 4);
      int v91 = *(_DWORD *)(v90 + 8);
      if ((v91 & 0xFE) == 0x12) {
        int v91 = *(_DWORD *)(**(void **)(v90 + 16) + 8);
      }
      if ((v91 & 0xFFFFFF00) != 0x400) {
        goto LABEL_176;
      }
      llvm::IRBuilderBase::SetInsertPoint(v72, (llvm::Instruction *)v78);
      memset(v286, 0, 29);
      *(_OWORD *)v285 = 0u;
      *(_OWORD *)v284 = 0u;
      uint64_t v92 = (unsigned __int8 *)*((void *)v78 - 4);
      v230[0] = 0;
      v230[1] = 0;
      uint64_t v231 = 0;
      AGCLLVMAirImageBlockGen3::unpackImageBlockData(v211, (uint64_t)v284, v92, (uint64_t)v230);
      if (SHIBYTE(v231) < 0) {
        operator delete(v230[0]);
      }
      int v93 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v283 = 257;
      v284[0] = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v72, v93, v284[0], (const llvm::Twine *)&v280);
      int v94 = (uint64_t *)*((void *)v78 - 8);
      long long v227 = *(_OWORD *)((char *)v211 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v228, v72);
      int v229 = *((_DWORD *)v211 + 26);
      std::string v95 = AGCLLVMAirImageBlockGen3::buildEmulatedRTZConversion((uint64_t)v211, &v227, v94, (uint64_t)v284);
      if (v228) {
        llvm::MetadataTracking::untrack();
      }
      long long v280 = 0uLL;
      int v282 = 0;
      uint64_t v281 = 0;
      (*(void (**)(void))(**((void **)v211 + 46) + 680))();
      uint64_t v96 = **((void **)v78 - 4);
      if (*(unsigned char *)(v96 + 8) == 15) {
        uint64_t v96 = **(void **)(v96 + 16);
      }
      unint64_t v97 = (1 << ((unint64_t)v78[9] >> 1));
      if (v97 % llvm::DataLayout::getABITypeAlignment(v215, (llvm::Type *)v96))
      {
        uint64_t v98 = (*(uint64_t (**)(void))(**((void **)v211 + 46) + 680))(*((void *)v211 + 46));
        long long v224 = *(_OWORD *)((char *)v211 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v225, v72);
        int v226 = *((_DWORD *)v211 + 26);
        AGCLLVMGen3TargetLowerer::splitUnalignedStore((uint64_t)&v292, v98, &v224, 0, v217, a2, (llvm::Type **)v95, v284[0], (uint64_t)v284[1], (uint64_t)v285[0]);
        long long v280 = v292;
        llvm::TrackingMDRef::operator=(&v281, &v293);
        int v282 = DWORD2(v293);
        if ((void)v293) {
          llvm::MetadataTracking::untrack();
        }
        if (!v225) {
          goto LABEL_165;
        }
      }
      else
      {
        uint64_t v111 = (*(uint64_t (**)(void))(**((void **)v211 + 46) + 680))(*((void *)v211 + 46));
        long long v221 = *(_OWORD *)((char *)v211 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v222, v72);
        int v223 = *((_DWORD *)v211 + 26);
        if (v286[0] >= 0) {
          char v112 = &v285[1];
        }
        else {
          char v112 = (void **)v285[1];
        }
        if (v286[0] >= 0) {
          uint64_t v113 = HIBYTE(v286[0]);
        }
        else {
          uint64_t v113 = *(void *)&v286[0];
        }
        AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromIR((uint64_t)&v292, v111, &v221, (uint64_t)v112, v113, v217, a2, (llvm::Type **)v95, (uint64_t)v284[0], DWORD2(v286[1]) == 1, (uint64_t)v284[1], (uint64_t)v285[0], 0);
        long long v280 = v292;
        llvm::TrackingMDRef::operator=(&v281, &v293);
        int v282 = DWORD2(v293);
        if ((void)v293) {
          llvm::MetadataTracking::untrack();
        }
        if (!v222) {
          goto LABEL_165;
        }
      }
      llvm::MetadataTracking::untrack();
LABEL_165:
      if ((void)v280)
      {
        long long v218 = v280;
        uint64_t v219 = v281;
        if (v281) {
          llvm::MetadataTracking::track();
        }
        int v220 = v282;
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v218, (uint64_t)v72);
        if (v219) {
          llvm::MetadataTracking::untrack();
        }
      }
      llvm::Instruction::eraseFromParent((llvm::Instruction *)v78);
      if (v281) {
        llvm::MetadataTracking::untrack();
      }
LABEL_174:
      if (SHIBYTE(v286[0]) < 0) {
        operator delete(v285[1]);
      }
      goto LABEL_176;
    }
  }
LABEL_279:
  if (v289[0] != &v290) {
    free(v289[0]);
  }
  if (*(unsigned char **)__src != &__src[16]) {
    free(*(void **)__src);
  }
  return 1;
}

uint64_t AGCLLVMAirImageBlockGen3::getRTZModeFromImageBlockUser(uint64_t a1, uint64_t a2, uint64_t a3)
{
  AGCLLVMUserObject::getSampleFunctionMap((AGCLLVMUserObject *)a1);
  uint64_t v6 = *(void *)(a3 + 8);
  if (!v6) {
    return 0;
  }
  while (1)
  {
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7 && *(unsigned char *)(v7 + 16) == 84)
    {
      uint64_t v8 = *(void *)(v7 - 32);
      if (!v8 || *(unsigned char *)(v8 + 16) || *(void *)(v8 + 24) != *(void *)(v7 + 72)) {
        uint64_t v8 = 0;
      }
      llvm::Value::getName((llvm::Value *)v8);
      int Key = llvm::StringMapImpl::FindKey();
      if (Key != -1 && Key != (unint64_t)dword_1EBD0EB78)
      {
        uint64_t v10 = *(void *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map + 8 * Key);
        if (*(_DWORD *)(v10 + 8) == 8) {
          break;
        }
      }
    }
    uint64_t v6 = *(void *)(v6 + 8);
    if (!v6) {
      return 0;
    }
  }
  int DefaultRoundingMode = *(_DWORD *)(v10 + 32);
  *(void *)(a2 + 48) = *(void *)(v7
                                   - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)
                                   + 32 * *(unsigned __int8 *)(v10 + 38));
  if (!DefaultRoundingMode) {
    int DefaultRoundingMode = AGCLLVMObject::getDefaultRoundingMode((AGCLLVMObject *)(*(void *)(a1 + 376)
  }
                                                                                + *(void *)(**(void **)(a1 + 376)
                                                                                            - 24)));
  *(_DWORD *)(a2 + 56) = AGCLLVMTargetLowerer::getRTZMode(*(unsigned char **)(a1 + 368), DefaultRoundingMode);
  return 1;
}

uint64_t AGCLLVMAirImageBlockGen3::getImageBlockSampleMask(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a2[36];
  if (v4 != 255) {
    return *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * v4);
  }
  uint64_t v9 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
  uint64_t v10 = *(void *)(v9 + 32 * a2[34]);
  uint64_t v11 = (void *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u) {
    uint64_t v11 = (void *)*v11;
  }
  int v12 = *(_DWORD *)v11;
  if (v12 == 2)
  {
    uint64_t v13 = *(llvm::Value **)(v9 + 32 * a2[35]);
    char v14 = (llvm::IRBuilderBase *)(a1 + 8);
    uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v24 = 257;
    uint64_t Shl = llvm::IRBuilderBase::CreateShl(v14, v15, v13, (const llvm::Twine *)v23);
    uint64_t v17 = *(void *)v13;
    v22[16] = 257;
    return llvm::IRBuilderBase::CreateCast((uint64_t)v14, 39, Shl, v17, (uint64_t)v22);
  }
  if (v12 == 1)
  {
    uint64_t v18 = *(llvm::Value **)(v9 + 32 * a2[35]);
    uint64_t v19 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
    long long v28 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v29, (llvm::IRBuilderBase *)(a1 + 8));
    int v30 = *(_DWORD *)(a1 + 104);
    uint64_t v20 = AGCLLVMGen3TargetLowerer::buildColorCoverageMaskSet(v19, &v28, *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * a2[33]));
    if (v29) {
      llvm::MetadataTracking::untrack();
    }
    char v21 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 368) + 680))(*(void *)(a1 + 368));
    long long v25 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v26, (llvm::IRBuilderBase *)(a1 + 8));
    int v27 = *(_DWORD *)(a1 + 104);
    uint64_t v5 = AGCLLVMGen3TargetLowerer::buildExtractColorCoverageMask(v21, &v25, v20, v18);
    if (v26) {
      llvm::MetadataTracking::untrack();
    }
    return v5;
  }
  if (v12) {
    return 0;
  }
  return llvm::ConstantInt::get();
}

double AGCLLVMAirImageBlockGen3::getImageBlockOffsetAndFormatFromDrawBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  int v6 = *(_DWORD *)(a4 + 4 * a5);
  if ((v6 & 0x100) != 0) {
    unsigned __int8 v7 = v6 & 0xE0 | 1;
  }
  else {
    unsigned __int8 v7 = *(_DWORD *)(a4 + 4 * a5);
  }
  uint64_t v8 = llvm::ConstantInt::get();
  uint64_t v9 = 0;
  *(void *)a3 = v8;
  int v10 = (v7 & 0x1F) - 1;
  int v11 = v7 >> 5;
  int v12 = "i8";
  uint64_t v13 = "8unorm";
  switch(v10)
  {
    case 0:
      uint64_t v9 = "srgba8unorm";
      goto LABEL_18;
    case 1:
      uint64_t v13 = "8snorm";
      goto LABEL_12;
    case 2:
      goto LABEL_12;
    case 3:
    case 4:
      goto LABEL_14;
    case 5:
      uint64_t v13 = "16snorm";
      goto LABEL_12;
    case 6:
      uint64_t v13 = "16unorm";
LABEL_12:
      memset(&v16, 0, sizeof(v16));
      std::string::append(&v16, off_1E65EB268[v11 - 1]);
      uint64_t v9 = v13;
      goto LABEL_19;
    case 7:
    case 8:
      int v12 = "i16";
      goto LABEL_14;
    case 9:
    case 10:
      int v12 = "i32";
      goto LABEL_14;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 21:
      int v12 = "f16";
      goto LABEL_14;
    case 16:
      int v12 = "f32";
LABEL_14:
      memset(&v16, 0, sizeof(v16));
      std::string::append(&v16, *((const std::string::value_type **)&off_1E65EB288 + (v11 - 1)));
      uint64_t v9 = v12;
      goto LABEL_19;
    case 18:
      uint64_t v9 = "rgb10a2";
      goto LABEL_18;
    case 19:
      uint64_t v9 = "rgb9e5";
      goto LABEL_18;
    case 20:
      uint64_t v9 = "rg11b10f";
      goto LABEL_18;
    default:
LABEL_18:
      memset(&v16, 0, sizeof(v16));
LABEL_19:
      std::string::append(&v16, v9);
      char v14 = (void **)(a3 + 24);
      if (*(char *)(a3 + 47) < 0) {
        operator delete(*v14);
      }
      double result = *(double *)&v16.__r_.__value_.__l.__data_;
      *(_OWORD *)char v14 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
      *(void *)(a3 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *((void *)&v16.__r_.__value_.__l + 2);
      return result;
  }
}

llvm::Value *AGCLLVMAirImageBlockGen3::unpackImageBlockData(llvm::Value *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  AGCLLVMAirImageBlockGen3::extractConstantImageBlockData((AGCLLVMAirImageBlockGen3 *)&v19, a1, a3);
  *(_OWORD *)a2 = v19;
  *(void *)(a2 + 16) = v20;
  uint64_t v8 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)uint64_t v8 = v21;
  uint64_t v9 = v23[0];
  *(void *)(a2 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v22;
  *(void *)(a2 + 48) = v9;
  *(void *)(a2 + 53) = *(void *)((char *)v23 + 5);
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a4 + 23)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*(void *)(a4 + 8)) {
LABEL_5:
  }
    std::string::operator=((std::string *)(a2 + 24), (const std::string *)a4);
LABEL_6:
  uint64_t v10 = *((void *)a1 + 26);
  WORD4(v21) = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 47, (uint64_t)a3, v10, (uint64_t)&v19);
  uint64_t v12 = *((void *)a1 + 38);
  __int16 v18 = 257;
  double result = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 49, Cast, v12, (uint64_t)v17);
  char v14 = result;
  if (!*(void *)a2)
  {
    WORD4(v21) = 257;
    uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
    double result = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::Value *)((char *)a1 + 8), v14, v15, (const llvm::Twine *)&v19);
    *(void *)a2 = result;
  }
  if (!*(void *)(a2 + 16))
  {
    double result = (llvm::Value *)AGCLLVMBuilder::subrangeVector(a1, v14, 1u, 2, 1);
    *(void *)(a2 + 16) = result;
  }
  if (!*(void *)(a2 + 8))
  {
    WORD4(v21) = 257;
    std::string v16 = (llvm::Value *)llvm::ConstantInt::get();
    double result = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::Value *)((char *)a1 + 8), v14, v16, (const llvm::Twine *)&v19);
    *(void *)(a2 + 8) = result;
  }
  return result;
}

uint64_t *AGCLLVMAirImageBlockGen3::buildEmulatedRTZConversion(uint64_t a1, long long *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t Select = a3;
  v51[8] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a3;
  if ((*(_DWORD *)(*a3 + 8) & 0xFE) == 0x12) {
    uint64_t v8 = **(void **)(v8 + 16);
  }
  if (v8 != *(void *)(a1 + 168)) {
    return Select;
  }
  int v9 = *(_DWORD *)(a4 + 56);
  if ((v9 & 0xFFFFFFFE) != 2) {
    return Select;
  }
  long long v46 = *a2;
  uint64_t v47 = *((void *)a2 + 2);
  if (v47) {
    llvm::MetadataTracking::track();
  }
  int v48 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v46, a1 + 8);
  if (v47) {
    llvm::MetadataTracking::untrack();
  }
  BOOL v10 = v9 == 3;
  uint64_t v11 = *(void *)(a1 + 368);
  long long v43 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v44, (llvm::IRBuilderBase *)(a1 + 8));
  int v45 = *(_DWORD *)(a1 + 104);
  uint64_t v12 = AGCLLVMTargetLowerer::buildRTZF16Value(v11, (uint64_t)&v43, Select, v10);
  if (v44) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v13 = (void *)(a4 + 24);
  if (*(char *)(a4 + 47) < 0)
  {
    uint64_t v14 = *(void *)(a4 + 32);
    if (!v14)
    {
LABEL_25:
      uint64_t v19 = *(void *)(a1 + 56);
      if (*(unsigned __int8 *)(v12 + 16) <= 0x1Bu) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = (llvm::Instruction *)v12;
      }
      int v39 = v20;
      uint64_t v49 = v51;
      uint64_t v50 = 0x800000000;
      uint64_t v21 = *(void *)(a4 + 48);
      if (v21)
      {
        if (*(unsigned __int8 *)(v21 + 16) >= 0x1Cu)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v49, v21);
          unsigned int v22 = v50;
          if (v50)
          {
            uint64_t v23 = (void *)(v19 + 40);
            do
            {
              uint64_t v24 = *((void *)v49 + --v22);
              LODWORD(v5llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v22;
              long long v25 = (void *)*v23;
              if ((void *)*v23 != v23)
              {
                uint64_t v26 = (llvm::Instruction *)(v25 - 3);
                if (v25) {
                  int v27 = v25 - 3;
                }
                else {
                  int v27 = 0;
                }
                if (*((unsigned __int8 *)v27 + 16) - 29 <= 0xA)
                {
                  int NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)(v25 - 3));
                  if (NumSuccessors)
                  {
                    int v29 = NumSuccessors;
                    int v30 = 0;
                    while (*(void *)(v24 + 40) != llvm::Instruction::getSuccessor(v26))
                    {
                      if (v29 == ++v30) {
                        goto LABEL_54;
                      }
                    }
                    llvm::Instruction::moveAfter((llvm::Instruction *)v24, v39);
                    int v31 = *(_DWORD *)(v24 + 20);
                    if ((v31 & 0x40000000) != 0)
                    {
                      uint64_t v33 = *(uint64_t **)(v24 - 8);
                      uint64_t v32 = v31 & 0x7FFFFFF;
                    }
                    else
                    {
                      uint64_t v32 = v31 & 0x7FFFFFF;
                      uint64_t v33 = (uint64_t *)(v24 - 32 * v32);
                    }
                    if (v32)
                    {
                      uint64_t v34 = 32 * v32;
                      do
                      {
                        if (*v33) {
                          BOOL v35 = *(unsigned __int8 *)(*v33 + 16) >= 0x1Cu;
                        }
                        else {
                          BOOL v35 = 0;
                        }
                        if (v35) {
                          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v49, *v33);
                        }
                        v33 += 4;
                        v34 -= 32;
                      }
                      while (v34);
                    }
                  }
                }
LABEL_54:
                unsigned int v22 = v50;
              }
            }
            while (v22);
          }
        }
      }
      unint64_t v36 = *(unsigned char **)(a1 + 376);
      long long v40 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v41, (llvm::IRBuilderBase *)(a1 + 8));
      int v42 = *(_DWORD *)(a1 + 104);
      AGCLLVMUserObject::buildEmulatedIsF16Format(v36, &v40, *(AGCLLVMUserObject **)(a4 + 48));
      if (v41) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect();
      if (v49 != v51) {
        free(v49);
      }
      return Select;
    }
    uint64_t v13 = (void *)*v13;
  }
  else
  {
    uint64_t v14 = *(unsigned __int8 *)(a4 + 47);
    if (!*(unsigned char *)(a4 + 47)) {
      goto LABEL_25;
    }
  }
  if (v14 >= 3)
  {
    uint64_t v15 = (char *)v13 + v14;
    std::string v16 = v13;
    do
    {
      uint64_t v17 = (char *)memchr(v16, 102, v14 - 2);
      if (!v17) {
        break;
      }
      if (*(_WORD *)v17 == 12646 && v17[2] == 54)
      {
        if (v17 - (char *)v13 == -1) {
          uint64_t v37 = (uint64_t)Select;
        }
        else {
          uint64_t v37 = v12;
        }
        if (v17 != v15) {
          return (uint64_t *)v37;
        }
        return Select;
      }
      std::string v16 = v17 + 1;
      uint64_t v14 = v15 - (unsigned char *)v16;
    }
    while (v15 - (unsigned char *)v16 >= 3);
  }
  return Select;
}

void AGCLLVMAirImageBlockGen3::extractConstantImageBlockData(AGCLLVMAirImageBlockGen3 *this, llvm::Value *a2, unsigned __int8 *a3)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  memset(v78, 0, 61);
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  unsigned int v6 = *((_DWORD *)a2 + 208);
  if (v6)
  {
    uint64_t v7 = *((void *)a2 + 102);
    unsigned int v8 = ((a3 >> 4) ^ (a3 >> 9)) & (v6 - 1);
    uint64_t v9 = v7 + 104 * v8;
    BOOL v10 = *(unsigned __int8 **)(v9 + 24);
    if (v10 == a3)
    {
LABEL_3:
      if (v9 != v7 + 104 * v6)
      {
        *(_OWORD *)this = *(_OWORD *)(v9 + 40);
        *((void *)this + 2) = *(void *)(v9 + 56);
        uint64_t v11 = (std::string *)((char *)this + 24);
        if (*(char *)(v9 + 87) < 0)
        {
          std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v9 + 64), *(void *)(v9 + 72));
        }
        else
        {
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)(v9 + 64);
          *((void *)this + 5) = *(void *)(v9 + 80);
        }
        *((void *)this + 6) = *(void *)(v9 + 88);
        *(void *)((char *)this + 53) = *(void *)(v9 + 93);
        return;
      }
    }
    else
    {
      int v12 = 1;
      while (v10 != (unsigned __int8 *)-4096)
      {
        unsigned int v13 = v8 + v12++;
        unsigned int v8 = v13 & (v6 - 1);
        uint64_t v9 = v7 + 104 * v8;
        BOOL v10 = *(unsigned __int8 **)(v9 + 24);
        if (v10 == a3) {
          goto LABEL_3;
        }
      }
    }
  }
  long long v75 = *(_OWORD *)((char *)a2 + 56);
  int v63 = (char *)a2 + 816;
  uint64_t v64 = (llvm::Value *)((char *)a2 + 8);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v76, (llvm::Value *)((char *)a2 + 8));
  int v77 = *((_DWORD *)a2 + 26);
  if (a3 && a3[16] >= 0x1Cu) {
    llvm::IRBuilderBase::SetInsertPoint(v64, (llvm::Instruction *)a3);
  }
  __int16 v14 = 0;
  char v15 = 0;
  uint64_t v16 = (uint64_t)a3;
  while (2)
  {
    __int16 v62 = v14;
    if (v15)
    {
LABEL_17:
      char RTZModeFromImageBlockUser = 1;
      goto LABEL_19;
    }
    while (1)
    {
      char RTZModeFromImageBlockUser = AGCLLVMAirImageBlockGen3::getRTZModeFromImageBlockUser((uint64_t)a2, (uint64_t)v78, v16);
LABEL_19:
      unsigned int v18 = *(unsigned __int8 *)(v16 + 16);
      if (v18 == 83 && v16 != 0)
      {
        imp = llvm::SmallPtrSetImplBase::find_imp((llvm::Value *)((char *)a2 + 880), (const void *)v16);
        uint64_t v42 = *((void *)a2 + 111);
        uint64_t v43 = 896;
        if (v42 == *((void *)a2 + 110)) {
          uint64_t v43 = 900;
        }
        if (imp == (const void **)(v42 + 8 * *(unsigned int *)((char *)a2 + v43)))
        {
          llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v72, (llvm::Value *)((char *)a2 + 880), (void *)v16);
          *(_OWORD *)__int16 v73 = 0u;
          memset(v74, 0, 29);
          long long v72 = 0u;
          int v44 = *(_DWORD *)(v16 + 20);
          unint64_t v45 = v44 & 0x7FFFFFF;
          if ((v44 & 0x7FFFFFF) != 0)
          {
            uint64_t v46 = 0;
            unint64_t v47 = 0;
            char v48 = 1;
            do
            {
              if ((v44 & 0x40000000) != 0) {
                uint64_t v49 = *(void *)(v16 - 8);
              }
              else {
                uint64_t v49 = v16 - 32 * v45;
              }
              if (*(void *)(v49 + v46) != v16)
              {
                AGCLLVMAirImageBlockGen3::extractConstantImageBlockData((AGCLLVMAirImageBlockGen3 *)&v68, a2);
                if (v48)
                {
                  long long v72 = v68;
                  v73[0] = v69;
                  std::string::operator=((std::string *)&v73[1], &__p);
                  v74[2] = v71[0];
                  *(void *)((char *)&v74[2] + 5) = *(void *)((char *)v71 + 5);
                }
                else
                {
                  if ((void)v68 != (void)v72) {
                    *(void *)&long long v72 = 0;
                  }
                  if (v69 != v73[0]) {
                    v73[0] = 0;
                  }
                  if (*((void *)&v68 + 1) != *((void *)&v72 + 1)) {
                    *((void *)&v72 + 1) = 0;
                  }
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                char v48 = 0;
                int v44 = *(_DWORD *)(v16 + 20);
              }
              ++v47;
              unint64_t v45 = v44 & 0x7FFFFFF;
              v46 += 32;
            }
            while (v47 < v45);
          }
          llvm::SmallPtrSetImplBase::erase_imp((llvm::Value *)((char *)a2 + 880), (const void *)v16);
          if (!v78[0].__r_.__value_.__r.__words[0])
          {
            uint64_t v50 = (llvm::Value *)v72;
            if ((void)v72)
            {
              uint64_t v51 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(__p.__r_.__value_.__r.__words[1]) = 257;
              v78[0].__r_.__value_.__r.__words[0] = llvm::IRBuilderBase::CreateAdd(v64, v50, v51, (const llvm::Twine *)&v68);
            }
          }
          if (!v78[0].__r_.__value_.__r.__words[2] && v73[0]) {
            v78[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v73[0];
          }
          if (!v78[0].__r_.__value_.__l.__size_ && *((void *)&v72 + 1)) {
            v78[0].__r_.__value_.__l.__size_ = *((void *)&v72 + 1);
          }
          if (SHIBYTE(v74[1]) < 0) {
            operator delete(v73[1]);
          }
        }
        else
        {
          memset(v78, 0, 24);
          if (SHIBYTE(v78[1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v78[1].__r_.__value_.__l.__data_);
          }
          memset(&v78[1], 0, 37);
        }
        goto LABEL_109;
      }
      if (v18 - 78 < 0xFFFFFFFE || v16 == 0) {
        break;
      }
LABEL_60:
      int v24 = *(_DWORD *)(v16 + 20);
      if ((v24 & 0x40000000) != 0)
      {
        size_t v38 = *(uint64_t **)(v16 - 8);
        goto LABEL_63;
      }
LABEL_61:
      size_t v38 = (uint64_t *)(v16 - 32 * (v24 & 0x7FFFFFF));
LABEL_63:
      uint64_t v16 = *v38;
      if (RTZModeFromImageBlockUser) {
        goto LABEL_17;
      }
    }
    if (v18 == 5 && v16 != 0)
    {
      if ((*(_WORD *)(v16 + 18) & 0xFFFE) != 0x30) {
        goto LABEL_109;
      }
      int v24 = *(_DWORD *)(v16 + 20);
      goto LABEL_61;
    }
    if (v18 == 62 && v16)
    {
      if (**(void **)(*(void *)v16 + 16) != *((void *)a2 + 23)) {
        goto LABEL_109;
      }
      if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFF) != 2) {
        goto LABEL_109;
      }
      uint64_t v39 = *(void *)(v16 - 32);
      if (*(unsigned char *)(v39 + 16) != 16) {
        goto LABEL_109;
      }
      long long v40 = (void *)(v39 + 24);
      if (*(_DWORD *)(v39 + 32) >= 0x41u) {
        long long v40 = (void *)*v40;
      }
      uint64_t v16 = *(void *)(v16 - 64);
      __int16 v14 = v62 + *(_WORD *)v40;
      char v15 = 1;
      continue;
    }
    break;
  }
  if (v18 == 90 && v16)
  {
    int v22 = *(_DWORD *)(v16 + 20);
    if ((v22 & 0x40000000) != 0) {
      uint64_t v23 = *(void *)(v16 - 8);
    }
    else {
      uint64_t v23 = v16 - 32 * (v22 & 0x7FFFFFF);
    }
    if (**(void **)v23 != *((void *)a2 + 38)) {
      goto LABEL_109;
    }
    uint64_t v25 = *(void *)(v23 + 64);
    if (*(unsigned char *)(v25 + 16) != 16) {
      goto LABEL_109;
    }
    uint64_t v26 = (void *)(v25 + 24);
    if (*(_DWORD *)(v25 + 32) >= 0x41u) {
      uint64_t v26 = (void *)*v26;
    }
    int v27 = *(llvm::Value **)(v23 + 32);
    long long v28 = (void *)*v26;
    if ((unint64_t)(*v26 - 1) < 2)
    {
      int v30 = &v79 + (void)v28;
      int v31 = *(v30 - 1);
      if (!v31) {
        int v31 = v27;
      }
      *(v30 - 1) = v31;
      if (!v78[0].__r_.__value_.__r.__words[2])
      {
        uint64_t v32 = v79;
        if (v79)
        {
          uint64_t v33 = v80;
          if (v80)
          {
            uint64_t v34 = (llvm::Value *)llvm::UndefValue::get();
            LOWORD(v74[0]) = 257;
            BOOL v35 = (llvm::Value *)llvm::ConstantInt::get();
            Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v64, v34, v32, v35, (const llvm::Twine *)&v72);
            LOWORD(__p.__r_.__value_.__r.__words[1]) = 257;
            uint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
            v78[0].__r_.__value_.__r.__words[2] = llvm::IRBuilderBase::CreateInsertElement(v64, InsertElement, v33, v37, (const llvm::Twine *)&v68);
          }
        }
      }
    }
    else if (v28 == (void *)3)
    {
      if (!v78[0].__r_.__value_.__l.__size_) {
        v78[0].__r_.__value_.__l.__size_ = (std::string::size_type)v27;
      }
    }
    else if (!v28 && !v78[0].__r_.__value_.__r.__words[0])
    {
      int v29 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v74[0]) = 257;
      v78[0].__r_.__value_.__r.__words[0] = llvm::IRBuilderBase::CreateAdd(v64, v27, v29, (const llvm::Twine *)&v72);
    }
    goto LABEL_60;
  }
  if (v18 <= 0x14)
  {
    if (v16)
    {
      if (*(void *)v16 == *((void *)a2 + 38))
      {
        Aggregateuint64_t Element = (llvm::Constant *)llvm::Constant::getAggregateElement((llvm::Constant *)v16);
        if (AggregateElement)
        {
          if (llvm::Constant::isZeroValue(AggregateElement))
          {
            if (!v78[0].__r_.__value_.__r.__words[0]) {
              v78[0].__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
            }
            uint64_t v58 = v79;
            if (!v79)
            {
              uint64_t v58 = (llvm::Value *)llvm::Constant::getAggregateElement((llvm::Constant *)v16);
              uint64_t v79 = v58;
            }
            int v59 = v80;
            if (!v80)
            {
              int v59 = (llvm::Value *)llvm::Constant::getAggregateElement((llvm::Constant *)v16);
              uint64_t v80 = v59;
              uint64_t v58 = v79;
            }
            if (!v78[0].__r_.__value_.__r.__words[2] && v58 && v59)
            {
              uint64_t v60 = (llvm::Value *)llvm::UndefValue::get();
              LOWORD(v74[0]) = 257;
              uint64_t v61 = (llvm::Value *)AGCLLVMBuilder::CreateInsertElement(a2, v60, v58, 0, (const llvm::Twine *)&v72);
              LOWORD(__p.__r_.__value_.__r.__words[1]) = 257;
              v78[0].__r_.__value_.__r.__words[2] = AGCLLVMBuilder::CreateInsertElement(a2, v61, v59, 1u, (const llvm::Twine *)&v68);
            }
            if (!v78[0].__r_.__value_.__l.__size_) {
              v78[0].__r_.__value_.__l.__size_ = llvm::Constant::getAggregateElement((llvm::Constant *)v16);
            }
          }
        }
      }
    }
  }
LABEL_109:
  long long v65 = v75;
  uint64_t v66 = v76;
  if (v76) {
    llvm::MetadataTracking::track();
  }
  int v67 = v77;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v65, (uint64_t)v64);
  if (v66) {
    llvm::MetadataTracking::untrack();
  }
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v72, (llvm::Value *)a3);
  *(void *)&long long v72 = &unk_1F25C4588;
  v74[0] = v63;
  *(void *)&long long v68 = 0;
  char v52 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*((void *)a2 + 102), *((_DWORD *)a2 + 208), (uint64_t)v73[1], &v68);
  uint64_t v53 = v68;
  if ((v52 & 1) == 0)
  {
    uint64_t v53 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>((uint64_t)v63, (uint64_t)&v72, v68);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v53 + 8), (void *)&v72 + 1);
    *(void *)(v53 + 32) = v74[0];
    *(_OWORD *)(v53 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0u;
    *(_OWORD *)(v53 + 56) = 0u;
    *(_OWORD *)(v53 + 72) = 0u;
    *(_OWORD *)(v53 + 85) = 0u;
  }
  if (v73[1] != (void *)-8192 && v73[1] != (void *)-4096 && v73[1]) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)((char *)&v72 + 8));
  }
  *(std::string *)(v53 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v78[0];
  std::string::operator=((std::string *)(v53 + 64), &v78[1]);
  std::string::size_type v55 = v78[1].__r_.__value_.__r.__words[2];
  std::string::pointer data = v78[2].__r_.__value_.__l.__data_;
  *(void *)(v53 + 88) = v78[2].__r_.__value_.__l.__data_;
  uint64_t v56 = *(std::string::size_type *)((char *)v78[2].__r_.__value_.__r.__words + 5);
  *(void *)(v53 + 93) = *(std::string::size_type *)((char *)v78[2].__r_.__value_.__r.__words + 5);
  *(std::string *)this = v78[0];
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)&v78[1].__r_.__value_.__l.__data_;
  memset(&v78[1], 0, sizeof(std::string));
  *(void *)((char *)this + 53) = v56;
  *((void *)this + 5) = v55;
  *((void *)this + 6) = data;
  if (v76)
  {
    llvm::MetadataTracking::untrack();
    if (SHIBYTE(v78[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78[1].__r_.__value_.__l.__data_);
    }
  }
}

uint64_t *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::image_block_function_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EA611EEllvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = qword_1EA611EE0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x1CB79F270](a2 + 49, 8);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 48;
  if (a2) {
    memcpy((void *)(v8 + 48), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *(void *)uint64_t v9 = a2;
  *(void *)(v9 + 8) = 0x300000006;
  *(_DWORD *)(v9 + 16) = 2;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = -1;
  *uint64_t i = v9;
  ++dword_1EA611EDC;
  for (uint64_t i = (uint64_t *)(AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::image_block_function_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::image_block_function_map));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 49));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t AGCLLVMAirImageBlockGen3::replaceBulkMemWrites(AGCLLVMAirImageBlockGen3 *this)
{
  uint64_t v1 = *((void *)this + 42);
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v19 = v1 + 24;
  if (v2 != v1 + 24)
  {
    uint64_t v3 = (AGCLLVMAirImageBlockGen3 *)((char *)this + 8);
    do
    {
      if (v2) {
        uint64_t v4 = v2 - 56;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v20 = *(void *)(v2 + 8);
      int v5 = *(_DWORD *)(v4 + 36);
      if ((v5 - 194) <= 5 && ((1 << (v5 + 62)) & 0x29) != 0)
      {
        if (*(_WORD *)(v4 + 18)) {
          llvm::Function::BuildLazyArguments((llvm::Function *)v4);
        }
        uint64_t v7 = *(void **)(v4 + 88);
        unsigned int v8 = *(_DWORD *)(*v7 + 8);
        if ((v8 & 0xFE) == 0x12) {
          unsigned int v8 = *(_DWORD *)(**(void **)(*v7 + 16) + 8);
        }
        uint64_t v9 = v7[5];
        if (*(unsigned char *)(v9 + 8) != 15) {
          uint64_t v9 = 0;
        }
        if (v9)
        {
          unsigned int v10 = *(_DWORD *)(v9 + 8);
          if ((v10 & 0xFE) == 0x12) {
            unsigned int v10 = *(_DWORD *)(**(void **)(v9 + 16) + 8);
          }
          unsigned int v11 = v10 >> 8;
        }
        else
        {
          unsigned int v11 = 0;
        }
        unsigned int v12 = v8 >> 8;
        if (v9) {
          BOOL v13 = v11 == 4;
        }
        else {
          BOOL v13 = 0;
        }
        int v14 = v13;
        if (v12 == 4 || v14 != 0)
        {
          uint64_t v16 = *(void *)(v4 + 8);
          if (v16)
          {
            uint64_t v17 = *(llvm::Instruction **)(v16 + 24);
            llvm::ConstantInt::get();
            llvm::IRBuilderBase::SetInsertPoint(v3, v17);
            llvm::BasicBlock::splitBasicBlock();
            operator new();
          }
        }
      }
      uint64_t v2 = v20;
    }
    while (v20 != v19);
  }
  return 1;
}

void AGCLLVMAirImageBlockGen3::AGCLLVMAirImageBlockGen3(AGCLLVMAirImageBlockGen3 *this, AGCLLVMUserObject *a2, llvm::LLVMContext **a3, AGCLLVMTargetLowerer *a4, const llvm::DataLayout *a5)
{
  uint64_t v9 = (void *)((char *)this + 396);
  AGCLLVMBuilder::AGCLLVMBuilder(this, *a3);
  int v29 = a4;
  *(void *)(v10 + 368) = a4;
  *(void *)(v10 + 376) = a2;
  *(void *)uint64_t v10 = &unk_1F25C45B0;
  unsigned int v11 = (const llvm::DataLayout *)(v10 + 384);
  *(_WORD *)(v10 + 392) = 0;
  *(_WORD *)(v10 + 404) = 0;
  *(void *)(v10 + 416) = v10 + 440;
  *(_OWORD *)((char *)v9 + 28) = xmmword_1CADD6430;
  unsigned int v12 = (void **)(v10 + 448);
  *(void *)(v10 + 448) = v10 + 464;
  *(void *)(v10 + 456) = 0x1000000000;
  BOOL v13 = (std::string *)(v10 + 592);
  *(void *)(v10 + 592) = 0;
  *(void *)(v10 + 608) = 0;
  *(void *)(v10 + 60llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
  *(void *)(v10 + 616) = v10 + 632;
  *(void *)(v10 + 624) = 0x800000000;
  *(void *)(v10 + 76llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
  *(void *)(v10 + 768) = v10 + 784;
  *(void *)(v10 + 776) = 0x800000000;
  llvm::DataLayout::clear((llvm::DataLayout *)(v10 + 384));
  std::string::operator=(v13, (const std::string *)((char *)a5 + 208));
  *((unsigned char *)this + 384) = *(unsigned char *)a5;
  *((_DWORD *)this + 97) = *((_DWORD *)a5 + 1);
  *((_WORD *)this + 196) = *((_WORD *)a5 + 4);
  *((_WORD *)this + 202) = *((_WORD *)a5 + 10);
  *uint64_t v9 = *(void *)((char *)a5 + 12);
  *((void *)this + 51) = *((void *)a5 + 3);
  if (v11 != a5)
  {
    int v14 = (void **)((char *)this + 416);
    char v15 = (const void **)((char *)a5 + 32);
    unint64_t v16 = *((void *)a5 + 5);
    unint64_t v17 = *(void *)((char *)v9 + 28);
    if (v17 >= v16)
    {
      if (v16) {
        memmove(*v14, *v15, *((void *)a5 + 5));
      }
    }
    else
    {
      if (*((void *)this + 54) < v16)
      {
        *(void *)((char *)v9 + 28) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v17) {
        memmove(*v14, *v15, *(void *)((char *)v9 + 28));
      }
      uint64_t v18 = *((void *)a5 + 5);
      if (v17 != v18) {
        memcpy((char *)*v14 + v17, (char *)*v15 + v17, (unsigned char *)*v15 + v18 - ((unsigned char *)*v15 + v17));
      }
    }
    *(void *)((char *)v9 + 28) = v16;
  }
  uint64_t v19 = (void **)((char *)this + 616);
  uint64_t v20 = (const void **)((char *)a5 + 64);
  if (v12 != (void **)((char *)a5 + 64))
  {
    uint64_t v21 = *((unsigned int *)a5 + 18);
    uint64_t v22 = *((unsigned int *)this + 114);
    if (v22 >= v21)
    {
      if (v21) {
        memmove(*v12, *v20, 8 * v21 - 2);
      }
    }
    else
    {
      if (*((_DWORD *)this + 115) < v21)
      {
        *((_DWORD *)this + 114) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v22) {
        memmove(*v12, *v20, 8 * v22 - 2);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = *((unsigned int *)a5 + 18);
      if (v22 != v23) {
        memcpy((char *)*v12 + 8 * v22, (char *)*v20 + 8 * v22, (unsigned char *)*v20 + 8 * v23 - ((unsigned char *)*v20 + 8 * v22));
      }
    }
    *((_DWORD *)this + 114) = v21;
  }
  int v24 = (const void **)((char *)a5 + 232);
  if (v19 != (void **)((char *)a5 + 232))
  {
    uint64_t v25 = *((unsigned int *)a5 + 60);
    uint64_t v26 = *((unsigned int *)this + 156);
    if (v26 >= v25)
    {
      if (v25) {
        memmove(*v19, *v24, 16 * v25);
      }
    }
    else
    {
      if (*((_DWORD *)this + 157) < v25)
      {
        *((_DWORD *)this + 156) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v26) {
        memmove(*v19, *v24, 16 * v26);
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v27 = *((unsigned int *)a5 + 60);
      if (v26 != v27) {
        memcpy((char *)*v19 + 16 * v26, (char *)*v24 + 16 * v26, (unsigned char *)*v24 + 16 * v27 - ((unsigned char *)*v24 + 16 * v26));
      }
    }
    *((_DWORD *)this + 156) = v25;
  }
  llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)this + 768, (uint64_t)a5 + 384);
  *((void *)this + 42) = a3;
  *((_DWORD *)this + 26) = *((_DWORD *)v29 + 26);
  *(void *)this = &unk_1F25C4550;
  *((_DWORD *)this + 208) = 128;
  *((void *)this + 102) = MEMORY[0x1CB79F270](13312, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::initEmpty((uint64_t)this + 816);
  *((unsigned char *)this + 84llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
  *((unsigned char *)this + 864) = 0;
  *((void *)this + 11llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = (char *)this + 912;
  *((void *)this + 111) = (char *)this + 912;
  *((void *)this + 112) = 4;
  *((_DWORD *)this + 226) = 0;
  *((unsigned char *)this + 944) = 0;
}

BOOL virtual thunk to'AGCLLVMDriverIntersectionShader::constructReply(AGCLLVMDriverIntersectionShader *this)
{
  return AGCLLVMDriverIntersectionShader::constructReply((AGCLLVMDriverIntersectionShader *)((char *)this
                                                                                           + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMDriverIntersectionShader::constructReply(AGCLLVMDriverIntersectionShader *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMDriverIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMDriverIntersectionShader *)((char *)this
                                                                          + *(void *)(*(void *)this - 24)));
    uint64_t v3 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v4 = (flatbuffers::FlatBufferBuilder *)(v3 + 2472);
    v3[2542] = 1;
    int v5 = *((_DWORD *)v3 + 626) - *((_DWORD *)v3 + 630) + *((_DWORD *)v3 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)v3 + 309, 4, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v4, 6, 0, 0);
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>((uint64_t)v4, 1);
    flatbuffers::FlatBufferBuilder::TrackField(v4, 8, v6);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v4, 10, ((unint64_t)**((unsigned int **)this + 10) >> 9) & 7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v4, 12, ((unint64_t)**((unsigned int **)this + 10) >> 12) & 7, 0);
    LODWORD(v4) = flatbuffers::FlatBufferBuilder::EndTable(v4, v5);
    uint64_t v7 = AGCLLVMObject::constructFlatReply((AGCLLVMDriverIntersectionShader *)((char *)this
                                                                             + *(void *)(*(void *)this - 24)));
    int v9 = flatbuffers::FlatBufferBuilder::EndTable(v7, v8);
    uint64_t v10 = (char *)this + *(void *)(*(void *)this - 24);
    unsigned int v11 = (flatbuffers::FlatBufferBuilder *)(v10 + 2472);
    v10[2542] = 1;
    int v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::IntersectionFunctionInfo>((flatbuffers::FlatBufferBuilder *)(v10 + 2472), (int)v4);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v11, v9);
    BOOL v13 = (AGCLLVMDriverIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v14 = flatbuffers::FlatBufferBuilder::EndTable(v11, v12);
    flatbuffers::FlatBufferBuilder::Finish(v13, v14, v15);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMDriverIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  }
  return v2;
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::IntersectionFunctionInfo>(flatbuffers::FlatBufferBuilder *result, int a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 18, v4);
  }
  return result;
}

void virtual thunk to'AGCLLVMDriverIntersectionShader::getCompilationKeyDescription(AGCLLVMDriverIntersectionShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMDriverIntersectionShader::getCompilationKeyDescription(AGCLLVMDriverIntersectionShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (_DWORD *)*((void *)this + 10);
  std::string::basic_string[abi:nn180100]<0>(v21, "AGCDriverIntersectionState");
  std::string::basic_string[abi:nn180100]<0>(v19, "primitiveType");
  _agcFieldString<unsigned int>(&v23, (const void **)v19, *v3 & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v17, "leafVariant");
  _agcFieldString<unsigned int>(&v24, (const void **)v17, (*v3 >> 4) & 3);
  std::string::basic_string[abi:nn180100]<0>(v15, "payloadVariant");
  _agcFieldString<unsigned int>(&v25, (const void **)v15, (*v3 >> 6) & 7);
  std::string::basic_string[abi:nn180100]<0>(v13, "threadsPerLeafPOT");
  _agcFieldString<unsigned int>(&v26, (const void **)v13, (*v3 >> 9) & 7);
  std::string::basic_string[abi:nn180100]<0>(v11, "maxParallelLeavesPOT");
  _agcFieldString<unsigned int>(&v27, (const void **)v11, (*v3 >> 12) & 7);
  std::string::basic_string[abi:nn180100]<0>(v9, "disableTemporalSplits");
  _agcFieldString<unsigned int>(&v28, (const void **)v9, (*v3 >> 15) & 1);
  std::string::basic_string[abi:nn180100]<0>(v7, "doraEnabled");
  _agcFieldString<unsigned int>(&v29, (const void **)v7, HIWORD(*v3) & 1);
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v30, (const void **)__p, *v3 >> 17);
  _agcGroupWithHeader(a2, (uint64_t)v21, (uint64_t)&v23, 8);
  for (uint64_t i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v30.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
}

uint64_t virtual thunk to'AGCLLVMDriverIntersectionShader::getShaderType(AGCLLVMDriverIntersectionShader *this)
{
  return 30;
}

const char *virtual thunk to'AGCLLVMDriverIntersectionShader::dumpType(AGCLLVMDriverIntersectionShader *this)
{
  return AGCLLVMDriverIntersectionShader::dumpType((AGCLLVMDriverIntersectionShader *)((char *)this
                                                                                     + *(void *)(*(void *)this - 72)));
}

const char *AGCLLVMDriverIntersectionShader::dumpType(AGCLLVMDriverIntersectionShader *this)
{
  uint64_t v2 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  (*(void (**)(uint64_t, void, void))(*(void *)v2 + 1352))(v2, **((_DWORD **)this + 10) & 0xF, (**((_DWORD **)this + 10) >> 4) & 3);
  double result = "cliqueS-push-intersection-(driver)";
  switch("cliqueS-push-intersection-(driver)")
  {
    case 0u:
      return result;
    case 1u:
      double result = "cliqueS-pop-intersection-(driver)";
      break;
    case 2u:
      uint64_t v4 = *((void *)this + 10);
      double result = "cliqueS-timesplit-intersection-(driver)";
      if (v4)
      {
        if ((*(unsigned char *)(v4 + 1) & 0x80) == 0) {
          double result = "cliqueS-temporal-split-intersection-(driver)";
        }
      }
      break;
    case 3u:
      double result = "cliqueS-general-(driver)";
      break;
    default:
      double result = "intersection-(driver)";
      break;
  }
  return result;
}

void virtual thunk to'AGCLLVMDriverIntersectionShader::wrapperName(AGCLLVMDriverIntersectionShader *this@<X0>, void *a2@<X8>)
{
}

void AGCLLVMDriverIntersectionShader::wrapperName(AGCLLVMDriverIntersectionShader *this@<X0>, void *a2@<X8>)
{
  (*(void (**)(void **__return_ptr, void, void, void, void))(**(void **)((char *)this
                                                                                            + *(void *)(*(void *)this - 24)
                                                                                            + 400)
                                                                              + 1280))(__p, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400), **((_DWORD **)this + 10) & 0xF, (**((_DWORD **)this + 10) >> 6) & 7, (**((_DWORD **)this + 10) >> 4) & 3);
  if (v5 >= 0) {
    uint64_t v3 = (char *)__p;
  }
  else {
    uint64_t v3 = (char *)__p[0];
  }
  std::string::basic_string[abi:nn180100]<0>(a2, v3);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void virtual thunk to'AGCLLVMDriverIntersectionShader::~AGCLLVMDriverIntersectionShader(AGCLLVMDriverIntersectionShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverIntersectionShader *)((char *)this
                                                                  + *(void *)(*(void *)this - 48)
                                                                  + 88));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverIntersectionShader *)((char *)this
                                                                  + *(void *)(*(void *)this - 48)
                                                                  + 88));
}

void non-virtual thunk to'AGCLLVMDriverIntersectionShader::~AGCLLVMDriverIntersectionShader(AGCLLVMDriverIntersectionShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverIntersectionShader *)((char *)this + 16));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverIntersectionShader *)((char *)this + 16));
}

uint64_t AGCLLVMDriverIntersectionShader::getShaderType(AGCLLVMDriverIntersectionShader *this)
{
  return 30;
}

void AGCLLVMDriverIntersectionShader::~AGCLLVMDriverIntersectionShader(AGCLLVMDriverIntersectionShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverIntersectionShader *)((char *)this + 88));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverIntersectionShader *)((char *)this + 88));
}

BOOL virtual thunk to'AGCLLVMUserIntersectionShader::constructReply(AGCLLVMUserIntersectionShader *this)
{
  return AGCLLVMUserIntersectionShader::constructReply((AGCLLVMUserIntersectionShader *)((char *)this
                                                                                       + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMUserIntersectionShader::constructReply(AGCLLVMUserIntersectionShader *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUserIntersectionShader *)((char *)this
                                                                        + *(void *)(*(void *)this - 24)));
    int v3 = AGCLLVMUserObject::constructFlatReply(this);
    uint64_t v4 = *(void *)this;
    char v5 = (char *)this + *(void *)(*(void *)this - 24);
    char v6 = (flatbuffers::FlatBufferBuilder *)(v5 + 2472);
    v5[2542] = 1;
    int v7 = *((_DWORD *)v5 + 626) - *((_DWORD *)v5 + 630) + *((_DWORD *)v5 + 628);
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(v4 - 24) + 400) + 1272))();
    uint64_t v10 = v9;
    if (*((_DWORD *)this + 1083) >= 4u) {
      char v11 = 0;
    }
    else {
      char v11 = *((_DWORD *)this + 1083);
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v6, 4, v8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v6, 6, v10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v6, 8, *((void *)this + 549), 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v6, 18, *((_DWORD *)this + 1094));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v6, 10, ((unint64_t)*((unsigned int *)this + 1082) >> 9) & 7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v6, 12, ((unint64_t)*((unsigned int *)this + 1082) >> 12) & 7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v6, 14, *((unsigned __int8 *)this + 12), 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v6, 20, *((unsigned char *)this + 4401) & 1, 0);
    flatbuffers::FlatBufferBuilder::AddElement<signed char>(v6, 22, v11);
    int v12 = flatbuffers::FlatBufferBuilder::EndTable(v6, v7);
    BOOL v13 = (char *)this + *(void *)(*(void *)this - 24);
    char v14 = (flatbuffers::FlatBufferBuilder *)(v13 + 2472);
    v13[2542] = 1;
    int v15 = *((_DWORD *)v13 + 626) - *((_DWORD *)v13 + 630) + *((_DWORD *)v13 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v13 + 2472), v3);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::IntersectionFunctionInfo>(v14, v12);
    char v16 = (AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v17 = flatbuffers::FlatBufferBuilder::EndTable(v14, v15);
    flatbuffers::FlatBufferBuilder::Finish(v16, v17, v18);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  }
  return v2;
}

void virtual thunk to'AGCLLVMUserIntersectionShader::getCompilationKeyDescription(AGCLLVMUserIntersectionShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMUserIntersectionShader::getCompilationKeyDescription(AGCLLVMUserIntersectionShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v21, "AGCUserIntersectionState");
  std::string::basic_string[abi:nn180100]<0>(v19, "leafVariant");
  _agcFieldString<unsigned int>(&v23, (const void **)v19, *((_DWORD *)this + 1082) & 3);
  std::string::basic_string[abi:nn180100]<0>(v17, "threadsPerLeafPOT");
  _agcFieldString<unsigned int>(&v24, (const void **)v17, (*((_DWORD *)this + 1082) >> 9) & 7);
  std::string::basic_string[abi:nn180100]<0>(v15, "maxParallelLeavesPOT");
  _agcFieldString<unsigned int>(&v25, (const void **)v15, (*((_DWORD *)this + 1082) >> 12) & 7);
  std::string::basic_string[abi:nn180100]<0>(v13, "disableParallelLeafLoop");
  _agcFieldString<unsigned int>(&v26, (const void **)v13, HIWORD(*((_DWORD *)this + 1082)) & 1);
  std::string::basic_string[abi:nn180100]<0>(v11, "disableTemporalSplits");
  _agcFieldString<unsigned int>(&v27, (const void **)v11, (*((_DWORD *)this + 1082) >> 17) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "compileAsPic");
  _agcFieldString<unsigned int>(&v28, (const void **)v9, (*((_DWORD *)this + 1082) >> 18) & 1);
  std::string::basic_string[abi:nn180100]<0>(v7, "doraEnabled");
  _agcFieldString<unsigned int>(&v29, (const void **)v7, (*((_DWORD *)this + 1082) >> 19) & 1);
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v30, (const void **)__p, *((_DWORD *)this + 1082) >> 20);
  _agcGroupWithHeader(a2, (uint64_t)v21, (uint64_t)&v23, 8);
  for (uint64_t i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v30.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
}

uint64_t virtual thunk to'AGCLLVMUserIntersectionShader::getSupportExternalVisibleFunctions(AGCLLVMUserIntersectionShader *this)
{
  return *((unsigned char *)this + *(void *)(*(void *)this - 120) + 4329) & 1;
}

uint64_t virtual thunk to'AGCLLVMUserIntersectionShader::getRelocModel(AGCLLVMUserIntersectionShader *this)
{
  return (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 88) + 4328) >> 18) & 1;
}

uint64_t virtual thunk to'AGCLLVMUserIntersectionShader::getShaderType(AGCLLVMUserIntersectionShader *this)
{
  return 29;
}

const char *virtual thunk to'AGCLLVMUserIntersectionShader::dumpType(AGCLLVMUserIntersectionShader *this)
{
  return "intersection-(user)";
}

void virtual thunk to'AGCLLVMUserIntersectionShader::~AGCLLVMUserIntersectionShader(AGCLLVMUserIntersectionShader *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1F25C29A0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4408));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 48)), (uint64_t *)off_1F25C29A0);
  BOOL v2 = (AGCLLVMObject *)(v1 + 4408);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

void non-virtual thunk to'AGCLLVMUserIntersectionShader::~AGCLLVMUserIntersectionShader(AGCLLVMUserIntersectionShader *this)
{
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserIntersectionShader *)((char *)this - 4320), (uint64_t *)off_1F25C29A0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUserIntersectionShader *)((char *)this + 88));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t vars8;

  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserIntersectionShader *)((char *)this - 4320), (uint64_t *)off_1F25C29A0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUserIntersectionShader *)((char *)this + 88));
}

uint64_t AGCLLVMUserIntersectionShader::getSupportExternalVisibleFunctions(AGCLLVMUserIntersectionShader *this)
{
  return *((unsigned char *)this + 4329) & 1;
}

uint64_t AGCLLVMUserIntersectionShader::getRelocModel(AGCLLVMUserIntersectionShader *this)
{
  return (*((_DWORD *)this + 1082) >> 18) & 1;
}

uint64_t AGCLLVMUserIntersectionShader::getShaderType(AGCLLVMUserIntersectionShader *this)
{
  return 29;
}

const char *AGCLLVMUserIntersectionShader::dumpType(AGCLLVMUserIntersectionShader *this)
{
  return "intersection-(user)";
}

uint64_t AGCLLVMUserIntersectionShader::needsPCFClamp(AGCLLVMUserIntersectionShader *this)
{
  return 0;
}

uint64_t AGCLLVMUserIntersectionShader::getPCFStateForUnit(AGCLLVMUserIntersectionShader *this)
{
  return 0;
}

uint64_t AGCLLVMUserIntersectionShader::supportsConstantSamplers(AGCLLVMUserIntersectionShader *this)
{
  return 1;
}

uint64_t AGCLLVMUserIntersectionShader::getMaxSharedRegisters(AGCLLVMUserIntersectionShader *this)
{
  return *(unsigned int *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 852);
}

uint64_t AGCLLVMUserIntersectionShader::replaceBuiltins(AGCLLVMUserIntersectionShader *this)
{
  uint64_t v2 = AGCLLVMUserObject::replaceBuiltins(this);
  if (v2)
  {
    uint64_t v3 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 1384))(v3, *((unsigned __int16 *)this + 2200));
    (*(void (**)(uint64_t, char *, void, uint64_t))(*(void *)v3 + 1376))(v3, (char *)this + 3784, 0, v4);
  }
  return v2;
}

uint64_t AGCLLVMUserIntersectionShader::setupShaderOutputs(AGCLLVMUserIntersectionShader *this)
{
  uint64_t Function = (llvm::Function *)llvm::Module::getFunction();
  llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(*((void *)Function + 1) + 24));
  llvm::Function::eraseFromParent(Function);
  return 1;
}

uint64_t AGCLLVMUserIntersectionShader::setupShaderInputs(AGCLLVMUserIntersectionShader *this)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
  (*(void (**)(uint64_t))(*(void *)v2 + 760))(v2);
  AGCLLVMUserObject::createGlobalRayStridesGlobal(this);
  (*(void (**)(long long *__return_ptr))(**(void **)((char *)this + *(void *)(*(void *)this - 24)
                                                                              + 400)
                                                 + 1288))(&v149);
  long long v3 = v150;
  *(_OWORD *)((char *)this + 3784) = v149;
  *(_OWORD *)((char *)this + 380llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v3;
  *(_OWORD *)((char *)this + 3816) = v151;
  uint64_t v4 = *(void *)(*((void *)this + 22) + 80);
  uint64_t v5 = v4 - 24;
  if (!v4) {
    uint64_t v5 = 0;
  }
  uint64_t v104 = v5;
  uint64_t v6 = *(void *)(v5 + 40);
  if (v6) {
    int v7 = (llvm::Instruction *)(v6 - 24);
  }
  else {
    int v7 = 0;
  }
  AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v7, *((void *)this + 6));
  char v8 = *(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368);
  *(void *)&long long v149 = "air.intersection";
  LOWORD(v151) = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v8, (const llvm::Twine *)&v149);
  if (NamedMetadata)
  {
    uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    uint64_t v11 = Operand - 8 * *(unsigned int *)(Operand + 8) + 32;
    if (v11 != Operand)
    {
      uint64_t v12 = Operand;
      do
      {
        if (isStringMDNode(*(llvm::MDString **)v11, "air.triangle_data"))
        {
          __int16 v13 = 8;
        }
        else if (isStringMDNode(*(llvm::MDString **)v11, "air.curve_data"))
        {
          __int16 v13 = 128;
        }
        else
        {
          if (isStringMDNode(*(llvm::MDString **)v11, "air.instancing"))
          {
            int v14 = 1;
            __int16 v13 = 1;
LABEL_15:
            *((_DWORD *)this + 1094) = v14;
            goto LABEL_24;
          }
          if (isStringMDNode(*(llvm::MDString **)v11, "air.world_space_data"))
          {
            __int16 v13 = 16;
            goto LABEL_24;
          }
          if (isStringMDNode(*(llvm::MDString **)v11, "air.primitive_motion"))
          {
            __int16 v13 = 2;
            goto LABEL_24;
          }
          if (isStringMDNode(*(llvm::MDString **)v11, "air.instance_motion"))
          {
            __int16 v13 = 4;
            goto LABEL_24;
          }
          if (isStringMDNode(*(llvm::MDString **)v11, "air.extended_limits"))
          {
            __int16 v13 = 32;
            goto LABEL_24;
          }
          if (isStringMDNode(*(llvm::MDString **)v11, "air.multi_level_instancing"))
          {
            char v16 = *(unsigned __int8 **)(v11 + 8);
            v11 += 8;
            int v15 = v16;
            if (*v16 - 3 >= 0xFFFFFFFE && (uint64_t v17 = *((void *)v15 + 16), *(unsigned char *)(v17 + 16) == 16))
            {
              char v18 = (void *)(v17 + 24);
              if (*(_DWORD *)(v17 + 32) >= 0x41u) {
                char v18 = (void *)*v18;
              }
              int v14 = *(_DWORD *)v18 - 1;
              __int16 v13 = 64;
            }
            else
            {
              __int16 v13 = 64;
              int v14 = 31;
            }
            goto LABEL_15;
          }
          if (!isStringMDNode(*(llvm::MDString **)v11, "air.intersection_function_buffer")) {
            goto LABEL_25;
          }
          __int16 v13 = 256;
        }
LABEL_24:
        *((_WORD *)this + 2200) |= v13;
LABEL_25:
        v11 += 8;
      }
      while (v11 != v12);
    }
  }
  int v19 = *((_DWORD *)this + 1083);
  switch(v19)
  {
    case 3:
      std::string v24 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v25 = *((void *)v24 + 50);
      long long v140 = *(_OWORD *)(v24 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v141, (llvm::IRBuilderBase *)(v24 + 40));
      int v142 = *((_DWORD *)v24 + 34);
      LODWORD(v24) = *((_DWORD *)this + 1082);
      uint64_t v26 = (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1384))();
      (*(void (**)(long long *__return_ptr, uint64_t, long long *, char *, void, uint64_t, void, void))(*(void *)v25 + 1144))(&v149, v25, &v140, (char *)this + 3784, v24 & 3, v26, (*((unsigned __int16 *)this + 2200) >> 5) & 1, (*((_DWORD *)this + 1082) >> 9) & 7);
      long long v27 = v150;
      *((_OWORD *)this + 271) = v149;
      *((_OWORD *)this + 272) = v27;
      if (!v141) {
        break;
      }
      goto LABEL_42;
    case 2:
      uint64_t v100 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v101 = *((void *)v100 + 50);
      long long v143 = *(_OWORD *)(v100 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v144, (llvm::IRBuilderBase *)(v100 + 40));
      int v145 = *((_DWORD *)v100 + 34);
      LODWORD(v10llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *((_DWORD *)this + 1082);
      uint64_t v102 = (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1384))();
      (*(void (**)(long long *__return_ptr, uint64_t, long long *, char *, void, uint64_t, void, void))(*(void *)v101 + 1136))(&v149, v101, &v143, (char *)this + 3784, v100 & 3, v102, (*((unsigned __int16 *)this + 2200) >> 5) & 1, (*((_DWORD *)this + 1082) >> 9) & 7);
      long long v103 = v150;
      *((_OWORD *)this + 271) = v149;
      *((_OWORD *)this + 272) = v103;
      if (!v144) {
        break;
      }
LABEL_42:
      llvm::MetadataTracking::untrack();
      break;
    case 1:
      char v20 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v21 = *((void *)v20 + 50);
      long long v146 = *(_OWORD *)(v20 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v147, (llvm::IRBuilderBase *)(v20 + 40));
      int v148 = *((_DWORD *)v20 + 34);
      LODWORD(v2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *((_DWORD *)this + 1082);
      uint64_t v22 = (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1384))();
      (*(void (**)(long long *__return_ptr, uint64_t, long long *, char *, void, uint64_t, void, void, void))(*(void *)v21 + 1128))(&v149, v21, &v146, (char *)this + 3784, v20 & 3, v22, (*((unsigned __int16 *)this + 2200) >> 5) & 1, (*((_DWORD *)this + 1082) >> 9) & 7, 0);
      long long v23 = v150;
      *((_OWORD *)this + 271) = v149;
      *((_OWORD *)this + 272) = v23;
      if (v147) {
        goto LABEL_42;
      }
      break;
  }
  uint64_t v28 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v29 = v28 + 24;
  uint64_t v30 = *(void *)(v28 + 32);
  if (v30 != v28 + 24)
  {
    do
    {
      if (v30) {
        uint64_t v31 = (llvm::Value *)(v30 - 56);
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t Name = (void *)llvm::Value::getName(v31);
      if (v33 >= 0xF && *Name == 0x612E74722E786761 && *(void *)((char *)Name + 7) == 0x746E656D75677261)
      {
        BOOL v35 = (char *)this + *(void *)(*(void *)this - 24);
        long long v137 = *(_OWORD *)(v35 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v138, (llvm::IRBuilderBase *)(v35 + 40));
        int v139 = *((_DWORD *)v35 + 34);
        *(void *)&long long v149 = &v150;
        *((void *)&v149 + 1) = 0x800000000;
        uint64_t v36 = *((void *)v31 + 1);
        if (v36)
        {
          do
          {
            uint64_t v37 = *(_DWORD **)(v36 + 24);
            uint64_t v38 = *(void *)&v37[-8 * (v37[5] & 0x7FFFFFF)];
            uint64_t v39 = (unsigned int *)(v38 + 24);
            if (*(_DWORD *)(v38 + 32) >= 0x41u) {
              uint64_t v39 = *(unsigned int **)v39;
            }
            uint64_t v40 = *v39;
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), *(llvm::Instruction **)(v36 + 24));
            uint64_t v41 = (char *)this + *(void *)(*(void *)this - 24);
            uint64_t v42 = *((void *)v41 + 50);
            long long v134 = *(_OWORD *)(v41 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v135, (llvm::IRBuilderBase *)(v41 + 40));
            int v136 = *((_DWORD *)v41 + 34);
            uint64_t v43 = (llvm::Type **)(*(uint64_t (**)(uint64_t, long long *, uint64_t, char *, void, void))(*(void *)v42 + 936))(v42, &v134, v40, (char *)this + 4336, *((unsigned __int16 *)this + 2200), *((unsigned int *)this + 1094));
            if (v135) {
              llvm::MetadataTracking::untrack();
            }
            int v44 = *(llvm::Type **)v37;
            int v45 = *(unsigned __int8 *)(*(void *)v37 + 8);
            if (v45 == 15)
            {
              if (v44 != *v43)
              {
                unint64_t v47 = (AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v133 = 257;
                llvm::IRBuilderBase::CreatePointerCast(v47, v43, v44, (const llvm::Twine *)v132);
              }
            }
            else if (v45 == 13 && v44 != *v43)
            {
              uint64_t v46 = (AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
              __int16 v133 = 257;
              llvm::IRBuilderBase::CreateZExtOrTrunc(v46, v43, v44, (const llvm::Twine *)v132);
            }
            llvm::Value::replaceAllUsesWith();
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v149, (uint64_t)v37);
            uint64_t v36 = *(void *)(v36 + 8);
          }
          while (v36);
          if (DWORD2(v149))
          {
            char v48 = (llvm::Instruction **)v149;
            uint64_t v49 = 8 * DWORD2(v149);
            do
            {
              uint64_t v50 = *v48++;
              llvm::Instruction::eraseFromParent(v50);
              v49 -= 8;
            }
            while (v49);
          }
        }
        uint64_t v51 = *(void *)(*(void *)this - 24);
        long long v129 = v137;
        uint64_t v130 = v138;
        if (v138) {
          llvm::MetadataTracking::track();
        }
        int v131 = v139;
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v129, (uint64_t)this + v51 + 40);
        if (v130) {
          llvm::MetadataTracking::untrack();
        }
        if ((long long *)v149 != &v150) {
          free((void *)v149);
        }
        if (v138) {
          llvm::MetadataTracking::untrack();
        }
      }
      uint64_t v30 = *(void *)(v30 + 8);
    }
    while (v30 != v29);
  }
  uint64_t v52 = *((void *)this + 22);
  if (*(_WORD *)(v52 + 18))
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    uint64_t v55 = *((void *)this + 22);
    uint64_t v53 = *(void *)(v52 + 88);
    uint64_t v54 = v104;
    if (*(_WORD *)(v55 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    }
    uint64_t v52 = v55;
  }
  else
  {
    uint64_t v53 = *(void *)(v52 + 88);
    uint64_t v54 = v104;
  }
  for (uint64_t i = *(void *)(v52 + 88) + 40 * *(void *)(v52 + 96); v53 != i; v53 += 40)
  {
    if (*(void *)(v53 + 8))
    {
      uint64_t v57 = *(void *)(v54 + 40);
      uint64_t v58 = v57 ? (llvm::Instruction *)(v57 - 24) : 0;
      AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v58, *((void *)this + 6));
      uint64_t v59 = *(unsigned int *)(v53 + 32);
      uint64_t v60 = *(void *)(*((void *)this + 11) + 8 * v59);
      if ((AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v53, v59, v60) & 1) == 0
        && isStringMDNode(*(llvm::MDString **)(v60 - 8 * *(unsigned int *)(v60 + 8) + 8), "air.payload"))
      {
        uint64_t v61 = *(llvm::Type **)v53;
        uint64_t v62 = *((void *)this + 544);
        uint64_t v63 = *(void *)(v62 + 32);
        if (v63) {
          BOOL v64 = v63 == *(void *)(v62 + 40) + 40;
        }
        else {
          BOOL v64 = 1;
        }
        if (v64) {
          long long v65 = 0;
        }
        else {
          long long v65 = (llvm::Instruction *)(v63 - 24);
        }
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v65);
        uint64_t v66 = (AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        LOWORD(v151) = 257;
        llvm::IRBuilderBase::CreatePointerCast(v66, (llvm::Type **)v62, v61, (const llvm::Twine *)&v149);
        llvm::Value::replaceAllUsesWith();
        v132[0] = 0;
        LODWORD(v149) = 5;
        parseMDInt(0, v60, (unsigned int *)&v149, v132);
        *((void *)this + 548) = v132[0];
        int v67 = v61;
        uint64_t v54 = v104;
        *((void *)this + 549) = llvm::DataLayout::getABITypeAlignment((AGCLLVMUserIntersectionShader *)((char *)this + 232), v67);
        AGCLLVMUserObject::createSCSUserDataBoundGlobal(this);
      }
    }
  }
  AGCLLVMUserObject::createSCSDriverDataStartGlobal(this);
  long long v68 = *(llvm::Instruction **)(*(void *)(llvm::Module::getFunction() + 8) + 24);
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v68);
  unint64_t v69 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v70 = *((void *)v69 + 50);
  long long v126 = *(_OWORD *)(v69 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v127, (llvm::IRBuilderBase *)(v69 + 40));
  int v128 = *((_DWORD *)v69 + 34);
  (*(void (**)(uint64_t, long long *, char *))(*(void *)v70 + 1232))(v70, &v126, (char *)this + 4336);
  if (v127) {
    llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v68);
  uint64_t Function = llvm::Module::getFunction();
  if (Function)
  {
    long long v72 = *(llvm::Instruction **)(*(void *)(Function + 8) + 24);
    uint64_t v73 = *((void *)v72 - 4 * (*((_DWORD *)v72 + 5) & 0x7FFFFFF));
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v72);
    uint64_t v74 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v75 = *((void *)v74 + 50);
    long long v123 = *(_OWORD *)(v74 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v124, (llvm::IRBuilderBase *)(v74 + 40));
    int v125 = *((_DWORD *)v74 + 34);
    (*(void (**)(uint64_t, long long *, char *, uint64_t))(*(void *)v75 + 1240))(v75, &v123, (char *)this + 4336, v73);
    if (v124) {
      llvm::MetadataTracking::untrack();
    }
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v72);
  }
  uint64_t v76 = llvm::Module::getFunction();
  if (v76)
  {
    int v77 = *(llvm::Instruction **)(*(void *)(v76 + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v77);
    AGCLLVMUserIntersectionShader::unpackUserResult((AGCLLVMUserIntersectionShader *)&v149, this, *((void *)v77 - 4 * (*((_DWORD *)v77 + 5) & 0x7FFFFFF)));
    int v78 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v79 = *((void *)v78 + 50);
    long long v120 = *(_OWORD *)(v78 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v121, (llvm::IRBuilderBase *)(v78 + 40));
    int v122 = *((_DWORD *)v78 + 34);
    (*(void (**)(uint64_t, long long *, char *, void, void, void, void, BOOL))(*(void *)v79 + 1184))(v79, &v120, (char *)this + 4336, v149, *((void *)&v149 + 1), v150, 0, (*((_DWORD *)this + 1082) & 0x7000) == 0);
    if (v121) {
      llvm::MetadataTracking::untrack();
    }
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v77);
    uint64_t v80 = *(llvm::Instruction **)(*(void *)(llvm::Module::getFunction() + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v80);
    uint64_t v81 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v82 = *((void *)v81 + 50);
    long long v117 = *(_OWORD *)(v81 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v118, (llvm::IRBuilderBase *)(v81 + 40));
    int v119 = *((_DWORD *)v81 + 34);
    (*(void (**)(uint64_t, long long *))(*(void *)v82 + 1200))(v82, &v117);
    if (v118) {
      llvm::MetadataTracking::untrack();
    }
    llvm::Instruction::eraseFromParent(v80);
    std::string v83 = *(llvm::Instruction **)(*(void *)(llvm::Module::getFunction() + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v83);
    AGCLLVMUserIntersectionShader::unpackUserResult((AGCLLVMUserIntersectionShader *)&v149, this, *((void *)v83 - 4 * (*((_DWORD *)v83 + 5) & 0x7FFFFFF)));
    llvm::Value::replaceAllUsesWith();
    unint64_t v84 = v83;
  }
  else
  {
    uint64_t v85 = *(llvm::Instruction **)(*(void *)(llvm::Module::getFunction() + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v85);
    unint64_t v86 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v87 = *((void *)v86 + 50);
    long long v114 = *(_OWORD *)(v86 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v115, (llvm::IRBuilderBase *)(v86 + 40));
    int v116 = *((_DWORD *)v86 + 34);
    (*(void (**)(uint64_t, long long *, char *))(*(void *)v87 + 1224))(v87, &v114, (char *)this + 4336);
    if (v115) {
      llvm::MetadataTracking::untrack();
    }
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v85);
    uint64_t v88 = *(llvm::Instruction **)(*(void *)(llvm::Module::getFunction() + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v88);
    AGCLLVMUserIntersectionShader::unpackUserResult((AGCLLVMUserIntersectionShader *)&v149, this, *((void *)v88 - 4 * (*((_DWORD *)v88 + 5) & 0x7FFFFFF)));
    std::string v89 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v90 = *((void *)v89 + 50);
    long long v111 = *(_OWORD *)(v89 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v112, (llvm::IRBuilderBase *)(v89 + 40));
    int v113 = *((_DWORD *)v89 + 34);
    (*(void (**)(uint64_t, long long *, char *, void, void, void))(*(void *)v90 + 1192))(v90, &v111, (char *)this + 4336, v149, *((void *)&v149 + 1), v150);
    if (v112) {
      llvm::MetadataTracking::untrack();
    }
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v88);
    int v91 = *(llvm::Instruction **)(*(void *)(llvm::Module::getFunction() + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v91);
    uint64_t v92 = *((void *)v91 - 4 * (*((_DWORD *)v91 + 5) & 0x7FFFFFF));
    int v93 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v94 = *((void *)v93 + 50);
    long long v108 = *(_OWORD *)(v93 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v109, (llvm::IRBuilderBase *)(v93 + 40));
    int v110 = *((_DWORD *)v93 + 34);
    (*(void (**)(uint64_t, long long *, char *, uint64_t))(*(void *)v94 + 1208))(v94, &v108, (char *)this + 4336, v92);
    if (v109) {
      llvm::MetadataTracking::untrack();
    }
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v91);
    std::string v95 = *(llvm::Instruction **)(*(void *)(llvm::Module::getFunction() + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v95);
    uint64_t v96 = *((void *)v95 - 4 * (*((_DWORD *)v95 + 5) & 0x7FFFFFF));
    unint64_t v97 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v98 = *((void *)v97 + 50);
    long long v105 = *(_OWORD *)(v97 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v106, (llvm::IRBuilderBase *)(v97 + 40));
    int v107 = *((_DWORD *)v97 + 34);
    (*(void (**)(uint64_t, long long *, char *, uint64_t))(*(void *)v98 + 1216))(v98, &v105, (char *)this + 4336, v96);
    if (v106) {
      llvm::MetadataTracking::untrack();
    }
    unint64_t v84 = v95;
  }
  llvm::Instruction::eraseFromParent(v84);
  return 1;
}

uint64_t AGCLLVMUserIntersectionShader::unpackUserResult(AGCLLVMUserIntersectionShader *this, llvm::Value *a2, uint64_t a3)
{
  uint64_t v6 = llvm::ConstantInt::get();
  uint64_t v7 = llvm::ConstantInt::get();
  uint64_t result = llvm::ConstantFP::get();
  uint64_t v9 = result;
  if (*(unsigned char *)(*(void *)a3 + 8) == 16)
  {
    char v16 = this;
    unsigned int v10 = *(_DWORD *)(*((void *)a2 + 9) + 8);
    unsigned int v19 = 0;
    if (v10)
    {
      for (i = 0; i < v10; unsigned int v19 = i)
      {
        uint64_t v12 = *(void *)(*((void *)a2 + 9) - 8 * *(unsigned int *)(*((void *)a2 + 9) + 8) + 8 * i);
        if (isStringMDNode(*(llvm::MDString **)(v12 - 8 * *(unsigned int *)(v12 + 8)), "air.accept_intersection"))
        {
          __int16 v13 = (char *)a2 + *(void *)(*(void *)a2 - 24) + 40;
          __int16 v18 = 257;
          uint64_t result = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v13, a3, (uint64_t)&v19, 1, (uint64_t)v17);
          uint64_t v7 = result;
        }
        else if (isStringMDNode(*(llvm::MDString **)(v12 - 8 * *(unsigned int *)(v12 + 8)), "air.continue_search"))
        {
          int v14 = (char *)a2 + *(void *)(*(void *)a2 - 24) + 40;
          __int16 v18 = 257;
          uint64_t result = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v14, a3, (uint64_t)&v19, 1, (uint64_t)v17);
          uint64_t v6 = result;
        }
        else
        {
          uint64_t result = isStringMDNode(*(llvm::MDString **)(v12 - 8 * *(unsigned int *)(v12 + 8)), "air.distance");
          if (result)
          {
            int v15 = (char *)a2 + *(void *)(*(void *)a2 - 24) + 40;
            __int16 v18 = 257;
            uint64_t result = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v15, a3, (uint64_t)&v19, 1, (uint64_t)v17);
            uint64_t v9 = result;
          }
        }
        unsigned int i = v19 + 1;
      }
    }
    a3 = v7;
    this = v16;
  }
  *(void *)this = a3;
  *((void *)this + 1) = v6;
  *((void *)this + 2) = v9;
  return result;
}

uint64_t AGCLLVMUserIntersectionShader::isIntersectionFunctionBufferIntersectionFunction(AGCLLVMUserIntersectionShader *this)
{
  return HIBYTE(*((unsigned __int16 *)this + 2200)) & 1;
}

uint64_t AGCLLVMUserIntersectionShader::wrapperCallingConvention(AGCLLVMUserIntersectionShader *this)
{
  return 106;
}

uint64_t AGCLLVMUserIntersectionShader::wrapperFunctionType(AGCLLVMUserIntersectionShader *this)
{
  return llvm::FunctionType::get();
}

void AGCLLVMUserIntersectionShader::initCompile(AGCLLVMUserIntersectionShader *this)
{
  if (MGGetBoolAnswer())
  {
    if (AGCEnv::getValue((AGCEnv *)"AGC_RT_FORCE_SIDE_EFFECTS", v1))
    {
      uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_RT_FORCE_SIDE_EFFECTS", v2);
      if (Value)
      {
        if (*Value != 48) {
          atoi(Value);
        }
      }
    }
  }
  operator new();
}

uint64_t AGCLLVMUserIntersectionShaderPass::runOnFunction(AGCLLVMUserIntersectionShaderPass *this, llvm::Function *a2)
{
  v221[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::Module *)*((void *)a2 + 5);
  v207[0] = "air.intersection";
  v208[8] = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v4, (const llvm::Twine *)v207);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  uint64_t v7 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8));
  if (!v7 || *v7 - 1 > 1) {
    return 0;
  }
  char v8 = (llvm::Function *)*((void *)v7 + 16);
  if (v8 != a2 || *((unsigned char *)v8 + 16) != 0) {
    return 0;
  }
  Context = (llvm::Type *)llvm::Function::getContext(a2);
  uint64_t Int1Ty = llvm::Type::getInt1Ty(Context, v12);
  uint64_t Int8Ty = llvm::Type::getInt8Ty(Context, v13);
  Int16Ty = (llvm::Type *)llvm::Type::getInt16Ty(Context, v15);
  llvm::Type::getVoidTy(Context, v16);
  v207[0] = (char *)v208;
  v207[1] = (char *)0x200000000;
  char v211 = Context;
  uint64_t v212 = &v220;
  uint64_t v213 = v221;
  uint64_t v214 = 0;
  int v215 = 0;
  __int16 v216 = 512;
  char v217 = 7;
  unsigned int v209 = 0;
  uint64_t v210 = 0;
  uint64_t v218 = 0;
  uint64_t v219 = 0;
  uint64_t v220 = MEMORY[0x1E4FB9FF0] + 16;
  v221[0] = MEMORY[0x1E4FBA020] + 16;
  uint64_t v17 = (void **)**((void **)this + 1);
  if (*v17 != &AGCLLVMUserIntersectionShaderLoopShaderPass::ID)
  {
    __int16 v18 = v17 + 2;
    do
    {
      unsigned int v19 = *v18;
      v18 += 2;
    }
    while (v19 != &AGCLLVMUserIntersectionShaderLoopShaderPass::ID);
    uint64_t v17 = v18 - 2;
  }
  uint64_t v20 = (*(uint64_t (**)(void *, void *))(*(void *)v17[1] + 96))(v17[1], &AGCLLVMUserIntersectionShaderLoopShaderPass::ID);
  uint64_t v22 = *(llvm::Value **)(v20 + 40);
  uint64_t v21 = *(llvm::Instruction **)(v20 + 48);
  uint64_t v196 = (llvm::BasicBlock *)*((void *)v21 + 5);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v207, v21);
  std::string v195 = (llvm::Constant **)v22;
  llvm::IRBuilderBase::CreateRet((llvm::IRBuilderBase *)v207, v22);
  llvm::Instruction::eraseFromParent(v21);
  long long v23 = (uint64_t *)**((void **)this + 1);
  int v192 = (llvm::BasicBlock *)Int8Ty;
  if (*v23 != MEMORY[0x1E4FB9F40])
  {
    std::string v24 = v23 + 2;
    do
    {
      uint64_t v25 = *v24;
      v24 += 2;
    }
    while (v25 != MEMORY[0x1E4FB9F40]);
    long long v23 = v24 - 2;
  }
  uint64_t v26 = *(void *)((*(uint64_t (**)(uint64_t, void))(*(void *)v23[1] + 96))(v23[1], MEMORY[0x1E4FB9F40])
                  + 32);
  uint64_t v204 = v206;
  uint64_t v205 = 0x800000000;
  long long v27 = (void *)*((void *)a2 + 10);
  if (v27 == (void *)((char *)a2 + 72))
  {
    uint64_t v40 = v206;
    goto LABEL_89;
  }
  do
  {
    if (v27) {
      uint64_t v28 = v27 - 3;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *(void *)(v26 + 48);
    uint64_t v30 = *(unsigned int *)(v26 + 64);
    if (!v30) {
      goto LABEL_26;
    }
    LODWORD(v31) = ((v28 >> 4) ^ (v28 >> 9)) & (v30 - 1);
    uint64_t v32 = (void *)(v29 + 16 * v31);
    unint64_t v33 = (void *)*v32;
    if (v28 != (void *)*v32)
    {
      int v34 = 1;
      while (v33 != (void *)-4096)
      {
        int v35 = v31 + v34++;
        uint64_t v31 = v35 & (v30 - 1);
        unint64_t v33 = *(void **)(v29 + 16 * v31);
        if (v28 == v33)
        {
          uint64_t v32 = (void *)(v29 + 16 * v31);
          goto LABEL_27;
        }
      }
LABEL_26:
      uint64_t v32 = (void *)(v29 + 16 * v30);
    }
LABEL_27:
    if ((void *)(v29 + 16 * v30) != v32)
    {
      uint64_t v36 = v32[1];
      if (v36)
      {
        for (uint64_t i = *(void *)(v36 + 8); i != v36; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v38 = i - 32;
          if (!i) {
            uint64_t v38 = 0;
          }
          int v39 = *(unsigned __int8 *)(v38 + 16);
          if (i && v39 == 25)
          {
            if (*(void *)(v26 + 96) != *(void *)(v38 - 32)) {
              goto LABEL_39;
            }
          }
          else if (i && v39 == 26)
          {
LABEL_39:
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v204, *(void *)(v38 + 72));
            continue;
          }
        }
      }
    }
    long long v27 = (void *)v27[1];
  }
  while (v27 != (void *)((char *)a2 + 72));
  uint64_t v40 = (char *)v204;
  uint64_t v41 = (char *)v204 + 8 * v205;
  if (v205)
  {
    uint64_t v42 = 8 * v205;
    do
    {
      uint64_t v43 = *(void *)v40;
      int v44 = *(unsigned __int8 *)(*(void *)v40 + 16);
      if (*(void *)v40 && v44 == 60 || v43 && v44 == 61)
      {
        uint64_t v45 = **(void **)(v43 - 32);
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if ((v46 & 0xFE) == 0x12) {
          unsigned int v46 = *(_DWORD *)(**(void **)(v45 + 16) + 8);
        }
        if (v46 < 0x100) {
          goto LABEL_64;
        }
      }
      else if (v43)
      {
        if (v44 == 84)
        {
          uint64_t v47 = *(void *)(v43 - 32);
          if (v47)
          {
            if (!*(unsigned char *)(v47 + 16) && *(void *)(v47 + 24) == *(void *)(v43 + 72))
            {
              uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v47);
              if (v49 >= 0xE && *Name == 0x66696C2E6D766C6CLL && *(void *)((char *)Name + 6) == 0x2E656D6974656669) {
                goto LABEL_64;
              }
            }
          }
        }
      }
      v40 += 8;
      v42 -= 8;
    }
    while (v42);
    uint64_t v40 = v41;
    goto LABEL_89;
  }
LABEL_64:
  if (v40 != v41)
  {
    uint64_t v51 = v40 + 8;
    if (v40 + 8 != v41)
    {
      while (2)
      {
        uint64_t v52 = *(void *)v51;
        int v53 = *(unsigned __int8 *)(*(void *)v51 + 16);
        if (*(void *)v51 && v53 == 60 || v52 && v53 == 61)
        {
          uint64_t v54 = **(void **)(v52 - 32);
          unsigned int v55 = *(_DWORD *)(v54 + 8);
          if ((v55 & 0xFE) == 0x12) {
            unsigned int v55 = *(_DWORD *)(**(void **)(v54 + 16) + 8);
          }
          if (v55 >= 0x100)
          {
LABEL_73:
            *(void *)uint64_t v40 = *(void *)v51;
            v40 += 8;
          }
        }
        else
        {
          if (!v52) {
            goto LABEL_73;
          }
          if (v53 != 84) {
            goto LABEL_73;
          }
          uint64_t v56 = *(void *)(v52 - 32);
          if (!v56) {
            goto LABEL_73;
          }
          if (*(unsigned char *)(v56 + 16)) {
            goto LABEL_73;
          }
          if (*(void *)(v56 + 24) != *(void *)(v52 + 72)) {
            goto LABEL_73;
          }
          uint64_t v57 = (void *)llvm::Value::getName((llvm::Value *)v56);
          if (v58 < 0xE) {
            goto LABEL_73;
          }
          if (*v57 != 0x66696C2E6D766C6CLL || *(void *)((char *)v57 + 6) != 0x2E656D6974656669) {
            goto LABEL_73;
          }
        }
        v51 += 8;
        if (v51 == v41) {
          break;
        }
        continue;
      }
    }
  }
LABEL_89:
  LODWORD(v205) = (unint64_t)(v40 - (unsigned char *)v204) >> 3;
  uint64_t v60 = (uint64_t *)**((void **)this + 1);
  if (*v60 != MEMORY[0x1E4FB9F60])
  {
    uint64_t v61 = v60 + 2;
    do
    {
      uint64_t v62 = *v61;
      v61 += 2;
    }
    while (v62 != MEMORY[0x1E4FB9F60]);
    uint64_t v60 = v61 - 2;
  }
  uint64_t v63 = (*(uint64_t (**)(uint64_t, void))(*(void *)v60[1] + 96))(v60[1], MEMORY[0x1E4FB9F60]);
  if (v205)
  {
    uint64_t v64 = v63;
    long long v65 = (char *)v204;
    uint64_t v66 = 8 * v205;
    int v67 = v196;
    do
    {
      uint64_t v68 = *(void *)(v64 + 56);
      uint64_t v69 = *(unsigned int *)(v64 + 72);
      uint64_t v70 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(v68, *(_DWORD *)(v64 + 72), *(void *)(*(void *)v65 + 40));
      if ((uint64_t *)(v68 + 16 * v69) != v70 && v70[1]) {
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator();
      }
      v65 += 8;
      v66 -= 8;
    }
    while (v66);
  }
  else
  {
    int v67 = v196;
  }
  uint64_t v71 = (void *)*((void *)v67 + 5);
  if (v71 == (void *)((char *)v67 + 40))
  {
    uint64_t v74 = 0;
  }
  else
  {
    long long v72 = (const llvm::Instruction *)(v71 - 3);
    if (v71) {
      uint64_t v73 = v71 - 3;
    }
    else {
      uint64_t v73 = 0;
    }
    if (*((unsigned __int8 *)v73 + 16) - 29 >= 0xB) {
      uint64_t v74 = 0;
    }
    else {
      uint64_t v74 = v72;
    }
  }
  if (v205)
  {
    uint64_t v75 = (llvm::Instruction **)v204;
    uint64_t v76 = 8 * v205;
    do
    {
      int v77 = *v75;
      if (*((llvm::BasicBlock **)*v75 + 5) == v67 && llvm::Instruction::comesBefore(*v75, v74)) {
        uint64_t v74 = v77;
      }
      ++v75;
      v76 -= 8;
    }
    while (v76);
  }
  v202[0] = "loop_start";
  __int16 v203 = 259;
  uint64_t v78 = llvm::BasicBlock::splitBasicBlock();
  uint64_t v79 = v78;
  if (v196 == v67) {
    uint64_t v80 = (void *)v78;
  }
  else {
    uint64_t v80 = v196;
  }
  uint64_t v81 = *((void *)a2 + 10);
  if (v81) {
    uint64_t v82 = (llvm::BasicBlock *)(v81 - 24);
  }
  else {
    uint64_t v82 = 0;
  }
  std::string v83 = (void *)((char *)v82 + 40);
  v202[0] = "user_start";
  __int16 v203 = 259;
  uint64_t v197 = llvm::BasicBlock::splitBasicBlock();
  if (v205 && !*((unsigned char *)this + 30))
  {
    llvm::IRBuilderBase::SetInsertPoint(v207, (char *)v197, *(char **)(v197 + 48));
    __int16 v203 = 257;
    PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v207, Int16Ty, 2, (const llvm::Twine *)v202);
    uint64_t v124 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::PHINode::addIncoming(PHI, v124, v82);
    llvm::IRBuilderBase::SetInsertPoint(v207, (char *)v79, *(char **)(v79 + 48));
    __int16 v203 = 257;
    int v125 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v207, Int16Ty, 2, (const llvm::Twine *)v202);
    llvm::PHINode::addIncoming(v125, PHI, v67);
    v202[0] = v192;
    v202[1] = v192;
    llvm::StructType::get();
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v127 = v126;
    uint64_t v190 = v125;
    uint64_t v191 = PHI;
    if (v126) {
      uint64_t v126 = *(void *)(v126 + 24);
    }
    __int16 v203 = 257;
    int v128 = llvm::IRBuilderBase::CreateCall((uint64_t)v207, v126, v127, 0, 0, (uint64_t)v202);
    int v199 = 0;
    __int16 v203 = 257;
    uint64_t Value = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v207, (uint64_t)v128, (uint64_t)&v199, 1, (uint64_t)v202);
    __int16 v201 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v207, 38, Value, Int1Ty, (uint64_t)v200);
    int v199 = 1;
    __int16 v203 = 257;
    uint64_t v131 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v207, (uint64_t)v128, (uint64_t)&v199, 1, (uint64_t)v202);
    __int16 v201 = 257;
    uint64_t v132 = llvm::IRBuilderBase::CreateCast((uint64_t)v207, 38, v131, Int1Ty, (uint64_t)v200);
    v202[0] = "loop_body";
    __int16 v203 = 259;
    uint64_t v133 = llvm::BasicBlock::splitBasicBlock();
    if (v80 == (void *)v79) {
      long long v134 = (void *)v133;
    }
    else {
      long long v134 = v80;
    }
    uint64_t v185 = v133;
    uint64_t v186 = v134 + 5;
    v202[0] = "loop_end";
    __int16 v203 = 259;
    uint64_t v135 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    int v136 = (void *)((char *)v135 + 40);
    uint64_t v187 = Cast;
    v202[0] = "outer_loop_end";
    __int16 v203 = 259;
    uint64_t v137 = llvm::BasicBlock::splitBasicBlock();
    uint64_t v138 = (void *)(v137 + 40);
    unsigned __int8 v189 = (llvm::BasicBlock *)v134;
    v202[0] = "return";
    __int16 v203 = 259;
    uint64_t v139 = llvm::BasicBlock::splitBasicBlock();
    uint64_t v140 = *(void *)(v79 + 40);
    if (v140 == v79 + 40)
    {
      long long v143 = 0;
    }
    else
    {
      uint64_t v141 = (llvm::Instruction *)(v140 - 24);
      if (v140) {
        uint64_t v142 = v140 - 24;
      }
      else {
        uint64_t v142 = 0;
      }
      if (*(unsigned __int8 *)(v142 + 16) - 29 >= 0xB) {
        long long v143 = 0;
      }
      else {
        long long v143 = v141;
      }
    }
    llvm::Instruction::eraseFromParent(v143);
    uint64_t v144 = (void *)*v136;
    if ((void *)*v136 == v136)
    {
      uint64_t v147 = 0;
    }
    else
    {
      int v145 = (llvm::Instruction *)(v144 - 3);
      if (v144) {
        long long v146 = v144 - 3;
      }
      else {
        long long v146 = 0;
      }
      if (*((unsigned __int8 *)v146 + 16) - 29 >= 0xB) {
        uint64_t v147 = 0;
      }
      else {
        uint64_t v147 = v145;
      }
    }
    llvm::Instruction::eraseFromParent(v147);
    int v148 = (void *)*v138;
    if ((void *)*v138 == v138)
    {
      long long v151 = 0;
    }
    else
    {
      long long v149 = (llvm::Instruction *)(v148 - 3);
      if (v148) {
        long long v150 = v148 - 3;
      }
      else {
        long long v150 = 0;
      }
      if (*((unsigned __int8 *)v150 + 16) - 29 >= 0xB) {
        long long v151 = 0;
      }
      else {
        long long v151 = v149;
      }
    }
    llvm::Instruction::eraseFromParent(v151);
    uint64_t v152 = *(void *)(v139 + 40);
    if (v152 == v139 + 40)
    {
      uint64_t v155 = 0;
    }
    else
    {
      long long v153 = (llvm::Instruction *)(v152 - 24);
      if (v152) {
        uint64_t v154 = v152 - 24;
      }
      else {
        uint64_t v154 = 0;
      }
      if (*(unsigned __int8 *)(v154 + 16) - 29 >= 0xB) {
        uint64_t v155 = 0;
      }
      else {
        uint64_t v155 = v153;
      }
    }
    llvm::Instruction::eraseFromParent(v155);
    v156 = (void *)*v83;
    uint64_t v188 = v137 + 40;
    if ((void *)*v83 == v83)
    {
      long long v159 = 0;
    }
    else
    {
      std::string::size_type v157 = (llvm::Instruction *)(v156 - 3);
      if (v156) {
        uint64_t v158 = v156 - 3;
      }
      else {
        uint64_t v158 = 0;
      }
      if (*((unsigned __int8 *)v158 + 16) - 29 >= 0xB) {
        long long v159 = 0;
      }
      else {
        long long v159 = v157;
      }
    }
    std::string v193 = (llvm::BasicBlock *)v137;
    llvm::Instruction::eraseFromParent(v159);
    unsigned int v209 = v82;
    uint64_t v210 = (void *)((char *)v82 + 40);
    v202[0] = Int1Ty;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v161 = v160;
    uint64_t v162 = (llvm::Value *)v132;
    if (v160) {
      uint64_t v163 = *(void *)(v160 + 24);
    }
    else {
      uint64_t v163 = 0;
    }
    v200[0] = llvm::ConstantInt::get();
    __int16 v203 = 257;
    uint64_t v164 = llvm::IRBuilderBase::CreateCall((uint64_t)v207, v163, v161, (uint64_t)v200, 1, (uint64_t)v202);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v207, (uint64_t)v164, v197, v139);
    unsigned int v209 = (llvm::BasicBlock *)v79;
    uint64_t v210 = (void *)(v79 + 40);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v207, v187, v185, (uint64_t)v135);
    unsigned int v209 = v135;
    uint64_t v210 = (void *)((char *)v135 + 40);
    __int16 v203 = 257;
    int v165 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v207, Int16Ty, 2, (const llvm::Twine *)v202);
    llvm::PHINode::addIncoming(v165, v190, (llvm::BasicBlock *)v79);
    llvm::PHINode::addIncoming(v190, v165, v135);
    llvm::PHINode::addIncoming(v191, v165, v193);
    std::string::size_type v166 = (void *)*v186;
    if ((void *)*v186 == v186)
    {
      int v169 = 0;
    }
    else
    {
      int v167 = (llvm::Instruction *)(v166 - 3);
      if (v166) {
        __int16 v168 = v166 - 3;
      }
      else {
        __int16 v168 = 0;
      }
      if (*((unsigned __int8 *)v168 + 16) - 29 >= 0xB) {
        int v169 = 0;
      }
      else {
        int v169 = v167;
      }
    }
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v207, v169);
    v202[0] = *v195;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v171 = v170;
    if (v170) {
      uint64_t v170 = *(void *)(v170 + 24);
    }
    v200[0] = v195;
    __int16 v203 = 257;
    v172 = llvm::IRBuilderBase::CreateCall((uint64_t)v207, v170, v171, (uint64_t)v200, 1, (uint64_t)v202);
    llvm::PHINode::addIncoming(v165, v172, v189);
    unsigned int v209 = v135;
    uint64_t v210 = (void *)((char *)v135 + 40);
    v202[0] = Int16Ty;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v174 = v173;
    if (v173) {
      uint64_t v173 = *(void *)(v173 + 24);
    }
    v200[0] = v165;
    __int16 v203 = 257;
    uint64_t v175 = llvm::IRBuilderBase::CreateCall((uint64_t)v207, v173, v174, (uint64_t)v200, 1, (uint64_t)v202);
    __int16 v203 = 257;
    uint64_t v176 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v207, v162, v175, (const llvm::Twine *)v202);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v207, v176, (uint64_t)v193, v79);
    unsigned int v209 = v193;
    uint64_t v210 = (void *)v188;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v178 = v177;
    if (v177) {
      uint64_t v177 = *(void *)(v177 + 24);
    }
    __int16 v203 = 257;
    uint64_t v179 = llvm::IRBuilderBase::CreateCall((uint64_t)v207, v177, v178, 0, 0, (uint64_t)v202);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v207, (uint64_t)v179, v197, v139);
    llvm::IRBuilderBase::SetInsertPoint(v207, (char *)v139, *(char **)(v139 + 48));
    __int16 v203 = 257;
    uint64_t v180 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v207, Int16Ty, 2, (const llvm::Twine *)v202);
    llvm::PHINode::addIncoming(v180, v165, v193);
    uint64_t v181 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::PHINode::addIncoming(v180, v181, v82);
    unsigned int v209 = (llvm::BasicBlock *)v139;
    uint64_t v210 = (void *)(v139 + 40);
    v202[0] = Int16Ty;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v183 = v182;
    if (v182) {
      uint64_t v182 = *(void *)(v182 + 24);
    }
    v200[0] = v180;
    __int16 v203 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v207, v182, v183, (uint64_t)v200, 1, (uint64_t)v202);
    unsigned __int8 v184 = (llvm::Value *)llvm::UndefValue::get();
    llvm::IRBuilderBase::CreateRet((llvm::IRBuilderBase *)v207, v184);
  }
  else
  {
    unint64_t v84 = v80 + 5;
    uint64_t v85 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    __int16 v203 = 257;
    uint64_t v86 = llvm::BasicBlock::splitBasicBlock();
    uint64_t v87 = (void *)*v83;
    uint64_t v88 = v82;
    if ((void *)*v83 == v83)
    {
      int v91 = 0;
    }
    else
    {
      std::string v89 = (llvm::Instruction *)(v87 - 3);
      if (v87) {
        uint64_t v90 = v87 - 3;
      }
      else {
        uint64_t v90 = 0;
      }
      if (*((unsigned __int8 *)v90 + 16) - 29 >= 0xB) {
        int v91 = 0;
      }
      else {
        int v91 = v89;
      }
    }
    uint64_t v92 = (llvm::BasicBlock *)v80;
    llvm::Instruction::eraseFromParent(v91);
    unsigned int v209 = v88;
    uint64_t v210 = v83;
    v202[0] = Int1Ty;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v94 = v93;
    if (v93) {
      uint64_t v95 = *(void *)(v93 + 24);
    }
    else {
      uint64_t v95 = 0;
    }
    v200[0] = llvm::ConstantInt::get();
    __int16 v203 = 257;
    uint64_t v96 = llvm::IRBuilderBase::CreateCall((uint64_t)v207, v95, v94, (uint64_t)v200, 1, (uint64_t)v202);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v207, (uint64_t)v96, v197, v86);
    unint64_t v97 = (void *)*v84;
    if ((void *)*v84 == v84)
    {
      uint64_t v100 = 0;
    }
    else
    {
      uint64_t v98 = (llvm::Instruction *)(v97 - 3);
      if (v97) {
        unint64_t v99 = v97 - 3;
      }
      else {
        unint64_t v99 = 0;
      }
      if (*((unsigned __int8 *)v99 + 16) - 29 >= 0xB) {
        uint64_t v100 = 0;
      }
      else {
        uint64_t v100 = v98;
      }
    }
    llvm::Instruction::eraseFromParent(v100);
    unsigned int v209 = v92;
    uint64_t v210 = v84;
    v202[0] = *v195;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v102 = v101;
    if (v101) {
      uint64_t v101 = *(void *)(v101 + 24);
    }
    v200[0] = v195;
    __int16 v203 = 257;
    long long v103 = llvm::IRBuilderBase::CreateCall((uint64_t)v207, v101, v102, (uint64_t)v200, 1, (uint64_t)v202);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v207, (uint64_t)v103, v86, (uint64_t)v85);
    uint64_t v104 = (void *)*((void *)v85 + 5);
    if (v104 == (void *)((char *)v85 + 40))
    {
      int v107 = 0;
    }
    else
    {
      long long v105 = (llvm::Instruction *)(v104 - 3);
      if (v104) {
        uint64_t v106 = v104 - 3;
      }
      else {
        uint64_t v106 = 0;
      }
      if (*((unsigned __int8 *)v106 + 16) - 29 >= 0xB) {
        int v107 = 0;
      }
      else {
        int v107 = v105;
      }
    }
    llvm::Instruction::eraseFromParent(v107);
    unsigned int v209 = v85;
    uint64_t v210 = (void *)((char *)v85 + 40);
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v109 = v108;
    if (v108) {
      uint64_t v108 = *(void *)(v108 + 24);
    }
    __int16 v203 = 257;
    int v110 = llvm::IRBuilderBase::CreateCall((uint64_t)v207, v108, v109, 0, 0, (uint64_t)v202);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v207, (uint64_t)v110, v197, v86);
    llvm::IRBuilderBase::SetInsertPoint(v207, (char *)v86, *(char **)(v86 + 48));
    long long v111 = *v195;
    __int16 v203 = 257;
    uint64_t v112 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v207, v111, 3, (const llvm::Twine *)v202);
    Nulluint64_t Value = (llvm::Value *)llvm::Constant::getNullValue(*v195, v113);
    llvm::PHINode::addIncoming(v112, NullValue, v88);
    llvm::PHINode::addIncoming(v112, (llvm::Value *)v195, v92);
    llvm::PHINode::addIncoming(v112, (llvm::Value *)v195, v85);
    uint64_t v115 = *(void *)(v86 + 40);
    if (v115 == v86 + 40)
    {
      uint64_t v118 = 0;
    }
    else
    {
      int v116 = (llvm::Instruction *)(v115 - 24);
      if (v115) {
        uint64_t v117 = v115 - 24;
      }
      else {
        uint64_t v117 = 0;
      }
      if (*(unsigned __int8 *)(v117 + 16) - 29 >= 0xB) {
        uint64_t v118 = 0;
      }
      else {
        uint64_t v118 = v116;
      }
    }
    llvm::Instruction::eraseFromParent(v118);
    unsigned int v209 = (llvm::BasicBlock *)v86;
    uint64_t v210 = (void *)(v86 + 40);
    v202[0] = *(void *)v112;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v120 = v119;
    if (v119) {
      uint64_t v119 = *(void *)(v119 + 24);
    }
    v200[0] = v112;
    __int16 v203 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v207, v119, v120, (uint64_t)v200, 1, (uint64_t)v202);
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v122 = v121;
    if (v121) {
      uint64_t v121 = *(void *)(v121 + 24);
    }
    __int16 v203 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v207, v121, v122, 0, 0, (uint64_t)v202);
    llvm::IRBuilderBase::CreateRet((llvm::IRBuilderBase *)v207, v112);
  }
  if (v204 != v206) {
    free(v204);
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v221);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v220);
  if ((_WORD *)v207[0] != v208) {
    free(v207[0]);
  }
  return 1;
}

uint64_t AGCLLVMUserIntersectionShaderPass::getAnalysisUsage(AGCLLVMUserIntersectionShaderPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage::addRequiredID(a2, AGCLLVMUserIntersectionShaderLoopShaderPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, MEMORY[0x1E4FB9F40]);
  long long v3 = (char *)MEMORY[0x1E4FB9F60];
  return llvm::AnalysisUsage::addRequiredID(a2, v3);
}

uint64_t llvm::Pass::doFinalization()
{
  return 0;
}

uint64_t llvm::Pass::doInitialization()
{
  return 0;
}

const char *AGCLLVMUserIntersectionShaderPass::getPassName(AGCLLVMUserIntersectionShaderPass *this)
{
  return "User Intersection Shader";
}

void AGCLLVMUserIntersectionShaderPass::~AGCLLVMUserIntersectionShaderPass(AGCLLVMUserIntersectionShaderPass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CB7A0780);
}

uint64_t AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(AGCLLVMUserIntersectionShaderLoopShaderPass *this, llvm::Function *a2)
{
  v143[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (llvm::Module *)*((void *)a2 + 5);
  __p[0] = "air.intersection";
  LOWORD(v81[0]) = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v4, (const llvm::Twine *)__p);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  uint64_t v7 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8));
  if (!v7 || *v7 - 1 > 1) {
    return 0;
  }
  char v8 = (llvm::Function *)*((void *)v7 + 16);
  if (v8 != a2 || *((unsigned char *)v8 + 16) != 0) {
    return 0;
  }
  Context = (llvm::Type *)llvm::Function::getContext(a2);
  v135[0] = v136;
  v135[1] = (void *)0x200000000;
  v136[6] = Context;
  v136[7] = &v142;
  v136[8] = v143;
  v136[9] = 0;
  int v137 = 0;
  __int16 v138 = 512;
  char v139 = 7;
  v136[4] = 0;
  v136[5] = 0;
  uint64_t v140 = 0;
  uint64_t v141 = 0;
  uint64_t v142 = MEMORY[0x1E4FB9FF0] + 16;
  v143[0] = MEMORY[0x1E4FBA020] + 16;
  __int16 v13 = (char *)a2 + 72;
  uint64_t v14 = *((void *)a2 + 10);
  int v15 = (llvm::BasicBlock *)(v14 - 24);
  if (!v14) {
    int v15 = 0;
  }
  uint64_t v74 = v15;
  if ((char *)v14 == v13)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = v14 - 24;
      if (!v14) {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *(void *)(v17 + 40);
      uint64_t v19 = v18 - 24;
      if (v18) {
        uint64_t v20 = v18 - 24;
      }
      else {
        uint64_t v20 = 0;
      }
      if (*(unsigned __int8 *)(v20 + 16) - 29 >= 0xB) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = v19;
      }
      int v22 = *(unsigned __int8 *)(v21 + 16);
      if (v16) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v22 == 29;
      }
      if (v23) {
        uint64_t v16 = v17;
      }
      uint64_t v14 = *(void *)(v14 + 8);
    }
    while ((char *)v14 != v13);
  }
  uint64_t v24 = *(void *)(v16 + 40);
  if (v24 == v16 + 40)
  {
    long long v27 = 0;
  }
  else
  {
    uint64_t v25 = (llvm::Instruction *)(v24 - 24);
    if (v24) {
      uint64_t v26 = v24 - 24;
    }
    else {
      uint64_t v26 = 0;
    }
    if (*(unsigned __int8 *)(v26 + 16) - 29 >= 0xB) {
      long long v27 = 0;
    }
    else {
      long long v27 = v25;
    }
  }
  long long v72 = this;
  for (uint64_t i = (void *)*((void *)v74 + 6); i != (void *)((char *)v74 + 40); uint64_t i = (void *)i[1])
  {
    if (i) {
      uint64_t v29 = i - 3;
    }
    else {
      uint64_t v29 = 0;
    }
    int v30 = *((unsigned __int8 *)v29 + 16);
    if (v30 != 83 && v30 != 59) {
      break;
    }
  }
  uint64_t Int32Ty = (void *)llvm::Type::getInt32Ty(Context, v12);
  LOWORD(v81[0]) = 257;
  uint64_t v32 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  uint64_t v33 = *((_DWORD *)v27 + 5) & 0x7FFFFFF;
  if (v33) {
    uint64_t v34 = *((void *)v27 - 4 * v33);
  }
  else {
    uint64_t v34 = 0;
  }
  *((void *)this + 5) = v34;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v135, v27);
  uint64_t v71 = v32;
  *((void *)this + 6) = llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)v135, v32);
  llvm::Instruction::eraseFromParent(v27);
  uint64_t v35 = llvm::Function::args(a2);
  if (v35 == v36) {
    goto LABEL_119;
  }
  uint64_t v37 = v35;
  uint64_t v38 = v36;
  uint64_t v73 = Int32Ty;
  do
  {
    if (!*(void *)(v37 + 8)) {
      goto LABEL_110;
    }
    uint64_t v39 = *(void *)(**((void **)this + 4) + 8 * *(unsigned int *)(v37 + 32));
    {
      std::string::basic_string[abi:nn180100]<0>(__p, "air.origin");
      int v80 = 0;
      std::string::basic_string[abi:nn180100]<0>(v81, "air.direction");
      int v82 = 1;
      std::string::basic_string[abi:nn180100]<0>(v83, "air.min_distance");
      int v84 = 2;
      std::string::basic_string[abi:nn180100]<0>(v85, "air.max_distance");
      int v86 = 3;
      std::string::basic_string[abi:nn180100]<0>(v87, "air.geometry_id");
      int v88 = 4;
      std::string::basic_string[abi:nn180100]<0>(v89, "air.primitive_id");
      int v90 = 5;
      std::string::basic_string[abi:nn180100]<0>(v91, "air.instance_id");
      int v92 = 7;
      std::string::basic_string[abi:nn180100]<0>(v93, "air.instance_id_count");
      int v94 = 6;
      std::string::basic_string[abi:nn180100]<0>(v95, "air.user_instance_id");
      int v96 = 8;
      std::string::basic_string[abi:nn180100]<0>(v97, "air.user_instance_id_count");
      int v98 = 6;
      std::string::basic_string[abi:nn180100]<0>(v99, "air.world_space_origin");
      int v100 = 9;
      std::string::basic_string[abi:nn180100]<0>(v101, "air.world_space_direction");
      int v102 = 10;
      std::string::basic_string[abi:nn180100]<0>(v103, "air.barycentric_coord");
      int v104 = 11;
      std::string::basic_string[abi:nn180100]<0>(v105, "air.front_facing");
      int v106 = 12;
      std::string::basic_string[abi:nn180100]<0>(v107, "air.distance");
      int v108 = 13;
      std::string::basic_string[abi:nn180100]<0>(v109, "air.curve_parameter");
      int v110 = 14;
      std::string::basic_string[abi:nn180100]<0>(v111, "air.opaque_primitive");
      int v112 = 15;
      std::string::basic_string[abi:nn180100]<0>(v113, "air.instance_intersection_function_table_offset");
      int v114 = 16;
      std::string::basic_string[abi:nn180100]<0>(v115, "air.geometry_intersection_function_table_offset");
      int v116 = 17;
      std::string::basic_string[abi:nn180100]<0>(v117, "air.object_to_world_transform");
      int v118 = 20;
      std::string::basic_string[abi:nn180100]<0>(v119, "air.world_to_object_transform");
      int v120 = 19;
      std::string::basic_string[abi:nn180100]<0>(v121, "air.time");
      int v122 = 21;
      std::string::basic_string[abi:nn180100]<0>(v123, "air.key_frame_count");
      int v124 = 22;
      std::string::basic_string[abi:nn180100]<0>(v125, "air.motion_start_time");
      int v126 = 23;
      std::string::basic_string[abi:nn180100]<0>(v127, "air.motion_end_time");
      int v128 = 24;
      std::string::basic_string[abi:nn180100]<0>(v129, "air.primitive_data");
      int v130 = 25;
      std::string::basic_string[abi:nn180100]<0>(v131, "air.user_data_buffer");
      int v132 = 26;
      std::string::basic_string[abi:nn180100]<0>(v133, "air.function_id");
      uint64_t v70 = 0;
      int v134 = 27;
      AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments = 0u;
      *(_OWORD *)&qword_1EA613FB0 = 0u;
      dword_1EA613FC0 = 1065353216;
      do
      {
        std::__hash_table<std::__hash_value_type<std::string,IntersectionShaderArgument>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,IntersectionShaderArgument>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,IntersectionShaderArgument>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,IntersectionShaderArgument>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,IntersectionShaderArgument> const&>((uint64_t)&__p[v70], (uint64_t)&__p[v70]);
        v70 += 4;
      }
      while (v70 != 112);
      do
      {
        if (SHIBYTE(v77.__r_.__value_.__r.__words[v70 + 2]) < 0) {
          operator delete(*(void **)((char *)&v77.__r_.__value_.__l.__data_ + v70 * 8));
        }
        v70 -= 4;
      }
      while (v70 * 8);
      __cxa_atexit((void (*)(void *))std::unordered_map<std::string,IntersectionShaderArgument>::~unordered_map[abi:nn180100], &AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments, &dword_1CAC02000);
      this = v72;
      uint64_t Int32Ty = v73;
    }
    uint64_t v40 = *(llvm::MDString **)(v39 - 8 * *(unsigned int *)(v39 + 8) + 8);
    if (*(unsigned char *)v40) {
      goto LABEL_110;
    }
    uint64_t String = llvm::MDString::getString(v40);
    if (String)
    {
      std::string::basic_string[abi:nn180100](__p, (void *)String, v41);
      uint64_t String = HIBYTE(v79);
      int v44 = (uint64_t *)__p[0];
      uint64_t v43 = __p[1];
    }
    else
    {
      uint64_t v43 = 0;
      int v44 = 0;
      __p[0] = 0;
      __p[1] = 0;
      std::string::size_type v79 = 0;
    }
    int v45 = (char)String;
    if ((String & 0x80u) == 0) {
      unsigned int v46 = (uint64_t *)__p;
    }
    else {
      unsigned int v46 = v44;
    }
    if ((String & 0x80u) == 0) {
      unint64_t v47 = String;
    }
    else {
      unint64_t v47 = (unint64_t)v43;
    }
    unint64_t v48 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v46, v47);
    unint64_t v49 = *((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1);
    if (!*((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1))
    {
      uint64_t v54 = 0;
      if (v45 < 0) {
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    unint64_t v50 = v48;
    uint8x8_t v51 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                                         + 8));
    v51.i16[0] = vaddlv_u8(v51);
    unint64_t v52 = v51.u32[0];
    if (v51.u32[0] > 1uLL)
    {
      unint64_t v53 = v48;
      if (v48 >= *((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                  + 1))
        unint64_t v53 = v48
            % *((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1);
    }
    else
    {
      unint64_t v53 = (*((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1)
           - 1) & v48;
    }
    unsigned int v55 = *(uint64_t ***)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                       + 8 * v53);
    if (!v55)
    {
      uint64_t v54 = 0;
      goto LABEL_82;
    }
    uint64_t v54 = *v55;
    if (!*v55) {
      goto LABEL_82;
    }
    while (1)
    {
      unint64_t v56 = v54[1];
      if (v50 == v56)
      {
        if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v54 + 16, (unsigned __int8 *)__p)) {
          goto LABEL_81;
        }
        goto LABEL_77;
      }
      if (v52 > 1)
      {
        if (v56 >= v49) {
          v56 %= v49;
        }
      }
      else
      {
        v56 &= v49 - 1;
      }
      if (v56 != v53) {
        break;
      }
LABEL_77:
      uint64_t v54 = (uint64_t *)*v54;
      if (!v54) {
        goto LABEL_81;
      }
    }
    uint64_t v54 = 0;
LABEL_81:
    this = v72;
LABEL_82:
    uint64_t Int32Ty = v73;
    if (v45 < 0) {
LABEL_83:
    }
      operator delete(v44);
LABEL_84:
    if (v54)
    {
      __p[0] = Int32Ty;
      llvm::FunctionType::get();
      std::string::basic_string[abi:nn180100]<0>(&v76, "agx.rt.argument");
      uint64_t v57 = std::string::append(&v76, ".");
      std::string::size_type v58 = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v75, *(_DWORD *)(v37 + 32));
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v59 = &v75;
      }
      else {
        uint64_t v59 = (std::string *)v75.__r_.__value_.__r.__words[0];
      }
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v75.__r_.__value_.__l.__size_;
      }
      uint64_t v61 = std::string::append(&v77, (const std::string::value_type *)v59, size);
      std::string::size_type v62 = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      std::string::size_type v79 = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      llvm::Module::getOrInsertFunction();
      uint64_t v64 = v63;
      if (SHIBYTE(v79) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      unsigned int v65 = *((_DWORD *)v54 + 10);
      if (v65 > 0x1B)
      {
LABEL_102:
        int v67 = v74;
      }
      else
      {
        int v66 = 1 << v65;
        if ((v66 & 0xDFB87D7) != 0)
        {
          llvm::Function::addFnAttr();
          llvm::Function::addFnAttr();
          goto LABEL_102;
        }
        if ((v66 & 0x2007820) != 0) {
          llvm::Function::addFnAttr();
        }
        int v67 = v71;
      }
      FirstNonPHI = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v67);
      llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v135, FirstNonPHI);
      if (v64) {
        uint64_t v69 = *(void *)(v64 + 24);
      }
      else {
        uint64_t v69 = 0;
      }
      v77.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
      LOWORD(v81[0]) = 257;
      llvm::IRBuilderBase::CreateCall((uint64_t)v135, v69, v64, (uint64_t)&v77, 1, (uint64_t)__p);
      llvm::Value::replaceAllUsesWith();
    }
LABEL_110:
    v37 += 40;
  }
  while (v37 != v38);
LABEL_119:
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v143);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v142);
  if (v135[0] != v136) {
    free(v135[0]);
  }
  return 1;
}

void std::__hash_table<std::__hash_value_type<std::string,IntersectionShaderArgument>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,IntersectionShaderArgument>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,IntersectionShaderArgument>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,IntersectionShaderArgument>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,IntersectionShaderArgument> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v6 = v5;
  }
  unint64_t v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v6);
  unint64_t v8 = v7;
  unint64_t v9 = *((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1);
  if (*((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1))
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                                         + 8));
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= *((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1)) {
        unint64_t v2 = v7
      }
           % *((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1);
    }
    else
    {
      unint64_t v2 = (*((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1)
          - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                               + 8 * v2);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v4)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v2) {
            break;
          }
        }
      }
    }
  }
  int v15 = (char *)operator new(0x30uLL);
  *(void *)int v15 = 0;
  *((void *)v15 + 1) = v8;
  uint64_t v16 = (std::string *)(v15 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v15 + 4) = *(void *)(a2 + 16);
  }
  *((_DWORD *)v15 + 1llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(_DWORD *)(a2 + 24);
  float v17 = (float)(unint64_t)(qword_1EA613FB8 + 1);
  if (!v9 || (float)(*(float *)&dword_1EA613FC0 * (float)v9) < v17)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v17 / *(float *)&dword_1EA613FC0);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1);
    if (*(void *)&prime > *((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                             + 1))
      goto LABEL_36;
    if (*(void *)&prime < *((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                             + 1))
    {
      unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)qword_1EA613FB8 / *(float *)&dword_1EA613FC0);
      if (*((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1) < 3uLL
        || (uint8x8_t v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                                                 + 8)),
            v29.i16[0] = vaddlv_u8(v29),
            v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int v22 = operator new(8 * *(void *)&prime);
          BOOL v23 = (void *)AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments;
          *(void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1) = prime;
          do
            *(void *)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                      + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          uint64_t v25 = (void **)qword_1EA613FB0;
          if (qword_1EA613FB0)
          {
            unint64_t v26 = *(void *)(qword_1EA613FB0 + 8);
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 8 * v26) = &qword_1EA613FB0;
            for (j = *v25; j; unint64_t v26 = v32)
            {
              unint64_t v32 = j[1];
              if (v27.u32[0] > 1uLL)
              {
                if (v32 >= *(void *)&prime) {
                  v32 %= *(void *)&prime;
                }
              }
              else
              {
                v32 &= *(void *)&prime - 1;
              }
              if (v32 != v26)
              {
                if (!*(void *)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                                + 8 * v32))
                {
                  *(void *)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                            + 8 * v32) = v25;
                  goto LABEL_61;
                }
                *uint64_t v25 = (void *)*j;
                void *j = **(void **)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                                 + 8 * v32);
                **(void **)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                            + 8 * v32) = j;
                uint64_t j = v25;
              }
              unint64_t v32 = v26;
LABEL_61:
              uint64_t v25 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_65;
        }
        uint64_t v37 = (void *)AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments;
        *(void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        *((void *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1) = 0;
      }
    }
LABEL_65:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v2 = v8 % v9;
      }
      else {
        unint64_t v2 = v8;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v8;
    }
  }
  uint64_t v33 = AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments;
  uint64_t v34 = *(void **)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 8 * v2);
  if (v34)
  {
    *(void *)int v15 = *v34;
LABEL_78:
    void *v34 = v15;
    goto LABEL_79;
  }
  uint64_t v35 = qword_1EA613FB0;
  *(void *)int v15 = qword_1EA613FB0;
  qword_1EA613FB0 = (uint64_t)v15;
  *(void *)(v33 + 8 * v2) = &qword_1EA613FB0;
  if (v35)
  {
    unint64_t v36 = *(void *)(v35 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9) {
        v36 %= v9;
      }
    }
    else
    {
      v36 &= v9 - 1;
    }
    uint64_t v34 = (void *)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 8 * v36);
    goto LABEL_78;
  }
LABEL_79:
  ++qword_1EA613FB8;
}

uint64_t std::unordered_map<std::string,IntersectionShaderArgument>::~unordered_map[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t AGCLLVMUserIntersectionShaderLoopShaderPass::getAnalysisUsage(AGCLLVMUserIntersectionShaderLoopShaderPass *this, llvm::AnalysisUsage *a2)
{
  return llvm::AnalysisUsage::addRequiredID(a2, MEMORY[0x1E4FB9FA0]);
}

const char *AGCLLVMUserIntersectionShaderLoopShaderPass::getPassName(AGCLLVMUserIntersectionShaderLoopShaderPass *this)
{
  return "User Intersection Shader Loop";
}

void AGCLLVMUserIntersectionShaderLoopShaderPass::~AGCLLVMUserIntersectionShaderLoopShaderPass(AGCLLVMUserIntersectionShaderLoopShaderPass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMUserIntersectionShader::~AGCLLVMUserIntersectionShader(AGCLLVMUserIntersectionShader *this)
{
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1F25C29A0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4408));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1F25C29A0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4408));
}

void AGCLLVMDriverIntersectionShader::AGCLLVMDriverIntersectionShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
}

uint64_t AGCLLVMUserIntersectionShader::AGCLLVMUserIntersectionShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, int a5)
{
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 4408), a2, *a3);
  AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)a1, (uint64_t *)off_1F25C29A0, (uint64_t)a3, "air.intersection", (uint64_t)&default_cs, 0, 0);
  *(void *)a1 = &unk_1F25C2580;
  *(void *)(a1 + 4408) = &unk_1F25C28A0;
  *(void *)(a1 + 444llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = &unk_1F25C2990;
  *(void *)(a1 + 432llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = &unk_1F25C27A0;
  *(_DWORD *)(a1 + 4328) = *(_DWORD *)a4;
  *(_DWORD *)(a1 + 4332) = a5;
  *(_OWORD *)(a1 + 4352) = 0u;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(_DWORD *)(a1 + 4376) = 0;
  *(_OWORD *)(a1 + 4384) = xmmword_1CADD6440;
  *(_WORD *)(a1 + 440llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
  *(unsigned char *)(*(void *)(a1 + 4808) + 181llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = (*(_DWORD *)a4 & 0x20000) != 0;
  *(unsigned char *)(a1 + 3712) = (*(_DWORD *)(a1 + 4328) & 0x8000) != 0;
  if ((*(unsigned char *)(a4 + 2) & 4) != 0)
  {
    unint64_t v9 = *(llvm::Module **)(a1 + 4776);
    float v17 = "llvm.module.flags";
    __int16 v18 = 259;
    uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v9, (const llvm::Twine *)&v17);
    if (NamedMetadata)
    {
      unint64_t v11 = (llvm::NamedMDNode *)NamedMetadata;
      for (unsigned int i = 0; i < llvm::NamedMDNode::getNumOperands(v11); ++i)
      {
        uint64_t Operand = llvm::NamedMDNode::getOperand(v11);
        uint64_t v14 = 8 - 8 * *(unsigned int *)(Operand + 8);
        while (v14)
        {
          BOOL v15 = isStringMDNode(*(llvm::MDString **)(Operand + v14), "PIC Level");
          v14 += 8;
          if (v15)
          {
            llvm::ConstantInt::get();
            llvm::ValueAsMetadata::get();
            llvm::MDNode::replaceOperandWith();
            goto LABEL_11;
          }
        }
      }
    }
    llvm::Module::addModuleFlag();
LABEL_11:
    llvm::Module::getOrInsertNamedMetadata();
  }
  return a1;
}

uint64_t parseMDUint3(uint64_t a1, const char *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = *(unsigned __int8 **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a3);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = *v4;
  BOOL v6 = v5 > 0x22 || ((0x7FFFFFFF0uLL >> v5) & 1) == 0;
  if (v6 || *((_DWORD *)v4 + 2) != 4) {
    return 0;
  }
  uint64_t result = isStringMDNode(*((llvm::MDString **)v4 - 4), a2);
  if (result)
  {
    unsigned int v10 = 1;
    uint64_t result = parseMDInt(0, (uint64_t)v4, &v10, a4);
    if (result)
    {
      unsigned int v11 = 2;
      uint64_t result = parseMDInt(0, (uint64_t)v4, &v11, a4 + 1);
      if (result)
      {
        unsigned int v12 = 3;
        uint64_t result = parseMDInt(0, (uint64_t)v4, &v12, a4 + 2);
        if (result)
        {
          ++*a3;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t AGCLLVMUserShader::buildTileQuadgroupIndexInThreadgroup(AGCLLVMUserShader *this, llvm::Type *a2)
{
  uint64_t v4 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  unint64_t v5 = (llvm::Value *)AGCLLVMUserShader::buildTileThreadPositionInThreadgroup(this, a2, 0);
  BOOL v6 = (llvm::Value *)llvm::ConstantInt::get();
  v24[0] = "quad_x";
  __int16 v25 = 259;
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v4, v5, v6, (const llvm::Twine *)v24);
  unint64_t v8 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  unint64_t v9 = (llvm::Value *)AGCLLVMUserShader::buildTileThreadPositionInThreadgroup(this, a2, 1);
  unsigned int v10 = (llvm::Value *)llvm::ConstantInt::get();
  v24[0] = "quad_y";
  __int16 v25 = 259;
  unsigned int v11 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v8, v9, v10, (const llvm::Twine *)v24);
  unsigned int v12 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v13 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, void))(*(void *)this + 464))(this, 0);
  uint64_t v14 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32), v13, a2);
  BOOL v15 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v25 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v12, v14, v15, (const llvm::Twine *)v24);
  float v17 = (llvm::Value *)llvm::ConstantInt::get();
  v22[0] = "num_quads_x";
  __int16 v23 = 259;
  __int16 v18 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v12, Add, v17, (const llvm::Twine *)v22);
  unint64_t v19 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v25 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v19, v11, v18, (const llvm::Twine *)v24);
  __int16 v23 = 257;
  return llvm::IRBuilderBase::CreateAdd(v19, Mul, LShr, (const llvm::Twine *)v22);
}

uint64_t AGCLLVMUserShader::buildTileThreadPositionInThreadgroup(AGCLLVMUserShader *this, llvm::Type *a2, uint64_t a3)
{
  if (a3 == 2)
  {
    return llvm::ConstantInt::get();
  }
  else
  {
    uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
    unint64_t v8 = (char *)this + *(void *)(*(void *)this - 24);
    long long v11 = *(_OWORD *)(v8 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
    int v13 = *((_DWORD *)v8 + 34);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type *, uint64_t))(*(void *)v7 + 256))(v7, &v11, a2, a3);
    if (v12) {
      llvm::MetadataTracking::untrack();
    }
    return v9;
  }
}

uint64_t AGCLLVMUserShader::buildTileThreadPositionInGrid(AGCLLVMUserShader *this, llvm::Type *a2, uint64_t a3)
{
  if (a3 == 2)
  {
    return llvm::ConstantInt::get();
  }
  else
  {
    uint64_t v6 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    uint64_t v7 = AGCLLVMUserShader::buildTileThreadsPerThreadgroup(this, a2, a3);
    unint64_t v8 = (llvm::Value *)AGCLLVMUserShader::buildTileThreadgroupPositionInGrid(this, a2, a3);
    __int16 v14 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v6, v7, v8, (const llvm::Twine *)v13);
    unsigned int v10 = (llvm::Value *)AGCLLVMUserShader::buildTileThreadPositionInThreadgroup(this, a2, a3);
    unsigned char v12[16] = 257;
    return llvm::IRBuilderBase::CreateAdd(v6, Mul, v10, (const llvm::Twine *)v12);
  }
}

llvm::Value *AGCLLVMUserShader::buildTileThreadsPerThreadgroup(AGCLLVMUserShader *this, llvm::Type *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)this + 464);
LABEL_7:
      uint64_t v5 = v6();
      goto LABEL_8;
    case 1:
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)this + 464);
      goto LABEL_7;
    case 2:
      uint64_t v5 = llvm::ConstantInt::get();
LABEL_8:
      uint64_t v7 = (llvm::Value *)v5;
      goto LABEL_10;
  }
  uint64_t v7 = 0;
LABEL_10:
  unint64_t v8 = (llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32);
  return AGCLLVMBuilder::truncateToSmall(v8, v7, a2);
}

uint64_t AGCLLVMUserShader::buildTileThreadgroupPositionInGrid(AGCLLVMUserShader *this, llvm::Type *a2, int a3)
{
  if (a3 == 2)
  {
    return llvm::ConstantInt::get();
  }
  else
  {
    uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
    unint64_t v8 = (char *)this + *(void *)(*(void *)this - 24);
    long long v11 = *(_OWORD *)(v8 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
    int v13 = *((_DWORD *)v8 + 34);
    uint64_t v9 = AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v7, (uint64_t)&v11, (uint64_t)a2, a3);
    if (v12) {
      llvm::MetadataTracking::untrack();
    }
    return v9;
  }
}

uint64_t AGCLLVMUserShader::initCompile(AGCLLVMUserShader *this)
{
  return 1;
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>(long long *a1, long long *a2)
{
  long long v11 = *a1;
  int v12 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  *(void *)unsigned int v10 = *((void *)a1 + 4);
  *(void *)&v10[7] = *(void *)((char *)a1 + 39);
  char v4 = *((unsigned char *)a1 + 47);
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 3) = 0;
  __n128 v9 = (__n128)a1[3];
  int v5 = *((_DWORD *)a2 + 4);
  *a1 = *a2;
  *((_DWORD *)a1 + 4) = v5;
  uint64_t v6 = *((void *)a2 + 5);
  *(long long *)((char *)a1 + 24) = *(long long *)((char *)a2 + 24);
  *((void *)a1 + 5) = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  uint64_t v7 = (__n128 *)(a2 + 3);
  a1[3] = a2[3];
  *a2 = v11;
  *((_DWORD *)a2 + 4) = v12;
  if (*((char *)a2 + 47) < 0) {
    operator delete(*((void **)a2 + 3));
  }
  *((void *)a2 + 3) = v3;
  *((void *)a2 + 4) = *(void *)v10;
  *(void *)((char *)a2 + 39) = *(void *)&v10[7];
  *((unsigned char *)a2 + 47) = v4;
  __n128 result = v9;
  *uint64_t v7 = v9;
  return result;
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a2, a3);
  int v8 = *(char *)(a3 + 47);
  int v9 = *(char *)(a4 + 47);
  if (v9 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a4 + 47);
  }
  else {
    size_t v10 = *(void *)(a4 + 32);
  }
  if (v9 >= 0) {
    long long v11 = (const void *)(a4 + 24);
  }
  else {
    long long v11 = *(const void **)(a4 + 24);
  }
  if (v8 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a3 + 47);
  }
  else {
    size_t v12 = *(void *)(a3 + 32);
  }
  if (v8 >= 0) {
    int v13 = (const void *)(a3 + 24);
  }
  else {
    int v13 = *(const void **)(a3 + 24);
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  BOOL v17 = v10 < v12;
  if (v15) {
    BOOL v17 = v15 < 0;
  }
  if (v17)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((long long *)a3, (long long *)a4);
    int v18 = *(char *)(a2 + 47);
    int v19 = *(char *)(a3 + 47);
    if (v19 >= 0) {
      size_t v20 = *(unsigned __int8 *)(a3 + 47);
    }
    else {
      size_t v20 = *(void *)(a3 + 32);
    }
    if (v19 >= 0) {
      uint64_t v21 = (const void *)(a3 + 24);
    }
    else {
      uint64_t v21 = *(const void **)(a3 + 24);
    }
    if (v18 >= 0) {
      size_t v22 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      size_t v22 = *(void *)(a2 + 32);
    }
    if (v18 >= 0) {
      __int16 v23 = (const void *)(a2 + 24);
    }
    else {
      __int16 v23 = *(const void **)(a2 + 24);
    }
    if (v22 >= v20) {
      size_t v24 = v20;
    }
    else {
      size_t v24 = v22;
    }
    int v25 = memcmp(v21, v23, v24);
    BOOL v26 = v20 < v22;
    if (v25) {
      BOOL v26 = v25 < 0;
    }
    if (v26)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((long long *)a2, (long long *)a3);
      int v27 = *(char *)(a1 + 47);
      int v28 = *(char *)(a2 + 47);
      if (v28 >= 0) {
        size_t v29 = *(unsigned __int8 *)(a2 + 47);
      }
      else {
        size_t v29 = *(void *)(a2 + 32);
      }
      if (v28 >= 0) {
        uint64_t v30 = (const void *)(a2 + 24);
      }
      else {
        uint64_t v30 = *(const void **)(a2 + 24);
      }
      if (v27 >= 0) {
        size_t v31 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        size_t v31 = *(void *)(a1 + 32);
      }
      if (v27 >= 0) {
        unint64_t v32 = (const void *)(a1 + 24);
      }
      else {
        unint64_t v32 = *(const void **)(a1 + 24);
      }
      if (v31 >= v29) {
        size_t v33 = v29;
      }
      else {
        size_t v33 = v31;
      }
      int v34 = memcmp(v30, v32, v33);
      BOOL v35 = v29 < v31;
      if (v34) {
        BOOL v35 = v34 < 0;
      }
      if (v35)
      {
        *(void *)&double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((long long *)a1, (long long *)a2).n128_u64[0];
      }
    }
  }
  return result;
}

double std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a2, a3, a4);
  int v10 = *(char *)(a4 + 47);
  int v11 = *(char *)(a5 + 47);
  if (v11 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a5 + 47);
  }
  else {
    size_t v12 = *(void *)(a5 + 32);
  }
  if (v11 >= 0) {
    int v13 = (const void *)(a5 + 24);
  }
  else {
    int v13 = *(const void **)(a5 + 24);
  }
  if (v10 >= 0) {
    size_t v14 = *(unsigned __int8 *)(a4 + 47);
  }
  else {
    size_t v14 = *(void *)(a4 + 32);
  }
  if (v10 >= 0) {
    int v15 = (const void *)(a4 + 24);
  }
  else {
    int v15 = *(const void **)(a4 + 24);
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v19 = v12 < v14;
  if (v17) {
    BOOL v19 = v17 < 0;
  }
  if (v19)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((long long *)a4, (long long *)a5);
    int v20 = *(char *)(a3 + 47);
    int v21 = *(char *)(a4 + 47);
    if (v21 >= 0) {
      size_t v22 = *(unsigned __int8 *)(a4 + 47);
    }
    else {
      size_t v22 = *(void *)(a4 + 32);
    }
    if (v21 >= 0) {
      __int16 v23 = (const void *)(a4 + 24);
    }
    else {
      __int16 v23 = *(const void **)(a4 + 24);
    }
    if (v20 >= 0) {
      size_t v24 = *(unsigned __int8 *)(a3 + 47);
    }
    else {
      size_t v24 = *(void *)(a3 + 32);
    }
    if (v20 >= 0) {
      int v25 = (const void *)(a3 + 24);
    }
    else {
      int v25 = *(const void **)(a3 + 24);
    }
    if (v24 >= v22) {
      size_t v26 = v22;
    }
    else {
      size_t v26 = v24;
    }
    int v27 = memcmp(v23, v25, v26);
    BOOL v28 = v22 < v24;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (v28)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((long long *)a3, (long long *)a4);
      int v29 = *(char *)(a2 + 47);
      int v30 = *(char *)(a3 + 47);
      if (v30 >= 0) {
        size_t v31 = *(unsigned __int8 *)(a3 + 47);
      }
      else {
        size_t v31 = *(void *)(a3 + 32);
      }
      if (v30 >= 0) {
        unint64_t v32 = (const void *)(a3 + 24);
      }
      else {
        unint64_t v32 = *(const void **)(a3 + 24);
      }
      if (v29 >= 0) {
        size_t v33 = *(unsigned __int8 *)(a2 + 47);
      }
      else {
        size_t v33 = *(void *)(a2 + 32);
      }
      if (v29 >= 0) {
        int v34 = (const void *)(a2 + 24);
      }
      else {
        int v34 = *(const void **)(a2 + 24);
      }
      if (v33 >= v31) {
        size_t v35 = v31;
      }
      else {
        size_t v35 = v33;
      }
      int v36 = memcmp(v32, v34, v35);
      BOOL v37 = v31 < v33;
      if (v36) {
        BOOL v37 = v36 < 0;
      }
      if (v37)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((long long *)a2, (long long *)a3);
        int v38 = *(char *)(a1 + 47);
        int v39 = *(char *)(a2 + 47);
        if (v39 >= 0) {
          size_t v40 = *(unsigned __int8 *)(a2 + 47);
        }
        else {
          size_t v40 = *(void *)(a2 + 32);
        }
        if (v39 >= 0) {
          size_t v41 = (const void *)(a2 + 24);
        }
        else {
          size_t v41 = *(const void **)(a2 + 24);
        }
        if (v38 >= 0) {
          size_t v42 = *(unsigned __int8 *)(a1 + 47);
        }
        else {
          size_t v42 = *(void *)(a1 + 32);
        }
        if (v38 >= 0) {
          uint64_t v43 = (const void *)(a1 + 24);
        }
        else {
          uint64_t v43 = *(const void **)(a1 + 24);
        }
        if (v42 >= v40) {
          size_t v44 = v40;
        }
        else {
          size_t v44 = v42;
        }
        int v45 = memcmp(v41, v43, v44);
        BOOL v46 = v40 < v42;
        if (v45) {
          BOOL v46 = v45 < 0;
        }
        if (v46)
        {
          *(void *)&double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((long long *)a1, (long long *)a2).n128_u64[0];
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(char *)(a1 + 47);
      int v7 = *(char *)(a2 - 17);
      if (v7 >= 0) {
        size_t v8 = *(unsigned __int8 *)(a2 - 17);
      }
      else {
        size_t v8 = *(void *)(a2 - 32);
      }
      if (v7 >= 0) {
        int v9 = (const void *)(a2 - 40);
      }
      else {
        int v9 = *(const void **)(a2 - 40);
      }
      if (v6 >= 0) {
        size_t v10 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        size_t v10 = *(void *)(a1 + 32);
      }
      if (v6 >= 0) {
        int v11 = (const void *)(a1 + 24);
      }
      else {
        int v11 = *(const void **)(a1 + 24);
      }
      if (v10 >= v8) {
        size_t v12 = v8;
      }
      else {
        size_t v12 = v10;
      }
      int v13 = memcmp(v9, v11, v12);
      BOOL v14 = v8 < v10;
      if (v13) {
        BOOL v14 = v13 < 0;
      }
      if (v14) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((long long *)a1, (long long *)(a2 - 64));
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a1 + 64, a2 - 64);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a1 + 64, a1 + 128, a2 - 64);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *,0>(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64);
      return 1;
    default:
      uint64_t v15 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a1 + 64, a1 + 128);
      uint64_t v16 = a1 + 192;
      if (a1 + 192 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  while (1)
  {
    BOOL v19 = (long long *)(v16 + 24);
    size_t v22 = *(const void **)(v15 + 24);
    uint64_t v21 = v15 + 24;
    int v20 = v22;
    int v23 = *(char *)(v21 + 23);
    int v24 = *(char *)(v16 + 47);
    if (v24 >= 0) {
      size_t v25 = *(unsigned __int8 *)(v16 + 47);
    }
    else {
      size_t v25 = *(void *)(v16 + 32);
    }
    if (v24 >= 0) {
      size_t v26 = (const void *)(v16 + 24);
    }
    else {
      size_t v26 = *(const void **)(v16 + 24);
    }
    if (v23 >= 0) {
      size_t v27 = *(unsigned __int8 *)(v21 + 23);
    }
    else {
      size_t v27 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      BOOL v28 = (const void *)v21;
    }
    else {
      BOOL v28 = v20;
    }
    if (v27 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v27;
    }
    int v30 = memcmp(v26, v28, v29);
    BOOL v31 = v25 < v27;
    if (v30) {
      BOOL v31 = v30 < 0;
    }
    if (v31)
    {
      long long v47 = *(_OWORD *)v16;
      int v48 = *(_DWORD *)(v16 + 16);
      long long v49 = *v19;
      uint64_t v50 = *(void *)(v16 + 40);
      *(void *)BOOL v19 = 0;
      *(void *)(v16 + 32) = 0;
      *(void *)(v16 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
      uint64_t v32 = v17;
      long long v51 = *(_OWORD *)(v16 + 48);
      while (1)
      {
        uint64_t v33 = a1 + v32;
        *(_OWORD *)(v33 + 192) = *(_OWORD *)(a1 + v32 + 128);
        *(_DWORD *)(v33 + 208) = *(_DWORD *)(a1 + v32 + 144);
        int v34 = (void **)(a1 + v32 + 216);
        if (*(char *)(a1 + v32 + 239) < 0) {
          operator delete(*v34);
        }
        *(_OWORD *)int v34 = *(_OWORD *)(v33 + 152);
        *(void *)(a1 + v32 + 232) = *(void *)(v33 + 168);
        *(unsigned char *)(v33 + 175) = 0;
        *(unsigned char *)(v33 + 152) = 0;
        *(_OWORD *)(v33 + 24llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(_OWORD *)(v33 + 176);
        if (v32 == -128) {
          break;
        }
        uint64_t v35 = a1 + v32;
        int v36 = *(char *)(a1 + v32 + 111);
        if (v50 >= 0) {
          size_t v37 = HIBYTE(v50);
        }
        else {
          size_t v37 = *((void *)&v49 + 1);
        }
        if (v50 >= 0) {
          int v38 = &v49;
        }
        else {
          int v38 = (long long *)v49;
        }
        if (v36 >= 0) {
          size_t v39 = *(unsigned __int8 *)(a1 + v32 + 111);
        }
        else {
          size_t v39 = *(void *)(a1 + v32 + 96);
        }
        if (v36 >= 0) {
          size_t v40 = (const void *)(a1 + v32 + 88);
        }
        else {
          size_t v40 = *(const void **)(a1 + v32 + 88);
        }
        if (v39 >= v37) {
          size_t v41 = v37;
        }
        else {
          size_t v41 = v39;
        }
        int v42 = memcmp(v38, v40, v41);
        BOOL v43 = v37 < v39;
        if (v42) {
          BOOL v43 = v42 < 0;
        }
        v32 -= 64;
        if (!v43)
        {
          uint64_t v44 = v35 + 152;
          uint64_t v45 = a1 + v32 + 192;
          BOOL v46 = (_OWORD *)(v35 + 176);
          goto LABEL_65;
        }
      }
      uint64_t v44 = a1 + 24;
      BOOL v46 = (_OWORD *)(a1 + 48);
      uint64_t v45 = a1;
LABEL_65:
      *(_OWORD *)uint64_t v45 = v47;
      *(_DWORD *)(v45 + 16) = v48;
      if (*(char *)(v45 + 47) < 0) {
        operator delete(*(void **)v44);
      }
      *(_OWORD *)uint64_t v44 = v49;
      *(void *)(v44 + 16) = v50;
      *BOOL v46 = v51;
      if (++v18 == 8) {
        return v16 + 64 == a2;
      }
    }
    uint64_t v15 = v16;
    v17 += 64;
    v16 += 64;
    if (v16 == a2) {
      return 1;
    }
  }
}

uint64_t std::istringstream::basic_istringstream[abi:nn180100](uint64_t a1, const std::string *a2)
{
  uint64_t v4 = MEMORY[0x1E4FBA490] + 24;
  uint64_t v5 = MEMORY[0x1E4FBA490] + 64;
  *(void *)(a1 + 12llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = MEMORY[0x1E4FBA490] + 64;
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  size_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 16));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *(void *)a1 = v4;
  *(void *)(a1 + 12llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v5;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 8llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 8;
  std::string::operator=((std::string *)(a1 + 80), a2);
  *(void *)(a1 + 104) = 0;
  char v9 = *(unsigned char *)(a1 + 103);
  if (v9 < 0)
  {
    uint64_t v10 = *(void *)(a1 + 80);
    unint64_t v11 = *(void *)(a1 + 88);
  }
  else
  {
    uint64_t v10 = a1 + 80;
    unint64_t v11 = *(unsigned __int8 *)(a1 + 103);
  }
  int v12 = *(_DWORD *)(a1 + 112);
  if ((v12 & 8) != 0)
  {
    *(void *)(a1 + 104) = v10 + v11;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v10;
    *(void *)(a1 + 48) = v10 + v11;
  }
  if ((v12 & 0x10) != 0)
  {
    *(void *)(a1 + 104) = v10 + v11;
    std::string::size_type v13 = v9 < 0 ? (*(void *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize((std::string *)(a1 + 80), v13, 0);
    uint64_t v14 = *(char *)(a1 + 103) < 0 ? *(void *)(a1 + 88) : *(unsigned __int8 *)(a1 + 103);
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v10;
    *(void *)(a1 + 72) = v10 + v14;
    if ((*(unsigned char *)(a1 + 112) & 3) != 0)
    {
      if (v11 >> 31)
      {
        uint64_t v15 = ((v11 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v16 = 0x7FFFFFFF * ((v15 + ((v11 - 0x80000000 - v15) >> 1)) >> 30);
        v10 += v16 + 0x7FFFFFFF;
        unint64_t v11 = v11 - v16 - 0x7FFFFFFF;
        *(void *)(a1 + 64) = v10;
      }
      if (v11) {
        *(void *)(a1 + 64) = v10 + v11;
      }
    }
  }
  return a1;
}

uint64_t AGCLLVMUserShader::setupLIBMetadata(uint32x2_t *a1, unsigned int a2, _WORD *a3, uint64_t a4, uint64_t a5, llvm::StringMapImpl *a6, llvm::StringMapImpl *a7)
{
  char v10 = 0;
  unsigned int v35 = 1;
  unsigned int v36 = a2;
  unsigned int v34 = 0;
  unsigned int v11 = *(_DWORD *)(a4 + 8);
  if (v11 > a2)
  {
    char v10 = 0;
    size_t v26 = a1 + 46;
    while (1)
    {
      uint64_t v13 = a2;
      if (isStringMDNode(*(llvm::MDString **)(a4 - 8 * v11 + 8 * a2), "implicit")
        || isStringMDNode(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8 * v13), "explicit"))
      {
        goto LABEL_5;
      }
      if (parseMDInt("air.imageblock_data_size", a4, &v36, &v34))
      {
        a2 = v36;
        unsigned int v11 = *(_DWORD *)(a4 + 8);
        char v10 = 1;
        goto LABEL_8;
      }
      if ((parseMDInt("air.arg_type_align_size", a4, &v36, &v35) & 1) == 0) {
        break;
      }
LABEL_7:
      a2 = v36;
      unsigned int v11 = *(_DWORD *)(a4 + 8);
LABEL_8:
      if (a2 >= v11) {
        goto LABEL_25;
      }
    }
    LODWORD(v13) = v36;
    if (isStringMDNode(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8 * v36), "air.alias_implicit_imageblock"))
    {
      *a3 = 0;
LABEL_5:
      unsigned int v14 = v13 + 1;
    }
    else
    {
      unsigned int __val = 0;
      if (parseMDInt("air.alias_implicit_imageblock_render_target", a4, &v36, &__val))
      {
        if (((*(unsigned __int8 *)(a5 + 32) >> __val) & 1) == 0)
        {
          std::to_string(&v32, __val);
          int v20 = std::string::insert(&v32, 0, "Aliasing implicit image block at unset color attachment: ");
          std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          uint64_t v29 = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          if (v29 >= 0) {
            size_t v22 = __p;
          }
          else {
            size_t v22 = (void **)__p[0];
          }
          if (v29 >= 0) {
            std::string::size_type v23 = HIBYTE(v29);
          }
          else {
            std::string::size_type v23 = (std::string::size_type)__p[1];
          }
          std::string::append((std::string *)((char *)&a1[1] + *(void *)(*(void *)a1 - 24)), (const std::string::value_type *)v22, v23);
          if (SHIBYTE(v29) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v32.__r_.__value_.__l.__data_);
          }
          return 0;
        }
        *a3 = *(_DWORD *)(*(void *)((char *)&v26[4] + *(void *)(*(void *)a1 - 24)) + 868)
            * (*(_DWORD *)(a5 + 4 * __val) >> 12);
        goto LABEL_7;
      }
      v32.__r_.__value_.__r.__words[0] = 0;
      if (parseMDType<llvm::MDNode>("air.struct_type_info", a4, &v36, &v32))
      {
        __p[0] = 0;
        __p[1] = 0;
        LODWORD(v29) = -1;
        uint64_t v30 = 0;
        char v31 = 0;
        uint64_t v15 = v32.__r_.__value_.__r.__words[0];
        unint64_t v16 = a1;
        uint64_t v17 = a6;
        goto LABEL_21;
      }
      uint64_t v27 = 0;
      if (parseMDType<llvm::MDNode>("air.imageblock_master", a4, &v36, &v27))
      {
        __p[0] = 0;
        __p[1] = 0;
        LODWORD(v29) = -1;
        uint64_t v30 = 0;
        char v31 = 0;
        uint64_t v15 = v27;
        unint64_t v16 = a1;
        uint64_t v17 = a7;
LABEL_21:
        if ((AGCLLVMUserShader::setupLIBStruct(v16, v15, __p, v17) & 1) == 0) {
          return 0;
        }
        goto LABEL_7;
      }
      unsigned int v14 = v36 + 1;
    }
    unsigned int v36 = v14;
    goto LABEL_7;
  }
LABEL_25:
  unint64_t v18 = ((unint64_t)(v35 + (unsigned __int16)*a3) - 1) / v35 * v35;
  *a3 = v18;
  if (v10)
  {
    a1[539] = vmax_u32(a1[539], (uint32x2_t)vdup_n_s32(v34 + (unsigned __int16)v18));
    if ((*(unsigned char *)(a5 + 35) & 2) != 0)
    {
      std::string::append((std::string *)((char *)&a1[1] + *(void *)(*(void *)a1 - 24)), "Large MRT not supported with explicit image blocks");
      return 0;
    }
  }
  else
  {
    a1[539] = vmax_u32(a1[539], (uint32x2_t)vdup_n_s32(v34));
  }
  return 1;
}

uint64_t AGCLLVMUserShader::setupLIBStruct(void *a1, uint64_t a2, _DWORD *a3, llvm::StringMapImpl *a4)
{
  unsigned int v67 = 0;
  if (!*(_DWORD *)(a2 + 8)) {
    return 1;
  }
  std::string::size_type v53 = *(void *)(MEMORY[0x1E4FBA410] + 24);
  std::string::size_type v54 = *MEMORY[0x1E4FBA410];
  unint64_t v56 = a1 + 25;
  uint64_t v57 = a1 + 23;
  long long v51 = a1 + 19;
  unint64_t v52 = a1 + 21;
  unsigned int v55 = a1 + 24;
  LODWORD(v7) = 1;
  while (1)
  {
    uint64_t v66 = 0;
    BOOL v8 = parseMDType<llvm::MDNode>("air.struct_type_info", a2, &v67, &v66);
    long long v63 = 0uLL;
    LODWORD(v64) = -1;
    *((void *)&v64 + 1) = 0;
    char v65 = 0;
    unsigned int v9 = v67;
    int v10 = v67 + 1;
    LODWORD(v69.__r_.__value_.__l.__data_) = v67;
    int v11 = parseMDInt(0, a2, (unsigned int *)&v69, &v63);
    LODWORD(v63) = v63 + *a3;
    unsigned int v67 = v9 + 2;
    LODWORD(v69.__r_.__value_.__l.__data_) = v10;
    int v12 = parseMDInt(0, a2, (unsigned int *)&v69, (_DWORD *)&v63 + 1);
    LODWORD(v69.__r_.__value_.__l.__data_) = v9 + 2;
    int v13 = parseMDInt(0, a2, (unsigned int *)&v69, (_DWORD *)&v63 + 2);
    unsigned int v14 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v9 + 3));
    if (v14 && *(unsigned char *)v14) {
      unsigned int v14 = 0;
    }
    if (v14) {
      int v15 = v11 & v12 & v13;
    }
    else {
      int v15 = 0;
    }
    uint64_t String = (void *)llvm::MDString::getString(v14);
    if (String) {
      std::string::basic_string[abi:nn180100](&__s, String, v17);
    }
    else {
      memset(&__s, 0, sizeof(__s));
    }
    unsigned int v18 = v9 + 5;
    unsigned int v67 = v9 + 5;
    BOOL v19 = *(unsigned char **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v9 + 4));
    if (v19)
    {
      if (*v19) {
        int v20 = 0;
      }
      else {
        int v20 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v9 + 4));
      }
    }
    else
    {
      int v20 = 0;
    }
    if (v20) {
      int v21 = v15;
    }
    else {
      int v21 = 0;
    }
    size_t v22 = (void *)llvm::MDString::getString(v20);
    if (v22)
    {
      std::string::basic_string[abi:nn180100](&__dst, v22, v23);
    }
    else
    {
      std::string __dst = 0;
      std::string::size_type v60 = 0;
      uint64_t v61 = 0;
    }
    if (v18 < *(_DWORD *)(a2 + 8))
    {
      if (parseMDInt("air.raster_order_group", a2, &v67, &v64))
      {
        int v24 = v64;
        if (v64 >= 7) {
          int v24 = 7;
        }
        LODWORD(v64) = v24;
      }
      if (a3[4] != -1) {
        LODWORD(v64) = a3[4];
      }
      if (v67 < *(_DWORD *)(a2 + 8) && parseMDInt("air.render_target", a2, &v67, (_DWORD *)&v63 + 3))
      {
        LOBYTE(size) = *((unsigned char *)&__s.__r_.__value_.__s + 23);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__s.__r_.__value_.__l.__size_)
          {
            unsigned int v74 = 1;
            std::string::__init_copy_ctor_external(&v73, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            LOBYTE(size) = *((unsigned char *)&__s.__r_.__value_.__s + 23);
            goto LABEL_37;
          }
        }
        else if (*((unsigned char *)&__s.__r_.__value_.__s + 23))
        {
          unsigned int v74 = 1;
          std::string v73 = __s;
LABEL_37:
          std::string::size_type size = size;
          p_s = &__s;
          if ((size & 0x80u) != 0)
          {
            std::string::size_type size = __s.__r_.__value_.__l.__size_;
            p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          }
          int v27 = p_s->__r_.__value_.__s.__data_[size - 1];
          if ((v27 & 0x80000000) == 0
            && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v27 + 60) & 0x400) != 0)
          {
            std::string::basic_string(&v69, &__s, 0, size - 1, (std::allocator<char> *)&v68);
            if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v73.__r_.__value_.__l.__data_);
            }
            std::string v73 = v69;
            std::string::size_type v28 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v28 = __s.__r_.__value_.__l.__size_;
            }
            std::string::basic_string(&v68, &__s, v28 - 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v75);
            std::istringstream::basic_istringstream[abi:nn180100]((uint64_t)&v69, &v68);
            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v68.__r_.__value_.__l.__data_);
            }
            MEMORY[0x1CB7A05D0](&v69, &v74);
            v69.__r_.__value_.__r.__words[0] = v54;
            *(std::string::size_type *)((char *)v69.__r_.__value_.__r.__words + *(void *)(v54 - 24)) = v53;
            v69.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
            if (v71 < 0) {
              operator delete(__p);
            }
            std::streambuf::~streambuf();
            std::istream::~istream();
            MEMORY[0x1CB7A0710](&v72);
          }
          char v29 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            switch(*((unsigned char *)&v73.__r_.__value_.__s + 23))
            {
              case 3:
                BOOL v30 = LOWORD(v73.__r_.__value_.__l.__data_) == 28265 && v73.__r_.__value_.__s.__data_[2] == 116;
                goto LABEL_60;
              case 4:
                std::string v32 = v56;
                if (LODWORD(v73.__r_.__value_.__l.__data_) == 1953393013) {
                  goto LABEL_94;
                }
                uint64_t v33 = &v73;
                goto LABEL_77;
              case 5:
                BOOL v34 = LODWORD(v73.__r_.__value_.__l.__data_) == 1919903859 && v73.__r_.__value_.__s.__data_[4] == 116;
                std::string v32 = v55;
                if (v34) {
                  goto LABEL_94;
                }
                BOOL v35 = LODWORD(v73.__r_.__value_.__l.__data_) == 1634692198 && v73.__r_.__value_.__s.__data_[4] == 116;
                goto LABEL_86;
              case 6:
                BOOL v36 = LODWORD(v73.__r_.__value_.__l.__data_) == 1869116277
                   && WORD2(v73.__r_.__value_.__r.__words[0]) == 29810;
                goto LABEL_92;
              default:
                goto LABEL_93;
            }
          }
          switch(v73.__r_.__value_.__l.__size_)
          {
            case 3uLL:
              BOOL v30 = *(_WORD *)v73.__r_.__value_.__l.__data_ == 28265
                 && *(unsigned char *)(v73.__r_.__value_.__r.__words[0] + 2) == 116;
LABEL_60:
              std::string v32 = v56;
              if (!v30) {
                goto LABEL_93;
              }
              break;
            case 4uLL:
              std::string v32 = v56;
              if (*(_DWORD *)v73.__r_.__value_.__l.__data_ != 1953393013)
              {
                uint64_t v33 = (std::string *)v73.__r_.__value_.__r.__words[0];
LABEL_77:
                int data = (int)v33->__r_.__value_.__l.__data_;
                std::string v32 = v51;
                if (data != 1718378856) {
                  goto LABEL_93;
                }
              }
              break;
            case 5uLL:
              BOOL v38 = *(_DWORD *)v73.__r_.__value_.__l.__data_ == 1919903859
                 && *(unsigned char *)(v73.__r_.__value_.__r.__words[0] + 4) == 116;
              std::string v32 = v55;
              if (!v38)
              {
                BOOL v35 = *(_DWORD *)v73.__r_.__value_.__l.__data_ == 1634692198
                   && *(unsigned char *)(v73.__r_.__value_.__r.__words[0] + 4) == 116;
LABEL_86:
                std::string v32 = v52;
                if (!v35) {
                  goto LABEL_93;
                }
              }
              break;
            case 6uLL:
              BOOL v36 = *(_DWORD *)v73.__r_.__value_.__l.__data_ == 1869116277
                 && *(_WORD *)(v73.__r_.__value_.__r.__words[0] + 4) == 29810;
LABEL_92:
              std::string v32 = v55;
              if (!v36) {
                goto LABEL_93;
              }
              break;
            default:
LABEL_93:
              std::string v32 = v57;
              break;
          }
LABEL_94:
          uint64_t v31 = *(void *)((char *)v32 + *(void *)(*a1 - 24) + 32);
          if (v74 >= 2) {
            uint64_t v31 = llvm::FixedVectorType::get();
          }
          if (v29 < 0) {
            operator delete(v73.__r_.__value_.__l.__data_);
          }
          goto LABEL_98;
        }
        uint64_t v31 = 0;
LABEL_98:
        *((void *)&v64 + 1) = v31;
        char v65 = 1;
      }
    }
    if (!v8)
    {
      if (a4)
      {
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v39 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v39 = __s.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:nn180100]((uint64_t)&v73, v39 + 1);
        if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v40 = &v73;
        }
        else {
          size_t v40 = (std::string *)v73.__r_.__value_.__r.__words[0];
        }
        if (v39)
        {
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v41 = &__s;
          }
          else {
            size_t v41 = (std::string *)__s.__r_.__value_.__r.__words[0];
          }
          memmove(v40, v41, v39);
        }
        *(_WORD *)((char *)&v40->__r_.__value_.__l.__data_ + v39) = 64;
        if (v61 >= 0) {
          p_dst = (const std::string::value_type *)&__dst;
        }
        else {
          p_dst = (const std::string::value_type *)__dst;
        }
        if (v61 >= 0) {
          std::string::size_type v43 = HIBYTE(v61);
        }
        else {
          std::string::size_type v43 = v60;
        }
        uint64_t v44 = std::string::append(&v73, p_dst, v43);
        std::string::size_type v45 = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v46 = &v69;
        }
        else {
          BOOL v46 = (std::string *)v69.__r_.__value_.__r.__words[0];
        }
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v47 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v47 = v69.__r_.__value_.__l.__size_;
        }
        uint64_t v48 = *llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::try_emplace<>(a4, v46, v47);
        long long v49 = v64;
        *(_OWORD *)(v48 + 8) = v63;
        *(unsigned char *)(v48 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v65;
        *(_OWORD *)(v48 + 24) = v49;
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v69.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
      }
      goto LABEL_130;
    }
    if ((AGCLLVMUserShader::setupLIBStruct(a1, v66, &v63, a4) & 1) == 0) {
      break;
    }
LABEL_130:
    if (SHIBYTE(v61) < 0) {
      operator delete(__dst);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = v7 & v21;
    if (v67 >= *(_DWORD *)(a2 + 8)) {
      return v7;
    }
  }
  if (SHIBYTE(v61) < 0) {
    operator delete(__dst);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  return 0;
}

uint64_t AGCLLVMUserShader::markNoAliasForGL(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)this - 24) + this + 368);
  uint64_t v2 = v1 + 24;
  uint64_t v3 = *(void *)(v1 + 32);
  if (v3 != v1 + 24)
  {
    while (1)
    {
      uint64_t v4 = v3 ? v3 - 56 : 0;
      this = llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v4);
      if ((this & 1) == 0) {
        break;
      }
LABEL_6:
      uint64_t v3 = *(void *)(v3 + 8);
      if (v3 == v2) {
        return this;
      }
    }
    if (*(_WORD *)(v4 + 18))
    {
      this = llvm::Function::BuildLazyArguments((llvm::Function *)v4);
      uint64_t v5 = *(void *)(v4 + 88);
      if (*(_WORD *)(v4 + 18))
      {
        this = llvm::Function::BuildLazyArguments((llvm::Function *)v4);
        uint64_t v6 = *(void *)(v4 + 88);
LABEL_13:
        uint64_t v7 = v6 + 40 * *(void *)(v4 + 96);
        while (v5 != v7)
        {
          unsigned int v8 = *(_DWORD *)(*(void *)v5 + 8);
          if (v8 == 15)
          {
            if ((v8 & 0xFE) == 0x12) {
              unsigned int v8 = *(_DWORD *)(**(void **)(*(void *)v5 + 16) + 8);
            }
            if (v8 <= 0xFF) {
              this = llvm::Function::addParamAttr();
            }
          }
          v5 += 40;
        }
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v5 = *(void *)(v4 + 88);
    }
    uint64_t v6 = v5;
    goto LABEL_13;
  }
  return this;
}

uint64_t AGCLLVMUserShader::parseMaxTotalThreadsPerThreadgroup(AGCLLVMUserShader *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v4 = v3 + 24;
  uint64_t v5 = *(void *)(v3 + 32);
  if (v5 != v3 + 24)
  {
    uint64_t v6 = 0;
    do
    {
      if (llvm::Function::hasFnAttribute())
      {
        uint64_t FnAttribute = llvm::Function::getFnAttribute();
        ValueAsuint64_t String = (void *)llvm::Attribute::getValueAsString((llvm::Attribute *)&FnAttribute);
        if (ValueAsString) {
          std::string::basic_string[abi:nn180100](&__p, ValueAsString, v8);
        }
        else {
          memset(&__p, 0, sizeof(__p));
        }
        unsigned int v9 = std::stoi(&__p, 0, 10);
        uint64_t v6 = v6 <= v9 ? v9 : v6;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v4);
    if (v6) {
      return v6;
    }
    uint64_t v2 = *(void *)this;
  }
  int v10 = *(llvm::Module **)((char *)this + *(void *)(v2 - 24) + 368);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"air.kernel";
  __int16 v21 = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v10, (const llvm::Twine *)&__p);
  if (!NamedMetadata) {
    return 0;
  }
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  uint64_t v6 = 0;
  unint64_t v13 = *(unsigned int *)(Operand + 8);
  if (v13 >= 4)
  {
    uint64_t v14 = Operand;
    uint64_t v15 = 3;
    while (1)
    {
      unint64_t v16 = *(unsigned __int8 **)(v14 - 8 * v13 + 8 * v15);
      unint64_t v17 = *v16;
      if (v17 <= 0x22 && ((0x7FFFFFFF0uLL >> v17) & 1) != 0)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        if (*((_DWORD *)v16 + 2)) {
          break;
        }
      }
LABEL_26:
      if (++v15 >= v13) {
        return 0;
      }
    }
    while (1)
    {
      LODWORD(FnAttribute) = 0;
      if (parseMDInt("air.max_work_group_size", (uint64_t)v16, (unsigned int *)&__p, &FnAttribute)) {
        return FnAttribute;
      }
      if (++LODWORD(__p.__r_.__value_.__l.__data_) >= *((_DWORD *)v16 + 2))
      {
        unint64_t v13 = *(unsigned int *)(v14 + 8);
        goto LABEL_26;
      }
    }
  }
  return v6;
}

uint64_t AGCLLVMUserShader::buildStageInOriginCommon(llvm::Type ***this, llvm::Type *a2, llvm::Value *a3, llvm::Value *a4)
{
  if (a3)
  {
    uint64_t AlignedLoad = a3;
  }
  else
  {
    if (!this[532])
    {
      uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
      unsigned int v7 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 400))();
      v21[0] = "agc.stagein_buffer_pointer.";
      v21[2] = v7;
      __int16 v22 = 2051;
      unsigned int v8 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 400))();
      GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v6, (const llvm::Twine *)v21, v8, 24, 5, 0);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 530), (uint64_t)GlobalBufferBinding);
    }
    int v10 = (uint64_t *)((char *)this + (void)*(*this - 3));
    int v11 = this[532];
    __int16 v22 = 257;
    int v12 = AGCLLVMBuilder::tryDeducePointeeType(v11, a2);
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v10 + 5, v12, (uint64_t)v11, 0, (uint64_t)v21);
  }
  unint64_t v13 = (char *)this + (void)*(*this - 3);
  uint64_t v14 = (llvm::Type *)*((void *)v13 + 29);
  uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v13 + 40), v14, AlignedLoad, v15, (const llvm::Twine *)v21);
  unint64_t v17 = (uint64_t *)((char *)this + (void)*(*this - 3));
  __int16 v22 = 257;
  BOOL v19 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v18);
  return llvm::IRBuilderBase::CreateAlignedLoad(v17 + 5, v19, (uint64_t)GEP, 0, (uint64_t)v21);
}

uint64_t AGCLLVMUserShader::buildStageInSizeCommon(llvm::Type ***this, llvm::Type *a2, llvm::Value *a3, llvm::Value *a4)
{
  if (a3)
  {
    uint64_t AlignedLoad = a3;
  }
  else
  {
    if (!this[532])
    {
      uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
      unsigned int v7 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 400))();
      v21[0] = "agc.stagein_buffer_pointer.";
      v21[2] = v7;
      __int16 v22 = 2051;
      unsigned int v8 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 400))();
      GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v6, (const llvm::Twine *)v21, v8, 24, 5, 0);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 530), (uint64_t)GlobalBufferBinding);
    }
    int v10 = (uint64_t *)((char *)this + (void)*(*this - 3));
    int v11 = this[532];
    __int16 v22 = 257;
    int v12 = AGCLLVMBuilder::tryDeducePointeeType(v11, a2);
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v10 + 5, v12, (uint64_t)v11, 0, (uint64_t)v21);
  }
  unint64_t v13 = (char *)this + (void)*(*this - 3);
  uint64_t v14 = (llvm::Type *)*((void *)v13 + 29);
  uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v13 + 40), v14, AlignedLoad, v15, (const llvm::Twine *)v21);
  unint64_t v17 = (uint64_t *)((char *)this + (void)*(*this - 3));
  __int16 v22 = 257;
  BOOL v19 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v18);
  return llvm::IRBuilderBase::CreateAlignedLoad(v17 + 5, v19, (uint64_t)GEP, 0, (uint64_t)v21);
}

uint64_t AGCLLVMUserShader::buildGlobalSizeCommon(AGCLLVMUserShader *this, llvm::Type *a2, unsigned int a3, llvm::Value *AlignedLoad, llvm::Value *a5)
{
  int v10 = (llvm::Type *)llvm::PointerType::get();
  if (!AlignedLoad)
  {
    if (!*((void *)this + 535))
    {
      int v11 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24));
      uint64_t v12 = **(void **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      if (v11 == 1) {
        unsigned int v13 = (*(uint64_t (**)(void))(v12 + 992))();
      }
      else {
        unsigned int v13 = (*(uint64_t (**)(void))(v12 + 368))();
      }
      v48[0] = "agc.indirect_wg_size_buffer_pointer.";
      uint64_t v49 = v13;
      __int16 v50 = 2051;
      GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v10, (const llvm::Twine *)v48, v13, 12, 5, 0);
      llvm::ValueHandleBase::operator=((AGCLLVMUserShader *)((char *)this + 4264), (uint64_t)GlobalBufferBinding);
    }
    uint64_t v15 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
    unint64_t v16 = (llvm::Type **)*((void *)this + 535);
    __int16 v50 = 257;
    unint64_t v17 = AGCLLVMBuilder::tryDeducePointeeType(v16, v9);
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v15 + 5, v17, (uint64_t)v16, 0, (uint64_t)v48);
  }
  unsigned int v18 = (char *)this + *(void *)(*(void *)this - 24);
  BOOL v19 = (llvm::Type *)*((void *)v18 + 29);
  int v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v50 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v18 + 40), v19, AlignedLoad, v20, (const llvm::Twine *)v48);
  __int16 v22 = (char *)this + *(void *)(*(void *)this - 24);
  size_t v23 = (llvm::Type *)*((void *)v22 + 29);
  uint64_t v24 = (uint64_t)(v22 + 40);
  __int16 v50 = 257;
  uint64_t v25 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v22 + 5, v23, GEP, 0, (uint64_t)v48);
  __int16 v47 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v24, 38, v25, (uint64_t)a2, (uint64_t)v46);
  if (!a5)
  {
    if (!*((void *)this + 538))
    {
      int v28 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24));
      uint64_t v29 = **(void **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      if (v28 == 1) {
        unsigned int v30 = (*(uint64_t (**)(void))(v29 + 984))();
      }
      else {
        unsigned int v30 = (*(uint64_t (**)(void))(v29 + 360))();
      }
      v48[0] = "agc.indirect_wg_count_buffer_pointer.";
      uint64_t v49 = v30;
      __int16 v50 = 2051;
      uint64_t v31 = AGCLLVMUserObject::createGlobalBufferBinding(this, v10, (const llvm::Twine *)v48, v30, 12, 5, 0);
      llvm::ValueHandleBase::operator=((AGCLLVMUserShader *)((char *)this + 4288), (uint64_t)v31);
    }
    std::string v32 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
    uint64_t v33 = (llvm::Type **)*((void *)this + 538);
    __int16 v50 = 257;
    BOOL v34 = AGCLLVMBuilder::tryDeducePointeeType(v33, v26);
    a5 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v32 + 5, v34, (uint64_t)v33, 0, (uint64_t)v48);
  }
  BOOL v35 = (char *)this + *(void *)(*(void *)this - 24);
  BOOL v36 = (llvm::Type *)*((void *)v35 + 29);
  size_t v37 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v50 = 257;
  uint64_t v38 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v35 + 40), v36, a5, v37, (const llvm::Twine *)v48);
  std::string::size_type v39 = (char *)this + *(void *)(*(void *)this - 24);
  size_t v40 = (llvm::Type *)*((void *)v39 + 29);
  uint64_t v41 = (uint64_t)(v39 + 40);
  __int16 v50 = 257;
  uint64_t v42 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v39 + 5, v40, v38, 0, (uint64_t)v48);
  __int16 v47 = 257;
  std::string::size_type v43 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v41, 38, v42, (uint64_t)a2, (uint64_t)v46);
  uint64_t v44 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v50 = 257;
  return llvm::IRBuilderBase::CreateMul(v44, Cast, v43, (const llvm::Twine *)v48);
}

uint64_t AGCLLVMUserShader::buildTileThreadIndexInThreadgroup(AGCLLVMUserShader *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v16 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v17, (llvm::IRBuilderBase *)(v6 + 40));
  int v18 = *((_DWORD *)v6 + 34);
  unsigned int v7 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildQuadElement(v5, (uint64_t)&v16, (uint64_t)a2);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  unsigned int v8 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  unsigned int v9 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, llvm::Type *))(*(void *)this + 456))(this, a2);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v15 = 257;
  uint64_t Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v8, v9, v10, (const llvm::Twine *)v14);
  v13[16] = 257;
  return llvm::IRBuilderBase::CreateAdd(v8, Shl, v7, (const llvm::Twine *)v13);
}

llvm::Value *AGCLLVMUserShader::buildTileQuadgroupsPerThreadgroup(AGCLLVMUserShader *this, llvm::Type *a2)
{
  uint64_t v4 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v5 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, void))(*(void *)this + 464))(this, 0);
  uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v38 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v37);
  unsigned int v8 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  unsigned int v9 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v36 = 257;
  Not = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v8, v9, (const llvm::Twine *)v35);
  __int16 v34 = 257;
  int v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, Add, Not, (const llvm::Twine *)v33);
  uint64_t v12 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  unsigned int v13 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, uint64_t))(*(void *)this + 464))(this, 1);
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v32 = 257;
  __int16 v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v12, v13, v14, (const llvm::Twine *)v31);
  long long v16 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v30 = 257;
  int v18 = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v16, v17, (const llvm::Twine *)v29);
  __int16 v28 = 257;
  BOOL v19 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v12, v15, v18, (const llvm::Twine *)v27);
  __int16 v26 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v4, v11, v19, (const llvm::Twine *)v25);
  __int16 v21 = (llvm::Value *)llvm::ConstantInt::get();
  v24[16] = 257;
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v4, Mul, v21, (const llvm::Twine *)v24);
  return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32), LShr, a2);
}

llvm::Value *AGCLLVMUserShader::buildTileThreadsPerGrid(AGCLLVMUserShader *this, llvm::Type *a2, int a3)
{
  if (!a3)
  {
    uint64_t v6 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    unsigned int v7 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, void))(*(void *)this + 464))(this, 0);
    unsigned int v8 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, uint64_t))(*(void *)this + 464))(this, 2);
LABEL_7:
    __int16 v12 = 257;
    uint64_t Mul = llvm::IRBuilderBase::CreateMul(v6, v7, v8, (const llvm::Twine *)v11);
    goto LABEL_8;
  }
  if (a3 == 1)
  {
    uint64_t v6 = (AGCLLVMUserShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    unsigned int v7 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, uint64_t))(*(void *)this + 464))(this, 1);
    unsigned int v8 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, uint64_t))(*(void *)this + 464))(this, 3);
    goto LABEL_7;
  }
  if (a3 != 2)
  {
    unsigned int v9 = 0;
    return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32), v9, a2);
  }
  uint64_t Mul = llvm::ConstantInt::get();
LABEL_8:
  unsigned int v9 = (llvm::Value *)Mul;
  return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32), v9, a2);
}

llvm::Value *AGCLLVMUserShader::buildTileThreadgroupsPerGrid(AGCLLVMUserShader *this, llvm::Type *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)this + 464);
LABEL_7:
      uint64_t v5 = v6();
      goto LABEL_8;
    case 1:
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)this + 464);
      goto LABEL_7;
    case 2:
      uint64_t v5 = llvm::ConstantInt::get();
LABEL_8:
      unsigned int v7 = (llvm::Value *)v5;
      goto LABEL_10;
  }
  unsigned int v7 = 0;
LABEL_10:
  unsigned int v8 = (llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32);
  return AGCLLVMBuilder::truncateToSmall(v8, v7, a2);
}

uint64_t virtual thunk to'AGCLLVMUserTileShader::enableImgWBlkPBECmp(AGCLLVMUserTileShader *this)
{
  return *((unsigned __int8 *)this + *(void *)(*(void *)this - 232) + 4512);
}

uint64_t virtual thunk to'AGCLLVMUserTileShader::getTextureWriteFPRoundingMode(AGCLLVMUserTileShader *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 224) + 4508);
}

uint64_t virtual thunk to'AGCLLVMUserTileShader::needsThreadgroupMemoryOOBChecks(AGCLLVMUserTileShader *this)
{
  uint64_t v1 = (AGCLLVMUserTileShader *)((char *)this + *(void *)(*(void *)this - 216));
  if (*(unsigned char *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 1766)) {
    return AGCLLVMUserObject::isThreadgroupMemoryUsed(v1);
  }
  else {
    return 0;
  }
}

uint64_t virtual thunk to'AGCLLVMUserTileShader::isDMAPromotionDisabled(AGCLLVMUserTileShader *this)
{
  return *((unsigned __int8 *)this + *(void *)(*(void *)this - 208) + 4528);
}

BOOL virtual thunk to'AGCLLVMUserTileShader::enableSoftFaultOptimization(AGCLLVMUserTileShader *this)
{
  return *((unsigned char *)this + *(void *)(*(void *)this - 200) + 4530) == 0;
}

uint64_t virtual thunk to'AGCLLVMUserTileShader::getBufferBoundsCheckMode(AGCLLVMUserTileShader *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 192) + 4520);
}

uint64_t virtual thunk to'AGCLLVMUserTileShader::getTempRegistersLimit(AGCLLVMUserTileShader *this, unsigned int *a2)
{
  return AGCLLVMUserTileShader::getTempRegistersLimit((AGCLLVMUserTileShader *)((char *)this + *(void *)(*(void *)this - 176)), a2);
}

uint64_t AGCLLVMUserTileShader::getTempRegistersLimit(AGCLLVMUserTileShader *this, unsigned int *a2)
{
  uint64_t v4 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *a2 = *(_DWORD *)(v4[50] + 884);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 96))(v4);
  if (result)
  {
    *a2 = result;
    uint64_t result = result != *(_DWORD *)(v4[50] + 884);
  }
  if (*((_DWORD *)this + 1129))
  {
    uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
    AGCLLVMGen3TargetLowerer::getTempRegistersLimitAcrossTileSizesForTileShader(v7, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 464), *((_DWORD *)this + 1129));
    return 1;
  }
  return result;
}

BOOL virtual thunk to'AGCLLVMUserTileShader::constructReply(AGCLLVMUserTileShader *this)
{
  return AGCLLVMUserTileShader::constructReply((AGCLLVMUserTileShader *)((char *)this
                                                                       + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMUserTileShader::constructReply(AGCLLVMUserTileShader *this)
{
  BOOL result = AGCDeserializedReply::deserialize((AGCLLVMUserTileShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUserTileShader *)((char *)this + *(void *)(*(void *)this - 24)));
    int v3 = AGCLLVMUserObject::constructFlatReply(this);
    uint64_t v4 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v5 = (flatbuffers::FlatBufferBuilder *)(v4 + 2472);
    v4[2542] = 1;
    int v6 = *((_DWORD *)v4 + 626) - *((_DWORD *)v4 + 630) + *((_DWORD *)v4 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v4 + 2472), v3);
    int v7 = flatbuffers::FlatBufferBuilder::EndTable(v5, v6);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMUserTileShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472), v7, v8);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserTileShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
    unsigned int v9 = (char *)this + *(void *)(*(void *)this - 24);
    int v10 = (flatbuffers::FlatBufferBuilder *)(v9 + 2568);
    int v11 = *((unsigned __int8 *)this + 4504);
    int v12 = *((unsigned __int8 *)this + 16);
    int v13 = *((_DWORD *)this + 1079);
    int v14 = *((_DWORD *)this + 1129);
    int v15 = *((unsigned __int8 *)this + 12);
    v9[2638] = 1;
    int v16 = *((_DWORD *)v9 + 650) - *((_DWORD *)v9 + 654) + *((_DWORD *)v9 + 652);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v9 + 321, 10, v14);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v10, 8, v13);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10, 12, v15, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10, 6, v12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10, 4, v11, 0);
    LODWORD(v1llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = flatbuffers::FlatBufferBuilder::EndTable(v10, v16);
    int v17 = AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(this);
    int v18 = (char *)this + *(void *)(*(void *)this - 24);
    BOOL v19 = (flatbuffers::FlatBufferBuilder *)(v18 + 2568);
    v18[2638] = 1;
    int v20 = *((_DWORD *)v18 + 650) - *((_DWORD *)v18 + 654) + *((_DWORD *)v18 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::FragmentShaderInfo>((flatbuffers::FlatBufferBuilder *)(v18 + 2568), (int)v10);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v19, v17);
    __int16 v21 = (AGCLLVMUserTileShader *)((char *)this + *(void *)(*(void *)this - 24) + 2568);
    int v22 = flatbuffers::FlatBufferBuilder::EndTable(v19, v20);
    flatbuffers::FlatBufferBuilder::Finish(v21, v22, v23);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserTileShader *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
    uint64_t v24 = (char *)this + *(void *)(*(void *)this - 24);
    if (*((void *)v24 + 87))
    {
      uint64_t v25 = v24 + 696;
      uint64_t v26 = *((void *)v24 + 88);
      int v27 = v24 + 1256;
      if (v26) {
        int v27 = v25;
      }
    }
    else
    {
      int v27 = v24 + 1256;
    }
    __int16 v28 = (int *)(*(void *)v27 + **(unsigned int **)v27);
    uint64_t v29 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 - *v28 + 4));
    __int16 v30 = (unsigned int *)((char *)v29
                         + *v29
                         + *(unsigned __int16 *)((char *)v29 + *v29 - *(unsigned int *)((char *)v29 + *v29) + 8));
    return *(unsigned int *)((char *)v30 + *v30) < 0x21;
  }
  return result;
}

void virtual thunk to'AGCLLVMUserTileShader::getCompilationKeyDescription(AGCLLVMUserTileShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMUserTileShader::getCompilationKeyDescription(AGCLLVMUserTileShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned int *)*((void *)this + 559);
  std::string::basic_string[abi:nn180100]<0>(&v59, "AGCTileState");
  std::string::basic_string[abi:nn180100]<0>(v57, "maxTotalThreadsPerThreadgroup");
  _agcFieldString<unsigned int>(&v66, (const void **)v57, *v4);
  std::string::basic_string[abi:nn180100]<0>(__p, "dispatchSizeMatchesTileSize");
  _agcFieldString<unsigned int>(&v67, (const void **)__p, v4[1] & 1);
  _agcGroupWithHeader(&v18, (uint64_t)&v59, (uint64_t)&v66, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v67.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v66 + i * 8 + 24));
    }
  }
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = *((void *)this + 558);
  std::string::basic_string[abi:nn180100]<0>(__p, "AGCDrawBufferState");
  std::string::basic_string[abi:nn180100]<0>(v53, "enabledBits");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v66);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v66.__r_.__value_.__r.__words[2], (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v66.__r_.__value_.__r + *(void *)(v66.__r_.__value_.__r.__words[2] - 24) + 24) = *(_DWORD *)((char *)&v66.__r_.__value_.__r + *(void *)(v66.__r_.__value_.__r.__words[2] - 24) + 24) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v59, (const void **)v53, (uint64_t)v57);
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  v66.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v7 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + *(void *)(v66.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v66.__r_.__value_.__r.__words[2] = v7;
  v67.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA470] + 16;
  if (v70.__r_.__value_.__s.__data_[15] < 0) {
    operator delete((void *)v69.__r_.__value_.__r.__words[2]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB7A0710](&v71.__r_.__value_.__r.__words[1]);
  std::string::basic_string[abi:nn180100]<0>(v57, "sampleCount");
  _agcFieldString<unsigned int>(&v60, (const void **)v57, (*(_DWORD *)(v6 + 32) >> 8) & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v51, "colorSampleCount");
  _agcFieldString<unsigned int>(&v61, (const void **)v51, (unsigned __int16)*(_DWORD *)(v6 + 32) >> 12);
  std::string::basic_string[abi:nn180100]<0>(v49, "outputPartitionSize");
  _agcFieldString<unsigned int>(&v62, (const void **)v49, *(_WORD *)(v6 + 34) & 0x1FF);
  std::string::basic_string[abi:nn180100]<0>(v47, "LIBSpilling");
  _agcFieldString<unsigned int>(&v63, (const void **)v47, (*(_DWORD *)(v6 + 32) >> 25) & 1);
  std::string::basic_string[abi:nn180100]<0>(v45, "unused");
  _agcFieldString<unsigned int>(&v64, (const void **)v45, *(_DWORD *)(v6 + 32) >> 27);
  std::string::basic_string[abi:nn180100]<0>(v43, "encoded : ");
  std::string::basic_string[abi:nn180100]<0>(v41, "encoded[0]");
  _agcStringRepresentation(&v40, (_DWORD *)v6);
  _agcFieldString<std::string>(&v66, (const void **)v41, (uint64_t)&v40);
  std::string::basic_string[abi:nn180100]<0>(v38, "encoded[1]");
  _agcStringRepresentation(&v37, (_DWORD *)(v6 + 4));
  _agcFieldString<std::string>(&v67, (const void **)v38, (uint64_t)&v37);
  std::string::basic_string[abi:nn180100]<0>(v35, "encoded[2]");
  _agcStringRepresentation(&v34, (_DWORD *)(v6 + 8));
  _agcFieldString<std::string>(&v68, (const void **)v35, (uint64_t)&v34);
  std::string::basic_string[abi:nn180100]<0>(v32, "encoded[3]");
  _agcStringRepresentation(&v31, (_DWORD *)(v6 + 12));
  _agcFieldString<std::string>(&v69, (const void **)v32, (uint64_t)&v31);
  std::string::basic_string[abi:nn180100]<0>(v29, "encoded[4]");
  _agcStringRepresentation(&v28, (_DWORD *)(v6 + 16));
  _agcFieldString<std::string>(&v70, (const void **)v29, (uint64_t)&v28);
  std::string::basic_string[abi:nn180100]<0>(v26, "encoded[5]");
  _agcStringRepresentation(&v25, (_DWORD *)(v6 + 20));
  _agcFieldString<std::string>(&v71, (const void **)v26, (uint64_t)&v25);
  std::string::basic_string[abi:nn180100]<0>(v23, "encoded[6]");
  _agcStringRepresentation(&v22, (_DWORD *)(v6 + 24));
  _agcFieldString<std::string>(&v72, (const void **)v23, (uint64_t)&v22);
  std::string::basic_string[abi:nn180100]<0>(v20, "encoded[7]");
  _agcStringRepresentation(&v19, (_DWORD *)(v6 + 28));
  _agcFieldString<std::string>(v73, (const void **)v20, (uint64_t)&v19);
  _agcGroupWithHeader(&v65, (uint64_t)v43, (uint64_t)&v66, 8);
  _agcGroupWithHeader(&v17, (uint64_t)__p, (uint64_t)&v59, 7);
  for (uint64_t j = 0; j != -21; j -= 3)
  {
    if (SHIBYTE(v65.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v65.__r_.__value_.__l.__data_ + j * 8));
    }
  }
  for (unint64_t k = 0; k != 0x1FFFFFFFFFFFFFE8; k -= 3)
  {
    if (SHIBYTE(v73[0].__r_.__value_.__r.__words[k + 2]) < 0) {
      operator delete(v73[k / 3].__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  if (v52 < 0) {
    operator delete(v51[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  int v10 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  int v12 = &v66;
  std::string::basic_string[abi:nn180100]((uint64_t)&v66, size + 1);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v12 = (std::string *)v66.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if (v10 >= 0) {
      int v13 = &v18;
    }
    else {
      int v13 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    memmove(v12, v13, size);
  }
  *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + size) = 10;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v14 = &v17;
  }
  else {
    int v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = v17.__r_.__value_.__l.__size_;
  }
  int v16 = std::string::append(&v66, (const std::string::value_type *)v14, v15);
  *a2 = *v16;
  v16->__r_.__value_.__r.__words[0] = 0;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0) {
      return;
    }
LABEL_93:
    operator delete(v18.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if (v10 < 0) {
    goto LABEL_93;
  }
}

uint64_t virtual thunk to'AGCLLVMUserTileShader::getForwardProgressMode(AGCLLVMUserTileShader *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 128) + 4524);
}

uint64_t virtual thunk to'AGCLLVMUserTileShader::getSupportExternalVisibleFunctions(AGCLLVMUserTileShader *this)
{
  return *((unsigned __int8 *)this + *(void *)(*(void *)this - 120) + 4529);
}

uint64_t virtual thunk to'AGCLLVMUserTileShader::getShaderType(AGCLLVMUserTileShader *this)
{
  return 9;
}

const char *virtual thunk to'AGCLLVMUserTileShader::dumpType(AGCLLVMUserTileShader *this)
{
  return "tile";
}

void virtual thunk to'AGCLLVMUserTileShader::~AGCLLVMUserTileShader(AGCLLVMUserTileShader *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  *(void *)uint64_t v1 = &unk_1F25C3938;
  *((void *)v1 + 567) = &unk_1F25C3C68;
  *((void *)v1 + 571) = &unk_1F25C3D58;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)v1 + 561));
  uint64_t v2 = (llvm::ValueHandleBase *)(v1 + 4440);
  uint64_t v3 = -144;
  while (1)
  {
    uint64_t v4 = *((void *)v2 + 2);
    if (v4 != -8192 && v4 != -4096 && v4 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(v2);
    }
    uint64_t v2 = (llvm::ValueHandleBase *)((char *)v2 - 24);
    v3 += 24;
    if (!v3)
    {
      AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1F25C3D68);
      AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4536));
      JUMPOUT(0x1CB7A0780);
    }
  }
}

{
  char *v1;
  llvm::ValueHandleBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  *(void *)uint64_t v1 = &unk_1F25C3938;
  *((void *)v1 + 567) = &unk_1F25C3C68;
  *((void *)v1 + 571) = &unk_1F25C3D58;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)v1 + 561));
  uint64_t v2 = (llvm::ValueHandleBase *)(v1 + 4440);
  uint64_t v3 = -144;
  do
  {
    uint64_t v4 = *((void *)v2 + 2);
    if (v4 != -8192 && v4 != -4096 && v4 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(v2);
    }
    uint64_t v2 = (llvm::ValueHandleBase *)((char *)v2 - 24);
    v3 += 24;
  }
  while (v3);
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1F25C3D68);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4536));
}

uint64_t AGCLLVMUserTileShader::enableImgWBlkPBECmp(AGCLLVMUserTileShader *this)
{
  return *((unsigned __int8 *)this + 4512);
}

uint64_t AGCLLVMUserTileShader::getTextureWriteFPRoundingMode(AGCLLVMUserTileShader *this)
{
  return *((unsigned int *)this + 1127);
}

uint64_t AGCLLVMUserTileShader::getSupportExternalVisibleFunctions(AGCLLVMUserTileShader *this)
{
  return *((unsigned __int8 *)this + 4529);
}

uint64_t AGCLLVMUserTileShader::needsThreadgroupMemoryOOBChecks(AGCLLVMUserTileShader *this)
{
  if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1766)) {
    return AGCLLVMUserObject::isThreadgroupMemoryUsed(this);
  }
  else {
    return 0;
  }
}

uint64_t AGCLLVMUserTileShader::isDMAPromotionDisabled(AGCLLVMUserTileShader *this)
{
  return *((unsigned __int8 *)this + 4528);
}

BOOL AGCLLVMUserTileShader::enableSoftFaultOptimization(AGCLLVMUserTileShader *this)
{
  return *((unsigned char *)this + 4530) == 0;
}

uint64_t AGCLLVMUserTileShader::getForwardProgressMode(AGCLLVMUserTileShader *this)
{
  return *((unsigned int *)this + 1131);
}

uint64_t AGCLLVMUserTileShader::getBufferBoundsCheckMode(AGCLLVMUserTileShader *this)
{
  return *((unsigned int *)this + 1130);
}

uint64_t AGCLLVMUserTileShader::getShaderType(AGCLLVMUserTileShader *this)
{
  return 9;
}

const char *AGCLLVMUserTileShader::dumpType(AGCLLVMUserTileShader *this)
{
  return "tile";
}

uint64_t AGCLLVMUserTileShader::getTileConstant(void *a1, llvm::Value *a2)
{
  int v2 = (int)a2;
  if a2 <= 1 && (*(_DWORD *)(a1[559] + 4))
  {
    uint64_t v4 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 400);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    long long v23 = *(_OWORD *)(v6 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v24, (llvm::IRBuilderBase *)(v6 + 40));
    int v25 = *((_DWORD *)v6 + 34);
    uint64_t v7 = AGCLLVMGen3TargetLowerer::buildLocalSize(v5, (uint64_t)&v23, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 232), v2);
    if (v24) {
      llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    unsigned int v8 = &a1[3 * a2];
    unsigned int v9 = (llvm::ValueHandleBase *)(v8 + 540);
    if (!v8[542])
    {
      uint64_t v10 = a2;
      char v11 = 1;
      int v12 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      int v13 = (&AGCLLVMUserTileShader::getTileConstant(AGCLLVMUserShader::TileConstant)::tile_constant_info)[2 * v10];
      HIBYTE(v22) = 1;
      if (*v13)
      {
        char v21 = v13;
        char v11 = 3;
      }
      LOBYTE(v22) = v11;
      llvm::GlobalVariable::GlobalVariable();
      *((unsigned char *)v12 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      int v14 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v15 = *((void *)v14 + 47);
      uint64_t v16 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v14 + 32), v12);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v15, v16);
      llvm::ValueHandleBase::operator=(v9, (uint64_t)v12);
    }
    std::string v17 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    std::string v18 = (llvm::Type **)*((void *)v9 + 2);
    __int16 v22 = 257;
    std::string v19 = AGCLLVMBuilder::tryDeducePointeeType(v18, a2);
    return llvm::IRBuilderBase::CreateAlignedLoad(v17 + 5, v19, (uint64_t)v18, 0, (uint64_t)&v21);
  }
  return v7;
}

uint64_t AGCLLVMUserTileShader::buildTileQuadgroupIndexInThreadgroup(AGCLLVMUserTileShader *this, llvm::Type *a2)
{
  if (*(unsigned char *)(*((void *)this + 559) + 4))
  {
    uint64_t v5 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 680))(v5);
    uint64_t v7 = (char *)this + *(void *)(*(void *)this - 24);
    long long v9 = *(_OWORD *)(v7 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v7 + 40));
    int v11 = *((_DWORD *)v7 + 34);
    uint64_t v8 = AGCLLVMGen3TargetLowerer::buildQuadGroup(v6, (uint64_t)&v9, (uint64_t)a2);
    if (v10) {
      llvm::MetadataTracking::untrack();
    }
    return v8;
  }
  else
  {
    return AGCLLVMUserShader::buildTileQuadgroupIndexInThreadgroup(this, a2);
  }
}

uint64_t AGCLLVMUserTileShader::buildTileThreadPositionInGrid(AGCLLVMUserTileShader *this, llvm::Type *a2, uint64_t a3)
{
  int v3 = a3;
  if (*(unsigned char *)(*((void *)this + 559) + 4))
  {
    uint64_t v7 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 680))(v7);
    long long v9 = (char *)this + *(void *)(*(void *)this - 24);
    long long v11 = *(_OWORD *)(v9 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v9 + 40));
    int v13 = *((_DWORD *)v9 + 34);
    uint64_t v10 = AGCLLVMGen3TargetLowerer::buildGlobalID(v8, (uint64_t)&v11, (uint64_t)a2, v3);
    if (v12) {
      llvm::MetadataTracking::untrack();
    }
    return v10;
  }
  else
  {
    return AGCLLVMUserShader::buildTileThreadPositionInGrid(this, a2, a3);
  }
}

uint64_t AGCLLVMUserTileShader::getDrawBufferState(AGCLLVMUserTileShader *this)
{
  return *((void *)this + 558);
}

uint64_t AGCLLVMUserTileShader::needsPCFClamp(AGCLLVMUserTileShader *this)
{
  return 0;
}

uint64_t AGCLLVMUserTileShader::getPCFStateForUnit(AGCLLVMUserTileShader *this)
{
  return 0;
}

uint64_t AGCLLVMUserTileShader::supportsConstantSamplers(AGCLLVMUserTileShader *this)
{
  return 1;
}

uint64_t AGCLLVMUserTileShader::getMaxSharedRegisters(AGCLLVMUserTileShader *this)
{
  return *(unsigned int *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 848);
}

uint64_t AGCLLVMUserTileShader::improveDMAPromotionOpportunity(AGCLLVMUserTileShader *this)
{
  return 1;
}

uint64_t AGCLLVMUserTileShader::replaceBuiltins(AGCLLVMUserTileShader *this)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t result = AGCLLVMUserObject::replaceBuiltins(this);
  if (!result) {
    return result;
  }
  unsigned int v73 = result;
  int v3 = *(llvm::LLVMContext ***)((char *)this + *(void *)(*(void *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v93, *v3);
  unint64_t v99 = this;
  uint64_t v93 = &unk_1F25C45E8;
  v98[25] = v3;
  {
    AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[0] = (uint64_t)"air.get_global_size.i32";
    dword_1EA611F98 = 1;
    qword_1EA611FA0 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerGrid;
    unk_1EA611FA8 = 0;
    dword_1EA611FB0 = 4;
    word_1EA611FB4 = 0;
    qword_1EA611FB8 = (uint64_t)"air.get_global_size.i16";
    dword_1EA611FC0 = 1;
    qword_1EA611FC8 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerGrid;
    unk_1EA611FD0 = 0;
    dword_1EA611FD8 = 4;
    word_1EA611FDC = 0;
    qword_1EA611FE0 = (uint64_t)"air.get_global_id.i32";
    dword_1EA611FE8 = 1;
    qword_1EA611FF0 = (uint64_t)AGCLLVMUserShader::buildTileThreadPositionInGrid;
    unk_1EA611FF8 = 0;
    dword_1EA612000 = 4;
    word_1EA612004 = 0;
    qword_1EA612008 = (uint64_t)"air.get_global_id.i16";
    dword_1EA612010 = 1;
    qword_1EA612018 = (uint64_t)AGCLLVMUserShader::buildTileThreadPositionInGrid;
    unk_1EA612020 = 0;
    dword_1EA612028 = 4;
    word_1EA61202C = 0;
    qword_1EA612030 = (uint64_t)"air.get_local_size.i32";
    dword_1EA612038 = 1;
    qword_1EA612040 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerThreadgroup;
    unk_1EA612048 = 0;
    dword_1EA612050 = 4;
    word_1EA612054 = 0;
    qword_1EA612058 = (uint64_t)"air.get_local_size.i16";
    dword_1EA612060 = 1;
    qword_1EA612068 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerThreadgroup;
    unk_1EA612070 = 0;
    dword_1EA612078 = 4;
    word_1EA61207C = 0;
    qword_1EA612080 = (uint64_t)"air.get_local_id.i32";
    dword_1EA612088 = 1;
    qword_1EA612090 = (uint64_t)AGCLLVMUserShader::buildTileThreadPositionInThreadgroup;
    unk_1EA612098 = 0;
    dword_1EA6120A0 = 4;
    word_1EA6120A4 = 0;
    qword_1EA6120A8 = (uint64_t)"air.get_local_id.i16";
    dword_1EA6120B0 = 1;
    qword_1EA6120B8 = (uint64_t)AGCLLVMUserShader::buildTileThreadPositionInThreadgroup;
    unk_1EA6120C0 = 0;
    dword_1EA6120C8 = 4;
    word_1EA6120CC = 0;
    qword_1EA6120D0 = (uint64_t)"air.get_local_linear_id.i32";
    dword_1EA6120D8 = 1;
    qword_1EA6120E0 = (uint64_t)AGCLLVMUserShader::buildTileThreadIndexInThreadgroup;
    unk_1EA6120E8 = 0;
    dword_1EA6120F0 = 2;
    word_1EA6120F4 = 0;
    qword_1EA6120F8 = (uint64_t)"air.get_local_linear_id.i16";
    dword_1EA612100 = 1;
    qword_1EA612108 = (uint64_t)AGCLLVMUserShader::buildTileThreadIndexInThreadgroup;
    unk_1EA612110 = 0;
    dword_1EA612118 = 2;
    word_1EA61211C = 0;
    qword_1EA612120 = (uint64_t)"air.get_num_groups.i32";
    dword_1EA612128 = 1;
    qword_1EA612130 = (uint64_t)AGCLLVMUserShader::buildTileThreadgroupsPerGrid;
    unk_1EA612138 = 0;
    dword_1EA612140 = 4;
    word_1EA612144 = 0;
    qword_1EA612148 = (uint64_t)"air.get_num_groups.i16";
    dword_1EA612150 = 1;
    qword_1EA612158 = (uint64_t)AGCLLVMUserShader::buildTileThreadgroupsPerGrid;
    unk_1EA612160 = 0;
    dword_1EA612168 = 4;
    word_1EA61216C = 0;
    qword_1EA612170 = (uint64_t)"air.get_group_id.i32";
    dword_1EA612178 = 1;
    qword_1EA612180 = (uint64_t)AGCLLVMUserShader::buildTileThreadgroupPositionInGrid;
    unk_1EA612188 = 0;
    dword_1EA612190 = 4;
    word_1EA612194 = 0;
    qword_1EA612198 = (uint64_t)"air.get_group_id.i16";
    dword_1EA6121A0 = 1;
    qword_1EA6121A8 = (uint64_t)AGCLLVMUserShader::buildTileThreadgroupPositionInGrid;
    qword_1EA6121B0 = 0;
    dword_1EA6121B8 = 4;
    word_1EA6121BC = 0;
    qword_1EA6121C0 = (uint64_t)"air.get_dispatch_local_size.i32";
    dword_1EA6121C8 = 1;
    qword_1EA6121D0 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerThreadgroup;
    qword_1EA6121D8 = 0;
    dword_1EA6121E0 = 4;
    word_1EA6121E4 = 0;
    qword_1EA6121E8 = (uint64_t)"air.get_dispatch_local_size.i16";
    dword_1EA6121F0 = 1;
    qword_1EA6121F8 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerThreadgroup;
    qword_1EA612200 = 0;
    dword_1EA612208 = 4;
    word_1EA61220C = 0;
    qword_1EA612210 = (uint64_t)"air.get_quadgroups_per_threadgroup.i32";
    dword_1EA612218 = 1;
    qword_1EA612220 = (uint64_t)AGCLLVMUserShader::buildTileQuadgroupsPerThreadgroup;
    qword_1EA612228 = 0;
    dword_1EA612230 = 2;
    word_1EA612234 = 0;
    qword_1EA612238 = (uint64_t)"air.get_quadgroups_per_threadgroup.i16";
    dword_1EA612240 = 1;
    qword_1EA612248 = (uint64_t)AGCLLVMUserShader::buildTileQuadgroupsPerThreadgroup;
    qword_1EA612250 = 0;
    dword_1EA612258 = 2;
    word_1EA61225C = 0;
    qword_1EA612260 = (uint64_t)"air.get_dispatch_quadgroups_per_threadgroup.i32";
    dword_1EA612268 = 1;
    qword_1EA612270 = (uint64_t)AGCLLVMUserShader::buildTileQuadgroupsPerThreadgroup;
    qword_1EA612278 = 0;
    dword_1EA612280 = 2;
    word_1EA612284 = 0;
    qword_1EA612288 = (uint64_t)"air.get_dispatch_quadgroups_per_threadgroup.i16";
    dword_1EA612290 = 1;
    qword_1EA612298 = (uint64_t)AGCLLVMUserShader::buildTileQuadgroupsPerThreadgroup;
    qword_1EA6122A0 = 0;
    dword_1EA6122A8 = 2;
    word_1EA6122AC = 0;
    qword_1EA6122B0 = (uint64_t)"air.get_quad_group.i32";
    dword_1EA6122B8 = 1;
    qword_1EA6122C0 = (uint64_t)AGCLLVMUserShader::buildTileQuadgroupIndexInThreadgroup;
    qword_1EA6122C8 = 0;
    dword_1EA6122D0 = 2;
    word_1EA6122D4 = 0;
    qword_1EA6122D8 = (uint64_t)"air.get_quad_group.i16";
    dword_1EA6122E0 = 1;
    qword_1EA6122E8 = (uint64_t)AGCLLVMUserShader::buildTileQuadgroupIndexInThreadgroup;
    qword_1EA6122F0 = 0;
    dword_1EA6122F8 = 2;
    word_1EA6122FC = 0;
    qword_1EA612300 = (uint64_t)"air.get_simdgroups_per_threadgroup.i32";
    dword_1EA612308 = 1;
    qword_1EA612310 = (uint64_t)AGCLLVMUserTileShader::buildSimdgroupsPerThreadgroup;
    qword_1EA612318 = 0;
    dword_1EA612320 = 2;
    word_1EA612324 = 0;
    qword_1EA612328 = (uint64_t)"air.get_simdgroups_per_threadgroup.i16";
    dword_1EA612330 = 1;
    qword_1EA612338 = (uint64_t)AGCLLVMUserTileShader::buildSimdgroupsPerThreadgroup;
    qword_1EA612340 = 0;
    dword_1EA612348 = 2;
    word_1EA61234C = 0;
    qword_1EA612350 = (uint64_t)"air.get_dispatch_simdgroups_per_threadgroup.i32";
    dword_1EA612358 = 1;
    qword_1EA612360 = (uint64_t)AGCLLVMUserTileShader::buildDispatchSimdgroupsPerThreadgroup;
    qword_1EA612368 = 0;
    dword_1EA612370 = 2;
    word_1EA612374 = 0;
    qword_1EA612378 = (uint64_t)"air.get_dispatch_simdgroups_per_threadgroup.i16";
    dword_1EA612380 = 1;
    qword_1EA612388 = (uint64_t)AGCLLVMUserTileShader::buildDispatchSimdgroupsPerThreadgroup;
    qword_1EA612390 = 0;
    dword_1EA612398 = 2;
    word_1EA61239C = 0;
    qword_1EA6123A0 = (uint64_t)"air.get_stage_in_grid_origin.i32";
    dword_1EA6123A8 = 1;
    qword_1EA6123B0 = (uint64_t)AGCLLVMUserTileShader::buildStageInOrigin;
    qword_1EA6123B8 = 0;
    dword_1EA6123C0 = 4;
    word_1EA6123C4 = 0;
    qword_1EA6123C8 = (uint64_t)"air.get_stage_in_grid_origin.i16";
    dword_1EA6123D0 = 1;
    qword_1EA6123D8 = (uint64_t)AGCLLVMUserTileShader::buildStageInOrigin;
    qword_1EA6123E0 = 0;
    dword_1EA6123E8 = 4;
    word_1EA6123EC = 0;
    qword_1EA6123F0 = (uint64_t)"air.get_stage_in_grid_size.i32";
    dword_1EA6123F8 = 1;
    qword_1EA612400 = (uint64_t)AGCLLVMUserTileShader::buildStageInSize;
    qword_1EA612408 = 0;
    dword_1EA612410 = 4;
    word_1EA612414 = 0;
    qword_1EA612418 = (uint64_t)"air.get_stage_in_grid_size.i16";
    dword_1EA612420 = 1;
    qword_1EA612428 = (uint64_t)AGCLLVMUserTileShader::buildStageInSize;
    qword_1EA612430 = 0;
    dword_1EA612438 = 4;
    word_1EA61243C = 0;
    qword_1EA612440 = (uint64_t)"air.get_quadgroup_index_in_threadgroup.i32";
    dword_1EA612448 = 1;
    qword_1EA612450 = (uint64_t)AGCLLVMUserShader::buildTileQuadgroupIndexInThreadgroup;
    qword_1EA612458 = 0;
    dword_1EA612460 = 2;
    word_1EA612464 = 0;
    qword_1EA612468 = (uint64_t)"air.get_quadgroup_index_in_threadgroup.i16";
    dword_1EA612470 = 1;
    qword_1EA612478 = (uint64_t)AGCLLVMUserShader::buildTileQuadgroupIndexInThreadgroup;
    qword_1EA612480 = 0;
    dword_1EA612488 = 2;
    word_1EA61248C = 0;
    qword_1EA612490 = (uint64_t)"air.get_thread_index_in_quadgroup.i32";
    dword_1EA612498 = 1;
    qword_1EA6124A0 = (uint64_t)AGCLLVMUserTileShader::buildQuadElement;
    qword_1EA6124A8 = 0;
    dword_1EA6124B0 = 2;
    word_1EA6124B4 = 0;
    qword_1EA6124B8 = (uint64_t)"air.get_thread_index_in_quadgroup.i16";
    dword_1EA6124C0 = 1;
    qword_1EA6124C8 = (uint64_t)AGCLLVMUserTileShader::buildQuadElement;
    qword_1EA6124D0 = 0;
    dword_1EA6124D8 = 2;
    word_1EA6124DC = 0;
    qword_1EA6124E0 = (uint64_t)"air.get_dispatch_threads_per_threadgroup.i32";
    dword_1EA6124E8 = 1;
    qword_1EA6124F0 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerThreadgroup;
    qword_1EA6124F8 = 0;
    dword_1EA612500 = 4;
    word_1EA612504 = 0;
    qword_1EA612508 = (uint64_t)"air.get_dispatch_threads_per_threadgroup.i16";
    dword_1EA612510 = 1;
    qword_1EA612518 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerThreadgroup;
    qword_1EA612520 = 0;
    dword_1EA612528 = 4;
    word_1EA61252C = 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = &v89;
  do
  {
    if (AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v4]) {
      strlen((const char *)AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v4]);
    }
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v7 = (llvm::Function *)Function;
      uint64_t v8 = &AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v4];
      int v82 = v8 + 4;
      if (*((_DWORD *)v8 + 8) == 12)
      {
        uint64_t v12 = *(void *)(Function + 8);
        if (v12)
        {
          int v13 = &AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v4];
          int v14 = (void (**)(void *, uint64_t))(v13 + 2);
          uint64_t v15 = v13 + 3;
          do
          {
            uint64_t v16 = *(void *)(v12 + 24);
            uint64_t v12 = *(void *)(v12 + 8);
            std::string v17 = *v14;
            std::string v18 = (void *)((char *)v99 + (*v15 >> 1));
            if (*v15) {
              std::string v17 = *(void (**)(void *, uint64_t))(*v18 + v17);
            }
            v17(v18, v16);
          }
          while (v12);
        }
        goto LABEL_120;
      }
      if (*((_DWORD *)v8 + 8) == 11)
      {
        long long v9 = &AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v4];
        uint64_t v10 = (unsigned char *)v9[2];
        if (v10)
        {
          size_t v11 = strlen((const char *)v9[2]);
          *(void *)&v100[0] = (char *)&v100[1] + 8;
          *(_OWORD *)((char *)v100 + 8) = xmmword_1CADD6290;
          llvm::SmallVectorImpl<char>::append<char const*,void>(v100, v10, &v10[v11]);
        }
        else
        {
          *(void *)&v100[1] = 64;
          v100[0] = (unint64_t)&v100[1] + 8;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(v100, ".", "");
        if (*(void *)&v100[1] < *((void *)&v100[0] + 1)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        if (*(_OWORD **)&v100[0] != (_OWORD *)((char *)&v100[1] + 8)) {
          free(*(void **)&v100[0]);
        }
        goto LABEL_120;
      }
      uint64_t v19 = **(void **)(*(void *)(Function + 24) + 16);
      BOOL v20 = (*(_DWORD *)(v19 + 8) & 0xFE) != 0x12
         || BYTE5(AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v4 + 4]) == 0;
      int v21 = !v20;
      uint64_t v76 = v4;
      if (v20) {
        uint64_t v22 = 1;
      }
      else {
        uint64_t v22 = *(unsigned int *)(v19 + 32);
      }
      uint64_t v83 = v22;
      int v74 = v96;
      std::string v75 = (llvm::Function *)Function;
      uint64_t v23 = *(void *)(Function + 8);
      if (!v23)
      {
LABEL_114:
        int v96 = v74;
        uint64_t v7 = v75;
        uint64_t v4 = v76;
LABEL_120:
        llvm::Function::eraseFromParent(v7);
        goto LABEL_121;
      }
      std::string v77 = &AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v4 + 1];
      uint64_t v24 = &AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v4];
      uint64_t v81 = (char *)v24 + 36;
      std::string::size_type v79 = v24 + 3;
      int v80 = (uint64_t (**)(void))(v24 + 2);
      while (1)
      {
        int v25 = *(llvm::Instruction **)(v23 + 24);
        uint64_t v26 = *(void *)(v23 + 8);
        if (*(_DWORD *)v77 == 1)
        {
          int v27 = 0;
        }
        else
        {
          if (*(_DWORD *)v77 != 2) {
            goto LABEL_33;
          }
          int v27 = 121;
        }
        int v96 = v27;
LABEL_33:
        uint64_t v78 = v26;
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v94, v25);
        uint64_t v28 = llvm::UndefValue::get();
        if (v83)
        {
          for (uint64_t i = 0; i != v83; ++i)
          {
            int v84 = (llvm::Value *)v28;
            char v30 = v5;
            uint64_t v101 = 0;
            memset(v100, 0, sizeof(v100));
            unint64_t v31 = llvm::CallBase::arg_end(v25) - (void)v25 + 32 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF);
            if ((v31 & 0x1FFFFFFFE0) != 0)
            {
              uint64_t v32 = (v31 >> 5);
              char v33 = (llvm::Value **)v100;
              std::string v34 = v25;
              do
              {
                BOOL v35 = (llvm::Value **)((char *)v34 - 32 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF));
                char v36 = *v35;
                *char v33 = *v35;
                if (v21 && (*(_DWORD *)(*(void *)v36 + 8) & 0xFE) == 0x12)
                {
                  __int16 v92 = 257;
                  std::string v37 = (llvm::Value *)llvm::ConstantInt::get();
                  *char v33 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v94, v36, v37, (const llvm::Twine *)v91);
                }
                ++v33;
                std::string v34 = (llvm::Instruction *)((char *)v34 + 32);
                --v32;
              }
              while (v32);
            }
            if (*v81)
            {
              __int16 v38 = **(llvm::Type ***)&v100[0];
              uint64_t v5 = v30;
              if ((*(_DWORD *)(**(void **)&v100[0] + 8) & 0xFE) == 0x12) {
                __int16 v38 = (llvm::Type *)**((void **)v38 + 2);
              }
              v91[0] = llvm::Type::getPrimitiveSizeInBits(v38);
              v91[1] = v39;
              if (llvm::TypeSize::operator unsigned long long() == 32)
              {
                int v40 = 0;
              }
              else
              {
                uint64_t v41 = (llvm::Type *)v98[4];
                if ((*(_DWORD *)(**(void **)&v100[0] + 8) & 0xFE) == 0x12) {
                  uint64_t v41 = (llvm::Type *)llvm::FixedVectorType::get();
                }
                if ((v31 & 0x1FFFFFFFE0) != 0)
                {
                  uint64_t v42 = (v31 >> 5);
                  std::string::size_type v43 = (llvm::Value **)v100;
                  do
                  {
                    char v44 = *v43;
                    __int16 v92 = 257;
                    *v43++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v94, v44, v41, (const llvm::Twine *)v91);
                    --v42;
                  }
                  while (v42);
                }
                int v40 = 1;
              }
            }
            else
            {
              int v40 = 0;
              uint64_t v5 = v30;
            }
            if (llvm::FPMathOperator::classof((uint64_t)v25)) {
              unsigned int FastMathFlags = llvm::Instruction::getFastMathFlags(v25);
            }
            else {
              unsigned int FastMathFlags = 0;
            }
            char v46 = (char *)v99 + *(void *)(*(void *)v99 - 24);
            long long v88 = v95[2];
            llvm::IRBuilderBase::getCurrentDebugLocation(v5, (llvm::IRBuilderBase *)v94);
            int v90 = v96;
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v88, (uint64_t)(v46 + 40));
            if (v89) {
              llvm::MetadataTracking::untrack();
            }
            switch(*v82)
            {
              case 1:
                __int16 v47 = *v80;
                char v48 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  __int16 v47 = *(uint64_t (**)(void))(*v48 + v47);
                }
                uint64_t v59 = v47(v48);
                goto LABEL_99;
              case 2:
                char v56 = *v80;
                uint64_t v57 = *(void *)v25;
                char v58 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  goto LABEL_68;
                }
                goto LABEL_69;
              case 3:
                char v56 = *v80;
                uint64_t v57 = *(void *)&v100[0];
                char v58 = (void *)((char *)v99 + (*v79 >> 1));
                if ((*v79 & 1) == 0) {
                  goto LABEL_69;
                }
LABEL_68:
                char v56 = *(uint64_t (**)(void))(*v58 + v56);
LABEL_69:
                uint64_t v59 = ((uint64_t (*)(void *, uint64_t))v56)(v58, v57);
                goto LABEL_99;
              case 4:
                std::string v60 = (unsigned int *)(*(void *)&v100[0] + 24);
                if (*(_DWORD *)(*(void *)&v100[0] + 32) >= 0x41u) {
                  std::string v60 = *(unsigned int **)v60;
                }
                uint64_t v51 = *v60;
                uint64_t v49 = *v80;
                uint64_t v50 = *(void *)v25;
                char v52 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  uint64_t v49 = *(uint64_t (**)(void))(*v52 + v49);
                }
                goto LABEL_84;
              case 5:
                uint64_t v49 = *v80;
                uint64_t v51 = *((void *)&v100[0] + 1);
                uint64_t v50 = *(void *)&v100[0];
                char v52 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  uint64_t v49 = *(uint64_t (**)(void))(*v52 + v49);
                }
LABEL_84:
                uint64_t v59 = ((uint64_t (*)(void *, uint64_t, uint64_t))v49)(v52, v50, v51);
                goto LABEL_99;
              case 6:
                std::string v63 = *v80;
                std::string v65 = (const char *)*((void *)&v100[0] + 1);
                std::string v64 = *(_OWORD **)&v100[0];
                std::string v66 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  std::string v63 = *(uint64_t (**)(void))(*v66 + v63);
                }
                uint64_t v68 = FastMathFlags;
                goto LABEL_98;
              case 7:
                std::string v63 = *v80;
                std::string v65 = (const char *)*((void *)&v100[0] + 1);
                std::string v64 = *(_OWORD **)&v100[0];
                uint64_t v68 = *(void *)&v100[1];
                std::string v66 = (void *)((char *)v99 + (*v79 >> 1));
                if ((*v79 & 1) == 0) {
                  goto LABEL_98;
                }
                uint64_t v59 = (*(uint64_t (**)(void *, void, void, void))(*v66 + v63))(v66, *(void *)&v100[0], *((void *)&v100[0] + 1), *(void *)&v100[1]);
                goto LABEL_99;
              case 8:
                std::string::size_type v53 = *v80;
                std::string v61 = (_OWORD *)*((void *)&v100[0] + 1);
                uint64_t v54 = *(void *)&v100[0];
                std::string v62 = *(const char **)&v100[1];
                unsigned int v55 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  std::string::size_type v53 = *(uint64_t (**)(void))(*v55 + v53);
                }
                uint64_t v69 = FastMathFlags;
                goto LABEL_92;
              case 9:
                std::string v63 = *v80;
                std::string v66 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  std::string v63 = *(uint64_t (**)(void))(*v66 + v63);
                }
                std::string v64 = v100;
                std::string v65 = "";
                uint64_t v68 = 0;
LABEL_98:
                uint64_t v59 = ((uint64_t (*)(void *, _OWORD *, const char *, uint64_t))v63)(v66, v64, v65, v68);
                goto LABEL_99;
              case 0xA:
                std::string::size_type v53 = *v80;
                uint64_t v54 = *(void *)v25;
                unsigned int v55 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  std::string::size_type v53 = *(uint64_t (**)(void))(*v55 + v53);
                }
                std::string v61 = v100;
                std::string v62 = "";
                uint64_t v69 = 0;
LABEL_92:
                uint64_t v59 = ((uint64_t (*)(void *, uint64_t, _OWORD *, const char *, uint64_t))v53)(v55, v54, v61, v62, v69);
LABEL_99:
                uint64_t FPTrunc = (llvm::Value *)v59;
                break;
              default:
                uint64_t FPTrunc = 0;
                break;
            }
            std::string v70 = (char *)v99 + *(void *)(*(void *)v99 - 24);
            long long v85 = *(_OWORD *)(v70 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v86, (llvm::IRBuilderBase *)(v70 + 40));
            int v87 = *((_DWORD *)v70 + 34);
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v85, (uint64_t)v94);
            if (v86) {
              llvm::MetadataTracking::untrack();
            }
            if (v40)
            {
              uint64_t v71 = *(void *)v25;
              if (v21 && (*(_DWORD *)(v71 + 8) & 0xFE) == 0x12) {
                uint64_t v71 = **(void **)(v71 + 16);
              }
              __int16 v92 = 257;
              uint64_t FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v94, FPTrunc, (llvm::Type *)v71, (const llvm::Twine *)v91);
              if (!v21) {
                goto LABEL_110;
              }
            }
            else if (!v21)
            {
              goto LABEL_110;
            }
            __int16 v92 = 257;
            std::string v72 = (llvm::Value *)llvm::ConstantInt::get();
            uint64_t FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v94, v84, FPTrunc, v72, (const llvm::Twine *)v91);
LABEL_110:
            uint64_t v28 = (uint64_t)FPTrunc;
          }
        }
        if (*(void *)v25 != v98[1]) {
          llvm::Value::replaceAllUsesWith();
        }
        llvm::Instruction::eraseFromParent(v25);
        uint64_t v23 = v78;
        if (!v78) {
          goto LABEL_114;
        }
      }
    }
LABEL_121:
    ++v4;
  }
  while (v4 != 36);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v98);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v97);
  if (v94[0] != v95) {
    free(v94[0]);
  }
  return v73;
}

uint64_t AGCLLVMUserTileShader::buildQuadElement(AGCLLVMUserTileShader *this, llvm::Type *a2)
{
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 680))(v4);
  uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  long long v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
  int v11 = *((_DWORD *)v6 + 34);
  uint64_t v7 = AGCLLVMGen3TargetLowerer::buildQuadElement(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMUserTileShader::buildStageInSize(llvm::Type ***this, llvm::Type *a2, llvm::Type *a3, llvm::Value *a4)
{
  return AGCLLVMUserShader::buildStageInSizeCommon(this, a3, 0, a4);
}

uint64_t AGCLLVMUserTileShader::buildStageInOrigin(llvm::Type ***this, llvm::Type *a2, llvm::Type *a3, llvm::Value *a4)
{
  return AGCLLVMUserShader::buildStageInOriginCommon(this, a3, 0, a4);
}

uint64_t AGCLLVMUserTileShader::buildQuadgroupsPerThreadgroupCommon<5u>(AGCLLVMUserShader *a1, llvm::Type *a2)
{
  uint64_t v4 = (AGCLLVMUserShader *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  uint64_t v5 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, void))(*(void *)a1 + 464))(a1, 0);
  uint64_t v6 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)a1 + *(void *)(*(void *)a1 - 24) + 32), v5, a2);
  uint64_t v7 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, uint64_t))(*(void *)a1 + 464))(a1, 1);
  uint64_t v8 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)a1 + *(void *)(*(void *)a1 - 24) + 32), v7, a2);
  __int16 v20 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v4, v6, v8, (const llvm::Twine *)v19);
  uint64_t v10 = (AGCLLVMUserShader *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  int v11 = AGCLLVMUserShader::buildTileThreadsPerThreadgroup(a1, a2, 2);
  __int16 v20 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v10, Mul, v11, (const llvm::Twine *)v19);
  int v13 = (AGCLLVMUserShader *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  int v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v20 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v13, v12, v14, (const llvm::Twine *)v19);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  unsigned char v18[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v13, Add, v16, (const llvm::Twine *)v18);
}

uint64_t AGCLLVMUserShader::buildTileQuadgroupIndexInThreadgroup(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 456))();
}

uint64_t AGCLLVMUserShader::buildTileThreadPositionInGrid(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 448))();
}

uint64_t AGCLLVMUserTileShader::setupImageBlocks(AGCLLVMUserTileShader *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  AGCLLVMAirImageBlockGen3::AGCLLVMAirImageBlockGen3((AGCLLVMAirImageBlockGen3 *)v3, this, *(llvm::LLVMContext ***)((char *)this + *(void *)(*(void *)this - 24) + 368), *(AGCLLVMTargetLowerer **)((char *)this + *(void *)(*(void *)this - 24) + 400), (AGCLLVMUserTileShader *)((char *)this + 232));
  AGCLLVMAirImageBlockGen3::replaceBulkMemWrites((AGCLLVMAirImageBlockGen3 *)v3);
  AGCLLVMAirImageBlockGen3::setupImageBlocks((llvm::Value *)v3, *((unsigned __int16 *)this + 2156), *((unsigned __int16 *)this + 1782), *((void *)this + 558));
  *((unsigned char *)this + 4504) = v3[944];
  AGCLLVMAirImageBlockGen3::~AGCLLVMAirImageBlockGen3((AGCLLVMAirImageBlockGen3 *)v3);
  return 1;
}

uint64_t AGCLLVMUserTileShader::setupShaderOutputs(AGCLLVMUserTileShader *this)
{
  uint64_t Function = (llvm::Function *)llvm::Module::getFunction();
  llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(*((void *)Function + 1) + 24));
  llvm::Function::eraseFromParent(Function);
  return 1;
}

uint64_t AGCLLVMUserTileShader::setupShaderInputs(AGCLLVMUserTileShader *this)
{
  uint64_t v2 = *((void *)this + 22);
  uint64_t v3 = *(void *)(v2 + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    uint64_t v6 = *((void *)this + 22);
    uint64_t v5 = *(void *)(v2 + 88);
    if (*(_WORD *)(v6 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    }
    uint64_t v2 = v6;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 88);
  }
  uint64_t v7 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
  uint64_t v8 = 1;
  if (v5 != v7)
  {
    long long v9 = (_WORD *)((char *)this + 3564);
    while (1)
    {
      uint64_t v10 = *(void *)(*((void *)this + 11) + 8 * *(unsigned int *)(v5 + 32));
      if (v10)
      {
        uint64_t v11 = *(void *)(v4 + 40);
        if (v11) {
          uint64_t v12 = (llvm::Instruction *)(v11 - 24);
        }
        else {
          uint64_t v12 = 0;
        }
        AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v12, *((void *)this + 6));
        AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v5, *(_DWORD *)(v5 + 32), v10);
        if (isStringMDNode(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8), "air.thread_index_in_quadgroup")|| isStringMDNode(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8), "air.quadgroup_index_in_threadgroup"))
        {
          *((unsigned char *)this + 16) = 1;
        }
        else
        {
          if (isStringMDNode(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8), "air.imageblock"))
          {
            if (!AGCLLVMUserShader::setupLIBMetadata((uint32x2_t *)this, 2u, v9, v10, *((void *)this + 558), 0, 0))return 0; {
            llvm::UndefValue::get();
            }
            goto LABEL_29;
          }
          if (isStringMDNode(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8), "air.render_target_array_index"))
          {
            int v13 = (char *)this + *(void *)(*(void *)this - 24);
            int v14 = (unsigned char *)*((void *)v13 + 50);
            if (v14[1747])
            {
              uint64_t v22 = v9;
              uint64_t v15 = *(llvm::Type **)v5;
              uint64_t v16 = (*(uint64_t (**)(unsigned char *))(*(void *)v14 + 680))(v14);
              std::string v17 = (char *)this + *(void *)(*(void *)this - 24);
              long long v23 = *(_OWORD *)(v17 + 88);
              llvm::IRBuilderBase::getCurrentDebugLocation(&v24, (llvm::IRBuilderBase *)(v17 + 40));
              int v25 = *((_DWORD *)v17 + 34);
              AGCLLVMGen3TargetLowerer::buildLayerId(v16, (uint64_t)&v23, (uint64_t)v15);
              if (v24) {
                llvm::MetadataTracking::untrack();
              }
              long long v9 = v22;
            }
            else
            {
              uint64_t v18 = (uint64_t)(v13 + 40);
              uint64_t v19 = llvm::ConstantInt::get();
              __int16 v20 = *(llvm::Type **)v5;
              __int16 v26 = 257;
              llvm::IRBuilderBase::CreateCast(v18, 38, v19, (uint64_t)v20, (uint64_t)&v23);
            }
LABEL_29:
            llvm::Value::replaceAllUsesWith();
          }
        }
      }
      v5 += 40;
      if (v5 == v7) {
        return 1;
      }
    }
  }
  return v8;
}

uint64_t AGCLLVMUserTileShader::wrapperCallingConvention(AGCLLVMUserTileShader *this)
{
  return 108;
}

uint64_t AGCLLVMUserTileShader::wrapperFunctionType(AGCLLVMUserTileShader *this)
{
  return llvm::FunctionType::get();
}

llvm::Value *AGCLLVMUserTileShader::addWrapperPostfix(AGCLLVMUserTileShader *this)
{
  void v11[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = (llvm::Value *)AGCLLVMUserObject::detectTextureWrites(this);
  if (result)
  {
    uint64_t v3 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v4 = (uint64_t)(v3 + 32);
    uint64_t v5 = *((void *)v3 + 50);
    uint64_t v6 = *(void *)(v5 + 952);
    if (v6) {
      size_t v7 = strlen(*(const char **)(v5 + 952));
    }
    else {
      size_t v7 = 0;
    }
    uint64_t v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v4, v6, v7, *(void *)(v4 + 144), *(void *)(v4 + 192), *(void *)(v4 + 192));
    v11[0] = llvm::ConstantInt::get();
    v11[1] = llvm::ConstantInt::get();
    long long v9 = (char *)this + *(void *)(*(void *)this - 24) + 40;
    v10[16] = 257;
    return llvm::IRBuilderBase::CreateCall((uint64_t)v9, *(void *)(v8 + 24), v8, (uint64_t)v11, 2, (uint64_t)v10);
  }
  return result;
}

uint64_t AGCLLVMUserTileShader::initCompile(AGCLLVMUserTileShader *this)
{
  if (!validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1129), **((_DWORD **)this + 559), *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 864), (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (unsigned int *)this + 1129))return 0; {
  AGCLLVMUserObject::initCompile(this);
  }
  uint64_t v2 = *(void *)(*(void *)this - 24);
  uint64_t v3 = *(void *)((char *)this + v2 + 368);
  uint64_t v4 = v3 + 8;
  for (uint64_t i = *(void *)(v3 + 16); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v4)
    {
      int v10 = 1;
      goto LABEL_14;
    }
    uint64_t v6 = (uint64_t *)(i - 56);
    if (!i) {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *v6;
    if (*v6)
    {
      int v8 = *(_DWORD *)(v7 + 8);
      if ((v8 & 0xFE) == 0x12) {
        int v8 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
      }
      if ((v8 & 0xFFFFFF00) == 0x300 && v6[1]) {
        break;
      }
    }
  }
  std::string::append((std::string *)((char *)this + v2 + 8), "Tile shaders do not support shader declared threadgroup variables");
  int v10 = 0;
LABEL_14:
  uint64_t v11 = *((void *)this + 558);
  if ((*(unsigned char *)(v11 + 33) & 0xE) != 0)
  {
    llvm::Module::getOrInsertNamedMetadata();
    llvm::ConstantInt::get();
    llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    uint64_t v11 = *((void *)this + 558);
  }
  AGCLLVMUserShader::initLIBAliasOffset((uint64_t *)this, v11);
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 24) + 400) + 680))();
  uint64_t v9 = v10 & AGCLLVMGen3TargetLowerer::setupFixedPRIDS(v12, 3);
  AGCLLVMUserShader::setUniformAtomicsMode(this);
  return v9;
}

uint64_t AGCLLVMUserTileShader::getMaxTotalThreadsPerThreadgroup(AGCLLVMUserTileShader *this)
{
  return *((unsigned int *)this + 1129);
}

void AGCLLVMUserTileShader::~AGCLLVMUserTileShader(AGCLLVMUserTileShader *this)
{
  *(void *)this = &unk_1F25C3938;
  uint64_t v2 = (AGCLLVMUserTileShader *)((char *)this + 4536);
  *((void *)this + 567) = &unk_1F25C3C68;
  *((void *)this + 571) = &unk_1F25C3D58;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)this + 561));
  uint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = *(void *)((char *)this + v3 + 4456);
    if (v4 != -8192 && v4 != -4096 && v4 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserTileShader *)((char *)this + v3 + 4440));
    }
    v3 -= 24;
    if (v3 == -144)
    {
      AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1F25C3D68);
      AGCLLVMObject::~AGCLLVMObject(v2);
      JUMPOUT(0x1CB7A0780);
    }
  }
}

{
  AGCLLVMObject *v2;
  uint64_t i;
  uint64_t v4;

  *(void *)this = &unk_1F25C3938;
  uint64_t v2 = (AGCLLVMUserTileShader *)((char *)this + 4536);
  *((void *)this + 567) = &unk_1F25C3C68;
  *((void *)this + 571) = &unk_1F25C3D58;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)this + 561));
  for (uint64_t i = 0; i != -144; i -= 24)
  {
    uint64_t v4 = *(void *)((char *)this + i + 4456);
    if (v4 != -8192 && v4 != -4096 && v4 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserTileShader *)((char *)this + i + 4440));
    }
  }
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1F25C3D68);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t AGCLLVMUserTileShader::AGCLLVMUserTileShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (unsigned char *)(a1 + 4504);
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 4536), a2, *a3);
  AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)a1, (uint64_t *)off_1F25C3D68, (uint64_t)a3, "air.kernel", (uint64_t)&default_cs, 0, 0);
  *(void *)a1 = &unk_1F25C3938;
  *(void *)(a1 + 4536) = &unk_1F25C3C68;
  *(void *)(a1 + 4568) = &unk_1F25C3D58;
  uint64_t v12 = 4320;
  do
  {
    int v13 = (void *)(a1 + v12);
    v13[1] = 0;
    v13[2] = 0;
    *int v13 = 4;
    uint64_t v14 = a1 + v12 + 24;
    v12 += 24;
  }
  while (v14 != a1 + 4464);
  *(void *)(a1 + 4464) = a5;
  *(void *)(a1 + 4472) = a6;
  *(void *)(a1 + 4496) = 0;
  *(void *)(a1 + 4488) = 0;
  *(void *)(a1 + 448llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = a1 + 4488;
  unsigned char *v11 = 0;
  AGCLLVMUserShader::enableStatistics(a1, *(_DWORD *)(*(void *)(a4 + 16) + 60) & 1, (*(_DWORD *)(*(void *)(a4 + 16) + 60) >> 1) & 1);
  uint64_t v15 = *(void *)(a4 + 16);
  *(unsigned char *)(a1 + 18) = (*(unsigned char *)(v15 + 60) & 8) != 0;
  *(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 276llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = (*(_DWORD *)(v15 + 60) & 0x4000000) != 0;
  *(void *)(a1 + 3304) = *(void *)(v15 + 16);
  *(_DWORD *)(a1 + 452llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = (*(_DWORD *)(v15 + 60) >> 4) & 7;
  *(_DWORD *)(a1 + 4524) = *(_DWORD *)(v15 + 60) >> 31;
  v11[26] = (*(_DWORD *)(v15 + 60) & 0x40000000) != 0;
  *(_DWORD *)(a1 + 4516) = AGCLLVMUserShader::parseMaxTotalThreadsPerThreadgroup((AGCLLVMUserShader *)a1);
  uint64_t v16 = *(void *)(a4 + 16);
  v11[24] = (*(_DWORD *)(v16 + 60) & 0x80) != 0;
  *(_DWORD *)(a1 + 4508) = (*(_DWORD *)(v16 + 64) >> 4) & 3;
  v11[8] = (**(uint64_t (***)(uint64_t))a4)(a4);
  uint64_t v17 = *(void *)(a4 + 16);
  v11[25] = (*(unsigned char *)(v17 + 64) & 0x40) != 0;
  *(unsigned char *)(a1 + 3712) = *(unsigned char *)(v17 + 61) & 1;
  *(unsigned char *)(a1 + 3713) = (*(_DWORD *)(v17 + 60) & 0x200) != 0;
  return a1;
}

uint64_t llvm::GlobalValue::setVisibility(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 32);
  unsigned int v3 = v2 & 0xFFFFFFCF | 0x10;
  *(_DWORD *)(this + 32) = v3;
  if ((v2 & 0xFu) - 7 >= 2)
  {
    this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this);
    if (this) {
      return this;
    }
    unsigned int v3 = *(_DWORD *)(v1 + 32);
  }
  *(_DWORD *)(v1 + 32) = v3 | 0x4000;
  return this;
}

uint64_t AGCLLVMUserObject::createDylibBaseGetterFunc(AGCLLVMUserObject *this)
{
  uint64_t result = *((void *)this + 355);
  if (!result)
  {
    if (!*((void *)this + 306))
    {
      int v3 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24));
      if (v3 == 29)
      {
        uint64_t v6 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
        unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 720))(v6);
      }
      else if (v3 == 7)
      {
        uint64_t v4 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
        unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 560))(v4);
      }
      else
      {
        uint64_t v7 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
        unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 280))(v7);
      }
      unsigned int v8 = v5;
      uint64_t v9 = (llvm::Type *)llvm::PointerType::get();
      uint64_t v14 = "agc.dylib_base";
      __int16 v15 = 259;
      GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v9, (const llvm::Twine *)&v14, v8, 0, 5, 0);
      AGCLLVMUserObject::setDylibLinkage(GlobalBufferBinding, v11);
      uint64_t v12 = (AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24));
      (*(void (**)(void))(**(void **)(*((void *)v12 + 50) + 832) + 16))(*(void *)(*((void *)v12 + 50) + 832));
      AGCLLVMObject::addDylibBinding(v12, GlobalBufferBinding);
      llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2432), (uint64_t)GlobalBufferBinding);
    }
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    *((void *)this + 355) = v13;
    *(_DWORD *)(v13 + 32) = *(_DWORD *)(v13 + 32) & 0xFFFFBFC0 | 0x4008;
    uint64_t v14 = "entry";
    __int16 v15 = 259;
    operator new();
  }
  return result;
}

uint64_t AGCLLVMUserObject::buildImageTextureBufferLength(AGCLLVMUserObject *this, llvm::Value *a2)
{
  uint64_t v4 = *(void *)(*(void *)this - 24);
  if (*(unsigned char *)(*(void *)((char *)this + v4 + 400) + 1755))
  {
    unsigned int v5 = (uint64_t *)((char *)this + v4 + 32);
    uint64_t v6 = (llvm::Type *)*((void *)this + 169);
    uint64_t v7 = AGCLLVMUserObject::buildImageArgumentPointer(this, a2, 2u);
    __int16 v38 = 257;
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v5 + 1, v6, v7, 0, (uint64_t)v37);
    uint64_t v9 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v38 = 257;
    int v10 = (llvm::IRBuilderBase *)(v9 + 40);
    uint64_t v11 = (llvm::Value *)llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateExtractElement(v10, AlignedLoad, v11, (const llvm::Twine *)v37);
  }
  if (!*((void *)this + 303))
  {
    unsigned int v28 = (*(uint64_t (**)(void))(*(void *)((char *)this + v4) + 64))();
    if (v28 > 0x1D) {
      goto LABEL_16;
    }
    if (((1 << v28) & 0x400198) != 0)
    {
      uint64_t v29 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      unsigned int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 448))(v29);
      goto LABEL_11;
    }
    if (v28 == 29)
    {
      uint64_t v34 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      unsigned int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 728))(v34);
    }
    else
    {
LABEL_16:
      uint64_t v35 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      unsigned int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 208))(v35);
    }
LABEL_11:
    unsigned int v31 = v30;
    uint64_t v32 = (llvm::Type *)llvm::PointerType::get();
    v37[0] = "agc.texture_heap.texture_buffer_length";
    __int16 v38 = 259;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v32, (const llvm::Twine *)v37, v31, 0, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2408), (uint64_t)GlobalBufferBinding);
    if (a2) {
      goto LABEL_5;
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
LABEL_5:
  uint64_t v13 = (llvm::Type **)*((void *)this + 303);
  uint64_t UDiv = (llvm::Value *)AGCLLVMUserObject::buildImageHeapIndex(this, a2);
  uint64_t v16 = *(void *)this;
  uint64_t v17 = (char *)this + *(void *)(*(void *)this - 24);
  if (!*(_DWORD *)(*((void *)v17 + 50) + 1780))
  {
    uint64_t v18 = (llvm::IRBuilderBase *)(v17 + 40);
    uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v38 = 257;
    uint64_t UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v18, UDiv, v19, (const llvm::Twine *)v37);
    uint64_t v16 = *(void *)this;
  }
  __int16 v20 = (uint64_t *)((char *)this + *(void *)(v16 - 24));
  int v21 = (llvm::Type *)v20[29];
  __int16 v38 = 257;
  uint64_t v22 = AGCLLVMBuilder::tryDeducePointeeType(v13, v14);
  v20 += 5;
  long long v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v20, v22, (uint64_t)v13, 0, (uint64_t)v37);
  v36[16] = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v20, v21, v23, UDiv, (const llvm::Twine *)v36);
  int v25 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  __int16 v38 = 257;
  int v27 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v26);
  return llvm::IRBuilderBase::CreateAlignedLoad(v25 + 5, v27, (uint64_t)GEP, 0, (uint64_t)v37);
}

uint64_t AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal(AGCLLVMUserObject *this)
{
  int v2 = (char *)this + *(void *)(*(void *)this - 24);
  int v3 = (llvm::ArrayType *)*((void *)v2 + 30);
  unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(*((void *)v2 + 50) + 824) + 1056))(*(void *)(*((void *)v2 + 50) + 824));
  uint64_t v5 = llvm::ArrayType::get(v3, (llvm::Type *)v4);
  if (!*((void *)this + 327))
  {
    uint64_t v6 = v5;
    unsigned int v7 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24));
    if (v7 <= 0x1D)
    {
      if (((1 << v7) & 0x400198) != 0)
      {
        uint64_t v8 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
        unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 472))(v8);
LABEL_6:
        unsigned int v10 = v9;
        uint64_t v11 = (llvm::Type *)llvm::PointerType::get();
        v17[0] = "agc.per_encoder_indirection_table.";
        v17[2] = v10;
        __int16 v18 = 2051;
        GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v11, (const llvm::Twine *)v17, v10, 0, 5, 0);
        llvm::GlobalValue::setLinkage((uint64_t)GlobalBufferBinding, 10);
        *((unsigned char *)GlobalBufferBinding + 80) &= ~1u;
        llvm::Constant::getNullValue(*((llvm::Constant **)GlobalBufferBinding + 3), v13);
        llvm::GlobalVariable::setInitializer();
        llvm::Module::getOrInsertNamedMetadata();
        llvm::ConstantInt::get();
        v17[0] = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2600), (uint64_t)GlobalBufferBinding);
        *((void *)this + 328) = v6;
        return v6;
      }
      if (v7 == 29)
      {
        uint64_t v15 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
        unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 744))(v15);
        goto LABEL_6;
      }
    }
    uint64_t v16 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 232))(v16);
    goto LABEL_6;
  }
  return *((void *)this + 328);
}

llvm::Type *AGCLLVMUserObject::createIntersectionFunctionTableHeapGlobal(AGCLLVMUserObject *this)
{
  if (*((void *)this + 331)) {
    return (llvm::Type *)*((void *)this + 332);
  }
  {
    uint64_t v8 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    AGCLLVMUserObject::createIntersectionFunctionTableHeapGlobal(void)::bind_indices[0] = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 480))(v8);
    uint64_t v9 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    dword_1EA614004 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 240))(v9);
  }
  BOOL v3 = (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 7
    && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 22
    && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 8;
  uint64_t v4 = AGCLLVMUserObject::createIntersectionFunctionTableHeapGlobal(void)::bind_indices[v3];
  int v2 = (llvm::Type *)llvm::PointerType::get();
  v10[0] = "agc.intersection_function_table_heap.";
  v10[2] = v4;
  __int16 v11 = 2051;
  GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v2, (const llvm::Twine *)v10, v4, 0, 5, 0);
  llvm::GlobalValue::setLinkage((uint64_t)GlobalBufferBinding, 10);
  *((unsigned char *)GlobalBufferBinding + 80) &= ~1u;
  llvm::Constant::getNullValue(*((llvm::Constant **)GlobalBufferBinding + 3), v6);
  llvm::GlobalVariable::setInitializer();
  llvm::Module::getOrInsertNamedMetadata();
  llvm::ConstantInt::get();
  v10[0] = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2632), (uint64_t)GlobalBufferBinding);
  *((void *)this + 332) = v2;
  return v2;
}

void *AGCLLVMUserObject::createSCSUserDataBoundGlobal(void *this)
{
  if (!this[321])
  {
    uint64_t v1 = (AGCLLVMUserObject *)this;
    int v2 = (llvm::ValueHandleBase *)(this + 319);
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)((char *)this + *(void *)(*this - 24)) + 64))((uint64_t)this + *(void *)(*this - 24));
    if ((v3 - 7) < 2 || v3 == 22)
    {
      uint64_t v5 = *(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824);
      int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 880))(v5);
      int v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824)
                                + 640))();
    }
    else
    {
      if (v3 == 29)
      {
        uint64_t v8 = *(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824);
        unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 840))(v8) & 0xFFFFF | 0x900000;
LABEL_12:
        __int16 v11 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 232), (llvm::Type *)2);
        v14[0] = "agc.ria.ray_data_user_bound";
        __int16 v15 = 259;
        GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(v1, v11, (const llvm::Twine *)v14, v9, 0, 0, 0);
        AGCLLVMUserObject::setDylibLinkage(GlobalBufferBinding, v13);
        return (void *)llvm::ValueHandleBase::operator=(v2, (uint64_t)GlobalBufferBinding);
      }
      uint64_t v10 = *(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824);
      int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 880))(v10);
      int v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824)
                                + 312))();
    }
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)v14, v6, v7);
    unsigned int v9 = v14[0];
    goto LABEL_12;
  }
  return this;
}

void *AGCLLVMUserObject::createSCSDriverDataStartGlobal(void *this)
{
  if (!this[324])
  {
    uint64_t v1 = (AGCLLVMUserObject *)this;
    int v2 = (llvm::ValueHandleBase *)(this + 322);
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)((char *)this + *(void *)(*this - 24)) + 64))((uint64_t)this + *(void *)(*this - 24));
    if ((v3 - 7) < 2 || v3 == 22)
    {
      uint64_t v5 = *(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824);
      int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 896))(v5);
      int v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824)
                                + 640))();
    }
    else
    {
      if (v3 == 29)
      {
        uint64_t v8 = *(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824);
        unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 848))(v8) & 0xFFFFF | 0x900000;
LABEL_12:
        __int16 v11 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 232), (llvm::Type *)2);
        v14[0] = "agc.ria.ray_data_driver_start";
        __int16 v15 = 259;
        GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(v1, v11, (const llvm::Twine *)v14, v9, 0, 0, 0);
        AGCLLVMUserObject::setDylibLinkage(GlobalBufferBinding, v13);
        return (void *)llvm::ValueHandleBase::operator=(v2, (uint64_t)GlobalBufferBinding);
      }
      uint64_t v10 = *(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824);
      int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 896))(v10);
      int v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824)
                                + 312))();
    }
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)v14, v6, v7);
    unsigned int v9 = v14[0];
    goto LABEL_12;
  }
  return this;
}

llvm::Type *AGCLLVMUserObject::createVisibleFunctionTableHeapGlobal(AGCLLVMUserObject *this)
{
  if (!*((void *)this + 335))
  {
    int v3 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24));
    if ((v3 - 7) >= 2)
    {
      if (v3 == 29)
      {
        uint64_t v6 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
        unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 736))(v6);
        goto LABEL_9;
      }
      if (v3 != 22)
      {
        uint64_t v7 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
        unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 248))(v7);
        goto LABEL_9;
      }
    }
    uint64_t v4 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 488))(v4);
LABEL_9:
    unsigned int v8 = v5;
    int v2 = (llvm::Type *)llvm::PointerType::get();
    v12[0] = "agc.visible_function_table_heap.";
    void v12[2] = v8;
    __int16 v13 = 2051;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v2, (const llvm::Twine *)v12, v8, 0, 5, 0);
    llvm::GlobalValue::setLinkage((uint64_t)GlobalBufferBinding, 10);
    *((unsigned char *)GlobalBufferBinding + 80) &= ~1u;
    llvm::Constant::getNullValue(*((llvm::Constant **)GlobalBufferBinding + 3), v10);
    llvm::GlobalVariable::setInitializer();
    llvm::Module::getOrInsertNamedMetadata();
    llvm::ConstantInt::get();
    v12[0] = llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2664), (uint64_t)GlobalBufferBinding);
    *((void *)this + 336) = v2;
    return v2;
  }
  return (llvm::Type *)*((void *)this + 336);
}

uint64_t AGCLLVMUserObject::createGlobalBindingTableGlobal(AGCLLVMUserObject *this)
{
  uint64_t result = *((void *)this + 345);
  if (!result)
  {
    if ((*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) == 7
      || (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) == 22
      || (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) == 8
      || (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) == 3
      || (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) == 4)
    {
      uint64_t v3 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 656))(v3);
    }
    else
    {
      uint64_t v8 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 304))(v8);
    }
    unsigned int v5 = v4;
    uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
    unsigned int v9 = "agc.global_binding_base";
    __int16 v10 = 259;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v6, (const llvm::Twine *)&v9, v5, 0, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2744), (uint64_t)GlobalBufferBinding);
    return *((void *)this + 345);
  }
  return result;
}

AGCLLVMUserObject *AGCLLVMUserObject::setDylibLinkage(AGCLLVMUserObject *this, llvm::Value *a2)
{
  llvm::GlobalValue::setLinkage((uint64_t)this, 10);
  *((unsigned char *)this + 80) &= ~1u;
  llvm::Constant::getNullValue(*((llvm::Constant **)this + 3), v3);
  llvm::GlobalVariable::setInitializer();
  return this;
}

uint64_t AGCLLVMUserObject::buildImageHeapIndex(AGCLLVMUserObject *this, llvm::Value *a2)
{
  unsigned int v4 = (llvm::Type *)*((void *)this + 217);
  if (*((unsigned char *)this + 3566)) {
    goto LABEL_2;
  }
  uint64_t result = AGCLLVMUserObject::buildBindlessIndex(this, a2);
  if (!result)
  {
    if (*((unsigned char *)this + 3566)) {
      goto LABEL_2;
    }
    imp = llvm::SmallPtrSetImplBase::find_imp((AGCLLVMUserObject *)((char *)this + 1096), a2);
    uint64_t v9 = *((void *)this + 138);
    uint64_t v10 = 1112;
    if (v9 == *((void *)this + 137)) {
      uint64_t v10 = 1116;
    }
    if (imp == (const void **)(v9 + 8 * *(unsigned int *)((char *)this + v10))) {
      goto LABEL_2;
    }
    __int16 v11 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v12 = (llvm::IRBuilderBase *)(v11 + 40);
    uint64_t v13 = *((void *)v11 + 30);
    __int16 v23 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v11 + 40), 47, (uint64_t)a2, v13, (uint64_t)v22);
    __int16 v15 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v21 = 257;
    uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v12, Cast, v15, (const llvm::Twine *)v20);
    uint64_t v17 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232);
    __int16 v19 = 257;
    uint64_t result = llvm::IRBuilderBase::CreateCast((uint64_t)v12, 38, LShr, v17, (uint64_t)v18);
    if (!result)
    {
LABEL_2:
      unsigned int v5 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
      uint64_t v6 = AGCLLVMUserObject::buildImageArgumentPointer((int)this, a2);
      __int16 v23 = 257;
      return llvm::IRBuilderBase::CreateAlignedLoad(v5 + 5, v4, v6, 0, (uint64_t)v22);
    }
  }
  return result;
}

uint64_t AGCLLVMUserObject::createDylibBaseGetterFunc(void)::$_1::operator()(void **a1)
{
  int v2 = *a1;
  uint64_t v3 = (*a1)[475];
  if (!v3)
  {
    uint64_t v3 = (*(uint64_t (**)(void, void))(**(void **)((char *)v2 + *(void *)(*v2 - 24) + 400) + 1296))(*(void *)((char *)v2 + *(void *)(*v2 - 24) + 400), *(void *)((char *)v2 + *(void *)(*v2 - 24) + 368));
    v2[475] = v3;
  }
  unsigned int v4 = (char *)v2 + *(void *)(*v2 - 24);
  uint64_t v5 = *((void *)v4 + 50);
  long long v12 = *(_OWORD *)(v4 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (llvm::IRBuilderBase *)(v4 + 40));
  int v14 = *((_DWORD *)v4 + 34);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v5 + 992))(v5, &v12, v3);
  uint64_t v7 = *a1[1];
  __int16 v11 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v4 + 40), 48, v6, v7, (uint64_t)v10);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  return Cast;
}

void *AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(void *a1, llvm::Instruction *a2, unsigned int a3, llvm::Type *a4, uint64_t a5)
{
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40), a2);
  uint64_t v10 = (uint64_t *)*((void *)a2 + 4 * a3 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  uint64_t v41 = *v10;
  __int16 v11 = (llvm::Value *)llvm::ConstantInt::get();
  long long v12 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v13 = *((void *)v12 + 30);
  v46[0] = "resource_index";
  __int16 v47 = 259;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v12 + 40), 47, (uint64_t)v10, v13, (uint64_t)v46);
  __int16 v15 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  v46[0] = "heap_offset";
  __int16 v47 = 259;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v15, Cast, v11, (const llvm::Twine *)v46);
  uint64_t v17 = llvm::PointerType::get();
  uint64_t v18 = llvm::PointerType::get();
  __int16 v19 = (char *)a1 + *(void *)(*a1 - 24);
  __int16 v20 = (llvm::Type *)*((void *)v19 + 27);
  __int16 v21 = (llvm::IRBuilderBase *)(v19 + 40);
  __int16 v47 = 257;
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v19 + 5, a4, a5, 0, (uint64_t)v46);
  __int16 v45 = 257;
  __int16 v23 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v21, 49, AlignedLoad, v17, (uint64_t)v44);
  __int16 v43 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v21, v20, v23, Mul, (const llvm::Twine *)v42);
  uint64_t v25 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
  __int16 v47 = 257;
  uint64_t v26 = llvm::IRBuilderBase::CreateCast(v25, 49, GEP, v18, (uint64_t)v46);
  int v27 = (char *)a1 + *(void *)(*a1 - 24);
  unsigned int v28 = (llvm::Type *)*((void *)v27 + 30);
  __int16 v47 = 257;
  uint64_t v29 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v27 + 5, v28, v26, 0, (uint64_t)v46);
  uint64_t v30 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
  __int16 v47 = 257;
  uint64_t result = (void *)llvm::IRBuilderBase::CreateCast(v30, 48, v29, v41, (uint64_t)v46);
  uint64_t v32 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  char v33 = &v32[8 * a3];
  uint64_t v34 = v33;
  if (*v33)
  {
    char v36 = (void *)v33[2];
    uint64_t v35 = v33 + 2;
    void *v36 = *(v35 - 1);
    uint64_t v37 = *(v35 - 1);
    if (v37) {
      *(void *)(v37 + 16) = *v35;
    }
  }
  void *v34 = result;
  if (result)
  {
    uint64_t v39 = result[1];
    ++result;
    uint64_t v38 = v39;
    int v40 = &v32[8 * a3];
    *((void *)v40 + 1) = v39;
    if (v39) {
      *(void *)(v38 + 16) = v40 + 2;
    }
    *((void *)v40 + 2) = result;
    *uint64_t result = v34;
  }
  return result;
}

uint64_t std::function<BOOL ()(llvm::Value const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = ((uint64_t (*)(void))std::__throw_bad_function_call[abi:nn180100])();
  return AGCLLVMUserObject::buildRecordRaytraceForGin1122(v3);
}

uint64_t AGCLLVMUserObject::buildRecordRaytraceForGin1122(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 - 24) + a1 + 32;
  long long v14 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v14, v4 + 8);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 24)) + 64))(a1 + *(void *)(*(void *)a1 - 24))
    || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 24)) + 64))(a1 + *(void *)(*(void *)a1 - 24)),
        result == 8))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 376))(a1);
    if ((result & 1) == 0)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 24)) + 64))(a1 + *(void *)(*(void *)a1 - 24)) == 8)
      {
        llvm::BasicBlock::splitBasicBlock();
        long long v12 = "record_ray_trace";
        __int16 v13 = 259;
        operator new();
      }
      uint64_t v6 = *(void *)(*(void *)a1 - 24) + a1;
      uint64_t v7 = *(void *)(v6 + 400);
      long long v9 = *(_OWORD *)(v6 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v6 + 40));
      int v11 = *(_DWORD *)(v6 + 136);
      (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v7 + 1336))(v7, &v9, a1 + 3784);
      if (v10) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 24)) + 64))(a1 + *(void *)(*(void *)a1 - 24));
      if (result == 8)
      {
        uint64_t result = llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40), 0);
        uint64_t v8 = *(void *)(*(void *)a1 - 24) + a1;
        *(void *)(v8 + 88) = 0;
        *(void *)(v8 + 96) = 40;
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0,std::allocator<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0>,BOOL ()(llvm::Value const*)>::operator()(uint64_t a1, const void **a2)
{
  uint64_t v3 = *a2;
  llvm::SmallPtrSetImplBase::insert_imp(*(llvm::SmallPtrSetImplBase **)(a1 + 8), *a2);
  if (!v4) {
    return 1;
  }
  uint64_t v5 = v3[1];
  uint64_t v6 = 1;
  if (v5)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v5 + 24);
      int v8 = *(unsigned __int8 *)(v7 + 16);
      if (v7 && v8 == 92)
      {
        if (**(unsigned char **)(a1 + 16))
        {
          if (!**(_DWORD **)(v7 + 64)
            && (std::function<BOOL ()(llvm::Value const*)>::operator()(*(void *)(*(void *)(a1 + 24) + 24), v7) & 1) == 0)
          {
            return 0;
          }
        }
        else if (*(_DWORD *)(v7 + 72) != 1 || **(_DWORD **)(v7 + 64))
        {
          return 0;
        }
      }
      else if (v7 && v8 == 84)
      {
        uint64_t v9 = *(void *)(v7 - 32);
        if (!v9 || *(unsigned char *)(v9 + 16) || *(void *)(v9 + 24) != *(void *)(v7 + 72)) {
          return 0;
        }
        uint64_t Name = (void *)llvm::Value::getName(*(llvm::Value **)(v7 - 32));
        if (v11 < 0x20
          || (*Name == 0x5F7465672E726961 ? (BOOL v12 = Name[1] == 0x746E695F65707974) : (BOOL v12 = 0),
              v12 ? (BOOL v13 = Name[2] == 0x6F69746365737265) : (BOOL v13 = 0),
              v13 ? (BOOL v14 = Name[3] == 0x746C757365725F6ELL) : (BOOL v14 = 0),
              !v14))
        {
          uint64_t v15 = (void *)llvm::Value::getName((llvm::Value *)v9);
          if (v16 < 0x1F) {
            return 0;
          }
          BOOL v17 = *v15 == 0x656C65722E726961 && v15[1] == 0x65746E695F657361;
          BOOL v18 = v17 && v15[2] == 0x6E6F697463657372;
          if (!v18 || *(void *)((char *)v15 + 23) != 0x746C757365725F6ELL) {
            return 0;
          }
        }
      }
      else
      {
        unsigned int v20 = (((v8 - 75) >> 1) | (((_BYTE)v8 - 75) << 7));
        BOOL v21 = v20 > 5;
        int v22 = (1 << v20) & 0x33;
        BOOL v23 = v21 || v22 == 0;
        if (v23
          || !std::function<BOOL ()(llvm::Value const*)>::operator()(*(void *)(*(void *)(a1 + 24) + 24), v7))
        {
          return 0;
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (!v5) {
        return 1;
      }
    }
  }
  return v6;
}

__n128 std::__function::__func<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0,std::allocator<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0>,BOOL ()(llvm::Value const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C63B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0,std::allocator<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0>,BOOL ()(llvm::Value const*)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = &unk_1F25C63B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0,std::allocator<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0>,BOOL ()(llvm::Value const*)>::~__func()
{
}

uint64_t llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 25));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

std::string *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(long long *a1, long long *a2, std::string *this)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v6 = *v5;
        this->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
      }
      uint64_t v5 = (long long *)((char *)v5 + 24);
      ++this;
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EBD0E01llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = qword_1EBD0E010 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x1CB79F270](a2 + 25, 8);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 24;
  if (a2) {
    memcpy((void *)(v8 + 24), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *(void *)uint64_t v9 = a2;
  *(void *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = 0;
  *uint64_t i = v9;
  ++dword_1EBD0E00C;
  for (uint64_t i = (uint64_t *)(AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map));
        !*i || *i == -8;
  return i;
}

__n128 AGCLLVMUserObject::initializeRaytracingFunctionMap(void)::$_0::operator()(uint64_t a1, _DWORD **a2, std::string *this)
{
  if (**a2) {
    std::string::append(this, ".intersection_function_buffer");
  }
  int v6 = *a2[1];
  if (v6 == 1)
  {
    uint64_t v7 = ".instancing";
  }
  else
  {
    if (v6 != 2) {
      goto LABEL_8;
    }
    uint64_t v7 = ".multi_level_instancing";
  }
  std::string::append(this, v7);
LABEL_8:
  if (*a2[2]) {
    std::string::append(this, ".triangle_data");
  }
  if (*a2[3]) {
    std::string::append(this, ".curve_data");
  }
  if (*a2[4]) {
    std::string::append(this, ".world_space_data");
  }
  if (*a2[5]) {
    std::string::append(this, ".primitive_motion");
  }
  if (*a2[6]) {
    std::string::append(this, ".instance_motion");
  }
  if (*a2[7]) {
    std::string::append(this, ".extended_limits");
  }
  __n128 result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a1 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(void *)(a1 + 16) = *((void *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

void *std::pair<llvm::StringRef,std::function<BOOL ()(AGCLLVMTargetLowerer &,llvm::CallInst *)>>::pair[abi:nn180100]<char const(&)[33],BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),0>(void *a1, char *__s, uint64_t *a3)
{
  *a1 = __s;
  a1[1] = strlen(__s);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  a1[5] = 0;
  if (v6 & 1 | v5)
  {
    a1[2] = &unk_1F25C46E0;
    a1[3] = v5;
    a1[4] = v6;
    a1[5] = a1 + 2;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(AGCLLVMTargetLowerer &,llvm::CallInst *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrixInit(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 784))();
}

uint64_t std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(uint64_t (**)(void *, void, void))(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = (void *)(a2 + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *, void, void))(*v5 + v3);
  }
  return v3(v5, *a3, *(unsigned __int8 *)(a1 + 24));
}

__n128 std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4728;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25C4728;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::~__func()
{
}

uint64_t std::__function::__func<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),std::allocator<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *)>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(uint64_t (**)(void *, void))(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = (void *)(a2 + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *, void))(*v5 + v3);
  }
  return v3(v5, *a3);
}

__n128 std::__function::__func<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),std::allocator<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *)>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C46E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),std::allocator<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *)>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C46E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),std::allocator<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *)>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::~__func()
{
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrixStore(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 776))();
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrixLoad(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 768))();
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 752))();
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 760))();
}

uint64_t std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(uint64_t (**)(void *, void, BOOL, BOOL, BOOL, BOOL))(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = (void *)(a2 + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *, void, BOOL, BOOL, BOOL, BOOL))(*v5 + v3);
  }
  return v3(v5, *a3, *(_DWORD *)(a1 + 24) != 0, *(_DWORD *)(a1 + 28) != 0, *(_DWORD *)(a1 + 32) != 0, *(_DWORD *)(a1 + 36) != 0);
}

__n128 std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F25C4698;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::~__func()
{
}

uint64_t AGCLLVMTargetLowerer::buildWaitSimdgroupEvents(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 712))();
}

uint64_t AGCLLVMTargetLowerer::buildIsNullSimdgroupEvent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 728))();
}

uint64_t AGCLLVMTargetLowerer::buildGetNullSimdgroupEvent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 720))();
}

uint64_t AGCLLVMTargetLowerer::buildMemCpy2D(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 704))();
}

uint64_t std::__function::__func<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::allocator<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL)>,void ()(AGCLLVMTargetLowerer&,llvm::CallInst *,BOOL)>::operator()(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  uint64_t v4 = *(uint64_t (**)(void *, void, void))(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = (void *)(a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, void, void))(*v6 + v4);
  }
  return v4(v6, *a3, *a4);
}

__n128 std::__function::__func<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::allocator<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL)>,void ()(AGCLLVMTargetLowerer&,llvm::CallInst *,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4770;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::allocator<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL)>,void ()(AGCLLVMTargetLowerer&,llvm::CallInst *,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C4770;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::allocator<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL)>,void ()(AGCLLVMTargetLowerer&,llvm::CallInst *,BOOL)>::~__func()
{
}

uint64_t AGCLLVMTargetLowerer::buildMemCpy1D(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 696))();
}

uint64_t areTypesIsomorphic(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  while (1)
  {
    unsigned int v2 = *(_DWORD *)(a1 + 8);
    unsigned int v3 = *(_DWORD *)(a2 + 8);
    if (v3 != v2) {
      return 0;
    }
    int v4 = *(_DWORD *)(a1 + 8);
    if (v4 != 17) {
      break;
    }
    if (*(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
    a1 = **(void **)(a1 + 16);
    a2 = **(void **)(a2 + 16);
    if (a1 == a2) {
      return 1;
    }
  }
  switch(v4)
  {
    case 14:
      if (v2 > 0xFF != v3 > 0xFF) {
        return 0;
      }
      int v6 = *(_DWORD *)(a1 + 12);
      if (v6 != *(_DWORD *)(a2 + 12)) {
        return 0;
      }
      uint64_t v7 = *(llvm::Type ***)(a1 + 16);
      uint64_t v8 = *(llvm::Type ***)(a2 + 16);
      uint64_t result = areTypesIsomorphic(*v7, *v8);
      if (result)
      {
        uint64_t v9 = 0;
        uint64_t v10 = (v6 - 1);
        do
        {
          uint64_t result = v10 == v9;
          if (v10 == v9) {
            break;
          }
          ++v9;
          char v11 = areTypesIsomorphic(v7[v9], v8[v9]);
          uint64_t result = 0;
        }
        while ((v11 & 1) != 0);
      }
      break;
    case 16:
      if (((*(_DWORD *)(a1 + 8) & 0x100) == 0) != ((*(_DWORD *)(a2 + 8) & 0x100) == 0)) {
        return 0;
      }
      if (((v2 ^ v3) & 0x200) != 0) {
        return 0;
      }
      uint64_t v12 = *(unsigned int *)(a1 + 12);
      if (v12 != *(_DWORD *)(a2 + 12)) {
        return 0;
      }
      if (!v12) {
        return 1;
      }
      BOOL v13 = *(llvm::Type ***)(a1 + 16);
      BOOL v14 = *(llvm::Type ***)(a2 + 16);
      uint64_t v15 = v12 - 1;
      do
      {
        BOOL v17 = *v13++;
        unint64_t v16 = v17;
        BOOL v18 = *v14++;
        uint64_t result = areTypesIsomorphic(v16, v18);
        BOOL v20 = v15-- != 0;
      }
      while (result && v20);
      break;
    case 15:
      if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12) {
        unsigned int v2 = *(_DWORD *)(**(void **)(a1 + 16) + 8);
      }
      if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
        unsigned int v3 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
      }
      return (v3 ^ v2) < 0x100;
    default:
      return 0;
  }
  return result;
}

uint64_t AGCLLVMUserObject::getBindlessConstantSampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v71 = a2;
  *((void *)&v71 + 1) = a3;
  int v6 = *(void **)(a1 + 896);
  uint64_t v7 = *(_OWORD **)(a1 + 904);
  uint64_t v8 = v6;
  if (v6 != (void *)v7)
  {
    while (*v8 != a2 || v8[1] != a3)
    {
      v8 += 2;
      if (v8 == (void *)v7) {
        goto LABEL_7;
      }
    }
  }
  if (v8 == (void *)v7)
  {
LABEL_7:
    uint64_t v9 = ((char *)v7 - (char *)v6) >> 4;
    unint64_t v10 = *(void *)(a1 + 912);
    if ((unint64_t)v7 >= v10)
    {
      unint64_t v12 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60) {
        abort();
      }
      uint64_t v13 = v10 - (void)v6;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v16 = (_OWORD *)(v14 + 16 * v9);
      unint64_t v17 = v14 + 16 * v15;
      *unint64_t v16 = v71;
      char v11 = v16 + 1;
      BOOL v18 = *(char **)(a1 + 904);
      __int16 v19 = *(char **)(a1 + 896);
      if (v18 != v19)
      {
        do
        {
          *--unint64_t v16 = *((_OWORD *)v18 - 1);
          v18 -= 16;
        }
        while (v18 != v19);
        BOOL v18 = *(char **)(a1 + 896);
      }
      *(void *)(a1 + 896) = v16;
      *(void *)(a1 + 904) = v11;
      *(void *)(a1 + 912) = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *uint64_t v7 = v71;
      char v11 = v7 + 1;
    }
    *(void *)(a1 + 904) = v11;
  }
  if (*(unsigned char *)(a1 + 3696))
  {
    uint64_t v20 = *(void *)(*(void *)a1 - 24) + a1 + 40;
    uint64_t v21 = llvm::ConstantInt::get();
    __int16 v66 = 257;
    return llvm::IRBuilderBase::CreateCast(v20, 48, v21, a4, (uint64_t)v64);
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v64);
    *(void *)&v67[*(void *)(v65[0] - 24)] = 16;
    std::operator<<[abi:nn180100]<std::char_traits<char>>(v65, 48);
    v57[0] = &v71;
    v58[0] = 0;
    __int16 v59 = 270;
    llvm::Twine::str((uint64_t *)&__p, (llvm::Twine *)v57);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v65, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v57);
    *(void *)&v60[*(void *)(v58[0] - 24)] = 16;
    std::operator<<[abi:nn180100]<std::char_traits<char>>(v58, 48);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71 + 8;
    __p.__r_.__value_.__r.__words[2] = 0;
    __int16 v54 = 270;
    llvm::Twine::str((uint64_t *)v55, (llvm::Twine *)&__p);
    if (v56 >= 0) {
      uint64_t v25 = v55;
    }
    else {
      uint64_t v25 = (void **)v55[0];
    }
    if (v56 >= 0) {
      uint64_t v26 = HIBYTE(v56);
    }
    else {
      uint64_t v26 = (uint64_t)v55[1];
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)v25, v26);
    if (SHIBYTE(v56) < 0) {
      operator delete(v55[0]);
    }
    std::stringbuf::str();
    int v27 = std::string::insert(&v51, 0, "agc.const_sampler_heap_index_");
    std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    uint64_t v29 = std::string::append(&v52, "_");
    std::string::size_type v30 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::stringbuf::str();
    if ((v50 & 0x80u) == 0) {
      unsigned int v31 = v49;
    }
    else {
      unsigned int v31 = (void **)v49[0];
    }
    if ((v50 & 0x80u) == 0) {
      std::string::size_type v32 = v50;
    }
    else {
      std::string::size_type v32 = (std::string::size_type)v49[1];
    }
    char v33 = std::string::append(&__p, (const std::string::value_type *)v31, v32);
    std::string::size_type v34 = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)unsigned int v55 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    uint64_t v56 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if ((char)v50 < 0) {
      operator delete(v49[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    uint64_t GlobalVariable = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
    if (!GlobalVariable)
    {
      uint64_t GlobalVariable = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __int16 v54 = 260;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
      uint64_t v36 = llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v36 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      llvm::DataLayout::getPrefTypeAlignment((llvm::DataLayout *)(a1 + 232), *(llvm::Type **)(*(void *)(*(void *)a1 - 24) + a1 + 232));
      llvm::GlobalObject::setAlignment();
      uint64_t v37 = *(void *)(*(void *)a1 - 24) + a1;
      uint64_t v38 = *(void *)(v37 + 376);
      uint64_t v39 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v37 + 32), GlobalVariable);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v38, v39);
    }
    uint64_t v40 = llvm::PointerType::get();
    uint64_t v41 = *(void *)(*(void *)a1 - 24) + a1 + 40;
    __int16 v54 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast(v41, 50, (uint64_t)GlobalVariable, v40, (uint64_t)&__p);
    uint64_t v43 = *(void *)(*(void *)a1 - 24) + a1 + 40;
    __int16 v54 = 257;
    uint64_t v22 = llvm::IRBuilderBase::CreateCast(v43, 49, Cast, a4, (uint64_t)&__p);
    if (SHIBYTE(v56) < 0) {
      operator delete(v55[0]);
    }
    v57[0] = *MEMORY[0x1E4FBA408];
    uint64_t v44 = v57[0];
    uint64_t v45 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    uint64_t v46 = *(void *)(MEMORY[0x1E4FBA408] + 64);
    *(void *)((char *)v57 + *(void *)(v57[0] - 24)) = v46;
    uint64_t v47 = v45;
    v58[0] = v45;
    v58[1] = MEMORY[0x1E4FBA470] + 16;
    if (v62 < 0) {
      operator delete(v61);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CB7A0710](&v63);
    v64[0] = v44;
    *(void *)((char *)v64 + *(void *)(v44 - 24)) = v46;
    v65[0] = v47;
    v65[1] = MEMORY[0x1E4FBA470] + 16;
    if (v69 < 0) {
      operator delete(v68);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CB7A0710](&v70);
  }
  return v22;
}

uint64_t AGCLLVMUserObject::getOrCreateConstantSamplerGlobal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v31 = a2;
  *((void *)&v31 + 1) = a3;
  v32[0] = "agc.const_sampler_state_struct_ptr_";
  char v33 = &v31;
  __int16 v34 = 3587;
  llvm::Twine::str((uint64_t *)&__p, (llvm::Twine *)v32);
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    int v6 = *(_OWORD **)(a1 + 904);
    uint64_t v7 = *(void *)(a1 + 896);
    uint64_t v8 = ((uint64_t)v6 - v7) >> 4;
    unint64_t v9 = *(void *)(a1 + 912);
    if ((unint64_t)v6 >= v9)
    {
      unint64_t v11 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60) {
        abort();
      }
      uint64_t v12 = v9 - v7;
      if (v12 >> 3 > v11) {
        unint64_t v11 = v12 >> 3;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13) {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = (_OWORD *)(v13 + 16 * v8);
      unint64_t v16 = v13 + 16 * v14;
      *uint64_t v15 = v31;
      unint64_t v10 = v15 + 1;
      unint64_t v17 = *(char **)(a1 + 904);
      BOOL v18 = *(char **)(a1 + 896);
      if (v17 != v18)
      {
        do
        {
          *--uint64_t v15 = *((_OWORD *)v17 - 1);
          v17 -= 16;
        }
        while (v17 != v18);
        unint64_t v17 = *(char **)(a1 + 896);
      }
      *(void *)(a1 + 896) = v15;
      *(void *)(a1 + 904) = v10;
      *(void *)(a1 + 912) = v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *int v6 = v31;
      unint64_t v10 = v6 + 1;
    }
    *(void *)(a1 + 904) = v10;
    (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
    int v19 = *(unsigned __int8 *)(a1 + 15);
    uint64_t v20 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    uint64_t v21 = "agc.const_sampler_state_words_";
    if (v19) {
      uint64_t v21 = "_agx_const_ss.";
    }
    v32[0] = v21;
    char v33 = &v31;
    __int16 v34 = 3587;
    uint64_t v22 = llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v22 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    uint64_t v23 = *(void *)(*(void *)a1 - 24) + a1;
    uint64_t v24 = *(void *)(v23 + 376);
    uint64_t v25 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v23 + 32), v20);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v24, v25);
    v32[0] = llvm::PointerType::get();
    llvm::StructType::get();
    v32[0] = v20;
    llvm::ConstantStruct::get();
    uint64_t GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
    __int16 v34 = 260;
    v32[0] = &__p;
    uint64_t v26 = llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v26 + 80) |= 1u;
    llvm::GlobalVariable::setInitializer();
    int v27 = (uint64_t *)(a1 + 824);
    v32[0] = 4;
    v32[1] = 0;
    char v33 = (long long *)GlobalVariable;
    unint64_t v28 = GlobalVariable;
    if (GlobalVariable != -8192)
    {
      unint64_t v28 = GlobalVariable;
      if (GlobalVariable != -4096)
      {
        unint64_t v28 = GlobalVariable;
        if (GlobalVariable)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v32);
          unint64_t v28 = (unint64_t)v33;
        }
      }
    }
    std::__tree<llvm::WeakVH>::__emplace_unique_key_args<llvm::WeakVH,llvm::WeakVH>(v27, v28, v32);
    if (v33 != (long long *)-8192 && v33 != (long long *)-4096 && v33) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v32);
    }
  }
  if (v30 < 0) {
    operator delete(__p);
  }
  return GlobalVariable;
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v14, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  int v4 = *(int32x2_t **)(v3 + 24);
  unint64_t v16 = v4;
  uint64_t v21 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v15, &v21);
  if (result) {
    int v6 = v21;
  }
  else {
    int v6 = (void *)(*(void *)v4 + 48 * v4[2].u32[0]);
  }
  uint64_t v7 = v16;
  if ((void *)(*(void *)v16 + 48 * v16[2].u32[0]) == v6) {
    goto LABEL_23;
  }
  uint64_t v8 = v6[5];
  v22[0] = 2;
  v22[1] = 0;
  uint64_t v23 = -8192;
  uint64_t v24 = 0;
  uint64_t v21 = &unk_1F25C4628;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 1), v22);
  uint64_t v9 = v23;
  void v6[4] = v24;
  if (v9 != -8192 && v9 != -4096 && v9) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v22);
  }
  v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
  uint64_t v10 = (uint64_t)v16;
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v17, a2);
  unint64_t v17 = &unk_1F25C4628;
  uint64_t v20 = v10;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v22, (LODWORD(v18[0]) >> 1) & 3, v18);
  uint64_t v21 = &unk_1F25C4628;
  uint64_t v24 = v20;
  uint64_t v25 = v8;
  uint64_t v26 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)v10, *(_DWORD *)(v10 + 16), v23, &v26);
  if ((result & 1) == 0)
  {
    int v11 = *(_DWORD *)(v10 + 8);
    unsigned int v12 = *(_DWORD *)(v10 + 16);
    if (4 * v11 + 4 >= 3 * v12)
    {
      v12 *= 2;
    }
    else if (v12 + ~v11 - *(_DWORD *)(v10 + 12) > v12 >> 3)
    {
LABEL_12:
      unint64_t v13 = v26;
      ++*(_DWORD *)(v10 + 8);
      if (v13[3] != -4096) {
        --*(_DWORD *)(v10 + 12);
      }
      uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v13 + 1), v22);
      void v13[4] = v24;
      v13[5] = v25;
      goto LABEL_15;
    }
    llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::grow(v10, v12);
    uint64_t v26 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)v10, *(_DWORD *)(v10 + 16), v23, &v26);
    goto LABEL_12;
  }
LABEL_15:
  if (v23 != -8192 && v23 != -4096 && v23) {
    uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v22);
  }
  if (v19 != -8192 && v19 != -4096 && v19) {
    uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
  }
LABEL_23:
  if (v15 != -8192 && v15 != -4096)
  {
    if (v15) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v14);
    }
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x1CB79F270]((void *)v8, 48 * v8, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::initEmpty(a1);
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -4096;
    uint64_t v22 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &unk_1F25C4628;
    v16[0] = 2;
    v16[1] = 0;
    uint64_t v17 = -8192;
    if (v3)
    {
      uint64_t v9 = (uint64_t *)((char *)v4 + 24);
      uint64_t v10 = 48 * v3;
      do
      {
        uint64_t v11 = *v9;
        if (*v9 != v21 && v11 != v17)
        {
          uint64_t v23 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v23);
          uint64_t v13 = v23;
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v23 + 8), v9 - 2);
          *(void *)(v13 + 32) = v9[1];
          *(void *)(v13 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v9[2];
          ++*(_DWORD *)(a1 + 8);
          uint64_t v11 = *v9;
        }
        if (v11 != -8192 && v11 != -4096 && v11 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
        }
        v9 += 6;
        v10 -= 48;
      }
      while (v10);
      if (v17 != -8192 && v17 != -4096 && v17) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
      }
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    return llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::initEmpty(a1);
  }
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v9 = v2;
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if (result)
  {
    int v4 = v10;
    v11[0] = 2;
    v11[1] = 0;
    uint64_t v12 = -8192;
    uint64_t v13 = 0;
    uint64_t v10 = &unk_1F25C4628;
    uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v11);
    uint64_t v5 = v12;
    v4[4] = v13;
    if (v5 != -8192 && v5 != -4096 && v5) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  return result;
}

uint64_t AGCLLVMUserObject::buildEmulatedIsF16Format(unsigned char *a1, long long *a2, AGCLLVMUserObject *a3)
{
  uint64_t v6 = (uint64_t)&a1[*(void *)(*(void *)a1 - 24) + 32];
  long long v18 = *a2;
  uint64_t v19 = *((void *)a2 + 2);
  if (v19) {
    llvm::MetadataTracking::track();
  }
  int v20 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v18, v6 + 8);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  int v7 = (AGCLLVMBuilder *)&a1[*(void *)(*(void *)a1 - 24) + 32];
  uint64_t v8 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(a1, a3, 4u);
  Load = (llvm::Value *)AGCLLVMBuilder::CreateLoad(v7, v8, "packedFormat");
  uint64_t v10 = (llvm::IRBuilderBase *)&a1[*(void *)(*(void *)a1 - 24) + 40];
  uint64_t v11 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v17 = 257;
  uint64_t v12 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v10, Load, v11, (const llvm::Twine *)v16);
  uint64_t v13 = llvm::ConstantInt::get();
  v15[16] = 257;
  return llvm::IRBuilderBase::CreateICmp((uint64_t *)v10, 33, v12, v13, (uint64_t)v15);
}

uint64_t *std::__tree<llvm::WeakVH>::__emplace_unique_key_args<llvm::WeakVH,llvm::WeakVH>(uint64_t *result, unint64_t a2, void *a3)
{
  int v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[6];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x38uLL);
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v9 + 4), 2u, a3);
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *uint64_t v6 = v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      uint64_t *v4 = v10;
      uint64_t v9 = *v6;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v9);
    ++v4[2];
  }
  return result;
}

uint64_t AGCLLVMUserObject::buildEmulatePCF(AGCLLVMUserObject *a1, uint64_t a2, _WORD *a3)
{
  uint64_t v5 = a1;
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a2 == 5)
  {
    int v6 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    int v7 = (char *)a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v8 = *((void *)v7 + 50);
    long long v68 = *(_OWORD *)(v7 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v69, (llvm::IRBuilderBase *)(v7 + 40));
    int v70 = *((_DWORD *)v7 + 34);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v8 + 272))(v8, &v68, a2);
    if (v69) {
      llvm::MetadataTracking::untrack();
    }
    if ((*a3 & 0xF) != 0)
    {
      uint64_t v9 = *(llvm::Value **)(a2 + 200);
      if ((*a3 & 0x10) != 0)
      {
        uint64_t v10 = (char *)v5 + *(void *)(*(void *)v5 - 24);
        uint64_t v11 = *((void *)v10 + 50);
        long long v83 = *(_OWORD *)(v10 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v84, (llvm::IRBuilderBase *)(v10 + 40));
        int v85 = *((_DWORD *)v10 + 34);
        uint64_t v9 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *, void))(*(void *)v11 + 40))(v11, &v83, v9, 0);
        if (v84) {
          llvm::MetadataTracking::untrack();
        }
      }
      AGCLLVMBuilder::splat((AGCLLVMUserObject *)((char *)v5 + *(void *)(*(void *)v5 - 24) + 32), 4, v9);
      uint64_t v12 = (AGCLLVMUserObject *)((char *)v5 + *(void *)(*(void *)v5 - 24) + 32);
      uint64_t v13 = (llvm::Value *)llvm::ConstantFP::get();
      AGCLLVMBuilder::splat(v12, 4, v13);
      uint64_t v14 = (AGCLLVMUserObject *)((char *)v5 + *(void *)(*(void *)v5 - 24) + 32);
      uint64_t v15 = (llvm::Value *)llvm::ConstantFP::get();
      AGCLLVMBuilder::splat(v14, 4, v15);
      __int16 v80 = 257;
      llvm::IRBuilderBase::CreateFCmpHelper();
      __int16 v80 = 257;
      llvm::IRBuilderBase::CreateSelect();
    }
    *(_DWORD *)(a2 + 8) = v6;
    uint64_t v19 = **(uint64_t (***)(void))((char *)v5 + *(void *)(*(void *)v5 - 24) + 32);
    return v19();
  }
  else
  {
    int v16 = *(_DWORD *)(a2 + 8);
    if ((*a3 & 0xF) == 0 || (*a3 & 0x1C0) == 0)
    {
      *(_DWORD *)(a2 + 208) = 1;
      if ((*a3 & 0xF) != 0) {
        *(_DWORD *)(a2 + 8) = 0;
      }
    }
    else
    {
      if ((*a3 & 0x40) != 0) {
        int v18 = 3;
      }
      else {
        int v18 = 2;
      }
      *(_DWORD *)(a2 + 208) = v18;
    }
    uint64_t v20 = *(void *)(a2 + 200);
    uint64_t v21 = (char *)a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v22 = *((void *)v21 + 50);
    long long v76 = *(_OWORD *)(v21 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v77, (llvm::IRBuilderBase *)(v21 + 40));
    int v78 = *((_DWORD *)v21 + 34);
    uint64_t v23 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v22 + 272))(v22, &v76, a2);
    if (v77) {
      llvm::MetadataTracking::untrack();
    }
    switch(*a3 & 0xF)
    {
      case 0:
        uint64_t v24 = (char *)v5 + *(void *)(*(void *)v5 - 24);
        XComponent = AGCLLVMUserObject::buildExtractXComponent(v5, v23);
        uint64_t result = (**((uint64_t (***)(uint64_t, llvm::Value *, void))v24 + 4))((uint64_t)(v24 + 32), XComponent, *(unsigned int *)(a2 + 8));
        break;
      default:
        uint64_t v66 = a2;
        std::string v67 = v5;
        if ((*a3 & 0x10) != 0)
        {
          int v27 = (char *)v5 + *(void *)(*(void *)v5 - 24);
          uint64_t v28 = *((void *)v27 + 50);
          long long v73 = *(_OWORD *)(v27 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v74, (llvm::IRBuilderBase *)(v27 + 40));
          int v75 = *((_DWORD *)v27 + 34);
          (*(void (**)(uint64_t, long long *, uint64_t, void))(*(void *)v28 + 40))(v28, &v73, v20, 0);
          if (v74) {
            llvm::MetadataTracking::untrack();
          }
          uint64_t v5 = v67;
        }
        if ((*a3 & 0x1C0) != 0)
        {
          int v65 = v16;
          *((void *)&v83 + 1) = 0;
          uint64_t v82 = 0;
          uint64_t v64 = llvm::ConstantFP::get();
          uint64_t v29 = (char *)v5 + *(void *)(*(void *)v5 - 24);
          char v30 = v5;
          long long v31 = (AGCLLVMBuilder *)(v29 + 32);
          LODWORD(v68) = 0;
          __int16 v80 = 257;
          uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)(v29 + 40), (uint64_t)v23, (uint64_t)&v68, 1, (uint64_t)v79);
          *(void *)&long long v83 = AGCLLVMBuilder::bitCastElements(v31, Value, *(llvm::Type **)((char *)v30 + *(void *)(*(void *)v30 - 24) + 200));
          char v33 = (char *)v30 + *(void *)(*(void *)v30 - 24);
          __int16 v34 = (llvm::IRBuilderBase *)(v33 + 40);
          uint64_t v35 = (AGCLLVMBuilder *)(v33 + 32);
          int v72 = 1;
          __int16 v80 = 257;
          uint64_t v36 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)(v33 + 40), (uint64_t)v23, (uint64_t)&v72, 1, (uint64_t)v79);
          uint64_t v37 = (llvm::Value *)AGCLLVMBuilder::bitCastElements(v35, v36, *(llvm::Type **)((char *)v30 + *(void *)(*(void *)v30 - 24) + 200));
          uint64_t v38 = *(llvm::Type **)((char *)v30 + *(void *)(*(void *)v30 - 24) + 312);
          __int16 v71 = 257;
          uint64_t FPTrunc = llvm::IRBuilderBase::CreateFPTrunc(v34, v37, v38, (const llvm::Twine *)&v68);
          if ((*a3 & 0x40) != 0)
          {
            uint64_t v40 = (char *)v30 + *(void *)(*(void *)v30 - 24);
            uint64_t v41 = (AGCLLVMBuilder *)(v40 + 32);
            LODWORD(v68) = 2;
            __int16 v80 = 257;
            uint64_t v42 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)(v40 + 40), (uint64_t)v23, (uint64_t)&v68, 1, (uint64_t)v79);
            *((void *)&v83 + 1) = AGCLLVMBuilder::bitCastElements(v41, v42, *(llvm::Type **)((char *)v30 + *(void *)(*(void *)v30 - 24) + 200));
            uint64_t v43 = (char *)v30 + *(void *)(*(void *)v30 - 24);
            uint64_t v44 = (llvm::IRBuilderBase *)(v43 + 40);
            uint64_t v45 = (AGCLLVMBuilder *)(v43 + 32);
            int v72 = 3;
            __int16 v80 = 257;
            uint64_t v46 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)(v43 + 40), (uint64_t)v23, (uint64_t)&v72, 1, (uint64_t)v79);
            uint64_t v47 = (llvm::Value *)AGCLLVMBuilder::bitCastElements(v45, v46, *(llvm::Type **)((char *)v30 + *(void *)(*(void *)v30 - 24) + 200));
            char v48 = *(llvm::Type **)((char *)v30 + *(void *)(*(void *)v30 - 24) + 312);
            __int16 v71 = 257;
            uint64_t v82 = llvm::IRBuilderBase::CreateFPTrunc(v44, v47, v48, (const llvm::Twine *)&v68);
            int v39 = 8;
          }
          else
          {
            int v39 = 4;
          }
          uint64_t v5 = v30;
          unsigned int v49 = 0;
          uint64_t Select = (llvm::Value *)v64;
          do
          {
            std::string v51 = (char *)v5 + *(void *)(*(void *)v5 - 24);
            std::string v52 = (llvm::Value *)*((void *)&v83 + (v49 >> 2));
            __int16 v80 = 257;
            std::string::size_type v53 = (llvm::IRBuilderBase *)(v51 + 40);
            __int16 v54 = (llvm::Value *)llvm::ConstantInt::get();
            llvm::IRBuilderBase::CreateExtractElement(v53, v52, v54, (const llvm::Twine *)v79);
            unsigned int v55 = (char *)v67 + *(void *)(*(void *)v67 - 24);
            uint64_t v56 = (llvm::Value *)*(&FPTrunc + (v49 >> 2));
            __int16 v80 = 257;
            uint64_t v57 = (llvm::IRBuilderBase *)(v55 + 40);
            char v58 = (llvm::Value *)llvm::ConstantInt::get();
            __int16 v59 = v56;
            uint64_t v5 = v67;
            uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v57, v59, v58, (const llvm::Twine *)v79);
            __int16 v80 = 257;
            llvm::IRBuilderBase::CreateFCmpHelper();
            uint64_t v61 = (uint64_t)v5 + *(void *)(*(void *)v5 - 24) + 40;
            __int16 v80 = 257;
            llvm::IRBuilderBase::CreateFAdd(v61, (uint64_t)Select, Element, (uint64_t)v79);
            __int16 v80 = 257;
            uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
            ++v49;
          }
          while (v39 != v49);
          char v62 = (char *)v67 + *(void *)(*(void *)v67 - 24);
          uint64_t v63 = (llvm::Type *)*((void *)v62 + 25);
          __int16 v80 = 257;
          llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(v62 + 40), Select, v63, (const llvm::Twine *)v79);
          int v16 = v65;
        }
        else
        {
          AGCLLVMUserObject::buildExtractXComponent(v5, v23);
          __int16 v80 = 257;
          llvm::IRBuilderBase::CreateFCmpHelper();
          llvm::ConstantFP::get();
          llvm::ConstantFP::get();
          __int16 v80 = 257;
          llvm::IRBuilderBase::CreateSelect();
        }
        *(_DWORD *)(v66 + 8) = v16;
        uint64_t v19 = **(uint64_t (***)(void))((char *)v5 + *(void *)(*(void *)v5 - 24) + 32);
        return v19();
    }
  }
  return result;
}

uint64_t AGCLLVMBuilder::CreateLoad(AGCLLVMBuilder *this, llvm::Type **a2, const char *a3)
{
  int v6 = AGCLLVMBuilder::tryDeducePointeeType(a2, (llvm::Value *)a2);
  char v7 = 1;
  char v11 = 1;
  if (*a3)
  {
    uint64_t v9 = a3;
    char v7 = 3;
  }
  char v10 = v7;
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v6, (uint64_t)a2, 0, (uint64_t)&v9);
}

llvm::Value *AGCLLVMUserObject::buildExtractXComponent(AGCLLVMUserObject *this, llvm::Value *a2)
{
  uint64_t v2 = a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
  {
    uint64_t v3 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v8 = 257;
    int v4 = (llvm::IRBuilderBase *)(v3 + 40);
    uint64_t v5 = (llvm::Value *)llvm::ConstantInt::get();
    return (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v4, v2, v5, (const llvm::Twine *)v7);
  }
  return v2;
}

uint64_t llvm::StringSet<llvm::MallocAllocator>::~StringSet(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 9));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t AGCLLVMUserObject::buildConstantSamplerArgumentPointer(void *a1, uint64_t a2, unsigned int a3)
{
  void v32[2] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (unint64_t)&a1[8 * (unint64_t)a3 + 261];
  int v6 = *(uint64_t **)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 48);
    __int16 v8 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v9 = *((void *)v8 + 28);
    __int16 v29 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v8 + 40), 47, a2, v9, (uint64_t)v28);
    uint64_t v11 = (uint64_t)a1 + *(void *)(*a1 - 24) + 32;
    if (!a3 && *(unsigned __int8 *)(Cast + 16) >= 0x15u)
    {
      uint64_t v12 = llvm::PointerType::get();
      uint64_t v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1 + *(void *)(*a1 - 24) + 32, (uint64_t)"llvm.agx.samplerState", 21, v12, v12, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 240));
      uint64_t v14 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v29 = 257;
      v32[0] = llvm::IRBuilderBase::CreateCast(v14, 49, (uint64_t)v6, v12, (uint64_t)v28);
      uint64_t v15 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v16 = *((void *)v15 + 30);
      __int16 v31 = 257;
      v32[1] = llvm::IRBuilderBase::CreateCast((uint64_t)(v15 + 40), 39, Cast, v16, (uint64_t)v30);
      v27[16] = 257;
      __int16 v17 = llvm::IRBuilderBase::CreateCall(v14, *(void *)(v13 + 24), v13, (uint64_t)v32, 2, (uint64_t)v27);
      uint64_t v18 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      uint64_t v19 = llvm::PointerType::get();
      __int16 v29 = 257;
      return llvm::IRBuilderBase::CreateCast(v18, 49, (uint64_t)v17, v19, (uint64_t)v28);
    }
    v30[0] = (uint64_t *)llvm::ConstantInt::get();
    v30[1] = (uint64_t *)Cast;
    __int16 v29 = 257;
    uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v11 + 8, v7, v6, v30, 2, (uint64_t)v28);
  }
  else
  {
    llvm::PointerType::get();
    uint64_t GEP = (llvm::Type **)llvm::UndefValue::get();
  }
  uint64_t v23 = (uint64_t)GEP;
  if (a3 == 2)
  {
    uint64_t v24 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    __int16 v29 = 257;
    uint64_t v25 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v22);
    return llvm::IRBuilderBase::CreateAlignedLoad(v24 + 5, v25, v23, 0, (uint64_t)v28);
  }
  return v23;
}

uint64_t AGCLLVMUserObject::buildNonConstantSamplerArgumentPointer(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (unint64_t)&a1[8 * (unint64_t)a3 + 229];
  int v6 = *(uint64_t **)(v5 + 16);
  if (v6)
  {
    uint64_t v8 = *(void *)(v5 + 48);
    uint64_t v9 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v10 = *(void *)(v9 + 224);
    __int16 v80 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast(v9 + 40, 47, a2, v10, (uint64_t)v78);
    uint64_t v12 = *a1;
    uint64_t v13 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v14 = v13 + 32;
    if (!a3 && *(unsigned __int8 *)(Cast + 16) >= 0x15u)
    {
      uint64_t v15 = llvm::PointerType::get();
      uint64_t v16 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1 + *(void *)(*a1 - 24) + 32, (uint64_t)"llvm.agx.samplerState", 21, v15, v15, *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 240));
      uint64_t v17 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v80 = 257;
      v77[0] = llvm::IRBuilderBase::CreateCast(v17, 49, (uint64_t)v6, v15, (uint64_t)v78);
      uint64_t v18 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v19 = *(void *)(v18 + 240);
      __int16 v76 = 257;
      v77[1] = llvm::IRBuilderBase::CreateCast(v18 + 40, 39, Cast, v19, (uint64_t)&__p);
      __int16 v72 = 257;
      uint64_t v20 = llvm::IRBuilderBase::CreateCall(v17, *(void *)(v16 + 24), v16, (uint64_t)v77, 2, (uint64_t)&__src);
      uint64_t v21 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      uint64_t v22 = llvm::PointerType::get();
      __int16 v80 = 257;
      return llvm::IRBuilderBase::CreateCast(v21, 49, (uint64_t)v20, v22, (uint64_t)v78);
    }
    if (a3 == 2 && !*(unsigned char *)(*(void *)(v13 + 400) + 1755))
    {
      if (*((unsigned char *)a1 + 15)
        || (v26 = AGCLLVMUserObject::needsDylibResources((AGCLLVMUserObject *)a1), uint64_t v12 = *a1, v26))
      {
        uint64_t v27 = *(uint64_t *)((char *)a1 + *(void *)(v12 - 24) + 400);
        (*(void (**)(uint64_t))(*(void *)v27 + 480))(v27);
        uint64_t v28 = (AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32);
        __int16 v29 = (llvm::Value *)llvm::ConstantInt::get();
        char v30 = (llvm::Value *)AGCLLVMBuilder::buildICmpSel(v28, (llvm::CmpInst **)Cast, v29, 36);
        uint64_t v31 = (uint64_t)a1 + *(void *)(*a1 - 24);
        uint64_t v32 = v31 + 32;
        char v33 = *(llvm::Type **)(v31 + 240);
        __int16 v34 = (void **)a1[354];
        if (!v34)
        {
          uint64_t v67 = v31 + 32;
          std::string::basic_string[abi:nn180100]<0>(&__p, "agc.global_sampler_unique_id_table");
          uint64_t v35 = llvm::User::operator new((llvm::User *)0x58);
          __int16 v80 = 260;
          v78[0] = &__p;
          llvm::GlobalVariable::GlobalVariable();
          llvm::GlobalObject::setSection();
          llvm::GlobalObject::setAlignment();
          uint64_t __src = (uint64_t *)llvm::ValueAsMetadata::get();
          llvm::ConstantInt::get();
          uint64_t v69 = llvm::ValueAsMetadata::get();
          llvm::ConstantInt::get();
          uint64_t v70 = llvm::ValueAsMetadata::get();
          v78[0] = v79;
          v78[1] = (void *)0x300000000;
          llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)v78, &__src, v71);
          uint64_t v36 = (uint64_t)a1 + *(void *)(*a1 - 24) + 3080;
          uint64_t Impl = llvm::MDTuple::getImpl();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v36, Impl);
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 352), v35);
          if (v78[0] != v79) {
            free(v78[0]);
          }
          if (v75 < 0) {
            operator delete(__p);
          }
          __int16 v34 = (void **)a1[354];
          uint64_t v32 = v67;
        }
        GlobalBindingTablePtr = (void *)AGCLLVMUserObject::getGlobalBindingTablePtr((AGCLLVMUserObject *)a1);
        uint64_t v39 = (uint64_t)a1 + *(void *)(*a1 - 24);
        uint64_t v40 = *(void *)(v39 + 400);
        uint64_t v41 = *(void *)(v39 + 368);
        v78[0] = *v34;
        uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)v40 + 1344))(v40, v41, v78);
        uint64_t v43 = (uint64_t)a1 + *(void *)(*a1 - 24);
        std::string __p = GlobalBindingTablePtr;
        uint64_t v74 = (uint64_t)v34;
        __int16 v80 = 257;
        uint64_t v44 = llvm::IRBuilderBase::CreateCall(v43 + 40, *(void *)(v42 + 24), v42, (uint64_t)&__p, 2, (uint64_t)v78);
        uint64_t v45 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
        uint64_t v46 = llvm::PointerType::get();
        __int16 v80 = 257;
        uint64_t v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v45, 49, (uint64_t)v44, v46, (uint64_t)v78);
        __int16 v80 = 257;
        uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v32 + 8), v33, v47, v30, (const llvm::Twine *)v78);
        __int16 v76 = 257;
        unsigned __int8 v50 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v49);
        llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v32 + 8), v50, (uint64_t)GEP, 0, (uint64_t)&__p);
      }
      else
      {
        std::string v60 = (AGCLLVMBuilder *)((char *)a1 + *(void *)(v12 - 24) + 32);
        uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v62 = AGCLLVMBuilder::buildICmpSel(v60, (llvm::CmpInst **)Cast, v61, 36);
        uint64_t v63 = (uint64_t)a1 + *(void *)(*a1 - 24);
        uint64_t __src = (uint64_t *)llvm::ConstantInt::get();
        uint64_t v69 = v62;
        __int16 v80 = 257;
        uint64_t v64 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v63 + 40, v8, v6, &__src, 2, (uint64_t)v78);
        __int16 v76 = 257;
        uint64_t v66 = AGCLLVMBuilder::tryDeducePointeeType(v64, v65);
        llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v63 + 40), v66, (uint64_t)v64, 0, (uint64_t)&__p);
      }
      uint64_t v51 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v52 = *(void *)(v51 + 240);
      __int16 v80 = 257;
      llvm::IRBuilderBase::CreateCast(v51 + 40, 47, a2, v52, (uint64_t)v78);
      std::string::size_type v53 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      uint64_t v54 = llvm::ConstantInt::get();
      __int16 v80 = 257;
      llvm::IRBuilderBase::CreateICmp(v53, 36, (llvm::CmpInst **)Cast, v54, (uint64_t)v78);
      __int16 v76 = 257;
      uint64_t Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
      AllocaInEntryBlocunint64_t k = (llvm::Type **)AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), *(llvm::Type **)((char *)a1 + *(void *)(*a1 - 24) + 240));
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 40), Select, (uint64_t)AllocaInEntryBlock, 0);
      goto LABEL_20;
    }
    std::string __p = (void *)llvm::ConstantInt::get();
    uint64_t v74 = Cast;
    __int16 v80 = 257;
    uint64_t v24 = llvm::IRBuilderBase::CreateGEP(v14 + 8, v8, v6, (uint64_t **)&__p, 2, (uint64_t)v78);
  }
  else
  {
    llvm::PointerType::get();
    uint64_t v24 = llvm::UndefValue::get();
  }
  AllocaInEntryBlocunint64_t k = (llvm::Type **)v24;
  if (a3 == 2)
  {
LABEL_20:
    uint64_t v57 = (uint64_t)a1 + *(void *)(*a1 - 24);
    __int16 v80 = 257;
    char v58 = AGCLLVMBuilder::tryDeducePointeeType(AllocaInEntryBlock, v25);
    return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v57 + 40), v58, (uint64_t)AllocaInEntryBlock, 0, (uint64_t)v78);
  }
  return (uint64_t)AllocaInEntryBlock;
}

uint64_t AGCLLVMUserObject::getGlobalBindingTablePtr(AGCLLVMUserObject *this)
{
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  long long v28 = *(_OWORD *)(v2 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v29, (llvm::IRBuilderBase *)(v2 + 40));
  int v30 = *((_DWORD *)v2 + 34);
  uint64_t v3 = *(void *)(v28 + 56);
  uint64_t v27 = v3;
  uint64_t v4 = *((unsigned int *)this + 882);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 439);
    LODWORD(v6) = ((v3 >> 4) ^ (v3 >> 9)) & (v4 - 1);
    uint64_t v7 = (uint64_t *)(v5 + 16 * v6);
    uint64_t v8 = *v7;
    if (v3 == *v7)
    {
LABEL_3:
      if (v7 != (uint64_t *)(v5 + 16 * v4)) {
        goto LABEL_13;
      }
    }
    else
    {
      int v22 = 1;
      while (v8 != -4096)
      {
        int v23 = v6 + v22++;
        uint64_t v6 = v23 & (v4 - 1);
        uint64_t v8 = *(void *)(v5 + 16 * v6);
        if (v3 == v8)
        {
          uint64_t v7 = (uint64_t *)(v5 + 16 * v6);
          goto LABEL_3;
        }
      }
    }
  }
  uint64_t v9 = *(void *)(v3 + 80);
  if (v9) {
    uint64_t v10 = (llvm::BasicBlock *)(v9 - 24);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (char **)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v10);
  llvm::IRBuilderBase::SetInsertPoint(v11, (char *)v10, FirstInsertionPt);
  uint64_t v13 = (char *)this + *(void *)(*(void *)this - 24) + 32;
  uint64_t v14 = *((void *)this + 348);
  if (!v14)
  {
    llvm::PointerType::get();
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v16 = v15;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addRetAttr();
    *(_DWORD *)(v16 + 32) = *(_DWORD *)(v16 + 32) & 0xFFFFBFC0 | 0x4007;
    uint64_t v17 = (char *)this + *(void *)(*(void *)this - 24);
    long long v31 = *(_OWORD *)(v17 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v32, (llvm::IRBuilderBase *)(v17 + 40));
    int v33 = *((_DWORD *)v17 + 34);
    *(void *)&long long v34 = "entry";
    __int16 v35 = 259;
    operator new();
  }
  __int16 v35 = 257;
  uint64_t v18 = llvm::IRBuilderBase::CreateCall((uint64_t)(v13 + 8), *(void *)(v14 + 24), v14, 0, 0, (uint64_t)&v34);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>,llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::FindAndConstruct((uint64_t)this + 3512, &v27)[1] = (uint64_t)v18;
  uint64_t v19 = (char *)this + *(void *)(*(void *)this - 24) + 32;
  long long v24 = v28;
  uint64_t v25 = v29;
  if (v29) {
    llvm::MetadataTracking::track();
  }
  int v26 = v30;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v24, (uint64_t)(v19 + 8));
  if (v25) {
    llvm::MetadataTracking::untrack();
  }
LABEL_13:
  uint64_t v20 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>,llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::FindAndConstruct((uint64_t)this + 3512, &v27)[1];
  if (v29) {
    llvm::MetadataTracking::untrack();
  }
  return v20;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>,llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::grow(a1, v7);
    uint64_t v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = 0;
  return result;
}

void *llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (void *)MEMORY[0x1CB79F270](16 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    uint64_t v12 = (void *)(16 * v3);
    if (v3)
    {
      uint64_t v13 = 16 * v3;
      uint64_t v14 = (uint64_t *)v4;
      do
      {
        uint64_t v15 = *v14;
        if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(void *)a1, *(_DWORD *)(a1 + 16), v15, &v19);
          uint64_t v16 = v19;
          *uint64_t v19 = *v14;
          v16[1] = v14[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    return (void *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v17 = *(unsigned int *)(a1 + 16);
    if (v17)
    {
      uint64_t v18 = 16 * v17;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v18 -= 16;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t llvm::StringMap<AGCLLVMUserObject::DimensionFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        unint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 25));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Sampler,std::__tree_node<AGCLLVMUserObject::Sampler,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = result;
    unint64_t v6 = result + 1;
    do
    {
      int v7 = (unsigned int *)(v4 + 4);
      unsigned int v8 = (uint64_t *)v5[1];
      uint64_t v9 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_9;
      }
      uint64_t v10 = v5[1];
      uint64_t v11 = v6;
      if (v8)
      {
        do
        {
          uint64_t v9 = (uint64_t *)v10;
          uint64_t v10 = *(void *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      unsigned int v13 = *v7;
      if (*((_DWORD *)v9 + 8) < *v7)
      {
LABEL_9:
        if (v8) {
          uint64_t v14 = (uint64_t **)v9;
        }
        else {
          uint64_t v14 = (uint64_t **)v6;
        }
        if (v8) {
          uint64_t v15 = (uint64_t **)(v9 + 1);
        }
        else {
          uint64_t v15 = (uint64_t **)v6;
        }
      }
      else
      {
        uint64_t v14 = (uint64_t **)v6;
        uint64_t v15 = (uint64_t **)v6;
        if (v8)
        {
          uint64_t v15 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v8;
              unsigned int v20 = *((_DWORD *)v8 + 8);
              if (v13 >= v20) {
                break;
              }
              unsigned int v8 = *v14;
              uint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v20 >= v13) {
              break;
            }
            uint64_t v15 = v14 + 1;
            unsigned int v8 = v14[1];
            if (!v8) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = (uint64_t *)operator new(0x40uLL);
        long long v17 = *((_OWORD *)v4 + 3);
        *((_OWORD *)v16 + 2) = *(_OWORD *)v7;
        *((_OWORD *)v16 + 3) = v17;
        uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v14, v15, v16);
      }
      uint64_t v18 = (void *)v4[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v4[2];
          BOOL v12 = *v19 == (void)v4;
          uint64_t v4 = v19;
        }
        while (!v12);
      }
      uint64_t v4 = v19;
    }
    while (v19 != a3);
  }
  return result;
}

uint64_t AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject *a1, char a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  char v34 = a2;
  unsigned __int8 v33 = 1;
  BOOL v5 = (!MGGetBoolAnswer()
     || (uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_CS_SAMPLERS", v3)) == 0
     || *Value == 48
     || !atoi(Value))
    && *(_DWORD *)(*(void *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 400) + 1780) == 0;
  BOOL v32 = v5;
  v31[0] = 0;
  v31[1] = 0;
  v29[1] = &v30;
  int v30 = v31;
  v29[0] = &v34;
  v43[0] = &unk_1F25C4F70;
  v43[1] = v29;
  uint64_t v44 = v43;
  for (uint64_t i = (void *)*((void *)a1 + 371); i; uint64_t i = (void *)*i)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v44, i[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v43);
  v41[0] = &unk_1F25C5000;
  v41[1] = v29;
  uint64_t v42 = v41;
  for (uint64_t j = (void *)*((void *)a1 + 395); j; uint64_t j = (void *)*j)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v42, j[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v41);
  v28[0] = 0;
  v28[1] = 0;
  uint64_t v27 = (uint64_t *)v28;
  unsigned int v8 = v30;
  if (v30 != v31)
  {
    do
    {
      unsigned int v20 = *(char **)((char *)v8 + 28);
      LODWORD(v21) = *((_DWORD *)v8 + 9);
      BindlessHeapIndexForRange = (uint64_t *)AGCLLVMUserObject::allocateBindlessHeapIndexForRange(a1, (unsigned int *)&v20 + 1, (uint64_t)a1 + 4176);
      std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v27, v20, &v20)[5] = BindlessHeapIndexForRange;
      uint64_t v10 = v8[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = (void **)v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void **)v8[2];
          BOOL v12 = *v11 == v8;
          unsigned int v8 = v11;
        }
        while (!v12);
      }
      unsigned int v8 = v11;
    }
    while (v11 != v31);
  }
  char v26 = 0;
  unsigned int v20 = &v34;
  uint64_t v21 = &v27;
  int v22 = &v30;
  int v23 = a1;
  long long v24 = &v32;
  uint64_t v25 = &v26;
  v39[0] = &unk_1F25C5048;
  v39[1] = &v33;
  v39[2] = &v20;
  uint64_t v40 = v39;
  for (unint64_t k = (void *)*((void *)a1 + 371); k; unint64_t k = (void *)*k)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v40, k[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v39);
  char v26 = 1;
  v37[0] = &unk_1F25C50D8;
  v37[1] = &v33;
  v37[2] = &v20;
  uint64_t v38 = v37;
  for (uint64_t m = (void *)*((void *)a1 + 395); m; uint64_t m = (void *)*m)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v38, m[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v37);
  if (v32)
  {
    v35[0] = v36;
    v35[1] = (void *)0x100000000;
    AGCLLVMUserObject::createSamplerArrays((uint64_t)a1, (uint64_t)v35);
    if (v35[0] != v36) {
      free(v35[0]);
    }
  }
  else
  {
    uint64_t v15 = v27;
    if (v27 != (uint64_t *)v28)
    {
      do
      {
        AGCLLVMUserObject::lowerGlobalBindingVariable(a1, (llvm::GlobalVariable *)v15[5]);
        uint64_t v16 = (uint64_t *)v15[1];
        if (v16)
        {
          do
          {
            long long v17 = v16;
            uint64_t v16 = (uint64_t *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            long long v17 = (uint64_t *)v15[2];
            BOOL v12 = *v17 == (void)v15;
            uint64_t v15 = v17;
          }
          while (!v12);
        }
        uint64_t v15 = v17;
      }
      while (v17 != (uint64_t *)v28);
    }
  }
  uint64_t v18 = v33;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v28[0]);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v31[0]);
  return v18;
}

BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v29[12] = *MEMORY[0x1E4F143B8];
  v21[0] = 0;
  v21[1] = 0;
  v20[0] = &unk_1F25C4680;
  v20[1] = v21;
  v28[1] = (void *)0x400000000;
  v26[0] = &unk_1F25C51B0;
  v26[1] = v20;
  uint64_t v27 = v26;
  v28[0] = v29;
  for (uint64_t i = *(void **)(a2 + 24); i; uint64_t i = (void *)*i)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v27, i[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v26);
  v24[0] = &unk_1F25C5240;
  v24[1] = v20;
  uint64_t v25 = v24;
  for (uint64_t j = *(void **)(a3 + 24); j; uint64_t j = (void *)*j)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v25, j[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v24);
  addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator>((uint64_t)v20, (uint64_t)v28, a4);
  AGCLLVMUserObject::createSamplerArrays(a1, (uint64_t)v28);
  uint64_t v19 = a1;
  unsigned __int8 v18 = 1;
  uint64_t v10 = operator new(0x20uLL);
  void *v10 = &unk_1F25C52D0;
  v10[1] = &v18;
  v10[2] = v20;
  void v10[3] = &v19;
  v23[3] = v10;
  uint64_t v11 = *(void **)(a2 + 24);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v10;
    do
    {
      std::function<void ()(llvm::Function *)>::operator()(v12, v11[5]);
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v23);
  unsigned int v13 = operator new(0x20uLL);
  *unsigned int v13 = &unk_1F25C5360;
  v13[1] = &v18;
  v13[2] = v20;
  v13[3] = &v19;
  void v22[3] = v13;
  uint64_t v14 = *(void **)(a3 + 24);
  if (v14)
  {
    uint64_t v15 = (uint64_t)v13;
    do
    {
      std::function<void ()(llvm::Function *)>::operator()(v15, v14[5]);
      uint64_t v14 = (void *)*v14;
    }
    while (v14);
  }
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v22);
  int v16 = v18;
  if (v28[0] != v29) {
    free(v28[0]);
  }
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v21[0]);
  return v16 != 0;
}

void AGCLLVMUserObject::createSamplerArrays(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8))
  {
    if (MGGetBoolAnswer()
      && (uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_CS_SAMPLERS", v4)) != 0
      && *Value != 48
      && atoi(Value)
      && !*(unsigned char *)(*(void *)(*(void *)(*(void *)a1 - 24) + a1 + 400) + 1755)
      || *(_DWORD *)(*(void *)(*(void *)(*(void *)a1 - 24) + a1 + 400) + 1780)
      || *(unsigned char *)(a1 + 15))
    {
      unint64_t v6 = (llvm::Constant *)llvm::PointerType::get();
      Nulluint64_t Value = llvm::Constant::getNullValue(v6, v7);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 1832), NullValue);
    }
    else
    {
      uint64_t v15 = (AGCLLVMUserObject *)AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>((void *)a1, (uint64_t *)a2, a1 + 1832);
      if (*(unsigned char *)(a1 + 3656)) {
        AGCLLVMUserObject::setDylibLinkage(v15, v16);
      }
    }
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>((void *)a1, (uint64_t *)a2, a1 + 1896);
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>((void *)a1, (uint64_t *)a2, a1 + 1960);
    uint64_t v9 = (uint64_t *)(a1 + 664);
    llvm::SmallVectorImpl<unsigned int>::resizeImpl<false>((uint64_t)v9, *(unsigned int *)(a2 + 8));
    if (*(_DWORD *)(a2 + 8))
    {
      unint64_t v10 = 0;
      uint64_t v11 = *(int **)a2;
      uint64_t v12 = *v9;
      do
      {
        int v13 = *v11;
        v11 += 6;
        *(_DWORD *)(v12 + 4 * v10++) = v13;
      }
      while (v10 < *(unsigned int *)(a2 + 8));
    }
  }
  else
  {
    uint64_t v14 = *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 400);
    if (!*(unsigned char *)(v14 + 1755) && !*(_DWORD *)(v14 + 1780))
    {
      long long v17 = (llvm::Constant *)llvm::PointerType::get();
      uint64_t v19 = llvm::Constant::getNullValue(v17, v18);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 1832), v19);
      *(void *)(a1 + 188llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(void *)(a1 + 1864);
      AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>((void *)a1, (uint64_t *)a2, a1 + 1960);
    }
  }
}

uint64_t *std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Texture,std::__tree_node<AGCLLVMUserObject::Texture,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    BOOL v5 = result;
    unint64_t v6 = result + 1;
    do
    {
      int v7 = (unsigned int *)(v4 + 4);
      unsigned int v8 = (uint64_t *)v5[1];
      uint64_t v9 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_9;
      }
      uint64_t v10 = v5[1];
      uint64_t v11 = v6;
      if (v8)
      {
        do
        {
          uint64_t v9 = (uint64_t *)v10;
          uint64_t v10 = *(void *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      unsigned int v13 = *v7;
      if (*((_DWORD *)v9 + 8) < *v7)
      {
LABEL_9:
        if (v8) {
          uint64_t v14 = (uint64_t **)v9;
        }
        else {
          uint64_t v14 = (uint64_t **)v6;
        }
        if (v8) {
          uint64_t v15 = (uint64_t **)(v9 + 1);
        }
        else {
          uint64_t v15 = (uint64_t **)v6;
        }
      }
      else
      {
        uint64_t v14 = (uint64_t **)v6;
        uint64_t v15 = (uint64_t **)v6;
        if (v8)
        {
          uint64_t v15 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v8;
              unsigned int v21 = *((_DWORD *)v8 + 8);
              if (v13 >= v21) {
                break;
              }
              unsigned int v8 = *v14;
              uint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v21 >= v13) {
              break;
            }
            uint64_t v15 = v14 + 1;
            unsigned int v8 = v14[1];
            if (!v8) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        int v16 = (uint64_t *)operator new(0x50uLL);
        long long v18 = *((_OWORD *)v4 + 3);
        long long v17 = *((_OWORD *)v4 + 4);
        *((_OWORD *)v16 + 2) = *(_OWORD *)v7;
        *((_OWORD *)v16 + 3) = v18;
        *((_OWORD *)v16 + 4) = v17;
        uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v14, v15, v16);
      }
      uint64_t v19 = (void *)v4[1];
      if (v19)
      {
        do
        {
          unsigned int v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unsigned int v20 = (void *)v4[2];
          BOOL v12 = *v20 == (void)v4;
          uint64_t v4 = v20;
        }
        while (!v12);
      }
      uint64_t v4 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  uint64_t v146 = 0x400000000;
  v128[0] = 0;
  v128[1] = 0;
  int v126 = &unk_1F25C4680;
  uint64_t v127 = v128;
  v143[0] = &unk_1F25C5948;
  v143[1] = &v126;
  uint64_t v144 = v143;
  int v145 = v147;
  for (uint64_t i = *(void **)(a2 + 24); i; uint64_t i = (void *)*i)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v144, i[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v143);
  v141[0] = &unk_1F25C59D8;
  v141[1] = &v126;
  uint64_t v142 = v141;
  uint64_t v112 = a3;
  for (uint64_t j = *(void **)(a3 + 24); j; uint64_t j = (void *)*j)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v142, j[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v141);
  memset(v124, 0, sizeof(v124));
  int v125 = 1065353216;
  uint64_t v9 = v127;
  if (v127 != v128)
  {
    uint64_t v10 = (void *)(a4 + 8);
    int v113 = (void *)(a4 + 8);
    do
    {
      uint64_t v11 = *v10;
      if (!*v10) {
        goto LABEL_81;
      }
      unsigned int v12 = *((_DWORD *)v9 + 9);
      unsigned int v13 = v10;
      do
      {
        unsigned int v14 = *(_DWORD *)(v11 + 36) + *(_DWORD *)(v11 + 32);
        BOOL v15 = v14 > v12;
        if (v14 <= v12) {
          int v16 = (uint64_t *)(v11 + 8);
        }
        else {
          int v16 = (uint64_t *)v11;
        }
        if (v15) {
          unsigned int v13 = (void *)v11;
        }
        uint64_t v11 = *v16;
      }
      while (*v16);
      if (v13 == v10
        || (v18 = *((_DWORD *)v13 + 8), uint64_t v17 = (uint64_t)(v13 + 4), v12 < v18)
        || (unsigned int v19 = *((_DWORD *)v9 + 7), *((_DWORD *)v9 + 8) != v19))
      {
LABEL_81:
        BOOL v109 = 0;
        goto LABEL_82;
      }
      AGCLLVMUserObject::Texture::getAllocationInfo((uint64_t)&v120, v17, v19);
      uint64_t Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)((char *)a1 + *(void *)(*a1 - 24) + 392), (llvm::LLVMContext *)2);
      uint64_t v21 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 232);
      *(void *)&long long v148 = Int8PtrTy;
      *((void *)&v148 + 1) = v21;
      *(void *)&long long v149 = v21;
      llvm::StructType::get();
      if ((*(unsigned char *)(v123 + 9) & 1) == 0)
      {
        long long v151 = 0u;
        long long v152 = 0u;
        long long v149 = 0u;
        long long v150 = 0u;
        long long v148 = 0u;
        *(void *)&long long v148 = llvm::PointerType::get();
        *((void *)&v148 + 1) = llvm::PointerType::get();
        llvm::FixedVectorType::get();
        *(void *)&long long v149 = llvm::PointerType::get();
        *((void *)&v149 + 1) = llvm::PointerType::get();
        *(void *)&long long v150 = llvm::PointerType::get();
        *((void *)&v150 + 1) = llvm::PointerType::get();
        *(void *)&long long v151 = llvm::PointerType::get();
        *((void *)&v151 + 1) = llvm::PointerType::get();
        *(void *)&long long v152 = llvm::PointerType::get();
        *((void *)&v152 + 1) = llvm::PointerType::get();
        llvm::StructType::setBody();
      }
      unsigned int v22 = v120;
      uint64_t v23 = v120 & 0xFFFFFLL;
      unint64_t v118 = ((unint64_t)v120 >> 20) & 0x7FF;
      unsigned int v119 = v120 & 0xFFFFF;
      char v24 = v122;
      if (v122)
      {
        uint64_t v29 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        if ((v22 & 0x80000000) != 0)
        {
          v129[0] = v118;
          int v130 = ".";
          __int16 v131 = 776;
          char v30 = 2;
          char v31 = 8;
          BOOL v32 = &v132;
          int v132 = v129;
          uint64_t v134 = v23;
        }
        else
        {
          LODWORD(v132) = v23;
          char v30 = 8;
          char v31 = 1;
          BOOL v32 = (void **)v132;
        }
        char v135 = v30;
        char v136 = v31;
        *(void *)&long long v148 = "agc.read_image_words";
        *(void *)&long long v149 = v32;
        *((void *)&v149 + 1) = v133;
        LOBYTE(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 3;
        BYTE1(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v30;
        llvm::GlobalVariable::GlobalVariable();
        *((unsigned char *)v29 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        __int16 v35 = (char *)a1 + *(void *)(*a1 - 24);
        uint64_t v23 = *((void *)v35 + 47);
        uint64_t v36 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v35 + 32), v29);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v23, v36);
        uint64_t v117 = v29;
        AGCLLVMUserObject::setupTextureGlobalRasterOrderGroup(a1, v121, (uint64_t)v29);
        LODWORD(v23) = v119;
        if ((v24 & 2) != 0)
        {
LABEL_22:
          uint64_t v25 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
          if ((v22 & 0x80000000) != 0)
          {
            v129[0] = v118;
            int v130 = ".";
            __int16 v131 = 776;
            int v132 = v129;
            uint64_t v134 = v23;
            char v26 = 2;
            char v27 = 8;
            long long v28 = &v132;
          }
          else
          {
            LODWORD(v132) = v23;
            char v26 = 8;
            char v27 = 1;
            long long v28 = (void **)v132;
          }
          char v135 = v26;
          char v136 = v27;
          *(void *)&long long v148 = "agc.write_image_words";
          *(void *)&long long v149 = v28;
          *((void *)&v149 + 1) = v133;
          LOBYTE(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 3;
          BYTE1(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v26;
          llvm::GlobalVariable::GlobalVariable();
          *((unsigned char *)v25 + 80) |= 1u;
          llvm::GlobalObject::setSection();
          llvm::GlobalObject::setAlignment();
          unsigned __int8 v33 = (char *)a1 + *(void *)(*a1 - 24);
          uint64_t v23 = *((void *)v33 + 47);
          uint64_t v34 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v33 + 32), v25);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v23, v34);
          int v116 = v25;
          AGCLLVMUserObject::setupTextureGlobalRasterOrderGroup(a1, v121, (uint64_t)v25);
          LODWORD(v23) = v119;
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v117 = 0;
        if ((v122 & 2) != 0) {
          goto LABEL_22;
        }
      }
      int v116 = 0;
LABEL_31:
      uint64_t v37 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      llvm::FixedVectorType::get();
      if ((v22 & 0x80000000) != 0)
      {
        v129[0] = v118;
        int v130 = ".";
        __int16 v131 = 776;
        int v132 = v129;
        uint64_t v134 = v23;
        char v38 = 2;
        char v39 = 8;
        uint64_t v40 = &v132;
      }
      else
      {
        LODWORD(v132) = v23;
        char v38 = 8;
        char v39 = 1;
        uint64_t v40 = (void **)v132;
      }
      char v135 = v38;
      char v136 = v39;
      *(void *)&long long v148 = "agc.image_dim";
      *(void *)&long long v149 = v40;
      *((void *)&v149 + 1) = v133;
      LOBYTE(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 3;
      BYTE1(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v38;
      llvm::GlobalVariable::GlobalVariable();
      *((unsigned char *)v37 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      uint64_t v41 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v42 = *((void *)v41 + 47);
      uint64_t v43 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v41 + 32), v37);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v42, v43);
      uint64_t v44 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      uint64_t v115 = v37;
      if ((v22 & 0x80000000) != 0)
      {
        v129[0] = v118;
        int v130 = ".";
        __int16 v131 = 776;
        int v132 = v129;
        uint64_t v134 = v23;
        char v45 = 2;
        char v46 = 8;
        uint64_t v47 = &v132;
      }
      else
      {
        LODWORD(v132) = v23;
        char v45 = 8;
        char v46 = 1;
        uint64_t v47 = (void **)v132;
      }
      char v135 = v45;
      char v136 = v46;
      *(void *)&long long v148 = "agc.image_array_info";
      *(void *)&long long v149 = v47;
      *((void *)&v149 + 1) = v133;
      LOBYTE(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 3;
      BYTE1(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v45;
      llvm::GlobalVariable::GlobalVariable();
      *((unsigned char *)v44 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      char v48 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v49 = *((void *)v48 + 47);
      uint64_t v50 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v48 + 32), v44);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v49, v50);
      uint64_t v51 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      int v114 = v44;
      if ((v22 & 0x80000000) != 0)
      {
        v129[0] = v118;
        int v130 = ".";
        __int16 v131 = 776;
        int v132 = v129;
        uint64_t v134 = v23;
        char v52 = 2;
        char v53 = 8;
        uint64_t v54 = &v132;
      }
      else
      {
        LODWORD(v132) = v23;
        char v52 = 8;
        char v53 = 1;
        uint64_t v54 = (void **)v132;
      }
      char v135 = v52;
      char v136 = v53;
      *(void *)&long long v148 = "agc.image_pack_format";
      *(void *)&long long v149 = v54;
      *((void *)&v149 + 1) = v133;
      LOBYTE(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 3;
      BYTE1(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v52;
      llvm::GlobalVariable::GlobalVariable();
      *((unsigned char *)v51 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      unsigned int v55 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v56 = *((void *)v55 + 47);
      uint64_t v57 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v55 + 32), v51);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v56, v57);
      char v58 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      if ((v22 & 0x80000000) != 0)
      {
        v129[0] = v118;
        int v130 = ".";
        __int16 v131 = 776;
        int v132 = v129;
        uint64_t v134 = v23;
        char v59 = 2;
        char v60 = 8;
        uint64_t v61 = &v132;
      }
      else
      {
        LODWORD(v132) = v23;
        char v59 = 8;
        char v60 = 1;
        uint64_t v61 = (void **)v132;
      }
      char v135 = v59;
      char v136 = v60;
      *(void *)&long long v148 = "agc.image_mipmap_count";
      *(void *)&long long v149 = v61;
      *((void *)&v149 + 1) = v133;
      LOBYTE(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 3;
      BYTE1(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v59;
      llvm::GlobalVariable::GlobalVariable();
      *((unsigned char *)v58 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      uint64_t v62 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v63 = *((void *)v62 + 47);
      uint64_t v64 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v62 + 32), v58);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v63, v64);
      int v65 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      if ((v22 & 0x80000000) != 0)
      {
        v129[0] = v118;
        int v130 = ".";
        __int16 v131 = 776;
        int v132 = v129;
        uint64_t v134 = v23;
        char v66 = 2;
        char v67 = 8;
        long long v68 = &v132;
      }
      else
      {
        LODWORD(v132) = v23;
        char v66 = 8;
        char v67 = 1;
        long long v68 = (void **)v132;
      }
      char v135 = v66;
      char v136 = v67;
      *(void *)&long long v148 = "agc.image_sample_count";
      *(void *)&long long v149 = v68;
      *((void *)&v149 + 1) = v133;
      LOBYTE(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 3;
      BYTE1(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v66;
      llvm::GlobalVariable::GlobalVariable();
      *((unsigned char *)v65 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      uint64_t v69 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v70 = *((void *)v69 + 47);
      uint64_t v71 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v69 + 32), v65);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v70, v71);
      __int16 v72 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      if ((v22 & 0x80000000) != 0)
      {
        v129[0] = v118;
        int v130 = ".";
        __int16 v131 = 776;
        int v132 = v129;
        uint64_t v134 = v23;
        char v73 = 2;
        char v74 = 8;
        char v75 = &v132;
      }
      else
      {
        LODWORD(v132) = v23;
        char v73 = 8;
        char v74 = 1;
        char v75 = (void **)v132;
      }
      char v135 = v73;
      char v136 = v74;
      *(void *)&long long v148 = "agc.image_base_level";
      *(void *)&long long v149 = v75;
      *((void *)&v149 + 1) = v133;
      LOBYTE(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 3;
      BYTE1(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v73;
      llvm::GlobalVariable::GlobalVariable();
      *((unsigned char *)v72 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      __int16 v76 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v77 = *((void *)v76 + 47);
      uint64_t v78 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v76 + 32), v72);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v77, v78);
      std::string::size_type v79 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      if ((v22 & 0x80000000) != 0)
      {
        v129[0] = v118;
        int v130 = ".";
        __int16 v131 = 776;
        int v132 = v129;
        uint64_t v134 = v119;
        char v80 = 2;
        char v81 = 8;
        uint64_t v82 = &v132;
      }
      else
      {
        LODWORD(v132) = v119;
        char v80 = 8;
        char v81 = 1;
        uint64_t v82 = (void **)v132;
      }
      char v135 = v80;
      char v136 = v81;
      *(void *)&long long v148 = "agc.image_heap_index";
      *(void *)&long long v149 = v82;
      *((void *)&v149 + 1) = v133;
      LOBYTE(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 3;
      BYTE1(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v80;
      llvm::GlobalVariable::GlobalVariable();
      *((unsigned char *)v79 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      long long v83 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v84 = *((void *)v83 + 47);
      uint64_t v85 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v83 + 32), v79);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v84, v85);
      uint64_t v86 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      if ((v22 & 0x80000000) != 0)
      {
        v129[0] = v118;
        int v130 = ".";
        __int16 v131 = 776;
        int v132 = v129;
        uint64_t v134 = v119;
        char v87 = 2;
        char v88 = 8;
        uint64_t v89 = &v132;
      }
      else
      {
        LODWORD(v132) = v119;
        char v87 = 8;
        char v88 = 1;
        uint64_t v89 = (void **)v132;
      }
      char v135 = v87;
      char v136 = v88;
      *(void *)&long long v148 = "agc.image_unique_id";
      *(void *)&long long v149 = v89;
      *((void *)&v149 + 1) = v133;
      LOBYTE(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 3;
      BYTE1(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v87;
      llvm::GlobalVariable::GlobalVariable();
      *((unsigned char *)v86 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      int v90 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v91 = *((void *)v90 + 47);
      uint64_t v92 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v90 + 32), v86);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v91, v92);
      Nulluint64_t Value = (uint64_t)v117;
      if (!v117)
      {
        int v94 = (llvm::Constant *)llvm::PointerType::get();
        Nulluint64_t Value = llvm::Constant::getNullValue(v94, v95);
      }
      *(void *)&long long v148 = NullValue;
      uint64_t v96 = (uint64_t)v116;
      if (!v116)
      {
        uint64_t v97 = (llvm::Constant *)llvm::PointerType::get();
        uint64_t v96 = llvm::Constant::getNullValue(v97, v98);
      }
      *((void *)&v148 + 1) = v96;
      *(void *)&long long v149 = v115;
      *((void *)&v149 + 1) = v114;
      *(void *)&long long v150 = v51;
      *((void *)&v150 + 1) = v58;
      *(void *)&long long v151 = v65;
      *((void *)&v151 + 1) = v72;
      *(void *)&long long v152 = v79;
      *((void *)&v152 + 1) = v86;
      llvm::ConstantStruct::get();
      uint64_t v99 = llvm::User::operator new((llvm::User *)0x58);
      if ((v22 & 0x80000000) != 0)
      {
        v129[0] = v118;
        int v130 = ".";
        __int16 v131 = 776;
        int v132 = v129;
        uint64_t v134 = v119;
        char v100 = 2;
        char v101 = 8;
        uint64_t v102 = &v132;
      }
      else
      {
        LODWORD(v132) = v119;
        char v100 = 8;
        char v101 = 1;
        uint64_t v102 = (void **)v132;
      }
      uint64_t v10 = v113;
      char v135 = v100;
      char v136 = v101;
      *(void *)&long long v148 = "agc.image_state_struct_ptr";
      *(void *)&long long v149 = v102;
      *((void *)&v149 + 1) = v133;
      LOBYTE(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 3;
      BYTE1(v15llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v100;
      llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v99 + 80) |= 1u;
      llvm::GlobalVariable::setInitializer();
      long long v148 = 4uLL;
      unint64_t v103 = v99;
      *(void *)&long long v149 = v99;
      if (v99 != -8192)
      {
        unint64_t v103 = v99;
        if (v99 != -4096)
        {
          unint64_t v103 = v99;
          if (v99)
          {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v148);
            unint64_t v103 = v149;
          }
        }
      }
      std::__tree<llvm::WeakVH>::__emplace_unique_key_args<llvm::WeakVH,llvm::WeakVH>(a1 + 103, v103, &v148);
      if ((void)v149 != -8192 && (void)v149 != -4096 && (void)v149) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v148);
      }
      std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)v124, *((_DWORD *)v9 + 7), (_DWORD *)v9 + 7)[3] = v99;
      int v104 = v9[1];
      if (v104)
      {
        do
        {
          long long v105 = (void **)v104;
          int v104 = (void *)*v104;
        }
        while (v104);
      }
      else
      {
        do
        {
          long long v105 = (void **)v9[2];
          BOOL v106 = *v105 == v9;
          uint64_t v9 = v105;
        }
        while (!v106);
      }
      uint64_t v9 = v105;
    }
    while (v105 != v128);
  }
  *(void *)&long long v148 = v124;
  LOBYTE(v132) = 1;
  v139[0] = &unk_1F25C5A68;
  v139[1] = &v132;
  v139[2] = &v148;
  uint64_t v140 = v139;
  for (unint64_t k = *(void **)(a2 + 24); k; unint64_t k = (void *)*k)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v140, k[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v139);
  v137[0] = &unk_1F25C5AF8;
  v137[1] = &v132;
  v137[2] = &v148;
  __int16 v138 = v137;
  for (uint64_t m = *(void **)(v112 + 24); m; uint64_t m = (void *)*m)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v138, m[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v137);
  BOOL v109 = (_BYTE)v132 != 0;
LABEL_82:
  std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::~__hash_table((uint64_t)v124);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v128[0]);
  if (v145 != v147) {
    free(v145);
  }
  return v109;
}

void AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(AGCLLVMUserObject *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  char v26 = 0;
  char v25 = 1;
  v24[0] = 0;
  v24[1] = 0;
  v22[1] = &v23;
  uint64_t v23 = v24;
  v22[0] = &v26;
  v33[0] = &unk_1F25C5B40;
  v33[1] = v22;
  uint64_t v34 = v33;
  for (uint64_t i = (void *)*((void *)a1 + 365); i; uint64_t i = (void *)*i)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v34, i[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v33);
  v31[0] = &unk_1F25C5BD0;
  v31[1] = v22;
  BOOL v32 = v31;
  for (uint64_t j = (void *)*((void *)a1 + 389); j; uint64_t j = (void *)*j)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v32, j[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v31);
  v21[0] = 0;
  v21[1] = 0;
  unsigned int v20 = (uint64_t *)v21;
  uint64_t v4 = v23;
  if (v23 != v24)
  {
    do
    {
      unsigned int v14 = *(char **)((char *)v4 + 28);
      LODWORD(v15) = *((_DWORD *)v4 + 9);
      BindlessHeapIndexForRange = (uint64_t *)AGCLLVMUserObject::allocateBindlessHeapIndexForRange(a1, (unsigned int *)&v14 + 1, (uint64_t)a1 + 4144);
      std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v20, v14, &v14)[5] = BindlessHeapIndexForRange;
      unint64_t v6 = v4[1];
      if (v6)
      {
        do
        {
          int v7 = (void **)v6;
          unint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void **)v4[2];
          BOOL v8 = *v7 == v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v7;
    }
    while (v7 != v24);
  }
  char v19 = 0;
  unsigned int v14 = &v26;
  BOOL v15 = &v20;
  int v16 = &v23;
  uint64_t v17 = a1;
  unsigned int v18 = &v19;
  v29[0] = &unk_1F25C5C18;
  v29[1] = &v25;
  void v29[2] = &v14;
  char v30 = v29;
  for (unint64_t k = (void *)*((void *)a1 + 365); k; unint64_t k = (void *)*k)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v30, k[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v29);
  char v19 = 1;
  v27[0] = &unk_1F25C5CA8;
  v27[1] = &v25;
  v27[2] = &v14;
  long long v28 = v27;
  for (uint64_t m = (void *)*((void *)a1 + 389); m; uint64_t m = (void *)*m)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v28, m[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v27);
  uint64_t v11 = v20;
  if (v20 != (uint64_t *)v21)
  {
    do
    {
      AGCLLVMUserObject::lowerGlobalBindingVariable(a1, (llvm::GlobalVariable *)v11[5]);
      unsigned int v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          unsigned int v13 = v12;
          unsigned int v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unsigned int v13 = (uint64_t *)v11[2];
          BOOL v8 = *v13 == (void)v11;
          uint64_t v11 = v13;
        }
        while (!v8);
      }
      uint64_t v11 = v13;
    }
    while (v13 != (uint64_t *)v21);
  }
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v21[0]);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v24[0]);
}

uint64_t AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject *this, const AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v4 = 1;
  v5[0] = &unk_1F25C4CE8;
  v5[1] = &v4;
  v5[2] = this;
  unint64_t v6 = v5;
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      std::function<void ()(llvm::Function *)>::operator()((uint64_t)v6, *((void *)v2 + 5));
      uint64_t v2 = *(const AGCLLVMUserObject::TextureSamplerPlaceholderFunctions **)v2;
    }
    while (v2);
  }
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v5);
  return v4;
}

unint64_t addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex16x2,AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator>(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(result + 8);
  unsigned __int8 v4 = (void *)(result + 16);
  if (v3 != (void *)(result + 16))
  {
    unint64_t v6 = (void *)(a3 + 8);
    do
    {
      uint64_t v7 = *v6;
      if (!*v6) {
        goto LABEL_13;
      }
      unsigned int v8 = *((_DWORD *)v3 + 9);
      uint64_t v9 = v6;
      do
      {
        unsigned int v10 = *(_DWORD *)(v7 + 36) + *(_DWORD *)(v7 + 32);
        BOOL v11 = v10 > v8;
        if (v10 <= v8) {
          unsigned int v12 = (uint64_t *)(v7 + 8);
        }
        else {
          unsigned int v12 = (uint64_t *)v7;
        }
        if (v11) {
          uint64_t v9 = (void *)v7;
        }
        uint64_t v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || v8 < *((_DWORD *)v9 + 8)) {
LABEL_13:
      }
        uint64_t v9 = v6;
      uint64_t v13 = *(unsigned int *)(a2 + 8);
      if (v13)
      {
        int v14 = 0;
        uint64_t v15 = 32 * v13;
        int v16 = (unsigned __int8 *)(*(void *)a2 + 8);
        do
        {
          unsigned int v17 = *v16;
          v16 += 32;
          v14 += (v17 >> 1) & 1;
          v15 -= 32;
        }
        while (v15);
        int v18 = v14 << 16;
      }
      else
      {
        int v18 = 0;
      }
      *((_DWORD *)v3 + 9) = v18 | v13;
      unsigned int v19 = *((_DWORD *)v3 + 7);
      if (v19 <= *((_DWORD *)v3 + 8))
      {
        uint64_t v20 = (uint64_t)(v9 + 4);
        do
        {
          AGCLLVMUserObject::Texture::getAllocationInfo((uint64_t)v26, v20, v19);
          uint64_t result = llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>(a2, (unint64_t)v26);
          uint64_t v21 = (_OWORD *)(*(void *)a2 + 32 * *(unsigned int *)(a2 + 8));
          long long v22 = *(_OWORD *)(result + 16);
          _OWORD *v21 = *(_OWORD *)result;
          v21[1] = v22;
          ++*(_DWORD *)(a2 + 8);
          ++v19;
        }
        while (v19 <= *((_DWORD *)v3 + 8));
      }
      uint64_t v23 = (void *)v3[1];
      if (v23)
      {
        do
        {
          char v24 = v23;
          uint64_t v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          char v24 = (void *)v3[2];
          BOOL v25 = *v24 == (void)v3;
          uint64_t v3 = v24;
        }
        while (!v25);
      }
      uint64_t v3 = v24;
    }
    while (v24 != v4);
  }
  return result;
}

void *std::vector<llvm::Value *>::vector<llvm::SmallPtrSetIterator<llvm::Value *>,0>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a4) {
    return a1;
  }
  uint64_t v7 = a2;
  unint64_t v8 = 0;
  uint64_t v9 = v7;
  do
  {
    do
    {
      if (++v9 == a3)
      {
        uint64_t v9 = a3;
        break;
      }
    }
    while ((unint64_t)*v9 >= 0xFFFFFFFFFFFFFFFELL);
    ++v8;
  }
  while (v9 != a4);
  std::vector<llvm::Value *>::__vallocate[abi:nn180100](a1, v8);
  unsigned int v10 = (void *)a1[1];
  do
  {
    uint64_t v11 = *v7++;
    void *v10 = v11;
    while (v7 != a3)
    {
      if ((unint64_t)*v7 < 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_14;
      }
      ++v7;
    }
    uint64_t v7 = a3;
LABEL_14:
    ++v10;
  }
  while (v7 != a4);
  a1[1] = v10;
  return a1;
}

void AGCLLVMUserObject::allocateBindlessTextures(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *a5)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)(a2[1] - *a2) >> 3;
  unsigned int v122 = v8;
  v152[0] = 0;
  v152[1] = 0;
  long long v150 = &unk_1F25C4668;
  long long v151 = v152;
  v153[0] = v154;
  v153[1] = (void *)0x800000000;
  unsigned int v155 = 0;
  llvm::IntEqClasses::grow((llvm::IntEqClasses *)v153);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = v10 - *a2;
  int v116 = a1;
  uint64_t v117 = a5;
  if (v10 == *a2)
  {
    uint64_t v115 = 0;
    int v14 = 0;
  }
  else
  {
    if ((unint64_t)v11 >= 0x1FFFFFFFFFFFFFF9) {
      abort();
    }
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (char *)operator new(8 * v11);
    int v14 = v13;
    uint64_t v115 = &v13[64 * v12];
    uint64_t v15 = v12 << 6;
    int v16 = v13 + 32;
    do
    {
      *((void *)v16 - 4) = v16;
      *((void *)v16 - 3) = v16;
      *((void *)v16 - 2) = 4;
      *((_DWORD *)v16 - 2) = 0;
      v16 += 64;
      v15 -= 64;
    }
    while (v15);
    if (v10 != v9)
    {
      int v114 = v8;
      unsigned int v120 = v13;
      unint64_t v17 = 0;
      uint64_t v18 = 0;
      while (1)
      {
        uint64_t v134 = v138;
        uint64_t v135 = (uint64_t)v138;
        uint64_t v136 = 8;
        int v137 = 0;
        uint64_t __src = *(void **)(v9 + 8 * v17);
        int v145 = &v147;
        uint64_t v146 = (void *)0x800000000;
        llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v145, &__src, &v157);
        unsigned int v19 = v146;
        if (!v146) {
          goto LABEL_45;
        }
        int v20 = 0;
        uint64_t v21 = (llvm::SmallPtrSetImplBase *)&v120[64 * v17];
        do
        {
          uint64_t v22 = *((void *)v145 + v19 - 1);
          LODWORD(v146) = v19 - 1;
          llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__src, (llvm::SmallPtrSetImplBase *)&v134, (void *)v22);
          if (!(_BYTE)v158) {
            goto LABEL_37;
          }
          int v23 = *(unsigned __int8 *)(v22 + 16);
          if (v22 && v23 == 84)
          {
            uint64_t v24 = *(void *)(v22 - 32);
            if (v24)
            {
              if (!*(unsigned char *)(v24 + 16) && *(void *)(v24 + 24) == *(void *)(v22 + 72))
              {
                BOOL v25 = (llvm::Function *)llvm::Value::stripPointerCasts((llvm::Value *)v24);
                if (!*((unsigned char *)v25 + 16))
                {
                  uint64_t v34 = v25;
                  if (AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::contains((const char **)a3, v25)
                    || AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::contains((const char **)a4, v34)
                    || AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::contains((const char **)v117, v34))
                  {
                    AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v121, *(llvm::Constant **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF) + 32));
                    IntervalMap<unsigned int>::insert((uint64_t)&v150, (unint64_t)v121, v18);
                    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__src, v21, (void *)v22);
                    goto LABEL_37;
                  }
                }
              }
            }
            int v23 = *(unsigned __int8 *)(v22 + 16);
          }
          if (v22 && v23 == 85)
          {
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v145, *(void *)(v22 - 64));
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v145, *(void *)(v22 - 32));
          }
          else
          {
            if (v22) {
              BOOL v26 = (v23 - 21) >= 7;
            }
            else {
              BOOL v26 = 0;
            }
            if (v26)
            {
              BOOL v27 = v23 == 60 || v23 == 84;
              int v28 = v27;
              int v29 = *(_DWORD *)(v22 + 20);
              if ((v29 & 0x40000000) != 0)
              {
                char v31 = *(uint64_t **)(v22 - 8);
                uint64_t v30 = v29 & 0x7FFFFFF;
              }
              else
              {
                uint64_t v30 = v29 & 0x7FFFFFF;
                char v31 = (uint64_t *)(v22 - 32 * v30);
              }
              v20 |= v28;
              if (v30)
              {
                uint64_t v32 = 32 * v30;
                do
                {
                  uint64_t v33 = *v31;
                  v31 += 4;
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v145, v33);
                  v32 -= 32;
                }
                while (v32);
              }
            }
            else
            {
              v20 |= v23 == 21;
            }
          }
LABEL_37:
          unsigned int v19 = v146;
        }
        while (v146);
        if (v20) {
          llvm::IntEqClasses::join((llvm::IntEqClasses *)v153);
        }
LABEL_45:
        if (v145 != &v147) {
          free(v145);
        }
        if ((void *)v135 != v134) {
          free((void *)v135);
        }
        unint64_t v17 = (v18 + 1);
        uint64_t v9 = *a2;
        uint64_t v18 = v17;
        if (v17 >= (a2[1] - *a2) >> 3)
        {
          int v14 = v120;
          a1 = v116;
          a5 = v117;
          LODWORD(v8) = v114;
          goto LABEL_53;
        }
      }
    }
    a5 = v117;
  }
LABEL_53:
  uint64_t v134 = &v150;
  uint64_t v135 = (uint64_t)&v122;
  v143[0] = &unk_1F25C4820;
  v143[1] = &v134;
  uint64_t v144 = v143;
  for (uint64_t i = *(void **)(a3 + 24); i; uint64_t i = (void *)*i)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v144, i[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v143);
  v141[0] = &unk_1F25C48B0;
  v141[1] = &v134;
  uint64_t v142 = v141;
  for (uint64_t j = *(void **)(a4 + 24); j; uint64_t j = (void *)*j)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v142, j[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v141);
  v139[0] = &unk_1F25C48F8;
  v139[1] = &v134;
  uint64_t v140 = v139;
  for (unint64_t k = (void *)*((void *)a5 + 3); k; unint64_t k = (void *)*k)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v140, k[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v139);
  llvm::IntEqClasses::compress((llvm::IntEqClasses *)v153);
  if (MGGetBoolAnswer())
  {
    uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_FORCE_BINDLESS", v38);
    if (Value)
    {
      if (*Value != 48 && atoi(Value)) {
        goto LABEL_64;
      }
    }
  }
  if (*(_DWORD *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 1780)) {
    goto LABEL_64;
  }
  if (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_MAX_TEXTURE_REGISTERS", v41))
  {
    if (!MGGetBoolAnswer()
      || (uint64_t v43 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_MAX_TEXTURE_REGISTERS", v42)) == 0
      || *v43 == 48)
    {
LABEL_64:
      unsigned int v40 = 0;
      goto LABEL_72;
    }
    unsigned int v40 = atoi(v43);
  }
  else
  {
    unsigned int v40 = 48;
  }
LABEL_72:
  uint64_t v44 = v153[0];
  int v45 = *((_DWORD *)v153[0] + v122);
  if (v155)
  {
    size_t v46 = 12 * v155;
    uint64_t v47 = (char *)operator new(v46);
    size_t v48 = 12 * ((v46 - 12) / 0xC) + 12;
    bzero(v47, v48);
    uint64_t v49 = &v47[v48];
  }
  else
  {
    uint64_t v47 = 0;
    uint64_t v49 = 0;
  }
  uint64_t v50 = v151;
  if (v151 != v152)
  {
    do
    {
      int v51 = *((_DWORD *)v50 + 7);
      int v52 = *((_DWORD *)v50 + 8);
      uint64_t v53 = *((unsigned int *)v50 + 9);
      int v54 = v44[v53];
      unsigned int v55 = &v47[12 * v54];
      if (!v55[4]) {
        v55[4] = 1;
      }
      *(_DWORD *)unsigned int v55 = v53;
      *(_DWORD *)&v47[12 * v54 + 8] += v52 - v51 + 1;
      uint64_t v56 = v50[1];
      if (v56)
      {
        do
        {
          uint64_t v57 = (void **)v56;
          uint64_t v56 = (void *)*v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          uint64_t v57 = (void **)v50[2];
          BOOL v27 = *v57 == v50;
          uint64_t v50 = v57;
        }
        while (!v27);
      }
      uint64_t v50 = v57;
    }
    while (v57 != v152);
  }
  uint64_t v58 = (v8 + 1);
  llvm::IntEqClasses::uncompress((llvm::IntEqClasses *)v153);
  if (v49 != v47)
  {
    uint64_t v59 = 0;
    unsigned int v60 = 0;
    unsigned int v61 = 0;
    unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v47) >> 2);
    do
    {
      if (v47[12 * v59 + 4]) {
        BOOL v63 = v45 == v61;
      }
      else {
        BOOL v63 = 1;
      }
      if (!v63)
      {
        unsigned int v64 = *(_DWORD *)&v47[12 * v59 + 8] + v60;
        if (v64 <= v40) {
          unsigned int v60 = v64;
        }
        llvm::IntEqClasses::join((llvm::IntEqClasses *)v153);
      }
      uint64_t v59 = ++v61;
    }
    while (v62 > v61);
  }
  llvm::IntEqClasses::compress((llvm::IntEqClasses *)v153);
  if (MGGetBoolAnswer())
  {
    __int16 v72 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DEBUG_LLVM_IR", v65);
    if (v72 && *v72 != 48 && atoi(v72))
    {
      printMessage((char **)&AGCPrinter, "----- Texture allocations ------\n", v66, v67, v68, v69, v70, v71, v113);
      int v73 = 1;
    }
    else
    {
      int v73 = 0;
    }
  }
  else
  {
    int v73 = 0;
  }
  uint64_t v134 = &v136;
  uint64_t v135 = 0x800000000;
  char v74 = v151;
  if (v151 != v152)
  {
    char v75 = v116 + 120;
    do
    {
      if (*((_DWORD *)v153[0] + *((unsigned int *)v74 + 9)) == *((_DWORD *)v153[0] + v58))
      {
        uint64_t v76 = *v75;
        if (!*v75) {
          goto LABEL_114;
        }
        unsigned int v77 = *((_DWORD *)v74 + 7);
        uint64_t v78 = v116 + 120;
        do
        {
          unsigned int v79 = *(_DWORD *)(v76 + 36) + *(_DWORD *)(v76 + 32);
          BOOL v80 = v79 > v77;
          if (v79 <= v77) {
            char v81 = (uint64_t *)(v76 + 8);
          }
          else {
            char v81 = (uint64_t *)v76;
          }
          if (v80) {
            uint64_t v78 = (uint64_t *)v76;
          }
          uint64_t v76 = *v81;
        }
        while (*v81);
        if (v78 == v75 || v77 < *((_DWORD *)v78 + 8)) {
LABEL_114:
        }
          uint64_t v78 = v116 + 120;
        if (v135)
        {
          int v82 = 0;
          uint64_t v83 = 32 * v135;
          uint64_t v84 = (unsigned __int8 *)v134 + 8;
          do
          {
            unsigned int v85 = *v84;
            v84 += 32;
            v82 += (v85 >> 1) & 1;
            v83 -= 32;
          }
          while (v83);
          int v86 = v82 << 16;
        }
        else
        {
          int v86 = 0;
        }
        *((_DWORD *)v74 + 9) = v86 | v135;
        unsigned int v87 = *((_DWORD *)v74 + 7);
        if (v87 <= *((_DWORD *)v74 + 8))
        {
          uint64_t v88 = (uint64_t)(v78 + 4);
          do
          {
            AGCLLVMUserObject::Texture::getAllocationInfo((uint64_t)&v145, v88, v87);
            uint64_t v89 = (_OWORD *)llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>((uint64_t)&v134, (unint64_t)&v145);
            int v90 = (char *)v134 + 32 * v135;
            long long v91 = v89[1];
            *int v90 = *v89;
            v90[1] = v91;
            LODWORD(v135) = v135 + 1;
            ++v87;
          }
          while (v87 <= *((_DWORD *)v74 + 8));
        }
        if (v73) {
          printMessage((char **)&AGCPrinter, "[%08x - %08x] TS%d - TS%d", v66, v67, v68, v69, v70, v71, *((_DWORD *)v74 + 7));
        }
      }
      else if (v73)
      {
        printMessage((char **)&AGCPrinter, "[%08x - %08x] bindless", v66, v67, v68, v69, v70, v71, *((_DWORD *)v74 + 7));
      }
      uint64_t v92 = v74[1];
      if (v92)
      {
        do
        {
          uint64_t v93 = (void **)v92;
          uint64_t v92 = (void *)*v92;
        }
        while (v92);
      }
      else
      {
        do
        {
          uint64_t v93 = (void **)v74[2];
          BOOL v27 = *v93 == v74;
          char v74 = v93;
        }
        while (!v27);
      }
      char v74 = v93;
    }
    while (v93 != v152);
  }
  AGCLLVMUserObject::createTextureArrays(v116, (uint64_t)&v134);
  int v145 = v149;
  uint64_t v146 = v149;
  uint64_t v147 = 4;
  LODWORD(v148) = 0;
  uint64_t v94 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v95 = 0;
    unsigned int v96 = 0;
    do
    {
      if (*((_DWORD *)v153[0] + v95) == *((_DWORD *)v153[0] + v122))
      {
        llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__src, (llvm::SmallPtrSetImplBase *)(v116 + 125), *(void **)(v94 + 8 * v95));
      }
      else
      {
        uint64_t v97 = &v14[64 * v95];
        int v98 = (void **)*((void *)v97 + 1);
        if (v98 == *(void ***)v97) {
          uint64_t v99 = 20;
        }
        else {
          uint64_t v99 = 16;
        }
        uint64_t v100 = *(unsigned int *)&v97[v99];
        if (v100)
        {
          uint64_t v101 = 8 * v100;
          uint64_t v102 = v98;
          while ((unint64_t)*v102 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v102;
            v101 -= 8;
            if (!v101) {
              goto LABEL_152;
            }
          }
        }
        else
        {
          uint64_t v102 = v98;
        }
        unint64_t v103 = &v98[v100];
        if (v102 != v103)
        {
          int v104 = *v102;
LABEL_148:
          llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__src, (llvm::SmallPtrSetImplBase *)&v145, v104);
          while (++v102 != v103)
          {
            int v104 = *v102;
            if ((unint64_t)*v102 < 0xFFFFFFFFFFFFFFFELL)
            {
              if (v102 != v103) {
                goto LABEL_148;
              }
              break;
            }
          }
        }
      }
LABEL_152:
      uint64_t v94 = *a2;
      uint64_t v95 = ++v96;
    }
    while (v96 < (unint64_t)((a2[1] - *a2) >> 3));
  }
  v133[0] = &unk_1F25C4988;
  v133[1] = a3;
  v133[2] = v116;
  uint64_t v133[3] = v133;
  uint64_t __src = &unk_1F25C4940;
  std::string::size_type v157 = &v150;
  uint64_t v158 = v133;
  p_src = &__src;
  iterateResourceUsers(&v145, (uint64_t)&__src);
  std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](&__src);
  std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v133);
  if (v146 != v145) {
    free(v146);
  }
  uint64_t v148 = 0;
  uint64_t v147 = 0;
  uint64_t v146 = &v147;
  int v145 = &unk_1F25C4680;
  v131[0] = &unk_1F25C49D0;
  v131[1] = &v145;
  int v132 = v131;
  for (uint64_t m = *(void **)(a4 + 24); m; uint64_t m = (void *)*m)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v132, m[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v131);
  v129[0] = &unk_1F25C4A60;
  v129[1] = &v145;
  int v130 = v129;
  for (uint64_t n = (void *)*((void *)v117 + 3); n; uint64_t n = (void *)*n)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v130, n[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v129);
  addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator>((unint64_t)&v145, (uint64_t)&v134, (uint64_t)(v116 + 119));
  AGCLLVMUserObject::createTextureHeapIndexArray((uint64_t)v116, (uint64_t)&v134);
  if (*((void *)v117 + 4)) {
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(v116, (uint64_t *)&v134, (uint64_t)(v116 + 221));
  }
  uint64_t __src = v116;
  unsigned int v121 = v116;
  v127[0] = &unk_1F25C4AF0;
  v127[1] = &v145;
  v127[2] = &__src;
  int v128 = v127;
  for (iuint64_t i = *(void **)(a4 + 24); ii; iuint64_t i = (void *)*ii)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v128, ii[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v127);
  v125[0] = &unk_1F25C4BC8;
  v125[1] = &v145;
  v125[2] = &v121;
  int v126 = v125;
  for (juint64_t j = (void *)*((void *)v117 + 3); jj; juint64_t j = (void *)*jj)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v126, jj[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v125);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy((void *)v147);
  int v145 = v116;
  v123[0] = &unk_1F25C4C58;
  v123[1] = &v145;
  int v124 = v123;
  for (kunint64_t k = *(void **)(a3 + 24); kk; kunint64_t k = (void *)*kk)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v124, kk[5]);
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v123);
  if (v134 != &v136) {
    free(v134);
  }
  int v110 = v115;
  if (v47) {
    operator delete(v47);
  }
  if (v14)
  {
    while (v110 != v14)
    {
      uint64_t v112 = (void *)*((void *)v110 - 8);
      long long v111 = (void *)*((void *)v110 - 7);
      v110 -= 64;
      if (v111 != v112) {
        free(v111);
      }
    }
    operator delete(v14);
  }
  long long v150 = &unk_1F25C4668;
  if (v153[0] != v154) {
    free(v153[0]);
  }
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v152[0]);
}

BOOL AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::contains(const char **this, llvm::Function *a2)
{
  uint64_t Name = llvm::Value::getName(a2);
  BOOL v5 = *this;
  if (!v5) {
    return 1;
  }
  unint64_t v6 = (const void *)Name;
  size_t v7 = v4;
  size_t v8 = strlen(v5);
  if (v7 < v8) {
    return 0;
  }
  return !v8 || memcmp(v6, v5, v8) == 0;
}

void AGCLLVMUserObject::createTextureArrays(void *a1, uint64_t a2)
{
  unsigned char v14[16] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = v14;
  uint64_t v13 = 0x400000000;
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4)
  {
    unint64_t v5 = *(void *)a2;
    uint64_t v6 = 32 * v4;
    do
    {
      if ((*(unsigned char *)(v5 + 8) & 2) != 0)
      {
        size_t v7 = (_OWORD *)llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>((uint64_t)&v12, v5);
        size_t v8 = (char *)v12 + 32 * v13;
        long long v9 = v7[1];
        *size_t v8 = *v7;
        v8[1] = v9;
        LODWORD(v13) = v13 + 1;
      }
      v5 += 32;
      v6 -= 32;
    }
    while (v6);
  }
  uint64_t v10 = AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 149));
  AGCLLVMUserObject::setupTextureArrayRasterOrderGroup((uint64_t)a1, a2, v10);
  uint64_t v11 = AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)&v12, (uint64_t)(a1 + 157));
  AGCLLVMUserObject::setupTextureArrayRasterOrderGroup((uint64_t)a1, (uint64_t)&v12, v11);
  if (*(unsigned char *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 1755))
  {
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 165));
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 173));
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 189));
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 197));
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 181));
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 205));
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 221));
  }
  if (v12 != v14) {
    free(v12);
  }
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = **(void **)(a1 + 8);
  v5[0] = &unk_1F25C4CA0;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = ((void *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  uint64_t v5 = *(void *)(v4 + 32);
  if (v5) {
    BOOL v6 = v5 == *(void *)(v4 + 40) + 40;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    size_t v7 = 0;
  }
  else {
    size_t v7 = (llvm::Instruction *)(v5 - 24);
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), v7);
  size_t v8 = (void *)((char *)v3 + *(void *)(*v3 - 24));
  __int16 v15 = 257;
  uint64_t v10 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v9);
  uint64_t AlignedLoad = (void *)llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, v4, 0, (uint64_t)v14);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  uint64_t v12 = (llvm::SmallPtrSetImplBase *)(v3 + 125);
  if (llvm::SmallPtrSetImplBase::erase_imp(v12, v2)) {
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v14, v12, AlignedLoad);
  }
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4CA0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25C4CA0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4C58;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25C4C58;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **(void **)(a1 + 16);
  v6[0] = &unk_1F25C4C10;
  v6[1] = v4;
  void v6[3] = v6;
  v7[0] = &unk_1F25C4B38;
  v7[1] = v3;
  void v7[2] = v6;
  v7[3] = v7;
  iterateResourceUsers(v2, v7);
  std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v7);
  return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v6);
}

__n128 std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C4B38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  void v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), *a2);
  uint64_t v4 = (llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40);
  uint64_t v5 = (llvm::Value *)*((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  BOOL v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v21 = 257;
  uint64_t Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v20);
  uint64_t v8 = llvm::ConstantInt::get();
  uint64_t v22 = v24;
  uint64_t v23 = 0x200000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v22, 1uLL, v8);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v22, Add);
  long long v9 = (char *)v3 + *(void *)(*v3 - 24);
  uint64_t v10 = (llvm::Type **)v3[223];
  uint64_t v11 = (uint64_t **)v22;
  uint64_t v12 = v23;
  __int16 v21 = 257;
  int v14 = AGCLLVMBuilder::tryDeducePointeeType(v10, v13);
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)(v9 + 40), (uint64_t)v14, (uint64_t *)v10, v11, v12, (uint64_t)v20);
  uint64_t v16 = (uint64_t)v3 + *(void *)(*v3 - 24) + 40;
  uint64_t v17 = *(void *)v2;
  __int16 v21 = 257;
  uint64_t Cast = (void *)llvm::IRBuilderBase::CreateCast(v16, 49, GEP, v17, (uint64_t)v20);
  if (llvm::SmallPtrSetImplBase::erase_imp((llvm::SmallPtrSetImplBase *)(v3 + 125), v2)) {
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v20, (llvm::SmallPtrSetImplBase *)(v3 + 125), Cast);
  }
  if (v22 != v24) {
    free(v22);
  }
  return Cast;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4C10;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C4C10;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4BC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C4BC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **(void **)(a1 + 16);
  v6[0] = &unk_1F25C4B80;
  v6[1] = v4;
  void v6[3] = v6;
  v7[0] = &unk_1F25C4B38;
  v7[1] = v3;
  void v7[2] = v6;
  v7[3] = v7;
  iterateResourceUsers(v2, v7);
  std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v7);
  return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v6);
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(AGCLLVMUserObject **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v3 + *(void *)(*(void *)v3 - 24) + 40), *a2);
  uint64_t v4 = (AGCLLVMUserObject *)((char *)v3 + *(void *)(*(void *)v3 - 24) + 40);
  uint64_t v5 = (llvm::Value *)*((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  BOOL v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v18 = 257;
  uint64_t Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v17);
  uint64_t v8 = (uint64_t)v3 + *(void *)(*(void *)v3 - 24) + 40;
  uint64_t v9 = *(void *)v2;
  __int16 v18 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v8, 48, Add, v9, (uint64_t)v17);
  uint64_t v11 = AGCLLVMUserObject::buildImageHeapIndex(v3, Cast);
  uint64_t v12 = (uint64_t)v3 + *(void *)(*(void *)v3 - 24) + 40;
  uint64_t v13 = *(void *)v2;
  __int16 v18 = 257;
  int v14 = (void *)llvm::IRBuilderBase::CreateCast(v12, 48, v11, v13, (uint64_t)v17);
  __int16 v15 = (AGCLLVMUserObject *)((char *)v3 + 1000);
  if (llvm::SmallPtrSetImplBase::erase_imp(v15, v2)) {
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v17, v15, v14);
  }
  return v14;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4B80;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C4B80;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4AF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C4AF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C4AA8;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4AA8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C4AA8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4A60;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C4A60;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C4A18;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4A18;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C4A18;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C49D0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C49D0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5>,void ()(llvm::Function *)>::~__func()
{
}

BOOL std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v16, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v6 = v4 + 16;
  uint64_t v5 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v6;
  do
  {
    unsigned int v9 = *(_DWORD *)(v5 + 32);
    BOOL v10 = v9 >= v16;
    if (v9 >= v16) {
      uint64_t v11 = (uint64_t *)v5;
    }
    else {
      uint64_t v11 = (uint64_t *)(v5 + 8);
    }
    if (v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v11;
  }
  while (*v11);
  if (v8 == v6 || *(_DWORD *)(v8 + 28) > v16) {
LABEL_12:
  }
    uint64_t v8 = v6;
  uint64_t v12 = *(void *)(a1 + 8) + 16;
  if (v12 != v8)
  {
    uint64_t v13 = ((void *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF))[8];
    int v14 = (void *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u) {
      int v14 = (void *)*v14;
    }
    std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v3, (*(_DWORD *)(v8 + 36) + ((*(_DWORD *)v14 - *(_DWORD *)(v8 + 28)) << 16)) & 0xFFFF0000 | (unsigned __int16)(*(_WORD *)v14 - *(_WORD *)(v8 + 28) + *(_DWORD *)(v8 + 36)));
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v3);
  }
  return v12 != v8;
}

__n128 std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4940;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C4940;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (*a2
    && (uint64_t v5 = *(void *)(v2 - 32)) != 0
    && !*(unsigned char *)(v5 + 16)
    && *(void *)(v5 + 24) == *(void *)(v2 + 72)
    && (uint64_t v6 = (llvm::Function *)llvm::Value::stripPointerCasts((llvm::Value *)v5), !*((unsigned char *)v6 + 16))
    && AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::contains(*(const char ***)(a1 + 8), v6))
  {
    uint64_t v7 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 96);
    uint64_t v8 = *(void *)(v7 + 32);
    if (v8) {
      BOOL v9 = v8 == *(void *)(v7 + 40) + 40;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = (llvm::Instruction *)(v8 - 24);
    }
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(void *)(*(void *)v3 - 24) + v3 + 40), v10);
    uint64_t v11 = (uint64_t *)(*(void *)(*(void *)v3 - 24) + v3 + 40);
    __int16 v39 = 257;
    uint64_t v13 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v7, v12);
    uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v11, v13, v7, 0, (uint64_t)v38);
    uint64_t v15 = *(void *)(*(void *)(*(void *)v3 - 24) + v3 + 240);
    __int16 v37 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v11, 47, AlignedLoad, v15, (uint64_t)v36);
    uint64_t v17 = *(void *)(*(void *)v3 - 24) + v3 + 40;
    __int16 v18 = (AGCLLVMUserObject *)llvm::ConstantInt::get();
    uint64_t AddOffset = AGCLLVMUserObject::ResourceArrayIndex16x2::createAddOffset((AGCLLVMUserObject::ResourceArrayIndex16x2 *)v3, v18, *(llvm::Value **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)), v19);
    uint64_t v21 = *(void *)(*(void *)(*(void *)v3 - 24) + v3 + 240);
    __int16 v39 = 257;
    uint64_t v22 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v17, 39, AddOffset, v21, (uint64_t)v38);
    uint64_t v23 = (llvm::IRBuilderBase *)(*(void *)(*(void *)v3 - 24) + v3 + 40);
    uint64_t v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v39 = 257;
    uint64_t Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v23, Cast, v24, (const llvm::Twine *)v38);
    __int16 v37 = 257;
    uint64_t Add = llvm::IRBuilderBase::CreateAdd(v23, Shl, v22, (const llvm::Twine *)v36);
    uint64_t v27 = *(void *)(*(void *)v3 - 24) + v3 + 40;
    uint64_t v28 = *(void *)v2;
    __int16 v39 = 257;
    int v29 = (void *)llvm::IRBuilderBase::CreateCast(v27, 48, Add, v28, (uint64_t)v38);
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v38, (llvm::SmallPtrSetImplBase *)(v3 + 1096), v29);
  }
  else
  {
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(void *)(*(void *)v3 - 24) + v3 + 40), (llvm::Instruction *)v2);
    uint64_t v30 = (AGCLLVMUserObject *)llvm::ConstantInt::get();
    uint64_t v32 = AGCLLVMUserObject::ResourceArrayIndex16x2::createAddOffset((AGCLLVMUserObject::ResourceArrayIndex16x2 *)v3, v30, *(llvm::Value **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)), v31);
    uint64_t v33 = *(void *)(*(void *)v3 - 24) + v3 + 40;
    uint64_t v34 = *(void *)v2;
    __int16 v39 = 257;
    return llvm::IRBuilderBase::CreateCast(v33, 48, v32, v34, (uint64_t)v38);
  }
  return (uint64_t)v29;
}

uint64_t AGCLLVMUserObject::ResourceArrayIndex16x2::createAddOffset(AGCLLVMUserObject::ResourceArrayIndex16x2 *this, AGCLLVMUserObject *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v7 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v8 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v26 = 257;
  BOOL v9 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v7, a2, v8, (const llvm::Twine *)v25);
  BOOL v10 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v11 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v26 = 257;
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v10, a2, v11, (const llvm::Twine *)v25);
  uint64_t v13 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v26 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v13, v9, a3, (const llvm::Twine *)v25);
  uint64_t v15 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v26 = 257;
  unsigned int v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v15, LShr, a3, (const llvm::Twine *)v25);
  uint64_t v17 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v18 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v26 = 257;
  unsigned int v19 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v17, Add, v18, (const llvm::Twine *)v25);
  int v20 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v26 = 257;
  uint64_t Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v20, v16, v21, (const llvm::Twine *)v25);
  uint64_t v23 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v26 = 257;
  return llvm::IRBuilderBase::CreateOr(v23, Shl, v19, (const llvm::Twine *)v25);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4988;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C4988;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
}

uint64_t AGCLLVMUserObject::setupTextureArrayRasterOrderGroup(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3)
  {
    uint64_t v6 = (void *)result;
    uint64_t v7 = 0;
    uint64_t v8 = result + 368;
    uint64_t v9 = 4;
    do
    {
      uint64_t v10 = *(unsigned int *)(*(void *)a2 + v9);
      if (v10 != -1)
      {
        uint64_t v11 = *(void *)(*(void *)(*v6 - 24) + v8 + 32);
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 176))(v11, a3, v10, 1, v7);
      }
      ++v7;
      v9 += 32;
    }
    while (v3 != v7);
  }
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(long long **)(a1 + 8);
  uint64_t v5 = &unk_1F25C4868;
  long long v6 = *v3;
  uint64_t v7 = &v5;
  iterateResourceUsers(v2, &v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](&v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  v27[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v20 = v24;
  uint64_t v21 = v24;
  uint64_t v22 = 8;
  int v23 = 0;
  uint64_t v4 = *(void *)(v3 + 8);
  BOOL v25 = v27;
  uint64_t v26 = 0x800000000;
  uint64_t v5 = (AGCLLVMUserObject *)llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v25, v4);
  AGCLLVMUserObject::getSampleFunctionMap(v5);
  AGCLLVMUserObject::getDimensionFunctionMap(v6);
  AGCLLVMUserObject::getTextureFenceFunctionSet(v7);
  AGCLLVMUserObject::getIsNullTextureFunctionSet(v8);
  for (unsigned int i = v26; v26; unsigned int i = v26)
  {
    uint64_t v10 = *((void *)v25 + i - 1);
    LODWORD(v26) = i - 1;
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v18, (llvm::SmallPtrSetImplBase *)&v20, (void *)v10);
    if (v19)
    {
      llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v25, *(void *)(v10 + 8));
      if (v10)
      {
        if (*(unsigned char *)(v10 + 16) == 84)
        {
          if ((uint64_t v11 = *(void *)(v10 - 32)) == 0
            || *(unsigned char *)(v11 + 16)
            || *(void *)(v11 + 24) != *(void *)(v10 + 72)
            || ((llvm::Value::getName((llvm::Value *)v11), int Key = llvm::StringMapImpl::FindKey(), Key == -1)
             || Key == (unint64_t)dword_1EBD0EB78)
            && ((int v14 = llvm::StringMapImpl::FindKey(), v14 == -1)
             || v14 == (unint64_t)dword_1EBD0EAA0)
            && ((int v15 = llvm::StringMapImpl::FindKey(), v15 == -1)
             || v15 == (unint64_t)dword_1EBD0EAC0)
            && ((int v16 = llvm::StringMapImpl::FindKey(), v16 == -1)
             || v16 == (unint64_t)dword_1EBD0EAE0))
          {
            uint64_t v12 = *(void *)(a1 + 8);
            AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)v18, *(llvm::Constant **)(v3 + 32 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF)));
            IntervalMap<unsigned int>::insert(v12, v18[0], **(unsigned int **)(a1 + 16));
          }
        }
      }
    }
  }
  if (v25 != v27) {
    free(v25);
  }
  if (v21 != v20) {
    free(v21);
  }
  return 1;
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = 0;
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      ++v3;
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
  }
  uint64_t v5 = *(unsigned int *)(result + 8);
  if (v3 + v5 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2)
  {
    long long v6 = (void *)(*(void *)result + 8 * v5);
    do
    {
      *v6++ = *(void *)(v2 + 24);
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  *(_DWORD *)(result + 8) = v5 + v3;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4868;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C4868;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C48F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C48F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(long long **)(a1 + 8);
  uint64_t v5 = &unk_1F25C4868;
  long long v6 = *v3;
  uint64_t v7 = &v5;
  iterateResourceUsers(v2, &v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](&v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C48B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C48B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(long long **)(a1 + 8);
  uint64_t v5 = &unk_1F25C4868;
  long long v6 = *v3;
  uint64_t v7 = &v5;
  iterateResourceUsers(v2, &v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](&v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4820;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C4820;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1>,void ()(llvm::Function *)>::~__func()
{
}

uint64_t IntervalEqClasses::join(IntervalEqClasses *this)
{
  return llvm::IntEqClasses::join((IntervalEqClasses *)((char *)this + 32));
}

char *std::vector<llvm::Value *>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = **(void **)(a1 + 8);
  v5[0] = &unk_1F25C6368;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = ((void *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  uint64_t v5 = *(void *)(v4 + 32);
  if (v5) {
    BOOL v6 = v5 == *(void *)(v4 + 40) + 40;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (llvm::Instruction *)(v5 - 24);
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), v7);
  uint64_t v8 = (void *)((char *)v3 + *(void *)(*v3 - 24));
  __int16 v15 = 257;
  uint64_t v10 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v9);
  uint64_t AlignedLoad = (void *)llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, v4, 0, (uint64_t)v14);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  uint64_t v12 = (llvm::SmallPtrSetImplBase *)(v3 + 125);
  if (llvm::SmallPtrSetImplBase::erase_imp(v12, v2)) {
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v14, v12, AlignedLoad);
  }
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C6368;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C6368;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C6320;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C6320;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **(void **)(a1 + 16);
  v6[0] = &unk_1F25C62D8;
  v6[1] = v4;
  void v6[3] = v6;
  v7[0] = &unk_1F25C5EE8;
  v7[1] = v3;
  void v7[2] = v6;
  v7[3] = v7;
  iterateResourceUsers(v2, v7);
  std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v7);
  return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v6);
}

BOOL std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v16, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v6 = v4 + 16;
  uint64_t v5 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v6;
  do
  {
    unsigned int v9 = *(_DWORD *)(v5 + 32);
    BOOL v10 = v9 >= v16;
    if (v9 >= v16) {
      uint64_t v11 = (uint64_t *)v5;
    }
    else {
      uint64_t v11 = (uint64_t *)(v5 + 8);
    }
    if (v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v11;
  }
  while (*v11);
  if (v8 == v6 || *(_DWORD *)(v8 + 28) > v16) {
LABEL_12:
  }
    uint64_t v8 = v6;
  uint64_t v12 = *(void *)(a1 + 8) + 16;
  if (v12 != v8)
  {
    uint64_t v13 = ((void *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF))[8];
    int v14 = (void *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u) {
      int v14 = (void *)*v14;
    }
    std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v3, (*(_DWORD *)(v8 + 36) + ((*(_DWORD *)v14 - *(_DWORD *)(v8 + 28)) << 16)) & 0xFFFF0000 | (unsigned __int16)(*(_WORD *)v14 - *(_WORD *)(v8 + 28) + *(_DWORD *)(v8 + 36)));
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v3);
  }
  return v12 != v8;
}

__n128 std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5EE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C5EE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  void v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), *a2);
  uint64_t v4 = (llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40);
  uint64_t v5 = (llvm::Value *)*((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v21 = 257;
  uint64_t Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v20);
  uint64_t v8 = llvm::ConstantInt::get();
  uint64_t v22 = v24;
  uint64_t v23 = 0x200000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v22, 1uLL, v8);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v22, Add);
  unsigned int v9 = (char *)v3 + *(void *)(*v3 - 24);
  BOOL v10 = (llvm::Type **)v3[223];
  uint64_t v11 = (uint64_t **)v22;
  uint64_t v12 = v23;
  __int16 v21 = 257;
  int v14 = AGCLLVMBuilder::tryDeducePointeeType(v10, v13);
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)(v9 + 40), (uint64_t)v14, (uint64_t *)v10, v11, v12, (uint64_t)v20);
  uint64_t v16 = (uint64_t)v3 + *(void *)(*v3 - 24) + 40;
  uint64_t v17 = *(void *)v2;
  __int16 v21 = 257;
  uint64_t Cast = (void *)llvm::IRBuilderBase::CreateCast(v16, 49, GEP, v17, (uint64_t)v20);
  if (llvm::SmallPtrSetImplBase::erase_imp((llvm::SmallPtrSetImplBase *)(v3 + 125), v2)) {
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v20, (llvm::SmallPtrSetImplBase *)(v3 + 125), Cast);
  }
  if (v22 != v24) {
    free(v22);
  }
  return Cast;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C62D8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C62D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C6290;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C6290;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **(void **)(a1 + 16);
  v6[0] = &unk_1F25C6248;
  v6[1] = v4;
  void v6[3] = v6;
  v7[0] = &unk_1F25C5EE8;
  v7[1] = v3;
  void v7[2] = v6;
  v7[3] = v7;
  iterateResourceUsers(v2, v7);
  std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v7);
  return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v6);
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(AGCLLVMUserObject **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v3 + *(void *)(*(void *)v3 - 24) + 40), *a2);
  uint64_t v4 = (AGCLLVMUserObject *)((char *)v3 + *(void *)(*(void *)v3 - 24) + 40);
  uint64_t v5 = (llvm::Value *)*((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v18 = 257;
  uint64_t Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v17);
  uint64_t v8 = (uint64_t)v3 + *(void *)(*(void *)v3 - 24) + 40;
  uint64_t v9 = *(void *)v2;
  __int16 v18 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v8, 48, Add, v9, (uint64_t)v17);
  uint64_t v11 = AGCLLVMUserObject::buildImageHeapIndex(v3, Cast);
  uint64_t v12 = (uint64_t)v3 + *(void *)(*(void *)v3 - 24) + 40;
  uint64_t v13 = *(void *)v2;
  __int16 v18 = 257;
  int v14 = (void *)llvm::IRBuilderBase::CreateCast(v12, 48, v11, v13, (uint64_t)v17);
  __int16 v15 = (AGCLLVMUserObject *)((char *)v3 + 1000);
  if (llvm::SmallPtrSetImplBase::erase_imp(v15, v2)) {
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v17, v15, v14);
  }
  return v14;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C6248;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C6248;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C6200;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C6200;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C61B8;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C61B8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C61B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C6170;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C6170;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C6128;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C6128;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C6128;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C60E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C60E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24>,void ()(llvm::Function *)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C6098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C6098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C6050;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25C6050;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C6008;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5FC0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5FC0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_1F25C5F30;
    v8[1] = v6;
    void v8[3] = v8;
    v9[0] = &unk_1F25C5EE8;
    v9[1] = v5;
    v9[2] = v8;
    void v9[3] = v9;
    char v7 = iterateResourceUsers(v4, v9);
    std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v9);
    *(unsigned char *)v3[1] = v7;
    return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v8);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(AGCLLVMUserObject::ResourceArrayIndex16x2 **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)v3 + *(void *)(*(void *)v3 - 24) + 40), *a2);
  uint64_t v4 = (AGCLLVMUserObject *)llvm::ConstantInt::get();
  uint64_t AddOffset = AGCLLVMUserObject::ResourceArrayIndex16x2::createAddOffset(v3, v4, *((llvm::Value **)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)), v5);
  uint64_t v7 = (uint64_t)v3 + *(void *)(*(void *)v3 - 24) + 40;
  uint64_t v8 = *(void *)v2;
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateCast(v7, 48, AddOffset, v8, (uint64_t)v10);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5F30;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5F30;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25C5F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_1F25C5F30;
    v8[1] = v6;
    void v8[3] = v8;
    v9[0] = &unk_1F25C5EE8;
    v9[1] = v5;
    v9[2] = v8;
    void v9[3] = v9;
    char v7 = iterateResourceUsers(v4, v9);
    std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v9);
    *(unsigned char *)v3[1] = v7;
    return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v8);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5EA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25C5EA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C5E58;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5E58;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5E58;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5E10;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5E10;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C5DC8;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5DC8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5DC8;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5D80;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5D80;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    v6[0] = &unk_1F25C4D30;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = iterateResourceUsers(v4, v6);
    return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v6);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  unsigned char v25[32] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)v22, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  if (v22[1] != v22[0]) {
    return 0;
  }
  AGCLLVMUserObject::getSampleFunctionMap(v3);
  AGCLLVMUserObject::getUniqueIDFunctionSet(v4);
  AGCLLVMUserObject::getTextureFenceFunctionSet(v5);
  AGCLLVMUserObject::getIsNullTextureFunctionSet(v6);
  AGCLLVMUserObject::getDimensionFunctionMap(v7);
  uint64_t v23 = v25;
  uint64_t v24 = 0x2000000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v23, v2);
  unsigned int v8 = v24;
  if (v24)
  {
    while (1)
    {
      uint64_t v9 = *((void *)v23 + --v8);
      LODWORD(v24) = v8;
      uint64_t v10 = *(void *)(v9 + 8);
      if (v10) {
        break;
      }
LABEL_30:
      if (!v8) {
        goto LABEL_31;
      }
    }
    while (1)
    {
      uint64_t v11 = *(void *)(v10 + 24);
      unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 <= 0x1B) {
        break;
      }
      if (v12 != 84)
      {
        if (v12 != 77) {
          goto LABEL_33;
        }
LABEL_10:
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v23, v11);
        goto LABEL_11;
      }
      uint64_t v13 = *(void *)(v11 - 32);
      if (!v13
        || *(unsigned char *)(v13 + 16)
        || *(void *)(v13 + 24) != *(void *)(v11 + 72)
        || ((llvm::Value::getName((llvm::Value *)v13), int Key = llvm::StringMapImpl::FindKey(), Key == -1)
         || Key == (unint64_t)dword_1EBD0EB78)
        && ((int v15 = llvm::StringMapImpl::FindKey(), v15 == -1) || v15 == (unint64_t)dword_1EBD0EA80)
        && ((int v16 = llvm::StringMapImpl::FindKey(), v16 == -1) || v16 == (unint64_t)dword_1EBD0EAC0)
        && ((int v17 = llvm::StringMapImpl::FindKey(), v17 == -1) || v17 == (unint64_t)dword_1EBD0EAE0)
        && ((int v18 = llvm::StringMapImpl::FindKey(), v18 != (unint64_t)dword_1EBD0EAA0)
          ? (BOOL v19 = v18 == -1)
          : (BOOL v19 = 1),
            v19))
      {
LABEL_33:
        uint64_t v20 = 0;
        goto LABEL_34;
      }
LABEL_11:
      uint64_t v10 = *(void *)(v10 + 8);
      if (!v10)
      {
        unsigned int v8 = v24;
        goto LABEL_30;
      }
    }
    if (v12 != 5 || *(_WORD *)(v11 + 18) != 49) {
      goto LABEL_33;
    }
    goto LABEL_10;
  }
LABEL_31:
  uint64_t v20 = 1;
LABEL_34:
  if (v23 != v25) {
    free(v23);
  }
  return v20;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4D30;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C4D30;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4CE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C4CE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = **(void **)(a1 + 8);
  v5[0] = &unk_1F25C5D38;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = ((void *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  uint64_t v5 = *(void *)(v4 + 32);
  if (v5) {
    BOOL v6 = v5 == *(void *)(v4 + 40) + 40;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (llvm::Instruction *)(v5 - 24);
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), v7);
  unsigned int v8 = (void *)((char *)v3 + *(void *)(*v3 - 24));
  __int16 v14 = 257;
  uint64_t v10 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v9);
  uint64_t AlignedLoad = (void *)llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, v4, 0, (uint64_t)v13);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v13, (llvm::SmallPtrSetImplBase *)(v3 + 125), AlignedLoad);
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5D38;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5D38;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5CF0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5CF0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20>,void ()(llvm::Function *)>::~__func()
{
}

uint64_t AGCLLVMUserObject::allocateBindlessHeapIndexForRange(void *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = a2[1] - *a2 + 1;
  if (v6 >= 2) {
    llvm::ArrayType::get(*(llvm::ArrayType **)((char *)a1 + *(void *)(*a1 - 24) + 240), (llvm::Type *)(a2[1] - *a2 + 1));
  }
  uint64_t v7 = llvm::User::operator new((llvm::User *)0x58);
  v19[0] = "agc.global_";
  void v19[2] = a3;
  __int16 v20 = 1027;
  uint64_t __src = v19;
  uint64_t v27 = ".";
  __int16 v29 = 770;
  uint64_t v8 = *a2;
  p_src = &__src;
  v23[0] = v8;
  __int16 v24 = 2050;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  if (v6 <= 1)
  {
    uint64_t __src = (void *)llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    uint64_t v26 = llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    uint64_t v27 = (const char *)llvm::ValueAsMetadata::get();
    p_src = v23;
    uint64_t v22 = 0x500000000;
    llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&p_src, &__src, v28);
    uint64_t v13 = (uint64_t)a1 + *(void *)(*a1 - 24) + 3080;
    uint64_t Impl = llvm::MDTuple::getImpl();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v13, Impl);
    int v15 = p_src;
    if (p_src == v23) {
      return v7;
    }
    goto LABEL_10;
  }
  p_src = v23;
  uint64_t v22 = 0x2000000000;
  uint64_t v9 = llvm::ValueAsMetadata::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&p_src, v9);
  llvm::ConstantInt::get();
  uint64_t v10 = llvm::ValueAsMetadata::get();
  for (unsigned int i = 0; i < a2[1] - *a2 + 1; ++i)
  {
    uint64_t __src = (void *)v10;
    uint64_t v26 = 0;
    llvm::ConstantInt::get();
    uint64_t v26 = llvm::ValueAsMetadata::get();
    uint64_t v12 = llvm::MDTuple::getImpl();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&p_src, v12);
  }
  uint64_t v16 = (uint64_t)a1 + *(void *)(*a1 - 24) + 3080;
  uint64_t v17 = llvm::MDTuple::getImpl();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v16, v17);
  int v15 = p_src;
  if (p_src != v23) {
LABEL_10:
  }
    free(v15);
  return v7;
}

uint64_t **std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  unsigned int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unsigned int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unsigned int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    void v7[5] = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    *unsigned int v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void AGCLLVMUserObject::lowerGlobalBindingVariable(AGCLLVMUserObject *this, llvm::GlobalVariable *a2)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  AGCLLVMObject::replaceConstantChainWithInstrs(a2, a2);
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = *(void *)(v4 + 24);
      uint64_t v4 = *(void *)(v4 + 8);
      unsigned int v6 = *(unsigned __int8 *)(v5 + 16);
      if (v5) {
        BOOL v7 = v6 >= 0x1C;
      }
      else {
        BOOL v7 = 0;
      }
      if (!v7) {
        goto LABEL_29;
      }
      if (v6 != 83) {
        break;
      }
      int v8 = *(_DWORD *)(v5 + 20);
      uint64_t v9 = v8 & 0x7FFFFFF;
      if ((v8 & 0x7FFFFFF) != 0)
      {
        uint64_t v10 = 0;
        uint64_t v11 = v5 - 32 * v9;
        while (1)
        {
          uint64_t v12 = v5 - 32 * v9;
          if ((v8 & 0x40000000) != 0) {
            uint64_t v12 = *(void *)(v5 - 8);
          }
          if (*(llvm::GlobalVariable **)(v12 + 32 * v10) == a2) {
            break;
          }
          if (++v10 == v9) {
            goto LABEL_28;
          }
        }
        if ((v8 & 0x40000000) != 0) {
          uint64_t v11 = *(void *)(v5 - 8);
        }
        uint64_t v15 = *(void *)(v11 + 32 * *(unsigned int *)(v5 + 60) + 8 * v10);
        uint64_t v16 = *(void *)(v15 + 40);
        if (v16 == v15 + 40)
        {
          __int16 v14 = 0;
        }
        else
        {
          uint64_t v17 = (llvm::Instruction *)(v16 - 24);
          if (v16) {
            uint64_t v18 = v16 - 24;
          }
          else {
            uint64_t v18 = 0;
          }
          if (*(unsigned __int8 *)(v18 + 16) - 29 >= 0xB) {
            __int16 v14 = 0;
          }
          else {
            __int16 v14 = v17;
          }
        }
        uint64_t v13 = (AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        goto LABEL_27;
      }
LABEL_28:
      uint64_t GlobalBindingTablePtr = AGCLLVMUserObject::getGlobalBindingTablePtr(this);
      uint64_t v20 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
      v26[0] = *(void *)a2;
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 1344))(v20);
      uint64_t v22 = (char *)this + *(void *)(*(void *)this - 24) + 8;
      v28[0] = GlobalBindingTablePtr;
      v28[1] = a2;
      __int16 v27 = 257;
      uint64_t v23 = llvm::IRBuilderBase::CreateCall((uint64_t)(v22 + 32), *(void *)(v21 + 24), v21, (uint64_t)v28, 2, (uint64_t)v26);
      __int16 v24 = (char *)this + *(void *)(*(void *)this - 24) + 40;
      uint64_t v25 = *(void *)a2;
      __int16 v27 = 257;
      llvm::IRBuilderBase::CreateCast((uint64_t)v24, 49, (uint64_t)v23, v25, (uint64_t)v26);
      llvm::User::replaceUsesOfWith();
LABEL_29:
      if (!v4) {
        return;
      }
    }
    uint64_t v13 = (AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    __int16 v14 = (llvm::Instruction *)v5;
LABEL_27:
    llvm::IRBuilderBase::SetInsertPoint(v13, v14);
    goto LABEL_28;
  }
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = (long long *)result[2];
    long long v7 = *v5;
    long long v8 = v5[1];
    uint64_t v9 = *((void *)v5 + 4);
    unsigned int v6 = (char *)operator new(0x30uLL);
    *(void *)unsigned int v6 = &unk_1F25C5C60;
    *(_OWORD *)(v6 + 8) = v7;
    *(_OWORD *)(v6 + 24) = v8;
    *((void *)v6 + 5) = v9;
    void v10[3] = v6;
    *(unsigned char *)v3[1] = iterateResourceUsers(v4, v10);
    return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v10);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = *(void **)(a1 + 32);
  if (**(unsigned char **)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v5 = ((void *)v3 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  unsigned int v6 = (void *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u) {
    unsigned int v6 = (void *)*v6;
  }
  if (*v6)
  {
LABEL_5:
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = ((void *)v3 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[8];
    uint64_t v9 = (unsigned int *)(v8 + 24);
    unsigned int v10 = *(_DWORD *)(v8 + 32);
    uint64_t v11 = v9;
    if (v10 >= 0x41) {
      uint64_t v11 = *(unsigned int **)v9;
    }
    uint64_t v14 = *(void *)(v7 + 8);
    uint64_t v12 = v7 + 8;
    uint64_t v13 = v14;
    if (!v14) {
      return 0;
    }
    unsigned int v15 = *v11;
    uint64_t v16 = v12;
    do
    {
      unsigned int v17 = *(_DWORD *)(v13 + 32);
      BOOL v18 = v17 >= v15;
      if (v17 >= v15) {
        BOOL v19 = (uint64_t *)v13;
      }
      else {
        BOOL v19 = (uint64_t *)(v13 + 8);
      }
      if (v18) {
        uint64_t v16 = v13;
      }
      uint64_t v13 = *v19;
    }
    while (*v19);
    if (v16 == v12 || *(_DWORD *)(v16 + 32) > v15) {
      return 0;
    }
    uint64_t v21 = *(uint64_t ***)(a1 + 24);
    if (v10 >= 0x41) {
      uint64_t v9 = *(unsigned int **)v9;
    }
    v40[0] = *v9;
    uint64_t v22 = std::__tree<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v21, v40[0], v40);
    unsigned int v23 = *((_DWORD *)v22 + 9) - *((_DWORD *)v22 + 8) + 1;
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v4 + *(void *)(*v4 - 24) + 40), v3);
    uint64_t GEP = *(llvm::Type ***)(v16 + 40);
    if (v23 >= 2)
    {
      uint64_t v25 = (uint64_t *)*((void *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
      uint64_t v26 = (char *)v4 + *(void *)(*v4 - 24);
      v42[0] = (uint64_t *)llvm::ConstantInt::get();
      v42[1] = v25;
      __int16 v41 = 257;
      uint64_t v28 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v27);
      uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v26 + 40), (uint64_t)v28, (uint64_t *)GEP, v42, 2, (uint64_t)v40);
    }
    uint64_t v29 = *(void *)(*v4 - 24);
    if (**(unsigned char **)(a1 + 40))
    {
      uint64_t v30 = *(void *)v3;
      __int16 v41 = 257;
      llvm::IRBuilderBase::CreateCast((uint64_t)v4 + v29 + 40, 49, (uint64_t)GEP, v30, (uint64_t)v40);
    }
    else
    {
      uint64_t v31 = llvm::PointerType::get();
      uint64_t v32 = (char *)v4 + *(void *)(*v4 - 24);
      uint64_t v33 = (llvm::Type *)*((void *)v32 + 29);
      uint64_t v34 = (uint64_t *)(v32 + 40);
      __int16 v41 = 257;
      uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v32 + 40), 49, (uint64_t)GEP, v31, (uint64_t)v40);
      __int16 v43 = 257;
      uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v34, v33, Cast, 0, (uint64_t)v42);
      uint64_t v37 = (uint64_t)v4 + *(void *)(*v4 - 24) + 40;
      uint64_t v38 = *(void *)v3;
      __int16 v41 = 257;
      __int16 v39 = (void *)llvm::IRBuilderBase::CreateCast(v37, 48, AlignedLoad, v38, (uint64_t)v40);
      llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v40, (llvm::SmallPtrSetImplBase *)(v4 + 125), v39);
    }
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v3);
  }
  return 1;
}

uint64_t **std::__tree<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, int *a3)
{
  unsigned int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unsigned int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unsigned int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x28uLL);
    int v10 = *a3;
    v7[4] = 0;
    *((_DWORD *)v7 + 7) = v10;
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    *unsigned int v6 = (uint64_t *)v7;
    uint64_t v11 = (uint64_t *)**a1;
    uint64_t v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      uint64_t v12 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5C60;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F25C5C60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5CA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C5CA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    long long v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = (long long *)result[2];
    long long v7 = *v5;
    long long v8 = v5[1];
    uint64_t v9 = *((void *)v5 + 4);
    unsigned int v6 = (char *)operator new(0x30uLL);
    *(void *)unsigned int v6 = &unk_1F25C5C60;
    *(_OWORD *)(v6 + 8) = v7;
    *(_OWORD *)(v6 + 24) = v8;
    *((void *)v6 + 5) = v9;
    void v10[3] = v6;
    *(unsigned char *)v3[1] = iterateResourceUsers(v4, v10);
    return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v10);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5C18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C5C18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  long long v3 = *(long long **)(a1 + 8);
  uint64_t v5 = &unk_1F25C5B88;
  long long v6 = *v3;
  long long v7 = &v5;
  iterateResourceUsers(v2, &v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](&v5);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (**(unsigned char **)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(v3 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 96);
  uint64_t v5 = (void *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = (void *)*v5;
  }
  if (*v5)
  {
LABEL_5:
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = v3 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF);
    uint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = (void *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u) {
      uint64_t v9 = (void *)*v9;
    }
    uint64_t v12 = *(void *)(v6 + 8);
    int v10 = (_DWORD *)(v6 + 8);
    uint64_t v11 = v12;
    if (!v12) {
      goto LABEL_18;
    }
    unsigned int v13 = *(_DWORD *)v9;
    uint64_t v14 = v10;
    do
    {
      unsigned int v15 = *(_DWORD *)(v11 + 28);
      BOOL v16 = v15 >= v13;
      if (v15 >= v13) {
        unsigned int v17 = (uint64_t *)v11;
      }
      else {
        unsigned int v17 = (uint64_t *)(v11 + 8);
      }
      if (v16) {
        uint64_t v14 = (_DWORD *)v11;
      }
      uint64_t v11 = *v17;
    }
    while (*v17);
    if (v14 != v10 && v14[7] <= v13)
    {
      AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v25, *(llvm::Constant **)(v7 + 32));
      unsigned int v22 = v14[8];
      unsigned int v23 = v14[9];
      if (v25 < v22) {
        unsigned int v22 = v25;
      }
      if (v23 <= HIDWORD(v25)) {
        unsigned int v23 = HIDWORD(v25);
      }
      v14[8] = v22;
      void v14[9] = v23;
    }
    else
    {
LABEL_18:
      AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v25, *(llvm::Constant **)(v7 + 32));
      BOOL v18 = v25;
      BOOL v19 = *(uint64_t ***)(a1 + 16);
      uint64_t v20 = *(void *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 64);
      uint64_t v21 = (void *)(v20 + 24);
      if (*(_DWORD *)(v20 + 32) >= 0x41u) {
        uint64_t v21 = (void *)*v21;
      }
      LODWORD(v25) = *(_DWORD *)v21;
      std::__tree<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v19, v25, (int *)&v25)[4] = v18;
    }
  }
  return 1;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5B88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C5B88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5BD0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5BD0;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(long long **)(a1 + 8);
  uint64_t v5 = &unk_1F25C5B88;
  long long v6 = *v3;
  uint64_t v7 = &v5;
  iterateResourceUsers(v2, &v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](&v5);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5B40;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5B40;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v10 = operator new(0x20uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  void v10[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          BOOL v18 = operator new(8 * *(void *)&prime);
          BOOL v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          uint64_t v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            __int16 v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  void *v21 = *v27;
                  *__int16 v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  __int16 v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                uint64_t v21 = v27;
                __int16 v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v29 = *(void **)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    void *v10 = *v30;
LABEL_72:
    void *v30 = v10;
    goto LABEL_73;
  }
  void *v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    unint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = *(void *)v3[2];
    v6[0] = &unk_1F25C5AB0;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = iterateResourceUsers(v4, v6);
    return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v6);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

BOOL std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = *(void **)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v6, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::find<unsigned int>(v3, v6);
  if (v4)
  {
    llvm::ConstantExpr::getPointerCast();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v2);
  }
  return v4 != 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::find<unsigned int>(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (__n128 result = *v5; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5AB0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5AB0;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C5AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *a2;
    uint64_t v5 = *(void *)v3[2];
    v6[0] = &unk_1F25C5AB0;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = iterateResourceUsers(v4, v6);
    return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v6);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5A68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C5A68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::~__func()
{
}

void *AGCLLVMUserObject::setupTextureGlobalRasterOrderGroup(void *result, uint64_t a2, uint64_t a3)
{
  if (a2 != -1)
  {
    uint64_t v3 = *(void *)((char *)result + *(void *)(*result - 24) + 400);
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v3 + 176))(v3, a3, a2, 0, 0);
  }
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C5A20;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5A20;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5A20;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C59D8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C59D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C5990;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5990;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5990;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5948;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5948;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = *(void *)v3[2];
    v6[0] = &unk_1F25C5900;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = iterateResourceUsers(v4, v6);
    return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v6);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = ((void *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  uint64_t v5 = *(void *)(v4 + 32);
  if (v5) {
    BOOL v6 = v5 == *(void *)(v4 + 40) + 40;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (llvm::Instruction *)(v5 - 24);
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), v7);
  uint8x8_t v8 = (void *)((char *)v3 + *(void *)(*v3 - 24));
  __int16 v13 = 257;
  int v10 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v9);
  llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, v4, 0, (uint64_t)v12);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5900;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5900;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C58B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C58B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_1F25C5870;
    v8[1] = v6;
    void v8[3] = v8;
    v9[0] = &unk_1F25C4B38;
    v9[1] = v5;
    v9[2] = v8;
    void v9[3] = v9;
    char v7 = iterateResourceUsers(v4, v9);
    std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v9);
    *(unsigned char *)v3[1] = v7;
    return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v8);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  void v23[2] = *(uint64_t **)MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), *a2);
  uint64_t v4 = (llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40);
  uint64_t v5 = (llvm::Value *)*((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t Add = (uint64_t *)llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v21);
  uint8x8_t v8 = (void *)((char *)v3 + *(void *)(*v3 - 24));
  uint64_t v9 = (llvm::Type **)v3[247];
  v23[0] = (uint64_t *)llvm::ConstantInt::get();
  v23[1] = Add;
  __int16 v22 = 257;
  unint64_t v11 = AGCLLVMBuilder::tryDeducePointeeType(v9, v10);
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v8 + 5), (uint64_t)v11, (uint64_t *)v9, v23, 2, (uint64_t)v21);
  __int16 v20 = 257;
  BOOL v14 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v13);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v14, (uint64_t)GEP, 0, (uint64_t)v19);
  uint64_t v16 = (uint64_t)v3 + *(void *)(*v3 - 24) + 40;
  uint64_t v17 = *(void *)v2;
  __int16 v22 = 257;
  return llvm::IRBuilderBase::CreateCast(v16, 48, AlignedLoad, v17, (uint64_t)v21);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5870;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5870;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5828;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25C5828;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C57E0;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C57E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C57E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5798;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5798;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = *(void *)v3[2];
    v6[0] = &unk_1F25C5750;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = iterateResourceUsers(v4, v6);
    return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v6);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = ((void *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  uint64_t v5 = *(void *)(v4 + 32);
  if (v5) {
    BOOL v6 = v5 == *(void *)(v4 + 40) + 40;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (llvm::Instruction *)(v5 - 24);
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), v7);
  uint8x8_t v8 = (void *)((char *)v3 + *(void *)(*v3 - 24));
  __int16 v13 = 257;
  int v10 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v9);
  llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, v4, 0, (uint64_t)v12);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5750;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5750;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5708;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C5708;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_1F25C56C0;
    v8[1] = v6;
    void v8[3] = v8;
    v9[0] = &unk_1F25C4B38;
    v9[1] = v5;
    v9[2] = v8;
    void v9[3] = v9;
    char v7 = iterateResourceUsers(v4, v9);
    std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v9);
    *(unsigned char *)v3[1] = v7;
    return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v8);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  void v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), *a2);
  uint64_t v4 = (llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40);
  uint64_t v5 = (llvm::Value *)*((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v21 = 257;
  uint64_t Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v20);
  uint64_t v8 = llvm::ConstantInt::get();
  __int16 v22 = v24;
  uint64_t v23 = 0x200000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v22, 1uLL, v8);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v22, Add);
  uint64_t v9 = (char *)v3 + *(void *)(*v3 - 24);
  int v10 = (llvm::Type **)v3[167];
  unint64_t v11 = (uint64_t **)v22;
  uint64_t v12 = v23;
  __int16 v21 = 257;
  BOOL v14 = AGCLLVMBuilder::tryDeducePointeeType(v10, v13);
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)(v9 + 40), (uint64_t)v14, (uint64_t *)v10, v11, v12, (uint64_t)v20);
  uint64_t v16 = (uint64_t)v3 + *(void *)(*v3 - 24) + 40;
  uint64_t v17 = *(void *)v2;
  __int16 v21 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v16, 49, GEP, v17, (uint64_t)v20);
  if (v22 != v24) {
    free(v22);
  }
  return Cast;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C56C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C56C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25C5678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_1F25C5630;
    v8[1] = v6;
    void v8[3] = v8;
    v9[0] = &unk_1F25C4B38;
    v9[1] = v5;
    v9[2] = v8;
    void v9[3] = v9;
    char v7 = iterateResourceUsers(v4, v9);
    std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v9);
    *(unsigned char *)v3[1] = v7;
    return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v8);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), *a2);
  uint64_t v4 = (llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40);
  uint64_t v5 = (llvm::Value *)*((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v20 = 257;
  uint64_t Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v19);
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 - 24) + 40;
  uint64_t v9 = *(void *)v2;
  __int16 v20 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v8, 48, Add, v9, (uint64_t)v19);
  unint64_t v11 = (uint64_t *)((char *)v3 + *(void *)(*v3 - 24));
  uint64_t v12 = (llvm::Type **)AGCLLVMUserObject::buildSamplerArgumentPointer(v3, Cast, 3u);
  __int16 v20 = 257;
  BOOL v14 = AGCLLVMBuilder::tryDeducePointeeType(v12, v13);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v11 + 5, v14, (uint64_t)v12, 0, (uint64_t)v19);
  uint64_t v16 = (uint64_t)v3 + *(void *)(*v3 - 24) + 40;
  uint64_t v17 = *(void *)v2;
  __int16 v20 = 257;
  return llvm::IRBuilderBase::CreateCast(v16, 48, AlignedLoad, v17, (uint64_t)v19);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5630;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5630;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C55E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25C55E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C55A0;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C55A0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C55A0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5558;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5558;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C5510;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5510;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5510;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C54C8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C54C8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6>,void ()(llvm::Function *)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5480;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5480;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5438;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25C5438;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C53F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C53A8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C53A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_1F25C5318;
    v8[1] = v6;
    void v8[3] = v8;
    v9[0] = &unk_1F25C4B38;
    v9[1] = v5;
    v9[2] = v8;
    void v9[3] = v9;
    char v7 = iterateResourceUsers(v4, v9);
    std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v9);
    *(unsigned char *)v3[1] = v7;
    return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v8);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), *a2);
  uint64_t v4 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v5 = (llvm::Value *)*((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  uint64_t v6 = (llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40);
  __int16 v12 = 257;
  uint64_t Add = llvm::IRBuilderBase::CreateAdd(v6, v4, v5, (const llvm::Twine *)v11);
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 - 24) + 40;
  uint64_t v9 = *(void *)v2;
  __int16 v12 = 257;
  return llvm::IRBuilderBase::CreateCast(v8, 48, Add, v9, (uint64_t)v11);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5318;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5318;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5360;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25C5360;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_1F25C5318;
    v8[1] = v6;
    void v8[3] = v8;
    v9[0] = &unk_1F25C4B38;
    v9[1] = v5;
    v9[2] = v8;
    void v9[3] = v9;
    char v7 = iterateResourceUsers(v4, v9);
    std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v9);
    *(unsigned char *)v3[1] = v7;
    return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v8);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C52D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25C52D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C5288;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5288;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5288;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5240;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5240;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C51F8;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C51F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C51F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C51B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C51B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = **(void **)(a1 + 8);
  v5[0] = &unk_1F25C5168;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = ((void *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  uint64_t v5 = *(void *)(v4 + 32);
  if (v5) {
    BOOL v6 = v5 == *(void *)(v4 + 40) + 40;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (llvm::Instruction *)(v5 - 24);
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), v7);
  uint64_t v8 = (void *)((char *)v3 + *(void *)(*v3 - 24));
  __int16 v13 = 257;
  int v10 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v9);
  llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, v4, 0, (uint64_t)v12);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5168;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5168;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5120;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5120;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = (long long *)result[2];
    long long v7 = *v5;
    long long v8 = v5[1];
    long long v9 = v5[2];
    BOOL v6 = (char *)operator new(0x38uLL);
    *(void *)BOOL v6 = &unk_1F25C5090;
    *(_OWORD *)(v6 + 8) = v7;
    *(_OWORD *)(v6 + 24) = v8;
    *(_OWORD *)(v6 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v9;
    void v10[3] = v6;
    *(unsigned char *)v3[1] = iterateResourceUsers(v4, v10);
    return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v10);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = *(void **)(a1 + 32);
  if (!**(unsigned char **)(a1 + 8))
  {
    uint64_t v5 = ((void *)v3 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
    BOOL v6 = (void *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u) {
      BOOL v6 = (void *)*v6;
    }
    if (!*v6) {
      return 1;
    }
  }
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = ((void *)v3 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[8];
  long long v9 = (unsigned int *)(v8 + 24);
  unsigned int v10 = *(_DWORD *)(v8 + 32);
  unint64_t v11 = v9;
  if (v10 >= 0x41) {
    unint64_t v11 = *(unsigned int **)v9;
  }
  uint64_t v14 = *(void *)(v7 + 8);
  uint64_t v12 = v7 + 8;
  uint64_t v13 = v14;
  if (!v14) {
    return 0;
  }
  unsigned int v15 = *v11;
  uint64_t v16 = v12;
  do
  {
    unsigned int v17 = *(_DWORD *)(v13 + 32);
    BOOL v18 = v17 >= v15;
    if (v17 >= v15) {
      BOOL v19 = (uint64_t *)v13;
    }
    else {
      BOOL v19 = (uint64_t *)(v13 + 8);
    }
    if (v18) {
      uint64_t v16 = v13;
    }
    uint64_t v13 = *v19;
  }
  while (*v19);
  if (v16 == v12 || *(_DWORD *)(v16 + 32) > v15) {
    return 0;
  }
  __int16 v21 = *(uint64_t ***)(a1 + 24);
  if (v10 >= 0x41) {
    long long v9 = *(unsigned int **)v9;
  }
  LODWORD(v65[0]) = *v9;
  __int16 v22 = std::__tree<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v21, v65[0], (int *)v65);
  unsigned int v23 = *((_DWORD *)v22 + 9) - *((_DWORD *)v22 + 8) + 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v4 + *(void *)(*v4 - 24) + 40), v3);
  if (**(unsigned char **)(a1 + 40))
  {
    unint64_t v24 = (llvm::Constant *)llvm::PointerType::get();
    Nulluint64_t Value = llvm::Constant::getNullValue(v24, v25);
    uint64_t v27 = *(void *)((char *)v4 + *(void *)(*v4 - 24) + 400);
    v65[0] = **(void ***)(v16 + 40);
    uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v27 + 1344))();
    uint64_t v29 = (uint64_t)v4 + *(void *)(*v4 - 24) + 40;
    uint64_t v30 = *(void *)(v16 + 40);
    v64[0] = NullValue;
    v64[1] = v30;
    __int16 v67 = 257;
    unint64_t v31 = llvm::IRBuilderBase::CreateCall(v29, *(void *)(v28 + 24), v28, (uint64_t)v64, 2, (uint64_t)v65);
    uint64_t v32 = *(void *)((char *)v4 + *(void *)(*v4 - 24) + 232);
    __int16 v63 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v29, 47, (uint64_t)v31, v32, (uint64_t)&__p);
    if (v23 >= 2)
    {
      uint64_t v34 = (llvm::IRBuilderBase *)((char *)v4 + *(void *)(*v4 - 24) + 40);
      uint64_t v35 = (llvm::Value *)*((void *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
      __int16 v67 = 257;
      uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v34, Cast, v35, (const llvm::Twine *)v65);
    }
    uint64_t v36 = *(void *)(*v4 - 24);
    if (**(unsigned char **)(a1 + 48))
    {
      uint64_t v37 = (uint64_t)v4 + v36 + 32;
      uint64_t v38 = (llvm::Type **)v4[351];
      if (!v38)
      {
        std::string::basic_string[abi:nn180100]<0>(&__p, "agc.global_sampler_api_reference_array");
        unsigned int v39 = (*(uint64_t (**)(void))(**(void **)((char *)v4 + *(void *)(*v4 - 24) + 400) + 480))();
        uint64_t v40 = v39;
        llvm::ArrayType::get(*(llvm::ArrayType **)((char *)v4 + *(void *)(*v4 - 24) + 240), (llvm::Type *)v39);
        uint64_t v41 = llvm::User::operator new((llvm::User *)0x58);
        __int16 v67 = 260;
        v65[0] = &__p;
        uint64_t v42 = llvm::GlobalVariable::GlobalVariable();
        *(unsigned char *)(v42 + 80) |= 1u;
        v65[0] = v66;
        v65[1] = (void *)0x1C00000000;
        if (v39)
        {
          uint64_t v43 = 0;
          do
          {
            uint64_t v44 = llvm::ConstantInt::get();
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v65, v44);
            ++v43;
          }
          while (v40 != v43);
        }
        llvm::ConstantArray::get();
        llvm::GlobalVariable::setInitializer();
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 349), v41);
        if (v65[0] != v66) {
          free(v65[0]);
        }
        if (v62 < 0) {
          operator delete(__p);
        }
        uint64_t v38 = (llvm::Type **)v4[351];
      }
      std::string __p = (void *)llvm::ConstantInt::get();
      unsigned int v61 = Cast;
      __int16 v67 = 257;
      uint64_t v59 = AGCLLVMBuilder::tryDeducePointeeType(v38, v58);
      uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v37 + 8, (uint64_t)v59, (uint64_t *)v38, (uint64_t **)&__p, 2, (uint64_t)v65);
      uint64_t v49 = (uint64_t)v4 + *(void *)(*v4 - 24) + 40;
      uint64_t v50 = *(void *)v3;
      __int16 v67 = 257;
      uint64_t v51 = 49;
      goto LABEL_43;
    }
    uint64_t v49 = (uint64_t)v4 + v36 + 40;
    uint64_t v50 = *(void *)v3;
    __int16 v67 = 257;
    uint64_t v51 = 48;
  }
  else
  {
    uint64_t Cast = *(llvm::Value **)(v16 + 40);
    if (v23 >= 2)
    {
      int v45 = (llvm::Value *)*((void *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
      size_t v46 = (char *)v4 + *(void *)(*v4 - 24);
      std::string __p = (void *)llvm::ConstantInt::get();
      unsigned int v61 = v45;
      __int16 v67 = 257;
      size_t v48 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)Cast, v47);
      uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((uint64_t)(v46 + 40), (uint64_t)v48, (uint64_t *)Cast, (uint64_t **)&__p, 2, (uint64_t)v65);
    }
    if (!**(unsigned char **)(a1 + 48))
    {
      uint64_t v53 = llvm::PointerType::get();
      int v54 = (char *)v4 + *(void *)(*v4 - 24);
      unsigned int v55 = (llvm::Type *)*((void *)v54 + 29);
      uint64_t v56 = (uint64_t *)(v54 + 40);
      __int16 v67 = 257;
      uint64_t v57 = llvm::IRBuilderBase::CreateCast((uint64_t)(v54 + 40), 49, (uint64_t)Cast, v53, (uint64_t)v65);
      __int16 v63 = 257;
      uint64_t GEP = llvm::IRBuilderBase::CreateAlignedLoad(v56, v55, v57, 0, (uint64_t)&__p);
      uint64_t v49 = (uint64_t)v4 + *(void *)(*v4 - 24) + 40;
      uint64_t v50 = *(void *)v3;
      __int16 v67 = 257;
      uint64_t v51 = 48;
      goto LABEL_43;
    }
    uint64_t v49 = (uint64_t)v4 + *(void *)(*v4 - 24) + 40;
    uint64_t v50 = *(void *)v3;
    __int16 v67 = 257;
    uint64_t v51 = 49;
  }
  uint64_t GEP = (uint64_t)Cast;
LABEL_43:
  llvm::IRBuilderBase::CreateCast(v49, v51, GEP, v50, (uint64_t)v65);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v3);
  return 1;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5090;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1F25C5090;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = result;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C50D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C50D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    long long v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = (long long *)result[2];
    long long v7 = *v5;
    long long v8 = v5[1];
    long long v9 = v5[2];
    BOOL v6 = (char *)operator new(0x38uLL);
    *(void *)BOOL v6 = &unk_1F25C5090;
    *(_OWORD *)(v6 + 8) = v7;
    *(_OWORD *)(v6 + 24) = v8;
    *(_OWORD *)(v6 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v9;
    void v10[3] = v6;
    *(unsigned char *)v3[1] = iterateResourceUsers(v4, v10);
    return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v10);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C5048;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C5048;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  long long v3 = *(long long **)(a1 + 8);
  uint64_t v5 = &unk_1F25C4FB8;
  long long v6 = *v3;
  long long v7 = &v5;
  iterateResourceUsers(v2, &v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](&v5);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (**(unsigned char **)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(v3 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 96);
  uint64_t v5 = (void *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = (void *)*v5;
  }
  if (*v5)
  {
LABEL_5:
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = v3 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF);
    uint64_t v8 = *(void *)(v7 + 64);
    long long v9 = (void *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u) {
      long long v9 = (void *)*v9;
    }
    uint64_t v12 = *(void *)(v6 + 8);
    unsigned int v10 = (_DWORD *)(v6 + 8);
    uint64_t v11 = v12;
    if (!v12) {
      goto LABEL_18;
    }
    unsigned int v13 = *(_DWORD *)v9;
    uint64_t v14 = v10;
    do
    {
      unsigned int v15 = *(_DWORD *)(v11 + 28);
      BOOL v16 = v15 >= v13;
      if (v15 >= v13) {
        unsigned int v17 = (uint64_t *)v11;
      }
      else {
        unsigned int v17 = (uint64_t *)(v11 + 8);
      }
      if (v16) {
        uint64_t v14 = (_DWORD *)v11;
      }
      uint64_t v11 = *v17;
    }
    while (*v17);
    if (v14 != v10 && v14[7] <= v13)
    {
      AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v25, *(llvm::Constant **)(v7 + 32));
      unsigned int v22 = v14[8];
      unsigned int v23 = v14[9];
      if (v25 < v22) {
        unsigned int v22 = v25;
      }
      if (v23 <= HIDWORD(v25)) {
        unsigned int v23 = HIDWORD(v25);
      }
      v14[8] = v22;
      void v14[9] = v23;
    }
    else
    {
LABEL_18:
      AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v25, *(llvm::Constant **)(v7 + 32));
      BOOL v18 = v25;
      BOOL v19 = *(uint64_t ***)(a1 + 16);
      uint64_t v20 = *(void *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 64);
      __int16 v21 = (void *)(v20 + 24);
      if (*(_DWORD *)(v20 + 32) >= 0x41u) {
        __int16 v21 = (void *)*v21;
      }
      LODWORD(v25) = *(_DWORD *)v21;
      std::__tree<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v19, v25, (int *)&v25)[4] = v18;
    }
  }
  return 1;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4FB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C4FB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C5000;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C5000;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(long long **)(a1 + 8);
  uint64_t v5 = &unk_1F25C4FB8;
  long long v6 = *v3;
  uint64_t v7 = &v5;
  iterateResourceUsers(v2, &v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](&v5);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4F70;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C4F70;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = *(void *)v3[2];
    v6[0] = &unk_1F25C4EE0;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = iterateResourceUsers(v4, v6);
    return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v6);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

BOOL std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v6, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::find<unsigned int>(v3, v6);
  if (v4)
  {
    llvm::ConstantExpr::getPointerCast();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v2);
  }
  return v4 != 0;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4EE0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25C4EE0;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4F28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C4F28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = *(void *)v3[2];
    v6[0] = &unk_1F25C4EE0;
    v6[1] = v5;
    void v6[3] = v6;
    *(unsigned char *)v3[1] = iterateResourceUsers(v4, v6);
    return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v6);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4E98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25C4E98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::~__func()
{
}

uint64_t llvm::ValueMap<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  uint64_t v7 = &unk_1F25DA840;
  uint64_t v10 = a1;
  uint64_t v11 = 0;
  char v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  uint64_t v4 = v11;
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 8), v8);
    *(void *)(v4 + 32) = v10;
    *(_DWORD *)(v4 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 40;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x1CB79F270]((void *)v8, 48 * v8, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty(a1);
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -4096;
    uint64_t v22 = 0;
    uint64_t v18 = 0;
    BOOL v19 = &unk_1F25DA840;
    v16[0] = 2;
    v16[1] = 0;
    uint64_t v17 = -8192;
    if (v3)
    {
      uint64_t v9 = (char *)v4 + 24;
      uint64_t v10 = 48 * v3;
      do
      {
        uint64_t v11 = *(void *)v9;
        if (*(void *)v9 != v21 && v11 != v17)
        {
          uint64_t v23 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v23);
          uint64_t v13 = v23;
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v23 + 8), (void *)v9 - 2);
          *(void *)(v13 + 32) = *((void *)v9 + 1);
          *(_DWORD *)(v13 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *((_DWORD *)v9 + 4);
          ++*(_DWORD *)(a1 + 8);
          uint64_t v11 = *(void *)v9;
        }
        if (v11 != -8192 && v11 != -4096 && v11 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 16));
        }
        v9 += 48;
        v10 -= 48;
      }
      while (v10);
      if (v17 != -8192 && v17 != -4096 && v17) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
      }
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    return llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty(a1);
  }
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v12, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v14 = v4;
  BOOL v19 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v13, &v19);
  if (result) {
    uint64_t v6 = (uint64_t)v19;
  }
  else {
    uint64_t v6 = *(void *)v4 + 48 * v4[2].u32[0];
  }
  int v7 = v14;
  if (*(void *)v14 + 48 * v14[2].u32[0] != v6)
  {
    int v8 = *(_DWORD *)(v6 + 40);
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -8192;
    uint64_t v22 = 0;
    BOOL v19 = &unk_1F25DA840;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 8), v20);
    uint64_t v9 = v21;
    *(void *)(v6 + 32) = v22;
    if (v9 != -8192 && v9 != -4096 && v9) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    uint64_t v10 = (uint64_t)v14;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v15, a2);
    unsigned int v15 = &unk_1F25DA840;
    uint64_t v18 = v10;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v20, (LODWORD(v16[0]) >> 1) & 3, v16);
    BOOL v19 = &unk_1F25DA840;
    uint64_t v22 = v18;
    int v23 = v8;
    uint64_t v24 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)v10, *(_DWORD *)(v10 + 16), v21, &v24);
    if ((result & 1) == 0)
    {
      uint64_t v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(v10, (uint64_t)&v19, v24);
      uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v11 + 8), v20);
      *(void *)(v11 + 32) = v22;
      *(_DWORD *)(v11 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v23;
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    if (v17 != -8192 && v17 != -4096 && v17) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
    }
  }
  if (v13 != -8192 && v13 != -4096)
  {
    if (v13) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
    }
  }
  return result;
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v9 = v2;
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if (result)
  {
    uint64_t v4 = v10;
    v11[0] = 2;
    v11[1] = 0;
    uint64_t v12 = -8192;
    uint64_t v13 = 0;
    uint64_t v10 = &unk_1F25DA840;
    uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v11);
    uint64_t v5 = v12;
    v4[4] = v13;
    if (v5 != -8192 && v5 != -4096 && v5) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C4E50;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4E50;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25C4E50;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4E08;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25C4E08;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::~__func()
{
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C4DC0;
  v5[1] = v3;
  void v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  uint64_t v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    uint64_t v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4DC0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25C4DC0;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C4D78;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25C4D78;
  result[1] = v3;
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::~__func()
{
}

void *llvm::DenseMap<llvm::Type *,std::pair<BOOL,BOOL>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::pair<BOOL,BOOL>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (void *)MEMORY[0x1CB79F270](16 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    uint64_t v12 = (void *)(16 * v3);
    if (v3)
    {
      uint64_t v13 = 16 * v3;
      uint64_t v14 = v4;
      do
      {
        uint64_t v15 = *(void *)v14;
        if ((*(void *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          BOOL v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(void *)a1, *(_DWORD *)(a1 + 16), v15, &v19);
          BOOL v16 = v19;
          *BOOL v19 = *(void *)v14;
          *((_WORD *)v16 + 4) = *((_WORD *)v14 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        uint64_t v14 = (llvm *)((char *)v14 + 16);
        v13 -= 16;
      }
      while (v13);
    }
    return (void *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v17 = *(unsigned int *)(a1 + 16);
    if (v17)
    {
      uint64_t v18 = 16 * v17;
      do
      {
        *uint64_t result = -4096;
        result += 2;
        v18 -= 16;
      }
      while (v18);
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,unsigned int>>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(32 * a1);
}

uint64_t std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

long long *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(long long *result, long long *a2, long long *a3)
{
  uint64_t v3 = (int *)a2 + 7;
  unsigned int v4 = *((_DWORD *)a2 + 7);
  unint64_t v5 = (int *)result + 7;
  unsigned int v6 = *((_DWORD *)a3 + 7);
  if (v4 > *((_DWORD *)result + 7))
  {
    if (v6 <= v4)
    {
      uint64_t v18 = *((void *)result + 2);
      long long v19 = *result;
      uint64_t v20 = *((void *)a2 + 2);
      *uint64_t result = *a2;
      *((void *)result + 2) = v20;
      *a2 = v19;
      *((void *)a2 + 2) = v18;
      int v7 = (int *)a2 + 6;
      int v21 = *((_DWORD *)result + 6);
      *((_DWORD *)result + 6) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v21;
      LODWORD(v18) = *((_DWORD *)result + 7);
      *((_DWORD *)result + 7) = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + 7) = v18;
      if (*((_DWORD *)a3 + 7) <= v18) {
        return result;
      }
      uint64_t v22 = *((void *)a2 + 2);
      long long v23 = *a2;
      uint64_t v24 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v24;
      *a3 = v23;
      *((void *)a3 + 2) = v22;
      uint64_t v11 = (int *)a3 + 6;
      unint64_t v5 = (int *)a2 + 7;
    }
    else
    {
      int v7 = (int *)result + 6;
      uint64_t v8 = *((void *)result + 2);
      long long v9 = *result;
      uint64_t v10 = *((void *)a3 + 2);
      *uint64_t result = *a3;
      *((void *)result + 2) = v10;
      *a3 = v9;
      *((void *)a3 + 2) = v8;
      uint64_t v11 = (int *)a3 + 6;
    }
    uint64_t v3 = (int *)a3 + 7;
    goto LABEL_10;
  }
  if (v6 > v4)
  {
    uint64_t v12 = *((void *)a2 + 2);
    long long v13 = *a2;
    uint64_t v14 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v14;
    *a3 = v13;
    *((void *)a3 + 2) = v12;
    uint64_t v11 = (int *)a2 + 6;
    LODWORD(v12) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = *((_DWORD *)a3 + 7);
    *((_DWORD *)a3 + 7) = v12;
    if (*((_DWORD *)a2 + 7) > *v5)
    {
      uint64_t v15 = *((void *)result + 2);
      long long v16 = *result;
      uint64_t v17 = *((void *)a2 + 2);
      *uint64_t result = *a2;
      *((void *)result + 2) = v17;
      *a2 = v16;
      *((void *)a2 + 2) = v15;
      int v7 = (int *)result + 6;
LABEL_10:
      int v25 = *v7;
      *int v7 = *v11;
      int *v11 = v25;
      int v26 = *v5;
      int *v5 = *v3;
      int *v3 = v26;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(_DWORD *)(a4 + 28) > *(_DWORD *)(a3 + 28))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 28);
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(a4 + 28);
    *(_DWORD *)(a4 + 28) = v9;
    if (*(_DWORD *)(a3 + 28) > *(_DWORD *)(a2 + 28))
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
      *(_DWORD *)(a3 + 28) = v11;
      if (*(_DWORD *)(a2 + 28) > *(_DWORD *)(a1 + 28))
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
        *(_DWORD *)(a2 + 28) = v13;
      }
    }
  }
  return result;
}

__n128 std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(uint64_t a1, __n128 *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  __n128 result = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  *(__n128 *)a1 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  *(_DWORD *)(a1 + 24) = a2[1].n128_u32[2];
  *(_DWORD *)(a1 + 28) = a2[1].n128_u32[3];
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 4) > *(_DWORD *)(a1 + 28))
      {
        uint64_t v6 = *(void *)(a1 + 16);
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(void *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 32) = v7;
        *(void *)(a2 - 16) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((long long *)a1, (long long *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      long long v19 = (long long *)(a1 + 32);
      uint64_t v20 = (long long *)(a1 + 64);
      int v21 = (long long *)(a1 + 96);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(a1, a1 + 32, a1 + 64, a1 + 96);
      if (*(_DWORD *)(a2 - 4) <= *(_DWORD *)(a1 + 124)) {
        return 1;
      }
      uint64_t v22 = *(void *)(a1 + 112);
      long long v23 = *v21;
      uint64_t v24 = *(void *)(a2 - 16);
      long long *v21 = *(_OWORD *)(a2 - 32);
      *(void *)(a1 + 112) = v24;
      *(_OWORD *)(a2 - 32) = v23;
      *(void *)(a2 - 16) = v22;
      LODWORD(v22) = *(_DWORD *)(a1 + 120);
      *(_DWORD *)(a1 + 12llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 8) = v22;
      LODWORD(v22) = *(_DWORD *)(a1 + 124);
      *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = v22;
      unsigned int v25 = *(_DWORD *)(a1 + 124);
      unsigned int v26 = *(_DWORD *)(a1 + 92);
      if (v25 <= v26) {
        return 1;
      }
      uint64_t v27 = *(void *)(a1 + 80);
      long long v28 = *v20;
      *uint64_t v20 = *v21;
      *(void *)(a1 + 8llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(void *)(a1 + 112);
      long long *v21 = v28;
      *(void *)(a1 + 112) = v27;
      int v29 = *(_DWORD *)(a1 + 88);
      int v30 = *(_DWORD *)(a1 + 120);
      *(_DWORD *)(a1 + 88) = v30;
      *(_DWORD *)(a1 + 92) = v25;
      *(_DWORD *)(a1 + 12llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v29;
      *(_DWORD *)(a1 + 124) = v26;
      unsigned int v31 = *(_DWORD *)(a1 + 60);
      if (v25 <= v31) {
        return 1;
      }
      uint64_t v32 = *(void *)(a1 + 48);
      long long v33 = *v19;
      *long long v19 = *v20;
      *(void *)(a1 + 48) = *(void *)(a1 + 80);
      *uint64_t v20 = v33;
      *(void *)(a1 + 8llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v32;
      LODWORD(v32) = *(_DWORD *)(a1 + 56);
      *(_DWORD *)(a1 + 56) = v30;
      *(_DWORD *)(a1 + 6llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v25;
      *(_DWORD *)(a1 + 88) = v32;
      *(_DWORD *)(a1 + 92) = v31;
      unsigned int v34 = *(_DWORD *)(a1 + 28);
      if (v25 <= v34) {
        return 1;
      }
      uint64_t v35 = *(void *)(a1 + 16);
      long long v36 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *v19;
      *(void *)(a1 + 16) = *(void *)(a1 + 48);
      *long long v19 = v36;
      *(void *)(a1 + 48) = v35;
      LODWORD(v35) = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = v30;
      *(_DWORD *)(a1 + 28) = v25;
      BOOL result = 1;
      *(_DWORD *)(a1 + 56) = v35;
      *(_DWORD *)(a1 + 6llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v34;
      return result;
    default:
      uint64_t v9 = a1 + 64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v10 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unsigned int v13 = *(_DWORD *)(v10 + 28);
    if (v13 > *(_DWORD *)(v9 + 28))
    {
      uint64_t v37 = *(void *)v10;
      *(void *)uint64_t v38 = *(void *)(v10 + 8);
      *(void *)&v38[7] = *(void *)(v10 + 15);
      char v14 = *(unsigned char *)(v10 + 23);
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)uint64_t v10 = 0;
      int v15 = *(_DWORD *)(v10 + 24);
      uint64_t v16 = v11;
      while (1)
      {
        std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1 + v16 + 96, (__n128 *)(a1 + v16 + 64));
        if (v16 == -64) {
          break;
        }
        unsigned int v17 = *(_DWORD *)(a1 + v16 + 60);
        v16 -= 32;
        if (v13 <= v17)
        {
          uint64_t v18 = a1 + v16 + 96;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      if (*(char *)(v18 + 23) < 0) {
        operator delete(*(void **)v18);
      }
      *(void *)uint64_t v18 = v37;
      *(void *)(v18 + 8) = *(void *)v38;
      *(void *)(v18 + 15) = *(void *)&v38[7];
      *(unsigned char *)(v18 + 23) = v14;
      *(_DWORD *)(v18 + 24) = v15;
      *(_DWORD *)(v18 + 28) = v13;
      if (++v12 == 8) {
        return v10 + 32 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 32;
    v10 += 32;
    if (v10 == a2) {
      return 1;
    }
  }
}

void AGCLLVMUserObject::createTLSIntrinsic(AGCLLVMUserObject *this, const char *a2, const char *a3)
{
  uint64_t v6 = *(llvm::Constant **)((char *)this + *(void *)(*(void *)this - 24) + 232);
  char v7 = 1;
  uint64_t v8 = llvm::User::operator new((llvm::User *)0x58);
  llvm::Constant::getNullValue(v6, v9);
  HIBYTE(v37) = 1;
  if (*a2)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    char v7 = 3;
  }
  LOBYTE(v37) = v7;
  uint64_t v10 = llvm::GlobalVariable::GlobalVariable();
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(v8 + 32) & 0xFFFFE3FF | 0x400;
  {
    if (v10)
    {
      AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map = 0;
      *(void *)&dword_1EA613FE0 = 0;
      qword_1EA613FE8 = 0x2000000000;
      __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map, &dword_1CAC02000);
    }
  }
  if (dword_1EA613FE4)
  {
    if (!a3) {
      goto LABEL_25;
    }
    goto LABEL_6;
  }
  AGCLLVMUserObject::getBuiltinArgMap((AGCLLVMUserObject *)v10);
  if (dword_1EBD0EA60)
  {
    for (unsigned int i = (uint64_t *)AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    unsigned int i = (uint64_t *)AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map;
  }
  uint64_t v13 = AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map + 8 * dword_1EBD0EA60;
  if (i != (uint64_t *)v13)
  {
    uint64_t v14 = *i;
    do
    {
      uint64_t v15 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map, (const void *)(v14 + 32), *(void *)v14);
      char v16 = *(unsigned char *)(v14 + 24);
      *(_OWORD *)(v15 + 8) = *(_OWORD *)(v14 + 8);
      *(unsigned char *)(v15 + 24) = v16;
      do
      {
        uint64_t v17 = i[1];
        ++i;
        uint64_t v14 = v17;
        if (v17) {
          BOOL v18 = v14 == -8;
        }
        else {
          BOOL v18 = 1;
        }
      }
      while (v18);
    }
    while (i != (uint64_t *)v13);
  }
  uint64_t v19 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map, "air.patch_id", 0xCuLL);
  *(void *)(v19 + 8) = "air.get_patch_id";
  *(void *)(v19 + 16) = 16;
  *(unsigned char *)(v19 + 24) = 1;
  uint64_t v20 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map, "air.amplification_id", 0x14uLL);
  *(void *)(v20 + 8) = "air.get_amplification_id";
  *(void *)(v20 + 16) = 24;
  *(unsigned char *)(v20 + 24) = 1;
  uint64_t v21 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map, "air.render_target_array_index", 0x1DuLL);
  *(void *)(v21 + 8) = "air.get_render_target_array_index";
  *(void *)(v21 + 16) = 33;
  *(unsigned char *)(v21 + 24) = 1;
  if (a3) {
LABEL_6:
  }
    strlen(a3);
LABEL_25:
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t v23 = Key;
  if (Key == -1) {
    uint64_t v23 = dword_1EA613FE0;
  }
  uint64_t v24 = *(void *)(AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map
                  + 8 * v23);
  unsigned int v25 = *(void **)(v24 + 8);
  if (v25) {
    std::string::basic_string[abi:nn180100](&__dst, v25, *(void *)(v24 + 16));
  }
  else {
    memset(&__dst, 0, sizeof(__dst));
  }
  if (v6 == *(llvm::Constant **)((char *)this + *(void *)(*(void *)this - 24) + 232)) {
    unsigned int v26 = ".i32";
  }
  else {
    unsigned int v26 = ".i16";
  }
  uint64_t v27 = std::string::append(&__dst, v26);
  std::string __p = *v27;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v29 = *((void *)this + 472);
  if (!v29)
  {
    uint64_t v30 = *(void *)(*((void *)this + 22) + 80);
    if (v30) {
      uint64_t v29 = v30 - 24;
    }
    else {
      uint64_t v29 = 0;
    }
  }
  uint64_t v31 = *(void *)(v29 + 40);
  if (v31) {
    uint64_t v32 = (llvm::Instruction *)(v31 - 24);
  }
  else {
    uint64_t v32 = 0;
  }
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v32);
  long long v33 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v37 = 257;
  unsigned int v34 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t)(v33 + 40), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)&__dst);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v34, v8, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  unsigned int i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      uint64_t v8 = i[1];
      ++i;
      uint64_t v7 = v8;
    }
    return i;
  }
  uint64_t v10 = MEMORY[0x1CB79F270](a3 + 33, 8);
  uint64_t v11 = (void *)v10;
  uint64_t v12 = v10 + 32;
  if (a3) {
    memcpy((void *)(v10 + 32), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  v11[1] = 0;
  void v11[2] = 0;
  void *v11 = a3;
  *unsigned int i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (unsigned int i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        unint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 33));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

llvm::Value *AGCLLVMUserObject::replaceSimdgroupAtomicWaitNotify(void)::$_0::operator()(void *a1)
{
  void v15[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  uint64_t v3 = *(void *)(a1[22] + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 48);
  if (v5) {
    uint64_t v6 = (llvm::Instruction *)(v5 - 24);
  }
  else {
    uint64_t v6 = 0;
  }
  llvm::IRBuilderBase::SetInsertPoint(v2, v6);
  uint64_t v7 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v8 = (uint64_t)(v7 + 32);
  uint64_t v9 = *((void *)v7 + 50);
  uint64_t v10 = *(void *)(v9 + 936);
  if (v10) {
    size_t v11 = strlen(*(const char **)(v9 + 936));
  }
  else {
    size_t v11 = 0;
  }
  uint64_t v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v8, v10, v11, *(void *)(v8 + 144), *(void *)(v8 + 192), *(void *)(v8 + 192));
  v15[0] = llvm::ConstantInt::get();
  v15[1] = llvm::ConstantInt::get();
  unsigned char v14[16] = 257;
  return llvm::IRBuilderBase::CreateCall(v8 + 8, *(void *)(v12 + 24), v12, (uint64_t)v15, 2, (uint64_t)v14);
}

uint64_t AGCLLVMUserObject::SimdgroupAtomicWaitNotify::foundBarrierDominatingAllSideEffectsAndExternalCalls(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8))
  {
    unsigned int v2 = *(_DWORD *)(a2 + 16);
    if (v2)
    {
      uint64_t v3 = 296 * v2;
      uint64_t v4 = *(void **)a2;
      while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 37;
        v3 -= 296;
        if (!v3) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      uint64_t v4 = *(void **)a2;
    }
    if (v4 != (void *)(*(void *)a2 + 296 * v2)) {
      llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>();
    }
  }
LABEL_10:
  llvm::deallocate_buffer(0, 0);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::destroyAll(0, 0);
  llvm::deallocate_buffer(0, 0);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::destroyAll(0, 0);
  llvm::deallocate_buffer(0, 0);
  return 1;
}

double llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::LookupBucketFor<llvm::Function const*>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
  uint64_t v6 = v10;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::grow(a1, v8);
    uint64_t v10 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::LookupBucketFor<llvm::Function const*>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
    uint64_t v6 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)v6 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t v9 = *a2;
  *(_OWORD *)(v6 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = 0;
  *(void *)uint64_t v6 = v9;
  *(void *)(v6 + 8) = v6 + 24;
  *(void *)&double result = 0x100000000;
  *(void *)(v6 + 16) = 0x100000000;
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
  *(_DWORD *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = 0;
  *(unsigned char *)(v6 + 72) = 0;
  return result;
}

double llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  uint64_t v6 = v9;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::grow(a1, v8);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    uint64_t v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t v6 = *a2;
  v6[1] = (uint64_t)(v6 + 3);
  *(void *)&double result = 0x400000000;
  v6[2] = 0x400000000;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 56 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 56 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::lookup(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v9 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::LookupBucketFor<llvm::Function const*>(a2, a3, a4, &v9);
  if (result)
  {
    uint64_t v6 = v9;
    *(void *)a1 = a1 + 16;
    *(void *)(a1 + 8) = 0x400000000;
    if (*(_DWORD *)(v6 + 16)) {
      llvm::SmallVectorImpl<llvm::Value *>::operator=(a1, v6 + 8);
    }
    *(void *)(a1 + 48) = a1 + 64;
    *(void *)(a1 + 56) = 0x400000000;
    if (*(_DWORD *)(v6 + 64)) {
      llvm::SmallVectorImpl<llvm::Value *>::operator=(a1 + 48, v6 + 56);
    }
    *(void *)(a1 + 96) = a1 + 112;
    *(void *)(a1 + 104) = 0x400000000;
    if (*(_DWORD *)(v6 + 112)) {
      llvm::SmallVectorImpl<llvm::Value *>::operator=(a1 + 96, v6 + 104);
    }
    *(void *)(a1 + 144) = a1 + 160;
    *(void *)(a1 + 152) = 0x400000000;
    if (*(_DWORD *)(v6 + 160)) {
      llvm::SmallVectorImpl<llvm::Value *>::operator=(a1 + 144, v6 + 152);
    }
    *(void *)(a1 + 192) = a1 + 208;
    uint64_t result = a1 + 192;
    *(void *)(a1 + 20llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0x400000000;
    if (*(_DWORD *)(v6 + 208)) {
      uint64_t result = llvm::SmallVectorImpl<llvm::Value *>::operator=(result, v6 + 200);
    }
    *(void *)(a1 + 24llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = a1 + 256;
    uint64_t v7 = (void **)(a1 + 240);
    *(void *)(a1 + 248) = 0x400000000;
    unsigned int v8 = *(_DWORD *)(v6 + 256);
    if (v8 && v7 != (void **)(v6 + 248))
    {
      if (v8 >= 5)
      {
        *(_DWORD *)(a1 + 248) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t result = (uint64_t)memcpy(*v7, *(const void **)(v6 + 248), 8 * *(unsigned int *)(v6 + 256));
      *(_DWORD *)(a1 + 248) = v8;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 24llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 8llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 16llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)a1 = a1 + 16;
    *(void *)(a1 + 8) = 0x400000000;
    *(void *)(a1 + 48) = a1 + 64;
    *(_DWORD *)(a1 + 6llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 4;
    *(void *)(a1 + 96) = a1 + 112;
    *(_DWORD *)(a1 + 108) = 4;
    *(void *)(a1 + 144) = a1 + 160;
    *(_DWORD *)(a1 + 156) = 4;
    *(void *)(a1 + 192) = a1 + 208;
    *(_DWORD *)(a1 + 204) = 4;
    *(void *)(a1 + 24llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = a1 + 256;
    *(_DWORD *)(a1 + 252) = 4;
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::destroyAll(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = 56 * a2;
    uint64_t v3 = (void *)(a1 + 24);
    do
    {
      if ((*(v3 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v4 = (void *)*(v3 - 2);
        if (v3 != v4) {
          free(v4);
        }
      }
      v3 += 7;
      v2 -= 56;
    }
    while (v2);
  }
}

void *llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = MEMORY[0x1CB79F270]((void *)v8, 56 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 56 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
    if (v3)
    {
      BOOL v12 = (char *)v4 + 24;
      uint64_t v13 = 56 * v3;
      do
      {
        uint64_t v14 = *((void *)v12 - 3);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v20);
          uint64_t v15 = v20;
          *uint64_t v20 = *((void *)v12 - 3);
          void v15[2] = 0x400000000;
          v15[1] = v15 + 3;
          uint64_t v16 = (uint64_t)(v15 + 1);
          if (*((_DWORD *)v12 - 2)) {
            llvm::SmallVectorImpl<llvm::Value *>::operator=(v16, (uint64_t)(v12 - 16));
          }
          ++*(_DWORD *)(a1 + 8);
          uint64_t v17 = (char *)*((void *)v12 - 2);
          if (v12 != v17) {
            free(v17);
          }
        }
        v12 += 56;
        v13 -= 56;
      }
      while (v13);
    }
    return (void *)llvm::deallocate_buffer(v4, (void *)(56 * v3));
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v18 = *(unsigned int *)(a1 + 16);
    if (v18)
    {
      uint64_t v19 = 56 * v18;
      do
      {
        *uint64_t result = -4096;
        result += 7;
        v19 -= 56;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::LookupBucketFor<llvm::Function const*>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 80 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 80 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = MEMORY[0x1CB79F270]((void *)v8, 80 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 80 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 10;
        v11 -= 80;
      }
      while (v11);
    }
    if (v3)
    {
      BOOL v12 = (char *)v4 + 24;
      uint64_t v13 = 80 * v3;
      do
      {
        uint64_t v14 = *((void *)v12 - 3);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::LookupBucketFor<llvm::Function const*>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v17);
          *uint64_t v17 = *((void *)v12 - 3);
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::DominatorTreeBase();
        }
        v12 += 80;
        v13 -= 80;
      }
      while (v13);
    }
    return (void *)llvm::deallocate_buffer(v4, (void *)(80 * v3));
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = 80 * v15;
      do
      {
        *uint64_t result = -4096;
        result += 10;
        v16 -= 80;
      }
      while (v16);
    }
  }
  return result;
}

BOOL AGCLLVMUserObject::isAllocaStoreForDebugger(char a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 0;
  if (a3)
  {
    if (a1)
    {
      BOOL result = 0;
      if (a2)
      {
        if (*(unsigned char *)(a2 + 16) == 61)
        {
          uint64_t v5 = **(void **)(a2 - 32);
          unsigned int v6 = *(_DWORD *)(v5 + 8);
          if ((v6 & 0xFE) == 0x12) {
            unsigned int v6 = *(_DWORD *)(**(void **)(v5 + 16) + 8);
          }
          return v6 <= 0xFF && *(void *)(a2 - 64) == a3;
        }
      }
    }
  }
  return result;
}

BOOL AGCLLVMUserObject::isVoidPointerUseInIntrinsic(AGCLLVMUserObject *a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (**(void **)(*a2 + 16) != *(void *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 216))
  {
    if (v2)
    {
      while (1)
      {
        int v4 = *(llvm::Value **)(v2 + 24);
        if (*((unsigned char *)v4 + 16) != 77 || (AGCLLVMUserObject::isVoidPointerUseInIntrinsic(a1, v4) & 1) == 0) {
          break;
        }
        uint64_t v2 = *(void *)(v2 + 8);
        if (!v2) {
          return 1;
        }
      }
      return 0;
    }
    return 1;
  }
  if (!v2) {
    return 1;
  }
  while (1)
  {
    int v5 = *(unsigned __int8 *)(*(void *)(v2 + 24) + 16);
    BOOL result = v5 == 84;
    if (v5 != 84) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 1;
    }
  }
  return result;
}

uint64_t AGCLLVMUserObject::IsPhiInputsEquivalent(AGCLLVMUserObject *this, llvm::PHINode *a2)
{
  unsigned int v24[8] = *MEMORY[0x1E4F143B8];
  uint64_t v22 = v24;
  uint64_t v23 = 0x800000000;
  uint64_t v17 = v21;
  uint64_t v18 = v21;
  uint64_t v19 = 8;
  int v20 = 0;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v22, (uint64_t)this);
  unsigned int v2 = v23;
  if (v23)
  {
    uint64_t v3 = 0;
    do
    {
      int v4 = (_DWORD *)*((void *)v22 + v2 - 1);
      LODWORD(v23) = v2 - 1;
      llvm::SmallPtrSetImplBase::insert_imp((llvm::SmallPtrSetImplBase *)&v17, v4);
      int v5 = v4[5];
      if ((v5 & 0x40000000) != 0)
      {
        int v7 = (const void **)*((void *)v4 - 1);
        uint64_t v6 = v5 & 0x7FFFFFF;
        if (v6)
        {
LABEL_7:
          uint64_t v8 = &v7[4 * v6];
          do
          {
            uint64_t v9 = (uint64_t)*v7;
            unsigned int v10 = *((unsigned __int8 *)*v7 + 16);
            if (*v7 && v10 == 83)
            {
              imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)&v17, *v7);
              if (v18 == v17) {
                BOOL v12 = (uint64_t *)((char *)&v19 + 4);
              }
              else {
                BOOL v12 = &v19;
              }
              uint64_t v13 = (const void **)&v18[8 * *(unsigned int *)v12];
              if (v13 != imp)
              {
                while ((unint64_t)*imp >= 0xFFFFFFFFFFFFFFFELL)
                {
                  if (++imp == v13) {
                    goto LABEL_26;
                  }
                }
              }
              if (v13 == imp) {
LABEL_26:
              }
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v22, v9);
            }
            else
            {
              if (v9) {
                BOOL v14 = v10 >= 0x1C;
              }
              else {
                BOOL v14 = 0;
              }
              if (v14)
              {
                if (v3)
                {
                  if (!llvm::Instruction::isIdenticalTo((llvm::Instruction *)*v7, v3))
                  {
                    uint64_t v15 = 0;
                    goto LABEL_31;
                  }
                }
                else
                {
                  uint64_t v3 = (const llvm::Instruction *)*v7;
                }
              }
            }
            v7 += 4;
          }
          while (v7 != v8);
        }
      }
      else
      {
        uint64_t v6 = v5 & 0x7FFFFFF;
        int v7 = (const void **)&v4[-8 * v6];
        if (v6) {
          goto LABEL_7;
        }
      }
      unsigned int v2 = v23;
    }
    while (v23);
  }
  uint64_t v15 = 1;
LABEL_31:
  if (v18 != v17) {
    free(v18);
  }
  if (v22 != v24) {
    free(v22);
  }
  return v15;
}

uint64_t AGCLLVMUserObject::replaceArgumentBufferAccesses(AGCLLVMUserObject::IndirectArgumentBufferInfo const*)::$_0::operator()(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v7 = *(void **)(a1 + 8);
  unint64_t v8 = a2;
  unint64_t v9 = v7[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = a2;
      if (v9 <= a2) {
        unint64_t v11 = a2 % v9;
      }
    }
    else
    {
      unint64_t v11 = (v9 - 1) & a2;
    }
    BOOL v12 = *(void **)(*v7 + 8 * v11);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == a2)
          {
            if (*((_DWORD *)v13 + 4) == a2) {
              return v13[3];
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v11) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = *(AGCLLVMUserObject **)a1;
  uint64_t v16 = *(void *)(**(void **)a1 - 24) + *(void *)a1;
  long long v55 = *(_OWORD *)(v16 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v56, (llvm::IRBuilderBase *)(v16 + 40));
  int v57 = *(_DWORD *)(v16 + 136);
  uint64_t v17 = *(void *)(*((void *)v15 + 22) + 80);
  if (v17) {
    uint64_t v18 = v17 - 24;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(v18 + 40);
  if (v19) {
    int v20 = (llvm::Instruction *)(v19 - 24);
  }
  else {
    int v20 = 0;
  }
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v15 + *(void *)(*(void *)v15 - 24) + 40), v20);
  uint64_t v21 = (unsigned int *)(a3 + 272);
  if (!*(unsigned char *)(a3 + 276)) {
    uint64_t v21 = (unsigned int *)&RASTER_ORDER_GROUP_NONE;
  }
  uint64_t v22 = AGCLLVMUserObject::setupBufferArgumentData(v15, *(void *)(a3 + 264), a2, **(_DWORD **)(a1 + 16), *(_DWORD *)(a3 + 260), *(unsigned char *)(a3 + 256), *v21);
  uint64_t v23 = *(float **)(a1 + 8);
  unint64_t v24 = *((void *)v23 + 1);
  if (v24)
  {
    uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v24 <= v8) {
        unint64_t v3 = v8 % v24;
      }
    }
    else
    {
      unint64_t v3 = (v24 - 1) & v8;
    }
    unsigned int v26 = *(void **)(*(void *)v23 + 8 * v3);
    if (v26)
    {
      uint64_t v13 = (void *)*v26;
      if (*v26)
      {
        do
        {
          unint64_t v27 = v13[1];
          if (v27 == v8)
          {
            if (*((_DWORD *)v13 + 4) == a2) {
              goto LABEL_98;
            }
          }
          else
          {
            if (v25.u32[0] > 1uLL)
            {
              if (v27 >= v24) {
                v27 %= v24;
              }
            }
            else
            {
              v27 &= v24 - 1;
            }
            if (v27 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x20uLL);
  *uint64_t v13 = 0;
  v13[1] = v8;
  *((_DWORD *)v13 + 4) = a2;
  v13[3] = v22;
  float v28 = (float)(unint64_t)(*((void *)v23 + 3) + 1);
  float v29 = v23[8];
  if (!v24 || (float)(v29 * (float)v24) < v28)
  {
    BOOL v30 = 1;
    if (v24 >= 3) {
      BOOL v30 = (v24 & (v24 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v24);
    unint64_t v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32) {
      int8x8_t prime = (int8x8_t)v32;
    }
    else {
      int8x8_t prime = (int8x8_t)v31;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v24 = *((void *)v23 + 1);
    }
    if (*(void *)&prime > v24) {
      goto LABEL_54;
    }
    if (*(void *)&prime < v24)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*((unint64_t *)v23 + 3) / v23[8]);
      if (v24 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (*(void *)&prime <= v40) {
        int8x8_t prime = (int8x8_t)v40;
      }
      if (*(void *)&prime >= v24)
      {
        unint64_t v24 = *((void *)v23 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_54:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unsigned int v34 = operator new(8 * *(void *)&prime);
          uint64_t v35 = *(void **)v23;
          *(void *)uint64_t v23 = v34;
          if (v35) {
            operator delete(v35);
          }
          uint64_t v36 = 0;
          *((int8x8_t *)v23 + 1) = prime;
          do
            *(void *)(*(void *)v23 + 8 * v36++) = 0;
          while (*(void *)&prime != v36);
          __int16 v37 = (void *)*((void *)v23 + 2);
          if (v37)
          {
            unint64_t v38 = v37[1];
            uint8x8_t v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(void *)&prime) {
                v38 %= *(void *)&prime;
              }
            }
            else
            {
              v38 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)v23 + 8 * v38) = v23 + 4;
            uint64_t v43 = (void *)*v37;
            if (*v37)
            {
              do
              {
                unint64_t v44 = v43[1];
                if (v39.u32[0] > 1uLL)
                {
                  if (v44 >= *(void *)&prime) {
                    v44 %= *(void *)&prime;
                  }
                }
                else
                {
                  v44 &= *(void *)&prime - 1;
                }
                if (v44 != v38)
                {
                  if (!*(void *)(*(void *)v23 + 8 * v44))
                  {
                    *(void *)(*(void *)v23 + 8 * v44) = v37;
                    goto LABEL_79;
                  }
                  *__int16 v37 = *v43;
                  *uint64_t v43 = **(void **)(*(void *)v23 + 8 * v44);
                  **(void **)(*(void *)v23 + 8 * v44) = v43;
                  uint64_t v43 = v37;
                }
                unint64_t v44 = v38;
LABEL_79:
                __int16 v37 = v43;
                uint64_t v43 = (void *)*v43;
                unint64_t v38 = v44;
              }
              while (v43);
            }
          }
          unint64_t v24 = (unint64_t)prime;
          goto LABEL_83;
        }
        uint64_t v51 = *(void **)v23;
        *(void *)uint64_t v23 = 0;
        if (v51) {
          operator delete(v51);
        }
        unint64_t v24 = 0;
        *((void *)v23 + 1) = 0;
      }
    }
LABEL_83:
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v24 <= v8) {
        unint64_t v3 = v8 % v24;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v24 - 1) & v8;
    }
  }
  int v45 = *(void **)v23;
  size_t v46 = *(void **)(*(void *)v23 + 8 * v3);
  if (v46)
  {
    *uint64_t v13 = *v46;
  }
  else
  {
    uint64_t v47 = *((void *)v23 + 2);
    *uint64_t v13 = v47;
    *((void *)v23 + 2) = v13;
    v45[v3] = v23 + 4;
    if (!v47) {
      goto LABEL_97;
    }
    unint64_t v48 = *(void *)(v47 + 8);
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v48 >= v24) {
        v48 %= v24;
      }
    }
    else
    {
      v48 &= v24 - 1;
    }
    size_t v46 = (void *)(*(void *)v23 + 8 * v48);
  }
  *size_t v46 = v13;
LABEL_97:
  ++*((void *)v23 + 3);
LABEL_98:
  uint64_t v49 = (uint64_t)v15 + *(void *)(*(void *)v15 - 24) + 32;
  long long v52 = v55;
  uint64_t v53 = v56;
  if (v56) {
    llvm::MetadataTracking::track();
  }
  int v54 = v57;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v52, v49 + 8);
  if (v53) {
    llvm::MetadataTracking::untrack();
  }
  if (v56) {
    llvm::MetadataTracking::untrack();
  }
  return v13[3];
}

llvm::Value *AGCLLVMUserObject::buildABResourceIntrinsic(AGCLLVMUserObject *this, unsigned __int8 **a2, llvm::Type *a3, llvm::Value *a4, AGCArgumentBuffer::Resource::Bounds *a5, unsigned int a6, llvm::Value *a7)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  uint64_t v12 = v11[35];
  uint64_t v20 = v11[29];
  uint64_t v21 = v12;
  uint64_t v13 = *(void *)a7;
  uint64_t v22 = v20;
  uint64_t v23 = v13;
  uint64_t Function = AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::getFunction(a2, v11[46], (unint64_t)a3);
  uint64_t v15 = *(void *)(*(void *)this - 24);
  v19[0] = a4;
  uint64_t v16 = (llvm::Type **)((char *)this + v15 + 40);
  v19[1] = AGCArgumentBuffer::Resource::Bounds::toConstantVector((uint64_t)a5, v16);
  void v19[2] = llvm::ConstantInt::get();
  void v19[3] = a7;
  unsigned char v18[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v16, *(void *)(Function + 24), Function, (uint64_t)v19, 4, (uint64_t)v18);
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::erase(int32x2_t *a1, uint64_t a2)
{
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -8192;
  uint64_t v9 = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 8), v7);
  uint64_t v4 = v8;
  *(void *)(a2 + 32) = v9;
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t AGCLLVMUserObject::replaceArgumentBufferStoreTextureOrSampler(AGCLLVMUserObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (llvm::Type *)llvm::StructType::get();
  int v7 = *(llvm::Value **)(a2 - 64);
  uint64_t v8 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v9 = AGCLLVMUserObject::addrSpaceReconciliation(a1, v7, v8);
  uint8x8_t v10 = (uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  __int16 v35 = 257;
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v10, v6, v9, 0, (uint64_t)v34);
  uint64_t v12 = *(unsigned int *)(a3 + 8);
  if (v12)
  {
    uint64_t v13 = *(uint64_t **)a3;
    uint64_t v14 = 8 * v12;
    do
    {
      *v13++ = llvm::PointerType::get();
      v14 -= 8;
    }
    while (v14);
  }
  uint64_t v15 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a3, v15);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a3, *(void *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 232));
  uint64_t v16 = (llvm::Type *)llvm::StructType::get();
  uint64_t v17 = *(llvm::Value **)(a2 - 32);
  uint64_t v18 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v19 = AGCLLVMUserObject::addrSpaceReconciliation(a1, v17, v18);
  uint64_t v20 = (uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  __int16 v35 = 257;
  uint64_t v21 = llvm::IRBuilderBase::CreateAlignedLoad(v20, v16, v19, 0, (uint64_t)v34);
  unsigned int v33 = 0;
  if (*(_DWORD *)(a3 + 8) == 2)
  {
    int v22 = 0;
  }
  else
  {
    do
    {
      uint64_t v23 = (uint64_t)a1 + *(void *)(*(void *)a1 - 24) + 40;
      __int16 v35 = 257;
      uint64_t Value = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue(v23, AlignedLoad, (uint64_t)&v33, 1, (uint64_t)v34);
      uint64_t v25 = (uint64_t)a1 + *(void *)(*(void *)a1 - 24) + 40;
      __int16 v35 = 257;
      uint64_t v26 = llvm::IRBuilderBase::CreateExtractValue(v25, v21, (uint64_t)&v33, 1, (uint64_t)v34);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40), Value, v26, 0);
      int v22 = ++v33;
    }
    while ((unint64_t)*(unsigned int *)(a3 + 8) - 2 > v33);
  }
  uint64_t v27 = (uint64_t)a1 + *(void *)(*(void *)a1 - 24) + 40;
  int v32 = v22;
  unsigned int v33 = v22 + 1;
  __int16 v35 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateExtractValue(v27, v21, (uint64_t)&v32, 1, (uint64_t)v34);
  uint64_t v29 = (uint64_t)a1 + *(void *)(*(void *)a1 - 24) + 40;
  __int16 v35 = 257;
  BOOL v30 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue(v29, v21, (uint64_t)&v33, 1, (uint64_t)v34);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40), v30, v28, 0);
}

uint64_t AGCLLVMUserObject::addrSpaceReconciliation(AGCLLVMUserObject *this, llvm::Value *a2, llvm::Type *a3)
{
  int v5 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v6 = *((void *)v5 + 30);
  __int16 v11 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v5 + 40), 47, (uint64_t)a2, v6, (uint64_t)v10);
  uint64_t v8 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v8, 48, Cast, (uint64_t)a3, (uint64_t)v10);
}

uint64_t AGCLLVMUserObject::replaceArgumentBufferLoadTextureOrSampler(AGCLLVMUserObject *a1, llvm::Type **a2, uint64_t a3)
{
  uint64_t v6 = (llvm::Type *)llvm::StructType::get();
  Insertuint64_t Value = (llvm::Type **)llvm::UndefValue::get();
  AllocaInEntryBlocunint64_t k = (llvm::Value *)AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMUserObject *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 32), v6);
  uint64_t v9 = *(uint64_t **)a3;
  uint64_t v10 = *(unsigned int *)(a3 + 8);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *v9++ = llvm::PointerType::get();
      v11 -= 8;
    }
    while (v11);
  }
  uint64_t v12 = (llvm::Type *)llvm::StructType::get();
  uint64_t v13 = *(a2 - 4);
  uint64_t v14 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v15 = AGCLLVMUserObject::addrSpaceReconciliation(a1, v13, v14);
  uint64_t v16 = (uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  __int16 v30 = 257;
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v16, v12, v15, 0, (uint64_t)v29);
  unsigned int v28 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v18 = AlignedLoad;
    do
    {
      uint64_t v19 = (uint64_t)a1 + *(void *)(*(void *)a1 - 24) + 40;
      __int16 v30 = 257;
      uint64_t Value = llvm::IRBuilderBase::CreateExtractValue(v19, v18, (uint64_t)&v28, 1, (uint64_t)v29);
      uint64_t v21 = *(void *)(*(void *)a1 - 24);
      uint64_t v22 = (uint64_t)a1 + v21 + 40;
      uint64_t v23 = *(llvm::Type **)(*((void *)v6 + 2) + 8 * v28);
      __int16 v30 = 257;
      uint64_t v24 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)((char *)a1 + v21 + 40), v23, Value, 0, (uint64_t)v29);
      __int16 v27 = 257;
      Insertuint64_t Value = (llvm::Type **)llvm::IRBuilderBase::CreateInsertValue(v22, (uint64_t)InsertValue, v24, (uint64_t)&v28, 1, (uint64_t)v26);
      ++v28;
    }
    while (*(_DWORD *)(a3 + 8) > v28);
  }
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40), InsertValue, (uint64_t)AllocaInEntryBlock, 0);
  return AGCLLVMUserObject::addrSpaceReconciliation(a1, AllocaInEntryBlock, *a2);
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v10, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v12 = v4;
  uint64_t v17 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v11, &v17))uint64_t v5 = (uint64_t)v17; {
  else
  }
    uint64_t v5 = *(void *)v4 + 48 * v4[2].u32[0];
  uint64_t result = (uint64_t)v12;
  if (*(void *)v12 + 48 * v12[2].u32[0] != v5)
  {
    uint64_t v7 = *(void *)(v5 + 40);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::erase(v12, v5);
    uint64_t v8 = v12;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v13, a2);
    uint64_t v13 = &unk_1F25C4600;
    uint64_t v16 = v8;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v18, (LODWORD(v14[0]) >> 1) & 3, v14);
    uint64_t v17 = &unk_1F25C4600;
    uint64_t v20 = v16;
    uint64_t v21 = v7;
    uint64_t v22 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v8, v8[2].i32[0], v19, &v22);
    if ((result & 1) == 0)
    {
      uint64_t v9 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>((uint64_t)v8, (uint64_t)&v17, v22);
      uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v9 + 1), v18);
      v9[4] = v20;
      void v9[5] = v21;
    }
    if (v19 != -8192 && v19 != -4096 && v19) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
    }
    if (v15 != -8192 && v15 != -4096 && v15) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v14);
    }
  }
  if (v11 != -8192 && v11 != -4096)
  {
    if (v11) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v10);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x1CB79F270]((void *)v8, 48 * v8, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::initEmpty(a1);
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -4096;
    uint64_t v22 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &unk_1F25C4600;
    v16[0] = 2;
    v16[1] = 0;
    uint64_t v17 = -8192;
    if (v3)
    {
      uint64_t v9 = (uint64_t *)((char *)v4 + 24);
      uint64_t v10 = 48 * v3;
      do
      {
        uint64_t v11 = *v9;
        if (*v9 != v21 && v11 != v17)
        {
          uint64_t v23 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v23);
          uint64_t v13 = v23;
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v23 + 8), v9 - 2);
          *(void *)(v13 + 32) = v9[1];
          *(void *)(v13 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v9[2];
          ++*(_DWORD *)(a1 + 8);
          uint64_t v11 = *v9;
        }
        if (v11 != -8192 && v11 != -4096 && v11 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
        }
        v9 += 6;
        v10 -= 48;
      }
      while (v10);
      if (v17 != -8192 && v17 != -4096 && v17) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
      }
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    return llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::initEmpty(a1);
  }
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v9 = v2;
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if (result)
  {
    uint64_t v4 = v10;
    v11[0] = 2;
    v11[1] = 0;
    uint64_t v12 = -8192;
    uint64_t v13 = 0;
    uint64_t v10 = &unk_1F25C4600;
    uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v11);
    uint64_t v5 = v12;
    v4[4] = v13;
    if (v5 != -8192 && v5 != -4096 && v5) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  return result;
}

llvm::Value *AGCLLVMUserObject::replaceBuiltinFunction(void *a1, uint64_t a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = llvm::ConstantInt::get();
  v5[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(v3 + 40), *(void *)(a2 + 24), a2, (uint64_t)&v6, 1, (uint64_t)v5);
}

uint64_t *AGCLLVMUserObject::setupGlobalBufferPointer(AGCLLVMUserObject *this, llvm::PointerType ***a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, char a7, uint64_t a8)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  unsigned int v91 = a4;
  int v15 = *(_DWORD *)(a3 + 8);
  if (v15 == 15)
  {
    if ((v15 & 0xFE) == 0x12) {
      int v15 = *(_DWORD *)(**(void **)(a3 + 16) + 8);
    }
    if ((v15 & 0xFFFFFF00) == 0x300)
    {
      int v16 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24));
      if (v16 != 29 && v16 != 8)
      {
        char v44 = a7;
        int v45 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        uint64_t v92 = "agc.local_buffer_pointers.";
        uint64_t v94 = a4;
        v96[0] = 2051;
        uint64_t v46 = llvm::GlobalVariable::GlobalVariable();
        *(unsigned char *)(v46 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        uint64_t v47 = (char *)this + *(void *)(*(void *)this - 24);
        uint64_t v48 = *((void *)v47 + 47);
        uint64_t v49 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v47 + 32), v45);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v48, v49);
        llvm::PointerType::get();
        a7 = v44;
        Pointeruint64_t Cast = (uint64_t *)llvm::ConstantExpr::getPointerCast();
        goto LABEL_119;
      }
      LODWORD(__src) = a4;
      for (unsigned int i = (uint64_t *)*((void *)this + 110); i; unsigned int i = (uint64_t *)*i)
      {
        unsigned int v19 = *((_DWORD *)i + 8);
        if (v19 <= a4)
        {
          if (v19 >= a4)
          {
            std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 109, a4, &__src);
            llvm::PointerType::get();
            return (uint64_t *)llvm::ConstantExpr::getPointerCast();
          }
          ++i;
        }
      }
      char v20 = a7;
      uint64_t v21 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      uint64_t v92 = "agc.local_buffer_pointers.";
      uint64_t v94 = a4;
      v96[0] = 2051;
      uint64_t v22 = llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v22 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      uint64_t v23 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v24 = (uint64_t)(v23 + 3080);
      uint64_t v25 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v23 + 32), v21);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v24, v25);
      std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 109, a4, &__src)[5] = (uint64_t *)v21;
      llvm::PointerType::get();
      Pointeruint64_t Cast = (uint64_t *)llvm::ConstantExpr::getPointerCast();
      if (a8 != -1)
      {
        uint64_t v26 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
        (*(void (**)(uint64_t, llvm::GlobalVariable *, uint64_t, void, void))(*(void *)v26 + 176))(v26, v21, a8, 0, 0);
      }
      if ((v20 & 3) == 1)
      {
        llvm::Module::getOrInsertNamedMetadata();
        goto LABEL_123;
      }
      return PointerCast;
    }
  }
  uint64_t v92 = &v94;
  uint64_t v93 = 0x800000000;
  __int16 v27 = a2[1];
  if (!v27) {
    goto LABEL_36;
  }
  do
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v92, (uint64_t)v27[3]);
    __int16 v27 = (llvm::PointerType **)v27[1];
  }
  while (v27);
  unsigned int v28 = v93;
  if (!v93)
  {
LABEL_34:
    LOBYTE(v27) = 0;
    goto LABEL_36;
  }
  while (1)
  {
    uint64_t v29 = *((void *)v92 + --v28);
    LODWORD(v93) = v28;
    unsigned int v30 = *(unsigned __int8 *)(v29 + 16);
    if (v30 <= 0x1B) {
      break;
    }
    if (v30 != 60)
    {
      if (v30 != 77 && v30 != 62) {
        goto LABEL_35;
      }
      goto LABEL_30;
    }
LABEL_33:
    if (!v28) {
      goto LABEL_34;
    }
  }
  if (v30 == 5)
  {
    int v31 = *(unsigned __int16 *)(v29 + 18);
    if (v31 == 34 || v31 == 49)
    {
LABEL_30:
      uint64_t v32 = *(void *)(v29 + 8);
      if (v32)
      {
        do
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v92, *(void *)(v32 + 24));
          uint64_t v32 = *(void *)(v32 + 8);
        }
        while (v32);
        unsigned int v28 = v93;
      }
      goto LABEL_33;
    }
  }
LABEL_35:
  LOBYTE(v27) = 1;
LABEL_36:
  uint64_t v84 = a2;
  unsigned int v85 = a8;
  if (v92 != &v94) {
    free(v92);
  }
  unsigned int v33 = a5;
  if ((v27 & 1) != 0 || AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings(this))
  {
    for (uint64_t j = (uint64_t *)*((void *)this + 107); j; uint64_t j = (uint64_t *)*j)
    {
      unsigned int v35 = *((_DWORD *)j + 8);
      if (v35 <= a4)
      {
        if (v35 >= a4)
        {
          Pointeruint64_t Cast = std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 106, a4, &v91)[5];
          a8 = a8;
          goto LABEL_117;
        }
        ++j;
      }
    }
    if (a5 == -1)
    {
      LODWORD(__src) = a4;
      p_src = (void **)__src;
      char v36 = 8;
      char v37 = 1;
    }
    else
    {
      v88[0] = a5;
      uint64_t v89 = ".";
      __int16 v90 = 776;
      uint64_t __src = v88;
      uint64_t v99 = a4;
      char v36 = 2;
      char v37 = 8;
      p_src = &__src;
    }
    LOBYTE(v101) = v36;
    BYTE1(v101) = v37;
    uint64_t v92 = "agc.buffer_pointers.";
    uint64_t v94 = (uint64_t)p_src;
    LOBYTE(v96[0]) = 3;
    HIBYTE(v96[0]) = v36;
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v87, a4, a5);
    Pointeruint64_t Cast = (uint64_t *)AGCLLVMUserObject::createGlobalBufferBinding(this, (llvm::Type *)a3, (const llvm::Twine *)&v92, v87, a6, 139, 0);
    *((unsigned char *)PointerCast + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 106, a4, &v91)[5] = PointerCast;
    (*(void (**)(void))(**(void **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824)
                      + 344))();
    uint64_t __src = (void *)llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    uint64_t v98 = llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    uint64_t v99 = llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    uint64_t v100 = llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    uint64_t v101 = llvm::ValueAsMetadata::get();
    uint64_t v92 = &v94;
    uint64_t v93 = 0x500000000;
    llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v92, &__src, &v102);
    uint64_t v42 = (char *)this + *(void *)(*(void *)this - 24) + 3080;
    uint64_t Impl = llvm::MDTuple::getImpl();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v42, Impl);
    if (v92 != &v94) {
      free(v92);
    }
    a8 = a8;
    unsigned int v33 = a5;
  }
  else
  {
    if (a5 == -1)
    {
      LODWORD(__src) = a4;
      char v39 = 8;
      char v40 = 1;
      uint8x8_t v41 = (void **)__src;
    }
    else
    {
      v88[0] = a5;
      uint64_t v89 = ".";
      __int16 v90 = 776;
      uint64_t __src = v88;
      uint64_t v99 = a4;
      char v39 = 2;
      char v40 = 8;
      uint8x8_t v41 = &__src;
    }
    char v82 = a7;
    LOBYTE(v101) = v39;
    BYTE1(v101) = v40;
    uint64_t v92 = "agc.buffer_pointers.";
    uint64_t v94 = (uint64_t)v41;
    uint64_t v95 = v98;
    LOBYTE(v96[0]) = 3;
    HIBYTE(v96[0]) = v39;
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v87, a4, a5);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, (llvm::Type *)a3, (const llvm::Twine *)&v92, v87, a6, 5, 0);
    *((unsigned char *)GlobalBufferBinding + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    unsigned int v53 = *(_DWORD *)(*(void *)GlobalBufferBinding + 8);
    if ((v53 & 0xFE) == 0x12) {
      unsigned int v53 = *(_DWORD *)(**(void **)(*(void *)GlobalBufferBinding + 16) + 8);
    }
    char v81 = (uint64_t *)GlobalBufferBinding;
    unsigned int v83 = v53 >> 8;
    AGCLLVMObject::replaceConstantChainWithInstrs((AGCLLVMObject *)a2, v52);
    uint64_t v92 = v96;
    uint64_t v93 = (uint64_t)v96;
    uint64_t v94 = 16;
    LODWORD(v95) = 0;
    int v54 = a2[1];
    if (v54)
    {
      long long v55 = 0;
      uint64_t v56 = 0;
      unint64_t v57 = 0;
      do
      {
        uint64_t v58 = v54[3];
        if ((unint64_t)v56 >= v57)
        {
          uint64_t v59 = (v56 - v55) >> 3;
          unint64_t v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 61) {
LABEL_126:
          }
            abort();
          if ((uint64_t)(v57 - (void)v55) >> 2 > v60) {
            unint64_t v60 = (uint64_t)(v57 - (void)v55) >> 2;
          }
          if (v57 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v60;
          }
          if (v61) {
            unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v61);
          }
          else {
            uint64_t v62 = 0;
          }
          __int16 v63 = (char *)(v61 + 8 * v59);
          *(void *)__int16 v63 = v58;
          unsigned int v64 = v63 + 8;
          while (v56 != v55)
          {
            uint64_t v65 = *((void *)v56 - 1);
            v56 -= 8;
            *((void *)v63 - 1) = v65;
            v63 -= 8;
          }
          unint64_t v57 = v61 + 8 * v62;
          if (v55) {
            operator delete(v55);
          }
          long long v55 = v63;
          uint64_t v56 = v64;
        }
        else
        {
          *(void *)uint64_t v56 = v58;
          v56 += 8;
        }
        int v54 = (llvm::PointerType **)v54[1];
      }
      while (v54);
      while (v55 != v56)
      {
        __int16 v67 = v56 - 8;
        uint64_t v66 = *((void *)v56 - 1);
        if (v66)
        {
          uint64_t v68 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)&v92, (const void *)v66);
          uint64_t v69 = (void *)v93 == v92 ? (uint64_t *)((char *)&v94 + 4) : &v94;
          if ((const void **)(v93 + 8 * *(unsigned int *)v69) == v68) {
            llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__src, (llvm::SmallPtrSetImplBase *)&v92, (void *)v66);
          }
        }
        int v70 = *(unsigned __int8 *)(v66 + 16);
        if (v70 != 60
          && *(unsigned char *)(*(void *)v66 + 8) == 15
          && (v70 == 77 || v70 == 62)
          && (*(void *)uint64_t v66 = llvm::PointerType::getWithSamePointeeType(*(llvm::PointerType ***)v66, (llvm::PointerType *)v83), (v71 = *(void *)(v66 + 8)) != 0))
        {
          do
          {
            uint64_t v72 = *(void *)(v71 + 24);
            if ((unint64_t)v67 >= v57)
            {
              uint64_t v73 = (v67 - v55) >> 3;
              unint64_t v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 61) {
                goto LABEL_126;
              }
              if ((uint64_t)(v57 - (void)v55) >> 2 > v74) {
                unint64_t v74 = (uint64_t)(v57 - (void)v55) >> 2;
              }
              if (v57 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v74;
              }
              if (v75) {
                unint64_t v75 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v75);
              }
              else {
                uint64_t v76 = 0;
              }
              unsigned int v77 = (char *)(v75 + 8 * v73);
              *(void *)unsigned int v77 = v72;
              uint64_t v56 = v77 + 8;
              while (v67 != v55)
              {
                uint64_t v78 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v77 - 1) = v78;
                v77 -= 8;
              }
              unint64_t v57 = v75 + 8 * v76;
              if (v55) {
                operator delete(v55);
              }
              long long v55 = v77;
            }
            else
            {
              *(void *)__int16 v67 = v72;
              uint64_t v56 = v67 + 8;
            }
            uint64_t v71 = *(void *)(v71 + 8);
            __int16 v67 = v56;
          }
          while (v71);
        }
        else
        {
          uint64_t v56 = v67;
        }
      }
    }
    else
    {
      long long v55 = 0;
    }
    unsigned __int8 *v84 = (llvm::PointerType **)llvm::PointerType::getWithSamePointeeType(*v84, (llvm::PointerType *)v83);
    if ((void *)v93 != v92) {
      free((void *)v93);
    }
    a7 = v82;
    a8 = v85;
    unsigned int v33 = a5;
    if (v55) {
      operator delete(v55);
    }
    Pointeruint64_t Cast = v81;
  }
LABEL_117:
  if (v33 == -1) {
    ++*((_DWORD *)this + 828);
  }
LABEL_119:
  if (a8 != -1)
  {
    uint64_t v79 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void, void))(*(void *)v79 + 176))(v79, PointerCast, a8, 0, 0);
  }
  if ((a7 & 3) == 1)
  {
    llvm::Module::getOrInsertNamedMetadata();
LABEL_123:
    uint64_t v92 = (void *)llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  return PointerCast;
}

uint64_t llvm::PointerType::getWithSamePointeeType(llvm::PointerType **this, llvm::PointerType *a2)
{
  if (this[3]) {
    return llvm::PointerType::get();
  }
  else {
    return llvm::PointerType::get(*this, a2);
  }
}

void *std::__function::__value_func<void ()(llvm::Module &,llvm::StringSet<llvm::MallocAllocator> const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void AGCLLVMUserObject::getCallOfCastedFunction(AGCLLVMUserObject *this, llvm::Value *a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  *(void *)this = (char *)this + 16;
  *((void *)this + 1) = 0x400000000;
  if (a2)
  {
    unsigned int v3 = *((unsigned __int8 *)a2 + 16);
    if (v3 == 84)
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, (uint64_t)a2);
      return;
    }
  }
  else
  {
    unsigned int v3 = MEMORY[0x10];
  }
  if (v3 <= 0x1B)
  {
    if (v3 != 5 || *((_WORD *)a2 + 9) != 49) {
      return;
    }
  }
  else if (v3 != 77)
  {
    return;
  }
  for (uint64_t i = *((void *)a2 + 1); i; uint64_t i = *(void *)(i + 8))
  {
    AGCLLVMUserObject::getCallOfCastedFunction((AGCLLVMUserObject *)&__src, *(llvm::Value **)(i + 24));
    unsigned int v5 = v8;
    uint64_t v6 = *((unsigned int *)this + 2);
    if ((unint64_t)v8 + v6 > *((unsigned int *)this + 3)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v8)
    {
      memcpy((void *)(*(void *)this + 8 * v6), __src, 8 * v8);
      LODWORD(v6) = *((_DWORD *)this + 2);
    }
    *((_DWORD *)this + 2) = v6 + v5;
    if (__src != v9) {
      free(__src);
    }
  }
}

uint64_t AGCLLVMUserObject::createIndirectCommandBufferHeapGlobal(AGCLLVMUserObject *this)
{
  void v18[2] = *(uint64_t **)MEMORY[0x1E4F143B8];
  uint64_t PerEncoderIndirectionTableGlobal = AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal(this);
  uint64_t v4 = v3;
  uint64_t v5 = llvm::PointerType::get();
  uint64_t v6 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  __int16 v17 = 257;
  unsigned int v8 = AGCLLVMBuilder::tryDeducePointeeType(v4, v7);
  v6 += 5;
  uint64_t AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad(v6, v8, (uint64_t)v4, 0, (uint64_t)v16);
  v18[0] = (uint64_t *)llvm::ConstantInt::get();
  (*(void (**)(void))(**(void **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824)
                    + 1024))();
  v18[1] = (uint64_t *)llvm::ConstantInt::get();
  __int16 v15 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v6, PerEncoderIndirectionTableGlobal, AlignedLoad, v18, 2, (uint64_t)v14);
  uint64_t v11 = (AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v12 = (llvm::Type *)llvm::PointerType::get();
  __int16 v17 = 257;
  llvm::IRBuilderBase::CreatePointerCast(v11, GEP, v12, (const llvm::Twine *)v16);
  return v5;
}

uint64_t AGCLLVMUserObject::createPipelineStateHeapGlobal(AGCLLVMUserObject *this)
{
  void v18[2] = *(uint64_t **)MEMORY[0x1E4F143B8];
  uint64_t PerEncoderIndirectionTableGlobal = AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal(this);
  uint64_t v4 = v3;
  uint64_t v5 = llvm::PointerType::get();
  uint64_t v6 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  __int16 v17 = 257;
  unsigned int v8 = AGCLLVMBuilder::tryDeducePointeeType(v4, v7);
  v6 += 5;
  uint64_t AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad(v6, v8, (uint64_t)v4, 0, (uint64_t)v16);
  v18[0] = (uint64_t *)llvm::ConstantInt::get();
  (*(void (**)(void))(**(void **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824)
                    + 1032))();
  v18[1] = (uint64_t *)llvm::ConstantInt::get();
  __int16 v15 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v6, PerEncoderIndirectionTableGlobal, AlignedLoad, v18, 2, (uint64_t)v14);
  uint64_t v11 = (AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v12 = (llvm::Type *)llvm::PointerType::get();
  __int16 v17 = 257;
  llvm::IRBuilderBase::CreatePointerCast(v11, GEP, v12, (const llvm::Twine *)v16);
  return v5;
}

uint64_t AGCLLVMUserObject::replaceF16Builtins(AGCLLVMUserObject *this)
{
  uint64_t v1 = (*(uint64_t (**)(void, AGCLLVMUserObject *, void))(**(void **)((char *)this
                                                                                    + *(void *)(*(void *)this - 24)
                                                                                    + 400)
                                                                      + 816))(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400), this, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368));
  uint64_t v2 = *(void *)(v1 + 336);
  uint64_t v3 = v2 + 24;
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4) {
        uint64_t v5 = (llvm::Value *)(v4 - 56);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t Name = (char *)llvm::Value::getName(v5);
      v16[0] = 0;
      v16[1] = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      if (AGCLLVMBuilder::findPrefix(Name, v7, v16, (const char **)&v14, "air.", 4uLL)
        && llvm::GlobalValue::isDeclaration(v5))
      {
        uint64_t v8 = *(void *)(v1 + 760);
        int Key = llvm::StringMapImpl::FindKey();
        if (Key == -1) {
          uint64_t v10 = *(unsigned int *)(v8 + 8);
        }
        else {
          uint64_t v10 = Key;
        }
        uint64_t v11 = (void *)(*(void *)v8 + 8 * v10);
        if (v11 != (void *)(**(void **)(v1 + 760) + 8 * *(unsigned int *)(*(void *)(v1 + 760) + 8))
          && llvm::StringRef::find() != -1)
        {
          AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::doReplacement(v1 + 376, v5, *v11 + 8, v14, v15);
        }
      }
    }
    while (v4 != v3);
  }
  uint64_t v12 = *(unsigned __int8 *)(v1 + 768);
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  return v12;
}

uint64_t AGCLLVMUserObject::replaceGlobalTextureOrSamplerUsage(AGCLLVMUserObject *this, llvm::GlobalValue *a2, unsigned int a3, int a4, char a5, unsigned __int8 **a6, unsigned __int8 **a7)
{
  AGCLLVMObject::replaceConstantChainWithInstrs(a2, a2);
  if (a5)
  {
    uint64_t v14 = **(llvm::Type ***)(*(void *)a2 + 16);
    uint64_t result = AGCLLVMUserObject::replaceGlobalTextureOrSamplerUsage(llvm::GlobalValue *,unsigned int,unsigned int,BOOL,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions &,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions &)::$_2::operator()(this, *((void *)a2 + 1), a3, a4, 1, **(void **)(**((void **)v14 + 2) + 16), a6);
    if (result)
    {
      uint64_t v16 = *((void *)a2 + 1);
      if (v16)
      {
        do
        {
          uint64_t v17 = *(void *)(v16 + 8);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), *(llvm::Instruction **)(v16 + 24));
          unsigned int v24 = a3;
          int v25 = a3 + a4 - 1;
          uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
          AGCLLVMUserObject::buildAPIResourceConstantPointerIntrinsic(this, a7, v14, v18, (AGCArgumentBuffer::Resource::Bounds *)&v24);
          uint64_t result = llvm::User::replaceUsesOfWith();
          uint64_t v16 = v17;
        }
        while (v17);
      }
    }
  }
  else
  {
    unsigned int v19 = (llvm::Type *)*((void *)a2 + 3);
    if (*((unsigned char *)v19 + 8) == 16) {
      uint64_t v20 = *((void *)a2 + 3);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t result = AGCLLVMUserObject::replaceGlobalTextureOrSamplerUsage(llvm::GlobalValue *,unsigned int,unsigned int,BOOL,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions &,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions &)::$_2::operator()(this, *((void *)a2 + 1), a3, a4, 0, v20, a6);
    if (result)
    {
      uint64_t v21 = *((void *)a2 + 1);
      if (v21)
      {
        do
        {
          uint64_t v22 = *(void *)(v21 + 8);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), *(llvm::Instruction **)(v21 + 24));
          unsigned int v24 = a3;
          int v25 = a3;
          uint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
          AGCLLVMUserObject::buildAPIResourceConstantPointerIntrinsic(this, a7, v19, v23, (AGCArgumentBuffer::Resource::Bounds *)&v24);
          uint64_t result = llvm::User::replaceUsesOfWith();
          uint64_t v21 = v22;
        }
        while (v22);
      }
    }
  }
  return result;
}

uint64_t AGCLLVMUserObject::replaceGlobalTextureOrSamplerUsage(llvm::GlobalValue *,unsigned int,unsigned int,BOOL,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions &,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions &)::$_2::operator()(AGCLLVMUserObject *a1, uint64_t a2, unsigned int a3, int a4, char a5, uint64_t a6, unsigned __int8 **a7)
{
  v62[16] = *MEMORY[0x1E4F143B8];
  unint64_t v57 = v59;
  uint64_t v58 = 0x1000000000;
  unint64_t v60 = v62;
  uint64_t v61 = 0x1000000000;
  uint64_t v51 = (char *)v55;
  long long v52 = (char *)v55;
  uint64_t v53 = 16;
  int v54 = 0;
  if (!a2) {
    goto LABEL_21;
  }
  uint64_t v11 = a2;
  do
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v60, *(void *)(v11 + 24));
    uint64_t v11 = *(void *)(v11 + 8);
  }
  while (v11);
  unsigned int v12 = v61;
  if (v61)
  {
    char v13 = 0;
    do
    {
      uint64_t v14 = v60[v12 - 1];
      LODWORD(v61) = v12 - 1;
      imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)&v51, (const void *)v14);
      if (v52 == v51) {
        uint64_t v16 = (uint64_t *)((char *)&v53 + 4);
      }
      else {
        uint64_t v16 = &v53;
      }
      if (imp == (const void **)&v52[8 * *(unsigned int *)v16])
      {
        int v17 = *(unsigned __int8 *)(v14 + 16);
        if (v17 == 60)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v57, v14);
        }
        else if (v17 == 77 || v17 == 62)
        {
          for (uint64_t i = *(void *)(v14 + 8); i; uint64_t i = *(void *)(i + 8))
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v60, *(void *)(i + 24));
        }
        else
        {
          char v13 = 1;
        }
        llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v50, (llvm::SmallPtrSetImplBase *)&v51, (void *)v14);
      }
      unsigned int v12 = v61;
    }
    while (v61);
  }
  else
  {
LABEL_21:
    char v13 = 0;
  }
  if (v52 != v51) {
    free(v52);
  }
  if (v60 != v62) {
    free(v60);
  }
  unsigned int v19 = (llvm::Instruction **)v57;
  if (v58)
  {
    char v47 = v13;
    uint64_t v20 = (llvm::Instruction **)((char *)v57 + 8 * v58);
    int v21 = a3 + a4 - 1;
    while (1)
    {
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40), *v19);
      uint64_t v22 = *((void *)*v19 - 4);
      unint64_t v60 = 0;
      if ((a5 & 1) == 0) {
        break;
      }
      int v23 = *(unsigned __int8 *)(v22 + 16);
      if (v23 == 62 && v22 != 0)
      {
        uint64_t v34 = *(_DWORD *)(v22 + 20) & 0x7FFFFFF;
        unsigned int v35 = (uint64_t **)(v22 - 32 * v34);
        uint64_t v26 = *v35;
        uint64_t v36 = **v35;
        unsigned int v37 = v34 - 1;
        if (v37) {
          BOOL v38 = v36 == a6;
        }
        else {
          BOOL v38 = 1;
        }
        if (!v38)
        {
          unsigned int v39 = 0;
          while (1)
          {
            int v40 = *(unsigned __int8 *)(v36 + 8);
            if (v40 != 15)
            {
              if (v40 == 17)
              {
                uint8x8_t v41 = (uint64_t *)(v36 + 24);
                goto LABEL_56;
              }
              if (v40 != 16) {
                goto LABEL_57;
              }
            }
            uint8x8_t v41 = *(uint64_t **)(v36 + 16);
LABEL_56:
            uint64_t v36 = *v41;
LABEL_57:
            if (++v39 >= v37 || v36 == a6)
            {
              uint64_t v26 = v35[4 * v39];
              break;
            }
          }
        }
        if (v26) {
          BOOL v42 = *((unsigned char *)v26 + 16) == 16;
        }
        else {
          BOOL v42 = 0;
        }
        if (v42)
        {
          uint64_t v43 = v26 + 3;
          if (*((_DWORD *)v26 + 8) >= 0x41u) {
            uint64_t v43 = (void *)*v43;
          }
          uint64_t v44 = *(_DWORD *)v43 + a3;
          uint64_t v26 = (uint64_t *)llvm::ConstantInt::get();
          unint64_t v60 = (void *)(v44 | (v44 << 32));
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      if (v23 == 77 && v22 != 0) {
        break;
      }
      uint64_t v26 = 0;
LABEL_42:
      __int16 v27 = **(llvm::Type ***)(a6 + 16);
      uint64_t v28 = *(void *)(*(void *)a1 - 24);
      uint64_t v29 = *(llvm::Type **)((char *)a1 + v28 + 232);
      v55[0] = 257;
      Intuint64_t Cast = llvm::IRBuilderBase::CreateIntCast((AGCLLVMUserObject *)((char *)a1 + v28 + 40), (llvm::Type **)v26, v29, 0, (const llvm::Twine *)&v51);
      int v31 = AGCLLVMUserObject::buildAPIResourceIntrinsic(a1, a7, v27, IntCast, (AGCArgumentBuffer::Resource::Bounds *)&v60);
      if (*(unsigned char *)(*(void *)*v19 + 8) == 13)
      {
        uint64_t v32 = *(void *)(*(void *)a1 - 24);
        uint64_t v33 = *(void *)((char *)a1 + v32 + 240);
        v55[0] = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)a1 + v32 + 40, 47, (uint64_t)v31, v33, (uint64_t)&v51);
      }
      llvm::Value::replaceAllUsesWith();
      if (++v19 == v20)
      {
        unsigned int v19 = (llvm::Instruction **)v57;
        char v13 = v47;
        if (v58)
        {
          uint64_t v45 = 8 * v58;
          do
          {
            ++v19;
            void v56[3] = 0;
            llvm::RecursivelyDeleteTriviallyDeadInstructions();
            std::__function::__value_func<void ()(llvm::Value *)>::~__value_func[abi:nn180100](v56);
            v45 -= 8;
          }
          while (v45);
          unsigned int v19 = (llvm::Instruction **)v57;
        }
        goto LABEL_72;
      }
    }
    uint64_t v26 = (uint64_t *)llvm::ConstantInt::get();
LABEL_41:
    unint64_t v60 = (void *)__PAIR64__(v21, a3);
    goto LABEL_42;
  }
LABEL_72:
  if (v19 != (llvm::Instruction **)v59) {
    free(v19);
  }
  return v13 & 1;
}

llvm::Value *AGCLLVMUserObject::buildAPIResourceConstantPointerIntrinsic(AGCLLVMUserObject *this, unsigned __int8 **a2, llvm::Type *a3, llvm::Value *a4, AGCArgumentBuffer::Resource::Bounds *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  uint64_t v10 = v9[35];
  uint64_t v19 = v9[29];
  uint64_t v20 = v10;
  uint64_t v11 = v9[26];
  uint64_t v21 = v19;
  uint64_t v22 = v11;
  unint64_t v12 = llvm::PointerType::get();
  uint64_t Function = AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::getFunction(a2, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368), v12);
  uint64_t v14 = *(void *)(*(void *)this - 24);
  v18[0] = a4;
  uint64_t v15 = (llvm::Type **)((char *)this + v14 + 40);
  v18[1] = AGCArgumentBuffer::Resource::Bounds::toConstantVector((uint64_t)a5, v15);
  void v18[2] = llvm::ConstantInt::get();
  void v18[3] = llvm::ConstantInt::get();
  v17[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v15, *(void *)(Function + 24), Function, (uint64_t)v18, 4, (uint64_t)v17);
}

unint64_t llvm::SmallVectorTemplateCommon<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,false>>(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 8 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorTemplateBase<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,false>::grow();
    }
    llvm::SmallVectorTemplateBase<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,false>::grow();
  }
  return a2;
}

uint64_t std::__hash_table<std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::__unordered_map_hasher<llvm::MDNode const*,std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::hash<llvm::MDNode const*>,std::equal_to<llvm::MDNode const*>,true>,std::__unordered_map_equal<llvm::MDNode const*,std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::equal_to<llvm::MDNode const*>,std::hash<llvm::MDNode const*>,true>,std::allocator<std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(void **)v2;
      *((void *)v2 + 3) = &unk_1F25C47B8;
      llvm::SmallVector<std::unique_ptr<AGCArgumentBuffer::Field>,4u>::~SmallVector((char **)v2 + 5);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void AGCLLVMUserObject::setupIndirectArgumentRogMetadata(void *a1, uint64_t a2)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  v13[0] = v14;
  v13[1] = (void *)0x800000000;
  uint64_t v10 = v12;
  uint64_t v11 = 0x800000000;
  uint64_t v7 = *(void *)(a2 + 56);
  unint64_t v4 = operator new(0x30uLL);
  void *v4 = &unk_1F25C47D8;
  v4[1] = v13;
  v4[2] = a1;
  void v4[3] = v8;
  v4[4] = &v7;
  v4[5] = &v10;
  uint64_t v9 = v4;
  uint64_t v5 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v13, v5);
  std::function<void ()(AGCArgumentBuffer::Field const*)>::operator()((uint64_t)v9, v7);
  if (v11)
  {
    uint64_t v6 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 400);
    (*(void (**)(uint64_t, void, void **))(*(void *)v6 + 184))(v6, *(void *)(a2 + 120), &v10);
  }
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  if (v10 != v12) {
    free(v10);
  }
  if (v13[0] != v14) {
    free(v13[0]);
  }
}

uint64_t std::function<void ()(AGCArgumentBuffer::Field const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = ((uint64_t (*)(void))std::__throw_bad_function_call[abi:nn180100])();
  return std::__function::__func<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0,std::allocator<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0>,void ()(AGCArgumentBuffer::Field const*)>::operator()(v3);
}

void std::__function::__func<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0,std::allocator<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0>,void ()(AGCArgumentBuffer::Field const*)>::operator()(uint64_t *a1, uint64_t *a2)
{
  v44[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = *(_DWORD *)(*a2 + 8);
  if (*a2) {
    BOOL v5 = (v4 - 3) >= 0xFFFFFFFE;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a1[1], 0);
    unint64_t v22 = *(unsigned int *)(v3 + 24);
    if (v22)
    {
      for (unint64_t i = 0; i < v22; ++i)
      {
        if (*(void *)(*(void *)(v3 + 16) + 8 * i))
        {
          *(void *)(*(void *)a1[1] + 8 * *(unsigned int *)(a1[1] + 8) - 8) = llvm::ConstantInt::get();
          std::function<void ()(AGCArgumentBuffer::Field const*)>::operator()(*(void *)(a1[3] + 24), *(void *)(*(void *)(v3 + 16) + 8 * i));
          unint64_t v22 = *(unsigned int *)(v3 + 24);
        }
      }
    }
    goto LABEL_72;
  }
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v24 = a1[1];
    uint64_t v25 = llvm::ConstantInt::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v24, v25);
    std::function<void ()(AGCArgumentBuffer::Field const*)>::operator()(*(void *)(a1[3] + 24), *(void *)(v3 + 16));
LABEL_72:
    --*(_DWORD *)(a1[1] + 8);
    return;
  }
  if (v3) {
    BOOL v7 = v4 == 3;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a1[1], 0);
    if (*(_DWORD *)(v3 + 24))
    {
      unint64_t v26 = 0;
      do
      {
        *(void *)(*(void *)a1[1] + 8 * *(unsigned int *)(a1[1] + 8) - 8) = llvm::ConstantInt::get();
        std::function<void ()(AGCArgumentBuffer::Field const*)>::operator()(*(void *)(a1[3] + 24), *(void *)(v3 + 16));
        ++v26;
      }
      while (v26 < *(unsigned int *)(v3 + 24));
    }
    goto LABEL_72;
  }
  if (!v3 || v4 != 4)
  {
    if (v3 && v4 == 5 && *(unsigned char *)(v3 + 252))
    {
      uint64_t v27 = *(unsigned int *)(v3 + 248);
      uint64_t IndexedOffsetInType = llvm::DataLayout::getIndexedOffsetInType();
      uint64_t v29 = a1[5];
      llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back(v29, v27 | (IndexedOffsetInType << 32), 8);
    }
    return;
  }
  unint64_t v8 = llvm::DataLayout::getIndexedOffsetInType() << 32;
  if (*(unsigned char *)(v3 + 276))
  {
    v8 |= *(unsigned int *)(v3 + 272);
    llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back(a1[5], v8, 8);
  }
  uint64_t v9 = *(void *)(v3 + 248);
  if (!v9)
  {
    uint64_t v33 = 0;
    long long v34 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v36 = 1065353216;
    goto LABEL_90;
  }
  BOOL v42 = v44;
  uint64_t v43 = 0x800000000;
  unsigned int v37 = v41;
  BOOL v38 = v41;
  uint64_t v39 = 8;
  int v40 = 0;
  long long v34 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v36 = 1065353216;
LABEL_19:
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v42, v9);
  while (v43)
  {
    uint64_t v10 = *((void *)v42 + v43 - 1);
    LODWORD(v43) = v43 - 1;
    int v11 = *(_DWORD *)(v10 + 8);
    if (v10) {
      BOOL v12 = v11 == 2;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12) {
      goto LABEL_28;
    }
    llvm::SmallPtrSetImplBase::insert_imp((llvm::SmallPtrSetImplBase *)&v37, (const void *)v10);
    if (v13)
    {
      int v11 = *(_DWORD *)(v10 + 8);
LABEL_28:
      if (v10) {
        BOOL v14 = (v11 - 3) >= 0xFFFFFFFE;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        uint64_t v19 = *(unsigned int *)(v10 + 24);
        if (v19)
        {
          uint64_t v20 = *(uint64_t **)(v10 + 16);
          uint64_t v21 = 8 * v19;
          do
          {
            if (*v20) {
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v42, *v20);
            }
            ++v20;
            v21 -= 8;
          }
          while (v21);
        }
      }
      else
      {
        if (v10) {
          BOOL v15 = v11 == 0;
        }
        else {
          BOOL v15 = 0;
        }
        if (v15 || (v10 ? (BOOL v16 = v11 == 3) : (BOOL v16 = 0), v16))
        {
          uint64_t v9 = *(void *)(v10 + 16);
          goto LABEL_19;
        }
        if (v10) {
          BOOL v17 = v11 == 4;
        }
        else {
          BOOL v17 = 0;
        }
        if (v17)
        {
          if (*(unsigned char *)(v10 + 276)) {
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((float *)&v34, *(_DWORD *)(v10 + 272), *(_DWORD *)(v10 + 272));
          }
          uint64_t v9 = *(void *)(v10 + 248);
          if (v9) {
            goto LABEL_19;
          }
        }
        else
        {
          if (v10) {
            BOOL v18 = v11 == 5;
          }
          else {
            BOOL v18 = 0;
          }
          if (v18)
          {
            if (*(unsigned char *)(v10 + 252)) {
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((float *)&v34, *(_DWORD *)(v10 + 248), *(_DWORD *)(v10 + 248));
            }
          }
        }
      }
    }
  }
  if (v38 != v37) {
    free(v38);
  }
  if (v42 != v44) {
    free(v42);
  }
  unsigned int v30 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      unint64_t v8 = v8 & 0xFFFFFFFF00000000 | *((unsigned int *)v30 + 4);
      llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back(a1[5], v8, 0x100000008);
      unsigned int v30 = (void **)*v30;
    }
    while (v30);
    int v31 = __p[0];
    if (__p[0])
    {
      do
      {
        uint64_t v32 = (void *)*v31;
        operator delete(v31);
        int v31 = v32;
      }
      while (v32);
    }
  }
  uint64_t v33 = (void *)v34;
LABEL_90:
  *(void *)&long long v34 = 0;
  if (v33) {
    operator delete(v33);
  }
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(float *a1, unsigned int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v12 = operator new(0x18uLL);
  *BOOL v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v19 = operator new(8 * *(void *)&prime);
          uint64_t v20 = *(void **)a1;
          *(void *)a1 = v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          unint64_t v22 = (void *)*((void *)a1 + 2);
          if (v22)
          {
            unint64_t v23 = v22[1];
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v23) = a1 + 4;
            uint64_t v28 = (void *)*v22;
            if (*v22)
            {
              do
              {
                unint64_t v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v29))
                  {
                    *(void *)(*(void *)a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *unint64_t v22 = *v28;
                  void *v28 = **(void **)(*(void *)a1 + 8 * v29);
                  **(void **)(*(void *)a1 + 8 * v29) = v28;
                  uint64_t v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_55:
                unint64_t v22 = v28;
                uint64_t v28 = (void *)*v28;
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        long long v34 = *(void **)a1;
        *(void *)a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  unsigned int v30 = *(void **)a1;
  int v31 = *(void **)(*(void *)a1 + 8 * v3);
  if (v31)
  {
    *BOOL v12 = *v31;
LABEL_72:
    *int v31 = v12;
    goto LABEL_73;
  }
  uint64_t v32 = *((void *)a1 + 2);
  *BOOL v12 = v32;
  *((void *)a1 + 2) = v12;
  v30[v3] = a1 + 4;
  if (v32)
  {
    unint64_t v33 = *(void *)(v32 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    int v31 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

__n128 std::__function::__func<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0,std::allocator<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0>,void ()(AGCArgumentBuffer::Field const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C47D8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0,std::allocator<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0>,void ()(AGCArgumentBuffer::Field const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F25C47D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0,std::allocator<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0>,void ()(AGCArgumentBuffer::Field const*)>::~__func()
{
}

void llvm::SmallVectorTemplateBase<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,false>::grow()
{
}

uint64_t *std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>::reset[abi:nn180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    std::__hash_table<std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::__unordered_map_hasher<llvm::MDNode const*,std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::hash<llvm::MDNode const*>,std::equal_to<llvm::MDNode const*>,true>,std::__unordered_map_equal<llvm::MDNode const*,std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::equal_to<llvm::MDNode const*>,std::hash<llvm::MDNode const*>,true>,std::allocator<std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>>>::~__hash_table(v1 + 72);
    JUMPOUT(0x1CB7A0780);
  }
  return result;
}

void AGCLLVMUserObject::simplifyGenericIR(AGCLLVMUserObject *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t *llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  unint64_t i = (uint64_t *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EBD0EB8llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = qword_1EBD0EB80 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x1CB79F270](a2 + 65, 8);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v8 + 64;
  if (a2) {
    memcpy((void *)(v8 + 64), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *uint64_t v9 = a2;
  *unint64_t i = (uint64_t)v9;
  ++dword_1EBD0EB7C;
  for (unint64_t i = (uint64_t *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map));
        !*i || *i == -8;
  return i;
}

uint64_t *llvm::StringMap<AGCLLVMUserObject::DimensionFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  unint64_t i = (uint64_t *)(AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EBD0EAA8) = qword_1EBD0EAA8 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x1CB79F270](a2 + 25, 8);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = v8 + 24;
  if (a2) {
    memcpy((void *)(v8 + 24), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *uint64_t v9 = a2;
  *unint64_t i = (uint64_t)v9;
  ++dword_1EBD0EAA4;
  for (unint64_t i = (uint64_t *)(AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t result = llvm::StringMapImpl::LookupBucketFor();
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(*(void *)a1 + 8 * result);
  if (v8)
  {
    if (v8 != -8) {
      return result;
    }
    --*((_DWORD *)a1 + 4);
  }
  uint64_t v9 = result;
  uint64_t v10 = MEMORY[0x1CB79F270](a3 + 9, 8);
  unint64_t v11 = (void *)v10;
  uint64_t v12 = v10 + 8;
  if (a3) {
    memcpy((void *)(v10 + 8), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  *(void *)(v7 + 8 * v9) = v11;
  void *v11 = a3;
  ++*((_DWORD *)a1 + 3);
  return llvm::StringMapImpl::RehashTable(a1);
}

uint64_t AGCLLVMUserObject::collectResourceCopyValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6, unsigned int a7)
{
  float v13 = *(void **)a4;
  uint64_t v14 = *(unsigned int *)(a4 + 8);
  if (v14)
  {
    uint64_t v15 = 8 * v14;
    unint64_t v16 = *(void **)a4;
    while (*v16 != a3)
    {
      ++v16;
      v15 -= 8;
      if (!v15)
      {
        unint64_t v16 = &v13[v14];
        break;
      }
    }
  }
  else
  {
    unint64_t v16 = *(void **)a4;
  }
  if (v14 != v16 - v13) {
    return 0;
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a4, a3);
  uint64_t v17 = *(void *)(a3 + 8);
  if (!v17)
  {
    LOBYTE(v18) = 0;
    int v19 = 0;
    goto LABEL_43;
  }
  int v18 = 0;
  int v19 = 0;
  uint64_t v31 = a1 + 3240;
  do
  {
    uint64_t v20 = *(unsigned __int8 **)(v17 + 24);
    int v21 = v20[16];
    if (v20 && v21 == 61)
    {
      unint64_t v22 = (unsigned char *)*((void *)v20 - 8);
      if (*(unsigned char *)(*(void *)v22 + 8) != 15 && (a5 & 1) == 0 && v22[16] != 75)
      {
        LOBYTE(v21) = 61;
        goto LABEL_28;
      }
      if (((a5 | a7) & 1) == 0) {
        *llvm::ValueMap<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[](v31, *(llvm::Value **)(v17 + 24)) = a2;
      }
      int v18 = 1;
      int v19 = a5 ^ 1;
    }
    else
    {
      if (!v20 || v21 != 60) {
        goto LABEL_28;
      }
      if (*(unsigned char *)(*(void *)v20 + 8) != 15 && a5 == 0)
      {
        LOBYTE(v21) = 60;
        goto LABEL_28;
      }
      if ((AGCLLVMUserObject::collectResourceCopyValues(a1, a2, *(void *)(v17 + 24), a4, a5, a6, 1) & 1) == 0)
      {
        LOBYTE(v21) = v20[16];
LABEL_28:
        unsigned int v24 = (((v21 - 75) >> 1) | (((_BYTE)v21 - 75) << 7));
        BOOL v25 = v24 > 5;
        int v26 = (1 << v24) & 0x33;
        if (v25 || v26 == 0)
        {
          *a6 |= a5 ^ 1;
        }
        else
        {
          __int16 v28 = AGCLLVMUserObject::collectResourceCopyValues(a1, a2, v20, a4, a5, a6, a7);
          int v18 = v28;
          int v19 = HIBYTE(v28);
        }
        goto LABEL_37;
      }
      if (((a5 | a7) & 1) == 0) {
        *llvm::ValueMap<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[](v31, (llvm::Value *)v2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = a2;
      }
      int v18 = 1;
    }
LABEL_37:
    uint64_t v17 = *(void *)(v17 + 8);
  }
  while (v17);
  if (v18 && *(unsigned char *)(a3 + 16) == 62) {
    *llvm::ValueMap<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[](v31, (llvm::Value *)a3) = a2;
  }
LABEL_43:
  --*(_DWORD *)(a4 + 8);
  return v18 | (v19 << 8);
}

void *llvm::ValueMap<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  uint64_t v7 = &unk_1F25C4600;
  uint64_t v10 = a1;
  unint64_t v11 = 0;
  char v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  int v4 = v11;
  if ((v3 & 1) == 0)
  {
    int v4 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, (uint64_t)v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 5;
}

void *AGCLLVMUserObject::replacePointerLoadsFromBitcast(void *result, llvm::Instruction *this)
{
  char v3 = result;
  uint64_t v4 = **(void **)(*(void *)this + 16);
  if (*(unsigned char *)(v4 + 8) == 15
    || (uint64_t result = (void *)llvm::Type::isIntegerTy(**(llvm::Type ***)(*(void *)this + 16)), result))
  {
    uint64_t v5 = *((void *)this + 1);
    if (!v5) {
      return (void *)llvm::Instruction::eraseFromParent(this);
    }
    uint64_t Cast = 0;
    uint64_t v7 = (llvm::Type **)*((void *)this - 4);
    do
    {
      uint64_t v8 = *(llvm::Instruction **)(v5 + 24);
      uint64_t v5 = *(void *)(v5 + 8);
      if (v8 && *((unsigned char *)v8 + 16) == 60)
      {
        if (!Cast)
        {
          uint64_t v9 = (uint64_t)v3 + *(void *)(*v3 - 24) + 8;
          __int16 v15 = 257;
          uint64_t v10 = AGCLLVMBuilder::tryDeducePointeeType(v7, this);
          uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v9 + 32), v10, (uint64_t)v7, 0, (uint64_t)v14);
          uint64_t v12 = (uint64_t)v3 + *(void *)(*v3 - 24) + 40;
          if (*(unsigned char *)(v4 + 8) == 15)
          {
            __int16 v15 = 257;
            uint64_t v13 = 49;
          }
          else
          {
            __int16 v15 = 257;
            uint64_t v13 = 47;
          }
          uint64_t Cast = llvm::IRBuilderBase::CreateCast(v12, v13, AlignedLoad, v4, (uint64_t)v14);
        }
        llvm::Value::replaceAllUsesWith();
        uint64_t result = (void *)llvm::Instruction::eraseFromParent(v8);
      }
    }
    while (v5);
    if (!*((void *)this + 1)) {
      return (void *)llvm::Instruction::eraseFromParent(this);
    }
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::append<std::move_iterator<llvm::Value **>,void>(uint64_t result, char *a2, char *a3)
{
  char v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *(void *)v3;
      v3 += 8;
      *v5++ = v6;
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 3);
  return result;
}

void AGCLLVMUserObject::handleGLIndirectSamplerFunction(AGCLLVMUserObject *this, llvm::Function *a2, unsigned int a3, unsigned int a4)
{
  v147[16] = *MEMORY[0x1E4F143B8];
  int v145 = (char *)v147;
  uint64_t v146 = 0x1000000000;
  uint64_t v4 = *((void *)a2 + 1);
  if (!v4) {
    return;
  }
  do
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v145, *(void *)(v4 + 24));
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4);
  uint64_t v7 = v145;
  if (!v146) {
    goto LABEL_237;
  }
  uint64_t v8 = &v145[8 * v146];
  uint64_t v128 = a3;
  uint64_t v130 = 32 * a3;
  unsigned int v9 = a4;
  int v126 = v8;
  do
  {
    uint64_t v10 = *(void *)v7;
    uint64_t v11 = *(void *)v7 - 32 * (*(_DWORD *)(*(void *)v7 + 20) & 0x7FFFFFF);
    if (v9) {
      uint64_t v12 = *(void *)(v11 + 32 * a4);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void *)(v11 + v130);
    if (*(unsigned char *)(v13 + 16) != 83) {
      goto LABEL_63;
    }
    uint64_t v14 = *(llvm::BasicBlock **)(v10 + 40);
    uint64_t v15 = *((void *)v14 + 1);
    if (v15)
    {
      uint64_t v16 = *((void *)v14 + 1);
      while (1)
      {
        uint64_t v17 = *(void *)(v16 + 24);
        unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
        BOOL v19 = v17 && v18 >= 0x1C;
        if (v19 && v18 - 29 <= 0xA) {
          break;
        }
        uint64_t v16 = *(void *)(v16 + 8);
        if (!v16)
        {
LABEL_52:
          while (1)
          {
            uint64_t v36 = *(void *)(v15 + 24);
            unsigned int v37 = *(unsigned __int8 *)(v36 + 16);
            BOOL v38 = v36 && v37 >= 0x1C;
            if (v38 && v37 - 29 < 0xB) {
              break;
            }
            uint64_t v15 = *(void *)(v15 + 8);
            if (!v15) {
              goto LABEL_61;
            }
          }
          if ((*(_DWORD *)(v13 + 20) & 0x7FFFFFF) != 1)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1CAC02000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "All predecessors of the indirect sampler call have an unconditional branch, may need more code changes to handle this", buf, 2u);
            }
            abort();
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v13);
          if (v12)
          {
            if (*(unsigned char *)(v12 + 16) == 83) {
              uint64_t v10 = v12;
            }
            else {
              uint64_t v10 = 0;
            }
            goto LABEL_62;
          }
          goto LABEL_63;
        }
      }
      uint64_t v21 = 0;
LABEL_21:
      uint64_t v22 = *(void *)(v17 + 40);
      uint64_t v23 = *(void *)(v22 + 40);
      if (v23 == v22 + 40
        || ((uint64_t v24 = v23 - 24, v23) ? (v25 = v23 - 24) : (v25 = 0),
            (unsigned int v26 = *(unsigned __int8 *)(v25 + 16) - 40, v27 = __CFADD__(v26, 11), v26 >= 0xFFFFFFF5)
          ? (uint64_t v28 = v24)
          : (uint64_t v28 = 0),
            v27 ? (BOOL v29 = *(unsigned char *)(v28 + 16) == 30) : (BOOL v29 = 0),
            !v29 || (*(_DWORD *)(v28 + 20) & 0x7FFFFFF) != 1))
      {
        uint64_t v21 = v22;
      }
      while (1)
      {
        uint64_t v16 = *(void *)(v16 + 8);
        if (!v16) {
          break;
        }
        uint64_t v17 = *(void *)(v16 + 24);
        unsigned int v30 = *(unsigned __int8 *)(v17 + 16);
        if (v17) {
          BOOL v31 = v30 >= 0x1C;
        }
        else {
          BOOL v31 = 0;
        }
        if (v31 && v30 - 29 < 0xB) {
          goto LABEL_21;
        }
      }
      if (!v21) {
        goto LABEL_52;
      }
      unint64_t v33 = *(void **)(v21 + 40);
      if (v33 == (void *)(v21 + 40))
      {
        long long v34 = 0;
      }
      else
      {
        long long v34 = v33 - 3;
        if (v33) {
          unsigned int v35 = v33 - 3;
        }
        else {
          unsigned int v35 = 0;
        }
        if (*((unsigned __int8 *)v35 + 16) - 29 >= 0xB) {
          long long v34 = 0;
        }
      }
      int v40 = *((_DWORD *)v34 + 5);
      if ((v40 & 0x7FFFFFF) != 0)
      {
        uint8x8_t v41 = (v40 & 0x40000000) != 0
            ? (llvm::Instruction **)*(v34 - 1)
            : (llvm::Instruction **)&v34[-4 * (v40 & 0x7FFFFFF)];
        BOOL v42 = *v41;
        if (*((unsigned char *)*v41 + 16) == 60)
        {
          uint64_t v43 = (unsigned char *)*((void *)v42 - 4);
          unsigned int v44 = *(_DWORD *)(*(void *)v43 + 8);
          if ((v44 & 0xFE) == 0x12) {
            unsigned int v44 = *(_DWORD *)(**(void **)(*(void *)v43 + 16) + 8);
          }
          if (v44 <= 0xFF && v43[16] == 59)
          {
            while (1)
            {
              uint64_t v45 = (llvm::Instruction *)(v33 - 3);
              if (!v33) {
                uint64_t v45 = 0;
              }
              if (v45 == v42) {
                break;
              }
              unint64_t v33 = (void *)*v33;
            }
            while (v33 != (void *)(v21 + 40))
            {
              if (v33) {
                uint64_t v46 = v33 - 3;
              }
              else {
                uint64_t v46 = 0;
              }
              if (v33 && *((unsigned char *)v46 + 16) == 61)
              {
                char v47 = (unsigned char *)*(v46 - 4);
                if (v47 == v43)
                {
                  llvm::Value::replaceAllUsesWith();
                  llvm::Instruction::eraseFromParent(v42);
                  llvm::ConstantFoldTerminator();
                  uint64_t v15 = *((void *)v14 + 1);
                  break;
                }
                unsigned int v48 = *(_DWORD *)(*(void *)v47 + 8);
                if ((v48 & 0xFE) == 0x12) {
                  unsigned int v48 = *(_DWORD *)(**(void **)(*(void *)v47 + 16) + 8);
                }
                if (v48 <= 0xFF && v47[16] != 59) {
                  break;
                }
              }
              unint64_t v33 = (void *)*v33;
            }
          }
        }
      }
      if (v15)
      {
        while (1)
        {
          uint64_t v49 = *(void *)(v15 + 24);
          unsigned int v50 = *(unsigned __int8 *)(v49 + 16);
          BOOL v51 = v49 && v50 >= 0x1C;
          if (v51 && v50 - 29 <= 0xA) {
            break;
          }
          uint64_t v15 = *(void *)(v15 + 8);
          if (!v15) {
            goto LABEL_135;
          }
        }
        do
        {
          uint64_t v53 = v15;
          do
          {
            uint64_t v15 = *(void *)(v15 + 8);
            if (!v15) {
              break;
            }
            uint64_t v54 = *(void *)(v15 + 24);
            unsigned int v55 = *(unsigned __int8 *)(v54 + 16);
            BOOL v56 = v54 && v55 >= 0x1C;
          }
          while (!v56 || v55 - 29 >= 0xB);
          uint64_t v58 = *(llvm::BasicBlock **)(*(void *)(v53 + 24) + 40);
          uint64_t v59 = *((void *)v58 + 1);
          if (v59)
          {
            while (1)
            {
              uint64_t v60 = *(void *)(v59 + 24);
              unsigned int v61 = *(unsigned __int8 *)(v60 + 16);
              BOOL v62 = v60 && v61 >= 0x1C;
              if (v62 && v61 - 29 < 0xB) {
                break;
              }
              uint64_t v59 = *(void *)(v59 + 8);
              if (!v59) {
                goto LABEL_128;
              }
            }
          }
          else
          {
LABEL_128:
            uint64_t v64 = *(void *)(*((void *)v58 + 7) + 80);
            if (v64) {
              uint64_t v65 = (llvm::BasicBlock *)(v64 - 24);
            }
            else {
              uint64_t v65 = 0;
            }
            if (v58 != v65)
            {
              llvm::BasicBlock::removePredecessor(v14, v58);
              if (!*((void *)v58 + 1)) {
                llvm::BasicBlock::eraseFromParent(v58);
              }
            }
          }
        }
        while (v15);
      }
LABEL_135:
      uint64_t v66 = v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF);
      uint64_t v67 = *(void *)(v66 + v130);
      if (v9)
      {
        if (*(unsigned char *)(v67 + 16) != 83 || v67 == 0) {
          goto LABEL_63;
        }
        uint64_t v69 = *(void *)(v66 + 32 * a4);
        if (v69)
        {
          if (*(unsigned char *)(v69 + 16) == 83) {
            int v70 = *(llvm::Instruction **)(v66 + 32 * a4);
          }
          else {
            int v70 = 0;
          }
          goto LABEL_150;
        }
      }
      else
      {
        if (*(unsigned char *)(v67 + 16) != 83 || v67 == 0) {
          goto LABEL_63;
        }
        uint64_t v69 = 0;
      }
      int v70 = 0;
LABEL_150:
      unint64_t v72 = 0;
      long long v139 = 0u;
      long long v140 = 0u;
      *(_OWORD *)std::string __p = 0u;
      uint64_t v133 = v137;
      uint64_t v134 = v137;
      uint64_t v135 = 4;
      uint64_t v73 = v10;
      int v136 = 0;
      while (1)
      {
        uint64_t v74 = llvm::CallBase::arg_end((llvm::CallBase *)v10);
        uint64_t v75 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
        if (v72 >= ((v74 - (v10 + 32 * (unint64_t)-(int)v75)) >> 5)) {
          break;
        }
        uint64_t v76 = *(void *)(v73 - 32 * v75);
        if (*(unsigned __int8 *)(v76 + 16) <= 0x1Bu) {
          unsigned int v77 = 0;
        }
        else {
          unsigned int v77 = (void *)v76;
        }
        v131[0] = v77;
        if (v77) {
          BOOL v78 = v77 == (void *)v67;
        }
        else {
          BOOL v78 = 1;
        }
        if (!v78 && v77 != (void *)v69 && (llvm::BasicBlock *)v77[5] == v14)
        {
          llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)buf, (llvm::SmallPtrSetImplBase *)&v133, v77);
          if (v143[0]) {
            std::deque<llvm::MDNode const*>::push_back(__p, v131);
          }
        }
        ++v72;
        v73 += 32;
      }
      uint64_t v80 = *((void *)&v140 + 1);
      if (*((void *)&v140 + 1))
      {
        unint64_t v81 = v140;
        do
        {
          uint64_t v82 = *(void *)(*(void *)((char *)__p[1] + ((v81 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v81 & 0x1FF));
          uint64_t v83 = *(_DWORD *)(v82 + 20) & 0x7FFFFFF;
          if (v83)
          {
            uint64_t v84 = 0;
            uint64_t v85 = 32 * v83;
            do
            {
              int v86 = *(_DWORD *)(v82 + 20);
              if ((v86 & 0x40000000) != 0) {
                uint64_t v87 = *(void *)(v82 - 8);
              }
              else {
                uint64_t v87 = v82 - 32 * (v86 & 0x7FFFFFF);
              }
              uint64_t v88 = *(void *)(v87 + v84);
              if (*(unsigned __int8 *)(v88 + 16) <= 0x1Bu) {
                uint64_t v89 = 0;
              }
              else {
                uint64_t v89 = (void *)v88;
              }
              v131[0] = v89;
              if (v89)
              {
                if ((llvm::BasicBlock *)v89[5] == v14)
                {
                  llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)buf, (llvm::SmallPtrSetImplBase *)&v133, v89);
                  if (v143[0]) {
                    std::deque<llvm::MDNode const*>::push_back(__p, v131);
                  }
                }
              }
              v84 += 32;
            }
            while (v85 != v84);
            uint64_t v80 = *((void *)&v140 + 1);
            unint64_t v81 = v140;
          }
          --v80;
          *(void *)&long long v140 = ++v81;
          *((void *)&v140 + 1) = v80;
          if (v81 >= 0x400)
          {
            operator delete(*(void **)__p[1]);
            unint64_t v81 = v140 - 512;
            __p[1] = (char *)__p[1] + 8;
            *(void *)&long long v140 = v140 - 512;
            uint64_t v80 = *((void *)&v140 + 1);
          }
        }
        while (v80);
      }
      __int16 v90 = (void *)((char *)v14 + 40);
      unsigned int v91 = (void *)*((void *)v14 + 6);
      if (v91 != (void *)((char *)v14 + 40))
      {
        do
        {
          if (HIDWORD(v135) == v136) {
            break;
          }
          uint64_t v92 = (void *)v91[1];
          if (v91) {
            uint64_t v93 = v91 - 3;
          }
          else {
            uint64_t v93 = 0;
          }
          if (llvm::SmallPtrSetImplBase::erase_imp((llvm::SmallPtrSetImplBase *)&v133, v93)) {
            llvm::Instruction::moveBefore();
          }
          unsigned int v91 = v92;
        }
        while (v92 != v90);
      }
      uint64_t v94 = (AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      FirstNonPHI = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v10 + 40));
      llvm::IRBuilderBase::SetInsertPoint(v94, FirstNonPHI);
      unsigned int v96 = (AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      uint64_t v97 = *(llvm::Type **)v10;
      int v98 = *(_DWORD *)(v67 + 20) & 0x7FFFFFF;
      __int16 v144 = 257;
      PHI = llvm::IRBuilderBase::CreatePHI(v96, v97, v98, (const llvm::Twine *)buf);
      unint64_t v100 = 0;
      *(void *)buf = v143;
      uint64_t v142 = 0x1000000000;
      for (uint64_t i = v10; ; i += 32)
      {
        uint64_t v102 = llvm::CallBase::arg_end((llvm::CallBase *)v10);
        uint64_t v103 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
        if (v100 >= ((v102 - (v10 + 32 * (unint64_t)-(int)v103)) >> 5)) {
          break;
        }
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)buf, *(void *)(i - 32 * v103));
        ++v100;
      }
      int v104 = *(_DWORD *)(v67 + 20);
      if ((v104 & 0x40000000) != 0)
      {
        uint64_t v106 = *(void *)(v67 - 8);
        uint64_t v107 = *(unsigned int *)(v67 + 60);
        int v108 = (llvm::BasicBlock **)(v106 + 32 * v107);
        uint64_t v105 = v104 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v105 = v104 & 0x7FFFFFF;
        uint64_t v106 = v67 - 32 * v105;
        uint64_t v107 = *(unsigned int *)(v67 + 60);
        int v108 = (llvm::BasicBlock **)(v106 + 32 * v107);
      }
      uint64_t v109 = v106 + 32 * v107 + 8 * v105;
      while (v108 != (llvm::BasicBlock **)v109)
      {
        int v110 = *v108;
        long long v111 = (llvm::BasicBlock *)*((void *)*v108 + 5);
        if (v111 == (llvm::BasicBlock *)((char *)*v108 + 40))
        {
          int v114 = 0;
        }
        else
        {
          uint64_t v112 = (llvm::BasicBlock *)((char *)v111 - 24);
          if (v111) {
            uint64_t v113 = (uint64_t)v111 - 24;
          }
          else {
            uint64_t v113 = 0;
          }
          if (*(unsigned __int8 *)(v113 + 16) - 29 >= 0xB) {
            int v114 = 0;
          }
          else {
            int v114 = v112;
          }
        }
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v114);
        IncomingValueForBlocunint64_t k = llvm::PHINode::getIncomingValueForBlock(v67, (uint64_t)v110);
        uint64_t v116 = IncomingValueForBlock;
        if (v70)
        {
          uint64_t v117 = llvm::PHINode::getIncomingValueForBlock((uint64_t)v70, (uint64_t)v110);
          *(void *)(*(void *)buf + 8 * v128) = v116;
          if (v117) {
            *(void *)(*(void *)buf + 8 * a4) = v117;
          }
        }
        else
        {
          *(void *)(*(void *)buf + 8 * v128) = IncomingValueForBlock;
        }
        unint64_t v118 = (char *)this + *(void *)(*(void *)this - 24) + 40;
        __int16 v132 = 257;
        unsigned int v119 = llvm::IRBuilderBase::CreateCall((uint64_t)v118, *((void *)a2 + 3), (uint64_t)a2, *(uint64_t *)buf, v142, (uint64_t)v131);
        llvm::PHINode::addIncoming(PHI, v119, v110);
        ++v108;
      }
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent((llvm::Instruction *)v10);
      if (!*(void *)(v67 + 8)) {
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v67);
      }
      if (v70 && !*((void *)v70 + 1)) {
        llvm::Instruction::eraseFromParent(v70);
      }
      if (*(unsigned char **)buf != v143) {
        free(*(void **)buf);
      }
      if (v134 != v133) {
        free(v134);
      }
      unsigned int v120 = (void **)__p[1];
      unsigned int v121 = (void **)v139;
      *((void *)&v140 + 1) = 0;
      unint64_t v122 = v139 - (unint64_t)__p[1];
      if ((unint64_t)v139 - (unint64_t)__p[1] >= 0x11)
      {
        do
        {
          operator delete(*v120);
          unsigned int v121 = (void **)v139;
          unsigned int v120 = (void **)((char *)__p[1] + 8);
          __p[1] = v120;
          unint64_t v122 = v139 - (void)v120;
        }
        while ((void)v139 - (void)v120 > 0x10uLL);
      }
      unint64_t v123 = v122 >> 3;
      if (v123 == 1)
      {
        uint64_t v124 = 256;
      }
      else
      {
        if (v123 != 2) {
          goto LABEL_230;
        }
        uint64_t v124 = 512;
      }
      *(void *)&long long v140 = v124;
LABEL_230:
      if (v120 != v121)
      {
        do
        {
          int v125 = *v120++;
          operator delete(v125);
        }
        while (v120 != v121);
        if ((void *)v139 != __p[1]) {
          *(void *)&long long v139 = v139 + (((unint64_t)__p[1] - v139 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
      }
      if (__p[0]) {
        operator delete(__p[0]);
      }
      unsigned int v9 = a4;
      uint64_t v8 = v126;
      goto LABEL_63;
    }
LABEL_61:
    llvm::UndefValue::get();
LABEL_62:
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent((llvm::Instruction *)v10);
LABEL_63:
    v7 += 8;
  }
  while (v7 != v8);
  uint64_t v7 = v145;
LABEL_237:
  if (v7 != (char *)v147) {
    free(v7);
  }
}

uint64_t llvm::PHINode::getIncomingValueForBlock(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  uint64_t v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = a1 - 32 * v3;
      if ((v2 & 0x40000000) != 0) {
        uint64_t v5 = *(void *)(a1 - 8);
      }
      if (*(void *)(v5 + 32 * *(unsigned int *)(a1 + 60) + 8 * v4) == a2) {
        break;
      }
      if (v3 == ++v4) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    LODWORD(v4) = -1;
  }
  if ((v2 & 0x40000000) != 0) {
    uint64_t v6 = *(void *)(a1 - 8);
  }
  else {
    uint64_t v6 = a1 - 32 * v3;
  }
  return *(void *)(v6 + 32 * v4);
}

void AGCLLVMUserObject::setupIndirectSamplersGL(AGCLLVMUserObject *this)
{
  AGCLLVMUserObject::getSampleFunctionMap(this);
  AGCLLVMUserObject::getDimensionFunctionMap(v2);
  uint64_t v3 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v4 = v3 + 24;
  uint64_t v5 = *(void *)(v3 + 32);
  if (v5 != v3 + 24)
  {
    do
    {
      uint64_t v6 = (llvm::Value *)(v5 - 56);
      BOOL v9 = v5 == 0;
      uint64_t v5 = *(void *)(v5 + 8);
      if (v9) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = v6;
      }
      llvm::Value::getName(v7);
      int Key = llvm::StringMapImpl::FindKey();
      BOOL v9 = Key == -1 || Key == (unint64_t)dword_1EBD0EB78;
      if (v9)
      {
        llvm::Value::getName(v7);
        int v10 = llvm::StringMapImpl::FindKey();
        if (v10 == -1 || v10 == (unint64_t)dword_1EBD0EAA0) {
          continue;
        }
        uint64_t v14 = this;
        uint64_t v15 = v7;
        unsigned int v12 = 0;
        unsigned int v13 = 0;
      }
      else
      {
        uint64_t v11 = *(void *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map + 8 * Key);
        unsigned int v12 = *(unsigned __int8 *)(v11 + 38);
        unsigned int v13 = *(unsigned __int8 *)(v11 + 39);
        uint64_t v14 = this;
        uint64_t v15 = v7;
      }
      AGCLLVMUserObject::handleGLIndirectSamplerFunction(v14, v15, v12, v13);
    }
    while (v5 != v4);
  }
}

void AGCLLVMUserObject::remapDriverBindpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = *(void *)(a1 + 176);
  if (*(_WORD *)(v4 + 18))
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 176));
    uint64_t v6 = v3[22];
    uint64_t v5 = *(void *)(v4 + 88);
    if (*(_WORD *)(v6 + 18)) {
      llvm::Function::BuildLazyArguments((llvm::Function *)v3[22]);
    }
    uint64_t v4 = v6;
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 88);
  }
  uint64_t v80 = *(void *)(v4 + 88) + 40 * *(void *)(v4 + 96);
  if (v5 == v80) {
    return;
  }
  BOOL v78 = v3 + 1;
  uint64_t v79 = a2;
  unint64_t v81 = v3;
  do
  {
    uint64_t v7 = *(void *)(v3[11] + 8 * *(unsigned int *)(v5 + 32));
    uint64_t v82 = v5;
    if (*(void *)(v5 + 8)) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_116;
    }
    uint64_t v9 = *(void *)(v81[22] + 80);
    uint64_t v10 = v9 ? v9 - 24 : 0;
    uint64_t v11 = *(void *)(v10 + 40);
    unsigned int v12 = v11 ? (llvm::Instruction *)(v11 - 24) : 0;
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v81 + *(void *)(*v81 - 24) + 40), v12);
    if (!isStringMDNode(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.buffer")
      && !isStringMDNode(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.indirect_buffer"))
    {
      goto LABEL_116;
    }
    LODWORD(v13) = *(_DWORD *)(v7 + 8);
    if (v13 >= 3)
    {
      for (unsigned int i = 2; i < v13; ++i)
      {
        BOOL v15 = isStringMDNode(*(llvm::MDString **)(v7 - 8 * v13 + 8 * i), "air.arg_name");
        uint64_t v13 = *(unsigned int *)(v7 + 8);
        if (v15)
        {
          uint64_t v16 = *(llvm::MDString **)(v7 - 8 * v13 + 8 * (i + 1));
          if (v16 && !*(unsigned char *)v16)
          {
            uint64_t String = (void *)llvm::MDString::getString(v16);
            size_t v17 = v61;
            goto LABEL_28;
          }
          i += 2;
        }
      }
    }
    size_t v17 = 0;
    uint64_t String = 0;
LABEL_28:
    int Key = llvm::StringMapImpl::FindKey();
    if (Key == -1) {
      uint64_t v20 = *(unsigned int *)(a2 + 8);
    }
    else {
      uint64_t v20 = Key;
    }
    uint64_t v21 = *(void *)(*(void *)a2 + 8 * v20);
    switch(*(_DWORD *)(v21 + 12))
    {
      case 0:
        AGCLLVMUserObject::replaceBufferInputArgument((uint64_t)v81, (uint64_t *)v82, *(_DWORD *)(v82 + 32), v7, *(_DWORD *)(v21 + 16));
        goto LABEL_116;
      case 1:
        std::string::basic_string[abi:nn180100]<0>(&v83, "agc.");
        if (String)
        {
          std::string::basic_string[abi:nn180100](&__p, String, v17);
          std::string::size_type v22 = HIBYTE(v87);
          uint64_t v23 = (void **)__p;
          std::string::size_type v24 = v86;
        }
        else
        {
          std::string::size_type v24 = 0;
          uint64_t v23 = 0;
          std::string::size_type v22 = 0;
          std::string __p = 0;
          std::string::size_type v86 = 0;
          uint64_t v87 = 0;
        }
        if ((v22 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = v23;
        }
        if ((v22 & 0x80u) == 0) {
          std::string::size_type v63 = v22;
        }
        else {
          std::string::size_type v63 = v24;
        }
        uint64_t v64 = std::string::append(&v83, (const std::string::value_type *)p_p, v63);
        std::string::size_type v65 = v64->__r_.__value_.__r.__words[2];
        long long v88 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        uint64_t v89 = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v87) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        char v66 = 1;
        uint64_t v67 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        uint64_t v68 = &v88;
        if (v89 < 0) {
          uint64_t v68 = (long long *)v88;
        }
        __int16 v84 = 257;
        if (*(unsigned char *)v68)
        {
          v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
          char v66 = 3;
        }
        LOBYTE(v84) = v66;
        llvm::GlobalVariable::GlobalVariable();
        *((unsigned char *)v67 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        uint64_t v69 = (char *)v81 + *(void *)(*v81 - 24);
        uint64_t v70 = *((void *)v69 + 47);
        uint64_t v71 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v69 + 32), v67);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v70, v71);
        uint64_t v72 = (uint64_t)v78 + *(void *)(*v81 - 24);
        __int16 v84 = 257;
        uint64_t v74 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v67, v73);
        llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v72 + 32), v74, (uint64_t)v67, 0, (uint64_t)&v83);
        uint64_t v75 = *(void *)(v82 + 8);
        if (v75)
        {
          do
          {
            uint64_t v76 = *(void *)(v75 + 8);
            unsigned int v77 = *(llvm::Instruction **)(v75 + 24);
            llvm::Value::replaceAllUsesWith();
            llvm::Instruction::eraseFromParent(v77);
            uint64_t v75 = v76;
          }
          while (v76);
        }
        a2 = v79;
        if (SHIBYTE(v89) < 0) {
          operator delete((void *)v88);
        }
        goto LABEL_116;
      case 2:
        llvm::ConstantInt::get();
        uint64_t v25 = *(void *)(v82 + 8);
        if (v25)
        {
          do
          {
            uint64_t v26 = *(void *)(v25 + 8);
            BOOL v27 = *(llvm::Instruction **)(v25 + 24);
            llvm::Value::replaceAllUsesWith();
            llvm::Instruction::eraseFromParent(v27);
            uint64_t v25 = v26;
          }
          while (v26);
        }
        goto LABEL_116;
      case 3:
        *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = 0uLL;
        v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83.__r_.__value_.__l.__size_;
        uint64_t v28 = (char *)operator new(8uLL);
        *(void *)uint64_t v28 = v82;
        BOOL v29 = v28 + 8;
        unsigned int v30 = v28 + 8;
        break;
      default:
        goto LABEL_116;
    }
    do
    {
      uint64_t v31 = *((void *)v30 - 1);
      v30 -= 8;
      for (uint64_t j = *(void *)(v31 + 8); j; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v33 = *(void *)(j + 24);
        if (v30 >= v29)
        {
          uint64_t v34 = (v30 - v28) >> 3;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61) {
            abort();
          }
          if ((v29 - v28) >> 2 > v35) {
            unint64_t v35 = (v29 - v28) >> 2;
          }
          if ((unint64_t)(v29 - v28) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36) {
            unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v36);
          }
          else {
            uint64_t v37 = 0;
          }
          BOOL v38 = (char *)(v36 + 8 * v34);
          *(void *)BOOL v38 = v33;
          uint64_t v39 = v38 + 8;
          while (v30 != v28)
          {
            uint64_t v40 = *((void *)v30 - 1);
            v30 -= 8;
            *((void *)v38 - 1) = v40;
            v38 -= 8;
          }
          BOOL v29 = (char *)(v36 + 8 * v37);
          if (v28) {
            operator delete(v28);
          }
          uint64_t v28 = v38;
          unsigned int v30 = v39;
        }
        else
        {
          *(void *)unsigned int v30 = v33;
          v30 += 8;
        }
        unint64_t v41 = *(void *)(j + 24);
        std::string::size_type size = v83.__r_.__value_.__l.__size_;
        p_std::string::size_type size = &v83.__r_.__value_.__l.__size_;
        unsigned int v44 = &v83.__r_.__value_.__l.__size_;
        if (v83.__r_.__value_.__l.__size_)
        {
          while (1)
          {
            while (1)
            {
              unsigned int v44 = (std::string::size_type *)size;
              unint64_t v45 = *(void *)(size + 32);
              if (v41 >= v45) {
                break;
              }
              std::string::size_type size = *v44;
              p_std::string::size_type size = v44;
              if (!*v44) {
                goto LABEL_64;
              }
            }
            if (v45 >= v41) {
              break;
            }
            std::string::size_type size = v44[1];
            if (!size)
            {
              p_std::string::size_type size = v44 + 1;
              goto LABEL_64;
            }
          }
        }
        else
        {
LABEL_64:
          uint64_t v46 = (uint64_t *)operator new(0x28uLL);
          void v46[4] = v41;
          *uint64_t v46 = 0;
          v46[1] = 0;
          v46[2] = (uint64_t)v44;
          *p_std::string::size_type size = (std::string::size_type)v46;
          if (*(void *)v83.__r_.__value_.__l.__data_)
          {
            v83.__r_.__value_.__r.__words[0] = *(void *)v83.__r_.__value_.__l.__data_;
            char v47 = (uint64_t *)*p_size;
          }
          else
          {
            char v47 = v46;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v83.__r_.__value_.__l.__size_, v47);
          ++v83.__r_.__value_.__r.__words[2];
        }
      }
    }
    while (v28 != v30);
    unsigned int v48 = (std::string::__raw *)v83.__r_.__value_.__r.__words[0];
    a2 = v79;
    if ((std::string::size_type *)v83.__r_.__value_.__l.__data_ == &v83.__r_.__value_.__r.__words[1]) {
      goto LABEL_93;
    }
    do
    {
      std::string::size_type v49 = v48[1].__words[1];
      int v50 = *(_DWORD *)(v49 + 20);
      if ((v50 & 0x40000000) != 0)
      {
        std::string::size_type v52 = *(void *)(v49 - 8);
        uint64_t v51 = v50 & 0x7FFFFFF;
        if (!v51) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v51 = v50 & 0x7FFFFFF;
        std::string::size_type v52 = v49 - 32 * v51;
        if (!v51) {
          goto LABEL_80;
        }
      }
      uint64_t v53 = 32 * v51;
      uint64_t v54 = (void **)(v52 + 16);
      do
      {
        if (*(v54 - 2))
        {
          **uint64_t v54 = *(v54 - 1);
          uint64_t v55 = (uint64_t)*(v54 - 1);
          if (v55) {
            *(void *)(v55 + 16) = *v54;
          }
        }
        *(v54 - 2) = 0;
        v54 += 4;
        v53 -= 32;
      }
      while (v53);
LABEL_80:
      BOOL v56 = (std::string *)v48->__words[1];
      if (v56)
      {
        do
        {
          unint64_t v57 = v56;
          BOOL v56 = (std::string *)v56->__r_.__value_.__r.__words[0];
        }
        while (v56);
      }
      else
      {
        do
        {
          unint64_t v57 = (std::string *)v48->__words[2];
          BOOL v8 = v57->__r_.__value_.__r.__words[0] == (void)v48;
          unsigned int v48 = (std::string::__raw *)v57;
        }
        while (!v8);
      }
      unsigned int v48 = (std::string::__raw *)v57;
    }
    while (v57 != (std::string *)&v83.__r_.__value_.__r.__words[1]);
    std::string::size_type v58 = v83.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v83.__r_.__value_.__l.__data_ != &v83.__r_.__value_.__r.__words[1])
    {
      do
      {
        llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v58 + 32));
        uint64_t v59 = *(std::string **)(v58 + 8);
        if (v59)
        {
          do
          {
            uint64_t v60 = v59;
            uint64_t v59 = (std::string *)v59->__r_.__value_.__r.__words[0];
          }
          while (v59);
        }
        else
        {
          do
          {
            uint64_t v60 = *(std::string **)(v58 + 16);
            BOOL v8 = v60->__r_.__value_.__r.__words[0] == v58;
            std::string::size_type v58 = (std::string::size_type)v60;
          }
          while (!v8);
        }
        std::string::size_type v58 = (std::string::size_type)v60;
      }
      while (v60 != (std::string *)&v83.__r_.__value_.__r.__words[1]);
    }
LABEL_93:
    if (v28) {
      operator delete(v28);
    }
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy((void *)v83.__r_.__value_.__l.__size_);
LABEL_116:
    uint64_t v3 = v81;
    uint64_t v5 = v82 + 40;
  }
  while (v82 + 40 != v80);
}

uint64_t AGCLLVMUserObject::detectTextureWrites(AGCLLVMUserObject *this)
{
  AGCLLVMUserObject::getSampleFunctionMap(this);
  uint64_t v2 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v3 = v2 + 24;
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 == v2 + 24) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = v4 ? (llvm::Value *)(v4 - 56) : 0;
    uint64_t v4 = *(void *)(v4 + 8);
    llvm::Value::getName(v5);
    int Key = llvm::StringMapImpl::FindKey();
    BOOL v7 = Key == -1 || Key == (unint64_t)dword_1EBD0EB78;
    if (!v7
      && *(_DWORD *)(*(void *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map + 8 * Key) + 8) == 3
      && *((void *)v5 + 1))
    {
      break;
    }
    if (v4 == v3) {
      return 0;
    }
  }
  return 1;
}

uint64_t AGCLLVMUserObject::isThreadgroupMemoryUsed(AGCLLVMUserObject *this)
{
  uint64_t v1 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v2 = v1 + 8;
  for (uint64_t i = *(void *)(v1 + 16); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v2) {
      return 0;
    }
    uint64_t v4 = (uint64_t *)(i - 56);
    if (!i) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *v4;
    if (*v4)
    {
      int v6 = *(_DWORD *)(v5 + 8);
      if ((v6 & 0xFE) == 0x12) {
        int v6 = *(_DWORD *)(**(void **)(v5 + 16) + 8);
      }
      if ((v6 & 0xFFFFFF00) == 0x300 && v4[1]) {
        break;
      }
    }
  }
  return 1;
}

uint64_t AGCLLVMUserObject::getFragmentBuiltinEncoderStateType(AGCLLVMUserObject *this)
{
  return llvm::StructType::get();
}

uint64_t AGCLLVMUserVertexShader::buildGin1122WA(AGCLLVMUserVertexShader *this)
{
  uint64_t Function = llvm::Module::getFunction();
  if (Function)
  {
    uint64_t v2 = Function;
    llvm::PointerType::get();
    llvm::Function::addFnAttr();
    *(_DWORD *)(v2 + 32) = *(_DWORD *)(v2 + 32) & 0xFFFFBFC0 | 0x4007;
    operator new();
  }
  return 0;
}

llvm::Value *AGCLLVMUserVertexShader::getVertexAmpId(void *a1, int a2)
{
  uint64_t v3 = 1496;
  if (a2)
  {
    uint64_t v4 = 85;
  }
  else
  {
    uint64_t v3 = 1488;
    uint64_t v4 = 84;
  }
  uint64_t v5 = *(const char **)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + v3);
  uint64_t DriverGlobalConstant = AGCLLVMUserVertexShader::getDriverGlobalConstant(a1, (llvm::Value *)v4);
  if (v5) {
    size_t v6 = strlen(v5);
  }
  else {
    size_t v6 = 0;
  }
  uint64_t v7 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1 + *(void *)(*a1 - 24) + 32, (uint64_t)v5, v6, *(void *)((char *)a1 + *(void *)(*a1 - 24) + 232), *(void *)((char *)a1 + *(void *)(*a1 - 24) + 232));
  uint64_t v8 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
  unsigned char v10[16] = 257;
  return llvm::IRBuilderBase::CreateCall(v8, *(void *)(v7 + 24), v7, (uint64_t)&DriverGlobalConstant, 1, (uint64_t)v10);
}

uint64_t AGCLLVMUserVertexShader::getDriverGlobalConstant(void *a1, llvm::Value *a2)
{
  uint64_t v3 = &a1[3 * a2];
  uint64_t v4 = (llvm::ValueHandleBase *)(v3 + 758);
  if (!v3[760])
  {
    uint64_t v5 = a2;
    size_t v6 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    uint64_t v7 = AGCShared::EnumNamesConstantType(void)::names[v5];
    if (*v7)
    {
      v16[0] = "agc.driver_constants.";
      void v16[2] = v7;
      __int16 v8 = 771;
    }
    else
    {
      v16[0] = "agc.driver_constants.";
      __int16 v8 = 259;
    }
    __int16 v17 = v8;
    llvm::GlobalVariable::GlobalVariable();
    *((unsigned char *)v6 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    uint64_t v9 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v10 = *((void *)v9 + 47);
    uint64_t v11 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v9 + 32), v6);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v10, v11);
    llvm::ValueHandleBase::operator=(v4, (uint64_t)v6);
  }
  unsigned int v12 = (void *)((char *)a1 + *(void *)(*a1 - 24));
  uint64_t v13 = (llvm::Type **)*((void *)v4 + 2);
  __int16 v17 = 257;
  uint64_t v14 = AGCLLVMBuilder::tryDeducePointeeType(v13, a2);
  return llvm::IRBuilderBase::CreateAlignedLoad(v12 + 5, v14, (uint64_t)v13, 0, (uint64_t)v16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::initEmpty(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 48 * v1;
    uint64_t result = *(void *)result + 8;
    do
    {
      uint64_t v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_1F25C63F8;
      *((void *)v4 + 3) = v9;
      uint64_t v5 = (char *)v4 + 40;
      uint64_t result = (uint64_t)v4 + 48;
      v2 += 48;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

void *llvm::ValueMap<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  uint64_t v7 = &unk_1F25C63F8;
  uint64_t v10 = a1;
  uint64_t v11 = 0;
  char v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  uint64_t v4 = v11;
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, (uint64_t)v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 5;
}

uint64_t llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v12, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v14 = v4;
  BOOL v19 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v13, &v19);
  if (result) {
    size_t v6 = v19;
  }
  else {
    size_t v6 = (void *)(*(void *)v4 + 48 * v4[2].u32[0]);
  }
  uint64_t v7 = v14;
  if ((void *)(*(void *)v14 + 48 * v14[2].u32[0]) != v6)
  {
    uint64_t v8 = v6[5];
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -8192;
    uint64_t v22 = 0;
    BOOL v19 = &unk_1F25C63F8;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 1), v20);
    uint64_t v9 = v21;
    void v6[4] = v22;
    if (v9 != -8192 && v9 != -4096 && v9) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    uint64_t v10 = (uint64_t)v14;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v15, a2);
    BOOL v15 = &unk_1F25C63F8;
    uint64_t v18 = v10;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v20, (LODWORD(v16[0]) >> 1) & 3, v16);
    BOOL v19 = &unk_1F25C63F8;
    uint64_t v22 = v18;
    uint64_t v23 = v8;
    uint64_t v24 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)v10, *(_DWORD *)(v10 + 16), v21, &v24);
    if ((result & 1) == 0)
    {
      uint64_t v11 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>>(v10, (uint64_t)&v19, v24);
      uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v11 + 1), v20);
      v11[4] = v22;
      v11[5] = v23;
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    if (v17 != -8192 && v17 != -4096 && v17) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
    }
  }
  if (v13 != -8192 && v13 != -4096)
  {
    if (v13) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x1CB79F270]((void *)v8, 48 * v8, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::initEmpty(a1);
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -4096;
    uint64_t v22 = 0;
    uint64_t v18 = 0;
    BOOL v19 = &unk_1F25C63F8;
    v16[0] = 2;
    v16[1] = 0;
    uint64_t v17 = -8192;
    if (v3)
    {
      uint64_t v9 = (uint64_t *)((char *)v4 + 24);
      uint64_t v10 = 48 * v3;
      do
      {
        uint64_t v11 = *v9;
        if (*v9 != v21 && v11 != v17)
        {
          uint64_t v23 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v23);
          uint64_t v13 = v23;
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v23 + 8), v9 - 2);
          *(void *)(v13 + 32) = v9[1];
          *(void *)(v13 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v9[2];
          ++*(_DWORD *)(a1 + 8);
          uint64_t v11 = *v9;
        }
        if (v11 != -8192 && v11 != -4096 && v11 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
        }
        v9 += 6;
        v10 -= 48;
      }
      while (v10);
      if (v17 != -8192 && v17 != -4096 && v17) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
      }
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    return llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::initEmpty(a1);
  }
}

uint64_t llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v9 = v2;
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if (result)
  {
    uint64_t v4 = v10;
    v11[0] = 2;
    v11[1] = 0;
    uint64_t v12 = -8192;
    uint64_t v13 = 0;
    uint64_t v10 = &unk_1F25C63F8;
    uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v11);
    uint64_t v5 = v12;
    v4[4] = v13;
    if (v5 != -8192 && v5 != -4096 && v5) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  return result;
}

unsigned int *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *result;
  if (*a2 >= *result && (v4 < v3 || *((void *)a2 + 1) >= *((void *)result + 1)))
  {
    unsigned int v8 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v8) {
        return result;
      }
      unint64_t v10 = *((void *)a3 + 1);
      unint64_t v9 = *((void *)a2 + 1);
      if (v10 >= v9) {
        return result;
      }
    }
    else
    {
      unint64_t v9 = *((void *)a2 + 1);
      unint64_t v10 = *((void *)a3 + 1);
    }
    *a2 = v8;
    *a3 = v3;
    *((void *)a2 + 1) = v10;
    *((void *)a3 + 1) = v9;
    unsigned int v11 = *a2;
    unsigned int v12 = *result;
    if (*a2 >= *result)
    {
      if (v12 < v11) {
        return result;
      }
      unint64_t v14 = *((void *)a2 + 1);
      unint64_t v13 = *((void *)result + 1);
      if (v14 >= v13) {
        return result;
      }
    }
    else
    {
      unint64_t v13 = *((void *)result + 1);
      unint64_t v14 = *((void *)a2 + 1);
    }
    *uint64_t result = v11;
    *a2 = v12;
    *((void *)result + 1) = v14;
    *((void *)a2 + 1) = v13;
    return result;
  }
  unsigned int v5 = *a3;
  if (*a3 < v3)
  {
    unint64_t v6 = *((void *)a3 + 1);
LABEL_6:
    *uint64_t result = v5;
    *a3 = v4;
    uint64_t v7 = *((void *)result + 1);
    *((void *)result + 1) = v6;
    *((void *)a3 + 1) = v7;
    return result;
  }
  if (v3 >= v5)
  {
    unint64_t v6 = *((void *)a3 + 1);
    unint64_t v15 = *((void *)a2 + 1);
    if (v6 < v15) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v15 = *((void *)a2 + 1);
  }
  *uint64_t result = v3;
  *a2 = v4;
  unint64_t v16 = *((void *)result + 1);
  *((void *)result + 1) = v15;
  *((void *)a2 + 1) = v16;
  unsigned int v17 = *a3;
  if (*a3 < v4)
  {
    unint64_t v18 = *((void *)a3 + 1);
LABEL_24:
    *a2 = v17;
    *a3 = v4;
    *((void *)a2 + 1) = v18;
    *((void *)a3 + 1) = v16;
    return result;
  }
  if (v4 >= v17)
  {
    unint64_t v18 = *((void *)a3 + 1);
    if (v18 < v16) {
      goto LABEL_24;
    }
  }
  return result;
}

unsigned int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  unsigned int v9 = *(_DWORD *)a4;
  unsigned int v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v10 < v9) {
      return result;
    }
    unint64_t v12 = *(void *)(a4 + 8);
    unint64_t v11 = *(void *)(a3 + 8);
    if (v12 >= v11) {
      return result;
    }
  }
  else
  {
    unint64_t v11 = *(void *)(a3 + 8);
    unint64_t v12 = *(void *)(a4 + 8);
  }
  *(_DWORD *)a3 = v9;
  *(_DWORD *)a4 = v10;
  *(void *)(a3 + 8) = v12;
  *(void *)(a4 + 8) = v11;
  unsigned int v13 = *(_DWORD *)a3;
  unsigned int v14 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v14 < v13) {
      return result;
    }
    unint64_t v16 = *(void *)(a3 + 8);
    unint64_t v15 = *(void *)(a2 + 8);
    if (v16 >= v15) {
      return result;
    }
  }
  else
  {
    unint64_t v15 = *(void *)(a2 + 8);
    unint64_t v16 = *(void *)(a3 + 8);
  }
  *(_DWORD *)a2 = v13;
  *(_DWORD *)a3 = v14;
  *(void *)(a2 + 8) = v16;
  *(void *)(a3 + 8) = v15;
  unsigned int v17 = *(_DWORD *)a2;
  unsigned int v18 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    unint64_t v19 = *(void *)(a1 + 8);
    unint64_t v20 = *(void *)(a2 + 8);
LABEL_15:
    *(_DWORD *)a1 = v17;
    *(_DWORD *)a2 = v18;
    *(void *)(a1 + 8) = v20;
    *(void *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    unint64_t v20 = *(void *)(a2 + 8);
    unint64_t v19 = *(void *)(a1 + 8);
    if (v20 < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

unsigned int *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(a1, a2, a3, a4);
  unsigned int v11 = *a5;
  unsigned int v12 = *(_DWORD *)a4;
  if (*a5 >= *(_DWORD *)a4)
  {
    if (v12 < v11) {
      return result;
    }
    unint64_t v14 = *((void *)a5 + 1);
    unint64_t v13 = *(void *)(a4 + 8);
    if (v14 >= v13) {
      return result;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a4 + 8);
    unint64_t v14 = *((void *)a5 + 1);
  }
  *(_DWORD *)a4 = v11;
  *a5 = v12;
  *(void *)(a4 + 8) = v14;
  *((void *)a5 + 1) = v13;
  unsigned int v15 = *(_DWORD *)a4;
  unsigned int v16 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v16 < v15) {
      return result;
    }
    unint64_t v18 = *(void *)(a4 + 8);
    unint64_t v17 = *(void *)(a3 + 8);
    if (v18 >= v17) {
      return result;
    }
  }
  else
  {
    unint64_t v17 = *(void *)(a3 + 8);
    unint64_t v18 = *(void *)(a4 + 8);
  }
  *(_DWORD *)a3 = v15;
  *(_DWORD *)a4 = v16;
  *(void *)(a3 + 8) = v18;
  *(void *)(a4 + 8) = v17;
  unsigned int v19 = *(_DWORD *)a3;
  unsigned int v20 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v20 < v19) {
      return result;
    }
    unint64_t v22 = *(void *)(a3 + 8);
    unint64_t v21 = *(void *)(a2 + 8);
    if (v22 >= v21) {
      return result;
    }
  }
  else
  {
    unint64_t v21 = *(void *)(a2 + 8);
    unint64_t v22 = *(void *)(a3 + 8);
  }
  *(_DWORD *)a2 = v19;
  *(_DWORD *)a3 = v20;
  *(void *)(a2 + 8) = v22;
  *(void *)(a3 + 8) = v21;
  unsigned int v23 = *(_DWORD *)a2;
  unsigned int v24 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    unint64_t v25 = *(void *)(a1 + 8);
    unint64_t v26 = *(void *)(a2 + 8);
LABEL_9:
    *(_DWORD *)a1 = v23;
    *(_DWORD *)a2 = v24;
    *(void *)(a1 + 8) = v26;
    *(void *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    unint64_t v26 = *(void *)(a2 + 8);
    unint64_t v25 = *(void *)(a1 + 8);
    if (v26 < v25) {
      goto LABEL_9;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(_DWORD *)(a2 - 16);
      unsigned int v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        unint64_t v8 = *(void *)(a1 + 8);
        unint64_t v9 = *(void *)(a2 - 8);
LABEL_30:
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        *(void *)(a1 + 8) = v9;
        *(void *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        unint64_t v9 = *(void *)(a2 - 8);
        unint64_t v8 = *(void *)(a1 + 8);
        if (v9 < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(a1, a1 + 16, a1 + 32, a1 + 48, (unsigned int *)(a2 - 16));
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  unsigned int v14 = *(_DWORD *)v11;
  unsigned int v15 = *(_DWORD *)v10;
  if (*(_DWORD *)v11 >= *(_DWORD *)v10)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(v10 + 8);
    if (v16 >= v17) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(v10 + 8);
  }
  *(_DWORD *)uint64_t v11 = v15;
  *(void *)(v11 + 8) = v17;
  uint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    unsigned int v21 = *(_DWORD *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        uint64_t v18 = v10;
        goto LABEL_20;
      }
      unint64_t v22 = *(void *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        uint64_t v18 = a1 + v19 + 32;
LABEL_20:
        *(_DWORD *)uint64_t v18 = v14;
        *(void *)(v18 + 8) = v16;
        if (++v13 == 8) {
          return v11 + 16 == a2;
        }
LABEL_21:
        uint64_t v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v22 = *(void *)(v20 + 24);
    }
    v10 -= 16;
    *(_DWORD *)(v20 + 32) = v21;
    *(void *)(a1 + v19 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

llvm::Value *AGCLLVMUserVertexShader::createVIRead(AGCLLVMUserVertexShader *this)
{
  uint64_t v2 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this + *(void *)(*(void *)this - 24) + 32, (uint64_t)"agc.read_vi.f32", 15, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 200), *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232));
  unsigned int v3 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v6 = llvm::ConstantInt::get();
  v5[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(v3 + 40), *(void *)(v2 + 24), v2, (uint64_t)&v6, 1, (uint64_t)v5);
}

uint64_t AGCLLVMBuilder::bitCastElements(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Type *a3)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    a3 = (llvm::Type *)llvm::FixedVectorType::get();
  }
  __int16 v8 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)a2, (uint64_t)a3, (uint64_t)v7);
}

uint64_t AGCLLVMBuilder::concatenateVectors(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = llvm::ConstantInt::get();
  uint64_t v10 = llvm::ConstantInt::get();
  uint64_t v11 = llvm::ConstantInt::get();
  uint64_t v12 = llvm::ConstantInt::get();
  uint64_t v6 = (llvm::Value *)llvm::ConstantVector::get();
  unsigned char v8[16] = 257;
  return llvm::IRBuilderBase::CreateShuffleVector((AGCLLVMBuilder *)((char *)this + 8), a2, a3, v6, (const llvm::Twine *)v8);
}

uint64_t AGCLLVMBuilder::CreateInsertElement(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Value *a3, unsigned int a4, const llvm::Twine *a5)
{
  __int16 v8 = (AGCLLVMBuilder *)((char *)this + 8);
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement(v8, a2, a3, v9, a5);
}

llvm::Value *AGCLLVMBuilder::i32Extend(AGCLLVMBuilder *this, llvm::Type **a2, int a3)
{
  uint64_t v4 = (llvm::Value *)a2;
  uint64_t v6 = *a2;
  if (llvm::Type::getScalarSizeInBits(*a2) != 32)
  {
    uint64_t v7 = *((void *)this + 25);
    if ((*((_DWORD *)v6 + 2) & 0xFE) == 0x12) {
      uint64_t v7 = llvm::FixedVectorType::get();
    }
    __int16 v11 = 257;
    if (a3) {
      uint64_t v8 = 40;
    }
    else {
      uint64_t v8 = 39;
    }
    return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, v8, (uint64_t)v4, v7, (uint64_t)v10);
  }
  return v4;
}

uint64_t AGCLLVMBuilder::buildICmpSel(AGCLLVMBuilder *this, llvm::CmpInst **a2, llvm::Value *a3, uint64_t a4)
{
  unsigned int v5 = a3;
  if (*a2 != *(llvm::CmpInst **)a3) {
    unsigned int v5 = AGCLLVMBuilder::splat(this, *((_DWORD *)*a2 + 8), a3);
  }
  __int16 v10 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, a4, a2, (uint64_t)v5, (uint64_t)v9);
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMBuilder::clampToWidth(AGCLLVMBuilder *this, llvm::CmpInst **a2, unsigned int a3, int a4)
{
  if (a4)
  {
    uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v7 = AGCLLVMBuilder::buildICmpSel(this, a2, v6, 40);
    uint64_t v8 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v9 = this;
    __int16 v10 = (llvm::CmpInst **)v7;
    uint64_t v11 = 38;
  }
  else
  {
    uint64_t v8 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v9 = this;
    __int16 v10 = a2;
    uint64_t v11 = 36;
  }
  return AGCLLVMBuilder::buildICmpSel(v9, v10, v8, v11);
}

uint64_t AGCLLVMBuilder::getGlobalVarValue(AGCLLVMBuilder *this, llvm::Value *a2)
{
  uint64_t result = 0;
  if (this && *((unsigned char *)this + 16) == 3)
  {
    if ((*((unsigned char *)this + 80) & 1) != 0 && (llvm::GlobalValue::isDeclaration(this) & 1) == 0) {
      return *((void *)this - 4);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AGCLLVMBuilder::buildGlobalMetadata(AGCLLVMBuilder *this, llvm::GlobalVariable *a2)
{
  return llvm::MDTuple::getImpl();
}

uint64_t AGCLLVMBuilder::setupGlobalMetadata(AGCLLVMBuilder *this, llvm::GlobalVariable *a2)
{
  uint64_t v2 = *((void *)this + 43);
  uint64_t v3 = AGCLLVMBuilder::buildGlobalMetadata(this, a2);
  return llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v2, v3);
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected(uint64_t *a1)
{
  char v2 = *((unsigned char *)a1 + 8);
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (v3)
  {
    uint64_t v4 = MEMORY[0x1CB79FA40]();
    MEMORY[0x1CB7A0780](v4, 0x10B2C407FF26C1CLL);
  }
  return a1;
}

void llvm::function_ref<llvm::Optional<std::string> ()(llvm::StringRef)>::callback_fn<llvm::$_0>(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

{
  *a1 = 0;
  a1[24] = 0;
}

{
  *a1 = 0;
  a1[24] = 0;
}

BOOL AGCLLVMComputePrograms::constructReply(AGCLLVMComputePrograms *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMComputePrograms *)((char *)this + 472), *(_DWORD **)(*((void *)this + 58) + 152), *(void *)(*((void *)this + 58) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply(this);
    uint64_t v3 = AGCLLVMObject::constructFlatReply(this);
    int v5 = flatbuffers::FlatBufferBuilder::EndTable(v3, v4);
    *((unsigned char *)this + 2542) = 1;
    int v6 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((AGCLLVMComputePrograms *)((char *)this + 2472), v5);
    int v7 = flatbuffers::FlatBufferBuilder::EndTable((AGCLLVMComputePrograms *)((char *)this + 2472), v6);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMComputePrograms *)((char *)this + 2472), v7, v8);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this, (_DWORD *)this + 618);
  }
  return v2;
}

void AGCLLVMComputePrograms::getCompilationKeyDescription(AGCLLVMComputePrograms *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:nn180100]<0>(&v26, "");
  std::string::basic_string[abi:nn180100]<0>(v23, "token");
  std::to_string(&v34, *((_DWORD *)this + 830));
  if ((v24 & 0x80u) == 0) {
    size_t v4 = v24;
  }
  else {
    size_t v4 = (size_t)v23[1];
  }
  int v5 = &v35;
  std::string::basic_string[abi:nn180100]((uint64_t)&v35, v4 + 3);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v5 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if ((v24 & 0x80u) == 0) {
      int v6 = v23;
    }
    else {
      int v6 = (void **)v23[0];
    }
    memmove(v5, v6, v4);
  }
  *(_DWORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 2112032;
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = &v34;
  }
  else {
    int v7 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v34.__r_.__value_.__l.__size_;
  }
  uint64_t v9 = std::string::append(&v35, (const std::string::value_type *)v7, size);
  __int16 v10 = (std::string::value_type *)v9->__r_.__value_.__r.__words[0];
  std::string::size_type v11 = v9->__r_.__value_.__l.__size_;
  v25[0] = v9->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v25 + 3) = *(_DWORD *)((char *)&v9->__r_.__value_.__r.__words[2] + 3);
  int v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v33, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else {
    std::string v33 = v26;
  }
  _agcIndentedLine((void **)&v34.__r_.__value_.__l.__data_, (std::string::value_type *)&v33, 0);
  std::string::basic_string[abi:nn180100]<0>(v28, "{");
  _agcIndentedLine(&__p, (std::string::value_type *)v28, 0);
  if ((v32 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v32 & 0x80u) == 0) {
    std::string::size_type v14 = v32;
  }
  else {
    std::string::size_type v14 = v31;
  }
  unsigned int v15 = std::string::append(&v34, p_p, v14);
  std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((char)v32 < 0) {
    operator delete(__p);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
LABEL_38:
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    v34.__r_.__value_.__l.__size_ = v11;
    LODWORD(v34.__r_.__value_.__r.__words[2]) = v25[0];
    *(_DWORD *)((char *)&v34.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v25 + 3);
    *((unsigned char *)&v34.__r_.__value_.__s + 23) = v12;
    int v17 = v12;
LABEL_41:
    std::string v27 = v34;
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&v34, v10, v11);
  int v17 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_41;
  }
  std::string::__init_copy_ctor_external(&v27, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
LABEL_42:
  _agcIndentedLine(&__p, (std::string::value_type *)&v27, 1);
  if ((v32 & 0x80u) == 0) {
    uint64_t v18 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v18 = (const std::string::value_type *)__p;
  }
  if ((v32 & 0x80u) == 0) {
    std::string::size_type v19 = v32;
  }
  else {
    std::string::size_type v19 = v31;
  }
  std::string::append(&v35, v18, v19);
  if ((char)v32 < 0) {
    operator delete(__p);
  }
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  if (v17 < 0) {
LABEL_52:
  }
    operator delete(v34.__r_.__value_.__l.__data_);
LABEL_53:
  std::string::basic_string[abi:nn180100]<0>(&__p, "}");
  _agcIndentedLine((void **)&v34.__r_.__value_.__l.__data_, (std::string::value_type *)&__p, 0);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v20 = &v35;
  }
  else {
    uint64_t v20 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v21 = v35.__r_.__value_.__l.__size_;
  }
  unint64_t v22 = std::string::insert(&v34, 0, (const std::string::value_type *)v20, v21);
  *a2 = *v22;
  v22->__r_.__value_.__r.__words[0] = 0;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if ((char)v32 < 0) {
    operator delete(__p);
  }
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (v12 < 0) {
LABEL_65:
  }
    operator delete(v10);
LABEL_66:
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

uint64_t AGCLLVMComputePrograms::getShaderType(AGCLLVMComputePrograms *this)
{
  return 22;
}

const char *AGCLLVMComputePrograms::dumpType(AGCLLVMComputePrograms *this)
{
  return "compute_program";
}

void AGCLLVMComputePrograms::~AGCLLVMComputePrograms(AGCLLVMComputePrograms *this)
{
  AGCLLVMObject::~AGCLLVMObject(this);
  JUMPOUT(0x1CB7A0780);
}

uint64_t AGCLLVMComputePrograms::compile(AGCLLVMComputePrograms *this)
{
  if (*((_DWORD *)this + 830) == 39)
  {
    uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
    if (GlobalVariable)
    {
      uint64_t v3 = (llvm::GlobalVariable *)GlobalVariable;
      llvm::GlobalObject::setSection();
      uint64_t v4 = *((void *)this + 47);
      uint64_t v5 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMComputePrograms *)((char *)this + 32), v3);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v4, v5);
    }
    int v6 = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
    if (v6)
    {
      uint64_t v7 = *((void *)this + 47);
      uint64_t v8 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMComputePrograms *)((char *)this + 32), v6);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v7, v8);
    }
    uint64_t v9 = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
    if (v9)
    {
      uint64_t v10 = *((void *)this + 47);
      uint64_t v11 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMComputePrograms *)((char *)this + 32), v9);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v10, v11);
    }
  }
  int v12 = (llvm::Module *)*((void *)this + 46);
  v21[0] = "agx.compute_driver_bindings";
  __int16 v22 = 259;
  if (!llvm::Module::getNamedMetadata(v12, (const llvm::Twine *)v21))
  {
    uint64_t v17 = *((void *)this + 46);
    uint64_t v18 = v17 + 24;
    for (uint64_t i = *(void *)(v17 + 32); i != v18; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        uint64_t v20 = (llvm::GlobalValue *)(i - 56);
      }
      else {
        uint64_t v20 = 0;
      }
      if ((llvm::GlobalValue::isDeclaration(v20) & 1) == 0)
      {
        (*(void (**)(AGCLLVMComputePrograms *, llvm::GlobalValue *))(*(void *)this + 168))(this, v20);
        break;
      }
    }
  }
  uint64_t v13 = *((void *)this + 58);
  uint64_t v14 = *((void *)this + 46);
  v21[0] = 0x10000;
  int v15 = AGCLLVMCtx::compile(v13, (uint64_t)this, v14, 1, 3, v21);
  uint64_t result = 0;
  if (v15) {
    return (*(uint64_t (**)(AGCLLVMComputePrograms *))(*(void *)this + 136))(this);
  }
  return result;
}

BOOL AGCLLVMContextSwitchProgram::constructReply(AGCLLVMContextSwitchProgram *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMContextSwitchProgram *)((char *)this + 472), *(_DWORD **)(*((void *)this + 58) + 152), *(void *)(*((void *)this + 58) + 160));
  BOOL v3 = v2;
  if (v2)
  {
    BOOL v29 = v2;
    AGCLLVMObject::validateBackendReply(this);
    uint64_t v4 = AGCLLVMObject::constructFlatReply(this);
    int v28 = flatbuffers::FlatBufferBuilder::EndTable(v4, v5);
    int v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    for (uint64_t i = 0; i != 4; ++i)
    {
      *((unsigned char *)this + 2542) = 1;
      int v10 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)this + 309, 4, i);
      flatbuffers::FlatBufferBuilder::AddElement<signed char>((void *)this + 309, 6, AGCLLVMContextSwitchProgram::constructReply(void)::vi_inputs[4 * i]);
      int v11 = flatbuffers::FlatBufferBuilder::EndTable((AGCLLVMContextSwitchProgram *)((char *)this + 2472), v10);
      int v12 = v11;
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v13 = (v7 - v6) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          abort();
        }
        if ((uint64_t)(v8 - (void)v6) >> 1 > v14) {
          unint64_t v14 = (uint64_t)(v8 - (void)v6) >> 1;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (char *)(v15 + 4 * v13);
        *(_DWORD *)uint64_t v17 = v12;
        uint64_t v18 = v17 + 4;
        while (v7 != v6)
        {
          int v19 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v17 - 1) = v19;
          v17 -= 4;
        }
        unint64_t v8 = v15 + 4 * v16;
        if (v6) {
          operator delete(v6);
        }
        int v6 = v17;
        uint64_t v7 = v18;
      }
      else
      {
        *(_DWORD *)uint64_t v7 = v11;
        v7 += 4;
      }
    }
    if (v7 == v6) {
      uint64_t v20 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>> const&)::t;
    }
    else {
      uint64_t v20 = v6;
    }
    int v21 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + 2472, (uint64_t)v20, (v7 - v6) >> 2);
    *((unsigned char *)this + 2542) = 1;
    int v22 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((AGCLLVMContextSwitchProgram *)((char *)this + 2472), v21);
    int v23 = flatbuffers::FlatBufferBuilder::EndTable((AGCLLVMContextSwitchProgram *)((char *)this + 2472), v22);
    *((unsigned char *)this + 2542) = 1;
    int v24 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((AGCLLVMContextSwitchProgram *)((char *)this + 2472), v28);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>((AGCLLVMContextSwitchProgram *)((char *)this + 2472), v23);
    int v25 = flatbuffers::FlatBufferBuilder::EndTable((AGCLLVMContextSwitchProgram *)((char *)this + 2472), v24);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMContextSwitchProgram *)((char *)this + 2472), v25, v26);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this, (_DWORD *)this + 618);
    BOOL v3 = v29;
    if (v6) {
      operator delete(v6);
    }
  }
  return v3;
}

void AGCLLVMContextSwitchProgram::getCompilationKeyDescription(AGCLLVMContextSwitchProgram *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&v25, "");
  std::string::basic_string[abi:nn180100]<0>(v23, "save");
  if (*((unsigned char *)this + 3320)) {
    uint64_t v4 = "true";
  }
  else {
    uint64_t v4 = "false";
  }
  _agcFieldString<char const*>(&v35, (const void **)v23, v4);
  std::string::basic_string[abi:nn180100]<0>(v21, "toggle");
  if (*((unsigned char *)this + 3321)) {
    __int16 v5 = "true";
  }
  else {
    __int16 v5 = "false";
  }
  _agcFieldString<char const*>(&v36, (const void **)v21, v5);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v32, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  }
  else {
    std::string v32 = v25;
  }
  _agcIndentedLine((void **)&v33.__r_.__value_.__l.__data_, (std::string::value_type *)&v32, 0);
  std::string::basic_string[abi:nn180100]<0>(v27, "{");
  _agcIndentedLine(&__p, (std::string::value_type *)v27, 0);
  if ((v31 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v31 & 0x80u) == 0) {
    std::string::size_type v7 = v31;
  }
  else {
    std::string::size_type v7 = v30;
  }
  unint64_t v8 = std::string::append(&v33, p_p, v7);
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v31 < 0) {
    operator delete(__p);
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  char v10 = 0;
  uint64_t v11 = 0;
  do
  {
    char v12 = v10;
    uint64_t v13 = &v35 + v11;
    if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v33, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
    }
    else {
      std::string v33 = *v13;
    }
    int v14 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v26, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    }
    else {
      std::string v26 = v33;
    }
    _agcIndentedLine(&__p, (std::string::value_type *)&v26, 1);
    if ((v31 & 0x80u) == 0) {
      unint64_t v15 = (const std::string::value_type *)&__p;
    }
    else {
      unint64_t v15 = (const std::string::value_type *)__p;
    }
    if ((v31 & 0x80u) == 0) {
      std::string::size_type v16 = v31;
    }
    else {
      std::string::size_type v16 = v30;
    }
    std::string::append(&v34, v15, v16);
    if ((char)v31 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v26.__r_.__value_.__l.__data_);
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_41;
      }
    }
    else if ((v14 & 0x80000000) == 0)
    {
      goto LABEL_41;
    }
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_41:
    char v10 = 1;
    uint64_t v11 = 1;
  }
  while ((v12 & 1) == 0);
  std::string::basic_string[abi:nn180100]<0>(&__p, "}");
  _agcIndentedLine((void **)&v33.__r_.__value_.__l.__data_, (std::string::value_type *)&__p, 0);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = &v34;
  }
  else {
    uint64_t v17 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v34.__r_.__value_.__l.__size_;
  }
  int v19 = std::string::insert(&v33, 0, (const std::string::value_type *)v17, size);
  *a2 = *v19;
  v19->__r_.__value_.__r.__words[0] = 0;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if ((char)v31 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v36.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v35 + i * 8 + 24));
    }
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

uint64_t AGCLLVMContextSwitchProgram::getShaderType(AGCLLVMContextSwitchProgram *this)
{
  if (*((unsigned char *)this + 3320)) {
    return 10;
  }
  else {
    return 11;
  }
}

const char *AGCLLVMContextSwitchProgram::dumpType(AGCLLVMContextSwitchProgram *this)
{
  if (*((unsigned char *)this + 3321)) {
    uint64_t v1 = "context_save_toggle";
  }
  else {
    uint64_t v1 = "context_save";
  }
  BOOL v2 = "context_restore_toggle";
  if (!*((unsigned char *)this + 3321)) {
    BOOL v2 = "context_restore";
  }
  if (*((unsigned char *)this + 3320)) {
    return v1;
  }
  else {
    return v2;
  }
}

void AGCLLVMContextSwitchProgram::~AGCLLVMContextSwitchProgram(AGCLLVMContextSwitchProgram *this)
{
  AGCLLVMObject::~AGCLLVMObject(this);
  JUMPOUT(0x1CB7A0780);
}

uint64_t AGCLLVMContextSwitchProgram::compile(AGCLLVMContextSwitchProgram *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  BOOL v2 = (AGCLLVMContextSwitchProgram *)((char *)this + 32);
  uint64_t Function = llvm::Module::getFunction();
  *(void *)(Function + 112) = 0;
  *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | 0x6A0;
  if (*((unsigned char *)this + 3320))
  {
    uint64_t v4 = (llvm::Function *)llvm::Module::getFunction();
    uint64_t v5 = *((void *)this + 50);
    if (*(void *)(v5 + 1648)) {
      strlen(*(const char **)(v5 + 1648));
    }
    AGCLLVMBuilder::getOrInsertFunction<>();
    llvm::Value::replaceAllUsesWith();
    llvm::Function::eraseFromParent(v4);
    (*(void (**)(void))(**((void **)this + 50) + 376))();
  }
  uint64_t v6 = llvm::Module::getFunction();
  if (v6)
  {
    std::string::size_type v7 = (llvm::Function *)v6;
    uint64_t v8 = *((void *)this + 50);
    if (*(void *)(v8 + 1656)) {
      strlen(*(const char **)(v8 + 1656));
    }
    llvm::Module::getOrInsertFunction();
    llvm::Value::replaceAllUsesWith();
    llvm::Function::eraseFromParent(v7);
  }
  if (*((unsigned char *)this + 3320) && *(unsigned char *)(*((void *)this + 50) + 1733))
  {
    uint64_t v9 = *(void *)(Function + 80);
    uint64_t v10 = v9 - 24;
    if (!v9) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void *)(v10 + 40);
    if (v11 == v10 + 40)
    {
      int v14 = 0;
    }
    else
    {
      char v12 = (llvm::Instruction *)(v11 - 24);
      if (v11) {
        uint64_t v13 = v11 - 24;
      }
      else {
        uint64_t v13 = 0;
      }
      if (*(unsigned __int8 *)(v13 + 16) - 29 >= 0xB) {
        int v14 = 0;
      }
      else {
        int v14 = v12;
      }
    }
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMContextSwitchProgram *)((char *)this + 40), v14);
    uint64_t v15 = *((void *)this + 50);
    if (*(void *)(v15 + 928)) {
      strlen(*(const char **)(v15 + 928));
    }
    uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
    __int16 v30 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)this + 40, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)&v29);
  }
  llvm::Module::getOrInsertNamedMetadata();
  if (*((unsigned char *)this + 3321))
  {
    uint64_t v17 = operator new(0x20uLL);
    uint64_t v18 = *((void *)this + 29);
    *uint64_t v17 = v18;
    v17[1] = v18;
    v17[2] = v18;
    v17[3] = v18;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    *(_WORD *)(v19 + 18) = *(_WORD *)(v19 + 18) & 0xC00F | 0x6A0;
    BOOL v29 = "prefix";
    __int16 v30 = 259;
    operator new();
  }
  BOOL v29 = "agc.main";
  __int16 v30 = 259;
  llvm::Value::setName();
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    int v21 = (llvm::GlobalVariable *)GlobalVariable;
    llvm::GlobalObject::setSection();
    uint64_t v22 = *((void *)this + 47);
    uint64_t v23 = AGCLLVMBuilder::buildGlobalMetadata(v2, v21);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v22, v23);
  }
  uint64_t v24 = llvm::Module::getFunction();
  (*(void (**)(AGCLLVMContextSwitchProgram *, uint64_t))(*(void *)this + 168))(this, v24);
  uint64_t v25 = *((void *)this + 58);
  uint64_t v26 = *((void *)this + 46);
  BOOL v29 = (const char *)0x10000;
  if (!AGCLLVMCtx::compile(v25, (uint64_t)this, v26, 1, 3, &v29)) {
    return 0;
  }
  std::string v27 = *(uint64_t (**)(AGCLLVMContextSwitchProgram *))(*(void *)this + 136);
  return v27(this);
}

void AGCLLVMContextSwitchProgram::create(AGCLLVMContextSwitchProgram *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(_DWORD *)(*((void *)this + 4) + 28);
  BOOL v4 = v3 > 0x1B;
  int v5 = (1 << v3) & 0xE7F4000;
  if (!v4 && v5 != 0) {
    operator new();
  }
  operator new();
}

uint64_t AGCContextSwitchProgramG13::constructReply(AGCContextSwitchProgramG13 *this)
{
  return 1;
}

void AGCContextSwitchProgramG13::getCompilationKeyDescription(AGCContextSwitchProgramG13 *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:nn180100]<0>(&v27, "");
  std::string::basic_string[abi:nn180100]<0>(v24, "save");
  if (*((unsigned char *)this + 3320)) {
    BOOL v4 = "true";
  }
  else {
    BOOL v4 = "false";
  }
  std::string::basic_string[abi:nn180100]<0>(&v35, v4);
  if ((v25 & 0x80u) == 0) {
    size_t v5 = v25;
  }
  else {
    size_t v5 = (size_t)v24[1];
  }
  uint64_t v6 = &v36;
  std::string::basic_string[abi:nn180100]((uint64_t)&v36, v5 + 3);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if ((v25 & 0x80u) == 0) {
      uint64_t v7 = v24;
    }
    else {
      uint64_t v7 = (void **)v24[0];
    }
    memmove(v6, v7, v5);
  }
  *(_DWORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 2112032;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v35;
  }
  else {
    uint64_t v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::string::append(&v36, (const std::string::value_type *)v8, size);
  uint64_t v11 = (std::string::value_type *)v10->__r_.__value_.__r.__words[0];
  std::string::size_type v12 = v10->__r_.__value_.__l.__size_;
  v26[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  int v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v34, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v34 = v27;
  }
  _agcIndentedLine((void **)&v35.__r_.__value_.__l.__data_, (std::string::value_type *)&v34, 0);
  std::string::basic_string[abi:nn180100]<0>(v29, "{");
  _agcIndentedLine(&__p, (std::string::value_type *)v29, 0);
  if ((v33 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v33 & 0x80u) == 0) {
    std::string::size_type v15 = v33;
  }
  else {
    std::string::size_type v15 = v32;
  }
  std::string::size_type v16 = std::string::append(&v35, p_p, v15);
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v33 < 0) {
    operator delete(__p);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_41;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_41:
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    v35.__r_.__value_.__l.__size_ = v12;
    LODWORD(v35.__r_.__value_.__r.__words[2]) = v26[0];
    *(_DWORD *)((char *)&v35.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v26 + 3);
    *((unsigned char *)&v35.__r_.__value_.__s + 23) = v13;
    int v18 = v13;
LABEL_44:
    std::string v28 = v35;
    goto LABEL_45;
  }
  std::string::__init_copy_ctor_external(&v35, v11, v12);
  int v18 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_44;
  }
  std::string::__init_copy_ctor_external(&v28, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_45:
  _agcIndentedLine(&__p, (std::string::value_type *)&v28, 1);
  if ((v33 & 0x80u) == 0) {
    uint64_t v19 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v19 = (const std::string::value_type *)__p;
  }
  if ((v33 & 0x80u) == 0) {
    std::string::size_type v20 = v33;
  }
  else {
    std::string::size_type v20 = v32;
  }
  std::string::append(&v36, v19, v20);
  if ((char)v33 < 0) {
    operator delete(__p);
  }
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if (v18 < 0) {
LABEL_55:
  }
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_56:
  std::string::basic_string[abi:nn180100]<0>(&__p, "}");
  _agcIndentedLine((void **)&v35.__r_.__value_.__l.__data_, (std::string::value_type *)&__p, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v21 = &v36;
  }
  else {
    int v21 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v36.__r_.__value_.__l.__size_;
  }
  uint64_t v23 = std::string::insert(&v35, 0, (const std::string::value_type *)v21, v22);
  *a2 = *v23;
  v23->__r_.__value_.__r.__words[0] = 0;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if ((char)v33 < 0) {
    operator delete(__p);
  }
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  operator delete(v36.__r_.__value_.__l.__data_);
  if (v13 < 0) {
LABEL_68:
  }
    operator delete(v11);
LABEL_69:
  if ((char)v25 < 0) {
    operator delete(v24[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

uint64_t AGCContextSwitchProgramG13::getShaderType(AGCContextSwitchProgramG13 *this)
{
  if (*((unsigned char *)this + 3320)) {
    return 10;
  }
  else {
    return 11;
  }
}

const char *AGCContextSwitchProgramG13::dumpType(AGCContextSwitchProgramG13 *this)
{
  if (*((unsigned char *)this + 3320)) {
    return "context_save";
  }
  else {
    return "context_restore";
  }
}

void AGCContextSwitchProgramG13::~AGCContextSwitchProgramG13(AGCContextSwitchProgramG13 *this)
{
  *(void *)this = &unk_1F25C6678;
  *((void *)this + 4) = &unk_1F25C6768;
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((AGCContextSwitchProgramG13 *)((char *)this + 3328));
  AGCLLVMObject::~AGCLLVMObject(this);
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F25C6678;
  *((void *)this + 4) = &unk_1F25C6768;
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((AGCContextSwitchProgramG13 *)((char *)this + 3328));
  AGCLLVMObject::~AGCLLVMObject(this);
}

uint64_t AGCContextSwitchProgramG13::compile(AGCContextSwitchProgramG13 *this)
{
  return 1;
}

BOOL virtual thunk to'AGCLLVMPassthroughVertexShader::constructReply(AGCLLVMPassthroughVertexShader *this)
{
  return AGCLLVMPassthroughVertexShader::constructReply((AGCLLVMPassthroughVertexShader *)((char *)this
                                                                                         + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMPassthroughVertexShader::constructReply(AGCLLVMPassthroughVertexShader *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMPassthroughVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  BOOL v3 = v2;
  if (v2)
  {
    BOOL v50 = v2;
    AGCLLVMObject::validateBackendReply((AGCLLVMPassthroughVertexShader *)((char *)this
                                                                         + *(void *)(*(void *)this - 24)));
    BOOL v4 = AGCLLVMObject::constructFlatReply((AGCLLVMPassthroughVertexShader *)((char *)this
                                                                            + *(void *)(*(void *)this - 24)));
    int v49 = flatbuffers::FlatBufferBuilder::EndTable(v4, v5);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    for (int i = 0; i != 22; ++i)
    {
      uint64_t v10 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v11 = (flatbuffers::FlatBufferBuilder *)(v10 + 2472);
      v10[2542] = 1;
      int v12 = *((_DWORD *)v10 + 626);
      int v13 = *((_DWORD *)v10 + 630);
      int v14 = *((_DWORD *)v10 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)v10 + 309, 4, 0, 0);
      if (i == 6)
      {
        unsigned int v15 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v11, 2);
        flatbuffers::FlatBufferBuilder::TrackField(v11, 6, v15);
        unsigned int v16 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v11, 2);
        flatbuffers::FlatBufferBuilder::TrackField(v11, 8, v16);
        unsigned int v17 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v11, 2);
        flatbuffers::FlatBufferBuilder::TrackField(v11, 10, v17);
      }
      else
      {
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 6, 0);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, 0);
        flatbuffers::FlatBufferBuilder::AddElement<signed char>(v11, 10, 0);
      }
      int v18 = flatbuffers::FlatBufferBuilder::EndTable(v11, (unsigned __int16)v12 - (unsigned __int16)v13 + v14);
      int v19 = v18;
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v20 = (v7 - v6) >> 2;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62) {
          abort();
        }
        if ((uint64_t)(v8 - (void)v6) >> 1 > v21) {
          unint64_t v21 = (uint64_t)(v8 - (void)v6) >> 1;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = (char *)(v22 + 4 * v20);
        *(_DWORD *)uint64_t v24 = v19;
        unsigned __int8 v25 = v24 + 4;
        while (v7 != v6)
        {
          int v26 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v24 - 1) = v26;
          v24 -= 4;
        }
        unint64_t v8 = v22 + 4 * v23;
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v24;
        uint64_t v7 = v25;
      }
      else
      {
        *(_DWORD *)uint64_t v7 = v18;
        v7 += 4;
      }
    }
    if (v7 == v6) {
      std::string v27 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
    }
    else {
      std::string v27 = v6;
    }
    int v28 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v27, (v7 - v6) >> 2);
    BOOL v29 = (char *)this + *(void *)(*(void *)this - 24);
    char v30 = (flatbuffers::FlatBufferBuilder *)(v29 + 2472);
    v29[2542] = 1;
    int v31 = *((_DWORD *)v29 + 626) - *((_DWORD *)v29 + 630) + *((_DWORD *)v29 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v29 + 309, 4, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 12, 0);
    unsigned int v32 = *((_DWORD *)this + 18);
    if (v32 <= 4) {
      unsigned int v32 = 4;
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 14, v32 - 4);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 18, 0);
    int v33 = flatbuffers::FlatBufferBuilder::EndTable(v30, v31);
    std::string v34 = (char *)this + *(void *)(*(void *)this - 24);
    std::string v35 = (flatbuffers::FlatBufferBuilder *)(v34 + 2472);
    v34[2542] = 1;
    int v36 = *((_DWORD *)v34 + 626) - *((_DWORD *)v34 + 630) + *((_DWORD *)v34 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v34 + 309, 18, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 14, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 4, 0);
    int v37 = flatbuffers::FlatBufferBuilder::EndTable(v35, v36);
    BOOL v38 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v39 = (flatbuffers::FlatBufferBuilder *)(v38 + 2472);
    v38[2542] = 1;
    int v40 = *((_DWORD *)v38 + 626) - *((_DWORD *)v38 + 630) + *((_DWORD *)v38 + 628);
    unsigned int v41 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)(v38 + 2472), 1);
    flatbuffers::FlatBufferBuilder::TrackField(v39, 6, v41);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v39, 8, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v39, 10, *((_DWORD *)this + 18));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v39, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v39, 14, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v39, 16, v33);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v39, 18, v37);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v39, 20, 0, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v39, 22, v28);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v39, 26, 0);
    int v42 = flatbuffers::FlatBufferBuilder::EndTable(v39, v40);
    uint64_t v43 = (char *)this + *(void *)(*(void *)this - 24);
    unsigned int v44 = (flatbuffers::FlatBufferBuilder *)(v43 + 2472);
    v43[2542] = 1;
    LODWORD(v39) = *((_DWORD *)v43 + 626) - *((_DWORD *)v43 + 630) + *((_DWORD *)v43 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v43 + 2472), v49);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v44, v42);
    unint64_t v45 = (AGCLLVMPassthroughVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v46 = flatbuffers::FlatBufferBuilder::EndTable(v44, (__int16)v39);
    flatbuffers::FlatBufferBuilder::Finish(v45, v46, v47);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMPassthroughVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
    BOOL v3 = v50;
    if (v6) {
      operator delete(v6);
    }
  }
  return v3;
}

void virtual thunk to'AGCLLVMPassthroughVertexShader::getCompilationKeyDescription(AGCLLVMPassthroughVertexShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMPassthroughVertexShader::getCompilationKeyDescription(AGCLLVMPassthroughVertexShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v9, "");
  std::string::basic_string[abi:nn180100]<0>(v7, "passthrough_size");
  _agcFieldString<unsigned int>(&v11, (const void **)v7, *((_DWORD *)this + 19));
  std::string::basic_string[abi:nn180100]<0>(__p, "pad_size");
  _agcFieldString<unsigned int>(&v12, (const void **)__p, *((_DWORD *)this + 20));
  _agcGroupWithHeader(a2, (uint64_t)v9, (uint64_t)&v11, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v12.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v11 + i * 8 + 24));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

uint64_t virtual thunk to'AGCLLVMPassthroughVertexShader::getShaderType(AGCLLVMPassthroughVertexShader *this)
{
  return 12;
}

const char *virtual thunk to'AGCLLVMPassthroughVertexShader::dumpType(AGCLLVMPassthroughVertexShader *this)
{
  return "passthrough";
}

void *virtual thunk to'AGCLLVMPassthroughVertexShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.passthrough_vertex");
}

void virtual thunk to'AGCLLVMPassthroughVertexShader::~AGCLLVMPassthroughVertexShader(AGCLLVMPassthroughVertexShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShader *)((char *)this
                                                                 + *(void *)(*(void *)this - 48)
                                                                 + 88));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShader *)((char *)this
                                                                 + *(void *)(*(void *)this - 48)
                                                                 + 88));
}

uint64_t virtual thunk to'AGCLLVMDriverShader::compile(AGCLLVMDriverShader *this)
{
  return AGCLLVMDriverShader::compile((AGCLLVMDriverShader *)((char *)this + *(void *)(*(void *)this - 24)));
}

uint64_t AGCLLVMDriverShader::compile(AGCLLVMDriverShader *this)
{
  uint64_t v2 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v3 = v2 + 24;
  for (uint64_t i = *(void *)(v2 + 32); i != v3; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      __int16 v5 = (llvm::GlobalValue *)(i - 56);
    }
    else {
      __int16 v5 = 0;
    }
    if ((llvm::GlobalValue::isDeclaration(v5) & 1) == 0)
    {
      (*(void (**)(char *, llvm::GlobalValue *))(*(void *)((char *)this
                                                                      + *(void *)(*(void *)this - 24))
                                                          + 168))((char *)this + *(void *)(*(void *)this - 24), v5);
      break;
    }
  }
  AGCLLVMObject::enableTempRegistersLimit((AGCLLVMDriverShader *)((char *)this + *(void *)(*(void *)this - 24)));
  char v6 = (const char *)(*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24))
                                                       + 56))((char *)this + *(void *)(*(void *)this - 24));
  if (dumpShaderToFile(v6))
  {
    char v7 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 56))((char *)this + *(void *)(*(void *)this - 24));
    printMessage((char **)&AGCPrinter, "------ Start compilation key description for %s shader %u  ------", v8, v9, v10, v11, v12, v13, v7);
    (*(void (**)(void **__return_ptr))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 120))(__p);
    if (v35 >= 0) {
      uint64_t v20 = __p;
    }
    else {
      LOBYTE(v2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = __p[0];
    }
    printMessage((char **)&AGCPrinter, "%s", v14, v15, v16, v17, v18, v19, (char)v20);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    char v21 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 56))((char *)this + *(void *)(*(void *)this - 24));
    printMessage((char **)&AGCPrinter, "------ End compilation key description for %s shader %u  ------", v22, v23, v24, v25, v26, v27, v21);
  }
  int v28 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v29 = *((void *)v28 + 58);
  uint64_t v30 = *((void *)v28 + 46);
  if (*((unsigned char *)this + 8))
  {
    __p[0] = (void *)0x10000;
    char v31 = AGCLLVMCtx::compile(v29, (uint64_t)v28, v30, 1, 2, __p);
    uint64_t result = 0;
    if ((v31 & 1) == 0) {
      return result;
    }
  }
  else
  {
    __p[0] = (void *)0x10000;
    int v33 = AGCLLVMCtx::compile(v29, (uint64_t)v28, v30, 1, 3, __p);
    uint64_t result = 0;
    if (!v33) {
      return result;
    }
  }
  return (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 136))((char *)this + *(void *)(*(void *)this - 24));
}

void *AGCLLVMPassthroughVertexShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.passthrough_vertex");
}

uint64_t AGCLLVMPassthroughVertexShader::getShaderType(AGCLLVMPassthroughVertexShader *this)
{
  return 12;
}

const char *AGCLLVMPassthroughVertexShader::dumpType(AGCLLVMPassthroughVertexShader *this)
{
  return "passthrough";
}

void AGCLLVMPassthroughVertexShader::~AGCLLVMPassthroughVertexShader(AGCLLVMPassthroughVertexShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShader *)((char *)this + 88));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShader *)((char *)this + 88));
}

BOOL virtual thunk to'AGCLLVMDriverVertexFetchShader::constructReply(AGCLLVMDriverVertexFetchShader *this)
{
  return AGCLLVMDriverVertexFetchShader::constructReply((AGCLLVMDriverVertexFetchShader *)((char *)this
                                                                                         + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMDriverVertexFetchShader::constructReply(AGCLLVMDriverVertexFetchShader *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMDriverVertexFetchShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  BOOL v3 = v2;
  if (v2)
  {
    BOOL v83 = v2;
    AGCLLVMObject::validateBackendReply((AGCLLVMDriverVertexFetchShader *)((char *)this
                                                                         + *(void *)(*(void *)this - 24)));
    BOOL v4 = AGCLLVMObject::constructFlatReply((AGCLLVMDriverVertexFetchShader *)((char *)this
                                                                            + *(void *)(*(void *)this - 24)));
    int v82 = flatbuffers::FlatBufferBuilder::EndTable(v4, v5);
    char v6 = 0;
    char v7 = 0;
    unint64_t v8 = 0;
    for (int i = 0; i != 22; ++i)
    {
      uint64_t v10 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v11 = (flatbuffers::FlatBufferBuilder *)(v10 + 2472);
      v10[2542] = 1;
      int v12 = *((_DWORD *)v10 + 626);
      int v13 = *((_DWORD *)v10 + 630);
      int v14 = *((_DWORD *)v10 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)v10 + 309, 4, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 6, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, 0);
      if (i == 6)
      {
        unsigned int v15 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v11, 2);
        flatbuffers::FlatBufferBuilder::TrackField(v11, 10, v15);
      }
      else
      {
        flatbuffers::FlatBufferBuilder::AddElement<signed char>(v11, 10, 0);
      }
      int v16 = flatbuffers::FlatBufferBuilder::EndTable(v11, (unsigned __int16)v12 - (unsigned __int16)v13 + v14);
      int v17 = v16;
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v18 = (v7 - v6) >> 2;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          goto LABEL_58;
        }
        if ((uint64_t)(v8 - (void)v6) >> 1 > v19) {
          unint64_t v19 = (uint64_t)(v8 - (void)v6) >> 1;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v20);
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v22 = (char *)(v20 + 4 * v18);
        *(_DWORD *)uint64_t v22 = v17;
        uint64_t v23 = v22 + 4;
        while (v7 != v6)
        {
          int v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v22 - 1) = v24;
          v22 -= 4;
        }
        unint64_t v8 = v20 + 4 * v21;
        if (v6) {
          operator delete(v6);
        }
        char v6 = v22;
        char v7 = v23;
      }
      else
      {
        *(_DWORD *)char v7 = v16;
        v7 += 4;
      }
    }
    if (v7 == v6) {
      uint64_t v25 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
    }
    else {
      uint64_t v25 = v6;
    }
    int v26 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v25, (v7 - v6) >> 2);
    uint64_t v27 = (char *)this + *(void *)(*(void *)this - 24);
    int v28 = (flatbuffers::FlatBufferBuilder *)(v27 + 2472);
    v27[2542] = 1;
    int v29 = *((_DWORD *)v27 + 626) - *((_DWORD *)v27 + 630) + *((_DWORD *)v27 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v27 + 309, 4, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v28, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v28, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v28, 10, 0);
    LODWORD(v28) = flatbuffers::FlatBufferBuilder::EndTable(v28, v29);
    uint64_t v30 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(1uLL);
    _DWORD *v30 = v28;
    uint64_t v31 = *(void *)this;
    if (*((_DWORD *)this + 19) == -1)
    {
      int v37 = 0;
      int v40 = 0;
      uint64_t v39 = 0;
    }
    else
    {
      unsigned int v32 = (char *)this + *(void *)(v31 - 24);
      int v33 = (flatbuffers::FlatBufferBuilder *)(v32 + 2472);
      v32[2542] = 1;
      int v34 = *((_DWORD *)v32 + 626) - *((_DWORD *)v32 + 630) + *((_DWORD *)v32 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v32 + 309, 4, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v33, 6, 0);
      unsigned int v35 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v33, 3);
      flatbuffers::FlatBufferBuilder::TrackField(v33, 8, v35);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v33, 12, *((_DWORD *)this + 19));
      unsigned int v36 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v33, 4);
      flatbuffers::FlatBufferBuilder::TrackField(v33, 10, v36);
      LODWORD(v33) = flatbuffers::FlatBufferBuilder::EndTable(v33, v34);
      int v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(1uLL);
      uint64_t v39 = &v37[4 * v38];
      *(_DWORD *)int v37 = v33;
      int v40 = v37 + 4;
      uint64_t v31 = *(void *)this;
    }
    int v81 = v26;
    if (*((_DWORD *)this + 20) != -1)
    {
      unsigned int v41 = (char *)this + *(void *)(v31 - 24);
      int v42 = (flatbuffers::FlatBufferBuilder *)(v41 + 2472);
      v41[2542] = 1;
      int v43 = *((_DWORD *)v41 + 626) - *((_DWORD *)v41 + 630) + *((_DWORD *)v41 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v41 + 309, 4, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 6, 0);
      unsigned int v44 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v42, 3);
      flatbuffers::FlatBufferBuilder::TrackField(v42, 8, v44);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 12, *((_DWORD *)this + 20));
      unsigned int v45 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v42, 2);
      flatbuffers::FlatBufferBuilder::TrackField(v42, 10, v45);
      int v46 = flatbuffers::FlatBufferBuilder::EndTable(v42, v43);
      int v47 = v46;
      if (v40 >= v39)
      {
        uint64_t v49 = (v40 - v37) >> 2;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 62) {
LABEL_58:
        }
          abort();
        if ((v39 - v37) >> 1 > v50) {
          unint64_t v50 = (v39 - v37) >> 1;
        }
        if ((unint64_t)(v39 - v37) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v50;
        }
        if (v51) {
          unint64_t v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v51);
        }
        std::string::size_type v52 = (char *)(v51 + 4 * v49);
        *(_DWORD *)std::string::size_type v52 = v47;
        unsigned int v48 = v52 + 4;
        while (v40 != v37)
        {
          int v53 = *((_DWORD *)v40 - 1);
          v40 -= 4;
          *((_DWORD *)v52 - 1) = v53;
          v52 -= 4;
        }
        if (v37) {
          operator delete(v37);
        }
        int v37 = v52;
      }
      else
      {
        *(_DWORD *)int v40 = v46;
        unsigned int v48 = v40 + 4;
      }
      uint64_t v31 = *(void *)this;
      int v40 = v48;
    }
    std::string __p = v30;
    int v54 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(v31 - 24) + 2472, (uint64_t)v30, 1);
    if (v40 == v37) {
      uint64_t v55 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>> const&)::t;
    }
    else {
      uint64_t v55 = v37;
    }
    int v56 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v55, (v40 - v37) >> 2);
    unsigned int v57 = *((_DWORD *)this + 18) - *((unsigned __int8 *)this + 84);
    if (v57 <= 4) {
      unsigned int v57 = 4;
    }
    int v58 = v57 - 4;
    uint64_t v59 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v60 = (flatbuffers::FlatBufferBuilder *)(v59 + 2472);
    v59[2542] = 1;
    int v61 = *((_DWORD *)v59 + 626) - *((_DWORD *)v59 + 630) + *((_DWORD *)v59 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v59 + 309, 4, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 14, v58);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 18, 0);
    int v62 = flatbuffers::FlatBufferBuilder::EndTable(v60, v61);
    std::string::size_type v63 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v64 = (flatbuffers::FlatBufferBuilder *)(v63 + 2472);
    v63[2542] = 1;
    int v65 = *((_DWORD *)v63 + 626) - *((_DWORD *)v63 + 630) + *((_DWORD *)v63 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v63 + 309, 18, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 14, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 4, 0);
    LODWORD(v64) = flatbuffers::FlatBufferBuilder::EndTable(v64, v65);
    char v66 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v67 = (flatbuffers::FlatBufferBuilder *)(v66 + 2472);
    v66[2542] = 1;
    int v68 = *((_DWORD *)v66 + 626) - *((_DWORD *)v66 + 630) + *((_DWORD *)v66 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v66 + 2472), v54);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v67, v56);
    int v69 = flatbuffers::FlatBufferBuilder::EndTable(v67, v68);
    uint64_t v70 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v71 = (flatbuffers::FlatBufferBuilder *)(v70 + 2472);
    v70[2542] = 1;
    int v72 = *((_DWORD *)v70 + 626) - *((_DWORD *)v70 + 630) + *((_DWORD *)v70 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v70 + 2472), v69);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v71, 6, *((unsigned char *)this + 85) != 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v71, 8, *((unsigned char *)this + 84) != 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v71, 10, *((_DWORD *)this + 18));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v71, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v71, 14, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v71, 16, v62);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v71, 18, (int)v64);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v71, 20, 0, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v71, 22, v81);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v71, 26, 0);
    int v73 = flatbuffers::FlatBufferBuilder::EndTable(v71, v72);
    uint64_t v74 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v75 = (flatbuffers::FlatBufferBuilder *)(v74 + 2472);
    v74[2542] = 1;
    LODWORD(v67) = *((_DWORD *)v74 + 626) - *((_DWORD *)v74 + 630) + *((_DWORD *)v74 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v74 + 2472), v82);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v75, v73);
    uint64_t v76 = (AGCLLVMDriverVertexFetchShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v77 = flatbuffers::FlatBufferBuilder::EndTable(v75, (__int16)v67);
    flatbuffers::FlatBufferBuilder::Finish(v76, v77, v78);
    if (v37) {
      operator delete(v37);
    }
    operator delete(__p);
    BOOL v3 = v83;
    if (v6) {
      operator delete(v6);
    }
  }
  return v3;
}

void virtual thunk to'AGCLLVMPassthroughVertexShaderWithVertexFetch::getCompilationKeyDescription(AGCLLVMPassthroughVertexShaderWithVertexFetch *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMPassthroughVertexShaderWithVertexFetch::getCompilationKeyDescription(AGCLLVMPassthroughVertexShaderWithVertexFetch *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v9, "");
  std::string::basic_string[abi:nn180100]<0>(v7, "passthrough_size");
  _agcFieldString<unsigned int>(&v11, (const void **)v7, *((_DWORD *)this + 22));
  std::string::basic_string[abi:nn180100]<0>(__p, "pad_size");
  _agcFieldString<unsigned int>(&v12, (const void **)__p, *((_DWORD *)this + 23));
  _agcGroupWithHeader(a2, (uint64_t)v9, (uint64_t)&v11, 2);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v12.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v11 + i * 8 + 24));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

uint64_t virtual thunk to'AGCLLVMPassthroughVertexShaderWithVertexFetch::getShaderType(AGCLLVMPassthroughVertexShaderWithVertexFetch *this)
{
  return 13;
}

const char *virtual thunk to'AGCLLVMPassthroughVertexShaderWithVertexFetch::dumpType(AGCLLVMPassthroughVertexShaderWithVertexFetch *this)
{
  return "passthrough_vertexfetch";
}

void virtual thunk to'AGCLLVMPassthroughVertexShaderWithVertexFetch::~AGCLLVMPassthroughVertexShaderWithVertexFetch(AGCLLVMPassthroughVertexShaderWithVertexFetch *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShaderWithVertexFetch *)((char *)this
                                                                                + *(void *)(*(void *)this - 48)
                                                                                + 96));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShaderWithVertexFetch *)((char *)this
                                                                                + *(void *)(*(void *)this - 48)
                                                                                + 96));
}

uint64_t AGCLLVMPassthroughVertexShaderWithVertexFetch::getShaderType(AGCLLVMPassthroughVertexShaderWithVertexFetch *this)
{
  return 13;
}

const char *AGCLLVMPassthroughVertexShaderWithVertexFetch::dumpType(AGCLLVMPassthroughVertexShaderWithVertexFetch *this)
{
  return "passthrough_vertexfetch";
}

void AGCLLVMPassthroughVertexShaderWithVertexFetch::~AGCLLVMPassthroughVertexShaderWithVertexFetch(AGCLLVMPassthroughVertexShaderWithVertexFetch *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShaderWithVertexFetch *)((char *)this + 96));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShaderWithVertexFetch *)((char *)this + 96));
}

void *virtual thunk to'AGCLLVMTileDispatchVertexShaderPoint::getCompilationKeyDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

uint64_t virtual thunk to'AGCLLVMTileDispatchVertexShaderPoint::getShaderType(AGCLLVMTileDispatchVertexShaderPoint *this)
{
  return 14;
}

const char *virtual thunk to'AGCLLVMTileDispatchVertexShaderPoint::dumpType(AGCLLVMTileDispatchVertexShaderPoint *this)
{
  return "tile_dispatch_vertex_point";
}

void *virtual thunk to'AGCLLVMTileDispatchVertexShaderPoint::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.tile_dispatch_vertex_point");
}

void virtual thunk to'AGCLLVMTileDispatchVertexShaderPoint::~AGCLLVMTileDispatchVertexShaderPoint(AGCLLVMTileDispatchVertexShaderPoint *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderPoint *)((char *)this
                                                                       + *(void *)(*(void *)this - 48)
                                                                       + 88));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderPoint *)((char *)this
                                                                       + *(void *)(*(void *)this - 48)
                                                                       + 88));
}

void *AGCLLVMTileDispatchVertexShaderPoint::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.tile_dispatch_vertex_point");
}

void *AGCLLVMTileDispatchVertexShaderPoint::getCompilationKeyDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

uint64_t AGCLLVMTileDispatchVertexShaderPoint::getShaderType(AGCLLVMTileDispatchVertexShaderPoint *this)
{
  return 14;
}

const char *AGCLLVMTileDispatchVertexShaderPoint::dumpType(AGCLLVMTileDispatchVertexShaderPoint *this)
{
  return "tile_dispatch_vertex_point";
}

void AGCLLVMTileDispatchVertexShaderPoint::~AGCLLVMTileDispatchVertexShaderPoint(AGCLLVMTileDispatchVertexShaderPoint *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderPoint *)((char *)this + 88));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderPoint *)((char *)this + 88));
}

BOOL virtual thunk to'AGCLLVMTileDispatchVertexShaderRect::constructReply(AGCLLVMTileDispatchVertexShaderRect *this)
{
  return AGCLLVMTileDispatchVertexShaderRect::constructReply((AGCLLVMTileDispatchVertexShaderRect *)((char *)this + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMTileDispatchVertexShaderRect::constructReply(AGCLLVMTileDispatchVertexShaderRect *this)
{
  BOOL v2 = AGCLLVMDriverVertexFetchShader::constructReply(this);
  if (v2)
  {
    BOOL v3 = (char *)this + *(void *)(*(void *)this - 24);
    BOOL v4 = (flatbuffers::FlatBufferBuilder *)(v3 + 2568);
    v3[2638] = 1;
    int v5 = *((_DWORD *)v3 + 650) - *((_DWORD *)v3 + 654) + *((_DWORD *)v3 + 652);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)v3 + 321, 14, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 12, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 10, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 8, 0, 0);
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v4, 1);
    flatbuffers::FlatBufferBuilder::TrackField(v4, 6, v6);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 4, 0, 0);
    int v7 = flatbuffers::FlatBufferBuilder::EndTable(v4, v5);
    char v8 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v9 = (flatbuffers::FlatBufferBuilder *)(v8 + 2568);
    v8[2638] = 1;
    int v10 = *((_DWORD *)v8 + 650) - *((_DWORD *)v8 + 654) + *((_DWORD *)v8 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v8 + 2568), v7);
    int v11 = flatbuffers::FlatBufferBuilder::EndTable(v9, v10);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMTileDispatchVertexShaderRect *)((char *)this + *(void *)(*(void *)this - 24) + 2568), v11, v12);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG11::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMTileDispatchVertexShaderRect *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
  }
  return v2;
}

void *virtual thunk to'AGCLLVMTileDispatchVertexShaderRect::getCompilationKeyDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

uint64_t virtual thunk to'AGCLLVMTileDispatchVertexShaderRect::getShaderType(AGCLLVMTileDispatchVertexShaderRect *this)
{
  return 14;
}

char *virtual thunk to'AGCLLVMTileDispatchVertexShaderRect::dumpType(AGCLLVMTileDispatchVertexShaderRect *this)
{
  return (&AGCLLVMTileDispatchVertexShaderRect::dumpType(void)const::types)[*(unsigned int *)((char *)this
                                                                                            + *(void *)(*(void *)this - 72)
                                                                                            + 88)];
}

void *virtual thunk to'AGCLLVMTileDispatchVertexShaderRect::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.tile_dispatch_vertex_rect");
}

void virtual thunk to'AGCLLVMTileDispatchVertexShaderRect::~AGCLLVMTileDispatchVertexShaderRect(AGCLLVMTileDispatchVertexShaderRect *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderRect *)((char *)this
                                                                      + *(void *)(*(void *)this - 48)
                                                                      + 96));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderRect *)((char *)this
                                                                      + *(void *)(*(void *)this - 48)
                                                                      + 96));
}

void *AGCLLVMTileDispatchVertexShaderRect::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.tile_dispatch_vertex_rect");
}

void *AGCLLVMTileDispatchVertexShaderRect::getCompilationKeyDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

uint64_t AGCLLVMTileDispatchVertexShaderRect::getShaderType(AGCLLVMTileDispatchVertexShaderRect *this)
{
  return 14;
}

char *AGCLLVMTileDispatchVertexShaderRect::dumpType(AGCLLVMTileDispatchVertexShaderRect *this)
{
  return (&AGCLLVMTileDispatchVertexShaderRect::dumpType(void)const::types)[*((unsigned int *)this + 22)];
}

void AGCLLVMTileDispatchVertexShaderRect::~AGCLLVMTileDispatchVertexShaderRect(AGCLLVMTileDispatchVertexShaderRect *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderRect *)((char *)this + 96));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderRect *)((char *)this + 96));
}

BOOL virtual thunk to'AGCLLVMClearVertexDataShader::constructReply(AGCLLVMClearVertexDataShader *this)
{
  return AGCLLVMClearVertexDataShader::constructReply((AGCLLVMClearVertexDataShader *)((char *)this
                                                                                     + *(void *)(*(void *)this
                                                                                                 - 152)));
}

BOOL AGCLLVMClearVertexDataShader::constructReply(AGCLLVMClearVertexDataShader *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMClearVertexDataShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  BOOL v3 = v2;
  if (v2)
  {
    BOOL v59 = v2;
    AGCLLVMObject::validateBackendReply((AGCLLVMClearVertexDataShader *)((char *)this
                                                                       + *(void *)(*(void *)this - 24)));
    BOOL v4 = AGCLLVMObject::constructFlatReply((AGCLLVMClearVertexDataShader *)((char *)this
                                                                          + *(void *)(*(void *)this - 24)));
    int v58 = flatbuffers::FlatBufferBuilder::EndTable(v4, v5);
    unsigned int v6 = 0;
    int v7 = 0;
    unint64_t v8 = 0;
    for (int i = 0; i != 22; ++i)
    {
      int v10 = (char *)this + *(void *)(*(void *)this - 24);
      int v11 = (flatbuffers::FlatBufferBuilder *)(v10 + 2472);
      v10[2542] = 1;
      int v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)v10 + 309, 4, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 6, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, 0);
      flatbuffers::FlatBufferBuilder::AddElement<signed char>(v11, 10, 0);
      int v13 = flatbuffers::FlatBufferBuilder::EndTable(v11, v12);
      int v14 = v13;
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v15 = (v7 - v6) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          abort();
        }
        if ((uint64_t)(v8 - (void)v6) >> 1 > v16) {
          unint64_t v16 = (uint64_t)(v8 - (void)v6) >> 1;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        unint64_t v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)unint64_t v19 = v14;
        unint64_t v20 = v19 + 4;
        while (v7 != v6)
        {
          int v21 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        unint64_t v8 = v17 + 4 * v18;
        if (v6) {
          operator delete(v6);
        }
        unsigned int v6 = v19;
        int v7 = v20;
      }
      else
      {
        *(_DWORD *)int v7 = v13;
        v7 += 4;
      }
    }
    if (v7 == v6) {
      uint64_t v22 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
    }
    else {
      uint64_t v22 = v6;
    }
    int v23 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v22, (v7 - v6) >> 2);
    uint64_t v24 = *(void *)this;
    if (*((_DWORD *)this + 19) == -1)
    {
      uint64_t v31 = 0;
      unsigned int v32 = 0;
    }
    else
    {
      uint64_t v25 = (char *)this + *(void *)(v24 - 24);
      int v26 = (flatbuffers::FlatBufferBuilder *)(v25 + 2472);
      v25[2542] = 1;
      int v27 = *((_DWORD *)v25 + 626) - *((_DWORD *)v25 + 630) + *((_DWORD *)v25 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v25 + 309, 4, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v26, 6, 0);
      unsigned int v28 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v26, 3);
      flatbuffers::FlatBufferBuilder::TrackField(v26, 8, v28);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v26, 12, *((_DWORD *)this + 19));
      unsigned int v29 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v26, 3);
      flatbuffers::FlatBufferBuilder::TrackField(v26, 10, v29);
      int v30 = flatbuffers::FlatBufferBuilder::EndTable(v26, v27);
      uint64_t v31 = (char *)operator new(4uLL);
      *(_DWORD *)uint64_t v31 = v30;
      unsigned int v32 = v31 + 4;
      uint64_t v24 = *(void *)this;
    }
    uint64_t v33 = v32 - v31;
    if (v33) {
      int v34 = v31;
    }
    else {
      int v34 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>> const&)::t;
    }
    int v35 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(v24 - 24) + 2472, (uint64_t)v34, v33 >> 2);
    unsigned int v36 = (char *)this + *(void *)(*(void *)this - 24);
    int v37 = (flatbuffers::FlatBufferBuilder *)(v36 + 2472);
    v36[2542] = 1;
    int v38 = *((_DWORD *)v36 + 626) - *((_DWORD *)v36 + 630) + *((_DWORD *)v36 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v36 + 309, 4, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 12, 0);
    unsigned int v39 = *((_DWORD *)this + 18);
    if (v39 <= 4) {
      unsigned int v39 = 4;
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 14, v39 - 4);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 18, 0);
    int v40 = flatbuffers::FlatBufferBuilder::EndTable(v37, v38);
    unsigned int v41 = (char *)this + *(void *)(*(void *)this - 24);
    int v42 = (flatbuffers::FlatBufferBuilder *)(v41 + 2472);
    v41[2542] = 1;
    int v43 = *((_DWORD *)v41 + 626) - *((_DWORD *)v41 + 630) + *((_DWORD *)v41 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v41 + 309, 18, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 14, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 4, 0);
    LODWORD(v42) = flatbuffers::FlatBufferBuilder::EndTable(v42, v43);
    unsigned int v44 = (char *)this + *(void *)(*(void *)this - 24);
    unsigned int v45 = (flatbuffers::FlatBufferBuilder *)(v44 + 2472);
    v44[2542] = 1;
    int v46 = *((_DWORD *)v44 + 626) - *((_DWORD *)v44 + 630) + *((_DWORD *)v44 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>((flatbuffers::FlatBufferBuilder *)(v44 + 2472), v35);
    int v47 = flatbuffers::FlatBufferBuilder::EndTable(v45, v46);
    unsigned int v48 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v49 = (flatbuffers::FlatBufferBuilder *)(v48 + 2472);
    v48[2542] = 1;
    LODWORD(v45) = *((_DWORD *)v48 + 626) - *((_DWORD *)v48 + 630) + *((_DWORD *)v48 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v48 + 2472), v47);
    unsigned int v50 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v49, 1);
    flatbuffers::FlatBufferBuilder::TrackField(v49, 6, v50);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v49, 8, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v49, 10, *((_DWORD *)this + 18));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v49, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v49, 14, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v49, 16, v40);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v49, 18, (int)v42);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v49, 20, 0, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v49, 22, v23);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v49, 26, 0);
    int v51 = flatbuffers::FlatBufferBuilder::EndTable(v49, (__int16)v45);
    std::string::size_type v52 = (char *)this + *(void *)(*(void *)this - 24);
    int v53 = (flatbuffers::FlatBufferBuilder *)(v52 + 2472);
    v52[2542] = 1;
    LODWORD(v49) = *((_DWORD *)v52 + 626) - *((_DWORD *)v52 + 630) + *((_DWORD *)v52 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v52 + 2472), v58);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v53, v51);
    int v54 = (AGCLLVMClearVertexDataShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v55 = flatbuffers::FlatBufferBuilder::EndTable(v53, (__int16)v49);
    flatbuffers::FlatBufferBuilder::Finish(v54, v55, v56);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMClearVertexDataShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
    if (v31) {
      operator delete(v31);
    }
    BOOL v3 = v59;
    if (v6) {
      operator delete(v6);
    }
  }
  return v3;
}

void virtual thunk to'AGCLLVMClearVertexDataShader::getCompilationKeyDescription(AGCLLVMClearVertexDataShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMClearVertexDataShader::getCompilationKeyDescription(AGCLLVMClearVertexDataShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v6, "");
  std::string::basic_string[abi:nn180100]<0>(v4, "vertex_stride");
  _agcFieldString<unsigned int>(&__p, (const void **)v4, *((_DWORD *)this + 18));
  _agcGroupWithHeader(a2, (uint64_t)v6, (uint64_t)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

uint64_t virtual thunk to'AGCLLVMClearVertexDataShader::getShaderType(AGCLLVMClearVertexDataShader *this)
{
  return 15;
}

const char *virtual thunk to'AGCLLVMClearVertexDataShader::dumpType(AGCLLVMClearVertexDataShader *this)
{
  return "clearvertex";
}

void *virtual thunk to'AGCLLVMClearVertexDataShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.clearvertex");
}

void virtual thunk to'AGCLLVMClearVertexDataShader::~AGCLLVMClearVertexDataShader(AGCLLVMClearVertexDataShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearVertexDataShader *)((char *)this + *(void *)(*(void *)this - 48) + 80));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearVertexDataShader *)((char *)this + *(void *)(*(void *)this - 48) + 80));
}

void *AGCLLVMClearVertexDataShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.clearvertex");
}

uint64_t AGCLLVMClearVertexDataShader::getShaderType(AGCLLVMClearVertexDataShader *this)
{
  return 15;
}

const char *AGCLLVMClearVertexDataShader::dumpType(AGCLLVMClearVertexDataShader *this)
{
  return "clearvertex";
}

void AGCLLVMClearVertexDataShader::~AGCLLVMClearVertexDataShader(AGCLLVMClearVertexDataShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearVertexDataShader *)((char *)this + 80));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearVertexDataShader *)((char *)this + 80));
}

uint64_t virtual thunk to'AGCLLVMTABlitVertexShader::constructReply(AGCLLVMTABlitVertexShader *this)
{
  return AGCLLVMTABlitVertexShader::constructReply((AGCLLVMTABlitVertexShader *)((char *)this
                                                                               + *(void *)(*(void *)this - 152)));
}

uint64_t AGCLLVMTABlitVertexShader::constructReply(AGCLLVMTABlitVertexShader *this)
{
  uint64_t result = AGCDeserializedReply::deserialize((AGCLLVMTABlitVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (result)
  {
    unsigned int v71 = result;
    AGCLLVMObject::validateBackendReply((AGCLLVMTABlitVertexShader *)((char *)this + *(void *)(*(void *)this - 24)));
    BOOL v3 = AGCLLVMObject::constructFlatReply((AGCLLVMTABlitVertexShader *)((char *)this
                                                                       + *(void *)(*(void *)this - 24)));
    __int16 v5 = (__int16)v4;
    v72[0] = v3;
    v72[1] = v4;
    AGCLLVMDriverShader::setGatherMasks(this, v72);
    int v70 = flatbuffers::FlatBufferBuilder::EndTable(v3, v5);
    unsigned int v6 = 0;
    char v7 = 0;
    unint64_t v8 = 0;
    for (int i = 0; i != 22; ++i)
    {
      int v10 = (char *)this + *(void *)(*(void *)this - 24);
      int v11 = (flatbuffers::FlatBufferBuilder *)(v10 + 2472);
      v10[2542] = 1;
      int v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)v10 + 309, 4, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 6, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, 0);
      flatbuffers::FlatBufferBuilder::AddElement<signed char>(v11, 10, 0);
      int v13 = flatbuffers::FlatBufferBuilder::EndTable(v11, v12);
      int v14 = v13;
      if ((unint64_t)v7 >= v8)
      {
        uint64_t v15 = (v7 - v6) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          goto LABEL_54;
        }
        if ((uint64_t)(v8 - (void)v6) >> 1 > v16) {
          unint64_t v16 = (uint64_t)(v8 - (void)v6) >> 1;
        }
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        unint64_t v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)unint64_t v19 = v14;
        unint64_t v20 = v19 + 4;
        while (v7 != v6)
        {
          int v21 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        unint64_t v8 = v17 + 4 * v18;
        if (v6) {
          operator delete(v6);
        }
        unsigned int v6 = v19;
        char v7 = v20;
      }
      else
      {
        *(_DWORD *)char v7 = v13;
        v7 += 4;
      }
    }
    if (v7 == v6) {
      uint64_t v22 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
    }
    else {
      uint64_t v22 = v6;
    }
    int v23 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v22, (v7 - v6) >> 2);
    uint64_t v24 = *(void *)this;
    if (*((_DWORD *)this + 22) == -1)
    {
      uint64_t v31 = 0;
      int v34 = 0;
      uint64_t v33 = 0;
    }
    else
    {
      uint64_t v25 = (char *)this + *(void *)(v24 - 24);
      int v26 = (flatbuffers::FlatBufferBuilder *)(v25 + 2472);
      v25[2542] = 1;
      int v27 = *((_DWORD *)v25 + 626) - *((_DWORD *)v25 + 630) + *((_DWORD *)v25 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v25 + 309, 4, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v26, 6, 0);
      unsigned int v28 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v26, 3);
      flatbuffers::FlatBufferBuilder::TrackField(v26, 8, v28);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v26, 12, *((_DWORD *)this + 22));
      unsigned int v29 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v26, 4);
      flatbuffers::FlatBufferBuilder::TrackField(v26, 10, v29);
      int v30 = flatbuffers::FlatBufferBuilder::EndTable(v26, v27);
      uint64_t v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(1uLL);
      uint64_t v33 = &v31[4 * v32];
      *(_DWORD *)uint64_t v31 = v30;
      int v34 = v31 + 4;
      uint64_t v24 = *(void *)this;
    }
    int v69 = v23;
    if (*((_DWORD *)this + 23) != -1)
    {
      int v35 = (char *)this + *(void *)(v24 - 24);
      unsigned int v36 = (flatbuffers::FlatBufferBuilder *)(v35 + 2472);
      v35[2542] = 1;
      int v37 = *((_DWORD *)v35 + 626) - *((_DWORD *)v35 + 630) + *((_DWORD *)v35 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v35 + 309, 4, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36, 6, 0);
      unsigned int v38 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v36, 3);
      flatbuffers::FlatBufferBuilder::TrackField(v36, 8, v38);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36, 12, *((_DWORD *)this + 23));
      unsigned int v39 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v36, 2);
      flatbuffers::FlatBufferBuilder::TrackField(v36, 10, v39);
      int v40 = flatbuffers::FlatBufferBuilder::EndTable(v36, v37);
      int v41 = v40;
      if (v34 >= v33)
      {
        uint64_t v43 = (v34 - v31) >> 2;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62) {
LABEL_54:
        }
          abort();
        if ((v33 - v31) >> 1 > v44) {
          unint64_t v44 = (v33 - v31) >> 1;
        }
        if ((unint64_t)(v33 - v31) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v44;
        }
        if (v45) {
          unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v45);
        }
        int v46 = (char *)(v45 + 4 * v43);
        *(_DWORD *)int v46 = v41;
        int v42 = v46 + 4;
        while (v34 != v31)
        {
          int v47 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *((_DWORD *)v46 - 1) = v47;
          v46 -= 4;
        }
        if (v31) {
          operator delete(v31);
        }
        uint64_t v31 = v46;
      }
      else
      {
        *(_DWORD *)int v34 = v40;
        int v42 = v34 + 4;
      }
      uint64_t v24 = *(void *)this;
      int v34 = v42;
    }
    int v48 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(v24 - 24) + 2472, (uint64_t)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>> const&)::t, 0);
    if (v34 == v31) {
      uint64_t v49 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>> const&)::t;
    }
    else {
      uint64_t v49 = v31;
    }
    int v50 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v49, (v34 - v31) >> 2);
    int v51 = (char *)this + *(void *)(*(void *)this - 24);
    std::string::size_type v52 = (flatbuffers::FlatBufferBuilder *)(v51 + 2472);
    v51[2542] = 1;
    int v53 = *((_DWORD *)v51 + 626) - *((_DWORD *)v51 + 630) + *((_DWORD *)v51 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v51 + 309, 4, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 14, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 18, 0);
    LODWORD(v52) = flatbuffers::FlatBufferBuilder::EndTable(v52, v53);
    int v54 = (char *)this + *(void *)(*(void *)this - 24);
    int v55 = (flatbuffers::FlatBufferBuilder *)(v54 + 2472);
    v54[2542] = 1;
    int v56 = *((_DWORD *)v54 + 626) - *((_DWORD *)v54 + 630) + *((_DWORD *)v54 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v54 + 309, 18, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 14, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 4, 0);
    LODWORD(v55) = flatbuffers::FlatBufferBuilder::EndTable(v55, v56);
    unsigned int v57 = (char *)this + *(void *)(*(void *)this - 24);
    int v58 = (flatbuffers::FlatBufferBuilder *)(v57 + 2472);
    v57[2542] = 1;
    int v59 = *((_DWORD *)v57 + 626) - *((_DWORD *)v57 + 630) + *((_DWORD *)v57 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v57 + 2472), v48);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v58, v50);
    int v60 = flatbuffers::FlatBufferBuilder::EndTable(v58, v59);
    int v61 = (char *)this + *(void *)(*(void *)this - 24);
    int v62 = (flatbuffers::FlatBufferBuilder *)(v61 + 2472);
    v61[2542] = 1;
    int v63 = *((_DWORD *)v61 + 626) - *((_DWORD *)v61 + 630) + *((_DWORD *)v61 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v61 + 2472), v60);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v62, 6, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v62, 8, *((unsigned char *)this + 100) != 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v62, 10, *((_DWORD *)this + 24));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v62, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v62, 14, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v62, 16, (int)v52);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v62, 18, (int)v55);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v62, 20, 0, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v62, 22, v69);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v62, 26, 0);
    LODWORD(v58) = flatbuffers::FlatBufferBuilder::EndTable(v62, v63);
    uint64_t v64 = (char *)this + *(void *)(*(void *)this - 24);
    int v65 = (flatbuffers::FlatBufferBuilder *)(v64 + 2472);
    v64[2542] = 1;
    LODWORD(v62) = *((_DWORD *)v64 + 626) - *((_DWORD *)v64 + 630) + *((_DWORD *)v64 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v64 + 2472), v70);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v65, (int)v58);
    char v66 = (AGCLLVMTABlitVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v67 = flatbuffers::FlatBufferBuilder::EndTable(v65, (__int16)v62);
    flatbuffers::FlatBufferBuilder::Finish(v66, v67, v68);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMTABlitVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
    if (v31) {
      operator delete(v31);
    }
    if (v6) {
      operator delete(v6);
    }
    return v71;
  }
  return result;
}

void *AGCLLVMDriverShader::setGatherMasks(void *result, void **a2)
{
  if (*(_DWORD *)(*(void *)((char *)result + *(void *)(*result - 24) + 400) + 1780))
  {
    BOOL v3 = result;
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(*a2, 22, result[6], 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(*a2, 24, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(*a2, 26, v3[7], 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(*a2, 28, 0, 0);
    uint64_t v4 = v3[8];
    __int16 v5 = *a2;
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v5, 30, v4, 0);
  }
  return result;
}

void virtual thunk to'AGCLLVMTABlitVertexShader::getCompilationKeyDescription(AGCLLVMTABlitVertexShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMTABlitVertexShader::getCompilationKeyDescription(AGCLLVMTABlitVertexShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  BOOL v3 = (_DWORD *)*((void *)this + 10);
  std::string::basic_string[abi:nn180100]<0>(v21, "AGCTABlitState");
  std::string::basic_string[abi:nn180100]<0>(v19, "blitType");
  _agcFieldString<char const*>(&v23, (const void **)v19, (&_AGCTABlitTypeStrings)[*v3 & 7]);
  std::string::basic_string[abi:nn180100]<0>(v17, "primitiveSizePOT");
  _agcFieldString<unsigned int>(&v24, (const void **)v17, (*v3 >> 8) & 7);
  std::string::basic_string[abi:nn180100]<0>(v15, "primitiveCount");
  _agcFieldString<unsigned int>(&v25, (const void **)v15, (*v3 >> 11));
  std::string::basic_string[abi:nn180100]<0>(v13, "loopCount");
  _agcFieldString<unsigned int>(&v26, (const void **)v13, (*v3 >> 19) & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v11, "sampleCountPOT");
  _agcFieldString<unsigned int>(&v27, (const void **)v11, (*v3 >> 23) & 3);
  std::string::basic_string[abi:nn180100]<0>(v9, "regionOffset");
  _agcFieldString<unsigned int>(&v28, (const void **)v9, (*v3 >> 25) & 1);
  std::string::basic_string[abi:nn180100]<0>(v7, "blitTextureFormat");
  _agcFieldString<unsigned int>(&v29, (const void **)v7, *v3 >> 3);
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v30, (const void **)__p, *v3 >> 28);
  _agcGroupWithHeader(a2, (uint64_t)v21, (uint64_t)&v23, 8);
  for (uint64_t i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v30.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
}

uint64_t virtual thunk to'AGCLLVMTABlitVertexShader::getShaderType(AGCLLVMTABlitVertexShader *this)
{
  return 16;
}

const char *virtual thunk to'AGCLLVMTABlitVertexShader::dumpType(AGCLLVMTABlitVertexShader *this)
{
  return "blitTA";
}

void *virtual thunk to'AGCLLVMTABlitVertexShader::wrapperName@<X0>(AGCLLVMTABlitVertexShader *this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, (&AGCLLVMTABlitVertexShader::wrapperName(void)const::names)[**(_DWORD **)((char *)this+ *(void *)(*(void *)this - 64)+ 80) & 7]);
}

void virtual thunk to'AGCLLVMTABlitVertexShader::~AGCLLVMTABlitVertexShader(AGCLLVMTABlitVertexShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTABlitVertexShader *)((char *)this + *(void *)(*(void *)this - 48) + 104));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTABlitVertexShader *)((char *)this + *(void *)(*(void *)this - 48) + 104));
}

void *AGCLLVMTABlitVertexShader::wrapperName@<X0>(AGCLLVMTABlitVertexShader *this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, (&AGCLLVMTABlitVertexShader::wrapperName(void)const::names)[**((_DWORD **)this + 10) & 7]);
}

uint64_t AGCLLVMTABlitVertexShader::getShaderType(AGCLLVMTABlitVertexShader *this)
{
  return 16;
}

const char *AGCLLVMTABlitVertexShader::dumpType(AGCLLVMTABlitVertexShader *this)
{
  return "blitTA";
}

void AGCLLVMTABlitVertexShader::~AGCLLVMTABlitVertexShader(AGCLLVMTABlitVertexShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTABlitVertexShader *)((char *)this + 104));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTABlitVertexShader *)((char *)this + 104));
}

BOOL virtual thunk to'AGCLLVMDriverFragmentShader::constructReply(AGCLLVMDriverFragmentShader *this)
{
  return AGCLLVMDriverFragmentShader::constructReply((AGCLLVMDriverFragmentShader *)((char *)this
                                                                                   + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMDriverFragmentShader::constructReply(AGCLLVMDriverFragmentShader *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMDriverFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMDriverFragmentShader *)((char *)this
                                                                      + *(void *)(*(void *)this - 24)));
    uint64_t v3 = *(void *)this;
    uint64_t v4 = *(void *)(*(void *)this - 24);
    if (*(unsigned char *)(*(void *)((char *)this + v4 + 400) + 1749))
    {
      char v22 = (flatbuffers::FlatBufferBuilder *)0x8000000000008000;
      uint64_t v23 = 0;
      int v5 = AIRConstSampler::constructFlatReply((AIRConstSampler *)&v22, (AGCLLVMDriverFragmentShader *)((char *)this + v4 + 2472));
      char v6 = operator new(4uLL);
      *char v6 = v5;
      int v7 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v6, 1);
      operator delete(v6);
      uint64_t v3 = *(void *)this;
    }
    else
    {
      int v7 = 0;
    }
    char v8 = AGCLLVMObject::constructFlatReply((AGCLLVMDriverFragmentShader *)((char *)this + *(void *)(v3 - 24)));
    __int16 v10 = v9;
    char v22 = v8;
    uint64_t v23 = v9;
    AGCLLVMDriverShader::setGatherMasks(this, (void **)&v22);
    if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1749)) {
      flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v8, v7);
    }
    int v11 = flatbuffers::FlatBufferBuilder::EndTable(v8, v10);
    char v12 = (flatbuffers::FlatBufferBuilder *)(*(uint64_t (**)(AGCLLVMDriverFragmentShader *))(*(void *)this + 48))(this);
    int v14 = flatbuffers::FlatBufferBuilder::EndTable(v12, v13);
    uint64_t v15 = (char *)this + *(void *)(*(void *)this - 24);
    char v16 = (flatbuffers::FlatBufferBuilder *)(v15 + 2472);
    v15[2542] = 1;
    int v17 = *((_DWORD *)v15 + 626) - *((_DWORD *)v15 + 630) + *((_DWORD *)v15 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v15 + 2472), v11);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::FragmentShaderInfo>(v16, v14);
    char v18 = (AGCLLVMDriverFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v19 = flatbuffers::FlatBufferBuilder::EndTable(v16, v17);
    flatbuffers::FlatBufferBuilder::Finish(v18, v19, v20);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMDriverFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  }
  return v2;
}

void virtual thunk to'AGCLLVMClearFragmentShader::getCompilationKeyDescription(AGCLLVMClearFragmentShader *this@<X0>, uint64_t a2@<X8>)
{
}

void AGCLLVMClearFragmentShader::getCompilationKeyDescription(AGCLLVMClearFragmentShader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  agcStringRepresentation<_AGCDrawBufferState>(&v5, *((void *)this + 83));
  std::string::basic_string[abi:nn180100]<0>(v14, "AGCColorMaskState");
  std::string::basic_string[abi:nn180100]<0>(v12, "redEnableBits");
  _agcFieldStringHex(&v16, (const void **)v12);
  std::string::basic_string[abi:nn180100]<0>(v10, "greenEnableBits");
  _agcFieldStringHex(&v17, (const void **)v10);
  std::string::basic_string[abi:nn180100]<0>(v8, "blueEnableBits");
  _agcFieldStringHex(&v18, (const void **)v8);
  std::string::basic_string[abi:nn180100]<0>(__p, "alphaEnableBits");
  _agcFieldStringHex(&v19, (const void **)__p);
  _agcGroupWithHeader(&v4, (uint64_t)v14, (uint64_t)&v16, 4);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v19.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v19.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)&v5.__r_.__value_.__l.__data_, (const void **)&v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void agcStringRepresentation<_AGCDrawBufferState>(std::string *a1, uint64_t a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v44, "AGCDrawBufferState");
  std::string::basic_string[abi:nn180100]<0>(v42, "enabledBits");
  _agcFieldStringHex(&v54, (const void **)v42);
  std::string::basic_string[abi:nn180100]<0>(v40, "sampleCount");
  _agcFieldString<unsigned int>(&v55, (const void **)v40, (*(_DWORD *)(a2 + 32) >> 8) & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v38, "colorSampleCount");
  _agcFieldString<unsigned int>(&v56, (const void **)v38, (unsigned __int16)*(_DWORD *)(a2 + 32) >> 12);
  std::string::basic_string[abi:nn180100]<0>(v36, "outputPartitionSize");
  _agcFieldString<unsigned int>(&v57, (const void **)v36, *(_WORD *)(a2 + 34) & 0x1FF);
  std::string::basic_string[abi:nn180100]<0>(v34, "LIBSpilling");
  _agcFieldString<unsigned int>(&v58, (const void **)v34, (*(_DWORD *)(a2 + 32) >> 25) & 1);
  std::string::basic_string[abi:nn180100]<0>(v32, "unused");
  _agcFieldString<unsigned int>(&v59, (const void **)v32, *(_DWORD *)(a2 + 32) >> 27);
  std::string::basic_string[abi:nn180100]<0>(v30, "encoded : ");
  std::string::basic_string[abi:nn180100]<0>(v28, "encoded[0]");
  _agcStringRepresentation(&v27, (_DWORD *)a2);
  _agcFieldString<std::string>(&v46, (const void **)v28, (uint64_t)&v27);
  std::string::basic_string[abi:nn180100]<0>(v25, "encoded[1]");
  _agcStringRepresentation(&v24, (_DWORD *)(a2 + 4));
  _agcFieldString<std::string>(&v47, (const void **)v25, (uint64_t)&v24);
  std::string::basic_string[abi:nn180100]<0>(v22, "encoded[2]");
  _agcStringRepresentation(&v21, (_DWORD *)(a2 + 8));
  _agcFieldString<std::string>(&v48, (const void **)v22, (uint64_t)&v21);
  std::string::basic_string[abi:nn180100]<0>(v19, "encoded[3]");
  _agcStringRepresentation(&v18, (_DWORD *)(a2 + 12));
  _agcFieldString<std::string>(&v49, (const void **)v19, (uint64_t)&v18);
  std::string::basic_string[abi:nn180100]<0>(v16, "encoded[4]");
  _agcStringRepresentation(&v15, (_DWORD *)(a2 + 16));
  _agcFieldString<std::string>(&v50, (const void **)v16, (uint64_t)&v15);
  std::string::basic_string[abi:nn180100]<0>(v13, "encoded[5]");
  _agcStringRepresentation(&v12, (_DWORD *)(a2 + 20));
  _agcFieldString<std::string>(&v51, (const void **)v13, (uint64_t)&v12);
  std::string::basic_string[abi:nn180100]<0>(v10, "encoded[6]");
  _agcStringRepresentation(&v9, (_DWORD *)(a2 + 24));
  _agcFieldString<std::string>(&v52, (const void **)v10, (uint64_t)&v9);
  std::string::basic_string[abi:nn180100]<0>(v7, "encoded[7]");
  _agcStringRepresentation(&__p, (_DWORD *)(a2 + 28));
  _agcFieldString<std::string>(&v53, (const void **)v7, (uint64_t)&__p);
  _agcGroupWithHeader(&v60, (uint64_t)v30, (uint64_t)&v46, 8);
  _agcGroupWithHeader(a1, (uint64_t)v44, (uint64_t)&v54, 7);
  for (uint64_t i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v60.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v60.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  for (uint64_t j = 0; j != -24; j -= 3)
  {
    if (SHIBYTE(v53.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v53.__r_.__value_.__l.__data_ + j * 8));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
}

uint64_t virtual thunk to'AGCLLVMClearFragmentShader::getShaderType(AGCLLVMClearFragmentShader *this)
{
  return 17;
}

const char *virtual thunk to'AGCLLVMClearFragmentShader::dumpType(AGCLLVMClearFragmentShader *this)
{
  return "clear";
}

void *virtual thunk to'AGCLLVMClearFragmentShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.clear");
}

void virtual thunk to'AGCLLVMClearFragmentShader::~AGCLLVMClearFragmentShader(AGCLLVMClearFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearFragmentShader *)((char *)this + *(void *)(*(void *)this - 48) + 696));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearFragmentShader *)((char *)this + *(void *)(*(void *)this - 48) + 696));
}

void non-virtual thunk to'AGCLLVMClearFragmentShader::~AGCLLVMClearFragmentShader(AGCLLVMClearFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearFragmentShader *)((char *)this + 624));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearFragmentShader *)((char *)this + 624));
}

void *AGCLLVMClearFragmentShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.clear");
}

uint64_t AGCLLVMClearFragmentShader::getShaderType(AGCLLVMClearFragmentShader *this)
{
  return 17;
}

const char *AGCLLVMClearFragmentShader::dumpType(AGCLLVMClearFragmentShader *this)
{
  return "clear";
}

void *AGCLLVMDriverFragmentShader::constructFlatReply(AGCLLVMDriverFragmentShader *this)
{
  return AGCLLVMFragmentShader::constructFlatReply((AGCLLVMDriverFragmentShader *)((char *)this + 72));
}

void AGCLLVMClearFragmentShader::~AGCLLVMClearFragmentShader(AGCLLVMClearFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearFragmentShader *)((char *)this + 696));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearFragmentShader *)((char *)this + 696));
}

void virtual thunk to'AGCLLVMBackgroundObjectFragmentShader::getCompilationKeyDescription(AGCLLVMBackgroundObjectFragmentShader *this@<X0>, uint64_t a2@<X8>)
{
}

void AGCLLVMBackgroundObjectFragmentShader::getCompilationKeyDescription(AGCLLVMBackgroundObjectFragmentShader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  agcStringRepresentation<_AGCDrawBufferState>(&v7, *((void *)this + 83));
  std::string v4 = (unsigned __int8 *)*((void *)this + 86);
  std::string::basic_string[abi:nn180100]<0>(v16, "AGCBackgroundObjectState");
  std::string::basic_string[abi:nn180100]<0>(v14, "dimensionBits");
  std::to_string(&v18, *(unsigned __int16 *)v4);
  _agcFieldString<std::string>(&v19, (const void **)v14, (uint64_t)&v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v18, "arrayBits");
  _agcFieldString<unsigned char>(&v20, (const void **)&v18.__r_.__value_.__l.__data_, v4[2]);
  std::string::basic_string[abi:nn180100]<0>(v12, "clearedBits");
  _agcFieldString<unsigned char>(&v21, (const void **)v12, v4[3]);
  std::string::basic_string[abi:nn180100]<0>(v10, "loadedBits");
  _agcFieldString<unsigned char>(&v22, (const void **)v10, v4[4]);
  std::string::basic_string[abi:nn180100]<0>(__p, "uberVariant");
  _agcFieldString<unsigned char>(&v23, (const void **)__p, v4[5] & 1);
  _agcGroupWithHeader(&v6, (uint64_t)v16, (uint64_t)&v19, 5);
  for (uint64_t i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v23.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v23.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)&v7.__r_.__value_.__l.__data_, (const void **)&v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void _agcFieldString<unsigned char>(std::string *a1, const void **a2, unsigned __int8 a3)
{
  std::to_string(&v5, a3);
  _agcFieldString<std::string>(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

uint64_t virtual thunk to'AGCLLVMBackgroundObjectFragmentShader::getShaderType(AGCLLVMBackgroundObjectFragmentShader *this)
{
  return 18;
}

const char *virtual thunk to'AGCLLVMBackgroundObjectFragmentShader::dumpType(AGCLLVMBackgroundObjectFragmentShader *this)
{
  uint64_t v1 = *(unsigned int **)((char *)this + *(void *)(*(void *)this - 72) + 688);
  if (((*v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32)) & 0x10000000000) != 0) {
    return "bgo_uber";
  }
  else {
    return "bgo";
  }
}

void *virtual thunk to'AGCLLVMBackgroundObjectFragmentShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.background");
}

void virtual thunk to'AGCLLVMBackgroundObjectFragmentShader::~AGCLLVMBackgroundObjectFragmentShader(AGCLLVMBackgroundObjectFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMBackgroundObjectFragmentShader *)((char *)this
                                                                        + *(void *)(*(void *)this - 48)
                                                                        + 696));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMBackgroundObjectFragmentShader *)((char *)this
                                                                        + *(void *)(*(void *)this - 48)
                                                                        + 696));
}

void non-virtual thunk to'AGCLLVMBackgroundObjectFragmentShader::~AGCLLVMBackgroundObjectFragmentShader(AGCLLVMBackgroundObjectFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMBackgroundObjectFragmentShader *)((char *)this + 624));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMBackgroundObjectFragmentShader *)((char *)this + 624));
}

void *AGCLLVMBackgroundObjectFragmentShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.background");
}

uint64_t AGCLLVMBackgroundObjectFragmentShader::getShaderType(AGCLLVMBackgroundObjectFragmentShader *this)
{
  return 18;
}

const char *AGCLLVMBackgroundObjectFragmentShader::dumpType(AGCLLVMBackgroundObjectFragmentShader *this)
{
  if (((**((unsigned int **)this + 86) | ((unint64_t)*(unsigned __int16 *)(*((void *)this + 86) + 4) << 32)) & 0x10000000000) != 0) {
    return "bgo_uber";
  }
  else {
    return "bgo";
  }
}

void *AGCLLVMBackgroundObjectFragmentShader::constructFlatReply(AGCLLVMBackgroundObjectFragmentShader *this)
{
  if (((**((unsigned int **)this + 86) | ((unint64_t)*(unsigned __int16 *)(*((void *)this + 86) + 4) << 32)) & 0x10000000000) == 0) {
    return AGCLLVMFragmentShader::constructFlatReply((AGCLLVMBackgroundObjectFragmentShader *)((char *)this + 72));
  }
  BOOL v2 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v1 = v2 + 2472;
  v2[2542] = 1;
  unsigned int v3 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>((uint64_t)(v2 + 2472), 0xFFFFFFFFLL);
  flatbuffers::FlatBufferBuilder::TrackField(v1, 8, v3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v1, 6, 0, 0);
  return v1;
}

void AGCLLVMBackgroundObjectFragmentShader::~AGCLLVMBackgroundObjectFragmentShader(AGCLLVMBackgroundObjectFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMBackgroundObjectFragmentShader *)((char *)this + 696));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMBackgroundObjectFragmentShader *)((char *)this + 696));
}

BOOL virtual thunk to'AGCLLVMEndOfTileProgram::constructReply(AGCLLVMEndOfTileProgram *this)
{
  return AGCLLVMEndOfTileProgram::constructReply((AGCLLVMEndOfTileProgram *)((char *)this
                                                                           + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMEndOfTileProgram::constructReply(AGCLLVMEndOfTileProgram *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 24)));
    unsigned int v3 = AGCLLVMObject::constructFlatReply((AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 24)));
    __int16 v5 = (__int16)v4;
    v25[0] = v3;
    v25[1] = v4;
    AGCLLVMDriverShader::setGatherMasks(this, v25);
    int v6 = flatbuffers::FlatBufferBuilder::EndTable(v3, v5);
    std::string v7 = (char *)this + *(void *)(*(void *)this - 24);
    char v8 = (flatbuffers::FlatBufferBuilder *)(v7 + 2472);
    v7[2542] = 1;
    int v9 = *((_DWORD *)v7 + 626) - *((_DWORD *)v7 + 630) + *((_DWORD *)v7 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v7 + 2472), v6);
    __int16 v10 = (AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v11 = flatbuffers::FlatBufferBuilder::EndTable(v8, v9);
    flatbuffers::FlatBufferBuilder::Finish(v10, v11, v12);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
    if (*((unsigned char *)this + 81))
    {
      char v13 = (char *)this + *(void *)(*(void *)this - 24);
      char v14 = (flatbuffers::FlatBufferBuilder *)(v13 + 2568);
      v13[2638] = 1;
      int v15 = *((_DWORD *)v13 + 650) - *((_DWORD *)v13 + 654) + *((_DWORD *)v13 + 652);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v13 + 321, 10, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14, 8, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v14, 12, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v14, 6, 0, 0);
      unsigned int v16 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v14, 1);
      flatbuffers::FlatBufferBuilder::TrackField(v14, 4, v16);
      int v17 = flatbuffers::FlatBufferBuilder::EndTable(v14, v15);
      std::string v18 = (char *)this + *(void *)(*(void *)this - 24);
      std::string v19 = (flatbuffers::FlatBufferBuilder *)(v18 + 2568);
      v18[2638] = 1;
      int v20 = *((_DWORD *)v18 + 650) - *((_DWORD *)v18 + 654) + *((_DWORD *)v18 + 652);
      flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::FragmentShaderInfo>((flatbuffers::FlatBufferBuilder *)(v18 + 2568), v17);
      std::string v21 = (AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 24) + 2568);
      int v22 = flatbuffers::FlatBufferBuilder::EndTable(v19, v20);
      flatbuffers::FlatBufferBuilder::Finish(v21, v22, v23);
      AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
    }
  }
  return v2;
}

void virtual thunk to'AGCLLVMEndOfTileProgram::getCompilationKeyDescription(AGCLLVMEndOfTileProgram *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMEndOfTileProgram::getCompilationKeyDescription(AGCLLVMEndOfTileProgram *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 9);
  std::string::basic_string[abi:nn180100]<0>(v73, "AGCEndOfTileState");
  std::string::basic_string[abi:nn180100]<0>(v71, "emitMask");
  _agcFieldStringHex(&v92, (const void **)v71);
  std::string::basic_string[abi:nn180100]<0>(v69, "conditionalMask");
  _agcFieldStringHex(&v93, (const void **)v69);
  std::string::basic_string[abi:nn180100]<0>(v67, "sampleCount");
  _agcFieldString<unsigned long long>(&v94, (const void **)v67, *(_DWORD *)(v3 + 76) & 0xFLL);
  std::string::basic_string[abi:nn180100]<0>(v65, "outputPartitionSize");
  _agcFieldString<unsigned long long>(&v95, (const void **)v65, (*(void *)(v3 + 72) >> 36) & 0x1FFLL);
  std::string::basic_string[abi:nn180100]<0>(v63, "numEmits");
  _agcFieldString<unsigned long long>(&v96, (const void **)v63, (*(void *)(v3 + 72) >> 45) & 0x1FLL);
  std::string::basic_string[abi:nn180100]<0>(v61, "dummyEmitIndex");
  _agcFieldString<unsigned long long>(&v97, (const void **)v61, (*(void *)(v3 + 72) >> 50) & 0x1FLL);
  std::string::basic_string[abi:nn180100]<0>(v59, "unused");
  _agcFieldString<unsigned long long>(&v98, (const void **)v59, *(void *)(v3 + 72) >> 58);
  std::string::basic_string[abi:nn180100]<0>(v57, "encoded : ");
  std::string::basic_string[abi:nn180100]<0>(v55, "encoded[0]");
  _agcStringRepresentation(&v54, (unsigned __int8 *)v3);
  _agcFieldString<std::string>(&v75, (const void **)v55, (uint64_t)&v54);
  std::string::basic_string[abi:nn180100]<0>(v52, "encoded[1]");
  _agcStringRepresentation(&v51, (unsigned __int8 *)(v3 + 4));
  _agcFieldString<std::string>(&v76, (const void **)v52, (uint64_t)&v51);
  std::string::basic_string[abi:nn180100]<0>(v49, "encoded[2]");
  _agcStringRepresentation(&v48, (unsigned __int8 *)(v3 + 8));
  _agcFieldString<std::string>(&v77, (const void **)v49, (uint64_t)&v48);
  std::string::basic_string[abi:nn180100]<0>(v46, "encoded[3]");
  _agcStringRepresentation(&v45, (unsigned __int8 *)(v3 + 12));
  _agcFieldString<std::string>(&v78, (const void **)v46, (uint64_t)&v45);
  std::string::basic_string[abi:nn180100]<0>(v43, "encoded[4]");
  _agcStringRepresentation(&v42, (unsigned __int8 *)(v3 + 16));
  _agcFieldString<std::string>(&v79, (const void **)v43, (uint64_t)&v42);
  std::string::basic_string[abi:nn180100]<0>(v40, "encoded[5]");
  _agcStringRepresentation(&v39, (unsigned __int8 *)(v3 + 20));
  _agcFieldString<std::string>(&v80, (const void **)v40, (uint64_t)&v39);
  std::string::basic_string[abi:nn180100]<0>(v37, "encoded[6]");
  _agcStringRepresentation(&v36, (unsigned __int8 *)(v3 + 24));
  _agcFieldString<std::string>(&v81, (const void **)v37, (uint64_t)&v36);
  std::string::basic_string[abi:nn180100]<0>(v34, "encoded[7]");
  _agcStringRepresentation(&v33, (unsigned __int8 *)(v3 + 28));
  _agcFieldString<std::string>(&v82, (const void **)v34, (uint64_t)&v33);
  std::string::basic_string[abi:nn180100]<0>(v31, "encoded[8]");
  _agcStringRepresentation(&v30, (unsigned __int8 *)(v3 + 32));
  _agcFieldString<std::string>(&v83, (const void **)v31, (uint64_t)&v30);
  std::string::basic_string[abi:nn180100]<0>(v28, "encoded[9]");
  _agcStringRepresentation(&v27, (unsigned __int8 *)(v3 + 36));
  _agcFieldString<std::string>(&v84, (const void **)v28, (uint64_t)&v27);
  std::string::basic_string[abi:nn180100]<0>(v25, "encoded[10]");
  _agcStringRepresentation(&v24, (unsigned __int8 *)(v3 + 40));
  _agcFieldString<std::string>(&v85, (const void **)v25, (uint64_t)&v24);
  std::string::basic_string[abi:nn180100]<0>(v22, "encoded[11]");
  _agcStringRepresentation(&v21, (unsigned __int8 *)(v3 + 44));
  _agcFieldString<std::string>(&v86, (const void **)v22, (uint64_t)&v21);
  std::string::basic_string[abi:nn180100]<0>(v19, "encoded[12]");
  _agcStringRepresentation(&v18, (unsigned __int8 *)(v3 + 48));
  _agcFieldString<std::string>(&v87, (const void **)v19, (uint64_t)&v18);
  std::string::basic_string[abi:nn180100]<0>(v16, "encoded[13]");
  _agcStringRepresentation(&v15, (unsigned __int8 *)(v3 + 52));
  _agcFieldString<std::string>(&v88, (const void **)v16, (uint64_t)&v15);
  std::string::basic_string[abi:nn180100]<0>(v13, "encoded[14]");
  _agcStringRepresentation(&v12, (unsigned __int8 *)(v3 + 56));
  _agcFieldString<std::string>(&v89, (const void **)v13, (uint64_t)&v12);
  std::string::basic_string[abi:nn180100]<0>(v10, "encoded[15]");
  _agcStringRepresentation(&v9, (unsigned __int8 *)(v3 + 60));
  _agcFieldString<std::string>(&v90, (const void **)v10, (uint64_t)&v9);
  std::string::basic_string[abi:nn180100]<0>(v7, "encoded[16]");
  _agcStringRepresentation(&__p, (unsigned __int8 *)(v3 + 64));
  _agcFieldString<std::string>(&v91, (const void **)v7, (uint64_t)&__p);
  _agcGroupWithHeader(&v99, (uint64_t)v57, (uint64_t)&v75, 17);
  _agcGroupWithHeader(a2, (uint64_t)v73, (uint64_t)&v92, 8);
  for (uint64_t i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v99.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v99.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  uint64_t v5 = 51;
  do
  {
    if (v75.__r_.__value_.__s.__data_[v5 * 8 - 1] < 0) {
      operator delete(v73[v5]);
    }
    v5 -= 3;
  }
  while (v5 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  if (v68 < 0) {
    operator delete(v67[0]);
  }
  if (v70 < 0) {
    operator delete(v69[0]);
  }
  if (v72 < 0) {
    operator delete(v71[0]);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
}

void _agcStringRepresentation(std::string *a1, unsigned __int8 *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v19, "AGCEmitState");
  std::string::basic_string[abi:nn180100]<0>(v17, "slotIndex");
  _agcFieldString<unsigned int>(&v21, (const void **)v17, *a2);
  std::string::basic_string[abi:nn180100]<0>(v15, "channelFormat");
  _agcFieldString<unsigned int>(&v22, (const void **)v15, a2[1]);
  std::string::basic_string[abi:nn180100]<0>(v13, "dimension");
  _agcFieldString<unsigned int>(&v23, (const void **)v13, a2[2]);
  std::string::basic_string[abi:nn180100]<0>(v11, "gammaCorrection");
  _agcFieldString<unsigned int>(&v24, (const void **)v11, HIBYTE(*(_DWORD *)a2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "sparse");
  _agcFieldString<unsigned int>(&v25, (const void **)v9, (*(_DWORD *)a2 >> 25) & 1);
  std::string::basic_string[abi:nn180100]<0>(v7, "numWrittenComponents");
  _agcFieldString<unsigned int>(&v26, (const void **)v7, (*(_DWORD *)a2 >> 26) & 7);
  std::string::basic_string[abi:nn180100]<0>(__p, "manualResolve");
  _agcFieldString<unsigned int>(&v27, (const void **)__p, (*(_DWORD *)a2 >> 29) & 1);
  _agcGroupWithHeader(a1, (uint64_t)v19, (uint64_t)&v21, 7);
  for (uint64_t i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v27.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v27.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
}

uint64_t virtual thunk to'AGCLLVMEndOfTileProgram::getShaderType(AGCLLVMEndOfTileProgram *this)
{
  return 21;
}

const char *virtual thunk to'AGCLLVMEndOfTileProgram::dumpType(AGCLLVMEndOfTileProgram *this)
{
  unint64_t v1 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 72) + 72) + 72);
  uint64_t v2 = (v1 >> 55) & 3;
  if ((v1 & 0x200000000000000) != 0)
  {
    if (v2 == 1) {
      return "sw_eot_uber";
    }
    std::string v4 = "eot_uber";
    uint64_t v5 = "eotfc_uber";
  }
  else
  {
    if (v2 == 1) {
      return "sw_eot";
    }
    std::string v4 = "eot";
    uint64_t v5 = "eotfc";
  }
  if (v2 == 2) {
    return v5;
  }
  else {
    return v4;
  }
}

void *virtual thunk to'AGCLLVMEndOfTileProgram::wrapperName@<X0>(AGCLLVMEndOfTileProgram *this@<X0>, void *a2@<X8>)
{
  std::string v4 = (char *)this + *(void *)(*(void *)this - 64);
  if (v4[81])
  {
    uint64_t v5 = "agc.sw_eot";
  }
  else if (v4[82])
  {
    uint64_t v5 = "agc.eotfc";
  }
  else
  {
    uint64_t v5 = "agc.eot";
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v5);
}

void virtual thunk to'AGCLLVMEndOfTileProgram::~AGCLLVMEndOfTileProgram(AGCLLVMEndOfTileProgram *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 48) + 96));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 48) + 96));
}

void *AGCLLVMEndOfTileProgram::wrapperName@<X0>(AGCLLVMEndOfTileProgram *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 81))
  {
    uint64_t v2 = "agc.sw_eot";
  }
  else if (*((unsigned char *)this + 82))
  {
    uint64_t v2 = "agc.eotfc";
  }
  else
  {
    uint64_t v2 = "agc.eot";
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v2);
}

uint64_t AGCLLVMEndOfTileProgram::getShaderType(AGCLLVMEndOfTileProgram *this)
{
  return 21;
}

const char *AGCLLVMEndOfTileProgram::dumpType(AGCLLVMEndOfTileProgram *this)
{
  unint64_t v1 = *(void *)(*((void *)this + 9) + 72);
  uint64_t v2 = (v1 >> 55) & 3;
  if ((v1 & 0x200000000000000) != 0)
  {
    if (v2 == 1) {
      return "sw_eot_uber";
    }
    std::string v4 = "eot_uber";
    uint64_t v5 = "eotfc_uber";
  }
  else
  {
    if (v2 == 1) {
      return "sw_eot";
    }
    std::string v4 = "eot";
    uint64_t v5 = "eotfc";
  }
  if (v2 == 2) {
    return v5;
  }
  else {
    return v4;
  }
}

void AGCLLVMEndOfTileProgram::~AGCLLVMEndOfTileProgram(AGCLLVMEndOfTileProgram *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMEndOfTileProgram *)((char *)this + 96));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMEndOfTileProgram *)((char *)this + 96));
}

uint64_t virtual thunk to'AGCLLVMUtilityProgram::getTempRegistersLimit(AGCLLVMUtilityProgram *this, unsigned int *a2)
{
  *a2 = 16;
  return 0;
}

BOOL virtual thunk to'AGCLLVMUtilityProgram::constructReply(AGCLLVMUtilityProgram *this)
{
  return AGCLLVMUtilityProgram::constructReply((AGCLLVMUtilityProgram *)((char *)this
                                                                       + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMUtilityProgram::constructReply(AGCLLVMUtilityProgram *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMUtilityProgram *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUtilityProgram *)((char *)this + *(void *)(*(void *)this - 24)));
    uint64_t v3 = AGCLLVMObject::constructFlatReply((AGCLLVMUtilityProgram *)((char *)this + *(void *)(*(void *)this - 24)));
    int v5 = flatbuffers::FlatBufferBuilder::EndTable(v3, v4);
    char v6 = (char *)this + *(void *)(*(void *)this - 24);
    std::string v7 = (flatbuffers::FlatBufferBuilder *)(v6 + 2472);
    v6[2542] = 1;
    int v8 = *((_DWORD *)v6 + 626) - *((_DWORD *)v6 + 630) + *((_DWORD *)v6 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v6 + 2472), v5);
    std::string v9 = (AGCLLVMUtilityProgram *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v10 = flatbuffers::FlatBufferBuilder::EndTable(v7, v8);
    flatbuffers::FlatBufferBuilder::Finish(v9, v10, v11);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUtilityProgram *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  }
  return v2;
}

void *virtual thunk to'AGCLLVMUtilityProgram::getCompilationKeyDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

uint64_t virtual thunk to'AGCLLVMUtilityProgram::getShaderType(AGCLLVMUtilityProgram *this)
{
  return 20;
}

const char *virtual thunk to'AGCLLVMUtilityProgram::dumpType(AGCLLVMUtilityProgram *this)
{
  return "utility";
}

void *virtual thunk to'AGCLLVMUtilityProgram::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "utility_main");
}

void virtual thunk to'AGCLLVMUtilityProgram::~AGCLLVMUtilityProgram(AGCLLVMUtilityProgram *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUtilityProgram *)((char *)this + *(void *)(*(void *)this - 48) + 8));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUtilityProgram *)((char *)this + *(void *)(*(void *)this - 48) + 8));
}

uint64_t virtual thunk to'AGCLLVMUtilityProgram::compile(AGCLLVMUtilityProgram *this)
{
  return AGCLLVMUtilityProgram::compile((AGCLLVMUtilityProgram *)((char *)this + *(void *)(*(void *)this - 24)));
}

uint64_t AGCLLVMUtilityProgram::compile(AGCLLVMUtilityProgram *this)
{
  BOOL v2 = (const char *)(*(uint64_t (**)(AGCLLVMUtilityProgram *))(*(void *)this + 16))(this);
  if (dumpShaderToFile(v2))
  {
    char v3 = (*(uint64_t (**)(AGCLLVMUtilityProgram *))(*(void *)this + 16))(this);
    printMessage((char **)&AGCPrinter, "------ Start compilation key description for %s shader %u  ------", v4, v5, v6, v7, v8, v9, v3);
    (*(void (**)(void **__return_ptr, AGCLLVMUtilityProgram *))(*(void *)this + 40))(__p, this);
    if (v30 >= 0) {
      char v16 = __p;
    }
    else {
      LOBYTE(v16) = __p[0];
    }
    printMessage((char **)&AGCPrinter, "%s", v10, v11, v12, v13, v14, v15, (char)v16);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    char v17 = (*(uint64_t (**)(AGCLLVMUtilityProgram *))(*(void *)this + 16))(this);
    printMessage((char **)&AGCPrinter, "------ End compilation key description for %s shader %u  ------", v18, v19, v20, v21, v22, v23, v17);
  }
  std::string v24 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v25 = *((void *)v24 + 58);
  uint64_t v26 = *((void *)v24 + 46);
  __p[0] = (void *)0x10000;
  int v27 = AGCLLVMCtx::compile(v25, (uint64_t)v24, v26, 1, 2, __p);
  uint64_t result = 0;
  if (v27) {
    return (*(uint64_t (**)(AGCLLVMUtilityProgram *))(*(void *)this + 8))(this);
  }
  return result;
}

void AGCLLVMUtilityProgram::~AGCLLVMUtilityProgram(AGCLLVMUtilityProgram *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUtilityProgram *)((char *)this + 8));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUtilityProgram *)((char *)this + 8));
}

void *AGCLLVMUtilityProgram::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "utility_main");
}

void *AGCLLVMUtilityProgram::getCompilationKeyDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

uint64_t AGCLLVMUtilityProgram::getTempRegistersLimit(AGCLLVMUtilityProgram *this, unsigned int *a2)
{
  *a2 = 16;
  return 0;
}

uint64_t AGCLLVMUtilityProgram::getShaderType(AGCLLVMUtilityProgram *this)
{
  return 20;
}

const char *AGCLLVMUtilityProgram::dumpType(AGCLLVMUtilityProgram *this)
{
  return "utility";
}

void virtual thunk to'AGCLLVMDummyFeedbackFragmentShader::getCompilationKeyDescription(AGCLLVMDummyFeedbackFragmentShader *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t virtual thunk to'AGCLLVMDummyFeedbackFragmentShader::getShaderType(AGCLLVMDummyFeedbackFragmentShader *this)
{
  return 19;
}

const char *virtual thunk to'AGCLLVMDummyFeedbackFragmentShader::dumpType(AGCLLVMDummyFeedbackFragmentShader *this)
{
  return "dummy-feedback";
}

void *virtual thunk to'AGCLLVMDummyFeedbackFragmentShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.dummy_feedback");
}

void virtual thunk to'AGCLLVMDummyFeedbackFragmentShader::~AGCLLVMDummyFeedbackFragmentShader(AGCLLVMDummyFeedbackFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDummyFeedbackFragmentShader *)((char *)this
                                                                     + *(void *)(*(void *)this - 48)
                                                                     + 688));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDummyFeedbackFragmentShader *)((char *)this
                                                                     + *(void *)(*(void *)this - 48)
                                                                     + 688));
}

void non-virtual thunk to'AGCLLVMDummyFeedbackFragmentShader::~AGCLLVMDummyFeedbackFragmentShader(AGCLLVMDummyFeedbackFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDummyFeedbackFragmentShader *)((char *)this + 616));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDummyFeedbackFragmentShader *)((char *)this + 616));
}

void *AGCLLVMDummyFeedbackFragmentShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.dummy_feedback");
}

uint64_t AGCLLVMDummyFeedbackFragmentShader::getShaderType(AGCLLVMDummyFeedbackFragmentShader *this)
{
  return 19;
}

void AGCLLVMDummyFeedbackFragmentShader::getCompilationKeyDescription(AGCLLVMDummyFeedbackFragmentShader *this@<X0>, std::string *a2@<X8>)
{
}

const char *AGCLLVMDummyFeedbackFragmentShader::dumpType(AGCLLVMDummyFeedbackFragmentShader *this)
{
  return "dummy-feedback";
}

void AGCLLVMDummyFeedbackFragmentShader::~AGCLLVMDummyFeedbackFragmentShader(AGCLLVMDummyFeedbackFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDummyFeedbackFragmentShader *)((char *)this + 688));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDummyFeedbackFragmentShader *)((char *)this + 688));
}

void virtual thunk to'AGCLLVMTextureFetchFragmentShader::getCompilationKeyDescription(AGCLLVMTextureFetchFragmentShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMTextureFetchFragmentShader::getCompilationKeyDescription(AGCLLVMTextureFetchFragmentShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  agcStringRepresentation<_AGCDrawBufferState>(&v12, *((void *)this + 83));
  uint64_t v4 = (_DWORD *)*((void *)this + 86);
  if (v4)
  {
    std::string::basic_string[abi:nn180100]<0>(&v29, "AGC3DBlitState");
    std::string::basic_string[abi:nn180100]<0>(v27, "blitType");
    _agcFieldString<char const*>(&v30, (const void **)v27, (&_AGC3DBlitTypeStrings)[*v4 & 0xF]);
    std::string::basic_string[abi:nn180100]<0>(v25, "readBufferSampleCount");
    _agcFieldString<unsigned int>(&v31, (const void **)v25, *v4 >> 4);
    std::string::basic_string[abi:nn180100]<0>(v23, "sample3D");
    _agcFieldString<unsigned int>(&v32, (const void **)v23, (*v4 >> 8) & 1);
    std::string::basic_string[abi:nn180100]<0>(v21, "regionOffset");
    _agcFieldString<unsigned int>(&v33, (const void **)v21, (*v4 >> 9) & 1);
    std::string::basic_string[abi:nn180100]<0>(v19, "remapAddress");
    _agcFieldString<unsigned int>(&v34, (const void **)v19, (*v4 >> 10) & 1);
    std::string::basic_string[abi:nn180100]<0>(v17, "remapAddressPOT");
    _agcFieldString<unsigned int>(&v35, (const void **)v17, (*v4 >> 11) & 1);
    std::string::basic_string[abi:nn180100]<0>(v15, "strideDiscard");
    _agcFieldString<unsigned int>(&v36, (const void **)v15, (*v4 >> 12) & 1);
    std::string::basic_string[abi:nn180100]<0>(__p, "blitTextureFormat");
    _agcFieldString<unsigned int>(&v37, (const void **)__p, (*v4 >> 13) & 0x1F);
    _agcGroupWithHeader(&v11, (uint64_t)&v29, (uint64_t)&v30, 8);
    for (uint64_t i = 0; i != -24; i -= 3)
    {
      if (SHIBYTE(v37.__r_.__value_.__r.__words[i + 2]) < 0) {
        operator delete(*(void **)((char *)&v37.__r_.__value_.__l.__data_ + i * 8));
      }
    }
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&v11, "");
  }
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v29, (const void **)&v12.__r_.__value_.__l.__data_, (const void **)&v11.__r_.__value_.__l.__data_);
  uint64_t v6 = std::string::append(&v29, "\ntoken type : ");
  std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  unsigned int v8 = *((_DWORD *)this + 174);
  {
    std::string::basic_string[abi:nn180100]<0>(agcStreamToken2String::mapToken2String, "AGCStreamTokenUnknownShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[3], "AGCStreamTokenGLSLVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[6], "AGCStreamTokenGLSLFragmentShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[9], "AGCStreamTokenMetalVertexProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[12], "AGCStreamTokenMetalFragmentProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[15], "AGCStreamTokenMetalTileProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[18], "AGCStreamTokenMetalComputeProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[21], "AGCStreamTokenMetalUserIntersectionProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[24], "AGCStreamTokenMetalDynamicLibrary");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[27], "AGCStreamTokenMetalObjectProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[30], "AGCStreamTokenMetalMeshProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[33], "AGCStreamTokenClearFragmentShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[36], "AGCStreamTokenResolveFragmentShaderGL");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[39], "AGCStreamTokenBackgroundObjectFragmentShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[42], "AGCStreamToken3DBlitFragmentShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[45], "AGCStreamTokenTABlitVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[48], "AGCStreamTokenBlitComputeShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[51], "AGCStreamTokenBlitSparseShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[54], "AGCStreamTokenBlitFastClearShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[57], "AGCStreamTokenEndOfTileProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[60], "AGCStreamTokenExecuteIndirectESLGenerationVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[63], "AGCStreamTokenExecuteIndirectRangeExecutionVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[66], "AGCStreamTokenExecuteIndirectRangeExecutionComputeShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[69], "AGCStreamTokenExecuteIndirectCDMPatchUpShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[72], "AGCStreamTokenBVHBuilderShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[75], "AGCStreamTokenTileDispatchVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[78], "AGCStreamTokenPassthroughObjectProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[81], "AGCStreamTokenDCMPDebugComputeProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[84], "AGCStreamTokenVisibilityVertexClearShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[87], "AGCStreamTokenClearVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[90], "AGCStreamTokenResolveVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[93], "AGCStreamTokenBlitVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[96], "AGCStreamTokenVDMStateSyncProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[99], "AGCStreamTokenContextSaveProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[102], "AGCStreamTokenContextRestoreProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[105], "AGCStreamTokenToggledContextSaveProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[108], "AGCStreamTokenToggledContextRestoreProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[111], "AGCStreamTokenComputeFlushProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[114], "AGCStreamTokenComputeFlushProgramWithFWInterrupt");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[117], "AGCStreamTokenComputeFenceProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[120], "AGCStreamTokenComputeTGSizeOptimizationProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[123], "AGCStreamTokenComputeProgressMarkerProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[126], "AGCStreamTokenComputeControlFlowPredicateProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[129], "AGCStreamTokenSwTessellationNonBucketedEmitDrawCommandsVSProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[132], "AGCStreamTokenSwTessellationBucketedComputeInstanceCountsVSProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[135], "AGCStreamTokenSwTessellationBucketedSumInstanceCountsVSProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[138], "AGCStreamTokenSwTessellationBucketedEmitDrawCommandsVSProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[141], "AGCStreamTokenVDMNOPDBGProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[144], "AGCStreamTokenSwTessellationBucketedClearInstanceCountsProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[147], "AGCStreamTokenUtilityProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[150], "AGCStreamTokenDummyFeedbackFragmentShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[153], "AGCStreamTokenNumGfxShaders");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[156], "AGCStreamTokenMetalDriverIntersectionProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[159], "AGCStreamTokenGeometryPipelineEmulationUMDAllocationShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[162], "AGCStreamTokenGeometryPipelineEmulationFWAllocationSetupShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[165], "AGCStreamTokenGeometryPipelineEmulationFWAllocationPostObjectShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[168], "AGCStreamTokenGeometryPipelineEmulationFWAllocationPreMeshShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[171], "AGCStreamTokenBitCodeGLIR");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[174], "AGCStreamTokenVertexContextStateGL");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[177], "AGCStreamTokenFragmentContextStateGL");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[180], "AGCStreamTokenVertexContextStateAGP");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[183], "AGCStreamTokenObjectContextStateAGP");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[186], "AGCStreamTokenMeshContextStateAGP");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[189], "AGCStreamTokenFragmentContextStateAGP");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[192], "AGCStreamTokenSamplerRemapState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[195], "AGCStreamTokenSamplerPCFState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[198], "AGCStreamTokenDrawBufferState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[201], "AGCStreamTokenTileState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[204], "AGCStreamTokenBackgroundObjectState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[207], "AGCStreamTokenEndOfTileState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[210], "AGCStreamToken3DBlitState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[213], "AGCStreamTokenTABlitState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[216], "AGCStreamTokenCDMBlitState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[219], "AGCStreamTokenBlitSparseState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[222], "AGCStreamTokenBlitFastClearState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[225], "AGCStreamTokenVaryingSemantics");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[228], "AGCStreamTokenVaryingTypes");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[231], "AGCStreamTokenClearFragmentColorMaskState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[234], "AGCStreamTokenComputeContextStateAGP");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[237], "AGCStreamTokenDynamicLibraryStateAGP");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[240], "AGCStreamTokenTexUnitBiasState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[243], "AGCStreamTokenTessellationDriverState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[246], "AGCStreamTokenExecuteIndirectDriverState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[249], "AGCStreamTokenDriverIntersectionState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[252], "AGCStreamTokenUserIntersectionState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[255], "AGCStreamTokenBVHBuilderState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[258], "AGCStreamTokenComputeControlFlowPredicateState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[261], "AGCStreamTokenTileDispatchVertexState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[264], "AGCStreamTokenPassthroughObjectProgramState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[267], "AGCStreamTokenDCMPDebugComputeProgramState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[270], "AGCStreamTokenGPUGatherVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[273], "AGCStreamTokenGPUGatherComputeShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[276], "AGCStreamTokenPDSPatchUpVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[279], "AGCStreamTokenPDSPatchUpComputeShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[282], "AGCStreamTokenVRRPatchVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[285], "AGCStreamTokenBlitVertexFastClearShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[288], "AGCStreamTokenEnd");
    qword_1EA614940 = 0;
    xmmword_1EA614930 = 0u;
    __cxa_atexit((void (*)(void *))std::array<std::string,98ul>::~array, agcStreamToken2String::mapToken2String, &dword_1CAC02000);
  }
  uint64_t v9 = (const std::string::value_type *)&agcStreamToken2String::mapToken2String[3 * v8];
  if (v9[23] < 0) {
    uint64_t v9 = *(const std::string::value_type **)v9;
  }
  uint64_t v10 = std::string::append(&v30, v9);
  *a2 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

uint64_t std::array<std::string,98ul>::~array(uint64_t a1)
{
  uint64_t v2 = 2352;
  do
  {
    if (*(char *)(a1 + v2 - 1) < 0) {
      operator delete(*(void **)(a1 + v2 - 24));
    }
    v2 -= 24;
  }
  while (v2);
  return a1;
}

uint64_t virtual thunk to'AGCLLVMTextureFetchFragmentShader::getShaderType(AGCLLVMTextureFetchFragmentShader *this)
{
  return 19;
}

const char *virtual thunk to'AGCLLVMTextureFetchFragmentShader::dumpType(AGCLLVMTextureFetchFragmentShader *this)
{
  int v1 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 72) + 696);
  uint64_t v2 = "texture_fetch";
  if (v1 == 14) {
    uint64_t v2 = "blit3D";
  }
  if (v1 == 12) {
    return "resolve_gl";
  }
  else {
    return v2;
  }
}

void *virtual thunk to'AGCLLVMTextureFetchFragmentShader::wrapperName@<X0>(AGCLLVMTextureFetchFragmentShader *this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, (&AGCLLVMTextureFetchFragmentShader::wrapperName(void)const::names)[**(_DWORD **)((char *)this+ *(void *)(*(void *)this - 64)+ 688) & 0xF]);
}

void virtual thunk to'AGCLLVMTextureFetchFragmentShader::~AGCLLVMTextureFetchFragmentShader(AGCLLVMTextureFetchFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTextureFetchFragmentShader *)((char *)this
                                                                    + *(void *)(*(void *)this - 48)
                                                                    + 704));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTextureFetchFragmentShader *)((char *)this
                                                                    + *(void *)(*(void *)this - 48)
                                                                    + 704));
}

void non-virtual thunk to'AGCLLVMTextureFetchFragmentShader::~AGCLLVMTextureFetchFragmentShader(AGCLLVMTextureFetchFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTextureFetchFragmentShader *)((char *)this + 632));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTextureFetchFragmentShader *)((char *)this + 632));
}

void *AGCLLVMTextureFetchFragmentShader::wrapperName@<X0>(AGCLLVMTextureFetchFragmentShader *this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, (&AGCLLVMTextureFetchFragmentShader::wrapperName(void)const::names)[**((_DWORD **)this + 86) & 0xF]);
}

uint64_t AGCLLVMTextureFetchFragmentShader::getShaderType(AGCLLVMTextureFetchFragmentShader *this)
{
  return 19;
}

const char *AGCLLVMTextureFetchFragmentShader::dumpType(AGCLLVMTextureFetchFragmentShader *this)
{
  int v1 = *((_DWORD *)this + 174);
  uint64_t v2 = "texture_fetch";
  if (v1 == 14) {
    uint64_t v2 = "blit3D";
  }
  if (v1 == 12) {
    return "resolve_gl";
  }
  else {
    return v2;
  }
}

void AGCLLVMTextureFetchFragmentShader::~AGCLLVMTextureFetchFragmentShader(AGCLLVMTextureFetchFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTextureFetchFragmentShader *)((char *)this + 704));
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTextureFetchFragmentShader *)((char *)this + 704));
}

BOOL virtual thunk to'AGCLLVMDriverCDMShader::constructReply(AGCLLVMDriverCDMShader *this)
{
  return AGCLLVMDriverCDMShader::constructReply((AGCLLVMDriverCDMShader *)((char *)this
                                                                         + *(void *)(*(void *)this - 152)));
}

BOOL AGCLLVMDriverCDMShader::constructReply(AGCLLVMDriverCDMShader *this)
{
  BOOL v2 = AGCDeserializedReply::deserialize((AGCLLVMDriverCDMShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMDriverCDMShader *)((char *)this + *(void *)(*(void *)this - 24)));
    char v3 = AGCLLVMObject::constructFlatReply((AGCLLVMDriverCDMShader *)((char *)this + *(void *)(*(void *)this - 24)));
    __int16 v5 = (__int16)v4;
    v49[0] = v3;
    v49[1] = v4;
    AGCLLVMDriverShader::setGatherMasks(this, v49);
    int v6 = flatbuffers::FlatBufferBuilder::EndTable(v3, v5);
    if ((*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 24) + 400) + 680))())
    {
      int v7 = 0;
    }
    else
    {
      int v48 = v6;
      unsigned int v8 = 0;
      if (*(_DWORD *)(*((void *)this + 9) + 8))
      {
        uint64_t v9 = 0;
        unint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          std::string v12 = (char *)this + *(void *)(*(void *)this - 24);
          uint64_t v13 = (flatbuffers::FlatBufferBuilder *)(v12 + 2472);
          v12[2542] = 1;
          int v14 = *((_DWORD *)v12 + 626) - *((_DWORD *)v12 + 630) + *((_DWORD *)v12 + 628);
          flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v12 + 309, 4, v11);
          flatbuffers::FlatBufferBuilder::AddElement<signed char>(v13, 6, *(char *)(**((void **)this + 9) + 4 * v11));
          int v15 = flatbuffers::FlatBufferBuilder::EndTable(v13, v14);
          int v16 = v15;
          if ((unint64_t)v9 >= v10)
          {
            uint64_t v18 = (v9 - v8) >> 2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              abort();
            }
            if ((uint64_t)(v10 - (void)v8) >> 1 > v19) {
              unint64_t v19 = (uint64_t)(v10 - (void)v8) >> 1;
            }
            if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            if (v20) {
              unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v20);
            }
            else {
              uint64_t v21 = 0;
            }
            char v22 = (char *)(v20 + 4 * v18);
            *(_DWORD *)char v22 = v16;
            char v17 = v22 + 4;
            while (v9 != v8)
            {
              int v23 = *((_DWORD *)v9 - 1);
              v9 -= 4;
              *((_DWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            unint64_t v10 = v20 + 4 * v21;
            if (v8) {
              operator delete(v8);
            }
            unsigned int v8 = v22;
          }
          else
          {
            *(_DWORD *)uint64_t v9 = v15;
            char v17 = v9 + 4;
          }
          ++v11;
          uint64_t v9 = v17;
        }
        while (v11 < *(unsigned int *)(*((void *)this + 9) + 8));
      }
      else
      {
        char v17 = 0;
      }
      if (v17 == v8) {
        char v24 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>> const&)::t;
      }
      else {
        char v24 = v8;
      }
      int v25 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v24, (v17 - v8) >> 2);
      char v26 = (char *)this + *(void *)(*(void *)this - 24);
      int v27 = (flatbuffers::FlatBufferBuilder *)(v26 + 2472);
      v26[2542] = 1;
      int v28 = *((_DWORD *)v26 + 626) - *((_DWORD *)v26 + 630) + *((_DWORD *)v26 + 628);
      flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v26 + 2472), v25);
      int v29 = flatbuffers::FlatBufferBuilder::EndTable(v27, v28);
      if (v8) {
        operator delete(v8);
      }
      int v7 = v29;
      int v6 = v48;
    }
    std::string v30 = (char *)this + *(void *)(*(void *)this - 24);
    std::string v31 = (flatbuffers::FlatBufferBuilder *)(v30 + 2472);
    v30[2542] = 1;
    int v32 = *((_DWORD *)v30 + 626) - *((_DWORD *)v30 + 630) + *((_DWORD *)v30 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v30 + 2472), v6);
    if (!(*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 24) + 400) + 680))()) {
      flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v31, v7);
    }
    std::string v33 = (AGCLLVMDriverCDMShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v34 = flatbuffers::FlatBufferBuilder::EndTable(v31, v32);
    flatbuffers::FlatBufferBuilder::Finish(v33, v34, v35);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMDriverCDMShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
    if ((*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 24) + 400) + 680))())
    {
      std::string v36 = (char *)this + *(void *)(*(void *)this - 24);
      std::string v37 = (flatbuffers::FlatBufferBuilder *)(v36 + 2568);
      int v38 = *((_DWORD *)this + 20);
      v36[2638] = 1;
      int v39 = *((_DWORD *)v36 + 650) - *((_DWORD *)v36 + 654) + *((_DWORD *)v36 + 652);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v36 + 321, 4, v38);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v37, 6, 0, 0);
      int v40 = flatbuffers::FlatBufferBuilder::EndTable(v37, v39);
      char v41 = (char *)this + *(void *)(*(void *)this - 24);
      std::string v42 = (flatbuffers::FlatBufferBuilder *)(v41 + 2568);
      v41[2638] = 1;
      int v43 = *((_DWORD *)v41 + 650) - *((_DWORD *)v41 + 654) + *((_DWORD *)v41 + 652);
      flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v41 + 2568), v40);
      char v44 = (AGCLLVMDriverCDMShader *)((char *)this + *(void *)(*(void *)this - 24) + 2568);
      int v45 = flatbuffers::FlatBufferBuilder::EndTable(v42, v43);
      flatbuffers::FlatBufferBuilder::Finish(v44, v45, v46);
      AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMDriverCDMShader *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
    }
  }
  return v2;
}

void *virtual thunk to'AGCLLVMDriverCDMBlitShader::getCompilationKeyDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

uint64_t virtual thunk to'AGCLLVMDriverCDMBlitShader::getShaderType(AGCLLVMDriverCDMBlitShader *this)
{
  return 22;
}

const char *virtual thunk to'AGCLLVMDriverCDMBlitShader::dumpType(AGCLLVMDriverCDMBlitShader *this)
{
  return "cdm-blit-driver";
}

void *virtual thunk to'AGCLLVMDriverCDMBlitShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.cdm_blit");
}

void virtual thunk to'AGCLLVMDriverCDMBlitShader::~AGCLLVMDriverCDMBlitShader(AGCLLVMDriverCDMBlitShader *this)
{
  int v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMDriverCDMShader::~AGCLLVMDriverCDMShader((AGCLLVMDriverCDMShader *)v1);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMDriverCDMShader::~AGCLLVMDriverCDMShader((AGCLLVMDriverCDMBlitShader *)((char *)this
                                                                               + *(void *)(*(void *)this - 48)));
  BOOL v2 = (AGCLLVMObject *)(v1 + 128);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

void AGCLLVMDriverCDMShader::~AGCLLVMDriverCDMShader(AGCLLVMDriverCDMShader *this)
{
  *(void *)this = off_1F25CC290;
  *((void *)this + 16) = &off_1F25CC3B0;
  *((void *)this + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = &off_1F25CC4A0;
  int v1 = (void **)*((void *)this + 9);
  if (v1)
  {
    for (uint64_t i = 0; i != -9; i -= 3)
    {
      char v3 = v1[i + 31];
      if (v3 != (void *)-8192 && v3 != (void *)-4096 && v3 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v1[i + 29]);
      }
    }
    for (uint64_t j = 0; j != -9; j -= 3)
    {
      int v6 = v1[j + 22];
      if (v6 != (void *)-8192 && v6 != (void *)-4096 && v6 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v1[j + 20]);
      }
    }
    for (uint64_t k = 0; k != -9; k -= 3)
    {
      uint64_t v9 = v1[k + 13];
      if (v9 != (void *)-8192 && v9 != (void *)-4096 && v9 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v1[k + 11]);
      }
    }
    if (*v1 != v1 + 2) {
      free(*v1);
    }
    MEMORY[0x1CB7A0780](v1, 0x10A0C40A3700DFBLL);
  }
}

uint64_t virtual thunk to'AGCLLVMDriverCDMBlitShader::compile(AGCLLVMDriverCDMBlitShader *this)
{
  return AGCLLVMDriverCDMBlitShader::compile((AGCLLVMDriverCDMBlitShader *)((char *)this
                                                                          + *(void *)(*(void *)this - 24)));
}

uint64_t AGCLLVMDriverCDMBlitShader::compile(AGCLLVMDriverCDMBlitShader *this)
{
  uint64_t v2 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v3 = v2 + 24;
  for (uint64_t i = *(void *)(v2 + 32); i != v3; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      __int16 v5 = (llvm::GlobalValue *)(i - 56);
    }
    else {
      __int16 v5 = 0;
    }
    if ((llvm::GlobalValue::isDeclaration(v5) & 1) == 0)
    {
      (*(void (**)(char *, llvm::GlobalValue *))(*(void *)((char *)this
                                                                      + *(void *)(*(void *)this - 24))
                                                          + 168))((char *)this + *(void *)(*(void *)this - 24), v5);
      break;
    }
  }
  AGCLLVMObject::enableTempRegistersLimit((AGCLLVMDriverCDMBlitShader *)((char *)this
                                                                       + *(void *)(*(void *)this - 24)));
  int v6 = (const char *)(*(uint64_t (**)(AGCLLVMDriverCDMBlitShader *))(*(void *)this + 48))(this);
  if (dumpShaderToFile(v6))
  {
    char v7 = (*(uint64_t (**)(AGCLLVMDriverCDMBlitShader *))(*(void *)this + 48))(this);
    printMessage((char **)&AGCPrinter, "------ Start compilation key description for %s shader %u  ------", v8, v9, v10, v11, v12, v13, v7);
    (*(void (**)(void **__return_ptr, AGCLLVMDriverCDMBlitShader *))(*(void *)this + 64))(__p, this);
    if (v34 >= 0) {
      unint64_t v20 = __p;
    }
    else {
      LOBYTE(v2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = __p[0];
    }
    printMessage((char **)&AGCPrinter, "%s", v14, v15, v16, v17, v18, v19, (char)v20);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    char v21 = (*(uint64_t (**)(AGCLLVMDriverCDMBlitShader *))(*(void *)this + 48))(this);
    printMessage((char **)&AGCPrinter, "------ End compilation key description for %s shader %u  ------", v22, v23, v24, v25, v26, v27, v21);
  }
  int v28 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v29 = *((void *)v28 + 58);
  uint64_t v30 = *((void *)v28 + 46);
  __p[0] = (void *)0x10000;
  int v31 = AGCLLVMCtx::compile(v29, (uint64_t)v28, v30, 1, 3, __p);
  uint64_t result = 0;
  if (v31) {
    return (*(uint64_t (**)(AGCLLVMDriverCDMBlitShader *))(*(void *)this + 40))(this);
  }
  return result;
}

void *AGCLLVMDriverCDMBlitShader::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.cdm_blit");
}

void *AGCLLVMDriverCDMBlitShader::getCompilationKeyDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

uint64_t AGCLLVMDriverCDMBlitShader::getShaderType(AGCLLVMDriverCDMBlitShader *this)
{
  return 22;
}

const char *AGCLLVMDriverCDMBlitShader::dumpType(AGCLLVMDriverCDMBlitShader *this)
{
  return "cdm-blit-driver";
}

void AGCLLVMDriverCDMBlitShader::~AGCLLVMDriverCDMBlitShader(AGCLLVMDriverCDMBlitShader *this)
{
  AGCLLVMDriverCDMShader::~AGCLLVMDriverCDMShader(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 128));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMDriverCDMShader::~AGCLLVMDriverCDMShader(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 128));
}

void AGCLLVMDriverShader::AGCLLVMDriverShader(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v2 - 24)) = a2[1];
  *(void *)(a1 + 32 + *(void *)(*(void *)a1 - 24)) = a2[2];
  *(unsigned char *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  operator new();
}

uint64_t AGCLLVMDriverShader::buildRegionOffsets(AGCLLVMDriverShader *this, const char *a2)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  AGCLLVMDriverShader::buildRegionOffsets(this, &v17, &v16, a2);
  uint64_t v3 = (llvm::Value *)llvm::UndefValue::get();
  uint64_t v4 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v5 = v17;
  __int16 v15 = 257;
  int v6 = (llvm::IRBuilderBase *)(v4 + 40);
  char v7 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v6, v3, v5, v7, (const llvm::Twine *)v14);
  uint64_t v9 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v10 = v16;
  __int16 v15 = 257;
  uint64_t v11 = (llvm::IRBuilderBase *)(v9 + 40);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement(v11, InsertElement, v10, v12, (const llvm::Twine *)v14);
}

llvm::Value *AGCLLVMDriverShader::buildRegionOffsets(AGCLLVMDriverShader *this, llvm::Value **a2, llvm::Value **a3, const char *a4)
{
  char v8 = 1;
  uint64_t v9 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  HIBYTE(v23) = 1;
  if (*a4)
  {
    v22[0] = a4;
    char v8 = 3;
  }
  LOBYTE(v23) = v8;
  llvm::GlobalVariable::GlobalVariable();
  *((unsigned char *)v9 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  uint64_t v10 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v11 = *((void *)v10 + 47);
  uint64_t v12 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v10 + 32), v9);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v11, v12);
  uint64_t v13 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  __int16 v23 = 257;
  __int16 v15 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v9, v14);
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v15, (uint64_t)v9, 0, (uint64_t)v22);
  uint64_t v17 = (AGCLLVMDriverShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v23 = 257;
  *a2 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v17, AlignedLoad, v18, (const llvm::Twine *)v22);
  uint64_t v19 = (AGCLLVMDriverShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v23 = 257;
  unint64_t v20 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t result = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v19, AlignedLoad, v20, (const llvm::Twine *)v22);
  *a3 = result;
  return result;
}

llvm::Value *AGCLLVMDriverShader::buildPack(void *a1, int a2, llvm::Value *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
    unsigned int v7 = *(_DWORD *)(a4 + 32);
  }
  else {
    unsigned int v7 = 1;
  }
  switch(a2)
  {
    case 16:
      char v8 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v9 = *((void *)v8 + 50);
      long long v81 = *(_OWORD *)(v8 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v82, (llvm::IRBuilderBase *)(v8 + 40));
      int v83 = *((_DWORD *)v8 + 34);
      Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, llvm::Value *, void, void))(*(void *)v9 + 104))(v9, &v81, 6, v4, a3, 0, 0);
      if (v82) {
        goto LABEL_28;
      }
      return InsertElement;
    case 17:
      uint64_t v101 = llvm::ConstantInt::get();
      uint64_t v102 = llvm::ConstantInt::get();
      uint64_t v103 = llvm::ConstantInt::get();
      uint64_t v16 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      uint64_t v17 = (llvm::Value *)llvm::ConstantVector::get();
      __int16 v100 = 257;
      uint64_t ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector(v16, a3, a3, v17, (const llvm::Twine *)v99);
      uint64_t v19 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v20 = *((void *)v19 + 50);
      long long v96 = *(_OWORD *)(v19 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v97, (llvm::IRBuilderBase *)(v19 + 40));
      int v98 = *((_DWORD *)v19 + 34);
      Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, void, uint64_t, uint64_t, uint64_t, void))(*(void *)v20 + 104))(v20, &v96, 0, v4, ShuffleVector, 1, 0);
      if (v97) {
        goto LABEL_28;
      }
      return InsertElement;
    case 18:
      uint64_t v101 = llvm::ConstantInt::get();
      uint64_t v102 = llvm::ConstantInt::get();
      uint64_t v103 = llvm::ConstantInt::get();
      uint64_t v104 = llvm::ConstantInt::get();
      char v21 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      uint64_t v22 = (llvm::Value *)llvm::ConstantVector::get();
      __int16 v100 = 257;
      uint64_t v23 = llvm::IRBuilderBase::CreateShuffleVector(v21, a3, a3, v22, (const llvm::Twine *)v99);
      uint64_t v24 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v25 = *((void *)v24 + 50);
      long long v93 = *(_OWORD *)(v24 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v94, (llvm::IRBuilderBase *)(v24 + 40));
      int v95 = *((_DWORD *)v24 + 34);
      Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v25 + 104))(v25, &v93, 1, v4, v23, 1, 0);
      if (v94) {
        goto LABEL_28;
      }
      return InsertElement;
    case 19:
      uint64_t v101 = llvm::ConstantInt::get();
      uint64_t v102 = llvm::ConstantInt::get();
      uint64_t v103 = llvm::ConstantInt::get();
      uint64_t v104 = llvm::ConstantInt::get();
      uint64_t v26 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      uint64_t v27 = (llvm::Value *)llvm::ConstantVector::get();
      __int16 v100 = 257;
      uint64_t v28 = llvm::IRBuilderBase::CreateShuffleVector(v26, a3, a3, v27, (const llvm::Twine *)v99);
      uint64_t v29 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v30 = *((void *)v29 + 50);
      long long v90 = *(_OWORD *)(v29 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v91, (llvm::IRBuilderBase *)(v29 + 40));
      int v92 = *((_DWORD *)v29 + 34);
      Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v30 + 104))(v30, &v90, 1, v4, v28, 1, 0);
      if (v91) {
        goto LABEL_28;
      }
      return InsertElement;
    case 20:
      uint64_t v101 = llvm::ConstantInt::get();
      uint64_t v102 = llvm::ConstantInt::get();
      uint64_t v103 = llvm::ConstantInt::get();
      uint64_t v104 = llvm::ConstantInt::get();
      int v31 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      int v32 = (llvm::Value *)llvm::ConstantVector::get();
      __int16 v100 = 257;
      uint64_t v33 = llvm::IRBuilderBase::CreateShuffleVector(v31, a3, a3, v32, (const llvm::Twine *)v99);
      char v34 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v35 = *((void *)v34 + 50);
      long long v87 = *(_OWORD *)(v34 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v88, (llvm::IRBuilderBase *)(v34 + 40));
      int v89 = *((_DWORD *)v34 + 34);
      Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v35 + 104))(v35, &v87, 2, v4, v33, 1, 0);
      if (v88) {
        goto LABEL_28;
      }
      return InsertElement;
    case 21:
      uint64_t v101 = llvm::ConstantInt::get();
      uint64_t v102 = llvm::ConstantInt::get();
      uint64_t v103 = llvm::ConstantInt::get();
      uint64_t v104 = llvm::ConstantInt::get();
      std::string v36 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      std::string v37 = (llvm::Value *)llvm::ConstantVector::get();
      __int16 v100 = 257;
      uint64_t v38 = llvm::IRBuilderBase::CreateShuffleVector(v36, a3, a3, v37, (const llvm::Twine *)v99);
      int v39 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v40 = *((void *)v39 + 50);
      long long v84 = *(_OWORD *)(v39 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v85, (llvm::IRBuilderBase *)(v39 + 40));
      int v86 = *((_DWORD *)v39 + 34);
      Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v40 + 104))(v40, &v84, 3, v4, v38, 1, 0);
      if (v85) {
        goto LABEL_28;
      }
      return InsertElement;
    case 22:
      char v41 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v42 = *((void *)v41 + 50);
      long long v78 = *(_OWORD *)(v41 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v79, (llvm::IRBuilderBase *)(v41 + 40));
      int v80 = *((_DWORD *)v41 + 34);
      Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, llvm::Value *, void, void))(*(void *)v42 + 104))(v42, &v78, 7, v4, a3, 0, 0);
      if (v79) {
        goto LABEL_28;
      }
      return InsertElement;
    case 23:
      int v43 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v44 = *((void *)v43 + 50);
      long long v75 = *(_OWORD *)(v43 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v76, (llvm::IRBuilderBase *)(v43 + 40));
      int v77 = *((_DWORD *)v43 + 34);
      Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, llvm::Value *, void, void))(*(void *)v44 + 104))(v44, &v75, 8, v4, a3, 0, 0);
      if (v76) {
        goto LABEL_28;
      }
      return InsertElement;
    case 24:
      uint64_t v45 = llvm::ConstantFP::get();
      std::string v46 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      __int16 v100 = 257;
      char v47 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v46, a3, v47, (const llvm::Twine *)v99);
      std::string v49 = (char *)a1 + *(void *)(*a1 - 24);
      char v50 = (llvm::IRBuilderBase *)(v49 + 40);
      uint64_t v51 = *((void *)v49 + 25);
      __int16 v100 = 257;
      uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v49 + 40), 49, Element, v51, (uint64_t)v99);
      __int16 v105 = 257;
      uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)v50, Cast, v45, (uint64_t)&v101);
      std::string v54 = *(llvm::Type **)((char *)a1 + *(void *)(*a1 - 24) + 232);
      __int16 v74 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI(v50, FMul, v54, (const llvm::Twine *)v73);
    case 25:
      uint64_t v101 = llvm::ConstantInt::get();
      uint64_t v102 = llvm::ConstantInt::get();
      uint64_t v103 = llvm::ConstantInt::get();
      uint64_t v104 = llvm::ConstantInt::get();
      char v56 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      std::string v57 = (llvm::Value *)llvm::ConstantVector::get();
      __int16 v100 = 257;
      uint64_t v58 = llvm::IRBuilderBase::CreateShuffleVector(v56, a3, a3, v57, (const llvm::Twine *)v99);
      std::string v59 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v60 = *((void *)v59 + 50);
      long long v70 = *(_OWORD *)(v59 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v71, (llvm::IRBuilderBase *)(v59 + 40));
      int v72 = *((_DWORD *)v59 + 34);
      Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v60 + 128))(v60, &v70, v58);
      if (v71) {
LABEL_28:
      }
        llvm::MetadataTracking::untrack();
      return InsertElement;
    default:
      if (v7 == 4)
      {
        __int16 v15 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
        __int16 v100 = 257;
        uint64_t v14 = (const llvm::Twine *)v99;
        uint64_t v13 = (llvm::Type **)a3;
      }
      else
      {
        if (v7 != 1)
        {
          Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
          if (v7)
          {
            uint64_t v62 = 0;
            uint64_t v63 = v7;
            do
            {
              char v64 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
              __int16 v100 = 257;
              int v65 = (llvm::Value *)llvm::ConstantInt::get();
              char v66 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement(v64, a3, v65, (const llvm::Twine *)v99);
              int v67 = (llvm::Type *)v4;
              if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12) {
                int v67 = **(llvm::Type ***)(v4 + 16);
              }
              __int16 v105 = 257;
              Intuint64_t Cast = llvm::IRBuilderBase::CreateIntCast(v64, v66, v67, 0, (const llvm::Twine *)&v101);
              __int16 v74 = 257;
              int v69 = (llvm::Value *)llvm::ConstantInt::get();
              Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v64, InsertElement, IntCast, v69, (const llvm::Twine *)v73);
              ++v62;
            }
            while (v63 != v62);
          }
          return InsertElement;
        }
        uint64_t v11 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
        __int16 v100 = 257;
        uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v13 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement(v11, a3, v12, (const llvm::Twine *)v99);
        if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12) {
          uint64_t v4 = **(void **)(v4 + 16);
        }
        __int16 v105 = 257;
        uint64_t v14 = (const llvm::Twine *)&v101;
        __int16 v15 = v11;
      }
      return llvm::IRBuilderBase::CreateIntCast(v15, v13, (llvm::Type *)v4, 0, v14);
  }
}

uint64_t AGCLLVMDriverShader::getFormatInfo(uint64_t result, void *a2, int a3)
{
  switch(a3)
  {
    case 1:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 216);
      goto LABEL_17;
    case 2:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 224);
      goto LABEL_17;
    case 3:
    case 24:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 232);
      goto LABEL_22;
    case 4:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 184);
      goto LABEL_19;
    case 5:
      int v7 = 0;
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 200);
      goto LABEL_23;
    case 6:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 264);
      goto LABEL_17;
    case 7:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 272);
      goto LABEL_17;
    case 8:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 280);
      goto LABEL_22;
    case 9:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 248);
      goto LABEL_19;
    case 10:
      int v7 = 0;
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 256);
      goto LABEL_23;
    case 11:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 328);
      goto LABEL_17;
    case 12:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 336);
LABEL_17:
      int v7 = 8;
      goto LABEL_23;
    case 13:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 312);
LABEL_19:
      int v7 = 1;
      goto LABEL_23;
    case 14:
      int v7 = 0;
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 320);
      goto LABEL_23;
    case 15:
      uint64_t v4 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 344);
LABEL_22:
      int v7 = 7;
LABEL_23:
      uint64_t v6 = v4;
      break;
    case 16:
      char v8 = (char *)a2 + *(void *)(*a2 - 24);
      uint64_t v4 = *((void *)v8 + 29);
      uint64_t v6 = *((void *)v8 + 42);
      int v7 = 8;
      break;
    case 17:
      __int16 v5 = (void *)((char *)a2 + *(void *)(*a2 - 24));
      uint64_t v4 = v5[28];
      goto LABEL_26;
    case 18:
    case 19:
    case 20:
    case 21:
      uint64_t v3 = (void *)((char *)a2 + *(void *)(*a2 - 24));
      uint64_t v4 = v3[28];
      goto LABEL_28;
    case 22:
    case 23:
      __int16 v5 = (void *)((char *)a2 + *(void *)(*a2 - 24));
      uint64_t v4 = v5[29];
LABEL_26:
      uint64_t v6 = v5[36];
      goto LABEL_29;
    case 25:
      uint64_t v3 = (void *)((char *)a2 + *(void *)(*a2 - 24));
      uint64_t v4 = v3[42];
LABEL_28:
      uint64_t v6 = v3[39];
LABEL_29:
      int v7 = 1;
      break;
    default:
      uint64_t v4 = 0;
      uint64_t v6 = 0;
      int v7 = 10;
      break;
  }
  *(void *)uint64_t result = v6;
  *(void *)(result + 8) = v4;
  *(_DWORD *)(result + 16) = v7;
  return result;
}

llvm::Value *AGCLLVMDriverShader::buildUnpack(void *a1, int a2, llvm::Value *a3, uint64_t a4)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  switch(a2)
  {
    case 16:
      int v7 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v8 = *((void *)v7 + 50);
      long long v56 = *(_OWORD *)(v7 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v57, (llvm::IRBuilderBase *)(v7 + 40));
      int v58 = *((_DWORD *)v7 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      a3 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, llvm::Value *, void, void))(*(void *)v8 + 112))(v8, &v56, 6, a4, a3, 0, 0);
      if (v57) {
        goto LABEL_35;
      }
      return a3;
    case 17:
      uint64_t v9 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v10 = *((void *)v9 + 50);
      long long v73 = *(_OWORD *)(v9 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v74, (llvm::IRBuilderBase *)(v9 + 40));
      int v75 = *((_DWORD *)v9 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      uint64_t v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, void, uint64_t, llvm::Value *, uint64_t, void))(*(void *)v10 + 112))(v10, &v73, 0, a4, a3, 1, 0);
      if (v74) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v76 = llvm::ConstantInt::get();
      uint64_t v77 = llvm::ConstantInt::get();
      uint64_t v78 = llvm::ConstantInt::get();
      uint64_t v12 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      goto LABEL_41;
    case 18:
      uint64_t v13 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v14 = *((void *)v13 + 50);
      long long v68 = *(_OWORD *)(v13 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v69, (llvm::IRBuilderBase *)(v13 + 40));
      int v70 = *((_DWORD *)v13 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      uint64_t v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, llvm::Value *, uint64_t, void))(*(void *)v14 + 112))(v14, &v68, 1, a4, a3, 1, 0);
      if (v69) {
        goto LABEL_14;
      }
      goto LABEL_15;
    case 19:
      __int16 v15 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v16 = *((void *)v15 + 50);
      long long v65 = *(_OWORD *)(v15 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v66, (llvm::IRBuilderBase *)(v15 + 40));
      int v67 = *((_DWORD *)v15 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      uint64_t v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, llvm::Value *, uint64_t, void))(*(void *)v16 + 112))(v16, &v65, 1, a4, a3, 1, 0);
      if (!v66) {
        goto LABEL_39;
      }
      goto LABEL_38;
    case 20:
      uint64_t v17 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v18 = *((void *)v17 + 50);
      long long v62 = *(_OWORD *)(v17 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v63, (llvm::IRBuilderBase *)(v17 + 40));
      int v64 = *((_DWORD *)v17 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      uint64_t v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, llvm::Value *, uint64_t, void))(*(void *)v18 + 112))(v18, &v62, 2, a4, a3, 1, 0);
      if (!v63) {
        goto LABEL_15;
      }
LABEL_14:
      llvm::MetadataTracking::untrack();
LABEL_15:
      uint64_t v76 = llvm::ConstantInt::get();
      uint64_t v77 = llvm::ConstantInt::get();
      uint64_t v78 = llvm::ConstantInt::get();
      goto LABEL_40;
    case 21:
      uint64_t v19 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v20 = *((void *)v19 + 50);
      long long v59 = *(_OWORD *)(v19 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v60, (llvm::IRBuilderBase *)(v19 + 40));
      int v61 = *((_DWORD *)v19 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      uint64_t v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, llvm::Value *, uint64_t, void))(*(void *)v20 + 112))(v20, &v59, 3, a4, a3, 1, 0);
      if (v60) {
        goto LABEL_38;
      }
      goto LABEL_39;
    case 22:
      char v21 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v22 = *((void *)v21 + 50);
      long long v53 = *(_OWORD *)(v21 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v54, (llvm::IRBuilderBase *)(v21 + 40));
      int v55 = *((_DWORD *)v21 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      a3 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, llvm::Value *, void, void))(*(void *)v22 + 112))(v22, &v53, 7, a4, a3, 0, 0);
      if (!v54) {
        return a3;
      }
      goto LABEL_35;
    case 23:
      uint64_t v23 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v24 = *((void *)v23 + 50);
      long long v50 = *(_OWORD *)(v23 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v51, (llvm::IRBuilderBase *)(v23 + 40));
      int v52 = *((_DWORD *)v23 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
        a4 = **(void **)(a4 + 16);
      }
      a3 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, llvm::Value *, void, void))(*(void *)v24 + 112))(v24, &v50, 8, a4, a3, 0, 0);
      if (v51) {
LABEL_35:
      }
        llvm::MetadataTracking::untrack();
      return a3;
    case 24:
      uint64_t v25 = llvm::ConstantFP::get();
      uint64_t v26 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v27 = llvm::ConstantInt::get();
      uint64_t v28 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      uint64_t v29 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v72 = 257;
      uint64_t v30 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v28, a3, v29, (const llvm::Twine *)v71);
      int v31 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      __int16 v72 = 257;
      uint64_t Add = llvm::IRBuilderBase::CreateAdd(v31, v30, v26, (const llvm::Twine *)v71);
      uint64_t v33 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 200);
      __int16 v80 = 257;
      llvm::IRBuilderBase::CreateCast((uint64_t)v31, 49, Add, v33, (uint64_t)&v76);
      char v34 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v35 = (uint64_t)(v34 + 40);
      std::string v36 = (llvm::Type *)*((void *)v34 + 25);
      __int16 v72 = 257;
      uint64_t UIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(v34 + 40), v30, v36, (const llvm::Twine *)v71);
      __int16 v80 = 257;
      llvm::IRBuilderBase::CreateFDiv(v35, UIToFP, v25, (uint64_t)&v76);
      uint64_t v38 = (void *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      __int16 v72 = 257;
      llvm::IRBuilderBase::CreateICmp(v38, 34, (llvm::CmpInst **)v30, v27, (uint64_t)v71);
      __int16 v72 = 257;
      uint64_t Select = llvm::IRBuilderBase::CreateSelect();
      uint64_t v40 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v41 = *((void *)v40 + 29);
      __int16 v72 = 257;
      uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v40 + 40), 49, Select, v41, (uint64_t)v71);
      goto LABEL_42;
    case 25:
      int v43 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v44 = *((void *)v43 + 50);
      long long v47 = *(_OWORD *)(v43 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v48, (llvm::IRBuilderBase *)(v43 + 40));
      int v49 = *((_DWORD *)v43 + 34);
      uint64_t v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *))(*(void *)v44 + 120))(v44, &v47, a3);
      if (v48) {
LABEL_38:
      }
        llvm::MetadataTracking::untrack();
LABEL_39:
      uint64_t v76 = llvm::ConstantInt::get();
      uint64_t v77 = llvm::ConstantInt::get();
      uint64_t v78 = llvm::ConstantInt::get();
LABEL_40:
      uint64_t v79 = llvm::ConstantInt::get();
      uint64_t v12 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
LABEL_41:
      uint64_t v45 = (llvm::Value *)llvm::ConstantVector::get();
      __int16 v72 = 257;
      uint64_t Cast = llvm::IRBuilderBase::CreateShuffleVector(v12, v11, v11, v45, (const llvm::Twine *)v71);
LABEL_42:
      a3 = (llvm::Value *)Cast;
      break;
    default:
      return a3;
  }
  return a3;
}

uint64_t AGCLLVMDriverShader::linkDriverRuntime(AGCLLVMDriverShader *a1, int a2, llvm::Function *a3)
{
  MetalRuntime = AGCLLVMCtx::loadMetalRuntime(*(void *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 464), *(llvm::Module **)((char *)a1 + *(void *)(*(void *)a1 - 24) + 368), a2);
  uint64_t v6 = *(void *)a1;
  if (!MetalRuntime)
  {
    std::string::append((std::string *)((char *)a1 + *(void *)(v6 - 24) + 8), "unable to load helper runtime files");
    uint64_t v6 = *(void *)a1;
  }
  if ((AGCLLVMObject::linkCommon((AGCLLVMDriverShader *)((char *)a1 + *(void *)(v6 - 24)), MetalRuntime, *(unsigned __int8 *)(*(void *)((char *)a1 + *(void *)(v6 - 24) + 400) + 1751), a3) & 1) == 0)std::string::append((std::string *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 8), "unable to link helper runtime"); {
  return AGCLLVMDriverShader::finalizeDriverRuntimeLinking(a1, a3, 1);
  }
}

uint64_t AGCLLVMDriverShader::finalizeDriverRuntimeLinking(AGCLLVMDriverShader *this, llvm::Function *a2, int a3)
{
  MetalRuntime = AGCLLVMCtx::loadMetalRuntime(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464), *(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368), 0);
  uint64_t v7 = *(void *)this;
  if (!MetalRuntime)
  {
    std::string::append((std::string *)((char *)this + *(void *)(v7 - 24) + 8), "unable to load math metal runtime files");
    uint64_t v7 = *(void *)this;
  }
  if ((AGCLLVMObject::linkCommon((AGCLLVMDriverShader *)((char *)this + *(void *)(v7 - 24)), MetalRuntime, *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(v7 - 24) + 400) + 1751), a2) & 1) == 0)std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), "unable to link metal runtime"); {
  if (a3)
  }
  {
    uint64_t v8 = *(void *)this;
    uint64_t v9 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
    uint64_t v10 = v9 + 24;
    uint64_t v11 = *(void *)(v9 + 32);
    if (v11 != v9 + 24)
    {
      do
      {
        uint64_t v12 = (llvm::GlobalValue *)(v11 - 56);
        BOOL v13 = v11 == 0;
        uint64_t v11 = *(void *)(v11 + 8);
        if (v13) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = v12;
        }
        isDeclaratiouint64_t n = llvm::GlobalValue::isDeclaration(v14);
        if (v14 != a2 && (isDeclaration & 1) == 0)
        {
          llvm::Function::addFnAttr();
          *((_DWORD *)v14 + 8) = *((_DWORD *)v14 + 8) & 0xFFFFBFC0 | 0x4007;
        }
      }
      while (v11 != v10);
      uint64_t v8 = *(void *)this;
    }
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(void *)((char *)this + *(void *)(v8 - 24) + 464) + 344), *(llvm::Module **)((char *)this + *(void *)(v8 - 24) + 368));
  }
  uint64_t v16 = (AGCLLVMAirBuiltins *)(*(uint64_t (**)(void, void, void))(**(void **)((char *)this
                                                                                              + *(void *)(*(void *)this - 24)
                                                                                              + 400)
                                                                                + 816))(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400), 0, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368));
  uint64_t result = AGCLLVMAirBuiltins::replaceBuiltins(v16);
  if ((result & 1) == 0) {
    uint64_t result = (uint64_t)std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), "failed to replace builtins");
  }
  if (v16)
  {
    uint64_t v18 = *(uint64_t (**)(AGCLLVMAirBuiltins *))(*(void *)v16 + 16);
    return v18(v16);
  }
  return result;
}

void AGCLLVMDriverShader::mutateAllConstantArgsToSharedRegister(AGCLLVMDriverShader *this, llvm::Function *a2)
{
  if (*((void *)this + 12))
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      if (*((_WORD *)v2 + 9)) {
        llvm::Function::BuildLazyArguments(v2);
      }
      uint64_t v4 = (void *)(*((void *)v2 + 11) + 40 * v3);
      unsigned int v32 = *(_DWORD *)(*v4 + 8);
      if (*v4) {
        BOOL v5 = *(_DWORD *)(*v4 + 8) == 15;
      }
      else {
        BOOL v5 = 0;
      }
      if (v5)
      {
        int v31 = (uint64_t *)(*((void *)v2 + 11) + 40 * v3);
        uint64_t v6 = v4[1];
        if (v6)
        {
          uint64_t v7 = 0;
          uint64_t v8 = 0;
          unint64_t v9 = 0;
          do
          {
            uint64_t v10 = *(void *)(v6 + 24);
            if ((unint64_t)v8 >= v9)
            {
              uint64_t v11 = (v8 - v7) >> 3;
              unint64_t v12 = v11 + 1;
              if ((unint64_t)(v11 + 1) >> 61) {
LABEL_62:
              }
                abort();
              if ((uint64_t)(v9 - (void)v7) >> 2 > v12) {
                unint64_t v12 = (uint64_t)(v9 - (void)v7) >> 2;
              }
              if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v13 = v12;
              }
              if (v13) {
                unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v13);
              }
              else {
                uint64_t v14 = 0;
              }
              __int16 v15 = (char *)(v13 + 8 * v11);
              *(void *)__int16 v15 = v10;
              uint64_t v16 = v15 + 8;
              while (v8 != v7)
              {
                uint64_t v17 = *((void *)v8 - 1);
                v8 -= 8;
                *((void *)v15 - 1) = v17;
                v15 -= 8;
              }
              unint64_t v9 = v13 + 8 * v14;
              if (v7) {
                operator delete(v7);
              }
              uint64_t v7 = v15;
              uint64_t v8 = v16;
            }
            else
            {
              *(void *)uint64_t v8 = v10;
              v8 += 8;
            }
            uint64_t v6 = *(void *)(v6 + 8);
          }
          while (v6);
          while (v7 != v8)
          {
            uint64_t v19 = (uint64_t *)*((void *)v8 - 1);
            v8 -= 8;
            uint64_t v18 = v19;
            uint64_t v20 = v8;
            if (v19)
            {
              int v21 = *(_DWORD *)(*v18 + 8);
              if (v21 == 15)
              {
                if ((v21 & 0xFE) == 0x12) {
                  int v21 = *(_DWORD *)(**(void **)(*v18 + 16) + 8);
                }
                if ((v21 ^ v32) <= 0xFF)
                {
                  *uint64_t v18 = llvm::PointerType::get();
                  for (i = v18[1]; i; uint64_t v20 = v8)
                  {
                    uint64_t v23 = *(void *)(i + 24);
                    if ((unint64_t)v20 >= v9)
                    {
                      uint64_t v24 = (v20 - v7) >> 3;
                      unint64_t v25 = v24 + 1;
                      if ((unint64_t)(v24 + 1) >> 61) {
                        goto LABEL_62;
                      }
                      if ((uint64_t)(v9 - (void)v7) >> 2 > v25) {
                        unint64_t v25 = (uint64_t)(v9 - (void)v7) >> 2;
                      }
                      if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v26 = v25;
                      }
                      if (v26) {
                        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v26);
                      }
                      else {
                        uint64_t v27 = 0;
                      }
                      uint64_t v28 = (char *)(v26 + 8 * v24);
                      *(void *)uint64_t v28 = v23;
                      uint64_t v8 = v28 + 8;
                      while (v20 != v7)
                      {
                        uint64_t v29 = *((void *)v20 - 1);
                        v20 -= 8;
                        *((void *)v28 - 1) = v29;
                        v28 -= 8;
                      }
                      unint64_t v9 = v26 + 8 * v27;
                      if (v7) {
                        operator delete(v7);
                      }
                      uint64_t v7 = v28;
                    }
                    else
                    {
                      *(void *)uint64_t v20 = v23;
                      uint64_t v8 = v20 + 8;
                    }
                    uint64_t i = *(void *)(i + 8);
                  }
                }
              }
            }
          }
        }
        else
        {
          uint64_t v7 = 0;
        }
        *int v31 = llvm::PointerType::get();
        uint64_t v2 = this;
        if (v7) {
          operator delete(v7);
        }
      }
      ++v3;
    }
    while (*((void *)v2 + 12) > v3);
  }
}

void AGCLLVMDriverVertexFetchShader::AGCLLVMDriverVertexFetchShader(uint64_t a1, uint64_t a2)
{
}

uint64_t llvm::IRBuilderBase::CreateURem(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6 = llvm::IRBuilderBase::foldConstant((uint64_t)this, 22, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  if (!v6)
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

void AGCLLVMClearVertexDataShader::AGCLLVMClearVertexDataShader(AGCLLVMClearVertexDataShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  AGCLLVMObject::AGCLLVMObject((AGCLLVMClearVertexDataShader *)((char *)this + 80), a2, a3);
  AGCLLVMDriverShader::AGCLLVMDriverShader((uint64_t)this, (uint64_t *)off_1F25C7408);
}

llvm::GlobalVariable *AGCLLVMDriverShader::getImageStateGlobal(AGCLLVMDriverShader *this)
{
  if (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1780)) {
    return 0;
  }
  uint64_t v1 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  unint64_t v3 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v4 = *((void *)v3 + 47);
  uint64_t v5 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v3 + 32), v1);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v4, v5);
  return v1;
}

uint64_t AGCLLVMDriverShader::getTextureHeapGlobal(AGCLLVMDriverShader *this, unsigned int a2)
{
  if (!*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1780)) {
    return 0;
  }
  {
    uint64_t v12 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    AGCLLVMDriverShader::getTextureHeapGlobal(BOOL)::buffer_indices[0] = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 200))(v12);
    dword_1EA612884 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)this
                                                                     + *(void *)(*(void *)this - 24)
                                                                     + 400)
                                                         + 824)
                                           + 440))();
    uint64_t v13 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    dword_1EA612888 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 192))(v13);
    dword_1EA61288C = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)this
                                                                     + *(void *)(*(void *)this - 24)
                                                                     + 400)
                                                         + 824)
                                           + 432))();
  }
  BOOL v4 = (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) == 22;
  uint64_t v5 = (char *)this + 16 * a2 + 8 * v4;
  uint64_t v8 = *((void *)v5 + 2);
  uint64_t v7 = v5 + 16;
  uint64_t result = v8;
  if (!v8)
  {
    uint64_t v9 = AGCLLVMDriverShader::getTextureHeapGlobal(BOOL)::buffer_indices[2 * a2 + v4];
    uint64_t v10 = llvm::PointerType::get();
    uint64_t v11 = (char *)this + *(void *)(*(void *)this - 24);
    v14[0] = "agc.texture_heap.";
    void v14[2] = v9;
    __int16 v15 = 2051;
    uint64_t result = AGCLLVMObject::createGlobalBufferBinding((uint64_t)v11, v10, (uint64_t)v14, v9, 0);
    *uint64_t v7 = result;
  }
  return result;
}

llvm::GlobalVariable *AGCLLVMDriverShader::getSamplerStateGlobal(AGCLLVMDriverShader *this)
{
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  if (*(_DWORD *)(*((void *)v2 + 50) + 1780))
  {
    unint64_t v3 = (llvm::Module *)*((void *)v2 + 46);
    v18[0] = "agx.samplerHeapBufferIndex";
    __int16 v19 = 259;
    if (!llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)v18))
    {
      if (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1780))
      {
        {
          uint64_t v16 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
          AGCLLVMDriverShader::createGlobalSamplerHeap(void)::bind_indices[0] = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 464))(v16);
          uint64_t v17 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
          dword_1EA612894 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 224))(v17);
        }
        uint64_t v4 = AGCLLVMDriverShader::createGlobalSamplerHeap(void)::bind_indices[(*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this+ *(void *)(*(void *)this - 24)) != 22];
        uint64_t v5 = llvm::PointerType::get();
        uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
        v18[0] = "agc.sampler_heap.";
        void v18[2] = v4;
        __int16 v19 = 2051;
        uint64_t GlobalBufferBinding = AGCLLVMObject::createGlobalBufferBinding((uint64_t)v6, v5, (uint64_t)v18, v4, 0);
        llvm::GlobalValue::setLinkage(GlobalBufferBinding, 10);
        *(unsigned char *)(GlobalBufferBinding + 80) &= ~1u;
        llvm::Constant::getNullValue(*(llvm::Constant **)(GlobalBufferBinding + 24), v8);
        llvm::GlobalVariable::setInitializer();
      }
      llvm::Module::getOrInsertNamedMetadata();
      int v9 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24));
      uint64_t v10 = **(void **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      if (v9 == 22) {
        (*(void (**)(void))(v10 + 464))();
      }
      else {
        (*(void (**)(void))(v10 + 224))();
      }
      llvm::ConstantInt::get();
      v18[0] = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
    return 0;
  }
  else
  {
    uint64_t v11 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v18[0] = "agc.sampler_words";
    __int16 v19 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    uint64_t v12 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v13 = *((void *)v12 + 47);
    uint64_t v14 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v12 + 32), v11);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v13, v14);
  }
  return v11;
}

void *AGCLLVMDriverShader::setSampleArgs(void *a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)(*(void *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 1780))
  {
    a1[6] |= 1 << a3;
    uint64_t v11 = llvm::ConstantInt::get();
  }
  else
  {
    uint64_t v11 = 0;
  }
  return AGCLLVMDriverShader::setSampleArgsStateless(a1, a2, v11, a4, a5, a6);
}

void *AGCLLVMDriverShader::setSampleArgsStateless(void *result, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)(*(void *)((char *)result + *(void *)(*result - 24) + 400) + 1780))
  {
    int v9 = result;
    uint64_t v10 = llvm::ConstantInt::get();
    uint64_t v11 = (uint64_t)v9 + *(void *)(*v9 - 24) + 40;
    uint64_t v12 = llvm::PointerType::get();
    __int16 v18 = 257;
    a2[5] = llvm::IRBuilderBase::CreateCast(v11, 48, v10, v12, (uint64_t)v17);
    v9[8] |= 1uLL;
    uint64_t v13 = (uint64_t)v9 + *(void *)(*v9 - 24) + 40;
    uint64_t v14 = llvm::PointerType::get();
    __int16 v18 = 257;
    a2[4] = llvm::IRBuilderBase::CreateCast(v13, 48, a3, v14, (uint64_t)v17);
    uint64_t v15 = (uint64_t)v9 + *(void *)(*v9 - 24) + 40;
    uint64_t v16 = llvm::PointerType::get();
    __int16 v18 = 257;
    uint64_t result = (void *)llvm::IRBuilderBase::CreateCast(v15, 49, a6, v16, (uint64_t)v17);
    a4 = result;
  }
  else
  {
    a2[11] = a5;
  }
  a2[6] = a4;
  return result;
}

void AGCLLVMTABlitVertexShader::AGCLLVMTABlitVertexShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
}

void AGCLLVMDriverFragmentShader::AGCLLVMDriverFragmentShader(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  AGCLLVMDriverShader::AGCLLVMDriverShader(a1, (uint64_t *)(a2 + 8));
}

void AGCLLVMClearFragmentShader::AGCLLVMClearFragmentShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
}

uint64_t AGCLLVMBackgroundObjectFragmentShader::getPbeRotationStructType(AGCLLVMBackgroundObjectFragmentShader *this)
{
  return llvm::StructType::get();
}

uint64_t AGCLLVMDriverShader::isValidUberFunctionCombination(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 400);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 544))(v6)) {
    return 0;
  }
  if (a3)
  {
    uint64_t v7 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 400);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 584))(v7, a2)) {
      return 0;
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 24) + 400) + 552);
  return v8();
}

void AGCLLVMDriverShader::handleUberInvalidCombinationFunction(AGCLLVMDriverShader *this, llvm::Function *a2)
{
  unsigned char v8[32] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v8;
  uint64_t v7 = 0x2000000000;
  if (this)
  {
    uint64_t v2 = this;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v6, *((void *)v2 + 3));
      uint64_t v2 = (AGCLLVMDriverShader *)*((void *)v2 + 1);
    }
    while (v2);
    unint64_t v3 = (llvm::Instruction **)v6;
    if (v7)
    {
      uint64_t v4 = 8 * v7;
      do
      {
        uint64_t v5 = *v3++;
        llvm::Instruction::eraseFromParent(v5);
        v4 -= 8;
      }
      while (v4);
      unint64_t v3 = (llvm::Instruction **)v6;
    }
    if (v3 != v8) {
      free(v3);
    }
  }
}

void AGCLLVMBackgroundObjectFragmentShader::buildStateless(AGCLLVMBackgroundObjectFragmentShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  void v89[4] = *MEMORY[0x1E4F143B8];
  BOOL v5 = (*(_DWORD *)(*((void *)this + 83) + 32) & 0xE000) == 0;
  int v72 = *(_DWORD *)(*((void *)this + 83) + 32) & 0xE000;
  if (v72) {
    uint64_t v6 = "_msaa";
  }
  else {
    uint64_t v6 = "";
  }
  *((unsigned char *)this + 8) = 1;
  if (v5) {
    std::string::size_type v7 = 0;
  }
  else {
    std::string::size_type v7 = 5;
  }
  memset(&v87, 0, sizeof(v87));
  std::string::reserve(&v87, v7 | 8);
  std::string::append(&v87, "bgo_uber", 8uLL);
  std::string::append(&v87, v6, v7);
  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v87;
  }
  else {
    uint64_t v8 = (std::string *)v87.__r_.__value_.__r.__words[0];
  }
  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v87.__r_.__value_.__l.__size_;
  }
  uint64_t Bitcode = AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)v8, size, 0);
  uint64_t v11 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 32);
  uint64_t v12 = *(void **)(v11 + 8);
  if (v12) {
    size_t v13 = strlen(*(const char **)(v11 + 8));
  }
  else {
    size_t v13 = 0;
  }
  llvm::Module::setTargetTriple(Bitcode, v12, v13);
  uint64_t v14 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 32);
  if (*(void *)(v14 + 16)) {
    strlen(*(const char **)(v14 + 16));
  }
  llvm::Module::setDataLayout();
  uint64_t v89[3] = 0;
  llvm::Linker::linkModules();
  std::__function::__value_func<void ()(llvm::Module &,llvm::StringSet<llvm::MallocAllocator> const&)>::~__value_func[abi:nn180100](v89);
  uint64_t v77 = 0;
  if (Bitcode)
  {
    uint64_t v15 = MEMORY[0x1CB79FA40]();
    MEMORY[0x1CB7A0780](v15, 0x10B2C407FF26C1CLL);
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 336) = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t Function = llvm::Module::getFunction();
  uint64_t v17 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(*(llvm::ArrayType **)((char *)this + *(void *)(*(void *)this - 24) + 320), (llvm::Type *)8);
  v87.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.clear_colors";
  __int16 v88 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  __int16 v18 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v19 = *((void *)v18 + 47);
  uint64_t v20 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v18 + 32), v17);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v19, v20);
  if (*(_WORD *)(Function + 18)) {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  }
  int v21 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  PbeRotationStructType = (llvm::ArrayType *)AGCLLVMBackgroundObjectFragmentShader::getPbeRotationStructType(this);
  llvm::ArrayType::get(PbeRotationStructType, (llvm::Type *)8);
  v87.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.pbe_rotations";
  __int16 v88 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  uint64_t v23 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v24 = *((void *)v23 + 47);
  uint64_t v25 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v23 + 32), v21);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v24, v25);
  unint64_t v26 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(*(llvm::ArrayType **)((char *)this + *(void *)(*(void *)this - 24) + 200), (llvm::Type *)8);
  v87.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.slice_indices";
  __int16 v88 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  uint64_t v27 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v28 = *((void *)v27 + 47);
  uint64_t v29 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v27 + 32), v26);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v28, v29);
  uint64_t v30 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  if (*(_WORD *)(Function + 18)) {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  }
  v87.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.draw_buffer_state";
  __int16 v88 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  int v31 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v32 = *((void *)v31 + 47);
  uint64_t v33 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v31 + 32), v30);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v32, v33);
  char v34 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  if (*(_WORD *)(Function + 18)) {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  }
  v87.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.bgo_state";
  __int16 v88 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  uint64_t v35 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v36 = *((void *)v35 + 47);
  uint64_t v37 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v35 + 32), v34);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v36, v37);
  AGCLLVMDriverShader::getSamplerStateGlobal(this);
  AGCLLVMDriverShader::getTextureHeapGlobal(this, 1u);
  uint64_t v38 = *(void *)this;
  if (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1780))
  {
    *((void *)this + 6) |= 0xFFuLL;
  }
  else
  {
    llvm::User::operator new((llvm::User *)0x58);
    llvm::ArrayType::get(*(llvm::ArrayType **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1672), (llvm::Type *)8);
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.read_image_words_indirect";
    __int16 v88 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87.__r_.__value_.__r.__words[2];
    v87.__r_.__value_.__l.__size_ = 0x2000000000;
    uint64_t v39 = llvm::ValueAsMetadata::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v87, v39);
    llvm::ConstantInt::get();
    uint64_t v40 = llvm::ValueAsMetadata::get();
    for (uint64_t i = 0; i != 8; ++i)
    {
      v78[0] = v40;
      llvm::ConstantInt::get();
      v78[1] = llvm::ValueAsMetadata::get();
      uint64_t Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v87, Impl);
    }
    uint64_t v43 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 376);
    uint64_t v44 = llvm::MDTuple::getImpl();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v43, v44);
    if ((std::string::size_type *)v87.__r_.__value_.__l.__data_ != &v87.__r_.__value_.__r.__words[2]) {
      free(v87.__r_.__value_.__l.__data_);
    }
    uint64_t v38 = *(void *)this;
  }
  uint64_t v45 = (AGCLLVMBackgroundObjectFragmentShader *)((char *)this + *(void *)(v38 - 24) + 40);
  uint64_t v46 = *(void *)(Function + 80);
  if (v46) {
    long long v47 = (llvm::BasicBlock *)(v46 - 24);
  }
  else {
    long long v47 = 0;
  }
  FirstNonPHI = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v47);
  llvm::IRBuilderBase::SetInsertPoint(v45, FirstNonPHI);
  uint64_t v50 = *(void *)this;
  if (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 876) != 2)
  {
    AGCLLVMDriverShader::mutateAllConstantArgsToSharedRegister((AGCLLVMDriverShader *)Function, v49);
    uint64_t v50 = *(void *)this;
  }
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v51 = (char *)this + *(void *)(v50 - 24) + 40;
  if (*(unsigned char *)(Function + 18)) {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  }
  uint64_t v52 = llvm::PointerType::get();
  __int16 v88 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v51, 49, (uint64_t)v30, v52, (uint64_t)&v87);
  long long v53 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  if (*(unsigned char *)(Function + 18)) {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  }
  uint64_t v54 = llvm::PointerType::get();
  __int16 v79 = 257;
  uint64_t v83 = llvm::IRBuilderBase::CreateCast((uint64_t)v53, 49, (uint64_t)v34, v54, (uint64_t)v78);
  int v55 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t v56 = llvm::PointerType::get();
  LOWORD(v76) = 257;
  uint64_t v84 = llvm::IRBuilderBase::CreateCast((uint64_t)v55, 49, (uint64_t)v17, v56, (uint64_t)&v75);
  uint64_t v57 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  if (*(unsigned char *)(Function + 18)) {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  }
  uint64_t v58 = llvm::PointerType::get();
  __int16 v74 = 257;
  uint64_t v85 = llvm::IRBuilderBase::CreateCast((uint64_t)v57, 49, (uint64_t)v21, v58, (uint64_t)v73);
  long long v59 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t v60 = llvm::PointerType::get();
  __int16 v81 = 257;
  uint64_t v86 = llvm::IRBuilderBase::CreateCast((uint64_t)v59, 49, (uint64_t)v26, v60, (uint64_t)v80);
  uint64_t v61 = llvm::Function::args((llvm::Function *)Function);
  if (v61 != v62)
  {
    uint64_t v63 = v61;
    uint64_t v64 = v62;
    int v65 = 0;
    do
    {
      int v66 = v65 + 1;
      llvm::Value::replaceAllUsesWith();
      v63 += 40;
      int v65 = v66;
    }
    while (v63 != v64);
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v68 = inserted;
  __int16 v69 = *(_WORD *)(inserted + 18) & 0xC00F;
  if (v72)
  {
    *(_WORD *)(inserted + 18) = v69 | 0x680;
    if (!*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1730))
    {
      llvm::Module::getOrInsertNamedMetadata();
      llvm::ConstantInt::get();
      v87.__r_.__value_.__r.__words[0] = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
  }
  else
  {
    *(_WORD *)(inserted + 18) = v69 | 0x650;
  }
  if (*(void *)(Function + 72) != Function + 72) {
    llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(v68 + 72, v68 + 72, Function + 72, *(void *)(Function + 80), Function + 72);
  }
  llvm::Function::eraseFromParent((llvm::Function *)Function);
  uint64_t v70 = llvm::PointerType::get();
  uint64_t v71 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this + *(void *)(*(void *)this - 24) + 32, (uint64_t)"agc.bgo_get_texture", 19, v70, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 224));
  *(_DWORD *)(v71 + 32) = *(_DWORD *)(v71 + 32) & 0xFFFFBFC0 | 0x4007;
  v87.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
  __int16 v88 = 259;
  operator new();
}

void std::vector<llvm::Function *>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(a2);
    BOOL v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    std::string::size_type v7 = &v4[8 * v6];
    int v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void AGCLLVMBackgroundObjectFragmentShader::AGCLLVMBackgroundObjectFragmentShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
}

void AGCLLVMEndOfTileProgram::buildStateless(AGCLLVMEndOfTileProgram *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  v157[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, AGCLLVMCtx *, llvm::LLVMContext *))(*(void *)v5 + 680))(v5, a2, a3);
  int v7 = **((_DWORD **)this + 9);
  uint64_t v135 = v6;
  if (v6) {
    uint64_t v8 = "3";
  }
  else {
    uint64_t v8 = "2";
  }
  int v136 = **((_DWORD **)this + 9);
  *((unsigned char *)this + 8) = 1;
  if ((_BYTE)v7) {
    int v9 = "_offChip";
  }
  else {
    int v9 = "";
  }
  std::string::size_type v10 = 8 * (v7 != 0);
  memset(&v153, 0, sizeof(v153));
  std::string::reserve(&v153, v10 + 13);
  std::string::append(&v153, "eot", 3uLL);
  std::string::append(&v153, v9, v10);
  std::string::append(&v153, "_uber_gen", 9uLL);
  std::string::append(&v153, v8, 1uLL);
  if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v153;
  }
  else {
    uint64_t v11 = (std::string *)v153.__r_.__value_.__r.__words[0];
  }
  if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v153.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v153.__r_.__value_.__l.__size_;
  }
  uint64_t Bitcode = AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)v11, size, 0);
  uint64_t v14 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 32);
  uint64_t v15 = *(void **)(v14 + 8);
  if (v15) {
    size_t v16 = strlen(*(const char **)(v14 + 8));
  }
  else {
    size_t v16 = 0;
  }
  llvm::Module::setTargetTriple(Bitcode, v15, v16);
  uint64_t v17 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 32);
  if (*(void *)(v17 + 16)) {
    strlen(*(const char **)(v17 + 16));
  }
  llvm::Module::setDataLayout();
  v157[3] = 0;
  llvm::Linker::linkModules();
  std::__function::__value_func<void ()(llvm::Module &,llvm::StringSet<llvm::MallocAllocator> const&)>::~__value_func[abi:nn180100](v157);
  uint64_t v146 = 0;
  if (Bitcode)
  {
    uint64_t v18 = MEMORY[0x1CB79FA40]();
    MEMORY[0x1CB7A0780](v18, 0x10B2C407FF26C1CLL);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v153.__r_.__value_.__l.__data_);
  }
  *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 336) = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t Function = llvm::Module::getFunction();
  if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1736)) {
    uint64_t v20 = 17;
  }
  else {
    uint64_t v20 = 16;
  }
  int v21 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  if (*(_WORD *)(Function + 18)) {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  }
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.eot_key";
  unint64_t v22 = 259;
  __int16 v154 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  uint64_t v23 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v24 = *((void *)v23 + 47);
  uint64_t v25 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v23 + 32), v21);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v24, v25);
  unint64_t v26 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::Type::getInt32Ty(*(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 392), v27);
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.emit_enabled";
  __int16 v154 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  uint64_t v28 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v29 = *((void *)v28 + 47);
  uint64_t v30 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v28 + 32), v26);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v29, v30);
  int v31 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(*(llvm::ArrayType **)((char *)this + *(void *)(*(void *)this - 24) + 232), (llvm::Type *)0x11);
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.emit_info_array";
  __int16 v154 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  uint64_t v32 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v33 = *((void *)v32 + 47);
  uint64_t v34 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v32 + 32), v31);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v33, v34);
  uint64_t v35 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  uint64_t v36 = (llvm::ArrayType *)llvm::PointerType::get();
  llvm::ArrayType::get(v36, (llvm::Type *)v20);
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.sstt_address_array";
  __int16 v154 = 259;
  llvm::GlobalVariable::GlobalVariable();
  *((unsigned char *)v35 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  uint64_t v37 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v38 = *((void *)v37 + 47);
  uint64_t v39 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v37 + 32), v35);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v38, v39);
  uint64_t v40 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  uint64_t v41 = (llvm::ArrayType *)llvm::PointerType::get();
  llvm::ArrayType::get(v41, (llvm::Type *)v20);
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.queue_address_array";
  __int16 v154 = 259;
  llvm::GlobalVariable::GlobalVariable();
  *((unsigned char *)v40 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  uint64_t v42 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v43 = *((void *)v42 + 47);
  uint64_t v44 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v42 + 32), v40);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v43, v44);
  uint64_t v45 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(*(llvm::ArrayType **)((char *)this + *(void *)(*(void *)this - 24) + 232), (llvm::Type *)v20);
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.slice_level_array";
  __int16 v154 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  uint64_t v46 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v47 = *((void *)v46 + 47);
  uint64_t v48 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v46 + 32), v45);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v47, v48);
  uint64_t v156 = 0;
  memset(v155, 0, sizeof(v155));
  if (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1780))
  {
    *((void *)this + 7) |= ~(-1 << v20);
  }
  else
  {
    int v49 = (llvm::ArrayType *)llvm::VectorType::get();
    long long v140 = v31;
    if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1738))
    {
      llvm::User::operator new((llvm::User *)0x58);
      llvm::ArrayType::get(v49, (llvm::Type *)v20);
      v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.pbe_words_indirect";
      __int16 v154 = 259;
      llvm::GlobalVariable::GlobalVariable();
      uint64_t v50 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
      if (*(void *)(v50 + 1712)) {
        strlen(*(const char **)(v50 + 1712));
      }
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153.__r_.__value_.__r.__words[2];
      v153.__r_.__value_.__l.__size_ = 0x2000000000;
      uint64_t v61 = llvm::ValueAsMetadata::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v153, v61);
      llvm::ConstantInt::get();
      uint64_t v62 = llvm::ValueAsMetadata::get();
      for (uint64_t i = 0; i != v20; ++i)
      {
        long long v150 = (const char *)v62;
        llvm::ConstantInt::get();
        uint64_t v151 = llvm::ValueAsMetadata::get();
        uint64_t Impl = llvm::MDTuple::getImpl();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v153, Impl);
      }
      uint64_t v65 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 376);
      uint64_t v66 = llvm::MDTuple::getImpl();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v65, v66);
      if ((std::string::size_type *)v153.__r_.__value_.__l.__data_ != &v153.__r_.__value_.__r.__words[2]) {
        free(v153.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v139 = Function;
      std::string::size_type v51 = 0;
      uint64_t v52 = (char *)this + 368;
      do
      {
        long long v53 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.pbe_words";
        v153.__r_.__value_.__r.__words[2] = v51;
        __int16 v154 = 2307;
        *((void *)v155 + v51) = llvm::GlobalVariable::GlobalVariable();
        uint64_t v54 = *(void *)&v52[*(void *)(*(void *)this - 24) + 32];
        if (*(void *)(v54 + 1712)) {
          strlen(*(const char **)(v54 + 1712));
        }
        llvm::GlobalObject::setSection();
        unint64_t v55 = *(unsigned int *)(*(void *)&v52[*(void *)(*(void *)this - 24) + 32] + 1724);
        unint64_t v56 = __clz(v55) ^ 0x13F;
        if (v55) {
          unint64_t v57 = v56;
        }
        else {
          unint64_t v57 = 0;
        }
        unint64_t v22 = v57 | v22 & 0xFFFFFFFFFFFF0000;
        llvm::GlobalObject::setAlignment();
        uint64_t v58 = (char *)this + *(void *)(*(void *)this - 24);
        uint64_t v59 = *((void *)v58 + 47);
        uint64_t v60 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v58 + 32), v53);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v59, v60);
        ++v51;
      }
      while (v20 != v51);
      uint64_t Function = v139;
    }
    int v31 = v140;
  }
  uint64_t v67 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  if (!*(unsigned char *)(v67 + 1738) || *(_DWORD *)(v67 + 1780))
  {
    __int16 v69 = (AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    uint64_t v70 = *(void *)(Function + 80);
    if (v70) {
      uint64_t v71 = (llvm::BasicBlock *)(v70 - 24);
    }
    else {
      uint64_t v71 = 0;
    }
    FirstNonPHI = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v71);
    llvm::IRBuilderBase::SetInsertPoint(v69, FirstNonPHI);
    __int16 v74 = *(_DWORD **)this;
    if (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 876) != 2)
    {
      AGCLLVMDriverShader::mutateAllConstantArgsToSharedRegister((AGCLLVMDriverShader *)Function, v73);
      __int16 v74 = *(_DWORD **)this;
    }
    uint64_t v149 = 0;
    int v75 = (char *)this + *((void *)v74 - 3) + 40;
    if (*(_WORD *)(Function + 18)) {
      llvm::Function::BuildLazyArguments((llvm::Function *)Function);
    }
    uint64_t v76 = **(void **)(Function + 88);
    __int16 v154 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v75, 49, (uint64_t)v21, v76, (uint64_t)&v153);
    uint64_t v77 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
    __int16 v152 = 257;
    __int16 v79 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v26, v78);
    uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v77 + 5, v79, (uint64_t)v26, 0, (uint64_t)&v150);
    __int16 v80 = (char *)this + *(void *)(*(void *)this - 24) + 40;
    if (*(unsigned char *)(Function + 18)) {
      llvm::Function::BuildLazyArguments((llvm::Function *)Function);
    }
    uint64_t v81 = *(void *)(*(void *)(Function + 88) + 80);
    __int16 v145 = 257;
    uint64_t v149 = llvm::IRBuilderBase::CreateCast((uint64_t)v80, 49, (uint64_t)v31, v81, (uint64_t)&v144);
    uint64_t v82 = llvm::Function::args((llvm::Function *)Function);
    if (v82 != v83)
    {
      uint64_t v84 = v82;
      uint64_t v85 = v83;
      int v86 = 0;
      do
      {
        int v87 = v86 + 1;
        llvm::Value::replaceAllUsesWith();
        v84 += 40;
        int v86 = v87;
      }
      while (v84 != v85);
    }
    uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
    *(_WORD *)(inserted + 18) = *(_WORD *)(inserted + 18) & 0xC00F | 0x6B0;
    if (*(void *)(Function + 72) != Function + 72) {
      llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(inserted + 72, inserted + 72, Function + 72, *(void *)(Function + 80), Function + 72);
    }
    llvm::Function::eraseFromParent((llvm::Function *)Function);
    uint64_t v142 = 0;
    std::string __p = 0;
    unint64_t v143 = 0;
    std::vector<llvm::Function *>::reserve(&__p, 0x678uLL);
    uint64_t v89 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
    uint64_t v90 = v89 + 24;
    uint64_t v91 = *(void *)(v89 + 32);
    if (v91 != v89 + 24)
    {
      int v137 = (char *)this + 368;
      uint64_t v138 = v89 + 24;
      do
      {
        if (v91) {
          int v92 = (AGCLLVMDriverShader **)(v91 - 56);
        }
        else {
          int v92 = 0;
        }
        uint64_t Name = (const char *)llvm::Value::getName((llvm::Value *)v92);
        long long v150 = Name;
        uint64_t v151 = v94;
        if (v94 >= 0x10 && *(void *)Name == 0x5F746F652E636761 && *((void *)Name + 1) == 0x5F78695074696D65)
        {
          llvm::StringRef::find();
          llvm::StringRef::find();
          llvm::StringRef::find();
          v153.__r_.__value_.__r.__words[0] = 0;
          int AsUnsignedInteger = llvm::getAsUnsignedInteger();
          unsigned __int8 v97 = v153.__r_.__value_.__s.__data_[0];
          if (v153.__r_.__value_.__r.__words[0] >= 0x100) {
            unsigned __int8 v97 = 0;
          }
          if (AsUnsignedInteger) {
            uint64_t v98 = 0;
          }
          else {
            uint64_t v98 = v97;
          }
          v153.__r_.__value_.__r.__words[0] = 0;
          int v99 = llvm::getAsUnsignedInteger();
          std::string::value_type v100 = v153.__r_.__value_.__s.__data_[0];
          if (v153.__r_.__value_.__r.__words[0] >= 0x100) {
            std::string::value_type v100 = 0;
          }
          if (v99) {
            unsigned __int8 v101 = 0;
          }
          else {
            unsigned __int8 v101 = v100;
          }
          v153.__r_.__value_.__r.__words[0] = 0;
          int v102 = llvm::getAsUnsignedInteger();
          std::string::value_type v103 = v153.__r_.__value_.__s.__data_[0];
          if (v153.__r_.__value_.__r.__words[0] >= 0x100) {
            std::string::value_type v103 = 0;
          }
          int v104 = (v103 != 0) & ~v102;
          v153.__r_.__value_.__r.__words[0] = 0;
          int v105 = llvm::getAsUnsignedInteger();
          std::string::value_type v106 = v153.__r_.__value_.__s.__data_[0];
          if (v153.__r_.__value_.__r.__words[0] >= 0x100) {
            std::string::value_type v106 = 0;
          }
          BOOL v107 = v106 != 0;
          if (AGCLLVMDriverShader::isValidUberFunctionCombination(this, v98, v104))
          {
            uint64_t v109 = *(void *)&v137[*(void *)(*(void *)this - 24) + 32];
            if ((*(unsigned int (**)(uint64_t, void))(*(void *)v109 + 536))(v109, v101))
            {
              int v110 = v107 & ~v105;
              uint64_t v111 = *(void *)&v137[*(void *)(*(void *)this - 24) + 32];
              if (((*(uint64_t (**)(uint64_t))(*(void *)v111 + 200))(v111) & 1) != 0
                || ((v110 ^ 1) & 1) != 0)
              {
                v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
                __int16 v154 = 259;
                operator new();
              }
            }
          }
          AGCLLVMDriverShader::handleUberInvalidCombinationFunction(v92[1], v108);
          uint64_t v112 = (char *)v142;
          if ((unint64_t)v142 >= v143)
          {
            int v114 = (char *)__p;
            uint64_t v115 = ((char *)v142 - (unsigned char *)__p) >> 3;
            unint64_t v116 = v115 + 1;
            if ((unint64_t)(v115 + 1) >> 61) {
              abort();
            }
            uint64_t v117 = v143 - (void)__p;
            if ((uint64_t)(v143 - (void)__p) >> 2 > v116) {
              unint64_t v116 = v117 >> 2;
            }
            if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v118 = v116;
            }
            if (v118) {
              unint64_t v118 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v118);
            }
            else {
              uint64_t v119 = 0;
            }
            unsigned int v120 = (AGCLLVMDriverShader ***)(v118 + 8 * v115);
            char *v120 = v92;
            uint64_t v113 = v120 + 1;
            if (v112 != v114)
            {
              do
              {
                unsigned int v121 = (AGCLLVMDriverShader **)*((void *)v112 - 1);
                v112 -= 8;
                *--unsigned int v120 = v121;
              }
              while (v112 != v114);
              uint64_t v112 = (char *)__p;
            }
            std::string __p = v120;
            unint64_t v143 = v118 + 8 * v119;
            if (v112) {
              operator delete(v112);
            }
          }
          else
          {
            *uint64_t v142 = v92;
            uint64_t v113 = (AGCLLVMDriverShader ***)(v112 + 8);
          }
          uint64_t v142 = v113;
          uint64_t v90 = v138;
        }
        uint64_t v91 = *(void *)(v91 + 8);
      }
      while (v91 != v90);
    }
    unint64_t v122 = (AGCLLVMDriverShader ***)__p;
    unint64_t v123 = (llvm::Function **)v142;
    if (__p != v142)
    {
      uint64_t v124 = (llvm::Function **)__p;
      do
      {
        int v125 = *v124++;
        llvm::Function::eraseFromParent(v125);
      }
      while (v124 != v123);
    }
    uint64_t v142 = v122;
    if (v136)
    {
      if (v135)
      {
        int v126 = (llvm::Function *)llvm::Module::getFunction();
        uint64_t v127 = v126;
        if (*((_WORD *)v126 + 9))
        {
          llvm::Function::BuildLazyArguments(v126);
          if (*((_WORD *)v127 + 9))
          {
            llvm::Function::BuildLazyArguments(v127);
            if (*((_WORD *)v127 + 9))
            {
              llvm::Function::BuildLazyArguments(v127);
              if (*((_WORD *)v127 + 9))
              {
                llvm::Function::BuildLazyArguments(v127);
                if (*((_WORD *)v127 + 9))
                {
                  llvm::Function::BuildLazyArguments(v127);
                  if (*((_WORD *)v127 + 9))
                  {
                    llvm::Function::BuildLazyArguments(v127);
                    if (*((_WORD *)v127 + 9)) {
                      llvm::Function::BuildLazyArguments(v127);
                    }
                  }
                }
              }
            }
          }
        }
        v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
        __int16 v154 = 259;
        operator new();
      }
      uint64_t v128 = (llvm::Function *)llvm::Module::getFunction();
      long long v129 = v128;
      if (*((_WORD *)v128 + 9))
      {
        llvm::Function::BuildLazyArguments(v128);
        if (*((_WORD *)v129 + 9)) {
          llvm::Function::BuildLazyArguments(v129);
        }
      }
      v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
      __int16 v154 = 259;
      operator new();
    }
    v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153.__r_.__value_.__r.__words[2];
    v153.__r_.__value_.__l.__size_ = 0x2000000000;
    for (uint64_t j = *(void *)(llvm::Module::getFunction() + 8); j; uint64_t j = *(void *)(j + 8))
    {
      __int16 v131 = *(llvm::Instruction **)(j + 24);
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 24) + 40), v131);
      llvm::ConstantInt::get();
      llvm::Value::replaceAllUsesWith();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v153, (uint64_t)v131);
    }
    for (uint64_t k = *(void *)(llvm::Module::getFunction() + 8); k; uint64_t k = *(void *)(k + 8))
    {
      uint64_t v133 = *(llvm::Instruction **)(k + 24);
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 24) + 40), v133);
      uint64_t v134 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
      (*(void (**)(uint64_t))(*(void *)v134 + 200))(v134);
      llvm::ConstantInt::get();
      llvm::Value::replaceAllUsesWith();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v153, (uint64_t)v133);
    }
    llvm::Module::getFunction();
    if (!*((unsigned char *)this + 81))
    {
      long long v150 = "entry";
      __int16 v152 = 259;
      operator new();
    }
    llvm::Module::getFunction();
    long long v150 = "entry";
    __int16 v152 = 259;
    operator new();
  }
  uint64_t v68 = llvm::PointerType::get();
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this + *(void *)(*(void *)this - 24) + 32, (uint64_t)"agc.eot_get_pbe_words", 21, v68, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 224));
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
  __int16 v154 = 259;
  operator new();
}

uint64_t AGCLLVMEndOfTileProgram::buildEmitSlice(AGCLLVMEndOfTileProgram *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5, llvm::Value *a6, llvm::Value *a7)
{
  v107[2] = *MEMORY[0x1E4F143B8];
  llvm::FixedVectorType::get();
  if (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1780))
  {
    uint64_t v77 = 0;
    uint64_t v12 = a2;
  }
  else
  {
    size_t v13 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    uint64_t v12 = a2;
    *(void *)&long long v103 = "agc.pbe_words";
    uint64_t v104 = a2;
    __int16 v106 = 2051;
    llvm::GlobalVariable::GlobalVariable();
    uint64_t v14 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    if (*(void *)(v14 + 1712)) {
      strlen(*(const char **)(v14 + 1712));
    }
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    uint64_t v15 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v16 = *((void *)v15 + 47);
    uint64_t v77 = v13;
    uint64_t v17 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v15 + 32), v13);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v16, v17);
  }
  uint64_t v18 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  uint64_t v19 = *(void *)this;
  *(void *)&long long v103 = "agc.emit_info";
  uint64_t v104 = v12;
  __int16 v106 = 2051;
  uint64_t v76 = *(unsigned int *)(*(void *)((char *)this + *(void *)(v19 - 24) + 400) + 876) | 0x100000000;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  uint64_t v20 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v21 = *((void *)v20 + 47);
  uint64_t v82 = (llvm::Type **)v18;
  uint64_t v22 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v20 + 32), v18);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v21, v22);
  uint64_t v84 = *((void *)this + 9);
  unsigned int v23 = *(unsigned __int8 *)(v84 + 4 * v12);
  if (v23 != a3)
  {
    uint64_t v24 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v25 = *((void *)v24 + 50);
    long long v100 = *(_OWORD *)(v24 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v101, (llvm::IRBuilderBase *)(v24 + 40));
    int v102 = *((_DWORD *)v24 + 34);
    (*(void (**)(long long *__return_ptr, uint64_t, long long *, void, void, void))(*(void *)v25 + 248))(&v103, v25, &v100, a2 & 7, *((void *)this + 9), *((unsigned __int8 *)this + 81));
    if (v101) {
      llvm::MetadataTracking::untrack();
    }
    if ((void)v103)
    {
      unint64_t v26 = (char *)this + *(void *)(*(void *)this - 24) + 32;
      long long v97 = v103;
      uint64_t v98 = v104;
      if (v104) {
        llvm::MetadataTracking::track();
      }
      int v99 = v105;
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v97, (uint64_t)(v26 + 8));
      if (v98) {
        llvm::MetadataTracking::untrack();
      }
    }
    if (v104) {
      llvm::MetadataTracking::untrack();
    }
    a3 = v23;
  }
  unsigned int v81 = a3;
  if (a6)
  {
    *(void *)&long long v103 = "cond_emit";
    __int16 v106 = 259;
    operator new();
  }
  if (a7)
  {
    *(void *)&long long v103 = "config";
    __int16 v106 = 259;
    operator new();
  }
  if ((*(unsigned char *)(v84 + 4 * v12 + 3) & 2) != 0)
  {
    *((unsigned char *)this + 8llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 1;
    uint64_t v27 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    llvm::PointerType::get();
    *(void *)&long long v103 = "agc.sstt_address";
    uint64_t v104 = v12;
    __int16 v106 = 2051;
    llvm::GlobalVariable::GlobalVariable();
    *((unsigned char *)v27 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    uint64_t v28 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v29 = *((void *)v28 + 47);
    uint64_t v30 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v28 + 32), v27);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v29, v30);
    int v31 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
    uint64_t v32 = (llvm::Type *)llvm::PointerType::get();
    __int16 v106 = 257;
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v31 + 5, v32, (uint64_t)v27, 0, (uint64_t)&v103);
    uint64_t v33 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    llvm::PointerType::get();
    *(void *)&long long v103 = "agc.queue_address";
    uint64_t v104 = v12;
    __int16 v106 = 2051;
    llvm::GlobalVariable::GlobalVariable();
    *((unsigned char *)v33 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    uint64_t v34 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v35 = *((void *)v34 + 47);
    uint64_t v36 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v34 + 32), v33);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v35, v36);
    uint64_t v37 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
    uint64_t v38 = (llvm::Type *)llvm::PointerType::get();
    __int16 v106 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v37 + 5, v38, (uint64_t)v33, 0, (uint64_t)&v103);
    uint64_t v40 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    uint64_t v41 = (char *)this + *(void *)(*(void *)this - 24);
    *(void *)&long long v103 = "agc.slice_level";
    uint64_t v104 = v12;
    __int16 v106 = 2051;
    uint64_t v76 = *(unsigned int *)(*((void *)v41 + 50) + 876) | 0x100000000;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    uint64_t v42 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v43 = *((void *)v42 + 47);
    uint64_t v44 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v42 + 32), v40);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v43, v44);
    uint64_t v45 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v46 = (llvm::Type *)*((void *)v45 + 29);
    __int16 v106 = 257;
    uint64_t v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v45 + 5, v46, (uint64_t)v40, 0, (uint64_t)&v103);
    AGCLLVMEndOfTileProgram::setupOnDemandHwSparse(this, AlignedLoad, v39, v47);
  }
  uint64_t v48 = v84;
  if (*((unsigned char *)this + 81))
  {
    int v49 = a5;
    if ((*(unsigned char *)(v84 + 4 * v12 + 3) & 0x20) != 0)
    {
      v107[0] = llvm::ConstantInt::get();
      v107[1] = llvm::ConstantInt::get();
      AGCLLVMObject::buildWGBarrier((uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t)v107, 2);
      uint64_t v50 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v51 = *((void *)v50 + 50);
      long long v91 = *(_OWORD *)(v50 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v92, (llvm::IRBuilderBase *)(v50 + 40));
      int v93 = *((_DWORD *)v50 + 34);
      unsigned int v52 = *(_DWORD *)(v84 + 4 * v12);
      uint64_t v53 = BYTE1(v52);
      uint64_t v54 = (v52 >> 26) & 7;
      uint64_t v55 = HIBYTE(v52) & 1;
      unint64_t v56 = *(void *)(*((void *)this + 9) + 72);
      uint64_t v57 = llvm::ConstantInt::get();
      uint64_t v58 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
      __int16 v106 = 257;
      uint64_t v60 = AGCLLVMBuilder::tryDeducePointeeType(v82, v59);
      uint64_t v61 = llvm::IRBuilderBase::CreateAlignedLoad(v58 + 5, v60, (uint64_t)v82, 0, (uint64_t)&v103);
      (*(void (**)(long long *__return_ptr, uint64_t, long long *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, _DWORD, uint64_t, _BYTE))(*(void *)v51 + 280))(&v94, v51, &v91, v53, v54, v55, HIDWORD(v56) & 0xF, v57, v61, 0, v76, 0);
      if (v92) {
        llvm::MetadataTracking::untrack();
      }
      int v49 = a5;
      uint64_t v48 = v84;
      if ((void)v94)
      {
        uint64_t v62 = (char *)this + *(void *)(*(void *)this - 24) + 32;
        long long v88 = v94;
        uint64_t v89 = v95;
        if (v95) {
          llvm::MetadataTracking::track();
        }
        int v90 = v96;
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v88, (uint64_t)(v62 + 8));
        if (v89) {
          llvm::MetadataTracking::untrack();
        }
      }
      AGCLLVMObject::buildWGBarrier((uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t)v107, 2);
      if (v95) {
        llvm::MetadataTracking::untrack();
      }
      char v79 = 1;
    }
    else
    {
      char v79 = 0;
    }
  }
  else
  {
    char v79 = 0;
    int v49 = a5;
  }
  uint64_t v63 = *(void *)this;
  if (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1780))
  {
    uint64_t v64 = (llvm::GlobalVariable *)*((void *)this + 11);
    *((void *)this + 7) |= 1 << v12;
    uint64_t v65 = llvm::ConstantInt::get();
    uint64_t v63 = *(void *)this;
  }
  else
  {
    uint64_t v65 = 0;
    uint64_t v64 = v77;
  }
  uint64_t v66 = (char *)this + *(void *)(v63 - 24);
  uint64_t v67 = *((void *)v66 + 50);
  long long v85 = *(_OWORD *)(v66 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v86, (llvm::IRBuilderBase *)(v66 + 40));
  int v87 = *((_DWORD *)v66 + 34);
  LODWORD(v66) = *(_DWORD *)(v48 + 4 * v12);
  uint64_t v68 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v69 = (llvm::Type *)*((void *)v68 + 29);
  __int16 v106 = 257;
  uint64_t v70 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v68 + 5, v69, (uint64_t)v82, 0, (uint64_t)&v103);
  LOBYTE(v76) = v79;
  (*(void (**)(uint64_t, long long *, llvm::GlobalVariable *, uint64_t, void, void, void, void, uint64_t, uint64_t))(*(void *)v67 + 240))(v67, &v85, v64, v65, a4, BYTE1(v66), (v66 >> 24) & 1, BYTE2(v66), v70, v76);
  if (v86) {
    llvm::MetadataTracking::untrack();
  }
  if (v49)
  {
    uint64_t v71 = (char *)this + *(void *)(*(void *)this - 24);
    int v72 = v71 + 32;
    uint64_t v73 = *((void *)v71 + 50);
    if (*(void *)(v73 + 1640)) {
      strlen(*(const char **)(v73 + 1640));
    }
    uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
    __int16 v106 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)(v72 + 8), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)&v103);
  }
  return v81;
}

llvm::Value *AGCLLVMEndOfTileProgram::buildFastClearOfMetadata(AGCLLVMEndOfTileProgram *this, unsigned int a2, llvm::Value *a3)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v95 = "cond_emit";
    LOWORD(v98) = 259;
    operator new();
  }
  uint64_t v5 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::PointerType::get();
  uint64_t v95 = "agc.metadata_address";
  v97[0] = a2;
  LOWORD(v98) = 2051;
  llvm::GlobalVariable::GlobalVariable();
  *((unsigned char *)v5 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v7 = *((void *)v6 + 47);
  uint64_t v8 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v6 + 32), v5);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v7, v8);
  int v9 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  uint64_t v95 = "agc.width_in_blocks";
  v97[0] = a2;
  LOWORD(v98) = 2051;
  uint64_t v10 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v10 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  uint64_t v11 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v12 = *((void *)v11 + 47);
  uint64_t v13 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v11 + 32), v9);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v12, v13);
  uint64_t v14 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  uint64_t v95 = "agc.height_in_blocks";
  v97[0] = a2;
  LOWORD(v98) = 2051;
  uint64_t v15 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v15 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  uint64_t v16 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v17 = *((void *)v16 + 47);
  uint64_t v18 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v16 + 32), v14);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v17, v18);
  uint64_t v19 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  uint64_t v95 = "agc.block_width";
  v97[0] = a2;
  LOWORD(v98) = 2051;
  uint64_t v20 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v20 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  uint64_t v21 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v22 = *((void *)v21 + 47);
  uint64_t v23 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v21 + 32), v19);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v22, v23);
  uint64_t v24 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  uint64_t v95 = "agc.block_height";
  v97[0] = a2;
  LOWORD(v98) = 2051;
  uint64_t v25 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v25 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  unint64_t v26 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v27 = *((void *)v26 + 47);
  uint64_t v28 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v26 + 32), v24);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v27, v28);
  uint64_t v29 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  uint64_t v95 = "agc.metadata_mb_size_32b";
  v97[0] = a2;
  LOWORD(v98) = 2051;
  uint64_t v30 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v30 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  int v31 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v32 = *((void *)v31 + 47);
  uint64_t v33 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v31 + 32), v29);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v32, v33);
  uint64_t v34 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  uint64_t v95 = "agc.metadata_mb_per_tile";
  v97[0] = a2;
  LOWORD(v98) = 2051;
  uint64_t v35 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v35 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  uint64_t v36 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v37 = *((void *)v36 + 47);
  uint64_t v38 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v36 + 32), v34);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v37, v38);
  uint64_t v39 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  LOWORD(v98) = 257;
  uint64_t v41 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v5, v40);
  uint64_t AlignedLoad = (AGCLLVMBuilder *)llvm::IRBuilderBase::CreateAlignedLoad(v39 + 5, v41, (uint64_t)v5, 0, (uint64_t)&v95);
  uint64_t v42 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  LOWORD(v98) = 257;
  uint64_t v44 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v9, v43);
  uint64_t v85 = llvm::IRBuilderBase::CreateAlignedLoad(v42 + 5, v44, (uint64_t)v9, 0, (uint64_t)&v95);
  uint64_t v45 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  LOWORD(v98) = 257;
  uint64_t v47 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v14, v46);
  uint64_t v84 = llvm::IRBuilderBase::CreateAlignedLoad(v45 + 5, v47, (uint64_t)v14, 0, (uint64_t)&v95);
  uint64_t v48 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  LOWORD(v98) = 257;
  uint64_t v50 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v19, v49);
  uint64_t v83 = llvm::IRBuilderBase::CreateAlignedLoad(v48 + 5, v50, (uint64_t)v19, 0, (uint64_t)&v95);
  uint64_t v51 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  LOWORD(v98) = 257;
  uint64_t v53 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v24, v52);
  uint64_t v82 = llvm::IRBuilderBase::CreateAlignedLoad(v51 + 5, v53, (uint64_t)v24, 0, (uint64_t)&v95);
  uint64_t v54 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  LOWORD(v98) = 257;
  unint64_t v56 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v29, v55);
  uint64_t v57 = llvm::IRBuilderBase::CreateAlignedLoad(v54 + 5, v56, (uint64_t)v29, 0, (uint64_t)&v95);
  uint64_t v58 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  LOWORD(v98) = 257;
  uint64_t v60 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v34, v59);
  uint64_t v61 = llvm::IRBuilderBase::CreateAlignedLoad(v58 + 5, v60, (uint64_t)v34, 0, (uint64_t)&v95);
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v63 = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v64 = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v65 = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v66 = (AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  LOWORD(v98) = 257;
  uint64_t v67 = llvm::IRBuilderBase::CreateCall((uint64_t)v66, **(void **)(*(void *)v63 + 16), v63, 0, 0, (uint64_t)&v95);
  uint64_t v68 = (char *)this + *(void *)(*(void *)this - 24);
  LOWORD(v9llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 257;
  __int16 v69 = llvm::IRBuilderBase::CreateCall((uint64_t)(v68 + 40), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)__src);
  __int16 v88 = 257;
  uint64_t Mul = llvm::IRBuilderBase::CreateMul(v66, v67, v69, (const llvm::Twine *)v87);
  uint64_t v71 = (AGCLLVMEndOfTileProgram *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  LOWORD(v98) = 257;
  int v72 = llvm::IRBuilderBase::CreateCall((uint64_t)v71, **(void **)(*(void *)v65 + 16), v65, 0, 0, (uint64_t)&v95);
  uint64_t v73 = (char *)this + *(void *)(*(void *)this - 24);
  LOWORD(v9llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 257;
  __int16 v74 = llvm::IRBuilderBase::CreateCall((uint64_t)(v73 + 40), **(void **)(*(void *)v64 + 16), v64, 0, 0, (uint64_t)__src);
  __int16 v88 = 257;
  uint64_t v75 = llvm::IRBuilderBase::CreateMul(v71, v72, v74, (const llvm::Twine *)v87);
  uint64_t v76 = llvm::PointerType::get();
  uint64_t v77 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232);
  __src[0] = v76;
  __src[1] = v77;
  __src[2] = v77;
  __src[3] = v77;
  uint64_t v90 = v77;
  uint64_t v91 = v77;
  uint64_t v92 = v77;
  uint64_t v93 = v77;
  uint64_t v94 = v77;
  uint64_t v95 = v97;
  uint64_t v96 = 0x900000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v95, __src, &v95);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v79 = v78;
  if (v95 != v97) {
    free(v95);
  }
  uint64_t v95 = AlignedLoad;
  uint64_t v96 = Mul;
  v97[0] = v75;
  v97[1] = v85;
  uint64_t v98 = v84;
  uint64_t v99 = v83;
  uint64_t v100 = v82;
  uint64_t v101 = v57;
  uint64_t v102 = v61;
  __int16 v80 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  LOWORD(v9llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v80, *(void *)(v79 + 24), v79, (uint64_t)&v95, 9, (uint64_t)__src);
}

llvm::Value *AGCLLVMEndOfTileProgram::setupOnDemandHwSparse(AGCLLVMEndOfTileProgram *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  if (*(void *)(v7 + 1576)) {
    strlen(*(const char **)(v7 + 1576));
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v9 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  if (*(void *)(v9 + 1584)) {
    strlen(*(const char **)(v9 + 1584));
  }
  uint64_t v10 = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v11 = (char *)this + *(void *)(*(void *)this - 24);
  LOWORD(v3llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 257;
  uint64_t v12 = llvm::IRBuilderBase::CreateCall((uint64_t)(v11 + 40), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)&v27);
  uint64_t v13 = (char *)this + *(void *)(*(void *)this - 24);
  LOWORD(v3llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 257;
  uint64_t v14 = llvm::IRBuilderBase::CreateCall((uint64_t)(v13 + 40), **(void **)(*(void *)v10 + 16), v10, 0, 0, (uint64_t)&v27);
  uint64_t v15 = llvm::PointerType::get();
  uint64_t v16 = llvm::PointerType::get();
  uint64_t v17 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v18 = *((void *)v17 + 25);
  uint64_t v19 = *((void *)v17 + 29);
  __src[0] = v15;
  __src[1] = v16;
  __src[2] = v18;
  __src[3] = v18;
  uint64_t v26 = v19;
  uint64_t v27 = v29;
  uint64_t v28 = 0x500000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v27, __src, &v27);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v21 = v20;
  if (v27 != v29) {
    free(v27);
  }
  uint64_t v27 = a3;
  uint64_t v28 = (uint64_t)a2;
  v29[0] = v12;
  v29[1] = v14;
  uint64_t v30 = a4;
  uint64_t v22 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  LOWORD(v26) = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v22, *(void *)(v21 + 24), v21, (uint64_t)&v27, 5, (uint64_t)__src);
}

void AGCLLVMEndOfTileProgram::AGCLLVMEndOfTileProgram(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
}

void AGCLLVMUtilityProgram::AGCLLVMUtilityProgram(AGCLLVMUtilityProgram *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  AGCLLVMObject::AGCLLVMObject((AGCLLVMUtilityProgram *)((char *)this + 8), a2, a3);
  *(void *)this = &unk_1F25C7F58;
  *((void *)this + 1) = &unk_1F25C8090;
  *((void *)this + 5) = &unk_1F25C8180;
  uint64_t Bitcode = AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)"utility_program", 15, 0);
  uint64_t v6 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368) = Bitcode;
  *(void *)(*(void *)((char *)this + *(void *)(v6 - 24) + 400) + 336) = *(void *)((char *)this
                                                                                          + *(void *)(v6 - 24)
                                                                                          + 368);
  (*(void (**)(void **__return_ptr, AGCLLVMUtilityProgram *))(v6 + 48))(__p, this);
  uint64_t Function = llvm::Module::getFunction();
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = *(void **)(Function + 112);
  llvm::AttributeList::getFnAttrs((llvm::AttributeList *)__p);
  uint64_t v9 = (void *)llvm::AttributeSet::addAttribute();
  LODWORD(__p[0]) = -1;
  __p[1] = v9;
  *(void *)(Function + 112) = llvm::AttributeList::get();
  *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | 0x6A0;
  __p[0] = "agc.main";
  __int16 v12 = 259;
  llvm::Value::setName();
  AGCLLVMObject::disableConstantHoisting((AGCLLVMUtilityProgram *)((char *)this + *(void *)(*(void *)this - 24)));
  uint64_t v8 = *(void *)this;
  *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 136) = -1;
  *(_DWORD *)(*(void *)((char *)this + *(void *)(v8 - 24) + 400) + 104) = -1;
}

void AGCLLVMDummyFeedbackFragmentShader::AGCLLVMDummyFeedbackFragmentShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 688), a2, a3);
  AGCLLVMDriverFragmentShader::AGCLLVMDriverFragmentShader(a1, (uint64_t)off_1F25C8410);
}

void AGCLLVMTextureFetchFragmentShader::buildDefaultBlitShader(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 80))(&__p);
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  if ((char)v3 < 0) {
    operator delete(__p);
  }
  *(_WORD *)(inserted + 18) = *(_WORD *)(inserted + 18) & 0xC00F | 0x650;
  std::string __p = "entry";
  LOWORD(v4) = 259;
  operator new();
}

void AGCLLVMTextureFetchFragmentShader::buildMRCDownsampleBlitShader(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 80))(__p);
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(inserted + 18) = *(_WORD *)(inserted + 18) & 0xC00F | 0x6C0;
  __p[0] = "entry";
  LOWORD(v4) = 259;
  operator new();
}

llvm::GlobalVariable *AGCLLVMDriverShader::getWriteImageStateGlobal(AGCLLVMDriverShader *this)
{
  if (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1780)) {
    return 0;
  }
  uint64_t v1 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  char v3 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v4 = *((void *)v3 + 47);
  uint64_t v5 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v3 + 32), v1);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v4, v5);
  return v1;
}

void *AGCLLVMDriverShader::setImageWriteSampleArgs(void *result, uint64_t a2, void *a3, uint64_t a4)
{
  if (*(_DWORD *)(*(void *)((char *)result + *(void *)(*result - 24) + 400) + 1780))
  {
    uint64_t v6 = result;
    result[7] |= 1uLL;
    uint64_t v7 = llvm::ConstantInt::get();
    uint64_t v8 = (uint64_t)v6 + *(void *)(*v6 - 24) + 40;
    uint64_t v9 = llvm::PointerType::get();
    __int16 v13 = 257;
    *(void *)(a2 + 32) = llvm::IRBuilderBase::CreateCast(v8, 48, v7, v9, (uint64_t)v12);
    uint64_t v10 = (uint64_t)v6 + *(void *)(*v6 - 24) + 40;
    uint64_t v11 = llvm::PointerType::get();
    __int16 v13 = 257;
    uint64_t result = (void *)llvm::IRBuilderBase::CreateCast(v10, 49, a4, v11, (uint64_t)v12);
    a3 = result;
  }
  *(void *)(a2 + 56) = a3;
  return result;
}

llvm::Value *AGCLLVMTextureFetchFragmentShader::buildUDivURem(AGCLLVMTextureFetchFragmentShader *this, llvm::Value *a2, llvm::Value *a3, llvm::Value **a4, llvm::Value **a5)
{
  uint64_t v9 = (AGCLLVMTextureFetchFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v13 = 257;
  *a4 = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v9, a2, a3, (const llvm::Twine *)v12);
  uint64_t v10 = (AGCLLVMTextureFetchFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v13 = 257;
  uint64_t result = (llvm::Value *)llvm::IRBuilderBase::CreateURem(v10, a2, a3, (const llvm::Twine *)v12);
  *a5 = result;
  return result;
}

void AGCLLVMTextureFetchFragmentShader::AGCLLVMTextureFetchFragmentShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
}

uint64_t AGCLLVMDriverCDMShader::buildLocalID(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 400);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 680))(v8);
  if (v9)
  {
    uint64_t v10 = v9;
    long long v30 = *a2;
    uint64_t v31 = *((void *)a2 + 2);
    if (v31) {
      llvm::MetadataTracking::track();
    }
    int v32 = *((_DWORD *)a2 + 6);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v10 + 256))(v10, &v30, a3, a4);
    if (v31) {
      llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 72) + 24 * a4 + 56);
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)a1 - 24) + a1 + 40;
      __int16 v33 = 257;
      return llvm::IRBuilderBase::CreateCast(v13, 38, v12, a3, (uint64_t)&v30);
    }
    else
    {
      unsigned int v14 = a4;
      if (*(void *)a2)
      {
        uint64_t v15 = *(void *)(*(void *)a1 - 24) + a1 + 32;
        long long v34 = *a2;
        uint64_t v35 = *((void *)a2 + 2);
        if (v35) {
          llvm::MetadataTracking::track();
        }
        int v36 = *((_DWORD *)a2 + 6);
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v34, v15 + 8);
        if (v35) {
          llvm::MetadataTracking::untrack();
        }
      }
      int v16 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * a4 + 24);
      if (v16 == -2)
      {
        return 0;
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 88);
        if (*(_WORD *)(v17 + 18)) {
          llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 88));
        }
        uint64_t v18 = 40 * (v16 - 1) + 40;
        if (!v16) {
          uint64_t v18 = 0;
        }
        uint64_t v19 = *(void *)(v17 + 88) + v18;
        if (a4)
        {
          uint64_t v20 = *(void *)(*(void *)a1 - 24) + a1;
          uint64_t v21 = *(void *)(v20 + 272);
          __int16 v33 = 257;
          uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v20 + 40, 49, v19, v21, (uint64_t)&v30);
          uint64_t v23 = *(void *)(*(void *)a1 - 24) + a1;
          __int16 v33 = 257;
          uint64_t v24 = (llvm::IRBuilderBase *)(v23 + 40);
          uint64_t v25 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v24, Cast, v25, (const llvm::Twine *)&v30);
          uint64_t v27 = *(void *)(*(void *)a1 - 24) + a1 + 40;
          __int16 v33 = 257;
          uint64_t v19 = llvm::IRBuilderBase::CreateCast(v27, 39, Element, a3, (uint64_t)&v30);
        }
        uint64_t v28 = *(void *)(*(void *)a1 - 24) + a1 + 40;
        __int16 v33 = 257;
        uint64_t v11 = llvm::IRBuilderBase::CreateCast(v28, 38, v19, a3, (uint64_t)&v30);
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(*(void *)(a1 + 72) + 24 * v14 + 40), v11);
      }
    }
  }
  return v11;
}

uint64_t AGCLLVMDriverCDMBlitShader::getSampleResultType(void *a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x1F00) != 0)
  {
    AGCLLVMDriverShader::getFormatInfo((uint64_t)&v7, a1, (a3 >> 8) & 0x1F);
    return v9;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)((char *)a1 + *(void *)(*a1 - 24) + 400) + 560))(&v7);
    uint64_t v5 = (const llvm::Type *)v8;
    if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12) {
      uint64_t v5 = **(const llvm::Type ***)(v8 + 16);
    }
    LODWORD(result) = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a1 + *(void *)(*a1 - 24) + 32), v5, &v6);
    if ((result - 3) >= 3) {
      return result;
    }
    else {
      return (result + 4);
    }
  }
}

uint64_t AGCLLVMDriverCDMBlitShader::readDestinationTexture(AGCLLVMDriverShader *a1, _DWORD *a2, int a3)
{
  if ((*a2 & 0xC0) != 0) {
    int v6 = 3;
  }
  else {
    int v6 = 1;
  }
  uint64_t v7 = (llvm::Value *)llvm::UndefValue::get();
  uint64_t v8 = (char *)a1 + *(void *)(*(void *)a1 - 24);
  unsigned int v9 = (llvm::Value *)*((void *)a1 + 12);
  LOWORD(v51) = 257;
  uint64_t v10 = (llvm::IRBuilderBase *)(v8 + 40);
  uint64_t v11 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v10, v7, v9, v11, (const llvm::Twine *)&v48);
  uint64_t v13 = (char *)a1 + *(void *)(*(void *)a1 - 24);
  unsigned int v14 = (llvm::Value *)*((void *)a1 + 13);
  LOWORD(v51) = 257;
  uint64_t v15 = (llvm::IRBuilderBase *)(v13 + 40);
  int v16 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v17 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v15, InsertElement, v14, v16, (const llvm::Twine *)&v48);
  uint64_t v18 = (llvm::Value *)AGCLLVMDriverShader::buildRegionOffsets(a1, "agc.dest_padded_offsets");
  uint64_t v19 = (AGCLLVMDriverShader *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  LOWORD(v51) = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v19, v17, v18, (const llvm::Twine *)&v48);
  if ((*(unsigned char *)a2 & 0xC0) != 0)
  {
    uint64_t v21 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    uint64_t v48 = "agc.texture_write_slice";
    LOWORD(v51) = 259;
    uint64_t v22 = llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v22 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    uint64_t v23 = (char *)a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v24 = *((void *)v23 + 47);
    uint64_t v25 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v23 + 32), v21);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v24, v25);
    uint64_t v26 = (uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24));
    LOWORD(v51) = 257;
    uint64_t v28 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v21, v27);
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v26 + 5, v28, (uint64_t)v21, 0, (uint64_t)&v48);
    long long v30 = AGCLLVMBuilder::extendVector((AGCLLVMDriverShader *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 32), Add, 4);
    uint64_t v31 = (char *)a1 + *(void *)(*(void *)a1 - 24);
    LOWORD(v51) = 257;
    int v32 = (llvm::IRBuilderBase *)(v31 + 40);
    __int16 v33 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v32, v30, AlignedLoad, v33, (const llvm::Twine *)&v48);
  }
  long long v34 = (AGCLLVMDriverShader *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  uint64_t v35 = (llvm::Type *)llvm::FixedVectorType::get();
  LOWORD(v51) = 257;
  uint64_t UIToFP = llvm::IRBuilderBase::CreateUIToFP(v34, Add, v35, (const llvm::Twine *)&v48);
  ImageStateGlobal = AGCLLVMDriverShader::getImageStateGlobal(a1);
  uint64_t TextureHeapGlobal = AGCLLVMDriverShader::getTextureHeapGlobal(a1, 1u);
  SamplerStateGlobal = AGCLLVMDriverShader::getSamplerStateGlobal(a1);
  LODWORD(v48) = 0;
  HIDWORD(v48) = v6;
  v50[0] = 0;
  *(_DWORD *)((char *)v50 + 7) = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  __int16 v55 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  __int16 v69 = 0;
  char v70 = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  int v64 = 0;
  char v68 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  char v71 = 1;
  uint64_t v72 = 0;
  char v73 = 0;
  int v49 = a3;
  AGCLLVMDriverShader::setSampleArgs(a1, &v48, 1, ImageStateGlobal, (uint64_t)SamplerStateGlobal, TextureHeapGlobal);
  *(void *)&long long v58 = UIToFP;
  uint64_t v65 = 0;
  int v60 = 1;
  uint64_t v40 = llvm::ConstantFP::get();
  BYTE6(v50[0]) = 1;
  uint64_t v61 = v40;
  uint64_t v59 = 0;
  uint64_t v41 = (char *)a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v42 = *((void *)v41 + 50);
  long long v45 = *(_OWORD *)(v41 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v46, (llvm::IRBuilderBase *)(v41 + 40));
  int v47 = *((_DWORD *)v41 + 34);
  uint64_t v43 = (*(uint64_t (**)(uint64_t, long long *, const char **))(*(void *)v42 + 272))(v42, &v45, &v48);
  if (v46) {
    llvm::MetadataTracking::untrack();
  }
  return v43;
}

void AGCLLVMDriverCDMBlitShader::AGCLLVMDriverCDMBlitShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 128), a2, a3);
  AGCLLVMDriverShader::AGCLLVMDriverShader(a1, (uint64_t *)off_1F25C89F8);
}

uint64_t std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25CC970;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25CC970;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::~__func()
{
}

void std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25CC928;
}

void *std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25CC928;
  return result;
}

void std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::~__func()
{
}

uint64_t AGCLLVMObjectArray::getObjectName(AGCLLVMObjectArray *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 22) + 40))();
}

void AGCLLVMObjectArray::~AGCLLVMObjectArray(AGCLLVMObjectArray *this)
{
  AGCLLVMObjectArray::~AGCLLVMObjectArray(this);
  JUMPOUT(0x1CB7A0780);
}

{
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  char *v7;

  *(void *)this = &unk_1F25D9FF0;
  uint64_t v2 = (void **)*((void *)this + 23);
  uint64_t v3 = (void **)*((void *)this + 24);
  while (v2 != v3)
  {
    uint64_t v4 = *v2;
    v2 += 2;
    free(v4);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 31));
  uint64_t v5 = (void *)*((void *)this + 26);
  if (v5)
  {
    *((void *)this + 27) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 23);
  if (v6)
  {
    *((void *)this + 24) = v6;
    operator delete(v6);
  }
  llvm::SmallVectorTemplateBase<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>,false>::destroy_range(*((void *)this + 4), *((void *)this + 4) + 32 * *((unsigned int *)this + 10));
  uint64_t v7 = (char *)*((void *)this + 4);
  if (v7 != (char *)this + 48) {
    free(v7);
  }
  *(void *)this = &unk_1F25DA030;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>,false>::destroy_range(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      if (*(char *)(v2 - 1) < 0) {
        operator delete(*(void **)(v2 - 24));
      }
      uint64_t result = *(void *)(v2 - 32);
      *(void *)(v2 - 32) = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
      }
      v2 -= 32;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t AGCLLVMObjectArray::getMainDeserializedReply(AGCLLVMObjectArray *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 22) + 16))();
}

uint64_t AGCLLVMObjectArray::composeCompilerReply(void *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a4 + 24) = a1[33];
  if (!((a1[24] - a1[23]) >> 4)) {
    return 0;
  }
  uint64_t v98 = (a1[24] - a1[23]) >> 4;
  int v6 = operator new(1uLL);
  unint64_t v7 = (unint64_t)v6;
  *int v6 = 0;
  uint64_t v8 = v6 + 1;
  unsigned int v9 = (void *)a1[30];
  uint64_t v99 = a1;
  int v105 = a1 + 31;
  if (v9 != a1 + 31)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v6 + 1;
    while (1)
    {
      if (*((char *)v9 + 55) < 0)
      {
        unsigned int v14 = (const char *)v9[4];
        unsigned int v15 = *((_DWORD *)v9 + 14) + 1;
        if (!v14) {
          goto LABEL_10;
        }
      }
      else
      {
        unsigned int v14 = (const char *)(v9 + 4);
        unsigned int v15 = *((_DWORD *)v9 + 14) + 1;
      }
      if (*v14)
      {
        int v16 = &v13[-v7];
        int v110 = v13 - v7;
        unsigned int v107 = v15;
        if (v13 >= v8)
        {
          unint64_t v19 = (unint64_t)(v16 + 1);
          if ((uint64_t)(v16 + 1) < 0) {
            goto LABEL_134;
          }
          uint64_t v20 = v12;
          if (2 * (uint64_t)&v8[-v7] > v19) {
            unint64_t v19 = 2 * (void)&v8[-v7];
          }
          if ((unint64_t)&v8[-v7] >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v21 = v19;
          }
          if (v21) {
            unint64_t v22 = (unint64_t)operator new(v21);
          }
          else {
            unint64_t v22 = 0;
          }
          uint64_t v23 = &v16[v22];
          uint64_t v24 = &v16[v22];
          *uint64_t v24 = 95;
          uint64_t v17 = v24 + 1;
          if (v13 == (char *)v7)
          {
            unint64_t v7 = (unint64_t)v23;
          }
          else
          {
            uint64_t v25 = &v13[~v7];
            do
            {
              char v26 = *--v13;
              (v25--)[v22] = v26;
            }
            while (v13 != (char *)v7);
            uint64_t v13 = (char *)v7;
            unint64_t v7 = v22;
          }
          uint64_t v8 = (char *)(v22 + v21);
          if (v13) {
            operator delete(v13);
          }
          uint64_t v12 = v20;
        }
        else
        {
          *uint64_t v13 = 95;
          uint64_t v17 = v13 + 1;
        }
        size_t v27 = strlen(v14);
        int64_t v28 = v27 + 1;
        if ((uint64_t)(v27 + 1) < 1)
        {
          uint64_t v13 = v17;
        }
        else if (v8 - v17 >= v28)
        {
          uint64_t v101 = v8;
          if (v28 > 0)
          {
            uint64_t v103 = v12;
            size_t v35 = v27 + 1;
            if (&v14[v27 + 1] != v14) {
              memmove(v17, v14, v27 + 1);
            }
            uint64_t v13 = &v17[v35];
            goto LABEL_60;
          }
          uint64_t v36 = (uint64_t)&v14[v27 + 1];
          uint64_t v37 = &v17[v28];
          size_t v38 = -v28;
          uint64_t v39 = &v17[-v28];
          uint64_t v13 = v17;
          size_t v40 = v38;
          if (v39 < v17)
          {
            do
              *v13++ = v17[v40++];
            while (v40);
          }
          if (v17 != v37) {
            memmove(&v17[-v38], v17, v38);
          }
          if ((const char *)v36 != v14) {
            memmove(v17, v14, v36 - (void)v14);
          }
          uint64_t v8 = v101;
        }
        else
        {
          uint64_t v29 = v8;
          int64_t v30 = (int64_t)&v17[-v7];
          uint64_t v31 = (uint64_t)&v17[v28 - v7];
          if (v31 < 0) {
            goto LABEL_134;
          }
          unint64_t v32 = (unint64_t)&v29[-v7];
          if (2 * v32 > v31) {
            uint64_t v31 = 2 * v32;
          }
          if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v33 = v31;
          }
          size_t v100 = v33;
          uint64_t v103 = v12;
          if (v33) {
            long long v34 = (char *)operator new(v33);
          }
          else {
            long long v34 = 0;
          }
          uint64_t v41 = &v34[v30];
          memcpy(&v34[v30], v14, v28);
          if ((char *)v7 == v17)
          {
            uint64_t v42 = (char *)v7;
            uint64_t v43 = &v34[v30];
          }
          else
          {
            do
            {
              v34[v30 - 1] = *(unsigned char *)(v7 - 1 + v30);
              --v30;
            }
            while (v30);
            uint64_t v42 = v17;
            uint64_t v43 = v34;
          }
          uint64_t v44 = &v41[v28];
          if (v42 != v17) {
            memmove(v44, v17, 0);
          }
          uint64_t v8 = &v34[v100];
          uint64_t v13 = v44;
          if (v7) {
            operator delete((void *)v7);
          }
          unint64_t v7 = (unint64_t)v43;
LABEL_60:
          uint64_t v12 = v103;
        }
        int v18 = v110;
        unsigned int v15 = v107;
        goto LABEL_62;
      }
LABEL_10:
      int v18 = 0;
LABEL_62:
      uint64_t v45 = v15;
      if (v11 >= v12)
      {
        uint64_t v46 = (v11 - v10) >> 4;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 60) {
LABEL_134:
        }
          abort();
        if ((v12 - v10) >> 3 > v47) {
          unint64_t v47 = (v12 - v10) >> 3;
        }
        if ((unint64_t)(v12 - v10) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v47;
        }
        if (v48)
        {
          if (v48 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int v49 = (char *)operator new(16 * v48);
        }
        else
        {
          int v49 = 0;
        }
        uint64_t v50 = &v49[16 * v46];
        *(_DWORD *)uint64_t v50 = v18;
        *((_DWORD *)v50 + 1) = 2;
        *((void *)v50 + 1) = v45;
        if (v11 == v10)
        {
          long long v52 = &v49[16 * v46];
        }
        else
        {
          long long v51 = &v49[16 * v46];
          do
          {
            long long v52 = v51 - 16;
            *((_OWORD *)v51 - 1) = *((_OWORD *)v11 - 1);
            v11 -= 16;
            v51 -= 16;
          }
          while (v11 != v10);
        }
        uint64_t v12 = &v49[16 * v48];
        uint64_t v11 = v50 + 16;
        if (v10) {
          operator delete(v10);
        }
        uint64_t v10 = v52;
      }
      else
      {
        *(_DWORD *)uint64_t v11 = v18;
        *((_DWORD *)v11 + 1) = 2;
        *((void *)v11 + 1) = v15;
        v11 += 16;
      }
      long long v53 = (void *)v9[1];
      if (v53)
      {
        do
        {
          long long v54 = v53;
          long long v53 = (void *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          long long v54 = (void *)v9[2];
          BOOL v55 = *v54 == (void)v9;
          unsigned int v9 = v54;
        }
        while (!v55);
      }
      unsigned int v9 = v54;
      if (v54 == v105)
      {
        int64_t v56 = v11 - v10;
        goto LABEL_90;
      }
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int64_t v56 = 0;
  uint64_t v13 = v6 + 1;
LABEL_90:
  uint64_t v57 = v56 & 0xFFFFFFFF0;
  if ((v56 & 0xFFFFFFFF0) != 0) {
    int v58 = 24;
  }
  else {
    int v58 = 0;
  }
  if ((v56 & 0xFFFFFFFF0) != 0) {
    int v59 = 2;
  }
  else {
    int v59 = 1;
  }
  int v108 = v59;
  uint64_t v60 = (v58 + 80 * v98 + 104);
  int v61 = *((_DWORD *)v99 + 58);
  int v62 = (v56 + 7) & 0xFFFFFFF8;
  uint64_t v102 = v13;
  unsigned int v63 = (v13 - v7 + 7) & 0xFFFFFFF8;
  if (v57) {
    int v64 = v60 + v61 + v62;
  }
  else {
    int v64 = v60 + v61;
  }
  if (!v57) {
    int v62 = 0;
  }
  int v104 = v62;
  if (v57) {
    unsigned int v65 = v63;
  }
  else {
    unsigned int v65 = 0;
  }
  size_t v95 = v65 + v64;
  uint64_t v66 = (char *)malloc_type_calloc(1uLL, v95, 0xD59E51C7uLL);
  uint64_t v67 = v66;
  *(_OWORD *)uint64_t v66 = xmmword_1CADD64D0;
  *((_DWORD *)v66 + 4) = v108;
  *((_DWORD *)v66 + 5) = v60 - 32;
  *((_DWORD *)v66 + 6) = 0;
  *((_DWORD *)v66 + 8) = 25;
  *((_DWORD *)v66 + 9) = 80 * v98 + 72;
  uint64_t v68 = v104 + v65 + v61;
  *((void *)v66 + 8) = v68;
  *((void *)v66 + 9) = v60;
  *((void *)v66 + 1llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v68;
  *((_DWORD *)v66 + 24) = v98;
  uint64_t v111 = v57;
  if (v57)
  {
    __int16 v69 = &v66[(80 * v98 + 104)];
    *(void *)__int16 v69 = 0x1800000002;
    *((_DWORD *)v69 + 2) = v60 + v61;
    *((_DWORD *)v69 + 3) = (unint64_t)(v11 - v10) >> 4;
    *((_DWORD *)v69 + 4) = v64;
    *((_DWORD *)v69 + 5) = v65;
  }
  int v109 = v60 + v61;
  int v106 = v64;
  char v71 = (const void **)v99[23];
  char v70 = (char **)v99[24];
  if (v71 != (const void **)v70)
  {
    uint64_t v72 = v66 + 104;
    do
    {
      __int16 v74 = (char *)*v71;
      size_t v73 = (size_t)v71[1];
      memcpy(&v67[v60], *v71, v73);
      if (!*((_DWORD *)v67 + 3))
      {
        *(void *)(v67 + 4) = *(void *)(v74 + 4);
        *((_DWORD *)v67 + 3) = *((_DWORD *)v74 + 3);
      }
      strcpy(v72, "__data");
      strcpy(v72 + 16, "__DATA");
      *((_DWORD *)v72 + 12) = v60;
      LODWORD(v6llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v60 + v73;
      v71 += 2;
      *((void *)v72 + 5) = v73;
      v72 += 80;
    }
    while (v71 != (const void **)v70);
  }
  if (!v111)
  {
LABEL_115:
    *a2 = (uint64_t)v67;
    *a3 = v95;
    BOOL v75 = v95 != 0;
    if (!v7) {
      goto LABEL_119;
    }
LABEL_118:
    operator delete((void *)v7);
    goto LABEL_119;
  }
  if (v11 == v10)
  {
    BOOL v75 = 0;
    if (!v7) {
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  memcpy(&v67[v109], v10, (v11 - v10));
  if (v102 != (char *)v7)
  {
    memcpy(&v67[v106], (const void *)v7, (v102 - v7));
    goto LABEL_115;
  }
  BOOL v75 = 0;
  unint64_t v7 = (unint64_t)v102;
  if (v102) {
    goto LABEL_118;
  }
LABEL_119:
  if (v10) {
    operator delete(v10);
  }
  if (!v75) {
    return 0;
  }
  if (MGGetBoolAnswer())
  {
    uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DUMP_MACHO", v76);
    if (Value)
    {
      if (*Value != 48)
      {
        if (atoi(Value))
        {
          printMessage((char **)&AGCPrinter, "------ Start dump mach-O for multiple shaders (size=%lu) ------\n", v78, v79, v80, v81, v82, v83, *((_DWORD *)v99 + 10));
          printHexDump((char **)&AGCPrinter, *a2, *a3, 0x20u, "", 0);
          printMessage((char **)&AGCPrinter, "\n\n------ End dump mach-O for multiple shaders (size=%lu) ------\n", v84, v85, v86, v87, v88, v89, *((_DWORD *)v99 + 10));
        }
      }
    }
  }
  if (!*(void *)(a5 + 24)) {
    return 1;
  }
  uint64_t v90 = (*(uint64_t (**)(void *))(*v99 + 16))(v99);
  uint64_t v91 = *(void *)(a5 + 24);
  if (v91)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v91 + 48))(v91, v90);
    return 1;
  }
  uint64_t v93 = (AGCLLVMObjectArray *)((uint64_t (*)(void, uint64_t))std::__throw_bad_function_call[abi:nn180100])(0, v90);
  return AGCLLVMObjectArray::compile(v93);
}

uint64_t AGCLLVMObjectArray::compile(AGCLLVMObjectArray *this)
{
  void v39[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((unsigned int *)this + 10);
  if (!v1) {
    return 1;
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  uint64_t v4 = &v3[32 * v1];
  uint64_t v5 = (uint64_t **)((char *)this + 248);
  while (1)
  {
    int v6 = v3 + 8;
    if (((***(uint64_t (****)(void))v3)() & 1) == 0)
    {
      std::string::operator=((std::string *)((char *)this + 8), (const std::string *)(*(void *)v3 + 8));
      return 0;
    }
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v7 = *(void *)v3;
    void v39[3] = 0;
    int v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, long long *, void *))(*(void *)v7 + 8))(v7, &v36, &v35, &v33, v39);
    std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](v39);
    if (!v8) {
      break;
    }
    uint64_t v9 = v35;
    uint64_t v10 = v36;
    if ((v3[31] & 0x80000000) == 0 || (int v6 = *(char **)v6) != 0)
    {
      if (*v6)
      {
        std::string::basic_string[abi:nn180100]<0>(__p, v6);
        uint64_t v12 = *((void *)this + 23);
        uint64_t v11 = *((void *)this + 24);
        uint64_t v13 = v5;
        unsigned int v14 = v5;
        unsigned int v15 = (uint64_t *)*((void *)this + 31);
        if (v15)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v13 = (uint64_t **)v15;
              int v16 = v15 + 4;
              if (!std::less<std::string>::operator()[abi:nn180100](__p, v15 + 4)) {
                break;
              }
              unsigned int v15 = *v13;
              unsigned int v14 = v13;
              if (!*v13) {
                goto LABEL_14;
              }
            }
            if (!std::less<std::string>::operator()[abi:nn180100](v16, __p)) {
              break;
            }
            unsigned int v14 = v13 + 1;
            unsigned int v15 = v13[1];
            if (!v15) {
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          uint64_t v17 = operator new(0x40uLL);
          v17[2] = *(_OWORD *)__p;
          *((void *)v17 + 6) = v38;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v38 = 0;
          *((_DWORD *)v17 + 14) = (unint64_t)(v11 - v12) >> 4;
          *(void *)uint64_t v17 = 0;
          *((void *)v17 + 1) = 0;
          *((void *)v17 + 2) = v13;
          *unsigned int v14 = (uint64_t *)v17;
          uint64_t v18 = **((void **)this + 30);
          if (v18)
          {
            *((void *)this + 3llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v18;
            unint64_t v19 = *v14;
          }
          else
          {
            unint64_t v19 = (uint64_t *)v17;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 31), v19);
          ++*((void *)this + 32);
        }
        if (SHIBYTE(v38) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    size_t v21 = (char *)*((void *)this + 24);
    unint64_t v20 = *((void *)this + 25);
    if ((unint64_t)v21 >= v20)
    {
      uint64_t v23 = (char *)*((void *)this + 23);
      uint64_t v24 = (v21 - v23) >> 4;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60) {
        abort();
      }
      uint64_t v26 = v20 - (void)v23;
      if (v26 >> 3 > v25) {
        unint64_t v25 = v26 >> 3;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        int64_t v28 = (char *)operator new(16 * v27);
      }
      else
      {
        int64_t v28 = 0;
      }
      uint64_t v29 = &v28[16 * v24];
      *(void *)uint64_t v29 = v10;
      *((void *)v29 + 1) = v9;
      int64_t v30 = v29;
      if (v21 != v23)
      {
        do
        {
          *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
          v30 -= 16;
          v21 -= 16;
        }
        while (v21 != v23);
        size_t v21 = (char *)*((void *)this + 23);
      }
      uint64_t v31 = &v28[16 * v27];
      unint64_t v22 = v29 + 16;
      *((void *)this + 23) = v30;
      *((void *)this + 24) = v29 + 16;
      *((void *)this + 25) = v31;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)size_t v21 = v10;
      *((void *)v21 + 1) = v9;
      unint64_t v22 = v21 + 16;
    }
    *((void *)this + 24) = v22;
    *((void *)this + 29) += v9;
    *((void *)this + 33) += *((void *)&v34 + 1);
    v3 += 32;
    if (v3 == v4) {
      return 1;
    }
  }
  MEMORY[0x1CB7A04E0]((char *)this + 8, "Error occurred composing compiler reply.");
  return 0;
}

uint64_t AGCLLVMCtx::initialize(AGCLLVMUserShader *a1)
{
  v450[8] = *MEMORY[0x1E4F143B8];
  AGCLLVMUserShader::getVaryingModeMap(a1);
  *(_DWORD *)(*llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>("air.perspective", 0xFuLL)+ 8) = 0;
  *(_DWORD *)(*llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>("air.flat", 8uLL)+ 8) = 1;
  uint64_t v1 = llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>("air.no_perspective", 0x12uLL);
  *(_DWORD *)(*v1 + 8) = 2;
  AGCLLVMUserShader::getInterpolationLocationMap((AGCLLVMUserShader *)v1);
  *(_DWORD *)(*llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>("air.center", 0xAuLL) + 8) = 0;
  *(_DWORD *)(*llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>("air.centroid", 0xCuLL) + 8) = 2;
  uint64_t v2 = llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>("air.sample", 0xAuLL);
  *(_DWORD *)(*v2 + 8) = 1;
  AGCLLVMUserObject::getSampleFunctionMap((AGCLLVMUserObject *)v2);
  if (dword_1EBD0EB7C) {
    goto LABEL_459;
  }
  uint64_t v4 = 0;
  v448 = v450;
  long long v449 = xmmword_1CADD6290;
  do
  {
    uint64_t v356 = 0;
    v400 = &(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_function_types)[2 * v4];
    uint64_t v352 = v4 & 0x7FFFFFFE;
    uint64_t v346 = v4;
    unint64_t v5 = 0x28AAAuLL >> v4;
    unint64_t v6 = (0x28AAAuLL >> v4) & 1;
    int v7 = (v352 == 2) | v5 & 1;
    if (v6) {
      char v8 = 3;
    }
    else {
      char v8 = 2;
    }
    char v387 = v8;
    if (v5) {
      char v9 = 3;
    }
    else {
      char v9 = 2;
    }
    unint64_t v354 = v6;
    char v383 = 2 * v6;
    char v348 = v9 + 2;
    char v350 = v9 + 1;
    std::string __s = "1d";
    int v391 = v7;
    do
    {
      if (!v354 || v356 != 4)
      {
        uint64_t v10 = 0;
        unint64_t v11 = v356 - 5;
        char v12 = v348;
        char v13 = v350;
        if ((0xB5uLL >> v356))
        {
          char v12 = v350;
          char v13 = 0;
        }
        char v410 = v13;
        char v14 = v12 + (v352 == 2);
        if (v352 != 2) {
          char v12 = 0;
        }
        char v405 = v12;
        BOOL v15 = v11 >= 3;
        if (v11 >= 3) {
          char v16 = v14 + 3;
        }
        else {
          char v16 = 0;
        }
        char v371 = v16;
        if (v15) {
          char v17 = v14 + 5;
        }
        else {
          char v17 = v14 + 3;
        }
        char v370 = v17;
        if (v15) {
          char v18 = v14;
        }
        else {
          char v18 = 0;
        }
        char v368 = v18;
        char v374 = v14 + 2;
        char v378 = v14;
        if (v15) {
          char v19 = v14 + 2;
        }
        else {
          char v19 = v14;
        }
        char v364 = v19 + 2;
        char v366 = v19;
        char v362 = v19 + 3;
        char v360 = v14 + 1;
        v428 = "";
        do
        {
          unint64_t v20 = 0;
          uint64_t v358 = v10;
          v422 = &AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_texture_subtypes[2 * v10 + 1];
          size_t v21 = &off_1E65EB620;
          do
          {
            if (v20 > 1) {
              char v22 = v7;
            }
            else {
              char v22 = 0;
            }
            if (v20 != 6 && (v22 & 1) == 0)
            {
              uint64_t v23 = *v400;
              if (*v400)
              {
                size_t v24 = strlen(*v400);
                *(void *)&long long v449 = 0;
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v23, &v23[v24]);
              }
              else
              {
                *(void *)&long long v449 = 0;
              }
              size_t v25 = strlen(__s);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, __s, &__s[v25]);
              size_t v26 = strlen(v428);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v428, &v428[v26]);
              if (v7) {
                unint64_t v27 = (const char **)v21;
              }
              else {
                unint64_t v27 = (const char **)(v21 - 1);
              }
              int64_t v28 = (char *)*v27;
              if (*v27)
              {
                size_t v29 = strlen(*v27);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v28, &v28[v29]);
              }
              else if (*((void *)&v449 + 1) < (unint64_t)v449)
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              if (*v422)
              {
                char v30 = 0;
                if (*v422 == 1)
                {
                  char v31 = v378;
                  char v433 = v374;
                  char v32 = v371;
                  char v33 = v370;
                }
                else
                {
                  char v32 = 0;
                  char v31 = 0;
                  char v433 = v378;
                  char v33 = v360;
                }
              }
              else
              {
                char v31 = 0;
                char v433 = v364;
                char v30 = v366;
                char v32 = v368;
                char v33 = v362;
              }
              int v34 = *((_DWORD *)v400 + 2);
              int v35 = (int)(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v356 + 1];
              int v36 = *((_DWORD *)v21 + 2);
              uint64_t v3 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(v448, v449);
              uint64_t v37 = *(void *)v3;
              *(_DWORD *)(v37 + 8) = v34;
              *(_DWORD *)(v37 + 12) = v35;
              *(_DWORD *)(v37 + 16) = 0;
              *(_DWORD *)(v37 + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v36;
              *(_DWORD *)(v37 + 24) = 1;
              *(void *)(v37 + 28) = 0;
              int v7 = v391;
              *(unsigned char *)(v37 + 36) = v391;
              *(unsigned char *)(v37 + 37) = v33 + 1;
              *(_WORD *)(v37 + 38) = 256;
              *(unsigned char *)(v37 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
              *(unsigned char *)(v37 + 41) = v383;
              *(unsigned char *)(v37 + 42) = v387;
              *(unsigned char *)(v37 + 43) = v32;
              *(unsigned char *)(v37 + 44) = v30;
              *(unsigned char *)(v37 + 45) = v31;
              *(unsigned char *)(v37 + 46) = 0;
              *(unsigned char *)(v37 + 47) = v410;
              *(unsigned char *)(v37 + 48) = v405;
              *(_DWORD *)(v37 + 49) = 0;
              *(unsigned char *)(v37 + 53) = v433;
              *(unsigned char *)(v37 + 54) = v33;
              *(unsigned char *)(v37 + 55) = 1;
              *(_WORD *)(v37 + 56) = 0;
            }
            ++v20;
            v21 += 3;
          }
          while (v20 != 7);
          v428 = (char *)AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_texture_subtypes[2 * v358 + 2];
          uint64_t v10 = 1;
        }
        while (v358 != 1);
      }
      std::string __s = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * ++v356];
    }
    while (v356 != 7);
    uint64_t v4 = v346 + 1;
  }
  while (v346 != 3);
  do
  {
    uint64_t v347 = 0;
    unint64_t v38 = 0x28AAAuLL >> v4;
    v429 = (char *)((0x28AAAuLL >> v4) & 1);
    v372 = &(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_function_types)[2 * v4];
    unint64_t v361 = (0x20C0uLL >> v4) & 1;
    uint64_t v343 = v4;
    unint64_t v355 = 0x1030uLL >> v4;
    if (v429) {
      char v39 = 2;
    }
    else {
      char v39 = 1;
    }
    char v369 = v39;
    if (v38) {
      char v40 = 2;
    }
    else {
      char v40 = 1;
    }
    char v344 = v40 + 2;
    char v345 = v40 + 1;
    v367 = "1d";
    do
    {
      if (!v429 || v347 != 4)
      {
        char v41 = 0;
        char v42 = v344;
        char v43 = v345;
        if ((unint64_t)(v347 - 5) >= 3)
        {
          char v42 = v345;
          char v43 = 0;
        }
        char v379 = v43;
        if ((0xB5uLL >> v347)) {
          uint64_t v44 = "2d_ms";
        }
        else {
          uint64_t v44 = "2d_ms_array";
        }
        uint64_t v45 = 5;
        if (((0xB5uLL >> v347) & 1) == 0) {
          uint64_t v45 = 11;
        }
        v363 = &v44[v45];
        v365 = v44;
        if ((0xB5uLL >> v347)) {
          char v46 = v42;
        }
        else {
          char v46 = v42 + 1;
        }
        char v349 = v46;
        if ((0xB5uLL >> v347)) {
          char v47 = 0;
        }
        else {
          char v47 = v42;
        }
        char v375 = v47;
        char v48 = 1;
        do
        {
          char v351 = v48;
          uint64_t v49 = 0;
          char v50 = v349;
          char v51 = v349 + (v41 & 1);
          if ((v41 & 1) == 0) {
            char v50 = 0;
          }
          char v406 = v50;
          char v411 = v41;
          char v52 = v51 + v361;
          if (v41) {
            char v53 = 0;
          }
          else {
            char v53 = v51 + v361;
          }
          char v401 = v53;
          if (!v361) {
            char v51 = 0;
          }
          char v396 = v51;
          char v392 = v52 + ((v41 & 1) == 0);
          long long v54 = "";
          do
          {
            unint64_t v357 = 0;
            uint64_t v353 = v49;
            v414 = (int *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coherence_modes[2 * v49 + 1];
            BOOL v55 = AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::res_types;
            do
            {
              if (!v429 || v357 <= 1)
              {
                uint64_t v56 = 0;
                uint64_t v57 = &AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::res_types[3 * v357];
                if (v429) {
                  BOOL v55 = v57 + 1;
                }
                v423 = (const char **)v55;
                __sa = (char *)(v57 + 2);
                int v58 = 1;
                do
                {
                  uint64_t v59 = 0;
                  uint64_t v359 = v56;
                  v434 = (const char **)((char *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coord_types
                                       + 16 * v56
                                       + 8);
                  uint64_t v60 = &off_1E65EB5E8;
                  int v61 = "";
                  do
                  {
                    if (!((v361 != 0) | v355 & 1 | (v357 != 6)) || v59 && v59 != 3 && !v361) {
                      goto LABEL_107;
                    }
                    int v62 = *v372;
                    if (*v372)
                    {
                      size_t v63 = strlen(*v372);
                      *(void *)&long long v449 = 0;
                      llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v62, &v62[v63]);
                      if ((v41 & 1) == 0) {
                        goto LABEL_101;
                      }
                    }
                    else
                    {
                      *(void *)&long long v449 = 0;
                      if ((v41 & 1) == 0)
                      {
LABEL_101:
                        unsigned int v65 = &v367[strlen(v367)];
                        int v64 = v367;
                        goto LABEL_102;
                      }
                    }
                    unsigned int v65 = (char *)v363;
                    int v64 = (char *)v365;
LABEL_102:
                    llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v64, v65);
                    size_t v66 = strlen(v61);
                    llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v61, &v61[v66]);
                    size_t v67 = strlen(*v434);
                    llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, *v434, &(*v434)[v67]);
                    size_t v68 = strlen(v54);
                    llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v54, &v54[v68]);
                    if (*v423)
                    {
                      size_t v69 = strlen(*v423);
                      llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, *v423, &(*v423)[v69]);
                      size_t v70 = v449;
                    }
                    else
                    {
                      size_t v70 = v449;
                      if (*((void *)&v449 + 1) < (unint64_t)v449) {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod();
                      }
                    }
                    int v71 = *((_DWORD *)v372 + 2);
                    int v72 = (int)(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v347 + 1];
                    int v73 = *((_DWORD *)v60 - 2);
                    int v74 = *(_DWORD *)__sa;
                    int v75 = *v414;
                    uint64_t v3 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(v448, v70);
                    uint64_t v76 = *(void *)v3;
                    *(_DWORD *)(v76 + 8) = v71;
                    *(_DWORD *)(v76 + 12) = v72;
                    *(_DWORD *)(v76 + 16) = v58;
                    *(_DWORD *)(v76 + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v74;
                    *(_DWORD *)(v76 + 24) = v75;
                    *(_DWORD *)(v76 + 28) = 0;
                    *(_DWORD *)(v76 + 32) = v73;
                    *(unsigned char *)(v76 + 36) = (_BYTE)v429;
                    *(unsigned char *)(v76 + 37) = v392 + 1;
                    *(unsigned char *)(v76 + 38) = 0;
                    *(_WORD *)(v76 + 39) = 0;
                    *(unsigned char *)(v76 + 41) = (_BYTE)v429;
                    *(unsigned char *)(v76 + 42) = v369;
                    *(unsigned char *)(v76 + 45) = 0;
                    *(_WORD *)(v76 + 43) = 0;
                    *(unsigned char *)(v76 + 46) = v401;
                    *(unsigned char *)(v76 + 47) = v375;
                    *(unsigned char *)(v76 + 48) = 0;
                    char v41 = v411;
                    *(unsigned char *)(v76 + 49) = v406;
                    *(unsigned char *)(v76 + 5llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v396;
                    *(unsigned char *)(v76 + 51) = v379;
                    *(_WORD *)(v76 + 52) = 0;
                    *(unsigned char *)(v76 + 54) = v392;
                    *(unsigned char *)(v76 + 55) = 1;
                    *(_WORD *)(v76 + 56) = 0;
LABEL_107:
                    ++v59;
                    uint64_t v77 = *v60;
                    v60 += 2;
                    int v61 = v77;
                  }
                  while (v59 != 3);
                  int v58 = *((_DWORD *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coord_types
                        + 4 * v359
                        + 4);
                  uint64_t v56 = 1;
                }
                while (v359 != 1);
              }
              BOOL v55 = &AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::res_types[3 * ++v357];
            }
            while (v357 != 7);
            long long v54 = (char *)AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coherence_modes[2 * v353 + 2];
            uint64_t v49 = 1;
          }
          while (v353 != 1);
          char v41 = 1;
          char v48 = 0;
        }
        while ((((v347 & 0xFFFFFFFE) == 2) & v351) != 0);
      }
      v367 = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * ++v347];
    }
    while (v347 != 7);
    uint64_t v4 = v343 + 1;
  }
  while (v343 != 7);
  do
  {
    uint64_t v78 = 0;
    v415 = &(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_function_types)[2 * v4];
    uint64_t v79 = v4 & 0x7FFFFFFE;
    BOOL v393 = v79 == 10;
    uint64_t v373 = v4;
    unint64_t v80 = (0x57555uLL >> v4) & 1;
    if (v80) {
      char v81 = 2;
    }
    else {
      char v81 = 3;
    }
    char v407 = v81;
    int v82 = (0x57555uLL >> v4) & 1;
    if (v82) {
      char v83 = 2;
    }
    else {
      char v83 = 3;
    }
    unint64_t v388 = v80;
    char v402 = (2 * v80) ^ 2;
    char v384 = v83 + 1;
    char v376 = v82 & (v79 != 10);
    char v380 = v83 + 2;
    uint64_t v84 = "1d";
    do
    {
      uint64_t v397 = v78;
      unint64_t v85 = v78 - 5;
      if ((v78 & 0xFFFFFFFE) == 2 || v85 <= 2)
      {
        unint64_t v86 = 0;
        v435 = (std::string::value_type *)&(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v78 + 1];
        char v87 = v384;
        char v88 = v380;
        if ((0xB5uLL >> v78))
        {
          char v88 = v384;
          char v87 = 0;
        }
        char v430 = v87;
        BOOL v89 = v85 >= 3;
        if (v85 >= 3) {
          char v90 = v88 + v393;
        }
        else {
          char v90 = 0;
        }
        char v424 = v90;
        if (v89) {
          char v91 = v88 + v393 + 2;
        }
        else {
          char v91 = v88 + v393;
        }
        if (v79 != 10) {
          char v88 = 0;
        }
        char __sb = v88;
        if (v79 == 10) {
          char v92 = 0;
        }
        else {
          char v92 = v91;
        }
        char v93 = v91 + v376;
        if (v388) {
          char v94 = v92;
        }
        else {
          char v94 = 0;
        }
        size_t v95 = &off_1E65EB620;
        do
        {
          BOOL v97 = v79 == 10 && v86 > 1;
          if (v86 != 6 && !v97)
          {
            uint64_t v98 = *v415;
            if (*v415)
            {
              size_t v99 = strlen(*v415);
              *(void *)&long long v449 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v98, &v98[v99]);
            }
            else
            {
              *(void *)&long long v449 = 0;
            }
            size_t v100 = strlen(v84);
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v84, &v84[v100]);
            if (v79 == 10) {
              uint64_t v101 = (const char **)v95;
            }
            else {
              uint64_t v101 = (const char **)(v95 - 1);
            }
            uint64_t v102 = (char *)*v101;
            if (*v101)
            {
              size_t v103 = strlen(*v101);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v102, &v102[v103]);
              size_t v104 = v449;
            }
            else
            {
              size_t v104 = v449;
              if (*((void *)&v449 + 1) < (unint64_t)v449) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
            }
            int v105 = *((_DWORD *)v415 + 2);
            int v106 = *(_DWORD *)v435;
            int v107 = *((_DWORD *)v95 + 2);
            uint64_t v3 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(v448, v104);
            uint64_t v108 = *(void *)v3;
            *(_DWORD *)(v108 + 8) = v105;
            *(_DWORD *)(v108 + 12) = v106;
            *(_DWORD *)(v108 + 16) = 0;
            *(_DWORD *)(v108 + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v107;
            *(_DWORD *)(v108 + 24) = 1;
            *(unsigned char *)(v108 + 36) = 0;
            *(void *)(v108 + 28) = 0;
            *(unsigned char *)(v108 + 37) = v93 + 1;
            *(_WORD *)(v108 + 38) = 256;
            *(unsigned char *)(v108 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
            *(unsigned char *)(v108 + 41) = v402;
            *(unsigned char *)(v108 + 42) = v407;
            *(unsigned char *)(v108 + 43) = v424;
            *(unsigned char *)(v108 + 46) = 0;
            *(_WORD *)(v108 + 44) = 0;
            *(unsigned char *)(v108 + 47) = v430;
            *(unsigned char *)(v108 + 48) = __sb;
            *(_WORD *)(v108 + 49) = 0;
            *(unsigned char *)(v108 + 51) = 0;
            *(unsigned char *)(v108 + 52) = v94;
            *(unsigned char *)(v108 + 53) = 0;
            *(unsigned char *)(v108 + 54) = v93;
            *(unsigned char *)(v108 + 55) = 0;
            *(_WORD *)(v108 + 56) = 0;
          }
          ++v86;
          v95 += 3;
        }
        while (v86 != 7);
      }
      uint64_t v78 = v397 + 1;
      uint64_t v84 = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v397 + 2];
    }
    while (v397 != 6);
    uint64_t v4 = v373 + 1;
  }
  while (v373 != 11);
  char v109 = 0;
  uint64_t v110 = 12;
  do
  {
    uint64_t v111 = 0;
    char v381 = v109;
    unint64_t v112 = (0x20C0uLL >> v110) & 1;
    __sc = (char *)&(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_function_types)[2 * v110];
    if (v112) {
      char v113 = 3;
    }
    else {
      char v113 = 2;
    }
    if ((0x20C0uLL >> v110)) {
      char v114 = 4;
    }
    else {
      char v114 = 3;
    }
    char v408 = v114;
    char v412 = v113;
    unint64_t v398 = v112;
    char v403 = 2 * v112;
    uint64_t v115 = "";
    do
    {
      uint64_t v116 = 0;
      uint64_t v385 = v111;
      v425 = (int *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coherence_modes[2 * v111 + 1];
      uint64_t v117 = ".v4f32";
      do
      {
        uint64_t v118 = 0;
        uint64_t v389 = v116;
        v431 = (char *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::res_types[3 * v116 + 2];
        int v436 = 1;
        do
        {
          uint64_t v119 = 0;
          uint64_t v394 = v118;
          unsigned int v120 = (const char **)((char *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coord_types
                               + 16 * v118
                               + 8);
          unsigned int v121 = &off_1E65EB5E8;
          unint64_t v122 = "";
          do
          {
            if (!v119 || v119 == 3 || v398)
            {
              unint64_t v123 = *(char **)__sc;
              if (*(void *)__sc)
              {
                size_t v124 = strlen(*(const char **)__sc);
                *(void *)&long long v449 = 0;
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v123, &v123[v124]);
              }
              else
              {
                *(void *)&long long v449 = 0;
              }
              size_t v125 = strlen(v122);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v122, &v122[v125]);
              size_t v126 = strlen(*v120);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, *v120, &(*v120)[v126]);
              size_t v127 = strlen(v115);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v115, &v115[v127]);
              size_t v128 = strlen(v117);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v117, &v117[v128]);
              int v129 = *((_DWORD *)__sc + 2);
              int v130 = *((_DWORD *)v121 - 2);
              int v131 = *(_DWORD *)v431;
              int v132 = *v425;
              uint64_t v3 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(v448, v449);
              uint64_t v133 = *(void *)v3;
              *(_DWORD *)(v133 + 8) = v129;
              *(_DWORD *)(v133 + 12) = 1;
              *(_DWORD *)(v133 + 16) = v436;
              *(_DWORD *)(v133 + 2llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v131;
              *(_DWORD *)(v133 + 24) = v132;
              *(_DWORD *)(v133 + 28) = 0;
              *(_DWORD *)(v133 + 32) = v130;
              *(unsigned char *)(v133 + 36) = 0;
              *(unsigned char *)(v133 + 37) = v408;
              *(_DWORD *)(v133 + 38) = 0;
              *(unsigned char *)(v133 + 42) = 1;
              *(_DWORD *)(v133 + 46) = 0;
              *(_DWORD *)(v133 + 43) = 0;
              *(unsigned char *)(v133 + 5llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = v403;
              *(unsigned char *)(v133 + 53) = 0;
              *(_WORD *)(v133 + 51) = 0;
              *(unsigned char *)(v133 + 54) = v412;
              *(_WORD *)(v133 + 55) = 1;
              *(unsigned char *)(v133 + 57) = 1;
            }
            ++v119;
            uint64_t v134 = *v121;
            v121 += 2;
            unint64_t v122 = v134;
          }
          while (v119 != 3);
          int v436 = *((_DWORD *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coord_types
                 + 4 * v394
                 + 4);
          uint64_t v118 = 1;
        }
        while (v394 != 1);
        uint64_t v116 = v389 + 1;
        uint64_t v117 = AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::res_types[3 * v389 + 3];
      }
      while (v389 != 6);
      uint64_t v115 = (char *)AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coherence_modes[2 * v385 + 2];
      uint64_t v111 = 1;
    }
    while (v385 != 1);
    char v109 = 1;
    uint64_t v110 = 13;
  }
  while ((v381 & 1) == 0);
  for (uint64_t i = 14; i != 18; ++i)
  {
    unint64_t v136 = 0;
    int v137 = &(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_function_types)[2 * i];
    uint64_t v138 = &off_1E65EB538;
    uint64_t v139 = "1d";
    do
    {
      BOOL v141 = ((0x57555uLL >> i) & 1) == 0 && v136 == 4;
      if (v136 >= 2 && !v141)
      {
        uint64_t v142 = *v137;
        if (*v137)
        {
          size_t v143 = strlen(*v137);
          *(void *)&long long v449 = 0;
          llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v142, &v142[v143]);
        }
        else
        {
          *(void *)&long long v449 = 0;
        }
        size_t v144 = strlen(v139);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v139, &v139[v144]);
        int v145 = *((_DWORD *)v137 + 2);
        int v146 = *((_DWORD *)v138 - 2);
        uint64_t v3 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(v448, v449);
        uint64_t v147 = *(void *)v3;
        *(_DWORD *)(v147 + 8) = v145;
        *(_DWORD *)(v147 + 12) = v146;
        *(void *)(v147 + 16) = 0;
        *(_DWORD *)(v147 + 24) = 1;
        *(unsigned char *)(v147 + 36) = 0;
        *(void *)(v147 + 28) = 0;
        *(_WORD *)(v147 + 37) = 4;
        *(unsigned char *)(v147 + 39) = 1;
        *(_WORD *)(v147 + 4llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
        *(unsigned char *)(v147 + 42) = 2;
        *(_DWORD *)(v147 + 43) = 0;
        *(unsigned char *)(v147 + 47) = (0x4AuLL >> v136) & 1;
        *(_WORD *)(v147 + 52) = 0;
        *(_DWORD *)(v147 + 48) = 0;
        *(_DWORD *)(v147 + 54) = 3;
      }
      ++v136;
      uint64_t v148 = *v138;
      v138 += 2;
      uint64_t v139 = v148;
    }
    while (v136 != 7);
  }
  char v149 = 1;
  do
  {
    uint64_t v150 = 0;
    char v377 = v149;
    if (v149) {
      uint64_t v151 = &pixel_data_types;
    }
    else {
      uint64_t v151 = &packed_pixel_data_types;
    }
    v386 = *v151;
    __int16 v152 = "1d";
    v399 = v151;
    do
    {
      char v153 = 0;
      v437 = (std::string::value_type *)&(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v150 + 1];
      if ((unint64_t)(v150 - 5) >= 3) {
        char v154 = 6;
      }
      else {
        char v154 = 7;
      }
      if ((unint64_t)(v150 - 5) >= 3) {
        char v155 = 0;
      }
      else {
        char v155 = 6;
      }
      char v432 = v155;
      uint64_t v382 = v150;
      if ((0xB5uLL >> v150)) {
        char v156 = v154;
      }
      else {
        char v156 = v154 + 1;
      }
      if ((0xB5uLL >> v150)) {
        char v154 = 0;
      }
      char __sd = v154;
      char v416 = v156 + 1;
      char v426 = v156;
      char v409 = v156 + 3;
      char v413 = v156 + 2;
      char v157 = 1;
      uint64_t v158 = 1;
      long long v159 = ".i16";
      do
      {
        uint64_t v390 = v158;
        char v395 = v153;
        if (v386)
        {
          uint64_t v160 = 0;
          int v161 = 0;
          uint64_t v162 = v386;
          do
          {
            int v404 = v161;
            uint64_t v163 = 0;
            uint64_t v164 = &v151[2 * v160 + 1];
            int v165 = "";
            do
            {
              *(void *)&long long v449 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, "air.write_imageblock_slice_to_texture_", "");
              size_t v166 = strlen(v152);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v152, &v152[v166]);
              size_t v167 = strlen(v165);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v165, &v165[v167]);
              if (v157)
              {
                size_t v168 = strlen(v159);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v159, &v159[v168]);
              }
              size_t v169 = strlen(v162);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v162, &v162[v169]);
              int v170 = *(_DWORD *)v437;
              int v171 = *(_DWORD *)v164;
              v172 = (char *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::rounding_modes + v163;
              int v173 = *(_DWORD *)((char *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::rounding_modes
                               + v163
                               + 8);
              uint64_t v3 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(v448, v449);
              uint64_t v174 = *(void *)v3;
              *(_DWORD *)(v174 + 8) = 8;
              *(_DWORD *)(v174 + 12) = v170;
              *(void *)(v174 + 16) = 0xA00000001;
              *(_DWORD *)(v174 + 24) = 1;
              *(_DWORD *)(v174 + 28) = v171;
              *(_DWORD *)(v174 + 32) = v173;
              *(unsigned char *)(v174 + 36) = 0;
              *(unsigned char *)(v174 + 37) = v409;
              *(_DWORD *)(v174 + 38) = 0x10000;
              *(unsigned char *)(v174 + 42) = 5;
              *(unsigned char *)(v174 + 45) = 0;
              *(_WORD *)(v174 + 43) = 0;
              *(unsigned char *)(v174 + 46) = v426;
              *(unsigned char *)(v174 + 47) = __sd;
              *(unsigned char *)(v174 + 5llvm::SmallVectorTemplateBase<char,true>::push_back((void *)this + 557, 0) = 0;
              *(_WORD *)(v174 + 48) = 0;
              *(unsigned char *)(v174 + 51) = v432;
              *(_WORD *)(v174 + 52) = 0;
              *(unsigned char *)(v174 + 54) = v413;
              *(unsigned char *)(v174 + 55) = 0;
              *(unsigned char *)(v174 + 56) = v416;
              *(unsigned char *)(v174 + 57) = 0;
              v163 += 16;
              int v165 = (char *)*((void *)v172 + 2);
            }
            while (v163 != 48);
            uint64_t v160 = (v404 + 1);
            uint64_t v151 = v399;
            uint64_t v162 = v399[2 * v160];
            int v161 = v404 + 1;
          }
          while (v162);
        }
        char v157 = 0;
        long long v159 = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coord_types)[2 * v390];
        char v153 = 1;
        uint64_t v158 = 2;
      }
      while ((v395 & 1) == 0);
      uint64_t v150 = v382 + 1;
      __int16 v152 = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v382 + 2];
    }
    while (v382 != 6);
    char v149 = 0;
  }
  while ((v377 & 1) != 0);
  AGCLLVMUserObject::getDimensionFunctionMap(v3);
  uint64_t v175 = 0;
  while (2)
  {
    uint64_t v176 = 0;
    uint64_t v177 = &(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::dim_funcs)[2 * v175];
    int v178 = *((_DWORD *)v177 + 2);
    uint64_t v179 = "1d";
    while (2)
    {
      if (v175 != 4 || v176 == 4)
      {
        unint64_t v180 = (0xB5uLL >> v176) & 1;
        if ((v175 - 5) > 1 || !v180)
        {
          BOOL v181 = v180 == 0;
          if (v180) {
            uint64_t v182 = "2d_ms";
          }
          else {
            uint64_t v182 = "2d_ms_array";
          }
          uint64_t v183 = 5;
          if (v181) {
            uint64_t v183 = 11;
          }
          v438 = (std::string::value_type *)&v182[v183];
          char v184 = 1;
          do
          {
            if (v184) {
              int v185 = -11;
            }
            else {
              int v185 = -9;
            }
            if ((v185 + v175) > 0xFFFFFFFD) {
              goto LABEL_250;
            }
            uint64_t v186 = *v177;
            if (*v177)
            {
              size_t v187 = strlen(*v177);
              *(void *)&long long v449 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v186, &v186[v187]);
              if ((v184 & 1) == 0) {
                goto LABEL_248;
              }
            }
            else
            {
              *(void *)&long long v449 = 0;
              if ((v184 & 1) == 0)
              {
LABEL_248:
                unsigned __int8 v189 = (char *)v182;
                uint64_t v188 = v438;
                goto LABEL_249;
              }
            }
            uint64_t v188 = (std::string::value_type *)&v179[strlen(v179)];
            unsigned __int8 v189 = (char *)v179;
LABEL_249:
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v189, v188);
            uint64_t v190 = *llvm::StringMap<AGCLLVMUserObject::DimensionFunction,llvm::MallocAllocator>::try_emplace<>(v448, v449);
            *(_DWORD *)(v190 + 12) = v178;
            *(unsigned char *)(v190 + 16) = 0;
LABEL_250:
            char v191 = ((v176 & 0xFFFFFFFE) == 2) & v184;
            char v184 = 0;
          }
          while ((v191 & 1) != 0);
        }
      }
      ++v176;
      uint64_t v179 = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v176];
      if (v176 != 7) {
        continue;
      }
      break;
    }
    if (++v175 != 11) {
      continue;
    }
    break;
  }
  *(void *)&long long v449 = 0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, "air.get_width_texture_buffer_1d", "");
  int v192 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::DimensionFunction,llvm::MallocAllocator>::try_emplace<>(v448, v449);
  uint64_t v193 = *(void *)v192;
  *(_DWORD *)(v193 + 12) = 0;
  *(unsigned char *)(v193 + 16) = 1;
  AGCLLVMUserObject::getTextureFenceFunctionSet(v192);
  uint64_t v194 = 0;
  std::string v195 = "1d";
  do
  {
    if ((0xB5uLL >> v194)) {
      uint64_t v196 = "2d_ms";
    }
    else {
      uint64_t v196 = "2d_ms_array";
    }
    uint64_t v197 = 5;
    if (((0xB5uLL >> v194) & 1) == 0) {
      uint64_t v197 = 11;
    }
    uint64_t v198 = &v196[v197];
    char v199 = 1;
    do
    {
      *(void *)&long long v449 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, "air.fence_texture_", "");
      if (v199)
      {
        v200 = (char *)&v195[strlen(v195)];
        __int16 v201 = (char *)v195;
      }
      else
      {
        __int16 v201 = (char *)v196;
        v200 = (char *)v198;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v201, v200);
      llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureFenceFunctionSet(void)::texturefence_function_set, v448, v449);
      char v202 = ((v194 & 0xFFFFFFFE) == 2) & v199;
      char v199 = 0;
    }
    while ((v202 & 1) != 0);
    ++v194;
    std::string v195 = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v194];
  }
  while (v194 != 7);
  *(void *)&long long v449 = 0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, "air.fence_texture_", "");
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, "buffer_1d", "");
  __int16 v203 = (AGCLLVMUserObject *)llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureFenceFunctionSet(void)::texturefence_function_set, v448, v449);
  AGCLLVMUserObject::getIsNullTextureFunctionSet(v203);
  for (uint64_t j = 0; j != 16; ++j)
  {
    *(void *)&long long v449 = 0;
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, "air.is_null_", "");
    size_t v205 = strlen(off_1E65EBA28[j]);
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, off_1E65EBA28[j], &off_1E65EBA28[j][v205]);
    uint64_t v206 = (AGCLLVMUserObject *)llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getIsNullTextureFunctionSet(void)::is_null_texture_function_set, v448, v449);
  }
  AGCLLVMUserObject::getGetNullTextureFunctionSet(v206);
  for (uint64_t k = 0; k != 16; ++k)
  {
    *(void *)&long long v449 = 0;
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, "air.get_null_", "");
    size_t v208 = strlen(off_1E65EBA28[k]);
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, off_1E65EBA28[k], &off_1E65EBA28[k][v208]);
    unsigned int v209 = (AGCLLVMUserObject *)llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getGetNullTextureFunctionSet(void)::get_null_texture_function_set, v448, v449);
  }
  AGCLLVMUserObject::getUniqueIDFunctionSet(v209);
  for (uint64_t m = 0; m != 16; ++m)
  {
    *(void *)&long long v449 = 0;
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, "air.get_unique_identifier_", "");
    size_t v211 = strlen(off_1E65EBA28[m]);
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, off_1E65EBA28[m], &off_1E65EBA28[m][v211]);
    uint64_t v212 = (AGCLLVMUserObject *)llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getUniqueIDFunctionSet(void)::uniqueID_function_set, v448, v449);
  }
  AGCLLVMUserObject::getTextureAtomicFunctionSet(v212);
  uint64_t v213 = 0;
  do
  {
    std::string::basic_string[abi:nn180100]<0>(&v444, "air.atomic_load_explicit_");
    uint64_t v427 = v213;
    v439 = off_1E65EBA28[v213];
    uint64_t v214 = std::string::append(&v444, v439);
    std::string __p = *v214;
    v214->__r_.__value_.__r.__words[0] = 0;
    v214->__r_.__value_.__l.__size_ = 0;
    v214->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v444.__r_.__value_.__l.__data_);
    }
    for (uint64_t n = 0; n != 4; ++n)
    {
      __int16 v216 = off_1E65EBAA8[n];
      int v217 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      size_t v219 = strlen(off_1E65EBAA8[n]);
      std::string::basic_string[abi:nn180100]((uint64_t)&v444, size + v219);
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v220 = &v444;
      }
      else {
        uint64_t v220 = (std::string *)v444.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if (v217 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v220, p_p, size);
      }
      uint64_t v222 = (char *)v220 + size;
      if (v219) {
        memmove(v222, v216, v219);
      }
      v222[v219] = 0;
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v223 = &v444;
      }
      else {
        int v223 = (std::string *)v444.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v224 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v224 = v444.__r_.__value_.__l.__size_;
      }
      *(void *)&long long v449 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v223, (unsigned char *)v223 + v224);
      if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v444.__r_.__value_.__l.__data_);
      }
      llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, v448, v449);
    }
    std::string::basic_string[abi:nn180100]<0>(&v444, "air.atomic_store_explicit_");
    uint64_t v225 = std::string::append(&v444, v439);
    std::string::size_type v226 = v225->__r_.__value_.__r.__words[0];
    v446.__r_.__value_.__r.__words[0] = v225->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v446.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v225->__r_.__value_.__r.__words[1] + 7);
    char v227 = HIBYTE(v225->__r_.__value_.__r.__words[2]);
    v225->__r_.__value_.__l.__size_ = 0;
    v225->__r_.__value_.__r.__words[2] = 0;
    v225->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v226;
    __p.__r_.__value_.__l.__size_ = v446.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v446.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v227;
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v444.__r_.__value_.__l.__data_);
    }
    for (iuint64_t i = 0; ii != 4; ++ii)
    {
      int v229 = off_1E65EBAA8[ii];
      int v230 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v231 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v231 = __p.__r_.__value_.__l.__size_;
      }
      size_t v232 = strlen(off_1E65EBAA8[ii]);
      std::string::basic_string[abi:nn180100]((uint64_t)&v444, v231 + v232);
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v233 = &v444;
      }
      else {
        uint64_t v233 = (std::string *)v444.__r_.__value_.__r.__words[0];
      }
      if (v231)
      {
        if (v230 >= 0) {
          int v234 = &__p;
        }
        else {
          int v234 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v233, v234, v231);
      }
      long long v235 = (char *)v233 + v231;
      if (v232) {
        memmove(v235, v229, v232);
      }
      v235[v232] = 0;
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v236 = &v444;
      }
      else {
        uint64_t v236 = (std::string *)v444.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v237 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v237 = v444.__r_.__value_.__l.__size_;
      }
      *(void *)&long long v449 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v236, (unsigned char *)v236 + v237);
      if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v444.__r_.__value_.__l.__data_);
      }
      llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, v448, v449);
    }
    std::string::basic_string[abi:nn180100]<0>(&v444, "air.atomic_exchange_explicit_");
    v238 = std::string::append(&v444, v439);
    std::string::size_type v239 = v238->__r_.__value_.__r.__words[0];
    v446.__r_.__value_.__r.__words[0] = v238->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v446.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v238->__r_.__value_.__r.__words[1] + 7);
    char v240 = HIBYTE(v238->__r_.__value_.__r.__words[2]);
    v238->__r_.__value_.__l.__size_ = 0;
    v238->__r_.__value_.__r.__words[2] = 0;
    v238->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v239;
    __p.__r_.__value_.__l.__size_ = v446.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v446.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v240;
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v444.__r_.__value_.__l.__data_);
    }
    for (juint64_t j = 0; jj != 4; ++jj)
    {
      int v242 = off_1E65EBAA8[jj];
      int v243 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v244 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v244 = __p.__r_.__value_.__l.__size_;
      }
      size_t v245 = strlen(off_1E65EBAA8[jj]);
      std::string::basic_string[abi:nn180100]((uint64_t)&v444, v244 + v245);
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v246 = &v444;
      }
      else {
        long long v246 = (std::string *)v444.__r_.__value_.__r.__words[0];
      }
      if (v244)
      {
        if (v243 >= 0) {
          uint64_t v247 = &__p;
        }
        else {
          uint64_t v247 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v246, v247, v244);
      }
      int v248 = (char *)v246 + v244;
      if (v245) {
        memmove(v248, v242, v245);
      }
      v248[v245] = 0;
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v249 = &v444;
      }
      else {
        long long v249 = (std::string *)v444.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v250 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v250 = v444.__r_.__value_.__l.__size_;
      }
      *(void *)&long long v449 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v249, (unsigned char *)v249 + v250);
      if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v444.__r_.__value_.__l.__data_);
      }
      llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, v448, v449);
    }
    std::string::basic_string[abi:nn180100]<0>(&v444, "air.atomic_compare_exchange_weak_explicit_");
    int v251 = std::string::append(&v444, v439);
    std::string::size_type v252 = v251->__r_.__value_.__r.__words[0];
    v446.__r_.__value_.__r.__words[0] = v251->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v446.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v251->__r_.__value_.__r.__words[1] + 7);
    char v253 = HIBYTE(v251->__r_.__value_.__r.__words[2]);
    v251->__r_.__value_.__l.__size_ = 0;
    v251->__r_.__value_.__r.__words[2] = 0;
    v251->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v252;
    __p.__r_.__value_.__l.__size_ = v446.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v446.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v253;
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v444.__r_.__value_.__l.__data_);
    }
    for (kuint64_t k = 0; kk != 4; ++kk)
    {
      uint64_t v255 = off_1E65EBAA8[kk];
      int v256 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v257 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v257 = __p.__r_.__value_.__l.__size_;
      }
      size_t v258 = strlen(off_1E65EBAA8[kk]);
      std::string::basic_string[abi:nn180100]((uint64_t)&v444, v257 + v258);
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v259 = &v444;
      }
      else {
        int v259 = (std::string *)v444.__r_.__value_.__r.__words[0];
      }
      if (v257)
      {
        if (v256 >= 0) {
          long long v260 = &__p;
        }
        else {
          long long v260 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v259, v260, v257);
      }
      uint64_t v261 = (char *)v259 + v257;
      if (v258) {
        memmove(v261, v255, v258);
      }
      v261[v258] = 0;
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v262 = &v444;
      }
      else {
        int v262 = (std::string *)v444.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v263 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v263 = v444.__r_.__value_.__l.__size_;
      }
      *(void *)&long long v449 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v262, (unsigned char *)v262 + v263);
      if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v444.__r_.__value_.__l.__data_);
      }
      llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, v448, v449);
    }
    for (muint64_t m = 0; mm != 7; ++mm)
    {
      std::string::basic_string[abi:nn180100]<0>(&v443, "air.atomic_");
      int v265 = std::string::append(&v443, off_1E65EBAD8[mm]);
      std::string::size_type v266 = v265->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v446.__r_.__value_.__l.__data_ = *(_OWORD *)&v265->__r_.__value_.__l.__data_;
      v446.__r_.__value_.__r.__words[2] = v266;
      v265->__r_.__value_.__l.__size_ = 0;
      v265->__r_.__value_.__r.__words[2] = 0;
      v265->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:nn180100]<0>(&v440, "_explicit_");
      if ((v442 & 0x80u) == 0) {
        uint64_t v267 = (const std::string::value_type *)&v440;
      }
      else {
        uint64_t v267 = (const std::string::value_type *)v440;
      }
      if ((v442 & 0x80u) == 0) {
        std::string::size_type v268 = v442;
      }
      else {
        std::string::size_type v268 = v441;
      }
      long long v269 = std::string::append(&v446, v267, v268);
      std::string::size_type v270 = v269->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v444.__r_.__value_.__l.__data_ = *(_OWORD *)&v269->__r_.__value_.__l.__data_;
      v444.__r_.__value_.__r.__words[2] = v270;
      v269->__r_.__value_.__l.__size_ = 0;
      v269->__r_.__value_.__r.__words[2] = 0;
      v269->__r_.__value_.__r.__words[0] = 0;
      uint64_t v271 = std::string::append(&v444, v439);
      std::string::size_type v272 = v271->__r_.__value_.__r.__words[0];
      v447[0] = v271->__r_.__value_.__l.__size_;
      *(void *)((char *)v447 + 7) = *(std::string::size_type *)((char *)&v271->__r_.__value_.__r.__words[1] + 7);
      char v273 = HIBYTE(v271->__r_.__value_.__r.__words[2]);
      v271->__r_.__value_.__l.__size_ = 0;
      v271->__r_.__value_.__r.__words[2] = 0;
      v271->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = v272;
      __p.__r_.__value_.__l.__size_ = v447[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v447 + 7);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v273;
      if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v444.__r_.__value_.__l.__data_);
      }
      if ((char)v442 < 0) {
        operator delete(v440);
      }
      if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v446.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v443.__r_.__value_.__l.__data_);
      }
      for (nuint64_t n = 0; nn != 4; ++nn)
      {
        uint64_t v275 = off_1E65EBAA8[nn];
        int v276 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v277 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v277 = __p.__r_.__value_.__l.__size_;
        }
        size_t v278 = strlen(off_1E65EBAA8[nn]);
        std::string::basic_string[abi:nn180100]((uint64_t)&v444, v277 + v278);
        if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v279 = &v444;
        }
        else {
          int v279 = (std::string *)v444.__r_.__value_.__r.__words[0];
        }
        if (v277)
        {
          if (v276 >= 0) {
            long long v280 = &__p;
          }
          else {
            long long v280 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          memmove(v279, v280, v277);
        }
        uint64_t v281 = (char *)v279 + v277;
        if (v278) {
          memmove(v281, v275, v278);
        }
        v281[v278] = 0;
        if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v282 = &v444;
        }
        else {
          int v282 = (std::string *)v444.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v283 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
        if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v283 = v444.__r_.__value_.__l.__size_;
        }
        *(void *)&long long v449 = 0;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v282, (unsigned char *)v282 + v283);
        if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v444.__r_.__value_.__l.__data_);
        }
        llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, v448, v449);
      }
    }
    char v284 = 0;
    uint64_t v285 = 0;
    do
    {
      char v286 = v284;
      std::string::basic_string[abi:nn180100]<0>(&v443, "air.atomic_");
      uint64_t v287 = std::string::append(&v443, off_1E65EBB10[v285]);
      std::string::size_type v288 = v287->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v446.__r_.__value_.__l.__data_ = *(_OWORD *)&v287->__r_.__value_.__l.__data_;
      v446.__r_.__value_.__r.__words[2] = v288;
      v287->__r_.__value_.__l.__size_ = 0;
      v287->__r_.__value_.__r.__words[2] = 0;
      v287->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:nn180100]<0>(&v440, "_explicit_");
      if ((v442 & 0x80u) == 0) {
        v289 = (const std::string::value_type *)&v440;
      }
      else {
        v289 = (const std::string::value_type *)v440;
      }
      if ((v442 & 0x80u) == 0) {
        std::string::size_type v290 = v442;
      }
      else {
        std::string::size_type v290 = v441;
      }
      long long v291 = std::string::append(&v446, v289, v290);
      std::string::size_type v292 = v291->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v444.__r_.__value_.__l.__data_ = *(_OWORD *)&v291->__r_.__value_.__l.__data_;
      v444.__r_.__value_.__r.__words[2] = v292;
      v291->__r_.__value_.__l.__size_ = 0;
      v291->__r_.__value_.__r.__words[2] = 0;
      v291->__r_.__value_.__r.__words[0] = 0;
      long long v293 = std::string::append(&v444, v439);
      std::string::size_type v294 = v293->__r_.__value_.__r.__words[0];
      v447[0] = v293->__r_.__value_.__l.__size_;
      *(void *)((char *)v447 + 7) = *(std::string::size_type *)((char *)&v293->__r_.__value_.__r.__words[1] + 7);
      char v295 = HIBYTE(v293->__r_.__value_.__r.__words[2]);
      v293->__r_.__value_.__l.__size_ = 0;
      v293->__r_.__value_.__r.__words[2] = 0;
      v293->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = v294;
      __p.__r_.__value_.__l.__size_ = v447[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v447 + 7);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v295;
      if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v444.__r_.__value_.__l.__data_);
      }
      if ((char)v442 < 0) {
        operator delete(v440);
      }
      if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v446.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v443.__r_.__value_.__l.__data_);
      }
      uint64_t v296 = 0;
      char v297 = 1;
      do
      {
        v298 = off_1E65EBAC8[v296];
        char v299 = v297;
        int v300 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v301 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v301 = __p.__r_.__value_.__l.__size_;
        }
        size_t v302 = strlen(v298);
        std::string::basic_string[abi:nn180100]((uint64_t)&v444, v301 + v302);
        if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v303 = &v444;
        }
        else {
          v303 = (std::string *)v444.__r_.__value_.__r.__words[0];
        }
        if (v301)
        {
          if (v300 >= 0) {
            v304 = &__p;
          }
          else {
            v304 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          memmove(v303, v304, v301);
        }
        v305 = (char *)v303 + v301;
        if (v302) {
          memmove(v305, v298, v302);
        }
        v305[v302] = 0;
        if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v306 = &v444;
        }
        else {
          uint64_t v306 = (std::string *)v444.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v307 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
        if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v307 = v444.__r_.__value_.__l.__size_;
        }
        *(void *)&long long v449 = 0;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, v306, (unsigned char *)v306 + v307);
        if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v444.__r_.__value_.__l.__data_);
        }
        llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, v448, v449);
        char v297 = 0;
        uint64_t v296 = 1;
      }
      while ((v299 & 1) != 0);
      char v284 = 1;
      uint64_t v285 = 1;
    }
    while ((v286 & 1) == 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v213 = v427 + 1;
  }
  while (v427 != 7);
  *(void *)&long long v449 = 0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, "air.get_unique_identifier_", "");
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v448, "sampler", "");
  llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getUniqueIDFunctionSet(void)::uniqueID_function_set, v448, v449);
  uint64_t v3 = (AGCLLVMUserObject *)v448;
  if (v448 != v450) {
    free(v448);
  }
LABEL_459:
  AGCLLVMUserObject::getBuiltinArgMap(v3);
  if (!dword_1EBD0EA64)
  {
    uint64_t v309 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.vertex_id", 0xDuLL);
    *(void *)(v309 + 8) = "air.get_vertex_id";
    *(void *)(v309 + 16) = 17;
    *(unsigned char *)(v309 + 24) = 1;
    uint64_t v310 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.instance_id", 0xFuLL);
    *(void *)(v310 + 8) = "air.get_instance_id";
    *(void *)(v310 + 16) = 19;
    *(unsigned char *)(v310 + 24) = 1;
    uint64_t v311 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.base_vertex", 0xFuLL);
    *(void *)(v311 + 8) = "air.get_base_vertex";
    *(void *)(v311 + 16) = 19;
    *(unsigned char *)(v311 + 24) = 1;
    uint64_t v312 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.base_instance", 0x11uLL);
    *(void *)(v312 + 8) = "air.get_base_instance";
    *(void *)(v312 + 16) = 21;
    *(unsigned char *)(v312 + 24) = 1;
    uint64_t v313 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.thread_position_in_grid", 0x1BuLL);
    *(void *)(v313 + 8) = "air.get_global_id";
    *(void *)(v313 + 16) = 17;
    *(unsigned char *)(v313 + 24) = 0;
    uint64_t v314 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.thread_position_in_threadgroup", 0x22uLL);
    *(void *)(v314 + 8) = "air.get_local_id";
    *(void *)(v314 + 16) = 16;
    *(unsigned char *)(v314 + 24) = 0;
    uint64_t v315 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.thread_index_in_threadgroup", 0x1FuLL);
    *(void *)(v315 + 8) = "air.get_local_linear_id";
    *(void *)(v315 + 16) = 23;
    *(unsigned char *)(v315 + 24) = 1;
    uint64_t v316 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.threadgroup_position_in_grid", 0x20uLL);
    *(void *)(v316 + 8) = "air.get_group_id";
    *(void *)(v316 + 16) = 16;
    *(unsigned char *)(v316 + 24) = 0;
    uint64_t v317 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.threads_per_grid", 0x14uLL);
    *(void *)(v317 + 8) = "air.get_global_size";
    *(void *)(v317 + 16) = 19;
    *(unsigned char *)(v317 + 24) = 0;
    uint64_t v318 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.threads_per_threadgroup", 0x1BuLL);
    *(void *)(v318 + 8) = "air.get_local_size";
    *(void *)(v318 + 16) = 18;
    *(unsigned char *)(v318 + 24) = 0;
    uint64_t v319 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.threadgroups_per_grid", 0x19uLL);
    *(void *)(v319 + 8) = "air.get_num_groups";
    *(void *)(v319 + 16) = 18;
    *(unsigned char *)(v319 + 24) = 0;
    uint64_t v320 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.thread_execution_width", 0x1AuLL);
    *(void *)(v320 + 8) = "air.get_thread_execution_width";
    *(void *)(v320 + 16) = 30;
    *(unsigned char *)(v320 + 24) = 1;
    uint64_t v321 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.dispatch_threads_per_threadgroup", 0x24uLL);
    *(void *)(v321 + 8) = "air.get_dispatch_local_size";
    *(void *)(v321 + 16) = 27;
    *(unsigned char *)(v321 + 24) = 0;
    uint64_t v322 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.thread_index_in_quadgroup", 0x1DuLL);
    *(void *)(v322 + 8) = "air.get_quad_element";
    *(void *)(v322 + 16) = 20;
    *(unsigned char *)(v322 + 24) = 1;
    uint64_t v323 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.quadgroup_index_in_threadgroup", 0x22uLL);
    *(void *)(v323 + 8) = "air.get_quad_group";
    *(void *)(v323 + 16) = 18;
    *(unsigned char *)(v323 + 24) = 1;
    uint64_t v324 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.quadgroups_per_threadgroup", 0x1EuLL);
    *(void *)(v324 + 8) = "air.get_quadgroups_per_threadgroup";
    *(void *)(v324 + 16) = 34;
    *(unsigned char *)(v324 + 24) = 1;
    uint64_t v325 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.dispatch_quadgroups_per_threadgroup", 0x27uLL);
    *(void *)(v325 + 8) = "air.get_dispatch_quadgroups_per_threadgroup";
    *(void *)(v325 + 16) = 43;
    *(unsigned char *)(v325 + 24) = 1;
    uint64_t v326 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.threads_per_simdgroup", 0x19uLL);
    *(void *)(v326 + 8) = "air.get_threads_per_simdgroup";
    *(void *)(v326 + 16) = 29;
    *(unsigned char *)(v326 + 24) = 1;
    uint64_t v327 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.thread_index_in_simdgroup", 0x1DuLL);
    *(void *)(v327 + 8) = "air.get_thread_index_in_simdgroup";
    *(void *)(v327 + 16) = 33;
    *(unsigned char *)(v327 + 24) = 1;
    uint64_t v328 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.simdgroup_index_in_threadgroup", 0x22uLL);
    *(void *)(v328 + 8) = "air.get_simdgroup_index_in_threadgroup";
    *(void *)(v328 + 16) = 38;
    *(unsigned char *)(v328 + 24) = 1;
    uint64_t v329 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.simdgroups_per_threadgroup", 0x1EuLL);
    *(void *)(v329 + 8) = "air.get_simdgroups_per_threadgroup";
    *(void *)(v329 + 16) = 34;
    *(unsigned char *)(v329 + 24) = 1;
    uint64_t v330 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.dispatch_simdgroups_per_threadgroup", 0x27uLL);
    *(void *)(v330 + 8) = "air.get_dispatch_simdgroups_per_threadgroup";
    *(void *)(v330 + 16) = 43;
    *(unsigned char *)(v330 + 24) = 1;
    uint64_t v331 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.pixel_position_in_tile", 0x1AuLL);
    *(void *)(v331 + 8) = "air.get_local_id";
    *(void *)(v331 + 16) = 16;
    *(unsigned char *)(v331 + 24) = 0;
    uint64_t v332 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.pixels_per_tile", 0x13uLL);
    *(void *)(v332 + 8) = "air.get_local_size";
    *(void *)(v332 + 16) = 18;
    *(unsigned char *)(v332 + 24) = 0;
    uint64_t v308 = (llvm::PassRegistry *)llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.tile_index", 0xEuLL);
    uint64_t v333 = *(void *)v308;
    *(void *)(v333 + 8) = "air.get_local_linear_id";
    *(void *)(v333 + 16) = 23;
    *(unsigned char *)(v333 + 24) = 1;
  }
  PassRegistry = (llvm *)llvm::PassRegistry::getPassRegistry(v308);
  llvm::initializeCore(PassRegistry, v335);
  llvm::initializeScalarOpts(PassRegistry, v336);
  llvm::initializeVectorization(PassRegistry, v337);
  llvm::initializeIPO(PassRegistry, v338);
  llvm::initializeAnalysis(PassRegistry, v339);
  llvm::initializeTransformUtils(PassRegistry, v340);
  llvm::initializeInstCombine(PassRegistry, v341);
  return MEMORY[0x1F417B280](PassRegistry);
}