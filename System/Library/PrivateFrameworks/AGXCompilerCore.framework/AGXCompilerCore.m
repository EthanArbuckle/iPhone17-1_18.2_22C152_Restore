void _agcFieldString<unsigned long long>(std::string *a1, const void **a2, unint64_t __val)
{
  std::string v5;

  std::to_string(&v5, __val);
  _agcFieldString<std::string>(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

uint64_t parseMDSampler(uint64_t a1, _DWORD *a2, _DWORD *a3, BOOL *a4)
{
  String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8));
  if (v9 != 11) {
    return 0;
  }
  if (*String != 0x706D61732E726961 || *(void *)((char *)String + 3) != 0x72656C706D61732ELL) {
    return 0;
  }
  *a4 = 0;
  *a3 = 1;
  unsigned int v12 = *(_DWORD *)(a1 + 8);
  unsigned int v21 = 2;
  if (v12 >= 3)
  {
    do
    {
      if (parseMDLocationIndex(a1, &v21, a2, a3))
      {
        unsigned int v13 = v21;
      }
      else
      {
        char v14 = parseMDInt("air.binding", a1, &v21, a2);
        uint64_t v15 = v21;
        unsigned int v13 = v21;
        if ((v14 & 1) == 0)
        {
          unsigned int v13 = ++v21;
          if (isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v15), "air.arg_type_name"))
          {
            unsigned int v16 = v15 + 2;
            unsigned int v21 = v16;
            uint64_t v17 = llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v13));
            BOOL v19 = v18 >= 5 && *(_DWORD *)v17 == 1634890337 && *(unsigned char *)(v17 + 4) == 121;
            *a4 = v19;
            unsigned int v13 = v16;
          }
        }
      }
    }
    while (v13 < v12);
  }
  return 1;
}

uint64_t *AGCLLVMUserShader::AGCLLVMUserShader(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned char *a4, uint64_t a5, char a6, char a7)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a2[1];
  *a1 = v10;
  *(uint64_t *)((char *)a1 + *(void *)(v10 - 24)) = a2[2];
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 32) = a2[3];
  *((_WORD *)a1 + 6) = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((unsigned char *)a1 + 14) = a6;
  *((unsigned char *)a1 + 15) = a7;
  *((_DWORD *)a1 + 4) = 0;
  *((unsigned char *)a1 + 20) = 0;
  a1[3] = a5;
  *((_DWORD *)a1 + 8) = 16843009;
  *((_WORD *)a1 + 18) = 257;
  *((_DWORD *)a1 + 10) = 0;
  *((_WORD *)a1 + 22) = 0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  a1[10] = 0;
  a1[11] = (uint64_t)(a1 + 13);
  v137 = a1 + 11;
  a1[12] = 0x800000000;
  a1[21] = 0;
  a1[22] = 0;
  __int16 v145 = 260;
  *(void *)&long long __dst = a3 + 216;
  MEMORY[0x1CB79FA50](a1 + 23, &__dst);
  uint64_t v11 = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 464) + 32);
  if (*(void *)(v11 + 16)) {
    strlen(*(const char **)(v11 + 16));
  }
  *((_WORD *)a1 + 120) = 0;
  *((_WORD *)a1 + 126) = 0;
  a1[33] = (uint64_t)(a1 + 36);
  *((_OWORD *)a1 + 17) = xmmword_1CADD6430;
  a1[37] = (uint64_t)(a1 + 39);
  a1[38] = 0x1000000000;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  a1[58] = (uint64_t)(a1 + 60);
  a1[59] = 0x800000000;
  a1[76] = 0;
  a1[77] = (uint64_t)(a1 + 79);
  a1[78] = 0x800000000;
  llvm::DataLayout::reset();
  a1[83] = (uint64_t)(a1 + 85);
  a1[84] = 0x400000000;
  *((_DWORD *)a1 + 178) = 128;
  a1[87] = MEMORY[0x1CB79F270](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty((uint64_t)(a1 + 87));
  *((unsigned char *)a1 + 720) = 0;
  *((unsigned char *)a1 + 744) = 0;
  *((_DWORD *)a1 + 194) = 128;
  a1[95] = MEMORY[0x1CB79F270](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::initEmpty((uint64_t)(a1 + 95));
  *((unsigned char *)a1 + 784) = 0;
  *((unsigned char *)a1 + 808) = 0;
  a1[105] = 0;
  a1[104] = 0;
  a1[103] = (uint64_t)(a1 + 104);
  a1[108] = 0;
  a1[107] = 0;
  a1[106] = (uint64_t)(a1 + 107);
  a1[111] = 0;
  a1[110] = 0;
  a1[109] = (uint64_t)(a1 + 110);
  a1[121] = 0;
  a1[120] = 0;
  *((_OWORD *)a1 + 56) = 0u;
  *((_OWORD *)a1 + 57) = 0u;
  *((_OWORD *)a1 + 58) = 0u;
  a1[118] = 0;
  a1[119] = (uint64_t)(a1 + 120);
  a1[123] = 0;
  a1[124] = 0;
  a1[122] = (uint64_t)(a1 + 123);
  a1[125] = (uint64_t)(a1 + 129);
  a1[126] = (uint64_t)(a1 + 129);
  a1[127] = 8;
  *((_DWORD *)a1 + 256) = 0;
  a1[137] = (uint64_t)(a1 + 141);
  a1[138] = (uint64_t)(a1 + 141);
  a1[139] = 8;
  *((_DWORD *)a1 + 280) = 0;
  bzero(a1 + 149, 0x280uLL);
  unsigned int v12 = a1 + 229;
  uint64_t v13 = 149;
  do
  {
    char v14 = &a1[v13];
    *char v14 = 4;
    *(_OWORD *)(v14 + 1) = 0uLL;
    *(_OWORD *)(v14 + 3) = 0uLL;
    *(_OWORD *)(v14 + 5) = 0uLL;
    v14[7] = -1;
    v13 += 8;
  }
  while (v14 + 8 != v12);
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 259) = 0u;
  *(_OWORD *)(a1 + 253) = 0u;
  *(_OWORD *)(a1 + 255) = 0u;
  *(_OWORD *)(a1 + 249) = 0u;
  *(_OWORD *)(a1 + 251) = 0u;
  *(_OWORD *)(a1 + 245) = 0u;
  *(_OWORD *)(a1 + 247) = 0u;
  *(_OWORD *)(a1 + 241) = 0u;
  *(_OWORD *)(a1 + 243) = 0u;
  *(_OWORD *)(a1 + 237) = 0u;
  *(_OWORD *)(a1 + 239) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 235) = 0u;
  uint64_t v15 = a1 + 261;
  uint64_t v16 = 229;
  *(_OWORD *)unsigned int v12 = 0u;
  *(_OWORD *)(a1 + 231) = 0u;
  do
  {
    uint64_t v17 = &a1[v16];
    *uint64_t v17 = 4;
    *(_OWORD *)(v17 + 1) = 0uLL;
    *(_OWORD *)(v17 + 3) = 0uLL;
    *(_OWORD *)(v17 + 5) = 0uLL;
    v17[7] = -1;
    v16 += 8;
  }
  while (v17 + 8 != v15);
  *(_OWORD *)(a1 + 289) = 0u;
  *(_OWORD *)(a1 + 291) = 0u;
  *(_OWORD *)(a1 + 285) = 0u;
  *(_OWORD *)(a1 + 287) = 0u;
  *(_OWORD *)(a1 + 281) = 0u;
  *(_OWORD *)(a1 + 283) = 0u;
  *(_OWORD *)(a1 + 277) = 0u;
  *(_OWORD *)(a1 + 279) = 0u;
  *(_OWORD *)(a1 + 273) = 0u;
  *(_OWORD *)(a1 + 275) = 0u;
  *(_OWORD *)(a1 + 269) = 0u;
  *(_OWORD *)(a1 + 271) = 0u;
  *(_OWORD *)(a1 + 265) = 0u;
  *(_OWORD *)(a1 + 267) = 0u;
  uint64_t v18 = 261;
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(a1 + 263) = 0u;
  do
  {
    BOOL v19 = &a1[v18];
    *BOOL v19 = 4;
    *(_OWORD *)(v19 + 1) = 0uLL;
    *(_OWORD *)(v19 + 3) = 0uLL;
    *(_OWORD *)(v19 + 5) = 0uLL;
    v19[7] = -1;
    v18 += 8;
  }
  while (v19 + 8 != a1 + 293);
  *((unsigned char *)a1 + 2344) = 0;
  *((_DWORD *)a1 + 587) = 0;
  uint64_t v20 = 295;
  a1[294] = 0;
  do
  {
    unsigned int v21 = &a1[v20];
    v21[1] = 0;
    v21[2] = 0;
    *unsigned int v21 = 4;
    uint64_t v22 = (uint64_t)&a1[v20 + 3];
    v20 += 3;
  }
  while ((uint64_t *)v22 != a1 + 304);
  a1[304] = 4;
  *(_OWORD *)(a1 + 305) = 0u;
  a1[307] = 4;
  *((_OWORD *)a1 + 154) = 0u;
  a1[310] = 4;
  *(_OWORD *)(a1 + 311) = 0u;
  a1[313] = 4;
  *((_OWORD *)a1 + 157) = 0u;
  a1[316] = 4;
  *(_OWORD *)(a1 + 317) = 0u;
  a1[319] = 4;
  *((_OWORD *)a1 + 160) = 0u;
  a1[322] = 4;
  *(_OWORD *)(a1 + 323) = 0u;
  a1[325] = 4;
  *((_OWORD *)a1 + 163) = 0u;
  a1[329] = 4;
  *((_OWORD *)a1 + 165) = 0u;
  a1[333] = 4;
  *((_OWORD *)a1 + 167) = 0u;
  a1[337] = 4;
  *((_OWORD *)a1 + 169) = 0u;
  a1[340] = 4;
  *(_OWORD *)(a1 + 341) = 0u;
  a1[343] = 4;
  *((_OWORD *)a1 + 172) = 0u;
  a1[346] = 4;
  *(_OWORD *)(a1 + 347) = 0u;
  a1[349] = 4;
  *((_OWORD *)a1 + 175) = 0u;
  a1[352] = 4;
  a1[355] = 0;
  *(_OWORD *)(a1 + 353) = 0u;
  a1[356] = 4;
  *(_OWORD *)(a1 + 357) = 0u;
  a1[359] = (uint64_t)(a1 + 361);
  a1[360] = 0x100000000;
  a1[362] = (uint64_t)"agc.driver.api_texture.";
  *(_OWORD *)(a1 + 365) = 0u;
  *(_OWORD *)(a1 + 363) = 0u;
  *((_DWORD *)a1 + 734) = 1065353216;
  a1[368] = (uint64_t)"agc.driver.api_sampler.";
  *(_OWORD *)(a1 + 369) = 0u;
  *(_OWORD *)(a1 + 371) = 0u;
  *((_DWORD *)a1 + 746) = 1065353216;
  a1[374] = (uint64_t)"agc.driver.ab_texture.";
  *(_OWORD *)(a1 + 375) = 0u;
  *(_OWORD *)(a1 + 377) = 0u;
  *((_DWORD *)a1 + 758) = 1065353216;
  a1[380] = (uint64_t)"agc.driver.ab_sampler.";
  *(_OWORD *)(a1 + 381) = 0u;
  *(_OWORD *)(a1 + 383) = 0u;
  *((_DWORD *)a1 + 770) = 1065353216;
  a1[386] = (uint64_t)"agc.driver.api_texture.global_ref";
  *(_OWORD *)(a1 + 387) = 0u;
  *(_OWORD *)(a1 + 389) = 0u;
  *((_DWORD *)a1 + 782) = 1065353216;
  a1[392] = (uint64_t)"agc.driver.api_sampler.global_ref";
  *(_OWORD *)(a1 + 395) = 0u;
  *(_OWORD *)(a1 + 393) = 0u;
  *((_DWORD *)a1 + 794) = 1065353216;
  a1[398] = (uint64_t)(a1 + 400);
  a1[399] = 0x200000000;
  *(_OWORD *)(a1 + 403) = 0u;
  a1[402] = (uint64_t)(a1 + 403);
  *((_DWORD *)a1 + 814) = 128;
  a1[405] = MEMORY[0x1CB79F270](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::initEmpty((uint64_t)(a1 + 405));
  *((unsigned char *)a1 + 3264) = 0;
  *((unsigned char *)a1 + 3288) = 0;
  *(_OWORD *)(a1 + 413) = 0u;
  *(_OWORD *)(a1 + 415) = 0u;
  a1[417] = (uint64_t)(a1 + 419);
  a1[418] = 0x400000000;
  *(_OWORD *)(a1 + 439) = 0u;
  *((_DWORD *)a1 + 882) = 0;
  a1[442] = 4;
  *(_DWORD *)((char *)a1 + 3562) = 0;
  *((unsigned char *)a1 + 3566) = 0;
  *(_OWORD *)(a1 + 443) = 0u;
  a1[446] = 1;
  *((unsigned char *)a1 + 3560) = 0;
  *(int64x2_t *)(a1 + 447) = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  a1[449] = (uint64_t)(a1 + 451);
  a1[450] = 0x200000000;
  a1[463] = 0;
  *((_WORD *)a1 + 1856) = 0;
  *((_DWORD *)a1 + 912) = 0;
  a1[455] = 0;
  *(_OWORD *)(a1 + 453) = 0u;
  *((_DWORD *)a1 + 914) = 0;
  *((_OWORD *)a1 + 229) = 0u;
  *((_OWORD *)a1 + 230) = 0u;
  *((unsigned char *)a1 + 3696) = 0;
  a1[467] = 0;
  *((_DWORD *)a1 + 936) = 0;
  *(_OWORD *)(a1 + 465) = 0u;
  *(_OWORD *)(a1 + 469) = 0u;
  *(_OWORD *)(a1 + 471) = 0u;
  *(_OWORD *)(a1 + 473) = 0u;
  *(_OWORD *)(a1 + 475) = 0u;
  *(_OWORD *)(a1 + 477) = 0u;
  *(_OWORD *)(a1 + 479) = 0u;
  a1[481] = 0;
  a1[482] = 1;
  a1[483] = 0;
  a1[484] = (uint64_t)(a1 + 486);
  a1[485] = 0x1000000000;
  std::string::basic_string[abi:nn180100]<0>(a1 + 518, "texture");
  *((_DWORD *)a1 + 1042) = 93;
  std::string::basic_string[abi:nn180100]<0>(a1 + 522, "sampler");
  *((_DWORD *)a1 + 1050) = 113;
  *((_DWORD *)a1 + 1058) = 0;
  a1[528] = 0;
  a1[527] = 0;
  a1[526] = 0;
  a1[232] = (uint64_t)"agc.sampler_words";
  uint64_t v23 = *a1;
  a1[233] = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 1680);
  a1[234] = (uint64_t)"sampler_state";
  a1[236] = 0x100000040;
  a1[240] = (uint64_t)"agc.sampler_es1_lod_bias";
  a1[241] = *(uint64_t *)((char *)a1 + *(void *)(v23 - 24) + 200);
  a1[242] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 488) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v23 - 24) + 400) + 876);
  *((_DWORD *)a1 + 489) = 19;
  a1[248] = (uint64_t)"agc.sampler_unique_id";
  a1[249] = *(uint64_t *)((char *)a1 + *(void *)(v23 - 24) + 240);
  a1[250] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 504) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v23 - 24) + 400) + 876);
  *((_DWORD *)a1 + 505) = 98;
  a1[256] = (uint64_t)"agc.sampler_heap_index";
  a1[257] = *(uint64_t *)((char *)a1 + *(void *)(v23 - 24) + 232);
  a1[258] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 520) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v23 - 24) + 400) + 876);
  *((_DWORD *)a1 + 521) = 113;
  a1[264] = (uint64_t)"agc.constant_sampler_words";
  a1[265] = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(v23 - 24) + 400) + 1680);
  a1[266] = (uint64_t)"constant_driver";
  a1[268] = 0x1200000040;
  a1[152] = (uint64_t)"agc.read_image_words";
  a1[153] = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(v23 - 24) + 400) + 1672);
  a1[154] = (uint64_t)"image_state";
  a1[156] = 64;
  a1[160] = (uint64_t)"agc.write_image_words";
  a1[161] = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(v23 - 24) + 400) + 1672);
  a1[162] = (uint64_t)"image_state";
  a1[164] = 0x600000040;
  a1[168] = (uint64_t)"agc.image_dim";
  a1[169] = llvm::FixedVectorType::get();
  a1[170] = (uint64_t)"driver_parameters";
  uint64_t v24 = *a1;
  *((_DWORD *)a1 + 344) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 876);
  *((_DWORD *)a1 + 345) = 11;
  a1[176] = (uint64_t)"agc.image_array_info";
  uint64_t Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)((char *)a1 + *(void *)(v24 - 24) + 392), (llvm::LLVMContext *)2);
  uint64_t v26 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 232);
  *(void *)&long long __dst = Int8PtrTy;
  *((void *)&__dst + 1) = v26;
  uint64_t v144 = v26;
  a1[177] = llvm::StructType::get();
  a1[178] = (uint64_t)"driver_parameters";
  uint64_t v27 = *a1;
  *((_DWORD *)a1 + 360) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 876);
  *((_DWORD *)a1 + 361) = 12;
  a1[192] = (uint64_t)"agc.image_mipmap_count";
  a1[193] = *(uint64_t *)((char *)a1 + *(void *)(v27 - 24) + 232);
  a1[194] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 392) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v27 - 24) + 400) + 876);
  *((_DWORD *)a1 + 393) = 16;
  a1[200] = (uint64_t)"agc.image_sample_count";
  a1[201] = *(uint64_t *)((char *)a1 + *(void *)(v27 - 24) + 232);
  a1[202] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 408) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v27 - 24) + 400) + 876);
  *((_DWORD *)a1 + 409) = 17;
  a1[184] = (uint64_t)"agc.image_pack_format";
  a1[185] = *(uint64_t *)((char *)a1 + *(void *)(v27 - 24) + 232);
  a1[186] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 376) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v27 - 24) + 400) + 876);
  *((_DWORD *)a1 + 377) = 13;
  a1[208] = (uint64_t)"agc.image_base_level";
  a1[209] = *(uint64_t *)((char *)a1 + *(void *)(v27 - 24) + 232);
  a1[210] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 424) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v27 - 24) + 400) + 876);
  *((_DWORD *)a1 + 425) = 62;
  a1[224] = (uint64_t)"agc.image_unique_id";
  a1[225] = *(uint64_t *)((char *)a1 + *(void *)(v27 - 24) + 240);
  a1[226] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 456) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v27 - 24) + 400) + 876);
  *((_DWORD *)a1 + 457) = 97;
  a1[216] = (uint64_t)"agc.image_heap_index";
  a1[217] = *(uint64_t *)((char *)a1 + *(void *)(v27 - 24) + 232);
  a1[218] = (uint64_t)"driver_parameters";
  *((_DWORD *)a1 + 440) = *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v27 - 24) + 400) + 876);
  *((_DWORD *)a1 + 441) = 93;
  uint64_t v28 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 368) = a3;
  *(void *)(*(uint64_t *)((char *)a1 + *(void *)(v28 - 24) + 400) + 336) = *(uint64_t *)((char *)a1
                                                                                         + *(void *)(v28 - 24)
                                                                                         + 368);
  *(unsigned char *)(*(uint64_t *)((char *)a1 + *(void *)(v28 - 24) + 400) + 808) = (*((_DWORD *)a1 + 55) & 0xFFFFFFF7) == 3;
  *(void *)(*(uint64_t *)((char *)a1 + *(void *)(v28 - 24) + 400) + 344) = (char *)a1 + *(void *)(v28 - 24) + 2776;
  *(void *)(*(uint64_t *)((char *)a1 + *(void *)(v28 - 24) + 400) + 352) = (char *)a1 + *(void *)(v28 - 24) + 2856;
  v29 = *(llvm::Module **)((char *)a1 + *(void *)(v28 - 24) + 368);
  *(void *)&long long __dst = "air.compile_options";
  __int16 v145 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v29, (const llvm::Twine *)&__dst);
  if (NamedMetadata)
  {
    v31 = (llvm::NamedMDNode *)NamedMetadata;
    unsigned int v32 = 0;
    while (v32 < llvm::NamedMDNode::getNumOperands(v31))
    {
      uint64_t Operand = llvm::NamedMDNode::getOperand(v31);
      ++v32;
      if (isStringMDNode(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)), "air.compile.fast_math_disable"))
      {
        *((unsigned char *)a1 + 32) = 0;
        break;
      }
    }
    llvm::NamedMDNode::eraseFromParent(v31);
  }
  v34 = (uint64_t *)(a3 + 168);
  if ((*(char *)(a3 + 191) & 0x80000000) == 0)
  {
    int v35 = *(unsigned __int8 *)(a3 + 191);
    if (v35 != 20)
    {
      if (v35 != 22) {
        goto LABEL_30;
      }
      goto LABEL_24;
    }
LABEL_32:
    v43 = (uint64_t *)*v34;
    uint64_t v44 = v34[1];
    int v45 = *((_DWORD *)v34 + 4);
    BOOL v41 = v43 == (uint64_t *)0x535F786574726556 && v44 == 0x6F72505F65746174 && v45 == 1835102823;
    goto LABEL_38;
  }
  uint64_t v36 = *(void *)(a3 + 176);
  if (v36 == 20)
  {
    v34 = (uint64_t *)*v34;
    goto LABEL_32;
  }
  if (v36 == 22)
  {
    v34 = (uint64_t *)*v34;
LABEL_24:
    v37 = (uint64_t *)*v34;
    uint64_t v38 = v34[1];
    uint64_t v39 = *(uint64_t *)((char *)v34 + 14);
    BOOL v41 = v37 == (uint64_t *)0x746E656D67617246 && v38 == 0x505F65746174535FLL && v39 == 0x6D6172676F72505FLL;
LABEL_38:
    char v42 = v41;
    goto LABEL_41;
  }
LABEL_30:
  char v42 = 0;
LABEL_41:
  *((unsigned char *)a1 + 14) |= v42;
  v47 = *(llvm::Module **)((char *)a1 + *(void *)(*a1 - 24) + 368);
  *(void *)&long long __dst = "air.language_version";
  __int16 v145 = 259;
  v48 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v47, (const llvm::Twine *)&__dst);
  if (v48)
  {
    uint64_t v49 = llvm::NamedMDNode::getOperand(v48);
    if (v49)
    {
      if (isStringMDNode(*(llvm::MDString **)(v49 - 8 * *(unsigned int *)(v49 + 8)), "OpenGL ES GLSL")) {
        *((unsigned char *)a1 + 14) = 1;
      }
    }
  }
  v50 = *(llvm::Module **)((char *)a1 + *(void *)(*a1 - 24) + 368);
  *(void *)&long long __dst = "llvm.module.flags";
  __int16 v145 = 259;
  uint64_t v51 = llvm::Module::getNamedMetadata(v50, (const llvm::Twine *)&__dst);
  if (v51)
  {
    v52 = (llvm::NamedMDNode *)v51;
    unsigned int v53 = 0;
LABEL_47:
    if (v53 < llvm::NamedMDNode::getNumOperands(v52))
    {
      uint64_t v54 = llvm::NamedMDNode::getOperand(v52);
      uint64_t v55 = 8 - 8 * *(unsigned int *)(v54 + 8);
      do
      {
        if (!v55)
        {
          ++v53;
          goto LABEL_47;
        }
        BOOL v56 = isStringMDNode(*(llvm::MDString **)(v54 + v55), "SDK Version");
        v55 += 8;
      }
      while (!v56);
      a1[7] = 0;
      v57 = *(unsigned __int8 **)(v54 - 8 * *(unsigned int *)(v54 + 8) + 16);
      if (v57 && *v57 - 1 <= 1)
      {
        uint64_t v58 = *((void *)v57 + 16);
        if ((*(unsigned char *)(v58 + 16) & 0xFE) != 0xE) {
          uint64_t v58 = 0;
        }
        a1[7] = v58;
      }
    }
  }
  char v59 = *((unsigned char *)a1 + 32);
  if (v59) {
    char v60 = 1;
  }
  else {
    char v60 = a6;
  }
  *((unsigned char *)a1 + 34) = v60;
  *((unsigned char *)a1 + 36) = v60;
  *((unsigned char *)a1 + 35) = v60;
  *((unsigned char *)a1 + 33) = v59;
  uint64_t v61 = *a1;
  uint64_t v62 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 368);
  uint64_t v63 = v62 + 24;
  uint64_t v64 = *(void *)(v62 + 32);
  if (v64 != v63)
  {
    do
    {
      uint64_t v65 = *(void *)(v64 + 8);
      llvm::Function::removeFnAttr();
      llvm::Function::removeFnAttr();
      llvm::Function::removeFnAttr();
      uint64_t v64 = v65;
    }
    while (v65 != v63);
    uint64_t v61 = *a1;
  }
  uint64_t v66 = v61;
  uint64_t v67 = (uint64_t)a1 + *(void *)(v61 - 24);
  unsigned int v68 = *(_DWORD *)((char *)a1 + 33);
  if (v68) {
    int v69 = -1;
  }
  else {
    int v69 = 16;
  }
  if ((v68 & 0x100) != 0) {
    v69 |= 6u;
  }
  *(_DWORD *)(v67 + 136) = v69 | (v68 >> 13) & 8;
  unsigned int v70 = *(_DWORD *)((char *)a1 + 33);
  if (v70) {
    int v71 = -1;
  }
  else {
    int v71 = 16;
  }
  if ((v70 & 0x100) != 0) {
    v71 |= 6u;
  }
  *(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(v66 - 24) + 400) + 104) = v71 | (v70 >> 13) & 8;
  v72 = *(llvm::Module **)((char *)a1 + *(void *)(v66 - 24) + 368);
  *(void *)&long long __dst = "air.visible";
  __int16 v145 = 259;
  v73 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v72, (const llvm::Twine *)&__dst);
  if (v73)
  {
    v74 = v73;
    int NumOperands = llvm::NamedMDNode::getNumOperands(v73);
    if (NumOperands)
    {
      int v76 = NumOperands;
      int v77 = 0;
      while (1)
      {
        uint64_t v78 = llvm::NamedMDNode::getOperand(v74);
        v79 = *(unsigned __int8 **)(v78 - 8 * *(unsigned int *)(v78 + 8));
        if (v79)
        {
          if (*v79 - 1 <= 1)
          {
            uint64_t v80 = v78;
            v81 = (llvm::Value *)*((void *)v79 + 16);
            if (v81 && *((unsigned char *)v81 + 16) == 0)
            {
              v83 = (llvm::StringMapImpl *)((char *)a1 + *(void *)(*a1 - 24) + 3288);
              uint64_t Name = llvm::Value::getName(v81);
              size_t v86 = v85;
              unsigned int v87 = llvm::StringMapImpl::LookupBucketFor();
              uint64_t v88 = *(void *)v83;
              uint64_t v89 = *(void *)(*(void *)v83 + 8 * v87);
              if (!v89) {
                goto LABEL_87;
              }
              if (v89 == -8) {
                break;
              }
            }
          }
        }
LABEL_90:
        if (v76 == ++v77) {
          goto LABEL_91;
        }
      }
      --*((_DWORD *)v83 + 4);
LABEL_87:
      __src = (void *)Name;
      uint64_t v141 = v88;
      uint64_t v90 = MEMORY[0x1CB79F270](v86 + 17, 8);
      v91 = (void *)v90;
      uint64_t v92 = v90 + 16;
      if (v86) {
        memcpy((void *)(v90 + 16), __src, v86);
      }
      *(unsigned char *)(v92 + v86) = 0;
      void *v91 = v86;
      v91[1] = v80;
      *(void *)(v141 + 8 * v87) = v91;
      ++*((_DWORD *)v83 + 3);
      llvm::StringMapImpl::RehashTable(v83);
      goto LABEL_90;
    }
  }
LABEL_91:
  v93 = *(llvm::Module **)((char *)a1 + *(void *)(*a1 - 24) + 368);
  char v94 = 1;
  HIBYTE(v145) = 1;
  if (*a4)
  {
    *(void *)&long long __dst = a4;
    char v94 = 3;
  }
  LOBYTE(v145) = v94;
  v95 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v93, (const llvm::Twine *)&__dst);
  a1[8] = (uint64_t)v95;
  if (*((unsigned char *)a1 + 15))
  {
    MEMORY[0x1CB7A04E0]((char *)a1 + *(void *)(*a1 - 24) + 3224, "dylib");
  }
  else
  {
    uint64_t v98 = llvm::NamedMDNode::getOperand(v95);
    a1[22] = 0;
    v99 = *(unsigned __int8 **)(v98 - 8 * *(unsigned int *)(v98 + 8));
    if (v99 && *v99 - 1 <= 1)
    {
      v100 = (llvm::Value *)*((void *)v99 + 16);
      if (*((unsigned char *)v100 + 16)) {
        v101 = 0;
      }
      else {
        v101 = v100;
      }
      a1[22] = (uint64_t)v101;
    }
    else
    {
      v101 = 0;
    }
    v102 = (void *)llvm::Value::getName(v101);
    if (v103 == 23)
    {
      BOOL v104 = *v102 == 0x747265762E726961 && v102[1] == 0x4668637465467865;
      if (v104 && *(void *)((char *)v102 + 15) == 0x6E6F6974636E7546)
      {
        uint64_t v106 = *(void *)(a1[22] + 80);
        uint64_t v107 = v106 - 24;
        if (!v106) {
          uint64_t v107 = 0;
        }
        uint64_t v108 = *(void *)(v107 + 40);
        if (v108 == v107 + 40)
        {
          uint64_t v111 = 0;
        }
        else
        {
          uint64_t v109 = v108 - 24;
          if (v108) {
            uint64_t v110 = v108 - 24;
          }
          else {
            uint64_t v110 = 0;
          }
          if (*(unsigned __int8 *)(v110 + 16) - 29 >= 0xB) {
            uint64_t v111 = 0;
          }
          else {
            uint64_t v111 = v109;
          }
        }
        if (*(unsigned char *)(v111 + 16) == 29) {
          uint64_t v112 = v111;
        }
        else {
          uint64_t v112 = 0;
        }
        uint64_t v113 = *(_DWORD *)(v112 + 20) & 0x7FFFFFF;
        if (v113 && (uint64_t v114 = *(void *)(v112 - 32 * v113)) != 0)
        {
          int v115 = *(unsigned __int8 *)(v114 + 16);
        }
        else
        {
          uint64_t v116 = *(void *)(v112 + 24);
          uint64_t v114 = v116 - 24;
          if (v116) {
            uint64_t v117 = v116 - 24;
          }
          else {
            uint64_t v117 = 0;
          }
          int v115 = *(unsigned __int8 *)(v117 + 16);
        }
        if (v115 == 84)
        {
          uint64_t v118 = *(void *)(v114 - 32);
          if (!v118 || *(unsigned char *)(v118 + 16) || *(void *)(v118 + 24) != *(void *)(v114 + 72)) {
            uint64_t v118 = 0;
          }
          if (v118) {
            v101 = (llvm::Value *)v118;
          }
        }
      }
    }
    uint64_t v142 = *((void *)v101 + 14);
    *(void *)&long long __dst = llvm::AttributeList::getAttributeAtIndex();
    if (llvm::Attribute::isStringAttribute((llvm::Attribute *)&__dst))
    {
      uint64_t ValueAsString = llvm::Attribute::getValueAsString((llvm::Attribute *)&__dst);
      if (v120 == 10 && *(void *)ValueAsString == 0x696F706563617274 && *(_WORD *)(ValueAsString + 8) == 29806) {
        *((unsigned char *)a1 + 45) = 1;
      }
    }
    v122 = (void *)llvm::Value::getName(v101);
    if (v122)
    {
      std::string::basic_string[abi:nn180100](&__dst, v122, v123);
    }
    else
    {
      long long __dst = 0uLL;
      uint64_t v144 = 0;
    }
    uint64_t v124 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v125 = v124 + 3224;
    if (*(char *)(v124 + 3247) < 0) {
      operator delete(*(void **)v125);
    }
    *(_OWORD *)uint64_t v125 = __dst;
    *(void *)(v125 + 16) = v144;
    v126 = (void *)llvm::Value::getName(v101);
    if (v126)
    {
      std::string::basic_string[abi:nn180100](&__dst, v126, v127);
    }
    else
    {
      long long __dst = 0uLL;
      uint64_t v144 = 0;
    }
    uint64_t v128 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v129 = v128 + 3248;
    if (*(char *)(v128 + 3271) < 0) {
      operator delete(*(void **)v129);
    }
    *(_OWORD *)uint64_t v129 = __dst;
    *(void *)(v129 + 16) = v144;
    uint64_t v130 = a1[22];
    if (**(void **)(*(void *)(v130 + 24) + 16) != *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 176)) {
      a1[9] = *(void *)(v98 - 8 * *(unsigned int *)(v98 + 8) + 8);
    }
    uint64_t v131 = *(void *)(v130 + 96);
    if (v131)
    {
      uint64_t v132 = *(void *)(v98 - 8 * *(unsigned int *)(v98 + 8) + 16);
      a1[10] = v132;
      unint64_t v133 = *((unsigned int *)a1 + 24);
      if (v131 != v133)
      {
        if (v131 >= v133)
        {
          if (v131 > (unint64_t)*((unsigned int *)a1 + 25)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v133 != v131) {
            bzero((void *)(*v137 + 8 * v133), 8 * v131 - 8 * v133);
          }
        }
        *((_DWORD *)a1 + 24) = v131;
        uint64_t v132 = a1[10];
      }
      unint64_t v134 = *(unsigned int *)(v132 + 8);
      if (v134)
      {
        for (unint64_t i = 0; i < v134; ++i)
        {
          uint64_t v136 = *(void *)(v132 - 8 * v134 + 8 * i);
          LODWORD(v142) = 0;
          LODWORD(__dst) = 0;
          parseMDInt(0, v136, (unsigned int *)&__dst, &v142);
          *(void *)(a1[11] + 8 * v142) = v136;
          uint64_t v132 = a1[10];
          unint64_t v134 = *(unsigned int *)(v132 + 8);
        }
      }
    }
  }
  uint64_t v96 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(void *)(v96 - 24)) = a2[4];
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 32) = a2[5];
  a1[530] = 4;
  a1[532] = 0;
  a1[531] = 0;
  a1[533] = 4;
  a1[535] = 0;
  a1[534] = 0;
  a1[536] = 4;
  a1[537] = 0;
  a1[539] = 0;
  a1[538] = 0;
  return a1;
}

uint64_t AGCLLVMUserObject::linkHelperRuntime(uint64_t *a1, int a2)
{
  v46[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t)a1 + *(void *)(*a1 - 24);
  uint64_t v5 = *(void *)(v4 + 464);
  v6 = *(llvm::Module **)(v4 + 368);
  if (*((char *)a1 + 207) < 0) {
    std::string::__init_copy_ctor_external(&v42, (const std::string::value_type *)a1[23], a1[24]);
  }
  else {
    std::string v42 = *(std::string *)(a1 + 23);
  }
  long long v43 = *((_OWORD *)a1 + 13);
  uint64_t v44 = a1[28];
  MetalRuntime = AGCLLVMCtx::loadMetalRuntime(v5, v6, a2);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  char v45 = 0;
  if (!MetalRuntime) {
    return 1;
  }
  for (unint64_t i = (void *)*((void *)MetalRuntime + 4); i != (void *)((char *)MetalRuntime + 24); unint64_t i = (void *)i[1])
  {
    if (i) {
      uint64_t v9 = (uint64_t)(i - 7);
    }
    else {
      uint64_t v9 = 0;
    }
    if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v9) && (*(unsigned char *)(v9 + 34) & 0x80) != 0
      || (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v9) & 1) == 0)
    {
      llvm::GlobalValue::setLinkage(v9, 3);
    }
    if ((*(_DWORD *)(v9 + 32) & 0xFu) - 7 >= 2) {
      llvm::GlobalValue::setVisibility(v9);
    }
  }
  uint64_t v10 = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 464) + 32);
  uint64_t v11 = *(void **)(v10 + 8);
  if (v11) {
    size_t v12 = strlen(*(const char **)(v10 + 8));
  }
  else {
    size_t v12 = 0;
  }
  llvm::Module::setTargetTriple((uint64_t)MetalRuntime, v11, v12);
  uint64_t v14 = *(void *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 464) + 32);
  if (*(void *)(v14 + 16)) {
    strlen(*(const char **)(v14 + 16));
  }
  llvm::Module::setDataLayout();
  v46[3] = 0;
  int v15 = llvm::Linker::linkModules();
  std::__function::__value_func<void ()(llvm::Module &,llvm::StringSet<llvm::MallocAllocator> const&)>::~__value_func[abi:nn180100](v46);
  uint64_t v16 = MEMORY[0x1CB79FA40]();
  MEMORY[0x1CB7A0780](v16, 0x10B2C407FF26C1CLL);
  if ((v15 & 1) == 0)
  {
    uint64_t v17 = *a1;
    uint64_t v18 = *a1;
    uint64_t v19 = (uint64_t)a1 + *(void *)(*a1 - 24);
    if (*(unsigned char *)(*(void *)(v19 + 400) + 1751))
    {
      uint64_t v20 = *(void *)(v19 + 368);
      uint64_t v21 = v20 + 24;
      uint64_t v22 = *(void *)(v20 + 32);
      if (v22 != v20 + 24)
      {
        do
        {
          uint64_t v23 = v22 - 56;
          BOOL v27 = v22 == 0;
          uint64_t v22 = *(void *)(v22 + 8);
          if (v27) {
            uint64_t v24 = 0;
          }
          else {
            uint64_t v24 = v23;
          }
          if (v24 != a1[21])
          {
            uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v24);
            if (v26 != 22
              || (*Name == 0x626F6C672E636761 ? (BOOL v27 = Name[1] == 0x74736E6F635F6C61) : (BOOL v27 = 0),
                  v27 ? (BOOL v28 = *(void *)((char *)Name + 14) == 0x726F746375727473) : (BOOL v28 = 0),
                  !v28))
            {
              uint64_t v29 = (uint64_t)a1 + *(void *)(*a1 - 24);
              llvm::Value::getName((llvm::Value *)v24);
              int Key = llvm::StringMapImpl::FindKey();
              if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v29 + 3296))
              {
                int v31 = *(_DWORD *)(v24 + 32);
                if ((v31 & 0xF) != 0) {
                  goto LABEL_48;
                }
              }
              else
              {
                int v31 = *(_DWORD *)(v24 + 32);
              }
              if ((v31 & 0x30) == 0x10)
              {
LABEL_48:
                if (!*(void *)(v24 + 8)) {
                  llvm::Function::eraseFromParent((llvm::Function *)v24);
                }
              }
            }
          }
        }
        while (v22 != v21);
      }
    }
    else
    {
      *((_DWORD *)a1 + 10) = 1;
      uint64_t v32 = *(uint64_t *)((char *)a1 + *(void *)(v18 - 24) + 368);
      uint64_t v33 = v32 + 24;
      uint64_t v34 = *(void *)(v32 + 32);
      if (v34 != v33)
      {
        do
        {
          uint64_t v35 = *(void *)(v34 + 8);
          if (v34) {
            uint64_t v36 = (llvm::Function *)(v34 - 56);
          }
          else {
            uint64_t v36 = 0;
          }
          if (v36 != (llvm::Function *)a1[21]) {
            AGCLLVMUserObject::markNonMainFunctionInline((AGCLLVMUserObject *)a1, v36, *(unsigned char *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 1751));
          }
          uint64_t v34 = v35;
        }
        while (v35 != v33);
        uint64_t v17 = *a1;
      }
      uint64_t v37 = *(uint64_t *)((char *)a1 + *(void *)(v17 - 24) + 368);
      uint64_t v38 = v37 + 8;
      uint64_t v39 = *(void *)(v37 + 16);
      if (v39 != v37 + 8)
      {
        do
        {
          uint64_t v40 = v39 - 56;
          BOOL v27 = v39 == 0;
          uint64_t v39 = *(void *)(v39 + 8);
          if (v27) {
            uint64_t v41 = 0;
          }
          else {
            uint64_t v41 = v40;
          }
          if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v41) & 1) == 0)
          {
            if (*(void *)(v41 + 8)) {
              *(_DWORD *)(v41 + 32) = *(_DWORD *)(v41 + 32) & 0xFFFFBFC0 | 0x4007;
            }
            else {
              llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v41);
            }
          }
        }
        while (v39 != v38);
      }
      if (*((_DWORD *)a1 + 10) > 1u)
      {
        llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 464) + 344), *(llvm::Module **)((char *)a1 + *(void *)(*a1 - 24) + 368));
        *((_DWORD *)a1 + 10) = 1;
      }
    }
  }
  return v15 ^ 1u;
}

llvm::Module *AGCLLVMCtx::loadMetalRuntime(uint64_t a1, llvm::Module *a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v10 = (const char *)(a1 + 408);
      if (*(char *)(a1 + 431) < 0) {
        uint64_t v10 = *(const char **)v10;
      }
      loadRuntime(v10, a2);
    case 1:
      uint64_t v11 = *(const void **)(*(void *)(a1 + 32) + 32);
      if (*(char *)(a1 + 407) >= 0) {
        size_t v12 = *(unsigned __int8 *)(a1 + 407);
      }
      else {
        size_t v12 = *(void *)(a1 + 392);
      }
      size_t v13 = strlen(*(const char **)(*(void *)(a1 + 32) + 32));
      p_p = (char *)&__p;
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v12 + v13);
      if (v34 < 0) {
        p_p = (char *)__p;
      }
      if (v12)
      {
        if (*(char *)(a1 + 407) >= 0) {
          int v15 = (const void *)(a1 + 384);
        }
        else {
          int v15 = *(const void **)(a1 + 384);
        }
        memmove(p_p, v15, v12);
      }
      if (v13) {
        memmove(&p_p[v12], v11, v13);
      }
      p_p[v12 + v13] = 0;
      if (v34 >= 0) {
        uint64_t v16 = (const char *)&__p;
      }
      else {
        uint64_t v16 = (const char *)__p;
      }
      goto LABEL_90;
    case 2:
      if (*(char *)(a1 + 407) >= 0) {
        size_t v17 = *(unsigned __int8 *)(a1 + 407);
      }
      else {
        size_t v17 = *(void *)(a1 + 392);
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v17 + 15);
      if (v34 >= 0) {
        uint64_t v18 = &__p;
      }
      else {
        uint64_t v18 = __p;
      }
      if (v17)
      {
        if (*(char *)(a1 + 407) >= 0) {
          uint64_t v19 = (const void *)(a1 + 384);
        }
        else {
          uint64_t v19 = *(const void **)(a1 + 384);
        }
        memmove(v18, v19, v17);
      }
      strcpy((char *)v18 + v17, "/ei_rt.metallib");
      break;
    case 3:
      if (*(char *)(a1 + 407) >= 0) {
        size_t v20 = *(unsigned __int8 *)(a1 + 407);
      }
      else {
        size_t v20 = *(void *)(a1 + 392);
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v20 + 16);
      if (v34 >= 0) {
        uint64_t v21 = (char *)&__p;
      }
      else {
        uint64_t v21 = (char *)__p;
      }
      if (v20)
      {
        if (*(char *)(a1 + 407) >= 0) {
          uint64_t v22 = (const void *)(a1 + 384);
        }
        else {
          uint64_t v22 = *(const void **)(a1 + 384);
        }
        memmove(v21, v22, v20);
      }
      uint64_t v23 = &v21[v20];
      uint64_t v24 = "/vft_rt.metallib";
      goto LABEL_74;
    case 4:
    case 5:
      if (*(char *)(a1 + 407) >= 0) {
        size_t v6 = *(unsigned __int8 *)(a1 + 407);
      }
      else {
        size_t v6 = *(void *)(a1 + 392);
      }
      v7 = &v32;
      std::string::basic_string[abi:nn180100]((uint64_t)&v32, v6 + 14);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      if (v6)
      {
        if (*(char *)(a1 + 407) >= 0) {
          v8 = (const void *)(a1 + 384);
        }
        else {
          v8 = *(const void **)(a1 + 384);
        }
        memmove(v7, v8, v6);
      }
      strcpy((char *)v7 + v6, "/raytracing_rt");
      if (a3 == 5) {
        std::string::append(&v32, "_dora");
      }
      std::string::append(&v32, ".metallib");
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v9 = &v32;
      }
      else {
        uint64_t v9 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      loadRuntime((const char *)v9, a2);
    case 6:
      if (*(char *)(a1 + 407) >= 0) {
        size_t v25 = *(unsigned __int8 *)(a1 + 407);
      }
      else {
        size_t v25 = *(void *)(a1 + 392);
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v25 + 16);
      if (v34 >= 0) {
        uint64_t v26 = (char *)&__p;
      }
      else {
        uint64_t v26 = (char *)__p;
      }
      if (v25)
      {
        if (*(char *)(a1 + 407) >= 0) {
          BOOL v27 = (const void *)(a1 + 384);
        }
        else {
          BOOL v27 = *(const void **)(a1 + 384);
        }
        memmove(v26, v27, v25);
      }
      uint64_t v23 = &v26[v25];
      uint64_t v24 = "/gpe_rt.metallib";
LABEL_74:
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
      v23[16] = 0;
      break;
    case 7:
      if (*(char *)(a1 + 407) >= 0) {
        size_t v28 = *(unsigned __int8 *)(a1 + 407);
      }
      else {
        size_t v28 = *(void *)(a1 + 392);
      }
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v28 + 24);
      if (v34 >= 0) {
        uint64_t v29 = &__p;
      }
      else {
        uint64_t v29 = __p;
      }
      if (v28)
      {
        if (*(char *)(a1 + 407) >= 0) {
          v30 = (const void *)(a1 + 384);
        }
        else {
          v30 = *(const void **)(a1 + 384);
        }
        memmove(v29, v30, v28);
      }
      strcpy((char *)v29 + v28, "/tex_atomic_emu.metallib");
      break;
    default:
      return a2;
  }
  if (v34 >= 0) {
    uint64_t v16 = (const char *)&__p;
  }
  else {
    uint64_t v16 = (const char *)__p;
  }
LABEL_90:
  loadRuntime(v16, a2);
}

void loadRuntime(const char *a1, llvm::Module *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  operator new();
}

void AGCLLVMBuiltInFileReaderImpl::~AGCLLVMBuiltInFileReaderImpl(AGCLLVMBuiltInFileReaderImpl *this)
{
  AGCLLVMBuiltInFileReaderImpl::~AGCLLVMBuiltInFileReaderImpl(this);
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v2;

  *(void *)this = &unk_1F25C6438;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  free(*((void **)this + 2));
  free(*((void **)this + 4));
}

uint64_t AGCLLVMBuiltInFileReaderImpl::getBuiltinsModuleForSourceModule(AGCLLVMBuiltInFileReaderImpl *this, llvm::Module *a2)
{
  uint64_t v25 = *(void *)a2;
  int64x2_t v28 = 0uLL;
  unint64_t v29 = 0;
  v3 = (char *)a2 + 24;
  uint64_t v4 = (char *)*((void *)a2 + 4);
  if (v4 != (char *)a2 + 24)
  {
    do
    {
      if (v4) {
        uint64_t v5 = (llvm::Value *)(v4 - 56);
      }
      else {
        uint64_t v5 = 0;
      }
      if (llvm::GlobalValue::isDeclaration(v5))
      {
        uint64_t Name = (void *)llvm::Value::getName(v5);
        if (Name)
        {
          std::string::basic_string[abi:nn180100](__p, Name, v7);
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v27 = 0;
        }
        v8 = (_OWORD *)v28.i64[1];
        if (v28.i64[1] >= v29)
        {
          uint64_t v10 = (_OWORD *)v28.i64[0];
          unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v28.i64[1] - v28.i64[0]) >> 3);
          unint64_t v12 = v11 + 1;
          if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((uint64_t)(v29 - v28.i64[0]) >> 3) > v12) {
            unint64_t v12 = 0x5555555555555556 * ((uint64_t)(v29 - v28.i64[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v28.i64[0]) >> 3) >= 0x555555555555555) {
            unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v13);
          }
          else {
            uint64_t v14 = 0;
          }
          long long v15 = *(_OWORD *)__p;
          unint64_t v16 = v13 + 24 * v11;
          *(void *)(v16 + 16) = v27;
          *(_OWORD *)unint64_t v16 = v15;
          __p[1] = 0;
          uint64_t v27 = 0;
          __p[0] = 0;
          if (v8 == v10)
          {
            int64x2_t v19 = vdupq_n_s64((unint64_t)v8);
            unint64_t v17 = v13 + 24 * v11;
          }
          else
          {
            unint64_t v17 = v13 + 24 * v11;
            do
            {
              long long v18 = *(_OWORD *)((char *)v8 - 24);
              *(void *)(v17 - 8) = *((void *)v8 - 1);
              *(_OWORD *)(v17 - 24) = v18;
              v17 -= 24;
              *((void *)v8 - 2) = 0;
              *((void *)v8 - 1) = 0;
              *((void *)v8 - 3) = 0;
              v8 = (_OWORD *)((char *)v8 - 24);
            }
            while (v8 != v10);
            int64x2_t v19 = v28;
          }
          unint64_t v20 = v16 + 24;
          v28.i64[0] = v17;
          v28.i64[1] = v16 + 24;
          unint64_t v29 = v13 + 24 * v14;
          uint64_t v21 = (void **)v19.i64[1];
          uint64_t v22 = (void **)v19.i64[0];
          while (v21 != v22)
          {
            if (*((char *)v21 - 1) < 0) {
              operator delete(*(v21 - 3));
            }
            v21 -= 3;
          }
          if (v22) {
            operator delete(v22);
          }
          v28.i64[1] = v20;
          if (SHIBYTE(v27) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v9 = *(_OWORD *)__p;
          *(void *)(v28.i64[1] + 16) = v27;
          _OWORD *v8 = v9;
          v28.i64[1] = (uint64_t)v8 + 24;
        }
      }
      uint64_t v4 = (char *)*((void *)v4 + 1);
    }
    while (v4 != v3);
  }
  uint64_t v23 = (*(uint64_t (**)(AGCLLVMBuiltInFileReaderImpl *, uint64_t, int64x2_t *))(*(void *)this + 16))(this, v25, &v28);
  __p[0] = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  return v23;
}

void *std::string::basic_string[abi:nn180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    size_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *long long __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    size_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(24 * a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t AGCLLVMBuiltInFileReaderImpl::getBuiltinsModule(AGCLLVMBuiltInFileReaderImpl *this, llvm::LLVMContext *a2, uint64_t *a3)
{
  v41[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 == v4) {
    return 0;
  }
  uint64_t v7 = 0;
  do
  {
    size_t v8 = (const char *)v3;
    if (*(char *)(v3 + 23) < 0) {
      size_t v8 = *(const char **)v3;
    }
    BuiltinModuleByuint64_t Name = AGCLLVMBuiltInFileReaderImpl::getBuiltinModuleByName(this, a2, v8);
    if (BuiltinModuleByName)
    {
      if (v7)
      {
        v41[3] = 0;
        int v10 = llvm::Linker::linkModules();
        std::__function::__value_func<void ()(llvm::Module &,llvm::StringSet<llvm::MallocAllocator> const&)>::~__value_func[abi:nn180100](v41);
        uint64_t v39 = 0;
        uint64_t v11 = MEMORY[0x1CB79FA40]();
        MEMORY[0x1CB7A0780](v11, 0x10B2C407FF26C1CLL);
        if (v10) {
          goto LABEL_67;
        }
      }
      else
      {
        uint64_t v7 = BuiltinModuleByName;
      }
    }
    v3 += 24;
  }
  while (v3 != v4);
  if (v7)
  {
    uint64_t v12 = v7 + 8;
    uint64_t v13 = *(void *)(v7 + 16);
    if (v13 == v7 + 8)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 0;
      long long v15 = 0;
      unint64_t v16 = 0;
      do
      {
        if (v13) {
          unint64_t v17 = (llvm::Value *)(v13 - 56);
        }
        else {
          unint64_t v17 = 0;
        }
        if ((*((unsigned char *)v17 + 32) & 0xF) == 0)
        {
          uint64_t Name = (void *)llvm::Value::getName(v17);
          if (Name)
          {
            std::string::basic_string[abi:nn180100](__p, Name, v19);
            if (v38 >= 0) {
              unint64_t v20 = __p;
            }
            else {
              unint64_t v20 = (void **)__p[0];
            }
          }
          else
          {
            __p[0] = 0;
            __p[1] = 0;
            unint64_t v20 = __p;
            uint64_t v38 = 0;
          }
          uint64_t v21 = AGCLLVMBuiltInFileReaderImpl::getBuiltinModuleByName(this, a2, (const char *)v20);
          if (v21)
          {
            uint64_t v22 = v21;
            if (v15 >= v16)
            {
              uint64_t v23 = v15 - v14;
              unint64_t v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 61) {
                goto LABEL_67;
              }
              if (((char *)v16 - (char *)v14) >> 2 > v24) {
                unint64_t v24 = ((char *)v16 - (char *)v14) >> 2;
              }
              if ((unint64_t)((char *)v16 - (char *)v14) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v24;
              }
              if (v25)
              {
                if (v25 >> 61) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                uint64_t v26 = (char *)operator new(8 * v25);
              }
              else
              {
                uint64_t v26 = 0;
              }
              uint64_t v27 = (uint64_t *)&v26[8 * v23];
              *uint64_t v27 = v22;
              int64x2_t v28 = v27 + 1;
              while (v15 != v14)
              {
                uint64_t v29 = *--v15;
                *--uint64_t v27 = v29;
              }
              unint64_t v16 = (uint64_t *)&v26[8 * v25];
              if (v14) {
                operator delete(v14);
              }
              uint64_t v14 = v27;
              long long v15 = v28;
              uint64_t v12 = v7 + 8;
            }
            else
            {
              *v15++ = v21;
            }
          }
          if (SHIBYTE(v38) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13 != v12);
      if (v14 != v15)
      {
        v30 = v14;
        while (1)
        {
          uint64_t v36 = *v30;
          v40[3] = 0;
          int v31 = llvm::Linker::linkModules();
          std::__function::__value_func<void ()(llvm::Module &,llvm::StringSet<llvm::MallocAllocator> const&)>::~__value_func[abi:nn180100](v40);
          if (v36)
          {
            uint64_t v32 = MEMORY[0x1CB79FA40]();
            MEMORY[0x1CB7A0780](v32, 0x10B2C407FF26C1CLL);
          }
          if (v31) {
            break;
          }
          if (++v30 == v15) {
            goto LABEL_56;
          }
        }
LABEL_67:
        abort();
      }
    }
LABEL_56:
    for (uint64_t i = *(void *)(v7 + 16); i != v12; uint64_t i = *(void *)(i + 8))
    {
      if (i) {
        uint64_t v34 = (llvm::GlobalValue *)(i - 56);
      }
      else {
        uint64_t v34 = 0;
      }
      if (llvm::GlobalValue::isDeclaration(v34)) {
        llvm::GlobalValue::setLinkage((uint64_t)v34, 0);
      }
      else {
        *((_DWORD *)v34 + 8) = *((_DWORD *)v34 + 8) & 0xFFFFBFC0 | 0x4007;
      }
    }
    if (v14) {
      operator delete(v14);
    }
  }
  return v7;
}

uint64_t AGCLLVMBuiltInFileReaderImpl::getBuiltinModuleByName(AGCLLVMBuiltInFileReaderImpl *this, llvm::LLVMContext *a2, const char *__s2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  LOBYTE(v5) = *__s2;
  if (*__s2)
  {
    unsigned int v6 = 0;
    int v7 = 1;
    int v8 = 1;
    do
    {
      v6 += v8 * (char)v5;
      v8 *= 2;
      int v5 = __s2[v7++];
    }
    while (v5);
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v9 = *(unsigned int *)(*((void *)this + 2) + 4 * (v6 % *((_DWORD *)this + 2)));
  if (v9 == -1) {
    return 0;
  }
  uint64_t v10 = *((void *)this + 4);
  while (1)
  {
    uint64_t v11 = v10 + 16 * v9;
    if (!strcmp(*(const char **)(v11 + 8), __s2)) {
      break;
    }
    uint64_t v9 = *(unsigned int *)(v10 + 16 * v9);
    if (v9 == -1) {
      return 0;
    }
  }
  uint64_t v12 = *(unsigned int *)(v11 + 4);
  if (v12 == -1) {
    return 0;
  }
  unint64_t v13 = *((void *)this + 8);
  if (v12 + 4 > v13 || v13 < (*(_DWORD *)(*((void *)this + 6) + v12) + v12 + 4)) {
    return 0;
  }
  llvm::MemoryBuffer::getMemBuffer();
  llvm::MemoryBuffer::getMemBufferRef(v18, v19);
  llvm::parseBitcodeFile();
  char v16 = v22;
  if (v22)
  {
    uint64_t v20 = v21;
    uint64_t v21 = 0;
    uint64_t v14 = llvm::errorToErrorCodeAndEmitErrors();
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
  else
  {
    uint64_t v14 = v21;
    uint64_t v21 = 0;
  }
  llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected(&v21);
  if (v16) {
    uint64_t v14 = 0;
  }
  unint64_t v17 = v19;
  size_t v19 = 0;
  if (v17) {
    (*(void (**)(llvm::MemoryBuffer *))(*(void *)v17 + 8))(v17);
  }
  return v14;
}

BOOL parseMDBuffer(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, unsigned int *a5, _DWORD *a6, uint64_t *a7, char *a8, unsigned char *a9, int *a10, char *a11)
{
  int v44 = a2;
  if (!isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.buffer")
    && !isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.indirect_buffer")
    && !isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.visible_function_table")
    && !isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.primitive_acceleration_structure")&& !isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.instance_acceleration_structure"))
  {
    BOOL result = isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.intersection_function_table");
    if (!result) {
      return result;
    }
  }
  *a9 = 0;
  unsigned int v18 = *(_DWORD *)(a1 + 8);
  LODWORD(v51) = 2;
  if (v18 >= 3)
  {
    do
    {
      if ((parseMDLocationIndex(a1, &v51, a3, a4) & 1) == 0
        && (parseMDInt("air.buffer_size", a1, (unsigned int *)&v51, a5) & 1) == 0
        && (parseMDInt("air.arg_type_size", a1, (unsigned int *)&v51, a6) & 1) == 0
        && !parseMDType<llvm::MDNode>("air.struct_type_info", a1, &v51, a7)
        && (parseMDInt("air.address_space", a1, (unsigned int *)&v51, &v44) & 1) == 0)
      {
        if (parseMDInt("air.raster_order_group", a1, (unsigned int *)&v51, a10))
        {
          int v19 = *a10;
          if (*a10 >= 7) {
            int v19 = 7;
          }
          *a10 = v19;
          *a9 = 1;
        }
        else if (!parseMDAccess(a1, &v51, a8))
        {
          LODWORD(v51) = v51 + 1;
        }
      }
    }
    while (v51 < v18);
  }
  uint64_t v20 = a11;
  unsigned int v21 = *a5;
  if (*a5)
  {
    if (v44 == 2 && v21 <= 0xFFFFFFFC) {
      unsigned int v21 = (v21 + 3) & 0xFFFFFFFC;
    }
    *a5 = v21;
  }
  if (!*a7)
  {
    char v36 = 0;
    goto LABEL_76;
  }
  uint64_t v56 = *a7;
  uint64_t v51 = v55;
  v52 = v55;
  uint64_t v53 = 4;
  int v54 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  *(_OWORD *)__p = 0u;
  std::deque<llvm::MDNode const*>::push_back(__p, &v56);
  uint64_t v23 = *((void *)&v50 + 1);
  if (!*((void *)&v50 + 1))
  {
    char v36 = 0;
    goto LABEL_61;
  }
  while (1)
  {
    unint64_t v24 = *(_DWORD **)(*(void *)((char *)__p[1] + (((unint64_t)v50 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v50 & 0x1FF));
    *(void *)&long long v50 = v50 + 1;
    *((void *)&v50 + 1) = v23 - 1;
    if ((unint64_t)v50 >= 0x400)
    {
      operator delete(*(void **)__p[1]);
      __p[1] = (char *)__p[1] + 8;
      *(void *)&long long v50 = v50 - 512;
    }
    llvm::SmallPtrSetImplBase::insert_imp((llvm::SmallPtrSetImplBase *)&v51, v24);
    if (v25)
    {
      int v47 = 0;
      unsigned int v26 = v24[2];
      if (v26) {
        break;
      }
    }
LABEL_55:
    uint64_t v23 = *((void *)&v50 + 1);
    if (!*((void *)&v50 + 1))
    {
      char v36 = 0;
      goto LABEL_60;
    }
  }
  while (1)
  {
    uint64_t v46 = 0;
    if (!parseMDType<llvm::MDNode>("air.struct_type_info", (uint64_t)v24, &v47, &v46)) {
      break;
    }
    std::deque<llvm::MDNode const*>::push_back(__p, &v46);
    unsigned int v27 = v47;
LABEL_54:
    if (v27 >= v26) {
      goto LABEL_55;
    }
  }
  int v28 = v47;
  if (!isStringMDNode(*(llvm::MDString **)&v24[2 * v47 + -2 * v24[2]], "air.indirect_argument"))
  {
    unsigned int v27 = v28 + 1;
    goto LABEL_53;
  }
  unsigned int v27 = v28 + 1;
  v57[0] = v28 + 1;
  if (parseMDInt(0, (uint64_t)v24, v57, &v45)) {
    goto LABEL_51;
  }
  uint64_t v29 = *(unsigned __int8 **)&v24[2 * v27 + -2 * v24[2]];
  if (!v29) {
    goto LABEL_53;
  }
  unint64_t v30 = *v29;
  if (v30 > 0x22 || ((0x7FFFFFFF0uLL >> v30) & 1) == 0) {
    goto LABEL_53;
  }
  String = (void *)llvm::MDString::getString(*(llvm::MDString **)&v29[-8 * *((unsigned int *)v29 + 2) + 8]);
  if (v33 == 21)
  {
    BOOL v34 = *String == 0x69646E692E726961 && String[1] == 0x6E6F635F74636572;
    if (v34 && *(void *)((char *)String + 13) == 0x746E6174736E6F63)
    {
LABEL_51:
      unsigned int v27 = v28 + 2;
LABEL_53:
      int v47 = v27;
      goto LABEL_54;
    }
  }
  char v36 = 1;
LABEL_60:
  uint64_t v20 = a11;
LABEL_61:
  uint64_t v37 = (void **)__p[1];
  uint64_t v38 = (void **)v49;
  *((void *)&v50 + 1) = 0;
  unint64_t v39 = v49 - (unint64_t)__p[1];
  if ((unint64_t)v49 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v37);
      uint64_t v38 = (void **)v49;
      uint64_t v37 = (void **)((char *)__p[1] + 8);
      __p[1] = v37;
      unint64_t v39 = v49 - (void)v37;
    }
    while ((void)v49 - (void)v37 > 0x10uLL);
  }
  unint64_t v40 = v39 >> 3;
  if (v40 == 1)
  {
    uint64_t v41 = 256;
LABEL_67:
    *(void *)&long long v50 = v41;
  }
  else if (v40 == 2)
  {
    uint64_t v41 = 512;
    goto LABEL_67;
  }
  if (v37 != v38)
  {
    do
    {
      std::string v42 = *v37++;
      operator delete(v42);
    }
    while (v37 != v38);
    if ((void *)v49 != __p[1]) {
      *(void *)&long long v49 = v49 + (((unint64_t)__p[1] - v49 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v52 != v51) {
    free(v52);
  }
LABEL_76:
  *uint64_t v20 = v36;
  return 1;
}

uint64_t parseMDInt(const char *a1, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t result = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * *a3);
  if (a1)
  {
    uint64_t result = isStringMDNode((llvm::MDString *)result, a1);
    if (!result) {
      return result;
    }
    unsigned int v9 = *a3;
    unsigned int v10 = *a3 + 1;
    *a3 = v10;
    uint64_t result = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v10);
    if (!result || *(unsigned __int8 *)result - 1 >= 2)
    {
      uint64_t result = 0;
      *a3 = v9 + 2;
      return result;
    }
    *a3 = v9 + 2;
  }
  else
  {
    if (!result) {
      return result;
    }
    if (*(unsigned __int8 *)result - 1 >= 2) {
      return 0;
    }
  }
  uint64_t v11 = *(void *)(result + 128);
  if (v11) {
    BOOL v12 = *(unsigned char *)(v11 + 16) == 16;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12) {
    return 0;
  }
  unint64_t v13 = (void *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u) {
    unint64_t v13 = (void *)*v13;
  }
  *a4 = *v13;
  return 1;
}

BOOL isStringMDNode(llvm::MDString *a1, const char *a2)
{
  if (*(unsigned char *)a1) {
    return 0;
  }
  uint64_t String = llvm::MDString::getString(a1);
  uint64_t v6 = v5;
  if (a2)
  {
    int v7 = (const void *)String;
    size_t v8 = strlen(a2);
    if (v6 != v8) {
      return 0;
    }
    if (!v8) {
      return 1;
    }
    return memcmp(v7, a2, v8) == 0;
  }
  else
  {
    return v5 == 0;
  }
}

uint64_t parseMDLocationIndex(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result = isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2), "air.location_index");
  if (result)
  {
    int v9 = *a2 + 1;
    uint64_t result = parseMDInt(0, a1, (unsigned int *)&v9, a3);
    if (result)
    {
      int v10 = *a2 + 2;
      uint64_t result = parseMDInt(0, a1, (unsigned int *)&v10, a4);
      if (result)
      {
        *a2 += 3;
        return 1;
      }
    }
  }
  return result;
}

BOOL parseMDType<llvm::MDNode>(const char *a1, uint64_t a2, _DWORD *a3, void *a4)
{
  int v7 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * *a3);
  if (a1)
  {
    BOOL result = isStringMDNode(v7, a1);
    if (!result) {
      return result;
    }
    int v10 = (*a3)++;
    uint64_t v11 = *(unsigned char **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v10 + 1));
    if (v11)
    {
      if (((*v11 < 0x23uLL) & (0x7FFFFFFF0uLL >> *v11)) == 0) {
        uint64_t v11 = 0;
      }
    }
    *a4 = v11;
    *a3 = v10 + 2;
  }
  else
  {
    if (v7)
    {
      if (((*(unsigned __int8 *)v7 < 0x23uLL) & (0x7FFFFFFF0uLL >> *(unsigned char *)v7)) != 0) {
        uint64_t v11 = *(unsigned char **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * *a3);
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    *a4 = v11;
  }
  return v11 != 0;
}

BOOL parseMDAccess(uint64_t a1, _DWORD *a2, char *a3)
{
  if (isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2), "air.read"))
  {
    char v6 = 1;
  }
  else if (isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2), "air.write"))
  {
    char v6 = 2;
  }
  else
  {
    BOOL result = isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2), "air.read_write");
    if (!result) {
      return result;
    }
    char v6 = 3;
  }
  *a3 = v6;
  ++*a2;
  return 1;
}

void _agcStringRepresentation(std::string *a1, unsigned int *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v20, "AGCBlendState");
  std::string::basic_string[abi:nn180100]<0>(v18, "enabled");
  if (*a2) {
    uint64_t v4 = "yes";
  }
  else {
    uint64_t v4 = "no";
  }
  _agcFieldString<char const*>(&v22, (const void **)v18, v4);
  std::string::basic_string[abi:nn180100]<0>(v16, "src");
  _agcFieldString<char const*>(&v23, (const void **)v16, _agcBlendFactorStrings[((unint64_t)*a2 >> 1) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v14, "dst");
  _agcFieldString<char const*>(&v24, (const void **)v14, _agcBlendFactorStrings[((unint64_t)*a2 >> 6) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v12, "srcA");
  _agcFieldString<char const*>(&v25, (const void **)v12, _agcBlendFactorStrings[(unsigned __int16)*a2 >> 11]);
  std::string::basic_string[abi:nn180100]<0>(v10, "dstA");
  _agcFieldString<char const*>(&v26, (const void **)v10, _agcBlendFactorStrings[*((_WORD *)a2 + 1) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v8, "equation");
  _agcFieldString<char const*>(&v27, (const void **)v8, _agcBlendEquationStrings[((unint64_t)*a2 >> 21) & 7]);
  std::string::basic_string[abi:nn180100]<0>(__p, "equationA");
  _agcFieldString<char const*>(&v28, (const void **)__p, _agcBlendEquationStrings[*((unsigned char *)a2 + 3) & 7]);
  _agcGroupWithHeader(a1, (uint64_t)v20, (uint64_t)&v22, 7);
  for (uint64_t i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v28.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v28.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
}

void _agcFieldString<unsigned int>(std::string *a1, const void **a2, unsigned int __val)
{
  std::to_string(&v5, __val);
  _agcFieldString<std::string>(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

{
  size_t v5;
  std::string *v6;
  const void *v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string __p;
  std::string v12;

  std::to_string(&__p, __val);
  if (*((char *)a2 + 23) >= 0) {
    std::string v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string v5 = (size_t)a2[1];
  }
  char v6 = &v12;
  std::string::basic_string[abi:nn180100]((uint64_t)&v12, v5 + 3);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      char v7 = a2;
    }
    else {
      char v7 = *a2;
    }
    memmove(v6, v7, v5);
  }
  *(_DWORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 2112032;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size = __p.__r_.__value_.__l.__size_;
  }
  int v10 = std::string::append(&v12, (const std::string::value_type *)p_p, size);
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void _agcFieldString<char const*>(std::string *a1, const void **a2, char *__s)
{
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  _agcFieldString<std::string>(a1, a2, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

{
  size_t v5;
  std::string *v6;
  const void *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;

  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  if (*((char *)a2 + 23) >= 0) {
    std::string v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string v5 = (size_t)a2[1];
  }
  char v6 = &v13;
  std::string::basic_string[abi:nn180100]((uint64_t)&v13, v5 + 3);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      char v7 = a2;
    }
    else {
      char v7 = *a2;
    }
    memmove(v6, v7, v5);
  }
  *(_DWORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 2112032;
  if ((v12 & 0x80u) == 0) {
    size_t v8 = __p;
  }
  else {
    size_t v8 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    char v9 = v12;
  }
  else {
    char v9 = (std::string::size_type)__p[1];
  }
  int v10 = std::string::append(&v13, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void _agcFieldString<std::string>(std::string *a1, const void **a2, uint64_t a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  char v7 = &v13;
  std::string::basic_string[abi:nn180100]((uint64_t)&v13, v6 + 3);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v8 = a2;
    }
    else {
      size_t v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  *(_DWORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 2112032;
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    int v10 = (const std::string::value_type *)a3;
  }
  else {
    int v10 = *(const std::string::value_type **)a3;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a3 + 8);
  }
  BOOL v12 = std::string::append(&v13, v10, v11);
  *a1 = *v12;
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void _agcGroupWithHeader(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v26 = *(std::string *)a2;
  }
  _agcIndentedLine((void **)&v27.__r_.__value_.__l.__data_, (std::string::value_type *)&v26, 0);
  std::string::basic_string[abi:nn180100]<0>(v21, "{");
  _agcIndentedLine(&__p, (std::string::value_type *)v21, 0);
  if ((v25 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v8 = v25;
  }
  else {
    std::string::size_type v8 = v24;
  }
  int v9 = std::string::append(&v27, p_p, v8);
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if ((char)v25 < 0) {
    operator delete(__p);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if (!a4) {
      goto LABEL_41;
    }
    goto LABEL_20;
  }
  if (a4)
  {
LABEL_20:
    for (uint64_t i = 24 * a4; i; i -= 24)
    {
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v27 = *(std::string *)a3;
      }
      int v12 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v20, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
      }
      else {
        std::string v20 = v27;
      }
      _agcIndentedLine(&__p, (std::string::value_type *)&v20, 1);
      if ((v25 & 0x80u) == 0) {
        std::string v13 = (const std::string::value_type *)&__p;
      }
      else {
        std::string v13 = (const std::string::value_type *)__p;
      }
      if ((v25 & 0x80u) == 0) {
        std::string::size_type v14 = v25;
      }
      else {
        std::string::size_type v14 = v24;
      }
      std::string::append(&v28, v13, v14);
      if ((char)v25 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v20.__r_.__value_.__l.__data_);
        if (v12 < 0) {
LABEL_40:
        }
          operator delete(v27.__r_.__value_.__l.__data_);
      }
      else if (v12 < 0)
      {
        goto LABEL_40;
      }
      a3 += 24;
    }
  }
LABEL_41:
  std::string::basic_string[abi:nn180100]<0>(v18, "}");
  _agcIndentedLine((void **)&v27.__r_.__value_.__l.__data_, (std::string::value_type *)v18, 0);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v15 = &v28;
  }
  else {
    char v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v28.__r_.__value_.__l.__size_;
  }
  char v17 = std::string::insert(&v27, 0, (const std::string::value_type *)v15, size);
  *a1 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void *std::string::basic_string[abi:nn180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    size_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    size_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  size_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    size_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void _agcIndentedLine(void **a1, std::string::value_type *a2, int a3)
{
  std::string::basic_string[abi:nn180100]<0>(&v14, "");
  if (a3) {
    std::string::append(&v14, "  ");
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v14;
  }
  if (a2[23] < 0)
  {
    std::string::size_type v7 = a2;
    a2 = *(std::string::value_type **)a2;
    uint64_t v6 = *((void *)v7 + 1);
    if (!v6) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v6 = a2[23];
    if (!a2[23]) {
      goto LABEL_19;
    }
  }
  do
  {
    int v8 = *a2;
    std::string::push_back(&__p, *a2);
    if (v8 == 10)
    {
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v9 = &v14;
      }
      else {
        int v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
      }
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v14.__r_.__value_.__l.__size_;
      }
      std::string::append(&__p, (const std::string::value_type *)v9, size);
    }
    ++a2;
    --v6;
  }
  while (v6);
LABEL_19:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:nn180100]((uint64_t)a1, v11 + 1);
  if (*((char *)a1 + 23) < 0) {
    a1 = (void **)*a1;
  }
  if (v11)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a1, p_p, v11);
  }
  *(_WORD *)((char *)a1 + v11) = 10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

{
  uint64_t v6;
  std::string::value_type *v7;
  int v8;
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *p_p;
  std::string __p;
  std::string v14;

  std::string::basic_string[abi:nn180100]<0>(&v14, "");
  for (; a3; --a3)
    std::string::append(&v14, "  ");
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v14;
  }
  if (a2[23] < 0)
  {
    std::string::size_type v7 = a2;
    a2 = *(std::string::value_type **)a2;
    uint64_t v6 = *((void *)v7 + 1);
    if (!v6) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v6 = a2[23];
    if (!a2[23]) {
      goto LABEL_19;
    }
  }
  do
  {
    int v8 = *a2;
    std::string::push_back(&__p, *a2);
    if (v8 == 10)
    {
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v9 = &v14;
      }
      else {
        int v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
      }
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v14.__r_.__value_.__l.__size_;
      }
      std::string::append(&__p, (const std::string::value_type *)v9, size);
    }
    ++a2;
    --v6;
  }
  while (v6);
LABEL_19:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:nn180100]((uint64_t)a1, v11 + 1);
  if (*((char *)a1 + 23) < 0) {
    a1 = (void **)*a1;
  }
  if (v11)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a1, p_p, v11);
  }
  *(_WORD *)((char *)a1 + v11) = 10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 48 * v1;
    BOOL result = *(void *)result + 8;
    do
    {
      uint64_t v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_1F25DA840;
      *((void *)v4 + 3) = v9;
      uint64_t v5 = (char *)v4 + 40;
      BOOL result = (uint64_t)v4 + 48;
      v2 += 48;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::initEmpty(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 48 * v1;
    BOOL result = *(void *)result + 8;
    do
    {
      uint64_t v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_1F25C4628;
      *((void *)v4 + 3) = v9;
      uint64_t v5 = (char *)v4 + 40;
      BOOL result = (uint64_t)v4 + 48;
      v2 += 48;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::ValueHandleBase::ValueHandleBase(llvm::ValueHandleBase *this, unsigned int a2, void *a3)
{
  *(void *)this = 2 * a2;
  *((void *)this + 1) = 0;
  uint64_t v4 = a3[2];
  *((void *)this + 2) = v4;
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::AddToExistingUseList(this, (llvm::ValueHandleBase **)(*a3 & 0xFFFFFFFFFFFFFFF8));
  }
  return this;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::initEmpty(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 48 * v1;
    BOOL result = *(void *)result + 8;
    do
    {
      uint64_t v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_1F25C4600;
      *((void *)v4 + 3) = v9;
      uint64_t v5 = (char *)v4 + 40;
      BOOL result = (uint64_t)v4 + 48;
      v2 += 48;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

void std::deque<llvm::MDNode const*>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 6) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      uint64_t v13 = *(void *)v5;
      std::string::size_type v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          long long v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v42);
          int v45 = &v43[8 * (v42 >> 2)];
          uint64_t v46 = (uint64_t *)a1[1];
          uint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            uint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            long long v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)long long v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          uint64_t v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          char v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            std::string v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            std::string v23 = (char *)a1[1];
          }
          uint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = a1[4] + v8;
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    unsigned __int8 v25 = (char *)a1[3];
    std::string v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      std::string v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          int v54 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v52);
          uint64_t v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v56 = (uint64_t *)a1[1];
          v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            char v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)char v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          uint64_t v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        uint64_t v63 = (char *)a1[1];
        uint64_t v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = (uint64_t)&v64[-*a1] >> 2;
            }
            v99 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v98);
            v101 = &v99[8 * (v98 >> 2)];
            v102 = (uint64_t *)a1[1];
            uint64_t v64 = v101;
            uint64_t v103 = a1[2] - (void)v102;
            if (v103)
            {
              uint64_t v64 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v104 = 8 * (v103 >> 3);
              v105 = &v99[8 * (v98 >> 2)];
              do
              {
                uint64_t v106 = *v102++;
                *(void *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            uint64_t v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v64;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              uint64_t v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              uint64_t v63 = (char *)a1[1];
            }
            uint64_t v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)uint64_t v64 = v65;
      }
      else
      {
        *(void *)uint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    int v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v30);
    uint64_t v33 = v32;
    BOOL v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v111 = v35;
    *(void *)&long long v35 = v34;
    *((void *)&v35 + 1) = &v31[8 * v32];
    long long v108 = v35;
    char v36 = operator new(0x1000uLL);
    if (v24 == v33)
    {
      uint64_t v37 = 8 * v24;
      if (v6 >= 1)
      {
        uint64_t v38 = v37 >> 3;
        if (v38 >= -1) {
          unint64_t v39 = v38 + 1;
        }
        else {
          unint64_t v39 = v38 + 2;
        }
        v34 -= 8 * (v39 >> 1);
        *((void *)&v40 + 1) = *((void *)&v108 + 1);
        *(void *)&long long v41 = v111;
        *(void *)&long long v40 = v34;
        *((void *)&v41 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      int v76 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v75);
      BOOL v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v41 = v76;
      *((void *)&v41 + 1) = v34;
      *(void *)&long long v40 = v34;
      *((void *)&v40 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v108 = v40;
      long long v111 = v41;
      operator delete(v31);
    }
    long long v40 = v108;
    long long v41 = v111;
LABEL_56:
    *(void *)BOOL v34 = v36;
    *(void *)&long long v40 = v40 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (void *)*((void *)&v41 + 1);
      if (*((void *)&v41 + 1) == (void)v41)
      {
        v81 = (unsigned char *)v40;
        if ((unint64_t)v40 >= *((void *)&v40 + 1))
        {
          if (*((void *)&v40 + 1) == *((void *)&v41 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v40 + 1) - *((void *)&v41 + 1)) >> 2;
          }
          uint64_t v87 = 2 * v86;
          uint64_t v88 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v86);
          uint64_t v80 = &v88[(v87 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v90 = v80;
          uint64_t v91 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            uint64_t v90 = &v80[v91 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v92 = 8 * (v91 >> 3);
            v93 = v80;
            char v94 = v79;
            do
            {
              uint64_t v95 = *v94++;
              *(void *)v93 = v95;
              v93 += 8;
              v92 -= 8;
            }
            while (v92);
          }
          *(void *)&long long v41 = v88;
          *((void *)&v41 + 1) = v80;
          *(void *)&long long v40 = v90;
          *((void *)&v40 + 1) = &v88[8 * v89];
          if (v79)
          {
            long long v109 = v40;
            long long v113 = v41;
            operator delete(v79);
            long long v40 = v109;
            long long v41 = v113;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v40 + 1) - v40) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v40 + 8 * (v83 >> 1);
          uint64_t v80 = (char *)(v85 - (v40 - *((void *)&v41 + 1)));
          if ((void)v40 == *((void *)&v41 + 1))
          {
            v81 = (unsigned char *)*((void *)&v41 + 1);
          }
          else
          {
            uint64_t v110 = *((void *)&v40 + 1);
            uint64_t v112 = v41;
            memmove((void *)(v85 - (v40 - *((void *)&v41 + 1))), *((const void **)&v41 + 1), v40 - *((void *)&v41 + 1));
            *((void *)&v40 + 1) = v110;
            *(void *)&long long v41 = v112;
          }
          *((void *)&v41 + 1) = v80;
          *(void *)&long long v40 = &v81[8 * v84];
        }
      }
      else
      {
        uint64_t v80 = (char *)*((void *)&v41 + 1);
      }
      uint64_t v96 = *(void *)(i - 8);
      *((void *)v80 - 1) = v96;
      *((void *)&v41 + 1) -= 8;
    }
    v97 = (char *)*a1;
    *(_OWORD *)a1 = v41;
    *((_OWORD *)a1 + 1) = v40;
    if (v97) {
      operator delete(v97);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(void *)(*(void *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

BOOL AGCLLVMAGPVertexShaderGen4::constructReply(AGCLLVMAGPVertexShaderGen4 *this)
{
  BOOL v2 = AGCLLVMAGPVertexShaderRegular::constructReply(this);
  if (v2)
  {
    uint64_t v3 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v4 = (flatbuffers::FlatBufferBuilder *)(v3 + 2568);
    int v5 = *((unsigned __int8 *)this + 5033);
    int v6 = *((unsigned __int8 *)this + 5034);
    int v7 = *((unsigned __int8 *)this + 5092);
    int v8 = *((unsigned __int8 *)this + 5093);
    int v9 = *((unsigned __int8 *)this + 5094);
    int v10 = *((unsigned __int8 *)this + 5095);
    v3[2638] = 1;
    int v11 = *((_DWORD *)v3 + 650) - *((_DWORD *)v3 + 654) + *((_DWORD *)v3 + 652);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)v3 + 321, 14, v10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 12, v9, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 10, v8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 8, v7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 6, v6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 4, v5, 0);
    int v12 = flatbuffers::FlatBufferBuilder::EndTable(v4, v11);
    std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v59, (uint64_t)this + *(void *)(*(void *)this - 24) + 1664);
    unint64_t v13 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 1688);
    BOOL v58 = v2;
    if (v13)
    {
      if (v13 >> 62) {
LABEL_49:
      }
        abort();
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v13);
      BOOL v16 = &v14[4 * v15];
    }
    else
    {
      uint64_t v14 = 0;
      BOOL v16 = 0;
    }
    uint64_t v17 = v60;
    int v57 = v12;
    if (v60)
    {
      uint64_t v18 = v14;
      while (1)
      {
        uint64_t v19 = (char *)this + *(void *)(*(void *)this - 24);
        int Key = llvm::StringMapImpl::FindKey();
        if (Key == -1 || Key == (unint64_t)*((unsigned int *)v19 + 824)) {
          goto LABEL_18;
        }
        int v21 = *((char *)v17 + 39);
        int64_t v22 = v21 >= 0 ? (const char *)(v17 + 2) : (const char *)v17[2];
        unint64_t v23 = v21 >= 0 ? *((unsigned __int8 *)v17 + 39) : (unint64_t)v17[3];
        int String = flatbuffers::FlatBufferBuilder::CreateString((AGCLLVMAGPVertexShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 2568), v22, v23);
        unsigned __int8 v25 = (char *)this + *(void *)(*(void *)this - 24);
        std::string v26 = (flatbuffers::FlatBufferBuilder *)(v25 + 2568);
        v25[2638] = 1;
        int v27 = *((_DWORD *)v25 + 650) - *((_DWORD *)v25 + 654) + *((_DWORD *)v25 + 652);
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v25 + 2568), 4, String);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v26, 6, *((unsigned int *)v17 + 10), 0);
        int v28 = flatbuffers::FlatBufferBuilder::EndTable(v26, v27);
        int v29 = v28;
        if (v18 < v16) {
          break;
        }
        uint64_t v31 = (v18 - v14) >> 2;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62) {
          goto LABEL_49;
        }
        if ((v16 - v14) >> 1 > v32) {
          unint64_t v32 = (v16 - v14) >> 1;
        }
        if ((unint64_t)(v16 - v14) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33) {
          unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v33);
        }
        else {
          uint64_t v34 = 0;
        }
        long long v35 = (char *)(v33 + 4 * v31);
        *(_DWORD *)long long v35 = v29;
        unint64_t v30 = v35 + 4;
        while (v18 != v14)
        {
          int v36 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v35 - 1) = v36;
          v35 -= 4;
        }
        BOOL v16 = (char *)(v33 + 4 * v34);
        if (v14) {
          operator delete(v14);
        }
        uint64_t v14 = v35;
LABEL_19:
        uint64_t v17 = (uint64_t **)*v17;
        uint64_t v18 = v30;
        if (!v17) {
          goto LABEL_37;
        }
      }
      *(_DWORD *)uint64_t v18 = v28;
      v18 += 4;
LABEL_18:
      unint64_t v30 = v18;
      goto LABEL_19;
    }
    unint64_t v30 = v14;
LABEL_37:
    uint64_t v37 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v38 = (flatbuffers::FlatBufferBuilder *)(v37 + 2568);
    v37[2638] = 1;
    flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v37 + 2568), v30 - v14, 4uLL);
    flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v37 + 2568), v30 - v14, 4uLL);
    uint64_t v39 = v30 - v14;
    if (v39) {
      long long v40 = v14;
    }
    else {
      long long v40 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslatorG11::VisibleFunction>,std::allocator<flatbuffers::Offset<AGCCodeTranslatorG11::VisibleFunction>>>(std::vector<flatbuffers::Offset<AGCCodeTranslatorG11::VisibleFunction>> const&)::t;
    }
    if (v39)
    {
      uint64_t v41 = v39 >> 2;
      unint64_t v42 = v40 - 4;
      do
      {
        uint64_t v43 = v41 - 1;
        int v44 = *(_DWORD *)&v42[4 * v41];
        flatbuffers::FlatBufferBuilder::Align(v38, 4uLL);
        flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v38, *((_DWORD *)v37 + 650) - *((_DWORD *)v37 + 654) + *((_DWORD *)v37 + 652) - v44 + 4);
        uint64_t v41 = v43;
      }
      while (v43);
    }
    v37[2638] = 0;
    int v45 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v38, (unint64_t)v39 >> 2);
    uint64_t v46 = (char *)this + *(void *)(*(void *)this - 24);
    v46[2638] = 1;
    int v47 = *((_DWORD *)v46 + 650) - *((_DWORD *)v46 + 654) + *((_DWORD *)v46 + 652);
    if (v45)
    {
      int v48 = v45;
      flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v46 + 2568), 4uLL);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v46 + 321, 4, *((_DWORD *)v46 + 650) - *((_DWORD *)v46 + 654) + *((_DWORD *)v46 + 652) - v48 + 4);
    }
    int v49 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v46 + 2568), v47);
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v59);
    if (v14) {
      operator delete(v14);
    }
    uint64_t v50 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v51 = (flatbuffers::FlatBufferBuilder *)(v50 + 2568);
    int v52 = v49;
    v50[2638] = 1;
    int v53 = *((_DWORD *)v50 + 650) - *((_DWORD *)v50 + 654) + *((_DWORD *)v50 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>((flatbuffers::FlatBufferBuilder *)(v50 + 2568), v52);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v51, v57);
    int v54 = flatbuffers::FlatBufferBuilder::EndTable(v51, v53);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMAGPVertexShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 2568), v54, v55);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG11::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMAGPVertexShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
    return v58;
  }
  return v2;
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(flatbuffers::FlatBufferBuilder *result, int a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 4, v4);
  }
  return result;
}

flatbuffers::FlatBufferBuilder *AGCLLVMObject::constructFlatReply(AGCLLVMObject *this)
{
  BOOL v2 = (AGCLLVMObject *)((char *)this + 2472);
  uint64_t v3 = (const char *)(*(uint64_t (**)(AGCLLVMObject *))(*(void *)this + 56))(this);
  size_t v4 = strlen(v3);
  int String = flatbuffers::FlatBufferBuilder::CreateString(v2, v3, v4);
  int v6 = (*(uint64_t (**)(AGCLLVMObject *))(*(void *)this + 80))(this);
  LOBYTE(__p) = v6;
  if (v6) {
    int v7 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(v2, (const unsigned __int8 *)&__p, 1uLL);
  }
  else {
    int v7 = 0;
  }
  int v86 = 0;
  uint64_t v8 = *((void *)this + 87);
  if (!*((unsigned char *)this + 1616))
  {
    if (v8)
    {
      uint64_t v14 = (char *)this + 1256;
      uint64_t v15 = 696;
      if (*((void *)this + 88)) {
        uint64_t v14 = (char *)this + 696;
      }
      else {
        uint64_t v15 = 1256;
      }
      BOOL v16 = *(unsigned int **)((char *)this + v15);
      uint64_t v17 = *((void *)v14 + 1);
      if (v16) {
        BOOL v18 = v17 == 0;
      }
      else {
        BOOL v18 = 1;
      }
      if (v18)
      {
LABEL_65:
        BOOL v23 = 0;
        goto LABEL_108;
      }
    }
    else
    {
      BOOL v23 = 0;
      BOOL v16 = (unsigned int *)*((void *)this + 157);
      if (!v16 || !*((void *)this + 158)) {
        goto LABEL_108;
      }
      uint64_t v17 = 1;
    }
    uint64_t v31 = 0;
    if (v16 && v17) {
      uint64_t v31 = (int *)((char *)v16 + *v16);
    }
    unint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
    if (*v32 < 5u)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v33 = (int *)v32[2];
      if (v33) {
        unint64_t v33 = (int *)((char *)v33 + (void)v31 + *(unsigned int *)((char *)v33 + (void)v31));
      }
    }
    uint64_t v34 = (unsigned __int16 *)((char *)v33 - *v33);
    if (*v34 >= 0x39u && v34[28])
    {
      if (v8)
      {
        if (*((void *)this + 88)) {
          long long v35 = (unsigned int **)((char *)this + 696);
        }
        else {
          long long v35 = (unsigned int **)((char *)this + 1256);
        }
      }
      else
      {
        long long v35 = (unsigned int **)((char *)this + 1256);
      }
      int v54 = 0;
      if (*v35 && v35[1]) {
        int v54 = (int *)((char *)*v35 + **v35);
      }
      uint64_t v55 = (unsigned __int16 *)((char *)v54 - *v54);
      if (*v55 >= 5u && (uint64_t v56 = v55[2]) != 0) {
        int v57 = (int *)((char *)v54 + v56 + *(unsigned int *)((char *)v54 + v56));
      }
      else {
        int v57 = 0;
      }
      BOOL v58 = (unsigned __int16 *)((char *)v57 - *v57);
      if (*v58 >= 0x39u && (uint64_t v59 = v58[28]) != 0) {
        char v60 = (unsigned int *)((char *)v57 + v59 + *(unsigned int *)((char *)v57 + v59));
      }
      else {
        char v60 = 0;
      }
      BOOL v23 = AGCLLVMObject::extractPhaseOffsets((uint64_t)this, v60, &v86);
      goto LABEL_108;
    }
    goto LABEL_65;
  }
  if (v8)
  {
    int v9 = (char *)this + 1256;
    uint64_t v10 = 696;
    if (*((void *)this + 88)) {
      int v9 = (char *)this + 696;
    }
    else {
      uint64_t v10 = 1256;
    }
    int v11 = *(unsigned int **)((char *)this + v10);
    uint64_t v12 = *((void *)v9 + 1);
    if (v11) {
      BOOL v13 = v12 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_37;
    }
  }
  else
  {
    int v11 = (unsigned int *)*((void *)this + 157);
    if (!v11 || !*((void *)this + 158)) {
      goto LABEL_37;
    }
    uint64_t v12 = 1;
  }
  uint64_t v19 = 0;
  if (v11 && v12) {
    uint64_t v19 = (int *)((char *)v11 + *v11);
  }
  uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 < 5u)
  {
    int v21 = 0;
  }
  else
  {
    int v21 = (int *)v20[2];
    if (v21) {
      int v21 = (int *)((char *)v21 + (void)v19 + *(unsigned int *)((char *)v21 + (void)v19));
    }
  }
  int64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 0x39u && v22[28]) {
    goto LABEL_45;
  }
LABEL_37:
  BOOL v23 = 0;
  uint64_t v24 = (unsigned int *)*((void *)this + 203);
  if (v24 && *((void *)this + 204))
  {
    unsigned __int8 v25 = (int *)((char *)v24 + *v24);
    std::string v26 = (unsigned __int16 *)((char *)v25 - *v25);
    if (*v26 >= 5u && (uint64_t v27 = v26[2]) != 0) {
      int v28 = (int *)((char *)v25 + v27 + *(unsigned int *)((char *)v25 + v27));
    }
    else {
      int v28 = 0;
    }
    int v29 = (unsigned __int16 *)((char *)v28 - *v28);
    if (*v29 >= 0x39u && v29[28])
    {
LABEL_45:
      if (v8)
      {
        if (*((void *)this + 88)) {
          unint64_t v30 = (unsigned int **)((char *)this + 696);
        }
        else {
          unint64_t v30 = (unsigned int **)((char *)this + 1256);
        }
      }
      else
      {
        unint64_t v30 = (unsigned int **)((char *)this + 1256);
      }
      int v36 = 0;
      if (*v30 && v30[1]) {
        int v36 = (int *)((char *)*v30 + **v30);
      }
      uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
      if (*v37 >= 5u && (uint64_t v38 = v37[2]) != 0) {
        uint64_t v39 = (int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
      }
      else {
        uint64_t v39 = 0;
      }
      long long v40 = (unsigned __int16 *)((char *)v39 - *v39);
      if (*v40 >= 0x39u && (uint64_t v41 = v40[28]) != 0) {
        unint64_t v42 = (int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
      }
      else {
        unint64_t v42 = 0;
      }
      uint64_t v43 = 0;
      int v44 = (unsigned int *)*((void *)this + 203);
      if (v44 && *((void *)this + 204)) {
        uint64_t v43 = (int *)((char *)v44 + *v44);
      }
      int v45 = (unsigned __int16 *)((char *)v43 - *v43);
      if (*v45 >= 5u && (uint64_t v46 = v45[2]) != 0) {
        int v47 = (int *)((char *)v43 + v46 + *(unsigned int *)((char *)v43 + v46));
      }
      else {
        int v47 = 0;
      }
      int v48 = (unsigned __int16 *)((char *)v47 - *v47);
      if (*v48 >= 0x39u && (uint64_t v49 = v48[28]) != 0) {
        uint64_t v50 = (int *)((char *)v47 + v49 + *(unsigned int *)((char *)v47 + v49));
      }
      else {
        uint64_t v50 = 0;
      }
      std::string __p = 0;
      int8x8_t v84 = 0;
      uint64_t v85 = 0;
      p_p = &__p;
      v81 = (char *)this + 1664;
      AGCLLVMObject::extractPhaseOffsetsWithAux(flatbuffers::Vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const*,flatbuffers::Vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const*,flatbuffers::Offset<flatbuffers::Vector<unsigned int>> &)::$_0::operator()(&p_p, v42);
      AGCLLVMObject::extractPhaseOffsetsWithAux(flatbuffers::Vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const*,flatbuffers::Vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const*,flatbuffers::Offset<flatbuffers::Vector<unsigned int>> &)::$_0::operator()(&p_p, v50);
      if ((void *)v84 == __p) {
        uint64_t v51 = (const unsigned __int8 *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
      }
      else {
        uint64_t v51 = (const unsigned __int8 *)__p;
      }
      int v86 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned int>(v2, v51, (uint64_t)(*(void *)&v84 - (void)__p) >> 2);
      int v52 = __p;
      int8x8_t v53 = v84;
      if (__p)
      {
        int8x8_t v84 = (int8x8_t)__p;
        operator delete(__p);
      }
      BOOL v23 = *(void *)&v53 != (void)v52;
      goto LABEL_108;
    }
    goto LABEL_65;
  }
LABEL_108:
  (*(void (**)(void **__return_ptr, AGCLLVMObject *))(*(void *)this + 128))(&__p, this);
  if (v85 >= 0) {
    uint64_t v61 = (const char *)&__p;
  }
  else {
    uint64_t v61 = (const char *)__p;
  }
  if (v85 >= 0) {
    unint64_t v62 = HIBYTE(v85);
  }
  else {
    unint64_t v62 = (unint64_t)v84;
  }
  int v63 = flatbuffers::FlatBufferBuilder::CreateString(v2, v61, v62);
  if (SHIBYTE(v85) < 0) {
    operator delete(__p);
  }
  *((unsigned char *)this + 2542) = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 6, *((_DWORD *)this + 818));
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v2, 18, v63);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v2, 8, String);
  if ((*(unsigned int (**)(AGCLLVMObject *))(*(void *)this + 80))(this)) {
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v2, 4, v7);
  }
  if (v23) {
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v2, 14, v86);
  }
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)&__p, (uint64_t)this + 1664);
  (*(void (**)(void ***__return_ptr, AGCLLVMObject *))(*(void *)this + 48))(&p_p, this);
  int v64 = (char)v82;
  uint64_t v65 = p_p;
  if ((v82 & 0x80u) == 0) {
    p_p_p = (uint64_t *)&p_p;
  }
  else {
    p_p_p = (uint64_t *)p_p;
  }
  if ((v82 & 0x80u) == 0) {
    unint64_t v67 = v82;
  }
  else {
    unint64_t v67 = (unint64_t)v81;
  }
  unint64_t v68 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](p_p_p, v67);
  int8x8_t v69 = v84;
  if (!*(void *)&v84)
  {
    uint64_t v74 = 0;
    if (v64 < 0) {
      goto LABEL_148;
    }
    goto LABEL_149;
  }
  unint64_t v70 = v68;
  uint8x8_t v71 = (uint8x8_t)vcnt_s8(v84);
  v71.i16[0] = vaddlv_u8(v71);
  unint64_t v72 = v71.u32[0];
  if (v71.u32[0] > 1uLL)
  {
    unint64_t v73 = v68;
    if (v68 >= *(void *)&v84) {
      unint64_t v73 = v68 % *(void *)&v84;
    }
  }
  else
  {
    unint64_t v73 = (*(void *)&v84 - 1) & v68;
  }
  unint64_t v75 = (uint64_t **)*((void *)__p + v73);
  if (!v75)
  {
    uint64_t v74 = 0;
    goto LABEL_147;
  }
  uint64_t v74 = *v75;
  if (!*v75) {
    goto LABEL_147;
  }
  while (1)
  {
    unint64_t v76 = v74[1];
    if (v76 == v70)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v74 + 16, (unsigned __int8 *)&p_p)) {
        goto LABEL_147;
      }
      goto LABEL_143;
    }
    if (v72 > 1)
    {
      if (v76 >= *(void *)&v69) {
        v76 %= *(void *)&v69;
      }
    }
    else
    {
      v76 &= *(void *)&v69 - 1;
    }
    if (v76 != v73) {
      break;
    }
LABEL_143:
    uint64_t v74 = (uint64_t *)*v74;
    if (!v74) {
      goto LABEL_147;
    }
  }
  uint64_t v74 = 0;
LABEL_147:
  if (v64 < 0) {
LABEL_148:
  }
    operator delete(v65);
LABEL_149:
  if (v74 && (*(unsigned int (**)(AGCLLVMObject *))(*(void *)this + 64))(this) != 8)
  {
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 16, *((_DWORD *)v74 + 10));
    unsigned int v77 = (*(uint64_t (**)(AGCLLVMObject *))(*(void *)this + 64))(this);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 40, (v77 < 0x1E) & (0x200002C1u >> v77), 0);
  }
  int v78 = (*(uint64_t (**)(AGCLLVMObject *))(*(void *)this + 104))(this);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 42, v78, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 50, *((unsigned __int8 *)this + 456), 0);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&__p);
  return v2;
}

uint64_t AGCLLVMObject::requiresDebugInfo(AGCLLVMObject *this)
{
  return *((unsigned __int8 *)this + 2760);
}

void AGCLLVMObject::debugName(AGCLLVMObject *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 3247) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 403), *((void *)this + 404));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 3224);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 405);
  }
}

void *AGCLLVMObject::wrapperName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.main");
}

uint64_t AGCLLVMUserObject::constructFlatReply(AGCLLVMUserObject *this)
{
  int64_t v1 = (int64_t)this;
  uint64_t v2 = *((void *)this + 112);
  uint64_t v3 = *((void *)this + 113);
  uint64_t v119 = *((void *)this + 116);
  uint64_t v120 = *((void *)this + 115);
  uint64_t v117 = v3;
  uint64_t v118 = v2;
  if (v2 == v3)
  {
    int v116 = 0;
  }
  else
  {
    if (v3 - v2 < 0) {
      goto LABEL_168;
    }
    size_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((v3 - v2) >> 4);
    int v6 = v4;
    int v7 = *(_OWORD **)(v1 + 896);
    uint64_t v8 = *(_OWORD **)(v1 + 904);
    if (v7 == v8)
    {
      BOOL v13 = v4;
    }
    else
    {
      int v9 = v4;
      uint64_t v10 = &v4[4 * v5];
      do
      {
        *(_OWORD *)uint64_t v125 = *v7;
        int v11 = AIRConstSampler::constructFlatReply((AIRConstSampler *)v125, (flatbuffers::FlatBufferBuilder *)(v1 + 2472 + *(void *)(*(void *)v1 - 24)));
        int v12 = v11;
        if (v9 >= v10)
        {
          uint64_t v14 = (v9 - v6) >> 2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            goto LABEL_168;
          }
          if ((v10 - v6) >> 1 > v15) {
            unint64_t v15 = (v10 - v6) >> 1;
          }
          if ((unint64_t)(v10 - v6) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          BOOL v18 = (char *)(v16 + 4 * v14);
          *(_DWORD *)BOOL v18 = v12;
          BOOL v13 = v18 + 4;
          while (v9 != v6)
          {
            int v19 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          uint64_t v10 = (char *)(v16 + 4 * v17);
          if (v6) {
            operator delete(v6);
          }
          int v6 = v18;
        }
        else
        {
          *(_DWORD *)int v9 = v11;
          BOOL v13 = v9 + 4;
        }
        ++v7;
        int v9 = v13;
      }
      while (v7 != v8);
    }
    if (v13 == v6) {
      uint64_t v20 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::ConstantSampler>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::ConstantSampler>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::ConstantSampler>> const&)::t;
    }
    else {
      uint64_t v20 = v6;
    }
    int v116 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>(v1 + *(void *)(*(void *)v1 - 24) + 2472, (uint64_t)v20, (v13 - v6) >> 2);
    if (v6) {
      operator delete(v6);
    }
  }
  if (v120 == v119)
  {
    int v114 = 0;
    int v115 = 0;
    unint64_t v28 = v1 & 0xFFFFFFFFFFFFLL | 0x854B000000000000;
  }
  else
  {
    v125[0] = 0;
    v125[1] = 0;
    uint64_t v126 = 0;
    std::string __p = 0;
    size_t v123 = 0;
    uint64_t v124 = 0;
    std::vector<unsigned long long>::reserve(v125, (uint64_t)(*(void *)(v1 + 928) - *(void *)(v1 + 920)) >> 4);
    std::vector<unsigned long long>::reserve(&__p, (uint64_t)(*(void *)(v1 + 928) - *(void *)(v1 + 920)) >> 4);
    int v21 = *(uint64_t **)(v1 + 920);
    int64_t v22 = *(uint64_t **)(v1 + 928);
    p_p = v125;
    if (v21 != v22)
    {
      do
      {
        uint64_t v23 = *v21;
        v21 += 2;
        uint64_t v127 = v23;
        std::back_insert_iterator<std::vector<unsigned long long>>::operator=[abi:nn180100]((uint64_t *)&p_p, &v127);
      }
      while (v21 != v22);
      uint64_t v24 = *(void *)(v1 + 920);
      uint64_t v25 = *(void *)(v1 + 928);
      p_p = &__p;
      while (v24 != v25)
      {
        uint64_t v127 = *(void *)(v24 + 8);
        std::back_insert_iterator<std::vector<unsigned long long>>::operator=[abi:nn180100]((uint64_t *)&p_p, &v127);
        v24 += 16;
      }
    }
    if (v125[1] == v125[0]) {
      std::string v26 = (const unsigned __int8 *)&flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
    }
    else {
      std::string v26 = (const unsigned __int8 *)v125[0];
    }
    int v115 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((flatbuffers::FlatBufferBuilder *)(v1 + *(void *)(*(void *)v1 - 24) + 2472), v26, ((char *)v125[1] - (char *)v125[0]) >> 3);
    if (v123 == __p) {
      uint64_t v27 = (const unsigned __int8 *)&flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
    }
    else {
      uint64_t v27 = (const unsigned __int8 *)__p;
    }
    int v114 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((flatbuffers::FlatBufferBuilder *)(v1 + *(void *)(*(void *)v1 - 24) + 2472), v27, (v123 - (unsigned char *)__p) >> 3);
    if (__p)
    {
      size_t v123 = __p;
      operator delete(__p);
    }
    unint64_t v28 = v1 & 0xFFFFFFFFFFFFLL | 0x854B000000000000;
    if (v125[0])
    {
      v125[1] = v125[0];
      operator delete(v125[0]);
    }
  }
  int v29 = (char *)(v1 + *(void *)(*(void *)v1 - 24));
  if ((*(unsigned int (**)(char *))(*(void *)v29 + 176))(v29) == 2
    || (*(unsigned int (**)(char *))(*(void *)v29 + 176))(v29) == 1)
  {
    unint64_t v30 = (unsigned int **)(v1 + *(void *)(*(void *)v1 - 24));
    uint64_t v31 = v30[50];
    if (v30[87])
    {
      unint64_t v32 = v30 + 87;
      if (!v30[88]) {
        unint64_t v32 = v30 + 157;
      }
    }
    else
    {
      unint64_t v32 = v30 + 157;
    }
    uint64_t v34 = *v32;
    unint64_t v33 = v32[1];
    if (v34) {
      BOOL v35 = v33 == 0;
    }
    else {
      BOOL v35 = 1;
    }
    if (v35) {
      int v36 = 0;
    }
    else {
      int v36 = (char *)v34 + *v34;
    }
    BOOL v37 = (*((unsigned int (**)(unsigned int **))*v30 + 22))(v30) == 2;
    (*(void (**)(void **__return_ptr, unsigned int *, char *, BOOL))(*(void *)v31 + 928))(v125, v31, v36, v37);
    uint64_t v38 = (void **)v125[0];
    if (v125[0] == &v125[1])
    {
      uint64_t v39 = 0;
      long long v40 = 0;
    }
    else
    {
      uint64_t v39 = 0;
      long long v40 = 0;
      uint64_t v41 = 0;
      do
      {
        unint64_t v42 = (char *)(v1 + *(void *)(*(void *)v1 - 24));
        uint64_t v43 = (flatbuffers::FlatBufferBuilder *)(v42 + 2472);
        int v45 = *((_DWORD *)v38 + 7);
        int v44 = *((_DWORD *)v38 + 8);
        v42[2542] = 1;
        int v46 = *((_DWORD *)v42 + 626) - *((_DWORD *)v42 + 630) + *((_DWORD *)v42 + 628);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v42 + 309, 6, v44);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v43, 4, v45);
        int v47 = flatbuffers::FlatBufferBuilder::EndTable(v43, v46);
        int v48 = v47;
        if (v40 >= v41)
        {
          uint64_t v49 = (v40 - v39) >> 2;
          unint64_t v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 62) {
            goto LABEL_168;
          }
          if ((v41 - v39) >> 1 > v50) {
            unint64_t v50 = (v41 - v39) >> 1;
          }
          if ((unint64_t)(v41 - v39) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v51 = v50;
          }
          if (v51)
          {
            if (v51 >> 62) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            int v52 = (char *)operator new(4 * v51);
          }
          else
          {
            int v52 = 0;
          }
          int8x8_t v53 = &v52[4 * v49];
          *(_DWORD *)int8x8_t v53 = v48;
          int v54 = v53 + 4;
          while (v40 != v39)
          {
            int v55 = *((_DWORD *)v40 - 1);
            v40 -= 4;
            *((_DWORD *)v53 - 1) = v55;
            v53 -= 4;
          }
          uint64_t v41 = &v52[4 * v51];
          if (v39) {
            operator delete(v39);
          }
          uint64_t v39 = v53;
          long long v40 = v54;
        }
        else
        {
          *(_DWORD *)long long v40 = v47;
          v40 += 4;
        }
        uint64_t v56 = (void **)v38[1];
        if (v56)
        {
          do
          {
            int v57 = v56;
            uint64_t v56 = (void **)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            int v57 = (void **)v38[2];
            BOOL v35 = *v57 == v38;
            uint64_t v38 = v57;
          }
          while (!v35);
        }
        uint64_t v38 = v57;
      }
      while (v57 != &v125[1]);
    }
    BOOL v58 = (char *)(v1 + *(void *)(*(void *)v1 - 24));
    v58[2542] = 1;
    flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v58 + 2472), v40 - v39, 4uLL);
    flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v58 + 2472), v40 - v39, 4uLL);
    uint64_t v59 = v40 - v39;
    if (v59) {
      char v60 = v39;
    }
    else {
      char v60 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::BufferGPUVAMask>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::BufferGPUVAMask>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::BufferGPUVAMask>> const&)::t;
    }
    if (v59)
    {
      uint64_t v61 = v59 >> 2;
      unint64_t v62 = v60 - 4;
      do
      {
        uint64_t v63 = v61 - 1;
        int v64 = *(_DWORD *)&v62[4 * v61];
        flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v58 + 2472), 4uLL);
        flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)(v58 + 2472), *((_DWORD *)v58 + 626) - *((_DWORD *)v58 + 630) + *((_DWORD *)v58 + 628) - v64 + 4);
        uint64_t v61 = v63;
      }
      while (v63);
    }
    v58[2542] = 0;
    int v65 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)(v58 + 2472), (unint64_t)v59 >> 2);
    if (v39) {
      operator delete(v39);
    }
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy((void *)v125[1]);
  }
  else
  {
    int v65 = 0;
  }
  if (!*(_DWORD *)(v1 + 3740))
  {
    int v73 = 0;
    goto LABEL_142;
  }
  uint64_t v66 = (AGCLLVMUserObject *)v1;
  uint64_t v67 = *(void *)(v1 + 3760);
  v121 = v66;
  uint64_t v68 = *((void *)v66 + 469);
  uint64_t v69 = v67 - v68;
  if (v67 == v68)
  {
    unint64_t v70 = 0;
    unint64_t v72 = 0;
    goto LABEL_105;
  }
  if (v69 < 0) {
LABEL_168:
  }
    abort();
  unint64_t v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v69 >> 5);
  unint64_t v72 = &v70[4 * v71];
  uint64_t v68 = *((void *)v121 + 469);
  uint64_t v67 = *((void *)v121 + 470);
LABEL_105:
  int v113 = v65;
  if (v68 == v67)
  {
    int v86 = v70;
  }
  else
  {
    uint64_t v74 = v70;
    do
    {
      unint64_t v75 = v28;
      unint64_t v76 = (char *)v121 + *(void *)(*(void *)v121 - 24);
      int v77 = *(char *)(v68 + 23);
      if (v77 >= 0) {
        int v78 = (const char *)v68;
      }
      else {
        int v78 = *(const char **)v68;
      }
      if (v77 >= 0) {
        unint64_t v79 = *(unsigned __int8 *)(v68 + 23);
      }
      else {
        unint64_t v79 = *(void *)(v68 + 8);
      }
      int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(v76 + 2472), v78, v79);
      int v81 = *(_DWORD *)(v68 + 24);
      int v82 = String;
      v76[2542] = 1;
      int v83 = *((_DWORD *)v76 + 626) - *((_DWORD *)v76 + 630) + *((_DWORD *)v76 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v76 + 309, 6, v81);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v76 + 2472), 4, v82);
      int v84 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v76 + 2472), v83);
      int v85 = v84;
      if (v74 >= v72)
      {
        uint64_t v87 = (v74 - v70) >> 2;
        unint64_t v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 62) {
          goto LABEL_168;
        }
        if ((v72 - v70) >> 1 > v88) {
          unint64_t v88 = (v72 - v70) >> 1;
        }
        if ((unint64_t)(v72 - v70) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v89 = v88;
        }
        unint64_t v28 = v75;
        if (v89) {
          unint64_t v89 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v89);
        }
        else {
          uint64_t v90 = 0;
        }
        uint64_t v91 = (char *)(v89 + 4 * v87);
        *(_DWORD *)uint64_t v91 = v85;
        int v86 = v91 + 4;
        while (v74 != v70)
        {
          int v92 = *((_DWORD *)v74 - 1);
          v74 -= 4;
          *((_DWORD *)v91 - 1) = v92;
          v91 -= 4;
        }
        unint64_t v72 = (char *)(v89 + 4 * v90);
        if (v70) {
          operator delete(v70);
        }
        unint64_t v70 = v91;
      }
      else
      {
        *(_DWORD *)uint64_t v74 = v84;
        int v86 = v74 + 4;
        unint64_t v28 = v75;
      }
      v68 += 32;
      uint64_t v74 = v86;
    }
    while (v68 != v67);
  }
  int64_t v1 = (int64_t)v121;
  v93 = (char *)v121 + *(void *)(*(void *)v121 - 24);
  v93[2542] = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v93 + 2472), v86 - v70, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v93 + 2472), v86 - v70, 4uLL);
  uint64_t v94 = v86 - v70;
  if (v94) {
    uint64_t v95 = v70;
  }
  else {
    uint64_t v95 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::TLSInfo>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::TLSInfo>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::TLSInfo>> const&)::t;
  }
  if (v94)
  {
    uint64_t v96 = v94 >> 2;
    v97 = v95 - 4;
    do
    {
      uint64_t v98 = v96 - 1;
      int v99 = *(_DWORD *)&v97[4 * v96];
      flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v93 + 2472), 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)(v93 + 2472), *((_DWORD *)v93 + 626) - *((_DWORD *)v93 + 630) + *((_DWORD *)v93 + 628) - v99 + 4);
      uint64_t v96 = v98;
    }
    while (v98);
  }
  v93[2542] = 0;
  int v73 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)(v93 + 2472), (unint64_t)v94 >> 2);
  if (v70) {
    operator delete(v70);
  }
  int v65 = v113;
LABEL_142:
  uint64_t v100 = AGCLLVMObject::constructFlatReply((AGCLLVMObject *)(v1 + *(void *)(*(void *)v1 - 24)));
  v101 = v100;
  __int16 v103 = v102;
  if (v118 != v117) {
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v100, v116);
  }
  if (v120 != v119)
  {
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v101, 12, v115);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v101, 64, v114);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v101, 20, *(unsigned __int8 *)(v1 + 45), 0);
  if (*(unsigned char *)(v1 + 3566))
  {
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v101, 22, *(void *)(v1 + 3664), 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v101, 24, *(void *)(v1 + 3672), 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v101, 26, *(void *)(v1 + 3680), 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v101, 28, *(void *)(v1 + 3688), 0);
  }
  if (*(unsigned char *)(v1 + 3696)) {
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v101, 30, *(void *)(v1 + 3704), 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v101, 32, *(_DWORD *)(v1 + 3720));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v101, 76, *(_DWORD *)(v1 + 3724));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v101, 78, *(void *)(v1 + 3728), 0);
  uint64_t v104 = (char *)(v1 + *(void *)(*(void *)v1 - 24));
  if ((*(unsigned int (**)(char *))(*(void *)v104 + 176))(v104) == 2)
  {
    if (!v65) {
      goto LABEL_153;
    }
    goto LABEL_152;
  }
  if ((*(unsigned int (**)(char *))(*(void *)v104 + 176))(v104) == 1 && v65 != 0)
  {
LABEL_152:
    flatbuffers::FlatBufferBuilder::Align(v101, 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v101, 34, *((_DWORD *)v101 + 8) - *((_DWORD *)v101 + 12) + *((_DWORD *)v101 + 10) - v65 + 4);
  }
LABEL_153:
  v105 = (char *)(v1 + *(void *)(*(void *)v1 - 24));
  int v106 = (*(unsigned int (**)(char *))(*(void *)v105 + 176))(v105) == 2
      || (*(uint64_t (**)(char *))(*(void *)v105 + 176))(v105) == 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v101, 36, v106, 0);
  BOOL v108 = (*(uint64_t (**)(int64_t))(*(void *)(v1 + *(void *)(*(void *)v1 - 24)) + 176))(v1 + *(void *)(*(void *)v1 - 24)) == 2;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v101, 38, v108, 0);
  int v109 = *(_DWORD *)(v1 + 3736);
  if (v109) {
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v101, 72, v109);
  }
  int v110 = *(_DWORD *)(v1 + 3740);
  if (v110)
  {
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v101, 44, v110);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v101, 46, *(_DWORD *)(v1 + 3744));
    if (v73)
    {
      flatbuffers::FlatBufferBuilder::Align(v101, 4uLL);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v101, 48, *((_DWORD *)v101 + 8) - *((_DWORD *)v101 + 12) + *((_DWORD *)v101 + 10) - v73 + 4);
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v101, 52, *(unsigned __int8 *)(v1 + 10), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v101, 54, *(unsigned __int8 *)(v1 + 11), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v101, 56, *(unsigned __int8 *)(v1 + 13), 0);
  int v111 = (*(uint64_t (**)(int64_t))(*(void *)v1 + 24))(v1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v101, 66, v111);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v101, 68, *(void *)(v1 + 3832), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v101, 58, *(void *)(v1 + 3840), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v101, 60, *(void *)(v1 + 3848), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v101, 62, *(void *)(v1 + 3856), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v101, 74, *(_DWORD *)(v1 + 3864));
  return flatbuffers::FlatBufferBuilder::EndTable(v101, v103);
}

void *flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 != a4 || *((unsigned char *)result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>(uint64_t a1, uint64_t a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(v4 - 8) = a2;
  uint64_t v5 = v4 - 8;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    int v7 = &v4[8 * v6];
    uint64_t v8 = (char *)*a1;
    int v9 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v9 != *a1)
    {
      uint64_t v10 = v5;
      do
      {
        uint64_t v11 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t *std::back_insert_iterator<std::vector<unsigned long long>>::operator=[abi:nn180100](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(void **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v6 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    BOOL v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v13);
      uint64_t v8 = *(void **)v4;
      uint64_t v6 = *(void **)(v4 + 8);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = (void *)(v13 + 8 * v9);
    unint64_t v16 = v13 + 8 * v14;
    *unint64_t v15 = *a2;
    int v7 = v15 + 1;
    while (v6 != v8)
    {
      uint64_t v17 = *--v6;
      *--unint64_t v15 = v17;
    }
    *(void *)uint64_t v4 = v15;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    void *v6 = *a2;
    int v7 = v6 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(flatbuffers::FlatBufferBuilder *a1, const unsigned __int8 *a2, uint64_t a3)
{
  int v3 = a3;
  *((unsigned char *)a1 + 70) = 1;
  uint64_t v6 = 8 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign(a1, 8 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(a1, v6, 8uLL);
  flatbuffers::vector_downward::push(a1, a2, v6);
  *((unsigned char *)a1 + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, v3);
}

uint64_t AGCLLVMAGPFragmentShaderGen3::getMaxTotalThreadsPerThreadgroup(AGCLLVMAGPFragmentShaderGen3 *this)
{
  return *((unsigned int *)this + 1816);
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(flatbuffers::FlatBufferBuilder *result, int a2)
{
  if (a2)
  {
    int v3 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 10, v4);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v6 = 4 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)a1, 4 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)a1, v6, 4uLL);
  if (a3)
  {
    uint64_t v7 = a2 - 4;
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = v8 - 1;
      int v10 = *(_DWORD *)(v7 + 4 * v8);
      flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(a1, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40) - v10 + 4);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  *(unsigned char *)(a1 + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(a1, a3);
}

uint64_t AGCLLVMObject::finalizeDriverBindings(AGCLLVMObject *this, llvm::Function *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (*(uint64_t (**)(AGCLLVMObject *))(*(void *)this + 64))(this);
  if (v4 <= 0x1D && ((1 << v4) & 0x200002C1) != 0)
  {
    int v6 = (*(uint64_t (**)(AGCLLVMObject *))(*(void *)this + 200))(this);
    if (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_TG_BOUNDS_CHECKING", v7)) {
      int v6 = MGGetBoolAnswer()
    }
        && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_TG_BOUNDS_CHECKING", v8)) != 0
        && *Value != 48
        && atoi(Value) != 0;
    int v10 = *(unsigned __int8 *)(*((void *)this + 50) + 1767);
    char isBufferBoundsChecksEnabled = AGCLLVMObject::isBufferBoundsChecksEnabled(this);
    if (v10 || (isBufferBoundsChecksEnabled & 1) != 0 || v6)
    {
      llvm::Module::getOrInsertNamedMetadata();
      AGCLLVMObject::isBufferBoundsChecksEnabled(this);
      std::string::basic_string[abi:nn180100]<0>(&__p, "memorytocheck");
      uint64_t v36 = llvm::MDString::get();
      llvm::ConstantInt::get();
      uint64_t v37 = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      if (v35 < 0) {
        operator delete(__p);
      }
      if ((*(unsigned int (**)(AGCLLVMObject *))(*(void *)this + 176))(this) == 2
        || (*(unsigned int (**)(AGCLLVMObject *))(*(void *)this + 176))(this) == 1)
      {
        std::string::basic_string[abi:nn180100]<0>(&__p, "hardware_support");
        uint64_t v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        uint64_t v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0) {
          operator delete(__p);
        }
        if ((*(unsigned int (**)(AGCLLVMObject *))(*(void *)this + 176))(this) == 2)
        {
          std::string::basic_string[abi:nn180100]<0>(&__p, "hardware_safety_check");
          uint64_t v36 = llvm::MDString::get();
          goto LABEL_38;
        }
      }
      else if ((*(unsigned int (**)(AGCLLVMObject *))(*(void *)this + 176))(this) == 3 {
             || (*(unsigned int (**)(AGCLLVMObject *))(*(void *)this + 176))(this) == 4)
      }
      {
        std::string::basic_string[abi:nn180100]<0>(&__p, "checkdmapromotable");
        uint64_t v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        uint64_t v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0) {
          operator delete(__p);
        }
        std::string::basic_string[abi:nn180100]<0>(&__p, "disableindexopt");
        uint64_t v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        uint64_t v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0) {
          operator delete(__p);
        }
        std::string::basic_string[abi:nn180100]<0>(&__p, "useaddsatindex");
        uint64_t v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        uint64_t v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0) {
          operator delete(__p);
        }
        std::string::basic_string[abi:nn180100]<0>(&__p, "fullptrcheck");
        uint64_t v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        uint64_t v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0) {
          operator delete(__p);
        }
        std::string::basic_string[abi:nn180100]<0>(&__p, "checkstores");
        uint64_t v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        uint64_t v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0) {
          operator delete(__p);
        }
        std::string::basic_string[abi:nn180100]<0>(&__p, "checkatomics");
        uint64_t v36 = llvm::MDString::get();
        llvm::ConstantInt::get();
        uint64_t v37 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        if (v35 < 0) {
          operator delete(__p);
        }
        if ((*(unsigned int (**)(AGCLLVMObject *))(*(void *)this + 176))(this) == 3)
        {
          std::string::basic_string[abi:nn180100]<0>(&__p, "reporting");
          uint64_t v36 = llvm::MDString::get();
LABEL_38:
          llvm::ConstantInt::get();
          uint64_t v37 = llvm::ValueAsMetadata::get();
          llvm::MDTuple::getImpl();
          llvm::NamedMDNode::addOperand();
          if (v35 < 0) {
            operator delete(__p);
          }
        }
      }
    }
  }
  if ((*((_WORD *)a2 + 9) & 0x3FF0) == 0x6A0)
  {
    llvm::Module::getOrInsertNamedMetadata();
    std::string __p = v34;
    uint64_t v33 = 0x800000000;
    uint64_t v12 = llvm::ValueAsMetadata::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__p, v12);
    unint64_t v13 = (uint64_t *)*((void *)this + 347);
    uint64_t v14 = *((unsigned int *)this + 696);
    int v15 = v33;
    if (v14 + (unint64_t)v33 > HIDWORD(v33)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v14)
    {
      unint64_t v16 = (char *)__p + 8 * v33;
      uint64_t v17 = 8 * v14;
      do
      {
        uint64_t v18 = *v13++;
        *v16++ = v18;
        v17 -= 8;
      }
      while (v17);
    }
    LODWORD(v33) = v15 + v14;
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    if (__p != v34) {
      free(__p);
    }
  }
  else
  {
    llvm::Module::getOrInsertNamedMetadata();
    uint64_t v19 = *((unsigned int *)this + 696);
    if (v19)
    {
      uint64_t v20 = *((void *)this + 347);
      uint64_t v21 = 8 * v19;
      do
      {
        v20 += 8;
        llvm::NamedMDNode::addOperand();
        v21 -= 8;
      }
      while (v21);
    }
  }
  if (*((_DWORD *)this + 772))
  {
    llvm::Module::getOrInsertNamedMetadata();
    uint64_t v22 = *((unsigned int *)this + 772);
    if (v22)
    {
      uint64_t v23 = *((void *)this + 385);
      uint64_t v24 = 8 * v22;
      do
      {
        v23 += 8;
        llvm::NamedMDNode::addOperand();
        v24 -= 8;
      }
      while (v24);
    }
  }
  llvm::Module::getOrInsertNamedMetadata();
  uint64_t v25 = *((unsigned int *)this + 716);
  if (v25)
  {
    uint64_t v26 = *((void *)this + 357);
    uint64_t v27 = 8 * v25;
    do
    {
      v26 += 8;
      llvm::NamedMDNode::addOperand();
      v27 -= 8;
    }
    while (v27);
  }
  llvm::Module::getOrInsertNamedMetadata();
  uint64_t v28 = *((unsigned int *)this + 736);
  if (v28)
  {
    uint64_t v29 = *((void *)this + 367);
    uint64_t v30 = 8 * v28;
    do
    {
      v29 += 8;
      llvm::NamedMDNode::addOperand();
      v30 -= 8;
    }
    while (v30);
  }
  return 1;
}

llvm::Value *AGCLLVMUserObject::createGlobalBufferBinding(AGCLLVMUserObject *this, llvm::Type *a2, const llvm::Twine *a3, unsigned int a4, int a5, int a6, int a7)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (_DWORD *)*((void *)this + 417);
  uint64_t v13 = *((unsigned int *)this + 836);
  uint64_t v14 = &v12[10 * v13];
  int v15 = v12;
  if (v13)
  {
    uint64_t v16 = 0;
    while (1)
    {
      int v15 = &v12[v16];
      if (!*(void *)&v12[v16 + 6]) {
        break;
      }
      v16 += 10;
      if (10 * v13 == v16)
      {
        int v15 = &v12[10 * v13];
        goto LABEL_14;
      }
    }
  }
  uint64_t v17 = v15 + 10;
  if (v15 != v14 && v17 != v14)
  {
    do
    {
      if (*((void *)v17 + 3))
      {
        *int v15 = *v17;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v15 + 2), (void *)v17 + 1);
        v15[8] = v17[8];
        v15 += 10;
      }
      v17 += 10;
    }
    while (v17 != v14);
    uint64_t v12 = (_DWORD *)*((void *)this + 417);
    LODWORD(v13) = *((_DWORD *)this + 836);
  }
LABEL_14:
  llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::destroy_range((uint64_t)v15, (uint64_t)&v12[10 * v13]);
  uint64_t v19 = (char *)*((void *)this + 417);
  unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v15 - v19) >> 3);
  *((_DWORD *)this + 836) = v20;
  unint64_t v21 = -858993459 * (((char *)v15 - v19) >> 3);
  uint64_t v22 = &v19[40 * v21];
  if (v20)
  {
    do
    {
      unint64_t v23 = v21 >> 1;
      uint64_t v24 = (unsigned int *)&v19[40 * (v21 >> 1)];
      unsigned int v26 = *v24;
      uint64_t v25 = (char *)(v24 + 10);
      v21 += ~(v21 >> 1);
      if (v26 < a4) {
        uint64_t v19 = v25;
      }
      else {
        unint64_t v21 = v23;
      }
    }
    while (v21);
    if (a6 == 139 && v19 != v22)
    {
      uint64_t v27 = v19;
      while (*(_DWORD *)v27 == a4)
      {
        if (*((_DWORD *)v27 + 8) == 139) {
          return (llvm::Value *)*((void *)v27 + 3);
        }
        v27 += 40;
        if (v27 == v22) {
          break;
        }
      }
    }
    int v28 = a6;
    int v70 = a7;
    BOOL v29 = a6 == 139;
    if (v19 != v22) {
      uint64_t v22 = v19;
    }
  }
  else
  {
    int v70 = a7;
    int v28 = a6;
    BOOL v29 = a6 == 139;
  }
  uint64_t v30 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
  BOOL v69 = v29;
  uint64_t v31 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v31 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  int v32 = v70;
  if (AGCLLVMObject::isBufferBoundsChecksEnabled((AGCLLVMUserObject *)((char *)this
                                                                                    + *(void *)(*(void *)this - 24))))
  {
    int v34 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)this + 88))(this);
    char v35 = *(uint64_t **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    uint64_t v36 = *v35;
    if (v34 == 106) {
      (*(void (**)(uint64_t *, void, uint64_t))(v36 + 344))(v35, 0, v33);
    }
    else {
      (*(void (**)(uint64_t *, void, uint64_t))(v36 + 24))(v35, 0, v33);
    }
    llvm::Value::getContext(v30);
    *((void *)v30 + 9) = llvm::AttributeSet::addAttribute();
  }
  LODWORD(v72) = a4;
  uint64_t v73 = 4;
  uint64_t v74 = 0;
  unint64_t v75 = v30;
  if (v30 != (llvm::Value *)-8192 && v30 != (llvm::Value *)-4096 && v30) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v73);
  }
  int v76 = v28;
  uint64_t v37 = *((void *)this + 417);
  if ((char *)(v37 + 40 * *((unsigned int *)this + 836)) == v22)
  {
    unint64_t v55 = llvm::SmallVectorTemplateCommon<AGCLLVMUserObject::BufferBinding,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>>((uint64_t)this + 3336, (unint64_t)&v72);
    uint64_t v56 = (_DWORD *)(*((void *)this + 417) + 40 * *((unsigned int *)this + 836));
    *uint64_t v56 = *(_DWORD *)v55;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v56 + 2), 2u, (void *)(v55 + 8));
    v56[8] = *(_DWORD *)(v55 + 32);
    ++*((_DWORD *)this + 836);
  }
  else
  {
    uint64_t v38 = &v22[-v37];
    unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v22[-v37] >> 3);
    unint64_t v40 = llvm::SmallVectorTemplateCommon<AGCLLVMUserObject::BufferBinding,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>>((uint64_t)this + 3336, (unint64_t)&v72);
    uint64_t v41 = *((void *)this + 417);
    unint64_t v42 = &v38[v41];
    uint64_t v43 = (_DWORD *)(v41 + 40 * *((unsigned int *)this + 836));
    _DWORD *v43 = *(v43 - 10);
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v43 + 2), 2u, (void *)v43 - 4);
    v43[8] = *(v43 - 2);
    uint64_t v44 = *((void *)this + 417);
    unsigned int v45 = *((_DWORD *)this + 836);
    int v46 = (char *)(v44 + 40 * v45 - 40);
    if (v46 != v42)
    {
      uint64_t v47 = v44 + 40 * v45 - 40;
      do
      {
        int v48 = *(_DWORD *)(v47 - 40);
        v47 -= 40;
        *(_DWORD *)int v46 = v48;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v46 + 8), (void *)v46 - 4);
        *((_DWORD *)v46 + 8) = *((_DWORD *)v46 - 2);
        int v46 = (char *)v47;
      }
      while ((char *)v47 != v42);
      unsigned int v45 = *((_DWORD *)this + 836);
      uint64_t v44 = *((void *)this + 417);
    }
    unsigned int v49 = v45 + 1;
    *((_DWORD *)this + 836) = v49;
    unint64_t v50 = v44 + 40 * v49;
    BOOL v52 = v40 >= (unint64_t)v42 && v40 < v50;
    unint64_t v53 = v40 + 40 * v52;
    *(_DWORD *)unint64_t v42 = *(_DWORD *)v53;
    uint64_t v54 = v41 + 40 * v39;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v54 + 8), (void *)(v53 + 8));
    *(_DWORD *)(v54 + 32) = *(_DWORD *)(v53 + 32);
    int v32 = v70;
  }
  if (v75 != (llvm::Value *)-8192 && v75 != (llvm::Value *)-4096 && v75) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v73);
  }
  __src[0] = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  __src[1] = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  __src[2] = llvm::ValueAsMetadata::get();
  unint64_t v72 = &v74;
  uint64_t v73 = 0x400000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v72, __src, &v72);
  BOOL v57 = !v69;
  if (a5) {
    BOOL v57 = 0;
  }
  if (!v57)
  {
    llvm::ConstantInt::get();
    uint64_t v58 = llvm::ValueAsMetadata::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v72, v58);
    if (v69)
    {
      int v60 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24));
      uint64_t v61 = *(uint64_t **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      uint64_t v62 = *v61;
      if (v60 == 7) {
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v62 + 344))(v61, 1, v59);
      }
      else {
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v62 + 24))(v61, 1, v59);
      }
      llvm::ConstantInt::get();
      uint64_t v63 = llvm::ValueAsMetadata::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v72, v63);
    }
  }
  uint64_t v64 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 376);
  uint64_t Impl = llvm::MDTuple::getImpl();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v64, Impl);
  if (v32)
  {
    uint64_t v66 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 384);
    uint64_t v67 = llvm::MDTuple::getImpl();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v66, v67);
  }
  if (v72 != &v74) {
    free(v72);
  }
  return v30;
}

unsigned int *llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  int v3 = result;
  size_t v4 = a3 - __src;
  uint64_t v5 = result[2];
  if (v5 + ((a3 - __src) >> 3) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (__src != a3)
  {
    BOOL result = (unsigned int *)memcpy((void *)(*(void *)result + 8 * v5), __src, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 3);
  return result;
}

uint64_t AGCLLVMObject::isBufferBoundsChecksEnabled(AGCLLVMObject *this)
{
  if ((*(unsigned int (**)(AGCLLVMObject *))(*(void *)this + 176))(this) != 2)
  {
    uint64_t result = (*(uint64_t (**)(AGCLLVMObject *))(*(void *)this + 176))(this);
    if (result == 1) {
      return result;
    }
    if ((*(unsigned int (**)(AGCLLVMObject *))(*(void *)this + 176))(this) != 3) {
      return (*(unsigned int (**)(AGCLLVMObject *))(*(void *)this + 176))(this) == 4;
    }
  }
  return 1;
}

uint64_t virtual thunk to'AGCLLVMAGPFragmentShader::getBufferBoundsCheckMode(AGCLLVMAGPFragmentShader *this)
{
  return (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 192) + 5808) + 60) >> 4) & 7;
}

uint64_t llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::destroy_range(uint64_t result, uint64_t a2)
{
  if (a2 != result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v2 - 16);
      if (v4 != -8192 && v4 != -4096 && v4 != 0) {
        uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v2 - 32));
      }
      v2 -= 40;
    }
    while (v2 != v3);
  }
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<AGCLLVMUserObject::BufferBinding,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>>(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 40 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::grow();
    }
    llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::grow();
  }
  return a2;
}

llvm::ValueHandleBase *llvm::ValueHandleBase::operator=(llvm::ValueHandleBase *this, void *a2)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = a2[2];
  if (v2 != v3)
  {
    uint64_t v5 = this;
    if (v2 != -8192 && v2 != -4096 && v2 != 0)
    {
      this = (llvm::ValueHandleBase *)llvm::ValueHandleBase::RemoveFromUseList(this);
      uint64_t v3 = a2[2];
    }
    *((void *)v5 + 2) = v3;
    if (v3 != -8192 && v3 != -4096 && v3 != 0)
    {
      uint64_t v8 = (llvm::ValueHandleBase **)(*a2 & 0xFFFFFFFFFFFFFFF8);
      return (llvm::ValueHandleBase *)llvm::ValueHandleBase::AddToExistingUseList(v5, v8);
    }
  }
  return this;
}

uint64_t virtual thunk to'AGCLLVMAGPVertexShader::getBufferBoundsCheckMode(AGCLLVMAGPVertexShader *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 192) + 10040);
}

void llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::grow()
{
}

uint64_t AGCLLVMObject::needsThreadgroupMemoryOOBChecks(AGCLLVMObject *this)
{
  return 0;
}

uint64_t AIRConstSampler::constructFlatReply(AIRConstSampler *this, flatbuffers::FlatBufferBuilder *a2)
{
  *((unsigned char *)a2 + 70) = 1;
  int v4 = *((_DWORD *)a2 + 8);
  int v5 = *((_DWORD *)a2 + 12);
  int v6 = *((_DWORD *)a2 + 10);
  unint64_t v7 = *(void *)this & 7;
  if (v7 >= 5) {
    char v8 = 4;
  }
  else {
    char v8 = 0x503020004uLL >> (8 * v7);
  }
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(a2, 4, v8 & 7);
  unint64_t v9 = (*(void *)this >> 3) & 7;
  if (v9 >= 5) {
    char v10 = 4;
  }
  else {
    char v10 = 0x503020004uLL >> (8 * v9);
  }
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(a2, 6, v10 & 7);
  unint64_t v11 = (*(void *)this >> 6) & 7;
  if (v11 >= 5) {
    char v12 = 4;
  }
  else {
    char v12 = 0x503020004uLL >> (8 * v11);
  }
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(a2, 8, v12 & 7);
  uint64_t v13 = (*(void *)this >> 9) & 3;
  if (v13 == 2) {
    int v14 = 2;
  }
  else {
    int v14 = v13 == 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(a2, 10, v14);
  uint64_t v15 = (*(void *)this >> 11) & 3;
  if (v15 == 2) {
    int v16 = 2;
  }
  else {
    int v16 = v15 == 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(a2, 12, v16);
  uint64_t v17 = (*(void *)this >> 13) & 3;
  if (v17 == 2) {
    int v18 = 2;
  }
  else {
    int v18 = v17 == 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(a2, 14, v18);
  unint64_t v19 = ((*(void *)this >> 16) & 0xFLL) - 1;
  if (v19 >= 8) {
    char v20 = 0;
  }
  else {
    char v20 = 0x108070605040302uLL >> (8 * v19);
  }
  __int16 v21 = v4 - v5 + v6;
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(a2, 18, v20 & 0xF);
  float v22 = halfToFloat(*(_WORD *)((char *)this + 3));
  flatbuffers::FlatBufferBuilder::AddElement<float>(a2, 22, v22, 0.0);
  float v23 = halfToFloat(*(_WORD *)((char *)this + 5));
  flatbuffers::FlatBufferBuilder::AddElement<float>(a2, 24, v23, 0.0);
  uint64_t v24 = *((unsigned char *)this + 7) & 3;
  if (v24 == 2) {
    int v25 = 2;
  }
  else {
    int v25 = v24 == 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(a2, 26, v25);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a2, 16, (*(void *)this & 0x8000) == 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a2, 20, ((*(_DWORD *)this >> 20) & 0xF) + 1, 0);
  float v26 = halfToFloat(*((_WORD *)this + 4));
  flatbuffers::FlatBufferBuilder::AddElement<float>(a2, 30, v26, 0.0);
  uint64_t v27 = (*(void *)this >> 58) & 3;
  if (v27 == 2) {
    int v28 = 2;
  }
  else {
    int v28 = v27 == 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(a2, 34, v28);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a2, 28, *(void *)this, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a2, 32, *((void *)this + 1), 0);
  return flatbuffers::FlatBufferBuilder::EndTable(a2, v21);
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddElement<float>(flatbuffers::FlatBufferBuilder *this, uint64_t a2, float a3, float a4)
{
  uint64_t v6 = (uint64_t)this;
  if (a3 != a4 || *((unsigned char *)this + 80))
  {
    flatbuffers::FlatBufferBuilder::Align(this, 4uLL);
    uint64_t v7 = *(void *)(v6 + 48);
    if ((unint64_t)(v7 - *(void *)(v6 + 56)) <= 3)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 4uLL);
      uint64_t v7 = *(void *)(v6 + 48);
    }
    *(float *)(v7 - 4) = a3;
    uint64_t v8 = v7 - 4;
    *(void *)(v6 + 48) = v8;
    unsigned int v9 = *(_DWORD *)(v6 + 32) - v8 + *(_DWORD *)(v6 + 40);
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::TrackField((void *)v6, a2, v9);
  }
  return this;
}

float halfToFloat(__int16 a1)
{
  unsigned int v1 = a1 & 0x7FFF;
  unsigned int v2 = __clz(v1);
  int v3 = (v1 << (v2 - 8)) ^ 0x800000 | (1124073472 - (v2 << 23));
  if ((a1 & 0x7FFF) == 0) {
    int v3 = 0;
  }
  if ((unsigned __int16)(a1 & 0x7FFF) >> 10 >= 0x1Fu) {
    int v4 = (v1 << 13) | 0x7F800000;
  }
  else {
    int v4 = v3;
  }
  int v5 = (v1 << 13) + 939524096;
  if (((a1 & 0x7FFFu) - 1024) >> 11 > 0xE) {
    int v5 = v4;
  }
  LODWORD(result) = v5 | ((a1 & 0x8000) << 16);
  return result;
}

void GenericVaryingAllocator::serialize(GenericVaryingAllocator *this, flatbuffers::FlatBufferBuilder *a2)
{
  uint64_t v2 = -858993459 * ((*((void *)this + 72) - *((void *)this + 71)) >> 3);
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v6 = *((void *)this + 71) + 40 * i;
      unsigned int v9 = *(const char **)(v6 + 16);
      uint64_t v7 = v6 + 16;
      uint64_t v8 = v9;
      int v10 = *(char *)(v7 + 23);
      if (v10 >= 0) {
        unint64_t v11 = (const char *)v7;
      }
      else {
        unint64_t v11 = v8;
      }
      if (v10 >= 0) {
        unint64_t v12 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        unint64_t v12 = *(void *)(v7 + 8);
      }
      int String = flatbuffers::FlatBufferBuilder::CreateString(a2, v11, v12);
      *((unsigned char *)a2 + 70) = 1;
      int v14 = *((_DWORD *)a2 + 8) - *((_DWORD *)a2 + 12) + *((_DWORD *)a2 + 10);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a2, 4, *(unsigned __int8 *)(*((void *)this + 71) + 40 * i), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a2, 6, *(_DWORD *)(*((void *)this + 71) + 40 * i + 4));
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a2, 8, *(_DWORD *)(*((void *)this + 71) + 40 * i + 8));
      flatbuffers::FlatBufferBuilder::AddElement<signed char>(a2, 10, *(char *)(*((void *)this + 71) + 40 * i + 12));
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(a2, 12, String);
      int v15 = flatbuffers::FlatBufferBuilder::EndTable(a2, v14);
      int v16 = v15;
      int v18 = (_DWORD *)*((void *)this + 1);
      unint64_t v17 = *((void *)this + 2);
      if ((unint64_t)v18 >= v17)
      {
        char v20 = *(_DWORD **)this;
        uint64_t v21 = ((uint64_t)v18 - *(void *)this) >> 2;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          abort();
        }
        uint64_t v23 = v17 - (void)v20;
        if (v23 >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v24);
          char v20 = *(_DWORD **)this;
          int v18 = (_DWORD *)*((void *)this + 1);
        }
        else
        {
          uint64_t v25 = 0;
        }
        float v26 = (_DWORD *)(v24 + 4 * v21);
        *float v26 = v16;
        unint64_t v19 = v26 + 1;
        while (v18 != v20)
        {
          int v27 = *--v18;
          *--float v26 = v27;
        }
        *(void *)this = v26;
        *((void *)this + 1) = v19;
        *((void *)this + 2) = v24 + 4 * v25;
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *int v18 = v15;
        unint64_t v19 = v18 + 1;
      }
      *((void *)this + 1) = v19;
    }
  }
}

void *flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(void *result, uint64_t a2, int a3)
{
  int v4 = result;
  if (a3 || *((unsigned char *)result + 80))
  {
    unsigned int v5 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v4, a2, v5);
  }
  return result;
}

void *flatbuffers::FlatBufferBuilder::TrackField(void *this, uint64_t a2, unsigned int a3)
{
  unsigned int v5 = this;
  uint64_t v6 = (unint64_t *)this[7];
  if (this[6] - (void)v6 <= 7uLL)
  {
    this = (void *)flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, 8uLL);
    uint64_t v6 = (unint64_t *)v5[7];
  }
  unint64_t *v6 = a3 | (unint64_t)(a2 << 32);
  v5[7] += 8;
  ++*((_DWORD *)v5 + 16);
  unsigned int v7 = *((unsigned __int16 *)v5 + 34);
  if (v7 <= a2) {
    LOWORD(v7) = a2;
  }
  *((_WORD *)v5 + 34) = v7;
  return this;
}

void *flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(void *result, uint64_t a2, int a3, int a4)
{
  unsigned int v5 = result;
  if (a3 != a4 || *((unsigned char *)result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::FlatBufferBuilder *this, __int16 a2)
{
  flatbuffers::FlatBufferBuilder::Align(this, 4uLL);
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = *((void *)this + 7);
  if ((unint64_t)(v4 - v5) <= 3)
  {
    flatbuffers::vector_downward::reallocate(this, 4uLL);
    uint64_t v4 = *((void *)this + 6);
    uint64_t v5 = *((void *)this + 7);
  }
  *(_DWORD *)(v4 - 4) = 0;
  uint64_t v6 = v4 - 4;
  *((void *)this + 6) = v6;
  uint64_t v7 = *((void *)this + 4) - v6 + *((void *)this + 5);
  if ((unsigned __int16)(*((_WORD *)this + 34) + 2) <= 4u) {
    unint64_t v8 = 4;
  }
  else {
    unint64_t v8 = (unsigned __int16)(*((_WORD *)this + 34) + 2);
  }
  *((_WORD *)this + 34) = v8;
  if (v6 - v5 < v8)
  {
    flatbuffers::vector_downward::reallocate(this, v8);
    uint64_t v6 = *((void *)this + 6);
  }
  *((void *)this + 6) = v6 - v8;
  bzero((void *)(v6 - v8), v8);
  unsigned __int16 v9 = v7 - a2;
  unint64_t v11 = (unsigned __int16 *)*((void *)this + 6);
  unint64_t v10 = *((void *)this + 7);
  v11[1] = v9;
  *unint64_t v11 = *((_WORD *)this + 34);
  uint64_t v12 = *((unsigned int *)this + 16);
  uint64_t v13 = (char *)(v10 - 8 * v12);
  if (v12)
  {
    int v14 = (_WORD *)(v10 - 8 * v12);
    do
    {
      *(unsigned __int16 *)((char *)v11 + (unsigned __int16)v14[2]) = v7 - *v14;
      v14 += 4;
    }
    while ((unint64_t)v14 < v10);
  }
  *((void *)this + 7) = v13;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = 0;
  uint64_t v16 = *((void *)this + 4);
  unint64_t v15 = *((void *)this + 5);
  LODWORD(v17) = v16 - v11 + v15;
  if (*((unsigned char *)this + 81) && v15 < (unint64_t)v13)
  {
    size_t v18 = *v11;
    uint64_t v19 = v15 + v16;
    char v20 = (unsigned int *)*((void *)this + 5);
    while (1)
    {
      uint64_t v17 = *v20;
      if (v18 == *(unsigned __int16 *)(v19 - v17) && !memcmp((const void *)(v19 - v17), v11, v18)) {
        break;
      }
      if (++v20 >= (unsigned int *)v13)
      {
        LODWORD(v17) = v16 - v11 + v15;
        goto LABEL_19;
      }
    }
    unint64_t v11 = (unsigned __int16 *)((char *)v11 + (v16 - v11 + v15 - v7));
    *((void *)this + 6) = v11;
  }
LABEL_19:
  if (v17 == v16 + v15 - v11)
  {
    if ((unint64_t)((char *)v11 - v13) <= 3)
    {
      flatbuffers::vector_downward::reallocate(this, 4uLL);
      uint64_t v13 = (char *)*((void *)this + 7);
      uint64_t v16 = *((void *)this + 4);
      unint64_t v15 = *((void *)this + 5);
    }
    *(_DWORD *)uint64_t v13 = v17;
    *((void *)this + 7) = v13 + 4;
  }
  *(_DWORD *)(v15 + v16 - v7) = v17 - v7;
  *((unsigned char *)this + 70) = 0;
  return v7;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(uint64_t a1, int a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(_DWORD *)(v4 - 4) = a2;
  uint64_t v5 = v4 - 4;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void *flatbuffers::vector_downward::fill(void *this, unint64_t a2)
{
  int v3 = this;
  uint64_t v4 = this[6];
  if (v4 - this[7] >= a2)
  {
    this[6] = v4 - a2;
    if (!a2) {
      return this;
    }
  }
  else
  {
    this = (void *)flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, a2);
    v3[6] -= a2;
  }
  uint64_t v5 = 0;
  do
    *(unsigned char *)(v3[6] + v5++) = 0;
  while (a2 != v5);
  return this;
}

void *flatbuffers::FlatBufferBuilder::Align(flatbuffers::FlatBufferBuilder *this, unint64_t a2)
{
  if (*((void *)this + 9) < a2) {
    *((void *)this + 9) = a2;
  }
  return flatbuffers::vector_downward::fill(this, (a2 - 1) & -(uint64_t)(*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10)));
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(flatbuffers::FlatBufferBuilder *result, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    int v6 = *((_DWORD *)v5 + 8) - *((_DWORD *)v5 + 12) + *((_DWORD *)v5 + 10) - a3 + 4;
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, a2, v6);
  }
  return result;
}

void *flatbuffers::FlatBufferBuilder::AddElement<signed char>(void *result, uint64_t a2, int a3)
{
  uint64_t v4 = result;
  if (a3 || *((unsigned char *)result + 80))
  {
    unsigned int v5 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v4, a2, v5);
  }
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a1);
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(uint64_t a1, char a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4 == *(void *)(a1 + 56))
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 1uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 1;
  *(unsigned char *)(v4 - 1) = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::vector_downward::reallocate(flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *((void *)this + 5);
  uint64_t v5 = v3 - *((void *)this + 6) + v4;
  uint64_t v6 = *((void *)this + 7) - v4;
  if (v3) {
    unint64_t v7 = v3 >> 1;
  }
  else {
    unint64_t v7 = *((void *)this + 2);
  }
  if (v7 <= a2) {
    unint64_t v7 = a2;
  }
  uint64_t v8 = (*((void *)this + 3) + v3 + v7 - 1) & -*((void *)this + 3);
  *((void *)this + 4) = v8;
  uint64_t v9 = *(void *)this;
  if (v4)
  {
    if (!v9)
    {
      uint64_t v12 = &unk_1F25DBE90;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, void, void))(*(void *)v9 + 32))(v9, v4, v3, v8, v5, v6);
  }
  else
  {
    if (!v9)
    {
      uint64_t v12 = &unk_1F25DBE90;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
  }
  uint64_t v11 = result + *((void *)this + 4) - v5;
  *((void *)this + 5) = result;
  *((void *)this + 6) = v11;
  *((void *)this + 7) = result + v6;
  return result;
}

uint64_t AGCLLVMAGPFragmentShader::detectSideEffects(AGCLLVMAGPFragmentShader *this)
{
  uint64_t v61 = (char *)this + 5835;
  uint64_t v2 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v3 = v2 + 24;
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 == v2 + 24) {
    goto LABEL_121;
  }
  uint64_t v62 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  do
  {
    if (v4) {
      uint64_t v7 = v4 - 56;
    }
    else {
      uint64_t v7 = 0;
    }
    if ((llvm::Function::hasFnAttribute() & 1) == 0)
    {
      uint64_t v8 = v7 + 72;
      for (uint64_t i = *(void *)(v7 + 80); ; uint64_t i = *(void *)(i + 8))
      {
        if (i == v8) {
          goto LABEL_7;
        }
        uint64_t v10 = i - 24;
        if (!i) {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(void *)(v10 + 48);
        if (v11 != v10 + 40) {
          break;
        }
      }
      while (1)
      {
LABEL_110:
        if (i == v8) {
          break;
        }
        uint64_t v12 = v11 - 24;
        if (!v11) {
          uint64_t v12 = 0;
        }
        int v13 = *(unsigned __int8 *)(v12 + 16);
        if (v11 && v13 == 61)
        {
          uint64_t v14 = **(void **)(v12 - 32);
          unsigned int v15 = *(_DWORD *)(v14 + 8);
          if ((v15 & 0xFE) == 0x12) {
            unsigned int v15 = *(_DWORD *)(**(void **)(v14 + 16) + 8);
          }
          unsigned int v16 = v15 >> 8;
          if (v16 == 1)
          {
            HIDWORD(v62) = 1;
          }
          else if (v16 == 3)
          {
            LODWORD(v62) = 1;
          }
        }
        else
        {
          if (v13 == 84) {
            uint64_t v17 = v12;
          }
          else {
            uint64_t v17 = 0;
          }
          if (v11)
          {
            if (v13 == 84)
            {
              uint64_t v18 = *(void *)(v17 - 32);
              if (v18)
              {
                if (!*(unsigned char *)(v18 + 16) && *(void *)(v18 + 24) == *(void *)(v17 + 72))
                {
                  uint64_t Name = llvm::Value::getName((llvm::Value *)v18);
                  unint64_t v64 = v19;
                  char v20 = (AGCLLVMUserObject *)llvm::CallBase::arg_end((llvm::CallBase *)v17);
                  uint64_t v21 = v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF);
                  int v60 = v5;
                  uint64_t v22 = v6;
                  BOOL v23 = (((unint64_t)v20 - v21) & 0x1FFFFFFFE0) != 0
                     && *(unsigned __int8 *)(**(void **)v21 + 8) == 15;
                  unint64_t v26 = v64;
                  if (v64 < 0xA)
                  {
                    BOOL v27 = 0;
                    uint64_t v6 = v22;
                    int v5 = v60;
                    goto LABEL_63;
                  }
                  if (*(void *)Name != 0x6D6F74612E726961 || *(_WORD *)(Name + 8) != 25449) {
                    goto LABEL_60;
                  }
                  char v20 = (AGCLLVMUserObject *)llvm::StringRef::find();
                  if (v20 != (AGCLLVMUserObject *)-1 || !v23) {
                    goto LABEL_60;
                  }
                  uint64_t v30 = **(void **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
                  unsigned int v31 = *(_DWORD *)(v30 + 8);
                  if ((v31 & 0xFE) == 0x12) {
                    unsigned int v31 = *(_DWORD *)(**(void **)(v30 + 16) + 8);
                  }
                  unsigned int v32 = v31 >> 8;
                  if (v32 == 1)
                  {
                    uint64_t v6 = 1;
                    HIDWORD(v62) = 1;
                  }
                  else
                  {
                    if (v32 == 3)
                    {
                      uint64_t v6 = 1;
                      LODWORD(v62) = 1;
                      goto LABEL_61;
                    }
LABEL_60:
                    uint64_t v6 = v22;
                  }
LABEL_61:
                  int v5 = v60;
                  unint64_t v26 = v64;
                  if (v64 < 0xB)
                  {
                    BOOL v27 = 0;
                    goto LABEL_63;
                  }
                  uint64_t v33 = Name;
                  if (*(void *)Name == 0x6D656D2E6D766C6CLL && *(void *)(Name + 3) == 0x7970636D656D2E6DLL)
                  {
                    uint64_t v47 = **(void **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
                    unsigned int v48 = *(_DWORD *)(v47 + 8);
                    if ((v48 & 0xFE) == 0x12) {
                      unsigned int v48 = *(_DWORD *)(**(void **)(v47 + 16) + 8);
                    }
                    unsigned int v49 = v48 >> 8;
                    if (v49 == 1)
                    {
                      HIDWORD(v62) = 1;
                    }
                    else if (v49 == 3)
                    {
                      LODWORD(v62) = 1;
                    }
                  }
                  if (v64 < 0xF
                    || (*(void *)Name == 0x5F7465732E726961
                      ? (BOOL v35 = *(void *)(Name + 7) == 0x5F7265666675625FLL)
                      : (BOOL v35 = 0),
                        !v35 ? (int v36 = 0) : (int v36 = 1),
                        (HIDWORD(v62) |= v36, v64 < 0x14)
                     || (*(void *)Name == 0x646D69732E726961
                       ? (BOOL v37 = *(void *)(Name + 8) == 0x616D5F70756F7267)
                       : (BOOL v37 = 0),
                         v37 ? (BOOL v38 = *(_DWORD *)(Name + 16) == 2020176500) : (BOOL v38 = 0),
                         !v38)))
                  {
                    BOOL v27 = 0;
LABEL_85:
                    uint64_t v39 = *(void *)v33;
                    int v40 = *(unsigned __int8 *)(v33 + 8);
                    if (v39 != 0x726F74732E726961 || v40 != 101) {
                      goto LABEL_92;
                    }
                    goto LABEL_93;
                  }
                  char v20 = (AGCLLVMUserObject *)llvm::StringRef::find();
                  BOOL v27 = v20 != (AGCLLVMUserObject *)-1;
                  unint64_t v26 = v64;
LABEL_63:
                  if (v26 >= 9)
                  {
                    uint64_t v33 = Name;
                    goto LABEL_85;
                  }
LABEL_92:
                  if (v27)
                  {
LABEL_93:
                    uint64_t v43 = **(void **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) + 32);
                    unsigned int v44 = *(_DWORD *)(v43 + 8);
                    if ((v44 & 0xFE) == 0x12) {
                      unsigned int v44 = *(_DWORD *)(**(void **)(v43 + 16) + 8);
                    }
                    unsigned int v45 = v44 >> 8;
                    if (v45 == 1)
                    {
                      HIDWORD(v62) = 1;
                    }
                    else if (v45 == 3)
                    {
                      LODWORD(v62) = 1;
                    }
                  }
                  AGCLLVMUserObject::getSampleFunctionMap(v20);
                  int Key = llvm::StringMapImpl::FindKey();
                  if (Key != -1 && Key != (unint64_t)dword_1EBD0EB78) {
                    v5 |= *(_DWORD *)(*(void *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map
                  }
                                                + 8 * Key)
                                    + 8) == 3;
                }
              }
            }
          }
        }
        uint64_t v11 = *(void *)(v11 + 8);
        uint64_t v24 = i - 24;
        if (!i) {
          uint64_t v24 = 0;
        }
        if (v11 == v24 + 40)
        {
          while (1)
          {
            uint64_t i = *(void *)(i + 8);
            if (i == v8) {
              goto LABEL_7;
            }
            uint64_t v25 = i - 24;
            if (!i) {
              uint64_t v25 = 0;
            }
            uint64_t v11 = *(void *)(v25 + 48);
            if (v11 != v25 + 40) {
              goto LABEL_110;
            }
          }
        }
      }
    }
LABEL_7:
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4 != v3);
  if ((HIDWORD(v62) | v62 | v5))
  {
    if ((v62 & 1) != 0
      && (uint64_t v50 = *(void *)(*(void *)this - 24), !*(unsigned char *)(*(void *)((char *)this + v50 + 400) + 1743)))
    {
      uint64_t v58 = (std::string *)((char *)this + v50 + 8);
      uint64_t v59 = "threadgroup memory not supported in fragment shaders";
    }
    else
    {
      if ((v5 & 1) == 0
        || (uint64_t v51 = *(void *)(*(void *)this - 24), *(unsigned char *)(*(void *)((char *)this + v51 + 400) + 1742)))
      {
        if ((v6 & 1) != 0 && *((int *)this + 1082) <= 0) {
          *((_DWORD *)this + 1082) = 1;
        }
        *((_DWORD *)this + 1610) = 2;
        BOOL v52 = v61;
LABEL_123:
        uint64_t Operand = llvm::NamedMDNode::getOperand(*((llvm::NamedMDNode **)this + 8));
        uint64_t v54 = *(unsigned int *)(Operand + 8);
        if (Operand - 8 * v54 + 24 != Operand)
        {
          uint64_t v55 = Operand;
          uint64_t v56 = 24 - 8 * v54;
          while (!isStringMDNode(*(llvm::MDString **)(v55 + v56), "early_fragment_tests"))
          {
            v56 += 8;
            if (!v56) {
              goto LABEL_129;
            }
          }
          *((_DWORD *)this + 1610) = 1;
          llvm::Module::getOrInsertNamedMetadata();
          llvm::ConstantInt::get();
          llvm::ValueAsMetadata::get();
          llvm::MDTuple::getImpl();
          llvm::NamedMDNode::addOperand();
        }
        goto LABEL_129;
      }
      uint64_t v58 = (std::string *)((char *)this + v51 + 8);
      uint64_t v59 = "Texture writes not supported in fragment shaders";
    }
    std::string::append(v58, v59);
    return 0;
  }
LABEL_121:
  BOOL v52 = v61;
  if (v61[10] || v61[9]) {
    goto LABEL_123;
  }
LABEL_129:
  if (*((_DWORD *)this + 1610) == 2)
  {
    if (!*v52)
    {
      unsigned char *v52 = 1;
      *((_DWORD *)this + 1460) = 1;
    }
    *((_DWORD *)this + 1459) = 0;
  }
  return 1;
}

void AGCLLVMUserObject::getSampleFunctionMap(AGCLLVMUserObject *this)
{
  {
    AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map = 0;
    *(void *)&dword_1EBD0EB78 = 0;
    qword_1EBD0EB80 = 0x4000000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map, &dword_1CAC02000);
  }
}

uint64_t AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(AGCLLVMAGPFragmentShaderGen3 *this)
{
  v36[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 22);
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    uint64_t v4 = *((void *)this + 22);
    uint64_t v3 = *(void *)(v2 + 88);
    if (*(_WORD *)(v4 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    }
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 88);
  }
  uint64_t v5 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
  if (v3 != v5)
  {
    uint64_t v6 = "air.amplification_count";
    do
    {
      uint64_t v7 = *(void *)(*((void *)this + 11) + 8 * *(unsigned int *)(v3 + 32));
      if (*(void *)(v3 + 8)) {
        BOOL v8 = v7 == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8) {
        goto LABEL_34;
      }
      uint64_t v9 = v6;
      uint64_t v10 = *(void *)v3;
      uint64_t v29 = 0;
      uint64_t v29 = llvm::UndefValue::get();
      uint64_t v11 = *(void *)(*((void *)this + 22) + 80);
      if (v11) {
        uint64_t v12 = v11 - 24;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(void *)(v12 + 40);
      if (v13) {
        uint64_t v14 = (llvm::Instruction *)(v13 - 24);
      }
      else {
        uint64_t v14 = 0;
      }
      AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v14, *((void *)this + 6));
      int v16 = *(_DWORD *)(v10 + 8);
      if (v16 == 16)
      {
        if (isStringMDNode(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.imageblock_data"))
        {
          if (*((int *)this + 1082) <= 0) {
            *((_DWORD *)this + 1082) = 1;
          }
          *(void *)&long long v30 = &v31;
          *((void *)&v30 + 1) = 0x500000000;
          v36[0] = &unk_1F2576290;
          v36[1] = &v29;
          v36[2] = this;
          v36[3] = v36;
          AGCLLVMAGPFragmentShaderGen3::setupLIBStructValueFromType(this, v10, (uint64_t)&v30, (uint64_t)this + 6928, 0, 1, (uint64_t)v36);
          std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__value_func[abi:nn180100](v36);
          llvm::Value::replaceAllUsesWith();
          uint64_t v17 = (void *)v30;
          if ((uint64_t *)v30 == &v31) {
            goto LABEL_33;
          }
          goto LABEL_32;
        }
      }
      else if (v16 == 15 && *(_DWORD *)(**(void **)(v10 + 16) + 8) == 16)
      {
        if ((v16 & 0xFE) == 0x12) {
          int v16 = *(_DWORD *)(**(void **)(v10 + 16) + 8);
        }
        if ((v16 & 0xFFFFFF00) == 0x400)
        {
          llvm::Constant::getNullValue((llvm::Constant *)v10, v15);
          llvm::Value::replaceAllUsesWith();
LABEL_33:
          uint64_t v6 = v9;
          goto LABEL_34;
        }
      }
      if (isStringMDNode(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.amplification_id"))
      {
        AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying((uint64_t)&v30, this, (llvm::Type *)v10, "air.amplification_id", 0x14uLL);
        uint64_t v29 = (uint64_t)AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)&v30);
        llvm::Value::replaceAllUsesWith();
        llvm::ValueHandleBase::operator=((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 7272), v29);
        *((unsigned char *)this + 5860) = 1;
        uint64_t v17 = v34;
        if (v34 == v35) {
          goto LABEL_33;
        }
LABEL_32:
        free(v17);
        goto LABEL_33;
      }
      if (isStringMDNode(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), v6))
      {
        AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying((uint64_t)&v30, this, (llvm::Type *)v10, v6, 0x17uLL);
        uint64_t v29 = (uint64_t)AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)&v30);
        llvm::Value::replaceAllUsesWith();
        *((unsigned char *)this + 5861) = 1;
        if (v34 != v35) {
          free(v34);
        }
        goto LABEL_34;
      }
      if (*((unsigned char *)this + 7260)
        && isStringMDNode(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.render_target_array_index"))
      {
        uint64_t v18 = (char *)this + *(void *)(*(void *)this - 24);
        unint64_t v19 = (unsigned char *)*((void *)v18 + 50);
        if (v19[1747])
        {
          uint64_t v20 = *(void *)v3;
          uint64_t v21 = (*(uint64_t (**)(unsigned char *))(*(void *)v19 + 680))(v19);
          uint64_t v22 = (char *)this + *(void *)(*(void *)this - 24);
          long long v30 = *(_OWORD *)(v22 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v31, (llvm::IRBuilderBase *)(v22 + 40));
          int v32 = *((_DWORD *)v22 + 34);
          uint64_t Cast = AGCLLVMGen3TargetLowerer::buildLayerId(v21, (uint64_t)&v30, v20);
          if (v31) {
            llvm::MetadataTracking::untrack();
          }
        }
        else
        {
          uint64_t v24 = (uint64_t)(v18 + 40);
          uint64_t v25 = llvm::ConstantInt::get();
          uint64_t v26 = *(void *)v3;
          __int16 v33 = 257;
          uint64_t Cast = llvm::IRBuilderBase::CreateCast(v24, 38, v25, v26, (uint64_t)&v30);
        }
        uint64_t v29 = Cast;
        llvm::Value::replaceAllUsesWith();
        *((unsigned char *)this + 5859) = 1;
        goto LABEL_33;
      }
LABEL_34:
      v3 += 40;
    }
    while (v3 != v5);
  }
  if (*((_DWORD *)this + 1752))
  {
    unsigned int v27 = 0;
    do
    {
      llvm::MDNode::replaceOperandWith();
      ++v27;
    }
    while (*((_DWORD *)this + 1752) > v27);
  }
  return AGCLLVMUserFragmentShader::setupShaderInputs(this);
}

char **AGCLLVMBuilder::SetInsertPoint(uint64_t a1, llvm::Instruction *a2, uint64_t a3)
{
  if (a3)
  {
    llvm::DebugLoc::DebugLoc();
    llvm::TrackingMDRef::operator=((void *)a2 + 6, &v6);
    if (v6) {
      llvm::MetadataTracking::untrack();
    }
  }
  return llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildReadOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Type *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_0::operator()(uint64_t a1)
{
  v22[7] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(AGCLLVMGen3TargetLowerer **)a1;
  std::string::basic_string[abi:nn180100]<0>(&v17, *(char **)(*(void *)a1 + 1520));
  AGCLLVMGen3TargetLowerer::getReadSuffix(&__p, v2, **(void **)(a1 + 8), *(unsigned __int16 *)(*(void *)(a1 + 16) + 6));
  v21[0] = v22;
  v21[1] = (void *)0x700000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, *((void *)v2 + 24));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, *((void *)v2 + 24));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, *((void *)v2 + 24));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, *((void *)v2 + 24));
  uint64_t v18 = v20;
  uint64_t v19 = 0x700000000;
  uint64_t v3 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, v3);
  uint64_t v4 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, v4);
  uint64_t v5 = **(void **)(a1 + 32);
  if (!v5) {
    uint64_t v5 = **(void **)(a1 + 40);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, v5);
  uint64_t v6 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, v6);
  if (**(void **)(a1 + 56))
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, *((void *)v2 + 30));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, **(void **)(a1 + 56));
    std::string::append(&v17, "coords.");
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, *((void *)v2 + 24));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, *((void *)v2 + 24));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, *((void *)v2 + 24));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, **(void **)(a1 + 64));
  uint64_t v7 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, v7);
  uint64_t v8 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, v8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v17, (const std::string::value_type *)p_p, size);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v15[16] = 257;
  uint64_t v12 = llvm::IRBuilderBase::CreateCall((uint64_t)v2 + 8, *(void *)(v11 + 24), v11, (uint64_t)v18, v19, (uint64_t)v15);
  uint64_t v13 = AGCLLVMGen3TargetLowerer::convertFromF16(v2, v12, **(unsigned __int8 **)(a1 + 24));
  if (v18 != v20) {
    free(v18);
  }
  if (v21[0] != v22) {
    free(v21[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return v13;
}

void AGCLLVMGen3TargetLowerer::buildWriteOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL,llvm::Value *,BOOL,BOOL)::$_0::operator()(void *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  if ((*(uint64_t (**)(void, void, void, uint64_t, void, void))(*(void *)*a1 + 1592))(*a1, *(unsigned __int16 *)a1[1], *(void *)(a1[1] + 8), 1, 0, *(unsigned __int8 *)a1[2]))
  {
    if ((*(_DWORD *)(*(void *)(a1[1] + 8) + 8) & 0xFE) == 0x12)
    {
      llvm::FixedVectorType::get();
      InsertElement = (llvm::Value *)llvm::UndefValue::get();
      if (*(_DWORD *)(*(void *)(a1[1] + 8) + 32))
      {
        unint64_t v4 = 0;
        do
        {
          uint64_t v5 = *(llvm::Value **)a1[3];
          __int16 v31 = 257;
          uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
          Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v2 + 8), v5, v6, (const llvm::Twine *)v29);
          uint64_t v8 = *(llvm::Type **)(v2 + 152);
          v28[8] = 257;
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(v2 + 8), Element, v8, (const llvm::Twine *)&v26);
          __int16 v31 = 257;
          uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
          InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v2 + 8), InsertElement, FPTrunc, v10, (const llvm::Twine *)v29);
          ++v4;
        }
        while (v4 < *(unsigned int *)(*(void *)(a1[1] + 8) + 32));
      }
      *(void *)a1[3] = InsertElement;
    }
    else
    {
      uint64_t v11 = *(llvm::Value **)a1[3];
      uint64_t v12 = *(llvm::Type **)(v2 + 152);
      __int16 v31 = 257;
      *(void *)a1[3] = llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(v2 + 8), v11, v12, (const llvm::Twine *)v29);
    }
  }
  std::string::basic_string[abi:nn180100]<0>(&v25, *(char **)(v2 + 1528));
  AGCLLVMGen3TargetLowerer::getWriteSuffix(__p, (void *)v2, **(void **)a1[3]);
  v29[0] = v30;
  v29[1] = (void *)0x800000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(void *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(void *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(void *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(void *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, **(void **)a1[3]);
  uint64_t v26 = v28;
  uint64_t v27 = 0x800000000;
  uint64_t v13 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, v13);
  uint64_t v14 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, v14);
  uint64_t v15 = *(void *)a1[4];
  if (!v15) {
    uint64_t v15 = *(void *)a1[5];
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, v15);
  uint64_t v16 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, v16);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, *(void *)a1[3]);
  if (*(void *)a1[7])
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(void *)(v2 + 240));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, *(void *)a1[7]);
    std::string::append(&v25, "coords.");
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(void *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(void *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(void *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, *(void *)a1[8]);
  uint64_t v17 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, v17);
  uint64_t v18 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, v18);
  if ((v24 & 0x80u) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v20 = v24;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  std::string::append(&v25, (const std::string::value_type *)v19, v20);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v22[16] = 257;
  llvm::IRBuilderBase::CreateCall(v2 + 8, *(void *)(v21 + 24), v21, (uint64_t)v26, v27, (uint64_t)v22);
  if (v26 != v28) {
    free(v26);
  }
  if (v29[0] != v30) {
    free(v29[0]);
  }
  if ((char)v24 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildFMinFMax(AGCLLVMBuilder *a1, uint64_t a2, llvm::Value *a3, llvm::Value *a4, const char *a5, const char *a6)
{
  v22[2] = *MEMORY[0x1E4F143B8];
  long long v18 = *(_OWORD *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  if (v19) {
    llvm::MetadataTracking::track();
  }
  int v20 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v18);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  v21[0] = v22;
  v21[1] = (void *)0x200000000;
  uint64_t v12 = *(void *)a3;
  uint64_t v13 = *(void *)a3;
  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12) {
    uint64_t v13 = **(void **)(v12 + 16);
  }
  if (v12 != *(void *)a4) {
    a4 = AGCLLVMBuilder::splat(a1, *(_DWORD *)(v12 + 32), a4);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, v13);
  uint64_t v14 = *(void *)a4;
  if ((*(_DWORD *)(*(void *)a4 + 8) & 0xFE) == 0x12) {
    uint64_t v14 = **(void **)(v14 + 16);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, v14);
  llvm::FunctionType::get();
  if (v13 != *((void *)a1 + 21)) {
    a6 = a5;
  }
  if (a6) {
    strlen(a6);
  }
  llvm::Module::getOrInsertFunction();
  uint64_t v16 = AGCLLVMBuilder::map2(a1, v15, a3, a4);
  if (v21[0] != v22) {
    free(v21[0]);
  }
  return v16;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v2) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t AGCLLVMTargetLowerer::SetIP(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  if (v6) {
    llvm::MetadataTracking::track();
  }
  int v7 = *((_DWORD *)a2 + 6);
  uint64_t result = AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v5, a1 + 8);
  if (v6) {
    return llvm::MetadataTracking::untrack();
  }
  return result;
}

llvm::Value *AGCLLVMBuilder::map2(AGCLLVMBuilder *this, llvm::Function *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12)
  {
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    *(_OWORD *)int v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)long long v18 = 0u;
    long long v19 = 0u;
    AGCLLVMBuilder::unboxVector(this, a3, v20);
    AGCLLVMBuilder::unboxVector(this, a4, v18);
    uint64_t v9 = *(unsigned int *)(*(void *)a3 + 32);
    if (v9)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        uint64_t v11 = v18[i];
        v17[0] = v20[i];
        v17[1] = v11;
        __int16 v16 = 257;
        uint64_t v12 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *((void *)a2 + 3), (uint64_t)a2, (uint64_t)v17, 2, (uint64_t)v15);
        __int16 v16 = 257;
        uint64_t v13 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), InsertElement, v12, v13, (const llvm::Twine *)v15);
      }
    }
  }
  else
  {
    v20[0] = a3;
    v20[1] = a4;
    __int16 v16 = 257;
    return llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *((void *)a2 + 3), (uint64_t)a2, (uint64_t)v20, 2, (uint64_t)v15);
  }
  return InsertElement;
}

llvm::Value *llvm::IRBuilderBase::CreateCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 112);
  int v10 = 0;
  if (v9)
  {
    uint64_t v11 = 48 * v9;
    uint64_t v12 = (void *)(v8 + 32);
    do
    {
      v10 += (*v12 - *(v12 - 1)) >> 3;
      v12 += 6;
      v11 -= 48;
    }
    while (v11);
  }
  uint64_t v13 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x50);
  if (v9)
  {
    int v14 = 0;
    uint64_t v15 = 48 * v9;
    __int16 v16 = (void *)(v8 + 32);
    do
    {
      v14 += (*v16 - *(v16 - 1)) >> 3;
      v16 += 6;
      v15 -= 48;
    }
    while (v15);
    uint64_t v17 = 48 * v9;
    long long v18 = (void *)(v8 + 32);
    do
    {
      LODWORD(v15) = v15 + ((*v18 - *(v18 - 1)) >> 3);
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
  }
  llvm::Instruction::Instruction();
  *((void *)v13 + 8) = 0;
  llvm::CallInst::init();
  if (*(unsigned char *)(a1 + 100))
  {
    llvm::Value::getContext(v13);
    *((void *)v13 + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  if (llvm::FPMathOperator::classof((uint64_t)v13)) {
    llvm::IRBuilderBase::setFPAttrs(a1, (uint64_t)v13);
  }
  (*(void (**)(void, llvm::Value *, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v13, a6, *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v19 = *(unsigned int *)(a1 + 8);
  if (v19)
  {
    uint64_t v20 = *(void *)a1;
    uint64_t v21 = v20 + 16 * v19;
    do
    {
      llvm::Instruction::setMetadata();
      v20 += 16;
    }
    while (v20 != v21);
  }
  return v13;
}

BOOL llvm::FPMathOperator::classof(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || (unsigned int v2 = v1 - 28, v1 < 0x1C))
  {
    uint64_t v3 = 0;
    if (!a1 || v1 != 5) {
      return v3;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 18);
  }
  if (v2 > 0x39) {
    return 0;
  }
  if (((1 << v2) & 0x40000001255000) != 0) {
    return 1;
  }
  if (((1 << v2) & 0x380000000000000) == 0) {
    return 0;
  }
  do
  {
    uint64_t v4 = *(void *)a1;
    unsigned int v5 = *(unsigned __int8 *)(*(void *)a1 + 8);
    a1 = *(void *)a1 + 24;
    if (v4) {
      BOOL v6 = v5 == 17;
    }
    else {
      BOOL v6 = 0;
    }
  }
  while (v6);
  if ((v5 & 0xFE) == 0x12) {
    unsigned int v5 = *(unsigned __int8 *)(**(void **)(v4 + 16) + 8);
  }
  return v5 < 7;
}

uint64_t llvm::IRBuilderBase::setFPAttrs(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 88)) {
    llvm::Instruction::setMetadata();
  }
  llvm::Instruction::setFastMathFlags();
  return a2;
}

uint64_t AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::doReplacement(uint64_t a1, llvm::Function *this, uint64_t a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v5 = a3;
  BOOL v6 = this;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  int v7 = *(_DWORD *)(a3 + 24);
  if (v7 != 12)
  {
    if (v7 == 11)
    {
      uint64_t v8 = *(unsigned char **)(a3 + 8);
      if (v8)
      {
        size_t v9 = strlen(*(const char **)(a3 + 8));
        *(void *)&v96[0] = (char *)&v96[1] + 8;
        *(_OWORD *)((char *)v96 + 8) = xmmword_1CADD6290;
        llvm::SmallVectorImpl<char>::append<char const*,void>(v96, v8, &v8[v9]);
      }
      else
      {
        *(void *)&v96[1] = 64;
        *(void *)&v96[0] = (char *)&v96[1] + 8;
        *((void *)&v96[0] + 1) = 0;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(v96, ".", "");
      llvm::SmallVectorImpl<char>::append<char const*,void>(v96, a4, &a4[a5]);
      llvm::Module::getOrInsertFunction();
      llvm::Value::replaceAllUsesWith();
      if (*(_OWORD **)&v96[0] != (_OWORD *)((char *)&v96[1] + 8)) {
        free(*(void **)&v96[0]);
      }
      return llvm::Function::eraseFromParent(v6);
    }
    uint64_t v15 = **(void **)(*((void *)this + 3) + 16);
    BOOL v16 = (*(_DWORD *)(v15 + 8) & 0xFE) != 0x12 || *(unsigned char *)(a3 + 29) == 0;
    int v17 = !v16;
    if (v16) {
      int v18 = 1;
    }
    else {
      int v18 = *(_DWORD *)(v15 + 32);
    }
    int v81 = v18;
    int v79 = *(_DWORD *)(a1 + 104);
    uint64_t v19 = *((void *)this + 1);
    if (!v19)
    {
LABEL_109:
      *(_DWORD *)(a1 + 104) = v79;
      BOOL v6 = this;
      return llvm::Function::eraseFromParent(v6);
    }
    uint64_t v20 = (llvm::IRBuilderBase *)(a1 + 8);
    while (1)
    {
      uint64_t v21 = *(llvm::Instruction **)(v19 + 24);
      uint64_t v22 = *(void *)(v19 + 8);
      if (*(_DWORD *)v5 == 1)
      {
        int v23 = 0;
      }
      else
      {
        if (*(_DWORD *)v5 != 2) {
          goto LABEL_26;
        }
        int v23 = 121;
      }
      *(_DWORD *)(a1 + 104) = v23;
LABEL_26:
      uint64_t v82 = v22;
      llvm::IRBuilderBase::SetInsertPoint(v20, v21);
      uint64_t v24 = llvm::UndefValue::get();
      if (v81)
      {
        for (uint64_t i = 0; i != v81; ++i)
        {
          int v86 = (llvm::Value *)v24;
          uint64_t v97 = 0;
          memset(v96, 0, sizeof(v96));
          unint64_t v26 = llvm::CallBase::arg_end(v21) - (void)v21 + 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF);
          if ((v26 & 0x1FFFFFFFE0) != 0)
          {
            uint64_t v27 = (v26 >> 5);
            int v28 = (llvm::Value **)v96;
            uint64_t v29 = v21;
            do
            {
              long long v30 = (llvm::Value **)((char *)v29 - 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
              __int16 v31 = *v30;
              *int v28 = *v30;
              if (v17 && (*(_DWORD *)(*(void *)v31 + 8) & 0xFE) == 0x12)
              {
                __int16 v95 = 257;
                uint64_t v32 = (llvm::Value *)llvm::ConstantInt::get();
                *int v28 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v20, v31, v32, (const llvm::Twine *)v94);
              }
              ++v28;
              uint64_t v29 = (llvm::Instruction *)((char *)v29 + 32);
              --v27;
            }
            while (v27);
          }
          if (*(unsigned char *)(a3 + 28))
          {
            __int16 v33 = **(llvm::Type ***)&v96[0];
            if ((*(_DWORD *)(**(void **)&v96[0] + 8) & 0xFE) == 0x12) {
              __int16 v33 = (llvm::Type *)**((void **)v33 + 2);
            }
            v94[0] = llvm::Type::getPrimitiveSizeInBits(v33);
            v94[1] = v34;
            if (llvm::TypeSize::operator unsigned long long() == 32)
            {
              int v35 = 0;
            }
            else
            {
              int v36 = *(llvm::Type **)(a1 + 168);
              if ((*(_DWORD *)(**(void **)&v96[0] + 8) & 0xFE) == 0x12) {
                int v36 = (llvm::Type *)llvm::FixedVectorType::get();
              }
              if ((v26 & 0x1FFFFFFFE0) != 0)
              {
                uint64_t v37 = (v26 >> 5);
                BOOL v38 = (llvm::Value **)v96;
                do
                {
                  uint64_t v39 = *v38;
                  __int16 v95 = 257;
                  *v38++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v20, v39, v36, (const llvm::Twine *)v94);
                  --v37;
                }
                while (v37);
                int v35 = 1;
              }
              else
              {
                int v35 = 1;
              }
            }
          }
          else
          {
            int v35 = 0;
          }
          if (llvm::FPMathOperator::classof((uint64_t)v21)) {
            unsigned int FastMathFlags = llvm::Instruction::getFastMathFlags(v21);
          }
          else {
            unsigned int FastMathFlags = 0;
          }
          uint64_t v41 = *(void *)(a1 + 368);
          long long v91 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v92, v20);
          int v93 = *(_DWORD *)(a1 + 104);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v91, v41 + 8);
          if (v92) {
            llvm::MetadataTracking::untrack();
          }
          switch(*(_DWORD *)(a3 + 24))
          {
            case 1:
              unint64_t v42 = *(uint64_t (**)(void *))(a3 + 8);
              uint64_t v43 = *(void *)(a3 + 16);
              unsigned int v44 = (void *)(*(void *)(a1 + 368) + (v43 >> 1));
              if (v43) {
                unint64_t v42 = *(uint64_t (**)(void *))(*v44 + v42);
              }
              uint64_t v73 = v42(v44);
              goto LABEL_94;
            case 2:
              int v46 = *(uint64_t (**)(void *, uint64_t))(a3 + 8);
              uint64_t v47 = *(void *)(a3 + 16);
              uint64_t v48 = *(void *)v21;
              unsigned int v49 = (void *)(*(void *)(a1 + 368) + (v47 >> 1));
              if ((v47 & 1) == 0) {
                goto LABEL_77;
              }
              goto LABEL_76;
            case 3:
              int v46 = *(uint64_t (**)(void *, uint64_t))(a3 + 8);
              uint64_t v50 = *(void *)(a3 + 16);
              uint64_t v48 = *(void *)&v96[0];
              unsigned int v49 = (void *)(*(void *)(a1 + 368) + (v50 >> 1));
              if ((v50 & 1) == 0) {
                goto LABEL_77;
              }
LABEL_76:
              int v46 = *(uint64_t (**)(void *, uint64_t))(*v49 + v46);
LABEL_77:
              uint64_t v73 = v46(v49, v48);
              goto LABEL_94;
            case 4:
              uint64_t v51 = (unsigned int *)(*(void *)&v96[0] + 24);
              if (*(_DWORD *)(*(void *)&v96[0] + 32) >= 0x41u) {
                uint64_t v51 = *(unsigned int **)v51;
              }
              uint64_t v52 = *v51;
              unint64_t v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(a3 + 8);
              uint64_t v54 = *(void *)(a3 + 16);
              uint64_t v55 = *(void *)v21;
              uint64_t v56 = (void *)(*(void *)(a1 + 368) + (v54 >> 1));
              if (v54) {
                unint64_t v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v56 + v53);
              }
              goto LABEL_81;
            case 5:
              unint64_t v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(a3 + 8);
              uint64_t v57 = *(void *)(a3 + 16);
              uint64_t v52 = *((void *)&v96[0] + 1);
              uint64_t v55 = *(void *)&v96[0];
              uint64_t v56 = (void *)(*(void *)(a1 + 368) + (v57 >> 1));
              if (v57) {
                unint64_t v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v56 + v53);
              }
LABEL_81:
              uint64_t v73 = v53(v56, v55, v52);
              goto LABEL_94;
            case 6:
              uint64_t v58 = *(uint64_t (**)(void *, _OWORD *, unsigned char *, uint64_t))(a3 + 8);
              uint64_t v59 = *(void *)(a3 + 16);
              uint64_t v61 = (unsigned char *)*((void *)&v96[0] + 1);
              int v60 = *(_OWORD **)&v96[0];
              uint64_t v62 = (void *)(*(void *)(a1 + 368) + (v59 >> 1));
              if (v59) {
                uint64_t v58 = *(uint64_t (**)(void *, _OWORD *, unsigned char *, uint64_t))(*v62 + v58);
              }
              uint64_t v64 = FastMathFlags;
              goto LABEL_90;
            case 7:
              uint64_t v58 = *(uint64_t (**)(void *, _OWORD *, unsigned char *, uint64_t))(a3 + 8);
              uint64_t v63 = *(void *)(a3 + 16);
              uint64_t v61 = (unsigned char *)*((void *)&v96[0] + 1);
              int v60 = *(_OWORD **)&v96[0];
              uint64_t v64 = *(void *)&v96[1];
              uint64_t v62 = (void *)(*(void *)(a1 + 368) + (v63 >> 1));
              if (v63) {
                uint64_t v58 = *(uint64_t (**)(void *, _OWORD *, unsigned char *, uint64_t))(*v62 + v58);
              }
              goto LABEL_90;
            case 8:
              int v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, unsigned char *, uint64_t))(a3 + 8);
              uint64_t v66 = *(void *)(a3 + 16);
              uint64_t v68 = (_OWORD *)*((void *)&v96[0] + 1);
              uint64_t v67 = *(void *)&v96[0];
              BOOL v69 = *(unsigned char **)&v96[1];
              int v70 = (void *)(*(void *)(a1 + 368) + (v66 >> 1));
              if (v66) {
                int v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, unsigned char *, uint64_t))(*v70 + v65);
              }
              uint64_t v74 = FastMathFlags;
              goto LABEL_93;
            case 9:
              uint64_t v58 = *(uint64_t (**)(void *, _OWORD *, unsigned char *, uint64_t))(a3 + 8);
              uint64_t v71 = *(void *)(a3 + 16);
              uint64_t v62 = (void *)(*(void *)(a1 + 368) + (v71 >> 1));
              if (v71) {
                uint64_t v58 = *(uint64_t (**)(void *, _OWORD *, unsigned char *, uint64_t))(*v62 + v58);
              }
              int v60 = v96;
              uint64_t v64 = a5;
              uint64_t v61 = a4;
LABEL_90:
              uint64_t v73 = v58(v62, v60, v61, v64);
              goto LABEL_94;
            case 0xA:
              int v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, unsigned char *, uint64_t))(a3 + 8);
              uint64_t v72 = *(void *)(a3 + 16);
              uint64_t v67 = *(void *)v21;
              int v70 = (void *)(*(void *)(a1 + 368) + (v72 >> 1));
              if (v72) {
                int v65 = *(uint64_t (**)(void *, uint64_t, _OWORD *, unsigned char *, uint64_t))(*v70 + v65);
              }
              uint64_t v68 = v96;
              uint64_t v74 = a5;
              BOOL v69 = a4;
LABEL_93:
              uint64_t v73 = v65(v70, v67, v68, v69, v74);
LABEL_94:
              FPTrunc = (llvm::Value *)v73;
              break;
            default:
              FPTrunc = 0;
              break;
          }
          uint64_t v75 = *(void *)(a1 + 368);
          long long v88 = *(_OWORD *)(v75 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v89, (llvm::IRBuilderBase *)(v75 + 8));
          int v90 = *(_DWORD *)(v75 + 104);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v88, (uint64_t)v20);
          if (v89) {
            llvm::MetadataTracking::untrack();
          }
          if (v35)
          {
            uint64_t v76 = *(void *)v21;
            if (v17 && (*(_DWORD *)(v76 + 8) & 0xFE) == 0x12) {
              uint64_t v76 = **(void **)(v76 + 16);
            }
            __int16 v95 = 257;
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v20, FPTrunc, (llvm::Type *)v76, (const llvm::Twine *)v94);
            if (!v17) {
              goto LABEL_105;
            }
          }
          else if (!v17)
          {
            goto LABEL_105;
          }
          __int16 v95 = 257;
          uint64_t v77 = (llvm::Value *)llvm::ConstantInt::get();
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v20, v86, FPTrunc, v77, (const llvm::Twine *)v94);
LABEL_105:
          uint64_t v24 = (uint64_t)FPTrunc;
        }
      }
      if (*(void *)v21 != *(void *)(a1 + 144)) {
        llvm::Value::replaceAllUsesWith();
      }
      llvm::Instruction::eraseFromParent(v21);
      uint64_t v5 = a3;
      uint64_t v19 = v82;
      if (!v82) {
        goto LABEL_109;
      }
    }
  }
  uint64_t v10 = *((void *)this + 1);
  while (v10)
  {
    uint64_t v11 = *(void *)(v10 + 24);
    uint64_t v10 = *(void *)(v10 + 8);
    uint64_t v12 = *(void (**)(void *, uint64_t))(v5 + 8);
    uint64_t v13 = *(void *)(v5 + 16);
    int v14 = (void *)(*(void *)(a1 + 368) + (v13 >> 1));
    if (v13) {
      uint64_t v12 = *(void (**)(void *, uint64_t))(*v14 + v12);
    }
    v12(v14, v11);
  }
  return llvm::Function::eraseFromParent(v6);
}

char **llvm::IRBuilderBase::SetInsertPoint(llvm::IRBuilderBase *this, llvm::Instruction *a2)
{
  *((void *)this + 6) = *((void *)a2 + 5);
  *((void *)this + 7) = (char *)a2 + 24;
  uint64_t v3 = *((void *)a2 + 6);
  uint64_t v5 = v3;
  if (v3)
  {
    llvm::MetadataTracking::track();
    uint64_t v3 = v5;
  }
  uint64_t result = llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((char **)this, v3);
  if (v5) {
    return (char **)llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t AGCLLVMBuilder::InsertPoint::restoreIP(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    llvm::IRBuilderBase::SetInsertPoint((char **)a2, *(char **)a1, *(char **)(a1 + 8));
  }
  else
  {
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v4;
  if (v4)
  {
    llvm::MetadataTracking::track();
    uint64_t v4 = v6;
  }
  uint64_t result = (uint64_t)llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((char **)a2, v4);
  if (v6) {
    uint64_t result = llvm::MetadataTracking::untrack();
  }
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a1 + 24);
  return result;
}

char **llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(char **result, uint64_t a2)
{
  unsigned int v2 = *result;
  uint64_t v3 = *((unsigned int *)result + 2);
  uint64_t v4 = &(*result)[16 * v3];
  if (a2)
  {
    if (v3)
    {
      uint64_t v5 = 16 * v3;
      uint64_t v6 = *result;
      while (*(_DWORD *)v6)
      {
        v6 += 16;
        v5 -= 16;
        if (!v5) {
          goto LABEL_6;
        }
      }
      *((void *)v6 + 1) = a2;
    }
    else
    {
LABEL_6:
      if (v3 >= *((_DWORD *)result + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)uint64_t v4 = 0;
      *(void *)&v2[16 * v3 + 8] = a2;
      *((_DWORD *)result + 2) = v3 + 1;
    }
  }
  else
  {
    if (v3)
    {
      uint64_t v7 = 16 * v3;
      uint64_t v8 = *result;
      while (*(_DWORD *)v8)
      {
        v8 += 16;
        v7 -= 16;
        if (!v7)
        {
          uint64_t v8 = v4;
          goto LABEL_21;
        }
      }
    }
    else
    {
      uint64_t v8 = *result;
    }
    if (v8 != v4)
    {
      for (uint64_t i = v8 + 16; i != v4; i += 16)
      {
        if (*(_DWORD *)i)
        {
          *(_DWORD *)uint64_t v8 = *(_DWORD *)i;
          *((void *)v8 + 1) = *((void *)i + 1);
          v8 += 16;
        }
      }
    }
LABEL_21:
    *((_DWORD *)result + 2) = (unint64_t)(v8 - v2) >> 4;
  }
  return result;
}

char **llvm::IRBuilderBase::SetInsertPoint(char **result, char *a2, char *a3)
{
  result[6] = a2;
  result[7] = a3;
  if (a2 + 40 != a3)
  {
    uint64_t v3 = result;
    uint64_t v4 = a3 - 24;
    if (!a3) {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *((void *)v4 + 6);
    uint64_t v6 = v5;
    if (v5)
    {
      llvm::MetadataTracking::track();
      uint64_t v5 = v6;
    }
    uint64_t result = llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(v3, v5);
    if (v6) {
      return (char **)llvm::MetadataTracking::untrack();
    }
  }
  return result;
}

uint64_t llvm::CallBase::arg_end(llvm::CallBase *this)
{
  int v2 = *((unsigned __int8 *)this + 16);
  if (v2 == 84)
  {
    uint64_t NumSubclassExtraOperandsDynamic = 0;
  }
  else if (v2 == 39)
  {
    uint64_t NumSubclassExtraOperandsDynamic = llvm::CallBase::getNumSubclassExtraOperandsDynamic(this);
  }
  else
  {
    uint64_t NumSubclassExtraOperandsDynamic = 2;
  }
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0)
  {
    uint64_t Descriptor = 0;
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t Descriptor = llvm::User::getDescriptor(this);
  if ((*((_DWORD *)this + 5) & 0x80000000) == 0) {
    goto LABEL_9;
  }
  uint64_t v11 = llvm::User::getDescriptor(this);
  uint64_t v5 = v11 + v12;
LABEL_10:
  if (((v5 - Descriptor) & 0xFFFFFFFF0) != 0)
  {
    int v6 = *(_DWORD *)(llvm::User::getDescriptor(this) + 8);
    uint64_t v7 = llvm::User::getDescriptor(this);
    uint64_t v9 = (*(_DWORD *)(v7 + v8 - 4) - v6);
  }
  else
  {
    uint64_t v9 = 0;
  }
  return (uint64_t)this + -32 * v9 + -32 * NumSubclassExtraOperandsDynamic - 32;
}

uint64_t llvm::IRBuilderBase::CreateInsertElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  if (a2
    && *((unsigned __int8 *)a2 + 16) <= 0x14u
    && a3
    && *((unsigned __int8 *)a3 + 16) <= 0x14u
    && a4
    && *((unsigned __int8 *)a4 + 16) <= 0x14u)
  {
    uint64_t v10 = (*(uint64_t (**)(void, llvm::Value *, llvm::Value *, llvm::Value *))(**((void **)this + 9)
                                                                                         + 328))(*((void *)this + 9), a2, a3, a4);
    if (v10) {
      BOOL v11 = *(unsigned __int8 *)(v10 + 16) >= 0x1Cu;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v10, (uint64_t)a5);
    }
  }
  else
  {
    __int16 v17 = 257;
    uint64_t v10 = llvm::User::operator new((llvm::User *)0x40);
    MEMORY[0x1CB79F370](v10, a2, a3, a4, v16, 0);
    (*(void (**)(void, uint64_t, const llvm::Twine *, void, void))(**((void **)this + 10) + 16))(*((void *)this + 10), v10, a5, *((void *)this + 6), *((void *)this + 7));
    uint64_t v12 = *((unsigned int *)this + 2);
    if (v12)
    {
      uint64_t v13 = *(void **)this;
      int v14 = &v13[2 * v12];
      do
      {
        llvm::Instruction::setMetadata();
        v13 += 2;
      }
      while (v13 != v14);
    }
  }
  return v10;
}

uint64_t llvm::IRBuilderBase::CreateExtractElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void, llvm::Value *, llvm::Value *))(**((void **)this + 9) + 320))(*((void *)this + 9), a2, a3);
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::User::operator new((llvm::User *)0x40);
    llvm::ExtractElementInst::ExtractElementInst();
    (*(void (**)(void, uint64_t, const llvm::Twine *, void, void))(**((void **)this + 10) + 16))(*((void *)this + 10), v6, a4, *((void *)this + 6), *((void *)this + 7));
    uint64_t v8 = *((unsigned int *)this + 2);
    if (v8)
    {
      uint64_t v9 = *(void **)this;
      uint64_t v10 = &v9[2 * v8];
      do
      {
        llvm::Instruction::setMetadata();
        v9 += 2;
      }
      while (v9 != v10);
    }
  }
  return v6;
}

llvm::Value *AGCLLVMAirBuiltins::buildConvert(uint64_t a1, llvm::Value **a2)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = &AGCLLVMAirBuiltins::initializeTypeConversionMap(void)::convert_map;
  {
    AGCLLVMAirBuiltins::initializeTypeConversionMap(void)::convert_map = 0;
    *(void *)&dword_1EBD0E768 = 0;
    qword_1EBD0E770 = 0x1800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMAirBuiltins::ConversionFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMAirBuiltins::initializeTypeConversionMap(void)::convert_map, &dword_1CAC02000);
  }
  if (!dword_1EBD0E76C)
  {
    int v81 = a2;
    uint64_t v82 = a1;
    uint64_t v89 = 0;
    int v109 = &v111;
    long long v110 = xmmword_1CADD6290;
    while (1)
    {
      unint64_t v5 = 0;
      do
      {
        unint64_t v85 = v5;
        unint64_t v86 = 0;
        uint64_t v92 = off_1E65EA758[v5];
        int v90 = *v92;
        __s = v92 + 2;
        do
        {
          if (*v92 == 102)
          {
            int v84 = 1;
          }
          else
          {
            int v84 = 2;
            if (*off_1E65EA758[v86] != 102)
            {
              char v83 = 0;
              uint64_t v6 = 1;
              goto LABEL_11;
            }
          }
          char v83 = 1;
          uint64_t v6 = 4;
LABEL_11:
          uint64_t v88 = v6;
          uint64_t v7 = 0;
          BOOL v9 = v5 > 2 && v86 > 2;
          BOOL v87 = v9;
          do
          {
            BOOL v10 = !v87;
            if (!v7) {
              BOOL v10 = 0;
            }
            if (!v10)
            {
              char v11 = 0;
              uint64_t v12 = 0;
              char v97 = byte_1CADD6CF4[v85];
              char v95 = byte_1CADD6CF4[v86];
              int v13 = v84;
              if ((v83 & (v7 == 0)) == 0) {
                int v13 = v7;
              }
              int v94 = v13;
              uint64_t v96 = off_1E65EA758[v86];
              int v93 = v96 + 2;
              char v14 = 1;
              while (1)
              {
                __int16 v99 = *v92;
                BOOL v100 = v92[2] == 98;
                __int16 v98 = *v96;
                *(void *)&long long v110 = 0;
                llvm::SmallVectorTemplateBase<char,true>::push_back(&v109, *v92);
                llvm::SmallVectorTemplateBase<char,true>::push_back(&v109, v92[1]);
                uint64_t v15 = (char *)*((void *)&off_1E65EA728 + v89);
                size_t v16 = strlen(v15);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v109, v15, &v15[v16]);
                size_t v17 = strlen(__s);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v109, __s, &__s[v17]);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v109, ".", "");
                llvm::SmallVectorTemplateBase<char,true>::push_back(&v109, *v96);
                llvm::SmallVectorTemplateBase<char,true>::push_back(&v109, v96[1]);
                size_t v18 = strlen(v15);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v109, v15, &v15[v18]);
                size_t v19 = strlen(v93);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v109, v93, &v93[v19]);
                size_t v20 = strlen(*((const char **)&off_1E65EA7B8 + v7));
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v109, *((unsigned char **)&off_1E65EA7B8 + v7), (unsigned char *)(*((void *)&off_1E65EA7B8 + v7) + v20));
                size_t v21 = strlen(*((const char **)&off_1E65EA7E8 + v12));
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v109, *((unsigned char **)&off_1E65EA7E8 + v12), (unsigned char *)(*((void *)&off_1E65EA7E8 + v12) + v21));
                uint64_t v22 = v109;
                size_t v23 = v110;
                unsigned int v24 = llvm::StringMapImpl::LookupBucketFor();
                uint64_t v26 = *v4;
                uint64_t v27 = v24;
                uint64_t v28 = *(void *)(*v4 + 8 * v24);
                if (v28 == -8) {
                  break;
                }
                if (!v28) {
                  goto LABEL_28;
                }
LABEL_37:
                v25.i16[0] = v98;
                v25.i16[1] = v99;
                *(int8x8_t *)v25.i8 = vand_s8((int8x8_t)vceq_s16((int16x4_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 0), (int16x4_t)0x73007300660066), (int8x8_t)0x1000100010001);
                *(_DWORD *)(v28 + 8) = vmovn_s16(v25).u32[0];
                *(unsigned char *)(v28 + 12) = v100;
                *(unsigned char *)(v28 + 13) = v95;
                *(unsigned char *)(v28 + 14) = v97;
                *(_DWORD *)(v28 + 16) = v94;
                *(unsigned char *)(v28 + 20) = v11;
                char v36 = v14 & (v90 != 102);
                char v11 = 1;
                uint64_t v12 = 1;
                char v14 = 0;
                if ((v36 & 1) == 0) {
                  goto LABEL_38;
                }
              }
              LODWORD(qword_1EBD0E770) = qword_1EBD0E770 - 1;
LABEL_28:
              uint64_t v29 = v7;
              long long v30 = v4;
              uint64_t v31 = MEMORY[0x1CB79F270](v23 + 25, 8);
              uint64_t v32 = (void *)v31;
              uint64_t v33 = v31 + 24;
              if (v23) {
                memcpy((void *)(v31 + 24), v22, v23);
              }
              *(unsigned char *)(v33 + v23) = 0;
              v32[1] = 0;
              v32[2] = 0;
              *uint64_t v32 = v23;
              *(void *)(v26 + 8 * v27) = v32;
              uint64_t v4 = v30;
              ++*((_DWORD *)v30 + 3);
              uint64_t v34 = (uint64_t *)(*v30 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)v30));
              uint64_t v7 = v29;
              while (1)
              {
                uint64_t v28 = *v34;
                if (*v34 && v28 != -8) {
                  break;
                }
                ++v34;
              }
              goto LABEL_37;
            }
LABEL_38:
            ++v7;
          }
          while (v7 != v88);
          unint64_t v5 = v85;
          ++v86;
        }
        while (v86 != 12);
        unint64_t v5 = v85 + 1;
      }
      while (v85 != 11);
      if (++v89 == 6)
      {
        if (v109 != &v111) {
          free(v109);
        }
        a2 = v81;
        a1 = v82;
        break;
      }
    }
  }
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t v38 = Key;
  if (Key == -1) {
    uint64_t v38 = *((unsigned int *)v4 + 2);
  }
  uint64_t v39 = *(void *)(*v4 + 8 * v38);
  int v40 = *a2;
  if (*(unsigned char *)(v39 + 9))
  {
    if (*(unsigned char *)(v39 + 8))
    {
      unsigned int v41 = *(unsigned __int8 *)(v39 + 14);
      unsigned int v42 = *(unsigned __int8 *)(v39 + 13);
      if (v41 != v42) {
        goto LABEL_52;
      }
      if (*(void *)v40 == *(void *)(a1 + 160))
      {
        uint64_t v63 = (llvm::IRBuilderBase *)(a1 + 8);
        uint64_t v64 = *(llvm::Type **)(a1 + 168);
        __int16 v112 = 257;
        FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 8), v40, v64, (const llvm::Twine *)&v109);
        uint64_t v48 = *(llvm::Type **)(a1 + 152);
      }
      else
      {
        if (*(void *)v40 != *(void *)(a1 + 152))
        {
LABEL_52:
          if (v41 >= v42)
          {
            uint64_t v62 = *(llvm::Type **)(a1 + 168);
            __int16 v112 = 257;
            return (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 8), v40, v62, (const llvm::Twine *)&v109);
          }
          uint64_t v43 = *(void *)(a1 + 752);
          if (v43)
          {
            if (*(unsigned char *)(v43 + 19))
            {
              uint64_t v44 = *(void *)(a1 + 368);
              long long v101 = *(_OWORD *)(a1 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(&v102, (llvm::IRBuilderBase *)(a1 + 8));
              int v103 = *(_DWORD *)(a1 + 104);
              int v40 = (llvm::Value *)AGCLLVMTargetLowerer::buildRTZF16Value(v44, (uint64_t)&v101, (uint64_t *)v40, 0);
              if (v102) {
                llvm::MetadataTracking::untrack();
              }
            }
          }
          int v45 = *(_DWORD *)(v39 + 16);
          if (v45 == 1 || v45 == 2)
          {
            int v46 = (llvm::IRBuilderBase *)(a1 + 8);
            uint64_t v47 = 160;
            if (!*(unsigned char *)(v39 + 12)) {
              uint64_t v47 = 152;
            }
            uint64_t v48 = *(llvm::Type **)(a1 + v47);
            __int16 v112 = 257;
            FPExt = v40;
            return (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v46, FPExt, v48, (const llvm::Twine *)&v109);
          }
          return 0;
        }
        uint64_t v63 = (llvm::IRBuilderBase *)(a1 + 8);
        int v65 = *(llvm::Type **)(a1 + 168);
        __int16 v112 = 257;
        FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 8), v40, v65, (const llvm::Twine *)&v109);
        uint64_t v48 = *(llvm::Type **)(a1 + 160);
      }
      __int16 v112 = 257;
      int v46 = v63;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v46, FPExt, v48, (const llvm::Twine *)&v109);
    }
    uint64_t v54 = 160;
    if (!*(unsigned char *)(v39 + 12)) {
      uint64_t v54 = 152;
    }
    uint64_t v55 = 168;
    if (*(unsigned char *)(v39 + 14) == 16) {
      uint64_t v55 = v54;
    }
    if (*(_DWORD *)(v39 + 16) == 1)
    {
      uint64_t v56 = *(llvm::Type **)(a1 + v55);
      uint64_t v57 = (llvm::IRBuilderBase *)(a1 + 8);
      if (*(unsigned char *)(v39 + 10))
      {
        __int16 v112 = 257;
        return (llvm::Value *)llvm::IRBuilderBase::CreateSIToFP(v57, v40, v56, (const llvm::Twine *)&v109);
      }
      else
      {
        __int16 v104 = 257;
        return (llvm::Value *)llvm::IRBuilderBase::CreateUIToFP(v57, v40, v56, (const llvm::Twine *)&v101);
      }
    }
    return 0;
  }
  if (!*(unsigned char *)(v39 + 8))
  {
    uint64_t v59 = 0;
    unsigned int v60 = *(unsigned __int8 *)(v39 + 14);
    if (v60 <= 0xF)
    {
      if (v60 == 1)
      {
        int v79 = (llvm::CmpInst **)AGCLLVMBuilder::i32Extend((AGCLLVMBuilder *)a1, (llvm::Type **)v40, *(unsigned __int8 *)(v39 + 10));
        uint64_t v80 = llvm::ConstantInt::get();
        __int16 v112 = 257;
        return (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 33, v79, v80, (uint64_t)&v109);
      }
      if (v60 != 8) {
        goto LABEL_119;
      }
      uint64_t v61 = (uint64_t *)(a1 + 184);
    }
    else
    {
      switch(v60)
      {
        case 0x10u:
          uint64_t v61 = (uint64_t *)(a1 + 192);
          break;
        case 0x20u:
          uint64_t v61 = (uint64_t *)(a1 + 200);
          break;
        case 0x40u:
          uint64_t v61 = (uint64_t *)(a1 + 208);
          break;
        default:
LABEL_119:
          if (v60 >= *(unsigned __int8 *)(v39 + 13))
          {
            uint64_t v77 = a1 + 8;
            if (*(unsigned char *)(v39 + 10))
            {
              __int16 v112 = 257;
              uint64_t v78 = 40;
            }
            else
            {
              __int16 v112 = 257;
              uint64_t v78 = 39;
            }
          }
          else
          {
            uint64_t v77 = a1 + 8;
            __int16 v112 = 257;
            uint64_t v78 = 38;
          }
          return (llvm::Value *)llvm::IRBuilderBase::CreateCast(v77, v78, (uint64_t)v40, v59, (uint64_t)&v109);
      }
    }
    uint64_t v59 = *v61;
    goto LABEL_119;
  }
  uint64_t v50 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, v40, 1);
  uint64_t v51 = 0;
  BOOL v108 = v50;
  unsigned int v52 = *(unsigned __int8 *)(v39 + 14);
  if (v52 <= 0xF)
  {
    if (v52 == 1)
    {
      llvm::ConstantFP::get();
      __int16 v112 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper();
    }
    if (v52 == 8)
    {
      unint64_t v53 = (llvm::Type **)(a1 + 184);
      goto LABEL_94;
    }
  }
  else
  {
    switch(v52)
    {
      case 0x10u:
        unint64_t v53 = (llvm::Type **)(a1 + 192);
        goto LABEL_94;
      case 0x20u:
        unint64_t v53 = (llvm::Type **)(a1 + 200);
        goto LABEL_94;
      case 0x40u:
        unint64_t v53 = (llvm::Type **)(a1 + 208);
LABEL_94:
        uint64_t v51 = *v53;
        break;
    }
  }
  uint64_t v66 = *(char **)(a1 + 752);
  if (v66)
  {
    BOOL v67 = (*(unsigned int (**)(char *))(*(void *)&v66[*(void *)(*(void *)v66 - 24)] + 64))(&v66[*(void *)(*(void *)v66 - 24)]) == 6
       && *(unsigned char *)(v39 + 11) == 0;
    if (v67 && *(_DWORD *)(v39 + 16) != 1)
    {
      uint64_t v69 = *(void *)(a1 + 368);
      long long v105 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v106, (llvm::IRBuilderBase *)(a1 + 8));
      int v107 = *(_DWORD *)(a1 + 104);
      uint64_t v50 = (llvm *)AGCLLVMTargetLowerer::buildBiasF2IVarying(v69, (uint64_t)&v105, v50);
      BOOL v108 = v50;
      if (v106) {
        llvm::MetadataTracking::untrack();
      }
    }
  }
  int v70 = *(_DWORD *)(v39 + 16);
  if (v70 == 2)
  {
    uint64_t v74 = (llvm::IRBuilderBase *)(a1 + 8);
    if (*(unsigned char *)(v39 + 11))
    {
      __int16 v112 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPToSI(v74, v50, v51, (const llvm::Twine *)&v109);
    }
    else
    {
      __int16 v112 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI(v74, v50, v51, (const llvm::Twine *)&v109);
    }
  }
  else
  {
    if (v70 != 1) {
      return 0;
    }
    uint64_t v71 = *(void *)(a1 + 368);
    uint64_t v72 = *(void *)(v71 + 1280);
    if (v72) {
      size_t v73 = strlen(*(const char **)(v71 + 1280));
    }
    else {
      size_t v73 = 0;
    }
    uint64_t v75 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, v72, v73, *(void *)(a1 + 200), *(void *)(a1 + 168));
    __int16 v112 = 257;
    uint64_t v76 = (llvm::Type **)llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v75 + 24), v75, (uint64_t)&v108, 1, (uint64_t)&v109);
    __int16 v104 = 257;
    return llvm::IRBuilderBase::CreateIntCast((llvm::IRBuilderBase *)(a1 + 8), v76, v51, 0, (const llvm::Twine *)&v101);
  }
}

uint64_t llvm::IRBuilderBase::CreateFPExt(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((unsigned char *)this + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return llvm::IRBuilderBase::CreateCast((uint64_t)this, 46, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t llvm::IRBuilderBase::CreateFPTrunc(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((unsigned char *)this + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return llvm::IRBuilderBase::CreateCast((uint64_t)this, 45, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

llvm::Value *AGCLLVMAirBuiltins::buildAny(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::buildAnyOrAll(this, a2, 1);
}

llvm::Value *AGCLLVMAirBuiltins::buildAnyOrAll(AGCLLVMAirBuiltins *this, llvm::Value *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)uint64_t v15 = 0u;
  long long v16 = 0u;
  unsigned int v5 = AGCLLVMBuilder::unboxVector(this, a2, v15);
  uint64_t v6 = v15[0];
  if (v5 >= 2)
  {
    uint64_t v7 = (AGCLLVMAirBuiltins *)((char *)this + 8);
    uint64_t v8 = v5 - 1;
    BOOL v9 = &v15[1];
    do
    {
      BOOL v10 = *v9;
      __int16 v14 = 257;
      if (a3) {
        uint64_t v11 = llvm::IRBuilderBase::CreateOr(v7, v6, v10, (const llvm::Twine *)v13);
      }
      else {
        uint64_t v11 = llvm::IRBuilderBase::CreateAnd(v7, v6, v10, (const llvm::Twine *)v13);
      }
      uint64_t v6 = (llvm::Value *)v11;
      ++v9;
      --v8;
    }
    while (v8);
  }
  return v6;
}

uint64_t llvm::IRBuilderBase::CreateOr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 9) + 32))(*((void *)this + 9));
  if (!v6)
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltins::buildFastFMax(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = (void *)*((void *)this + 94);
  if (v6) {
    LODWORD(v6) = *(_DWORD *)((unsigned char *)v6 + *(void *)(*v6 - 24) + 136) & 2;
  }
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    int v7 = *(unsigned __int8 *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  else {
    int v7 = *(_DWORD *)(*(void *)a2 + 8);
  }
  BOOL v9 = v7 == 2 && v6 == 0;
  uint64_t v10 = *((void *)this + 46);
  long long v13 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v14, (AGCLLVMAirBuiltins *)((char *)this + 8));
  int v15 = *((_DWORD *)this + 26);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *, BOOL))(*(void *)v10 + 56))(v10, &v13, a2, a3, v9);
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  return v11;
}

void *AGCLLVMGen3TargetLowerer::getWriteSuffix(void *a1, void *a2, uint64_t a3)
{
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
    a3 = **(void **)(a3 + 16);
  }
  if (a2[24] == a3)
  {
    uint64_t v3 = "i16";
  }
  else if (a2[25] == a3)
  {
    uint64_t v3 = "i32";
  }
  else if (a2[19] == a3)
  {
    uint64_t v3 = "f16";
  }
  else
  {
    uint64_t v3 = "f32";
  }
  return std::string::basic_string[abi:nn180100]<0>(a1, v3);
}

llvm::Value *AGCLLVMGen3TargetLowerer::convertFromF16(AGCLLVMGen3TargetLowerer *this, llvm::Value *a2, int a3)
{
  if (!a3) {
    return a2;
  }
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
  {
    uint64_t v5 = *(unsigned int *)(*(void *)a2 + 32);
    llvm::FixedVectorType::get();
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        __int16 v17 = 257;
        uint64_t v8 = (llvm::Value *)llvm::ConstantInt::get();
        Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), a2, v8, (const llvm::Twine *)v16);
        uint64_t v10 = (llvm::Type *)*((void *)this + 21);
        v15[16] = 257;
        FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((AGCLLVMGen3TargetLowerer *)((char *)this + 8), Element, v10, (const llvm::Twine *)v15);
        __int16 v17 = 257;
        uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), InsertElement, FPExt, v12, (const llvm::Twine *)v16);
      }
    }
  }
  else
  {
    long long v13 = (llvm::Type *)*((void *)this + 21);
    __int16 v17 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((AGCLLVMGen3TargetLowerer *)((char *)this + 8), a2, v13, (const llvm::Twine *)v16);
  }
  return InsertElement;
}

void AGCLLVMGen3TargetLowerer::getReadSuffix(std::string *a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v5 = AGCLLVMGen3TargetLowerer::getReadSuffix(llvm::Type *,unsigned short)::num_str[a4];
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
    a3 = **(void **)(a3 + 16);
  }
  if (a2[24] == a3)
  {
    uint64_t v6 = "i16";
  }
  else if (a2[25] == a3)
  {
    uint64_t v6 = "i32";
  }
  else if (a2[19] == a3)
  {
    uint64_t v6 = "f16";
  }
  else
  {
    uint64_t v6 = "f32";
  }
  std::string::basic_string[abi:nn180100]<0>(&v8, v6);
  int v7 = std::string::insert(&v8, 0, v5);
  *a1 = *v7;
  v7->__r_.__value_.__r.__words[0] = 0;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

llvm::Value *AGCLLVMTargetBuilder::CreateSqrt(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMTargetBuilder *)((char *)this + 8));
  int v5 = *((_DWORD *)this + 26);
  int v10 = v5;
  long long v11 = v8;
  uint64_t v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    int v5 = v10;
  }
  int v13 = v5;
  uint64_t v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.sqrt");
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltins::buildFastFSaturate(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v8, (AGCLLVMAirBuiltins *)((char *)this + 8));
  int v9 = *((_DWORD *)this + 26);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, void))(*(void *)v4 + 40))(v4, &v7, a2, 0);
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return v5;
}

double llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::LookupBucketFor<llvm::Function const*>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
  uint64_t v6 = v10;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::grow(a1, v8);
    uint64_t v10 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::LookupBucketFor<llvm::Function const*>(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
    uint64_t v6 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)v6 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  uint64_t v9 = *a2;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(void *)uint64_t v6 = v9;
  *(void *)(v6 + 8) = v6 + 24;
  *(void *)&double result = 0x400000000;
  *(void *)(v6 + 16) = 0x400000000;
  *(void *)(v6 + 56) = v6 + 72;
  *(_DWORD *)(v6 + 68) = 4;
  *(void *)(v6 + 104) = v6 + 120;
  *(_DWORD *)(v6 + 116) = 4;
  *(void *)(v6 + 152) = v6 + 168;
  *(_DWORD *)(v6 + 164) = 4;
  *(void *)(v6 + 200) = v6 + 216;
  *(_DWORD *)(v6 + 212) = 4;
  *(void *)(v6 + 248) = v6 + 264;
  *(_DWORD *)(v6 + 260) = 4;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::LookupBucketFor<llvm::Function const*>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 296 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 296 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = MEMORY[0x1CB79F270]((void *)v8, 296 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 296 * v10;
      do
      {
        *double result = -4096;
        result += 37;
        v11 -= 296;
      }
      while (v11);
    }
    unsigned int v34 = v3;
    if (v3)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 296 * v3;
      do
      {
        uint64_t v14 = (char *)v4 + v12;
        uint64_t v15 = *(void *)((char *)v4 + v12);
        if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v35 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::LookupBucketFor<llvm::Function const*>(*(void *)a1, *(_DWORD *)(a1 + 16), v15, &v35);
          long long v16 = v35;
          *(void *)int v35 = *(void *)v14;
          *((void *)v16 + 1) = v16 + 24;
          __int16 v17 = (void **)(v14 + 8);
          *((void *)v16 + 2) = 0x400000000;
          if (*((_DWORD *)v14 + 4)) {
            llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v16 + 8), (uint64_t)(v14 + 8));
          }
          *((void *)v16 + 7) = v16 + 72;
          *((void *)v16 + 8) = 0x400000000;
          size_t v18 = (char *)v4 + v12;
          if (*(_DWORD *)((char *)v4 + v12 + 64)) {
            llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v16 + 56), (uint64_t)(v18 + 56));
          }
          *((void *)v16 + 13) = v16 + 120;
          *((void *)v16 + 14) = 0x400000000;
          if (*((_DWORD *)v18 + 28)) {
            llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v16 + 104), (uint64_t)v4 + v12 + 104);
          }
          *((void *)v16 + 19) = v16 + 168;
          *((void *)v16 + 20) = 0x400000000;
          size_t v19 = (char *)v4 + v12;
          if (*(_DWORD *)((char *)v4 + v12 + 160)) {
            llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v16 + 152), (uint64_t)(v19 + 152));
          }
          *((void *)v16 + 25) = v16 + 216;
          *((void *)v16 + 26) = 0x400000000;
          if (*((_DWORD *)v19 + 52)) {
            llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v16 + 200), (uint64_t)v4 + v12 + 200);
          }
          *((void *)v16 + 31) = v16 + 264;
          *((void *)v16 + 32) = 0x400000000;
          size_t v20 = (char *)v4 + v12;
          unsigned int v21 = *(_DWORD *)((char *)v4 + v12 + 256);
          if (v21 && v14 != v16)
          {
            uint64_t v22 = *((void *)v20 + 31);
            uint64_t v23 = (uint64_t)v4 + v12 + 264;
            if (v23 == v22)
            {
              if (v21 >= 5)
              {
                *((_DWORD *)v16 + 64) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(*((void **)v16 + 31), *((const void **)v20 + 31), 8 * *(unsigned int *)((char *)v4 + v12 + 256));
              *((_DWORD *)v16 + 64) = v21;
              *((_DWORD *)v20 + 64) = 0;
            }
            else
            {
              uint64_t v24 = *((void *)v20 + 32);
              *((void *)v16 + 31) = v22;
              *((void *)v16 + 32) = v24;
              *((void *)v20 + 31) = v23;
              *((void *)v20 + 32) = 0;
            }
          }
          ++*(_DWORD *)(a1 + 8);
          int16x8_t v25 = (char *)*((void *)v20 + 31);
          if (v20 + 264 != v25) {
            free(v25);
          }
          uint64_t v26 = (char *)v4 + v12;
          uint64_t v27 = *(char **)((char *)v4 + v12 + 200);
          if ((char *)v4 + v12 + 216 != v27) {
            free(v27);
          }
          uint64_t v28 = (char *)*((void *)v26 + 19);
          if (v26 + 168 != v28) {
            free(v28);
          }
          uint64_t v29 = (char *)v4 + v12;
          long long v30 = *(char **)((char *)v4 + v12 + 104);
          if ((char *)v4 + v12 + 120 != v30) {
            free(v30);
          }
          uint64_t v31 = (char *)*((void *)v29 + 7);
          if (v29 + 72 != v31) {
            free(v31);
          }
          if ((char *)v4 + v12 + 24 != *v17) {
            free(*v17);
          }
        }
        v12 += 296;
      }
      while (v13 != v12);
    }
    return (void *)llvm::deallocate_buffer(v4, (void *)(296 * v34));
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v32 = *(_DWORD *)(a1 + 16);
    if (v32)
    {
      uint64_t v33 = 296 * v32;
      do
      {
        *double result = -4096;
        result += 37;
        v33 -= 296;
      }
      while (v33);
    }
  }
  return result;
}

uint64_t AGCLLVMUserObject::createAccelerationStructureHeapGlobal(AGCLLVMUserObject *this)
{
  int v2 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24));
  if ((v2 - 7) >= 2)
  {
    if (v2 == 29)
    {
      uint64_t v5 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 712))(v5);
      goto LABEL_7;
    }
    if (v2 != 22)
    {
      uint64_t v6 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 272))(v6);
      goto LABEL_7;
    }
  }
  uint64_t v3 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 592))(v3);
LABEL_7:
  unsigned int v7 = v4;
  if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1785)
    && !*((unsigned char *)this + 3712))
  {
    uint64_t v8 = (char *)this + 2712;
    if (!*((void *)this + 339))
    {
      uint64_t v15 = (llvm::Type *)llvm::PointerType::get();
      v17[0] = "agc.bvh_state_words_heap.";
      uint64_t v18 = v7;
      __int16 v19 = 2051;
      GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v15, (const llvm::Twine *)v17, v7, 0, 5, 1);
      uint64_t v13 = (AGCLLVMUserObject *)((char *)this + 2696);
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = (char *)this + 2712;
    if (!*((void *)this + 339))
    {
      uint64_t v9 = (AGCLLVMUserObject *)((char *)this + 2696);
      llvm::PointerType::get();
      unsigned int v10 = (llvm::Type *)llvm::PointerType::get();
      v17[0] = "agc.sw_ads_heap.";
      uint64_t v18 = v7;
      __int16 v19 = 2051;
      uint64_t v11 = AGCLLVMUserObject::createGlobalBufferBinding(this, v10, (const llvm::Twine *)v17, v7, 0, 5, 0);
      llvm::GlobalValue::setLinkage((uint64_t)v11, 10);
      *((unsigned char *)v11 + 80) &= ~1u;
      llvm::Constant::getNullValue(*((llvm::Constant **)v11 + 3), v12);
      llvm::GlobalVariable::setInitializer();
      uint64_t v13 = v9;
      GlobalBufferBinding = v11;
LABEL_13:
      llvm::ValueHandleBase::operator=(v13, (uint64_t)GlobalBufferBinding);
    }
  }
  return *(void *)v8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderBVHStateHeapBufferIndex()
{
  return 54;
}

uint64_t AGCLLVMUserObject::replaceSamplerInput<llvm::Argument>(uint64_t a1, llvm::Value *a2, uint64_t a3)
{
  if (!*((void *)a2 + 1)) {
    return 1;
  }
  uint64_t v18 = 0;
  BOOL v17 = 0;
  int v5 = parseMDSampler(a3, (_DWORD *)&v18 + 1, &v18, &v17);
  uint64_t result = 0;
  if (v5)
  {
    uint64_t v7 = *(void *)a2;
    BOOL v8 = v17;
    if (v17)
    {
      uint64_t v9 = **(void **)(v7 + 16);
      if (*(unsigned char *)(v9 + 8) == 16) {
        uint64_t v9 = **(void **)(v9 + 16);
      }
      uint64_t v7 = **(void **)(v9 + 16);
    }
    int v10 = *(_DWORD *)(v7 + 8);
    if ((v10 & 0x1FF) == 0x110)
    {
      uint64_t v7 = **(void **)(v7 + 16);
      LOBYTE(v10) = *(unsigned char *)(v7 + 8);
    }
    if (v10 == 15)
    {
      uint64_t v11 = **(void **)(v7 + 16);
      if ((*(_DWORD *)(v11 + 8) & 0x1FF) == 0x110) {
        uint64_t v7 = **(void **)(v11 + 16);
      }
    }
    char v16 = 0;
    *((void *)&v14 + 1) = 0;
    uint64_t v15 = 0;
    uint64_t v15 = **(void **)(v7 + 16);
    unsigned int v13 = v18;
    unsigned int v12 = HIDWORD(v18);
    LODWORD(v14) = HIDWORD(v18) & 0xFFFFF;
    DWORD1(v14) = v18;
    std::__tree<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::__emplace_unique_key_args<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::Sampler const&>((uint64_t *)(a1 + 976), HIDWORD(v18) & 0xFFFFF, &v14);
    return AGCLLVMUserObject::replaceTextureOrSamplerArgument((AGCLLVMUserObject *)a1, a2, v12, v13, v8, (unsigned __int8 **)(a1 + 2944));
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t AGCLLVMUserObject::replaceTextureOrSamplerArgument(AGCLLVMUserObject *this, llvm::Value *a2, unsigned int a3, unsigned int a4, char a5, unsigned __int8 **a6)
{
  BOOL v8 = a2;
  v119[32] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)a2;
  if (a5)
  {
    if (*(unsigned char *)(v10 + 8) != 15) {
      return 0;
    }
    uint64_t v89 = **(llvm::Type ***)(v10 + 16);
    uint64_t v11 = (llvm::Type *)**((void **)v89 + 2);
    uint64_t v102 = v11;
    if (*((unsigned char *)v11 + 8) == 16) {
      uint64_t v102 = (llvm::Type *)**((void **)v11 + 2);
    }
    __src = a2;
    uint64_t v117 = v119;
    uint64_t v118 = 0x2000000000;
    llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v117, &__src, &v115);
    for (uint64_t i = *((void *)v8 + 1); i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v13 = *(void *)(i + 24);
      if (*(unsigned char *)(v13 + 16) == 77) {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v117, v13);
      }
    }
    unsigned int v14 = a3;
    __src = v116;
    uint64_t v115 = 0x2000000000;
    long long v91 = v8;
    if (v118)
    {
      uint64_t v15 = (uint64_t *)v117;
      char v16 = (uint64_t *)((char *)v117 + 8 * v118);
      unint64_t v17 = a4;
      __int16 v98 = (AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)a6;
      unsigned int v88 = a3;
      uint64_t v92 = v16;
      unint64_t v93 = a3 | ((unint64_t)(a3 + a4 - 1) << 32);
      __int16 v99 = v11;
      unsigned int v94 = a3;
      while (1)
      {
        uint64_t v18 = *(llvm::Type ***)(*(void *)*v15 + 16);
        __int16 v19 = *v18;
        int v20 = *((unsigned __int8 *)*v18 + 8);
        if (*v18) {
          BOOL v21 = v20 == 16;
        }
        else {
          BOOL v21 = 0;
        }
        if (v21)
        {
          if (*((_DWORD *)v19 + 3) != 1) {
            goto LABEL_103;
          }
          int v23 = *(unsigned __int8 *)(**((void **)v19 + 2) + 8);
          BOOL v21 = v23 == 15;
          unsigned int v22 = v23 != 15;
          if (!v21) {
            __int16 v19 = (llvm::Type *)**((void **)v19 + 2);
          }
          int v20 = *((unsigned __int8 *)v19 + 8);
        }
        else
        {
          unsigned int v22 = 0;
        }
        if (v20 == 17) {
          uint64_t v24 = v19;
        }
        else {
          uint64_t v24 = 0;
        }
        if (v24)
        {
          if (*((void *)v24 + 4) > v17) {
            goto LABEL_103;
          }
          __int16 v19 = (llvm::Type *)**((void **)v24 + 2);
          ++v22;
          int v20 = *((unsigned __int8 *)v19 + 8);
        }
        if (v20 == 16) {
          int16x8_t v25 = v19;
        }
        else {
          int16x8_t v25 = 0;
        }
        if (v25)
        {
          if (*((_DWORD *)v25 + 3) != 1) {
            goto LABEL_103;
          }
          __int16 v19 = (llvm::Type *)**((void **)v25 + 2);
          unsigned int v26 = v22 + 2;
        }
        else
        {
          unsigned int v26 = v22 + 1;
        }
        if ((unint64_t)v24 | (unint64_t)v25) {
          BOOL v27 = v19 == v102;
        }
        else {
          BOOL v27 = 0;
        }
        if (v27)
        {
          BOOL v100 = v25;
          uint64_t v97 = v22 + 1;
          uint64_t v95 = *v15;
          uint64_t v28 = *(void *)(*v15 + 8);
          if (!v28)
          {
LABEL_101:
            a6 = (unsigned __int8 **)v98;
            uint64_t v11 = v99;
            unint64_t v17 = a4;
            char v16 = v92;
            if (*(unsigned __int8 *)(v95 + 16) > 0x1Bu) {
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, v95);
            }
            goto LABEL_103;
          }
          uint64_t v96 = v22;
          unsigned int v101 = v26;
          while (2)
          {
            uint64_t v29 = *(void *)(v28 + 24);
            if (!v29
              || *(unsigned char *)(v29 + 16) != 62
              || ((uint64_t v30 = *(_DWORD *)(v29 + 20) & 0x7FFFFFF,
                   uint64_t v31 = (v30 - 1),
                   unsigned int v32 = **(llvm::Type ***)(*(void *)v29 + 16),
                   v32 == v102)
                ? (BOOL v33 = v31 == v26)
                : (BOOL v33 = 1),
                  !v33 || (v32 == v100 ? (BOOL v34 = v30 == v26) : (BOOL v34 = 1), !v34)))
            {
LABEL_100:
              uint64_t v28 = *(void *)(v28 + 8);
              if (!v28) {
                goto LABEL_101;
              }
              continue;
            }
            break;
          }
          if (v30 != 1)
          {
            uint64_t v35 = v29 - 32 * v30 + 32;
            uint64_t v36 = v96;
            do
            {
              if (v36)
              {
                uint64_t v37 = *(void *)v35;
                if (*(unsigned char *)(*(void *)v35 + 16) != 16) {
                  goto LABEL_100;
                }
                uint64_t v38 = (void *)(v37 + 24);
                unsigned int v39 = *(_DWORD *)(v37 + 32);
                if (v39 >= 0x41)
                {
                  int v40 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v37 + 24));
                  unsigned int v26 = v101;
                  if (v39 - v40 > 0x40) {
                    goto LABEL_100;
                  }
                  uint64_t v38 = (void *)*v38;
                }
                if (*v38) {
                  goto LABEL_100;
                }
              }
              v35 += 32;
              --v36;
            }
            while (--v31);
          }
          unsigned int v41 = (char *)this + *(void *)(*(void *)this - 24);
          long long v111 = *(_OWORD *)(v41 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v112, (llvm::IRBuilderBase *)(v41 + 40));
          int v113 = *((_DWORD *)v41 + 34);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Instruction *)v29);
          unsigned int v42 = *(llvm::Type ***)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF) + 32 * v97);
          uint64_t v43 = *(void *)(*(void *)this - 24);
          uint64_t v44 = *(llvm::Type **)((char *)this + v43 + 232);
          __int16 v110 = 257;
          Intuint64_t Cast = llvm::IRBuilderBase::CreateIntCast((AGCLLVMUserObject *)((char *)this + v43 + 40), v42, v44, 0, (const llvm::Twine *)__p);
          if (IntCast) {
            BOOL v46 = *((unsigned char *)IntCast + 16) == 16;
          }
          else {
            BOOL v46 = 0;
          }
          unint64_t v47 = v93;
          if (v46)
          {
            uint64_t v48 = (void *)((char *)IntCast + 24);
            if (*((_DWORD *)IntCast + 8) >= 0x41u) {
              uint64_t v48 = (void *)*v48;
            }
            unint64_t v47 = (*(_DWORD *)v48 + v94) | ((unint64_t)(*(_DWORD *)v48 + v94) << 32);
          }
          unint64_t v107 = v47;
          unsigned int v49 = AGCLLVMUserObject::buildAPIResourceIntrinsic(this, (unsigned __int8 **)v98, v99, IntCast, (AGCArgumentBuffer::Resource::Bounds *)&v107);
          if (v32 == v100)
          {
            uint64_t v50 = (char *)this + *(void *)(*(void *)this - 24) + 40;
            uint64_t v51 = llvm::UndefValue::get();
            int v106 = 0;
            __int16 v110 = 257;
            llvm::IRBuilderBase::CreateInsertValue((uint64_t)v50, v51, (uint64_t)v49, (uint64_t)&v106, 1, (uint64_t)__p);
          }
          uint64_t v52 = *(void *)(v29 + 8);
          if (!v52)
          {
LABEL_93:
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, v29);
            uint64_t v59 = *(void *)(*(void *)this - 24);
            long long v103 = v111;
            uint64_t v104 = v112;
            if (v112) {
              llvm::MetadataTracking::track();
            }
            int v105 = v113;
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v103, (uint64_t)this + v59 + 40);
            if (v104) {
              llvm::MetadataTracking::untrack();
            }
            if (v112) {
              llvm::MetadataTracking::untrack();
            }
            unsigned int v26 = v101;
            goto LABEL_100;
          }
          while (2)
          {
            uint64_t v53 = *(void *)(v52 + 24);
            int v54 = *(unsigned __int8 *)(v53 + 16);
            if (v53 && v54 == 60)
            {
              llvm::Value::replaceAllUsesWith();
              goto LABEL_75;
            }
            if (v53)
            {
              if (v54 == 77)
              {
                uint64_t v55 = *(void *)(v53 + 8);
                if (v55)
                {
                  if (!*(void *)(v55 + 8)
                    && *(unsigned char *)(*(void *)v53 + 8) == 15
                    && **(void **)(*(void *)v53 + 16) == *(void *)((char *)this
                                                                         + *(void *)(*(void *)this - 24)
                                                                         + 240))
                  {
                    uint64_t v56 = *(void *)(v55 + 24);
                    if (v56)
                    {
                      if (*(unsigned char *)(v56 + 16) == 60)
                      {
                        uint64_t v57 = *(void *)(v56 + 8);
                        if (v57)
                        {
                          if (!*(void *)(v57 + 8))
                          {
                            uint64_t v58 = *(void *)(v57 + 24);
                            if (v58)
                            {
                              if (*(unsigned char *)(v58 + 16) == 76
                                && (*(llvm::Type **)v58 == v99 || *(llvm::Type **)v58 == v100))
                              {
                                uint64_t v87 = *(void *)(v57 + 24);
                                llvm::Value::replaceAllUsesWith();
                                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, v87);
                                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, v56);
LABEL_75:
                                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, v53);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            uint64_t v52 = *(void *)(v52 + 8);
            if (!v52) {
              goto LABEL_93;
            }
            continue;
          }
        }
LABEL_103:
        if (++v15 == v16)
        {
          BOOL v8 = v91;
          unsigned int v14 = v88;
          if (v115)
          {
            unsigned int v60 = (llvm::Instruction **)__src;
            uint64_t v61 = 8 * v115;
            do
            {
              if (!*((void *)*v60 + 1)) {
                llvm::Instruction::eraseFromParent(*v60);
              }
              ++v60;
              v61 -= 8;
            }
            while (v61);
          }
          break;
        }
      }
    }
    if (*((void *)v8 + 1))
    {
      uint64_t Name = (void *)llvm::Value::getName(v8);
      if (Name)
      {
        std::string::basic_string[abi:nn180100](__p, Name, v63);
        if (v109 >= 0) {
          int v70 = __p;
        }
        else {
          LOBYTE(v70) = __p[0];
        }
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        int v70 = __p;
        uint64_t v109 = 0;
      }
      printMessage((char **)&AGCPrinter, "!!!! Perf: Argument %s: failed to patten match the array of texture/sampler, spilling!!", v64, v65, v66, v67, v68, v69, (char)v70);
      if (SHIBYTE(v109) < 0) {
        operator delete(__p[0]);
      }
      uint64_t AllocaInEntryBlock = AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 32), v89);
      uint64_t v79 = AllocaInEntryBlock + 24;
      if (!AllocaInEntryBlock) {
        uint64_t v79 = 0;
      }
      llvm::IRBuilderBase::SetInsertPoint((char **)((char *)this + *(void *)(*(void *)this - 24) + 40), *(char **)(AllocaInEntryBlock + 40), *(char **)(v79 + 8));
      if (a4)
      {
        uint64_t v80 = 0;
        do
        {
          LODWORD(v107) = v14 + v80;
          HIDWORD(v107) = v14 + v80;
          int v81 = (char *)this + *(void *)(*(void *)this - 24);
          *(void *)&long long v111 = llvm::ConstantInt::get();
          *((void *)&v111 + 1) = llvm::ConstantInt::get();
          __int16 v110 = 257;
          char v83 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)AllocaInEntryBlock, v82);
          uint64_t GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)(v81 + 40), (uint64_t)v83, (uint64_t *)AllocaInEntryBlock, (uint64_t **)&v111, 2, (uint64_t)__p);
          unint64_t v85 = (llvm::Value *)llvm::ConstantInt::get();
          unint64_t v86 = (llvm::Type **)AGCLLVMUserObject::buildAPIResourceIntrinsic(this, a6, v11, v85, (AGCArgumentBuffer::Resource::Bounds *)&v107);
          llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v86, GEP, 0);
          ++v80;
        }
        while (a4 != v80);
      }
      llvm::Value::replaceAllUsesWith();
    }
    if (__src != v116) {
      free(__src);
    }
    if (v117 != v119) {
      free(v117);
    }
  }
  else
  {
    uint64_t v71 = (AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    uint64_t v72 = *(void *)(*((void *)this + 22) + 80);
    if (v72) {
      uint64_t v73 = v72 - 24;
    }
    else {
      uint64_t v73 = 0;
    }
    uint64_t v74 = *(void *)(v73 + 40);
    if (v74) {
      uint64_t v75 = (llvm::Instruction *)(v74 - 24);
    }
    else {
      uint64_t v75 = 0;
    }
    llvm::IRBuilderBase::SetInsertPoint(v71, v75);
    LODWORD(v117) = a3;
    HIDWORD(v117) = a3;
    uint64_t v76 = (llvm::Value *)llvm::ConstantInt::get();
    AGCLLVMUserObject::buildAPIResourceIntrinsic(this, a6, (llvm::Type *)v10, v76, (AGCArgumentBuffer::Resource::Bounds *)&v117);
    llvm::Value::replaceAllUsesWith();
  }
  return 1;
}

llvm::Value *AGCLLVMUserObject::buildAPIResourceIntrinsic(AGCLLVMUserObject *this, unsigned __int8 **a2, llvm::Type *a3, llvm::Value *a4, AGCArgumentBuffer::Resource::Bounds *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  BOOL v8 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  uint64_t v9 = v8[35];
  uint64_t v17 = v8[29];
  uint64_t v18 = v9;
  uint64_t v10 = v8[26];
  uint64_t v19 = v17;
  uint64_t v20 = v10;
  uint64_t Function = AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::getFunction(a2, v8[46], (unint64_t)a3);
  uint64_t v12 = *(void *)(*(void *)this - 24);
  v16[0] = a4;
  uint64_t v13 = (llvm::Type **)((char *)this + v12 + 40);
  v16[1] = AGCArgumentBuffer::Resource::Bounds::toConstantVector((uint64_t)a5, v13);
  v16[2] = llvm::ConstantInt::get();
  v16[3] = llvm::ConstantInt::get();
  v15[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v13, *(void *)(Function + 24), Function, (uint64_t)v16, 4, (uint64_t)v15);
}

uint64_t AGCArgumentBuffer::Resource::Bounds::toConstantVector(uint64_t a1, llvm::Type **a2)
{
  llvm::Type::getInt32Ty(a2[8], (llvm::LLVMContext *)a2);
  llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(a2[8], v3);
  llvm::ConstantInt::get();
  return llvm::ConstantVector::get();
}

uint64_t AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::getFunction(unsigned __int8 **a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  int8x8_t v9 = (int8x8_t)a1[2];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = v8;
      if (v8 >= *(void *)&v9) {
        unint64_t v11 = v8 % *(void *)&v9;
      }
    }
    else
    {
      unint64_t v11 = v8 & (*(void *)&v9 - 1);
    }
    uint64_t v12 = *(void **)&a1[1][8 * v11];
    if (v12)
    {
      for (uint64_t i = (void *)*v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          if (i[2] == a3) {
            return i[5];
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= *(void *)&v9) {
              v14 %= *(void *)&v9;
            }
          }
          else
          {
            v14 &= *(void *)&v9 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  llvm::FunctionType::get();
  uint64_t v15 = (uint64_t)*a1;
  int v16 = **a1;
  unsigned int v49 = a1[4];
  if (v16)
  {
    v50[0] = v15;
    v50[2] = &v49;
    __int16 v17 = 2563;
  }
  else
  {
    v50[0] = &v49;
    __int16 v17 = 266;
  }
  __int16 v51 = v17;
  llvm::Twine::str((uint64_t *)&__p, (llvm::Twine *)v50);
  llvm::Module::getOrInsertFunction();
  uint64_t v47 = v18;
  if (v53 < 0) {
    operator delete(__p);
  }
  unint64_t v19 = (unint64_t)a1[2];
  if (v19)
  {
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v19) {
        unint64_t v3 = v8 % v19;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v19 - 1);
    }
    uint64_t v21 = *(void ***)&a1[1][8 * v3];
    if (v21)
    {
      for (j = *v21; j; j = (void *)*j)
      {
        unint64_t v23 = j[1];
        if (v23 == v8)
        {
          if (j[2] == a3) {
            goto LABEL_95;
          }
        }
        else
        {
          if (v20.u32[0] > 1uLL)
          {
            if (v23 >= v19) {
              v23 %= v19;
            }
          }
          else
          {
            v23 &= v19 - 1;
          }
          if (v23 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v24 = a1 + 3;
  j = operator new(0x30uLL);
  void *j = 0;
  j[1] = v8;
  j[2] = a3;
  j[3] = 4;
  j[4] = 0;
  j[5] = 0;
  float v25 = (float)(unint64_t)(a1[4] + 1);
  float v26 = *((float *)a1 + 10);
  if (!v19 || (float)(v26 * (float)v19) < v25)
  {
    BOOL v27 = 1;
    if (v19 >= 3) {
      BOOL v27 = (v19 & (v19 - 1)) != 0;
    }
    unint64_t v28 = v27 | (2 * v19);
    unint64_t v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29) {
      int8x8_t prime = (int8x8_t)v29;
    }
    else {
      int8x8_t prime = (int8x8_t)v28;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v19 = (unint64_t)a1[2];
    }
    if (*(void *)&prime > v19) {
      goto LABEL_51;
    }
    if (*(void *)&prime < v19)
    {
      unint64_t v37 = vcvtps_u32_f32((float)(unint64_t)a1[4] / *((float *)a1 + 10));
      if (v19 < 3 || (uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (*(void *)&prime <= v37) {
        int8x8_t prime = (int8x8_t)v37;
      }
      if (*(void *)&prime >= v19)
      {
        unint64_t v19 = (unint64_t)a1[2];
      }
      else
      {
        if (prime)
        {
LABEL_51:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v31 = (unsigned __int8 *)operator new(8 * *(void *)&prime);
          unsigned int v32 = a1[1];
          a1[1] = v31;
          if (v32) {
            operator delete(v32);
          }
          uint64_t v33 = 0;
          a1[2] = (unsigned __int8 *)prime;
          do
            *(void *)&a1[1][8 * v33++] = 0;
          while (*(void *)&prime != v33);
          BOOL v34 = (void *)*v24;
          if (*v24)
          {
            unint64_t v35 = v34[1];
            uint8x8_t v36 = (uint8x8_t)vcnt_s8(prime);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              if (v35 >= *(void *)&prime) {
                v35 %= *(void *)&prime;
              }
            }
            else
            {
              v35 &= *(void *)&prime - 1;
            }
            *(void *)&a1[1][8 * v35] = v24;
            int v40 = (void *)*v34;
            if (*v34)
            {
              do
              {
                unint64_t v41 = v40[1];
                if (v36.u32[0] > 1uLL)
                {
                  if (v41 >= *(void *)&prime) {
                    v41 %= *(void *)&prime;
                  }
                }
                else
                {
                  v41 &= *(void *)&prime - 1;
                }
                if (v41 != v35)
                {
                  unsigned int v42 = a1[1];
                  if (!*(void *)&v42[8 * v41])
                  {
                    *(void *)&v42[8 * v41] = v34;
                    goto LABEL_76;
                  }
                  void *v34 = *v40;
                  *int v40 = **(void **)&a1[1][8 * v41];
                  **(void **)&a1[1][8 * v41] = v40;
                  int v40 = v34;
                }
                unint64_t v41 = v35;
LABEL_76:
                BOOL v34 = v40;
                int v40 = (void *)*v40;
                unint64_t v35 = v41;
              }
              while (v40);
            }
          }
          unint64_t v19 = (unint64_t)prime;
          goto LABEL_80;
        }
        uint64_t v48 = a1[1];
        a1[1] = 0;
        if (v48) {
          operator delete(v48);
        }
        unint64_t v19 = 0;
        a1[2] = 0;
      }
    }
LABEL_80:
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v8 >= v19) {
        unint64_t v3 = v8 % v19;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v19 - 1) & v8;
    }
  }
  uint64_t v43 = a1[1];
  uint64_t v44 = *(unsigned __int8 **)&v43[8 * v3];
  if (v44)
  {
    void *j = *(void *)v44;
  }
  else
  {
    void *j = *v24;
    *uint64_t v24 = j;
    *(void *)&v43[8 * v3] = v24;
    if (!*j) {
      goto LABEL_94;
    }
    unint64_t v45 = *(void *)(*j + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v45 >= v19) {
        v45 %= v19;
      }
    }
    else
    {
      v45 &= v19 - 1;
    }
    uint64_t v44 = &a1[1][8 * v45];
  }
  *(void *)uint64_t v44 = j;
LABEL_94:
  ++a1[4];
LABEL_95:
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(j + 3), v47);
  return v47;
}

void AGCLLVMGen3TargetLowerer::getListOfFunctionsInMetalRuntimeWithFastAndNonFastVariants(uint64_t **a1@<X8>)
{
  void v22[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v19, "air.fract.f16");
  std::string::basic_string[abi:nn180100]<0>(v20, "air.fract.v2f16");
  std::string::basic_string[abi:nn180100]<0>(v21, "air.fract.v3f16");
  std::string::basic_string[abi:nn180100]<0>(v22, "air.fract.v4f16");
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  a1[1] = 0;
  int v5 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  unint64_t v6 = a1 + 1;
  while (1)
  {
    unint64_t v7 = (const std::string::value_type **)&v19[3 * v4];
    unint64_t v8 = (uint64_t *)(a1 + 1);
    if (v6 == v5) {
      goto LABEL_8;
    }
    int8x8_t v9 = v3;
    uint8x8_t v10 = (uint64_t *)(a1 + 1);
    if (v3)
    {
      do
      {
        unint64_t v8 = v9;
        int8x8_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        unint64_t v8 = (uint64_t *)v10[2];
        BOOL v11 = *v8 == (void)v10;
        uint8x8_t v10 = v8;
      }
      while (v11);
    }
    if (std::less<std::string>::operator()[abi:nn180100](v8 + 4, &v19[3 * v4]))
    {
LABEL_8:
      uint64_t v12 = a1 + 1;
      uint64_t v13 = a1 + 1;
      if (v3)
      {
        uint64_t v13 = (uint64_t **)(v8 + 1);
        if (v8[1]) {
          goto LABEL_23;
        }
        uint64_t v12 = (uint64_t **)v8;
      }
LABEL_17:
      uint64_t v15 = (uint64_t *)operator new(0x38uLL);
      int v16 = (std::string *)(v15 + 4);
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v16, *v7, (std::string::size_type)v7[1]);
      }
      else
      {
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
        v15[6] = (uint64_t)v7[2];
      }
      *uint64_t v15 = 0;
      v15[1] = 0;
      v15[2] = (uint64_t)v12;
      *uint64_t v13 = v15;
      __int16 v17 = (uint64_t *)**a1;
      if (v17)
      {
        *a1 = v17;
        uint64_t v15 = *v13;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v15);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      unint64_t v6 = (uint64_t **)*a1;
      goto LABEL_23;
    }
    uint64_t v12 = a1 + 1;
    uint64_t v13 = a1 + 1;
    if (!v3) {
      goto LABEL_17;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v12 = (uint64_t **)v3;
        unint64_t v14 = v3 + 4;
        if (!std::less<std::string>::operator()[abi:nn180100](&v19[3 * v4], v14)) {
          break;
        }
        unint64_t v3 = *v12;
        uint64_t v13 = v12;
        if (!*v12) {
          goto LABEL_17;
        }
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v14, &v19[3 * v4])) {
        break;
      }
      uint64_t v13 = v12 + 1;
      unint64_t v3 = v12[1];
      if (!v3) {
        goto LABEL_17;
      }
    }
LABEL_23:
    if (++v4 == 4) {
      break;
    }
    unint64_t v3 = *v5;
  }
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v22[i + 2]) < 0) {
      operator delete((void *)v22[i]);
    }
  }
}

BOOL std::less<std::string>::operator()[abi:nn180100](void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

void AGCLLVMGen3TargetLowerer::AGCLLVMGen3TargetLowerer(AGCLLVMGen3TargetLowerer *this, llvm::LLVMContext *a2, const char **a3)
{
}

uint64_t *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      uint64_t v8 = i[1];
      ++i;
      uint64_t v7 = v8;
    }
    return i;
  }
  uint64_t v10 = MEMORY[0x1CB79F270](a3 + 25, 8);
  BOOL v11 = (void *)v10;
  uint64_t v12 = v10 + 24;
  if (a3) {
    memcpy((void *)(v10 + 24), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  v11[1] = 0;
  v11[2] = 0;
  *BOOL v11 = a3;
  *uint64_t i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t llvm::ValueHandleBase::operator=(llvm::ValueHandleBase *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3 != a2)
  {
    if (v3 != -8192 && v3 != -4096 && v3 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(this);
    }
    *((void *)this + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2) {
      llvm::ValueHandleBase::AddToUseList(this);
    }
  }
  return a2;
}

uint64_t **std::__tree<std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCLLVMGen3TargetLowerer::MemoryTransferOp>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  size_t v6 = a1 + 1;
  size_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        size_t v5 = *v7;
        size_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      size_t v5 = v7[1];
      if (!v5)
      {
        size_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    int8x8_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    v7[6] = 0;
    std::string *v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    void *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    BOOL v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      BOOL v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t AGCLLVMObject::getDefaultRoundingMode(AGCLLVMObject *this)
{
  uint64_t i = (*(uint64_t (**)(AGCLLVMObject *))(*(void *)this + 208))(this);
  if (!i)
  {
    if (*(unsigned char *)(*((void *)this + 50) + 1769)) {
      uint64_t v3 = 2;
    }
    else {
      uint64_t v3 = 1;
    }
    if (MGGetBoolAnswer())
    {
      Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_FLOAT_TO_FLOAT_RTZ_HW", v4);
      if (Value)
      {
        if (*Value != 48)
        {
          if (atoi(Value)) {
            uint64_t v3 = 1;
          }
          else {
            uint64_t v3 = v3;
          }
        }
      }
    }
    if (MGGetBoolAnswer()
      && (uint64_t v7 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DEFAULT_ROUNDING_MODE", v6)) != 0)
    {
      unsigned int v8 = v7;
      uint64_t i = atoi(v7);
      if ((i - 1) >= 2)
      {
        char v9 = 0;
        for (uint64_t i = 1; ; uint64_t i = 2)
        {
          char v10 = v9;
          if (!strcasecmp(v8, _AGCFPRoundingModeStrings[i])) {
            break;
          }
          char v9 = 1;
          if (v10) {
            return v3;
          }
        }
      }
    }
    else
    {
      return v3;
    }
  }
  return i;
}

void *AGCEnv::getValue(AGCEnv *this, const char *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  AGCEnv::getEnvLookup(this);
  uint64_t v3 = (AGCEnv *)std::string::basic_string[abi:nn180100]<0>(__p, (char *)this);
  uint64_t v4 = qword_1EBD0EB28;
  if (!qword_1EBD0EB28) {
    goto LABEL_8;
  }
  size_t v5 = &qword_1EBD0EB28;
  do
  {
    uint64_t v3 = (AGCEnv *)std::less<std::string>::operator()[abi:nn180100]((void *)(v4 + 32), __p);
    size_t v6 = (uint64_t *)(v4 + 8);
    if (!v3)
    {
      size_t v6 = (uint64_t *)v4;
      size_t v5 = (uint64_t *)v4;
    }
    uint64_t v4 = *v6;
  }
  while (*v6);
  if (v5 == &qword_1EBD0EB28
    || (uint64_t v3 = (AGCEnv *)std::less<std::string>::operator()[abi:nn180100](__p, v5 + 4), v3))
  {
LABEL_8:
    size_t v5 = &qword_1EBD0EB28;
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(*(void **)__p);
  }
  if (v5 == &qword_1EBD0EB28) {
    return 0;
  }
  uint64_t v7 = v5 + 7;
  if (*((char *)v5 + 79) < 0) {
    uint64_t v7 = (void *)*v7;
  }
  OSLog = AGCEnv::getOSLog(v3);
  if (os_log_type_enabled(OSLog, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)v5 + 55) < 0) {
      uint64_t v9 = v5[5];
    }
    else {
      uint64_t v9 = *((unsigned __int8 *)v5 + 55);
    }
    if (*((char *)v5 + 79) < 0) {
      uint64_t v11 = v5[8];
    }
    else {
      uint64_t v11 = *((unsigned __int8 *)v5 + 79);
    }
    *(_DWORD *)std::string __p = 136316162;
    *(void *)&__p[4] = "static const char *AGCEnv::getValue(const char *)";
    __int16 v13 = 2080;
    unint64_t v14 = this;
    __int16 v15 = 2048;
    uint64_t v16 = v9;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = v11;
    _os_log_debug_impl(&dword_1CAC02000, OSLog, OS_LOG_TYPE_DEBUG, "%s: %s[%zu] = %s[%zu]\n", __p, 0x34u);
  }
  return v7;
}

void AGCEnv::getEnvLookup(AGCEnv *this)
{
  {
    qword_1EBD0EB30 = 0;
    qword_1EBD0EB28 = 0;
    AGCEnv::getEnvLookup(void)::envlookup = (uint64_t)&qword_1EBD0EB28;
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:nn180100], &AGCEnv::getEnvLookup(void)::envlookup, &dword_1CAC02000);
  }
}

uint64_t virtual thunk to'AGCLLVMUserFragmentShader::getTextureWriteFPRoundingMode(AGCLLVMUserFragmentShader *this)
{
  return (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 224) + 5808) + 64) >> 4) & 3;
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::analyseIntersectionQueryUsage()
{
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::IntersectionQueryAnalysisGen6::instructionIsIndirectOrExternCall(uint64_t a1, const llvm::Function *a2)
{
  if (*(unsigned char *)(a1 + 16) != 84) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 - 32);
  if (v2 && !*(unsigned char *)(v2 + 16) && *(void *)(v2 + 24) == *(void *)(a1 + 72)) {
    return AGCLLVMUserObject::functionIsUserExternDeclaration(*(AGCLLVMUserObject **)(a1 - 32), a2);
  }
  else {
    return 1;
  }
}

uint64_t AGCLLVMUserObject::functionIsUserExternDeclaration(AGCLLVMUserObject *this, const llvm::Function *a2)
{
  uint64_t result = llvm::GlobalValue::isDeclaration(this);
  if (result)
  {
    if ((*((_WORD *)this + 16) & 0x200F) != 0) {
      return 0;
    }
    uint64_t Name = (_DWORD *)llvm::Value::getName(this);
    if (v5 >= 4 && *Name == 778266465) {
      return 0;
    }
    size_t v6 = (_DWORD *)llvm::Value::getName(this);
    if (v7 >= 4 && *v6 == 779250017)
    {
      return 0;
    }
    else
    {
      unsigned int v8 = (_DWORD *)llvm::Value::getName(this);
      return v9 < 4 || *v8 != 779642721;
    }
  }
  return result;
}

uint64_t llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::reset(uint64_t this)
{
  if (*(unsigned char *)(this + 24))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(this + 16);
    if (v2 != -8192 && v2 != -4096 && v2 != 0) {
      this = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)this);
    }
    *(unsigned char *)(v1 + 24) = 0;
  }
  return this;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            char v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *unint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(8 * a1);
}

void AGCLLVMGen2TargetLowerer::AGCLLVMGen2TargetLowerer(AGCLLVMGen2TargetLowerer *this, llvm::LLVMContext *a2, const char **a3)
{
  unint64_t v5 = (char *)this + 844;
  AGCLLVMBuilder::AGCLLVMBuilder(this, a2);
  void *v6 = &unk_1F25D71E0;
  v6[46] = 0x400000008;
  if (a3[2]) {
    strlen(a3[2]);
  }
  *((_WORD *)this + 192) = 0;
  *((_WORD *)this + 198) = 0;
  *((void *)this + 51) = (char *)this + 432;
  *((_OWORD *)this + 26) = xmmword_1CADD6430;
  *((void *)this + 55) = (char *)this + 456;
  *((void *)this + 56) = 0x1000000000;
  *((void *)this + 73) = 0;
  *((_OWORD *)this + 37) = 0u;
  *((void *)this + 76) = (char *)this + 624;
  *((void *)this + 77) = 0x800000000;
  *((void *)this + 94) = 0;
  *((void *)this + 95) = (char *)this + 776;
  *((void *)this + 96) = 0x800000000;
  llvm::DataLayout::reset();
  *((unsigned char *)this + 808) = 0;
  *((void *)this + 102) = a3;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((void *)v5 + 5) = -1;
  *((void *)v5 + 122) = a3[3];
  *((void *)this + 214) = "driver_parameters";
  *((_DWORD *)this + 430) = 3;
  *(_DWORD *)(v5 + 890) = 16842752;
  *((unsigned char *)this + 1730) = 0;
  *((void *)this + 202) = 0;
  *((unsigned char *)this + 1754) = 0;
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_ATOMIC_OPTIMIZATIONS_VERTEX_FRAGMENT", v7);
    if (Value)
    {
      if (*Value != 48 && atoi(Value)) {
        *((unsigned char *)this + 1754) = 1;
      }
    }
  }
  *((_DWORD *)this + 439) = 0x38u / *((_DWORD *)this + 93);
  int v9 = MGGetBoolAnswer();
  BOOL v11 = 1;
  if (v9)
  {
    uint64_t v12 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SKIP_TEXTURE_OOB_CHECKS", v10);
    BOOL v11 = !v12 || *v12 == 48 || atoi(v12) == 0;
  }
  *((unsigned char *)this + 1765) = v11;
  *((unsigned char *)this + 1776) = 0;
  *((unsigned char *)this + 1786) = 1;
  *(_WORD *)((char *)this + 1791) = 1;
  *((unsigned char *)this + 1794) = 0;
  *((unsigned char *)this + 1798) = 1;
  *((_DWORD *)this + 451) = 4;
  *((unsigned char *)this + 1809) = 0;
  *((unsigned char *)this + 1811) = 0;
  *((_WORD *)this + 898) = 0;
  *(_DWORD *)(v5 + 970) = 0;
  *(void *)this = &unk_1F25D6700;
  operator new();
}

void AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::~AGCBindPointLayoutT()
{
}

uint64_t *std::__tree<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::__emplace_unique_key_args<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::Sampler const&>(uint64_t *result, unsigned int a2, _OWORD *a3)
{
  uint64_t v4 = (uint64_t **)result;
  int v6 = (uint64_t **)(result + 1);
  unint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    int v9 = (uint64_t *)operator new(0x40uLL);
    long long v10 = a3[1];
    *((_OWORD *)v9 + 2) = *a3;
    *((_OWORD *)v9 + 3) = v10;
    return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

llvm::Value *AGCLLVMBuilder::buildDotProduct(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Value *a3)
{
  int v6 = (AGCLLVMBuilder *)((char *)this + 8);
  __int16 v20 = 257;
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v6, a2, v7, (const llvm::Twine *)v19);
  __int16 v20 = 257;
  int v9 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v10 = llvm::IRBuilderBase::CreateExtractElement(v6, a3, v9, (const llvm::Twine *)v19);
  __int16 v20 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)v6, Element, v10, (uint64_t)v19);
  uint64_t v12 = *(unsigned int *)(*(void *)a2 + 32);
  if (v12 >= 2)
  {
    for (uint64_t i = 1; i != v12; ++i)
    {
      __int16 v20 = 257;
      unint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v15 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v6, a2, v14, (const llvm::Twine *)v19);
      __int16 v20 = 257;
      uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v17 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v6, a3, v16, (const llvm::Twine *)v19);
      FMul = AGCLLVMBuilder::buildFma(this, v15, v17, FMul);
    }
  }
  return FMul;
}

uint64_t AGCLLVMUserFragmentShader::buildBlendEquation(void *a1, llvm::Type **a2, llvm::Type **a3, llvm::Value *a4, int a5, int a6, int a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  uint64_t v16 = (char *)a1 + *(void *)(*a1 - 24);
  if (a10)
  {
    __int16 v17 = a2;
    uint64_t Element = AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)(v16 + 32), (llvm::Value *)a2, 0, 3, 1);
    uint64_t v19 = AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), a4, 0, 3, 1);
  }
  else
  {
    __int16 v20 = (llvm::IRBuilderBase *)(v16 + 40);
    __int16 v51 = 257;
    uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v17 = a2;
    uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v20, (llvm::Value *)a2, v21, (const llvm::Twine *)v50);
    unsigned int v22 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v51 = 257;
    unint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v19 = llvm::IRBuilderBase::CreateExtractElement(v22, a4, v23, (const llvm::Twine *)v50);
  }
  uint64_t v24 = v19;
  if (a5 == 6)
  {
    float v25 = (llvm::Value *)llvm::ConstantFP::get();
    if (a10) {
      uint64_t FMul = (uint64_t)AGCLLVMBuilder::splat((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), 3, v25);
    }
    else {
      uint64_t FMul = (uint64_t)v25;
    }
    goto LABEL_10;
  }
  uint64_t FMul = Element;
  if ((a5 - 1) >= 2)
  {
LABEL_10:
    uint64_t v26 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
    BOOL v27 = AGCLLVMUserFragmentShader::buildBlendFactor(a1, v17, a3, a4, a6, a8, a9, a10);
    __int16 v51 = 257;
    uint64_t FMul = llvm::IRBuilderBase::CreateFMul(v26, FMul, (uint64_t)v27, (uint64_t)v50);
    uint64_t v28 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
    unint64_t v29 = AGCLLVMUserFragmentShader::buildBlendFactor(a1, v17, a3, a4, a7, a8, a9, a10);
    __int16 v51 = 257;
    uint64_t v24 = llvm::IRBuilderBase::CreateFMul(v28, v24, (uint64_t)v29, (uint64_t)v50);
  }
  switch(a5)
  {
    case 1:
      uint64_t v33 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v34 = *((void *)v33 + 50);
      long long v47 = *(_OWORD *)(v33 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v48, (llvm::IRBuilderBase *)(v33 + 40));
      int v49 = *((_DWORD *)v33 + 34);
      uint64_t v32 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v34 + 48))(v34, &v47, FMul, v24, 0);
      if (v48) {
        goto LABEL_17;
      }
      return v32;
    case 2:
      unint64_t v35 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v36 = *((void *)v35 + 50);
      long long v44 = *(_OWORD *)(v35 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v45, (llvm::IRBuilderBase *)(v35 + 40));
      int v46 = *((_DWORD *)v35 + 34);
      uint64_t v32 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v36 + 56))(v36, &v44, FMul, v24, 0);
      if (v45) {
LABEL_17:
      }
        llvm::MetadataTracking::untrack();
      return v32;
    case 3:
    case 6:
      uint64_t v30 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v51 = 257;
      uint64_t FAdd = llvm::IRBuilderBase::CreateFAdd(v30, FMul, v24, (uint64_t)v50);
      goto LABEL_21;
    case 4:
      uint64_t v37 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v51 = 257;
      uint64_t v38 = FMul;
      uint64_t v39 = v24;
      goto LABEL_20;
    case 5:
      uint64_t v37 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v51 = 257;
      uint64_t v38 = v24;
      uint64_t v39 = FMul;
LABEL_20:
      uint64_t FAdd = llvm::IRBuilderBase::CreateFSub(v37, v38, v39, (uint64_t)v50);
LABEL_21:
      uint64_t v32 = FAdd;
      break;
    default:
      uint64_t v32 = 0;
      break;
  }
  return v32;
}

uint64_t llvm::IRBuilderBase::CreateFMul(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  }
  uint64_t v7 = llvm::IRBuilderBase::foldConstant(a1, 18, a2, a3, a4);
  if (!v7)
  {
    uint64_t v7 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::setFPAttrs(a1, v7);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t llvm::IRBuilderBase::foldConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    a3 = 0;
  }
  if (*(unsigned __int8 *)(a4 + 16) >= 0x15u) {
    a4 = 0;
  }
  if (a3) {
    BOOL v6 = a4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72));
    if (v5) {
      BOOL v9 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v5, a5);
    }
  }
  return v5;
}

llvm::Value *AGCLLVMUserFragmentShader::buildBlendFactor(void *a1, llvm::Type **a2, llvm::Type **a3, llvm::Value *a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8 = a8;
  uint64_t v10 = a4;
  BOOL v11 = a3;
  if ((a5 & 0xFFFFFFFC) == 0xC)
  {
    GlobalVariable = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
    if (!GlobalVariable)
    {
      GlobalVariable = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v82[0] = "agc.blend_color";
      __int16 v83 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      uint64_t v19 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v20 = *((void *)v19 + 47);
      uint64_t v21 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v19 + 32), GlobalVariable);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v20, v21);
    }
    unsigned int v22 = (void *)((char *)a1 + *(void *)(*a1 - 24));
    __int16 v83 = 257;
    unint64_t v23 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)GlobalVariable, v17);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v22 + 5, v23, (uint64_t)GlobalVariable, 0, (uint64_t)v82);
    float v25 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v26 = *((void *)v25 + 50);
    long long v79 = *(_OWORD *)(v25 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v80, (llvm::IRBuilderBase *)(v25 + 40));
    int v81 = *((_DWORD *)v25 + 34);
    unint64_t v29 = (llvm::Value *)AGCLLVMTargetLowerer::buildClampColor(v26, (uint64_t)&v79, AlignedLoad, a6, 0);
    if (v80) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v30 = AGCLLVMObject::buildConvertColor((uint64_t)a1 + *(void *)(*a1 - 24), v29, *a2, a7, 1, 0, v27, v28);
    int v8 = a8;
    BOOL v11 = a3;
    uint64_t v10 = a4;
  }
  else
  {
    uint64_t v30 = 0;
  }
  switch(a5)
  {
    case 1:
    case 2:
      uint64_t v31 = llvm::ConstantFP::get();
      goto LABEL_39;
    case 3:
      goto LABEL_32;
    case 4:
      uint64_t v32 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v33 = llvm::ConstantFP::get();
      uint64_t v34 = (uint64_t)(v32 + 40);
      __int16 v83 = 257;
      uint64_t v35 = (uint64_t)a2;
      goto LABEL_30;
    case 5:
      uint64_t v36 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v83 = 257;
      uint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v38 = (llvm::IRBuilderBase *)v36;
      uint64_t v39 = (llvm::Value *)a2;
      goto LABEL_36;
    case 6:
      uint64_t v40 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v83 = 257;
      unint64_t v41 = (llvm::Value *)llvm::ConstantInt::get();
      unsigned int v42 = (llvm::IRBuilderBase *)v40;
      uint64_t v43 = (llvm::Value *)a2;
      goto LABEL_38;
    case 7:
      int v44 = 1;
      a2 = (llvm::Type **)v10;
      if (v8) {
        goto LABEL_41;
      }
      goto LABEL_33;
    case 8:
      uint64_t v45 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v33 = llvm::ConstantFP::get();
      uint64_t v34 = (uint64_t)(v45 + 40);
      __int16 v83 = 257;
      uint64_t v35 = (uint64_t)v10;
      goto LABEL_30;
    case 9:
      uint64_t v46 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v83 = 257;
      uint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v38 = (llvm::IRBuilderBase *)v46;
      uint64_t v39 = v10;
      goto LABEL_36;
    case 10:
      uint64_t v40 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v83 = 257;
      unint64_t v41 = (llvm::Value *)llvm::ConstantInt::get();
      unsigned int v42 = (llvm::IRBuilderBase *)v40;
      uint64_t v43 = v10;
      goto LABEL_38;
    case 11:
      long long v47 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      __int16 v83 = 257;
      uint64_t v48 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v47, (llvm::Value *)a2, v48, (const llvm::Twine *)v82);
      uint64_t v50 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      __int16 v83 = 257;
      __int16 v51 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v52 = llvm::IRBuilderBase::CreateExtractElement(v50, v10, v51, (const llvm::Twine *)v82);
      uint64_t v53 = llvm::ConstantFP::get();
      __int16 v83 = 257;
      uint64_t FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)v50, v53, v52, (uint64_t)v82);
      uint64_t v55 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v56 = *((void *)v55 + 50);
      long long v76 = *(_OWORD *)(v55 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v77, (llvm::IRBuilderBase *)(v55 + 40));
      int v78 = *((_DWORD *)v55 + 34);
      uint64_t v57 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v56 + 48))(v56, &v76, Element, FSub, 0);
      if (v77) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v58 = AGCLLVMBuilder::splat((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), 4, v57);
      uint64_t v59 = (char *)a1 + *(void *)(*a1 - 24);
      unsigned int v60 = (llvm::Value *)llvm::ConstantFP::get();
      __int16 v83 = 257;
      uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v59 + 40), v58, v60, v61, (const llvm::Twine *)v82);
      goto LABEL_31;
    case 12:
      int v44 = 1;
      a2 = (llvm::Type **)v30;
      if (v8) {
        goto LABEL_41;
      }
      goto LABEL_33;
    case 13:
      size_t v63 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v33 = llvm::ConstantFP::get();
      uint64_t v34 = (uint64_t)(v63 + 40);
      __int16 v83 = 257;
      uint64_t v35 = (uint64_t)v30;
      goto LABEL_30;
    case 14:
      uint64_t v64 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v83 = 257;
      uint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v38 = (llvm::IRBuilderBase *)v64;
      uint64_t v39 = v30;
      goto LABEL_36;
    case 15:
      uint64_t v40 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v83 = 257;
      unint64_t v41 = (llvm::Value *)llvm::ConstantInt::get();
      unsigned int v42 = (llvm::IRBuilderBase *)v40;
      uint64_t v43 = v30;
      goto LABEL_38;
    case 16:
      int v44 = 1;
      a2 = v11;
      if (v8) {
        goto LABEL_41;
      }
      goto LABEL_33;
    case 17:
      uint64_t v65 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v33 = llvm::ConstantFP::get();
      uint64_t v34 = (uint64_t)(v65 + 40);
      __int16 v83 = 257;
      uint64_t v35 = (uint64_t)v11;
LABEL_30:
      Insertuint64_t Element = llvm::IRBuilderBase::CreateFSub(v34, v33, v35, (uint64_t)v82);
LABEL_31:
      a2 = (llvm::Type **)InsertElement;
LABEL_32:
      int v44 = 1;
      if (!v8) {
        goto LABEL_33;
      }
      goto LABEL_41;
    case 18:
      uint64_t v69 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v83 = 257;
      uint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v38 = (llvm::IRBuilderBase *)v69;
      uint64_t v39 = (llvm::Value *)v11;
LABEL_36:
      uint64_t v31 = llvm::IRBuilderBase::CreateExtractElement(v38, v39, v37, (const llvm::Twine *)v82);
      goto LABEL_39;
    case 19:
      uint64_t v40 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      __int16 v83 = 257;
      unint64_t v41 = (llvm::Value *)llvm::ConstantInt::get();
      unsigned int v42 = (llvm::IRBuilderBase *)v40;
      uint64_t v43 = (llvm::Value *)v11;
LABEL_38:
      uint64_t v70 = llvm::IRBuilderBase::CreateExtractElement(v42, v43, v41, (const llvm::Twine *)v82);
      uint64_t v71 = llvm::ConstantFP::get();
      __int16 v83 = 257;
      uint64_t v31 = llvm::IRBuilderBase::CreateFSub(v40, v71, v70, (uint64_t)v82);
LABEL_39:
      a2 = (llvm::Type **)v31;
      break;
    default:
      a2 = 0;
      break;
  }
  int v44 = 0;
  if (v8)
  {
LABEL_41:
    uint64_t v72 = (AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32);
    if (v44) {
      return (llvm::Value *)AGCLLVMBuilder::subrangeVector(v72, (llvm::Value *)a2, 0, 3, 1);
    }
    else {
      return AGCLLVMBuilder::splat(v72, 3, (llvm::Value *)a2);
    }
  }
LABEL_33:
  if (v44)
  {
    uint64_t v66 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v83 = 257;
    uint64_t v67 = (llvm::Value *)llvm::ConstantInt::get();
    return (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v66, (llvm::Value *)a2, v67, (const llvm::Twine *)v82);
  }
  return (llvm::Value *)a2;
}

uint64_t llvm::IRBuilderBase::CreateFSub(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  }
  uint64_t v7 = llvm::IRBuilderBase::foldConstant(a1, 16, a2, a3, a4);
  if (!v7)
  {
    uint64_t v7 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::setFPAttrs(a1, v7);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t llvm::IRBuilderBase::CreateFAdd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  }
  uint64_t v7 = llvm::IRBuilderBase::foldConstant(a1, 14, a2, a3, a4);
  if (!v7)
  {
    uint64_t v7 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::setFPAttrs(a1, v7);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v7, a4);
  }
  return v7;
}

llvm::Value *AGCLLVMBuilder::splat(AGCLLVMBuilder *this, int a2, llvm::Value *a3)
{
  if (a2 != 1)
  {
    llvm::ConstantInt::get();
    Splat = (llvm::Value *)llvm::ConstantDataVector::getSplat();
    llvm::FixedVectorType::get();
    BOOL v6 = (llvm::Value *)llvm::UndefValue::get();
    __int16 v12 = 257;
    uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
    Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), v6, a3, v7, (const llvm::Twine *)v11);
    BOOL v9 = (llvm::Value *)llvm::UndefValue::get();
    __int16 v12 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((AGCLLVMBuilder *)((char *)this + 8), InsertElement, v9, Splat, (const llvm::Twine *)v11);
  }
  return a3;
}

llvm::Instruction *AGCLLVMBuilder::buildFma(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)a2;
  std::string::basic_string[abi:nn180100]<0>(&v25, "llvm.fma.");
  int v9 = *(_DWORD *)(v8 + 8);
  if ((v9 & 0xFE) == 0x12)
  {
    std::to_string(&v26, *(_DWORD *)(v8 + 32));
    uint64_t v10 = std::string::insert(&v26, 0, "v");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    uint64_t v23 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0) {
      __int16 v12 = __p;
    }
    else {
      __int16 v12 = (void **)__p[0];
    }
    if (v23 >= 0) {
      std::string::size_type v13 = HIBYTE(v23);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(&v25, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    int v9 = *(_DWORD *)(v8 + 8);
  }
  int v14 = v9 & 0xFE;
  uint64_t v15 = v8;
  if (v14 == 18) {
    uint64_t v15 = **(void **)(v8 + 16);
  }
  if (v15 == *((void *)this + 21)) {
    uint64_t v16 = "f32";
  }
  else {
    uint64_t v16 = "f16";
  }
  std::string::append(&v25, v16);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v17 = &v25;
  }
  else {
    __int16 v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v25.__r_.__value_.__l.__size_;
  }
  uint64_t v19 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)this, (uint64_t)v17, size, v8, v8, v8, v8);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v26.__r_.__value_.__l.__size_ = (std::string::size_type)a3;
  v26.__r_.__value_.__r.__words[2] = (std::string::size_type)a4;
  __int16 v24 = 257;
  uint64_t v20 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v19 + 24), v19, (uint64_t)&v26, 3, (uint64_t)__p);
  llvm::Instruction::setHasAllowReassoc(v20);
  llvm::Instruction::setHasApproxFunc(v20);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v20;
}

uint64_t AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v12[3] = *MEMORY[0x1E4F143B8];
  __src[0] = a5;
  __src[1] = a6;
  __src[2] = a7;
  v11[0] = v12;
  v11[1] = (void *)0x300000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)v11, __src, v11);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v8 = v7;
  if (v11[0] != v12) {
    free(v11[0]);
  }
  return v8;
}

uint64_t AGCLLVMTargetLowerer::buildClampColor(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4, uint64_t a5)
{
  long long v31 = *(_OWORD *)a2;
  uint64_t v32 = *(void *)(a2 + 16);
  if (v32) {
    llvm::MetadataTracking::track();
  }
  int v33 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v31);
  if (v32) {
    llvm::MetadataTracking::untrack();
  }
  if (*(unsigned char *)(a4 + 16) && (*(void *)a3 == *(void *)(a1 + 288) || *(void *)a3 == *(void *)(a1 + 280)))
  {
    if (*(float *)a4 == *(float *)(a4 + 4) && *(float *)(a4 + 8) == *(float *)(a4 + 12))
    {
      uint64_t v10 = llvm::ConstantFP::get();
      uint64_t v11 = llvm::ConstantFP::get();
      long long v28 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v29, (llvm::IRBuilderBase *)(a1 + 8));
      int v30 = *(_DWORD *)(a1 + 104);
      a3 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, &v28, a3, v10, v11, a5);
      if (v29) {
        llvm::MetadataTracking::untrack();
      }
    }
    else
    {
      uint64_t v12 = AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, a3, 0, 3, 1);
      __int16 v35 = 257;
      std::string::size_type v13 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v13, (const llvm::Twine *)v34);
      uint64_t v15 = llvm::ConstantFP::get();
      uint64_t v16 = llvm::ConstantFP::get();
      uint64_t v17 = llvm::ConstantFP::get();
      uint64_t v18 = llvm::ConstantFP::get();
      long long v25 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v26, (llvm::IRBuilderBase *)(a1 + 8));
      int v27 = *(_DWORD *)(a1 + 104);
      uint64_t v19 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, &v25, v12, v15, v16, a5);
      if (v26) {
        llvm::MetadataTracking::untrack();
      }
      long long v22 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v23, (llvm::IRBuilderBase *)(a1 + 8));
      int v24 = *(_DWORD *)(a1 + 104);
      uint64_t v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, &v22, Element, v17, v18, a5);
      if (v23) {
        llvm::MetadataTracking::untrack();
      }
      return AGCLLVMBuilder::combineRGBA((AGCLLVMBuilder *)a1, v19, v20);
    }
  }
  return (uint64_t)a3;
}

llvm::Value *AGCLLVMTargetLowerer::buildFClamp(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5, char a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  long long v23 = *(_OWORD *)a2;
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v23);
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v18 = a1;
  long long v19 = *(_OWORD *)a2;
  uint64_t v20 = *(void *)(a2 + 16);
  if (v20) {
    llvm::MetadataTracking::track();
  }
  int v21 = *(_DWORD *)(a2 + 24);
  char v22 = a6;
  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12)
  {
    Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
    *(_OWORD *)uint64_t v32 = 0u;
    long long v33 = 0u;
    *(_OWORD *)int v30 = 0u;
    long long v31 = 0u;
    *(_OWORD *)long long v28 = 0u;
    long long v29 = 0u;
    AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, a3, v32);
    AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, a4, v30);
    AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, a5, v28);
    uint64_t v13 = *(unsigned int *)(*(void *)a3 + 32);
    if (v13)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v15 = (llvm::Value *)AGCLLVMTargetLowerer::buildFClamp(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_0::operator()((unsigned __int8 *)&v18, (uint64_t)v32[i], (uint64_t)v30[i], (uint64_t)v28[i]);
        __int16 v27 = 257;
        uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v15, v16, (const llvm::Twine *)v26);
      }
    }
  }
  else
  {
    Insertuint64_t Element = (llvm::Value *)AGCLLVMTargetLowerer::buildFClamp(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_0::operator()((unsigned __int8 *)&v18, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
  }
  if (v20) {
    llvm::MetadataTracking::untrack();
  }
  return InsertElement;
}

uint64_t AGCLLVMBuilder::unboxVector(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Value **a3)
{
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
  {
    tryToUnboxVector(a2, a3, 0);
    uint64_t v6 = *(unsigned int *)(*(void *)a2 + 32);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (!a3[i])
        {
          __int16 v11 = 257;
          uint64_t v8 = (llvm::Value *)llvm::ConstantInt::get();
          a3[i] = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((AGCLLVMBuilder *)((char *)this + 8), a2, v8, (const llvm::Twine *)v10);
        }
      }
    }
  }
  else
  {
    *a3 = a2;
    return 1;
  }
  return v6;
}

void tryToUnboxVector(llvm::Value *a1, llvm::Value **a2, unsigned int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  bzero(a2, 0x20uLL);
  if (a1 && a3 <= 5)
  {
    while (1)
    {
      unsigned int v6 = *((unsigned __int8 *)a1 + 16);
      if (v6 != 90) {
        break;
      }
      uint64_t v7 = *((void *)a1 - 4);
      if (v7) {
        BOOL v8 = *(unsigned char *)(v7 + 16) == 16;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8)
      {
        int v9 = (void *)(v7 + 24);
        if (*(_DWORD *)(v7 + 32) >= 0x41u) {
          int v9 = (void *)*v9;
        }
        uint64_t v10 = (void *)*v9;
        if ((v10 & 0xFFFFFFFC) == 0 && !a2[v10]) {
          a2[v10] = (llvm::Value *)*((void *)a1 - 8);
        }
        a1 = (llvm::Value *)*((void *)a1 - 12);
        if (a1) {
          continue;
        }
      }
      return;
    }
    if (v6 == 91)
    {
      *(_OWORD *)uint64_t v20 = 0u;
      long long v21 = 0u;
      memset(v19, 0, sizeof(v19));
      unsigned int v11 = a3 + 1;
      tryToUnboxVector(*((llvm::Value **)a1 - 8), v20, v11);
      tryToUnboxVector(*((llvm::Value **)a1 - 4), (llvm::Value **)v19, v11);
      uint64_t v12 = *(unsigned int *)(*(void *)a1 + 32);
      if (v12)
      {
        uint64_t v13 = 0;
        unsigned int v14 = *(_DWORD *)(**((void **)a1 - 8) + 32);
        do
        {
          if ((v14 | v13) <= 3 && !a2[v13])
          {
            uint64_t v15 = *(unsigned int *)(*((void *)a1 + 8) + 4 * v13);
            if ((int)v15 <= 3)
            {
              if (v15 == -1)
              {
                uint64_t v16 = (llvm::Value *)llvm::UndefValue::get();
              }
              else if (v15 >= v14)
              {
                uint64_t v16 = (llvm::Value *)*((void *)v19 + v15 - v14);
              }
              else
              {
                uint64_t v16 = v20[v15];
              }
              a2[v13] = v16;
            }
          }
          ++v13;
        }
        while (v12 != v13);
      }
    }
    else if (v6 <= 0x14)
    {
      uint64_t v17 = *(unsigned int *)(*(void *)a1 + 32);
      if ((v17 - 1) <= 3)
      {
        uint64_t v18 = 0;
        do
        {
          if (!a2[v18]) {
            a2[v18] = (llvm::Value *)llvm::Constant::getAggregateElement(a1);
          }
          ++v18;
        }
        while (v17 != v18);
      }
    }
  }
}

uint64_t AGCLLVMTargetLowerer::buildFClamp(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_0::operator()(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v30[3] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)a1;
  if (*(unsigned char *)(a4 + 16) == 17) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = 0;
  }
  if (!a3 || *(unsigned char *)(a3 + 16) != 17) {
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)(a3 + 32);
  uint64_t v11 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v10 ? *(void *)(a3 + 40) : a3 + 24;
  if ((*(unsigned char *)(v11 + 28) & 7) != 3 || v9 == 0) {
    goto LABEL_16;
  }
  char v28 = 0;
  uint64_t v13 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v29, 1.0);
  uint64_t v14 = llvm::APFloatBase::IEEEdouble(v13);
  MEMORY[0x1CB79FAA0](v30, v29, v14);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v29);
  llvm::APFloat::convert();
  int isExactlyValue = llvm::ConstantFP::isExactlyValue();
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v30);
  if (isExactlyValue)
  {
    long long v25 = *(_OWORD *)(v8 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v26, (llvm::IRBuilderBase *)(v8 + 8));
    int v27 = *(_DWORD *)(v8 + 104);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)v8 + 40))(v8, &v25, a2, a1[40]);
    if (v26) {
LABEL_19:
    }
      llvm::MetadataTracking::untrack();
  }
  else
  {
LABEL_16:
    long long v22 = *(_OWORD *)(v8 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v23, (llvm::IRBuilderBase *)(v8 + 8));
    int v24 = *(_DWORD *)(v8 + 104);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v8 + 56))(v8, &v22, a2, a3, a1[40]);
    if (v23) {
      llvm::MetadataTracking::untrack();
    }
    long long v19 = *(_OWORD *)(v8 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v20, (llvm::IRBuilderBase *)(v8 + 8));
    int v21 = *(_DWORD *)(v8 + 104);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v8 + 48))(v8, &v19, v17, a4, a1[40]);
    if (v20) {
      goto LABEL_19;
    }
  }
  return v16;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildFMax(const char **a1, long long *a2, llvm::Value *a3, llvm::Value *a4)
{
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *((_DWORD *)a2 + 6);
  uint64_t v8 = AGCLLVMGen3TargetLowerer::buildFMinFMax((AGCLLVMBuilder *)a1, (uint64_t)&v10, a3, a4, a1[302], a1[303]);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildFMin(const char **a1, long long *a2, llvm::Value *a3, llvm::Value *a4)
{
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *((_DWORD *)a2 + 6);
  uint64_t v8 = AGCLLVMGen3TargetLowerer::buildFMinFMax((AGCLLVMBuilder *)a1, (uint64_t)&v10, a3, a4, a1[300], a1[301]);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

llvm::Value *AGCLLVMTargetLowerer::buildSaturate(char **a1, uint64_t a2, llvm::Value *a3, int a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  long long v22 = *(_OWORD *)a2;
  uint64_t v23 = *(void *)(a2 + 16);
  if (v23) {
    llvm::MetadataTracking::track();
  }
  int v24 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v22);
  if (v23) {
    llvm::MetadataTracking::untrack();
  }
  long long v18 = *(_OWORD *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  if (v19) {
    llvm::MetadataTracking::track();
  }
  int v8 = *(_DWORD *)(a2 + 24);
  int v20 = v8;
  char v21 = a4;
  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12)
  {
    *(_OWORD *)long long v29 = 0u;
    long long v30 = 0u;
    AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, a3, v29);
    uint64_t v9 = *(unsigned int *)(*(void *)a3 + 32);
    if (v9)
    {
      uint64_t v10 = 0;
      Insertuint64_t Element = 0;
      do
      {
        int v12 = (uint64_t *)v29[v10];
        long long v25 = v18;
        uint64_t v26 = v19;
        if (v19) {
          llvm::MetadataTracking::track();
        }
        int v27 = v20;
        if (v21 && !*((unsigned char *)a1 + 1840)) {
          uint64_t v13 = a1 + 153;
        }
        else {
          uint64_t v13 = a1 + 152;
        }
        uint64_t v14 = AGCLLVMTargetLowerer::CallFPIntrinsic((uint64_t)a1, (uint64_t)&v25, v12, *v13);
        if (v26) {
          llvm::MetadataTracking::untrack();
        }
        if (!InsertElement)
        {
          llvm::FixedVectorType::get();
          Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
        }
        __int16 v28 = 257;
        uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v14, v15, (const llvm::Twine *)&v25);
        ++v10;
      }
      while (v9 != v10);
    }
    else
    {
      Insertuint64_t Element = 0;
    }
  }
  else
  {
    long long v25 = v18;
    uint64_t v26 = v19;
    if (v19)
    {
      llvm::MetadataTracking::track();
      int v8 = v20;
      a4 = a4;
    }
    int v27 = v8;
    if (a4 && !*((unsigned char *)a1 + 1840)) {
      uint64_t v16 = a1 + 153;
    }
    else {
      uint64_t v16 = a1 + 152;
    }
    Insertuint64_t Element = AGCLLVMTargetLowerer::CallFPIntrinsic((uint64_t)a1, (uint64_t)&v25, (uint64_t *)a3, *v16);
    if (v26) {
      llvm::MetadataTracking::untrack();
    }
  }
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  return InsertElement;
}

llvm::Value *AGCLLVMTargetLowerer::CallFPIntrinsic(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4)
{
  long long v30 = a3;
  long long v27 = *(_OWORD *)a2;
  uint64_t v28 = *(void *)(a2 + 16);
  if (v28) {
    llvm::MetadataTracking::track();
  }
  int v29 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v27);
  if (v28) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *a3;
  std::string::basic_string[abi:nn180100]<0>(&v26, a4);
  std::string::append(&v26, ".");
  int v9 = *(_DWORD *)(v8 + 8);
  if ((v9 & 0xFE) == 0x12)
  {
    std::to_string(&v25, *(_DWORD *)(v8 + 32));
    uint64_t v10 = std::string::insert(&v25, 0, "v");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    uint64_t v23 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0) {
      int v12 = __p;
    }
    else {
      int v12 = (void **)__p[0];
    }
    if (v23 >= 0) {
      std::string::size_type v13 = HIBYTE(v23);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(&v26, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    int v9 = *(_DWORD *)(v8 + 8);
  }
  int v14 = v9 & 0xFE;
  uint64_t v15 = v8;
  if (v14 == 18) {
    uint64_t v15 = **(void **)(v8 + 16);
  }
  if (v15 == *(void *)(a1 + 152)) {
    uint64_t v16 = "f16";
  }
  else {
    uint64_t v16 = "f32";
  }
  std::string::append(&v26, v16);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = &v26;
  }
  else {
    uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  uint64_t v19 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)v17, size, v8, v8);
  __int16 v24 = 257;
  int v20 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v19 + 24), v19, (uint64_t)&v30, 1, (uint64_t)__p);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v20;
}

uint64_t AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  uint64_t __src = a5;
  v9[0] = v10;
  v9[1] = (void *)0x100000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)v9, &__src, v9);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v6 = v5;
  if (v9[0] != v10) {
    free(v9[0]);
  }
  return v6;
}

uint64_t AGCLLVMBuilder::combineRGBA(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v5 = AGCLLVMBuilder::extendVector(this, a2, 4);
  __int16 v9 = 257;
  uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), v5, a3, v6, (const llvm::Twine *)v8);
}

llvm::Value *AGCLLVMBuilder::extendVector(AGCLLVMBuilder *this, llvm::Value *a2, int a3)
{
  uint64_t v3 = a2;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 0x12)
  {
    llvm::FixedVectorType::get();
    uint64_t v8 = (llvm::Value *)llvm::UndefValue::get();
    __int16 v12 = 257;
    __int16 v9 = (llvm::Value *)llvm::ConstantInt::get();
    return (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), v8, v3, v9, (const llvm::Twine *)v11);
  }
  if (*(_DWORD *)(*(void *)a2 + 32) != a3)
  {
    uint64_t v13 = llvm::ConstantInt::get();
    uint64_t v14 = llvm::ConstantInt::get();
    uint64_t v15 = llvm::ConstantInt::get();
    uint64_t v16 = llvm::ConstantInt::get();
    uint64_t v5 = (llvm::Value *)llvm::ConstantVector::get();
    uint64_t v6 = (llvm::Value *)llvm::UndefValue::get();
    __int16 v12 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((AGCLLVMBuilder *)((char *)this + 8), v3, v6, v5, (const llvm::Twine *)v11);
  }
  return v3;
}

uint64_t AGCLLVMBuilder::subrangeVector(AGCLLVMBuilder *this, llvm::Value *a2, unsigned int a3, int a4, int a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a4 == 1 && a5)
  {
    LOWORD(v13) = 257;
    uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateExtractElement((AGCLLVMBuilder *)((char *)this + 8), a2, v7, (const llvm::Twine *)v12);
  }
  else
  {
    v12[0] = llvm::ConstantInt::get();
    v12[1] = llvm::ConstantInt::get();
    v12[2] = llvm::ConstantInt::get();
    v12[3] = llvm::ConstantInt::get();
    uint64_t v13 = llvm::ConstantInt::get();
    uint64_t v14 = llvm::ConstantInt::get();
    uint64_t v15 = llvm::ConstantInt::get();
    uint64_t v16 = llvm::ConstantInt::get();
    __int16 v9 = (llvm::Value *)llvm::ConstantVector::get();
    uint64_t v10 = (llvm::Value *)llvm::UndefValue::get();
    v11[16] = 257;
    return llvm::IRBuilderBase::CreateShuffleVector((AGCLLVMBuilder *)((char *)this + 8), a2, v10, v9, (const llvm::Twine *)v11);
  }
}

uint64_t llvm::IRBuilderBase::CreateShuffleVector(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  v10[8] = *MEMORY[0x1E4F143B8];
  llvm::ShuffleVectorInst::getShuffleMask();
  return llvm::IRBuilderBase::CreateShuffleVector((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)v10, 0, (uint64_t)a5);
}

uint64_t llvm::IRBuilderBase::CreateShuffleVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 336))(*(void *)(a1 + 72), a2, a3, a4, a5);
    if (v12) {
      BOOL v13 = *(unsigned __int8 *)(v12 + 16) >= 0x1Cu;
    }
    else {
      BOOL v13 = 0;
    }
    if (v13) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v12, a6);
    }
  }
  else
  {
    uint64_t v12 = llvm::User::operator new((llvm::User *)0x68);
    __int16 v19 = 257;
    MEMORY[0x1CB79F390](v12, a2, a3, a4, a5, v18, 0);
    (*(void (**)(void, uint64_t, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v12, a6, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v14 = *(unsigned int *)(a1 + 8);
    if (v14)
    {
      uint64_t v15 = *(void *)a1;
      uint64_t v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata();
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return v12;
}

void llvm::APFloat::Storage::~Storage(llvm::APFloat::Storage *this)
{
  uint64_t v2 = *(void *)this;
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v2)
  {
    uint64_t v3 = *((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v3)
    {
      uint64_t v4 = v3 - 16;
      uint64_t v5 = *(void *)(v3 - 8);
      if (v5)
      {
        uint64_t v6 = v3 - 24;
        uint64_t v7 = 32 * v5;
        do
        {
          llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)(v6 + v7));
          v7 -= 32;
        }
        while (v7);
      }
      MEMORY[0x1CB7A0760](v4, 0x1072C801E5F02E8);
    }
  }
  else
  {
    llvm::detail::IEEEFloat::~IEEEFloat(this);
  }
}

uint64_t AGCLLVMG16PB0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v96 = *(_OWORD *)a2;
  uint64_t v97 = *(void *)(a2 + 16);
  if (v97) {
    llvm::MetadataTracking::track();
  }
  int v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = (llvm::Type *)a1[26];
  __int16 v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  __int16 v9 = (llvm::Type *)a1[26];
  uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  BOOL v13 = (llvm::Type *)a1[26];
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  long long v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  __int16 v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  uint64_t v21 = a1[25];
  __int16 v91 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  uint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  std::string v25 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  std::string v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  long long v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  uint64_t v29 = a1[25];
  __int16 v91 = 257;
  long long v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  uint64_t v31 = llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  __int16 v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  long long v33 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  __int16 v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  uint64_t v37 = a1[25];
  __int16 v91 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  unint64_t v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  unsigned int v42 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  int v44 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  uint64_t v46 = a1[25];
  __int16 v91 = 257;
  long long v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  uint64_t v48 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  int v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  uint64_t v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  __int16 v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  uint64_t v52 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  int v54 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  uint64_t v56 = a1[25];
  __int16 v91 = 257;
  uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  uint64_t v58 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  uint64_t v59 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  unsigned int v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  uint64_t v63 = a1[25];
  __int16 v91 = 257;
  uint64_t v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  uint64_t v65 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  uint64_t v67 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  uint64_t v69 = a1[25];
  __int16 v91 = 257;
  uint64_t v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  uint64_t v71 = llvm::ConstantInt::get();
  __int16 v95 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  uint64_t v73 = llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  __int16 v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  __int16 v95 = 257;
  uint64_t v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  __int16 v95 = 257;
  int v78 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  uint64_t v80 = (llvm::Value *)llvm::ConstantInt::get();
  int v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  int v84 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t llvm::IRBuilderBase::CreateLShr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 9) + 160))(*((void *)this + 9));
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t llvm::IRBuilderBase::CreateCast(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3;
  if (*(void *)a3 != a4)
  {
    if (*(unsigned __int8 *)(a3 + 16) > 0x14u)
    {
      uint64_t v5 = llvm::CastInst::Create();
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v5, a5);
    }
    else
    {
      uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72), a2, a3, a4);
      if (v5) {
        BOOL v8 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8) {
        llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v5, a5);
      }
    }
  }
  return v5;
}

uint64_t llvm::IRBuilderBase::Insert<llvm::Instruction>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v6 + 16 * v5;
    do
    {
      llvm::Instruction::setMetadata();
      v6 += 16;
    }
    while (v6 != v7);
  }
  return a2;
}

uint64_t llvm::IRBuilderBase::CreateAnd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 9) + 24))(*((void *)this + 9));
  if (!v6)
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t llvm::IRBuilderBase::CreateAdd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 9) + 16))(*((void *)this + 9));
  if (!v6)
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t llvm::IRBuilderBase::CreateAlignedLoad(uint64_t *a1, llvm::Type *a2, uint64_t a3, __int16 a4, uint64_t a5)
{
  if ((a4 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
    llvm::DataLayout::getABITypeAlign(DataLayout, a2);
  }
  uint64_t v10 = llvm::User::operator new((llvm::User *)0x40);
  llvm::LoadInst::LoadInst();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v10, a5, a1[6], a1[7]);
  uint64_t v11 = *((unsigned int *)a1 + 2);
  if (v11)
  {
    uint64_t v12 = *a1;
    uint64_t v13 = v12 + 16 * v11;
    do
    {
      llvm::Instruction::setMetadata();
      v12 += 16;
    }
    while (v12 != v13);
  }
  return v10;
}

uint64_t llvm::IRBuilderBase::CreateGEP(llvm::IRBuilderBase *this, llvm::Type *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = (uint64_t *)a4;
  uint64_t v12 = a4;
  uint64_t v9 = (*(uint64_t (**)(void, llvm::Type *, llvm::Value *, llvm::Value **, uint64_t, void))(**((void **)this + 9) + 48))(*((void *)this + 9), a2, a3, &v12, 1, 0);
  if (!v9)
  {
    __int16 v13 = 257;
    uint64_t v9 = llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, &v11, 1);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v9, (uint64_t)a5);
  }
  return v9;
}

uint64_t llvm::GetElementPtrInst::Create(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v8 = llvm::User::operator new((llvm::User *)0x50);
  uint64_t v9 = *a2;
  unsigned int v10 = *(_DWORD *)(*a2 + 8);
  if ((v10 & 0xFE) == 0x12)
  {
    uint64_t v9 = **(void **)(v9 + 16);
    unsigned int v10 = *(_DWORD *)(v9 + 8);
  }
  uint64_t v11 = (llvm::LLVMContext *)(v10 >> 8);
  llvm::GetElementPtrInst::getIndexedType();
  if (*(void *)(v9 + 24)) {
    llvm::PointerType::get();
  }
  else {
    llvm::PointerType::get(*(llvm::PointerType **)v9, v11);
  }
  if (*a2 && (*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
  {
LABEL_16:
    llvm::VectorType::get();
    goto LABEL_17;
  }
  if (a4)
  {
    uint64_t v12 = 8 * a4;
    __int16 v13 = a3;
    do
    {
      uint64_t v14 = **v13;
      if (v14 && (*(_DWORD *)(v14 + 8) & 0xFE) == 18) {
        goto LABEL_16;
      }
      ++v13;
      v12 -= 8;
    }
    while (v12);
  }
LABEL_17:
  llvm::Instruction::Instruction();
  *(void *)(v8 + 64) = a1;
  *(void *)(v8 + 72) = llvm::GetElementPtrInst::getIndexedType();
  llvm::GetElementPtrInst::init();
  return v8;
}

uint64_t AGCLLVMGen5TargetLowerer::adjustToMip(AGCLLVMGen5TargetLowerer *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v3 = (uint64_t *)((char *)this + 8);
  __int16 v9 = 257;
  uint64_t LShr = (llvm::Constant **)llvm::IRBuilderBase::CreateLShr((AGCLLVMGen5TargetLowerer *)((char *)this + 8), a2, a3, (const llvm::Twine *)v8);
  __int16 v9 = 257;
  uint64_t NullValue = llvm::Constant::getNullValue(*LShr, v5);
  llvm::IRBuilderBase::CreateICmp(v3, 33, LShr, NullValue, (uint64_t)v8);
  llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t llvm::IRBuilderBase::CreateICmp(uint64_t *a1, uint64_t a2, llvm::CmpInst **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1[9] + 40))(a1[9]);
  if (!v8)
  {
    uint64_t v8 = llvm::User::operator new((llvm::User *)0x40);
    llvm::CmpInst::makeCmpResultType(*a3, v9);
    llvm::CmpInst::CmpInst();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v8, a5, a1[6], a1[7]);
    uint64_t v10 = *((unsigned int *)a1 + 2);
    if (v10)
    {
      uint64_t v11 = *a1;
      uint64_t v12 = v11 + 16 * v10;
      do
      {
        llvm::Instruction::setMetadata();
        v11 += 16;
      }
      while (v11 != v12);
    }
  }
  return v8;
}

uint64_t llvm::CmpInst::makeCmpResultType(llvm::CmpInst *this, llvm::Type *a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = llvm::Type::getInt1Ty(*(llvm::Type **)this, a2);
  if (this && (v3 & 0xFE) == 0x12)
  {
    return llvm::VectorType::get();
  }
  return result;
}

uint64_t AGCLLVMG16PB0TargetLowerer::extractBaseLevel(AGCLLVMG16PB0TargetLowerer *this, llvm::Value *a2)
{
  uint64_t v4 = (AGCLLVMG16PB0TargetLowerer *)((char *)this + 8);
  uint64_t v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t virtual thunk to'AGCLLVMUserVertexShader::getSupportExternalVisibleFunctions(AGCLLVMUserVertexShader *this)
{
  return *((unsigned __int8 *)this + *(void *)(*(void *)this - 120) + 5060);
}

uint64_t AGCLLVMUserObject::linkMetalRuntime(AGCLLVMUserObject *this, int a2)
{
  if (*((unsigned char *)this + 14)) {
    return 1;
  }
  (*(void (**)(char ***__return_ptr))(**(void **)((char *)this + *(void *)(*(void *)this - 24) + 400)
                                               + 488))(&v30);
  uint64_t v4 = v30;
  if (v30 != v31)
  {
    do
    {
      uint64_t Function = llvm::Module::getFunction();
      if (Function)
      {
        uint64_t v6 = Function;
        if (*((char *)v4 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v29, v4[4], (std::string::size_type)v4[5]);
        }
        else {
          std::string v29 = *(std::string *)(v4 + 4);
        }
        std::string::insert(&v29, 0, "agx.");
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v29.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:nn180100]((uint64_t)v27, size + 5);
        if (v28 >= 0) {
          uint64_t v8 = v27;
        }
        else {
          uint64_t v8 = (void **)v27[0];
        }
        if (size)
        {
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v9 = &v29;
          }
          else {
            uint64_t v9 = (std::string *)v29.__r_.__value_.__r.__words[0];
          }
          memmove(v8, v9, size);
        }
        strcpy((char *)v8 + size, ".fast");
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v10 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v10 = v29.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:nn180100]((uint64_t)__p, v10 + 8);
        if (v26 >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        if (v10)
        {
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v12 = &v29;
          }
          else {
            uint64_t v12 = (std::string *)v29.__r_.__value_.__r.__words[0];
          }
          memmove(v11, v12, v10);
        }
        strcpy((char *)v11 + v10, ".nonfast");
        uint64_t v13 = *(void *)(v6 + 8);
        while (v13)
        {
          uint64_t v14 = *(llvm::Instruction **)(v13 + 24);
          uint64_t v13 = *(void *)(v13 + 8);
          llvm::Instruction::getFastMathFlags(v14);
          llvm::Module::getOrInsertFunction();
          *((void *)v14 + 9) = *(void *)(v15 + 24);
          llvm::CallBase::setCalledOperand((uint64_t)v14, v15);
        }
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        if (v28 < 0) {
          operator delete(v27[0]);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v16 = v4[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = (char **)v16;
          uint64_t v16 = *(char **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (char **)v4[2];
          BOOL v18 = *v17 == (char *)v4;
          uint64_t v4 = v17;
        }
        while (!v18);
      }
      uint64_t v4 = v17;
    }
    while (v17 != v31);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(v31[0]);
  __int16 v19 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v20 = *((void *)v19 + 58);
  uint64_t v21 = (llvm::Module *)*((void *)v19 + 46);
  if (*((char *)this + 207) < 0) {
    std::string::__init_copy_ctor_external(&v24, *((const std::string::value_type **)this + 23), *((void *)this + 24));
  }
  else {
    std::string v24 = *(std::string *)((char *)this + 184);
  }
  MetalRuntime = AGCLLVMCtx::loadMetalRuntime(v20, v21, a2);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (!MetalRuntime) {
    return 1;
  }
  else {
    return AGCLLVMObject::linkCommon((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24)), MetalRuntime, *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1751), *((llvm::Function **)this + 21));
  }
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(void *a1)
{
  std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t)v40, (uint64_t)a1 + *(void *)(*a1 - 24) + 1664);
  unint64_t v2 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 1688);
  if (v2)
  {
    if (v2 >> 62) {
LABEL_47:
    }
      abort();
    int v3 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v2);
    uint64_t v5 = &v3[4 * v4];
  }
  else
  {
    int v3 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v6 = v41;
  if (v41)
  {
    uint64_t v7 = v3;
    while (1)
    {
      uint64_t v8 = (char *)a1 + *(void *)(*a1 - 24);
      int Key = llvm::StringMapImpl::FindKey();
      if (Key == -1 || Key == (unint64_t)*((unsigned int *)v8 + 824)) {
        goto LABEL_17;
      }
      int v10 = *((char *)v6 + 39);
      uint64_t v11 = v10 >= 0 ? (const char *)(v6 + 2) : (const char *)v6[2];
      unint64_t v12 = v10 >= 0 ? *((unsigned __int8 *)v6 + 39) : (unint64_t)v6[3];
      int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 2568), v11, v12);
      uint64_t v14 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v15 = (flatbuffers::FlatBufferBuilder *)(v14 + 2568);
      v14[2638] = 1;
      int v16 = *((_DWORD *)v14 + 650) - *((_DWORD *)v14 + 654) + *((_DWORD *)v14 + 652);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v14 + 2568), 4, String);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v15, 6, *((unsigned int *)v6 + 10), 0);
      int v17 = flatbuffers::FlatBufferBuilder::EndTable(v15, v16);
      int v18 = v17;
      if (v7 < v5) {
        break;
      }
      uint64_t v20 = (v7 - v3) >> 2;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        goto LABEL_47;
      }
      if ((v5 - v3) >> 1 > v21) {
        unint64_t v21 = (v5 - v3) >> 1;
      }
      if ((unint64_t)(v5 - v3) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22) {
        unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v22);
      }
      else {
        uint64_t v23 = 0;
      }
      std::string v24 = (char *)(v22 + 4 * v20);
      *(_DWORD *)std::string v24 = v18;
      __int16 v19 = v24 + 4;
      while (v7 != v3)
      {
        int v25 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v24 - 1) = v25;
        v24 -= 4;
      }
      uint64_t v5 = (char *)(v22 + 4 * v23);
      if (v3) {
        operator delete(v3);
      }
      int v3 = v24;
LABEL_18:
      uint64_t v6 = (uint64_t **)*v6;
      uint64_t v7 = v19;
      if (!v6) {
        goto LABEL_36;
      }
    }
    *(_DWORD *)uint64_t v7 = v17;
    v7 += 4;
LABEL_17:
    __int16 v19 = v7;
    goto LABEL_18;
  }
  __int16 v19 = v3;
LABEL_36:
  char v26 = (char *)a1 + *(void *)(*a1 - 24);
  long long v27 = (flatbuffers::FlatBufferBuilder *)(v26 + 2568);
  v26[2638] = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v26 + 2568), v19 - v3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v26 + 2568), v19 - v3, 4uLL);
  uint64_t v28 = v19 - v3;
  if (v19 == v3) {
    std::string v29 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>,std::allocator<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>(std::vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>> const&)::t;
  }
  else {
    std::string v29 = v3;
  }
  if (v19 != v3)
  {
    uint64_t v30 = v28 >> 2;
    uint64_t v31 = v29 - 4;
    do
    {
      uint64_t v32 = v30 - 1;
      int v33 = *(_DWORD *)&v31[4 * v30];
      flatbuffers::FlatBufferBuilder::Align(v27, 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v27, *((_DWORD *)v26 + 650) - *((_DWORD *)v26 + 654) + *((_DWORD *)v26 + 652) - v33 + 4);
      uint64_t v30 = v32;
    }
    while (v32);
  }
  v26[2638] = 0;
  int v34 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v27, (unint64_t)v28 >> 2);
  __int16 v35 = (char *)a1 + *(void *)(*a1 - 24);
  v35[2638] = 1;
  int v36 = *((_DWORD *)v35 + 650) - *((_DWORD *)v35 + 654) + *((_DWORD *)v35 + 652);
  if (v34)
  {
    int v37 = v34;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v35 + 2568), 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v35 + 321, 4, *((_DWORD *)v35 + 650) - *((_DWORD *)v35 + 654) + *((_DWORD *)v35 + 652) - v37 + 4);
  }
  uint64_t v38 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v35 + 2568), v36);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)v40);
  if (v3) {
    operator delete(v3);
  }
  return v38;
}

uint64_t std::unordered_map<std::string,unsigned int>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

BOOL AGCDeserializedReply::deserialize(AGCDeserializedReply *this, _DWORD *a2, uint64_t a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  if (*a2 != -17958193) {
    return 0;
  }
  int v116 = a2[4];
  if (v116)
  {
    int v4 = 0;
    uint64_t v5 = (char *)(a2 + 8);
    v121 = (void *)((char *)this + 1960);
    uint64_t v125 = (std::vector<unsigned int> *)((char *)this + 1824);
    __int16 v110 = (char *)this + 1880;
    uint64_t v112 = (char *)this + 1864;
    int v113 = (char *)this + 1856;
    uint64_t v119 = (char *)this + 1904;
    uint64_t v117 = (char *)this + 1912;
    uint64_t v118 = (void *)((char *)this + 1768);
    while (1)
    {
      int v6 = *(_DWORD *)v5;
      int v120 = v4;
      if (*(_DWORD *)v5 == 2) {
        break;
      }
      if (v6 == 11)
      {
        *((void *)this + 227) = *((void *)v5 + 2);
        goto LABEL_215;
      }
      if (v6 == 25)
      {
        *((void *)this + 2) = v5;
        LODWORD(v124) = *((_DWORD *)v5 + 30);
        std::vector<unsigned int>::resize(v125, (*((_DWORD *)v5 + 16) + 1));
        unsigned int v122 = *(unsigned __int8 *)(*((void *)this + 2) + 64);
        if (*(unsigned char *)(*((void *)this + 2) + 64))
        {
          unsigned int v7 = 0;
          char v114 = 0;
          uint64_t v8 = v5 + 72;
          int v9 = 1;
          unsigned __int8 v10 = 1;
          while (1)
          {
            *((unsigned char *)&v128.__r_.__value_.__s + 23) = 16;
            *(_OWORD *)&v128.__r_.__value_.__l.__data_ = *((_OWORD *)v8 + 1);
            v128.__r_.__value_.__s.__data_[16] = 0;
            std::vector<unsigned int>::pointer begin = v125->__begin_;
            v125->__begin_[v10] = *((_DWORD *)v8 + 12) - v124;
            if (!strncmp(v8 + 16, "__GPU_STATS", 0x10uLL))
            {
              int v13 = strncmp(v8, "__counters", 0x10uLL);
              unint64_t v12 = v119;
              if (v13)
              {
                int v14 = strncmp(v8, "__telemetry", 0x10uLL);
                unint64_t v12 = v117;
                if (v14) {
                  goto LABEL_28;
                }
              }
            }
            else
            {
              if (!strncmp(v8 + 16, "__DWARF", 0x10uLL)) {
                goto LABEL_119;
              }
              if (!strncmp(v8 + 16, "__GPU_METADATA", 0x10uLL))
              {
                if (!strncmp(v8, "__helpers", 0x10uLL) && *((void *)this + 28) && *((void *)this + 29))
                {
                  char v22 = 1;
                  goto LABEL_29;
                }
                if (strncmp(v8, "__helpers", 0x10uLL))
                {
                  if (v114)
                  {
                    uint64_t v15 = *((void *)v8 + 5);
                    uint64_t v16 = *(void *)this;
                    int v17 = v8;
                    if (v15) {
                      int v17 = (char *)(v16 + *((unsigned int *)v8 + 12));
                    }
                    uint64_t v18 = *((unsigned int *)v8 + 14);
                    int v19 = *((_DWORD *)v8 + 15);
                    *((void *)this + 144) = v17;
                    *((void *)this + 145) = v15;
                    *((unsigned char *)this + 1168) = v10;
                    *((void *)this + 147) = v16 + v18;
                    *((_DWORD *)this + 296) = v19;
                    char v114 = 1;
                    *((unsigned char *)this + 1144) = 1;
                    goto LABEL_119;
                  }
                  char v22 = 0;
                  char v114 = 1;
                  goto LABEL_29;
                }
              }
              if (strncmp(v8 + 16, "__TEXT", 0x10uLL)
                || (v20 = strncmp(v8, "__const", 0x10uLL), unint64_t v12 = v113, v20)
                && (v21 = strncmp(v8, "__cstring", 0x10uLL), unint64_t v12 = v112, v21))
              {
                if (strncmp(v8 + 16, "__DATA", 0x10uLL) || strncmp(v8, "__common", 0x10uLL)) {
                  goto LABEL_28;
                }
                begin[v10] = *((void *)v8 + 4);
                unint64_t v12 = v110;
              }
            }
            MEMORY[0x1CB7A04E0](&v128, *v12);
LABEL_28:
            char v22 = 0;
LABEL_29:
            if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v23 = (std::string::size_type)&v128;
            }
            else {
              std::string::size_type v23 = v128.__r_.__value_.__r.__words[0];
            }
            std::string::basic_string[abi:nn180100]<0>(&__p, (char *)v23);
            std::string v24 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v121, (uint64_t)&__p);
            int v25 = v24;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if (v25)
              {
LABEL_34:
                uint64_t v26 = *((void *)v8 + 5);
                long long v27 = v8;
                if (v26) {
                  long long v27 = (char *)(*(void *)this + *((unsigned int *)v8 + 12));
                }
                if ((v22 & 1) == 0)
                {
                  int v28 = *((_DWORD *)v8 + 15);
                  uint64_t v29 = *(void *)this + *((unsigned int *)v8 + 14);
                  uint64_t v30 = (char *)this + 40 * *((unsigned int *)v25 + 10);
                  *((void *)v30 + 3) = v27;
                  *((void *)v30 + 4) = v26;
                  v30[40] = v10;
                  *((void *)v30 + 6) = v29;
                  *((_DWORD *)v30 + 14) = v28;
                }
                LODWORD(__p.__r_.__value_.__l.__data_) = v9;
                std::string::basic_string[abi:nn180100]<0>(&__p.__r_.__value_.__l.__size_, (char *)v23);
                std::string::size_type data_low = LODWORD(__p.__r_.__value_.__l.__data_);
                unint64_t v32 = *((void *)this + 220);
                if (v32)
                {
                  uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
                  v33.i16[0] = vaddlv_u8(v33);
                  if (v33.u32[0] > 1uLL)
                  {
                    std::string::size_type v23 = LODWORD(__p.__r_.__value_.__l.__data_);
                    if (v32 <= LODWORD(__p.__r_.__value_.__l.__data_)) {
                      std::string::size_type v23 = LODWORD(__p.__r_.__value_.__l.__data_) % v32;
                    }
                  }
                  else
                  {
                    std::string::size_type v23 = (v32 - 1) & (uint64_t)__p.__r_.__value_.__l.__data_;
                  }
                  int v34 = *(uint64_t ***)(*((void *)this + 219) + 8 * v23);
                  if (v34)
                  {
                    for (uint64_t i = *v34; i; uint64_t i = (uint64_t *)*i)
                    {
                      unint64_t v36 = i[1];
                      if (v36 == LODWORD(__p.__r_.__value_.__l.__data_))
                      {
                        if (*((_DWORD *)i + 4) == LODWORD(__p.__r_.__value_.__l.__data_)) {
                          goto LABEL_116;
                        }
                      }
                      else
                      {
                        if (v33.u32[0] > 1uLL)
                        {
                          if (v36 >= v32) {
                            v36 %= v32;
                          }
                        }
                        else
                        {
                          v36 &= v32 - 1;
                        }
                        if (v36 != v23) {
                          break;
                        }
                      }
                    }
                  }
                }
                int v37 = (char *)operator new(0x30uLL);
                *(void *)int v37 = 0;
                *((void *)v37 + 1) = data_low;
                *((_DWORD *)v37 + 4) = data_low;
                *(_OWORD *)(v37 + 24) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                *((void *)v37 + 5) = v127;
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                uint64_t v127 = 0;
                float v38 = (float)(unint64_t)(*((void *)this + 222) + 1);
                float v39 = *((float *)this + 446);
                if (!v32 || (float)(v39 * (float)v32) < v38)
                {
                  BOOL v40 = (v32 & (v32 - 1)) != 0;
                  if (v32 < 3) {
                    BOOL v40 = 1;
                  }
                  unint64_t v41 = v40 | (2 * v32);
                  unint64_t v42 = vcvtps_u32_f32(v38 / v39);
                  if (v41 <= v42) {
                    int8x8_t prime = (int8x8_t)v42;
                  }
                  else {
                    int8x8_t prime = (int8x8_t)v41;
                  }
                  if (*(void *)&prime == 1)
                  {
                    int8x8_t prime = (int8x8_t)2;
                  }
                  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                  {
                    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                    unint64_t v32 = *((void *)this + 220);
                  }
                  if (*(void *)&prime <= v32)
                  {
                    if (*(void *)&prime < v32)
                    {
                      unint64_t v50 = vcvtps_u32_f32((float)*((unint64_t *)this + 222) / *((float *)this + 446));
                      if (v32 < 3
                        || (uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
                      {
                        unint64_t v50 = std::__next_prime(v50);
                      }
                      else
                      {
                        uint64_t v52 = 1 << -(char)__clz(v50 - 1);
                        if (v50 >= 2) {
                          unint64_t v50 = v52;
                        }
                      }
                      if (*(void *)&prime <= v50) {
                        int8x8_t prime = (int8x8_t)v50;
                      }
                      if (*(void *)&prime >= v32)
                      {
                        unint64_t v32 = *((void *)this + 220);
                      }
                      else
                      {
                        if (prime) {
                          goto LABEL_68;
                        }
                        uint64_t v59 = (void *)*((void *)this + 219);
                        *((void *)this + 219) = 0;
                        if (v59) {
                          operator delete(v59);
                        }
                        unint64_t v32 = 0;
                        *((void *)this + 220) = 0;
                      }
                    }
                  }
                  else
                  {
LABEL_68:
                    if (*(void *)&prime >> 61) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    int v44 = operator new(8 * *(void *)&prime);
                    uint64_t v45 = (void *)*((void *)this + 219);
                    *((void *)this + 219) = v44;
                    if (v45) {
                      operator delete(v45);
                    }
                    uint64_t v46 = 0;
                    *((int8x8_t *)this + 220) = prime;
                    do
                      *(void *)(*((void *)this + 219) + 8 * v46++) = 0;
                    while (*(void *)&prime != v46);
                    long long v47 = (void *)*v118;
                    if (*v118)
                    {
                      unint64_t v48 = v47[1];
                      uint8x8_t v49 = (uint8x8_t)vcnt_s8(prime);
                      v49.i16[0] = vaddlv_u8(v49);
                      if (v49.u32[0] > 1uLL)
                      {
                        if (v48 >= *(void *)&prime) {
                          v48 %= *(void *)&prime;
                        }
                      }
                      else
                      {
                        v48 &= *(void *)&prime - 1;
                      }
                      *(void *)(*((void *)this + 219) + 8 * v48) = v118;
                      uint64_t v53 = (void *)*v47;
                      if (*v47)
                      {
                        do
                        {
                          unint64_t v54 = v53[1];
                          if (v49.u32[0] > 1uLL)
                          {
                            if (v54 >= *(void *)&prime) {
                              v54 %= *(void *)&prime;
                            }
                          }
                          else
                          {
                            v54 &= *(void *)&prime - 1;
                          }
                          if (v54 != v48)
                          {
                            uint64_t v55 = *((void *)this + 219);
                            if (!*(void *)(v55 + 8 * v54))
                            {
                              *(void *)(v55 + 8 * v54) = v47;
                              goto LABEL_97;
                            }
                            void *v47 = *v53;
                            *uint64_t v53 = **(void **)(*((void *)this + 219) + 8 * v54);
                            **(void **)(*((void *)this + 219) + 8 * v54) = v53;
                            uint64_t v53 = v47;
                          }
                          unint64_t v54 = v48;
LABEL_97:
                          long long v47 = v53;
                          uint64_t v53 = (void *)*v53;
                          unint64_t v48 = v54;
                        }
                        while (v53);
                      }
                    }
                    unint64_t v32 = (unint64_t)prime;
                  }
                  if ((v32 & (v32 - 1)) != 0)
                  {
                    if (v32 <= data_low) {
                      std::string::size_type v23 = data_low % v32;
                    }
                    else {
                      std::string::size_type v23 = data_low;
                    }
                  }
                  else
                  {
                    std::string::size_type v23 = (v32 - 1) & data_low;
                  }
                }
                uint64_t v56 = *((void *)this + 219);
                uint64_t v57 = *(void **)(v56 + 8 * v23);
                if (v57)
                {
                  *(void *)int v37 = *v57;
                  goto LABEL_114;
                }
                *(void *)int v37 = *v118;
                *uint64_t v118 = v37;
                *(void *)(v56 + 8 * v23) = v118;
                if (*(void *)v37)
                {
                  unint64_t v58 = *(void *)(*(void *)v37 + 8);
                  if ((v32 & (v32 - 1)) != 0)
                  {
                    if (v58 >= v32) {
                      v58 %= v32;
                    }
                  }
                  else
                  {
                    v58 &= v32 - 1;
                  }
                  uint64_t v57 = (void *)(*((void *)this + 219) + 8 * v58);
LABEL_114:
                  void *v57 = v37;
                }
                ++*((void *)this + 222);
LABEL_116:
                if (SHIBYTE(v127) < 0) {
                  operator delete((void *)__p.__r_.__value_.__l.__size_);
                }
                ++v7;
                goto LABEL_119;
              }
            }
            else if (v24)
            {
              goto LABEL_34;
            }
            __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA240];
            printHexDump(&__p.__r_.__value_.__l.__data_, *(void *)this, *((void *)this + 1), 0x20u, "", 0);
LABEL_119:
            if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v128.__r_.__value_.__l.__data_);
            }
            if (v122 >= ++v10)
            {
              v8 += 80;
              int v9 = v10;
              if (v7 <= 0xE) {
                continue;
              }
            }
            break;
          }
        }
      }
LABEL_215:
      v5 += *((unsigned int *)v5 + 1);
      int v4 = v120 + 1;
      if (v120 + 1 == v116) {
        goto LABEL_216;
      }
    }
    int v60 = *((_DWORD *)v5 + 3);
    uint64_t v61 = *(void *)this + *((unsigned int *)v5 + 4);
    uint64_t v62 = (unsigned int *)(*(void *)this + *((unsigned int *)v5 + 2));
    *((void *)this + 224) = v62;
    *((void *)this + 225) = v61;
    *((_DWORD *)this + 452) = v60;
    int v63 = *((_DWORD *)v5 + 3);
    if (!v63) {
      goto LABEL_215;
    }
    int v64 = 0;
    uint64_t v111 = v61 + 1;
LABEL_135:
    int8x8_t v65 = *(int8x8_t *)((char *)this + 1760);
    if (!*(void *)&v65) {
      goto LABEL_210;
    }
    unint64_t v66 = *((unsigned __int8 *)v62 + 5);
    uint8x8_t v67 = (uint8x8_t)vcnt_s8(v65);
    v67.i16[0] = vaddlv_u8(v67);
    if (v67.u32[0] > 1uLL)
    {
      unint64_t v68 = *((unsigned __int8 *)v62 + 5);
      if (*(void *)&v65 <= v66) {
        unint64_t v68 = v66 % *(void *)&v65;
      }
    }
    else
    {
      unint64_t v68 = (v65.i32[0] - 1) & v66;
    }
    uint64_t v69 = *(uint64_t ***)(*((void *)this + 219) + 8 * v68);
    if (!v69) {
      goto LABEL_210;
    }
    uint64_t v70 = *v69;
    if (!v70) {
      goto LABEL_210;
    }
    uint64_t v71 = *v62;
    uint64_t v72 = *((void *)v62 + 1);
    while (1)
    {
      unint64_t v73 = v70[1];
      if (v73 == v66)
      {
        if (*((_DWORD *)v70 + 4) == v66)
        {
          if ((~*((unsigned __int8 *)v62 + 4) & 0xE) != 0 || v70 == 0) {
            goto LABEL_210;
          }
          uint64_t v75 = (char *)(v70 + 3);
          if (*((char *)v70 + 47) < 0) {
            uint64_t v75 = *(char **)v75;
          }
          std::string::basic_string[abi:nn180100]<0>(&__p, v75);
          long long v76 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v121, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:nn180100]<0>(&v128, (char *)(v111 + v71));
          unsigned int v77 = *((_DWORD *)v76 + 10);
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__p, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
          }
          else {
            std::string __p = v128;
          }
          int v78 = (char *)this + 40 * v77 + 1192;
          LODWORD(v127) = v72;
          std::string::size_type v79 = __p.__r_.__value_.__r.__words[0];
          int v109 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          unint64_t v82 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)p_p, size);
          unint64_t v83 = v82;
          uint64_t v115 = (uint64_t)v78;
          unint64_t v84 = *((void *)v78 + 1);
          if (!v84) {
            goto LABEL_186;
          }
          uint8x8_t v85 = (uint8x8_t)vcnt_s8((int8x8_t)v84);
          v85.i16[0] = vaddlv_u8(v85);
          unint64_t v123 = v85.u32[0];
          if (v85.u32[0] > 1uLL)
          {
            unint64_t v86 = v82;
            if (v82 >= v84) {
              unint64_t v86 = v82 % v84;
            }
          }
          else
          {
            unint64_t v86 = (v84 - 1) & v82;
          }
          uint64_t v87 = *(unsigned __int8 ***)(*(void *)v115 + 8 * v86);
          unint64_t v124 = v86;
          if (!v87 || (v108 = (void *)v79, (unsigned int v88 = *v87) == 0))
          {
LABEL_186:
            __int16 v91 = (char *)operator new(0x30uLL);
            *(void *)__int16 v91 = 0;
            *((void *)v91 + 1) = v83;
            *(std::string *)(v91 + 16) = __p;
            *((_DWORD *)v91 + 10) = v72;
            float v92 = (float)(unint64_t)(*(void *)(v115 + 24) + 1);
            float v93 = *(float *)(v115 + 32);
            unint64_t v94 = v124;
            if (!v84 || (float)(v93 * (float)v84) < v92)
            {
              BOOL v95 = (v84 & (v84 - 1)) != 0;
              if (v84 < 3) {
                BOOL v95 = 1;
              }
              unint64_t v96 = v95 | (2 * v84);
              unint64_t v97 = vcvtps_u32_f32(v92 / v93);
              if (v96 <= v97) {
                size_t v98 = v97;
              }
              else {
                size_t v98 = v96;
              }
              std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(v115, v98);
              unint64_t v84 = *(void *)(v115 + 8);
              if ((v84 & (v84 - 1)) != 0)
              {
                if (v83 >= v84) {
                  unint64_t v94 = v83 % v84;
                }
                else {
                  unint64_t v94 = v83;
                }
              }
              else
              {
                unint64_t v94 = (v84 - 1) & v83;
              }
            }
            uint64_t v99 = *(void *)v115;
            BOOL v100 = *(void **)(*(void *)v115 + 8 * v94);
            if (v100)
            {
              *(void *)__int16 v91 = *v100;
              goto LABEL_206;
            }
            *(void *)__int16 v91 = *(void *)(v115 + 16);
            *(void *)(v115 + 16) = v91;
            *(void *)(v99 + 8 * v94) = v115 + 16;
            if (*(void *)v91)
            {
              unint64_t v101 = *(void *)(*(void *)v91 + 8);
              if ((v84 & (v84 - 1)) != 0)
              {
                if (v101 >= v84) {
                  v101 %= v84;
                }
              }
              else
              {
                v101 &= v84 - 1;
              }
              BOOL v100 = (void *)(*(void *)v115 + 8 * v101);
LABEL_206:
              void *v100 = v91;
            }
            ++*(void *)(v115 + 24);
            goto LABEL_208;
          }
          while (2)
          {
            unint64_t v89 = *((void *)v88 + 1);
            if (v89 != v83)
            {
              if (v123 > 1)
              {
                if (v89 >= v84) {
                  v89 %= v84;
                }
              }
              else
              {
                v89 &= v84 - 1;
              }
              if (v89 != v86) {
                goto LABEL_186;
              }
LABEL_185:
              unsigned int v88 = *(unsigned __int8 **)v88;
              if (!v88) {
                goto LABEL_186;
              }
              continue;
            }
            break;
          }
          BOOL v90 = std::equal_to<std::string>::operator()[abi:nn180100](v88 + 16, (unsigned __int8 *)&__p);
          unint64_t v86 = v124;
          if (!v90) {
            goto LABEL_185;
          }
          if (v109 < 0) {
            operator delete(v108);
          }
LABEL_208:
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v128.__r_.__value_.__l.__data_);
          }
LABEL_210:
          v62 += 4;
          if (++v64 == v63) {
            goto LABEL_215;
          }
          goto LABEL_135;
        }
      }
      else
      {
        if (v67.u32[0] > 1uLL)
        {
          if (v73 >= *(void *)&v65) {
            v73 %= *(void *)&v65;
          }
        }
        else
        {
          v73 &= *(void *)&v65 - 1;
        }
        if (v73 != v68) {
          goto LABEL_210;
        }
      }
      uint64_t v70 = (uint64_t *)*v70;
      if (!v70) {
        goto LABEL_210;
      }
    }
  }
LABEL_216:
  uint64_t v102 = (char *)this + 24;
  if (*((void *)this + 3))
  {
    if (!*((void *)this + 4)) {
      uint64_t v102 = (char *)this + 584;
    }
  }
  else
  {
    uint64_t v102 = (char *)this + 584;
  }
  if (!*(void *)v102) {
    return 0;
  }
  long long v103 = (char *)this + 224;
  if (*((void *)this + 28))
  {
    if (!*((void *)this + 29)) {
      long long v103 = (char *)this + 784;
    }
  }
  else
  {
    long long v103 = (char *)this + 784;
  }
  uint64_t v105 = *(void *)v103;
  uint64_t v104 = *((void *)v103 + 1);
  return v105 && v104 != 0 && *((void *)this + 152) != 0;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(void *a1, uint64_t a2)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (uint64_t *)a2;
  }
  else {
    uint64_t v5 = *(uint64_t **)a2;
  }
  if (v4 >= 0) {
    unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v6 = *(void *)(a2 + 8);
  }
  unint64_t v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  int8x8_t v8 = (int8x8_t)a1[1];
  if (!*(void *)&v8) {
    return 0;
  }
  unint64_t v9 = v7;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  unint64_t v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v12 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v12 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v12 = (*(void *)&v8 - 1) & v7;
  }
  int v13 = *(unsigned __int8 ***)(*a1 + 8 * v12);
  if (!v13) {
    return 0;
  }
  for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v15 = *((void *)i + 1);
    if (v9 == v15)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
        return i;
      }
    }
    else
    {
      if (v11 > 1)
      {
        if (v15 >= *(void *)&v8) {
          v15 %= *(void *)&v8;
        }
      }
      else
      {
        v15 &= *(void *)&v8 - 1;
      }
      if (v15 != v12) {
        return 0;
      }
    }
  }
  return i;
}

BOOL std::equal_to<std::string>::operator()[abi:nn180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void AGCLLVMObject::AGCLLVMObject(AGCLLVMObject *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F25DA030;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  uint64_t v6 = (AGCLLVMObject *)((char *)this + 32);
  uint64_t v7 = (*(uint64_t (**)(void, llvm::LLVMContext *))(**((void **)a2 + 4) + 8))(*((void *)a2 + 4), a3);
  AGCLLVMBuilder::AGCLLVMBuilder(v6, a3);
  *((void *)this + 50) = v7;
  *(void *)this = &unk_1F25CC6E0;
  *((void *)this + 4) = &unk_1F25CC7D0;
  uint64_t v8 = mach_absolute_time();
  uint64_t v9 = 0;
  *((void *)this + 51) = v8;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *(_OWORD *)((char *)this + 441) = 0u;
  *((void *)this + 58) = a2;
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  do
  {
    int v10 = (char *)this + v9;
    *((void *)v10 + 65) = 0;
    *((_DWORD *)v10 + 132) = 0;
    *((void *)v10 + 62) = 0;
    *((void *)v10 + 63) = 0;
    v9 += 40;
    v10[512] = 0;
  }
  while (v9 != 560);
  for (uint64_t i = 0; i != 560; i += 40)
  {
    BOOL v12 = (char *)this + i;
    *((void *)v12 + 135) = 0;
    *((_DWORD *)v12 + 272) = 0;
    *((_OWORD *)v12 + 66) = 0uLL;
    v12[1072] = 0;
  }
  *((unsigned char *)this + 1616) = 0;
  *((void *)this + 206) = 0;
  *((_DWORD *)this + 414) = 0;
  *((unsigned char *)this + 1640) = 0;
  *(_OWORD *)((char *)this + 1624) = 0u;
  BOOL v13 = (char *)this + 2224;
  uint64_t v14 = 1664;
  do
  {
    unint64_t v15 = (char *)this + v14;
    *(_OWORD *)unint64_t v15 = 0uLL;
    *((_OWORD *)v15 + 1) = 0uLL;
    *((_DWORD *)v15 + 8) = 1065353216;
    v14 += 40;
  }
  while (v15 + 40 != v13);
  *((_OWORD *)this + 148) = *(_OWORD *)&off_1E65EC308;
  *((_OWORD *)this + 149) = xmmword_1E65EC318;
  *((_OWORD *)this + 150) = *(_OWORD *)&off_1E65EC328;
  *((_OWORD *)this + 151) = xmmword_1E65EC338;
  *((_OWORD *)this + 145) = xmmword_1E65EC2D8;
  *((_OWORD *)this + 146) = *(_OWORD *)&off_1E65EC2E8;
  *(_OWORD *)BOOL v13 = 0u;
  *((_OWORD *)this + 140) = 0u;
  *((_DWORD *)this + 564) = 1065353216;
  *((_DWORD *)this + 570) = 0;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *((_OWORD *)this + 143) = 0u;
  *((_OWORD *)this + 144) = 0u;
  *((_OWORD *)this + 147) = xmmword_1E65EC2F8;
  std::string::basic_string[abi:nn180100]<0>(v18, "__TEXT");
  int v19 = 0;
  std::string::basic_string[abi:nn180100]<0>(v20, *((char **)this + 291));
  int v21 = 1;
  std::string::basic_string[abi:nn180100]<0>(v22, *((char **)this + 292));
  int v23 = 2;
  std::string::basic_string[abi:nn180100]<0>(v24, *((char **)this + 293));
  int v25 = 3;
  std::string::basic_string[abi:nn180100]<0>(v26, *((char **)this + 294));
  int v27 = 4;
  std::string::basic_string[abi:nn180100]<0>(v28, *((char **)this + 295));
  int v29 = 5;
  std::string::basic_string[abi:nn180100]<0>(v30, *((char **)this + 296));
  int v31 = 6;
  std::string::basic_string[abi:nn180100]<0>(v32, *((char **)this + 297));
  int v33 = 7;
  std::string::basic_string[abi:nn180100]<0>(v34, *((char **)this + 298));
  int v35 = 8;
  std::string::basic_string[abi:nn180100]<0>(v36, *((char **)this + 299));
  int v37 = 9;
  std::string::basic_string[abi:nn180100]<0>(v38, *((char **)this + 300));
  int v39 = 10;
  std::string::basic_string[abi:nn180100]<0>(v40, *((char **)this + 301));
  int v41 = 11;
  std::string::basic_string[abi:nn180100]<0>(v42, *((char **)this + 302));
  int v43 = 12;
  std::string::basic_string[abi:nn180100]<0>(v44, *((char **)this + 303));
  uint64_t v16 = 0;
  int v45 = 13;
  *((_OWORD *)this + 152) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *((_DWORD *)this + 616) = 1065353216;
  do
  {
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 2432, (uint64_t)&v18[v16], (uint64_t)&v18[v16]);
    v16 += 4;
  }
  while (v16 != 56);
  uint64_t v17 = 56;
  do
  {
    if (*((char *)&v18[v17 - 1] - 1) < 0) {
      operator delete((void *)v18[v17 - 4]);
    }
    v17 -= 4;
  }
  while (v17 * 8);
  *((void *)this + 309) = 0;
  *((unsigned char *)this + 2480) = 0;
  *((void *)this + 311) = 1024;
  *((void *)this + 312) = 8;
  *((void *)this + 317) = 0;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *(_OWORD *)((char *)this + 2520) = 0u;
  *((void *)this + 318) = 1;
  *((_WORD *)this + 1276) = 256;
  *((void *)this + 321) = 0;
  *((void *)this + 320) = 0;
  *((unsigned char *)this + 2576) = 0;
  *((void *)this + 323) = 1024;
  *((void *)this + 324) = 8;
  *((void *)this + 329) = 0;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *(_OWORD *)((char *)this + 2616) = 0u;
  *((void *)this + 330) = 1;
  *((_WORD *)this + 1324) = 256;
  *((void *)this + 333) = 0;
  *((void *)this + 332) = 0;
  *((unsigned char *)this + 2672) = 0;
  *((void *)this + 335) = 1024;
  *((void *)this + 336) = 8;
  *(_OWORD *)((char *)this + 2696) = 0u;
  *(_OWORD *)((char *)this + 2712) = 0u;
  *((void *)this + 341) = 0;
  *((void *)this + 342) = 1;
  *((_WORD *)this + 1372) = 256;
  *((void *)this + 344) = 0;
  *((unsigned char *)this + 2760) = 0;
  *((void *)this + 346) = llvm::IntegerType::get();
  *((void *)this + 347) = (char *)this + 2792;
  *((void *)this + 348) = 0x800000000;
  *((void *)this + 357) = (char *)this + 2872;
  *((void *)this + 358) = 0x800000000;
  *((void *)this + 367) = (char *)this + 2952;
  *((void *)this + 368) = 0x1000000000;
  *((void *)this + 385) = (char *)this + 3096;
  *((void *)this + 386) = 0x1000000000;
  *(_OWORD *)((char *)this + 3224) = 0u;
  *(_OWORD *)((char *)this + 3240) = 0u;
  *(_OWORD *)((char *)this + 3256) = 0u;
  *((_DWORD *)this + 818) = atomic_fetch_add(AGCLLVMObject::next_debug_id, 1u);
  *(_OWORD *)((char *)this + 3276) = 0u;
  *(_OWORD *)((char *)this + 3292) = 0u;
  *((_DWORD *)this + 827) = 16;
  *((void *)this + 47) = (char *)this + 2776;
  *((void *)this + 48) = (char *)this + 2856;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (uint64_t *)a2;
  }
  else {
    uint64_t v8 = *(uint64_t **)a2;
  }
  if (v7 >= 0) {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v9 = *(void *)(a2 + 8);
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v8, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v3 = v10;
      if (v10 >= v12) {
        unint64_t v3 = v10 % v12;
      }
    }
    else
    {
      unint64_t v3 = (v12 - 1) & v10;
    }
    unint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v18 = (char *)operator new(0x30uLL);
  *((void *)v18 + 1) = v11;
  int v19 = (std::string *)(v18 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v18 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v18 + 10) = *(_DWORD *)(a3 + 24);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    BOOL v22 = 1;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(a1, v25);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v3 = v11 % v12;
      }
      else {
        unint64_t v3 = v11;
      }
    }
    else
    {
      unint64_t v3 = (v12 - 1) & v11;
    }
  }
  uint64_t v26 = *(void *)a1;
  int v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    *(void *)uint64_t v18 = *v27;
LABEL_47:
    *int v27 = v18;
    goto LABEL_48;
  }
  uint64_t v28 = *(void *)(a1 + 16);
  *(void *)uint64_t v18 = v28;
  *(void *)(a1 + 16) = v18;
  *(void *)(v26 + 8 * v3) = a1 + 16;
  if (v28)
  {
    unint64_t v29 = *(void *)(v28 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12) {
        v29 %= v12;
      }
    }
    else
    {
      v29 &= v12 - 1;
    }
    int v27 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t *a1, unint64_t a2)
{
  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      uint64_t v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      uint64_t v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      uint64_t v8 = a1[2];
      uint64_t v7 = a1[3];
      uint64_t v9 = __ROR8__(v6 + v7, 52);
      uint64_t v10 = v6 + a1[1];
      uint64_t v11 = __ROR8__(v10, 7);
      uint64_t v12 = v10 + v8;
      uint64_t v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      uint64_t v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      uint64_t v15 = __ROR8__(v14 + v13, 52);
      uint64_t v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      uint64_t v17 = __ROR8__(v13, 37);
      uint64_t v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      uint64_t v19 = __ROR8__(v18, 7);
      uint64_t v20 = v16 + __ROR8__(v12, 31);
      uint64_t v21 = v18 + v5;
      uint64_t v22 = v21 + v14;
      unint64_t v23 = 0x9AE16A3B2F90404FLL;
      unint64_t v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      unint64_t v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    unint64_t v4 = 0x9DDFEA08EB382D69;
    uint64_t v32 = *(uint64_t *)((char *)a1 + a2 - 48);
    uint64_t v33 = *(uint64_t *)((char *)a1 + a2 - 40);
    uint64_t v34 = *(uint64_t *)((char *)a1 + a2 - 24);
    uint64_t v36 = *(uint64_t *)((char *)a1 + a2 - 64);
    uint64_t v35 = *(uint64_t *)((char *)a1 + a2 - 56);
    uint64_t v37 = *(uint64_t *)((char *)a1 + a2 - 16);
    uint64_t v38 = *(uint64_t *)((char *)a1 + a2 - 8);
    unint64_t v39 = v35 + v37;
    unint64_t v40 = 0x9DDFEA08EB382D69
        * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))));
    unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
    unint64_t v42 = v36 + a2 + v35 + v32;
    uint64_t v43 = v42 + v33;
    unint64_t v44 = __ROR8__(v42, 44) + v36 + a2 + __ROR8__(v33 + v36 + a2 - 0x622015F714C7D297 * (v40 ^ (v40 >> 47)), 21);
    uint64_t v45 = v35 + v37 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    uint64_t v46 = v45 + v34 + v37;
    uint64_t v47 = __ROR8__(v46, 44);
    uint64_t v48 = v46 + v38;
    uint64_t v49 = v47 + v45 + __ROR8__(v45 + v33 + v38, 21);
    uint64_t v51 = *a1;
    unint64_t v50 = a1 + 4;
    unint64_t v52 = v51 - 0x4B6D499041670D8DLL * v33;
    uint64_t v53 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      uint64_t v54 = *(v50 - 3);
      uint64_t v55 = v52 + v43 + v39 + v54;
      uint64_t v56 = v50[2];
      uint64_t v57 = v50[3];
      uint64_t v58 = v50[1];
      unint64_t v39 = v58 + v43 - 0x4B6D499041670D8DLL * __ROR8__(v39 + v44 + v56, 42);
      uint64_t v59 = v41 + v48;
      uint64_t v60 = *(v50 - 2);
      uint64_t v61 = *(v50 - 1);
      uint64_t v62 = *(v50 - 4) - 0x4B6D499041670D8DLL * v44;
      uint64_t v63 = v62 + v48 + v61;
      uint64_t v64 = v62 + v54 + v60;
      uint64_t v43 = v64 + v61;
      uint64_t v65 = __ROR8__(v64, 44) + v62;
      unint64_t v66 = (0xB492B66FBE98F273 * __ROR8__(v55, 37)) ^ v49;
      unint64_t v52 = 0xB492B66FBE98F273 * __ROR8__(v59, 33);
      unint64_t v44 = v65 + __ROR8__(v63 + v66, 21);
      unint64_t v67 = v52 + v49 + *v50;
      uint64_t v48 = v67 + v58 + v56 + v57;
      uint64_t v49 = __ROR8__(v67 + v58 + v56, 44) + v67 + __ROR8__(v39 + v60 + v67 + v57, 21);
      v50 += 8;
      unint64_t v41 = v66;
      v53 += 64;
    }
    while (v53);
    unint64_t v68 = v52
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47));
    unint64_t v69 = 0x9DDFEA08EB382D69
        * (v68 ^ (v66
                - 0x4B6D499041670D8DLL * (v39 ^ (v39 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) ^ ((0x9DDFEA08EB382D69 * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) >> 47))));
    unint64_t v70 = 0x9DDFEA08EB382D69 * (v68 ^ (v69 >> 47) ^ v69);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    uint64_t v26 = a1[1];
    unint64_t v27 = 0xB492B66FBE98F273 * *a1;
    uint64_t v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    unint64_t v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    unint64_t v23 = 0x9DDFEA08EB382D69;
    unint64_t v30 = 0x9DDFEA08EB382D69 * (v29 ^ (v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)));
    unint64_t v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    unint64_t v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 < 9)
  {
    if (a2 >= 4)
    {
      uint64_t v72 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v23 = 0x9DDFEA08EB382D69;
      unint64_t v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
      unint64_t v31 = v72 ^ (v73 >> 47) ^ v73;
      goto LABEL_8;
    }
    unint64_t v4 = 0x9AE16A3B2F90404FLL;
    if (!a2) {
      return v4;
    }
    unint64_t v70 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v4 *= v70 ^ (v70 >> 47);
    return v4;
  }
  uint64_t v2 = *(uint64_t *)((char *)a1 + a2 - 8);
  uint64_t v3 = __ROR8__(v2 + a2, a2);
  return (0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      uint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    uint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          *uint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          uint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        uint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void AGCLLVMG16PB0TargetConfig::createTargetLowerer(AGCLLVMG16PB0TargetConfig *this, llvm::LLVMContext *a2)
{
}

void AGCLLVMG16TargetLowerer::AGCLLVMG16TargetLowerer(AGCLLVMG16TargetLowerer *this, llvm::LLVMContext *a2, const char **a3)
{
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::AGCLLVMGen6TargetLowerer(AGCLLVMGen5TargetLowerer *a1, llvm::LLVMContext *a2, const char **a3)
{
}

void AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::~AGCBindPointLayoutT()
{
}

void AGCLLVMGen5TargetLowerer::AGCLLVMGen5TargetLowerer(AGCLLVMGen5TargetLowerer *this, llvm::LLVMContext *a2, const char **a3)
{
}

void AGCLLVMGen4TargetLowerer::AGCLLVMGen4TargetLowerer(AGCLLVMGen4TargetLowerer *this, llvm::LLVMContext *a2, const char **a3)
{
}

void AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::~AGCDylibBindPointLayoutT()
{
}

void AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::~AGCBindPointLayoutT()
{
}

uint64_t AGCLLVMUserObject::replaceBuiltins(AGCLLVMUserObject *this)
{
  uint64_t v1 = (AGCLLVMAirBuiltins *)(*(uint64_t (**)(void, AGCLLVMUserObject *, void))(**(void **)((char *)this + *(void *)(*(void *)this - 24) + 400)
                                                                                            + 816))(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400), this, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368));
  uint64_t v2 = AGCLLVMAirBuiltins::replaceBuiltins(v1);
  if (v1) {
    (*(void (**)(AGCLLVMAirBuiltins *))(*(void *)v1 + 16))(v1);
  }
  return v2;
}

uint64_t AGCLLVMGen5TargetLowerer::createBuiltins(AGCLLVMGen5TargetLowerer *this, AGCLLVMUserObject *a2, llvm::Module *a3)
{
  uint64_t result = 0;
  switch(*((_DWORD *)this + 456))
  {
    case 0xC:
      operator new();
    case 0xE:
    case 0x10:
    case 0x19:
    case 0x1A:
    case 0x1B:
      operator new();
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
      operator new();
    case 0x16:
      operator new();
    case 0x18:
    case 0x1F:
    case 0x20:
    case 0x22:
      operator new();
    default:
      return result;
  }
}

void AGCLLVMAirBuiltinsGen7::~AGCLLVMAirBuiltinsGen7(AGCLLVMAirBuiltinsGen7 *this)
{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(AGCLLVMAirBuiltins *this)
{
  *(void *)this = &unk_1F2598B00;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((AGCLLVMAirBuiltins *)((char *)this + 512));
  llvm::IRBuilderFolder::~IRBuilderFolder((AGCLLVMAirBuiltins *)((char *)this + 504));
  uint64_t v2 = (char *)*((void *)this + 48);
  if (v2 != (char *)this + 400) {
    free(v2);
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((AGCLLVMAirBuiltins *)((char *)this + 136));
  llvm::IRBuilderFolder::~IRBuilderFolder((AGCLLVMAirBuiltins *)((char *)this + 128));
  uint64_t v3 = (char *)*((void *)this + 1);
  if (v3 != (char *)this + 24) {
    free(v3);
  }
}

{
  uint64_t vars8;

  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMUserObject::replaceTrigIdentities(AGCLLVMUserObject *this)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v2 = (llvm::LLVMContext **)*((void *)v1 + 46);
  uint64_t v3 = *((void *)v1 + 50);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v68, *v2);
  uint64_t v74 = v3;
  int8x8_t v4 = &unk_1F25C4650;
  unint64_t v68 = &unk_1F25C4650;
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v75, *v2);
  uint64_t v80 = &v68;
  v79[25] = v2;
  uint64_t v75 = &unk_1F2599BF0;
  unint64_t v73 = v2;
  v70[20] = *(_DWORD *)(v3 + 104);
  {
    AGCLLVMAirTrigIdentities::initializeTrigReplacementMap(void)::trig_replacements = 0;
    *(void *)&dword_1EBD0E7C0 = 0;
    qword_1EBD0E7C8 = 0x2800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::~StringMap, &AGCLLVMAirTrigIdentities::initializeTrigReplacementMap(void)::trig_replacements, &dword_1CAC02000);
  }
  if (!dword_1EBD0E7C4)
  {
    uint64_t v5 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_sin", 8uLL);
    uint64_t v6 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v5 + 8), "fast_asin", 9uLL);
    *(void *)(v6 + 8) = AGCLLVMAirTrigIdentities::buildNopIdentity;
    *(void *)(v6 + 16) = 0;
    uint64_t v7 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_sin", 8uLL);
    uint64_t v8 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v7 + 8), "fast_acos", 9uLL);
    *(void *)(v8 + 8) = AGCLLVMAirTrigIdentities::buildPythagoreanIdentity;
    *(void *)(v8 + 16) = 0;
    size_t v9 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_sin", 8uLL);
    uint64_t v10 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v9 + 8), "fast_atan", 9uLL);
    *(void *)(v10 + 8) = AGCLLVMAirTrigIdentities::buildSinArctan;
    *(void *)(v10 + 16) = 0;
    unint64_t v11 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_cos", 8uLL);
    uint64_t v12 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v11 + 8), "fast_asin", 9uLL);
    *(void *)(v12 + 8) = AGCLLVMAirTrigIdentities::buildPythagoreanIdentity;
    *(void *)(v12 + 16) = 0;
    uint64_t v13 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_cos", 8uLL);
    uint64_t v14 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v13 + 8), "fast_acos", 9uLL);
    *(void *)(v14 + 8) = AGCLLVMAirTrigIdentities::buildNopIdentity;
    *(void *)(v14 + 16) = 0;
    size_t v15 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_cos", 8uLL);
    uint64_t v16 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v15 + 8), "fast_atan", 9uLL);
    *(void *)(v16 + 8) = AGCLLVMAirTrigIdentities::buildCosArctan;
    *(void *)(v16 + 16) = 0;
    uint64_t v17 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_tan", 8uLL);
    uint64_t v18 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v17 + 8), "fast_asin", 9uLL);
    *(void *)(v18 + 8) = AGCLLVMAirTrigIdentities::buildTanArcsin;
    *(void *)(v18 + 16) = 0;
    uint64_t v19 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_tan", 8uLL);
    int8x8_t v4 = &unk_1F25C4650;
    uint64_t v20 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v19 + 8), "fast_acos", 9uLL);
    *(void *)(v20 + 8) = AGCLLVMAirTrigIdentities::buildTanArccos;
    *(void *)(v20 + 16) = 0;
    uint64_t v21 = llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>("fast_tan", 8uLL);
    uint64_t v22 = *llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(*v21 + 8), "fast_atan", 9uLL);
    *(void *)(v22 + 8) = AGCLLVMAirTrigIdentities::buildNopIdentity;
    *(void *)(v22 + 16) = 0;
  }
  unint64_t v23 = v73 + 3;
  unint64_t v24 = v73[4];
  if (v24 != (llvm::LLVMContext *)(v73 + 3))
  {
    do
    {
      if (v24) {
        unint64_t v25 = (llvm::LLVMContext *)((char *)v24 - 56);
      }
      else {
        unint64_t v25 = 0;
      }
      unint64_t v24 = (llvm::LLVMContext *)*((void *)v24 + 1);
      uint64_t Name = (char *)llvm::Value::getName(v25);
      unint64_t v66 = 0;
      size_t v67 = 0;
      v65[0] = 0;
      v65[1] = 0;
      if (AGCLLVMBuilder::findPrefix(Name, v27, &v66, v65, "air.", 4uLL))
      {
        uint64_t v28 = v66;
        size_t v29 = v67;
        int Key = llvm::StringMapImpl::FindKey();
        uint64_t v31 = Key == -1 ? dword_1EBD0E7C0 : Key;
        if (v31 != dword_1EBD0E7C0)
        {
          uint64_t v32 = *((void *)v25 + 1);
          if (v32)
          {
            uint64_t v57 = AGCLLVMAirTrigIdentities::initializeTrigReplacementMap(void)::trig_replacements;
            do
            {
              while (1)
              {
                uint64_t v33 = *(llvm::Instruction **)(v32 + 24);
                uint64_t v32 = *(void *)(v32 + 8);
                if (((llvm::CallBase::arg_end(v33) - ((void)v33 - 32 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x20)
                {
                  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v69, v33);
                  uint64_t v34 = *((void *)v33 - 4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF));
                  if (v34)
                  {
                    if (*(unsigned char *)(v34 + 16) == 84
                      && ((llvm::CallBase::arg_end((llvm::CallBase *)v34)
                         - (v34
                          + 32 * -(*(_DWORD *)(v34 + 20) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x20)
                    {
                      uint64_t v35 = *(void *)(v34 - 32);
                      if (v35)
                      {
                        if (!*(unsigned char *)(v35 + 16) && *(void *)(v35 + 24) == *(void *)(v34 + 72))
                        {
                          uint64_t v36 = (char *)llvm::Value::getName((llvm::Value *)v35);
                          uint64_t v63 = 0;
                          size_t v64 = 0;
                          if (AGCLLVMBuilder::findPrefix(v36, v37, &v63, &v62, "air.", 4uLL))
                          {
                            uint64_t v56 = v4;
                            uint64_t v38 = *(void *)(v57 + 8 * v31);
                            size_t __len = v64;
                            uint64_t __src = v63;
                            unsigned int v39 = llvm::StringMapImpl::FindKey();
                            uint64_t v46 = v39 == -1 ? *(unsigned int *)(v38 + 16) : (int)v39;
                            uint64_t v47 = *(void *)(v38 + 8) + 8 * v46;
                            int8x8_t v4 = v56;
                            if (v47 != *(void *)(*(void *)(v57 + 8 * v31) + 8)
                                      + 8 * *(unsigned int *)(*(void *)(v57 + 8 * v31) + 16))
                            {
                              uint64_t v53 = v47;
                              if (v28)
                              {
                                std::string::basic_string[abi:nn180100](__dst, v28, v29);
                                LOBYTE(v48) = __dst[0];
                                if (v61 >= 0) {
                                  uint64_t v48 = __dst;
                                }
                              }
                              else
                              {
                                __dst[0] = 0;
                                __dst[1] = 0;
                                uint64_t v48 = __dst;
                                uint64_t v61 = 0;
                              }
                              if (__src)
                              {
                                char v49 = (char)v48;
                                std::string::basic_string[abi:nn180100](__p, __src, __len);
                                LOBYTE(v48) = v49;
                              }
                              else
                              {
                                __p[0] = 0;
                                __p[1] = 0;
                                uint64_t v59 = 0;
                              }
                              printMessage((char **)&AGCPrinter, "Simplify Identity: %s(%s)", v40, v41, v42, v43, v44, v45, (char)v48);
                              if (SHIBYTE(v59) < 0) {
                                operator delete(__p[0]);
                              }
                              int8x8_t v4 = v56;
                              if (SHIBYTE(v61) < 0) {
                                operator delete(__dst[0]);
                              }
                              unint64_t v50 = *(void (**)(void *, void))(*(void *)v53 + 8);
                              uint64_t v51 = *(void *)(*(void *)v53 + 16);
                              unint64_t v52 = (void **)((char *)v80 + (v51 >> 1));
                              if (v51) {
                                unint64_t v50 = *(void (**)(void *, void))(*v52 + v50);
                              }
                              v50(v52, *(void *)(v34 - 32 * (*(_DWORD *)(v34 + 20) & 0x7FFFFFF)));
                              llvm::Value::replaceAllUsesWith();
                              llvm::Instruction::eraseFromParent(v33);
                              if (!llvm::Value::getNumUses((llvm::Value *)v34)) {
                                break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (!v32) {
                  goto LABEL_45;
                }
              }
              llvm::Instruction::eraseFromParent((llvm::Instruction *)v34);
            }
            while (v32);
          }
        }
      }
LABEL_45:
      ;
    }
    while (v24 != (llvm::LLVMContext *)v23);
  }
  unint64_t v68 = v4;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v79);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v78);
  if (v76 != &v77) {
    free(v76);
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v72);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v71);
  if (v69 != v70) {
    free(v69);
  }
}

void AGCLLVMAirBuiltins::AGCLLVMAirBuiltins(AGCLLVMAirBuiltins *this, AGCLLVMUserObject *a2, llvm::LLVMContext **a3, AGCLLVMTargetLowerer *a4)
{
  AGCLLVMBuilder::AGCLLVMBuilder(this, *a3);
  v8[46] = a4;
  void *v8 = &unk_1F2598B00;
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)(v8 + 47), *a3);
  *((void *)this + 47) = &unk_1F2599BD8;
  *((void *)this + 93) = this;
  *((void *)this + 89) = a3;
  *((void *)this + 94) = a2;
  uint64_t v9 = *(void *)(*((void *)a4 + 102) + 56);
  if (!v9) {
    operator new();
  }
  *((void *)this + 95) = v9;
  *((unsigned char *)this + 768) = 1;
  *((void *)this + 42) = a3;
  *((_DWORD *)this + 26) = *((_DWORD *)a4 + 26);
}

void AGCLLVMBuilder::AGCLLVMBuilder(AGCLLVMBuilder *this, llvm::LLVMContext *a2)
{
  *((void *)this + 1) = (char *)this + 24;
  *((void *)this + 2) = 0x200000000;
  *((void *)this + 9) = a2;
  *((void *)this + 10) = (char *)this + 128;
  *((void *)this + 11) = (char *)this + 136;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_WORD *)this + 54) = 512;
  *((unsigned char *)this + 110) = 7;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  uint64_t v4 = MEMORY[0x1E4FB9FF0] + 16;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = v4;
  *((void *)this + 17) = MEMORY[0x1E4FBA020] + 16;
  *(void *)this = &unk_1F25C6420;
  *((void *)this + 18) = llvm::Type::getVoidTy(a2, a2);
  *((void *)this + 19) = llvm::Type::getHalfTy(*((llvm::Type **)this + 9), v5);
  *((void *)this + 20) = llvm::Type::getBFloatTy(*((llvm::Type **)this + 9), v6);
  *((void *)this + 21) = llvm::Type::getFloatTy(*((llvm::Type **)this + 9), v7);
  *((void *)this + 22) = llvm::Type::getInt1Ty(*((llvm::Type **)this + 9), v8);
  *((void *)this + 23) = llvm::Type::getInt8Ty(*((llvm::Type **)this + 9), v9);
  *((void *)this + 24) = llvm::Type::getInt16Ty(*((llvm::Type **)this + 9), v10);
  *((void *)this + 25) = llvm::Type::getInt32Ty(*((llvm::Type **)this + 9), v11);
  *((void *)this + 26) = llvm::Type::getInt64Ty(*((llvm::Type **)this + 9), v12);
  *((void *)this + 27) = llvm::FixedVectorType::get();
  *((void *)this + 28) = llvm::FixedVectorType::get();
  *((void *)this + 29) = llvm::FixedVectorType::get();
  *((void *)this + 30) = llvm::FixedVectorType::get();
  *((void *)this + 31) = llvm::FixedVectorType::get();
  *((void *)this + 32) = llvm::FixedVectorType::get();
  *((void *)this + 33) = llvm::FixedVectorType::get();
  *((void *)this + 34) = llvm::FixedVectorType::get();
  *((void *)this + 35) = llvm::FixedVectorType::get();
  *((void *)this + 36) = llvm::FixedVectorType::get();
  *((void *)this + 37) = llvm::FixedVectorType::get();
  *((void *)this + 38) = llvm::FixedVectorType::get();
  *((void *)this + 39) = llvm::FixedVectorType::get();
  *((void *)this + 40) = llvm::FixedVectorType::get();
  uint64_t v13 = llvm::IntegerType::get();
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 41) = v13;
  *((void *)this + 45) = a2;
}

uint64_t AGCLLVMUserObject::replaceIndirectResources(AGCLLVMUserObject *this)
{
  v76[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v2 = v1 + 24;
  uint64_t v3 = *(void *)(v1 + 32);
  if (v3 == v1 + 24) {
    return 1;
  }
  uint64_t v70 = v1 + 24;
  do
  {
    if (v3) {
      uint64_t v5 = (llvm::Value *)(v3 - 56);
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v3 = *(void *)(v3 + 8);
    uint64_t Name = (char *)llvm::Value::getName(v5);
    __s1 = 0;
    unint64_t v73 = 0;
    v71[0] = 0;
    v71[1] = 0;
    if (!AGCLLVMBuilder::findPrefix(Name, v7, (char **)&__s1, v71, "air.", 4uLL)) {
      continue;
    }
    unint64_t v8 = v73;
    if (v73 < 0x17) {
      goto LABEL_36;
    }
    uint64_t v9 = __s1;
    uint64_t v10 = (char *)__s1 + v73;
    if (*(void *)((char *)__s1 + v73 - 23) == 0x656C62697369765FLL
      && *(void *)((char *)__s1 + v73 - 15) == 0x6F6974636E75665FLL
      && *(void *)((char *)__s1 + v73 - 8) == 0x656C6261745F6E6FLL)
    {
      if (v73 == 31
        && (*(void *)__s1 == 0x6C6C756E5F746567 ? (BOOL v13 = *((void *)__s1 + 1) == 0x656C62697369765FLL) : (BOOL v13 = 0),
            v13 ? (BOOL v14 = *((void *)__s1 + 2) == 0x6F6974636E75665FLL) : (BOOL v14 = 0),
            v14 ? (BOOL v15 = *(void *)((char *)__s1 + 23) == 0x656C6261745F6E6FLL) : (BOOL v15 = 0),
            v15))
      {
        uint64_t v62 = *((void *)v5 + 1);
        if (!v62)
        {
          BOOL v68 = *(void *)(v10 - 28) == 0x65737265746E695FLL
             && *(void *)(v10 - 20) == 0x75665F6E6F697463
             && *(void *)(v10 - 12) == 0x745F6E6F6974636ELL
             && *((_DWORD *)v10 - 1) == 1701601889;
          uint64_t v2 = v70;
          if (!v68) {
            goto LABEL_49;
          }
          goto LABEL_112;
        }
        do
        {
          uint64_t v63 = *(void *)(v62 + 8);
          size_t v64 = *(llvm::Instruction **)(v62 + 24);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v64);
          llvm::ConstantInt::get();
          llvm::ConstantExpr::getIntToPtr();
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v64);
          uint64_t v62 = v63;
        }
        while (v63);
      }
      else
      {
        for (uint64_t i = *((void *)v5 + 1); i; uint64_t i = *(void *)(i + 8))
        {
          AGCLLVMUserObject::getCallOfCastedFunction((AGCLLVMUserObject *)&v74, *(llvm::Value **)(i + 24));
          uint64_t v17 = (llvm::Instruction **)v74;
          if (v75)
          {
            uint64_t v18 = 8 * v75;
            do
            {
              uint64_t v19 = *v17++;
              VisibleFunctionTableHeapGlobal = AGCLLVMUserObject::createVisibleFunctionTableHeapGlobal(this);
              AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v19, 0, VisibleFunctionTableHeapGlobal, v21);
              v18 -= 8;
            }
            while (v18);
            uint64_t v17 = (llvm::Instruction **)v74;
          }
          if (v17 != v76) {
            free(v17);
          }
        }
      }
    }
    uint64_t v2 = v70;
    if (v8 >= 0x1C)
    {
      if (*(void *)(v10 - 28) != 0x65737265746E695FLL
        || *(void *)(v10 - 20) != 0x75665F6E6F697463
        || *(void *)(v10 - 12) != 0x745F6E6F6974636ELL
        || *((_DWORD *)v10 - 1) != 1701601889)
      {
        goto LABEL_49;
      }
      if (v8 == 36 && !memcmp(v9, "get_null_intersection_function_table", 0x24uLL))
      {
        if (*(void *)((char *)v9 + 21) == 0x5F7265646E65725FLL
          && *(void *)((char *)v9 + 28) == 0x646E616D6D6F635FLL)
        {
          unint64_t v27 = 36;
          goto LABEL_66;
        }
        unint64_t v25 = (char *)v9 + 36;
        unint64_t v27 = 36;
LABEL_57:
        uint64_t v29 = *((void *)v25 - 2);
        uint64_t v28 = *((void *)v25 - 1);
        if (v29 == 0x657475706D6F635FLL && v28 == 0x646E616D6D6F635FLL) {
          goto LABEL_66;
        }
        goto LABEL_61;
      }
LABEL_112:
      uint64_t v57 = *((void *)v5 + 1);
      if (!v57) {
        goto LABEL_49;
      }
      do
      {
        uint64_t v58 = *(void *)(v57 + 8);
        uint64_t v59 = *(llvm::Instruction **)(v57 + 24);
        IntersectionFunctionTableHeapGlobal = AGCLLVMUserObject::createIntersectionFunctionTableHeapGlobal(this);
        AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v59, 0, IntersectionFunctionTableHeapGlobal, v61);
        uint64_t v57 = v58;
      }
      while (v58);
    }
LABEL_36:
    if (v8 <= 0xE)
    {
      uint64_t v9 = __s1;
      goto LABEL_98;
    }
    uint64_t v9 = __s1;
LABEL_49:
    unint64_t v25 = (char *)v9 + v8;
    if (*(void *)((char *)v9 + v8 - 15) == 0x5F7265646E65725FLL
      && *(void *)((char *)v9 + v8 - 8) == 0x646E616D6D6F635FLL)
    {
      unint64_t v27 = v8;
      goto LABEL_66;
    }
    if (v8 >= 0x10)
    {
      unint64_t v27 = v8;
      goto LABEL_57;
    }
    unint64_t v27 = 15;
LABEL_61:
    if (*(void *)((char *)v9 + v27 - 15) != 0x646E616D6D6F635FLL
      || *(void *)((char *)v9 + v27 - 8) != 0x7265666675625F64)
    {
      goto LABEL_89;
    }
LABEL_66:
    uint64_t v32 = *((void *)v5 + 1);
    if (!v32) {
      goto LABEL_89;
    }
    do
    {
      while (1)
      {
        uint64_t v33 = *(llvm::Instruction **)(v32 + 24);
        uint64_t v32 = *(void *)(v32 + 8);
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v33);
        IndirectCommandBufferHeapGlobal = (llvm::Type *)AGCLLVMUserObject::createIndirectCommandBufferHeapGlobal(this);
        AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v33, 0, IndirectCommandBufferHeapGlobal, v35);
        if (v8 == 19) {
          break;
        }
        if (v8 == 20)
        {
          BOOL v36 = *v9 == 0x6D6F635F79706F63 && v9[1] == 0x6D6F635F65747570;
          if (v36 && *((_DWORD *)v9 + 4) == 1684955501) {
            goto LABEL_87;
          }
        }
LABEL_85:
        if (!v32) {
          goto LABEL_88;
        }
      }
      if (*v9 != 0x6E65725F79706F63
        || v9[1] != 0x6D6D6F635F726564
        || *(void *)((char *)v9 + 11) != 0x646E616D6D6F635FLL)
      {
        goto LABEL_85;
      }
LABEL_87:
      uint64_t v40 = (llvm::Type *)AGCLLVMUserObject::createIndirectCommandBufferHeapGlobal(this);
      AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v33, 2u, v40, v41);
    }
    while (v32);
LABEL_88:
    unint64_t v27 = v8;
LABEL_89:
    if (v27 >= 0x13
      && (*v9 == 0x657069705F746573 ? (BOOL v42 = v9[1] == 0x6174735F656E696CLL) : (BOOL v42 = 0),
          v42 ? (BOOL v43 = *(void *)((char *)v9 + 11) == 0x5F65746174735F65) : (BOOL v43 = 0),
          v43 && (uint64_t v52 = *((void *)v5 + 1)) != 0))
    {
      do
      {
        uint64_t v53 = *(void *)(v52 + 8);
        uint64_t v54 = *(llvm::Instruction **)(v52 + 24);
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v54);
        PipelineStateHeapGlobal = (llvm::Type *)AGCLLVMUserObject::createPipelineStateHeapGlobal(this);
        AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v54, 2u, PipelineStateHeapGlobal, v56);
        uint64_t v52 = v53;
      }
      while (v53);
    }
    else
    {
      unint64_t v8 = v27;
    }
LABEL_98:
    if (v8 == 43)
    {
      uint64_t v44 = v9;
      uint64_t v45 = "get_unique_identifier_render_pipeline_state";
      size_t v46 = 43;
LABEL_102:
      if (!memcmp(v44, v45, v46))
      {
        uint64_t v47 = *((void *)v5 + 1);
        if (v47)
        {
          do
          {
            uint64_t v48 = *(void *)(v47 + 8);
            char v49 = *(llvm::Instruction **)(v47 + 24);
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v49);
            unint64_t v50 = (llvm::Type *)AGCLLVMUserObject::createPipelineStateHeapGlobal(this);
            AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v49, 0, v50, v51);
            uint64_t v47 = v48;
          }
          while (v48);
        }
      }
    }
    else if (v8 == 44)
    {
      uint64_t v44 = v9;
      uint64_t v45 = "get_unique_identifier_compute_pipeline_state";
      size_t v46 = 44;
      goto LABEL_102;
    }
  }
  while (v3 != v2);
  return 1;
}

uint64_t AGCLLVMAirBuiltins::replaceBuiltins(AGCLLVMAirBuiltins *this)
{
  uint64_t v2 = *((void *)this + 42);
  uint64_t v3 = v2 + 24;
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4) {
        uint64_t v5 = (llvm::Value *)(v4 - 56);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t Name = (char *)llvm::Value::getName(v5);
      v15[0] = 0;
      v15[1] = 0;
      BOOL v13 = 0;
      uint64_t v14 = 0;
      if (AGCLLVMBuilder::findPrefix(Name, v7, v15, (const char **)&v13, "air.", 4uLL)
        && llvm::GlobalValue::isDeclaration(v5))
      {
        uint64_t v8 = *((void *)this + 95);
        int Key = llvm::StringMapImpl::FindKey();
        if (Key == -1) {
          uint64_t v10 = *(unsigned int *)(v8 + 8);
        }
        else {
          uint64_t v10 = Key;
        }
        unint64_t v11 = (void *)(*(void *)v8 + 8 * v10);
        if (v11 != (void *)(**((void **)this + 95) + 8 * *(unsigned int *)(*((void *)this + 95) + 8))) {
          AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::doReplacement((uint64_t)this + 376, v5, *v11 + 8, v13, v14);
        }
      }
    }
    while (v4 != v3);
  }
  return *((unsigned __int8 *)this + 768);
}

uint64_t AGCLLVMBuilder::findPrefix(char *__s1, size_t a2, char **a3, const char **a4, void *__s2, size_t __n)
{
  if (a2 < __n) {
    return 0;
  }
  if (__n && memcmp(__s1, __s2, __n)) {
    return 0;
  }
  if (a2 >= __n) {
    size_t v12 = __n;
  }
  else {
    size_t v12 = a2;
  }
  unint64_t v13 = a2 - v12;
  uint64_t v14 = &__s1[v12];
  if (a2 <= __n || (BOOL v15 = memchr(v14, 46, a2 - v12)) == 0 || (v16 = v15 - v14, v15 - v14 == -1))
  {
    uint64_t v20 = 0;
    *a3 = v14;
    a3[1] = (char *)v13;
    uint64_t v19 = "";
  }
  else
  {
    if (v13 >= v16) {
      unint64_t v17 = v15 - v14;
    }
    else {
      unint64_t v17 = v13;
    }
    *a3 = v14;
    a3[1] = (char *)v17;
    if (v13 >= v16 + 1) {
      unint64_t v18 = v16 + 1;
    }
    else {
      unint64_t v18 = v13;
    }
    uint64_t v19 = &v14[v18];
    uint64_t v20 = (const char *)(v13 - v18);
  }
  *a4 = v19;
  a4[1] = v20;
  return 1;
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::pointer begin = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  std::vector<unsigned int>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    uint64_t v19 = &begin[__sz];
    goto LABEL_15;
  }
  std::vector<unsigned int>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 4 * v6);
    uint64_t v19 = &end[v6];
LABEL_15:
    this->__end_ = v19;
    return;
  }
  if (__sz >> 62) {
    abort();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<unsigned int>::size_type v9 = v8 >> 1;
  if (v8 >> 1 <= __sz) {
    std::vector<unsigned int>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v10);
  std::vector<unsigned int>::pointer v12 = this->__begin_;
  std::vector<unsigned int>::pointer v13 = this->__end_;
  uint64_t v14 = &v11[4 * v5];
  unint64_t v16 = (unsigned int *)&v11[4 * v15];
  bzero(v14, 4 * v6);
  unint64_t v17 = (unsigned int *)&v14[4 * v6];
  while (v13 != v12)
  {
    int v18 = *--v13;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  this->__begin_ = (std::vector<unsigned int>::pointer)v14;
  this->__end_ = v17;
  this->__end_cap_.__value_ = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

uint64_t AGCLLVMObject::composeCompilerReply(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  *(void *)(a4 + 24) = *(void *)(a1 + 448);
  std::vector<unsigned int>::size_type v9 = (flatbuffers::FlatBufferBuilder *)(a1 + 2664);
  unint64_t v10 = *(char **)(a1 + 424);
  unint64_t v11 = *(unsigned char **)(a1 + 432);
  *(unsigned char *)(a1 + 2734) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(a1 + 2664), v11 - v10, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(v9, v11 - v10, 4uLL);
  uint64_t v12 = v11 - v10;
  if (v11 == v10) {
    std::vector<unsigned int>::pointer v13 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::PerformanceNumber>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::PerformanceNumber>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::PerformanceNumber>> const&)::t;
  }
  else {
    std::vector<unsigned int>::pointer v13 = v10;
  }
  if (v11 != v10)
  {
    uint64_t v14 = v12 >> 2;
    uint64_t v15 = v13 - 4;
    do
    {
      uint64_t v16 = v14 - 1;
      int v17 = *(_DWORD *)&v15[4 * v14];
      flatbuffers::FlatBufferBuilder::Align(v9, 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v9, *(_DWORD *)(a1 + 2696) - *(_DWORD *)(a1 + 2712) + *(_DWORD *)(a1 + 2704) - v17 + 4);
      uint64_t v14 = v16;
    }
    while (v16);
  }
  *(unsigned char *)(a1 + 2734) = 0;
  int v18 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v9, (unint64_t)v12 >> 2);
  v72[0] = 0;
  if (*(void *)(a1 + 496))
  {
    uint64_t v19 = a1 + 496;
    if (!*(void *)(a1 + 504)) {
      uint64_t v19 = a1 + 1056;
    }
  }
  else
  {
    uint64_t v19 = a1 + 1056;
  }
  int v20 = (*(uint64_t (**)(void, void, void, int *))(**(void **)(a1 + 400) + 512))(*(void *)(a1 + 400), *(void *)v19, *(unsigned int *)(v19 + 8), v72);
  *(unsigned char *)(a1 + 2734) = 1;
  int v21 = *(_DWORD *)(a1 + 2696) - *(_DWORD *)(a1 + 2712) + *(_DWORD *)(a1 + 2704);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v9, 4, v20);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v9, 6, v72[0]);
  int v22 = flatbuffers::FlatBufferBuilder::EndTable(v9, v21);
  *(unsigned char *)(a1 + 2734) = 1;
  int v23 = *(_DWORD *)(a1 + 2696) - *(_DWORD *)(a1 + 2712) + *(_DWORD *)(a1 + 2704);
  if (v18)
  {
    flatbuffers::FlatBufferBuilder::Align(v9, 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v9, 8, *(_DWORD *)(a1 + 2696) - *(_DWORD *)(a1 + 2712) + *(_DWORD *)(a1 + 2704) - v18 + 4);
  }
  if (v22)
  {
    flatbuffers::FlatBufferBuilder::Align(v9, 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v9, 6, *(_DWORD *)(a1 + 2696) - *(_DWORD *)(a1 + 2712) + *(_DWORD *)(a1 + 2704) - v22 + 4);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v9, 4, *(void *)(a1 + 416), 0);
  int v24 = flatbuffers::FlatBufferBuilder::EndTable(v9, v23);
  flatbuffers::FlatBufferBuilder::Finish(v9, v24, v25);
  uint64_t v26 = *(void *)(a1 + 464);
  uint64_t v27 = v26 + 304;
  if (*(char *)(v26 + 327) < 0) {
    uint64_t v27 = *(void *)(v26 + 304);
  }
  *(void *)(a1 + 1456) = v27;
  uint64_t v28 = *(unsigned __int8 *)(v26 + 327);
  uint64_t v29 = *(void *)(v26 + 312);
  if ((v28 & 0x80u) == 0) {
    uint64_t v29 = v28;
  }
  *(void *)(a1 + 1464) = v29;
  uint64_t v30 = *(void *)(a1 + 2520);
  *(void *)(a1 + 1496) = v30;
  *(void *)(a1 + 1504) = (*(_DWORD *)(a1 + 2504) - v30 + *(_DWORD *)(a1 + 2512));
  uint64_t v31 = *(void *)(a1 + 2616);
  uint64_t v32 = (*(_DWORD *)(a1 + 2600) - v31 + *(_DWORD *)(a1 + 2608));
  *(void *)(a1 + 1544) = v32;
  if (v32) {
    *(void *)(a1 + 1536) = v31;
  }
  uint64_t v33 = *(void *)(a1 + 2712);
  uint64_t v34 = (*(_DWORD *)(a1 + 2696) - v33 + *(_DWORD *)(a1 + 2704));
  *(void *)(a1 + 1584) = v34;
  if (v34) {
    *(void *)(a1 + 1576) = v33;
  }
  uint64_t v35 = 0;
  unsigned int v36 = (*(_DWORD *)(a1 + 480) + 7) & 0xFFFFFFF8;
  *(void *)uint64_t v72 = &unk_1F25CC928;
  unint64_t v73 = v72;
  unsigned int v37 = v36;
  do
  {
    uint64_t v69 = *(void *)(a1 + v35 + 896);
    if (v69)
    {
      std::function<void ()(_CompilerData const&,section_64 *&,unsigned int)>::operator()((uint64_t)v73, a1 + v35 + 1456, (uint64_t)&v69, v37);
      v37 += *(_DWORD *)(v69 + 40);
    }
    v35 += 40;
  }
  while (v35 != 160);
  std::__function::__value_func<void ()(_CompilerData const&,section_64 *&,unsigned int)>::~__value_func[abi:nn180100](v72);
  if (v37 == v36)
  {
    uint64_t v38 = *(void **)(a1 + 472);
    *a2 = (uint64_t)v38;
    uint64_t v39 = *(void *)(a1 + 480);
  }
  else
  {
    uint64_t v40 = *(void *)(a1 + 488);
    uint64_t v41 = *(void *)(v40 + 32) + v37 - v36;
    *(void *)(v40 + 32) = v41;
    *(void *)(v40 + 48) = v41;
    uint64_t v39 = v37;
    uint64_t v38 = malloc_type_calloc(1uLL, v37, 0x8D1C5FA6uLL);
    memcpy(v38, *(const void **)(a1 + 472), *(void *)(a1 + 480));
    uint64_t v42 = 0;
    v70[0] = &unk_1F25CC970;
    v70[1] = v38;
    uint64_t v71 = v70;
    do
    {
      uint64_t v69 = *(void *)(a1 + v42 + 896);
      if (v69)
      {
        std::function<void ()(_CompilerData const&,section_64 *&,unsigned int)>::operator()((uint64_t)v71, a1 + v42 + 1456, (uint64_t)&v69, v37);
        v37 += *(_DWORD *)(v69 + 40);
      }
      v42 += 40;
    }
    while (v42 != 160);
    std::__function::__value_func<void ()(_CompilerData const&,section_64 *&,unsigned int)>::~__value_func[abi:nn180100](v70);
    *a2 = (uint64_t)v38;
  }
  *a3 = v39;
  if (v38) {
    BOOL v43 = v39 == 0;
  }
  else {
    BOOL v43 = 1;
  }
  uint64_t v44 = !v43;
  if (v43) {
    return v44;
  }
  uint64_t v45 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (dumpShaderToFile(v45))
  {
    if (MGGetBoolAnswer())
    {
      Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DUMP_MACHO", v46);
      if (Value)
      {
        if (*Value != 48)
        {
          if (atoi(Value))
          {
            char v48 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
            printMessage((char **)&AGCPrinter, "------ Start dump mach-O for %s shader %u ------\n", v49, v50, v51, v52, v53, v54, v48);
            printHexDump((char **)&AGCPrinter, *a2, *a3, 0x20u, "", 0);
            char v55 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
            printMessage((char **)&AGCPrinter, "\n\n------ End dump mach-O for %s shader %u ------\n", v56, v57, v58, v59, v60, v61, v55);
          }
        }
      }
    }
  }
  if (!*(void *)(a5 + 24)) {
    return v44;
  }
  uint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v63 = *(void *)(a5 + 24);
  if (v63)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v63 + 48))(v63, v62);
    return v44;
  }
  uint64_t v65 = ((uint64_t (*)(void, uint64_t))std::__throw_bad_function_call[abi:nn180100])(0, v62);
  return std::function<void ()(_CompilerData const&,section_64 *&,unsigned int)>::operator()(v65, v66, v67, v68);
}

uint64_t std::function<void ()(_CompilerData const&,section_64 *&,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6 = a4;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 48))(a1, a2, a3, &v6);
  }
  uint64_t v5 = ((uint64_t (*)(void))std::__throw_bad_function_call[abi:nn180100])();
  return std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::operator()(v5);
}

void std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 48) = *a4;
  *(void *)(v4 + 40) = (*(void *)(a2 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
}

void *std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return memcpy((void *)(*(void *)(a1 + 8) + *(unsigned int *)(*(void *)a3 + 48)), *(const void **)a2, *(void *)(a2 + 8));
}

void *std::__function::__value_func<void ()(_CompilerData const&,section_64 *&,unsigned int)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AGCLLVMGen3TargetLowerer::countInstructions(AGCLLVMGen3TargetLowerer *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  *a4 = 0;
  return 0;
}

BOOL GenericVaryingAllocator::getVaryingSignature(uint64_t a1, flatbuffers::FlatBufferBuilder *a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v4 = *(unsigned int *)(a1 + 32);
  if (v4)
  {
    int v66 = *(_DWORD *)(a1 + 32);
    std::__introsort<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *,false>(*(void *)(a1 + 24), *(void *)(a1 + 24) + (v4 << 6), 126 - 2 * __clz(v4), 1);
    char v69 = 0;
    long long v70 = xmmword_1CADD6280;
    long long v71 = 0u;
    *(_OWORD *)uint64_t v72 = 0u;
    uint64_t v73 = 0;
    uint64_t v74 = 1;
    __int16 v75 = 256;
    uint64_t v76 = 0;
    int v8 = *(_DWORD *)(a1 + 32);
    *(void *)uint64_t v67 = a2;
    uint64_t v68 = 0;
    if (v8)
    {
      size_t v64 = a3;
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = *(void *)(a1 + 24) + (v9 << 6);
        uint64_t v16 = *(const char **)(v13 + 24);
        uint64_t v14 = v13 + 24;
        uint64_t v15 = v16;
        int v17 = *(char *)(v14 + 23);
        if (v17 >= 0) {
          int v18 = (const char *)v14;
        }
        else {
          int v18 = v15;
        }
        if (v17 >= 0) {
          unint64_t v19 = *(unsigned __int8 *)(v14 + 23);
        }
        else {
          unint64_t v19 = *(void *)(v14 + 8);
        }
        int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)&v68, v18, v19);
        int v21 = String;
        if (v11 >= v12)
        {
          uint64_t v22 = (v11 - v10) >> 2;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
LABEL_75:
          }
            abort();
          if ((v12 - v10) >> 1 > v23) {
            unint64_t v23 = (v12 - v10) >> 1;
          }
          if ((unint64_t)(v12 - v10) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24)
          {
            if (v24 >> 62) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v25 = (char *)operator new(4 * v24);
          }
          else
          {
            unint64_t v25 = 0;
          }
          uint64_t v26 = &v25[4 * v22];
          *(_DWORD *)uint64_t v26 = v21;
          uint64_t v27 = v26 + 4;
          while (v11 != v10)
          {
            int v28 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v26 - 1) = v28;
            v26 -= 4;
          }
          uint64_t v12 = &v25[4 * v24];
          if (v10) {
            operator delete(v10);
          }
          unint64_t v10 = v26;
          unint64_t v11 = v27;
        }
        else
        {
          *(_DWORD *)unint64_t v11 = String;
          v11 += 4;
        }
        ++v9;
        unint64_t v29 = *(unsigned int *)(a1 + 32);
      }
      while (v9 < v29);
      if (v29)
      {
        BYTE6(v73) = 1;
        flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)&v68, v11 - v10, 4uLL);
        flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)&v68, v11 - v10, 4uLL);
        uint64_t v30 = v11 - v10;
        if (v11 == v10) {
          uint64_t v31 = (char *)&flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
        }
        else {
          uint64_t v31 = v10;
        }
        if (v11 != v10)
        {
          uint64_t v32 = v30 >> 2;
          uint64_t v33 = v31 - 4;
          do
          {
            uint64_t v34 = v32 - 1;
            int v35 = *(_DWORD *)&v33[4 * v32];
            flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)&v68, 4uLL);
            flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)&v68, v71 - v72[0] + DWORD2(v71) - v35 + 4);
            uint64_t v32 = v34;
          }
          while (v34);
        }
        BYTE6(v73) = 0;
        int v36 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)&v68, (unint64_t)v30 >> 2);
        BYTE6(v73) = 1;
        __int16 v37 = v71 - LOWORD(v72[0]) + WORD4(v71);
        if (v36)
        {
          int v38 = v36;
          flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)&v68, 4uLL);
          flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(&v68, 4, v71 - v72[0] + DWORD2(v71) - v38 + 4);
        }
        int v39 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v68, v37);
        flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)&v68, v39, v40);
      }
      a2 = *(flatbuffers::FlatBufferBuilder **)v67;
      a3 = v64;
    }
    else
    {
      unint64_t v10 = 0;
    }
    *a3 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(a2, *(const unsigned __int8 **)v72, (v71 - v72[0] + DWORD2(v71)));
    if (v10) {
      operator delete(v10);
    }
    flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v68);
    uint64_t v68 = 0;
    char v69 = 0;
    long long v70 = xmmword_1CADD6280;
    long long v71 = 0u;
    *(_OWORD *)uint64_t v72 = 0u;
    uint64_t v73 = 0;
    uint64_t v74 = 1;
    __int16 v75 = 256;
    uint64_t v76 = 0;
    if (*(_DWORD *)(a1 + 32))
    {
      unint64_t v41 = 0;
      uint64_t v42 = 0;
      BOOL v43 = 0;
      unint64_t v44 = 0;
      do
      {
        uint64_t v45 = *(void *)(a1 + 24) + (v41 << 6);
        unsigned int v46 = *(_DWORD *)(v45 + 8) & 0xF | (16 * (*(unsigned char *)(v45 + 58) & 0xF)) | (unsigned __int16)(*(_DWORD *)(v45 + 12) << 8) | (*(_DWORD *)(v45 + 4) << 16) & 0x80FFFFFF | ((*(_DWORD *)v45 & 0x7F) << 24) | (*(unsigned __int8 *)(v45 + 57) << 31);
        if ((unint64_t)v43 >= v44)
        {
          uint64_t v47 = v43 - v42;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 62) {
            goto LABEL_75;
          }
          if ((uint64_t)(v44 - (void)v42) >> 1 > v48) {
            unint64_t v48 = (uint64_t)(v44 - (void)v42) >> 1;
          }
          if (v44 - (unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v48;
          }
          if (v49) {
            unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v49);
          }
          else {
            uint64_t v50 = 0;
          }
          uint64_t v51 = (unsigned int *)(v49 + 4 * v47);
          *uint64_t v51 = v46;
          uint64_t v52 = v51 + 1;
          while (v43 != v42)
          {
            unsigned int v53 = *--v43;
            *--uint64_t v51 = v53;
          }
          unint64_t v44 = v49 + 4 * v50;
          if (v42) {
            operator delete(v42);
          }
          uint64_t v42 = v51;
          BOOL v43 = v52;
        }
        else
        {
          *v43++ = v46;
        }
        ++v41;
        unint64_t v54 = *(unsigned int *)(a1 + 32);
      }
      while (v41 < v54);
      if (v54)
      {
        if (v43 == v42) {
          char v55 = (const unsigned __int8 *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
        }
        else {
          char v55 = (const unsigned __int8 *)v42;
        }
        int v56 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned int>((flatbuffers::FlatBufferBuilder *)&v68, v55, v43 - v42);
        BYTE6(v73) = 1;
        __int16 v57 = v71 - LOWORD(v72[0]) + WORD4(v71);
        flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)&v68, 4, v56);
        int v58 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v68, v57);
        flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)&v68, v58, v59);
        int v61 = DWORD2(v71);
        uint64_t v60 = *(const unsigned __int8 **)v72;
        int v62 = v71;
      }
      else
      {
        int v61 = 0;
        int v62 = 0;
        uint64_t v60 = 0;
      }
      a2 = *(flatbuffers::FlatBufferBuilder **)v67;
    }
    else
    {
      uint64_t v42 = 0;
      int v61 = 0;
      int v62 = 0;
      uint64_t v60 = 0;
    }
    *a4 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(a2, v60, (v62 - v60 + v61));
    if (v42) {
      operator delete(v42);
    }
    flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v68);
    LODWORD(v4) = v66;
  }
  return v4 != 0;
}

uint64_t flatbuffers::FlatBufferBuilder::Finish(flatbuffers::FlatBufferBuilder *this, int a2, const char *a3)
{
  *((void *)this + 7) = *((void *)this + 5);
  flatbuffers::FlatBufferBuilder::PreAlign(this, 4, *((void *)this + 9));
  flatbuffers::FlatBufferBuilder::Align(this, 4uLL);
  uint64_t result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10) - a2 + 4);
  *((unsigned char *)this + 71) = 1;
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<unsigned int>(flatbuffers::FlatBufferBuilder *a1, const unsigned __int8 *a2, uint64_t a3)
{
  int v3 = a3;
  *((unsigned char *)a1 + 70) = 1;
  uint64_t v6 = 4 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign(a1, 4 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(a1, v6, 4uLL);
  flatbuffers::vector_downward::push(a1, a2, v6);
  *((unsigned char *)a1 + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, v3);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateString(flatbuffers::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  return (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
}

void *flatbuffers::FlatBufferBuilder::PreAlign(flatbuffers::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  if (*((void *)this + 9) < a3) {
    *((void *)this + 9) = a3;
  }
  return flatbuffers::vector_downward::fill(this, (a3 - 1) & (-a2 - (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10))));
}

void *flatbuffers::vector_downward::push(void *this, const unsigned __int8 *__src, unint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = this;
    uint64_t v6 = this[6];
    if (v6 - this[7] < a3)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, a3);
      uint64_t v6 = v5[6];
    }
    v5[6] = v6 - a3;
    return memcpy((void *)(v6 - a3), __src, a3);
  }
  return this;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(flatbuffers::FlatBufferBuilder *a1, const unsigned __int8 *a2, unint64_t a3)
{
  *((unsigned char *)a1 + 70) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign(a1, a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(a1, a3, 1uLL);
  flatbuffers::vector_downward::push(a1, a2, a3);
  *((unsigned char *)a1 + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, a3);
}

void std::__introsort<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v332 = *MEMORY[0x1E4F143B8];
  int v8 = &v331;
  while (2)
  {
    unint64_t v9 = a2;
    v302 = (long long *)(a2 - 64);
    unint64_t v10 = (long long *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v10;
          uint64_t v11 = v9 - (void)v10;
          uint64_t v12 = (uint64_t)(v9 - (void)v10) >> 6;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                int v135 = *(char *)(a1 + 47);
                int v136 = *(char *)(a2 - 17);
                if (v136 >= 0) {
                  size_t v137 = *(unsigned __int8 *)(a2 - 17);
                }
                else {
                  size_t v137 = *(void *)(a2 - 32);
                }
                if (v136 >= 0) {
                  v138 = (const void *)(a2 - 40);
                }
                else {
                  v138 = *(const void **)(a2 - 40);
                }
                if (v135 >= 0) {
                  size_t v139 = *(unsigned __int8 *)(a1 + 47);
                }
                else {
                  size_t v139 = *(void *)(a1 + 32);
                }
                if (v135 >= 0) {
                  v140 = (const void *)(a1 + 24);
                }
                else {
                  v140 = *(const void **)(a1 + 24);
                }
                if (v139 >= v137) {
                  size_t v141 = v137;
                }
                else {
                  size_t v141 = v139;
                }
                int v142 = memcmp(v138, v140, v141);
                BOOL v143 = v137 < v139;
                if (v142) {
                  BOOL v143 = v142 < 0;
                }
                if (v143)
                {
                  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((long long *)a1, v302);
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a1 + 64, (uint64_t)v302);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a1 + 64, a1 + 128, (uint64_t)v302);
                break;
              case 5:
                std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *,0>(a1, a1 + 64, a1 + 128, a1 + 192, (uint64_t)v302);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1535)
          {
            if (a4)
            {
              if (a1 != v9)
              {
                unint64_t v144 = a1 + 64;
                if (a1 + 64 != a2)
                {
                  uint64_t v145 = 0;
                  unint64_t v146 = a1;
                  do
                  {
                    unint64_t v147 = v144;
                    v148 = (long long *)(v146 + 88);
                    int v149 = *(char *)(v146 + 47);
                    int v150 = *(char *)(v146 + 111);
                    if (v150 >= 0) {
                      size_t v151 = *(unsigned __int8 *)(v146 + 111);
                    }
                    else {
                      size_t v151 = *(void *)(v146 + 96);
                    }
                    if (v150 >= 0) {
                      v152 = (const void *)(v146 + 88);
                    }
                    else {
                      v152 = *(const void **)(v146 + 88);
                    }
                    if (v149 >= 0) {
                      size_t v153 = *(unsigned __int8 *)(v146 + 47);
                    }
                    else {
                      size_t v153 = *(void *)(v146 + 32);
                    }
                    if (v149 >= 0) {
                      v154 = (const void *)(v146 + 24);
                    }
                    else {
                      v154 = *(const void **)(v146 + 24);
                    }
                    if (v153 >= v151) {
                      size_t v155 = v151;
                    }
                    else {
                      size_t v155 = v153;
                    }
                    int v156 = memcmp(v152, v154, v155);
                    BOOL v157 = v151 < v153;
                    if (v156) {
                      BOOL v157 = v156 < 0;
                    }
                    if (v157)
                    {
                      int v325 = *(_DWORD *)(v147 + 16);
                      long long v318 = *(_OWORD *)v147;
                      v330 = *(const void **)(v146 + 104);
                      long long v329 = *v148;
                      *(void *)v148 = 0;
                      *(void *)(v146 + 96) = 0;
                      *(void *)(v146 + 104) = 0;
                      long long v331 = *(_OWORD *)(v146 + 112);
                      if (SHIBYTE(v330) >= 0) {
                        size_t v158 = HIBYTE(v330);
                      }
                      else {
                        size_t v158 = *((void *)&v329 + 1);
                      }
                      if (SHIBYTE(v330) >= 0) {
                        v159 = &v329;
                      }
                      else {
                        v159 = (long long *)v329;
                      }
                      uint64_t v160 = v145;
                      while (1)
                      {
                        uint64_t v161 = a1 + v160;
                        *(_OWORD *)(v161 + 64) = *(_OWORD *)(a1 + v160);
                        *(_DWORD *)(v161 + 80) = *(_DWORD *)(a1 + v160 + 16);
                        v162 = (void **)(a1 + v160 + 88);
                        if (*(char *)(a1 + v160 + 111) < 0) {
                          operator delete(*v162);
                        }
                        *(_OWORD *)v162 = *(_OWORD *)(v161 + 24);
                        *(void *)(a1 + v160 + 104) = *(void *)(v161 + 40);
                        *(unsigned char *)(v161 + 47) = 0;
                        *(unsigned char *)(v161 + 24) = 0;
                        *(_OWORD *)(v161 + 112) = *(_OWORD *)(v161 + 48);
                        if (!v160) {
                          break;
                        }
                        uint64_t v163 = a1 + v160;
                        int v164 = *(char *)(a1 + v160 - 17);
                        if (v164 >= 0) {
                          size_t v165 = *(unsigned __int8 *)(a1 + v160 - 17);
                        }
                        else {
                          size_t v165 = *(void *)(a1 + v160 - 32);
                        }
                        if (v164 >= 0) {
                          v166 = (const void *)(a1 + v160 - 40);
                        }
                        else {
                          v166 = *(const void **)(a1 + v160 - 40);
                        }
                        if (v165 >= v158) {
                          size_t v167 = v158;
                        }
                        else {
                          size_t v167 = v165;
                        }
                        int v168 = memcmp(v159, v166, v167);
                        BOOL v169 = v158 < v165;
                        if (v168) {
                          BOOL v169 = v168 < 0;
                        }
                        v160 -= 64;
                        if (!v169)
                        {
                          unint64_t v170 = v163 + 24;
                          v171 = (long long *)(v163 + 48);
                          uint64_t v172 = a1 + v160 + 64;
                          goto LABEL_293;
                        }
                      }
                      unint64_t v170 = a1 + 24;
                      v171 = (long long *)(a1 + 48);
                      uint64_t v172 = a1;
LABEL_293:
                      *(_DWORD *)(v172 + 16) = v325;
                      *(_OWORD *)uint64_t v172 = v318;
                      if (*(char *)(v172 + 47) < 0) {
                        operator delete(*(void **)v170);
                      }
                      long long v173 = v329;
                      *(void *)(v170 + 16) = v330;
                      *(_OWORD *)unint64_t v170 = v173;
                      long long *v171 = v331;
                    }
                    unint64_t v144 = v147 + 64;
                    v145 += 64;
                    unint64_t v146 = v147;
                  }
                  while (v147 + 64 != a2);
                }
              }
            }
            else if (a1 != v9)
            {
              unint64_t v276 = a1 + 64;
              if (a1 + 64 != a2)
              {
                unint64_t v277 = a1 - 40;
                do
                {
                  unint64_t v278 = v276;
                  v279 = (long long *)(a1 + 88);
                  int v280 = *(char *)(a1 + 47);
                  int v281 = *(char *)(a1 + 111);
                  if (v281 >= 0) {
                    size_t v282 = *(unsigned __int8 *)(a1 + 111);
                  }
                  else {
                    size_t v282 = *(void *)(a1 + 96);
                  }
                  if (v281 >= 0) {
                    v283 = (const void *)(a1 + 88);
                  }
                  else {
                    v283 = *(const void **)(a1 + 88);
                  }
                  if (v280 >= 0) {
                    size_t v284 = *(unsigned __int8 *)(a1 + 47);
                  }
                  else {
                    size_t v284 = *(void *)(a1 + 32);
                  }
                  if (v280 >= 0) {
                    v285 = (const void *)(a1 + 24);
                  }
                  else {
                    v285 = *(const void **)(a1 + 24);
                  }
                  if (v284 >= v282) {
                    size_t v286 = v282;
                  }
                  else {
                    size_t v286 = v284;
                  }
                  int v287 = memcmp(v283, v285, v286);
                  BOOL v288 = v282 < v284;
                  if (v287) {
                    BOOL v288 = v287 < 0;
                  }
                  if (v288)
                  {
                    int v328 = *(_DWORD *)(v278 + 16);
                    long long v321 = *(_OWORD *)v278;
                    v330 = *(const void **)(a1 + 104);
                    long long v329 = *v279;
                    *(void *)v279 = 0;
                    *(void *)(a1 + 96) = 0;
                    *(void *)(a1 + 104) = 0;
                    long long v331 = *(_OWORD *)(a1 + 112);
                    if (SHIBYTE(v330) >= 0) {
                      size_t v289 = HIBYTE(v330);
                    }
                    else {
                      size_t v289 = *((void *)&v329 + 1);
                    }
                    if (SHIBYTE(v330) >= 0) {
                      v290 = &v329;
                    }
                    else {
                      v290 = (long long *)v329;
                    }
                    v291 = (const void **)v277;
                    do
                    {
                      v292 = v291;
                      *(_OWORD *)(v291 + 13) = *(_OWORD *)(v291 + 5);
                      *((_DWORD *)v291 + 30) = *((_DWORD *)v291 + 14);
                      v293 = v291 + 16;
                      if (*((char *)v291 + 151) < 0) {
                        operator delete((void *)*v293);
                      }
                      *(_OWORD *)v293 = *((_OWORD *)v292 + 4);
                      v293[2] = v292[10];
                      *((unsigned char *)v292 + 87) = 0;
                      *((unsigned char *)v292 + 64) = 0;
                      *(_OWORD *)(v292 + 19) = *(_OWORD *)(v292 + 11);
                      int v294 = *((char *)v292 + 23);
                      if (v294 >= 0) {
                        size_t v295 = *((unsigned __int8 *)v292 + 23);
                      }
                      else {
                        size_t v295 = (size_t)v292[1];
                      }
                      if (v294 >= 0) {
                        v296 = v292;
                      }
                      else {
                        v296 = *v292;
                      }
                      if (v295 >= v289) {
                        size_t v297 = v289;
                      }
                      else {
                        size_t v297 = v295;
                      }
                      int v298 = memcmp(v290, v296, v297);
                      BOOL v299 = v298 < 0;
                      if (!v298) {
                        BOOL v299 = v289 < v295;
                      }
                      v291 = v292 - 8;
                    }
                    while (v299);
                    v300 = (void **)(v292 + 8);
                    *((_DWORD *)v292 + 14) = v328;
                    *(_OWORD *)(v292 + 5) = v321;
                    if (*((char *)v292 + 87) < 0) {
                      operator delete(*v300);
                    }
                    long long v301 = v329;
                    v292[10] = v330;
                    *(_OWORD *)v300 = v301;
                    *(_OWORD *)(v292 + 11) = v331;
                  }
                  unint64_t v276 = v278 + 64;
                  v277 += 64;
                  a1 = v278;
                }
                while (v278 + 64 != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if (a1 != v9)
            {
              int64_t v306 = (unint64_t)(v12 - 2) >> 1;
              int64_t v174 = v306;
              do
              {
                int64_t v175 = v174;
                if (v306 >= v174)
                {
                  uint64_t v176 = (2 * v174) | 1;
                  unint64_t v177 = a1 + (v176 << 6);
                  if (2 * v174 + 2 < v12)
                  {
                    int v178 = *(char *)(v177 + 111);
                    int v179 = *(char *)(v177 + 47);
                    unint64_t v180 = v179 >= 0 ? *(unsigned __int8 *)(v177 + 47) : *(void *)(v177 + 32);
                    v181 = v179 >= 0 ? (const void *)(v177 + 24) : *(const void **)(v177 + 24);
                    unint64_t v182 = v178 >= 0 ? *(unsigned __int8 *)(v177 + 111) : *(void *)(v177 + 96);
                    v183 = v178 >= 0 ? (const void *)(v177 + 88) : *(const void **)(v177 + 88);
                    size_t v184 = v182 >= v180 ? v180 : v182;
                    int v185 = memcmp(v181, v183, v184);
                    uint64_t v186 = v185 ? v185 < 0 : v180 < v182;
                    v177 += v186 << 6;
                    if (v186) {
                      uint64_t v176 = 2 * v175 + 2;
                    }
                  }
                  unint64_t v304 = a1 + (v175 << 6);
                  v187 = (long long *)(v304 + 24);
                  unint64_t v188 = v304;
                  int v189 = *(char *)(v304 + 47);
                  int v190 = *(char *)(v177 + 47);
                  if (v190 >= 0) {
                    size_t v191 = *(unsigned __int8 *)(v177 + 47);
                  }
                  else {
                    size_t v191 = *(void *)(v177 + 32);
                  }
                  if (v190 >= 0) {
                    v192 = (const void *)(v177 + 24);
                  }
                  else {
                    v192 = *(const void **)(v177 + 24);
                  }
                  if (v189 >= 0) {
                    size_t v193 = *(unsigned __int8 *)(v304 + 47);
                  }
                  else {
                    size_t v193 = *(void *)(v304 + 32);
                  }
                  if (v189 >= 0) {
                    v194 = (const void *)(v304 + 24);
                  }
                  else {
                    v194 = *(const void **)(v304 + 24);
                  }
                  if (v193 >= v191) {
                    size_t v195 = v191;
                  }
                  else {
                    size_t v195 = v193;
                  }
                  int v196 = memcmp(v192, v194, v195);
                  BOOL v197 = v191 < v193;
                  if (v196) {
                    BOOL v197 = v196 < 0;
                  }
                  if (!v197)
                  {
                    int v326 = *(_DWORD *)(v304 + 16);
                    long long v319 = *(_OWORD *)v304;
                    long long v198 = *v187;
                    v330 = *(const void **)(v304 + 40);
                    long long v329 = v198;
                    *(void *)(v304 + 32) = 0;
                    *(void *)(v304 + 40) = 0;
                    *(void *)v187 = 0;
                    long long v331 = *(_OWORD *)(v304 + 48);
                    do
                    {
                      unint64_t v199 = v177;
                      long long v200 = *(_OWORD *)v177;
                      *(_DWORD *)(v188 + 16) = *(_DWORD *)(v177 + 16);
                      *(_OWORD *)unint64_t v188 = v200;
                      v201 = (void **)(v188 + 24);
                      if (*(char *)(v188 + 47) < 0) {
                        operator delete(*v201);
                      }
                      long long v202 = *(_OWORD *)(v177 + 24);
                      *(void *)(v188 + 40) = *(void *)(v177 + 40);
                      *(_OWORD *)v201 = v202;
                      *(unsigned char *)(v177 + 47) = 0;
                      *(unsigned char *)(v177 + 24) = 0;
                      *(_OWORD *)(v188 + 48) = *(_OWORD *)(v177 + 48);
                      if (v306 < v176) {
                        break;
                      }
                      uint64_t v203 = (2 * v176) | 1;
                      unint64_t v177 = a1 + (v203 << 6);
                      uint64_t v204 = 2 * v176 + 2;
                      if (v204 < v12)
                      {
                        int v205 = *(char *)(v177 + 111);
                        int v206 = *(char *)(v177 + 47);
                        unint64_t v207 = v206 >= 0 ? *(unsigned __int8 *)(v177 + 47) : *(void *)(v177 + 32);
                        v208 = v206 >= 0 ? (const void *)(v177 + 24) : *(const void **)(v177 + 24);
                        unint64_t v209 = v205 >= 0 ? *(unsigned __int8 *)(v177 + 111) : *(void *)(v177 + 96);
                        v210 = v205 >= 0 ? (const void *)(v177 + 88) : *(const void **)(v177 + 88);
                        size_t v211 = v209 >= v207 ? v207 : v209;
                        int v212 = memcmp(v208, v210, v211);
                        uint64_t v213 = v212 ? v212 < 0 : v207 < v209;
                        v177 += v213 << 6;
                        if (v213) {
                          uint64_t v203 = v204;
                        }
                      }
                      int v214 = *(char *)(v177 + 47);
                      if (v214 >= 0) {
                        size_t v215 = *(unsigned __int8 *)(v177 + 47);
                      }
                      else {
                        size_t v215 = *(void *)(v177 + 32);
                      }
                      if (v214 >= 0) {
                        v216 = (const void *)(v177 + 24);
                      }
                      else {
                        v216 = *(const void **)(v177 + 24);
                      }
                      if (SHIBYTE(v330) >= 0) {
                        size_t v217 = HIBYTE(v330);
                      }
                      else {
                        size_t v217 = *((void *)&v329 + 1);
                      }
                      if (SHIBYTE(v330) >= 0) {
                        v218 = &v329;
                      }
                      else {
                        v218 = (long long *)v329;
                      }
                      if (v217 >= v215) {
                        size_t v219 = v215;
                      }
                      else {
                        size_t v219 = v217;
                      }
                      int v220 = memcmp(v216, v218, v219);
                      BOOL v221 = v215 < v217;
                      if (v220) {
                        BOOL v221 = v220 < 0;
                      }
                      unint64_t v188 = v199;
                      uint64_t v176 = v203;
                    }
                    while (!v221);
                    v222 = (void **)(v199 + 24);
                    *(_DWORD *)(v199 + 16) = v326;
                    *(_OWORD *)unint64_t v199 = v319;
                    if (*(char *)(v199 + 47) < 0) {
                      operator delete(*v222);
                    }
                    long long v223 = v329;
                    *(void *)(v199 + 40) = v330;
                    *(_OWORD *)v222 = v223;
                    *(_OWORD *)(v199 + 48) = v331;
                  }
                }
                int64_t v174 = v175 - 1;
              }
              while (v175);
              uint64_t v224 = (unint64_t)v11 >> 6;
              do
              {
                uint64_t v225 = 0;
                unint64_t v226 = a2;
                int v314 = *(_DWORD *)(a1 + 16);
                long long v313 = *(_OWORD *)a1;
                uint64_t v305 = *(void *)(a1 + 24);
                *(void *)v311 = *(void *)(a1 + 32);
                *(void *)&v311[7] = *(void *)(a1 + 39);
                char v307 = *(unsigned char *)(a1 + 47);
                *(void *)(a1 + 32) = 0;
                *(void *)(a1 + 40) = 0;
                *(void *)(a1 + 24) = 0;
                unint64_t v227 = a1;
                long long v310 = *(_OWORD *)(a1 + 48);
                do
                {
                  unint64_t v228 = v227 + ((v225 + 1) << 6);
                  uint64_t v229 = 2 * v225;
                  uint64_t v225 = (2 * v225) | 1;
                  uint64_t v230 = v229 + 2;
                  if (v229 + 2 < v224)
                  {
                    int v231 = *(char *)(v228 + 111);
                    int v232 = *(char *)(v228 + 47);
                    unint64_t v233 = v232 >= 0 ? *(unsigned __int8 *)(v228 + 47) : *(void *)(v228 + 32);
                    v234 = v232 >= 0 ? (const void *)(v228 + 24) : *(const void **)(v228 + 24);
                    unint64_t v235 = v231 >= 0 ? *(unsigned __int8 *)(v228 + 111) : *(void *)(v228 + 96);
                    v236 = v231 >= 0 ? (const void *)(v228 + 88) : *(const void **)(v228 + 88);
                    size_t v237 = v235 >= v233 ? v233 : v235;
                    int v238 = memcmp(v234, v236, v237);
                    uint64_t v239 = v238 ? v238 < 0 : v233 < v235;
                    v228 += v239 << 6;
                    if (v239) {
                      uint64_t v225 = v230;
                    }
                  }
                  long long v240 = *(_OWORD *)v228;
                  *(_DWORD *)(v227 + 16) = *(_DWORD *)(v228 + 16);
                  *(_OWORD *)unint64_t v227 = v240;
                  v241 = (void **)(v227 + 24);
                  if (*(char *)(v227 + 47) < 0) {
                    operator delete(*v241);
                  }
                  long long v242 = *(_OWORD *)(v228 + 24);
                  *(void *)(v227 + 40) = *(void *)(v228 + 40);
                  *(_OWORD *)v241 = v242;
                  *(unsigned char *)(v228 + 47) = 0;
                  *(unsigned char *)(v228 + 24) = 0;
                  *(_OWORD *)(v227 + 48) = *(_OWORD *)(v228 + 48);
                  unint64_t v227 = v228;
                }
                while (v225 <= (uint64_t)((unint64_t)(v224 - 2) >> 1));
                v243 = (void **)(v228 + 24);
                v244 = (long long *)(v228 + 48);
                v245 = (long long *)(a2 - 64);
                a2 -= 64;
                if (v228 == v226 - 64)
                {
                  *(_DWORD *)(v228 + 16) = v314;
                  *(_OWORD *)unint64_t v228 = v313;
                  if (*(char *)(v228 + 47) < 0) {
                    operator delete(*v243);
                  }
                  *(void *)(v228 + 24) = v305;
                  *(void *)(v228 + 32) = *(void *)v311;
                  *(void *)(v228 + 39) = *(void *)&v311[7];
                  *(unsigned char *)(v228 + 47) = v307;
                  long long *v244 = v310;
                }
                else
                {
                  long long v246 = *v245;
                  *(_DWORD *)(v228 + 16) = *(_DWORD *)(v226 - 48);
                  *(_OWORD *)unint64_t v228 = v246;
                  if (*(char *)(v228 + 47) < 0) {
                    operator delete(*v243);
                  }
                  long long v247 = *(_OWORD *)(v226 - 40);
                  *(void *)(v228 + 40) = *(void *)(v226 - 24);
                  *(_OWORD *)v243 = v247;
                  *(unsigned char *)(v226 - 17) = 0;
                  *(unsigned char *)(v226 - 40) = 0;
                  long long *v244 = *(_OWORD *)(v226 - 16);
                  *(_DWORD *)(v226 - 48) = v314;
                  long long *v245 = v313;
                  if (*(char *)(v226 - 17) < 0) {
                    operator delete(*(void **)(v226 - 40));
                  }
                  *(void *)(v226 - 40) = v305;
                  *(void *)(v226 - 25) = *(void *)&v311[7];
                  *(void *)(v226 - 32) = *(void *)v311;
                  *(unsigned char *)(v226 - 17) = v307;
                  *(_OWORD *)(v226 - 16) = v310;
                  uint64_t v248 = v228 + 64 - a1;
                  if (v248 >= 65)
                  {
                    unint64_t v249 = (((unint64_t)v248 >> 6) - 2) >> 1;
                    unint64_t v250 = a1 + (v249 << 6);
                    int v251 = *(char *)(v228 + 47);
                    int v252 = *(char *)(v250 + 47);
                    if (v252 >= 0) {
                      size_t v253 = *(unsigned __int8 *)(v250 + 47);
                    }
                    else {
                      size_t v253 = *(void *)(v250 + 32);
                    }
                    if (v252 >= 0) {
                      v254 = (const void *)(v250 + 24);
                    }
                    else {
                      v254 = *(const void **)(v250 + 24);
                    }
                    if (v251 >= 0) {
                      size_t v255 = *(unsigned __int8 *)(v228 + 47);
                    }
                    else {
                      size_t v255 = *(void *)(v228 + 32);
                    }
                    if (v251 >= 0) {
                      v256 = (const void *)(v228 + 24);
                    }
                    else {
                      v256 = *(const void **)(v228 + 24);
                    }
                    if (v255 >= v253) {
                      size_t v257 = v253;
                    }
                    else {
                      size_t v257 = v255;
                    }
                    int v258 = memcmp(v254, v256, v257);
                    BOOL v259 = v253 < v255;
                    if (v258) {
                      BOOL v259 = v258 < 0;
                    }
                    if (v259)
                    {
                      int v327 = *(_DWORD *)(v228 + 16);
                      long long v320 = *(_OWORD *)v228;
                      long long v260 = *(_OWORD *)v243;
                      v330 = *(const void **)(v228 + 40);
                      long long v329 = v260;
                      *(void *)(v228 + 32) = 0;
                      *(void *)(v228 + 40) = 0;
                      *v243 = 0;
                      long long v331 = *v244;
                      if (SHIBYTE(v330) >= 0) {
                        size_t v261 = HIBYTE(v330);
                      }
                      else {
                        size_t v261 = *((void *)&v329 + 1);
                      }
                      if (SHIBYTE(v330) >= 0) {
                        v262 = &v329;
                      }
                      else {
                        v262 = (long long *)v329;
                      }
                      do
                      {
                        unint64_t v263 = v250;
                        long long v264 = *(_OWORD *)v250;
                        *(_DWORD *)(v228 + 16) = *(_DWORD *)(v250 + 16);
                        *(_OWORD *)unint64_t v228 = v264;
                        v265 = (void **)(v228 + 24);
                        if (*(char *)(v228 + 47) < 0) {
                          operator delete(*v265);
                        }
                        long long v266 = *(_OWORD *)(v250 + 24);
                        *(void *)(v228 + 40) = *(void *)(v250 + 40);
                        *(_OWORD *)v265 = v266;
                        *(unsigned char *)(v250 + 47) = 0;
                        *(unsigned char *)(v250 + 24) = 0;
                        *(_OWORD *)(v228 + 48) = *(_OWORD *)(v250 + 48);
                        if (!v249) {
                          break;
                        }
                        unint64_t v249 = (v249 - 1) >> 1;
                        unint64_t v250 = a1 + (v249 << 6);
                        int v267 = *(char *)(v250 + 47);
                        if (v267 >= 0) {
                          size_t v268 = *(unsigned __int8 *)(v250 + 47);
                        }
                        else {
                          size_t v268 = *(void *)(v250 + 32);
                        }
                        if (v267 >= 0) {
                          v269 = (const void *)(v250 + 24);
                        }
                        else {
                          v269 = *(const void **)(v250 + 24);
                        }
                        if (v261 >= v268) {
                          size_t v270 = v268;
                        }
                        else {
                          size_t v270 = v261;
                        }
                        int v271 = memcmp(v269, v262, v270);
                        BOOL v272 = v268 < v261;
                        if (v271) {
                          BOOL v272 = v271 < 0;
                        }
                        unint64_t v228 = v263;
                      }
                      while (v272);
                      v273 = (void **)(v263 + 24);
                      *(_DWORD *)(v263 + 16) = v327;
                      *(_OWORD *)unint64_t v263 = v320;
                      if (*(char *)(v263 + 47) < 0) {
                        operator delete(*v273);
                      }
                      long long v274 = v329;
                      *(void *)(v263 + 40) = v330;
                      *(_OWORD *)v273 = v274;
                      *(_OWORD *)(v263 + 48) = v331;
                    }
                  }
                }
              }
              while (v224-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = a1 + ((unint64_t)v12 >> 1 << 6);
          if ((unint64_t)v11 <= 0x2000)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(v14, a1, (uint64_t)v302);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, v14, (uint64_t)v302);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1 + 64, v14 - 64, a2 - 128);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1 + 128, a1 + 64 + (v13 << 6), a2 - 192);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(v14 - 64, v14, a1 + 64 + (v13 << 6));
            int v322 = *(_DWORD *)(a1 + 16);
            long long v315 = *(_OWORD *)a1;
            *(void *)((char *)&v309 + 7) = *(void *)(a1 + 39);
            uint64_t v15 = *(void *)(a1 + 24);
            *(void *)&long long v309 = *(void *)(a1 + 32);
            char v16 = *(unsigned char *)(a1 + 47);
            *(void *)(a1 + 32) = 0;
            *(void *)(a1 + 40) = 0;
            *(void *)(a1 + 24) = 0;
            long long v312 = *(_OWORD *)(a1 + 48);
            int v17 = *(_DWORD *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_DWORD *)(a1 + 16) = v17;
            long long v18 = *(_OWORD *)(v14 + 24);
            *(void *)(a1 + 40) = *(void *)(v14 + 40);
            *(_OWORD *)(a1 + 24) = v18;
            *(unsigned char *)(v14 + 47) = 0;
            *(unsigned char *)(v14 + 24) = 0;
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v14 + 48);
            *(_DWORD *)(v14 + 16) = v322;
            *(_OWORD *)uint64_t v14 = v315;
            *(void *)(v14 + 24) = v15;
            *(void *)(v14 + 32) = v309;
            *(void *)(v14 + 39) = *(void *)((char *)&v309 + 7);
            *(unsigned char *)(v14 + 47) = v16;
            *(_OWORD *)(v14 + 48) = v312;
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v19 = (void **)(a1 + 24);
          int v20 = *(char *)(a1 + 47);
          int v21 = *(char *)(a1 - 17);
          if (v21 >= 0) {
            size_t v22 = *(unsigned __int8 *)(a1 - 17);
          }
          else {
            size_t v22 = *(void *)(a1 - 32);
          }
          if (v21 >= 0) {
            unint64_t v23 = (const void *)(a1 - 40);
          }
          else {
            unint64_t v23 = *(const void **)(a1 - 40);
          }
          if (v20 >= 0) {
            size_t v24 = *(unsigned __int8 *)(a1 + 47);
          }
          else {
            size_t v24 = *(void *)(a1 + 32);
          }
          if (v20 >= 0) {
            unint64_t v25 = (const void *)(a1 + 24);
          }
          else {
            unint64_t v25 = *(const void **)(a1 + 24);
          }
          if (v24 >= v22) {
            size_t v26 = v22;
          }
          else {
            size_t v26 = v24;
          }
          int v27 = memcmp(v23, v25, v26);
          BOOL v28 = v22 < v24;
          if (v27) {
            BOOL v28 = v27 < 0;
          }
          if (v28) {
            break;
          }
          int v324 = *(_DWORD *)(a1 + 16);
          long long v317 = *(_OWORD *)a1;
          uint64_t v81 = *(const void **)(a1 + 40);
          long long v329 = *(_OWORD *)v19;
          v330 = v81;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          *unint64_t v19 = 0;
          long long v331 = *(_OWORD *)(a1 + 48);
          int v82 = *(char *)(a2 - 17);
          if (SHIBYTE(v330) >= 0) {
            size_t v83 = HIBYTE(v330);
          }
          else {
            size_t v83 = *((void *)&v329 + 1);
          }
          if (SHIBYTE(v330) >= 0) {
            unint64_t v84 = &v329;
          }
          else {
            unint64_t v84 = (long long *)v329;
          }
          if (v82 >= 0) {
            size_t v85 = *(unsigned __int8 *)(a2 - 17);
          }
          else {
            size_t v85 = *(void *)(a2 - 32);
          }
          if (v82 >= 0) {
            unint64_t v86 = (const void *)(a2 - 40);
          }
          else {
            unint64_t v86 = *(const void **)(a2 - 40);
          }
          if (v85 >= v83) {
            size_t v87 = v83;
          }
          else {
            size_t v87 = v85;
          }
          int v88 = memcmp(v84, v86, v87);
          BOOL v89 = v83 < v85;
          if (v88) {
            BOOL v89 = v88 < 0;
          }
          if (v89)
          {
            BOOL v90 = (const void **)(a1 + 88);
            do
            {
              int v91 = *((char *)v90 + 23);
              if (v91 >= 0) {
                size_t v92 = *((unsigned __int8 *)v90 + 23);
              }
              else {
                size_t v92 = (size_t)v90[1];
              }
              if (v91 >= 0) {
                float v93 = v90;
              }
              else {
                float v93 = *v90;
              }
              if (v92 >= v83) {
                size_t v94 = v83;
              }
              else {
                size_t v94 = v92;
              }
              int v95 = memcmp(v84, v93, v94);
              BOOL v96 = v83 < v92;
              if (v95) {
                BOOL v96 = v95 < 0;
              }
              v90 += 8;
            }
            while (!v96);
            unint64_t v10 = (long long *)(v90 - 11);
          }
          else
          {
            unint64_t v97 = (long long *)(a1 + 64);
            do
            {
              unint64_t v10 = v97;
              if ((unint64_t)v97 >= a2) {
                break;
              }
              int v98 = *((char *)v97 + 47);
              uint64_t v99 = v8;
              if (v98 >= 0) {
                size_t v100 = *((unsigned __int8 *)v97 + 47);
              }
              else {
                size_t v100 = *((void *)v97 + 4);
              }
              if (v98 >= 0) {
                unint64_t v101 = (char *)v97 + 24;
              }
              else {
                unint64_t v101 = (const void *)*((void *)v97 + 3);
              }
              if (v100 >= v83) {
                size_t v102 = v83;
              }
              else {
                size_t v102 = v100;
              }
              int v103 = memcmp(v84, v101, v102);
              BOOL v4 = v83 >= v100;
              int v8 = v99;
              char v104 = !v4;
              BOOL v105 = v103 < 0;
              if (!v103) {
                BOOL v105 = v104;
              }
              unint64_t v97 = v10 + 4;
            }
            while (!v105);
          }
          int v106 = (long long *)a2;
          if ((unint64_t)v10 < a2)
          {
            unint64_t v107 = (const void **)(a2 - 40);
            do
            {
              int v108 = *((char *)v107 + 23);
              if (v108 >= 0) {
                size_t v109 = *((unsigned __int8 *)v107 + 23);
              }
              else {
                size_t v109 = (size_t)v107[1];
              }
              if (v108 >= 0) {
                __int16 v110 = v107;
              }
              else {
                __int16 v110 = *v107;
              }
              if (v109 >= v83) {
                size_t v111 = v83;
              }
              else {
                size_t v111 = v109;
              }
              int v112 = memcmp(v84, v110, v111);
              BOOL v113 = v83 < v109;
              if (v112) {
                BOOL v113 = v112 < 0;
              }
              v107 -= 8;
            }
            while (v113);
            int v106 = (long long *)(v107 + 5);
          }
          while (v10 < v106)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>(v10, v106);
            char v114 = (const void **)v10 + 11;
            do
            {
              uint64_t v115 = v114;
              size_t v116 = *((unsigned __int8 *)v114 + 23);
              if ((v116 & 0x80u) == 0) {
                size_t v117 = v116;
              }
              else {
                size_t v117 = (size_t)v115[1];
              }
              if ((v116 & 0x80u) == 0) {
                uint64_t v118 = v115;
              }
              else {
                uint64_t v118 = *v115;
              }
              if (v117 >= v83) {
                size_t v119 = v83;
              }
              else {
                size_t v119 = v117;
              }
              int v120 = memcmp(v84, v118, v119);
              BOOL v121 = v120 < 0;
              if (!v120) {
                BOOL v121 = v83 < v117;
              }
              char v114 = v115 + 8;
            }
            while (!v121);
            unint64_t v10 = (long long *)(v115 - 3);
            unsigned int v122 = (const void **)v106 - 5;
            do
            {
              unint64_t v123 = v122;
              size_t v124 = *((unsigned __int8 *)v122 + 23);
              if ((v124 & 0x80u) == 0) {
                size_t v125 = v124;
              }
              else {
                size_t v125 = (size_t)v123[1];
              }
              if ((v124 & 0x80u) == 0) {
                uint64_t v126 = v123;
              }
              else {
                uint64_t v126 = *v123;
              }
              if (v125 >= v83) {
                size_t v127 = v83;
              }
              else {
                size_t v127 = v125;
              }
              int v128 = memcmp(v84, v126, v127);
              BOOL v129 = v128 < 0;
              if (!v128) {
                BOOL v129 = v83 < v125;
              }
              unsigned int v122 = v123 - 8;
            }
            while (v129);
            int v106 = (long long *)(v123 - 3);
          }
          uint64_t v130 = v10 - 4;
          BOOL v4 = (unint64_t)(v10 - 4) >= a1;
          BOOL v5 = v10 - 4 == (long long *)a1;
          unint64_t v9 = a2;
          int v8 = &v331;
          if (v10 - 4 != (long long *)a1)
          {
            long long v131 = *v130;
            *(_DWORD *)(a1 + 16) = *((_DWORD *)v10 - 12);
            *(_OWORD *)a1 = v131;
            if (*(char *)(a1 + 47) < 0) {
              operator delete(*v19);
            }
            long long v132 = *(long long *)((char *)v10 - 40);
            *(void *)(a1 + 40) = *((void *)v10 - 3);
            *(_OWORD *)unint64_t v19 = v132;
            *((unsigned char *)v10 - 17) = 0;
            *((unsigned char *)v10 - 40) = 0;
            *(_OWORD *)(a1 + 48) = *(v10 - 1);
          }
          *((_DWORD *)v10 - 12) = v324;
          *uint64_t v130 = v317;
          unint64_t v133 = (void **)v10 - 5;
          if (*((char *)v10 - 17) < 0) {
            operator delete(*v133);
          }
          a4 = 0;
          long long v134 = v329;
          *((void *)v10 - 3) = v330;
          *(_OWORD *)unint64_t v133 = v134;
          *(v10 - 1) = v331;
        }
        uint64_t v29 = 0;
        int v323 = *(_DWORD *)(a1 + 16);
        long long v316 = *(_OWORD *)a1;
        uint64_t v30 = (void **)(a1 + 24);
        uint64_t v31 = *(const void **)(a1 + 40);
        long long v329 = *(_OWORD *)(a1 + 24);
        v330 = v31;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 24) = 0;
        long long v331 = *(_OWORD *)(a1 + 48);
        size_t v32 = SHIBYTE(v330) >= 0 ? HIBYTE(v330) : *((void *)&v329 + 1);
        uint64_t v33 = SHIBYTE(v330) >= 0 ? &v329 : (long long *)v329;
        do
        {
          int v34 = *(char *)(a1 + v29 + 111);
          if (v34 >= 0) {
            size_t v35 = *(unsigned __int8 *)(a1 + v29 + 111);
          }
          else {
            size_t v35 = *(void *)(a1 + v29 + 96);
          }
          if (v34 >= 0) {
            int v36 = (const void *)(a1 + v29 + 88);
          }
          else {
            int v36 = *(const void **)(a1 + v29 + 88);
          }
          if (v32 >= v35) {
            size_t v37 = v35;
          }
          else {
            size_t v37 = v32;
          }
          int v38 = memcmp(v36, v33, v37);
          BOOL v39 = v35 < v32;
          if (v38) {
            BOOL v39 = v38 < 0;
          }
          v29 += 64;
        }
        while (v39);
        unint64_t v40 = a1 + v29;
        uint64_t v41 = a1 + v29 - 64;
        uint64_t v42 = (const void **)(a2 - 40);
        if (v41 == a1)
        {
          uint64_t v50 = (const void **)(a2 - 40);
          while (1)
          {
            unint64_t v49 = (long long *)(v50 + 5);
            if (v40 >= (unint64_t)(v50 + 5)) {
              break;
            }
            int v51 = *((char *)v50 + 23);
            if (v51 >= 0) {
              size_t v52 = *((unsigned __int8 *)v50 + 23);
            }
            else {
              size_t v52 = (size_t)v50[1];
            }
            if (v51 >= 0) {
              unsigned int v53 = v50;
            }
            else {
              unsigned int v53 = *v50;
            }
            if (v32 >= v52) {
              size_t v54 = v52;
            }
            else {
              size_t v54 = v32;
            }
            int v55 = memcmp(v53, v33, v54);
            BOOL v56 = v52 < v32;
            if (v55) {
              BOOL v56 = v55 < 0;
            }
            v50 -= 8;
            if (v56)
            {
              unint64_t v49 = (long long *)(v50 + 5);
              break;
            }
          }
        }
        else
        {
          do
          {
            int v43 = *((char *)v42 + 23);
            if (v43 >= 0) {
              size_t v44 = *((unsigned __int8 *)v42 + 23);
            }
            else {
              size_t v44 = (size_t)v42[1];
            }
            if (v43 >= 0) {
              uint64_t v45 = v42;
            }
            else {
              uint64_t v45 = *v42;
            }
            if (v32 >= v44) {
              size_t v46 = v44;
            }
            else {
              size_t v46 = v32;
            }
            int v47 = memcmp(v45, v33, v46);
            BOOL v48 = v44 < v32;
            if (v47) {
              BOOL v48 = v47 < 0;
            }
            v42 -= 8;
          }
          while (!v48);
          unint64_t v49 = (long long *)(v42 + 5);
        }
        uint64_t v57 = a3;
        unint64_t v10 = (long long *)v40;
        if (v40 < (unint64_t)v49)
        {
          int v58 = v49;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>(v10, v58);
            uint64_t v59 = (const void **)v10 + 11;
            do
            {
              uint64_t v60 = v59;
              size_t v61 = *((unsigned __int8 *)v59 + 23);
              if ((v61 & 0x80u) == 0) {
                size_t v62 = v61;
              }
              else {
                size_t v62 = (size_t)v60[1];
              }
              if ((v61 & 0x80u) == 0) {
                uint64_t v63 = v60;
              }
              else {
                uint64_t v63 = *v60;
              }
              if (v32 >= v62) {
                size_t v64 = v62;
              }
              else {
                size_t v64 = v32;
              }
              int v65 = memcmp(v63, v33, v64);
              BOOL v66 = v65 < 0;
              if (!v65) {
                BOOL v66 = v62 < v32;
              }
              uint64_t v59 = v60 + 8;
            }
            while (v66);
            unint64_t v10 = (long long *)(v60 - 3);
            uint64_t v67 = (const void **)v58 - 5;
            do
            {
              uint64_t v68 = v67;
              size_t v69 = *((unsigned __int8 *)v67 + 23);
              if ((v69 & 0x80u) == 0) {
                size_t v70 = v69;
              }
              else {
                size_t v70 = (size_t)v68[1];
              }
              if ((v69 & 0x80u) == 0) {
                long long v71 = v68;
              }
              else {
                long long v71 = *v68;
              }
              if (v32 >= v70) {
                size_t v72 = v70;
              }
              else {
                size_t v72 = v32;
              }
              int v73 = memcmp(v71, v33, v72);
              BOOL v74 = v73 < 0;
              if (!v73) {
                BOOL v74 = v70 < v32;
              }
              uint64_t v67 = v68 - 8;
            }
            while (!v74);
            int v58 = (long long *)(v68 - 3);
          }
          while (v10 < v58);
        }
        __int16 v75 = v10 - 4;
        a3 = v57;
        int v8 = &v331;
        if (v10 - 4 != (long long *)a1)
        {
          long long v76 = *v75;
          *(_DWORD *)(a1 + 16) = *((_DWORD *)v10 - 12);
          *(_OWORD *)a1 = v76;
          if (*(char *)(a1 + 47) < 0) {
            operator delete(*v30);
          }
          long long v77 = *(long long *)((char *)v10 - 40);
          *(void *)(a1 + 40) = *((void *)v10 - 3);
          *(_OWORD *)uint64_t v30 = v77;
          *((unsigned char *)v10 - 17) = 0;
          *((unsigned char *)v10 - 40) = 0;
          *(_OWORD *)(a1 + 48) = *(v10 - 1);
        }
        *((_DWORD *)v10 - 12) = v323;
        *__int16 v75 = v316;
        uint64_t v78 = (void **)v10 - 5;
        if (*((char *)v10 - 17) < 0) {
          operator delete(*v78);
        }
        long long v79 = v329;
        *((void *)v10 - 3) = v330;
        *(_OWORD *)uint64_t v78 = v79;
        *(v10 - 1) = v331;
        unint64_t v9 = a2;
        if (v40 >= (unint64_t)v49) {
          break;
        }
LABEL_114:
        std::__introsort<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *,false>(a1, v10 - 4, v57, a4 & 1);
        a4 = 0;
      }
      BOOL v80 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, (uint64_t)(v10 - 4));
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>((uint64_t)v10, a2))
      {
        break;
      }
      if (!v80) {
        goto LABEL_114;
      }
    }
    a2 = (unint64_t)(v10 - 4);
    if (!v80) {
      continue;
    }
    break;
  }
}

void AGCLLVMObject::~AGCLLVMObject(AGCLLVMObject *this)
{
  *(void *)this = &unk_1F25CC6E0;
  *((void *)this + 4) = &unk_1F25CC7D0;
  uint64_t v2 = *((void *)this + 58);
  *(void *)(v2 + 160) = 0;
  if (*(char *)(v2 + 327) < 0)
  {
    **(unsigned char **)(v2 + 304) = 0;
    *(void *)(v2 + 312) = 0;
  }
  else
  {
    *(unsigned char *)(v2 + 304) = 0;
    *(unsigned char *)(v2 + 327) = 0;
  }
  MEMORY[0x1CB7A04E0](v2 + 8, "");
  uint64_t v3 = *((void *)this + 50);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  if (*((void *)this + 46))
  {
    uint64_t v4 = MEMORY[0x1CB79FA40]();
    MEMORY[0x1CB7A0780](v4, 0x10B2C407FF26C1CLL);
  }
  if (*((_DWORD *)this + 825))
  {
    uint64_t v5 = *((unsigned int *)this + 824);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 8 * v5;
      do
      {
        int v8 = *(llvm **)(*((void *)this + 411) + v6);
        if (v8 != (llvm *)-8 && v8 != 0) {
          llvm::deallocate_buffer(v8, (void *)(*(void *)v8 + 17));
        }
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  free(*((void **)this + 411));
  if (*((char *)this + 3271) < 0) {
    operator delete(*((void **)this + 406));
  }
  if (*((char *)this + 3247) < 0) {
    operator delete(*((void **)this + 403));
  }
  unint64_t v10 = (char *)*((void *)this + 385);
  if (v10 != (char *)this + 3096) {
    free(v10);
  }
  uint64_t v11 = (char *)*((void *)this + 367);
  if (v11 != (char *)this + 2952) {
    free(v11);
  }
  uint64_t v12 = (char *)*((void *)this + 357);
  if (v12 != (char *)this + 2872) {
    free(v12);
  }
  unint64_t v13 = (char *)*((void *)this + 347);
  if (v13 != (char *)this + 2792) {
    free(v13);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((AGCLLVMObject *)((char *)this + 2664));
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((AGCLLVMObject *)((char *)this + 2568));
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((AGCLLVMObject *)((char *)this + 2472));
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)this + 2432);
  uint64_t v14 = (void *)*((void *)this + 287);
  if (v14)
  {
    *((void *)this + 288) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void **)*((void *)this + 280);
  if (v15)
  {
    do
    {
      char v16 = (void **)*v15;
      if (*((char *)v15 + 47) < 0) {
        operator delete(v15[3]);
      }
      operator delete(v15);
      uint64_t v15 = v16;
    }
    while (v16);
  }
  int v17 = (void *)*((void *)this + 278);
  *((void *)this + 278) = 0;
  if (v17) {
    operator delete(v17);
  }
  for (uint64_t i = 2184; i != 1624; i -= 40)
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)this + i);
  unint64_t v19 = (void *)*((void *)this + 53);
  if (v19)
  {
    *((void *)this + 54) = v19;
    operator delete(v19);
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((AGCLLVMObject *)((char *)this + 168));
  llvm::IRBuilderFolder::~IRBuilderFolder((AGCLLVMObject *)((char *)this + 160));
  int v20 = (char *)*((void *)this + 5);
  if (v20 != (char *)this + 56) {
    free(v20);
  }
  *(void *)this = &unk_1F25DA030;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (v2)
  {
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*(void **)(v2 + 8));
    MEMORY[0x1CB7A0780](v2, 0x1060C40C2B13FB5);
  }
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    if (*(void *)this) {
      (*(void (**)(void))(**(void **)this + 24))(*(void *)this);
    }
    else {
      MEMORY[0x1CB7A0760](v3, 0x1000C8077774924);
    }
  }
  *((void *)this + 5) = 0;
  if (*((unsigned char *)this + 8) && *(void *)this) {
    (*(void (**)(void))(**(void **)this + 8))(*(void *)this);
  }
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
}

void AGCLLVMG16PB0TargetLowerer::~AGCLLVMG16PB0TargetLowerer(AGCLLVMG16PB0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(AGCLLVMGen3TargetLowerer *this)
{
  *(void *)this = &unk_1F25D77D0;
  uint64_t v2 = *((void *)this + 316);
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGen3TargetLowerer *)((char *)this + 2512));
  }
  uint64_t v4 = *((void *)this + 313);
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGen3TargetLowerer *)((char *)this + 2488));
  }
  uint64_t v6 = *((void *)this + 310);
  if (v6 != -8192 && v6 != -4096 && v6 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGen3TargetLowerer *)((char *)this + 2464));
  }
  uint64_t v8 = *((void *)this + 307);
  if (v8 != -8192 && v8 != -4096 && v8) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGen3TargetLowerer *)((char *)this + 2440));
  }
  if (*((_DWORD *)this + 579))
  {
    uint64_t v9 = *((unsigned int *)this + 578);
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 8 * v9;
      do
      {
        uint64_t v12 = *(llvm **)(*((void *)this + 288) + v10);
        if (v12 != (llvm *)-8 && v12 != 0) {
          llvm::deallocate_buffer(v12, (void *)(*(void *)v12 + 33));
        }
        v10 += 8;
      }
      while (v11 != v10);
    }
  }
  free(*((void **)this + 288));
  if (*((_DWORD *)this + 571))
  {
    uint64_t v14 = *((unsigned int *)this + 570);
    if (v14)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 8 * v14;
      do
      {
        int v17 = *(llvm **)(*((void *)this + 284) + v15);
        if (v17 != (llvm *)-8 && v17 != 0) {
          llvm::deallocate_buffer(v17, (void *)(*(void *)v17 + 25));
        }
        v15 += 8;
      }
      while (v16 != v15);
    }
  }
  free(*((void **)this + 284));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)this + 282));
  AGCLLVMTargetLowerer::~AGCLLVMTargetLowerer(this);
}

void AGCLLVMTargetLowerer::~AGCLLVMTargetLowerer(AGCLLVMTargetLowerer *this)
{
  *(void *)this = &unk_1F25D71E0;
  uint64_t v2 = *((void *)this + 104);
  *((void *)this + 104) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 103);
  *((void *)this + 103) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  MEMORY[0x1CB79EB30]((char *)this + 376);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((AGCLLVMTargetLowerer *)((char *)this + 136));
  llvm::IRBuilderFolder::~IRBuilderFolder((AGCLLVMTargetLowerer *)((char *)this + 128));
  uint64_t v4 = (char *)*((void *)this + 1);
  if (v4 != (char *)this + 24) {
    free(v4);
  }
}

void AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::~AGCDylibBindPointLayoutT()
{
}

uint64_t AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t result = dumpShaderToFile(v3);
  if (result)
  {
    if (a2[8] - a2[12] + a2[10])
    {
      flatbuffers::IDLOptions::IDLOptions((flatbuffers::IDLOptions *)v5);
      flatbuffers::Parser::Parser((flatbuffers::Parser *)v6, (const flatbuffers::IDLOptions *)v5);
    }
  }
  return result;
}

uint64_t AGCLLVMCtx::compile(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, unsigned char *a6)
{
  v41[8] = *MEMORY[0x1E4F143B8];
  a6[1] = *(unsigned char *)(a1 + 377);
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 47)
    || MGGetBoolAnswer()
    && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_UNSAFE_MATH", v11)) != 0
    && *Value != 48
    && atoi(Value))
  {
    *a6 = a4 & 1;
  }
  unint64_t v13 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  std::string::basic_string[abi:nn180100]<0>(&__p, v13);
  llvm::AGX::CompileRequest::CompileRequest();
  if (v36 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:nn180100]<0>(&v38, "__GPU_REMARKS_MD");
  std::string::basic_string[abi:nn180100]<0>(&v39, "__GPU_LD_MD");
  std::string::basic_string[abi:nn180100]<0>(&v40, "__GPU_ARCH_LD_MD");
  std::string::basic_string[abi:nn180100]<0>(v41, "__GPU_STATS_MD");
  llvm::AGX::CompileRequest::addSegments();
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v41[i + 2]) < 0) {
      operator delete((void *)v41[i]);
    }
  }
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 88))(a2, v37);
  if (isValidToPrintMessage((char **)&AGCPrinter))
  {
    uint64_t v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    if (dumpShaderToFile(v15)) {
      llvm::AGX::CompileRequest::setLoggingStream();
    }
  }
  switch(a5)
  {
    case 1:
      BOOL v20 = *(unsigned __int8 *)(a1 + 378) == 0;
      if (a6[3] == 1) {
        uint64_t v16 = a1 + 104;
      }
      else {
        uint64_t v16 = a1 + 80;
      }
      uint64_t v17 = a1;
      uint64_t v18 = v16;
      uint64_t v19 = 1;
      break;
    case 2:
      uint64_t v16 = a1 + 128;
      BOOL v20 = *(unsigned char *)(a1 + 378) == 0;
      uint64_t v17 = a1;
      uint64_t v18 = a1 + 128;
      uint64_t v19 = 2;
      break;
    case 3:
      uint64_t v16 = a1 + 56;
      uint64_t v17 = a1;
      uint64_t v18 = a1 + 56;
      uint64_t v19 = 3;
      BOOL v20 = 0;
      break;
    default:
      uint64_t v16 = a1 + 128;
      goto LABEL_27;
  }
  AGCLLVMCtx::initializePlan(v17, v18, v19, v20, (std::string *)(a2 + 8));
LABEL_27:
  if (*(unsigned char *)(v16 + 16))
  {
    if (os_variant_has_internal_diagnostics())
    {
      TelemetryCollector = (llvm::AGX::TelemetryCollector *)llvm::AGX::CompileRequest::getTelemetryCollector((llvm::AGX::CompileRequest *)v37);
      llvm::AGX::TelemetryCollector::enable(TelemetryCollector);
      llvm::AGX::TelemetryCollector::startCollection(TelemetryCollector);
      llvm::AGX::AGXCompilePlan::collectConfiguration();
      Data = (void *)llvm::AGX::TelemetryCollector::fetchData(TelemetryCollector);
      xpc_dictionary_set_uint64(Data, "api", *(unsigned int *)(a2 + 3276));
      unsigned int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
      if (v23 <= 0x21) {
        xpc_dictionary_set_uint64(Data, "shader_kind", qword_1CADDEDE8[v23]);
      }
      xpc_object_t v24 = xpc_copy(Data);
      analytics_send_event();
      xpc_release(v24);
    }
    int v27 = 0;
    char v31 = 0;
    uint64_t v32 = 0;
    int v33 = 1;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = MEMORY[0x1E4FBA010] + 16;
    uint64_t v34 = a1 + 304;
    llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v26);
    operator new();
  }
  llvm::AGX::CompileRequest::~CompileRequest((llvm::AGX::CompileRequest *)v37);
  return 0;
}

const char *virtual thunk to'AGCLLVMUserFragmentShader::dumpType(AGCLLVMUserFragmentShader *this)
{
  return "fragment";
}

uint64_t dumpShaderToFile(const char *a1)
{
  uint64_t result = isValidToPrintMessage((char **)&AGCPrinter);
  if (result)
  {
    if (!strcmp(a1, "compute")
      || !strcmp(a1, "dynamic-library")
      || !strcmp(a1, "vertex")
      || !strcmp(a1, "Vertex")
      || !strcmp(a1, "fragment")
      || !strcmp(a1, "compute-program")
      || !strcmp(a1, "tile")
      || !strcmp(a1, "post-tessellation-vertex-sw")
      || !strcmp(a1, "post-tessellation-vertex-hw")
      || !strcmp(a1, "intersection-(user)")
      || !strcmp(a1, "mesh")
      || !strcmp(a1, "mesh_analysis")
      || !strcmp(a1, "object"))
    {
      return 1;
    }
    else
    {
      uint64_t result = MGGetBoolAnswer();
      if (result)
      {
        return (uint64_t)AGCEnv::getBool((AGCEnv *)"AGC_STATUS_LOG_DRIVER_SHADERS", v3);
      }
    }
  }
  return result;
}

BOOL isValidToPrintMessage(char **a1)
{
  v5[17] = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    if (status_file_cap)
    {
      uint64_t v2 = &(*a1)[*(void *)(*(void *)*a1 - 24)];
      if ((v2[32] & 5) == 0)
      {
        (*(void (**)(void *__return_ptr))(**((void **)v2 + 5) + 32))(v5);
        if (v5[16] >= (uint64_t)status_file_cap)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"<< Rest of the status file truncated>>\n", 39);
          uint64_t v3 = *a1;
          if (*a1)
          {
            if (v3 != (char *)MEMORY[0x1E4FBA240])
            {
              (*(void (**)(char *))(*(void *)v3 + 8))(v3);
              *a1 = 0;
              {
                getFilePath(void)::file_path = 0;
                qword_1EA612AB8 = 0;
                unk_1EA612AC0 = 0;
                __cxa_atexit(MEMORY[0x1E4FBA210], &getFilePath(void)::file_path, &dword_1CAC02000);
              }
              if (byte_1EA612AC7 < 0)
              {
                *(unsigned char *)getFilePath(void)::file_path = 0;
                qword_1EA612AB8 = 0;
              }
              else
              {
                LOBYTE(getFilePath(void)::file_path) = 0;
                byte_1EA612AC7 = 0;
              }
            }
          }
        }
      }
    }
  }
  return *a1 != 0;
}

void AGCLLVMObject::printIR(AGCLLVMObject *this, const char *a2, const llvm::Module *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (const char *)(*(uint64_t (**)(AGCLLVMObject *))(*(void *)this + 56))(this);
  if (dumpShaderToFile(v5))
  {
    uint64_t v6 = (const char *)(*(uint64_t (**)(AGCLLVMObject *))(*(void *)this + 56))(this);
    snprintf(__str, 0x80uLL, "%s shader %u (%s)", v6, *((_DWORD *)this + 818), a2);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v53 = 0;
    int v44 = 0;
    char v48 = 0;
    uint64_t v49 = 0;
    int v50 = 1;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v45 = 0;
    uint64_t v43 = MEMORY[0x1E4FBA010] + 16;
    int v51 = __p;
    llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v43);
    llvm::Module::print();
    uint64_t v13 = *((void *)this + 46);
    uint64_t v14 = v13 + 24;
    uint64_t v15 = *(void *)(v13 + 32);
    if (v15 == v14)
    {
      char v16 = 0;
    }
    else
    {
      char v16 = 0;
      do
      {
        if (v15) {
          uint64_t v17 = v15 - 56;
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = v17 + 72;
        for (uint64_t i = *(void *)(v17 + 80); i != v18; uint64_t i = *(void *)(i + 8))
        {
          if (i) {
            uint64_t v20 = i - 24;
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v21 = v20 + 40;
          uint64_t v22 = *(void *)(v20 + 48);
          if (v22 == v21)
          {
            char v23 = 0;
          }
          else
          {
            char v23 = 0;
            do
            {
              ++v23;
              uint64_t v22 = *(void *)(v22 + 8);
            }
            while (v22 != v21);
          }
          v16 += v23;
        }
        uint64_t v15 = *(void *)(v15 + 8);
      }
      while (v15 != v14);
    }
    printMessage((char **)&AGCPrinter, "------ Start LLVM IR %s -------\n", v7, v8, v9, v10, v11, v12, (char)__str);
    uint64_t v30 = __p;
    if (v53 < 0) {
      LOBYTE(v30) = __p[0];
    }
    printMessage((char **)&AGCPrinter, "%s\n", v24, v25, v26, v27, v28, v29, (char)v30);
    printMessage((char **)&AGCPrinter, "; %u instructions", v31, v32, v33, v34, v35, v36, v16);
    printMessage((char **)&AGCPrinter, "------ End LLVM IR %s -------\n", v37, v38, v39, v40, v41, v42, (char)__str);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v43);
    if (SHIBYTE(v53) < 0) {
      operator delete(__p[0]);
    }
  }
}

const char *virtual thunk to'AGCLLVMUserVertexShader::dumpType(AGCLLVMUserVertexShader *this)
{
  return "vertex";
}

uint64_t llvm::raw_ostream::SetUnbuffered(llvm::raw_ostream *this)
{
  if (*((void *)this + 4) != *((void *)this + 2)) {
    llvm::raw_ostream::flush_nonempty(this);
  }
  return MEMORY[0x1F417AD10](this, 0, 0, 0);
}

uint64_t AGCLLVMCtx::initializePlan(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, std::string *a5)
{
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v7 = (llvm::AGX::AGXCompiler *)(result + 48);
    llvm::AGX::AGXCompiler::createCompilePlan();
    char v22 = 1;
    if (llvm::AGX::AGXCompilePlan::isValid((llvm::AGX::AGXCompilePlan *)v23))
    {
      llvm::AGX::AGXCompilePlan::AGXCompilePlan();
      if (*(unsigned char *)(a2 + 16))
      {
        MEMORY[0x1CB79F710](a2);
        *(unsigned char *)(a2 + 16) = 0;
      }
      llvm::AGX::AGXCompilePlan::AGXCompilePlan();
      *(unsigned char *)(a2 + 16) = 1;
      MEMORY[0x1CB79F710](v16);
    }
    else
    {
      llvm::AGX::AGXCompiler::getLastDiagnostics(&v20, v7);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v16);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"Create Plan failed:\n", 20);
      uint64_t v8 = v20;
      uint64_t v9 = v21;
      while (v8 != v9)
      {
        v8 += 8;
        uint64_t v10 = (void *)llvm::AGX::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
      }
      std::stringbuf::str();
      if ((v15 & 0x80u) == 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      if ((v15 & 0x80u) == 0) {
        std::string::size_type v12 = v15;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)__p[1];
      }
      std::string::append(a5, (const std::string::value_type *)v11, v12);
      if ((char)v15 < 0) {
        operator delete(__p[0]);
      }
      v16[0] = *(void ***)MEMORY[0x1E4FBA408];
      uint64_t v13 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(void ***)((char *)v16 + (unint64_t)*(v16[0] - 3)) = *(void ***)(MEMORY[0x1E4FBA408] + 64);
      v17[0] = v13;
      v17[1] = MEMORY[0x1E4FBA470] + 16;
      if (v18 < 0) {
        operator delete((void *)v17[9]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1CB7A0710](&v19);
      v16[0] = (void **)&v20;
      std::vector<std::unique_ptr<llvm::AGX::Diagnostic>>::__destroy_vector::operator()[abi:nn180100](v16);
    }
    return MEMORY[0x1CB79F710](v23);
  }
  return result;
}

void *llvm::SmallVectorImpl<char>::append<char const*,void>(void *result, unsigned char *__src, unsigned char *a3)
{
  uint64_t v3 = result;
  size_t v4 = a3 - __src;
  uint64_t v5 = result[1];
  if (result[2] < (unint64_t)(v5 + a3 - __src)) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (__src != a3)
  {
    uint64_t result = memcpy((void *)(*result + v5), __src, v4);
    uint64_t v5 = v3[1];
  }
  v3[1] = v5 + v4;
  return result;
}

double std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (const void *)(a2 + 24);
  uint64_t v7 = (const void *)(a1 + 24);
  int v8 = *(char *)(a1 + 47);
  int v9 = *(char *)(a2 + 47);
  if (v9 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 47);
  }
  else {
    size_t v10 = *(void *)(a2 + 32);
  }
  if (v9 >= 0) {
    uint64_t v11 = (const void *)(a2 + 24);
  }
  else {
    uint64_t v11 = *(const void **)(a2 + 24);
  }
  if (v8 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    size_t v12 = *(void *)(a1 + 32);
  }
  if (v8 >= 0) {
    uint64_t v13 = (const void *)(a1 + 24);
  }
  else {
    uint64_t v13 = *(const void **)(a1 + 24);
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  else {
    BOOL v16 = v10 < v12;
  }
  int v17 = *(char *)(a3 + 47);
  if (v17 >= 0) {
    size_t v18 = *(unsigned __int8 *)(a3 + 47);
  }
  else {
    size_t v18 = *(void *)(a3 + 32);
  }
  if (v17 >= 0) {
    uint64_t v19 = (const void *)(a3 + 24);
  }
  else {
    uint64_t v19 = *(const void **)(a3 + 24);
  }
  if (v10 >= v18) {
    size_t v20 = v18;
  }
  else {
    size_t v20 = v10;
  }
  int v21 = memcmp(v19, v11, v20);
  BOOL v23 = v18 < v10;
  if (v21) {
    BOOL v23 = v21 < 0;
  }
  if (v16)
  {
    uint64_t v24 = (long long *)a1;
    if (v23)
    {
LABEL_51:
      uint64_t v34 = (long long *)a3;
LABEL_72:
      *(void *)&double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>(v24, v34).n128_u64[0];
      return result;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((long long *)a1, (long long *)a2);
    int v25 = *(char *)(a2 + 47);
    int v26 = *(char *)(a3 + 47);
    if (v26 >= 0) {
      size_t v27 = *(unsigned __int8 *)(a3 + 47);
    }
    else {
      size_t v27 = *(void *)(a3 + 32);
    }
    if (v26 >= 0) {
      uint64_t v28 = (const void *)(a3 + 24);
    }
    else {
      uint64_t v28 = *(const void **)(a3 + 24);
    }
    if (v25 >= 0) {
      size_t v29 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      size_t v29 = *(void *)(a2 + 32);
    }
    if (v25 >= 0) {
      uint64_t v30 = v6;
    }
    else {
      uint64_t v30 = *(const void **)(a2 + 24);
    }
    if (v29 >= v27) {
      size_t v31 = v27;
    }
    else {
      size_t v31 = v29;
    }
    int v32 = memcmp(v28, v30, v31);
    BOOL v33 = v27 < v29;
    if (v32) {
      BOOL v33 = v32 < 0;
    }
    if (v33)
    {
      uint64_t v24 = (long long *)a2;
      goto LABEL_51;
    }
  }
  else if (v23)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((long long *)a2, (long long *)a3);
    int v35 = *(char *)(a1 + 47);
    int v36 = *(char *)(a2 + 47);
    if (v36 >= 0) {
      size_t v37 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      size_t v37 = *(void *)(a2 + 32);
    }
    if (v36 >= 0) {
      uint64_t v38 = v6;
    }
    else {
      uint64_t v38 = *(const void **)(a2 + 24);
    }
    if (v35 >= 0) {
      size_t v39 = *(unsigned __int8 *)(a1 + 47);
    }
    else {
      size_t v39 = *(void *)(a1 + 32);
    }
    if (v35 >= 0) {
      uint64_t v40 = v7;
    }
    else {
      uint64_t v40 = *(const void **)(a1 + 24);
    }
    if (v39 >= v37) {
      size_t v41 = v37;
    }
    else {
      size_t v41 = v39;
    }
    int v42 = memcmp(v38, v40, v41);
    BOOL v43 = v37 < v39;
    if (v42) {
      BOOL v43 = v42 < 0;
    }
    if (v43)
    {
      uint64_t v24 = (long long *)a1;
      uint64_t v34 = (long long *)a2;
      goto LABEL_72;
    }
  }
  return result;
}

uint64_t AGCLLVMObject::getTempRegistersLimit(AGCLLVMObject *this, unsigned int *a2)
{
  *a2 = *(_DWORD *)(*((void *)this + 50) + 884);
  uint64_t result = (*(uint64_t (**)(AGCLLVMObject *))(*(void *)this + 96))(this);
  if (result)
  {
    *a2 = result;
    return result != *(_DWORD *)(*((void *)this + 50) + 884);
  }
  return result;
}

uint64_t AGCLLVMBuilder::createAllocaInEntryBlock(AGCLLVMBuilder *this, llvm::Type *a2)
{
  size_t v4 = (AGCLLVMBuilder *)((char *)this + 8);
  long long v16 = *(_OWORD *)((char *)this + 56);
  uint64_t v5 = *(void *)(*(void *)(v16 + 56) + 80);
  if (v5) {
    uint64_t v6 = (llvm::BasicBlock *)(v5 - 24);
  }
  else {
    uint64_t v6 = 0;
  }
  llvm::IRBuilderBase::getCurrentDebugLocation(&v17, (AGCLLVMBuilder *)((char *)this + 8));
  int v18 = *((_DWORD *)this + 26);
  uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v6);
  if (FirstInsertionPt) {
    int v8 = (llvm::Instruction *)(FirstInsertionPt - 24);
  }
  else {
    int v8 = 0;
  }
  llvm::IRBuilderBase::SetInsertPoint(v4, v8);
  __int16 v15 = 257;
  uint64_t Alloca = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v4, a2, 0, (const llvm::Twine *)v14);
  long long v11 = v16;
  uint64_t v12 = v17;
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v13 = v18;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v11, (uint64_t)v4);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  return Alloca;
}

uint64_t AGCLLVMUserObject::initCompile(AGCLLVMUserObject *this)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v3 = *((void *)v2 + 46);
  uint64_t v4 = *(void *)(*((void *)v2 + 58) + 32);
  uint64_t v5 = *(void **)(v4 + 8);
  if (v5) {
    size_t v6 = strlen(*(const char **)(v4 + 8));
  }
  else {
    size_t v6 = 0;
  }
  llvm::Module::setTargetTriple(v3, v5, v6);
  uint64_t v7 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 32);
  if (*(void *)(v7 + 16)) {
    strlen(*(const char **)(v7 + 16));
  }
  llvm::Module::setDataLayout();
  AGCLLVMObject::disableConstantHoisting((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24)));
  AGCLLVMObject::enableTempRegistersLimit((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24)));
  AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v25, (AGCLLVMUserObject *)((char *)this + 184));
  if ((v26 & 0x1000A0011000E00) != 0 && (v25 & v26) < (v26 & 0x1000A0011000E00)) {
    llvm::Module::getOrInsertNamedMetadata();
  }
  llvm::Module::getOrInsertNamedMetadata();
  v28[2] = llvm::MDString::get();
  (*(void (**)(AGCLLVMUserObject *))(*(void *)this + 272))(this);
  llvm::ConstantInt::get();
  void v28[3] = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  llvm::Module::getOrInsertNamedMetadata();
  (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 184))((char *)this + *(void *)(*(void *)this - 24));
  llvm::Type::getInt1Ty(*(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 392), v8);
  llvm::ConstantInt::get();
  v28[1] = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  uint64_t v9 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  if (!*(unsigned char *)(v9 + 1755) && !*(_DWORD *)(v9 + 1780))
  {
    AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v25, (AGCLLVMUserObject *)((char *)this + 184));
    if ((v26 & 0x1000A0011000E00) != 0
      && (v25 & v26) >= (v26 & 0x1000A0011000E00)
      && (!MGGetBoolAnswer()
       || (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DISABLE_BACKEND_TEXTURE_PROMOTION", v16)) == 0
       || *Value == 48
       || !atoi(Value)))
    {
      llvm::Module::getOrInsertNamedMetadata();
    }
  }
  if (*((_DWORD *)this + 10) >= 2u) {
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 328), *(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368));
  }
  if (!*((unsigned char *)this + 15))
  {
    uint64_t v10 = *(void *)(*((void *)this + 22) + 80);
    if (v10) {
      long long v11 = (llvm::BasicBlock *)(v10 - 24);
    }
    else {
      long long v11 = 0;
    }
    v28[0] = llvm::BasicBlock::getFirstInsertionPt(v11);
    AGCLLVMUserObject::hoistAllocas((uint64_t)this, (uint64_t)v11, v28);
    __int16 v27 = 257;
    llvm::BasicBlock::splitBasicBlock();
    (*(void (**)(AGCLLVMUserObject *))(*(void *)this + 56))(this);
  }
  uint64_t v12 = *(void *)(*(void *)this - 24);
  int v13 = *(unsigned char **)((char *)this + v12 + 400);
  if (v13[1785] && !*((unsigned char *)this + 3712))
  {
    uint64_t v14 = *(void *)((char *)this + v12 + 368);
    if (*((unsigned char *)this + 15)) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = *((void *)this + 22);
    }
    BOOL v18 = *((unsigned __int8 *)this + 15) != 0;
    uint64_t v19 = *((unsigned __int8 *)this + 3713);
    BOOL v20 = (*(unsigned int (**)(void))(*(void *)((char *)this + v12) + 64))() == 29;
    (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t, uint64_t, BOOL, uint64_t, BOOL))(*(void *)v13 + 1392))(&v25, v13, v14, v15, v18, v19, v20);
    uint64_t v21 = v25;
    uint64_t v25 = 0;
    uint64_t v22 = *((void *)this + 294);
    *((void *)this + 294) = v21;
    if (v22)
    {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      uint64_t v23 = v25;
      uint64_t v25 = 0;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
    }
    if (AGCLLVMUserObject::mayBeCalledFromIntersectionFunction(this))
    {
      llvm::Module::getOrInsertNamedMetadata();
      llvm::ConstantInt::get();
      uint64_t v25 = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
  }
  return 1;
}

BOOL virtual thunk to'AGCLLVMAGPFragmentShader::enableSoftFaultOptimization(AGCLLVMAGPFragmentShader *this)
{
  return (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 200) + 5808) + 63) & 0x40) == 0;
}

uint64_t AGCLLVMUserFragmentShader::getMaxSharedRegisters(AGCLLVMUserFragmentShader *this)
{
  return *(unsigned int *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 848);
}

double llvm::Module::setTargetTriple(uint64_t a1, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v12 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  uint64_t v9 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*v9);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)uint64_t v9 = __dst;
  *(void *)(a1 + 232) = v12;
  return result;
}

uint64_t AGCLLVMUserObject::setupShaderWrapper(AGCLLVMUserObject *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void))(*(void *)this + 80))();
  llvm::Module::getOrInsertFunction();
  *((void *)this + 21) = v2;
  uint64_t v3 = *((void *)this + 22);
  if (*(void *)(v3 + 72) != v3 + 72)
  {
    llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(v2 + 72, v2 + 72, v3 + 72, *(void *)(v3 + 80), v3 + 72);
    uint64_t v3 = *((void *)this + 22);
  }
  BOOL v20 = *(void **)(v3 + 112);
  uint64_t FnAttrs = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)&v20);
  uint64_t v19 = FnAttrs;
  uint64_t v5 = (llvm::ConstantDataSequential *)*((void *)this + 7);
  if (!v5 || (unint64_t)llvm::ConstantDataSequential::getElementAsInteger(v5) <= 0xD)
  {
    uint64_t FnAttrs = llvm::AttributeSet::removeAttribute();
    uint64_t v19 = FnAttrs;
  }
  if (FnAttrs)
  {
    uint64_t v6 = *((void *)this + 21);
    LODWORD(v20) = -1;
    *(void *)uint64_t v21 = FnAttrs;
    *(void *)(v6 + 112) = llvm::AttributeList::get();
  }
  uint64_t v7 = *(void *)(*((void *)this + 21) + 80);
  if (v7) {
    size_t v8 = (llvm::BasicBlock *)(v7 - 24);
  }
  else {
    size_t v8 = 0;
  }
  uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v8);
  AGCLLVMUserObject::hoistAllocas((uint64_t)this, (uint64_t)v8, &FirstInsertionPt);
  __int16 v22 = 257;
  uint64_t v9 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  uint64_t v10 = (void *)*((void *)v8 + 5);
  if (v10 == (void *)((char *)v8 + 40))
  {
    int v13 = 0;
  }
  else
  {
    long long v11 = (llvm::Instruction *)(v10 - 3);
    if (v10) {
      unint64_t v12 = v10 - 3;
    }
    else {
      unint64_t v12 = 0;
    }
    if (*((unsigned __int8 *)v12 + 16) - 29 >= 0xB) {
      int v13 = 0;
    }
    else {
      int v13 = v11;
    }
  }
  llvm::Instruction::eraseFromParent(v13);
  uint64_t v14 = (char *)this + *(void *)(*(void *)this - 24);
  *((void *)v14 + 11) = v8;
  *((void *)v14 + 12) = (char *)v8 + 40;
  uint64_t v15 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)this + 64))(this);
  if (v15)
  {
    uint64_t v16 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    (*(void (**)(uint64_t, void))(*(void *)v16 + 400))(v16, *((void *)this + 21));
    llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v9);
    BOOL v20 = "wrapper_exit";
    __int16 v22 = 259;
    operator new();
  }
  return v15;
}

uint64_t llvm::IRBuilderBase::CreateBr(llvm::IRBuilderBase *this, llvm::BasicBlock *a2)
{
  uint64_t v3 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  __int16 v6 = 257;
  llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v3, (uint64_t)v5);
  return v3;
}

uint64_t AGCLLVMUserObject::hoistAllocas(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a2 + 40;
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4 != a2 + 40)
  {
    char v6 = 0;
    while (1)
    {
      if (v4) {
        uint64_t v7 = v4 - 24;
      }
      else {
        uint64_t v7 = 0;
      }
      int v8 = *(unsigned __int8 *)(v7 + 16);
      if (v8 == 59)
      {
        uint64_t v9 = *a3;
        if (*a3) {
          uint64_t v10 = *a3 - 24;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v4 - 24 == v10) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t Function = llvm::Module::getFunction();
        if (v8 == 84) {
          uint64_t v12 = v4 - 24;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v8 != 84 || Function == 0) {
          goto LABEL_30;
        }
        uint64_t v14 = *(void *)(v12 - 32);
        if (!v14 || *(unsigned char *)(v14 + 16) || *(void *)(v14 + 24) != *(void *)(v12 + 72)) {
          uint64_t v14 = 0;
        }
        if (v14 != Function) {
          goto LABEL_30;
        }
        uint64_t v9 = *a3;
        if (*a3) {
          uint64_t v15 = *a3 - 24;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v12 == v15)
        {
LABEL_28:
          *a3 = *(void *)(v9 + 8);
          goto LABEL_29;
        }
      }
      llvm::Instruction::moveBefore();
LABEL_29:
      char v6 = 1;
LABEL_30:
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == v3) {
        return v6 & 1;
      }
    }
  }
  char v6 = 0;
  return v6 & 1;
}

uint64_t llvm::IRBuilderBase::CreateRetVoid(llvm::IRBuilderBase *this)
{
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x1CB79EB60](v3, v2, 0, 0);
  __int16 v6 = 257;
  llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v3, (uint64_t)v5);
  return v3;
}

void llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a5) {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList();
  }
}

uint64_t AGCLLVMAGPFragmentShaderGen3::addWrapperPostfix(AGCLLVMAGPFragmentShaderGen3 *this, llvm::Value *a2)
{
  uint64_t result = AGCLLVMUserFragmentShader::addWrapperPostfix(this, a2);
  if (*((_DWORD *)this + 1746))
  {
    uint64_t v5 = *((unsigned int *)this + 1748);
    if (v5)
    {
      uint64_t v6 = 40 * v5;
      for (uint64_t i = (int *)*((void *)this + 872); *i >= 0xFFFFFFFE; i += 10)
      {
        v6 -= 40;
        if (!v6) {
          return result;
        }
      }
    }
    else
    {
      uint64_t i = (int *)*((void *)this + 872);
    }
    uint64_t v8 = *((void *)this + 872) + 40 * v5;
    if (i != (int *)v8)
    {
      uint64_t v9 = (char *)this + 8;
      size_t v31 = (char *)this + 368;
      unsigned int v10 = *i;
LABEL_10:
      uint64_t v11 = *((void *)i + 1);
      uint64_t v12 = &v9[*(void *)(*(void *)this - 24)];
      int v13 = (llvm::Type **)*((void *)i + 4);
      __int16 v47 = 257;
      uint64_t v14 = AGCLLVMBuilder::tryDeducePointeeType(v13, v4);
      uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v12 + 4, v14, (uint64_t)v13, 0, (uint64_t)&v44);
      uint64_t v16 = (char *)this + *(void *)(*(void *)this - 24) + 40;
      __int16 v47 = 257;
      uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v16, 49, AlignedLoad, v11, (uint64_t)&v44);
      __int16 v18 = *((_WORD *)this + 1781);
      long long v44 = 0uLL;
      int v46 = 0;
      uint64_t v45 = 0;
      (*(void (**)(void))(**(void **)&v31[*(void *)(*(void *)this - 24) + 32] + 680))();
      if (*(unsigned char *)(v11 + 8) == 15) {
        uint64_t v11 = **(void **)(v11 + 16);
      }
      if ((unsigned __int16)(v18 + v10)
         % (unint64_t)llvm::DataLayout::getABITypeAlignment((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 232), (llvm::Type *)v11))
      {
        uint64_t v19 = *(void *)&v31[*(void *)(*(void *)this - 24) + 32];
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 680))(v19);
        uint64_t v21 = (char *)this + *(void *)(*(void *)this - 24);
        long long v38 = *(_OWORD *)(v21 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v39, (llvm::IRBuilderBase *)(v21 + 40));
        int v40 = *((_DWORD *)v21 + 34);
        LODWORD(v21) = *(unsigned __int16 *)(*((void *)this + 614) + 32) >> 12;
        unsigned int v22 = *((unsigned __int16 *)this + 2156);
        uint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
        AGCLLVMGen3TargetLowerer::splitUnalignedStore((uint64_t)&v41, v20, &v38, 0, v21, v22, Cast, v23, 0, 0);
        long long v44 = v41;
        uint64_t result = (uint64_t)llvm::TrackingMDRef::operator=(&v45, &v42);
        int v46 = v43;
        if (v42) {
          uint64_t result = llvm::MetadataTracking::untrack();
        }
        uint64_t v9 = (char *)this + 8;
        if (v39) {
LABEL_20:
        }
          uint64_t result = llvm::MetadataTracking::untrack();
      }
      else
      {
        uint64_t v24 = *(void *)&v31[*(void *)(*(void *)this - 24) + 32];
        uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 680))(v24);
        unint64_t v26 = (char *)this + *(void *)(*(void *)this - 24);
        long long v35 = *(_OWORD *)(v26 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v36, (llvm::IRBuilderBase *)(v26 + 40));
        int v37 = *((_DWORD *)v26 + 34);
        LODWORD(v26) = *(unsigned __int16 *)(*((void *)this + 614) + 32) >> 12;
        uint64_t v27 = *((unsigned __int16 *)this + 2156);
        uint64_t v28 = llvm::ConstantInt::get();
        uint64_t v29 = (*(uint64_t (**)(void))(**(void **)&v31[*(void *)(*(void *)this - 24) + 32] + 680))();
        AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromIR((uint64_t)&v41, v25, &v35, 0, 0, v26, v27, Cast, v28, *(unsigned char *)(v29 + 1770), 0, 0, 0);
        long long v44 = v41;
        uint64_t result = (uint64_t)llvm::TrackingMDRef::operator=(&v45, &v42);
        int v46 = v43;
        if (v42) {
          uint64_t result = llvm::MetadataTracking::untrack();
        }
        uint64_t v9 = (char *)this + 8;
        if (v36) {
          goto LABEL_20;
        }
      }
      if ((void)v44)
      {
        uint64_t v30 = *(void *)(*(void *)this - 24);
        long long v32 = v44;
        BOOL v33 = v45;
        if (v45) {
          llvm::MetadataTracking::track();
        }
        int v34 = v46;
        uint64_t result = AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v32, (uint64_t)&v9[v30 + 32]);
        if (v33) {
          uint64_t result = llvm::MetadataTracking::untrack();
        }
      }
      uint64_t v4 = v45;
      if (v45) {
        uint64_t result = llvm::MetadataTracking::untrack();
      }
      while (1)
      {
        i += 10;
        if (i == (int *)v8) {
          break;
        }
        unsigned int v10 = *i;
        if (*i < 0xFFFFFFFE)
        {
          if (i != (int *)v8) {
            goto LABEL_10;
          }
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(AGCLLVMAGPFragmentShaderGen3 *this)
{
  void v24[3] = *MEMORY[0x1E4F143B8];
  AGCLLVMAGPFragmentShader::addWrapperPrefix(this);
  uint64_t v2 = *((void *)this + 21);
  uint64_t v3 = v2 + 72;
  uint64_t v4 = *(void *)(v2 + 80);
  while (1)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v3) {
      break;
    }
    if (v4) {
      uint64_t v5 = v4 - 24;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void *)(v5 + 40);
    if (v6 != v5 + 40)
    {
      uint64_t v7 = v6 - 24;
      uint64_t v8 = v6 ? v6 - 24 : 0;
      uint64_t v9 = *(unsigned __int8 *)(v8 + 16) - 29 >= 0xB ? 0 : v7;
      if (v9 && *(unsigned char *)(v9 + 16) == 29)
      {
        int v10 = *(_DWORD *)(v9 + 20);
        uint64_t v11 = v10 & 0x7FFFFFF;
        if ((v10 & 0x7FFFFFF) != 0)
        {
          uint64_t v12 = *((void *)this + 9);
          if (v12)
          {
            uint64_t v13 = *(void *)(v9 - 32 * v11);
            if (v13)
            {
              unsigned int v21 = 0;
              unsigned int v14 = *(_DWORD *)(v12 + 8);
              if (v14)
              {
                unsigned int v15 = 0;
                do
                {
                  uint64_t v16 = *(void *)(v12 - 8 * v14 + 8 * v15);
                  if (v16)
                  {
                    if (isStringMDNode(*(llvm::MDString **)(v16 - 8 * *(unsigned int *)(v16 + 8)), "air.imageblock_data"))
                    {
                      v23[0] = v24;
                      v23[1] = (void *)0x500000000;
                      uint64_t v17 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                      v20[16] = 257;
                      uint64_t v18 = *(void *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v17, v13, (uint64_t)&v21, 1, (uint64_t)v20);
                      v22[0] = &unk_1F2576248;
                      v22[1] = this;
                      void v22[3] = v22;
                      AGCLLVMAGPFragmentShaderGen3::setupLIBStructValueFromType(this, v18, (uint64_t)v23, (uint64_t)this + 6952, 0, 1, (uint64_t)v22);
                      std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__value_func[abi:nn180100](v22);
                      if (v23[0] != v24) {
                        free(v23[0]);
                      }
                    }
                  }
                  unsigned int v15 = v21 + 1;
                  unsigned int v21 = v15;
                  uint64_t v12 = *((void *)this + 9);
                  unsigned int v14 = *(_DWORD *)(v12 + 8);
                }
                while (v15 < v14);
              }
            }
          }
        }
        return 1;
      }
    }
  }
  return 1;
}

uint64_t AGCLLVMUserFragmentShader::wrapperFunctionType(AGCLLVMUserFragmentShader *this)
{
  return llvm::FunctionType::get();
}

uint64_t AGCLLVMAGPFragmentShader::addWrapperPrefix(AGCLLVMAGPFragmentShader *this)
{
  AGCLLVMUserFragmentShader::addWrapperPrefix(this);
  if (*((_DWORD *)this + 1610) == 1)
  {
    uint64_t v2 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    if (!*(unsigned char *)(v2 + 1744) || *((unsigned char *)this + 5845) && *((unsigned char *)this + 5862))
    {
      *(unsigned char *)(v2 + 1744) = 0;
      if (!MGGetBoolAnswer()
        || (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DISABLE_STUB_MOVMSK", v3)) == 0
        || *Value == 48
        || !atoi(Value))
      {
        uint64_t v5 = (char *)this + *(void *)(*(void *)this - 24);
        uint64_t v6 = *((void *)v5 + 50);
        long long v9 = *(_OWORD *)(v5 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v5 + 40));
        int v11 = *((_DWORD *)v5 + 34);
        uint64_t v7 = llvm::ConstantInt::get();
        (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v6 + 616))(v6, &v9, v7);
        if (v10) {
          llvm::MetadataTracking::untrack();
        }
      }
    }
    *((unsigned char *)this + 5468) = 1;
  }
  return 1;
}

uint64_t AGCLLVMUserFragmentShader::addWrapperPrefix(AGCLLVMUserFragmentShader *this)
{
  uint64_t v2 = (char *)this + 5208;
  uint64_t v3 = -256;
  do
  {
    uint64_t v4 = *(llvm::Type **)&v2[v3];
    if (v4)
    {
      uint64_t v5 = (llvm::BasicBlock **)((char *)this + *(void *)(*(void *)this - 24) + 40);
      __int16 v50 = 257;
      uint64_t Alloca = llvm::IRBuilderBase::CreateAlloca(v5, v4, 0, (const llvm::Twine *)v49);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)&v2[v3 + 8], Alloca);
    }
    uint64_t v7 = *(llvm::Type **)((char *)this + v3 + 5464);
    if (v7)
    {
      uint64_t v8 = (llvm::BasicBlock **)((char *)this + *(void *)(*(void *)this - 24) + 40);
      __int16 v50 = 257;
      uint64_t v9 = llvm::IRBuilderBase::CreateAlloca(v8, v7, 0, (const llvm::Twine *)v49);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)&v2[v3 + 264], v9);
    }
    v3 += 32;
  }
  while (v3);
  uint64_t v10 = (char *)this + 5464;
  char v11 = *((unsigned char *)this + 5464);
  if ((v11 & 4) != 0)
  {
    uint64_t v12 = (char *)this + *(void *)(*(void *)this - 24);
    long long v46 = *(_OWORD *)(v12 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v47, (llvm::IRBuilderBase *)(v12 + 40));
    int v48 = *((_DWORD *)v12 + 34);
    llvm::IRBuilderBase::SetInsertPoint((char **)((char *)this + *(void *)(*(void *)this - 24) + 40), *(char **)(*((void *)this + 708) + 40), *(char **)(*((void *)this + 708) + 32));
    uint64_t v13 = (char *)this + *(void *)(*(void *)this - 24);
    unsigned int v14 = (llvm::Type *)*((void *)v13 + 25);
    __int16 v50 = 257;
    uint64_t v15 = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v13 + 5, v14, 0, (const llvm::Twine *)v49);
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5472), v15);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), *((llvm::Type ***)this + 708), *((void *)this + 686), 0);
    uint64_t v16 = (char *)this + *(void *)(*(void *)this - 24) + 32;
    long long v43 = v46;
    uint64_t v44 = v47;
    if (v47) {
      llvm::MetadataTracking::track();
    }
    int v45 = v48;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v43, (uint64_t)(v16 + 8));
    if (v44) {
      llvm::MetadataTracking::untrack();
    }
    if (v47) {
      llvm::MetadataTracking::untrack();
    }
    char v11 = *v10;
    if ((*v10 & 8) == 0)
    {
LABEL_9:
      if ((v11 & 2) == 0) {
        goto LABEL_10;
      }
LABEL_20:
      unsigned int v22 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v23 = (llvm::Type *)*((void *)v22 + 29);
      __int16 v50 = 257;
      uint64_t v24 = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v22 + 5, v23, 0, (const llvm::Twine *)v49);
      llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5520), v24);
      uint64_t v25 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      unint64_t v26 = (llvm::Type **)llvm::ConstantInt::get();
      llvm::IRBuilderBase::CreateAlignedStore(v25, v26, *((void *)this + 692), 0);
      if ((*v10 & 1) == 0) {
        return 1;
      }
      goto LABEL_21;
    }
  }
  else if ((*((unsigned char *)this + 5464) & 8) == 0)
  {
    goto LABEL_9;
  }
  uint64_t v17 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v18 = (llvm::Type *)*((void *)v17 + 28);
  __int16 v50 = 257;
  uint64_t v19 = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v17 + 5, v18, 0, (const llvm::Twine *)v49);
  llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5496), v19);
  uint64_t v20 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  unsigned int v21 = (llvm::Type **)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateAlignedStore(v20, v21, *((void *)this + 689), 0);
  char v11 = *v10;
  if ((*v10 & 2) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v11 & 1) == 0) {
    return 1;
  }
LABEL_21:
  if ((*(unsigned char *)(*((void *)this + 725) + 1) & 8) != 0)
  {
    BOOL v33 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v49[0] = "agc.alpha_test_ref";
    __int16 v50 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    int v34 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v35 = *((void *)v34 + 47);
    uint64_t v36 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v34 + 32), v33);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v35, v36);
    int v37 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
    __int16 v50 = 257;
    uint64_t v39 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v33, v38);
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v37 + 5, v39, (uint64_t)v33, 0, (uint64_t)v49);
    uint64_t v41 = AGCLLVMUserFragmentShader::buildAlphaQuantize(this, AlignedLoad);
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5568), v41);
  }
  else
  {
    uint64_t v27 = llvm::ConstantFP::get();
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5568), v27);
    *((_DWORD *)this + 1398) = 6;
    uint64_t v28 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v29 = (llvm::Type *)*((void *)v28 + 25);
    __int16 v50 = 257;
    uint64_t v30 = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v28 + 5, v29, 0, (const llvm::Twine *)v49);
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5544), v30);
    size_t v31 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    long long v32 = (llvm::Type **)llvm::ConstantFP::get();
    llvm::IRBuilderBase::CreateAlignedStore(v31, v32, *((void *)this + 695), 0);
  }
  return 1;
}

uint64_t llvm::IRBuilderBase::CreateAlloca(llvm::BasicBlock **this, llvm::Type *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  Module = (llvm::Module *)llvm::BasicBlock::getModule(this[6]);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
  llvm::DataLayout::getPrefTypeAlign(DataLayout, a2);
  uint64_t v9 = llvm::User::operator new((llvm::User *)0x48);
  llvm::AllocaInst::AllocaInst();
  (*(void (**)(llvm::BasicBlock *, uint64_t, const llvm::Twine *, llvm::BasicBlock *, llvm::BasicBlock *))(*(void *)this[10] + 16))(this[10], v9, a4, this[6], this[7]);
  uint64_t v10 = *((unsigned int *)this + 2);
  if (v10)
  {
    char v11 = *this;
    uint64_t v12 = (llvm::BasicBlock *)((char *)v11 + 16 * v10);
    do
    {
      llvm::Instruction::setMetadata();
      char v11 = (llvm::BasicBlock *)((char *)v11 + 16);
    }
    while (v11 != v12);
  }
  return v9;
}

uint64_t AGCLLVMObject::disableConstantHoisting(AGCLLVMObject *this)
{
  return llvm::NamedMDNode::addOperand();
}

void AGCTargetOS::AGCTargetOS(AGCTargetOS *this, const llvm::Triple *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  __int16 OSVersion = llvm::Triple::getOSVersion(a2);
  uint64_t v5 = llvm::Triple::getOSVersion(a2);
  llvm::Triple::getOSVersion(a2);
  if (v6 < 0) {
    unsigned __int16 v7 = v6;
  }
  else {
    unsigned __int16 v7 = 0;
  }
  uint64_t v8 = (unsigned __int16)((unint64_t)v5 >> 28) & (unsigned __int16)(v5 >> 63) & 0xFFF0u | (unsigned __int16)(OSVersion << 8) | v7;
  if ((*((_DWORD *)a2 + 9) & 0xFFFFFFF7) == 3) {
    uint64_t v9 = (unsigned __int16)((unint64_t)v5 >> 28) & (unsigned __int16)(v5 >> 63) & 0xFFF0u | (unsigned __int16)(OSVersion << 8) | v7;
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = *(void *)this;
  unint64_t v11 = v9 | *(void *)this & 0xFFFFFFFFFFFF0000;
  *(void *)this = v11;
  int v12 = *((_DWORD *)a2 + 9);
  BOOL v13 = v12 == 28 || v12 == 7;
  uint64_t v14 = v8 << 16;
  if (!v13) {
    uint64_t v14 = 0;
  }
  unint64_t v15 = v11 & 0xFFFFFFFF0000FFFFLL | v14;
  *(void *)this = v15;
  uint64_t v16 = v8 << 32;
  if (*((_DWORD *)a2 + 9) != 29) {
    uint64_t v16 = 0;
  }
  unint64_t v17 = v15 & 0xFFFF0000FFFFFFFFLL | v16;
  BOOL v13 = v9 == 0;
  uint64_t v18 = 0xFFFFLL;
  if (v13) {
    uint64_t v18 = 0;
  }
  BOOL v13 = v14 == 0;
  uint64_t v19 = 4294901760;
  if (v13) {
    uint64_t v19 = 0;
  }
  BOOL v13 = v16 == 0;
  uint64_t v20 = 0xFFFF00000000;
  if (v13) {
    uint64_t v20 = 0;
  }
  BOOL v13 = HIWORD(v10) == 0;
  unint64_t v21 = 0xFFFF000000000000;
  if (v13) {
    unint64_t v21 = 0;
  }
  *(void *)this = v17;
  *((void *)this + 1) = v19 | v18 | v20 | v21;
}

uint64_t AGCLLVMObject::validateBackendReply(AGCLLVMObject *this)
{
  int v5 = 0;
  (*(void (**)(AGCLLVMObject *, int *))(*(void *)this + 160))(this, &v5);
  uint64_t v2 = (const char *)(*(uint64_t (**)(AGCLLVMObject *))(*(void *)this + 56))(this);
  uint64_t result = dumpShaderToFile(v2);
  if (result)
  {
    if (*((void *)this + 62))
    {
      uint64_t v4 = (char *)this + 496;
      if (!*((void *)this + 63)) {
        uint64_t v4 = (char *)this + 1056;
      }
    }
    else
    {
      uint64_t v4 = (char *)this + 1056;
    }
    return (*(uint64_t (**)(void, void, void, AGCLLVMObject *))(**((void **)this + 50) + 504))(*((void *)this + 50), *(void *)v4, *((void *)v4 + 1), this);
  }
  return result;
}

uint64_t AGCLLVMObject::enableTempRegistersLimit(AGCLLVMObject *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v2 = 0;
  uint64_t result = (*(uint64_t (**)(AGCLLVMObject *, int *))(*(void *)this + 160))(this, &v2);
  if (result)
  {
    llvm::Module::getOrInsertNamedMetadata();
    uint64_t v3 = llvm::MDString::get();
    llvm::ConstantInt::get();
    uint64_t v4 = llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    return llvm::NamedMDNode::addOperand();
  }
  return result;
}

uint64_t virtual thunk to'AGCLLVMAGPFragmentShaderGen3::getTempRegistersLimit(AGCLLVMAGPFragmentShaderGen3 *this, unsigned int *a2)
{
  return AGCLLVMAGPFragmentShaderGen3::getTempRegistersLimit((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(void *)(*(void *)this - 176)), a2);
}

uint64_t AGCLLVMAGPFragmentShaderGen3::getTempRegistersLimit(AGCLLVMAGPFragmentShaderGen3 *this, unsigned int *a2)
{
  uint64_t v4 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *a2 = *(_DWORD *)(v4[50] + 884);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 96))(v4);
  if (result)
  {
    *a2 = result;
    uint64_t result = result != *(_DWORD *)(v4[50] + 884);
  }
  if (*((_DWORD *)this + 1816))
  {
    uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
    AGCLLVMGen3TargetLowerer::getTempRegistersLimitAcrossTileSizesForTileShader(v7, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 464), *((_DWORD *)this + 1816));
    return 1;
  }
  return result;
}

const char *AGCLLVMObject::getMaxTempRegistersOverride(AGCLLVMObject *this)
{
  uint64_t result = (const char *)MGGetBoolAnswer();
  if (result)
  {
    uint64_t result = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_TEMP_REGS_IN_BYTES", v2);
    if (result)
    {
      if (*result == 48) {
        return 0;
      }
      else {
        return (const char *)((atoi(result) + 3) >> 2);
      }
    }
  }
  return result;
}

uint64_t AGCLLVMUserObject::createGlobalRayStridesGlobal(AGCLLVMUserObject *this)
{
  uint64_t result = *((void *)this + 342);
  if (!result)
  {
    int v3 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24));
    uint64_t v4 = **(void **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    if (v3 == 29) {
      int v5 = (*(uint64_t (**)(void))(v4 + 760))();
    }
    else {
      int v5 = (*(uint64_t (**)(void))(v4 + 888))();
    }
    int v6 = v5;
    if ((*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) == 7
      || (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) == 22
      || (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) == 8)
    {
      uint64_t v7 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 640))(v7);
    }
    else
    {
      if (v3 == 29)
      {
        int v9 = -10;
        goto LABEL_10;
      }
      uint64_t v12 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 312))(v12);
    }
    int v9 = v8;
LABEL_10:
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v15, v6, v9);
    unint64_t v10 = *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 280);
    BOOL v13 = "agc.global_ray_stride";
    __int16 v14 = 259;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v10, (const llvm::Twine *)&v13, v15, 0, 0, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2720), (uint64_t)GlobalBufferBinding);
    return *((void *)this + 342);
  }
  return result;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickPayloadStridesIndex()
{
  return 2;
}

void AGCLLVMUserObject::replaceBuiltinArguments(llvm::Function **this)
{
  AGCLLVMUserObject::getBuiltinArgMap((AGCLLVMUserObject *)this);
  int v2 = this[22];
  if (*((_WORD *)v2 + 9))
  {
    llvm::Function::BuildLazyArguments(this[22]);
    uint64_t v4 = this[22];
    uint64_t v3 = *((void *)v2 + 11);
    if (*((_WORD *)v4 + 9)) {
      llvm::Function::BuildLazyArguments(this[22]);
    }
    int v2 = v4;
  }
  else
  {
    uint64_t v3 = *((void *)v2 + 11);
  }
  uint64_t v5 = *((void *)v2 + 11) + 40 * *((void *)v2 + 12);
  if (v3 != v5)
  {
    uint64_t v38 = *((void *)v2 + 11) + 40 * *((void *)v2 + 12);
    do
    {
      uint64_t v6 = *((void *)this[11] + *(unsigned int *)(v3 + 32));
      if (v6 && *(void *)(v3 + 8))
      {
        int String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8));
        uint64_t v9 = v8;
        BOOL v10 = (*(unsigned int (***)(char *))((char *)this + *((void *)*this - 3)))[8]((char *)this + *((void *)*this - 3)) == 29
           && v9 == 15;
        if (!v10
          || (*String == 0x74736E692E726961
            ? (BOOL v11 = *(void *)((char *)String + 7) == 0x64695F65636E6174)
            : (BOOL v11 = 0),
              !v11))
        {
          int Key = llvm::StringMapImpl::FindKey();
          uint64_t v13 = Key;
          if (Key != -1 && Key != (unint64_t)dword_1EBD0EA60)
          {
            uint64_t v15 = AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map;
            uint64_t v16 = *((void *)this[22] + 10);
            if (v16) {
              uint64_t v17 = v16 - 24;
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v18 = *(void *)(v17 + 40);
            if (v18) {
              uint64_t v19 = (llvm::Instruction *)(v18 - 24);
            }
            else {
              uint64_t v19 = 0;
            }
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)this + *((void *)*this - 3) + 40), v19);
            uint64_t v20 = *(void *)v3;
            if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) == 0x12) {
              uint64_t v20 = **(void **)(v20 + 16);
            }
            uint64_t v21 = *(void *)(v15 + 8 * v13);
            unsigned int v22 = *(void **)(v21 + 8);
            if (v22) {
              std::string::basic_string[abi:nn180100](&__dst, v22, *(void *)(v21 + 16));
            }
            else {
              memset(&__dst, 0, sizeof(__dst));
            }
            if ((llvm::Function *)v20 == *(llvm::Function **)((char *)this + *((void *)*this - 3) + 232)) {
              uint64_t v23 = ".i32";
            }
            else {
              uint64_t v23 = ".i16";
            }
            uint64_t v24 = std::string::append(&__dst, v23);
            std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            uint64_t v42 = v25;
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (v42 >= 0) {
              unint64_t v26 = __p;
            }
            else {
              unint64_t v26 = (void **)__p[0];
            }
            if (v42 >= 0) {
              uint64_t v27 = HIBYTE(v42);
            }
            else {
              uint64_t v27 = (uint64_t)__p[1];
            }
            if (*(unsigned char *)(v21 + 24))
            {
              uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
              uint64_t v29 = (char *)this + *((void *)*this - 3) + 8;
              __int16 v40 = 257;
              llvm::IRBuilderBase::CreateCall((uint64_t)(v29 + 32), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)&__dst);
            }
            else
            {
              uint64_t v30 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this + *((void *)*this - 3) + 32, (uint64_t)v26, v27, v20, *(uint64_t *)((char *)this + *((void *)*this - 3) + 232));
              if ((*(_DWORD *)(*(void *)v3 + 8) & 0xFE) == 0x12)
              {
                uint64_t v31 = *(unsigned int *)(*(void *)v3 + 32);
                Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
                if (v31)
                {
                  for (uint64_t i = 0; i != v31; ++i)
                  {
                    int v34 = (llvm::Value *)(*((uint64_t (**)(llvm::Function **, uint64_t, uint64_t, uint64_t, uint64_t))*this
                                          + 38))(this, v30, v20, v6, i);
                    uint64_t v35 = (char *)this + *((void *)*this - 3);
                    __int16 v40 = 257;
                    uint64_t v36 = (llvm::IRBuilderBase *)(v35 + 40);
                    int v37 = (llvm::Value *)llvm::ConstantInt::get();
                    Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v36, InsertElement, v34, v37, (const llvm::Twine *)&__dst);
                  }
                }
              }
              else
              {
                (*((void (**)(llvm::Function **, uint64_t, uint64_t, uint64_t, void))*this + 38))(this, v30, v20, v6, 0);
              }
            }
            llvm::Value::replaceAllUsesWith();
            if (SHIBYTE(v42) < 0) {
              operator delete(__p[0]);
            }
            uint64_t v5 = v38;
          }
        }
      }
      v3 += 40;
    }
    while (v3 != v5);
  }
}

char *AGCLLVMUserObject::createSCSConfigurationBufferGlobal(char *this)
{
  uint64_t v1 = this;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 312))
  {
    if ((*(unsigned int (**)(char *))(*(void *)&this[*(void *)(*(void *)this - 24)] + 64))(&this[*(void *)(*(void *)this - 24)]) == 7
      || (*(unsigned int (**)(char *))(*(void *)&v1[*(void *)(*(void *)v1 - 24)] + 64))(&v1[*(void *)(*(void *)v1 - 24)]) == 22
      || (*(unsigned int (**)(char *))(*(void *)&v1[*(void *)(*(void *)v1 - 24)] + 64))(&v1[*(void *)(*(void *)v1 - 24)]) == 8)
    {
      uint64_t v2 = *(void *)(*(void *)&v1[*(void *)(*(void *)v1 - 24) + 400] + 824);
      unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 640))(v2);
    }
    else
    {
      uint64_t v13 = *(void *)(*(void *)&v1[*(void *)(*(void *)v1 - 24) + 400] + 824);
      unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 312))(v13);
    }
    unsigned int v4 = v3;
    int8x16_t v5 = *(int8x16_t *)&v1[*(void *)(*(void *)v1 - 24) + 232];
    int8x16_t v15 = vextq_s8(v5, v5, 8uLL);
    int64x2_t v16 = vdupq_lane_s64(v5.i64[0], 0);
    uint64_t v17 = v5.i64[0];
    llvm::StructType::create();
    uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
    v15.i64[0] = (uint64_t)"agc.scs_per_kick_configuration.";
    v16.i64[0] = v4;
    LOWORD(v17) = 2051;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)v1, v6, (const llvm::Twine *)&v15, v4, 12, 5, 0);
    this = (char *)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v1 + 2480), (uint64_t)GlobalBufferBinding);
  }
  if (!*((void *)v1 + 315))
  {
    if ((*(unsigned int (**)(char *))(*(void *)&v1[*(void *)(*(void *)v1 - 24)] + 64))(&v1[*(void *)(*(void *)v1 - 24)]) == 7
      || (*(unsigned int (**)(char *))(*(void *)&v1[*(void *)(*(void *)v1 - 24)] + 64))(&v1[*(void *)(*(void *)v1 - 24)]) == 22
      || (*(unsigned int (**)(char *))(*(void *)&v1[*(void *)(*(void *)v1 - 24)] + 64))(&v1[*(void *)(*(void *)v1 - 24)]) == 8)
    {
      uint64_t v8 = *(void *)(*(void *)&v1[*(void *)(*(void *)v1 - 24) + 400] + 824);
      unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 648))(v8);
    }
    else
    {
      uint64_t v14 = *(void *)(*(void *)&v1[*(void *)(*(void *)v1 - 24) + 400] + 824);
      unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 320))(v14);
    }
    unsigned int v10 = v9;
    BOOL v11 = (llvm::Type *)llvm::PointerType::get();
    v15.i64[0] = (uint64_t)"agc.scs_per_shader_configuration.";
    v16.i64[0] = v10;
    LOWORD(v17) = 2051;
    uint64_t v12 = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)v1, v11, (const llvm::Twine *)&v15, v10, 4, 5, 0);
    return (char *)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v1 + 2504), (uint64_t)v12);
  }
  return this;
}

uint64_t AGCLLVMUserObject::needsDylibResources(AGCLLVMUserObject *this)
{
  uint64_t v1 = *(void *)(*(void *)this - 24);
  if (!*(unsigned char *)(*(void *)((char *)this + v1 + 400) + 1784)
    || (*(unsigned int (**)(char *))(*(void *)((char *)this + v1) + 64))((char *)this + v1)
    && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 1
    && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 2
    && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 3
    && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 4
    && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 5
    && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 6
    && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 7
    && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 8
    && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 29
    && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 9)
  {
    return 0;
  }
  if (*((unsigned char *)this + 3656)) {
    return 1;
  }
  unsigned int v4 = *(uint64_t (**)(void))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 104);
  return v4();
}

uint64_t virtual thunk to'AGCLLVMUserFragmentShader::getShaderType(AGCLLVMUserFragmentShader *this)
{
  return 6;
}

uint64_t virtual thunk to'AGCLLVMUserVertexShader::getShaderType(AGCLLVMUserVertexShader *this)
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderSCSPerKickConfigurationTableBufferIndex()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderSCSPerShaderConfigurationTableBufferIndex()
{
  return 64;
}

void *AGCLLVMUserObject::createSCSIFTHeapGlobal(void *this)
{
  if (!this[318])
  {
    uint64_t v1 = (AGCLLVMUserObject *)this;
    uint64_t v2 = (llvm::ValueHandleBase *)(this + 316);
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)((char *)this + *(void *)(*this - 24)) + 64))((uint64_t)this + *(void *)(*this - 24));
    if ((v3 - 7) < 2 || v3 == 22)
    {
      uint64_t v5 = *(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824);
      int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 872))(v5);
      int v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824)
                                + 640))();
    }
    else
    {
      if (v3 == 29)
      {
        uint64_t v8 = *(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824);
        unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 816))(v8) & 0xFFFFF | 0x900000;
LABEL_12:
        BOOL v11 = *(llvm::Type **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 240);
        *(void *)uint64_t v13 = "agc.ria.intersection_function_table_heap";
        __int16 v14 = 259;
        GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(v1, v11, (const llvm::Twine *)v13, v9, 0, 0, 0);
        return (void *)llvm::ValueHandleBase::operator=(v2, (uint64_t)GlobalBufferBinding);
      }
      uint64_t v10 = *(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824);
      int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 872))(v10);
      int v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824)
                                + 312))();
    }
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)v13, v6, v7);
    unsigned int v9 = v13[0];
    goto LABEL_12;
  }
  return this;
}

uint64_t AGCLLVMUserObject::setupBufferArgumentData(AGCLLVMUserObject *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, char a6, uint64_t a7)
{
  int v14 = *(_DWORD *)(a2 + 8);
  if ((v14 & 0xFE) == 0x12) {
    int v14 = *(_DWORD *)(**(void **)(a2 + 16) + 8);
  }
  if ((v14 & 0xFFFFFF00) == 0x300)
  {
    GlobalBufferBinding = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v36[0] = "agc.local_buffer_pointers.";
    int v37 = (void *)a3;
    __int16 v38 = 2051;
    uint64_t v16 = llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v16 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    uint64_t v17 = (char *)a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v18 = *((void *)v17 + 47);
    uint64_t v19 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v17 + 32), GlobalBufferBinding);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v18, v19);
    uint64_t v20 = (char *)a1 + *(void *)(*(void *)a1 - 24);
    uint64_t v21 = (llvm::Type *)*((void *)v20 + 29);
    uint64_t v22 = (uint64_t)(v20 + 40);
    __int16 v38 = 257;
    uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v20 + 5, v21, (uint64_t)GlobalBufferBinding, 0, (uint64_t)v36);
    __int16 v35 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast(v22, 48, AlignedLoad, a2, (uint64_t)v34);
  }
  else
  {
    if (a4 == -1)
    {
      LODWORD(v34[0]) = a3;
      char v25 = 8;
      char v26 = 1;
      uint64_t v27 = (void *)v34[0];
    }
    else
    {
      v32[0] = a4;
      v32[2] = ".";
      __int16 v33 = 776;
      v34[0] = v32;
      v34[2] = a3;
      char v25 = 2;
      char v26 = 8;
      uint64_t v27 = v34;
    }
    LOBYTE(v35) = v25;
    HIBYTE(v35) = v26;
    v36[0] = "agc.buffer_pointers.";
    int v37 = v27;
    LOBYTE(v38) = 3;
    HIBYTE(v38) = v25;
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v31, a3, a4);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(a1, (llvm::Type *)a2, (const llvm::Twine *)v36, v31, a5, 5, 0);
    uint64_t v28 = (uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
    __int16 v38 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateAlignedLoad(v28, (llvm::Type *)a2, (uint64_t)GlobalBufferBinding, 0, (uint64_t)v36);
    if (a4 == -1) {
      ++*((_DWORD *)a1 + 828);
    }
    if ((a6 & 3) == 1)
    {
      llvm::Module::getOrInsertNamedMetadata();
      v36[0] = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
  }
  if (a7 != -1)
  {
    uint64_t v29 = *(void *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 400);
    (*(void (**)(uint64_t, llvm::GlobalVariable *, uint64_t, void, void))(*(void *)v29 + 176))(v29, GlobalBufferBinding, a7, 0, 0);
  }
  return Cast;
}

void _AGCBindingInfo::_AGCBindingInfo(_AGCBindingInfo *this, int a2, int a3)
{
  int v3 = a2 & 0xFFFFF;
  int v4 = 0x100000;
  switch(a3)
  {
    case -13:
      int v4 = 12582912;
      break;
    case -12:
      int v4 = 11534336;
      break;
    case -11:
      int v4 = 10485760;
      break;
    case -10:
      int v4 = 9437184;
      break;
    case -9:
      int v4 = 0x800000;
      break;
    case -8:
      int v4 = 7340032;
      break;
    case -7:
      int v4 = 6291456;
      break;
    case -6:
      int v4 = 5242880;
      break;
    case -5:
      int v4 = 0x400000;
      break;
    case -4:
      int v4 = 3145728;
      break;
    case -3:
      int v4 = 0x200000;
      break;
    case -2:
      break;
    case -1:
      int v4 = 0;
      break;
    default:
      v3 |= 0x80000000;
      int v4 = (a3 & 0x7FF) << 20;
      break;
  }
  *(_DWORD *)this = v3 | v4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickIftHeapIndex()
{
  return 0;
}

void AGCLLVMUserObject::getBuiltinArgMap(AGCLLVMUserObject *this)
{
  {
    AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map = 0;
    *(void *)&dword_1EBD0EA60 = 0;
    qword_1EBD0EA68 = 0x2000000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, &dword_1CAC02000);
  }
}

void MTLCompilerReleaseReply(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t AGCLLVMUserObject::createSamplerHeapGlobal(AGCLLVMUserObject *this)
{
  {
    uint64_t v8 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    AGCLLVMUserObject::createSamplerHeapGlobal(void)::bind_indices[0] = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 456))(v8);
    uint64_t v9 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    dword_1EA61283C = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 216))(v9);
    dword_1EA612840 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)this
                                                                     + *(void *)(*(void *)this - 24)
                                                                     + 400)
                                                         + 824)
                                           + 680))();
    dword_1EA612844 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)this
                                                                     + *(void *)(*(void *)this - 24)
                                                                     + 400)
                                                         + 824)
                                           + 464))();
    uint64_t v10 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    dword_1EA612848 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 224))(v10);
    dword_1EA61284C = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)this
                                                                     + *(void *)(*(void *)this - 24)
                                                                     + 400)
                                                         + 824)
                                           + 688))();
  }
  if ((*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) == 29) {
    uint64_t v2 = 2;
  }
  else {
    uint64_t v2 = (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 7
  }
      && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 22
      && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 3
      && (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) != 4;
  uint64_t v3 = AGCLLVMUserObject::createSamplerHeapGlobal(void)::bind_indices[3
                                                                                  * *((unsigned __int8 *)this + 3696)
                                                                                  + v2];
  int v4 = (llvm::Type *)llvm::PointerType::get();
  v11[0] = "agc.sampler_heap.";
  v11[2] = v3;
  __int16 v12 = 2051;
  GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v4, (const llvm::Twine *)v11, v3, 0, 5, 0);
  llvm::GlobalValue::setLinkage((uint64_t)GlobalBufferBinding, 10);
  *((unsigned char *)GlobalBufferBinding + 80) &= ~1u;
  llvm::Constant::getNullValue(*((llvm::Constant **)GlobalBufferBinding + 3), v6);
  llvm::GlobalVariable::setInitializer();
  llvm::Module::getOrInsertNamedMetadata();
  llvm::ConstantInt::get();
  v11[0] = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  return llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2456), (uint64_t)GlobalBufferBinding);
}

void AGCLLVMUserObject::markFunctionsInline(AGCLLVMUserObject *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v121[8] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v10 = *((void *)v9 + 50);
  if (!*(unsigned char *)(v10 + 1751)) {
    goto LABEL_29;
  }
  int v11 = *(unsigned __int8 *)(v10 + 1772);
  uint64_t v12 = *((void *)v9 + 46);
  uint64_t v13 = (uint64_t *)(v12 + 168);
  int v14 = *(char *)(v12 + 191);
  if ((v14 & 0x80000000) == 0)
  {
    if (v14 != 20) {
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (*(void *)(v12 + 176) == 20)
  {
    uint64_t v13 = (uint64_t *)*v13;
LABEL_7:
    int8x16_t v15 = (uint64_t *)*v13;
    uint64_t v16 = v13[1];
    int v17 = *((_DWORD *)v13 + 4);
    BOOL v18 = v15 == (uint64_t *)0x535F786574726556 && v16 == 0x6F72505F65746174;
    if (!v18 || v17 != 1835102823) {
      goto LABEL_14;
    }
    printMessage((char **)&AGCPrinter, "Disabling non-inlined functions for ES1 vertex shader", a3, a4, a5, a6, a7, a8, v103);
LABEL_29:
    int v20 = 0;
    char v21 = 0;
    goto LABEL_35;
  }
LABEL_14:
  if (*((unsigned char *)this + 15))
  {
    int v20 = 0;
    char v21 = 1;
    goto LABEL_35;
  }
  uint64_t v22 = llvm::Function::args(*((llvm::Function **)this + 22));
  if (v22 == v23)
  {
    BOOL v26 = 0;
LABEL_31:
    char v21 = 1;
    goto LABEL_34;
  }
  uint64_t v24 = v22;
  uint64_t v25 = v23;
  BOOL v26 = 0;
  while (!*(void *)(v24 + 8))
  {
LABEL_26:
    v24 += 40;
    if (v24 == v25) {
      goto LABEL_31;
    }
  }
  uint64_t v27 = *(void *)(*((void *)this + 11) + 8 * *(unsigned int *)(v24 + 32));
  if (isStringMDNode(*(llvm::MDString **)(v27 - 8 * *(unsigned int *)(v27 + 8) + 8), "air.imageblock_data")
    || isStringMDNode(*(llvm::MDString **)(v27 - 8 * *(unsigned int *)(v27 + 8) + 8), "air.imageblock"))
  {
    __int16 v40 = "Inlining all functions due to use of image blocks";
    goto LABEL_33;
  }
  if (v11 || !isStringMDNode(*(llvm::MDString **)(v27 - 8 * *(unsigned int *)(v27 + 8) + 8), "air.indirect_buffer"))
  {
    if (isStringMDNode(*(llvm::MDString **)(v27 - 8 * *(unsigned int *)(v27 + 8) + 8), "air.texture"))
    {
      v114[0] = 0;
      LODWORD(v109) = 0;
      if (parseMDTexture(v27, &v109, &v104, v114, (BOOL *)&v116, (BOOL *)&v119, &v119, (int *)&v109))
      {
        BOOL v26 = (~v114[0] & 3) == 0;
        printMessage((char **)&AGCPrinter, "Inlining all texture functions due to the use of a RW texture", v34, v35, v36, v37, v38, v39, v103);
      }
    }
    goto LABEL_26;
  }
  __int16 v40 = "Inlining all functions due to use of indirect argument buffer";
LABEL_33:
  printMessage((char **)&AGCPrinter, v40, v28, v29, v30, v31, v32, v33, v103);
  std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), v40);
  char v21 = 0;
LABEL_34:
  int v20 = v26;
LABEL_35:
  *((_DWORD *)this + 10) = 0;
  uint64_t v41 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v42 = v41 + 24;
  uint64_t v43 = *(void *)(v41 + 32);
  while (v43 != v42)
  {
    uint64_t v44 = (llvm::Function *)(v43 - 56);
    BOOL v18 = v43 == 0;
    uint64_t v43 = *(void *)(v43 + 8);
    if (v18) {
      int v45 = 0;
    }
    else {
      int v45 = v44;
    }
    if ((v21 & 1) == 0) {
      llvm::Function::removeFnAttr();
    }
    if (llvm::GlobalValue::isDeclaration(v45))
    {
      if (!*((void *)v45 + 1)) {
        llvm::Function::eraseFromParent(v45);
      }
    }
    else if (v45 == *((llvm::Function **)this + 22))
    {
      llvm::GlobalValue::setLinkage((uint64_t)v45, 0);
      if ((v21 & 1) == 0) {
        *(void *)(*((void *)this + 22) + 112) = 0;
      }
      ++*((_DWORD *)this + 10);
    }
    else
    {
      AGCLLVMUserObject::markNonMainFunctionInline(this, v45, v21);
    }
  }
  if ((v21 & 1) == 0) {
    return;
  }
  uint64_t v46 = 0;
  size_t v119 = v121;
  uint64_t v120 = 0x800000000;
  size_t v109 = v113;
  __int16 v110 = v113;
  uint64_t v111 = 16;
  int v112 = 0;
  do
  {
    if (force_inline_function_names[v46]) {
      strlen(force_inline_function_names[v46]);
    }
    uint64_t Function = (void *)llvm::Module::getFunction();
    if (Function)
    {
      int v48 = Function;
      if (Function[1])
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v119, (uint64_t)Function);
        uint64_t Function = llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v104, (llvm::SmallPtrSetImplBase *)&v109, v48);
      }
    }
    ++v46;
  }
  while (v46 != 11);
  AGCLLVMUserObject::getSampleFunctionMap((AGCLLVMUserObject *)Function);
  if (dword_1EBD0EB78)
  {
    for (uint64_t i = (uint64_t *)AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    uint64_t i = (uint64_t *)AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map;
  }
  uint64_t v52 = AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map + 8 * dword_1EBD0EB78;
  if (i == (uint64_t *)v52)
  {
    uint64_t v54 = 0;
    char v53 = 0;
    if ((v20 & 1) == 0) {
      goto LABEL_106;
    }
    goto LABEL_88;
  }
  char v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = *i;
  do
  {
    uint64_t v49 = (void *)llvm::Module::getFunction();
    if (v49)
    {
      BOOL v56 = v49;
      if (v49[1])
      {
        if (*(unsigned char *)(v55 + 39)) {
          uint64_t v54 = *(void *)(*(void *)(v49[3] + 16) + 8 * *(unsigned __int8 *)(v55 + 39) + 8);
        }
        int v57 = *(_DWORD *)(v55 + 8);
        if (v57 == 3 || v57 == 8 || v20)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v119, (uint64_t)v49);
          uint64_t v49 = llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v104, (llvm::SmallPtrSetImplBase *)&v109, v56);
          int v57 = *(_DWORD *)(v55 + 8);
        }
        if ((v57 | 4) == 5)
        {
          uint64_t v49 = (void *)(*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)this + 352))(this);
          if (v49)
          {
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v119, (uint64_t)v56);
            uint64_t v49 = llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v104, (llvm::SmallPtrSetImplBase *)&v109, v56);
            char v53 = 1;
          }
        }
      }
    }
    do
    {
      uint64_t v58 = i[1];
      ++i;
      uint64_t v55 = v58;
      if (v58) {
        BOOL v59 = v55 == -8;
      }
      else {
        BOOL v59 = 1;
      }
    }
    while (v59);
  }
  while (i != (uint64_t *)v52);
  if (v20)
  {
LABEL_88:
    AGCLLVMUserObject::getDimensionFunctionMap((AGCLLVMUserObject *)v49);
    if (dword_1EBD0EAA0)
    {
      for (j = (void *)AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map; !*j || *j == -8; ++j)
        ;
    }
    else
    {
      j = (void *)AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map;
    }
    uint64_t v62 = AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map + 8 * dword_1EBD0EAA0;
    while (j != (void *)v62)
    {
      uint64_t v63 = llvm::Module::getFunction();
      if (v63)
      {
        size_t v64 = (void *)v63;
        if (*(void *)(v63 + 8))
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v119, v63);
          llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v104, (llvm::SmallPtrSetImplBase *)&v109, v64);
        }
      }
      do
      {
        uint64_t v66 = j[1];
        ++j;
        uint64_t v65 = v66;
        if (v66) {
          BOOL v67 = v65 == -8;
        }
        else {
          BOOL v67 = 1;
        }
      }
      while (v67);
    }
  }
LABEL_106:
  if (((v54 != 0) & v53) == 1)
  {
    uint64_t v68 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
    uint64_t v69 = v68 + 24;
    uint64_t v70 = *(void *)(v68 + 32);
    if (v70 != v68 + 24)
    {
      while (1)
      {
        uint64_t v71 = v70 - 56;
        BOOL v18 = v70 == 0;
        uint64_t v70 = *(void *)(v70 + 8);
        uint64_t v72 = v18 ? 0 : v71;
        if (v72 != *((void *)this + 22)) {
          break;
        }
LABEL_123:
        if (v70 == v69) {
          goto LABEL_124;
        }
      }
      if (*(_WORD *)(v72 + 18))
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v72);
        int v73 = *(void **)(v72 + 88);
        if (*(_WORD *)(v72 + 18))
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v72);
          BOOL v74 = *(void **)(v72 + 88);
LABEL_117:
          __int16 v75 = &v74[5 * *(void *)(v72 + 96)];
          while (v73 != v75)
          {
            if (*v73 == v54 && v73[1])
            {
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v119, v72);
              llvm::Function::addFnAttr();
              goto LABEL_123;
            }
            v73 += 5;
          }
          goto LABEL_123;
        }
      }
      else
      {
        int v73 = *(void **)(v72 + 88);
      }
      BOOL v74 = v73;
      goto LABEL_117;
    }
  }
LABEL_124:
  unsigned int v76 = v120;
  while (v76)
  {
    uint64_t v77 = v119[--v76];
    LODWORD(v120) = v76;
    uint64_t v78 = *(void *)(v77 + 8);
    if (v78)
    {
      do
      {
        uint64_t v79 = *(void *)(v78 + 24);
        if (v79)
        {
          if (*(unsigned char *)(v79 + 16) == 84)
          {
            BOOL v80 = *(void **)(*(void *)(v79 + 40) + 56);
            if (v80 != *((void **)this + 22))
            {
              llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v104, (llvm::SmallPtrSetImplBase *)&v109, v80);
              if ((_BYTE)v106)
              {
                llvm::Function::addFnAttr();
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v119, (uint64_t)v80);
              }
            }
          }
        }
        uint64_t v78 = *(void *)(v78 + 8);
      }
      while (v78);
      unsigned int v76 = v120;
    }
  }
  size_t v116 = v118;
  uint64_t v117 = 0x800000000;
  AGCLLVMUserObject::extractConstantSamplers(this, (uint64_t)&v116);
  uint64_t v81 = (void **)v116;
  char v104 = v108;
  BOOL v105 = v108;
  uint64_t v106 = 16;
  int v107 = 0;
  if (!v117) {
    goto LABEL_173;
  }
  uint64_t v82 = 8 * v117;
  do
  {
    size_t v83 = *v81++;
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v114, (llvm::SmallPtrSetImplBase *)&v104, v83);
    v82 -= 8;
  }
  while (v82);
  unsigned int v84 = v117;
  if (!v117) {
    goto LABEL_173;
  }
  do
  {
    uint64_t v85 = *((void *)v116 + --v84);
    LODWORD(v117) = v84;
    uint64_t v86 = *(void *)(v85 + 8);
    if (!v86) {
      continue;
    }
    do
    {
      uint64_t v87 = *(void *)(v86 + 24);
      unsigned int v88 = *(unsigned __int8 *)(v87 + 16);
      if (v87) {
        BOOL v89 = v88 >= 0x1C;
      }
      else {
        BOOL v89 = 0;
      }
      if (v89)
      {
        unsigned int v91 = v88 - 28;
      }
      else
      {
        if (v87) {
          BOOL v90 = v88 == 5;
        }
        else {
          BOOL v90 = 0;
        }
        if (!v90)
        {
LABEL_153:
          if (!v87 || v88 != 84) {
            goto LABEL_170;
          }
          uint64_t v92 = *(void *)(v87 - 32);
          if (!v92 || *(unsigned char *)(v92 + 16) || *(void *)(v92 + 24) != *(void *)(v87 + 72)) {
            uint64_t v92 = 0;
          }
          llvm::Function::addFnAttr();
          if (*(_WORD *)(v92 + 18))
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v92);
            float v93 = *(unsigned int **)(v92 + 88);
            if (*(_WORD *)(v92 + 18))
            {
              llvm::Function::BuildLazyArguments((llvm::Function *)v92);
              size_t v94 = *(unsigned int **)(v92 + 88);
LABEL_164:
              int v95 = &v94[10 * *(void *)(v92 + 96)];
              while (v93 != v95)
              {
                if (*(void *)(v87 - 32 * (*(_DWORD *)(v87 + 20) & 0x7FFFFFF) + 32 * v93[8]) == v85)
                {
                  llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v114, (llvm::SmallPtrSetImplBase *)&v104, v93);
                  if (v115) {
                    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v116, (uint64_t)v93);
                  }
                }
                v93 += 10;
              }
              goto LABEL_170;
            }
          }
          else
          {
            float v93 = *(unsigned int **)(v92 + 88);
          }
          size_t v94 = v93;
          goto LABEL_164;
        }
        unsigned int v91 = *(unsigned __int16 *)(v87 + 18);
      }
      if (v91 != 49) {
        goto LABEL_153;
      }
      llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v114, (llvm::SmallPtrSetImplBase *)&v104, *(void **)(v86 + 24));
      if (v115) {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v116, v87);
      }
LABEL_170:
      uint64_t v86 = *(void *)(v86 + 8);
    }
    while (v86);
    unsigned int v84 = v117;
  }
  while (v84);
LABEL_173:
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_STRESS_NO_INLINING", v96);
    if (Value)
    {
      if (*Value != 48 && atoi(Value))
      {
        uint64_t v98 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
        uint64_t v99 = v98 + 24;
        uint64_t v100 = *(void *)(v98 + 32);
        while (v100 != v99)
        {
          unint64_t v101 = (llvm::GlobalValue *)(v100 - 56);
          BOOL v18 = v100 == 0;
          uint64_t v100 = *(void *)(v100 + 8);
          if (v18) {
            size_t v102 = 0;
          }
          else {
            size_t v102 = v101;
          }
          if ((llvm::GlobalValue::isDeclaration(v102) & 1) == 0 && (llvm::Function::hasFnAttribute() & 1) == 0) {
            llvm::Function::addFnAttr();
          }
        }
      }
    }
  }
  if (v105 != v104) {
    free(v105);
  }
  if (v116 != v118) {
    free(v116);
  }
  if (v110 != v109) {
    free(v110);
  }
  if (v119 != v121) {
    free(v119);
  }
}

uint64_t AGCLLVMUserObject::extractConstantSamplers(void *a1, uint64_t a2)
{
  uint64_t v3 = *(llvm::Module **)((char *)a1 + *(void *)(*a1 - 24) + 368);
  int v11 = "air.sampler_states";
  __int16 v12 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)&v11);
  if (result)
  {
    uint64_t v5 = (llvm::NamedMDNode *)result;
    for (unsigned int i = 0; ; ++i)
    {
      uint64_t result = llvm::NamedMDNode::getNumOperands(v5);
      if (i >= result) {
        break;
      }
      uint64_t Operand = llvm::NamedMDNode::getOperand(v5);
      uint64_t v8 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8) + 8);
      if (v8)
      {
        if (*v8 - 1 > 1)
        {
          uint64_t v10 = 0;
        }
        else
        {
          uint64_t v9 = *((void *)v8 + 16);
          if (*(unsigned char *)(v9 + 16) == 3) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0;
          }
        }
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a2, v10);
      }
    }
  }
  return result;
}

uint64_t llvm::GlobalValue::setLinkage(uint64_t this, int a2)
{
  uint64_t v2 = this;
  int v3 = *(_DWORD *)(this + 32);
  if ((a2 - 7) < 2) {
    v3 &= 0xFFFFFFCF;
  }
  unsigned int v4 = v3 & 0xFFFFFFF0 | a2 & 0xF;
  *(_DWORD *)(this + 32) = v4;
  if ((a2 & 0xFu) - 7 < 2) {
    goto LABEL_7;
  }
  if ((v3 & 0x30) != 0)
  {
    this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this);
    if ((this & 1) == 0)
    {
      unsigned int v4 = *(_DWORD *)(v2 + 32);
LABEL_7:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return this;
}

BOOL parseMDTexture(uint64_t a1, _DWORD *a2, _DWORD *a3, char *a4, BOOL *a5, BOOL *a6, unsigned char *a7, int *a8)
{
  BOOL v16 = isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8), "air.texture");
  if (v16)
  {
    uint64_t v31 = a5;
    uint64_t v32 = a6;
    *a4 = 1;
    *a5 = 0;
    uint64_t v33 = a7;
    *a7 = 0;
    unsigned int v17 = *(_DWORD *)(a1 + 8);
    unsigned int v34 = 2;
    if (v17 >= 3)
    {
      do
      {
        if ((parseMDLocationIndex(a1, &v34, a2, a3) & 1) == 0)
        {
          if (parseMDInt("air.binding", a1, &v34, a2))
          {
            *a3 = 1;
          }
          else
          {
            if (parseMDInt("air.raster_order_group", a1, &v34, a8))
            {
              int v18 = *a8;
              if (*a8 >= 7) {
                int v18 = 7;
              }
              *a8 = v18;
              *uint64_t v33 = 1;
              continue;
            }
            if (!parseMDAccess(a1, &v34, a4))
            {
              uint64_t v19 = v34;
              unsigned int v20 = ++v34;
              if (isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v19), "air.arg_type_name"))
              {
                unsigned int v34 = v19 + 2;
                uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v20));
                if (v22 > 4)
                {
                  BOOL v26 = *(_DWORD *)String == 1634890337 && *(unsigned char *)(String + 4) == 121;
                  uint64_t v24 = v32;
                  BOOL *v31 = v26;
                  if (v22 >= 0xE)
                  {
                    if (*(void *)String == 0x5F65727574786574 && *(void *)(String + 6) == 0x7265666675625F65)
                    {
                      BOOL v23 = 1;
                      goto LABEL_37;
                    }
                    if (v22 >= 0x14)
                    {
                      BOOL v23 = *(void *)String == 0x65743C7961727261
                         && *(void *)(String + 8) == 0x75625F6572757478
                         && *(_DWORD *)(String + 16) == 1919247974;
                      goto LABEL_37;
                    }
                  }
                  BOOL v23 = 0;
                }
                else
                {
                  BOOL v23 = 0;
                  uint64_t v24 = v32;
                  BOOL *v31 = 0;
                }
LABEL_37:
                *uint64_t v24 = v23;
              }
            }
          }
        }
      }
      while (v34 < v17);
    }
  }
  return v16;
}

uint64_t llvm::Function::args(llvm::Function *this)
{
  if ((*((_WORD *)this + 9) & 1) == 0) {
    return *((void *)this + 11);
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v2 = *((void *)this + 11);
  if (*((_WORD *)this + 9)) {
    llvm::Function::BuildLazyArguments(this);
  }
  return v2;
}

void SimplifyGenericIR(llvm::Module *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v91[16] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    int v82 = 0;
    uint64_t v9 = (char *)a1 + 24;
    uint64_t v10 = (char *)*((void *)a1 + 4);
    if (v10 == (char *)a1 + 24)
    {
      int v75 = 0;
      int v74 = 0;
      int v73 = 0;
LABEL_132:
      if (v74 + v73 + v75) {
        printMessage((char **)&AGCPrinter, "SimplifyGenericIR: %u alloca's, Removed %u loads, %u stores, %u other out of %u insts, total %4.2f %c insts\n", a3, a4, a5, a6, a7, a8, SBYTE4(v80));
      }
      else {
        printMessage((char **)&AGCPrinter, "SimplifyGenericIR: %u alloca's, unable to simplify the IR\n", a3, a4, a5, a6, a7, a8, SBYTE4(v80));
      }
      return;
    }
    unsigned int v76 = (char *)a1 + 24;
    while (1)
    {
      uint64_t v11 = v10 ? (uint64_t)(v10 - 56) : 0;
      if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v11) & 1) == 0) {
        break;
      }
LABEL_129:
      uint64_t v10 = (char *)*((void *)v10 + 1);
      if (v10 == v9)
      {
        int v73 = v81;
        int v74 = HIDWORD(v81);
        int v75 = v82;
        goto LABEL_132;
      }
    }
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    unsigned int v87 = 0;
    v84[0] = 0;
    v84[1] = 0;
    size_t v83 = (uint64_t *)v84;
    if (*(unsigned char *)(v11 + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v11);
      __int16 v12 = *(llvm::Argument **)(v11 + 88);
      if (*(_WORD *)(v11 + 18))
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v11);
        uint64_t v13 = *(llvm::Argument **)(v11 + 88);
LABEL_16:
        int v14 = (llvm::Argument *)((char *)v13 + 40 * *(void *)(v11 + 96));
        while (v12 != v14)
        {
          unsigned int v15 = *(_DWORD *)(*(void *)v12 + 8);
          if (v15 == 15)
          {
            if ((v15 & 0xFE) == 0x12) {
              unsigned int v15 = *(_DWORD *)(**(void **)(*(void *)v12 + 16) + 8);
            }
            if (v15 <= 0xFF && llvm::Argument::hasNoAliasAttr(v12)) {
              AddCandidate((uint64_t)v12, (uint64_t)&v85, &v83, (uint64_t)&v80);
            }
          }
          __int16 v12 = (llvm::Argument *)((char *)v12 + 40);
        }
        BOOL v89 = v91;
        uint64_t v90 = 0x1000000000;
        uint64_t v16 = *(void *)(v11 + 80);
        if (v16) {
          uint64_t v17 = v16 - 24;
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = v17 + 40;
        uint64_t v19 = *(void *)(v17 + 48);
        if (v19 != v18)
        {
          do
          {
            uint64_t v20 = *(void *)(v19 + 8);
            uint64_t v21 = v19 - 24;
            if (v19) {
              uint64_t v22 = v19 - 24;
            }
            else {
              uint64_t v22 = 0;
            }
            if (*(unsigned char *)(v22 + 16) == 59) {
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v89, v21);
            }
            uint64_t v19 = v20;
          }
          while (v20 != v18);
          if (v90)
          {
            BOOL v23 = (llvm::Instruction **)v89;
            uint64_t v24 = 8 * v90;
            do
            {
              uint64_t v25 = *v23;
              if (*((void *)*v23 + 1))
              {
                ++HIDWORD(v80);
                AddCandidate((uint64_t)v25, (uint64_t)&v85, &v83, (uint64_t)&v80);
              }
              else
              {
                llvm::Instruction::eraseFromParent(v25);
                ++v82;
              }
              ++v23;
              v24 -= 8;
            }
            while (v24);
          }
        }
        LODWORD(v90) = 0;
        if (v86)
        {
          uint64_t v26 = *(void *)(v11 + 80);
          uint64_t v78 = v11 + 72;
          if (v26 != v11 + 72)
          {
            uint64_t v77 = v10;
            int v27 = 0;
            char v79 = 0;
            while (1)
            {
              if (v26) {
                uint64_t v28 = v26 - 24;
              }
              else {
                uint64_t v28 = 0;
              }
              uint64_t v29 = *(void *)(v28 + 48);
              if (v29 != v28 + 40)
              {
                do
                {
                  if (v29) {
                    uint64_t v30 = (unsigned __int8 *)(v29 - 24);
                  }
                  else {
                    uint64_t v30 = 0;
                  }
                  uint64_t v31 = *(void *)(v29 + 8);
                  LODWORD(v80) = v80 + 1;
                  int v32 = v30[16];
                  if (v29 && v32 == 61)
                  {
                    uint64_t v33 = *((void *)v30 - 4);
                    uint64_t v88 = 0;
                    unsigned int v34 = v85;
                    uint64_t v35 = v87;
                    int v36 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>((uint64_t)v85, v87, v33, &v88);
                    uint64_t v37 = v88;
                    if (v36) {
                      BOOL v38 = v88 == (void)v34 + 32 * v35;
                    }
                    else {
                      BOOL v38 = 1;
                    }
                    if (!v38)
                    {
                      *(void *)(v88 + 8) = *((void *)v30 - 8);
                      *(_DWORD *)(v37 + 16) = v27;
                    }
                    goto LABEL_98;
                  }
                  if (v32 == 60) {
                    uint64_t v39 = (llvm::Instruction *)v30;
                  }
                  else {
                    uint64_t v39 = 0;
                  }
                  if (!v29 || v32 != 60)
                  {
                    if (v32 == 84) {
                      uint64_t v46 = (llvm::CallBase *)v30;
                    }
                    else {
                      uint64_t v46 = 0;
                    }
                    if (v29)
                    {
                      uint64_t v47 = v84[0];
                      if (v32 == 84 && v84[0] != 0)
                      {
                        uint64_t v49 = v84;
                        do
                        {
                          __int16 v50 = v47;
                          int v51 = v49;
                          unint64_t v52 = v47[4];
                          char v53 = v47 + 1;
                          if (v52 >= (unint64_t)v46)
                          {
                            char v53 = v50;
                            uint64_t v49 = (void **)v50;
                          }
                          uint64_t v47 = (void *)*v53;
                        }
                        while (v47);
                        if (v49 != v84)
                        {
                          if (v52 < (unint64_t)v46) {
                            __int16 v50 = v51;
                          }
                          if ((unint64_t)v46 >= v50[4])
                          {
                            unint64_t v54 = 0;
                            for (unsigned int i = v46; ; unsigned int i = (llvm::CallBase *)((char *)i + 32))
                            {
                              uint64_t v56 = llvm::CallBase::arg_end(v46);
                              uint64_t v57 = *((_DWORD *)v46 + 5) & 0x7FFFFFF;
                              if (v54 >= ((unint64_t)(v56
                                                                          - ((void)v46
                                                                           + 32 * -(int)v57)) >> 5))
                                break;
                              uint64_t v58 = *((void *)i - 4 * v57);
                              uint64_t v88 = 0;
                              BOOL v59 = v85;
                              uint64_t v60 = v87;
                              int v61 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>((uint64_t)v85, v87, v58, &v88);
                              uint64_t v62 = v88;
                              if (v61) {
                                BOOL v63 = v88 == (void)v59 + 32 * v60;
                              }
                              else {
                                BOOL v63 = 1;
                              }
                              if (!v63)
                              {
                                *(void *)(v88 + 8) = 0;
                                *(_DWORD *)(v62 + 16) = v27;
                              }
                              ++v54;
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_98;
                  }
                  uint64_t v40 = *((void *)v39 - 4);
                  uint64_t v88 = 0;
                  uint64_t v41 = v85;
                  uint64_t v42 = v87;
                  int v43 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>((uint64_t)v85, v87, v40, &v88);
                  uint64_t v44 = v88;
                  if (v43) {
                    BOOL v45 = v88 == (void)v41 + 32 * v42;
                  }
                  else {
                    BOOL v45 = 1;
                  }
                  if (!v45)
                  {
                    if (*(_DWORD *)(v88 + 16) == v27)
                    {
                      if (!*(void *)(v88 + 8)) {
                        goto LABEL_97;
                      }
                    }
                    else
                    {
                      if (!*(unsigned char *)(v88 + 21))
                      {
LABEL_97:
                        *(void *)(v88 + 8) = v39;
                        *(_DWORD *)(v44 + 16) = v27;
                        *(unsigned char *)(v44 + 20) = 0;
                        goto LABEL_98;
                      }
                      llvm::UndefValue::get();
                    }
                    llvm::Value::replaceAllUsesWith();
                    llvm::Instruction::eraseFromParent(v39);
                    --*(_DWORD *)(v44 + 24);
                    LODWORD(v81) = v81 + 1;
                    char v79 = 1;
                  }
LABEL_98:
                  uint64_t v29 = v31;
                }
                while (v31 != v28 + 40);
              }
              uint64_t v26 = *(void *)(v26 + 8);
              if (v26 == v78) {
                break;
              }
              if (v26) {
                size_t v64 = (llvm::BasicBlock *)(v26 - 24);
              }
              else {
                size_t v64 = 0;
              }
              if (llvm::BasicBlock::getSinglePredecessor(v64) != v28) {
                ++v27;
              }
            }
            uint64_t v9 = v76;
            uint64_t v10 = v77;
            if ((v79 & 1) != 0 && v86)
            {
              if (v87)
              {
                uint64_t v65 = 32 * v87;
                uint64_t v66 = v85;
                while ((*(void *)v66 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  uint64_t v66 = (llvm *)((char *)v66 + 32);
                  v65 -= 32;
                  if (!v65) {
                    goto LABEL_126;
                  }
                }
              }
              else
              {
                uint64_t v66 = v85;
              }
              BOOL v67 = (llvm *)((char *)v85 + 32 * v87);
              if (v66 != v67)
              {
                int v68 = HIDWORD(v81);
                int v69 = v82;
LABEL_116:
                if (*((unsigned char *)v66 + 20) && !*((_DWORD *)v66 + 6))
                {
                  uint64_t v70 = *(llvm::Value **)v66;
                  uint64_t v71 = *(void *)(*(void *)v66 + 8);
                  if (v71)
                  {
                    do
                    {
                      uint64_t v72 = *(llvm::Instruction **)(v71 + 24);
                      uint64_t v71 = *(void *)(v71 + 8);
                      llvm::Instruction::eraseFromParent(v72);
                      ++v68;
                    }
                    while (v71);
                    uint64_t v70 = *(llvm::Value **)v66;
                  }
                  v69 += EraseInstructionChain(v70);
                }
                while (1)
                {
                  uint64_t v66 = (llvm *)((char *)v66 + 32);
                  if (v66 == v67) {
                    break;
                  }
                  if ((*(void *)v66 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  {
                    if (v66 != v67) {
                      goto LABEL_116;
                    }
                    break;
                  }
                }
                HIDWORD(v81) = v68;
                int v82 = v69;
              }
            }
          }
        }
LABEL_126:
        if (v89 != v91) {
          free(v89);
        }
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v84[0]);
        llvm::deallocate_buffer(v85, (void *)(32 * v87));
        goto LABEL_129;
      }
    }
    else
    {
      __int16 v12 = *(llvm::Argument **)(v11 + 88);
    }
    uint64_t v13 = v12;
    goto LABEL_16;
  }
  printMessage((char **)&AGCPrinter, "Skip SimplifyGenericIR", a3, a4, a5, a6, a7, a8, a9);
}

void printMessage(char **a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    if (status_file_cap)
    {
      uint64_t v11 = &(*a1)[*(void *)(*(void *)*a1 - 24)];
      if ((v11[32] & 5) == 0)
      {
        (*(void (**)(std::locale *__return_ptr))(**((void **)v11 + 5) + 32))(&v17);
        if (v18 >= status_file_cap)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"<< Rest of the status file truncated>>\n", 39);
          __int16 v12 = *a1;
          if (!*a1 || v12 == (char *)MEMORY[0x1E4FBA240]) {
            goto LABEL_11;
          }
          (*(void (**)(char *))(*(void *)v12 + 8))(v12);
          *a1 = 0;
          getFilePath();
          if (byte_1EA612A77 < 0)
          {
            *(unsigned char *)getFilePath(void)::file_path = 0;
            qword_1EA612A68 = 0;
          }
          else
          {
            LOBYTE(getFilePath(void)::file_path) = 0;
            byte_1EA612A77 = 0;
          }
        }
      }
    }
    __int16 v12 = *a1;
LABEL_11:
    if (v12)
    {
      __s = 0;
      vasprintf(&__s, a2, &a9);
      uint64_t v13 = *a1;
      size_t v14 = strlen(__s);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)__s, v14);
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
      unsigned int v15 = std::locale::use_facet(&v17, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v17);
      std::ostream::put();
      std::ostream::flush();
      std::ostream::flush();
      free(__s);
    }
  }
}

void AGCLLVMUserShader::~AGCLLVMUserShader(AGCLLVMUserShader *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[5];
  uint64_t v5 = *((void *)this + 538);
  if (v5 != -8192 && v5 != -4096 && v5 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 4288));
  }
  uint64_t v7 = *((void *)this + 535);
  if (v7 != -8192 && v7 != -4096 && v7) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 4264));
  }
  uint64_t v8 = *((void *)this + 532);
  if (v8 != -8192 && v8 != -4096 && v8) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 4240));
  }
  uint64_t v9 = a2[1];
  *(void *)this = v9;
  *(void *)((char *)this + *(void *)(v9 - 24)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[3];
  uint64_t v10 = *((void *)this + 118);
  if (v10)
  {
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*(void **)(v10 + 8));
    MEMORY[0x1CB7A0780](v10, 0x1020C4062D53EE8);
  }
  for (uint64_t i = 0; i != -96; i -= 32)
  {
    if (*((char *)this + i + 4231) < 0) {
      operator delete(*(void **)((char *)this + i + 4208));
    }
  }
  __int16 v12 = (char *)*((void *)this + 484);
  if (v12 != (char *)this + 3888) {
    free(v12);
  }
  uint64_t v13 = *((void *)this + 469);
  if (v13)
  {
    uint64_t v14 = *((void *)this + 470);
    unsigned int v15 = (void *)*((void *)this + 469);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 9) < 0) {
          operator delete(*(void **)(v14 - 32));
        }
        v14 -= 32;
      }
      while (v14 != v13);
      unsigned int v15 = (void *)*((void *)this + 469);
    }
    *((void *)this + 470) = v13;
    operator delete(v15);
  }
  llvm::deallocate_buffer(*((llvm **)this + 454), (void *)(16 * *((unsigned int *)this + 912)));
  uint64_t v16 = (char *)*((void *)this + 449);
  if (v16 != (char *)this + 3608) {
    free(v16);
  }
  if ((*((unsigned char *)this + 3568) & 1) == 0) {
    llvm::deallocate_buffer(*((llvm **)this + 447), (void *)(8 * *((unsigned int *)this + 896)));
  }
  uint64_t v17 = *((void *)this + 444);
  if (v17 != -8192 && v17 != -4096 && v17) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 3536));
  }
  llvm::deallocate_buffer(*((llvm **)this + 439), (void *)(16 * *((unsigned int *)this + 882)));
  llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::destroy_range(*((void *)this + 417), *((void *)this + 417) + 40 * *((unsigned int *)this + 836));
  uint64_t v18 = (char *)*((void *)this + 417);
  if (v18 != (char *)this + 3352) {
    free(v18);
  }
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)this + 3264);
  uint64_t v19 = *((unsigned int *)this + 814);
  uint64_t v20 = (llvm *)*((void *)this + 405);
  if (v19)
  {
    uint64_t v71 = 2;
    uint64_t v72 = 0;
    uint64_t v73 = -4096;
    uint64_t v74 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = &unk_1F25C4600;
    uint64_t v66 = 2;
    uint64_t v67 = 0;
    uint64_t v68 = -8192;
    uint64_t v21 = (uint64_t *)((char *)v20 + 24);
    uint64_t v22 = 48 * v19;
    do
    {
      uint64_t v23 = *v21;
      if (*v21 != -8192 && v23 != -4096 && v23 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v21 - 2));
      }
      v21 += 6;
      v22 -= 48;
    }
    while (v22);
    uint64_t v20 = (llvm *)*((void *)this + 405);
    LODWORD(v19) = *((_DWORD *)this + 814);
  }
  llvm::deallocate_buffer(v20, (void *)(48 * v19));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)this + 403));
  uint64_t v25 = (char *)*((void *)this + 398);
  uint64_t v26 = *((unsigned int *)this + 798);
  if (v26)
  {
    uint64_t v27 = 8 * v26;
    uint64_t v28 = v25 - 8;
    do
    {
      std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>::reset[abi:nn180100]((uint64_t *)&v28[v27]);
      v27 -= 8;
    }
    while (v27);
    uint64_t v25 = (char *)*((void *)this + 398);
  }
  if (v25 != (char *)this + 3200) {
    free(v25);
  }
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)this + 3144);
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)this + 3096);
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)this + 3048);
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)this + 3000);
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)this + 2952);
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)this + 2904);
  uint64_t v29 = (char *)*((void *)this + 359);
  if (v29 != (char *)this + 2888) {
    free(v29);
  }
  uint64_t v30 = *((void *)this + 358);
  if (v30 != -8192 && v30 != -4096 && v30) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2848));
  }
  uint64_t v31 = *((void *)this + 354);
  if (v31 != -8192 && v31 != -4096 && v31) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2816));
  }
  uint64_t v32 = *((void *)this + 351);
  if (v32 != -8192 && v32 != -4096 && v32) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2792));
  }
  uint64_t v33 = *((void *)this + 348);
  if (v33 != -8192 && v33 != -4096 && v33) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2768));
  }
  uint64_t v34 = *((void *)this + 345);
  if (v34 != -8192 && v34 != -4096 && v34) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2744));
  }
  uint64_t v35 = *((void *)this + 342);
  if (v35 != -8192 && v35 != -4096 && v35) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2720));
  }
  uint64_t v36 = *((void *)this + 339);
  if (v36 != -8192 && v36 != -4096 && v36) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2696));
  }
  uint64_t v37 = *((void *)this + 335);
  if (v37 != -8192 && v37 != -4096 && v37) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2664));
  }
  uint64_t v38 = *((void *)this + 331);
  if (v38 != -8192 && v38 != -4096 && v38) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2632));
  }
  uint64_t v39 = *((void *)this + 327);
  if (v39 != -8192 && v39 != -4096 && v39) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2600));
  }
  uint64_t v40 = *((void *)this + 324);
  if (v40 != -8192 && v40 != -4096 && v40) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2576));
  }
  uint64_t v41 = *((void *)this + 321);
  if (v41 != -8192 && v41 != -4096 && v41) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2552));
  }
  uint64_t v42 = *((void *)this + 318);
  if (v42 != -8192 && v42 != -4096 && v42) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2528));
  }
  uint64_t v43 = *((void *)this + 315);
  if (v43 != -8192 && v43 != -4096 && v43) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2504));
  }
  uint64_t v44 = *((void *)this + 312);
  if (v44 != -8192 && v44 != -4096 && v44) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2480));
  }
  uint64_t v45 = *((void *)this + 309);
  if (v45 != -8192 && v45 != -4096 && v45) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2456));
  }
  uint64_t v46 = *((void *)this + 306);
  if (v46 != -8192 && v46 != -4096 && v46) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + 2432));
  }
  for (uint64_t j = 0; j != -72; j -= 24)
  {
    uint64_t v48 = *(void *)((char *)this + j + 2424);
    if (v48 != -8192 && v48 != -4096 && v48 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + j + 2408));
    }
  }
  uint64_t v50 = *((void *)this + 294);
  *((void *)this + 294) = 0;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  for (uint64_t k = 0; k != -256; k -= 64)
  {
    uint64_t v52 = *(void *)((char *)this + k + 2296);
    if (v52 != -8192 && v52 != -4096 && v52 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + k + 2280));
    }
  }
  for (uint64_t m = 0; m != -256; m -= 64)
  {
    uint64_t v55 = *(void *)((char *)this + m + 2040);
    if (v55 != -8192 && v55 != -4096 && v55 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + m + 2024));
    }
  }
  for (uint64_t n = 0; n != -640; n -= 64)
  {
    uint64_t v58 = *(void *)((char *)this + n + 1784);
    if (v58 != -8192 && v58 != -4096 && v58 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserShader *)((char *)this + n + 1768));
    }
  }
  uint64_t v60 = (void *)*((void *)this + 138);
  if (v60 != *((void **)this + 137)) {
    free(v60);
  }
  int v61 = (void *)*((void *)this + 126);
  if (v61 != *((void **)this + 125)) {
    free(v61);
  }
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)this + 123));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)this + 120));
  uint64_t v62 = (void *)*((void *)this + 115);
  if (v62)
  {
    *((void *)this + 116) = v62;
    operator delete(v62);
  }
  BOOL v63 = (void *)*((void *)this + 112);
  if (v63)
  {
    *((void *)this + 113) = v63;
    operator delete(v63);
  }
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)this + 110));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)this + 107));
  std::__tree<llvm::WeakVH>::destroy(*((void **)this + 104));
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)this + 784);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::destroyAll((uint64_t)this + 760);
  llvm::deallocate_buffer(*((llvm **)this + 95), (void *)(48 * *((unsigned int *)this + 194)));
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)this + 720);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::destroyAll((uint64_t)this + 696);
  llvm::deallocate_buffer(*((llvm **)this + 87), (void *)(48 * *((unsigned int *)this + 178)));
  size_t v64 = (char *)*((void *)this + 83);
  if (v64 != (char *)this + 680) {
    free(v64);
  }
  MEMORY[0x1CB79EB30]((char *)this + 232);
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  uint64_t v65 = (char *)*((void *)this + 11);
  if (v65 != (char *)this + 104) {
    free(v65);
  }
}

void std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*a1);
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = v1;
      uint64_t v1 = (void *)*v1;
      uint64_t v3 = v2[5];
      if (v3 != -8192 && v3 != -4096 && v3 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v2 + 3));
      }
      operator delete(v2);
    }
    while (v1);
  }
}

uint64_t llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 16);
    uint64_t v3 = *(llvm **)result;
    if (v2)
    {
      uint64_t v4 = (void *)((char *)v3 + 8);
      uint64_t v5 = 16 * v2;
      do
      {
        if ((*(v4 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (*v4) {
            llvm::MetadataTracking::untrack();
          }
        }
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
      uint64_t v3 = *(llvm **)v1;
      int v6 = (void *)(16 * *(unsigned int *)(v1 + 16));
    }
    else
    {
      int v6 = 0;
    }
    uint64_t result = llvm::deallocate_buffer(v3, v6);
    *(unsigned char *)(v1 + 24) = 0;
  }
  return result;
}

void std::__tree<llvm::WeakVH>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<llvm::WeakVH>::destroy(*a1);
    std::__tree<llvm::WeakVH>::destroy(a1[1]);
    uint64_t v2 = a1[6];
    if (v2 != -8192 && v2 != -4096 && v2 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::destroyAll(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v11 = 2;
    uint64_t v12 = 0;
    uint64_t v13 = -4096;
    uint64_t v14 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = &unk_1F25DA840;
    uint64_t v6 = 2;
    uint64_t v7 = 0;
    uint64_t v8 = -8192;
    uint64_t v2 = 48 * v1;
    uint64_t v3 = (uint64_t *)(*(void *)result + 24);
    do
    {
      uint64_t v4 = *v3;
      if (*v3 != -8192 && v4 != -4096 && v4 != 0) {
        uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v3 - 2));
      }
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::destroyAll(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v11 = 2;
    uint64_t v12 = 0;
    uint64_t v13 = -4096;
    uint64_t v14 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = &unk_1F25C4628;
    uint64_t v6 = 2;
    uint64_t v7 = 0;
    uint64_t v8 = -8192;
    uint64_t v2 = 48 * v1;
    uint64_t v3 = (uint64_t *)(*(void *)result + 24);
    do
    {
      uint64_t v4 = *v3;
      if (*v3 != -8192 && v4 != -4096 && v4 != 0) {
        uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v3 - 2));
      }
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::IntersectionQueryAnalysisGen6::~IntersectionQueryAnalysisGen6(AGCLLVMTargetLowerer::IntersectionQueryAnalysis *a1)
{
  *(void *)a1 = &unk_1F25D9AA8;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)a1 + 9));
  AGCLLVMTargetLowerer::IntersectionQueryAnalysis::~IntersectionQueryAnalysis(a1);
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F25D9AA8;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)a1 + 9));
  AGCLLVMTargetLowerer::IntersectionQueryAnalysis::~IntersectionQueryAnalysis(a1);
}

void AGCLLVMTargetLowerer::IntersectionQueryAnalysis::~IntersectionQueryAnalysis(AGCLLVMTargetLowerer::IntersectionQueryAnalysis *this)
{
  *(void *)this = &unk_1F25CCBB0;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    operator delete(v4);
  }
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = *(void *)v3[3];
    v8[0] = &unk_1F25C5480;
    v8[1] = v6;
    v8[3] = v8;
    v9[0] = &unk_1F25C4B38;
    v9[1] = v5;
    v9[2] = v8;
    v9[3] = v9;
    char v7 = iterateResourceUsers(v4, v9);
    std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v9);
    *(unsigned char *)v3[1] = v7;
    return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](v8);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23>,void ()(llvm::Function *)>::operator()(void *result, llvm::Constant **a2)
{
  void v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)result[1];
  if (*v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *a2;
    uint64_t v5 = v3[2];
    uint64_t v6 = (long long *)v3[3];
    uint64_t v8 = &unk_1F25C6098;
    long long v9 = *v6;
    uint64_t v10 = &v8;
    v11[0] = &unk_1F25C4B38;
    v11[1] = v5;
    v11[2] = &v8;
    v11[3] = v11;
    char v7 = iterateResourceUsers(v4, v11);
    std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v11);
    *(unsigned char *)v3[1] = v7;
    return std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](&v8);
  }
  else
  {
    *uint64_t v2 = 0;
  }
  return result;
}

void *std::__function::__value_func<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C53F0;
  v5[1] = v3;
  v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t iterateResourceUsers(llvm::Constant *this, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    uint64_t v4 = *((void *)this + 1);
    while (v4)
    {
      uint64_t v13 = v17;
      uint64_t v14 = v17;
      uint64_t v15 = 4;
      int v16 = 0;
      uint64_t v5 = *(void *)(v4 + 8);
      uint64_t v6 = *(void *)(v4 + 24);
      if (v6) {
        BOOL v7 = *(unsigned char *)(v6 + 16) == 5;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7)
      {
        for (uint64_t i = *(void *)(v6 + 8); i; uint64_t i = *(void *)(i + 8))
          llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v12, (llvm::SmallPtrSetImplBase *)&v13, *(void **)(i + 24));
      }
      else
      {
        llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v12, (llvm::SmallPtrSetImplBase *)&v13, (void *)v6);
      }
      long long v9 = (void *)a2[3];
      if (v9)
      {
        if (v9 == a2)
        {
          uint64_t v19 = v18;
          (*(void (**)(void *, void *))(*a2 + 24))(a2, v18);
        }
        else
        {
          uint64_t v19 = (void *)(*(uint64_t (**)(void *))(*v9 + 16))(v9);
        }
      }
      else
      {
        uint64_t v19 = 0;
      }
      char v10 = iterateResourceUsers(&v13, (uint64_t)v18);
      std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v18);
      if (v14 != v13) {
        free(v14);
      }
      uint64_t v4 = v5;
      if ((v10 & 1) == 0) {
        return 0;
      }
    }
    llvm::Constant::removeDeadConstantUsers(this);
  }
  return 1;
}

void *std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *llvm::SmallPtrSetImpl<llvm::Function *>::insert(uint64_t a1, llvm::SmallPtrSetImplBase *this, void *a3)
{
  uint64_t result = llvm::SmallPtrSetImplBase::insert_imp(this, a3);
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = 16;
  if (v7 == *(void *)this) {
    uint64_t v8 = 20;
  }
  long long v9 = (void *)(v7 + 8 * *(unsigned int *)((char *)this + v8));
  if (v9 != result)
  {
    while (*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v9)
      {
        uint64_t result = v9;
        break;
      }
    }
  }
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v6;
  return result;
}

void *llvm::SmallPtrSetImplBase::insert_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 != *(void *)this) {
    return (void *)llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
  }
  uint64_t v5 = *((unsigned int *)this + 5);
  if (!v5)
  {
LABEL_12:
    if (v5 < *((_DWORD *)this + 4))
    {
      *((_DWORD *)this + 5) = v5 + 1;
      *(void *)(v2 + 8 * v5) = a2;
      return (void *)(*(void *)this + 8 * v5);
    }
    return (void *)llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
  }
  char v6 = 0;
  uint64_t v7 = 8 * v5;
  uint64_t v3 = (void *)*((void *)this + 1);
  while ((const void *)*v3 != a2)
  {
    if (*v3 == -2) {
      char v6 = v3;
    }
    ++v3;
    v7 -= 8;
    if (!v7)
    {
      if (!v6) {
        goto LABEL_12;
      }
      void *v6 = a2;
      --*((_DWORD *)this + 6);
      return v6;
    }
  }
  return v3;
}

uint64_t iterateResourceUsers(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  if (v3 == *a1) {
    uint64_t v4 = (unsigned int *)a1 + 5;
  }
  else {
    uint64_t v4 = (unsigned int *)(a1 + 2);
  }
  uint64_t v5 = *v4;
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    for (uint64_t i = (uint64_t *)a1[1]; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v6 -= 8;
      if (!v6) {
        return 1;
      }
    }
  }
  else
  {
    uint64_t i = (uint64_t *)a1[1];
  }
  uint64_t v8 = (uint64_t *)(v3 + 8 * v5);
  if (i == v8) {
    return 1;
  }
  uint64_t v9 = *i;
  do
  {
    uint64_t v13 = v9;
    uint64_t v10 = *(void *)(a2 + 24);
    if (!v10)
    {
      ((void (*)(void))std::__throw_bad_function_call[abi:nn180100])();
      JUMPOUT(0x1CAC27950);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v10 + 48))(v10, &v13);
    ++i;
    if (result) {
      BOOL v12 = i == v8;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      break;
    }
    while (1)
    {
      uint64_t v9 = *i;
      if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL) {
        break;
      }
      if (++i == v8) {
        return 1;
      }
    }
  }
  while (i != v8);
  return result;
}

BOOL std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v16, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t v6 = v4 + 16;
  uint64_t v5 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v6;
  do
  {
    unsigned int v9 = *(_DWORD *)(v5 + 32);
    BOOL v10 = v9 >= v16;
    if (v9 >= v16) {
      uint64_t v11 = (uint64_t *)v5;
    }
    else {
      uint64_t v11 = (uint64_t *)(v5 + 8);
    }
    if (v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v11;
  }
  while (*v11);
  if (v8 == v6 || *(_DWORD *)(v8 + 28) > v16) {
LABEL_12:
  }
    uint64_t v8 = v6;
  uint64_t v12 = *(void *)(a1 + 8) + 16;
  if (v12 != v8)
  {
    uint64_t v13 = ((void *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF))[8];
    uint64_t v14 = (void *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u) {
      uint64_t v14 = (void *)*v14;
    }
    std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(*(void *)(*(void *)(a1 + 16) + 24), (uint64_t)v3, *(_DWORD *)(v8 + 36) - *(_DWORD *)(v8 + 28) + *(_DWORD *)v14);
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v3);
  }
  return v12 != v8;
}

AGCArgumentBuffer::Resource::Bounds *AGCArgumentBuffer::Resource::Bounds::Bounds(AGCArgumentBuffer::Resource::Bounds *this, llvm::Constant *a2)
{
  Aggregateuint64_t Element = llvm::Constant::getAggregateElement(a2);
  uint64_t v5 = llvm::Constant::getAggregateElement(a2);
  uint64_t v6 = (void *)(AggregateElement + 24);
  if (*(_DWORD *)(AggregateElement + 32) >= 0x41u) {
    uint64_t v6 = (void *)*v6;
  }
  *(_DWORD *)this = *v6;
  uint64_t v7 = (void *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u) {
    uint64_t v7 = (void *)*v7;
  }
  *((_DWORD *)this + 1) = *v7;
  return this;
}

uint64_t std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a2;
  int v5 = a3;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)a1 + 48))(a1, &v6, &v5);
  }
  uint64_t v4 = ((uint64_t (*)(void))std::__throw_bad_function_call[abi:nn180100])();
  return std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(v4);
}

__n128 std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25C4B38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  int v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    int v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  uint64_t v4 = *(void *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  int v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u) {
    int v5 = *(unsigned int **)v5;
  }
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void IntervalMap<unsigned int>::insert(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int v4 = a2;
  unint64_t v6 = HIDWORD(a2);
  uint64_t v8 = (uint64_t **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    uint64_t v22 = (void **)(a1 + 8);
    goto LABEL_119;
  }
  unsigned int v9 = (void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 16);
  do
  {
    unsigned int v11 = *(_DWORD *)(v10 + 32);
    BOOL v12 = v11 >= a2;
    if (v11 >= a2) {
      uint64_t v13 = (uint64_t *)v10;
    }
    else {
      uint64_t v13 = (uint64_t *)(v10 + 8);
    }
    if (v12) {
      unsigned int v9 = (void *)v10;
    }
    uint64_t v10 = *v13;
  }
  while (*v13);
  uint64_t v14 = (void *)(a1 + 16);
  do
  {
    unsigned int v15 = *(_DWORD *)(v7 + 28);
    BOOL v16 = v15 > HIDWORD(a2);
    if (v15 <= HIDWORD(a2)) {
      uint64_t v17 = (uint64_t *)(v7 + 8);
    }
    else {
      uint64_t v17 = (uint64_t *)v7;
    }
    if (v16) {
      uint64_t v14 = (void *)v7;
    }
    uint64_t v7 = *v17;
  }
  while (*v17);
  if (v9 == v14)
  {
    uint64_t v14 = v9;
  }
  else
  {
    uint64_t v18 = v9;
    do
    {
      unsigned int v19 = *((_DWORD *)v18 + 8);
      if (*((_DWORD *)v18 + 7) < v4) {
        unsigned int v4 = *((_DWORD *)v18 + 7);
      }
      if (v6 <= v19) {
        unint64_t v6 = v19;
      }
      else {
        unint64_t v6 = v6;
      }
      (**(void (***)(uint64_t, uint64_t, void))a1)(a1, a3, *((unsigned int *)v18 + 9));
      uint64_t v20 = (void *)v18[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (void *)v18[2];
          BOOL v46 = *v21 == (void)v18;
          uint64_t v18 = v21;
        }
        while (!v46);
      }
      uint64_t v18 = v21;
    }
    while (v21 != v14);
  }
  uint64_t v22 = (void **)(a1 + 8);
  if (v9 == v14) {
    goto LABEL_118;
  }
  do
  {
    uint64_t v23 = v9;
    uint64_t v24 = (void *)v9[1];
    uint64_t v25 = v9;
    if (v24)
    {
      do
      {
        unsigned int v9 = v24;
        uint64_t v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        unsigned int v9 = (void *)v25[2];
        BOOL v46 = *v9 == (void)v25;
        uint64_t v25 = v9;
      }
      while (!v46);
    }
    if (*v22 == v23) {
      *uint64_t v22 = v9;
    }
    uint64_t v26 = *(void **)(a1 + 16);
    --*(void *)(a1 + 24);
    uint64_t v27 = *v23;
    uint64_t v28 = v23;
    if (*v23)
    {
      uint64_t v29 = (void *)v23[1];
      if (!v29)
      {
        uint64_t v28 = v23;
LABEL_47:
        int v30 = 0;
        *(void *)(v27 + 16) = v28[2];
        goto LABEL_48;
      }
      do
      {
        uint64_t v28 = v29;
        uint64_t v29 = (void *)*v29;
      }
      while (v29);
    }
    uint64_t v27 = v28[1];
    if (v27) {
      goto LABEL_47;
    }
    int v30 = 1;
LABEL_48:
    uint64_t v31 = (void *)v28[2];
    uint64_t v32 = (void *)*v31;
    if ((void *)*v31 == v28)
    {
      void *v31 = v27;
      if (v28 == v26)
      {
        uint64_t v32 = 0;
        uint64_t v26 = (void *)v27;
      }
      else
      {
        uint64_t v32 = (void *)v31[1];
      }
    }
    else
    {
      v31[1] = v27;
    }
    int v33 = *((unsigned __int8 *)v28 + 24);
    if (v28 != v23)
    {
      uint64_t v34 = v23[2];
      v28[2] = v34;
      *(void *)(v34 + 8 * (*(void *)v23[2] != (void)v23)) = v28;
      uint64_t v36 = *v23;
      uint64_t v35 = v23[1];
      *(void *)(v36 + 16) = v28;
      *uint64_t v28 = v36;
      v28[1] = v35;
      if (v35) {
        *(void *)(v35 + 16) = v28;
      }
      *((unsigned char *)v28 + 24) = *((unsigned char *)v23 + 24);
      if (v26 == v23) {
        uint64_t v26 = v28;
      }
    }
    if (!v33 || !v26) {
      goto LABEL_112;
    }
    if (!v30)
    {
      *(unsigned char *)(v27 + 24) = 1;
      goto LABEL_112;
    }
    while (1)
    {
      uint64_t v37 = v32[2];
      if (*(void **)v37 != v32) {
        break;
      }
      if (!*((unsigned char *)v32 + 24))
      {
        *((unsigned char *)v32 + 24) = 1;
        *(unsigned char *)(v37 + 24) = 0;
        uint64_t v43 = v32[1];
        *(void *)uint64_t v37 = v43;
        if (v43) {
          *(void *)(v43 + 16) = v37;
        }
        v32[2] = *(void *)(v37 + 16);
        *(void *)(*(void *)(v37 + 16) + 8 * (**(void **)(v37 + 16) != v37)) = v32;
        v32[1] = v37;
        *(void *)(v37 + 16) = v32;
        if (v26 == (void *)v37) {
          uint64_t v26 = v32;
        }
        uint64_t v32 = *(void **)v37;
      }
      uint64_t v44 = (unsigned char *)*v32;
      if (*v32 && !v44[24]) {
        goto LABEL_107;
      }
      uint64_t v45 = (uint64_t *)v32[1];
      if (v45 && !*((unsigned char *)v45 + 24))
      {
        if (v44 && !v44[24])
        {
LABEL_107:
          uint64_t v45 = v32;
        }
        else
        {
          *((unsigned char *)v45 + 24) = 1;
          *((unsigned char *)v32 + 24) = 0;
          uint64_t v51 = *v45;
          v32[1] = *v45;
          if (v51) {
            *(void *)(v51 + 16) = v32;
          }
          v45[2] = v32[2];
          *(void *)(v32[2] + 8 * (*(void *)v32[2] != (void)v32)) = v45;
          *uint64_t v45 = (uint64_t)v32;
          v32[2] = v45;
          uint64_t v44 = v32;
        }
        uint64_t v48 = v45[2];
        *((unsigned char *)v45 + 24) = *(unsigned char *)(v48 + 24);
        *(unsigned char *)(v48 + 24) = 1;
        v44[24] = 1;
        uint64_t v49 = *(uint64_t **)v48;
        uint64_t v52 = *(void *)(*(void *)v48 + 8);
        *(void *)uint64_t v48 = v52;
        if (v52) {
          *(void *)(v52 + 16) = v48;
        }
        v49[2] = *(void *)(v48 + 16);
        *(void *)(*(void *)(v48 + 16) + 8 * (**(void **)(v48 + 16) != v48)) = v49;
        v49[1] = v48;
        goto LABEL_111;
      }
      *((unsigned char *)v32 + 24) = 0;
      uint64_t v42 = (unsigned char *)v32[2];
      if (v42[24]) {
        BOOL v46 = v42 == (unsigned char *)v26;
      }
      else {
        BOOL v46 = 1;
      }
      if (v46) {
        goto LABEL_92;
      }
LABEL_89:
      uint64_t v32 = *(void **)(*((void *)v42 + 2) + 8 * (**((void **)v42 + 2) == (void)v42));
    }
    if (!*((unsigned char *)v32 + 24))
    {
      *((unsigned char *)v32 + 24) = 1;
      *(unsigned char *)(v37 + 24) = 0;
      uint64_t v38 = *(uint64_t **)(v37 + 8);
      uint64_t v39 = *v38;
      *(void *)(v37 + 8) = *v38;
      if (v39) {
        *(void *)(v39 + 16) = v37;
      }
      v38[2] = *(void *)(v37 + 16);
      *(void *)(*(void *)(v37 + 16) + 8 * (**(void **)(v37 + 16) != v37)) = v38;
      *uint64_t v38 = v37;
      *(void *)(v37 + 16) = v38;
      if (v26 == (void *)*v32) {
        uint64_t v26 = v32;
      }
      uint64_t v32 = *(void **)(*v32 + 8);
    }
    uint64_t v40 = (void *)*v32;
    if (!*v32 || *((unsigned char *)v40 + 24))
    {
      uint64_t v41 = (void *)v32[1];
      if (v41 && !*((unsigned char *)v41 + 24)) {
        goto LABEL_98;
      }
      *((unsigned char *)v32 + 24) = 0;
      uint64_t v42 = (unsigned char *)v32[2];
      if (v42 == (unsigned char *)v26)
      {
        uint64_t v42 = v26;
LABEL_92:
        v42[24] = 1;
        goto LABEL_112;
      }
      if (!v42[24]) {
        goto LABEL_92;
      }
      goto LABEL_89;
    }
    uint64_t v41 = (void *)v32[1];
    if (v41 && !*((unsigned char *)v41 + 24))
    {
LABEL_98:
      uint64_t v40 = v32;
    }
    else
    {
      *((unsigned char *)v40 + 24) = 1;
      *((unsigned char *)v32 + 24) = 0;
      uint64_t v47 = v40[1];
      *uint64_t v32 = v47;
      if (v47) {
        *(void *)(v47 + 16) = v32;
      }
      v40[2] = v32[2];
      *(void *)(v32[2] + 8 * (*(void *)v32[2] != (void)v32)) = v40;
      v40[1] = v32;
      v32[2] = v40;
      uint64_t v41 = v32;
    }
    uint64_t v48 = v40[2];
    *((unsigned char *)v40 + 24) = *(unsigned char *)(v48 + 24);
    *(unsigned char *)(v48 + 24) = 1;
    *((unsigned char *)v41 + 24) = 1;
    uint64_t v49 = *(uint64_t **)(v48 + 8);
    uint64_t v50 = *v49;
    *(void *)(v48 + 8) = *v49;
    if (v50) {
      *(void *)(v50 + 16) = v48;
    }
    v49[2] = *(void *)(v48 + 16);
    *(void *)(*(void *)(v48 + 16) + 8 * (**(void **)(v48 + 16) != v48)) = v49;
    *uint64_t v49 = v48;
LABEL_111:
    *(void *)(v48 + 16) = v49;
LABEL_112:
    operator delete(v23);
  }
  while (v9 != v14);
LABEL_118:
  while (1)
  {
    char v53 = *v8;
    if (!*v8) {
      break;
    }
    while (1)
    {
      uint64_t v8 = (uint64_t **)v53;
      if (v6 < *((_DWORD *)v53 + 7)) {
        break;
      }
      if (*((_DWORD *)v53 + 8) >= v4) {
        return;
      }
      unint64_t v54 = (uint64_t **)(v53 + 1);
      char v53 = (uint64_t *)v53[1];
      if (!v53) {
        goto LABEL_120;
      }
    }
  }
LABEL_119:
  unint64_t v54 = v8;
LABEL_120:
  uint64_t v55 = (char *)operator new(0x28uLL);
  *(void *)(v55 + 28) = v4 | (v6 << 32);
  *((_DWORD *)v55 + 9) = a3;
  *(void *)uint64_t v55 = 0;
  *((void *)v55 + 1) = 0;
  *((void *)v55 + 2) = v8;
  *unint64_t v54 = (uint64_t *)v55;
  uint64_t v56 = (void *)**v22;
  if (v56)
  {
    *uint64_t v22 = v56;
    uint64_t v57 = *v54;
  }
  else
  {
    uint64_t v57 = (uint64_t *)v55;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v57);
  ++*(void *)(a1 + 24);
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), *a2);
  unsigned int v4 = (llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40);
  int v5 = (llvm::Value *)*((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  unint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v17 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v16);
  uint64_t v8 = *v3;
  unsigned int v9 = (char *)v3 + *(void *)(*v3 - 24);
  if (!*(_DWORD *)(*((void *)v9 + 50) + 1780))
  {
    uint64_t v10 = (llvm::IRBuilderBase *)(v9 + 40);
    unsigned int v11 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v17 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v10, Add, v11, (const llvm::Twine *)v16);
    uint64_t v8 = *v3;
  }
  uint64_t v12 = (uint64_t)v3 + *(void *)(v8 - 24) + 40;
  uint64_t v13 = *(void *)v2;
  __int16 v17 = 257;
  uint64_t Cast = (void *)llvm::IRBuilderBase::CreateCast(v12, 48, (uint64_t)Add, v13, (uint64_t)v16);
  if (llvm::SmallPtrSetImplBase::erase_imp((llvm::SmallPtrSetImplBase *)(v3 + 125), v2)) {
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v16, (llvm::SmallPtrSetImplBase *)(v3 + 125), Cast);
  }
  return Cast;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40), *a2);
  unsigned int v4 = (llvm::IRBuilderBase *)((char *)v3 + *(void *)(*v3 - 24) + 40);
  int v5 = (llvm::Value *)*((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  unint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v12 = 257;
  uint64_t Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v11);
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 - 24) + 40;
  uint64_t v9 = *(void *)v2;
  __int16 v12 = 257;
  return llvm::IRBuilderBase::CreateCast(v8, 48, Add, v9, (uint64_t)v11);
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C6008;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25C53F0;
  a2[1] = v2;
  return result;
}

BOOL llvm::SmallPtrSetImplBase::erase_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  imp = llvm::SmallPtrSetImplBase::find_imp(this, a2);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = 16;
  if (v4 == *(void *)this) {
    uint64_t v5 = 20;
  }
  unint64_t v6 = (const void **)(v4 + 8 * *(unsigned int *)((char *)this + v5));
  if (imp != v6)
  {
    *imp = (const void *)-2;
    ++*((_DWORD *)this + 6);
  }
  return imp != v6;
}

uint64_t AGCLLVMUserObject::buildBindlessIndexAsPtr(AGCLLVMUserObject *this, llvm::Value *a2)
{
  uint64_t result = AGCLLVMUserObject::buildBindlessIndex(this, a2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = llvm::PointerType::get();
    unint64_t v6 = (char *)this + *(void *)(*(void *)this - 24) + 40;
    uint64_t v7 = "bindless_index_as_ptr";
    __int16 v8 = 259;
    return llvm::IRBuilderBase::CreateCast((uint64_t)v6, 48, v4, v5, (uint64_t)&v7);
  }
  return result;
}

uint64_t AGCLLVMUserObject::buildSamplerArgumentPointer(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  BOOL v9 = MGGetBoolAnswer()
    && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_CS_SAMPLERS", v6)) != 0
    && *Value != 48
    && atoi(Value)
    || (uint64_t v8 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400), *(_DWORD *)(v8 + 1780))
    || *(unsigned char *)(v8 + 1772) == 0;
  DirectImageGlobalValue = (llvm::Type **)AGCLLVMUserObject::getDirectImageGlobalValue(a2, (llvm::Value *)v6);
  if (DirectImageGlobalValue)
  {
    __int16 v12 = DirectImageGlobalValue;
    if (*((unsigned char *)*DirectImageGlobalValue + 8) != 13)
    {
      if (*((unsigned char *)DirectImageGlobalValue + 16) == 9) {
        uint64_t v13 = DirectImageGlobalValue;
      }
      else {
        uint64_t v13 = 0;
      }
      __int16 v12 = (llvm::Type **)*(&v13[4 * a3] - 4 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF));
    }
    if (a3 != 2) {
      return (uint64_t)v12;
    }
    uint64_t v14 = (uint64_t)a1 + *(void *)(*a1 - 24);
    __int16 v45 = 257;
    unsigned int v15 = AGCLLVMBuilder::tryDeducePointeeType(v12, v11);
    return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v14 + 40), v15, (uint64_t)v12, 0, (uint64_t)v44);
  }
  if (*((unsigned char *)a1 + 15))
  {
    BOOL v17 = !v9;
    if (a3 != 2) {
      BOOL v17 = 0;
    }
    if (!v17)
    {
      uint64_t v18 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v19 = v18 + 40;
      uint64_t v20 = v18 + 32;
      if (a3 != 2)
      {
        uint64_t v21 = llvm::PointerType::get();
        __int16 v45 = 257;
        uint64_t v22 = v19;
        uint64_t v23 = 50;
LABEL_37:
        uint64_t v40 = a2;
        return llvm::IRBuilderBase::CreateCast(v22, v23, v40, v21, (uint64_t)v44);
      }
      uint64_t v21 = *(void *)(v20 + 208);
      __int16 v45 = 257;
      uint64_t v22 = v19;
LABEL_36:
      uint64_t v23 = 47;
      goto LABEL_37;
    }
  }
  if (*(_DWORD *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 1780))
  {
    if (!a1[309]) {
      AGCLLVMUserObject::createSamplerHeapGlobal((AGCLLVMUserObject *)a1);
    }
    if (a3 != 2)
    {
      if (a3 == 3)
      {
        uint64_t v24 = (uint64_t *)a1[255];
        uint64_t v25 = a1[259];
        uint64_t v26 = (uint64_t)a1 + *(void *)(*a1 - 24);
        uint64_t v27 = *(void *)(v26 + 224);
        __int16 v45 = 257;
        uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v26 + 40, 47, a2, v27, (uint64_t)v44);
        uint64_t v29 = *a1;
        if (*((unsigned char *)a1 + 3696))
        {
          uint64_t v30 = (uint64_t)a1 + *(void *)(v29 - 24);
          uint64_t v31 = *(void *)(v30 + 400);
          if (!*(_DWORD *)(v31 + 1780))
          {
            uint64_t v32 = (llvm::IRBuilderBase *)(v30 + 40);
            TypeAllocSize = (uint64_t *)llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(a1 + 29), *(llvm::Type **)(v31 + 1680));
            uint64_t v47 = v33;
            llvm::TypeSize::operator unsigned long long();
            uint64_t v34 = (llvm::Value *)llvm::ConstantInt::get();
            __int16 v45 = 257;
            uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v32, Cast, v34, (const llvm::Twine *)v44);
            uint64_t v29 = *a1;
          }
        }
        uint64_t v35 = (uint64_t)a1 + *(void *)(v29 - 24);
        TypeAllocSize = (uint64_t *)llvm::ConstantInt::get();
        uint64_t v47 = Cast;
        __int16 v45 = 257;
        return llvm::IRBuilderBase::CreateGEP(v35 + 40, v25, v24, &TypeAllocSize, 2, (uint64_t)v44);
      }
      uint64_t v41 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
      uint64_t v42 = a1[309];
      uint64_t v21 = llvm::PointerType::get();
      __int16 v45 = 257;
      uint64_t v22 = v41;
      uint64_t v23 = 49;
      uint64_t v40 = v42;
      return llvm::IRBuilderBase::CreateCast(v22, v23, v40, v21, (uint64_t)v44);
    }
    uint64_t v39 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v22 = v39 + 40;
    uint64_t v21 = *(void *)(v39 + 240);
    __int16 v45 = 257;
    goto LABEL_36;
  }
  uint64_t v36 = &a1[8 * (unint64_t)a3];
  uint64_t v37 = v36[231];
  uint64_t v38 = v36[263];
  if (v37)
  {
    if (v38)
    {
      llvm::BasicBlock::splitBasicBlock();
      v44[0] = "non_constant_sampler";
      __int16 v45 = 259;
      operator new();
    }
    goto LABEL_46;
  }
  if (!v38)
  {
LABEL_46:
    return AGCLLVMUserObject::buildNonConstantSamplerArgumentPointer(a1, a2, a3);
  }
  return AGCLLVMUserObject::buildConstantSamplerArgumentPointer(a1, a2, a3);
}

uint64_t AGCLLVMUserObject::buildImageArgumentPointer(unsigned char *a1, AGCLLVMUserObject *this, unsigned int a3)
{
  v41[2] = *MEMORY[0x1E4F143B8];
  uint64_t DirectImageGlobalValue = AGCLLVMUserObject::getDirectImageGlobalValue((uint64_t)this, this);
  if (DirectImageGlobalValue) {
    return *(void *)(DirectImageGlobalValue - 32 * (*(_DWORD *)(DirectImageGlobalValue + 20) & 0x7FFFFFF) + 32 * a3);
  }
  if (a3 <= 7)
  {
    uint64_t v8 = AGCLLVMUserObject::buildBindlessIndex((AGCLLVMUserObject *)a1, this);
    if (v8) {
      goto LABEL_6;
    }
  }
  uint64_t v9 = *(void *)(*(void *)a1 - 24);
  if (!*(unsigned char *)(*(void *)&a1[v9 + 400] + 1755) && (a3 > 8 || ((1 << a3) & 0x103) == 0))
  {
    uint64_t v8 = AGCLLVMUserObject::buildImageHeapIndex((AGCLLVMUserObject *)a1, this);
LABEL_6:
    return AGCLLVMUserObject::buildBindlessImageArgumentPointer(a1, v8, a3);
  }
  unint64_t v10 = (unint64_t)&a1[64 * (unint64_t)a3 + 1192];
  unsigned int v11 = *(uint64_t **)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)(v10 + 48);
    uint64_t v13 = *(void *)&a1[v9 + 232];
    __int16 v37 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)&a1[v9 + 40], 47, (uint64_t)this, v13, (uint64_t)v36);
    if (a3 == 1)
    {
      unsigned int v15 = (llvm::IRBuilderBase *)&a1[*(void *)(*(void *)a1 - 24) + 40];
      BOOL v16 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v37 = 257;
      uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v15, Cast, v16, (const llvm::Twine *)v36);
    }
    BOOL v17 = &a1[*(void *)(*(void *)a1 - 24)];
    uint64_t v18 = *((void *)v17 + 28);
    __int16 v37 = 257;
    UDiv = (unsigned __int8 *)llvm::IRBuilderBase::CreateCast((uint64_t)(v17 + 40), 38, (uint64_t)Cast, v18, (uint64_t)v36);
    uint64_t v20 = *(void *)a1;
    if (a1[3566])
    {
      uint64_t v21 = &a1[*(void *)(v20 - 24)];
      uint64_t v22 = *((void *)v21 + 50);
      if (!*(_DWORD *)(v22 + 1780))
      {
        uint64_t v23 = (llvm::IRBuilderBase *)(v21 + 40);
        TypeAllocSize = (uint64_t *)llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(a1 + 232), *(llvm::Type **)(v22 + 1672));
        uint64_t v39 = v24;
        llvm::TypeSize::operator unsigned long long();
        uint64_t v25 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v37 = 257;
        UDiv = (unsigned __int8 *)llvm::IRBuilderBase::CreateUDiv(v23, (llvm::Value *)UDiv, v25, (const llvm::Twine *)v36);
        uint64_t v20 = *(void *)a1;
      }
    }
    uint64_t v26 = (uint64_t)&a1[*(void *)(v20 - 24) + 32];
    if (a3 > 1 || UDiv[16] < 0x15u)
    {
      TypeAllocSize = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v39 = UDiv;
      __int16 v37 = 257;
      return llvm::IRBuilderBase::CreateGEP(v26 + 8, v12, v11, &TypeAllocSize, 2, (uint64_t)v36);
    }
    else
    {
      uint64_t v27 = llvm::PointerType::get();
      uint64_t v28 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)&a1[*(void *)(*(void *)a1 - 24) + 32], (uint64_t)"llvm.agx.textureState", 21, v27, v27, *(void *)&a1[*(void *)(*(void *)a1 - 24) + 240]);
      uint64_t v29 = (uint64_t)&a1[*(void *)(*(void *)a1 - 24) + 40];
      __int16 v37 = 257;
      v41[0] = llvm::IRBuilderBase::CreateCast(v29, 49, (uint64_t)v11, v27, (uint64_t)v36);
      uint64_t v30 = &a1[*(void *)(*(void *)a1 - 24)];
      uint64_t v31 = *((void *)v30 + 30);
      __int16 v40 = 257;
      v41[1] = llvm::IRBuilderBase::CreateCast((uint64_t)(v30 + 40), 39, (uint64_t)UDiv, v31, (uint64_t)&TypeAllocSize);
      v35[16] = 257;
      uint64_t v32 = llvm::IRBuilderBase::CreateCall(v29, *(void *)(v28 + 24), v28, (uint64_t)v41, 2, (uint64_t)v35);
      uint64_t v33 = (uint64_t)&a1[*(void *)(*(void *)a1 - 24) + 40];
      uint64_t v34 = llvm::PointerType::get();
      __int16 v37 = 257;
      return llvm::IRBuilderBase::CreateCast(v33, 49, (uint64_t)v32, v34, (uint64_t)v36);
    }
  }
  else
  {
    llvm::PointerType::get();
    return llvm::UndefValue::get();
  }
}

uint64_t AGCLLVMUserObject::getDirectImageGlobalValue(uint64_t this, llvm::Value *a2)
{
  if (!this) {
    return this;
  }
  uint64_t v2 = this;
  while (1)
  {
    unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
    if (v3 <= 0x1B) {
      break;
    }
    if (v3 != 77) {
      return 0;
    }
LABEL_8:
    int v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0) {
      uint64_t v5 = *(uint64_t **)(v2 - 8);
    }
    else {
      uint64_t v5 = (uint64_t *)(v2 - 32 * (v4 & 0x7FFFFFF));
    }
    uint64_t v2 = *v5;
    if (!*v5) {
      return 0;
    }
  }
  if (v3 == 5)
  {
    if (*(_WORD *)(v2 + 18) != 49) {
      return 0;
    }
    goto LABEL_8;
  }
  if (v3 != 3 || (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v2) & 1) != 0) {
    return 0;
  }
  return *(void *)(v2 - 32);
}

uint64_t AGCLLVMUserObject::buildBindlessIndex(AGCLLVMUserObject *this, llvm::Value *a2)
{
  imp = llvm::SmallPtrSetImplBase::find_imp((AGCLLVMUserObject *)((char *)this + 1000), a2);
  uint64_t v5 = *((void *)this + 126);
  uint64_t v6 = 1016;
  if (v5 == *((void *)this + 125)) {
    uint64_t v6 = 1020;
  }
  if (imp == (const void **)(v5 + 8 * *(unsigned int *)((char *)this + v6))) {
    return 0;
  }
  uint64_t v7 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v8 = *((void *)v7 + 29);
  unint64_t v10 = "bindless_index";
  __int16 v11 = 259;
  return llvm::IRBuilderBase::CreateCast((uint64_t)(v7 + 40), 47, (uint64_t)a2, v8, (uint64_t)&v10);
}

const void **llvm::SmallPtrSetImplBase::find_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v4 = (const void **)*((void *)this + 1);
  if (v4 == *(const void ***)this)
  {
    uint64_t v8 = *((unsigned int *)this + 5);
    uint64_t result = &v4[v8];
    if (v8)
    {
      uint64_t v9 = 8 * v8;
      while (*v4 != a2)
      {
        ++v4;
        v9 -= 8;
        if (!v9) {
          return result;
        }
      }
      return v4;
    }
  }
  else
  {
    uint64_t result = (const void **)llvm::SmallPtrSetImplBase::FindBucketFor(this, a2);
    if (*result != a2)
    {
      uint64_t v6 = *((void *)this + 1);
      uint64_t v7 = 16;
      if (v6 == *(void *)this) {
        uint64_t v7 = 20;
      }
      return (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v7));
    }
  }
  return result;
}

BOOL AGCLLVMUserObject::allocateTexturesAndSamplers(AGCLLVMUserObject *this)
{
  uint64_t v1 = this;
  uint64_t v289 = *MEMORY[0x1E4F143B8];
  AGCLLVMUserObject::getSampleFunctionMap(this);
  AGCLLVMUserObject::getDimensionFunctionMap(v2);
  AGCLLVMUserObject::getIsNullTextureFunctionSet(v3);
  AGCLLVMUserObject::getUniqueIDFunctionSet(v4);
  AGCLLVMUserObject::getTextureAtomicFunctionSet(v5);
  int v214 = (uint64_t *)v218;
  size_t v215 = (uint64_t *)v218;
  uint64_t v216 = 8;
  int v217 = 0;
  int v6 = (*(uint64_t (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 64))((char *)v1 + *(void *)(*(void *)v1 - 24));
  int v189 = v6;
  if (*((unsigned char *)v1 + 15)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 29;
  }
  int v8 = v7;
  int v196 = v8;
  BOOL v11 = MGGetBoolAnswer()
     && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_CS_SAMPLERS", v9)) != 0
     && *Value != 48
     && atoi(Value)
     || *(_DWORD *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 1780) != 0;
  BOOL v192 = v11;
  BOOL v14 = MGGetBoolAnswer()
     && (uint64_t v13 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_FORCE_BINDLESS", v12)) != 0
     && *v13 != 48
     && atoi(v13)
     || *(_DWORD *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 1780) != 0;
  BOOL v191 = v14;
  BOOL v193 = 0;
  if (MGGetBoolAnswer())
  {
    BOOL v16 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_FORCE_BINDLESS_HEAP", v15);
    if (v16)
    {
      if (*v16 != 48 && atoi(v16)) {
        BOOL v193 = 1;
      }
    }
  }
  int v195 = *((_DWORD *)v1 + 829);
  int v194 = *((_DWORD *)v1 + 832);
  uint64_t v17 = *(void *)v1;
  uint64_t v18 = *(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 368);
  uint64_t v19 = v18 + 24;
  uint64_t v20 = *(void *)(v18 + 32);
  long long v198 = (char *)v1 + 368;
  long long v200 = v1;
  if (v20 != v18 + 24)
  {
    int v197 = 0;
    char v21 = 0;
    unint64_t v199 = (_DWORD *)((char *)v1 + 3568);
    uint64_t v22 = &AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map;
    while (1)
    {
      uint64_t v23 = v20 - 56;
      BOOL v7 = v20 == 0;
      uint64_t v20 = *(void *)(v20 + 8);
      uint64_t v24 = v7 ? 0 : v23;
      llvm::Value::getName((llvm::Value *)v24);
      int Key = llvm::StringMapImpl::FindKey();
      BOOL v26 = Key == -1 || dword_1EBD0EA80 == (uint64_t)Key;
      BOOL v27 = !v26;
      llvm::Value::getName((llvm::Value *)v24);
      int v28 = llvm::StringMapImpl::FindKey();
      if (v28 != -1 && v28 != (unint64_t)*((unsigned int *)v22 + 2)) {
        break;
      }
      llvm::Value::getName((llvm::Value *)v24);
      int v36 = llvm::StringMapImpl::FindKey();
      if (v36 != -1 && v36 != (unint64_t)dword_1EBD0EAA0
        || (llvm::Value::getName((llvm::Value *)v24), int v37 = llvm::StringMapImpl::FindKey(), v37 != -1)
        && v37 != (unint64_t)dword_1EBD0EAE0
        || (llvm::Value::getName((llvm::Value *)v24), int v38 = llvm::StringMapImpl::FindKey(), v38 != -1)
        && v38 != (unint64_t)dword_1EBD0EA80
        && (std::string __p = (void *)llvm::Value::getName((llvm::Value *)v24), *(void *)v232 = v39, llvm::StringRef::find() == -1))
      {
        if (*(_WORD *)(v24 + 18)) {
          llvm::Function::BuildLazyArguments((llvm::Function *)v24);
        }
        std::string __p = **(void ***)(v24 + 88);
        uint64_t v43 = __p;
        llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(v199, (uint64_t *)&__p);
        if (v43 && *((unsigned char *)v43 + 8) == 15)
        {
          size_t v237 = (void *)**((void **)v43 + 2);
          llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(v199, (uint64_t *)&v237);
        }
        uint64_t v32 = 0;
        goto LABEL_72;
      }
      llvm::Value::getName((llvm::Value *)v24);
      int v40 = llvm::StringMapImpl::FindKey();
      if (v40 != -1 && v40 != (unint64_t)dword_1EBD0E030)
      {
        if (*(_WORD *)(v24 + 18)) {
          llvm::Function::BuildLazyArguments((llvm::Function *)v24);
        }
        std::string __p = **(void ***)(v24 + 88);
        uint64_t v41 = __p;
        llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(v199, (uint64_t *)&__p);
        if (v41 && *((unsigned char *)v41 + 8) == 15)
        {
          size_t v237 = (void *)**((void **)v41 + 2);
          llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(v199, (uint64_t *)&v237);
        }
        if ((*(void *)(v24 + 8) != 0) | v197 & 1)
        {
          uint64_t v42 = *(void *)(*(void *)v200 - 24);
          if (!*(unsigned char *)(*(void *)&v198[v42 + 32] + 1795))
          {
            std::string::append((std::string *)((char *)v200 + v42 + 8), "Texture atomics not supported on device architecture.");
            BOOL v129 = 0;
            goto LABEL_349;
          }
          uint64_t v32 = 0;
          int v197 = 1;
        }
        else
        {
          uint64_t v32 = 0;
          int v197 = 0;
        }
        goto LABEL_72;
      }
LABEL_74:
      v21 |= v27;
      if (v20 == v19)
      {
        uint64_t v1 = v200;
        uint64_t v17 = *(void *)v200;
        goto LABEL_78;
      }
    }
    uint64_t v29 = v19;
    uint64_t v30 = v22;
    uint64_t v31 = *(void *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map + 8 * v28);
    uint64_t v32 = *(unsigned __int8 *)(v31 + 38);
    unsigned int v33 = *(unsigned __int8 *)(v31 + 39);
    if (*(_WORD *)(v24 + 18)) {
      llvm::Function::BuildLazyArguments((llvm::Function *)v24);
    }
    std::string __p = *(void **)(*(void *)(v24 + 88) + 40 * v32);
    uint64_t v34 = __p;
    llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(v199, (uint64_t *)&__p);
    if (v34) {
      BOOL v35 = *((unsigned char *)v34 + 8) == 15;
    }
    else {
      BOOL v35 = 0;
    }
    if (v35)
    {
      size_t v237 = (void *)**((void **)v34 + 2);
      llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(v199, (uint64_t *)&v237);
    }
    if (*(_WORD *)(v24 + 18)) {
      llvm::Function::BuildLazyArguments((llvm::Function *)v24);
    }
    *((void *)v200 + 453) = *(void *)(*(void *)(v24 + 88) + 40 * v33);
    uint64_t v22 = v30;
    uint64_t v19 = v29;
LABEL_72:
    for (uint64_t i = *(void *)(v24 + 8); i; uint64_t i = *(void *)(i + 8))
      llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__p, (llvm::SmallPtrSetImplBase *)&v214, *(void **)(*(void *)(i + 24) - 32 * (*(_DWORD *)(*(void *)(i + 24) + 20) & 0x7FFFFFF) + 32 * v32));
    goto LABEL_74;
  }
  char v21 = 0;
  int v197 = 0;
LABEL_78:
  uint64_t v45 = *(void *)((char *)v1 + *(void *)(v17 - 24) + 368);
  uint64_t v46 = v45 + 24;
  uint64_t v47 = *(void *)(v45 + 32);
  if (v47 != v45 + 24)
  {
    int v48 = 0;
    int v49 = 0;
    while (1)
    {
      uint64_t v50 = v47 - 56;
      if (!v47) {
        uint64_t v50 = 0;
      }
      uint64_t v51 = v50 + 72;
      for (uint64_t j = *(void *)(v50 + 80); j != v51; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v53 = j - 24;
        if (!j) {
          uint64_t v53 = 0;
        }
        uint64_t v54 = *(void *)(v53 + 48);
        if (v54 != v53 + 40)
        {
          while (1)
          {
LABEL_117:
            if (j == v51) {
              goto LABEL_118;
            }
            uint64_t v55 = (uint64_t *)(v54 - 24);
            if (v54) {
              uint64_t v56 = v54 - 24;
            }
            else {
              uint64_t v56 = 0;
            }
            int v57 = *(unsigned __int8 *)(v56 + 16);
            if (v54 && v57 == 60) {
              goto LABEL_93;
            }
            if (v54 && v57 == 77)
            {
              uint64_t v58 = **(void **)(v56 - 32);
              unsigned int v59 = *(_DWORD *)(v58 + 8);
              if (v59 == 15) {
                goto LABEL_99;
              }
              goto LABEL_104;
            }
            if (v54 && v57 == 75)
            {
LABEL_93:
              uint64_t v55 = *(uint64_t **)(v56 - 32);
            }
            else if (!v54 || v57 != 76)
            {
              goto LABEL_104;
            }
            uint64_t v58 = *v55;
            if (v58)
            {
              unsigned int v59 = *(_DWORD *)(v58 + 8);
LABEL_99:
              if ((v59 >> 8) - 1 <= 1)
              {
                unsigned int isTextureOrSamplerType = AGCLLVMUserObject::isTextureOrSamplerType(v200, **(llvm::Type ***)(v58 + 16));
                v48 |= isTextureOrSamplerType & 1;
                v49 |= (isTextureOrSamplerType >> 8) & 1;
                if ((!*((_DWORD *)v200 + 900) || v48) && (!*((void *)v200 + 453) || v49)) {
                  goto LABEL_121;
                }
              }
            }
LABEL_104:
            uint64_t v54 = *(void *)(v54 + 8);
            uint64_t v61 = j - 24;
            if (!j) {
              uint64_t v61 = 0;
            }
            if (v54 == v61 + 40)
            {
              while (1)
              {
                uint64_t j = *(void *)(j + 8);
                if (j == v51) {
                  goto LABEL_118;
                }
                uint64_t v62 = j - 24;
                if (!j) {
                  uint64_t v62 = 0;
                }
                uint64_t v54 = *(void *)(v62 + 48);
                if (v54 != v62 + 40) {
                  goto LABEL_117;
                }
              }
            }
          }
        }
      }
LABEL_118:
      uint64_t v47 = *(void *)(v47 + 8);
      if (v47 == v46) {
        goto LABEL_121;
      }
    }
  }
  int v49 = 0;
  LOBYTE(v48) = 0;
LABEL_121:
  char v63 = (*((unsigned char *)v200 + 3658) != 0) | v48;
  uint64_t v64 = (uint64_t)v200;
  *((unsigned char *)v200 + 3658) = v63 & 1;
  *((unsigned char *)v200 + 3659) = (*((unsigned __int8 *)v200 + 3659) | v49) != 0;
  if (*(unsigned char *)(*(void *)(*(void *)(*(void *)v64 - 24) + v64 + 400) + 1755))
  {
    iuint64_t i = 0;
  }
  else if (v63 & 1 | ((v194 + v195) > 0x30) || (AGCLLVMUserObject::needsDylibResources(v200) & 1) != 0)
  {
    iuint64_t i = 1;
  }
  else
  {
    iuint64_t i = (*((unsigned char *)v200 + 15) != 0) | v197 | (v191 || v193);
  }
  if (!*(unsigned char *)(*(void *)((char *)v200 + *(void *)(*(void *)v200 - 24) + 400) + 1755))
  {
    if (*((unsigned char *)v200 + 3659) || ((AGCLLVMUserObject::needsDylibResources(v200) | v192) & 1) != 0)
    {
      BOOL v66 = 1;
      if (ii) {
        goto LABEL_133;
      }
    }
    else
    {
      BOOL v66 = *((unsigned char *)v200 + 15) != 0;
      if (ii) {
        goto LABEL_133;
      }
    }
LABEL_140:
    char v68 = 0;
    goto LABEL_141;
  }
  BOOL v66 = 0;
  if ((ii & 1) == 0) {
    goto LABEL_140;
  }
LABEL_133:
  if (*((unsigned char *)v200 + 3658) || (AGCLLVMUserObject::needsDylibResources(v200) & 1) != 0) {
    goto LABEL_140;
  }
  int v67 = v193;
  if (*((unsigned char *)v200 + 15)) {
    int v67 = 1;
  }
  if ((v67 | v197)) {
    goto LABEL_140;
  }
  char v68 = (v189 != 29) & ~v21;
LABEL_141:
  *((unsigned char *)v200 + 3566) = v68;
  if (!v66
    || *((unsigned char *)v200 + 3659)
    || (AGCLLVMUserObject::needsDylibResources(v200) & 1) != 0
    || *((unsigned char *)v200 + 15))
  {
    LOBYTE(v69) = 0;
  }
  else
  {
    int v69 = *(_DWORD *)(*(void *)((char *)v200 + *(void *)(*(void *)v200 - 24) + 400) + 1780);
    if (v69) {
      LOBYTE(v69) = (v189 != 29) & ~v21;
    }
  }
  *((unsigned char *)v200 + 3696) = v69;
  char v213 = 1;
  if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v200 + 400))(v200) & 1) == 0)
  {
    v212[0] = 0;
    v212[1] = 0;
    size_t v211 = v212;
    std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Sampler,std::__tree_node<AGCLLVMUserObject::Sampler,void *> *,long>>((uint64_t *)&v211, *((void **)v200 + 122), (void *)v200 + 123);
    std::string __p = &v232[2];
    *(void *)int v232 = 0x400000000;
    int v287 = 0;
    BOOL v288 = 0;
    v285 = &unk_1F25C4680;
    size_t v286 = &v287;
    v272[0] = &unk_1F25C4D78;
    v272[1] = &v285;
    v273 = v272;
    for (uint64_t k = (void *)*((void *)v200 + 371); k; uint64_t k = (void *)*k)
      std::function<void ()(llvm::Function *)>::operator()((uint64_t)v273, k[5]);
    char v190 = ii;
    std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v272);
    v270[0] = &unk_1F25C4E08;
    v270[1] = &v285;
    int v271 = v270;
    for (uint64_t m = (void *)*((void *)v200 + 383); m; uint64_t m = (void *)*m)
      std::function<void ()(llvm::Function *)>::operator()((uint64_t)v271, m[5]);
    std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v270);
    long long v268 = 0u;
    long long v267 = 0u;
    int v269 = 1065353216;
    uint64_t v73 = v286;
    if (v286 == &v287)
    {
LABEL_199:
      unint64_t TypeAllocSize = (unint64_t)&v267;
      LOBYTE(v219) = 1;
      size_t v237 = &unk_1F25C4E98;
      uint64_t v238 = (uint64_t)&v219;
      uint64_t v239 = &TypeAllocSize;
      long long v240 = &v237;
      for (uint64_t n = *(void **)(v64 + 2968); n; uint64_t n = (void *)*n)
        std::function<void ()(llvm::Function *)>::operator()((uint64_t)v240, n[5]);
      std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](&v237);
      v279 = (unint64_t *)&unk_1F25C4F28;
      int v280 = (void **)&v219;
      unint64_t v281 = (unint64_t)&TypeAllocSize;
      size_t v282 = &v279;
      size_t v124 = *(void **)(v64 + 3064);
      for (ii = v190; v124; size_t v124 = (void *)*v124)
        std::function<void ()(llvm::Function *)>::operator()((uint64_t)v282, v124[5]);
      std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](&v279);
      BOOL v125 = (_BYTE)v219 != 0;
    }
    else
    {
      while (1)
      {
        uint64_t v74 = v212[0];
        if (!v212[0]) {
          break;
        }
        unsigned int v75 = *((_DWORD *)v73 + 9);
        unsigned int v76 = v212;
        do
        {
          uint64_t v77 = (uint64_t *)v74;
          uint64_t v78 = v76;
          unsigned int v79 = *(_DWORD *)(v74 + 36) + *(_DWORD *)(v74 + 32);
          uint64_t v80 = (uint64_t *)(v74 + 8);
          if (v79 > v75)
          {
            uint64_t v80 = v77;
            unsigned int v76 = v77;
          }
          uint64_t v74 = *v80;
        }
        while (v74);
        if (v76 == v212) {
          break;
        }
        if (v79 > v75)
        {
          uint64_t v81 = (uint64_t)(v77 + 4);
        }
        else
        {
          uint64_t v77 = v78;
          uint64_t v81 = (uint64_t)(v78 + 4);
        }
        if (v75 < *((_DWORD *)v77 + 8)) {
          break;
        }
        unsigned int v82 = *((_DWORD *)v73 + 7);
        if (*((_DWORD *)v73 + 8) != v82) {
          break;
        }
        AGCLLVMUserObject::Sampler::getAllocationInfo((uint64_t)&v219, v81, v82);
        unsigned int v83 = v219;
        unint64_t v84 = ((unint64_t)v219 >> 20) & 0x7FF;
        uint64_t v85 = (void *)(v219 & 0xFFFFFLL);
        uint64_t v86 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        if ((v83 & 0x80000000) != 0)
        {
          unint64_t TypeAllocSize = v84;
          unint64_t v276 = ".";
          __int16 v278 = 776;
          char v87 = 2;
          char v88 = 8;
          BOOL v89 = &v279;
          v279 = &TypeAllocSize;
          unint64_t v281 = (unint64_t)v85;
        }
        else
        {
          LODWORD(v279) = v85;
          char v87 = 8;
          char v88 = 1;
          BOOL v89 = (unint64_t **)v279;
        }
        char v283 = v87;
        char v284 = v88;
        size_t v237 = "agc.sampler_words";
        uint64_t v239 = (unint64_t *)v89;
        char v241 = 3;
        char v242 = v87;
        llvm::GlobalVariable::GlobalVariable();
        *((unsigned char *)v86 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        uint64_t v90 = *(void *)(*(void *)v64 - 24) + v64;
        uint64_t v91 = *(void *)(v90 + 376);
        uint64_t v92 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v90 + 32), v86);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v91, v92);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v64 + 368))(v64))
        {
          uint64_t NullValue = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
          if ((v83 & 0x80000000) != 0)
          {
            unint64_t TypeAllocSize = v84;
            unint64_t v276 = ".";
            __int16 v278 = 776;
            v279 = &TypeAllocSize;
            unint64_t v281 = v85;
            char v94 = 2;
            char v95 = 8;
            BOOL v96 = &v279;
          }
          else
          {
            LODWORD(v279) = v85;
            char v94 = 8;
            char v95 = 1;
            BOOL v96 = (unint64_t **)v279;
          }
          char v283 = v94;
          char v284 = v95;
          size_t v237 = "agc.es1_sampler_lod_bias";
          uint64_t v239 = (unint64_t *)v96;
          long long v240 = v280;
          char v241 = 3;
          char v242 = v94;
          llvm::GlobalVariable::GlobalVariable();
          *((unsigned char *)NullValue + 80) |= 1u;
          llvm::GlobalObject::setSection();
          uint64_t v99 = *(void *)(*(void *)v64 - 24) + v64;
          uint64_t v100 = *(void *)(v99 + 376);
          uint64_t v101 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v99 + 32), NullValue);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v100, v101);
        }
        else
        {
          unint64_t v97 = (llvm::Constant *)llvm::PointerType::get();
          uint64_t NullValue = (llvm::GlobalVariable *)llvm::Constant::getNullValue(v97, v98);
        }
        size_t v102 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        if ((v83 & 0x80000000) != 0)
        {
          unint64_t TypeAllocSize = v84;
          unint64_t v276 = ".";
          __int16 v278 = 776;
          v279 = &TypeAllocSize;
          unint64_t v281 = v85;
          char v103 = 2;
          char v104 = 8;
          BOOL v105 = &v279;
        }
        else
        {
          LODWORD(v279) = v85;
          char v103 = 8;
          char v104 = 1;
          BOOL v105 = (unint64_t **)v279;
        }
        char v283 = v103;
        char v284 = v104;
        size_t v237 = "agc.sampler_unique_id";
        uint64_t v239 = (unint64_t *)v105;
        char v241 = 3;
        char v242 = v103;
        llvm::GlobalVariable::GlobalVariable();
        *((unsigned char *)v102 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        uint64_t v106 = (char *)v200 + *(void *)(*(void *)v200 - 24);
        uint64_t v107 = *((void *)v106 + 47);
        uint64_t v108 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v106 + 32), v102);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v107, v108);
        size_t v109 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        if ((v83 & 0x80000000) != 0)
        {
          unint64_t TypeAllocSize = v84;
          unint64_t v276 = ".";
          __int16 v278 = 776;
          v279 = &TypeAllocSize;
          unint64_t v281 = v85;
          char v110 = 2;
          char v111 = 8;
          int v112 = &v279;
        }
        else
        {
          LODWORD(v279) = v85;
          char v110 = 8;
          char v111 = 1;
          int v112 = (unint64_t **)v279;
        }
        char v283 = v110;
        char v284 = v111;
        size_t v237 = "agc.sampler_heap_index";
        uint64_t v239 = (unint64_t *)v112;
        char v241 = 3;
        char v242 = v110;
        llvm::GlobalVariable::GlobalVariable();
        *((unsigned char *)v109 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        BOOL v113 = (char *)v200 + *(void *)(*(void *)v200 - 24);
        uint64_t v114 = *((void *)v113 + 47);
        uint64_t v115 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v113 + 32), v109);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v114, v115);
        if ((*(unsigned char *)(v220 + 9) & 1) == 0)
        {
          size_t v237 = (void *)llvm::PointerType::get();
          uint64_t v238 = llvm::PointerType::get();
          uint64_t v239 = (unint64_t *)llvm::PointerType::get();
          llvm::StructType::setBody();
        }
        size_t v237 = v86;
        uint64_t v238 = (uint64_t)NullValue;
        uint64_t v239 = (unint64_t *)v102;
        llvm::ConstantStruct::get();
        size_t v116 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
        if ((v83 & 0x80000000) != 0)
        {
          unint64_t TypeAllocSize = v84;
          unint64_t v276 = ".";
          __int16 v278 = 776;
          v279 = &TypeAllocSize;
          unint64_t v281 = v85;
          char v117 = 2;
          char v118 = 8;
          size_t v119 = &v279;
        }
        else
        {
          LODWORD(v279) = v85;
          char v117 = 8;
          char v118 = 1;
          size_t v119 = (unint64_t **)v279;
        }
        char v283 = v117;
        char v284 = v118;
        size_t v237 = "agc.sampler_state_struct_ptr";
        uint64_t v239 = (unint64_t *)v119;
        char v241 = 3;
        char v242 = v117;
        llvm::GlobalVariable::GlobalVariable();
        *((unsigned char *)v116 + 80) |= 1u;
        llvm::GlobalVariable::setInitializer();
        *(_DWORD *)llvm::ValueMap<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v200 + 696, v116) = v85;
        size_t v237 = (void *)4;
        uint64_t v238 = 0;
        uint64_t v239 = (unint64_t *)v116;
        uint64_t v120 = (unint64_t *)v116;
        if (v116 != (llvm::Value *)-8192)
        {
          uint64_t v120 = (unint64_t *)v116;
          if (v116 != (llvm::Value *)-4096)
          {
            uint64_t v120 = (unint64_t *)v116;
            if (v116)
            {
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v237);
              uint64_t v120 = v239;
            }
          }
        }
        std::__tree<llvm::WeakVH>::__emplace_unique_key_args<llvm::WeakVH,llvm::WeakVH>((uint64_t *)v200 + 103, (unint64_t)v120, &v237);
        if (v239 != (unint64_t *)-8192 && v239 != (unint64_t *)-4096 && v239) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v237);
        }
        std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)&v267, *((_DWORD *)v73 + 7), (_DWORD *)v73 + 7)[3] = v116;
        BOOL v121 = v73[1];
        if (v121)
        {
          do
          {
            unsigned int v122 = (void **)v121;
            BOOL v121 = (void *)*v121;
          }
          while (v121);
        }
        else
        {
          do
          {
            unsigned int v122 = (void **)v73[2];
            BOOL v7 = *v122 == v73;
            uint64_t v73 = v122;
          }
          while (!v7);
        }
        uint64_t v73 = v122;
        uint64_t v64 = (uint64_t)v200;
        if (v122 == &v287) {
          goto LABEL_199;
        }
      }
      BOOL v125 = 0;
      iuint64_t i = v190;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::~__hash_table((uint64_t)&v267);
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v287);
    if (__p != &v232[2]) {
      free(__p);
    }
    char v213 = v125;
    uint64_t v126 = (void *)v212[0];
    goto LABEL_213;
  }
  if (v196)
  {
    char v70 = AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(v200, 0);
    char v213 = v70;
    std::string __p = v200;
    v265[0] = &unk_1F25C5120;
    v265[1] = &__p;
    long long v266 = v265;
    for (juint64_t j = (void *)*((void *)v200 + 383); jj; juint64_t j = (void *)*jj)
      std::function<void ()(llvm::Function *)>::operator()((uint64_t)v266, jj[5]);
    int v128 = v265;
LABEL_217:
    std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v128);
    goto LABEL_258;
  }
  if (!v66)
  {
    v210[0] = 0;
    v210[1] = 0;
    unint64_t v209 = v210;
    std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Sampler,std::__tree_node<AGCLLVMUserObject::Sampler,void *> *,long>>((uint64_t *)&v209, *((void **)v200 + 122), (void *)v200 + 123);
    char v213 = AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>((uint64_t)v200, (uint64_t)v200 + 2944, (uint64_t)v200 + 3040, (uint64_t)&v209);
    uint64_t v126 = (void *)v210[0];
LABEL_213:
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v126);
    goto LABEL_258;
  }
  if (*((unsigned char *)v200 + 3696))
  {
    long long v240 = 0;
    uint64_t v239 = 0;
    uint64_t v238 = (uint64_t)&v239;
    size_t v237 = &unk_1F25C4680;
    std::string __p = &v232[2];
    *(void *)int v232 = 0x400000000;
    if (AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings(v200)) {
      char v213 = AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(v200, 0);
    }
    v263[0] = &unk_1F25C53A8;
    v263[1] = &v237;
    long long v264 = v263;
    for (kuint64_t k = (void *)*((void *)v200 + 371); kk; kuint64_t k = (void *)*kk)
      std::function<void ()(llvm::Function *)>::operator()((uint64_t)v264, kk[5]);
    std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v263);
    addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator>((uint64_t)&v237, (uint64_t)&__p, (uint64_t)v200 + 976);
    AGCLLVMUserObject::createSamplerHeapIndexArray(v200, (uint64_t)&__p);
    v279 = (unint64_t *)v200;
    long long v134 = operator new(0x20uLL);
    *long long v134 = &unk_1F25C5438;
    v134[1] = &v213;
    v134[2] = &v237;
    v134[3] = &v279;
    v262 = v134;
    for (muint64_t m = (void *)*((void *)v200 + 371); mm; muint64_t m = (void *)*mm)
      std::function<void ()(llvm::Function *)>::operator()((uint64_t)v262, mm[5]);
    std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v261);
    uint64_t v136 = v232[0];
    size_t v137 = (unsigned int *)__p;
    if (v232[0])
    {
      uint64_t v138 = *((void *)v200 + 463);
      size_t v139 = (int *)__p;
      do
      {
        int v140 = *v139;
        v139 += 6;
        v138 |= 1 << v140;
        *((void *)v200 + 463) = v138;
        --v136;
      }
      while (v136);
    }
  }
  else
  {
    if (!*(_DWORD *)(*(void *)((char *)v200 + *(void *)(*(void *)v200 - 24) + 400) + 1780))
    {
      if (v192)
      {
        long long v240 = 0;
        uint64_t v239 = 0;
        uint64_t v238 = (uint64_t)&v239;
        size_t v237 = &unk_1F25C4680;
        std::string __p = &v232[2];
        *(void *)int v232 = 0x400000000;
        v249[0] = &unk_1F25C5798;
        v249[1] = &v237;
        unint64_t v250 = v249;
        for (nuint64_t n = (void *)*((void *)v200 + 371); nn; nuint64_t n = (void *)*nn)
          std::function<void ()(llvm::Function *)>::operator()((uint64_t)v250, nn[5]);
        std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v249);
        addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator>((uint64_t)&v237, (uint64_t)&__p, (uint64_t)v200 + 976);
        AGCLLVMUserObject::createSamplerArrays((uint64_t)v200, (uint64_t)&__p);
        v279 = (unint64_t *)v200;
        long long v131 = operator new(0x20uLL);
        *long long v131 = &unk_1F25C5828;
        v131[1] = &v213;
        v131[2] = &v237;
        v131[3] = &v279;
        uint64_t v248 = v131;
        for (i1 = (void *)*((void *)v200 + 371); i1; i1 = (void *)*i1)
          std::function<void ()(llvm::Function *)>::operator()((uint64_t)v248, i1[5]);
        std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v247);
        if (__p != &v232[2]) {
          free(__p);
        }
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v239);
      }
      else if (*((unsigned char *)v200 + 3656))
      {
        char v213 = AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(v200, 1);
      }
      else
      {
        std::string __p = "";
        memset(v232, 0, sizeof(v232));
        int v233 = 1065353216;
        v208[0] = 0;
        v208[1] = 0;
        unint64_t v207 = v208;
        std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Sampler,std::__tree_node<AGCLLVMUserObject::Sampler,void *> *,long>>((uint64_t *)&v207, *((void **)v200 + 122), (void *)v200 + 123);
        char v213 = AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>((uint64_t)v200, (uint64_t)v200 + 2944, (uint64_t)&__p, (uint64_t)&v207);
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v208[0]);
        std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::~__hash_table((uint64_t)v232);
      }
      std::string __p = v200;
      v245[0] = &unk_1F25C58B8;
      v245[1] = &v213;
      v245[2] = &__p;
      long long v246 = v245;
      for (i2 = (void *)*((void *)v200 + 383); i2; i2 = (void *)*i2)
        std::function<void ()(llvm::Function *)>::operator()((uint64_t)v246, i2[5]);
      int v128 = v245;
      goto LABEL_217;
    }
    long long v240 = 0;
    uint64_t v239 = 0;
    uint64_t v238 = (uint64_t)&v239;
    size_t v237 = &unk_1F25C4680;
    std::string __p = &v232[2];
    *(void *)int v232 = 0x400000000;
    if (AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings(v200)) {
      char v213 = AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(v200, 0);
    }
    v259[0] = &unk_1F25C54C8;
    v259[1] = &v237;
    long long v260 = v259;
    for (i3 = (void *)*((void *)v200 + 371); i3; i3 = (void *)*i3)
      std::function<void ()(llvm::Function *)>::operator()((uint64_t)v260, i3[5]);
    std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v259);
    v257[0] = &unk_1F25C5558;
    v257[1] = &v237;
    int v258 = v257;
    for (i4 = (void *)*((void *)v200 + 395); i4; i4 = (void *)*i4)
      std::function<void ()(llvm::Function *)>::operator()((uint64_t)v258, i4[5]);
    std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v257);
    addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator>((uint64_t)&v237, (uint64_t)&__p, (uint64_t)v200 + 976);
    AGCLLVMUserObject::createSamplerHeapIndexArray(v200, (uint64_t)&__p);
    if (*((void *)v200 + 396)) {
      AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>(v200, (uint64_t *)&__p, (uint64_t)v200 + 1960);
    }
    v279 = (unint64_t *)v200;
    BOOL v143 = operator new(0x20uLL);
    *BOOL v143 = &unk_1F25C55E8;
    v143[1] = &v213;
    v143[2] = &v237;
    v143[3] = &v279;
    v256 = v143;
    for (i5 = (void *)*((void *)v200 + 371); i5; i5 = (void *)*i5)
      std::function<void ()(llvm::Function *)>::operator()((uint64_t)v256, i5[5]);
    std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v255);
    unint64_t TypeAllocSize = (unint64_t)v200;
    uint64_t v145 = operator new(0x20uLL);
    *uint64_t v145 = &unk_1F25C5678;
    v145[1] = &v213;
    v145[2] = &v237;
    v145[3] = &TypeAllocSize;
    v254 = v145;
    for (i6 = (void *)*((void *)v200 + 395); i6; i6 = (void *)*i6)
      std::function<void ()(llvm::Function *)>::operator()((uint64_t)v254, i6[5]);
    std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v253);
    *(void *)&long long v267 = v200;
    v251[0] = &unk_1F25C5708;
    v251[1] = &v213;
    v251[2] = &v267;
    int v252 = v251;
    for (i7 = (void *)*((void *)v200 + 383); i7; i7 = (void *)*i7)
      std::function<void ()(llvm::Function *)>::operator()((uint64_t)v252, i7[5]);
    std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v251);
    size_t v137 = (unsigned int *)__p;
  }
  if (v137 != &v232[2]) {
    free(v137);
  }
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v239);
LABEL_258:
  if (((*(uint64_t (**)(uint64_t))(*(void *)v64 + 384))(v64) & 1) == 0)
  {
    if (v213)
    {
      v206[0] = 0;
      v206[1] = 0;
      int v205 = v206;
      std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Texture,std::__tree_node<AGCLLVMUserObject::Texture,void *> *,long>>((uint64_t *)&v205, *(void **)(v64 + 952), (void *)(v64 + 960));
      char v213 = AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>((void *)v64, v64 + 2896, v64 + 2992, (uint64_t)&v205);
      int v150 = (void *)v206[0];
LABEL_268:
      std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v150);
      goto LABEL_348;
    }
LABEL_304:
    char v213 = 0;
    goto LABEL_348;
  }
  if (!v196)
  {
    if (ii)
    {
      if (!*(unsigned char *)(v64 + 3566))
      {
        if (!*(_DWORD *)(*(void *)(*(void *)(*(void *)v64 - 24) + v64 + 400) + 1780))
        {
          if (v213)
          {
            v183 = v215;
            if (v215 == v214) {
              size_t v184 = (uint64_t *)((char *)&v216 + 4);
            }
            else {
              size_t v184 = &v216;
            }
            uint64_t v185 = *(unsigned int *)v184;
            uint64_t v186 = &v215[v185];
            if (v185)
            {
              uint64_t v187 = 8 * v185;
              while ((unint64_t)*v183 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v183;
                v187 -= 8;
                if (!v187)
                {
                  v183 = v186;
                  break;
                }
              }
            }
            std::vector<llvm::Value *>::vector<llvm::SmallPtrSetIterator<llvm::Value *>,0>(&__p, v183, v186, v186);
            AGCLLVMUserObject::allocateBindlessTextures((void *)v64, (uint64_t *)&__p, v64 + 2992, v64 + 2896, (AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v64 + 3088));
            char v213 = 1;
            if (__p)
            {
              *(void *)int v232 = __p;
              operator delete(__p);
            }
          }
          goto LABEL_348;
        }
        if (&v214 != (uint64_t **)(v64 + 1000)) {
          llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v64 + 1000), (const llvm::SmallPtrSetImplBase *)&v214);
        }
        std::string __p = &v232[2];
        *(void *)int v232 = 0x800000000;
        long long v240 = 0;
        uint64_t v239 = 0;
        uint64_t v238 = (uint64_t)&v239;
        size_t v237 = &unk_1F25C4680;
        if (AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings((AGCLLVMUserObject *)v64)) {
          AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>((AGCLLVMUserObject *)v64);
        }
        v229[0] = &unk_1F25C60E0;
        v229[1] = &v237;
        uint64_t v230 = v229;
        for (i8 = *(void **)(v64 + 2920); i8; i8 = (void *)*i8)
          std::function<void ()(llvm::Function *)>::operator()((uint64_t)v230, i8[5]);
        std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v229);
        v227[0] = &unk_1F25C6170;
        v227[1] = &v237;
        unint64_t v228 = v227;
        for (i9 = *(void **)(v64 + 3112); i9; i9 = (void *)*i9)
          std::function<void ()(llvm::Function *)>::operator()((uint64_t)v228, i9[5]);
        std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v227);
        addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex16x2,AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator>((unint64_t)&v237, (uint64_t)&__p, v64 + 952);
        AGCLLVMUserObject::createTextureHeapIndexArray(v64, (uint64_t)&__p);
        if (*(void *)(v64 + 3120)) {
          AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>((void *)v64, (uint64_t *)&__p, v64 + 1768);
        }
        v279 = (unint64_t *)v64;
        v225[0] = &unk_1F25C6200;
        v225[1] = &v237;
        v225[2] = &v279;
        unint64_t v226 = v225;
        for (i10 = *(void **)(v64 + 2920); i10; i10 = (void *)*i10)
          std::function<void ()(llvm::Function *)>::operator()((uint64_t)v226, i10[5]);
        std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v225);
        unint64_t TypeAllocSize = v64;
        v223[0] = &unk_1F25C6290;
        v223[1] = &v237;
        v223[2] = &TypeAllocSize;
        uint64_t v224 = v223;
        for (i11 = *(void **)(v64 + 3112); i11; i11 = (void *)*i11)
          std::function<void ()(llvm::Function *)>::operator()((uint64_t)v224, i11[5]);
        std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v223);
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v239);
        if (__p != &v232[2]) {
          free(__p);
        }
        std::string __p = (void *)v64;
        v221[0] = &unk_1F25C6320;
        v221[1] = &__p;
        v222 = v221;
        for (i12 = *(void **)(v64 + 3016); i12; i12 = (void *)*i12)
          std::function<void ()(llvm::Function *)>::operator()((uint64_t)v222, i12[5]);
        int v149 = v221;
        goto LABEL_265;
      }
      if (&v214 != (uint64_t **)(v64 + 1000)) {
        llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v64 + 1000), (const llvm::SmallPtrSetImplBase *)&v214);
      }
      unint64_t v281 = 0;
      size_t v282 = 0;
      v279 = (unint64_t *)&unk_1F25C4680;
      int v280 = (void **)&v281;
      std::string __p = &v232[2];
      *(void *)int v232 = 0x400000000;
      size_t v237 = &v239;
      uint64_t v151 = *(void *)v200;
      uint64_t v238 = 0x400000000;
      unint64_t TypeAllocSize = llvm::DataLayout::getTypeAllocSize((AGCLLVMUserObject *)((char *)v200 + 232), *(llvm::Type **)(*(void *)((char *)v200 + *(void *)(v151 - 24) + 400) + 1672));
      v275 = v152;
      LODWORD(v267) = llvm::TypeSize::operator unsigned long long();
      if (AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings(v200)) {
        AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(v200);
      }
      v235[0] = &unk_1F25C5FC0;
      v235[1] = &v279;
      v236 = v235;
      for (i13 = (void *)*((void *)v200 + 365); i13; i13 = (void *)*i13)
        std::function<void ()(llvm::Function *)>::operator()((uint64_t)v236, i13[5]);
      std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v235);
      addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator>((unint64_t)&v279, (uint64_t)&__p, (uint64_t)v200 + 952);
      unint64_t TypeAllocSize = (unint64_t)v200;
      v275 = (void **)&v267;
      v154 = operator new(0x20uLL);
      void *v154 = &unk_1F25C6050;
      v154[1] = &v213;
      v154[2] = &v279;
      v154[3] = &TypeAllocSize;
      v234[3] = v154;
      size_t v155 = (void *)*((void *)v200 + 365);
      if (v155)
      {
        uint64_t v156 = (uint64_t)v154;
        do
        {
          std::function<void ()(llvm::Function *)>::operator()(v156, v155[5]);
          size_t v155 = (void *)*v155;
        }
        while (v155);
      }
      std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v234);
      unint64_t v157 = v232[0];
      if (!v232[0])
      {
LABEL_319:
        if (v238)
        {
          uint64_t v176 = *(void *)((char *)v200 + *(void *)(*(void *)v200 - 24) + 400);
          (*(void (**)(uint64_t, void **))(*(void *)v176 + 192))(v176, &v237);
        }
        AGCLLVMUserObject::createTextureHeapIndexArray((uint64_t)v200, (uint64_t)&__p);
        *((unsigned char *)v200 + 2344) = 1;
        if (v237 != &v239) {
          free(v237);
        }
        if (__p != &v232[2]) {
          free(__p);
        }
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy((void *)v281);
        uint64_t v64 = (uint64_t)v200;
        goto LABEL_348;
      }
      uint64_t v158 = 0;
      unint64_t v159 = 0;
      while (1)
      {
        uint64_t v160 = (char *)__p;
        if ((*(_DWORD *)((unsigned char *)__p + v158) & 0xFFFFFu) > 0x3F)
        {
          uint64_t v161 = 1 << *((unsigned char *)__p + v158);
          char v164 = *((unsigned char *)__p + v158 + 8);
          if (v164) {
            *((void *)v200 + 459) |= v161;
          }
          uint64_t v163 = (void *)((char *)v200 + 3688);
          if ((v164 & 2) == 0) {
            goto LABEL_291;
          }
        }
        else
        {
          uint64_t v161 = 1 << *((unsigned char *)__p + v158);
          char v162 = *((unsigned char *)__p + v158 + 8);
          if (v162) {
            *((void *)v200 + 458) |= v161;
          }
          uint64_t v163 = (void *)((char *)v200 + 3680);
          if ((v162 & 2) == 0) {
            goto LABEL_291;
          }
        }
        *v163 |= v161;
LABEL_291:
        uint64_t v165 = *(unsigned int *)&v160[v158 + 4];
        if (v165 != -1)
        {
          if (*(_DWORD *)(*(void *)&v198[*(void *)(*(void *)v200 - 24) + 32] + 1780)) {
            int v166 = 1;
          }
          else {
            int v166 = v267;
          }
          if (v238 >= (unint64_t)HIDWORD(v238)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v237 + v238) = (v166 * v159) | (unint64_t)(v165 << 32);
          LODWORD(v238) = v238 + 1;
          unint64_t v157 = v232[0];
        }
        ++v159;
        v158 += 32;
        if (v159 >= v157) {
          goto LABEL_319;
        }
      }
    }
    if (!AGCLLVMUserObject::allTextureUsesAreDirect((AGCLLVMUserObject *)v64, *(const AGCLLVMUserObject::TextureSamplerPlaceholderFunctions **)(v64 + 2920))|| !AGCLLVMUserObject::allTextureUsesAreDirect((AGCLLVMUserObject *)v64, *(const AGCLLVMUserObject::TextureSamplerPlaceholderFunctions **)(v64 + 3016)))
    {
      if (v213)
      {
        v202[0] = 0;
        v202[1] = 0;
        v201 = v202;
        std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Texture,std::__tree_node<AGCLLVMUserObject::Texture,void *> *,long>>((uint64_t *)&v201, *(void **)(v64 + 952), (void *)(v64 + 960));
        long long v240 = 0;
        uint64_t v239 = 0;
        uint64_t v238 = (uint64_t)&v239;
        size_t v237 = &unk_1F25C4680;
        std::string __p = &v232[2];
        *(void *)int v232 = 0x400000000;
        v279 = (unint64_t *)&unk_1F25C5D80;
        int v280 = &v237;
        size_t v282 = &v279;
        for (i14 = *(void **)(v64 + 2920); i14; i14 = (void *)*i14)
          std::function<void ()(llvm::Function *)>::operator()((uint64_t)v282, i14[5]);
        std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](&v279);
        unint64_t TypeAllocSize = (unint64_t)&unk_1F25C5E10;
        v275 = &v237;
        p_unint64_t TypeAllocSize = &TypeAllocSize;
        for (i15 = *(void **)(v64 + 3016); i15; i15 = (void *)*i15)
          std::function<void ()(llvm::Function *)>::operator()((uint64_t)p_TypeAllocSize, i15[5]);
        std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](&TypeAllocSize);
        addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex16x2,AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator>((unint64_t)&v237, (uint64_t)&__p, (uint64_t)&v201);
        AGCLLVMUserObject::createTextureArrays(v200, (uint64_t)&__p);
        AGCLLVMUserObject::createTextureHeapIndexArray((uint64_t)v200, (uint64_t)&__p);
        v272[0] = v200;
        LOBYTE(v270[0]) = 1;
        BOOL v169 = operator new(0x20uLL);
        *BOOL v169 = &unk_1F25C5EA0;
        v169[1] = v270;
        v169[2] = &v237;
        v169[3] = v272;
        *((void *)&v268 + 1) = v169;
        unint64_t v170 = (void *)*((void *)v200 + 365);
        if (v170)
        {
          uint64_t v171 = (uint64_t)v169;
          do
          {
            std::function<void ()(llvm::Function *)>::operator()(v171, v170[5]);
            unint64_t v170 = (void *)*v170;
          }
          while (v170);
        }
        std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](&v267);
        uint64_t v172 = operator new(0x20uLL);
        *uint64_t v172 = &unk_1F25C5F78;
        v172[1] = v270;
        v172[2] = &v237;
        v172[3] = v272;
        BOOL v288 = v172;
        uint64_t v64 = (uint64_t)v200;
        long long v173 = (void *)*((void *)v200 + 377);
        if (v173)
        {
          uint64_t v174 = (uint64_t)v172;
          do
          {
            std::function<void ()(llvm::Function *)>::operator()(v174, v173[5]);
            long long v173 = (void *)*v173;
          }
          while (v173);
        }
        std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](&v285);
        char v175 = v270[0];
        if (__p != &v232[2]) {
          free(__p);
        }
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v239);
        char v213 = v175;
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v202[0]);
      }
      else
      {
        char v213 = 0;
      }
      *(unsigned char *)(v64 + 2344) = 1;
      goto LABEL_348;
    }
    if (v213)
    {
      v204[0] = 0;
      v204[1] = 0;
      uint64_t v203 = v204;
      std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Texture,std::__tree_node<AGCLLVMUserObject::Texture,void *> *,long>>((uint64_t *)&v203, *(void **)(v64 + 952), (void *)(v64 + 960));
      char v213 = AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>((void *)v64, v64 + 2896, v64 + 2992, (uint64_t)&v203);
      int v150 = (void *)v204[0];
      goto LABEL_268;
    }
    goto LABEL_304;
  }
  if (&v214 != (uint64_t **)(v64 + 1000)) {
    llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v64 + 1000), (const llvm::SmallPtrSetImplBase *)&v214);
  }
  AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>((AGCLLVMUserObject *)v64);
  std::string __p = (void *)v64;
  v243[0] = &unk_1F25C5CF0;
  v243[1] = &__p;
  v244 = v243;
  for (i16 = *(void **)(v64 + 3016); i16; i16 = (void *)*i16)
    std::function<void ()(llvm::Function *)>::operator()((uint64_t)v244, i16[5]);
  int v149 = v243;
LABEL_265:
  std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](v149);
LABEL_348:
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup((AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v64 + 2896));
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup((AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v64 + 2944));
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup((AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v64 + 2992));
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup((AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v64 + 3040));
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup((AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v64 + 3088));
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup((AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)(v64 + 3136));
  BOOL v129 = v213 != 0;
LABEL_349:
  if (v215 != v214) {
    free(v215);
  }
  return v129;
}

uint64_t virtual thunk to'AGCLLVMUserFragmentShader::getSupportExternalVisibleFunctions(AGCLLVMUserFragmentShader *this)
{
  return (*(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 120) + 5808) + 64) >> 6) & 1;
}

void AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::cleanup(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *this)
{
  for (uint64_t i = (uint64_t **)*((void *)this + 3); i; uint64_t i = (uint64_t **)*i)
    llvm::Function::eraseFromParent((llvm::Function *)i[5]);
  if (*((void *)this + 4))
  {
    std::__hash_table<std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::__unordered_map_hasher<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::hash<llvm::Type *>,std::equal_to<llvm::Type *>,true>,std::__unordered_map_equal<llvm::Type *,std::__hash_value_type<llvm::Type *,llvm::WeakVH>,std::equal_to<llvm::Type *>,std::hash<llvm::Type *>,true>,std::allocator<std::__hash_value_type<llvm::Type *,llvm::WeakVH>>>::__deallocate_node(*((void **)this + 3));
    *((void *)this + 3) = 0;
    uint64_t v3 = *((void *)this + 2);
    if (v3)
    {
      for (uint64_t j = 0; j != v3; ++j)
        *(void *)(*((void *)this + 1) + 8 * j) = 0;
    }
    *((void *)this + 4) = 0;
  }
}

void *std::__function::__value_func<void ()(llvm::Function *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AGCLLVMUserObject::isTextureOrSamplerType(AGCLLVMUserObject *this, llvm::Type *a2)
{
  unsigned int v4 = a2 >> 4;
  if (*((unsigned char *)this + 3568))
  {
    int v6 = (char *)this + 3576;
    int v5 = 2;
  }
  else
  {
    int v5 = *((_DWORD *)this + 896);
    if (!v5)
    {
      int v10 = 0;
      goto LABEL_7;
    }
    int v6 = (char *)*((void *)this + 447);
  }
  int v7 = v5 - 1;
  unsigned int v8 = (v4 ^ (a2 >> 9)) & v7;
  uint64_t v9 = *(llvm::Type **)&v6[8 * v8];
  if (v9 == a2)
  {
    int v10 = 1;
  }
  else
  {
    int v19 = 1;
    do
    {
      int v10 = v9 != (llvm::Type *)-4096;
      if (v9 == (llvm::Type *)-4096) {
        break;
      }
      unsigned int v20 = v8 + v19++;
      unsigned int v8 = v20 & v7;
      uint64_t v9 = *(llvm::Type **)&v6[8 * v8];
      int v10 = 1;
    }
    while (v9 != a2);
  }
LABEL_7:
  BOOL v11 = (llvm::Type *)*((void *)this + 453);
  int v12 = v11 == a2;
  if ((*((_DWORD *)a2 + 2) & 0xFE) != 0x10) {
    return v10 | ((v11 == a2) << 8);
  }
  uint64_t v13 = *((unsigned int *)this + 912);
  if (v13)
  {
    uint64_t v14 = *((void *)this + 454);
    LODWORD(v15) = (v4 ^ (a2 >> 9)) & (v13 - 1);
    uint64_t v16 = v14 + 16 * v15;
    uint64_t v17 = *(llvm::Type **)v16;
    if (*(llvm::Type **)v16 == a2)
    {
LABEL_10:
      if (v16 != v14 + 16 * v13) {
        return *(unsigned __int16 *)(v16 + 8);
      }
    }
    else
    {
      int v21 = 1;
      while (v17 != (llvm::Type *)-4096)
      {
        int v22 = v15 + v21++;
        uint64_t v15 = v22 & (v13 - 1);
        uint64_t v17 = *(llvm::Type **)(v14 + 16 * v15);
        if (v17 == a2)
        {
          uint64_t v16 = v14 + 16 * v15;
          goto LABEL_10;
        }
      }
    }
  }
  if (*((_DWORD *)a2 + 2) == 17)
  {
    unsigned int isTextureOrSamplerType = AGCLLVMUserObject::isTextureOrSamplerType(this, **((llvm::Type ***)a2 + 2));
    LOBYTE(v10) = isTextureOrSamplerType & 1;
    int v12 = (isTextureOrSamplerType >> 8) & 1;
  }
  else if (*((_DWORD *)a2 + 2) == 16)
  {
    uint64_t v23 = *((unsigned int *)a2 + 3);
    if (v23)
    {
      uint64_t v24 = (llvm::Type **)*((void *)a2 + 2);
      uint64_t v25 = 8 * v23;
      do
      {
        BOOL v26 = *v24++;
        unsigned int v27 = AGCLLVMUserObject::isTextureOrSamplerType(this, v26);
        LOBYTE(v10) = v27 & 1 | v10;
        v12 |= (v27 >> 8) & 1;
        v25 -= 8;
      }
      while (v25);
    }
  }
  uint64_t v18 = v10 | (v12 << 8);
  uint64_t v33 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*((void *)this + 454), *((_DWORD *)this + 912), (uint64_t)a2, &v33) & 1) == 0)
  {
    int v29 = *((_DWORD *)this + 910);
    unsigned int v30 = *((_DWORD *)this + 912);
    if (4 * v29 + 4 >= 3 * v30)
    {
      v30 *= 2;
    }
    else if (v30 + ~v29 - *((_DWORD *)this + 911) > v30 >> 3)
    {
LABEL_32:
      uint64_t v31 = v33;
      ++*((_DWORD *)this + 910);
      if (*(void *)v31 != -4096) {
        --*((_DWORD *)this + 911);
      }
      *(void *)uint64_t v31 = a2;
      *(_WORD *)(v31 + 8) = v18;
      return v18;
    }
    llvm::DenseMap<llvm::Type *,std::pair<BOOL,BOOL>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::pair<BOOL,BOOL>>>::grow((uint64_t)this + 3632, v30);
    uint64_t v33 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*((void *)this + 454), *((_DWORD *)this + 912), (uint64_t)a2, &v33);
    goto LABEL_32;
  }
  return v18;
}

uint64_t std::function<void ()(llvm::Function *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = (AGCLLVMUserObject *)((uint64_t (*)(void))std::__throw_bad_function_call[abi:nn180100])();
  return AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings(v3);
}

BOOL AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings(AGCLLVMUserObject *this)
{
  return AGCLLVMUserObject::mayBeCalledFromIntersectionFunction(this)
      || (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) == 29
      || *((unsigned char *)this + 15) != 0;
}

BOOL AGCLLVMUserObject::mayBeCalledFromIntersectionFunction(AGCLLVMUserObject *this)
{
  uint64_t v1 = *(void *)(*(void *)this - 24);
  if (!*(unsigned char *)(*(void *)((char *)this + v1 + 400) + 1785)
    || *((unsigned char *)this + 3712)
    || (*(unsigned int (**)(void))(*(void *)((char *)this + v1) + 64))() == 29)
  {
    return 0;
  }
  if (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 3300))
  {
    uint64_t v4 = *((void *)this + 294);
    if (*(unsigned char *)(v4 + 51) || *(unsigned char *)(v4 + 48)) {
      return 1;
    }
  }
  return *((unsigned char *)this + 15) != 0;
}

uint64_t llvm::SetVector<llvm::Type *,llvm::SmallVector<llvm::Type *,2u>,llvm::SmallDenseSet<llvm::Type *,2u,llvm::DenseMapInfo<llvm::Type *,void>>>::insert(_DWORD *a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::LookupBucketFor<llvm::Type *>((uint64_t)a1, *a2, &v9);
  if (result) {
    return result;
  }
  int v5 = *a1 >> 1;
  if (*a1) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_13;
  }
  if (v6 + ~v5 - a1[1] <= v6 >> 3)
  {
LABEL_13:
    llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::grow((uint64_t)a1, v6);
    uint64_t v9 = 0;
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::LookupBucketFor<llvm::Type *>((uint64_t)a1, *a2, &v9);
  }
  int v7 = v9;
  *a1 += 2;
  if (*v7 != -4096) {
    --a1[1];
  }
  uint64_t *v7 = *a2;
  uint64_t v8 = *a2;
  return llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)(a1 + 6), v8);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::LookupBucketFor<llvm::Type *>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 2;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((a2 >> 4) ^ (a2 >> 9)) & (v4 - 1);
  int v7 = (void *)(v3 + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    int v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        int v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 8 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      int v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void AGCLLVMUserObject::getTextureAtomicFunctionSet(AGCLLVMUserObject *this)
{
  {
    AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set = 0;
    *(void *)&dword_1EBD0E030 = 0;
    qword_1EBD0E038 = 0x800000000;
    __cxa_atexit((void (*)(void *))llvm::StringSet<llvm::MallocAllocator>::~StringSet, &AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, &dword_1CAC02000);
  }
}

void AGCLLVMUserObject::getIsNullTextureFunctionSet(AGCLLVMUserObject *this)
{
  {
    AGCLLVMUserObject::getIsNullTextureFunctionSet(void)::is_null_texture_function_set = 0;
    *(void *)&dword_1EBD0EAE0 = 0;
    qword_1EBD0EAE8 = 0x800000000;
    __cxa_atexit((void (*)(void *))llvm::StringSet<llvm::MallocAllocator>::~StringSet, &AGCLLVMUserObject::getIsNullTextureFunctionSet(void)::is_null_texture_function_set, &dword_1CAC02000);
  }
}

void AGCLLVMUserObject::getDimensionFunctionMap(AGCLLVMUserObject *this)
{
  {
    AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map = 0;
    *(void *)&dword_1EBD0EAA0 = 0;
    qword_1EBD0EAA8 = 0x1800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMUserObject::DimensionFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map, &dword_1CAC02000);
  }
}

void AGCLLVMUserObject::getUniqueIDFunctionSet(AGCLLVMUserObject *this)
{
  {
    AGCLLVMUserObject::getUniqueIDFunctionSet(void)::uniqueID_function_set = 0;
    *(void *)&dword_1EBD0EA80 = 0;
    qword_1EBD0EA88 = 0x800000000;
    __cxa_atexit((void (*)(void *))llvm::StringSet<llvm::MallocAllocator>::~StringSet, &AGCLLVMUserObject::getUniqueIDFunctionSet(void)::uniqueID_function_set, &dword_1CAC02000);
  }
}

BOOL AGCLLVMUserObject::areIndirectSamplersSupported(AGCLLVMUserObject *this)
{
  return !*((unsigned char *)this + 14)
      || *(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1751) != 0;
}

BOOL AGCLLVMUserObject::areIndirectTexturesSupported(AGCLLVMUserObject *this)
{
  return !*((unsigned char *)this + 14)
      || *(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1751) != 0;
}

void AGCLLVMUserShader::improveDMAPromotionOpportunityAGP(AGCLLVMUserShader *this)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v2 = *((unsigned int *)v1 + 696);
  if (v2)
  {
    int v4 = (uint64_t *)*((void *)v1 + 347);
    int v5 = &v4[v2];
    char v70 = (char *)this + 368;
    int v69 = (AGCLLVMUserShader *)((char *)this + 232);
    while (1)
    {
      uint64_t Impl = *v4;
      uint64_t v7 = *(unsigned int *)(*v4 + 8);
      if (v7 >= 3)
      {
        uint64_t v8 = *(unsigned __int8 **)(Impl - 8 * v7);
        if (v8)
        {
          if (*v8 - 1 <= 1)
          {
            uint64_t v9 = (llvm::GlobalObject *)*((void *)v8 + 16);
            if (v9)
            {
              if (*((unsigned char *)v9 + 16) == 3 && (*((unsigned char *)v9 + 34) & 0x40) != 0)
              {
                Sectionuint64_t Impl = (void *)llvm::GlobalObject::getSectionImpl(v9);
                if (v11 == 15
                  && *SectionImpl == 0x625F726566667562
                  && *(void *)((char *)SectionImpl + 7) == 0x73676E69646E6962)
                {
                  uint64_t v13 = *(void *)v9;
                  int v14 = *(_DWORD *)(*(void *)v9 + 8);
                  if (v14 == 15)
                  {
                    if ((v14 & 0xFE) == 0x12) {
                      int v14 = *(_DWORD *)(**(void **)(v13 + 16) + 8);
                    }
                    if ((v14 & 0xFFFFFF00) == 0x4000)
                    {
                      uint64_t v15 = **(void **)(v13 + 16);
                      unsigned int v16 = *(_DWORD *)(v15 + 8);
                      if (v16 == 15)
                      {
                        if ((v16 & 0xFE) == 0x12) {
                          unsigned int v16 = *(_DWORD *)(**(void **)(v15 + 16) + 8);
                        }
                        if ((v16 >> 8) - 1 <= 1)
                        {
                          for (uint64_t i = *((void *)v9 + 1); i; uint64_t i = *(void *)(i + 8))
                          {
                            if (*(unsigned char *)(*(void *)(i + 24) + 16) != 60) {
                              goto LABEL_133;
                            }
                          }
                          int v18 = 0;
                          int v73 = 0;
                          if (*(_DWORD *)(Impl + 8) != 4) {
                            break;
                          }
                          uint64_t v67 = v15;
                          LODWORD(TypeAllocSize) = 3;
                          if (parseMDInt(0, Impl, (unsigned int *)&TypeAllocSize, &v73))
                          {
                            int v18 = v73;
                            uint64_t v15 = v67;
                            if (v73 != -1) {
                              break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_133:
      *v4++ = Impl;
      if (v4 == v5) {
        return;
      }
    }
    int v65 = v18;
    char v68 = **(unsigned __int8 ***)(v15 + 16);
    if ((*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 192))((char *)this + *(void *)(*(void *)this - 24))) {
      goto LABEL_30;
    }
    int v19 = v68;
    int v20 = v68[8];
    if (v20 != 16) {
      int v19 = 0;
    }
    if (v20 == 7 || v19 && (v19[9] & 1) == 0) {
      goto LABEL_133;
    }
    unsigned int v71 = 0;
    int v72 = 0;
    LODWORD(TypeAllocSize) = 1;
    parseMDInt(0, Impl, (unsigned int *)&TypeAllocSize, &v72);
    LODWORD(TypeAllocSize) = 2;
    parseMDInt(0, Impl, (unsigned int *)&TypeAllocSize, &v71);
    uint64_t v21 = *(void *)&v70[*(void *)(*(void *)this - 24) + 32];
    BOOL v22 = *(unsigned char *)(v21 + 1774) && v72 == 5;
    if (v22 && (v71 & 0x80000000) != 0
      || (!*(unsigned char *)(v21 + 1761) ? (BOOL v23 = v72 == 5) : (BOOL v23 = 0),
          v23 && (v71 & 0x80000000) != 0 && ((*((void *)this + 413) >> ((unint64_t)v71 >> 20)) & 1) != 0))
    {
LABEL_30:
      unint64_t TypeAllocSize = llvm::ValueAsMetadata::get();
      long long v75 = *(_OWORD *)(Impl - 8 * *(unsigned int *)(Impl + 8) + 8);
      llvm::ConstantInt::get();
      uint64_t v76 = llvm::ValueAsMetadata::get();
      uint64_t Impl = llvm::MDTuple::getImpl();
      goto LABEL_133;
    }
    if (v65) {
      goto LABEL_133;
    }
    uint64_t v61 = v4;
    uint64_t v62 = v5;
    uint64_t v24 = *((void *)v9 + 1);
    if (v24)
    {
      uint64_t v25 = 0;
      BOOL v26 = 0;
      unsigned int v27 = 0;
      do
      {
        uint64_t v28 = *(void *)(v24 + 24);
        if (v26 >= v27)
        {
          uint64_t v29 = (v26 - v25) >> 4;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 60) {
LABEL_135:
          }
            abort();
          if ((v27 - v25) >> 3 > v30) {
            unint64_t v30 = (v27 - v25) >> 3;
          }
          if ((unint64_t)(v27 - v25) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v30;
          }
          if (v31)
          {
            if (v31 >> 60) {
LABEL_136:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            uint64_t v32 = (char *)operator new(16 * v31);
          }
          else
          {
            uint64_t v32 = 0;
          }
          uint64_t v33 = &v32[16 * v29];
          *(void *)uint64_t v33 = v28;
          *((void *)v33 + 1) = 0;
          if (v26 == v25)
          {
            BOOL v35 = &v32[16 * v29];
          }
          else
          {
            uint64_t v34 = &v32[16 * v29];
            do
            {
              BOOL v35 = v34 - 16;
              *((_OWORD *)v34 - 1) = *((_OWORD *)v26 - 1);
              v26 -= 16;
              v34 -= 16;
            }
            while (v26 != v25);
          }
          unsigned int v27 = &v32[16 * v31];
          BOOL v26 = v33 + 16;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v25 = v35;
        }
        else
        {
          *(void *)BOOL v26 = v28;
          *((void *)v26 + 1) = 0;
          v26 += 16;
        }
        uint64_t v24 = *(void *)(v24 + 8);
      }
      while (v24);
      if (v25 != v26)
      {
        unint64_t v66 = 0;
        std::string __p = v25;
        uint64_t v25 = v26;
        while (1)
        {
          uint64_t v36 = *((void *)v25 - 2);
          v25 -= 16;
          uint64_t v37 = *(void *)(v36 + 8);
          if (v37) {
            break;
          }
LABEL_123:
          if (__p == v25) {
            goto LABEL_128;
          }
        }
        unint64_t v64 = *((void *)v25 + 1);
        while (1)
        {
          int v38 = *(uint64_t **)(v37 + 24);
          int v39 = *((unsigned __int8 *)v38 + 16);
          if (v39 == 77) {
            break;
          }
          if (v39 != 62)
          {
            if (v39 != 60) {
              goto LABEL_125;
            }
LABEL_87:
            unint64_t v45 = v66;
            if (v66 <= v64) {
              unint64_t v45 = v64;
            }
LABEL_102:
            unint64_t v66 = v45;
            goto LABEL_103;
          }
          uint64_t v46 = *((_DWORD *)v38 + 5) & 0x7FFFFFF;
          uint64_t v47 = v38[-4 * v46 + 4];
          if (v47) {
            BOOL v48 = *(unsigned char *)(v47 + 16) == 16;
          }
          else {
            BOOL v48 = 0;
          }
          if (!v48) {
            goto LABEL_125;
          }
          int v49 = (void *)(v47 + 24);
          if (*(_DWORD *)(v47 + 32) >= 0x41u) {
            int v49 = (void *)*v49;
          }
          unint64_t v50 = *v49 + v64;
          if (v46 != 2)
          {
            unint64_t v45 = v66;
            if (v66 <= v50) {
              unint64_t v45 = *v49 + v64;
            }
            goto LABEL_102;
          }
          if (v25 >= v27)
          {
            uint64_t v51 = (v25 - __p) >> 4;
            if ((unint64_t)(v51 + 1) >> 60) {
              goto LABEL_135;
            }
            unint64_t v52 = (v27 - __p) >> 3;
            if (v52 <= v51 + 1) {
              unint64_t v52 = v51 + 1;
            }
            if ((unint64_t)(v27 - __p) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v52;
            }
            if (v53)
            {
              if (v53 >> 60) {
                goto LABEL_136;
              }
              uint64_t v54 = (char *)operator new(16 * v53);
            }
            else
            {
              uint64_t v54 = 0;
            }
            uint64_t v55 = &v54[16 * v51];
            *(void *)uint64_t v55 = v38;
            *((void *)v55 + 1) = v50;
            if (v25 == __p)
            {
              uint64_t v58 = &v54[16 * v51];
              int v57 = __p;
            }
            else
            {
              uint64_t v56 = &v54[16 * v51];
              int v57 = __p;
              do
              {
                uint64_t v58 = v56 - 16;
                *((_OWORD *)v56 - 1) = *((_OWORD *)v25 - 1);
                v25 -= 16;
                v56 -= 16;
              }
              while (v25 != __p);
            }
            unsigned int v27 = &v54[16 * v53];
            uint64_t v25 = v55 + 16;
            if (v57) {
              operator delete(__p);
            }
            std::string __p = v58;
          }
          else
          {
            *(void *)uint64_t v25 = v38;
            *((void *)v25 + 1) = v50;
            v25 += 16;
          }
LABEL_103:
          uint64_t v37 = *(void *)(v37 + 8);
          if (!v37) {
            goto LABEL_123;
          }
        }
        uint64_t v40 = *v38;
        if (*(unsigned char *)(*v38 + 8) != 15) {
          goto LABEL_125;
        }
        if (!llvm::Type::isSized(**(void **)(v40 + 16))) {
          goto LABEL_125;
        }
        unint64_t TypeAllocSize = llvm::DataLayout::getTypeAllocSize(v69, (llvm::Type *)v68);
        *(void *)&long long v75 = v41;
        unint64_t v42 = llvm::TypeSize::operator unsigned long long();
        unint64_t TypeAllocSize = llvm::DataLayout::getTypeAllocSize(v69, **(llvm::Type ***)(v40 + 16));
        *(void *)&long long v75 = v43;
        if (llvm::TypeSize::operator unsigned long long() > v42) {
          goto LABEL_125;
        }
        uint64_t v44 = v38[1];
        if (v44)
        {
          while (*(unsigned char *)(*(void *)(v44 + 24) + 16) == 60)
          {
            uint64_t v44 = *(void *)(v44 + 8);
            if (!v44) {
              goto LABEL_87;
            }
          }
LABEL_125:
          uint64_t v25 = __p;
LABEL_130:
          if (v25) {
            operator delete(v25);
          }
          int v4 = v61;
          int v5 = v62;
          goto LABEL_133;
        }
        goto LABEL_87;
      }
      unint64_t v66 = 0;
    }
    else
    {
      unint64_t v66 = 0;
      uint64_t v25 = 0;
    }
LABEL_128:
    unint64_t v59 = llvm::DataLayout::getTypeAllocSize(v69, (llvm::Type *)v68);
    unint64_t TypeAllocSize = v59 + v59 * v66;
    *(void *)&long long v75 = v60;
    if ((unint64_t)llvm::TypeSize::operator unsigned long long() <= 0xFFFFFFFE)
    {
      unint64_t TypeAllocSize = llvm::ValueAsMetadata::get();
      long long v75 = *(_OWORD *)(Impl - 8 * *(unsigned int *)(Impl + 8) + 8);
      llvm::ConstantInt::get();
      uint64_t v76 = llvm::ValueAsMetadata::get();
      uint64_t Impl = llvm::MDTuple::getImpl();
    }
    goto LABEL_130;
  }
}

unint64_t llvm::DataLayout::getTypeAllocSize(llvm::DataLayout *this, llvm::Type *a2)
{
  unint64_t v4 = (llvm::DataLayout::getTypeSizeInBits(this, a2) + 7) >> 3;
  unint64_t ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(this, a2);
  return (ABITypeAlignment + v4 - 1) / ABITypeAlignment * ABITypeAlignment;
}

unint64_t llvm::DataLayout::getTypeSizeInBits(llvm::DataLayout *this, llvm::Type *a2)
{
  unint64_t result = 16;
  switch(*((_DWORD *)a2 + 2))
  {
    case 2u:
      unint64_t result = 32;
      break;
    case 3u:
    case 0xAu:
      unint64_t result = 64;
      break;
    case 4u:
      unint64_t result = 80;
      break;
    case 5u:
    case 6u:
      unint64_t result = 128;
      break;
    case 7u:
    case 9u:
    case 0xCu:
    case 0xEu:
    case 0x14u:
      __break(1u);
      break;
    case 8u:
      unsigned int v6 = this;
      goto LABEL_9;
    case 0xBu:
      unint64_t result = 0x2000;
      break;
    case 0xDu:
      unint64_t result = (unint64_t)*((unsigned int *)a2 + 2) >> 8;
      break;
    case 0xFu:
      unsigned int v6 = this;
LABEL_9:
      unint64_t result = *(unsigned int *)(llvm::DataLayout::getPointerAlignElem(v6) + 4);
      break;
    case 0x10u:
      unint64_t result = 8 * *(void *)llvm::DataLayout::getStructLayout();
      break;
    case 0x11u:
      uint64_t v7 = *((void *)a2 + 4);
      unint64_t result = 8 * v7 * llvm::DataLayout::getTypeAllocSize(this, *((llvm::Type **)a2 + 3));
      break;
    case 0x12u:
    case 0x13u:
      uint64_t v4 = *((unsigned int *)a2 + 8);
      unint64_t result = llvm::DataLayout::getTypeSizeInBits(this, *((llvm::Type **)a2 + 3)) * v4;
      break;
    case 0x15u:
      int v5 = (llvm::Type *)MEMORY[0x1CB7A0040](a2);
      unint64_t result = llvm::DataLayout::getTypeSizeInBits(this, v5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t virtual thunk to'AGCLLVMAGPFragmentShader::isDMAPromotionDisabled(AGCLLVMAGPFragmentShader *this)
{
  return *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 208) + 5808) + 60) >> 7;
}

void AGCLLVMUserObject::createTextureHeapIndexArray(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 2348) = *(_DWORD *)(a2 + 8);
  uint64_t v18 = 0;
  LOWORD(v17) = 0;
  unsigned int v16 = (void *)0xFFFFFFFF00400000;
  char v19 = 0;
  uint64_t v4 = (uint64_t)&v16;
  int v5 = (_OWORD *)llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>(a2, (unint64_t)&v16);
  unsigned int v6 = (_OWORD *)(*(void *)a2 + 32 * *(unsigned int *)(a2 + 8));
  long long v7 = v5[1];
  _OWORD *v6 = *v5;
  v6[1] = v7;
  ++*(_DWORD *)(a2 + 8);
  uint64_t v8 = AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>((void *)a1, (uint64_t *)a2, a1 + 1704);
  unsigned int v16 = &v18;
  uint64_t v17 = 0x800000000;
  unint64_t v9 = *(unsigned int *)(a2 + 8);
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 4;
    do
    {
      uint64_t v14 = *(unsigned int *)(*(void *)a2 + v13);
      if (v14 != -1)
      {
        uint64_t v4 = v4 & 0xFFFFFF0000000000 | 4;
        llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v16, v11 + v14, v4);
        unint64_t v9 = *(unsigned int *)(a2 + 8);
      }
      ++v12;
      v11 += 0x400000000;
      v13 += 32;
    }
    while (v12 < v9);
    if (v17)
    {
      uint64_t v15 = *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 400);
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v15 + 184))(v15, v10, &v16);
    }
  }
  if (v16 != &v18) {
    free(v16);
  }
}

unint64_t llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 32 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

void AGCLLVMUserObject::createSamplerHeapIndexArray(void *a1, uint64_t a2)
{
  AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 253));
  unint64_t v4 = a1 + 83;
  llvm::SmallVectorImpl<unsigned int>::resizeImpl<false>((uint64_t)v4, *(unsigned int *)(a2 + 8));
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v5 = 0;
    unsigned int v6 = *(int **)a2;
    uint64_t v7 = *v4;
    do
    {
      int v8 = *v6;
      v6 += 6;
      *(_DWORD *)(v7 + 4 * v5++) = v8;
    }
    while (v5 < *(unsigned int *)(a2 + 8));
  }
}

void llvm::SmallVectorImpl<unsigned int>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v2 != a2) {
        bzero((void *)(*(void *)a1 + 4 * v2), 4 * a2 - 4 * v2);
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
}

uint64_t AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = llvm::ArrayType::get(*(llvm::ArrayType **)(a3 + 32), (llvm::Type *)*((unsigned int *)a2 + 2));
  uint64_t v7 = llvm::User::operator new((llvm::User *)0x58);
  if (**(unsigned char **)(a3 + 24))
  {
    v17[0] = *(void **)(a3 + 24);
    v18[0] = "_indirect";
    __int16 v8 = 771;
  }
  else
  {
    v17[0] = "_indirect";
    __int16 v8 = 259;
  }
  __int16 v19 = v8;
  llvm::GlobalVariable::GlobalVariable();
  if (*(void *)(a3 + 40)) {
    strlen(*(const char **)(a3 + 40));
  }
  llvm::GlobalObject::setSection();
  v17[0] = v18;
  v17[1] = (void *)0x2000000000;
  uint64_t v9 = llvm::ValueAsMetadata::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v17, v9);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  uint64_t v10 = *((unsigned int *)a2 + 2);
  if (v10)
  {
    uint64_t v11 = *a2;
    uint64_t v12 = 32 * v10;
    do
    {
      v11 += 32;
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      uint64_t Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v17, Impl);
      v12 -= 32;
    }
    while (v12);
  }
  uint64_t v14 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 376);
  uint64_t v15 = llvm::MDTuple::getImpl();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v14, v15);
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)a3, v7);
  *(void *)(a3 + 48) = v6;
  if (v17[0] != v18) {
    free(v17[0]);
  }
  return v7;
}

uint64_t AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = llvm::ArrayType::get(*(llvm::ArrayType **)(a3 + 32), (llvm::Type *)*((unsigned int *)a2 + 2));
  uint64_t v7 = llvm::User::operator new((llvm::User *)0x58);
  if (**(unsigned char **)(a3 + 24))
  {
    v17[0] = *(void **)(a3 + 24);
    v18[0] = "_indirect";
    __int16 v8 = 771;
  }
  else
  {
    v17[0] = "_indirect";
    __int16 v8 = 259;
  }
  __int16 v19 = v8;
  llvm::GlobalVariable::GlobalVariable();
  if (*(void *)(a3 + 40)) {
    strlen(*(const char **)(a3 + 40));
  }
  llvm::GlobalObject::setSection();
  v17[0] = v18;
  v17[1] = (void *)0x2000000000;
  uint64_t v9 = llvm::ValueAsMetadata::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v17, v9);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  uint64_t v10 = *((unsigned int *)a2 + 2);
  if (v10)
  {
    uint64_t v11 = *a2;
    uint64_t v12 = 24 * v10;
    do
    {
      v11 += 24;
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      uint64_t Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v17, Impl);
      v12 -= 24;
    }
    while (v12);
  }
  uint64_t v14 = *(void *)((char *)a1 + *(void *)(*a1 - 24) + 376);
  uint64_t v15 = llvm::MDTuple::getImpl();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v14, v15);
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)a3, v7);
  *(void *)(a3 + 48) = v6;
  if (v17[0] != v18) {
    free(v17[0]);
  }
  return v7;
}

unint64_t addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator>(unint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(void **)(result + 8);
  unint64_t v4 = (void *)(result + 16);
  if (v3 != (void *)(result + 16))
  {
    uint64_t v6 = (void *)(a3 + 8);
    do
    {
      uint64_t v7 = *v6;
      if (!*v6) {
        goto LABEL_13;
      }
      unsigned int v8 = *((_DWORD *)v3 + 9);
      uint64_t v9 = v6;
      do
      {
        unsigned int v10 = *(_DWORD *)(v7 + 36) + *(_DWORD *)(v7 + 32);
        BOOL v11 = v10 > v8;
        if (v10 <= v8) {
          uint64_t v12 = (uint64_t *)(v7 + 8);
        }
        else {
          uint64_t v12 = (uint64_t *)v7;
        }
        if (v11) {
          uint64_t v9 = (void *)v7;
        }
        uint64_t v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || v8 < *((_DWORD *)v9 + 8)) {
LABEL_13:
      }
        uint64_t v9 = v6;
      *((_DWORD *)v3 + 9) = *(_DWORD *)(a2 + 8);
      unsigned int v13 = *((_DWORD *)v3 + 7);
      if (v13 <= *((_DWORD *)v3 + 8))
      {
        uint64_t v14 = (uint64_t)(v9 + 4);
        do
        {
          AGCLLVMUserObject::Texture::getAllocationInfo((uint64_t)v20, v14, v13);
          unint64_t result = llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>(a2, (unint64_t)v20);
          uint64_t v15 = (_OWORD *)(*(void *)a2 + 32 * *(unsigned int *)(a2 + 8));
          long long v16 = *(_OWORD *)(result + 16);
          *uint64_t v15 = *(_OWORD *)result;
          v15[1] = v16;
          ++*(_DWORD *)(a2 + 8);
          ++v13;
        }
        while (v13 <= *((_DWORD *)v3 + 8));
      }
      uint64_t v17 = (void *)v3[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v3[2];
          BOOL v19 = *v18 == (void)v3;
          int v3 = v18;
        }
        while (!v19);
      }
      int v3 = v18;
    }
    while (v18 != v4);
  }
  return result;
}

uint64_t addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator>(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(void **)(result + 8);
  unint64_t v4 = (void *)(result + 16);
  if (v3 != (void *)(result + 16))
  {
    uint64_t v6 = (void *)(a3 + 8);
    do
    {
      uint64_t v7 = *v6;
      if (!*v6) {
        goto LABEL_13;
      }
      unsigned int v8 = *((_DWORD *)v3 + 9);
      uint64_t v9 = v6;
      do
      {
        unsigned int v10 = *(_DWORD *)(v7 + 36) + *(_DWORD *)(v7 + 32);
        BOOL v11 = v10 > v8;
        if (v10 <= v8) {
          uint64_t v12 = (uint64_t *)(v7 + 8);
        }
        else {
          uint64_t v12 = (uint64_t *)v7;
        }
        if (v11) {
          uint64_t v9 = (void *)v7;
        }
        uint64_t v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || v8 < *((_DWORD *)v9 + 8)) {
LABEL_13:
      }
        uint64_t v9 = v6;
      unsigned int v13 = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v3 + 9) = v13;
      unsigned int v14 = *((_DWORD *)v3 + 7);
      if (v14 <= *((_DWORD *)v3 + 8))
      {
        uint64_t v18 = (uint64_t)(v9 + 4);
        do
        {
          unint64_t result = AGCLLVMUserObject::Sampler::getAllocationInfo((uint64_t)&v22, v18, v14);
          unint64_t v19 = *(void *)a2;
          if (v13 >= *(_DWORD *)(a2 + 12))
          {
            if (v19 > (unint64_t)&v22 || v19 + 24 * v13 <= (unint64_t)&v22) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v20 = v19 + 24 * *(unsigned int *)(a2 + 8);
          long long v21 = v22;
          *(void *)(v20 + 16) = v23;
          *(_OWORD *)uint64_t v20 = v21;
          unsigned int v13 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v13;
          ++v14;
        }
        while (v14 <= *((_DWORD *)v3 + 8));
      }
      uint64_t v15 = (void *)v3[1];
      if (v15)
      {
        do
        {
          long long v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          long long v16 = (void *)v3[2];
          BOOL v17 = *v16 == (void)v3;
          int v3 = v16;
        }
        while (!v17);
      }
      int v3 = v16;
    }
    while (v16 != v4);
  }
  return result;
}

uint64_t virtual thunk to'AGCLLVMAGPVertexShader::isDMAPromotionDisabled(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned __int8 *)this + *(void *)(*(void *)this - 208) + 10048);
}

uint64_t AGCLLVMUserObject::Texture::getAllocationInfo(uint64_t this, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 232);
    uint64_t v5 = *(unsigned int *)(v3 + 24);
    if (v5)
    {
      uint64_t v6 = *(_DWORD **)(v3 + 16);
      uint64_t v7 = &v6[4 * v5];
      unsigned int v8 = (a3 & 0xFFFFF) - *(_DWORD *)(v3 + 236);
      do
      {
        unsigned int v9 = v6[2];
        int v10 = v8 / v9;
        v8 %= v9;
        v4 += *(_DWORD *)(*(void *)v6 + 28) * v10;
        v6 += 4;
      }
      while (v6 != v7);
    }
    a3 = a3 & 0xFFF00000 | v4 & 0xFFFFF;
  }
  *(void *)(this + 16) = *(void *)(a2 + 32);
  *(unsigned char *)(this + 8) = *(unsigned char *)(a2 + 8);
  int v11 = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(this + 9) = *(_DWORD *)(a2 + 16) == 1;
  *(_DWORD *)this = a3;
  *(_DWORD *)(this + 4) = v11;
  *(unsigned char *)(this + 24) = *(unsigned char *)(a2 + 40);
  return this;
}

uint64_t AGCLLVMUserObject::Sampler::getAllocationInfo(uint64_t this, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 232);
    uint64_t v5 = *(unsigned int *)(v3 + 24);
    if (v5)
    {
      uint64_t v6 = *(_DWORD **)(v3 + 16);
      uint64_t v7 = &v6[4 * v5];
      unsigned int v8 = (a3 & 0xFFFFF) - *(_DWORD *)(v3 + 236);
      do
      {
        unsigned int v9 = v6[2];
        int v10 = v8 / v9;
        v8 %= v9;
        v4 += *(_DWORD *)(*(void *)v6 + 28) * v10;
        v6 += 4;
      }
      while (v6 != v7);
    }
    a3 = a3 & 0xFFF00000 | v4 & 0xFFFFF;
  }
  *(void *)(this + 8) = *(void *)(a2 + 16);
  *(_DWORD *)this = a3;
  *(unsigned char *)(this + 16) = *(unsigned char *)(a2 + 24);
  return this;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = &unk_1F25C6008;
  v5[1] = v3;
  v5[3] = v5;
  iterateResourceUsers(v2, v5);
  return std::__function::__value_func<BOOL ()(ResourceIntrinsic)>::~__value_func[abi:nn180100](v5);
}

uint64_t llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::grow(uint64_t a1, unsigned int a2)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  if (a2 >= 3)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if (*(_DWORD *)a1)
  {
    char v8 = 0;
    uint64_t v9 = 0;
    int v10 = v16;
    do
    {
      char v11 = v8;
      uint64_t v12 = *(void *)(a1 + 8 + 8 * v9);
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000) {
        *v10++ = v12;
      }
      char v8 = 1;
      uint64_t v9 = 1;
    }
    while ((v11 & 1) == 0);
    if (a2 > 2)
    {
      *(_DWORD *)a1 &= ~1u;
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = MEMORY[0x1CB79F270](8 * a2, 8);
      *(void *)(a1 + 16) = v13;
    }
    return llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::moveFromOldBuckets(a1, v16, v10);
  }
  else
  {
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      uint64_t v15 = a2;
      *(void *)(a1 + 8) = MEMORY[0x1CB79F270](8 * a2, 8);
      *(void *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::moveFromOldBuckets(a1, v6, &v6[v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(8 * v7));
  }
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)unint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    char v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 24);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_10;
    }
    char v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      char v11 = 0;
      unint64_t result = llvm::DenseMapBase<llvm::SmallDenseMap<llvm::Type *,llvm::detail::DenseSetEmpty,2u,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>,llvm::Type *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseSetPair<llvm::Type *>>::LookupBucketFor<llvm::Type *>((uint64_t)v5, v10, &v11);
      *char v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void AGCLLVMAGPFragmentShader::getCompilationKeyDescription(AGCLLVMAGPFragmentShader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (unsigned int *)*((void *)this + 726);
  std::string::basic_string[abi:nn180100]<0>(v38, "AGCFragmentContextStateAGP");
  std::string::basic_string[abi:nn180100]<0>(&v43, "AGCFragmentContextState");
  std::string::basic_string[abi:nn180100]<0>(v41, "fragmentState");
  std::string::basic_string[abi:nn180100]<0>(&v102, "AGCFragmentState");
  std::string::basic_string[abi:nn180100]<0>(&v67, "GL and Metal state:");
  std::string::basic_string[abi:nn180100]<0>(v65, "alphaToCoverage");
  _agcFieldString<unsigned int>(&v68, (const void **)v65, *v4 & 1);
  std::string::basic_string[abi:nn180100]<0>(v63, "alphaToOne");
  _agcFieldString<unsigned int>(&v69, (const void **)v63, (*v4 >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v61, "sampleCoverage");
  _agcFieldString<unsigned int>(&v70, (const void **)v61, (*v4 >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v71, "GL specific state:");
  std::string::basic_string[abi:nn180100]<0>(v59, "depthStencilWriteDisabled");
  _agcFieldString<unsigned int>(&v72, (const void **)v59, (*v4 >> 4) & 1);
  std::string::basic_string[abi:nn180100]<0>(v57, "logicOp");
  _agcFieldString<unsigned int>(&v73, (const void **)v57, (*v4 >> 5) & 1);
  std::string::basic_string[abi:nn180100]<0>(v55, "logicOpState");
  _agcFieldString<char const*>(&v74, (const void **)v55, _agcLogicOpStrings[((unint64_t)*v4 >> 6) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(&v54, "alphaTest");
  _agcFieldString<unsigned int>(&v75, (const void **)&v54.__r_.__value_.__l.__data_, (*v4 >> 11) & 1);
  std::string::basic_string[abi:nn180100]<0>(v52, "alphaTestFunc");
  _agcFieldString<char const*>(&v76, (const void **)v52, _agcCompareFuncStrings[(unsigned __int16)*v4 >> 12]);
  std::string::basic_string[abi:nn180100]<0>(v50, "smoothPoints");
  _agcFieldString<unsigned int>(&v77, (const void **)v50, HIWORD(*v4) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v49, "pointSpriteEnabled");
  _agcFieldString<unsigned int>(&v78, (const void **)&v49.__r_.__value_.__l.__data_, (*v4 >> 17) & 1);
  std::string::basic_string[abi:nn180100]<0>(v47, "outputPointSize");
  _agcFieldString<unsigned int>(&v79, (const void **)v47, (*v4 >> 18) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v46, "shaderDebugEnable");
  _agcFieldString<unsigned int>(&v80, (const void **)&v46.__r_.__value_.__l.__data_, (*v4 >> 19) & 1);
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v81, (const void **)__p, *v4 >> 20);
  _agcGroupWithHeader(&v40, (uint64_t)&v102, (uint64_t)&v67, 15);
  uint64_t v5 = 45;
  do
  {
    if (v67.__r_.__value_.__s.__data_[v5 * 8 - 1] < 0) {
      operator delete(v65[v5]);
    }
    v5 -= 3;
  }
  while (v5 * 8);
  if (v45 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  _agcFieldString<std::string>(&v102, (const void **)v41, (uint64_t)&v40);
  std::string::basic_string[abi:nn180100]<0>(v55, "colorMaskState");
  std::string::basic_string[abi:nn180100]<0>(v65, "AGCColorMaskState");
  std::string::basic_string[abi:nn180100]<0>(v63, "redEnableBits");
  _agcFieldStringHex(&v67, (const void **)v63);
  std::string::basic_string[abi:nn180100]<0>(v61, "greenEnableBits");
  _agcFieldStringHex(&v68, (const void **)v61);
  std::string::basic_string[abi:nn180100]<0>(v59, "blueEnableBits");
  _agcFieldStringHex(&v69, (const void **)v59);
  std::string::basic_string[abi:nn180100]<0>(v57, "alphaEnableBits");
  _agcFieldStringHex(&v70, (const void **)v57);
  _agcGroupWithHeader(&v54, (uint64_t)v65, (uint64_t)&v67, 4);
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v70.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v70.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  _agcFieldString<std::string>(&v103, (const void **)v55, (uint64_t)&v54);
  _agcGroupWithHeader(&v67, (uint64_t)&v43, (uint64_t)&v102, 2);
  for (uint64_t j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v103.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v102 + j * 8 + 24));
    }
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v102, "mutableBuffers");
  _agcFieldStringHex(&v68, (const void **)&v102.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:nn180100]<0>(v65, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v69, (const void **)v65, v4[15] & 1);
  std::string::basic_string[abi:nn180100]<0>(v63, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v70, (const void **)v63, (v4[15] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v61, "fragmentOnly");
  _agcFieldString<unsigned int>(&v71, (const void **)v61, v4[16] & 1);
  std::string::basic_string[abi:nn180100]<0>(v59, "openglMode");
  _agcFieldString<unsigned int>(&v72, (const void **)v59, (v4[16] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v57, "customBorderColor");
  _agcFieldString<unsigned int>(&v73, (const void **)v57, (v4[16] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v55, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v74, (const void **)v55, (v4[15] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v54, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v75, (const void **)&v54.__r_.__value_.__l.__data_, (v4[15] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v52, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v76, (const void **)v52, (v4[15] >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(v50, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v77, (const void **)v50, (v4[15] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v49, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v78, (const void **)&v49.__r_.__value_.__l.__data_, (v4[15] >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v47, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v79, (const void **)v47, (unsigned __int16)(v4[15] >> 10));
  std::string::basic_string[abi:nn180100]<0>(&v46, "enableStackShadow");
  _agcFieldString<unsigned int>(&v80, (const void **)&v46.__r_.__value_.__l.__data_, (v4[15] >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(__p, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v81, (const void **)__p, v4[15] >> 31);
  std::string::basic_string[abi:nn180100]<0>(&v43, "enableHLSLDiscardSemantics");
  _agcFieldString<unsigned int>(&v82, (const void **)&v43.__r_.__value_.__l.__data_, (v4[16] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v41, "textureWriteFPRoundingMode");
  _agcFieldString<unsigned int>(&v83, (const void **)v41, (v4[16] >> 4) & 3);
  std::string::basic_string[abi:nn180100]<0>(&v40, "usesMeshShader");
  _agcFieldString<unsigned int>(&v84, (const void **)&v40.__r_.__value_.__l.__data_, (v4[16] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v37, "unused");
  _agcFieldString<unsigned int>(&v85, (const void **)&v37.__r_.__value_.__l.__data_, v4[16] >> 12);
  _agcStringRepresentation(&v36, v4 + 6);
  char v8 = std::string::insert(&v36, 0, "blendState[0]: ");
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  long long v86 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  std::string::size_type v87 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v35, v4 + 7);
  uint64_t v10 = std::string::insert(&v35, 0, "blendState[1]: ");
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
  long long v88 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  std::string::size_type v89 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v34, v4 + 8);
  uint64_t v12 = std::string::insert(&v34, 0, "blendState[2]: ");
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
  long long v90 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v91 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v33, v4 + 9);
  unsigned int v14 = std::string::insert(&v33, 0, "blendState[3]: ");
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
  long long v92 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v93 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v32, v4 + 10);
  long long v16 = std::string::insert(&v32, 0, "blendState[4]: ");
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
  long long v94 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string::size_type v95 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v31, v4 + 11);
  uint64_t v18 = std::string::insert(&v31, 0, "blendState[5]: ");
  std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
  long long v96 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  std::string::size_type v97 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v30, v4 + 12);
  uint64_t v20 = std::string::insert(&v30, 0, "blendState[6]: ");
  std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
  long long v98 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v99 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  _agcStringRepresentation(&v29, v4 + 13);
  long long v22 = std::string::insert(&v29, 0, "blendState[7]: ");
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
  long long v100 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  std::string::size_type v101 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  _agcGroupWithHeader(&v28, (uint64_t)v38, (uint64_t)&v67, 27);
  uint64_t v24 = 81;
  do
  {
    if (v67.__r_.__value_.__s.__data_[v24 * 8 - 1] < 0) {
      operator delete(v65[v24]);
    }
    v24 -= 3;
  }
  while (v24 * 8);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (v45 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v102.__r_.__value_.__l.__data_);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v25 = *((void *)this + 614);
  std::string::basic_string[abi:nn180100]<0>(v65, "AGCDrawBufferState");
  std::string::basic_string[abi:nn180100]<0>(v63, "enabledBits");
  _agcFieldStringHex(&v102, (const void **)v63);
  std::string::basic_string[abi:nn180100]<0>(v61, "sampleCount");
  _agcFieldString<unsigned int>(&v103, (const void **)v61, (*(_DWORD *)(v25 + 32) >> 8) & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v59, "colorSampleCount");
  _agcFieldString<unsigned int>(&v104, (const void **)v59, (unsigned __int16)*(_DWORD *)(v25 + 32) >> 12);
  std::string::basic_string[abi:nn180100]<0>(v57, "outputPartitionSize");
  _agcFieldString<unsigned int>(&v105, (const void **)v57, *(_WORD *)(v25 + 34) & 0x1FF);
  std::string::basic_string[abi:nn180100]<0>(v55, "LIBSpilling");
  _agcFieldString<unsigned int>(&v106, (const void **)v55, (*(_DWORD *)(v25 + 32) >> 25) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v54, "unused");
  _agcFieldString<unsigned int>(&v107, (const void **)&v54.__r_.__value_.__l.__data_, *(_DWORD *)(v25 + 32) >> 27);
  std::string::basic_string[abi:nn180100]<0>(v52, "encoded : ");
  std::string::basic_string[abi:nn180100]<0>(v50, "encoded[0]");
  _agcStringRepresentation(&v49, (_DWORD *)v25);
  _agcFieldString<std::string>(&v67, (const void **)v50, (uint64_t)&v49);
  std::string::basic_string[abi:nn180100]<0>(v47, "encoded[1]");
  _agcStringRepresentation(&v46, (_DWORD *)(v25 + 4));
  _agcFieldString<std::string>(&v68, (const void **)v47, (uint64_t)&v46);
  std::string::basic_string[abi:nn180100]<0>(__p, "encoded[2]");
  _agcStringRepresentation(&v43, (_DWORD *)(v25 + 8));
  _agcFieldString<std::string>(&v69, (const void **)__p, (uint64_t)&v43);
  std::string::basic_string[abi:nn180100]<0>(v41, "encoded[3]");
  _agcStringRepresentation(&v40, (_DWORD *)(v25 + 12));
  _agcFieldString<std::string>(&v70, (const void **)v41, (uint64_t)&v40);
  std::string::basic_string[abi:nn180100]<0>(v38, "encoded[4]");
  _agcStringRepresentation(&v37, (_DWORD *)(v25 + 16));
  _agcFieldString<std::string>(&v71, (const void **)v38, (uint64_t)&v37);
  std::string::basic_string[abi:nn180100]<0>(&v36, "encoded[5]");
  _agcStringRepresentation(&v35, (_DWORD *)(v25 + 20));
  _agcFieldString<std::string>(&v72, (const void **)&v36.__r_.__value_.__l.__data_, (uint64_t)&v35);
  std::string::basic_string[abi:nn180100]<0>(&v34, "encoded[6]");
  _agcStringRepresentation(&v33, (_DWORD *)(v25 + 24));
  _agcFieldString<std::string>(&v73, (const void **)&v34.__r_.__value_.__l.__data_, (uint64_t)&v33);
  std::string::basic_string[abi:nn180100]<0>(&v32, "encoded[7]");
  _agcStringRepresentation(&v31, (_DWORD *)(v25 + 28));
  _agcFieldString<std::string>(&v74, (const void **)&v32.__r_.__value_.__l.__data_, (uint64_t)&v31);
  _agcGroupWithHeader(&v108, (uint64_t)v52, (uint64_t)&v67, 8);
  _agcGroupWithHeader(&v30, (uint64_t)v65, (uint64_t)&v102, 7);
  for (uint64_t k = 0; k != -21; k -= 3)
  {
    if (SHIBYTE(v108.__r_.__value_.__r.__words[k + 2]) < 0) {
      operator delete(*(void **)((char *)&v108.__r_.__value_.__l.__data_ + k * 8));
    }
  }
  for (uint64_t m = 0; m != -24; m -= 3)
  {
    if (SHIBYTE(v74.__r_.__value_.__r.__words[m + 2]) < 0) {
      operator delete(*(void **)((char *)&v74.__r_.__value_.__l.__data_ + m * 8));
    }
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v42 < 0) {
    operator delete(v41[0]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (v45 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v58 < 0) {
    operator delete(v57[0]);
  }
  if (v60 < 0) {
    operator delete(v59[0]);
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)&v28.__r_.__value_.__l.__data_, (const void **)&v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void _agcStringRepresentation(std::string *a1, _DWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v17, "AGCDrawBuffer");
  std::string::basic_string[abi:nn180100]<0>(v15, "pbeSourceFormat");
  _agcFieldString<char const*>(&v19, (const void **)v15, _agcPBESourceFormatTypeStrings[*a2 & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v13, "numWrittenComponents");
  _agcFieldString<unsigned int>(&v20, (const void **)v13, *a2 >> 5);
  std::string::basic_string[abi:nn180100]<0>(v11, "gammaCorrection");
  _agcFieldString<unsigned int>(&v21, (const void **)v11, (*a2 >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "preEmitSwizzle");
  _agcFieldString<char const*>(&v22, (const void **)v9, _agcPreEmitSwizzleStrings[((unint64_t)*a2 >> 9) & 7]);
  std::string::basic_string[abi:nn180100]<0>(v7, "outputPartitionOffset");
  _agcFieldString<unsigned int>(&v23, (const void **)v7, (*a2 >> 12));
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v24, (const void **)__p, *a2 >> 20);
  _agcGroupWithHeader(a1, (uint64_t)v17, (uint64_t)&v19, 6);
  for (uint64_t i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v24.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
}

{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  uint64_t v25;

  uint64_t v25 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v17, "AGCDrawBuffer");
  std::string::basic_string[abi:nn180100]<0>(v15, "pbeSourceFormat");
  _agcFieldString<char const*>(&v19, (const void **)v15, _agcPBESourceFormatTypeStrings[*a2 & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v13, "numWrittenComponents");
  _agcFieldString<unsigned int>(&v20, (const void **)v13, *a2 >> 5);
  std::string::basic_string[abi:nn180100]<0>(v11, "gammaCorrection");
  _agcFieldString<unsigned int>(&v21, (const void **)v11, (*a2 >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "preEmitSwizzle");
  _agcFieldString<char const*>(&v22, (const void **)v9, _agcPreEmitSwizzleStrings[((unint64_t)*a2 >> 9) & 7]);
  std::string::basic_string[abi:nn180100]<0>(v7, "outputPartitionOffset");
  _agcFieldString<unsigned int>(&v23, (const void **)v7, (*a2 >> 12));
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v24, (const void **)__p, *a2 >> 20);
  _agcGroupWithHeader(a1, (uint64_t)v17, 0, (uint64_t)&v19, 6);
  for (uint64_t i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v24.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
}

{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  uint64_t v25;

  uint64_t v25 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v17, "AGCDrawBuffer");
  std::string::basic_string[abi:nn180100]<0>(v15, "pbeSourceFormat");
  _agcFieldString<char const*>(&v19, (const void **)v15, _agcPBESourceFormatTypeStrings[*a2 & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v13, "numWrittenComponents");
  _agcFieldString<unsigned int>(&v20, (const void **)v13, *a2 >> 5);
  std::string::basic_string[abi:nn180100]<0>(v11, "gammaCorrection");
  _agcFieldString<unsigned int>(&v21, (const void **)v11, (*a2 >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "preEmitSwizzle");
  _agcFieldString<char const*>(&v22, (const void **)v9, _agcPreEmitSwizzleStrings[((unint64_t)*a2 >> 9) & 7]);
  std::string::basic_string[abi:nn180100]<0>(v7, "outputPartitionOffset");
  _agcFieldString<unsigned int>(&v23, (const void **)v7, (*a2 >> 12));
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v24, (const void **)__p, *a2 >> 20);
  _agcGroupWithHeader(a1, (uint64_t)v17, (uint64_t)&v19, 6);
  for (uint64_t i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v24.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
}

{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  uint64_t v25;

  uint64_t v25 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(v17, "AGCDrawBuffer");
  std::string::basic_string[abi:nn180100]<0>(v15, "pbeSourceFormat");
  _agcFieldString<char const*>(&v19, (const void **)v15, (&_agcPBESourceFormatTypeStrings)[*a2 & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v13, "numWrittenComponents");
  _agcFieldString<unsigned int>(&v20, (const void **)v13, *a2 >> 5);
  std::string::basic_string[abi:nn180100]<0>(v11, "gammaCorrection");
  _agcFieldString<unsigned int>(&v21, (const void **)v11, (*a2 >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "preEmitSwizzle");
  _agcFieldString<char const*>(&v22, (const void **)v9, (&_agcPreEmitSwizzleStrings)[((unint64_t)*a2 >> 9) & 7]);
  std::string::basic_string[abi:nn180100]<0>(v7, "outputPartitionOffset");
  _agcFieldString<unsigned int>(&v23, (const void **)v7, (*a2 >> 12));
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v24, (const void **)__p, *a2 >> 20);
  _agcGroupWithHeader(a1, (uint64_t)v17, (uint64_t)&v19, 6);
  for (uint64_t i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v24.__r_.__value_.__l.__data_ + i * 8));
    }
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
}

uint64_t _agcFieldStringHex(std::string *a1, const void **a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v9[1] + *(void *)(v9[0] - 24)) = *(_DWORD *)((unsigned char *)&v9[1] + *(void *)(v9[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(a1, a2, (uint64_t)&__p);
  if (v7 < 0) {
    operator delete(__p);
  }
  v8[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v9[0] = v4;
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB7A0710](&v11);
}

{
  uint64_t v4;
  void *__p;
  char v7;
  void v8[2];
  void v9[11];
  char v10;
  uint64_t v11;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v9[1] + *(void *)(v9[0] - 24)) = *(_DWORD *)((unsigned char *)&v9[1] + *(void *)(v9[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(a1, a2, (uint64_t)&__p);
  if (v7 < 0) {
    operator delete(__p);
  }
  v8[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v9[0] = v4;
  v9[1] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CB7A0710](&v11);
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1CB7A0600](v19, a1);
  if (v19[0])
  {
    char v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    uint64_t v8 = a2 + a3;
    if ((*((_DWORD *)v6 + 2) & 0xB0) == 0x20) {
      uint64_t v9 = a2 + a3;
    }
    else {
      uint64_t v9 = a2;
    }
    int v10 = *((_DWORD *)v6 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v11 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
      int v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v10;
      if (!v7)
      {
LABEL_24:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
        goto LABEL_25;
      }
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    uint64_t v12 = *((void *)v6 + 3);
    BOOL v13 = v12 <= a3;
    int64_t v14 = v12 - a3;
    if (v13) {
      int64_t v15 = 0;
    }
    else {
      int64_t v15 = v14;
    }
    if (v9 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v9 - a2) != v9 - a2)
    {
      goto LABEL_24;
    }
    if (v15 >= 1)
    {
      std::string::basic_string[abi:nn180100](&__b, v15, (char)v10);
      char v16 = v21 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v17 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(void *)v7 + 96))(v7, v16, v15);
      if (v21 < 0) {
        operator delete(__b.__locale_);
      }
      if (v17 != v15) {
        goto LABEL_24;
      }
    }
    if (v8 - v9 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v9, v8 - v9) != v8 - v9)
    {
      goto LABEL_24;
    }
    *((void *)v6 + 3) = 0;
  }
LABEL_25:
  MEMORY[0x1CB7A0610](v19);
  return a1;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 24;
  uint64_t v3 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  char v6 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v8;
  *(void *)(a1 + *(void *)(v8 - 24)) = v7;
  *(void *)(a1 + 8) = 0;
  uint64_t v9 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v9, (void *)(a1 + 24));
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v10 = v6[5];
  uint64_t v11 = v6[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v4 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v6[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v6[6];
  *(void *)a1 = v2;
  *(void *)(a1 + 128) = v3;
  *(void *)(a1 + 16) = v5;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

uint64_t std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2, const void **a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t result = std::string::basic_string[abi:nn180100](a1, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *a3;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void AGCLLVMAGPFragmentShader::getFragmentVaryings(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  void v41[3] = *MEMORY[0x1E4F143B8];
  size_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v35 = 0;
  std::string v36 = 0;
  unsigned __int8 v34 = 0;
  AGCLLVMAGPFragmentShader::agpParseStageIOMetadata((AGCLLVMUserShader *)a1, a3, (uint64_t *)&v36, (int *)&v38 + 1, (int *)&v38, (int *)&v35 + 1, (unsigned int *)&v35, &v34);
  uint64_t v6 = a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    uint64_t v6 = **(void **)(a2 + 16);
  }
  if (v35 == 2 && v6 == *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 216)) {
    int v8 = 5;
  }
  else {
    int v8 = v35;
  }
  int v30 = v8;
  int v31 = HIDWORD(v38);
  if ((HIDWORD(v38) & 0xFFFFFFFD) == 1) {
    goto LABEL_20;
  }
  int Key = llvm::StringMapImpl::FindKey();
  if (Key == -1) {
    goto LABEL_20;
  }
  if (Key == (unint64_t)*(unsigned int *)(a1 + 5888)) {
    goto LABEL_20;
  }
  int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 5880) + 8 * Key) + 8);
  int v12 = v11 >> 4;
  if (!(v11 >> 4)) {
    goto LABEL_20;
  }
  v10.i32[0] = v11 >> 4;
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v10);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.i32[0] >= HIDWORD(v35))
  {
    LODWORD(v38) = 3;
    int v31 = 1;
LABEL_20:
    int v12 = 0;
    *a4 = a4 + 2;
    a4[1] = 0x400000000;
    goto LABEL_21;
  }
  *a4 = a4 + 2;
  a4[1] = 0x400000000;
  if (!MGGetBoolAnswer()) {
    goto LABEL_25;
  }
  Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DISABLE_VARYING_SPLITTING", v14);
  if (!Value || *Value == 48 || !atoi(Value)) {
    goto LABEL_25;
  }
LABEL_21:
  if (MGGetBoolAnswer())
  {
    uint64_t v17 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_FORCE_VARYING_SPLITTING", v16);
    if (v17)
    {
      if (*v17 != 48 && atoi(v17))
      {
LABEL_25:
        int v29 = v12;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
          uint64_t v18 = **(void **)(a2 + 16);
        }
        else {
          uint64_t v18 = a2;
        }
        int v19 = HIDWORD(v35);
        if (HIDWORD(v35))
        {
          unsigned int v20 = 0;
          char v21 = v36;
          size_t v22 = v37;
          int v23 = v38;
          int v24 = v34;
          do
          {
            GenericVarying::getComponentSemantic(&__p, v21, v22, v20);
            if ((v29 & (1 << v20)) != 0) {
              int v25 = 1;
            }
            else {
              int v25 = v31;
            }
            if ((v29 & (1 << v20)) != 0) {
              int v26 = 3;
            }
            else {
              int v26 = v23;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            AGCLLVMAGPFragmentShader::getFragmentVarying((uint64_t)v39, (void *)a1, v18, p_p, size, v25, v26, 1, v30, v24 != 0);
            llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>::push_back((uint64_t)a4, (unint64_t)v39);
            if (v40 != v41) {
              free(v40);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            ++v20;
          }
          while (v19 != v20);
        }
        return;
      }
    }
  }
  AGCLLVMAGPFragmentShader::getFragmentVarying((uint64_t)v39, (void *)a1, a2, v36, v37, v31, v38, HIDWORD(v35), v30, v34);
  llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>::push_back((uint64_t)a4, (unint64_t)v39);
  if (v40 != v41) {
    free(v40);
  }
}

unint64_t llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t result = llvm::SmallVectorTemplateCommon<AGCLLVMUserFragmentShader::FragmentVarying,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>>(a1, a2);
  uint64_t v4 = *(void *)a1 + 80 * *(unsigned int *)(a1 + 8);
  long long v5 = *(_OWORD *)result;
  long long v6 = *(_OWORD *)(result + 16);
  *(void *)(v4 + 32) = *(void *)(result + 32);
  *(_OWORD *)uint64_t v4 = v5;
  *(_OWORD *)(v4 + 16) = v6;
  *(void *)(v4 + 48) = 0x500000000;
  *(void *)(v4 + 40) = v4 + 56;
  uint64_t v7 = v4 + 40;
  if (*(_DWORD *)(result + 48)) {
    unint64_t result = llvm::SmallVectorImpl<unsigned int>::operator=(v7, result + 40);
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 4 * v5);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 4 * v5), (const void *)(*(void *)a2 + 4 * v5), *(void *)a2 + 4 * v6 - (*(void *)a2 + 4 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

{
  const void *v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v7 = *(unsigned int *)(a2 + 8);
      int v8 = *(unsigned int *)(a1 + 8);
      if (v8 >= v7)
      {
        if (v7) {
          memmove(*(void **)a1, v4, 4 * v7);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v7)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v8) {
          memmove(*(void **)a1, v4, 4 * v8);
        }
        else {
          int v8 = 0;
        }
        uint64_t v9 = *(unsigned int *)(a2 + 8);
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 4 * v8), (const void *)(*(void *)a2 + 4 * v8), *(void *)a2 + 4 * v9 - (*(void *)a2 + 4 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v7;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

unint64_t llvm::SmallVectorTemplateCommon<AGCLLVMUserFragmentShader::FragmentVarying,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>>(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 80 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>::grow();
    }
    llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>::grow();
  }
  return a2;
}

uint64_t AGCLLVMAGPFragmentShader::agpParseStageIOMetadata(AGCLLVMUserShader *a1, uint64_t a2, uint64_t *a3, int *a4, int *a5, int *a6, unsigned int *a7, unsigned char *a8)
{
  int64_t v14 = a1;
  AGCLLVMUserShader::getVaryingModeMap(a1);
  AGCLLVMUserShader::getInterpolationLocationMap(v15);
  uint64_t result = llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16));
  *a3 = result;
  a3[1] = v17;
  *a6 = 0;
  *a7 = 10;
  *a8 = 0;
  unsigned int v18 = *(_DWORD *)(a2 + 8);
  if (v18 < 4)
  {
    *a4 = 1;
    goto LABEL_51;
  }
  uint64_t v41 = a6;
  char v42 = a8;
  std::string v43 = v14;
  uint64_t v44 = a7;
  int v19 = 2;
  unsigned int v20 = 3;
  char v21 = 1;
  char v22 = 1;
  do
  {
    uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * v18 + 8 * v20));
    int64_t v25 = v24;
    int Key = llvm::StringMapImpl::FindKey();
    if (Key != -1 && Key != (unint64_t)dword_1EBD0EB98)
    {
      uint64_t result = (uint64_t)llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>(String, v25);
      char v21 = 0;
      int v30 = *(_DWORD *)(*(void *)result + 8);
LABEL_22:
      *a4 = v30;
      goto LABEL_23;
    }
    uint64_t result = llvm::StringMapImpl::FindKey();
    if (result != -1 && (int)result != (unint64_t)dword_1EBD0EBB8)
    {
      uint64_t result = (uint64_t)llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>(String, v25);
      char v22 = 0;
      *a5 = *(_DWORD *)(*(void *)result + 8);
      goto LABEL_23;
    }
    if (v25 > 16)
    {
      if (v25 == 26)
      {
        if (*String == 0x65746E692E726961
          && String[1] == 0x6F6974616C6F7072
          && String[2] == 0x6974636E75665F6ELL
          && *((_WORD *)String + 12) == 28271)
        {
          *char v42 = 1;
        }
      }
      else if (v25 == 17)
      {
        BOOL v31 = *String == 0x5F6772612E726961 && String[1] == 0x6D616E5F65707974;
        if (v31 && *((unsigned char *)String + 16) == 101)
        {
          unsigned int v20 = v19 + 2;
          std::string v33 = (char *)llvm::MDString::getString(*(llvm::MDString **)(a2
                                                                     - 8 * *(unsigned int *)(a2 + 8)
                                                                     + 8 * (v19 + 2)));
          uint64_t result = AGCLLVMBuilder::getComponentType(v33, v34, v41);
          *uint64_t v44 = result;
        }
      }
    }
    else if (v25 == 12)
    {
      if (!(*String ^ 0x5F6772612E726961 | *((unsigned int *)String + 2) ^ 0x656D616ELL)) {
        unsigned int v20 = v19 + 2;
      }
    }
    else if (v25 == 16 && *String == 0x747265762E726961 && String[1] == 0x65756C61765F7865)
    {
      char v21 = 0;
      int v30 = 5;
      goto LABEL_22;
    }
LABEL_23:
    int v19 = v20++;
    unsigned int v18 = *(_DWORD *)(a2 + 8);
  }
  while (v20 < v18);
  unsigned int v40 = *v44;
  if (v21) {
    *a4 = v40 > 1;
  }
  if ((v22 & 1) == 0)
  {
    BOOL v39 = *a5 == 3;
    int64_t v14 = v43;
    goto LABEL_59;
  }
  int64_t v14 = v43;
  if (v40 >= 2)
  {
LABEL_51:
    int v38 = 3;
    BOOL v39 = 1;
    goto LABEL_52;
  }
  BOOL v39 = 0;
  int v38 = 0;
LABEL_52:
  *a5 = v38;
LABEL_59:
  if (*a4 == 1 && !v39) {
    *a5 = 3;
  }
  if (*(unsigned char *)(*((void *)v14 + 726) + 65))
  {
    uint64_t result = llvm::StringMapImpl::FindKey();
    if (result != -1
      && (int)result != (unint64_t)*((unsigned int *)v14 + 1472)
      && (*(_DWORD *)(*(void *)(*((void *)v14 + 735) + 8 * (int)result) + 8) & 0xF) == 3)
    {
      *a4 = 3;
    }
  }
  return result;
}

uint64_t *llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(AGCLLVMUserShader::getVaryingModeMap(void)::varying_mode_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EBD0EBA0) = qword_1EBD0EBA0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x1CB79F270](a2 + 17, 8);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 16;
  if (a2) {
    memcpy((void *)(v8 + 16), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *(void *)uint64_t v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  *uint64_t i = v9;
  ++dword_1EBD0EB9C;
  for (uint64_t i = (uint64_t *)(AGCLLVMUserShader::getVaryingModeMap(void)::varying_mode_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMUserShader::getVaryingModeMap(void)::varying_mode_map));
        !*i || *i == -8;
  return i;
}

uint64_t *llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(AGCLLVMUserShader::getInterpolationLocationMap(void)::interpolation_location_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EBD0EBC0) = qword_1EBD0EBC0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x1CB79F270](a2 + 17, 8);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 16;
  if (a2) {
    memcpy((void *)(v8 + 16), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *(void *)uint64_t v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  *uint64_t i = v9;
  ++dword_1EBD0EBBC;
  for (uint64_t i = (uint64_t *)(AGCLLVMUserShader::getInterpolationLocationMap(void)::interpolation_location_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMUserShader::getInterpolationLocationMap(void)::interpolation_location_map));
        !*i || *i == -8;
  return i;
}

void AGCLLVMAGPFragmentShader::getFragmentVarying(uint64_t a1, void *a2, uint64_t a3, void *a4, size_t a5, int a6, int a7, uint64_t a8, int a9, char a10)
{
  uint64_t v17 = *((unsigned int *)a2 + 1480);
  int Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*((unsigned int *)a2 + 1472)) {
    int v19 = 0;
  }
  else {
    int v19 = *(_DWORD *)(*(void *)(a2[735] + 8 * Key) + 8) >> 31;
  }
  GenericVarying::GenericVarying((uint64_t)v30, a8, a9, a6, a7, v17, v19);
  if (a4)
  {
    std::string::basic_string[abi:nn180100](&__dst, a4, a5);
  }
  else
  {
    long long __dst = 0uLL;
    uint64_t v29 = 0;
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)__p);
  }
  long long __p = __dst;
  uint64_t v32 = v29;
  llvm::SmallVectorTemplateBase<GenericVarying,false>::push_back((uint64_t)(a2 + 739), (unint64_t)v30);
  *(void *)(a1 + 40) = a1 + 56;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign(a1 + 40, 5uLL, -559038737);
  *(_DWORD *)a1 = a8;
  *(_DWORD *)(a1 + 4) = a6;
  *(_DWORD *)(a1 + 8) = a7;
  *(_DWORD *)(a1 + 12) = a9;
  *(_DWORD *)(a1 + 16) = v17;
  *(void *)(a1 + 24) = a3;
  if (a10)
  {
    unsigned int v20 = (char *)a2 + 4 * a8;
    ++*((_DWORD *)v20 + 1612);
    char v21 = &a2[4 * a8];
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)(v21 + 826), v17);
    uint64_t v22 = (uint64_t)(v21 + 846);
    int v23 = 1;
  }
  else
  {
    if (a6 != 5)
    {
      if (a6 == 3) {
        uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t, BOOL))(*a2 + 648))(a2, v17, a8, a9 == 1);
      }
      else {
        uint64_t v24 = AGCLLVMUserFragmentShader::setupInterpolation(a2, 1, v17, a8);
      }
      goto LABEL_18;
    }
    unsigned int v20 = (char *)a2 + 4 * a8;
    ++*((_DWORD *)v20 + 1612);
    int64_t v25 = &a2[4 * a8];
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)(v25 + 826), v17);
    uint64_t v22 = (uint64_t)(v25 + 846);
    int v23 = 10;
  }
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v22, v23);
  uint64_t v24 = 0;
  int v26 = *((_DWORD *)v20 + 1617);
  *((_DWORD *)v20 + 1617) = v26 + 1;
  *(_DWORD *)(*(void *)(a1 + 40) + 4 * a8) = v26;
LABEL_18:
  *(void *)(a1 + 32) = v24;
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)__p);
  }
}

void AGCLLVMUserShader::getInterpolationLocationMap(AGCLLVMUserShader *this)
{
  {
    AGCLLVMUserShader::getInterpolationLocationMap(void)::interpolation_location_map = 0;
    *(void *)&dword_1EBD0EBB8 = 0;
    qword_1EBD0EBC0 = 0x1000000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserShader::getInterpolationLocationMap(void)::interpolation_location_map, &dword_1CAC02000);
  }
}

void AGCLLVMUserShader::getVaryingModeMap(AGCLLVMUserShader *this)
{
  {
    AGCLLVMUserShader::getVaryingModeMap(void)::varying_mode_map = 0;
    *(void *)&dword_1EBD0EB98 = 0;
    qword_1EBD0EBA0 = 0x1000000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserShader::getVaryingModeMap(void)::varying_mode_map, &dword_1CAC02000);
  }
}

uint64_t GenericVarying::GenericVarying(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7)
{
  *(_DWORD *)uint64_t result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a5;
  *(_DWORD *)(result + 16) = a6;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(unsigned char *)(result + 56) = a3 == 1;
  *(unsigned char *)(result + 57) = a7;
  *(unsigned char *)(result + 58) = 0;
  switch(a4)
  {
    case 0:
      BOOL v7 = a3 == 1;
      if (a7)
      {
        int v8 = 10;
        int v9 = 14;
        goto LABEL_22;
      }
      if (a3 == 1) {
        int v8 = 5;
      }
      else {
        int v8 = 1;
      }
      goto LABEL_24;
    case 1:
      BOOL v7 = a3 == 1;
      if (a7)
      {
        int v8 = 11;
        int v9 = 15;
      }
      else
      {
        int v8 = 2;
        int v9 = 6;
      }
      goto LABEL_22;
    case 2:
      BOOL v7 = a3 == 1;
      if (a7)
      {
        int v8 = 12;
        int v9 = 16;
      }
      else
      {
        int v8 = 3;
        int v9 = 7;
      }
      goto LABEL_22;
    case 3:
      if (a7) {
        int v8 = 20;
      }
      else {
        int v8 = 18;
      }
      if (a3 == 1) {
        ++v8;
      }
      goto LABEL_24;
    case 5:
      BOOL v7 = a3 == 1;
      if (a7)
      {
        int v8 = 13;
        int v9 = 17;
      }
      else
      {
        int v8 = 4;
        int v9 = 8;
      }
LABEL_22:
      if (v7) {
        int v8 = v9;
      }
LABEL_24:
      *(_DWORD *)(result + 60) = v8;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AGCLLVMBuilder::getComponentType(char *a1, unint64_t a2, int *a3)
{
  AGCLLVMBuilder::getVariableTypeMap((AGCLLVMBuilder *)a1);
  *a3 = 1;
  if ((a1[1] < 0 || (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * a1[1] + 60) & 0x400) == 0)
    && (a1[a2 - 1] & 0x80000000) == 0
    && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * a1[a2 - 1] + 60) & 0x400) != 0)
  {
    if (a2 >= a2 - 1) {
      --a2;
    }
    *a3 = atoi(&a1[a2]);
  }
  int Key = llvm::StringMapImpl::FindKey();
  uint64_t result = 10;
  if (Key != -1 && Key != (unint64_t)dword_1EBD0E978) {
    return *(unsigned int *)(*(void *)(AGCLLVMBuilder::getVariableTypeMap(void)::variable_type_map + 8 * Key) + 8);
  }
  return result;
}

void AGCLLVMBuilder::getVariableTypeMap(AGCLLVMBuilder *this)
{
  {
    AGCLLVMBuilder::getVariableTypeMap(void)::variable_type_map = 0;
    *(void *)&dword_1EBD0E978 = 0;
    qword_1EBD0E980 = 0x1000000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<ComponentType,llvm::MallocAllocator>::~StringMap, &AGCLLVMBuilder::getVariableTypeMap(void)::variable_type_map, &dword_1CAC02000);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AGCLLVMBuilder::getVariableTypeMap(void)::flag, memory_order_acquire) != -1)
  {
    v3[0] = &v1;
    v3[1] = &AGCLLVMBuilder::getVariableTypeMap(void)::variable_type_map;
    unsigned int v2 = v3;
    std::__call_once(&AGCLLVMBuilder::getVariableTypeMap(void)::flag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGCLLVMBuilder::getVariableTypeMap(void)::{lambda(llvm::StringMap<ComponentType,llvm::MallocAllocator> &)#1} &,llvm::StringMap<ComponentType,llvm::MallocAllocator> &>>);
  }
}

uint64_t AGCLLVMAGPFragmentShader::constructReply(AGCLLVMAGPFragmentShader *this)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  if (!AGCDeserializedReply::deserialize((AGCLLVMAGPFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160)))return 0; {
  AGCLLVMObject::validateBackendReply((AGCLLVMAGPFragmentShader *)((char *)this + *(void *)(*(void *)this - 24)));
  }
  int v101 = AGCLLVMUserObject::constructFlatReply(this);
  int v102 = AGCLLVMUserFragmentShader::constructFlatReply(this);
  unsigned int v2 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v3 = v2 + 696;
  uint64_t v4 = *((void *)v2 + 87);
  if (v4)
  {
    if (*((void *)v2 + 88)) {
      uint64_t v5 = v2 + 696;
    }
    else {
      uint64_t v5 = v2 + 1256;
    }
  }
  else
  {
    uint64_t v5 = v2 + 1256;
  }
  int v8 = *(unsigned int **)v5;
  uint64_t v7 = *((void *)v5 + 1);
  if (v8) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (int *)((char *)v8 + *v8);
  }
  int v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 9u && (uint64_t v12 = v11[4]) != 0)
  {
    uint8x8_t v13 = (unsigned int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
    if (!v4)
    {
LABEL_17:
      int64_t v14 = v2 + 1256;
      goto LABEL_21;
    }
  }
  else
  {
    uint8x8_t v13 = 0;
    if (!v4) {
      goto LABEL_17;
    }
  }
  uint64_t v15 = *((void *)v2 + 88);
  int64_t v14 = v2 + 1256;
  if (v15) {
    int64_t v14 = v3;
  }
LABEL_21:
  uint64_t v17 = *(unsigned int **)v14;
  uint64_t v16 = *((void *)v14 + 1);
  if (v17) {
    BOOL v18 = v16 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18) {
    int v19 = 0;
  }
  else {
    int v19 = (int *)((char *)v17 + *v17);
  }
  unsigned int v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 5u && (uint64_t v21 = v20[2]) != 0) {
    uint64_t v22 = (int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
  }
  else {
    uint64_t v22 = 0;
  }
  int v23 = (unsigned __int16 *)((char *)v22 - *v22);
  unsigned int v24 = *v23;
  if (v24 < 0x25) {
    goto LABEL_41;
  }
  if (v23[18] && *((unsigned char *)v22 + v23[18])) {
    goto LABEL_37;
  }
  if (v24 < 0x27) {
    goto LABEL_41;
  }
  if (v23[19] && *((unsigned char *)v22 + v23[19]))
  {
LABEL_37:
    BOOL v25 = 1;
    goto LABEL_42;
  }
  if (v24 >= 0x29 && (uint64_t v26 = v23[20]) != 0) {
    BOOL v25 = *((unsigned __int8 *)v22 + v26) != 0;
  }
  else {
LABEL_41:
  }
    BOOL v25 = 0;
LABEL_42:
  int v100 = v25;
  (*(void (**)(AGCLLVMAGPFragmentShader *, unsigned int *))(*(void *)this + 544))(this, v13);
  uint64_t v27 = *((unsigned int *)this + 1480);
  if (v27)
  {
    std::string v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(*((unsigned int *)this + 1480));
    memset(v28, 255, 4 * v27);
    uint64_t v29 = &v28[4 * v27];
  }
  else
  {
    std::string v28 = 0;
    uint64_t v29 = 0;
  }
  uint64_t v30 = (int)*v13;
  uint64_t v31 = *(unsigned __int16 *)((char *)v13 - v30 + 8);
  if (*(_WORD *)((char *)v13 - v30 + 8))
  {
    uint64_t v32 = *(unsigned int *)((char *)v13 + v31);
    std::string v33 = (char *)v13 + v31 + v32;
  }
  else
  {
    uint64_t v31 = 0;
    std::string v33 = 0;
    uint64_t v32 = *v13;
  }
  uint64_t v34 = *(unsigned int *)((char *)v13 + v31 + v32);
  if (v34)
  {
    uint64_t v35 = 0;
    int v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 4 * v34;
    while (1)
    {
      uint64_t v39 = *(unsigned int *)&v33[v35 + 4];
      unsigned int v40 = &v33[v35 + v39];
      uint64_t v41 = *((int *)v40 + 1);
      uint64_t v42 = v39 - v41;
      std::string v43 = &v33[v35 + v39 - v41];
      unsigned int v44 = *((unsigned __int16 *)v43 + 2);
      if (v44 < 5)
      {
        uint64_t v52 = v37;
      }
      else
      {
        uint64_t v45 = -v41;
        uint64_t v46 = *((unsigned __int16 *)v43 + 4);
        if (!v46) {
          goto LABEL_62;
        }
        unsigned int v47 = v33[v35 + 4 + v39 + v46];
        BOOL v48 = v47 > 0xA;
        int v49 = (1 << v47) & 0x602;
        if (v48 || v49 == 0) {
          goto LABEL_62;
        }
        if (v44 < 7)
        {
          uint64_t v51 = 0;
        }
        else
        {
          uint64_t v51 = *(unsigned __int16 *)&v33[v35 + 10 + v42];
          if (v51) {
            uint64_t v51 = *(unsigned int *)&v33[v35 + 4 + v39 + v51];
          }
        }
        if (*(_DWORD *)&v28[4 * v51] != -1)
        {
LABEL_62:
          uint64_t v52 = v37;
LABEL_63:
          uint64_t v53 = v45 + v35;
          if (*(_WORD *)&v33[v39 + 8 + v53] && v33[v35 + 4 + v39 + *(unsigned __int16 *)&v33[v39 + 8 + v53]] == 5) {
            v36 += 2;
          }
          goto LABEL_66;
        }
        uint64_t v52 = (v37 + 1);
        *(_DWORD *)&v28[4 * v51] = v37;
        uint64_t v54 = *((int *)v40 + 1);
        if (*(unsigned __int16 *)&v33[v35 + 4 + v39 - v54] >= 5u)
        {
          uint64_t v45 = -v54;
          goto LABEL_63;
        }
      }
LABEL_66:
      v35 += 4;
      uint64_t v37 = v52;
      if (v38 == v35) {
        goto LABEL_71;
      }
    }
  }
  LODWORD(v52) = 0;
  int v36 = 0;
LABEL_71:
  uint64_t v55 = *(void *)this;
  char v56 = *(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1762);
  int v112 = 0;
  BOOL v113 = 0;
  uint64_t v114 = 0;
  v115[0] = (char *)v116;
  v115[1] = (char *)0x800000000;
  v116[64] = 0x1FFFFFFFFLL;
  char v117 = v56;
  int v119 = 0;
  memset(v118, 0, 122);
  char v120 = 1;
  if (*(unsigned char *)(*((void *)this + 726) + 64)) {
    v118[121] = 1;
  }
  unint64_t v57 = *((unsigned int *)this + 1480);
  if (v57)
  {
    uint64_t v58 = 0;
    unint64_t v59 = 0;
    while (1)
    {
      unint64_t v60 = *((void *)this + 739) + v58;
      int v61 = *(_DWORD *)&v28[4 * *(unsigned int *)(v60 + 16)];
      if (v61 != -1) {
        goto LABEL_78;
      }
      if (*(_DWORD *)(v60 + 8) == 3) {
        break;
      }
LABEL_79:
      ++v59;
      v58 += 64;
      if (v59 >= v57)
      {
        uint64_t v55 = *(void *)this;
        goto LABEL_81;
      }
    }
    int v61 = v52;
    LODWORD(v52) = v52 + 1;
LABEL_78:
    *(_DWORD *)(v60 + 16) = v61;
    GenericVaryingAllocator::addVarying((uint64_t)&v112, v60);
    unint64_t v57 = *((unsigned int *)this + 1480);
    goto LABEL_79;
  }
LABEL_81:
  GenericVaryingAllocator::allocate((GenericVaryingAllocator *)&v112, *(const AGCLLVMTargetLowerer **)((char *)this + *(void *)(v55 - 24) + 400));
  GenericVaryingAllocator::serialize((GenericVaryingAllocator *)&v112, (AGCLLVMAGPFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  uint64_t v103 = 0;
  BOOL VaryingSignature = GenericVaryingAllocator::getVaryingSignature((uint64_t)&v112, (AGCLLVMAGPFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472), (_DWORD *)&v103 + 1, &v103);
  if (v29 == v28) {
    char v63 = (const unsigned __int8 *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
  }
  else {
    char v63 = (const unsigned __int8 *)v28;
  }
  int v64 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned int>((AGCLLVMAGPFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472), v63, (v29 - v28) >> 2);
  if (v113 == v112) {
    int v65 = &flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
  }
  else {
    int v65 = v112;
  }
  int v66 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v65, (v113 - (unsigned char *)v112) >> 2);
  std::string v67 = (char *)this + *(void *)(*(void *)this - 24);
  std::string v68 = (flatbuffers::FlatBufferBuilder *)(v67 + 2472);
  v67[2542] = 1;
  int v69 = *((_DWORD *)v67 + 626) - *((_DWORD *)v67 + 630) + *((_DWORD *)v67 + 628);
  if (VaryingSignature)
  {
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v68, 4, SHIDWORD(v103));
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v68, 6, v103);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 22, *((unsigned __int8 *)this + 45), 0);
  }
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v68, 8, v64);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v68, 10, v66);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 12, v118[120], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 14, *((unsigned __int8 *)this + 5845), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 16, *((unsigned __int8 *)this + 5844), 0);
  if (*((unsigned char *)this + 3560)) {
    int v70 = v100;
  }
  else {
    int v70 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 20, v70, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 18, v100, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 24, *((unsigned __int8 *)this + 6444), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v68, 26, *((_DWORD *)this + 1610) == 1, 0);
  int v71 = flatbuffers::FlatBufferBuilder::EndTable(v68, v69);
  std::string v72 = (char *)this + *(void *)(*(void *)this - 24);
  std::string v73 = (flatbuffers::FlatBufferBuilder *)(v72 + 2472);
  v72[2542] = 1;
  int v74 = *((_DWORD *)v72 + 626) - *((_DWORD *)v72 + 630) + *((_DWORD *)v72 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v72 + 2472), v101);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::FragmentShaderInfo>(v73, v102);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLFragmentInfo>(v73, v71);
  std::string v75 = (AGCLLVMAGPFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
  int v76 = flatbuffers::FlatBufferBuilder::EndTable(v73, v74);
  flatbuffers::FlatBufferBuilder::Finish(v75, v76, v77);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMAGPFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  std::string v78 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  if (v78[87])
  {
    std::string v79 = v78 + 87;
    if (!v78[88]) {
      std::string v79 = v78 + 157;
    }
  }
  else
  {
    std::string v79 = v78 + 157;
  }
  std::string v80 = (int *)(*v79 + *(unsigned int *)*v79);
  std::string v81 = (unsigned int *)((char *)v80 + *(unsigned __int16 *)((char *)v80 - *v80 + 4));
  std::string v82 = (unsigned int *)((char *)v81
                       + *v81
                       + *(unsigned __int16 *)((char *)v81 + *v81 - *(unsigned int *)((char *)v81 + *v81) + 8));
  if (*(unsigned int *)((char *)v82 + *v82) <= 0x20)
  {
    unsigned int v83 = *(_DWORD *)(*(void *)(v78[58] + 32) + 48);
    if (v119 + v36 <= v83)
    {
      uint64_t v6 = 1;
      goto LABEL_127;
    }
    std::string v84 = (std::string *)(v78 + 1);
    std::to_string(&v105, v119 + v36);
    std::string v85 = std::string::insert(&v105, 0, "Number of varying components(");
    std::string::size_type v86 = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[2] = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v87 = std::string::append(&v106, ") ");
    std::string::size_type v88 = v87->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    v107.__r_.__value_.__r.__words[2] = v88;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v89 = std::string::append(&v107, "exceeds the limit (");
    std::string::size_type v90 = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v108.__r_.__value_.__l.__data_ = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    v108.__r_.__value_.__r.__words[2] = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v104, v83);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v91 = &v104;
    }
    else {
      std::string::size_type v91 = (std::string *)v104.__r_.__value_.__r.__words[0];
    }
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v104.__r_.__value_.__l.__size_;
    }
    std::string::size_type v93 = std::string::append(&v108, (const std::string::value_type *)v91, size);
    std::string::size_type v94 = v93->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v109.__r_.__value_.__l.__data_ = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    v109.__r_.__value_.__r.__words[2] = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v95 = std::string::append(&v109, ")");
    std::string::size_type v96 = v95->__r_.__value_.__r.__words[2];
    long long __p = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    uint64_t v111 = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    if (v111 >= 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if (v111 >= 0) {
      std::string::size_type v98 = HIBYTE(v111);
    }
    else {
      std::string::size_type v98 = *((void *)&__p + 1);
    }
    std::string::append(v84, p_p, v98);
    if (SHIBYTE(v111) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v107.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v106.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v105.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v6 = 0;
LABEL_127:
  *(void *)&long long __p = v118;
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector(v115);
  if (v112)
  {
    BOOL v113 = v112;
    operator delete(v112);
  }
  if (v28) {
    operator delete(v28);
  }
  return v6;
}

void GenericVaryingAllocator::addVarying(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = v6;
  unint64_t v7 = *(unsigned int *)(v4 + 8);
  if (v7)
  {
    uint64_t v67 = v4;
    int v8 = *(_DWORD *)(a1 + 556);
    int v9 = *(unsigned __int8 *)(a1 + 689);
    uint64_t v10 = (_OWORD *)(a2 + 24);
    uint64_t v11 = v5;
    while (1)
    {
      unint64_t v12 = v7 >> 1;
      uint64_t v13 = v11 + (v7 >> 1 << 6);
      if (v9)
      {
        memset(&v69, 0, sizeof(v69));
        memset(&v68, 0, sizeof(v68));
      }
      else
      {
        int64_t v14 = (const std::string::value_type **)(v13 + 24);
        if (*(char *)(v13 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v69, *v14, *(void *)(v11 + (v12 << 6) + 32));
        }
        else
        {
          long long v15 = *(_OWORD *)v14;
          v69.__r_.__value_.__r.__words[2] = *(void *)(v13 + 40);
          *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v15;
        }
        if (*(char *)(a2 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
        }
        else
        {
          *(_OWORD *)&v68.__r_.__value_.__l.__data_ = *v10;
          v68.__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
        }
      }
      uint64_t v16 = v11 + (v12 << 6);
      int v17 = *(_DWORD *)(v16 + 8);
      int v18 = *(_DWORD *)(a2 + 8);
      BOOL v20 = v18 != 3 || v17 == 3;
      if (v8)
      {
        if (!v20) {
          goto LABEL_61;
        }
        if (v17 == 3 && v18 != 3) {
          goto LABEL_65;
        }
        unsigned int v22 = *(unsigned __int8 *)(v16 + 56);
        unsigned int v23 = *(unsigned __int8 *)(a2 + 56);
        if (v22 < v23) {
          goto LABEL_61;
        }
        if (v23 < v22) {
          goto LABEL_65;
        }
        if (v17 < v18) {
          goto LABEL_61;
        }
        if (v18 < v17) {
          goto LABEL_65;
        }
        unsigned int v24 = *(unsigned __int8 *)(v16 + 57);
        unsigned int v25 = *(unsigned __int8 *)(a2 + 57);
        if (v24 < v25) {
          goto LABEL_61;
        }
        if (v25 < v24) {
          goto LABEL_65;
        }
      }
      else
      {
        if (!v20) {
          goto LABEL_61;
        }
        if (v17 == 3 && v18 != 3) {
          goto LABEL_65;
        }
        unsigned int v27 = *(unsigned __int8 *)(v16 + 57);
        unsigned int v28 = *(unsigned __int8 *)(a2 + 57);
        if (v27 < v28) {
          goto LABEL_61;
        }
        if (v28 < v27) {
          goto LABEL_65;
        }
        unsigned int v29 = *(unsigned __int8 *)(v16 + 56);
        unsigned int v30 = *(unsigned __int8 *)(a2 + 56);
        if (v29 < v30) {
          goto LABEL_61;
        }
        if (v30 < v29) {
          goto LABEL_65;
        }
        if (v17 < v18) {
          goto LABEL_61;
        }
        if (v18 < v17) {
          goto LABEL_65;
        }
      }
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v69.__r_.__value_.__l.__size_;
      }
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v32 = &v69;
      }
      else {
        uint64_t v32 = (std::string *)v69.__r_.__value_.__r.__words[0];
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v33 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v33 = v68.__r_.__value_.__l.__size_;
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v34 = &v68;
      }
      else {
        uint64_t v34 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v65 = v33;
      std::string::size_type v66 = size;
      if (v33 >= size) {
        size_t v35 = size;
      }
      else {
        size_t v35 = v33;
      }
      char v63 = v34;
      int v64 = v32;
      __uint64_t n = v35;
      int v36 = memcmp(v32, v34, v35);
      BOOL v37 = v66 < v65;
      if (v36) {
        BOOL v37 = v36 < 0;
      }
      if (!v37)
      {
        int v39 = memcmp(v63, v64, __n);
        BOOL v40 = v65 < v66;
        if (v39) {
          BOOL v40 = v39 < 0;
        }
        if (!v40)
        {
          BOOL v38 = *(_DWORD *)(v16 + 16) < *(_DWORD *)(a2 + 16);
          goto LABEL_66;
        }
LABEL_65:
        BOOL v38 = 0;
        goto LABEL_66;
      }
LABEL_61:
      BOOL v38 = 1;
LABEL_66:
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if (v38) {
        v7 += ~v12;
      }
      else {
        v7 >>= 1;
      }
      if (v38) {
        uint64_t v11 = v13 + 64;
      }
      if (!v7)
      {
        uint64_t v5 = *(void *)(a1 + 24);
        uint64_t v41 = *(unsigned int *)(a1 + 32);
        uint64_t v4 = v67;
        goto LABEL_79;
      }
    }
  }
  uint64_t v41 = 0;
  uint64_t v11 = v5 + (v7 << 6);
LABEL_79:
  if (v5 + (v41 << 6) == v11)
  {
    llvm::SmallVectorTemplateBase<GenericVarying,false>::push_back(v4, a2);
  }
  else
  {
    uint64_t v42 = v11 - v5;
    uint64_t v43 = (v11 - v5) >> 6;
    unint64_t v44 = llvm::SmallVectorTemplateCommon<GenericVarying,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<GenericVarying,false>>(v4, a2);
    uint64_t v45 = *(void *)(a1 + 24);
    unint64_t v46 = v45 + v42;
    uint64_t v47 = v45 + ((unint64_t)*(unsigned int *)(a1 + 32) << 6);
    *(_DWORD *)(v47 + 16) = *(_DWORD *)(v47 - 48);
    *(_OWORD *)uint64_t v47 = *(_OWORD *)(v47 - 64);
    *(_OWORD *)(v47 + 24) = *(_OWORD *)(v47 - 40);
    *(void *)(v47 + 40) = *(void *)(v47 - 24);
    *(void *)(v47 - 40) = 0;
    *(void *)(v47 - 32) = 0;
    *(void *)(v47 - 24) = 0;
    *(_OWORD *)(v47 + 48) = *(_OWORD *)(v47 - 16);
    uint64_t v48 = *(void *)(a1 + 24);
    uint64_t v49 = *(unsigned int *)(a1 + 32);
    uint64_t v50 = v48 + (v49 << 6) - 64;
    if (v50 != v46)
    {
      do
      {
        *(_OWORD *)uint64_t v50 = *(_OWORD *)(v50 - 64);
        *(_DWORD *)(v50 + 16) = *(_DWORD *)(v50 - 48);
        uint64_t v51 = (void **)(v50 + 24);
        if (*(char *)(v50 + 47) < 0) {
          operator delete(*v51);
        }
        long long v52 = *(_OWORD *)(v50 - 40);
        uint64_t v53 = *(void *)(v50 - 24);
        *(unsigned char *)(v50 - 17) = 0;
        *(unsigned char *)(v50 - 40) = 0;
        *(_OWORD *)(v50 + 48) = *(_OWORD *)(v50 - 16);
        *(_OWORD *)uint64_t v51 = v52;
        *(void *)(v50 + 40) = v53;
        v50 -= 64;
      }
      while (v50 != v46);
      LODWORD(v49) = *(_DWORD *)(a1 + 32);
      uint64_t v48 = *(void *)(a1 + 24);
    }
    uint64_t v54 = (v49 + 1);
    *(_DWORD *)(a1 + 32) = v54;
    unint64_t v55 = v48 + (v54 << 6);
    uint64_t v57 = v44 >= v46 && v44 < v55;
    unint64_t v58 = v44 + (v57 << 6);
    long long v59 = *(_OWORD *)v58;
    *(_DWORD *)(v46 + 16) = *(_DWORD *)(v58 + 16);
    *(_OWORD *)unint64_t v46 = v59;
    uint64_t v60 = v45 + (v43 << 6);
    std::string::operator=((std::string *)(v60 + 24), (const std::string *)(v58 + 24));
    *(_OWORD *)(v60 + 48) = *(_OWORD *)(v58 + 48);
  }
  int v61 = *(_DWORD *)(a1 + 552);
  if (v61 <= *(_DWORD *)(a2 + 16)) {
    int v61 = *(_DWORD *)(a2 + 16);
  }
  *(_DWORD *)(a1 + 552) = v61;
  *(_DWORD *)(a1 + 692) += *(_DWORD *)a2;
}

__n128 llvm::SmallVectorTemplateBase<GenericVarying,false>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = llvm::SmallVectorTemplateCommon<GenericVarying,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<GenericVarying,false>>(a1, a2);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  uint64_t v6 = *(void *)a1 + (v5 << 6);
  long long v7 = *(_OWORD *)v3;
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(v3 + 16);
  *(_OWORD *)uint64_t v6 = v7;
  int v8 = (std::string *)(v6 + 24);
  if (*(char *)(v3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(v3 + 24), *(void *)(v3 + 32));
  }
  else
  {
    long long v9 = *(_OWORD *)(v3 + 24);
    *(void *)(v6 + 40) = *(void *)(v3 + 40);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  __n128 result = *(__n128 *)(v3 + 48);
  *(__n128 *)(v4 + (v5 << 6) + 48) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<GenericVarying,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<GenericVarying,false>>(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + (v2 << 6);
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorTemplateBase<GenericVarying,false>::grow();
    }
    llvm::SmallVectorTemplateBase<GenericVarying,false>::grow();
  }
  return a2;
}

void std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 5;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t AGCLLVMUserFragmentShader::constructFlatReply(AGCLLVMUserFragmentShader *this)
{
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  if (*((void *)v2 + 87))
  {
    unint64_t v3 = v2 + 696;
    if (!*((void *)v2 + 88)) {
      unint64_t v3 = v2 + 1256;
    }
  }
  else
  {
    unint64_t v3 = v2 + 1256;
  }
  uint64_t v5 = *(unsigned int **)v3;
  uint64_t v4 = *((void *)v3 + 1);
  if (v5) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    long long v7 = 0;
  }
  else {
    long long v7 = (int *)((char *)v5 + *v5);
  }
  int v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 < 9u)
  {
    long long v9 = 0;
  }
  else
  {
    long long v9 = (int *)v8[4];
    if (v9) {
      long long v9 = (int *)((char *)v9 + (void)v7 + *(unsigned int *)((char *)v9 + (void)v7));
    }
  }
  int v25 = 0;
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 0xDu && (uint64_t v11 = v10[6]) != 0) {
    unint64_t v12 = (unsigned int *)((char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11));
  }
  else {
    unint64_t v12 = 0;
  }
  BOOL v13 = AGCLLVMObject::extractPhaseOffsets((uint64_t)v2, v12, &v25);
  int64_t v14 = (flatbuffers::FlatBufferBuilder *)AGCLLVMFragmentShader::constructFlatReply((AGCLLVMUserFragmentShader *)((char *)this + 4320));
  __int16 v16 = v15;
  int v17 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  uint64_t v18 = v17[50];
  if (v17[92])
  {
    int v19 = v17 + 92;
    uint64_t v20 = v17[93];
    uint64_t v21 = v17 + 162;
    if (v20) {
      uint64_t v21 = v19;
    }
  }
  else
  {
    uint64_t v21 = v17 + 162;
  }
  if (v21[1]) {
    uint64_t v22 = *v21;
  }
  else {
    uint64_t v22 = 0;
  }
  int v23 = (*(uint64_t (**)(uint64_t, BOOL, void, BOOL, BOOL, uint64_t))(*(void *)v18 + 624))(v18, *((unsigned char *)this + 5829) != 0, (*(_DWORD *)(*((void *)this + 614) + 32) >> 8) & 0xF, *((unsigned char *)this + 5830) != 0, *((unsigned char *)this + 5863) != 0, v22);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v14, 4, v23, 0);
  if (v13) {
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v14, 10, v25);
  }
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(v14, 12, *((char *)this + 5836));
  return flatbuffers::FlatBufferBuilder::EndTable(v14, v16);
}

BOOL AGCLLVMObject::extractPhaseOffsets(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3 = *a2;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  if (v3)
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v32 = a2 + 1;
    do
    {
      int v8 = *(uint64_t **)(a1 + 1680);
      if (v8)
      {
        do
        {
          long long v9 = (int *)((char *)&v32[v7] + v32[v7]);
          uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
          if (*v10 >= 5u && (uint64_t v11 = v10[2]) != 0) {
            unint64_t v12 = (char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11);
          }
          else {
            unint64_t v12 = 0;
          }
          std::string::basic_string[abi:nn180100]<0>(__p, v12 + 4);
          int v13 = *((char *)v8 + 39);
          unsigned __int8 v14 = v35;
          if ((v35 & 0x80u) == 0) {
            size_t v15 = v35;
          }
          else {
            size_t v15 = (size_t)__p[1];
          }
          if ((v35 & 0x80u) == 0) {
            __int16 v16 = __p;
          }
          else {
            __int16 v16 = (void **)__p[0];
          }
          if (v13 >= 0) {
            size_t v17 = *((unsigned __int8 *)v8 + 39);
          }
          else {
            size_t v17 = v8[3];
          }
          if (v13 >= 0) {
            uint64_t v18 = v8 + 2;
          }
          else {
            uint64_t v18 = (const void *)v8[2];
          }
          if (v17 >= v15) {
            size_t v19 = v15;
          }
          else {
            size_t v19 = v17;
          }
          if (!memcmp(v16, v18, v19) && v17 == v15)
          {
            if ((unint64_t)v5 >= v6)
            {
              uint64_t v22 = (v5 - v4) >> 2;
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62) {
                abort();
              }
              if ((uint64_t)(v6 - (void)v4) >> 1 > v23) {
                unint64_t v23 = (uint64_t)(v6 - (void)v4) >> 1;
              }
              if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v23;
              }
              if (v24) {
                unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v24);
              }
              else {
                uint64_t v25 = 0;
              }
              uint64_t v26 = (char *)(v24 + 4 * v22);
              *(_DWORD *)uint64_t v26 = *((_DWORD *)v8 + 10);
              uint64_t v21 = v26 + 4;
              while (v5 != v4)
              {
                int v27 = *((_DWORD *)v5 - 1);
                v5 -= 4;
                *((_DWORD *)v26 - 1) = v27;
                v26 -= 4;
              }
              unint64_t v6 = v24 + 4 * v25;
              if (v4) {
                operator delete(v4);
              }
              uint64_t v4 = v26;
            }
            else
            {
              *(_DWORD *)uint64_t v5 = *((_DWORD *)v8 + 10);
              uint64_t v21 = v5 + 4;
            }
            unsigned __int8 v14 = v35;
            uint64_t v5 = v21;
          }
          if ((v14 & 0x80) != 0) {
            operator delete(__p[0]);
          }
          int v8 = (uint64_t *)*v8;
        }
        while (v8);
        unint64_t v3 = *a2;
      }
      ++v7;
    }
    while (v7 < v3);
  }
  if (v5 == v4) {
    unsigned int v28 = (const unsigned __int8 *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
  }
  else {
    unsigned int v28 = (const unsigned __int8 *)v4;
  }
  *a3 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned int>((flatbuffers::FlatBufferBuilder *)(a1 + 2472), v28, (v5 - v4) >> 2);
  if (v4) {
    operator delete(v4);
  }
  return v5 != v4;
}

BOOL AGCLLVMGen3TargetLowerer::getDisableTriangleMerging(AGCLLVMGen3TargetLowerer *this, char a2, unsigned int a3, int a4, char a5, const unsigned __int8 *a6)
{
  if (a3 > 1) {
    char v6 = a2;
  }
  else {
    char v6 = 0;
  }
  BOOL result = 1;
  if ((v6 & 1) == 0 && (a5 & 1) == 0)
  {
    BOOL result = 0;
    if (a3 >= 2)
    {
      if (a4)
      {
        int v8 = &a6[*(unsigned int *)a6 - *(int *)&a6[*(unsigned int *)a6]];
        return *(unsigned __int16 *)v8 >= 5u && *((unsigned __int16 *)v8 + 2) != 0;
      }
    }
  }
  return result;
}

void AGCLLVMAGPFragmentShader::~AGCLLVMAGPFragmentShader(AGCLLVMAGPFragmentShader *this, uint64_t *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v5 - 24)) = a2[17];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[18];
  *((void *)this + 540) = a2[19];
  char v6 = (char *)this + 6912;
  do
  {
    unint64_t v7 = *(char **)((char *)this + v4 + 6896);
    if (&v6[v4] != v7) {
      free(v7);
    }
    v4 -= 32;
  }
  while (v4 != -160);
  for (uint64_t i = 0; i != -160; i -= 32)
  {
    long long v9 = *(char **)((char *)this + i + 6736);
    if ((char *)this + i + 6752 != v9) {
      free(v9);
    }
  }
  for (uint64_t j = 0; j != -120; j -= 24)
  {
    uint64_t v11 = *(void *)((char *)this + j + 6600);
    if (v11 != -8192 && v11 != -4096 && v11 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPFragmentShader *)((char *)this + j + 6584));
    }
  }
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 739);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 5880);
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader(this, a2 + 1);
}

char **llvm::SmallVector<GenericVarying,8u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = v3 << 6;
    do
    {
      if (v2[v4 - 17] < 0) {
        operator delete(*(void **)&v2[v4 - 40]);
      }
      v4 -= 64;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void GenericVaryingAllocator::allocate(GenericVaryingAllocator *this, const AGCLLVMTargetLowerer *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = (*((_DWORD *)this + 138) + 7);
  uint64_t v5 = (int64x2_t *)((char *)this + 568);
  unint64_t v6 = *((void *)this + 72);
  uint64_t v7 = *((void *)this + 71);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v7) >> 3);
  unint64_t v9 = v4 - v8;
  if (v4 <= v8)
  {
    if (v4 < v8)
    {
      uint64_t v21 = v7 + 40 * v4;
      while (v6 != v21)
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 40;
      }
      *((void *)v3 + 72) = v21;
    }
  }
  else
  {
    uint64_t v10 = *((void *)this + 73);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v6) >> 3) >= v9)
    {
      bzero(*((void **)this + 72), 40 * ((40 * v9 - 40) / 0x28) + 40);
      *((void *)v3 + 72) = v6 + 40 * ((40 * v9 - 40) / 0x28) + 40;
    }
    else
    {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v7) >> 3);
      unint64_t v12 = 0x999999999999999ALL * ((v10 - v7) >> 3);
      if (v12 > v4) {
        unint64_t v4 = v12;
      }
      if (v11 >= 0x333333333333333) {
        unint64_t v4 = 0x666666666666666;
      }
      if (v4 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v13 = 5 * v4;
      unsigned __int8 v14 = (char *)operator new(40 * v4);
      size_t v15 = &v14[8 * ((uint64_t)(v6 - v7) >> 3)];
      __int16 v16 = &v14[8 * v13];
      size_t v17 = 40 * ((40 * v9 - 40) / 0x28) + 40;
      bzero(v15, v17);
      uint64_t v18 = &v15[v17];
      if (v6 == v7)
      {
        int64x2_t v20 = vdupq_n_s64(v6);
      }
      else
      {
        do
        {
          *(_OWORD *)(v15 - 40) = *(_OWORD *)(v6 - 40);
          long long v19 = *(_OWORD *)(v6 - 24);
          *((void *)v15 - 1) = *(void *)(v6 - 8);
          *(_OWORD *)(v15 - 24) = v19;
          v15 -= 40;
          *(void *)(v6 - 16) = 0;
          *(void *)(v6 - 8) = 0;
          *(void *)(v6 - 24) = 0;
          v6 -= 40;
        }
        while (v6 != v7);
        int64x2_t v20 = *v5;
      }
      *((void *)v3 + 71) = v15;
      *((void *)v3 + 72) = v18;
      *((void *)v3 + 73) = v16;
      unint64_t v23 = (void **)v20.i64[1];
      uint64_t v22 = (void **)v20.i64[0];
      while (v23 != v22)
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 5;
      }
      if (v22) {
        operator delete(v22);
      }
    }
  }
  uint64_t v24 = *((unsigned int *)v3 + 8);
  unint64_t v46 = (uint64_t *)v5;
  if (v24)
  {
    int v25 = 0;
    int v26 = 0;
    int v45 = *((unsigned __int8 *)a2 + 1737);
    int v27 = (const std::string *)*((void *)v3 + 3);
    unsigned int v28 = (int *)((char *)v27 + 64 * v24);
    uint64_t v29 = v5->i64[0];
    int v30 = 4;
    do
    {
      int data = (int)v27->__r_.__value_.__l.__data_;
      uint64_t v32 = v3;
      unsigned int v33 = LODWORD(v27->__r_.__value_.__r.__words[2]) + 6;
      LODWORD(v27[2].__r_.__value_.__l.__data_) = v30;
      uint64_t v34 = v29 + 40 * v33;
      *(_DWORD *)(v34 + 12) = v27->__r_.__value_.__r.__words[1];
      unsigned __int8 v35 = (int *)&v27[1];
      std::string::operator=((std::string *)(v34 + 16), v27 + 1);
      int v36 = v27[2].__r_.__value_.__s.__data_[8];
      uint64_t v29 = *v46;
      uint64_t v37 = *v46 + 40 * v33;
      uint64_t v3 = v32;
      *(unsigned char *)uint64_t v37 = v36;
      *(_DWORD *)(v37 + 4) = v25 + 2 * (v26 + v45);
      *(_DWORD *)(v37 + 8) = 2 * (v26 + v45 + v25);
      v30 += data;
      BOOL v38 = (char *)v32 + 4 * LODWORD(v27->__r_.__value_.__r.__words[1]);
      int v39 = (int *)(v38 + 592);
      if (v27[2].__r_.__value_.__s.__data_[9]) {
        int v39 = (int *)(v38 + 640);
      }
      BOOL v40 = (int *)(v38 + 616);
      uint64_t v41 = (int *)(v38 + 664);
      if (v27[2].__r_.__value_.__s.__data_[9]) {
        uint64_t v42 = v41;
      }
      else {
        uint64_t v42 = v40;
      }
      BOOL v43 = v36 == 0;
      if (v36) {
        unint64_t v44 = v42;
      }
      else {
        unint64_t v44 = v39;
      }
      if (v43) {
        v26 += data;
      }
      else {
        v25 += data;
      }
      HIDWORD(v27[2].__r_.__value_.__r.__words[0]) = *v44;
      *v44 += data;
      int v27 = (const std::string *)((char *)v27 + 64);
    }
    while (v35 + 10 != v28);
  }
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::FragmentShaderInfo>(flatbuffers::FlatBufferBuilder *result, int a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 8, v4);
  }
  return result;
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLFragmentInfo>(flatbuffers::FlatBufferBuilder *result, int a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 14, v4);
  }
  return result;
}

void *AGCLLVMFragmentShader::constructFlatReply(AGCLLVMFragmentShader *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 24);
  if (*((void *)v3 + 87))
  {
    int v4 = v3 + 696;
    if (!*((void *)v3 + 88)) {
      int v4 = v3 + 1256;
    }
  }
  else
  {
    int v4 = v3 + 1256;
  }
  unint64_t v6 = *(unsigned int **)v4;
  uint64_t v5 = *((void *)v4 + 1);
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = (int *)((char *)v6 + *v6);
  }
  unint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0) {
    unint64_t v11 = (int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
  }
  else {
    unint64_t v11 = 0;
  }
  unint64_t v12 = v3 + 2472;
  v3[2542] = 1;
  uint64_t v13 = (unsigned __int16 *)((char *)v11 - *v11);
  unsigned int v14 = *v13;
  if (v14 < 0x11)
  {
    uint64_t v15 = 0;
  }
  else
  {
    if (v13[8]) {
      uint64_t v15 = *(void *)((char *)v11 + v13[8]);
    }
    else {
      uint64_t v15 = 0;
    }
    if (v14 >= 0x15)
    {
      uint64_t v16 = v13[10];
      if (v16)
      {
        uint64_t v17 = *(void *)((char *)v11 + v16);
        goto LABEL_25;
      }
    }
  }
  uint64_t v17 = 0;
LABEL_25:
  uint64_t v18 = *(void *)((char *)this + *(void *)(v2 - 24) + 400);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v18 + 576))(v18, *((void *)this + 74), v15, v17);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v12, 8, *((void *)this + 76) & v19, 0);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = (unsigned __int16 *)((char *)v11 - *v11);
  unsigned int v23 = *v22;
  if (v23 >= 0xF)
  {
    if (v22[7]) {
      uint64_t v20 = *(void *)((char *)v11 + v22[7]);
    }
    else {
      uint64_t v20 = 0;
    }
    if (v23 >= 0x13 && (uint64_t v24 = v22[9]) != 0) {
      uint64_t v21 = *(void *)((char *)v11 + v24);
    }
    else {
      uint64_t v21 = 0;
    }
  }
  uint64_t v25 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v25 + 576))(v25, *((void *)this + 74), v20, v21);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v12, 6, *((void *)this + 75) & v26, 0);
  return v12;
}

BOOL AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(AGCLLVMAGPFragmentShaderGen3 *this)
{
  v36[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 680))(v2);
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = *((void *)this + 614);
  do
  {
    if (((1 << v4) & *(unsigned __int8 *)(v7 + 32)) != 0)
    {
      unsigned int v8 = *(_DWORD *)(v7 + 4 * v4);
      unsigned int v9 = (v8 & 0x1F) - 2;
      if (v9 > 0x14)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v10 = qword_1CADDF228[v9] | qword_1CADDF180[v9];
        uint64_t v11 = qword_1CADDF2D0[v9] | qword_1CADDF0D8[v9];
      }
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      v30[0] = v10;
      v30[1] = v11;
      int v14 = *(_DWORD *)(v3 + 868);
      do
      {
        if ((((-1 << (v8 >> 5)) >> v12) & 1) == 0) {
          v13 |= *((unsigned int *)v30 + v12);
        }
        ++v12;
      }
      while (v12 != 4);
      __dst[0] = (void *)v13;
      __dst[1] = 0;
      std::bitset<128ul>::operator<<=[abi:nn180100]((unint64_t *)__dst, v14 * (v8 >> 12));
      v6 |= (unint64_t)__dst[0];
      v5 |= (unint64_t)__dst[1];
    }
    ++v4;
  }
  while (v4 != 8);
  uint64_t v15 = *(llvm::CallBase **)(*(void *)(llvm::Module::getFunction() + 8) + 24);
  uint64_t v16 = llvm::CallBase::arg_end(v15);
  uint64_t v17 = (uint64_t **)((char *)v15 - 32 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF));
  if (((v16 - (void)v17) & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v18 = *v17;
    uint64_t v19 = **v17;
    if (v19) {
      BOOL v20 = *(unsigned char *)(v19 + 8) == 16;
    }
    else {
      BOOL v20 = 0;
    }
    if (v20) {
      llvm::DataLayout::getStructLayout();
    }
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(void *)(*(void *)this - 24) + 40), v15);
    uint64_t v21 = *((void *)this + 9);
    if (v21)
    {
      unsigned int v33 = 0;
      unsigned int v22 = *(_DWORD *)(v21 + 8);
      if (v22)
      {
        unsigned int v23 = 0;
        do
        {
          uint64_t v24 = *(void *)(v21 - 8 * v22 + 8 * v23);
          if (v24
            && isStringMDNode(*(llvm::MDString **)(v24 - 8 * *(unsigned int *)(v24 + 8)), "air.imageblock_data"))
          {
            uint64_t v25 = *(void *)this;
            unsigned int v26 = *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 868)
                * (*(_WORD *)(*((void *)this + 614) + 34) & 0x1FF);
            if (v26 > 0x40)
            {
              uint64_t v6 = -1;
              __dst[0] = (void *)~(-1 << v26);
              __dst[1] = 0;
              std::bitset<128ul>::operator<<=[abi:nn180100]((unint64_t *)__dst, 0x40uLL);
              v5 |= (unint64_t)__dst[1];
              uint64_t v25 = *(void *)this;
            }
            else
            {
              v6 |= ~(-1 << v26);
            }
            __dst[0] = v36;
            __dst[1] = (void *)0x500000000;
            Value = 0;
            int v27 = (char *)this + *(void *)(v25 - 24) + 40;
            __int16 v31 = 257;
            Value = (uint64_t *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v27, (uint64_t)v18, (uint64_t)&v33, 1, (uint64_t)v30);
            uint64_t v28 = *Value;
            v34[0] = &unk_1F25762D8;
            v34[1] = this;
            v34[2] = &Value;
            void v34[3] = v34;
            AGCLLVMAGPFragmentShaderGen3::setupLIBStructValueFromType(this, v28, (uint64_t)__dst, (uint64_t)this + 6952, 0, 1, (uint64_t)v34);
            std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__value_func[abi:nn180100](v34);
            llvm::MDNode::replaceOperandWith();
            if (__dst[0] != v36) {
              free(__dst[0]);
            }
          }
          unsigned int v23 = v33 + 1;
          unsigned int v33 = v23;
          uint64_t v21 = *((void *)this + 9);
          unsigned int v22 = *(_DWORD *)(v21 + 8);
        }
        while (v23 < v22);
      }
      __dst[0] = (void *)v6;
      __dst[1] = 0;
      std::__bitset<2ul,128ul>::to_ullong[abi:nn180100](__dst);
      __dst[0] = (void *)v6;
      __dst[1] = (void *)v5;
      std::bitset<128ul>::operator>>=[abi:nn180100]((char *)__dst, 0x40uLL);
      std::__bitset<2ul,128ul>::to_ullong[abi:nn180100](__dst);
      llvm::Module::getOrInsertNamedMetadata();
      llvm::ConstantInt::get();
      __dst[0] = (void *)llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      llvm::ConstantInt::get();
      __dst[0] = (void *)llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
  }
  return AGCLLVMUserFragmentShader::setupShaderOutputs(this);
}

uint64_t AGCLLVMGen3TargetLowerer::convertRegisterMaskToMRTMask(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  long long __src = a4;
  std::bitset<128ul>::operator<<=[abi:nn180100]((unint64_t *)&__src, 0x40uLL);
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  *(void *)&long long __src = __src | a3;
  do
  {
    if (((1 << v7) & *(unsigned __int8 *)(a2 + 32)) != 0)
    {
      unsigned int v10 = (*(_DWORD *)(a2 + v8) & 0x1F) - 2;
      if (v10 > 0x14)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v11 = qword_1CADDF0D8[v10];
        uint64_t v12 = qword_1CADDF2D0[v10];
        uint64_t v13 = qword_1CADDF228[v10] | qword_1CADDF180[v10];
        uint64_t v14 = v12 | v11;
      }
      v15.i64[0] = v13;
      v15.i64[1] = v14;
      int8x16_t v20 = v15;
      unint64_t v16 = *(_DWORD *)(a1 + 868) * (*(_DWORD *)(a2 + v8) >> 12);
      long long __dst = __src;
      std::bitset<128ul>::operator>>=[abi:nn180100]((char *)&__dst, v16);
      long long __dst = __dst;
      int8x16_t v17 = vbicq_s8((int8x16_t)xmmword_1CADD64E0, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(std::__bitset<2ul,128ul>::to_ullong[abi:nn180100](&__dst)), v20)));
      *(int8x8_t *)v17.i8 = vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
      char v18 = *(_DWORD *)(a2 + v8) >> 5;
      v9 |= ((-1 << v18) & ((int)(((v17.i32[0] | v17.i32[1]) & ~(-1 << v18)) >> (v18 - 1) << 31) >> 31) & 0xF | (v17.i32[0] | v17.i32[1]) & ~(-1 << v18)) << v8;
    }
    v8 += 4;
    ++v7;
  }
  while (v8 != 32);
  return v9;
}

uint64_t std::__bitset<2ul,128ul>::to_ullong[abi:nn180100](void *a1)
{
  if (!a1[1]) {
    return *a1;
  }
  std::__throw_overflow_error[abi:nn180100]();
  return std::bitset<128ul>::operator>>=[abi:nn180100](v2);
}

char *std::bitset<128ul>::operator>>=[abi:nn180100](char *__dst, unint64_t a2)
{
  if (a2 >= 0x80) {
    unint64_t v4 = 128;
  }
  else {
    unint64_t v4 = a2;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = &__dst[8 * (v4 >> 6)];
  if ((v4 & 0x3F) != 0)
  {
    if (a2 <= 0x7F)
    {
      char v7 = v4 & 0x3F;
      unint64_t v8 = 128 - v4 >= 64 - (v4 & 0x3F) ? 64 - (v4 & 0x3F) : 128 - v4;
      uint64_t v9 = 128 - v4 - v8;
      unint64_t v10 = (0xFFFFFFFFFFFFFFFFLL >> (64 - (v4 & 0x3Fu) - v8)) & (-1 << v7) & *(void *)v6;
      unint64_t v11 = v8 >= 0x40 ? 64 : v8;
      *(void *)long long __dst = *(void *)__dst & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v11) | (v10 >> v7);
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = &__dst[8 * (v11 >> 6)];
      uint64_t v14 = v8 - v11;
      if (v14 < 1) {
        LODWORD(v14) = v11 & 0x3F;
      }
      else {
        *(void *)uint64_t v13 = (v10 >> (v11 + v7)) | *(void *)v13 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v14);
      }
      uint64_t v15 = (64 - v14);
      uint64_t v16 = -1 << v14;
      uint64_t v17 = v14;
      if (v9 < 64)
      {
        uint64_t v25 = v6 + 8;
      }
      else
      {
        uint64_t v18 = *(void *)v13;
        uint64_t v19 = 8 * v12;
        int8x16_t v20 = __dst;
        do
        {
          unint64_t v21 = v9;
          unsigned int v22 = &v20[v19];
          unint64_t v23 = *(void *)&v20[8 * v5 + 8];
          uint64_t v24 = v18 & ~v16 | (v23 << v17);
          uint64_t v18 = *(void *)&v20[v19 + 8] & v16 | (v23 >> v15);
          *(void *)unsigned int v22 = v24;
          *((void *)v22 + 1) = v18;
          uint64_t v9 = v21 - 64;
          v20 += 8;
        }
        while (v21 > 0x7F);
        uint64_t v25 = &v20[8 * v5 + 8];
        uint64_t v13 = &v20[8 * v12];
      }
      if (v9 >= 1)
      {
        unint64_t v26 = *(void *)v25 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9);
        if (v9 >= (unint64_t)v15) {
          uint64_t v27 = v15;
        }
        else {
          uint64_t v27 = v9;
        }
        *(void *)uint64_t v13 = *(void *)v13 & ~((0xFFFFFFFFFFFFFFFFLL >> (v15 - v27)) & v16) | (v26 << v17);
        uint64_t v28 = v9 - v27;
        if (v28 >= 1) {
          *(void *)&v13[((unint64_t)(v27 + v17) >> 3) & 0x1FFFFFFFFFFFFFF8] = *(void *)&v13[((unint64_t)(v27 + v17) >> 3) & 0x1FFFFFFFFFFFFFF8] & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v28) | (v26 >> v27);
        }
      }
    }
  }
  else
  {
    if ((v4 & 0xC0) >= 0x41)
    {
LABEL_29:
      int v30 = &__dst[8 * ((128 - v4) >> 6)];
      int v31 = (128 - v4) & 0x3F;
      std::__fill_n[abi:nn180100]<false,std::__bitset<2ul,128ul>>((uint64_t)&v30, v4);
      return __dst;
    }
    memmove(__dst, v6, (128 - (unint64_t)(v4 & 0xC0)) >> 3);
  }
  if (v4) {
    goto LABEL_29;
  }
  return __dst;
}

unint64_t *std::bitset<128ul>::operator<<=[abi:nn180100](unint64_t *__src, unint64_t a2)
{
  if (a2 >= 0x80) {
    unint64_t v3 = 128;
  }
  else {
    unint64_t v3 = a2;
  }
  unint64_t v4 = 128 - v3;
  unint64_t v5 = (128 - v3) >> 6;
  if (((128 - v3) & 0x3F) != 0)
  {
    if (a2 <= 0x7F)
    {
      uint64_t v6 = &__src[v5];
      int64_t v7 = v4 & 0xFFFFFFFFFFFFFFC0;
      unint64_t v8 = __src + 1;
      unint64_t v9 = (((0xFFFFFFFFFFFFFFFFLL >> -((0x80 - v3) & 0x3F)) & *v6) << (v3 + 0x80)) | __src[1] & ~(-1 << (v3 + 0x80));
      __src[1] = v9;
      char v10 = 64 - ((v3 + 0x80) & 0x3F);
      unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -((v3 + 0x80) & 0x3F);
      if ((uint64_t)(v4 & 0xFFFFFFFFFFFFFFC0) >= 64)
      {
        unint64_t v12 = __src;
        do
        {
          unint64_t v13 = v7;
          unint64_t v14 = v12[v5 - 1];
          unint64_t v15 = v9 & ~v11 | (v14 >> v10);
          unint64_t v9 = *v12 & v11 | (v14 << ((v3 + 0x80) & 0x3F));
          *unint64_t v12 = v9;
          v12[1] = v15;
          --v12;
          int64_t v7 = v13 - 64;
        }
        while (v13 > 0x7F);
        uint64_t v6 = &v12[v5];
        unint64_t v8 = v12 + 1;
      }
      if (v7 >= 1)
      {
        unint64_t v16 = *(v6 - 1) & (-1 << -(char)v7);
        int64_t v17 = v7 >= (unint64_t)((v3 - 128) & 0x3F) ? (v3 - 128) & 0x3F : v7;
        unint64_t *v8 = *v8 & ~((-1 << (((v3 + 0x80) & 0x3F) - v17)) & v11) | (v16 >> v10);
        if (v7 - v17 >= 1) {
          *(v8 - 1) = *(v8 - 1) & ~(-1 << (v17 - v7)) | (v16 << (v7 + ((v17 - v7) & 0x3F)));
        }
      }
    }
  }
  else if ((uint64_t)(v4 & 0xFFFFFFFFFFFFFFC0) >= 1 && (v4 | 0x3F) >= 0x7F)
  {
    memmove(&__src[-v5 + 2], __src, (v4 & 0xFFFFFFFFFFFFFFC0) >> 3);
  }
  if (v3)
  {
    uint64_t v19 = __src;
    int v20 = 0;
    std::__fill_n[abi:nn180100]<false,std::__bitset<2ul,128ul>>((uint64_t)&v19, v3);
  }
  return __src;
}

void std::__fill_n[abi:nn180100]<false,std::__bitset<2ul,128ul>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t AGCLLVMAGPFragmentShaderGen3::initCompile(AGCLLVMAGPFragmentShaderGen3 *this)
{
  v91[16] = *MEMORY[0x1E4F143B8];
  uint64_t inited = 0;
  if (validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1816), 0, *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 864), (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (unsigned int *)this + 1816))
  {
    uint64_t inited = AGCLLVMAGPFragmentShader::initCompile(this);
    if (*((unsigned char *)this + 14) || (*(unsigned char *)(*((void *)this + 726) + 64) & 2) != 0)
    {
      uint64_t v5 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
      (*(void (**)(uint64_t, void))(*(void *)v5 + 168))(v5, *((void *)this + 614));
    }
    else
    {
      AGCLLVMUserShader::initLIBAliasOffset((uint64_t *)this, *((void *)this + 614));
      v90[0] = v91;
      v90[1] = (void *)0x2000000000;
      llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)v90, 0, -1);
      unint64_t v3 = *((void *)this + 22);
      if (*(_WORD *)(v3 + 18))
      {
        llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
        unint64_t v7 = *((void *)this + 22);
        uint64_t v4 = *(void *)(v3 + 88);
        if (*(_WORD *)(v7 + 18)) {
          llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
        }
        unint64_t v3 = v7;
      }
      else
      {
        uint64_t v4 = *(void *)(v3 + 88);
      }
      uint64_t v8 = *(void *)(v3 + 88) + 40 * *(void *)(v3 + 96);
      if (v4 != v8)
      {
        unint64_t v3 = (unint64_t)this + 7000;
        do
        {
          uint64_t v9 = *(void *)(*((void *)this + 11) + 8 * *(unsigned int *)(v4 + 32));
          if (v9
            && isStringMDNode(*(llvm::MDString **)(v9 - 8 * *(unsigned int *)(v9 + 8) + 8), "air.imageblock_data"))
          {
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 7000, *(_DWORD *)(v4 + 32));
            std::string::size_type v87 = 0;
            uint64_t v88 = 0;
            v89[0] = 0x3000000000;
            unsigned int v83 = 0;
            uint64_t v84 = 0;
            v85[0] = 0x3000000000;
            if (!AGCLLVMUserShader::setupLIBMetadata((uint32x2_t *)this, 2u, (_WORD *)this + 1782, v9, *((void *)this + 614), (llvm::StringMapImpl *)&v87, (llvm::StringMapImpl *)&v83)|| (HIDWORD(v84) ? (char v10 = (uint64_t *)&v83) : (char v10 = (uint64_t *)&v87), !AGCLLVMAGPFragmentShaderGen3::setupROGTable((uint64_t)this, (uint64_t)v90, *((unsigned __int16 *)this + 1782), v10)|| !AGCLLVMAGPFragmentShaderGen3::setupLIBViewToMasterFieldOffsetMap((uint64_t *)v87, v88, (llvm::StringMapImpl *)&v83, (uint64_t)this + 6928)))
            {
LABEL_42:
              llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v83);
              llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v87);
              goto LABEL_43;
            }
            llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v83);
            llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v87);
          }
          v4 += 40;
        }
        while (v4 != v8);
      }
      uint64_t v11 = *((void *)this + 9);
      if (v11)
      {
        unint64_t v3 = 0;
        do
        {
          unint64_t v12 = *(unsigned int *)(v11 + 8);
          if (v3 >= v12) {
            break;
          }
          unint64_t v13 = *(unsigned __int8 **)(v11 - 8 * v12 + 8 * v3);
          unint64_t v14 = *v13;
          BOOL v15 = v14 > 0x22 || ((0x7FFFFFFF0uLL >> v14) & 1) == 0;
          if (!v15 && isStringMDNode(*(llvm::MDString **)&v13[-8 * *((unsigned int *)v13 + 2)], "air.imageblock_data"))
          {
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 7048, v3);
            std::string::size_type v87 = 0;
            uint64_t v88 = 0;
            v89[0] = 0x3000000000;
            unsigned int v83 = 0;
            uint64_t v84 = 0;
            v85[0] = 0x3000000000;
            if (!AGCLLVMUserShader::setupLIBMetadata((uint32x2_t *)this, 1u, (_WORD *)this + 1781, (uint64_t)v13, *((void *)this + 614), (llvm::StringMapImpl *)&v87, (llvm::StringMapImpl *)&v83))goto LABEL_42; {
            unint64_t v16 = (uint64_t *)(HIDWORD(v84) ? &v83 : &v87);
            }
            if (!AGCLLVMAGPFragmentShaderGen3::setupROGTable((uint64_t)this, (uint64_t)v90, *((unsigned __int16 *)this + 1781), v16)|| !AGCLLVMAGPFragmentShaderGen3::setupLIBViewToMasterFieldOffsetMap((uint64_t *)v87, v88, (llvm::StringMapImpl *)&v83, (uint64_t)this + 6952))
            {
              goto LABEL_42;
            }
            llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v83);
            llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v87);
          }
          ++v3;
          uint64_t v11 = *((void *)this + 9);
        }
        while (v11);
      }
      uint64_t v17 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 680))(v17);
      if (AGCLLVMGen3TargetLowerer::setupFixedPRIDS(v18, *((_DWORD *)this + 1814)))
      {
        if (*((_DWORD *)this + 1814) == 3)
        {
          int v19 = 1;
        }
        else
        {
          std::string::size_type v87 = v89;
          uint64_t v88 = 0x1000000000;
          if (*((_DWORD *)this + 1752) || *((_DWORD *)this + 1764))
          {
            int v20 = v90[0];
            uint64_t v21 = *(unsigned int *)v90[0];
            unsigned int v22 = *((_DWORD *)this + 1078);
            if (v22 < 2)
            {
              uint64_t v24 = 0;
            }
            else
            {
              uint64_t v23 = 0;
              uint64_t v24 = 0;
              for (unint64_t i = 1; i < v22; ++i)
              {
                if (v20[i] != v21)
                {
                  if (v21 != 0xFFFFFFFFLL)
                  {
                    unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v21;
                    llvm::SmallVectorTemplateBase<AGCLLVMGen3TargetLowerer::ExplicitLIBSpan,true>::push_back((uint64_t)&v87, v23 + v24, v3);
                    int v20 = v90[0];
                    unsigned int v22 = *((_DWORD *)this + 1078);
                  }
                  uint64_t v21 = v20[i];
                  uint64_t v24 = i;
                }
                v23 += 0x100000000;
              }
            }
            if (v21 != 0xFFFFFFFFLL)
            {
              llvm::SmallVectorTemplateBase<AGCLLVMGen3TargetLowerer::ExplicitLIBSpan,true>::push_back((uint64_t)&v87, v24 | ((unint64_t)(v22 - 1) << 32), v21);
              unsigned int v22 = *((_DWORD *)this + 1078);
            }
            if (v22)
            {
              unint64_t v26 = 0;
              uint64_t v27 = (unsigned int *)v90[0];
              do
              {
                uint64_t v28 = v27[v26];
                if (v28 != -1)
                {
                  char v29 = v26 - 64;
                  if (v26 >= 0x40)
                  {
                    int v30 = (char *)this + 7160;
                  }
                  else
                  {
                    char v29 = v26;
                    int v30 = (char *)this + 7096;
                  }
                  *(void *)&v30[8 * v28] |= 1 << v29;
                  *((unsigned char *)this + 7224) = 1;
                }
                ++v26;
              }
              while (v22 != v26);
            }
          }
          v86[0] = xmmword_1CADD62C0;
          v86[1] = xmmword_1CADD62D0;
          unsigned int v83 = v85;
          uint64_t v84 = 0xA00000000;
          uint64_t v31 = *((void *)this + 22);
          if (*(unsigned char *)(v31 + 18))
          {
            llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
            uint64_t v33 = *((void *)this + 22);
            uint64_t v32 = *(void *)(v31 + 88);
            if (*(_WORD *)(v33 + 18)) {
              llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
            }
            uint64_t v31 = v33;
          }
          else
          {
            uint64_t v32 = *(void *)(v31 + 88);
          }
          uint64_t v34 = *(void *)(v31 + 88) + 40 * *(void *)(v31 + 96);
          while (v32 != v34)
          {
            uint64_t v35 = *(void *)(*((void *)this + 11) + 8 * *(unsigned int *)(v32 + 32));
            if (v35) {
              llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v83, v35, 1);
            }
            v32 += 40;
          }
          uint64_t v36 = *((void *)this + 9);
          if (v36)
          {
            unint64_t v37 = *(unsigned int *)(v36 + 8);
            if (v37)
            {
              for (unint64_t j = 0; j < v37; ++j)
              {
                llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v83, *(void *)(v36 - 8 * v37 + 8 * j), 0);
                uint64_t v36 = *((void *)this + 9);
                unint64_t v37 = *(unsigned int *)(v36 + 8);
              }
            }
          }
          if (v84)
          {
            unint64_t v39 = 0;
            int v70 = 0;
            do
            {
              BOOL v40 = (unsigned __int8 *)v83 + 16 * v39;
              uint64_t v41 = *(void *)v40;
              uint64_t v42 = v40[8];
              uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(*(void *)v40
                                                                    - 8 * *(unsigned int *)(*(void *)v40 + 8)
                                                                    + 8 * v42));
              if (v44 == 17)
              {
                BOOL v45 = *(void *)String == 0x646E65722E726961 && *(void *)(String + 8) == 0x65677261745F7265;
                if (v45 && *(unsigned char *)(String + 16) == 116)
                {
                  unsigned int __val = 0;
                  LODWORD(__p) = v42 + 1;
                  parseMDInt(0, v41, (unsigned int *)&__p, &__val);
                  for (unsigned int k = v42 | 2; ; unsigned int k = v81 + 1)
                  {
                    unsigned int v81 = k;
                    if (k >= *(_DWORD *)(v41 + 8)) {
                      break;
                    }
                    unsigned int v80 = -1;
                    if (parseMDInt("air.raster_order_group", v41, &v81, &v80))
                    {
                      if (v80 >= 7) {
                        unsigned int v48 = 7;
                      }
                      else {
                        unsigned int v48 = v80;
                      }
                      int v49 = 1 << __val;
                      if (((1 << __val) & v70) == 0 || (unsigned int v50 = *((_DWORD *)v86 + __val), v48 == v50))
                      {
                        *((_DWORD *)v86 + __val) = v48;
                        v70 |= v49;
                        break;
                      }
                      std::to_string(&v73, __val);
                      uint64_t v54 = std::string::insert(&v73, 0, "Inconsistent raster_order_group() for color[");
                      std::string::size_type v55 = v54->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
                      v74.__r_.__value_.__r.__words[2] = v55;
                      v54->__r_.__value_.__l.__size_ = 0;
                      v54->__r_.__value_.__r.__words[2] = 0;
                      v54->__r_.__value_.__r.__words[0] = 0;
                      char v56 = std::string::append(&v74, "] : ");
                      std::string::size_type v57 = v56->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
                      v75.__r_.__value_.__r.__words[2] = v57;
                      v56->__r_.__value_.__l.__size_ = 0;
                      v56->__r_.__value_.__r.__words[2] = 0;
                      v56->__r_.__value_.__r.__words[0] = 0;
                      std::to_string(&v72, v48);
                      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        unint64_t v58 = &v72;
                      }
                      else {
                        unint64_t v58 = (std::string *)v72.__r_.__value_.__r.__words[0];
                      }
                      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type size = v72.__r_.__value_.__l.__size_;
                      }
                      uint64_t v60 = std::string::append(&v75, (const std::string::value_type *)v58, size);
                      std::string::size_type v61 = v60->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
                      v76.__r_.__value_.__r.__words[2] = v61;
                      v60->__r_.__value_.__l.__size_ = 0;
                      v60->__r_.__value_.__r.__words[2] = 0;
                      v60->__r_.__value_.__r.__words[0] = 0;
                      char v62 = std::string::append(&v76, " and ");
                      std::string::size_type v63 = v62->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
                      v77.__r_.__value_.__r.__words[2] = v63;
                      v62->__r_.__value_.__l.__size_ = 0;
                      v62->__r_.__value_.__r.__words[2] = 0;
                      v62->__r_.__value_.__r.__words[0] = 0;
                      std::to_string(&v71, v50);
                      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        int v64 = &v71;
                      }
                      else {
                        int v64 = (std::string *)v71.__r_.__value_.__r.__words[0];
                      }
                      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v65 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v65 = v71.__r_.__value_.__l.__size_;
                      }
                      std::string::size_type v66 = std::string::append(&v77, (const std::string::value_type *)v64, v65);
                      std::string::size_type v67 = v66->__r_.__value_.__r.__words[2];
                      long long __p = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
                      uint64_t v79 = v67;
                      v66->__r_.__value_.__l.__size_ = 0;
                      v66->__r_.__value_.__r.__words[2] = 0;
                      v66->__r_.__value_.__r.__words[0] = 0;
                      if (v79 >= 0) {
                        p_p = (const std::string::value_type *)&__p;
                      }
                      else {
                        p_p = (const std::string::value_type *)__p;
                      }
                      if (v79 >= 0) {
                        std::string::size_type v69 = HIBYTE(v79);
                      }
                      else {
                        std::string::size_type v69 = *((void *)&__p + 1);
                      }
                      std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), p_p, v69);
                      if (SHIBYTE(v79) < 0) {
                        operator delete((void *)__p);
                      }
                      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v71.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v77.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v76.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v72.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v75.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v74.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v73.__r_.__value_.__l.__data_);
                      }
                      int v19 = 0;
                      goto LABEL_105;
                    }
                  }
                }
              }
              ++v39;
            }
            while (v39 < v84);
          }
          uint64_t v51 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
          uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 680))(v51);
          AGCLLVMGen3TargetLowerer::addLIBSpansFromDrawBufferState(v52, *((void *)this + 614), (uint64_t)v86, (uint64_t)&v87);
          uint64_t v53 = (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 24) + 400) + 680))();
          AGCLLVMGen3TargetLowerer::setupLIBRasterOrderGroupFromSpans(v53, (uint64_t)&v87);
          int v19 = 1;
LABEL_105:
          if (v83 != v85) {
            free(v83);
          }
          if (v87 != v89) {
            free(v87);
          }
        }
      }
      else
      {
LABEL_43:
        int v19 = 0;
      }
      if (v90[0] != v91) {
        free(v90[0]);
      }
      return inited & v19;
    }
  }
  return inited;
}

uint64_t llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = (void *)(*(void *)result + 16 * v3);
  *uint64_t v4 = a2;
  v4[1] = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

BOOL AGCLLVMUserFragmentShader::setupShaderOutputs(AGCLLVMUserFragmentShader *this)
{
  v101[8] = *MEMORY[0x1E4F143B8];
  uint64_t Function = (llvm::Function *)llvm::Module::getFunction();
  unint64_t v2 = *(llvm::CallBase **)(*((void *)Function + 1) + 24);
  uint64_t v3 = llvm::CallBase::arg_end(v2);
  uint64_t v4 = (llvm::Value **)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  if (((v3 - (void)v4) & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v88 = *v4;
    uint64_t v5 = *(void *)*v4;
    unsigned int v6 = *(_DWORD *)(*((void *)this + 9) + 8);
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v5 = 0;
    uint64_t v88 = 0;
  }
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v2);
  unint64_t v7 = v6;
  v100[0] = v101;
  v100[1] = (void *)0x800000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)v100, v6, 0);
  if (v6)
  {
    if (*(unsigned char *)(v5 + 8) == 16) {
      AGCLLVMBuilder::unboxStruct((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v88, (uint64_t)v100);
    }
    else {
      *(void *)v100[0] = v88;
    }
    uint64_t v8 = 0;
    BOOL v9 = 0;
    do
    {
      char v10 = *(unsigned __int8 **)(*((void *)this + 9) - 8 * *(unsigned int *)(*((void *)this + 9) + 8) + 8 * v8);
      if (v10)
      {
        unint64_t v11 = *v10;
        if (v11 <= 0x22 && ((0x7FFFFFFF0uLL >> v11) & 1) != 0)
        {
          unint64_t v13 = *(llvm::MDString **)&v10[-8 * *((unsigned int *)v10 + 2)];
          if (v13)
          {
            if (!*(unsigned char *)v13)
            {
              uint64_t String = llvm::MDString::getString(v13);
              uint64_t v16 = String;
              uint64_t v17 = v15;
              uint64_t v18 = *((void *)v100[0] + v8);
              switch(v15)
              {
                case 9:
                  if (*(void *)String != 0x747065642E726961 || *(unsigned char *)(String + 8) != 104) {
                    goto LABEL_43;
                  }
                  int v20 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                  uint64_t v21 = *((void *)this + 686);
                  goto LABEL_52;
                case 11:
                  if (*(void *)String != 0x6E6574732E726961 || *(void *)(String + 3) != 0x6C69636E6574732ELL) {
                    goto LABEL_43;
                  }
                  unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*(llvm::Type **)v18);
                  uint64_t v24 = *(void *)(*(void *)this - 24);
                  uint64_t v25 = *(void *)((char *)this + v24 + 224);
                  __int16 v99 = 257;
                  if (ScalarSizeInBits > 0x10) {
                    uint64_t v26 = 38;
                  }
                  else {
                    uint64_t v26 = 39;
                  }
                  uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this + v24 + 40, v26, v18, v25, (uint64_t)&v96);
                  int v20 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                  uint64_t v21 = *((void *)this + 689);
                  goto LABEL_53;
                case 12:
                  if (*(void *)String == 0x65766F632E726961 && *(_DWORD *)(String + 8) == 1701273970) {
                    break;
                  }
                  goto LABEL_43;
                case 17:
                  if (*(void *)String != 0x646E65722E726961
                    || *(void *)(String + 8) != 0x65677261745F7265
                    || *(unsigned char *)(String + 16) != 116)
                  {
                    goto LABEL_43;
                  }
                  int v92 = 0;
                  LODWORD(v93) = 0;
                  LODWORD(v96) = 1;
                  if (!parseMDInt(0, (uint64_t)v10, (unsigned int *)&v96, &v93)) {
                    goto LABEL_115;
                  }
                  LODWORD(v96) = 2;
                  if (!parseMDInt(0, (uint64_t)v10, (unsigned int *)&v96, &v92)) {
                    goto LABEL_115;
                  }
                  uint64_t v44 = AGCLLVMBuilder::extendVector((AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 32), (llvm::Value *)v18, 4);
                  uint64_t v47 = (char *)this + 32 * v93;
                  unsigned int v48 = v47 + 4952;
                  int v49 = v47 + 5208;
                  if (v92) {
                    unsigned int v50 = v49;
                  }
                  else {
                    unsigned int v50 = v48;
                  }
                  if (!*((void *)v50 + 3)) {
                    break;
                  }
                  uint64_t Cast = (llvm::Type **)AGCLLVMObject::buildConvertColor((uint64_t)this + *(void *)(*(void *)this - 24), v44, *(llvm::Type **)v50, *((unsigned __int8 *)this + 72 * v93 + 4378), *((unsigned __int8 *)this + 72 * v93 + 4377), *((unsigned int *)this + 18 * v93 + 1101), v45, v46);
                  int v20 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                  uint64_t v21 = *((void *)v50 + 3);
LABEL_53:
                  llvm::IRBuilderBase::CreateAlignedStore(v20, Cast, v21, 0);
                  break;
                default:
LABEL_43:
                  if (!AGCLLVMUserFragmentShader::isSampleMaskVariant((uint64_t *)String, v15)) {
                    break;
                  }
                  if (AGCLLVMUserFragmentShader::getEffectiveFragmentRate(*((_DWORD *)this + 1468), v16, v17))
                  {
                    if ((unsigned __int16)*(_DWORD *)(*((void *)this + 614) + 32) >> 12 == 1)
                    {
                      int v30 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                      uint64_t v31 = (llvm::Value *)llvm::ConstantInt::get();
                      __int16 v99 = 257;
                      uint64_t v32 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v30, (llvm::Value *)v18, v31, (const llvm::Twine *)&v96);
                      uint64_t v33 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                      uint64_t v34 = llvm::ConstantInt::get();
                      __int16 v99 = 257;
                      llvm::IRBuilderBase::CreateICmp(v33, 32, v32, v34, (uint64_t)&v96);
                      llvm::ConstantInt::get();
                      llvm::ConstantInt::get();
                      __int16 v99 = 257;
                      uint64_t Select = llvm::IRBuilderBase::CreateSelect();
                    }
                    else
                    {
                      uint64_t v36 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                      unint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
                      __int16 v99 = 257;
                      BOOL v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v36, (llvm::Value *)v18, v37, (const llvm::Twine *)&v96);
                      unint64_t v39 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                      BOOL v40 = (llvm::Value *)llvm::ConstantInt::get();
                      __int16 v99 = 257;
                      Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v39, v38, v40, (const llvm::Twine *)&v96);
                      uint64_t v42 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                      __int16 v99 = 257;
                      uint64_t Select = llvm::IRBuilderBase::CreateOr(v42, Shl, v38, (const llvm::Twine *)&v96);
                    }
                    uint64_t v18 = Select;
                  }
                  if (*(unsigned __int8 *)(v18 + 16) - 11 <= 1) {
                    uint64_t v18 = llvm::ConstantInt::get();
                  }
                  int v20 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                  uint64_t v21 = *((void *)this + 692);
LABEL_52:
                  uint64_t Cast = (llvm::Type **)v18;
                  goto LABEL_53;
              }
            }
          }
        }
      }
      BOOL v9 = ++v8 >= v7;
    }
    while (v7 != v8);
  }
  if (v88) {
    EraseInstructionChain(v88);
  }
  llvm::Instruction::eraseFromParent(v2);
  llvm::Function::eraseFromParent(Function);
  if (*((unsigned char *)this + 5845))
  {
    std::string::size_type v96 = v98;
    uint64_t v97 = 0x400000000;
    uint64_t v51 = (llvm::Function *)*((void *)this + 731);
    uint64_t v52 = *((void *)v51 + 1);
    if (v52)
    {
      do
      {
        uint64_t v53 = *(llvm::Instruction **)(v52 + 24);
        uint64_t v52 = *(void *)(v52 + 8);
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v53);
        uint64_t v54 = *(void *)(*(void *)this - 24);
        if (*((unsigned char *)this + 5862))
        {
          std::string::size_type v55 = (char *)this + v54;
          uint64_t v56 = *(void *)((char *)this + v54 + 400);
          long long v89 = *(_OWORD *)((char *)this + v54 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v90, (AGCLLVMUserFragmentShader *)((char *)this + v54 + 40));
          int v91 = *((_DWORD *)v55 + 34);
          uint64_t v57 = llvm::ConstantInt::get();
          (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v56 + 616))(v56, &v89, v57);
          if (v90) {
            llvm::MetadataTracking::untrack();
          }
        }
        else
        {
          uint64_t v58 = *(void *)((char *)this + v54 + 88);
          v95[8] = 257;
          uint64_t v59 = llvm::BasicBlock::splitBasicBlock();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v96, v59);
          uint64_t v60 = *(void *)(v58 + 40);
          if (v60 == v58 + 40)
          {
            uint64_t v63 = 0;
          }
          else
          {
            uint64_t v61 = v60 - 24;
            if (v60) {
              uint64_t v62 = v60 - 24;
            }
            else {
              uint64_t v62 = 0;
            }
            if (*(unsigned __int8 *)(v62 + 16) - 29 >= 0xB) {
              uint64_t v63 = 0;
            }
            else {
              uint64_t v63 = v61;
            }
          }
          uint64_t v64 = *((void *)this + 702);
          std::string::size_type v65 = (void *)(v63 - 32);
          if (*(void *)(v63 - 32))
          {
            **(void **)(v63 - 16) = *(void *)(v63 - 24);
            uint64_t v66 = *(void *)(v63 - 24);
            if (v66) {
              *(void *)(v66 + 16) = *(void *)(v63 - 16);
            }
          }
          *std::string::size_type v65 = v64;
          if (v64)
          {
            uint64_t v69 = *(void *)(v64 + 8);
            std::string::size_type v67 = (void *)(v64 + 8);
            uint64_t v68 = v69;
            *(void *)(v63 - 24) = v69;
            if (v69) {
              *(void *)(v68 + 16) = v63 - 24;
            }
            *(void *)(v63 - 16) = v67;
            *std::string::size_type v67 = v65;
          }
        }
        llvm::Instruction::eraseFromParent(v53);
      }
      while (v52);
      uint64_t v51 = (llvm::Function *)*((void *)this + 731);
    }
    llvm::Function::eraseFromParent(v51);
    std::string::size_type v93 = v95;
    uint64_t v94 = 0x400000000;
    unsigned int v70 = v97;
    if (v97)
    {
      do
      {
        std::string v71 = (void *)*((void *)v96 + v70 - 1);
        LODWORD(v97) = v70 - 1;
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v93, (uint64_t)v71);
        std::string v72 = v71 + 5;
        for (unint64_t i = (void *)v71[6]; i != v72; unint64_t i = (void *)i[1])
        {
          llvm::UndefValue::get();
          llvm::Value::replaceAllUsesWith();
        }
        std::string v74 = (void *)*v72;
        if ((void *)*v72 != v72)
        {
          std::string v75 = (llvm::Instruction *)(v74 - 3);
          uint64_t v76 = v74 ? (uint64_t)(v74 - 3) : 0;
          unsigned int v77 = *(unsigned __int8 *)(v76 + 16) - 29;
          std::string v78 = v77 >= 0xB ? 0 : v75;
          if (v77 <= 0xA)
          {
            int NumSuccessors = llvm::Instruction::getNumSuccessors(v75);
            if (NumSuccessors)
            {
              int v80 = NumSuccessors;
              for (int j = 0; j != v80; ++j)
              {
                Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(v78);
                if (llvm::BasicBlock::getSinglePredecessor(Successor))
                {
                  uint64_t v83 = llvm::Instruction::getSuccessor(v78);
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v96, v83);
                }
                uint64_t v84 = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(v78);
                llvm::BasicBlock::removePredecessor(v84, (llvm::BasicBlock *)v71);
              }
            }
          }
        }
        llvm::BasicBlock::dropAllReferences((llvm::BasicBlock *)v71);
        unsigned int v70 = v97;
      }
      while (v97);
      while (v94)
      {
        std::string v85 = (llvm::BasicBlock *)*((void *)v93 + v94 - 1);
        LODWORD(v94) = v94 - 1;
        llvm::BasicBlock::eraseFromParent(v85);
      }
    }
    if (v93 != v95) {
      free(v93);
    }
    if (v96 != v98) {
      free(v96);
    }
  }
  BOOL v9 = 1;
LABEL_115:
  if (v100[0] != v101) {
    free(v100[0]);
  }
  return v9;
}

uint64_t llvm::IRBuilderBase::CreateAlignedStore(uint64_t *a1, llvm::Type **a2, uint64_t a3, __int16 a4)
{
  if ((a4 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
    llvm::DataLayout::getABITypeAlign(DataLayout, *a2);
  }
  uint64_t v8 = llvm::User::operator new((llvm::User *)0x40);
  llvm::StoreInst::StoreInst();
  __int16 v14 = 257;
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], v8, v13, a1[6], a1[7]);
  uint64_t v9 = *((unsigned int *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = v10 + 16 * v9;
    do
    {
      llvm::Instruction::setMetadata();
      v10 += 16;
    }
    while (v10 != v11);
  }
  return v8;
}

uint64_t EraseInstructionChain(llvm::Value *a1)
{
  uint64_t v1 = 0;
  if (a1 && *((unsigned __int8 *)a1 + 16) >= 0x1Cu)
  {
    if (*((void *)a1 + 1))
    {
      return 0;
    }
    else
    {
      LODWORD(v1) = 0;
      while (1)
      {
        int v2 = *((_DWORD *)a1 + 5);
        if ((v2 & 0x7FFFFFF) == 0) {
          break;
        }
        uint64_t v3 = (v2 & 0x40000000) != 0
           ? (llvm::Value *)*((void *)a1 - 1)
           : (llvm::Value *)((char *)a1 - 32 * (v2 & 0x7FFFFFF));
        uint64_t v4 = *(llvm::Value **)v3;
        if (*(unsigned __int8 *)(*(void *)v3 + 16) <= 0x1Bu) {
          break;
        }
        llvm::Instruction::eraseFromParent(a1);
        uint64_t v1 = (v1 + 1);
        a1 = v4;
        if (*((void *)v4 + 1)) {
          return v1;
        }
      }
      llvm::Instruction::eraseFromParent(a1);
      return (v1 + 1);
    }
  }
  return v1;
}

void AGCLLVMGen3TargetLowerer::setupLIBRasterOrderGroupFromSpans(uint64_t a1, uint64_t a2)
{
  v8[16] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 2432) && *(_DWORD *)(a2 + 8))
  {
    v7[0] = v8;
    v7[1] = (void *)0x1000000000;
    uint64_t v3 = llvm::MDString::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v7, v3);
    if (*(_DWORD *)(a2 + 8))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        llvm::ConstantInt::get();
        llvm::ValueAsMetadata::get();
        llvm::ConstantInt::get();
        llvm::ValueAsMetadata::get();
        llvm::MDString::get();
        if (*(_DWORD *)(*(void *)a2 + v4 + 8) >= 9u
          || (llvm::ConstantInt::get(),
              llvm::ValueAsMetadata::get(),
              llvm::MDString::get(),
              *(_DWORD *)(*(void *)a2 + v4 + 8) >= 9u))
        {
          abort();
        }
        llvm::ConstantInt::get();
        llvm::ValueAsMetadata::get();
        uint64_t Impl = llvm::MDTuple::getImpl();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v7, Impl);
        ++v5;
        v4 += 12;
      }
      while (v5 < *(unsigned int *)(a2 + 8));
    }
    llvm::Module::getOrInsertNamedMetadata();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    if (v7[0] != v8) {
      free(v7[0]);
    }
  }
}

uint64_t AGCLLVMGen3TargetLowerer::addLIBSpansFromDrawBufferState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(result + 2432) && *(unsigned char *)(a2 + 32))
  {
    uint64_t v8 = result;
    for (uint64_t i = 0; i != 8; ++i)
    {
      if (((1 << i) & *(unsigned __int8 *)(a2 + 32)) != 0)
      {
        unsigned int v10 = *(_DWORD *)(a2 + 4 * i);
        int v11 = v10 >> 5;
        switch(v10 & 0x1F)
        {
          case 2u:
          case 3u:
          case 4u:
          case 5u:
            break;
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x16u:
            v11 *= 2;
            break;
          case 0xAu:
          case 0xBu:
          case 0x11u:
            v11 *= 4;
            break;
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
            int v11 = 4;
            break;
          default:
            int v11 = 0;
            break;
        }
        uint64_t v12 = (v10 >> 12) * *(_DWORD *)(v8 + 868);
        unint64_t v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(a3 + 4 * i);
        BOOL result = llvm::SmallVectorTemplateBase<AGCLLVMGen3TargetLowerer::ExplicitLIBSpan,true>::push_back(a4, v12 | ((unint64_t)(v12 + v11 - 1) << 32), v4);
      }
    }
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<AGCLLVMGen3TargetLowerer::ExplicitLIBSpan,true>::push_back(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = *(void *)result + 12 * v3;
  *(void *)uint64_t v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::setupFixedPRIDS(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 2432)) {
    return 1;
  }
  switch(a2)
  {
    case 2:
      if (MGGetBoolAnswer())
      {
        Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_G10_DISABLE_TILE_FRAGMENT_SYNC", v3);
        if (Value)
        {
          if (*Value != 48) {
            atoi(Value);
          }
        }
      }
      break;
    default:
      goto LABEL_7;
  }
  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDString::get();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  if (!MGGetBoolAnswer()) {
    return 1;
  }
LABEL_7:
  unsigned int v6 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_G10_DISABLE_TILE_FRAGMENT_SYNC", v5);
  if (v6 && *v6 != 48 && (int v8 = atoi(v6), (a2 - 3) <= 3) && v8) {
    return 0;
  }
  else {
    return 1;
  }
}

uint64_t AGCLLVMAGPFragmentShader::initCompile(AGCLLVMAGPFragmentShader *this)
{
  uint64_t inited = AGCLLVMUserFragmentShader::initCompile(this);
  if (inited && *(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1754)) {
    AGCLLVMUserShader::setUniformAtomicsMode(this);
  }
  return inited;
}

uint64_t AGCLLVMUserFragmentShader::initCompile(AGCLLVMUserFragmentShader *this)
{
  AGCLLVMUserObject::initCompile(this);
  uint64_t result = AGCLLVMFragmentShader::initCompile((AGCLLVMUserFragmentShader *)((char *)this + 4320));
  if (result)
  {
    uint64_t v3 = **(void **)(*(void *)(*((void *)this + 22) + 24) + 16);
    if (v3 != *(void *)((char *)this + *(void *)(*(void *)this - 24) + 176))
    {
      uint64_t v4 = *(unsigned int *)(*((void *)this + 9) + 8);
      if (v4)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 8 * v4;
        while (1)
        {
          int v7 = *(unsigned __int8 *)(v3 + 8);
          uint64_t v8 = v3;
          if (v7 == 16)
          {
            uint64_t v8 = *(void *)(*(void *)(v3 + 16) + v5);
            int v7 = *(_DWORD *)(v8 + 8);
          }
          if ((v7 & 0xFE) == 0x12) {
            uint64_t v8 = **(void **)(v8 + 16);
          }
          uint64_t v9 = *(void *)(*((void *)this + 9) - 8 * *(unsigned int *)(*((void *)this + 9) + 8) + v5);
          if (isStringMDNode(*(llvm::MDString **)(v9 - 8 * *(unsigned int *)(v9 + 8)), "air.render_target"))
          {
            uint64_t v43 = 0;
            LODWORD(v42) = 1;
            if (!parseMDInt(0, v9, (unsigned int *)&v42, (_DWORD *)&v43 + 1)) {
              return 0;
            }
            LODWORD(v42) = 2;
            if (!parseMDInt(0, v9, (unsigned int *)&v42, &v43)) {
              return 0;
            }
            int v11 = v43;
            char v10 = BYTE4(v43);
            if (v43 != 1) {
              break;
            }
            uint64_t v12 = *((void *)this + 727);
            unint64_t v13 = (unsigned int *)(v12 ? v12 + 16 : *((void *)this + 726) + 4 * HIDWORD(v43) + 24);
            unsigned int v14 = *v13;
            if ((v14 & 1) != 0
              && (vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v14), (int8x16_t)xmmword_1CADD6410), (int32x4_t)xmmword_1CADD6420))) & 1) != 0)
            {
              break;
            }
          }
LABEL_38:
          v5 += 8;
          if (v6 == v5) {
            goto LABEL_39;
          }
        }
        uint64_t v15 = (char *)this + 32 * HIDWORD(v43);
        uint64_t v16 = v15 + 4952;
        uint64_t v17 = v15 + 5208;
        if (v43) {
          uint64_t v16 = v17;
        }
        uint64_t v18 = *(void *)this;
        if (*((unsigned char *)this + 72 * HIDWORD(v43) + 4377))
        {
          int v19 = (char *)this + *(void *)(v18 - 24);
          if (v8 != *((void *)v19 + 25) && v8 != *((void *)v19 + 23)) {
            uint64_t v8 = *((void *)v19 + 25);
          }
        }
        int v20 = (void *)((char *)this + *(void *)(v18 - 24));
        if (v8 != v20[25])
        {
          if (v8 == v20[23])
          {
            if (*(void *)v16 != v20[40])
            {
              uint64_t v21 = v20 + 39;
              goto LABEL_34;
            }
          }
          else
          {
            if (v8 == v20[29])
            {
              uint64_t v21 = v20 + 43;
              goto LABEL_34;
            }
            if (v8 == v20[28] && *(void *)v16 != v20[43])
            {
              uint64_t v21 = v20 + 42;
LABEL_34:
              *(void *)uint64_t v16 = *v21;
            }
          }
          if (!v11 && ((1 << v10) & *(_DWORD *)(*((void *)this + 614) + 32)) != 0) {
            *((unsigned char *)this + 4944) |= 1 << v10;
          }
          goto LABEL_38;
        }
        uint64_t v21 = v20 + 40;
        goto LABEL_34;
      }
    }
LABEL_39:
    int v22 = **((_DWORD **)this + 725);
    if (*((unsigned char *)this + 5844)) {
      BOOL v23 = 0;
    }
    else {
      BOOL v23 = (**((_DWORD **)this + 725) & 4) == 0;
    }
    char v24 = v22 & 1;
    if (!v23) {
      char v24 = 1;
    }
    *((unsigned char *)this + 5844) = v24;
    uint64_t result = (*(uint64_t (**)(AGCLLVMUserFragmentShader *))(*(void *)this + 536))(this);
    if (result)
    {
      if ((v22 & 0x800) != 0)
      {
        char v27 = *((unsigned char *)this + 5464) | 1;
      }
      else
      {
        int v25 = *((unsigned __int8 *)this + 5835);
        if (*((unsigned char *)this + 5835) || *((unsigned char *)this + 5857))
        {
          if (*((unsigned char *)this + 5845))
          {
            char v26 = *((unsigned char *)this + 5464);
          }
          else
          {
            char v26 = *((unsigned char *)this + 5464);
            if (!*((unsigned char *)this + 5844))
            {
              char v29 = 0;
              char v28 = 1;
              goto LABEL_54;
            }
          }
          char v28 = 0;
          char v29 = 2;
LABEL_54:
          char v30 = v26 & 0xF1 | v29 | (4 * v25);
          int v31 = *((unsigned __int8 *)this + 5857);
          char v32 = v30 & 0xF7 | (8 * v31);
          *((unsigned char *)this + 5464) = v32;
          if ((v28 & 1) == 0 && !v25 && v31)
          {
            *((unsigned char *)this + 5464) = v32 | 4;
            *((unsigned char *)this + 5835) = 1;
            *(void *)((char *)this + 5836) = 0x100000000;
          }
          goto LABEL_58;
        }
        if (!*((unsigned char *)this + 5844)
          && (!*((unsigned char *)this + 5845) || (**((unsigned char **)this + 725) & 0x10) != 0 && !*((unsigned char *)this + 5862)))
        {
LABEL_58:
          if ((*(unsigned char *)(*((void *)this + 614) + 33) & 0xEE) != 0)
          {
            llvm::Module::getOrInsertNamedMetadata();
            llvm::ConstantInt::get();
            uint64_t v42 = llvm::ValueAsMetadata::get();
            llvm::MDTuple::getImpl();
            llvm::NamedMDNode::addOperand();
            uint64_t v33 = *((void *)this + 614);
            *((_DWORD *)this + 1456) = ~(-1 << (BYTE1(*(_DWORD *)(v33 + 32)) & 0xF));
            if ((((*(_DWORD *)(v33 + 32) >> 8) ^ (*(_DWORD *)(v33 + 32) >> 12)) & 0xF) != 0)
            {
              llvm::Module::getOrInsertNamedMetadata();
              llvm::ConstantInt::get();
              uint64_t v42 = llvm::ValueAsMetadata::get();
              llvm::MDTuple::getImpl();
              llvm::NamedMDNode::addOperand();
              llvm::Module::getOrInsertNamedMetadata();
              uint64_t v34 = *((_DWORD *)this + 1468) > 1u ? 0 : llvm::MDString::get();
              uint64_t v42 = v34;
              llvm::MDTuple::getImpl();
              llvm::NamedMDNode::addOperand();
              if (*((_DWORD *)this + 1468) == 1)
              {
                llvm::Module::getOrInsertNamedMetadata();
                llvm::ConstantInt::get();
                uint64_t v42 = llvm::ValueAsMetadata::get();
                llvm::MDTuple::getImpl();
                llvm::NamedMDNode::addOperand();
              }
            }
          }
          else
          {
            *((_DWORD *)this + 1456) = 1;
          }
          *((void *)this + 617) = llvm::Module::getOrInsertNamedMetadata();
          uint64_t v35 = *(void *)(*(void *)this - 24);
          uint64_t v36 = *(void *)((char *)this + v35 + 368);
          uint64_t v37 = v36 + 8;
          for (uint64_t i = *(void *)(v36 + 16); ; uint64_t i = *(void *)(i + 8))
          {
            if (i == v37) {
              return 1;
            }
            unint64_t v39 = (uint64_t *)(i - 56);
            if (!i) {
              unint64_t v39 = 0;
            }
            uint64_t v40 = *v39;
            if (*v39)
            {
              int v41 = *(_DWORD *)(v40 + 8);
              if ((v41 & 0xFE) == 0x12) {
                int v41 = *(_DWORD *)(**(void **)(v40 + 16) + 8);
              }
              if ((v41 & 0xFFFFFF00) == 0x300 && v39[1]) {
                break;
              }
            }
          }
          std::string::append((std::string *)((char *)this + v35 + 8), "Fragment shaders do not support shader declared threadgroup variables");
          return 0;
        }
        char v27 = *((unsigned char *)this + 5464) | 2;
      }
      *((unsigned char *)this + 5464) = v27;
      goto LABEL_58;
    }
  }
  return result;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::detectSideEffects(AGCLLVMAGPFragmentShaderGen3 *this)
{
  if (*((_DWORD *)this + 1814) == 2) {
    return AGCLLVMAGPFragmentShader::detectSideEffects(this);
  }
  else {
    return 1;
  }
}

uint64_t AGCLLVMFragmentShader::initCompile(AGCLLVMFragmentShader *this)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v59 = v61;
  uint64_t v60 = 0x800000000;
  uint64_t v56 = v58;
  uint64_t v57 = 0x800000000;
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368);
  *(void *)&long long v62 = v63;
  *((void *)&v62 + 1) = 0x800000000;
  memset(v61, 0, sizeof(v61));
  LODWORD(v60) = 8;
  int DefaultRoundingMode = AGCLLVMObject::getDefaultRoundingMode((AGCLLVMFragmentShader *)((char *)this
                                                                                      + *(void *)(v2 - 24)));
  uint64_t v5 = v58;
  uint64_t v6 = -8;
  do
    *v5++ = DefaultRoundingMode;
  while (!__CFADD__(v6++, 1));
  LODWORD(v57) = 8;
  *(void *)uint64_t v54 = "air.fragment";
  __int16 v55 = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)v54);
  if (NamedMetadata)
  {
    uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    uint64_t v10 = *(void *)(*(void *)(Operand - 8 * *(unsigned int *)(Operand + 8)) + 128);
    if (*(unsigned char *)(v10 + 16)) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = **(void **)(*(void *)(v10 + 24) + 16);
    int v12 = *(unsigned __int8 *)(v11 + 8);
    if (v12 != 7)
    {
      uint64_t v13 = Operand;
      if (v12 == 16)
      {
        if (*(_DWORD *)(v11 + 12))
        {
          unsigned int v14 = *(uint64_t **)(v11 + 16);
          do
          {
            uint64_t v15 = *v14++;
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v62, v15);
          }
          while (v14 != (uint64_t *)(*(void *)(v11 + 16) + 8 * *(unsigned int *)(v11 + 12)));
        }
      }
      else
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v62, v11);
      }
      uint64_t v16 = *(unsigned __int8 **)(v13 - 8 * *(unsigned int *)(v13 + 8) + 8);
      if (v16)
      {
        unint64_t v17 = *v16;
        if (v17 <= 0x22 && ((0x7FFFFFFF0uLL >> v17) & 1) != 0)
        {
          unint64_t v19 = *((unsigned int *)v16 + 2);
          if (v19)
          {
            unint64_t v20 = 0;
            while (1)
            {
              uint64_t v21 = *(unsigned __int8 **)&v16[8 * v20 + -8 * v19];
              if (!v21) {
                goto LABEL_57;
              }
              unint64_t v22 = *v21;
              if (v22 > 0x22 || ((0x7FFFFFFF0uLL >> v22) & 1) == 0) {
                goto LABEL_57;
              }
              char v24 = *(llvm::MDString **)&v21[-8 * *((unsigned int *)v21 + 2)];
              if (!v24) {
                goto LABEL_57;
              }
              if (*(unsigned char *)v24) {
                goto LABEL_57;
              }
              uint64_t String = llvm::MDString::getString(v24);
              if (v26 != 17) {
                goto LABEL_57;
              }
              BOOL v27 = *(void *)String == 0x646E65722E726961 && *(void *)(String + 8) == 0x65677261745F7265;
              if (!v27 || *(unsigned char *)(String + 16) != 116) {
                goto LABEL_57;
              }
              unsigned int v53 = 0;
              v54[0] = 1;
              if (parseMDInt(0, (uint64_t)v21, v54, &v53)) {
                *((void *)v59 + v53) = *(void *)(v62 + 8 * v20);
              }
              uint64_t v29 = *((unsigned int *)v21 + 2);
              if (&v21[-8 * v29 + 24] == v21) {
                goto LABEL_57;
              }
              uint64_t v30 = 24 - 8 * v29;
              while (!isStringMDNode(*(llvm::MDString **)&v21[v30], "air.rounding_mode"))
              {
                v30 += 8;
                if (!v30) {
                  goto LABEL_57;
                }
              }
              uint64_t v31 = *((unsigned int *)v21 + 2);
              if (&v21[-8 * v31 + 32] != v21) {
                break;
              }
LABEL_49:
              uint64_t v33 = -v31;
              if (&v21[8 * v33 + 32] != v21)
              {
                uint64_t v34 = 8 * v33 + 32;
                while (!isStringMDNode(*(llvm::MDString **)&v21[v34], "rte"))
                {
                  v34 += 8;
                  if (!v34) {
                    goto LABEL_57;
                  }
                }
                int v35 = 2;
LABEL_56:
                *((_DWORD *)v56 + v53) = v35;
              }
LABEL_57:
              ++v20;
              unint64_t v19 = *((unsigned int *)v16 + 2);
              if (v20 >= v19) {
                goto LABEL_58;
              }
            }
            uint64_t v32 = 32 - 8 * v31;
            while (!isStringMDNode(*(llvm::MDString **)&v21[v32], "rtz"))
            {
              v32 += 8;
              if (!v32)
              {
                uint64_t v31 = *((unsigned int *)v21 + 2);
                goto LABEL_49;
              }
            }
            int v35 = 1;
            goto LABEL_56;
          }
        }
      }
    }
  }
LABEL_58:
  if ((_OWORD *)v62 != v63) {
    free((void *)v62);
  }
  uint64_t v36 = *((void *)this + 74);
  unsigned int v37 = *(unsigned __int8 *)(v36 + 32);
  if (*(unsigned char *)(v36 + 32))
  {
    while (1)
    {
      unsigned int v38 = __clz(v37);
      uint64_t v39 = v38 ^ 0x1F;
      uint64_t v40 = *(void *)(*(void *)this - 24);
      int v41 = *(unsigned char **)((char *)this + v40 + 400);
      int v42 = *((_DWORD *)v56 + v39);
      if (v42 == 2 && v41[1769] == 0) {
        break;
      }
      unsigned int v44 = *(_DWORD *)(*((void *)this + 74) + 4 * v39);
      v37 ^= 0x80000000 >> v38;
      uint64_t v45 = (v44 >> 8) & 1;
      uint64_t v46 = v44 & 0x1F;
      uint64_t RTZMode = AGCLLVMTargetLowerer::getRTZMode(v41, v42);
      (*(void (**)(long long *__return_ptr, unsigned char *, uint64_t, uint64_t, uint64_t, void))(*(void *)v41 + 560))(&v62, v41, v46, v45, RTZMode, *((void *)v59 + v39));
      unsigned int v48 = (char *)this + 72 * v39;
      long long v49 = v63[2];
      *((_OWORD *)v48 + 3) = v63[1];
      *((_OWORD *)v48 + 4) = v49;
      *((void *)v48 + 10) = v64;
      long long v50 = v63[0];
      *((_OWORD *)v48 + 1) = v62;
      *((_OWORD *)v48 + 2) = v50;
      if (!v37)
      {
        uint64_t v51 = 1;
        goto LABEL_69;
      }
    }
    std::string::append((std::string *)((char *)this + v40 + 8), "The specified rounding mode is not supported on this device.");
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v51 = 1;
  }
LABEL_69:
  if (v56 != v58) {
    free(v56);
  }
  if (v59 != v61) {
    free(v59);
  }
  return v51;
}

uint64_t AGCLLVMTargetLowerer::getRTZMode(unsigned char *a1, int a2)
{
  if (!a1[1769]) {
    return 0;
  }
  if (a1[1770]) {
    return a2 != 2;
  }
  if (a1[808]) {
    BOOL v3 = a2 != 2;
  }
  else {
    BOOL v3 = a2 == 1;
  }
  unint64_t v4 = 0x1EA611000uLL;
  {
    unint64_t v4 = 0x1EA611000;
    if (v9)
    {
      if (MGGetBoolAnswer()) {
        Value = AGCEnv::getValue((AGCEnv *)"AGC_CLAMP_TO_F16_LIMITS", v10);
      }
      else {
        Value = 0;
      }
      AGCLLVMTargetLowerer::getRTZMode(_AGCFPRoundingMode)const::clamp_to_f16 = (uint64_t)Value;
      unint64_t v4 = 0x1EA611000uLL;
    }
  }
  uint64_t v5 = *(unsigned __int8 **)(v4 + 3776);
  if (v5) {
    BOOL v3 = *v5 != 48;
  }
  if (v3) {
    uint64_t v2 = 2;
  }
  else {
    uint64_t v2 = 0;
  }
  if (MGGetBoolAnswer())
  {
    int v7 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_F32_TO_F16_RTZ", v6);
    if (v7)
    {
      if (*v7 != 48)
      {
        if (atoi(v7)) {
          return 3;
        }
        else {
          return v2;
        }
      }
    }
  }
  return v2;
}

double AGCLLVMGen3TargetLowerer::fragmentOutputConfiguration@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(void *)(a5 + 52) = 0;
  *(void *)(a5 + 44) = 0;
  *(unsigned char *)(a5 + 60) = 0;
  *(unsigned char *)(a5 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 27) = 0u;
  unsigned int v11 = a2 - 2;
  *(_DWORD *)(a5 + 68) = a3;
  switch(a2)
  {
    case 2u:
    case 3u:
    case 0x13u:
      uint64_t v12 = *(void *)(a1 + 288);
      *(void *)a5 = v12;
      if (!a4) {
        goto LABEL_11;
      }
      uint64_t v12 = llvm::FixedVectorType::get();
      goto LABEL_6;
    case 4u:
    case 5u:
      uint64_t v12 = *(void *)(a1 + 296);
      goto LABEL_21;
    case 6u:
    case 7u:
    case 0x11u:
      uint64_t v12 = *(void *)(a1 + 288);
      goto LABEL_6;
    case 8u:
    case 9u:
      uint64_t v12 = *(void *)(a1 + 304);
      goto LABEL_21;
    case 0xAu:
    case 0xBu:
      uint64_t v12 = *(void *)(a1 + 312);
      goto LABEL_21;
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x16u:
      uint64_t v12 = *(void *)(a1 + 280);
LABEL_6:
      *(void *)a5 = v12;
      goto LABEL_7;
    case 0x12u:
      *(void *)a5 = *(void *)(a1 + 240);
      goto LABEL_30;
    case 0x14u:
    case 0x15u:
      int v14 = *(unsigned __int8 *)(a1 + 1808);
      uint64_t v15 = 288;
      if (!*(unsigned char *)(a1 + 1808)) {
        uint64_t v15 = 280;
      }
      uint64_t v12 = *(void *)(a1 + v15);
      *(void *)a5 = v12;
      if (a4 && v14)
      {
        uint64_t v12 = llvm::FixedVectorType::get();
LABEL_21:
        *(void *)a5 = v12;
      }
      goto LABEL_22;
    default:
      uint64_t v12 = 0;
LABEL_7:
      if (a2 != 12 || a3 != 1 || !a4)
      {
LABEL_11:
        if (a2 == 18)
        {
LABEL_30:
          uint64_t v17 = *(void *)(a1 + 304);
          *(void *)(a5 + 8) = v17;
          *(void *)(a5 + 24) = v17;
          *(void *)&double result = 0x200000001;
          *(void *)(a5 + 32) = 0x200000001;
          goto LABEL_31;
        }
LABEL_22:
        *(void *)(a5 + 8) = v12;
        *(void *)(a5 + 24) = v12;
        if (a2 <= 0x16)
        {
          if (((1 << a2) & 0x7993C0) != 0) {
            goto LABEL_31;
          }
          if (((1 << a2) & 0x603C) == 0 && ((1 << a2) & 0x20C00) != 0)
          {
            uint64_t v16 = (void *)(a1 + 312);
            goto LABEL_32;
          }
        }
        uint64_t v16 = (void *)(a1 + 296);
        goto LABEL_32;
      }
      uint64_t v13 = llvm::FixedVectorType::get();
      *(void *)a5 = v13;
      *(void *)(a5 + 8) = v13;
      *(void *)(a5 + 24) = v13;
LABEL_31:
      uint64_t v16 = (void *)(a1 + 304);
LABEL_32:
      *(void *)(a5 + 16) = *v16;
      switch(v11)
      {
        case 0u:
        case 4u:
        case 0xBu:
          *(_WORD *)(a5 + 41) = 257;
          double result = -0.00781250557;
          *(_OWORD *)(a5 + 44) = xmmword_1CADD6520;
          goto LABEL_38;
        case 1u:
        case 5u:
        case 0xCu:
        case 0x11u:
          *(unsigned char *)(a5 + 41) = 1;
          double result = 0.0;
          *(_OWORD *)(a5 + 44) = xmmword_1CADD6530;
          goto LABEL_38;
        case 2u:
        case 6u:
        case 8u:
          *(unsigned char *)(a5 + 42) = 1;
          goto LABEL_39;
        case 0xAu:
        case 0xFu:
        case 0x12u:
        case 0x13u:
          *(unsigned char *)(a5 + 41) = 1;
          goto LABEL_39;
        case 0xDu:
        case 0x14u:
          LODWORD(result) = dword_1CADD6128[a2 == 22];
          *(_WORD *)(a5 + 41) = 257;
          int v18 = dword_1CADD6120[a2 == 22];
          *(_DWORD *)(a5 + 44) = LODWORD(result);
          *(_DWORD *)(a5 + 48) = 0;
          *(_DWORD *)(a5 + 52) = v18;
          *(_DWORD *)(a5 + 56) = 1065353216;
LABEL_38:
          *(unsigned char *)(a5 + 60) = 1;
LABEL_39:
          if (a2 <= 0x16 && ((1 << a2) & 0x40E000) != 0) {
            *(unsigned char *)(a5 + 40) = 1;
          }
          break;
        case 0xEu:
          *(unsigned char *)(a5 + 64) = 1;
          *(_WORD *)(a5 + 40) = 257;
          *(void *)&double result = 3208691902;
          *(_OWORD *)(a5 + 44) = xmmword_1CADD6570;
          *(unsigned char *)(a5 + 60) = 1;
          break;
        default:
          return result;
      }
      return result;
  }
}

uint64_t AGCLLVMUserShader::setUniformAtomicsMode(AGCLLVMUserShader *this)
{
  llvm::Module::getOrInsertNamedMetadata();
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DISABLE_ATOMIC_OPTIMIZATIONS", v1);
    if (Value)
    {
      if (*Value != 48) {
        atoi(Value);
      }
    }
  }
  llvm::MDString::get();
  llvm::MDTuple::getImpl();
  return llvm::NamedMDNode::addOperand();
}

uint64_t *AGCLLVMUserShader::initLIBAliasOffset(uint64_t *result, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(_DWORD *)(a2 + 32);
    if ((_BYTE)v2)
    {
      uint64_t v3 = *result;
      unsigned __int16 v4 = *(_DWORD *)(*(uint64_t *)((char *)result + *(void *)(*result - 24) + 400) + 868) * (HIWORD(v2) & 0x1FF);
      *((_WORD *)result + 1782) = v4;
      *((_WORD *)result + 1781) = v4;
      *((_DWORD *)result + 1078) = v4;
      unsigned int v5 = *(_DWORD *)(a2 + 4 * (31 - __clz(*(unsigned __int8 *)(a2 + 32))));
      int v6 = (v5 >> 12) * *(_DWORD *)(*(uint64_t *)((char *)result + *(void *)(v3 - 24) + 400) + 868);
      LODWORD(v3) = (v5 & 0x1F) - 2;
      int v7 = v5 >> 5;
      switch((int)v3)
      {
        case 0:
        case 1:
        case 2:
        case 3:
          break;
        case 4:
        case 5:
        case 6:
        case 7:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 20:
          v7 *= 2;
          break;
        case 8:
        case 9:
        case 15:
          v7 *= 4;
          break;
        case 16:
        case 17:
        case 18:
        case 19:
          int v7 = 4;
          break;
        default:
          int v7 = 0;
          break;
      }
      *((_DWORD *)result + 1079) = v7 + v6;
    }
  }
  return result;
}

uint64_t validateMaxTotalThreadsPerThreadgroup(unsigned int a1, unsigned int a2, unsigned int a3, std::string *a4, unsigned int *a5)
{
  if (a2 && a1 != a2 && a1)
  {
    std::to_string(&v33, a1);
    uint64_t v8 = std::string::insert(&v33, 0, ": Kernel specified max total threads per threadgroup (");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v34, ") ");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v35, "must match compute pipeline specified max total threads per threadgroup (");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a2);
    std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    BOOL v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    if (!a1) {
      a1 = a2;
    }
    if (a1 <= a3)
    {
      *a5 = a1;
      return 1;
    }
    std::to_string(&v33, a1);
    int v18 = std::string::insert(&v33, 0, ": Specified total max threads per threadgroup (");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    unint64_t v20 = std::string::append(&v34, ") ");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    unint64_t v22 = std::string::append(&v35, "exceeds the maximum total threads per threadgroup supported (");
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a3);
    std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    BOOL v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
  }
  if (v16) {
    std::string::size_type v24 = size;
  }
  else {
    std::string::size_type v24 = v14;
  }
  int v25 = std::string::append(&v36, (const std::string::value_type *)p_p, v24);
  std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  BOOL v27 = std::string::append(&v37, ")");
  std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
  long long v38 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  uint64_t v39 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (v39 >= 0) {
    uint64_t v29 = (const std::string::value_type *)&v38;
  }
  else {
    uint64_t v29 = (const std::string::value_type *)v38;
  }
  if (v39 >= 0) {
    std::string::size_type v30 = HIBYTE(v39);
  }
  else {
    std::string::size_type v30 = *((void *)&v38 + 1);
  }
  std::string::append(a4, v29, v30);
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  return 0;
}

llvm::Value *AGCLLVMFragmentShader::buildReadFramebuffer(AGCLLVMFragmentShader *this, unsigned int a2)
{
  char v4 = 4 * a2;
  int v7 = (*((void *)this + 75) >> (4 * a2)) & 0xF;
  AGCLLVMBuilder::WriteFramebufferArgs::WriteFramebufferArgs((uint64_t)v6, (uint64_t)this + *(void *)(*(void *)this - 24) + 32, *((void *)this + 74), *((void *)this + 74) + 4 * a2);
  double result = AGCLLVMStatelessFragmentShader::buildReadFramebuffer((uint64_t)this, v6, (uint64_t)this + 72 * a2 + 16, &v7, 0, 0);
  *((void *)this + 75) |= (v7 << v4);
  return result;
}

llvm::Value *AGCLLVMStatelessFragmentShader::buildReadFramebuffer(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD *a4, char a5, char a6)
{
  if ((a6 & 1) == 0) {
    *a4 |= 0xFu;
  }
  if (*(int *)(a1 + 8) <= 0) {
    *(_DWORD *)(a1 + 8) = 1;
  }
  uint64_t v10 = *(void *)(*(void *)a1 - 24) + a1;
  uint64_t v11 = *(void *)(v10 + 400);
  long long v33 = *(_OWORD *)(v10 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v34, (llvm::IRBuilderBase *)(v10 + 40));
  int v35 = *(_DWORD *)(v10 + 136);
  uint64_t v12 = (llvm::Instruction *)(*(uint64_t (**)(uint64_t, long long *, unsigned int *, void))(*(void *)v11 + 216))(v11, &v33, a2, *(void *)a3);
  if (v34) {
    llvm::MetadataTracking::untrack();
  }
  NextNonDebugInstructiouint64_t n = llvm::Instruction::getNextNonDebugInstruction(v12);
  std::string::size_type v14 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
  if (NextNonDebugInstruction)
  {
    uint64_t v15 = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction(v12);
    llvm::IRBuilderBase::SetInsertPoint(v14, v15);
  }
  else
  {
    uint64_t v16 = *((void *)v12 + 5);
    *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 88) = v16;
    *((void *)v14 + 7) = v16 + 40;
  }
  uint64_t v17 = (llvm::Constant **)AGCLLVMObject::buildOutputFormatConversion(a1 + *(void *)(*(void *)a1 - 24), (uint64_t)v12, *(void *)(a3 + 24), *(_DWORD *)(a3 + 36));
  int v18 = (llvm::Value *)AGCLLVMStatelessFragmentShader::buildPreEmitSwizzle((void *)a1, v17, 0, a2[3]);
  if ((a5 & 1) == 0)
  {
    if (*(unsigned char *)(a3 + 60) && *(unsigned char *)(a3 + 40))
    {
      uint64_t v19 = *(void *)(*(void *)a1 - 24) + a1;
      uint64_t v20 = *(void *)(v19 + 400);
      if (*(unsigned char *)(v20 + 1731) && *(unsigned char *)(a3 + 64) == 0)
      {
        uint64_t v22 = v19 + 32;
        long long v30 = *(_OWORD *)(v19 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v31, (llvm::IRBuilderBase *)(v19 + 40));
        int v32 = *(_DWORD *)(v22 + 104);
        int v18 = (llvm::Value *)AGCLLVMTargetLowerer::buildClampColor(v20, (uint64_t)&v30, v18, a3 + 44, 1);
        if (v31) {
          llvm::MetadataTracking::untrack();
        }
      }
    }
    if (a2[3] == 6) {
      unsigned int v23 = 8;
    }
    else {
      unsigned int v23 = ~(-1 << a2[1]);
    }
    int v18 = AGCLLVMBuilder::fillUnwrittenChannels((AGCLLVMBuilder *)(*(void *)(*(void *)a1 - 24) + a1 + 32), v18, v23);
    if (*((unsigned char *)a2 + 16))
    {
      uint64_t v24 = *(void *)(*(void *)a1 - 24) + a1;
      uint64_t v25 = *(void *)(v24 + 400);
      long long v27 = *(_OWORD *)(v24 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v28, (llvm::IRBuilderBase *)(v24 + 40));
      int v29 = *(_DWORD *)(v24 + 136);
      int v18 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *, void))(*(void *)v25 + 592))(v25, &v27, v18, *a2);
      if (v28) {
        llvm::MetadataTracking::untrack();
      }
    }
  }
  return v18;
}

void *AGCLLVMFragmentShader::buildWriteFramebuffer(AGCLLVMFragmentShader *this, llvm::Value *a2, unsigned int a3, int a4, llvm::Value *a5)
{
  char v9 = 4 * a3;
  int v12 = (*((void *)this + 75) >> (4 * a3)) & 0xF;
  int v13 = a4;
  AGCLLVMBuilder::WriteFramebufferArgs::WriteFramebufferArgs((uint64_t)v11, (uint64_t)this + *(void *)(*(void *)this - 24) + 32, *((void *)this + 74), *((void *)this + 74) + 4 * a3);
  double result = AGCLLVMStatelessFragmentShader::buildWriteFramebuffer((uint64_t *)this, v11, (void *)this + 9 * a3 + 2, a2, &v13, &v12, a5);
  *((void *)this + 76) |= (v13 << v9);
  *((void *)this + 75) |= (v12 << v9);
  return result;
}

uint64_t AGCLLVMBuilder::WriteFramebufferArgs::WriteFramebufferArgs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a1 = *(_DWORD *)a4 & 0x1F;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a4 >> 5;
  *(_DWORD *)(a1 + 8) = (unsigned __int16)*(_DWORD *)(a3 + 32) >> 12;
  *(_DWORD *)(a1 + 12) = (*(_DWORD *)a4 >> 9) & 7;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a4 + 1) & 1;
  *(unsigned char *)(a1 + 17) = (*(_DWORD *)(a3 + 32) & 0x2000000) == 0;
  *(void *)(a1 + 24) = llvm::ConstantInt::get();
  *(void *)(a1 + 32) = llvm::ConstantInt::get();
  return a1;
}

void *AGCLLVMStatelessFragmentShader::buildWriteFramebuffer(uint64_t *a1, unsigned int *a2, void *a3, llvm::Value *a4, int *a5, _DWORD *a6, llvm::Value *a7)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2[1];
  int v13 = -1 << v12;
  int v14 = (-1 << v12) & 0xF;
  uint64_t v15 = *a1;
  uint64_t v16 = *(unsigned int *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 868);
  LOBYTE(v17) = 4;
  switch(*a2)
  {
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      LODWORD(v17) = (v16 + v12 - 1) & -(int)v16;
      break;
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x16u:
      unint64_t v17 = (((2 * v12) + v16 - 1) & (unint64_t)-v16) >> 1;
      break;
    case 0xAu:
    case 0xBu:
    case 0x11u:
      unint64_t v17 = (((4 * v12) + v16 - 1) & (unint64_t)-v16) >> 2;
      break;
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
      break;
    default:
      LOBYTE(v17) = 0;
      break;
  }
  int v18 = ~(-1 << v17);
  if (a2[3] == 6) {
    unsigned int v19 = *a5 >> 3;
  }
  else {
    unsigned int v19 = *a5;
  }
  if ((v19 & (1 << (v12 - 1))) == 0) {
    int v14 = 0;
  }
  uint64_t v20 = (v19 | v14) & ~(-1 << v17);
  *a5 = v20;
  int v23 = (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(v15 - 24) + 400) + 568))();
  if (*((unsigned char *)a2 + 16))
  {
    unsigned int v47 = v20;
    uint64_t v24 = a6;
    uint64_t v25 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v26 = *((void *)v25 + 50);
    long long v59 = *(_OWORD *)(v25 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v60, (llvm::IRBuilderBase *)(v25 + 40));
    int v61 = *((_DWORD *)v25 + 34);
    a4 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *, void, uint64_t))(*(void *)v26 + 600))(v26, &v59, a4, *a2, (uint64_t)a3 + 44);
    if (v60) {
      llvm::MetadataTracking::untrack();
    }
    a6 = v24;
    int v13 = -1 << v12;
    uint64_t v20 = v47;
  }
  long long v27 = AGCLLVMObject::buildConvertColor((uint64_t)a1 + *(void *)(*a1 - 24), a4, (llvm::Type *)a3[3], *((unsigned __int8 *)a3 + 42), *((unsigned __int8 *)a3 + 41), *((unsigned int *)a3 + 17), v21, v22);
  if (a2[3] == 6) {
    unsigned int v28 = 8;
  }
  else {
    unsigned int v28 = ~v13;
  }
  uint64_t Select = AGCLLVMBuilder::fillUnwrittenChannels((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), v27, v28);
  if ((v18 & ~v23) != 0)
  {
    *(void *)&long long v62 = llvm::ConstantInt::get();
    *((void *)&v62 + 1) = llvm::ConstantInt::get();
    *(void *)&long long v63 = llvm::ConstantInt::get();
    *((void *)&v63 + 1) = llvm::ConstantInt::get();
    llvm::ConstantVector::get();
    AGCLLVMStatelessFragmentShader::buildReadFramebuffer((uint64_t)a1, a2, (uint64_t)a3, a6, 1, 1);
    __int16 v58 = 257;
    uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    uint64_t v20 = 15;
  }
  if (a7)
  {
    if (v12 <= 3)
    {
      long long v62 = 0u;
      long long v63 = 0u;
      if (v12)
      {
        for (uint64_t i = 0; i != v12; ++i)
          *((void *)&v62 + i) = llvm::ConstantInt::get();
      }
      do
        *((void *)&v62 + v12++) = llvm::ConstantInt::get();
      while (v12 != 4);
      uint64_t v31 = (char *)a1 + *(void *)(*a1 - 24);
      int v32 = (llvm::IRBuilderBase *)(v31 + 40);
      long long v33 = (AGCLLVMBuilder *)(v31 + 32);
      uint64_t v34 = (llvm::Value *)llvm::ConstantInt::get();
      int v35 = AGCLLVMBuilder::splat(v33, 4, v34);
      std::string v36 = (llvm::Value *)llvm::ConstantVector::get();
      __int16 v58 = 257;
      llvm::IRBuilderBase::CreateShuffleVector(v32, a7, v35, v36, (const llvm::Twine *)&v55);
      uint64_t v20 = v20;
    }
    AGCLLVMStatelessFragmentShader::buildReadFramebuffer((uint64_t)a1, a2, (uint64_t)a3, a6, 1, 0);
    AGCLLVMObject::buildConvertColor((uint64_t)a1 + *(void *)(*a1 - 24), Select, (llvm::Type *)a3[3], *((unsigned __int8 *)a3 + 42), *((unsigned __int8 *)a3 + 41), *((unsigned int *)a3 + 17), v37, v38);
    __int16 v58 = 257;
    uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
  uint64_t v39 = AGCLLVMStatelessFragmentShader::buildPreEmitSwizzle(a1, (llvm::Constant **)Select, v20, a2[3]);
  uint64_t v41 = v40;
  uint64_t v42 = AGCLLVMObject::buildOutputFormatConversion((uint64_t)a1 + *(void *)(*a1 - 24), v39, *a3, *((_DWORD *)a3 + 8));
  uint64_t v43 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v44 = *((void *)v43 + 50);
  long long v52 = *(_OWORD *)(v43 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v53, (llvm::IRBuilderBase *)(v43 + 40));
  int v54 = *((_DWORD *)v43 + 34);
  double result = (*(void *(**)(long long *__return_ptr, uint64_t, long long *, unsigned int *, void, uint64_t, uint64_t, void))(*(void *)v44 + 208))(&v55, v44, &v52, a2, *a3, v42, v41, *((unsigned int *)a3 + 17));
  if (v53) {
    double result = (void *)llvm::MetadataTracking::untrack();
  }
  if ((void)v55)
  {
    uint64_t v46 = (uint64_t)a1 + *(void *)(*a1 - 24) + 32;
    long long v49 = v55;
    uint64_t v50 = v56;
    if (v56) {
      llvm::MetadataTracking::track();
    }
    int v51 = v57;
    double result = (void *)AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v49, v46 + 8);
    if (v50) {
      double result = (void *)llvm::MetadataTracking::untrack();
    }
  }
  if (v56) {
    return (void *)llvm::MetadataTracking::untrack();
  }
  return result;
}

llvm::Value *AGCLLVMObject::buildConvertColor(uint64_t a1, llvm::Value *a2, llvm::Type *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  uint64_t v9 = *(void *)a2;
  if (*(llvm::Type **)a2 == a3) {
    return v8;
  }
  if (a5)
  {
    int v43 = a6;
    if (v9 == *(void *)(a1 + 328) || v9 == *(void *)(a1 + 336))
    {
      Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
      uint64_t v15 = 0;
      if (v9 == *(void *)(a1 + 328)) {
        uint64_t v16 = 8;
      }
      else {
        uint64_t v16 = 16;
      }
      do
      {
        uint64_t v17 = *(void *)(a1 + 400);
        long long v53 = *(_OWORD *)(a1 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v54, (llvm::IRBuilderBase *)(a1 + 40));
        int v55 = *(_DWORD *)(a1 + 136);
        __int16 v52 = 257;
        int v18 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 40), v8, v18, (const llvm::Twine *)v51);
        uint64_t v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 96))(v17, &v53, Element, v16, a4, 32);
        if (v54) {
          llvm::MetadataTracking::untrack();
        }
        __int16 v52 = 257;
        uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 40), InsertElement, v20, v21, (const llvm::Twine *)v51);
        ++v15;
      }
      while (v15 != 4);
    }
    else if (v9 == *(void *)(a1 + 312))
    {
      int v35 = *(llvm::Type **)(a1 + 320);
      __int16 v52 = 257;
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 40), a2, v35, (const llvm::Twine *)v51);
    }
    else
    {
      Insertuint64_t Element = a2;
    }
    if (*(llvm::Type **)(a1 + 328) == a3)
    {
      uint64_t v28 = 8;
    }
    else
    {
      if (*(llvm::Type **)(a1 + 336) != a3)
      {
        if (*(llvm::Type **)(a1 + 312) != a3) {
          return InsertElement;
        }
        unsigned int v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
        if (v36 <= 0x1D && ((1 << v36) & 0x200002C1) != 0 && (v43 & 0xFFFFFFFE) == 2)
        {
          uint64_t v39 = *(void *)(a1 + 400);
          long long v45 = *(_OWORD *)(a1 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v46, (llvm::IRBuilderBase *)(a1 + 40));
          int v47 = *(_DWORD *)(a1 + 136);
          Insertuint64_t Element = (llvm::Value *)AGCLLVMTargetLowerer::buildRTZF16Value(v39, (uint64_t)&v45, (uint64_t *)InsertElement, v43 == 3);
          if (v46) {
            llvm::MetadataTracking::untrack();
          }
        }
        uint64_t v40 = *(llvm::Type **)(a1 + 312);
        __int16 v52 = 257;
        return (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(a1 + 40), InsertElement, v40, (const llvm::Twine *)v51);
      }
      uint64_t v28 = 16;
    }
    uint64_t v8 = (llvm::Value *)llvm::UndefValue::get();
    for (uint64_t i = 0; i != 4; ++i)
    {
      uint64_t v30 = *(void *)(a1 + 400);
      long long v48 = *(_OWORD *)(a1 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v49, (llvm::IRBuilderBase *)(a1 + 40));
      int v50 = *(_DWORD *)(a1 + 136);
      __int16 v52 = 257;
      uint64_t v31 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v32 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 40), InsertElement, v31, (const llvm::Twine *)v51);
      long long v33 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v30 + 88))(v30, &v48, v32, v28, a4, 1);
      if (v49) {
        llvm::MetadataTracking::untrack();
      }
      __int16 v52 = 257;
      uint64_t v34 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v8 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 40), v8, v33, v34, (const llvm::Twine *)v51);
    }
    return v8;
  }
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
    int v14 = *(unsigned __int8 *)(**(void **)(v9 + 16) + 8);
  }
  else {
    int v14 = *(_DWORD *)(v9 + 8);
  }
  if (v14 == 13)
  {
    unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*(llvm::Type **)a2);
    unsigned int v23 = llvm::Type::getScalarSizeInBits(a3);
    if (ScalarSizeInBits <= v23)
    {
      uint64_t v25 = a1 + 40;
      __int16 v52 = 257;
      if (a4) {
        uint64_t v26 = 40;
      }
      else {
        uint64_t v26 = 39;
      }
      uint64_t v24 = (uint64_t)v8;
    }
    else
    {
      uint64_t v24 = AGCLLVMBuilder::clampToWidth((AGCLLVMBuilder *)(a1 + 32), (llvm::CmpInst **)v8, v23, a4);
      uint64_t v25 = a1 + 40;
      __int16 v52 = 257;
      uint64_t v26 = 38;
    }
    return (llvm::Value *)llvm::IRBuilderBase::CreateCast(v25, v26, v24, (uint64_t)a3, (uint64_t)v51);
  }
  printMessage((char **)&AGCPrinter, "Warning (Undefined behavior): integer drawbuffer format, but shader is writing floating point", (uint64_t)a3, a4, a5, a6, a7, a8, v42);
  return (llvm::Value *)llvm::UndefValue::get();
}

uint64_t AGCLLVMStatelessFragmentShader::buildPreEmitSwizzle(void *a1, llvm::Constant **a2, uint64_t a3, int a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v12 = llvm::ConstantInt::get();
    uint64_t v13 = llvm::ConstantInt::get();
    uint64_t v14 = llvm::ConstantInt::get();
    uint64_t v15 = llvm::ConstantInt::get();
    uint64_t NullValue = (llvm::Value *)llvm::Constant::getNullValue(*a2, v6);
    uint64_t v8 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v9 = (llvm::Value *)llvm::ConstantVector::get();
    v11[16] = 257;
    return llvm::IRBuilderBase::CreateShuffleVector(v8, (llvm::Value *)a2, NullValue, v9, (const llvm::Twine *)v11);
  }
  return (uint64_t)a2;
}

llvm::Value *AGCLLVMBuilder::fillUnwrittenChannels(AGCLLVMBuilder *this, llvm::Value *a2, unsigned int a3)
{
  Insertuint64_t Element = a2;
  uint64_t v6 = *(void *)a2;
  int v7 = *(llvm::Constant **)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    int v7 = **(llvm::Constant ***)(v6 + 16);
  }
  uint64_t NullValue = llvm::Constant::getNullValue(v7, a2);
  if (*((_DWORD *)v7 + 2) > 6u) {
    uint64_t v9 = llvm::ConstantInt::get();
  }
  else {
    uint64_t v9 = llvm::ConstantFP::get();
  }
  uint64_t v10 = (llvm::Value *)v9;
  uint64_t v11 = *(unsigned int *)(v6 + 32);
  if (v11)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (((a3 >> i) & 1) == 0)
      {
        if (i == 3) {
          uint64_t v13 = v10;
        }
        else {
          uint64_t v13 = (llvm::Value *)NullValue;
        }
        __int16 v17 = 257;
        uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), InsertElement, v13, v14, (const llvm::Twine *)v16);
      }
    }
  }
  return InsertElement;
}

uint64_t AGCLLVMObject::buildOutputFormatConversion(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = a2;
  if (a4 == 2)
  {
    uint64_t v12 = *(void *)(a1 + 232);
    __int16 v23 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 40, 49, a2, v12, (uint64_t)v22);
    uint64_t v14 = *(void *)(a1 + 400);
    long long v16 = *(_OWORD *)(a1 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v17, (llvm::IRBuilderBase *)(a1 + 40));
    int v18 = *(_DWORD *)(a1 + 136);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, void, void))(*(void *)v14
                                                                                                  + 112))(v14, &v16, 6, *(void *)(a1 + 224), Cast, 0, 0);
    if (v17) {
      llvm::MetadataTracking::untrack();
    }
  }
  else if (a4 == 1)
  {
    uint64_t v7 = a1 + 40;
    uint64_t v8 = *(void *)(a1 + 336);
    __int16 v23 = 257;
    uint64_t v9 = llvm::IRBuilderBase::CreateCast(a1 + 40, 38, a2, v8, (uint64_t)v22);
    uint64_t v10 = *(void *)(a1 + 400);
    long long v19 = *(_OWORD *)(a1 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v20, (llvm::IRBuilderBase *)(a1 + 40));
    int v21 = *(_DWORD *)(a1 + 136);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, void, void))(*(void *)v10 + 104))(v10, &v19, 6, *(void *)(a1 + 224), v9, 0, 0);
    if (v20) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v23 = 257;
    return llvm::IRBuilderBase::CreateCast(v7, 49, v11, a3, (uint64_t)v22);
  }
  return v4;
}

uint64_t AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromState@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X4>, int a5@<W5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (a5)
  {
    uint64_t v11 = result;
    if (*a3 - 20 >= 2)
    {
      __int16 v12 = a5;
      if (*a3 == 18) {
        __int16 v12 = 3;
      }
    }
    else
    {
      __int16 v12 = 7;
    }
    long long v23 = *(_OWORD *)a2;
    uint64_t v24 = *(void *)(a2 + 16);
    if (v24) {
      llvm::MetadataTracking::track();
    }
    int v25 = *(_DWORD *)(a2 + 24);
    AGCLLVMTargetLowerer::SetIP(v11, &v23);
    if (v24) {
      llvm::MetadataTracking::untrack();
    }
    v22[0] = 0;
    v22[1] = llvm::FixedVectorType::get();
    int v13 = *a3;
    LOWORD(v22[0]) = AGCLLVMGen3TargetLowerer::getUSCFormatFromState((AGCLLVMGen3TargetLowerer *)*a3, *((unsigned __int8 *)a3 + 16));
    WORD1(v22[0]) = v13;
    WORD2(v22[0]) = v12;
    HIWORD(v22[0]) = a3[1];
    uint64_t v14 = *((unsigned __int16 *)a3 + 4);
    uint64_t v15 = *((void *)a3 + 3);
    long long v16 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v17 = (llvm::Value *)*((void *)a3 + 4);
    __int16 v21 = 257;
    uint64_t Mul = llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(v11 + 8), v16, v17, (const llvm::Twine *)v20);
    HIBYTE(v19) = *((unsigned char *)a3 + 17);
    LOBYTE(v19) = a6 == 1;
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, __int16))(*(void *)v11 + 1608))(v11, v22, v14, v15, a4, Mul, 0, 0, 0, v19);
  }
  else
  {
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 24) = 0;
    *(void *)(a7 + 16) = 0;
  }
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::emulatedColorMask(AGCLLVMGen3TargetLowerer *this, int a2, unsigned int a3)
{
  if ((a2 - 18) >= 4) {
    return 15;
  }
  else {
    return a3;
  }
}

uint64_t AGCLLVMGen3TargetLowerer::buildReadOutputPartitionFromState(AGCLLVMBuilder *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  long long v23 = *(_OWORD *)a2;
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Value *)*((void *)a3 + 4);
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t Mul = llvm::IRBuilderBase::CreateMul((AGCLLVMBuilder *)((char *)a1 + 8), v8, v9, (const llvm::Twine *)v21);
  int v11 = *(_DWORD *)(a4 + 8);
  uint64_t v12 = a4;
  if ((v11 & 0xFE) == 0x12)
  {
    uint64_t v12 = **(void **)(a4 + 16);
    int v11 = *(_DWORD *)(v12 + 8);
  }
  if ((v11 & 0xFFFFF0FF) == 0xD) {
    uint64_t v12 = *((void *)a1 + 24);
  }
  if (*(_DWORD *)(a4 + 32) >= a3[1]) {
    unsigned int v13 = a3[1];
  }
  else {
    unsigned int v13 = *(_DWORD *)(a4 + 32);
  }
  if (v13 - 2 <= 2) {
    uint64_t v12 = llvm::FixedVectorType::get();
  }
  uint64_t v20 = v12;
  int v14 = *a3;
  v19[0] = AGCLLVMGen3TargetLowerer::getUSCFormatFromState((AGCLLVMGen3TargetLowerer *)*a3, *((unsigned __int8 *)a3 + 16));
  v19[1] = v14;
  _OWORD v19[2] = ~(unsigned __int16)(-1 << v13);
  void v19[3] = v13;
  uint64_t v15 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMBuilder *, _WORD *, void, void, uint64_t, uint64_t, void, void, _BYTE))(*(void *)a1 + 1600))(a1, v19, *((unsigned __int16 *)a3 + 4), *((void *)a3 + 3), v12, Mul, 0, 0, *((unsigned char *)a3 + 17));
  long long v16 = AGCLLVMBuilder::extendVector(a1, v15, *(_DWORD *)(a4 + 32));
  if ((*a3 & 0xFFFFFFFE) == 4)
  {
    uint64_t v17 = *((void *)a1 + 37);
    __int16 v22 = 257;
    return llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 38, (uint64_t)v16, v17, (uint64_t)v21);
  }
  return (uint64_t)v16;
}

uint64_t llvm::IRBuilderBase::CreateMul(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 9) + 88))(*((void *)this + 9));
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t AGCLLVMGen3TargetLowerer::getUSCFormatFromState(AGCLLVMGen3TargetLowerer *this, int a2)
{
  int v2 = this - 1;
  uint64_t result = 5;
  switch(v2)
  {
    case 0:
      uint64_t result = 10;
      break;
    case 1:
      return result;
    case 2:
      if (a2) {
        uint64_t result = 10;
      }
      else {
        uint64_t result = 4;
      }
      break;
    case 5:
      uint64_t result = 7;
      break;
    case 6:
      uint64_t result = 6;
      break;
    case 7:
    case 8:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 21:
      uint64_t result = 1;
      break;
    case 9:
    case 10:
    case 16:
      uint64_t result = 2;
      break;
    case 18:
      uint64_t result = 8;
      break;
    case 19:
      uint64_t result = 13;
      break;
    case 20:
      uint64_t result = 12;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void AGCLLVMGen3TargetLowerer::buildWriteOutputPartition(AGCLLVMBuilder *a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, llvm::Value *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, unsigned __int8 a12)
{
  __int16 v53 = a3;
  uint64_t v52 = a4;
  uint64_t v49 = a7;
  char v48 = a8;
  char v47 = a11;
  if (*(unsigned char *)(a6 + 16) == 16) {
    uint64_t v16 = a6;
  }
  else {
    uint64_t v16 = 0;
  }
  if (*(unsigned char *)(a4 + 16) == 16) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16) {
    BOOL v18 = v17 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  int v19 = !v18;
  if (v18)
  {
    unsigned int v23 = 0;
    unsigned int v21 = 0;
  }
  else
  {
    uint64_t v20 = (void *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u) {
      uint64_t v20 = (void *)*v20;
    }
    unsigned int v21 = *(_DWORD *)v20;
    __int16 v22 = (void *)(v17 + 24);
    if (*(_DWORD *)(v17 + 32) >= 0x41u) {
      __int16 v22 = (void *)*v22;
    }
    unsigned int v23 = *(_DWORD *)v22;
  }
  int v24 = a12;
  uint64_t v25 = *((void *)a1 + 24);
  LOWORD(v38) = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 49, a6, v25, (uint64_t)v37);
  uint64_t v26 = AGCLLVMBuilder::extendVector(a1, a5, 4);
  uint64_t v27 = (uint64_t)v26;
  uint64_t v51 = (uint64_t)v26;
  unsigned int v28 = *(_DWORD *)(*(void *)v26 + 8);
  if ((v28 & 0xFE) == 0x12) {
    unsigned int v28 = *(_DWORD *)(**(void **)(*(void *)v26 + 16) + 8);
  }
  if (v28 == 13)
  {
    unsigned int v29 = v28 >> 8;
    uint64_t v30 = *(void *)(a2 + 8);
    unsigned int v31 = *(_DWORD *)(v30 + 8);
    if ((v31 & 0xFE) == 0x12) {
      unsigned int v31 = *(_DWORD *)(**(void **)(v30 + 16) + 8);
    }
    if (v29 >= v31 >> 8)
    {
      unsigned int v34 = v31 >> 8;
      if (v29 <= v34) {
        goto LABEL_30;
      }
      uint64_t v27 = AGCLLVMBuilder::subrangeVector(a1, v26, 0, 4 / (v29 / v34), 1);
      uint64_t v30 = *(void *)(a2 + 8);
      LOWORD(v38) = 257;
      uint64_t v32 = (uint64_t)a1 + 8;
      uint64_t v33 = 49;
    }
    else
    {
      LOWORD(v38) = 257;
      uint64_t v32 = (uint64_t)a1 + 8;
      uint64_t v33 = 39;
    }
    uint64_t v51 = llvm::IRBuilderBase::CreateCast(v32, v33, v27, v30, (uint64_t)v37);
  }
LABEL_30:
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  LOWORD(v38) = 257;
  uint64_t v46 = llvm::IRBuilderBase::CreateCall((uint64_t)a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v37);
  v45[0] = a1;
  v45[1] = a2;
  v45[2] = &v47;
  v45[3] = &v51;
  v45[4] = &v49;
  v45[5] = &v46;
  v45[6] = &v48;
  v45[7] = &a10;
  v45[8] = &Cast;
  v37[0] = a1;
  v37[1] = a2;
  v37[2] = &v47;
  v37[3] = &v51;
  uint64_t v38 = &v49;
  uint64_t v39 = &v46;
  uint64_t v40 = &v48;
  uint64_t v41 = &v53;
  p_uint64_t Cast = &Cast;
  int v43 = &v52;
  uint64_t v44 = &a10;
  if (((v19 | v24) & 1) == 0) {
    operator new();
  }
  if (v21 < v23) {
    char v36 = v19;
  }
  else {
    char v36 = 0;
  }
  if ((v36 & 1) != 0 || v24) {
    AGCLLVMGen3TargetLowerer::buildWriteOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL,llvm::Value *,BOOL,BOOL)::$_0::operator()(v45);
  }
  else {
    AGCLLVMGen3TargetLowerer::buildWriteOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL,llvm::Value *,BOOL,BOOL)::$_1::operator()(v37);
  }
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(_DWORD *)(a9 + 24) = 0;
  *(void *)(a9 + 16) = 0;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildReadOutputPartition(AGCLLVMGen3TargetLowerer *a1, unsigned __int16 *a2, __int16 a3, uint64_t a4, llvm::Type ***a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  __int16 v46 = a3;
  uint64_t v44 = a6;
  uint64_t v45 = a4;
  uint64_t v42 = a8;
  uint64_t v43 = a7;
  if (*(unsigned char *)(a6 + 16) == 16) {
    uint64_t v13 = a6;
  }
  else {
    uint64_t v13 = 0;
  }
  if (*(unsigned char *)(a4 + 16) == 16) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v13) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  int v16 = !v15;
  if (v15)
  {
    unsigned int v19 = 0;
    unsigned int v27 = 0;
  }
  else
  {
    uint64_t v17 = (void *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u) {
      uint64_t v17 = (void *)*v17;
    }
    unsigned int v27 = *(_DWORD *)v17;
    BOOL v18 = (void *)(v14 + 24);
    if (*(_DWORD *)(v14 + 32) >= 0x41u) {
      BOOL v18 = (void *)*v18;
    }
    unsigned int v19 = *(_DWORD *)v18;
  }
  int v41 = (*(uint64_t (**)(AGCLLVMGen3TargetLowerer *, void, void, void, void, void))(*(void *)a1 + 1592))(a1, *a2, *((void *)a2 + 1), 0, 0, 0);
  uint64_t v20 = *((void *)a2 + 1);
  uint64_t v40 = v20;
  if ((_BYTE)v41)
  {
    uint64_t v21 = *((void *)a1 + 19);
    if ((*(_DWORD *)(v20 + 8) & 0xFE) == 0x12) {
      uint64_t v21 = llvm::FixedVectorType::get();
    }
    uint64_t v40 = v21;
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  LOWORD(v30) = 257;
  uint64_t v39 = llvm::IRBuilderBase::CreateCall((uint64_t)a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v29);
  BOOL v38 = a7 != 0;
  uint64_t v23 = *((void *)a1 + 24);
  LOWORD(v30) = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 49, a6, v23, (uint64_t)v29);
  v36[0] = a1;
  v36[1] = &v40;
  void v36[2] = a2;
  void v36[3] = &v41;
  v36[4] = &v43;
  v36[5] = &v39;
  void v36[6] = &v38;
  v36[7] = &v42;
  v36[8] = &Cast;
  v29[0] = a1;
  v29[1] = &v43;
  v29[2] = &v39;
  v29[3] = &v38;
  uint64_t v30 = &v46;
  unsigned int v31 = a2;
  uint64_t v32 = &v44;
  uint64_t v33 = &v45;
  unsigned int v34 = &v42;
  p_uint64_t Cast = &Cast;
  if (((v16 | a9) & 1) == 0) {
    operator new();
  }
  llvm::UndefValue::get();
  if (v27 < v19) {
    char v24 = v16;
  }
  else {
    char v24 = 0;
  }
  if ((v24 & 1) != 0 || a9) {
    uint64_t v25 = AGCLLVMGen3TargetLowerer::buildReadOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Type *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_0::operator()((uint64_t)v36);
  }
  else {
    uint64_t v25 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildReadOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Type *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_1::operator()((uint64_t)v29);
  }
  return AGCLLVMGen3TargetLowerer::reconcileLLVMReadIntrinsicResultWithIR(a1, a5, *((llvm::Type **)a2 + 1), v25);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3, int a4, char a5)
{
  int v5 = *(_DWORD *)(a3 + 8) & 0xFE;
  if (*(unsigned char *)(a1 + 1770))
  {
    uint64_t v6 = a3;
    if (v5 == 18) {
      uint64_t v6 = **(void **)(a3 + 16);
    }
    if (a2 == 1) {
      int v7 = 3;
    }
    else {
      int v7 = a2;
    }
    if (a2 == 12) {
      int v8 = 16;
    }
    else {
      int v8 = v7;
    }
    if (a2 == 13) {
      int v9 = 15;
    }
    else {
      int v9 = v8;
    }
    if (a5) {
      int v9 = a2;
    }
    if (v6 == *(void *)(a1 + 168) && a4 != 0) {
      a2 = v9;
    }
  }
  if (v5 == 18) {
    a3 = **(void **)(a3 + 16);
  }
  BOOL v12 = a2 == 1 && a3 == *(void *)(a1 + 168);
  return v12 | (a2 << 16);
}

llvm::Value *AGCLLVMGen3TargetLowerer::reconcileLLVMReadIntrinsicResultWithIR(AGCLLVMGen3TargetLowerer *this, llvm::Type ***a2, llvm::Type *a3, llvm::Value *a4)
{
  uint64_t v6 = (llvm::Type *)a2;
  int v7 = *((unsigned __int8 *)a2 + 8);
  if (v7 == 15)
  {
    int v8 = a2[2];
    uint64_t v6 = *v8;
    int v7 = *((unsigned __int8 *)*v8 + 8);
  }
  if ((v7 & 0xFE) == 0x12) {
    unsigned int v9 = *((_DWORD *)v6 + 8);
  }
  else {
    unsigned int v9 = 1;
  }
  int v10 = *((_DWORD *)a3 + 2);
  if ((v10 & 0xFE) == 0x12) {
    unsigned int v11 = *((_DWORD *)a3 + 8);
  }
  else {
    unsigned int v11 = 1;
  }
  unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v6);
  unsigned int v13 = llvm::Type::getScalarSizeInBits(a3);
  if ((v7 & 0xFE) == 0x12) {
    int v7 = *(unsigned __int8 *)(**((void **)v6 + 2) + 8);
  }
  if (v7 != 13
    || ((v10 & 0xFE) != 0x12 ? (int v14 = v10) : (int v14 = *(unsigned __int8 *)(**((void **)a3 + 2) + 8)),
        v14 != 13 || v13 * v11 != ScalarSizeInBits * v9))
  {
    if (v9 >= v11)
    {
      if (v11 >= v9)
      {
        BOOL v15 = this;
LABEL_23:
        if (ScalarSizeInBits < v13)
        {
          __int16 v22 = 257;
          return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v15 + 8, 38, (uint64_t)a4, (uint64_t)v6, (uint64_t)v21);
        }
        return a4;
      }
      BOOL v15 = this;
      unsigned int v16 = v13;
      BOOL v18 = AGCLLVMBuilder::extendVector(this, a4, v9);
      uint64_t v17 = AGCLLVMBuilder::fillUnwrittenChannels(this, v18, ~(-1 << v11));
    }
    else
    {
      BOOL v15 = this;
      unsigned int v16 = v13;
      uint64_t v17 = (llvm::Value *)AGCLLVMBuilder::subrangeVector(this, a4, 0, v9, 1);
    }
    a4 = v17;
    unsigned int v13 = v16;
    goto LABEL_23;
  }
  return a4;
}

BOOL flatbuffers::Table::VerifyOffset(flatbuffers::Table *this, const flatbuffers::Verifier *a2)
{
  int v2 = (unsigned __int16 *)((char *)this - *(int *)this);
  return *v2 < 5u
      || (uint64_t v3 = v2[2]) == 0
      || flatbuffers::Verifier::VerifyOffset(a2, (unint64_t)this + v3 - *(void *)a2) != 0;
}

uint64_t flatbuffers::Verifier::VerifyOffset(flatbuffers::Verifier *this, unint64_t a2)
{
  if ((a2 & 3) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  unint64_t v2 = *((void *)this + 1);
  if (v2 < 5 || v2 - 4 < a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)this + a2);
  if ((int)v4 < 1) {
    return 0;
  }
  if (v2 - 1 >= v4 + a2) {
    return v4;
  }
  return 0;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::createShaderCoreBindings@<X0>(llvm::ArrayType **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v8 = (llvm::ArrayType *)(*((uint64_t (**)(llvm::ArrayType **))*a1 + 236))(a1);
  uint64_t v9 = llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(v8, (llvm::Type *)0x1000);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  uint64_t v10 = llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(a1[23], (llvm::Type *)0x40000);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  uint64_t v11 = llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(a1[23], (llvm::Type *)0x40000);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  uint64_t v12 = llvm::User::operator new((llvm::User *)0x58);
  unsigned int v13 = (llvm::ArrayType *)llvm::ArrayType::get(a1[23], (llvm::Type *)0x200);
  llvm::ArrayType::get(v13, (llvm::Type *)0x30);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  *a4 = v12;
  a4[1] = v9;
  a4[3] = v10;
  a4[5] = v11;
  uint64_t result = (*((uint64_t (**)(llvm::ArrayType **, uint64_t))*a1 + 162))(a1, a2);
  a4[2] = result;
  a4[4] = a3;
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::createDriverParameterShaderCoreBinding(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 192);
  llvm::StructType::create();
  uint64_t v1 = llvm::User::operator new((llvm::User *)0x58);
  v4[0] = (uint64_t)"agc.ria.driver_parameters";
  __int16 v5 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  uint64_t inserted = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
  if (!llvm::NamedMDNode::getNumOperands(inserted))
  {
    v4[0] = 0x1000000;
    RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(v4, 1);
    llvm::ConstantInt::get();
    uint64_t v6 = llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  return v1;
}

uint64_t RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(_DWORD *a1, int a2)
{
  int SectionEnd = 0;
  int v4 = 0;
  switch(a2)
  {
    case 1:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 7);
      int v4 = 24576;
      break;
    case 2:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 1);
      int v4 = 0x2000;
      break;
    case 3:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 2);
      int v4 = 0x40000;
      break;
    case 4:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 3);
      int v4 = 0x10000;
      break;
    case 5:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 4);
      int v4 = 8 * (unsigned __int16)*a1 * ((*a1 >> 19) & 0x1FE0);
      break;
    case 6:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 8);
      int v4 = 0;
      break;
    case 8:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 5);
      int v4 = ((*(void *)a1 >> 19) & 0x1FE0) * HIWORD(*(void *)a1);
      break;
    default:
      return (v4 + SectionEnd);
  }
  return (v4 + SectionEnd);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getRayCoreElementType()
{
  return llvm::StructType::create();
}

uint64_t AGCLLVMAirBuiltins::buildWidth(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  int v4 = (char *)this + 8;
  __int16 v5 = AGCLLVMAirBuiltins::buildDfdx(this, a2);
  Fabs = AGCLLVMTargetBuilder::CreateFabs(this, v5);
  uint64_t v7 = (llvm::Value *)AGCLLVMAirBuiltins::buildDfdy(this, a2);
  uint64_t v8 = AGCLLVMTargetBuilder::CreateFabs(this, v7);
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateFAdd((uint64_t)v4, (uint64_t)Fabs, (uint64_t)v8, (uint64_t)v10);
}

llvm::Value *AGCLLVMTargetBuilder::CreateFabs(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4 = *((void *)this + 46);
  long long v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v8, (AGCLLVMTargetBuilder *)((char *)this + 8));
  int v9 = *((_DWORD *)this + 26);
  __int16 v5 = AGCLLVMTargetLowerer::CreateFabs(v4, &v7, (uint64_t *)a2);
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return v5;
}

llvm::Value *AGCLLVMTargetLowerer::CreateFabs(uint64_t a1, long long *a2, uint64_t *a3)
{
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  if (v9) {
    llvm::MetadataTracking::track();
  }
  int v10 = *((_DWORD *)a2 + 6);
  uint64_t v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(a1, (uint64_t)&v8, a3, "llvm.fabs");
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

uint64_t AGCLLVMAirBuiltins::buildDfdy(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v21 = a2;
  uint64_t v4 = *(void *)(**((void **)this + 94) - 24) + *((void *)this + 94);
  uint64_t v5 = v4 + 40;
  int v6 = *(_DWORD *)(v4 + 136);
  long long v7 = (char *)this + 8;
  long long v18 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v19, (AGCLLVMAirBuiltins *)((char *)this + 8));
  int v20 = *((_DWORD *)this + 26);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v18, v5);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  *(_DWORD *)(*(void *)(**((void **)this + 94) - 24) + *((void *)this + 94) + 136) = v6;
  uint64_t v8 = *(void *)a2;
  uint64_t v10 = 1544;
  if (v8 == *((void *)this + 19)) {
    uint64_t v10 = 1560;
  }
  uint64_t v9 = *((void *)this + 46);
  uint64_t v11 = *(void *)(v9 + v10);
  if (v11) {
    size_t v12 = strlen(*(const char **)(v9 + v10));
  }
  else {
    size_t v12 = 0;
  }
  uint64_t v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, v11, v12, v8, v8);
  __int16 v17 = 257;
  int v14 = llvm::IRBuilderBase::CreateCall((uint64_t)v7, *(void *)(v13 + 24), v13, (uint64_t)&v21, 1, (uint64_t)v16);
  return (*(uint64_t (**)(void, llvm::Value *))(**((void **)this + 94) + 32))(*((void *)this + 94), v14);
}

uint64_t AGCLLVMAGPFragmentShader::adjustDfDyForInversion(uint64_t a1, uint64_t a2)
{
  return a2;
}

llvm::Value *AGCLLVMAirBuiltins::buildDfdx(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  int v20 = a2;
  uint64_t v4 = *(void *)(**((void **)this + 94) - 24) + *((void *)this + 94);
  uint64_t v5 = v4 + 40;
  int v6 = *(_DWORD *)(v4 + 136);
  long long v7 = (char *)this + 8;
  long long v17 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v18, (AGCLLVMAirBuiltins *)((char *)this + 8));
  int v19 = *((_DWORD *)this + 26);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v17, v5);
  if (v18) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(void *)a2;
  uint64_t v10 = 1536;
  if (v8 == *((void *)this + 19)) {
    uint64_t v10 = 1552;
  }
  uint64_t v9 = *((void *)this + 46);
  uint64_t v11 = *(void *)(v9 + v10);
  if (v11) {
    size_t v12 = strlen(*(const char **)(v9 + v10));
  }
  else {
    size_t v12 = 0;
  }
  uint64_t v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, v11, v12, v8, v8);
  __int16 v16 = 257;
  uint64_t result = llvm::IRBuilderBase::CreateCall((uint64_t)v7, *(void *)(v13 + 24), v13, (uint64_t)&v20, 1, (uint64_t)v15);
  *(_DWORD *)(*(void *)(**((void **)this + 94) - 24) + *((void *)this + 94) + 136) = v6;
  return result;
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildReadWriteImage(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  int v6 = (llvm::Value *)*((void *)a2 + 17);
  if ((*(_DWORD *)(*(void *)v6 + 8) & 0xFE) == 0x12) {
    int v7 = *(unsigned __int8 *)(**(void **)(*(void *)v6 + 16) + 8);
  }
  else {
    int v7 = *(_DWORD *)(*(void *)v6 + 8);
  }
  uint64_t v8 = *((void *)a2 + 25);
  int v126 = a2[40];
  size_t v139 = v141;
  uint64_t v140 = 0x1000000000;
  Insertuint64_t Element = v6;
  uint64_t v9 = (llvm::Value *)*((void *)a2 + 18);
  uint64_t v127 = *((void *)a2 + 19);
  size_t v124 = (llvm::Value *)*((void *)a2 + 23);
  BOOL v125 = (llvm::Value *)*((void *)a2 + 22);
  int v10 = a2[1];
  if (*a2 != 3)
  {
    uint64_t v11 = llvm::ConstantInt::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v11);
    uint64_t v12 = llvm::ConstantInt::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v12);
  }
  unint64_t v123 = v9;
  uint64_t v13 = (llvm::ConstantPointerNull *)llvm::PointerType::get();
  if (*v4 == 3) {
    int v14 = (uint64_t *)(v4 + 14);
  }
  else {
    int v14 = (uint64_t *)(v4 + 12);
  }
  uint64_t v15 = *v14;
  __int16 v147 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v15, (uint64_t)v13, (uint64_t)&v144);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, Cast);
  if (*v4 == 3)
  {
    uint64_t v18 = llvm::ConstantPointerNull::get(v13, v17);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1780) || (uint64_t v19 = *((void *)v4 + 5)) == 0) {
      uint64_t v19 = *((void *)v4 + 11);
    }
    __int16 v147 = 257;
    uint64_t v18 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v19, (uint64_t)v13, (uint64_t)&v144);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v18);
  uint64_t v20 = *((void *)v4 + 4);
  if (!v20)
  {
    uint64_t v21 = llvm::ConstantInt::get();
    uint64_t v22 = llvm::PointerType::get();
    __int16 v147 = 257;
    uint64_t v20 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v21, v22, (uint64_t)&v144);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v20);
  uint64_t v23 = InsertElement;
  if (v10 == 2)
  {
    if (v7 == 13) {
      char v24 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, InsertElement, 0, 2, 1);
    }
    else {
      char v24 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, InsertElement, 4);
    }
    uint64_t v23 = v24;
    Insertuint64_t Element = v24;
  }
  uint64_t v25 = *(llvm::Type **)v23;
  if ((*(_DWORD *)(*(void *)v23 + 8) & 0xFE) == 0x12) {
    uint64_t v25 = (llvm::Type *)**((void **)v25 + 2);
  }
  if (!v4[1] && *v4 == 3)
  {
    uint64_t v26 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, v23, 2);
    int v27 = v7;
    uint64_t v28 = v8;
    uint64_t v29 = llvm::ConstantInt::get();
    __int16 v147 = 257;
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    unsigned int v31 = (llvm::Value *)v29;
    uint64_t v8 = v28;
    int v7 = v27;
    Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v26, v31, v30, (const llvm::Twine *)&v144);
  }
  uint64_t v32 = 0;
  BOOL v33 = v10 != 2;
  uint64_t v130 = v4;
  if (*(unsigned char *)(a1 + 2216) && v10 == 2)
  {
    uint64_t v34 = v4[1];
    int v35 = v7;
    if (v34 > 3) {
      unsigned int v36 = 0;
    }
    else {
      unsigned int v36 = dword_1CADD68E0[v34];
    }
    uint64_t v37 = v8;
    if (v126 == 2)
    {
      uint64_t v38 = *(void *)(a1 + 224);
      v142[0] = *(void *)(a1 + 288);
      v142[1] = v38;
      v142[2] = v38;
      v142[3] = v38;
      llvm::FunctionType::get();
      if (*(void *)(a1 + 2232)) {
        strlen(*(const char **)(a1 + 2232));
      }
      llvm::Module::getOrInsertFunction();
      uint64_t v40 = v39;
      unint64_t v144 = v146;
      uint64_t v145 = 0x400000000;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v144, (uint64_t)InsertElement);
      AGCLLVMTargetLowerer::remapGradients(a1, (uint64_t)&v144, v125, v124, v36);
      __int16 v138 = 257;
      int v41 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v40 + 24), v40, (uint64_t)v144, v145, (uint64_t)v137);
      if (v144 != v146) {
        free(v144);
      }
    }
    else
    {
      llvm::FunctionType::get();
      if (*(void *)(a1 + 2224)) {
        strlen(*(const char **)(a1 + 2224));
      }
      llvm::Module::getOrInsertFunction();
      __int16 v147 = 257;
      int v41 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v42 + 24), v42, (uint64_t)&InsertElement, 1, (uint64_t)&v144);
    }
    uint64_t v8 = v37;
    Insertuint64_t Element = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, v41, 0, 2, 1);
    __int16 v147 = 257;
    uint64_t v43 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v41, v43, (const llvm::Twine *)&v144);
    uint64_t v45 = *(void *)(a1 + 200);
    __int16 v138 = 257;
    uint64_t v46 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, Element, v45, (uint64_t)v137);
    uint64_t v47 = *(void *)(a1 + 192);
    __int16 v143 = 257;
    uint64_t v32 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v46, v47, (uint64_t)v142);
    int v7 = v35;
    if (v126 == 2)
    {
      BOOL v125 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, v41, 3u, 2, 1);
      size_t v124 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, v41, 5u, 2, 1);
    }
    BOOL v33 = 0;
  }
  if (v7 == 13 && v10 == 2) {
    uint64_t v32 = (uint64_t)AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, *((llvm::Value **)v4 + 29), *(llvm::Type **)(a1 + 192));
  }
  if (*((unsigned char *)v4 + 23) && *v4 != 3)
  {
    if (v4[1] < 2)
    {
      if (v7 == 13) {
        goto LABEL_56;
      }
LABEL_55:
      (*(void (**)(uint64_t, void, llvm::Value **, BOOL))(*(void *)a1 + 1512))(a1, *((void *)v4 + 6), &InsertElement, v10 == 2);
      goto LABEL_56;
    }
    char v48 = v7 == 13 || v33;
    if ((v48 & 1) == 0) {
      goto LABEL_55;
    }
  }
LABEL_56:
  if (v25 == *(llvm::Type **)(a1 + 192))
  {
    uint64_t v49 = InsertElement;
    if (!*(unsigned char *)(a1 + 2240))
    {
      uint64_t v49 = AGCLLVMBuilder::extendFromSmall((llvm::Type **)a1, InsertElement, v25, 0);
      Insertuint64_t Element = v49;
    }
  }
  else
  {
    uint64_t v49 = InsertElement;
  }
  if (v7 != 13) {
    uint64_t v49 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, v49, 1);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, (uint64_t)v49);
  if (v32) {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v32);
  }
  if (v127)
  {
    FPToUI = (llvm::Value *)*((void *)v4 + 19);
    if (*(void *)FPToUI == *(void *)(a1 + 200))
    {
      if (*((unsigned char *)FPToUI + 16) == 84)
      {
        uint64_t v51 = *((void *)FPToUI - 4);
        if (v51)
        {
          if (!*(unsigned char *)(v51 + 16) && *(void *)(v51 + 24) == *((void *)FPToUI + 9))
          {
            uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v51);
            if (v53 >= 0x13)
            {
              BOOL v54 = *Name == 0x766E6F632E726961 && Name[1] == 0x33692E752E747265;
              if (v54 && *(void *)((char *)Name + 11) == 0x662E3233692E752ELL)
              {
                long long v133 = *(_OWORD *)(a1 + 56);
                llvm::IRBuilderBase::getCurrentDebugLocation(&v134, (llvm::IRBuilderBase *)(a1 + 8));
                int v135 = *(_DWORD *)(a1 + 104);
                uint64_t v56 = (llvm::Value *)AGCLLVMTargetLowerer::buildBiasF2IVarying(a1, (uint64_t)&v133, *((llvm **)FPToUI - 4 * (*((_DWORD *)FPToUI + 5) & 0x7FFFFFF)));
                if (v134) {
                  llvm::MetadataTracking::untrack();
                }
                int v57 = *(llvm::Type **)(a1 + 192);
                __int16 v147 = 257;
                FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 8), v56, v57, (const llvm::Twine *)&v144);
              }
            }
          }
        }
      }
      if (FPToUI == *((llvm::Value **)v4 + 19))
      {
        uint64_t v58 = llvm::ConstantInt::get();
        long long v59 = (llvm::CmpInst **)*((void *)v4 + 19);
        __int16 v147 = 257;
        llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 37, v59, v58, (uint64_t)&v144);
        __int16 v147 = 257;
        uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
        FPToUI = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, Select, *(llvm::Type **)(a1 + 192));
      }
    }
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, (uint64_t)FPToUI);
  }
  if (v8) {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, *((void *)v4 + 25));
  }
  uint64_t v61 = *((void *)v4 + 27);
  if (v61)
  {
    uint64_t v62 = *(void *)(a1 + 192);
    __int16 v147 = 257;
    uint64_t v63 = a1 + 8;
LABEL_89:
    uint64_t v64 = llvm::IRBuilderBase::CreateCast(v63, 38, v61, v62, (uint64_t)&v144);
LABEL_90:
    uint64_t v65 = v64;
LABEL_91:
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v65);
    goto LABEL_92;
  }
  int v82 = v4[40];
  switch(v82)
  {
    case 0:
      uint64_t v83 = (llvm::Value *)*((void *)v4 + 21);
      uint64_t v84 = *(llvm::Type **)(a1 + 152);
      std::string v85 = (llvm::Type **)a1;
      goto LABEL_137;
    case 1:
      std::string::size_type v86 = (llvm::Value *)*((void *)v4 + 21);
      if (v7 == 13)
      {
        std::string::size_type v87 = *(llvm::Type **)(a1 + 192);
        if (*(unsigned char *)(*(void *)v86 + 8) != 13)
        {
          __int16 v147 = 257;
          uint64_t v64 = llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 8), v86, v87, (const llvm::Twine *)&v144);
          goto LABEL_90;
        }
        __int16 v147 = 257;
        uint64_t v63 = a1 + 8;
        uint64_t v61 = (uint64_t)v86;
        uint64_t v62 = (uint64_t)v87;
        goto LABEL_89;
      }
      uint64_t v84 = *(llvm::Type **)(a1 + 152);
      std::string v85 = (llvm::Type **)a1;
      uint64_t v83 = (llvm::Value *)*((void *)v4 + 21);
LABEL_137:
      uint64_t v64 = (uint64_t)AGCLLVMBuilder::truncateToSmall(v85, v83, v84);
      goto LABEL_90;
    case 2:
      if (*(unsigned char *)(a1 + 2216) && v10 == 2)
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, (uint64_t)v125);
        uint64_t v65 = (uint64_t)v124;
        goto LABEL_91;
      }
      uint64_t v121 = v4[1];
      if (v121 > 3) {
        unsigned int v122 = 0;
      }
      else {
        unsigned int v122 = dword_1CADD68E0[v121];
      }
      AGCLLVMTargetLowerer::remapGradients(a1, (uint64_t)&v139, v125, v124, v122);
      break;
  }
LABEL_92:
  if (*((void *)v4 + 18))
  {
    uint64_t v66 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v67 = v4[1];
    if (v67 <= 3)
    {
      uint64_t v68 = 0;
      uint64_t v69 = dword_1CADD68E0[v67];
      do
      {
        __int16 v147 = 257;
        unsigned int v70 = (llvm::Value *)llvm::ConstantInt::get();
        std::string v71 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v123, v70, (const llvm::Twine *)&v144);
        __int16 v147 = 257;
        std::string v72 = (llvm::Value *)llvm::ConstantInt::get();
        Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v71, v72, (const llvm::Twine *)&v144);
        __int16 v147 = 257;
        std::string v74 = (llvm::Value *)llvm::ConstantInt::get();
        std::string v75 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), Shl, v74, (const llvm::Twine *)&v144);
        __int16 v147 = 257;
        uint64_t v66 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v66, v75, (const llvm::Twine *)&v144);
        ++v68;
      }
      while (v69 != v68);
    }
    uint64_t v76 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, v66, *(llvm::Type **)(a1 + 192));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, (uint64_t)v76);
  }
  int v77 = *v4;
  if (*v4 == 4)
  {
    uint64_t v78 = llvm::ConstantInt::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v78);
    int v77 = *v4;
  }
  uint64_t v79 = a3;
  if (v77 != 3)
  {
    int v80 = (unsigned __int8 *)*((void *)v4 + 24);
    if (v80)
    {
      if (v80[16] <= 0x14u)
      {
        if (llvm::Constant::isZeroValue(*((llvm::Constant **)v4 + 24))) {
          goto LABEL_103;
        }
        int v80 = (unsigned __int8 *)*((void *)v4 + 24);
      }
      uint64_t v81 = (uint64_t)AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, (llvm::Value *)v80, *(llvm::Type **)(a1 + 152));
      goto LABEL_116;
    }
LABEL_103:
    uint64_t v81 = llvm::ConstantFP::get();
LABEL_116:
    uint64_t v79 = v81;
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v139, v79);
  __int16 v147 = 257;
  uint64_t v88 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(a4 + 24), a4, (uint64_t)v139, v140, (uint64_t)&v144);
  if (*((unsigned char *)v4 + 256))
  {
    llvm::Attribute::get();
    llvm::Value::getContext(v88);
    *((void *)v88 + 8) = llvm::AttributeList::addAttributeAtIndex();
  }
  if (*v4 != 3)
  {
    v137[0] = 0;
    __int16 v147 = 257;
    Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v88, (uint64_t)v137, 1, (uint64_t)&v144);
    if (v4[2] == 6)
    {
      uint64_t v90 = (llvm::Value *)llvm::UndefValue::get();
      __int16 v147 = 257;
      int v91 = (llvm::Value *)llvm::ConstantInt::get();
      int v92 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), Value, v91, (const llvm::Twine *)&v144);
      __int16 v138 = 257;
      std::string::size_type v93 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v94 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v90, v92, v93, (const llvm::Twine *)v137);
      __int16 v147 = 257;
      std::string::size_type v95 = (llvm::Value *)llvm::ConstantInt::get();
      std::string::size_type v96 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), Value, v95, (const llvm::Twine *)&v144);
      __int16 v138 = 257;
      uint64_t v97 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v98 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v94, v96, v97, (const llvm::Twine *)v137);
      uint64_t v99 = *(void *)(a1 + 208);
      __int16 v147 = 257;
      int v100 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v98, v99, (uint64_t)&v144);
      llvm::FixedVectorType::get();
      int v101 = (llvm::Value *)llvm::UndefValue::get();
      __int16 v147 = 257;
      int v102 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v103 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v101, v100, v102, (const llvm::Twine *)&v144);
      std::string v104 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v147 = 257;
      std::string v105 = (llvm::Value *)llvm::ConstantInt::get();
      std::string v106 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v103, v104, v105, (const llvm::Twine *)&v144);
      __int16 v147 = 257;
      std::string v107 = (llvm::Value *)llvm::ConstantInt::get();
      std::string v108 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v106, v104, v107, (const llvm::Twine *)&v144);
      uint64_t v109 = llvm::ConstantInt::get();
      __int16 v147 = 257;
      char v110 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v111 = (llvm::Value *)v109;
      uint64_t v4 = v130;
      uint64_t v112 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v108, v111, v110, (const llvm::Twine *)&v144);
    }
    else
    {
      if (!*((unsigned char *)v4 + 22)) {
        goto LABEL_125;
      }
      uint64_t v112 = (**(uint64_t (***)(uint64_t, llvm::Value *))a1)(a1, Value);
    }
    Value = (llvm::Value *)v112;
LABEL_125:
    if (*((unsigned char *)v4 + 21) && (*(_DWORD *)(*(void *)Value + 8) & 0xFE) == 0x12)
    {
      __int16 v147 = 257;
      BOOL v113 = (llvm::Value *)llvm::ConstantInt::get();
      Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), Value, v113, (const llvm::Twine *)&v144);
    }
    if (*((unsigned char *)v4 + 24))
    {
      uint64_t v114 = *(void *)(a1 + 184);
      unint64_t v144 = *(unsigned char **)Value;
      uint64_t v145 = v114;
      llvm::StructType::get();
      uint64_t v115 = llvm::UndefValue::get();
      v137[0] = 0;
      __int16 v147 = 257;
      uint64_t InsertValue = llvm::IRBuilderBase::CreateInsertValue(a1 + 8, v115, (uint64_t)Value, (uint64_t)v137, 1, (uint64_t)&v144);
      int v132 = 1;
      __int16 v147 = 257;
      uint64_t v117 = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v88, (uint64_t)&v132, 1, (uint64_t)&v144);
      uint64_t v118 = *(void *)(a1 + 184);
      __int16 v138 = 257;
      uint64_t v119 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v117, v118, (uint64_t)v137);
      int v131 = 1;
      __int16 v143 = 257;
      uint64_t v88 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertValue(a1 + 8, InsertValue, v119, (uint64_t)&v131, 1, (uint64_t)v142);
    }
    else
    {
      uint64_t v88 = Value;
    }
  }
  if (v139 != v141) {
    free(v139);
  }
  return v88;
}

uint64_t llvm::IRBuilderBase::CreateExtractValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 344))(*(void *)(a1 + 72), a2, a3, a4);
    if (v8) {
      BOOL v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v8, a5);
    }
  }
  else
  {
    uint64_t v8 = llvm::User::operator new((llvm::User *)0x60);
    llvm::ExtractValueInst::getIndexedType();
    llvm::Instruction::Instruction();
    if (*(void *)(v8 - 32))
    {
      **(void **)(v8 - 16) = *(void *)(v8 - 24);
      uint64_t v10 = *(void *)(v8 - 24);
      if (v10) {
        *(void *)(v10 + 16) = *(void *)(v8 - 16);
      }
    }
    *(void *)(v8 - 32) = a2;
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v12 = (void *)(a2 + 8);
    uint64_t v11 = v13;
    *(void *)(v8 - 24) = v13;
    if (v13) {
      *(void *)(v11 + 16) = v8 - 24;
    }
    *(void *)(v8 - 16) = v12;
    *uint64_t v12 = v8 - 32;
    *(void *)(v8 + 64) = v8 + 80;
    *(void *)(v8 + 72) = 0x400000000;
    llvm::ExtractValueInst::init();
    (*(void (**)(void, uint64_t, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v8, a5, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v14 = *(unsigned int *)(a1 + 8);
    if (v14)
    {
      uint64_t v15 = *(void *)a1;
      uint64_t v16 = v15 + 16 * v14;
      do
      {
        llvm::Instruction::setMetadata();
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  return v8;
}

uint64_t llvm::IRBuilderBase::CreateInsertValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 352))(*(void *)(a1 + 72));
    if (v8) {
      BOOL v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v8, a6);
    }
  }
  else
  {
    uint64_t v8 = llvm::InsertValueInst::Create();
    (*(void (**)(void, uint64_t, uint64_t, void, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v8, a6, *(void *)(a1 + 48), *(void *)(a1 + 56));
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      uint64_t v11 = *(void *)a1;
      uint64_t v12 = v11 + 16 * v10;
      do
      {
        llvm::Instruction::setMetadata();
        v11 += 16;
      }
      while (v11 != v12);
    }
  }
  return v8;
}

uint64_t llvm::InsertValueInst::Create()
{
  uint64_t v0 = llvm::User::operator new((llvm::User *)0x60);
  uint64_t v1 = llvm::Instruction::Instruction();
  *(void *)(v1 + 64) = v1 + 80;
  *(void *)(v1 + 72) = 0x400000000;
  llvm::InsertValueInst::init();
  return v0;
}

llvm::Value *AGCLLVMBuilder::f32Extend(AGCLLVMBuilder *this, llvm::Value *a2, int a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void *)a2;
  int v6 = (llvm::Type *)*((void *)this + 21);
  if (*(llvm::Type **)a2 != v6)
  {
    if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    {
      int v6 = (llvm::Type *)llvm::FixedVectorType::get();
      unsigned int v8 = *(unsigned __int8 *)(v5 + 8);
    }
    else
    {
      unsigned int v8 = *(_DWORD *)(v5 + 8);
    }
    if ((v8 & 0xFE) == 0x12) {
      unsigned int v8 = *(unsigned __int8 *)(**(void **)(v5 + 16) + 8);
    }
    BOOL v9 = (AGCLLVMBuilder *)((char *)this + 8);
    if (v8 > 6)
    {
      __int16 v13 = 257;
      if (a3) {
        return (llvm::Value *)llvm::IRBuilderBase::CreateSIToFP(v9, v4, v6, (const llvm::Twine *)v12);
      }
      else {
        return (llvm::Value *)llvm::IRBuilderBase::CreateUIToFP(v9, v4, v6, (const llvm::Twine *)v12);
      }
    }
    else
    {
      __int16 v13 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v9, v4, v6, (const llvm::Twine *)v12);
    }
  }
  return v4;
}

llvm::Value *AGCLLVMBuilder::coerceSampleType(void *a1, llvm::Value *a2, int a3)
{
  uint64_t v3 = a2;
  uint64_t v5 = *(llvm::Type **)a2;
  switch(a3)
  {
    case 1:
      uint64_t v11 = 19;
      if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12) {
        uint64_t v11 = 35;
      }
      uint64_t v12 = (llvm::Type *)a1[v11];
      __int16 v16 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(a1 + 1), a2, v12, (const llvm::Twine *)v15);
    case 3:
    case 7:
      uint64_t v6 = (uint64_t)(a1 + 1);
      uint64_t v7 = a1[39];
      __int16 v16 = 257;
      goto LABEL_9;
    case 4:
    case 8:
      if (llvm::Type::getScalarSizeInBits(v5) == 32)
      {
        uint64_t v8 = a1[39];
        __int16 v16 = 257;
        uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, (uint64_t)v3, v8, (uint64_t)v15);
        uint64_t v7 = a1[38];
        __int16 v16 = 257;
        uint64_t v6 = (uint64_t)(a1 + 1);
        uint64_t v10 = 38;
      }
      else
      {
        uint64_t v7 = a1[38];
        __int16 v16 = 257;
        uint64_t v6 = (uint64_t)(a1 + 1);
LABEL_9:
        uint64_t v10 = 49;
        uint64_t Cast = (uint64_t)v3;
      }
      return (llvm::Value *)llvm::IRBuilderBase::CreateCast(v6, v10, Cast, v7, (uint64_t)v15);
    default:
      return v3;
  }
}

llvm::Value *AGCLLVMBuilder::truncateToSmall(llvm::Type **this, llvm::Value *a2, llvm::Type *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if (this[19] == a3 || this[24] == a3 || this[23] == a3)
  {
    if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
      uint64_t v3 = (llvm::Type *)llvm::FixedVectorType::get();
    }
    if ((*((_DWORD *)v3 + 2) & 0xFE) == 0x12) {
      unsigned int v6 = *(unsigned __int8 *)(**((void **)v3 + 2) + 8);
    }
    else {
      unsigned int v6 = *((_DWORD *)v3 + 2);
    }
    uint64_t v7 = (llvm::IRBuilderBase *)(this + 1);
    __int16 v11 = 257;
    if (v6 > 6) {
      return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v7, 38, (uint64_t)v4, (uint64_t)v3, (uint64_t)v10);
    }
    else {
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v7, v4, v3, (const llvm::Twine *)v10);
    }
  }
  return v4;
}

uint64_t AGCLLVMUserFragmentShader::setupShaderInputs(AGCLLVMUserFragmentShader *this)
{
  void v259[3] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (char *)this + 5464;
  uint64_t v3 = *(void *)(*((void *)this + 22) + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v6 = *(void *)(v4 + 40);
  if (v6) {
    uint64_t v7 = (llvm::Instruction *)(v6 - 24);
  }
  else {
    uint64_t v7 = 0;
  }
  llvm::IRBuilderBase::SetInsertPoint(v5, v7);
  if (v2[367] || (*v2 & 4) != 0)
  {
    uint64_t v8 = AGCLLVMUserFragmentShader::setupInterpolation(this, 6, 0, 1u);
    if (v2[367])
    {
      BOOL v9 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v10 = *((void *)v9 + 50);
      long long v234 = *(_OWORD *)(v9 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v235, (llvm::IRBuilderBase *)(v9 + 40));
      int v236 = *((_DWORD *)v9 + 34);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, void, void))(*(void *)v10 + 264))(v10, &v234, 1, 0, v8, 0, 0);
      llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5624), v11);
      if (v235) {
        llvm::MetadataTracking::untrack();
      }
    }
    if ((*v2 & 4) != 0)
    {
      uint64_t v12 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v13 = *((void *)v12 + 50);
      long long v231 = *(_OWORD *)(v12 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v232, (llvm::IRBuilderBase *)(v12 + 40));
      int v233 = *((_DWORD *)v12 + 34);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, void, void))(*(void *)v13 + 264))(v13, &v231, 1, *((unsigned int *)this + 1460), v8, 0, 0);
      llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5648), v14);
      if (v232) {
        llvm::MetadataTracking::untrack();
      }
      if (*((_DWORD *)this + 1460) == 1 && *((int *)this + 1082) <= 1) {
        *((_DWORD *)this + 1082) = 2;
      }
    }
  }
  if (v2[367])
  {
    uint64_t v15 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    if (*(void *)(v15 + 1576)) {
      strlen(*(const char **)(v15 + 1576));
    }
    uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
    uint64_t v17 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    if (*(void *)(v17 + 1584)) {
      strlen(*(const char **)(v17 + 1584));
    }
    uint64_t v18 = AGCLLVMBuilder::getOrInsertFunction<>();
    uint64_t v19 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v20 = (llvm::Value *)llvm::UndefValue::get();
    uint64_t v21 = (char *)this + *(void *)(*(void *)this - 24);
    LOWORD(v247) = 257;
    uint64_t v22 = llvm::IRBuilderBase::CreateCall((uint64_t)(v21 + 40), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v245);
    LOWORD(v257) = 257;
    uint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
    Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v19 + 40), v20, v22, v23, (const llvm::Twine *)&v255);
    uint64_t v25 = (char *)this + *(void *)(*(void *)this - 24);
    LOWORD(v247) = 257;
    uint64_t v26 = llvm::IRBuilderBase::CreateCall((uint64_t)(v25 + 40), **(void **)(*(void *)v18 + 16), v18, 0, 0, (uint64_t)v245);
    int v27 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserFragmentShader *, llvm::Value *))(*(void *)this + 552))(this, v26);
    uint64_t v28 = (char *)this + *(void *)(*(void *)this - 24);
    LOWORD(v247) = 257;
    uint64_t v29 = (llvm::IRBuilderBase *)(v28 + 40);
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    unsigned int v31 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v29, InsertElement, v27, v30, (const llvm::Twine *)v245);
    uint64_t v32 = AGCLLVMUserFragmentShader::setupInterpolation(this, 0, 0, 1u);
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5672), v32);
    BOOL v33 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v34 = *((void *)v33 + 50);
    long long v228 = *(_OWORD *)(v33 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v229, (llvm::IRBuilderBase *)(v33 + 40));
    int v230 = *((_DWORD *)v33 + 34);
    int v35 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, void, void, void, void))(*(void *)v34 + 264))(v34, &v228, 1, 0, *((void *)this + 711), 0, 0);
    if (v229) {
      llvm::MetadataTracking::untrack();
    }
    unsigned int v36 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v37 = (llvm::Value *)*((void *)this + 705);
    LOWORD(v247) = 257;
    uint64_t v38 = (llvm::IRBuilderBase *)(v36 + 40);
    uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v40 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v38, v31, v37, v39, (const llvm::Twine *)v245);
    int v41 = (char *)this + *(void *)(*(void *)this - 24);
    LOWORD(v247) = 257;
    uint64_t v42 = (llvm::IRBuilderBase *)(v41 + 40);
    uint64_t v43 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v212 = llvm::IRBuilderBase::CreateInsertElement(v42, v40, v35, v43, (const llvm::Twine *)v245);
  }
  else
  {
    uint64_t v212 = 0;
  }
  if (v2[368])
  {
    uint64_t v44 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v245[0] = "agc.front_direction";
    LOWORD(v247) = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    uint64_t v45 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v46 = *((void *)v45 + 47);
    uint64_t v47 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v45 + 32), v44);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v46, v47);
    char v48 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v49 = *((void *)v48 + 50);
    long long v225 = *(_OWORD *)(v48 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v226, (llvm::IRBuilderBase *)(v48 + 40));
    int v227 = *((_DWORD *)v48 + 34);
    uint64_t v211 = (*(uint64_t (**)(uint64_t, long long *, llvm::GlobalVariable *))(*(void *)v49 + 520))(v49, &v225, v44);
    if (v226) {
      llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    uint64_t v211 = 0;
  }
  uint64_t v50 = llvm::PointerType::get();
  if (v2[369] || v2[370] && (*(unsigned char *)(*((void *)this + 614) + 33) & 0xE) == 0)
  {
    uint64_t v51 = AGCLLVMUserFragmentShader::setupInterpolation(this, 5, 0, 2u);
    uint64_t v52 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v53 = *((void *)v52 + 50);
    long long v222 = *(_OWORD *)(v52 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v223, (llvm::IRBuilderBase *)(v52 + 40));
    int v224 = *((_DWORD *)v52 + 34);
    BOOL v54 = (char *)this + *(void *)(*(void *)this - 24) + 40;
    LOWORD(v247) = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v54, 49, v51, v50, (uint64_t)v245);
    uint64_t v56 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void, uint64_t, void, void))(*(void *)v53 + 264))(v53, &v222, 2, 0, Cast, 0, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5696), v56);
    if (v223) {
      llvm::MetadataTracking::untrack();
    }
  }
  if (v2[370] && (*(unsigned char *)(*((void *)this + 614) + 33) & 0xE) != 0)
  {
    uint64_t v57 = AGCLLVMUserFragmentShader::setupInterpolation(this, 5, 0, 2u);
    uint64_t v58 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v59 = *((void *)v58 + 50);
    long long v219 = *(_OWORD *)(v58 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v220, (llvm::IRBuilderBase *)(v58 + 40));
    int v221 = *((_DWORD *)v58 + 34);
    uint64_t v60 = (char *)this + *(void *)(*(void *)this - 24) + 40;
    LOWORD(v247) = 257;
    uint64_t v61 = llvm::IRBuilderBase::CreateCast((uint64_t)v60, 49, v57, v50, (uint64_t)v245);
    uint64_t v62 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v59 + 264))(v59, &v219, 2, 1, v61, 0, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5720), v62);
    if (v220) {
      llvm::MetadataTracking::untrack();
    }
    if (*((int *)this + 1082) <= 1) {
      *((_DWORD *)this + 1082) = 2;
    }
  }
  uint64_t v63 = v259;
  long long v255 = 0uLL;
  LODWORD(v256) = 0;
  *((void *)&v256 + 1) = 0;
  uint64_t v257 = 0;
  v258[0] = v259;
  v258[1] = (void *)0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)v258, 5uLL, -559038737);
  long long v250 = 0uLL;
  LODWORD(v251) = 0;
  uint64_t v252 = 0;
  *((void *)&v251 + 1) = 0;
  v253[0] = v254;
  v253[1] = (void *)0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)v253, 5uLL, -559038737);
  uint64_t v64 = *((void *)this + 22);
  if (*(_WORD *)(v64 + 18))
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    uint64_t v66 = *((void *)this + 22);
    uint64_t v65 = *(void **)(v64 + 88);
    if (*(_WORD *)(v66 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    }
    uint64_t v64 = v66;
  }
  else
  {
    uint64_t v65 = *(void **)(v64 + 88);
  }
  uint64_t v67 = *(void *)(v64 + 88) + 40 * *(void *)(v64 + 96);
  uint64_t v68 = (char *)this + 224;
  if (v65 == (void *)v67)
  {
LABEL_216:
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v164 = Function;
      llvm::ConstantInt::get();
      llvm::ConstantInt::get();
      uint64_t v165 = *(void *)(v164 + 8);
      while (v165)
      {
        int v166 = *(llvm::CallBase **)(v165 + 24);
        uint64_t v165 = *(void *)(v165 + 8);
        llvm::CallBase::arg_end(v166);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v166);
      }
    }
    uint64_t v167 = llvm::Module::getFunction();
    if (v167)
    {
      uint64_t v168 = v167;
      uint64_t v169 = llvm::ArrayType::get(*(llvm::ArrayType **)((char *)this + *(void *)(*(void *)this - 24) + 200), (llvm::Type *)(((unint64_t)*(unsigned int *)(*((void *)this + 614) + 32) >> 7) & 0x1E));
      uint64_t v170 = 1;
      uint64_t v171 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v245[0] = "agc.sample_positions";
      LOWORD(v247) = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      uint64_t v172 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v173 = *((void *)v172 + 47);
      uint64_t v174 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v172 + 32), v171);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v173, v174);
      uint64_t v175 = *(void *)(v168 + 8);
      if (v175)
      {
        v210 = v63;
        do
        {
          uint64_t v215 = *(void *)(v175 + 8);
          uint64_t v176 = *(llvm::Instruction **)(v175 + 24);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v176);
          unint64_t v177 = (llvm::Value *)llvm::UndefValue::get();
          int v178 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
          int v179 = (llvm::Value *)*((void *)v176 - 4 * (*((_DWORD *)v176 + 5) & 0x7FFFFFF));
          unint64_t v180 = (llvm::Value *)llvm::ConstantInt::get();
          LOWORD(v247) = 257;
          uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v178, v179, v180, (const llvm::Twine *)v245);
          unint64_t v182 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
          size_t v237 = (uint64_t *)llvm::ConstantInt::get();
          uint64_t v238 = (uint64_t)Mul;
          v182 += 5;
          LOWORD(v247) = 257;
          v183 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v182, v169, (uint64_t *)v171, &v237, 2, (uint64_t)v245);
          LOWORD(v242) = 257;
          uint64_t v185 = AGCLLVMBuilder::tryDeducePointeeType(v183, v184);
          uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v182, v185, (uint64_t)v183, 0, (uint64_t)v240);
          uint64_t v187 = (char *)this + *(void *)(*(void *)this - 24);
          LOWORD(v247) = 257;
          unint64_t v188 = (llvm::IRBuilderBase *)(v187 + 40);
          int v189 = (llvm::Value *)llvm::ConstantInt::get();
          char v190 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v188, v177, AlignedLoad, v189, (const llvm::Twine *)v245);
          BOOL v191 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
          uint64_t v170 = 1;
          BOOL v192 = (llvm::Value *)llvm::ConstantInt::get();
          LOWORD(v247) = 257;
          uint64_t Add = llvm::IRBuilderBase::CreateAdd(v191, Mul, v192, (const llvm::Twine *)v245);
          int v194 = (char *)this + *(void *)(*(void *)this - 24);
          size_t v237 = (uint64_t *)llvm::ConstantInt::get();
          uint64_t v238 = Add;
          int v195 = (uint64_t *)(v194 + 40);
          LOWORD(v247) = 257;
          int v196 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v194 + 40), v169, (uint64_t *)v171, &v237, 2, (uint64_t)v245);
          LOWORD(v242) = 257;
          long long v198 = AGCLLVMBuilder::tryDeducePointeeType(v196, v197);
          unint64_t v199 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v195, v198, (uint64_t)v196, 0, (uint64_t)v240);
          long long v200 = (char *)this + *(void *)(*(void *)this - 24);
          LOWORD(v247) = 257;
          v201 = (llvm::IRBuilderBase *)(v200 + 40);
          long long v202 = (llvm::Value *)llvm::ConstantInt::get();
          llvm::IRBuilderBase::CreateInsertElement(v201, v190, v199, v202, (const llvm::Twine *)v245);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v176);
          uint64_t v175 = v215;
        }
        while (v215);
        uint64_t v63 = v210;
      }
    }
    else
    {
      uint64_t v170 = 1;
    }
  }
  else
  {
    char v69 = 0;
    v208 = (char *)this + 368;
    char v213 = (char *)this + 8;
    uint64_t v214 = v67;
    while (2)
    {
      if (!v65[1]) {
        goto LABEL_213;
      }
      uint64_t v70 = *(void *)(*((void *)this + 11) + 8 * *((unsigned int *)v65 + 8));
      uint64_t v71 = *(void *)(v4 + 40);
      std::string v72 = v71 ? (llvm::Instruction *)(v71 - 24) : 0;
      AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v72, *((void *)this + 6));
      if (AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v65, *((_DWORD *)v65 + 8), v70)) {
        goto LABEL_213;
      }
      uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v70 - 8 * *(unsigned int *)(v70 + 8) + 8));
      std::string v75 = (void *)String;
      uint64_t v76 = v74;
      switch(v74)
      {
        case 12:
          BOOL v77 = *(void *)String == 0x69736F702E726961 && *(_DWORD *)(String + 8) == 1852795252;
          if (!v77) {
            goto LABEL_123;
          }
          if ((*(_DWORD *)(*v65 + 8) & 0xFE) == 0x12) {
            int v78 = *(unsigned __int8 *)(**(void **)(*v65 + 16) + 8);
          }
          else {
            int v78 = *(_DWORD *)(*v65 + 8);
          }
          uint64_t v67 = v214;
          uint64_t v126 = *(void *)(*(void *)this - 24);
          BOOL v77 = v78 == 0;
          uint64_t v127 = (char *)this + 288;
          if (v77) {
            uint64_t v127 = (char *)this + 280;
          }
          int v128 = *(llvm::Type **)&v127[v126 + 32];
          BOOL v129 = (AGCLLVMUserFragmentShader *)((char *)this + v126 + 40);
          LOWORD(v247) = 257;
          uint64_t v130 = (llvm::Value *)v212;
          goto LABEL_167;
        case 13:
          if (*(void *)String != 0x706D61732E726961 || *(void *)(String + 5) != 0x64695F656C706D61) {
            goto LABEL_123;
          }
          uint64_t v80 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
          if (*(void *)(v80 + 1592)) {
            strlen(*(const char **)(v80 + 1592));
          }
          uint64_t v152 = AGCLLVMBuilder::getOrInsertFunction<>();
          uint64_t v153 = *(void *)(*(void *)this - 24);
          v154 = (char *)this + v153 + 40;
          LOWORD(v247) = 257;
          size_t v155 = llvm::IRBuilderBase::CreateCall((uint64_t)&v213[v153 + 32], **(void **)(*(void *)v152 + 16), v152, 0, 0, (uint64_t)v245);
          uint64_t v156 = (llvm::Type *)*v65;
          LOWORD(v242) = 257;
          uint64_t v97 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v154, 38, (uint64_t)v155, (uint64_t)v156, (uint64_t)v240);
          if (*((int *)this + 1082) <= 1) {
            *((_DWORD *)this + 1082) = 2;
          }
          goto LABEL_208;
        case 15:
          if (*(void *)String != 0x6E696F702E726961 || *(void *)(String + 7) != 0x64726F6F635F746ELL) {
            goto LABEL_123;
          }
          if ((*(_DWORD *)(*v65 + 8) & 0xFE) == 0x12) {
            int v82 = *(unsigned __int8 *)(**(void **)(*v65 + 16) + 8);
          }
          else {
            int v82 = *(_DWORD *)(*v65 + 8);
          }
          uint64_t v67 = v214;
          uint64_t v131 = *(void *)(*(void *)this - 24);
          BOOL v77 = v82 == 0;
          int v132 = (char *)this + 216;
          if (!v77) {
            int v132 = v68;
          }
          int v128 = *(llvm::Type **)&v132[v131 + 32];
          BOOL v129 = (AGCLLVMUserFragmentShader *)((char *)this + v131 + 40);
          uint64_t v130 = (llvm::Value *)*((void *)this + 714);
          LOWORD(v247) = 257;
LABEL_167:
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v129, v130, v128, (const llvm::Twine *)v245);
          goto LABEL_168;
        case 16:
          if (*(void *)String != 0x6E6F72662E726961 || *(void *)(String + 8) != 0x676E696361665F74) {
            goto LABEL_123;
          }
          uint64_t v84 = (char *)this + *(void *)(*(void *)this - 24) + 40;
          std::string v85 = (llvm::Type *)*v65;
          LOWORD(v247) = 257;
          uint64_t v86 = 39;
          uint64_t v87 = v211;
          goto LABEL_202;
        case 17:
          if (*(void *)String != 0x646E65722E726961
            || *(void *)(String + 8) != 0x65677261745F7265
            || *(unsigned char *)(String + 16) != 116)
          {
            goto LABEL_123;
          }
          v240[0] = 0;
          LODWORD(v245[0]) = 2;
          if (!parseMDInt(0, v70, (unsigned int *)v245, v240)) {
            goto LABEL_233;
          }
          unsigned int v90 = v240[0];
          Framebuffer = AGCLLVMFragmentShader::buildReadFramebuffer((AGCLLVMUserFragmentShader *)((char *)this + 4320), v240[0]);
          int v92 = (llvm::Type *)*v65;
          std::string::size_type v93 = (llvm::Type *)llvm::FixedVectorType::get();
          std::string::size_type v96 = AGCLLVMObject::buildConvertColor((uint64_t)this + *(void *)(*(void *)this - 24), Framebuffer, v93, *((unsigned __int8 *)this + 72 * v90 + 4378), *((unsigned __int8 *)this + 72 * v90 + 4377), *((unsigned int *)this + 18 * v90 + 1101), v94, v95);
          uint64_t v97 = v96;
          if ((*((_DWORD *)v92 + 2) & 0xFE) == 0x12)
          {
            int v98 = *((_DWORD *)v92 + 8);
            if (v98 == *(_DWORD *)(*(void *)v96 + 32)) {
              goto LABEL_194;
            }
            uint64_t Element = AGCLLVMBuilder::subrangeVector((AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 32), v96, 0, v98, 1);
          }
          else
          {
            __int16 v147 = (char *)this + *(void *)(*(void *)this - 24);
            LOWORD(v247) = 257;
            uint64_t v148 = (llvm::IRBuilderBase *)(v147 + 40);
            int v149 = (llvm::Value *)llvm::ConstantInt::get();
            uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v148, v97, v149, (const llvm::Twine *)v245);
          }
          uint64_t v97 = (llvm::Value *)Element;
LABEL_194:
          uint64_t v68 = (char *)this + 224;
          goto LABEL_208;
        case 18:
          if (*(void *)String != 0x676172662E726961
            || *(void *)(String + 8) != 0x706E695F746E656DLL
            || *(_WORD *)(String + 16) != 29813)
          {
            goto LABEL_123;
          }
          uint64_t v206 = v4;
          v2[364] = 1;
          (*(void (**)(void **__return_ptr, AGCLLVMUserFragmentShader *, void, uint64_t))(*(void *)this + 504))(v245, this, *v65, v70);
          uint64_t v102 = LODWORD(v245[1]);
          if (LODWORD(v245[1]) < 2)
          {
            if (!LODWORD(v245[1]))
            {
              uint64_t v97 = 0;
              unint64_t v144 = (long long *)v245[0];
              uint64_t v4 = v206;
              goto LABEL_205;
            }
            unint64_t v209 = v63;
            unint64_t v207 = v2;
            uint64_t v97 = 0;
          }
          else
          {
            unint64_t v209 = v63;
            unint64_t v207 = v2;
            uint64_t v97 = (llvm::Value *)llvm::UndefValue::get();
          }
          uint64_t v133 = 0;
          uint64_t v134 = 0;
          do
          {
            long long v135 = *(_OWORD *)((char *)v245[0] + v133 + 16);
            uint64_t v136 = *(void *)((char *)v245[0] + v133 + 32);
            *(_OWORD *)long long v240 = *(_OWORD *)((char *)v245[0] + v133);
            long long v241 = v135;
            uint64_t v242 = v136;
            v243[0] = v244;
            v243[1] = (void *)0x500000000;
            if (*(_DWORD *)((char *)v245[0] + v133 + 48)) {
              llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)v243, (uint64_t)v245[0] + v133 + 40);
            }
            BOOL v137 = v242 == 0;
            if (v240[1] || *((void *)this + 711))
            {
              if (v242) {
                goto LABEL_177;
              }
            }
            else
            {
              uint64_t v139 = AGCLLVMUserFragmentShader::setupInterpolation(this, 0, 0, 1u);
              llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5672), v139);
              if (v242)
              {
LABEL_177:
                __int16 v138 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, v240);
                goto LABEL_180;
              }
            }
            __int16 v138 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserFragmentShader *, unsigned int *))(*(void *)this + 560))(this, v240);
LABEL_180:
            uint64_t v140 = v138;
            if (v102 < 2)
            {
              uint64_t v97 = v138;
            }
            else
            {
              size_t v141 = (char *)this + *(void *)(*(void *)this - 24);
              __int16 v239 = 257;
              int v142 = (llvm::IRBuilderBase *)(v141 + 40);
              __int16 v143 = (llvm::Value *)llvm::ConstantInt::get();
              uint64_t v97 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v142, v97, v140, v143, (const llvm::Twine *)&v237);
            }
            if (v243[0] != v244) {
              free(v243[0]);
            }
            v69 |= v137;
            ++v134;
            v133 += 80;
          }
          while (v102 != v134);
          unint64_t v144 = (long long *)v245[0];
          if (LODWORD(v245[1]))
          {
            uint64_t v145 = 5 * LODWORD(v245[1]);
            unint64_t v2 = v207;
            uint64_t v4 = v206;
            uint64_t v63 = v209;
            uint64_t v68 = (char *)this + 224;
            do
            {
              unint64_t v146 = (char *)*((void *)&v144[v145 - 2] - 1);
              if ((char *)&v144[v145 - 1] - 8 != v146) {
                free(v146);
              }
              v145 -= 5;
            }
            while (v145 * 16);
            unint64_t v144 = (long long *)v245[0];
          }
          else
          {
            unint64_t v2 = v207;
            uint64_t v4 = v206;
            uint64_t v63 = v209;
            uint64_t v68 = (char *)this + 224;
          }
LABEL_205:
          if (v144 != &v246)
          {
            unsigned int v122 = v144;
LABEL_207:
            free(v122);
          }
LABEL_208:
          uint64_t v67 = v214;
LABEL_209:
          if ((*(_DWORD *)(*v65 + 8) & 0xFE) == 0x12 && *(_DWORD *)(*v65 + 32) == 1)
          {
            uint64_t v158 = (char *)this + *(void *)(*(void *)this - 24);
            uint64_t v159 = llvm::UndefValue::get();
            LOWORD(v247) = 257;
            uint64_t v160 = (llvm::IRBuilderBase *)(v158 + 40);
            uint64_t v68 = (char *)this + 224;
            uint64_t v161 = (llvm::Value *)llvm::ConstantInt::get();
            char v162 = (llvm::Value *)v159;
            uint64_t v67 = v214;
            llvm::IRBuilderBase::CreateInsertElement(v160, v162, v97, v161, (const llvm::Twine *)v245);
          }
          llvm::Value::replaceAllUsesWith();
LABEL_213:
          v65 += 5;
          if (v65 == (void *)v67)
          {
            if (v69) {
              (*(void (**)(AGCLLVMUserFragmentShader *))(*(void *)this + 568))(this);
            }
            goto LABEL_216;
          }
          continue;
        case 24:
          if (*(void *)String != 0x776569762E726961
            || *(void *)(String + 8) != 0x7272615F74726F70
            || *(void *)(String + 16) != 0x7865646E695F7961)
          {
            goto LABEL_123;
          }
          v2[394] = 1;
          (*(void (**)(void **__return_ptr, AGCLLVMUserFragmentShader *, void, const char *, uint64_t))(*(void *)this + 512))(v245, this, *v65, "air.viewport_array_index", 24);
          uint64_t v97 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)v245);
          llvm::ValueHandleBase::operator=((AGCLLVMUserFragmentShader *)((char *)this + 5744), (uint64_t)v97);
          goto LABEL_151;
        case 29:
          if (*(void *)String != 0x646E65722E726961
            || *(void *)(String + 8) != 0x65677261745F7265
            || *(void *)(String + 16) != 0x5F79617272615F74
            || *(void *)(String + 21) != 0x7865646E695F7961)
          {
            goto LABEL_123;
          }
          v2[395] = 1;
          uint64_t v121 = (char *)this + *(void *)(*(void *)this - 24);
          if (*(unsigned char *)(*((void *)v121 + 50) + 1747))
          {
            (*(void (**)(void **__return_ptr, AGCLLVMUserFragmentShader *, void, const char *, uint64_t))(*(void *)this + 512))(v245, this, *v65, "air.render_target_array_index", 29);
            uint64_t v97 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)v245);
LABEL_151:
            unsigned int v122 = (long long *)v248[0];
            if (v248[0] != v249) {
              goto LABEL_207;
            }
          }
          else
          {
            unint64_t v157 = v121 + 40;
            uint64_t v87 = llvm::ConstantInt::get();
            std::string v85 = (llvm::Type *)*v65;
            LOWORD(v247) = 257;
            uint64_t v84 = v157;
            uint64_t v86 = 38;
LABEL_202:
            uint64_t v97 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v84, v86, v87, (uint64_t)v85, (uint64_t)v245);
          }
          goto LABEL_208;
        default:
LABEL_123:
          if (AGCLLVMUserFragmentShader::isSampleMaskVariant((uint64_t *)String, v74))
          {
            uint64_t v108 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
            if (*(void *)(v108 + 1600)) {
              strlen(*(const char **)(v108 + 1600));
            }
            uint64_t v112 = AGCLLVMBuilder::getOrInsertFunction<>();
            uint64_t v113 = *(void *)(*(void *)this - 24);
            uint64_t v114 = (char *)this + v113 + 40;
            LOWORD(v247) = 257;
            uint64_t v115 = llvm::IRBuilderBase::CreateCall((uint64_t)&v213[v113 + 32], **(void **)(*(void *)v112 + 16), v112, 0, 0, (uint64_t)v245);
            size_t v116 = (llvm::Type *)*v65;
            LOWORD(v242) = 257;
            uint64_t v97 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v114, 38, (uint64_t)v115, (uint64_t)v116, (uint64_t)v240);
            if (AGCLLVMUserFragmentShader::getEffectiveFragmentRate(*((_DWORD *)this + 1468), (uint64_t)v75, v76))
            {
              uint64_t v117 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
              uint64_t v118 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(v247) = 257;
              uint64_t v97 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v117, v97, v118, (const llvm::Twine *)v245);
            }
            uint64_t v67 = v214;
            uint64_t v68 = (char *)this + 224;
            v2[366] = 1;
            goto LABEL_209;
          }
          if (v76 == 21)
          {
            if (*v75 != 0x797261622E726961
              || v75[1] != 0x5F636972746E6563
              || *(void *)((char *)v75 + 13) != 0x64726F6F635F6369)
            {
              goto LABEL_148;
            }
            uint64_t v123 = *(void *)&v208[*(void *)(*(void *)this - 24) + 32];
            if ((*(uint64_t (**)(uint64_t))(*(void *)v123 + 856))(v123))
            {
              v2[399] = 1;
              if (!v252)
              {
                (*(void (**)(void **__return_ptr, AGCLLVMUserFragmentShader *, void, uint64_t))(*(void *)this + 528))(v245, this, *v65, v70);
                long long v250 = *(_OWORD *)v245;
                long long v251 = v246;
                uint64_t v252 = v247;
                llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)v253, (uint64_t)v248);
                if (v248[0] != v249) {
                  free(v248[0]);
                }
              }
              size_t v124 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)&v250);
              if ((*(_DWORD *)(*v65 + 8) & 0xFE) == 0x12) {
                uint64_t v125 = *(unsigned int *)(*v65 + 32);
              }
              else {
                uint64_t v125 = 1;
              }
              int v150 = (char *)this + *(void *)(*(void *)this - 24);
              uint64_t v151 = *((void *)v150 + 50);
              long long v216 = *(_OWORD *)(v150 + 88);
              llvm::IRBuilderBase::getCurrentDebugLocation(&v217, (llvm::IRBuilderBase *)(v150 + 40));
              int v218 = *((_DWORD *)v150 + 34);
              uint64_t v97 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *, uint64_t))(*(void *)v151 + 888))(v151, &v216, v124, v125);
              if (v217) {
                llvm::MetadataTracking::untrack();
              }
              uint64_t v67 = v214;
              uint64_t v68 = (char *)this + 224;
              goto LABEL_209;
            }
            uint64_t v204 = (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8);
            int v205 = "barycentric_coords not supported for this device";
          }
          else
          {
            if (v76 != 16
              || (*v75 == 0x6D6972702E726961 ? (BOOL v109 = v75[1] == 0x64695F6576697469) : (BOOL v109 = 0), !v109))
            {
LABEL_148:
              uint64_t v97 = 0;
              goto LABEL_208;
            }
            uint64_t v110 = *(void *)&v208[*(void *)(*(void *)this - 24) + 32];
            if ((*(uint64_t (**)(uint64_t))(*(void *)v110 + 848))(v110))
            {
              uint64_t v67 = v214;
              if (!v257)
              {
                (*(void (**)(void **__return_ptr, AGCLLVMUserFragmentShader *, void))(*(void *)this
                                                                                                 + 520))(v245, this, *v65);
                long long v255 = *(_OWORD *)v245;
                long long v256 = v246;
                uint64_t v257 = v247;
                llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)v258, (uint64_t)v248);
                if (v248[0] != v249) {
                  free(v248[0]);
                }
              }
              FPTrunc = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)&v255);
LABEL_168:
              uint64_t v97 = FPTrunc;
              goto LABEL_209;
            }
            uint64_t v204 = (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8);
            int v205 = "primitive_id not supported for this device";
          }
          std::string::append(v204, v205);
LABEL_233:
          uint64_t v170 = 0;
          break;
      }
      break;
    }
  }
  if (v253[0] != v254) {
    free(v253[0]);
  }
  if (v258[0] != v63) {
    free(v258[0]);
  }
  return v170;
}

uint64_t AGCLLVMUserShader::replaceInputArgument(uint64_t a1, llvm::Type **a2, unsigned int a3, uint64_t a4)
{
  if (!a4)
  {
    uint64_t String = "air.byval";
LABEL_11:
    if (*(void *)String == 0x617679622E726961 && String[8] == 108)
    {
      uint64_t v12 = *a2;
      uint64_t v88 = "agc.byval.";
      *(void *)&v90[4] = a3;
      LOWORD(v92) = 2051;
      GlobalBufferBinding = (llvm::Type **)AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v12, (const llvm::Twine *)&v88, a3, 0, 5, 0);
      uint64_t v14 = *(void *)(*(void *)a1 - 24) + a1;
      LOWORD(v92) = 257;
      __int16 v16 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBufferBinding, v15);
      llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v14 + 40), v16, (uint64_t)GlobalBufferBinding, 0, (uint64_t)&v88);
LABEL_147:
      llvm::Value::replaceAllUsesWith();
      return 1;
    }
    goto LABEL_91;
  }
  uint64_t String = (const char *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8));
  if (v9 <= 25)
  {
    switch(v9)
    {
      case 9:
        goto LABEL_11;
      case 10:
        if (*(void *)String != 0x666675622E726961 || *((_WORD *)String + 4) != 29285) {
          goto LABEL_91;
        }
        goto LABEL_133;
      case 11:
        if (*(void *)String == 0x747865742E726961 && *(void *)(String + 3) == 0x657275747865742ELL)
        {
          if (a2[1])
          {
            BYTE4(v87) = 0;
            LOBYTE(v87) = 0;
            LODWORD(v85[0]) = 0;
            LODWORD(__p[0]) = 0;
            LODWORD(v88) = 0;
            *(_WORD *)long long v89 = 0;
            *(void *)unsigned int v90 = 0xFFFFFFFFLL;
            uint64_t v91 = 0;
            uint64_t v92 = 0;
            char v93 = 0;
            if (!parseMDTexture(a4, v85, __p, v89, (BOOL *)&v87 + 4, (BOOL *)&v89[1], &v87, (int *)v90)) {
              goto LABEL_91;
            }
            std::string v72 = *a2;
            int v73 = BYTE4(v87);
            if (BYTE4(v87))
            {
              uint64_t v74 = **((void **)v72 + 2);
              if (*(unsigned char *)(v74 + 8) == 16) {
                uint64_t v74 = **(void **)(v74 + 16);
              }
              std::string v72 = **(llvm::Type ***)(v74 + 16);
            }
            int v75 = *((_DWORD *)v72 + 2);
            if ((v75 & 0x1FF) == 0x110)
            {
              std::string v72 = (llvm::Type *)**((void **)v72 + 2);
              LOBYTE(v75) = *((unsigned char *)v72 + 8);
            }
            if (v75 == 15)
            {
              uint64_t v76 = **((void **)v72 + 2);
              if ((*(_DWORD *)(v76 + 8) & 0x1FF) == 0x110) {
                std::string v72 = **(llvm::Type ***)(v76 + 16);
              }
            }
            uint64_t v92 = **((void **)v72 + 2);
            unsigned int v77 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 280))(a1, LODWORD(v85[0]));
            unsigned int v78 = __p[0];
            *(_DWORD *)(a1 + 3316) += LODWORD(__p[0]);
            *(unsigned char *)(a1 + 3560) |= v87;
            LODWORD(v88) = v77 & 0xFFFFF;
            HIDWORD(v88) = v78;
            std::__tree<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::__emplace_unique_key_args<AGCLLVMUserObject::Texture,AGCLLVMUserObject::Texture const&>((uint64_t *)(a1 + 952), v77 & 0xFFFFF, &v88);
            if ((v89[0] & 2) != 0)
            {
              if (v73)
              {
                char v80 = v78 + v77;
                if (v78 + v77 >= 0x40) {
                  char v80 = 64;
                }
                char v81 = v80 - v77;
                if (v77 >= 0x40) {
                  char v81 = 0;
                }
                *(void *)(a1 + 3720) |= ~(-1 << v81) << v77;
                char v82 = v77 <= 0x40 ? 64 : v77;
                *(void *)(a1 + 3728) |= ~(-1 << (v78 - v81)) << v82;
                char v79 = 1;
              }
              else
              {
                char v79 = 0;
                if (v77 > 0x3F) {
                  *(void *)(a1 + 3728) |= 1 << v77;
                }
                else {
                  *(void *)(a1 + 3720) |= 1 << v77;
                }
              }
            }
            else
            {
              char v79 = v73 != 0;
            }
            if ((AGCLLVMUserObject::replaceTextureOrSamplerArgument((AGCLLVMUserObject *)a1, (llvm::Value *)a2, v77, v78, v79, (unsigned __int8 **)(a1 + 2896)) & 1) == 0)goto LABEL_91; {
          }
            }
        }
        else
        {
          BOOL v23 = *(void *)String == 0x706D61732E726961 && *(void *)(String + 3) == 0x72656C706D61732ELL;
          if (!v23 || (AGCLLVMUserObject::replaceSamplerInput<llvm::Argument>(a1, (llvm::Value *)a2, a4) & 1) == 0) {
            goto LABEL_91;
          }
        }
        break;
      case 17:
        if (*(void *)String != 0x666675622E726961
          || *((void *)String + 1) != 0x64697274735F7265
          || String[16] != 101)
        {
          goto LABEL_91;
        }
        unsigned int v26 = 0;
        LODWORD(v85[0]) = 0;
        unsigned int v27 = *(_DWORD *)(a4 + 8);
        LODWORD(v88) = 2;
        if (v27 >= 3)
        {
          do
          {
            if (parseMDLocationIndex(a4, &v88, v85, __p)) {
              break;
            }
            LODWORD(v88) = v88 + 1;
          }
          while (v88 < v27);
          unsigned int v26 = v85[0];
        }
        uint64_t v28 = 1;
        uint64_t v29 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        uint64_t v88 = "agc.dynamic_stride.";
        *(void *)&v90[4] = v26;
        LOWORD(v92) = 2051;
        uint64_t v30 = llvm::GlobalVariable::GlobalVariable();
        *(unsigned char *)(v30 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v88, (const llvm::Triple *)(a1 + 184));
        uint64_t v31 = *(void *)(*(void *)a1 - 24) + a1;
        uint64_t v32 = *(void *)(v31 + 376);
        uint64_t v33 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v31 + 32), v29);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v32, v33);
        uint64_t v34 = *(void *)(*(void *)a1 - 24) + a1;
        LOWORD(v92) = 257;
        unsigned int v36 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v29, v35);
        uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v34 + 40), v36, (uint64_t)v29, 0, (uint64_t)&v88);
        uint64_t v38 = *(void *)(*(void *)a1 - 24) + a1;
        uint64_t v39 = *(void *)(v38 + 240);
        LOWORD(v92) = 257;
        llvm::IRBuilderBase::CreateCast(v38 + 40, 39, AlignedLoad, v39, (uint64_t)&v88);
        llvm::Value::replaceAllUsesWith();
        return v28;
      case 19:
        if (*(void *)String != 0x69646E692E726961
          || *((void *)String + 1) != 0x6675625F74636572
          || *(void *)(String + 11) != 0x7265666675625F74)
        {
          goto LABEL_91;
        }
        goto LABEL_133;
      case 22:
        if (*(void *)String != 0x63616E692E726961
          || *((void *)String + 1) != 0x656C626973736563
          || *(void *)(String + 14) != 0x7475706E695F656CLL)
        {
          goto LABEL_91;
        }
        llvm::UndefValue::get();
        goto LABEL_147;
      default:
        goto LABEL_91;
    }
    return 1;
  }
  if (v9 > 34)
  {
    if (v9 == 35)
    {
      uint64_t v20 = "air.instance_acceleration_structure";
      size_t v21 = 35;
    }
    else
    {
      if (v9 != 36) {
        goto LABEL_91;
      }
      uint64_t v20 = "air.primitive_acceleration_structure";
      size_t v21 = 36;
    }
    if (!memcmp(String, v20, v21)) {
      goto LABEL_133;
    }
LABEL_91:
    uint64_t v47 = (unint64_t *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8));
    uint64_t v49 = v47;
    size_t v50 = v48;
    if (v48 == 11)
    {
      if (*v47 != 0x66696E752E726961 || *(unint64_t *)((char *)v47 + 3) != 0x6D726F66696E752ELL) {
        return 0;
      }
    }
    else
    {
      if (v48 != 19) {
        return 0;
      }
      BOOL v52 = *v47 == 0x616665642E726961 && v47[1] == 0x66696E755F746C75;
      if (!v52 || *(unint64_t *)((char *)v47 + 11) != 0x6D726F66696E755FLL) {
        return 0;
      }
    }
    uint64_t v87 = 0;
    unsigned int v54 = *(_DWORD *)(a4 + 8);
    if (v54 >= 3)
    {
      unsigned int v55 = 2;
      do
      {
        unsigned int v56 = v55 + 1;
        uint64_t v57 = *(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8 * v55);
        if (v57 && !*(unsigned char *)v57)
        {
          uint64_t v58 = (void *)llvm::MDString::getString(v57);
          if (v59 == 11)
          {
            if (*v58 != 0x646E69622E726961 || *(void *)((char *)v58 + 3) != 0x676E69646E69622ELL) {
              goto LABEL_111;
            }
            LODWORD(v88) = v55 + 1;
            if (!parseMDInt(0, a4, (unsigned int *)&v88, &v87)) {
              return 0;
            }
          }
          else
          {
            if (v59 != 15) {
              goto LABEL_111;
            }
            if (*v58 != 0x666675622E726961 || *(void *)((char *)v58 + 7) != 0x657A69735F726566) {
              goto LABEL_111;
            }
            LODWORD(v88) = v55 + 1;
            if ((parseMDInt(0, a4, (unsigned int *)&v88, (_DWORD *)&v87 + 1) & 1) == 0) {
              return 0;
            }
          }
          unsigned int v56 = v55 + 2;
        }
LABEL_111:
        unsigned int v55 = v56;
      }
      while (v56 < v54);
    }
    if (v50 == 11)
    {
      unint64_t v62 = 0x6169722E756E6966;
      unint64_t v63 = bswap64(*v49);
      if (v63 == 0x6169722E756E6966
        && (unint64_t v62 = 0x2E756E69666F726DLL,
            unint64_t v63 = bswap64(*(unint64_t *)((char *)v49 + 3)),
            v63 == 0x2E756E69666F726DLL))
      {
        int v64 = 0;
      }
      else if (v63 < v62)
      {
        int v64 = -1;
      }
      else
      {
        int v64 = 1;
      }
      if (v64) {
        int v65 = 4;
      }
      else {
        int v65 = 5;
      }
    }
    else
    {
      int v65 = 4;
    }
    uint64_t v66 = *a2;
    v85[0] = "agc.buffer_pointers";
    v85[2] = ".";
    __int16 v86 = 771;
    if (v49)
    {
      std::string::basic_string[abi:nn180100](__p, v49, v50);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v84 = 0;
    }
    uint64_t v88 = (const char *)v85;
    *(void *)&v90[4] = __p;
    LOWORD(v92) = 1026;
    uint64_t v68 = (llvm::Type **)AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v66, (const llvm::Twine *)&v88, v87, SHIDWORD(v87), v65, 0);
    if (SHIBYTE(v84) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v69 = *(void *)(*(void *)a1 - 24) + a1;
    LOWORD(v92) = 257;
    uint64_t v70 = AGCLLVMBuilder::tryDeducePointeeType(v68, v67);
    if (!llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v69 + 40), v70, (uint64_t)v68, 0, (uint64_t)&v88)) {
      return 0;
    }
    goto LABEL_147;
  }
  if (v9 == 26)
  {
    if (*(void *)String != 0x697369762E726961
      || *((void *)String + 1) != 0x636E75665F656C62
      || *((void *)String + 2) != 0x6261745F6E6F6974
      || *((_WORD *)String + 12) != 25964)
    {
      goto LABEL_91;
    }
  }
  else
  {
    if (v9 != 31) {
      goto LABEL_91;
    }
    BOOL v17 = *(void *)String == 0x65746E692E726961 && *((void *)String + 1) == 0x6E6F697463657372;
    BOOL v18 = v17 && *((void *)String + 2) == 0x6F6974636E75665FLL;
    if (!v18 || *(void *)(String + 23) != 0x656C6261745F6E6FLL) {
      goto LABEL_91;
    }
  }
LABEL_133:
  AGCLLVMUserObject::replaceBufferInputArgument(a1, (uint64_t *)a2, a3, a4, 0xFFFFFFFF);
  return 1;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::assign(uint64_t result, unint64_t a2, int a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v3 = *(_DWORD **)result;
  uint64_t v5 = (_DWORD *)(result + 8);
  unint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *(unsigned int *)(result + 8);
  }
  if (v6)
  {
    uint64_t v7 = *(_DWORD **)result;
    do
    {
      *v7++ = a3;
      --v6;
    }
    while (v6);
    unint64_t v4 = *v5;
  }
  unint64_t v8 = v4 - a2;
  if (v4 < a2)
  {
    uint64_t v9 = &v3[v4];
    do
      *v9++ = a3;
    while (!__CFADD__(v8++, 1));
  }
  *uint64_t v5 = a2;
  return result;
}

uint64_t AGCLLVMUserFragmentShader::setupInterpolation(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = *(llvm::ArrayType **)((char *)a1 + *(void *)(*a1 - 24) + 320);
  uint64_t v6 = llvm::User::operator new((llvm::User *)0x58);
  if (a4 >= 2) {
    llvm::ArrayType::get(v5, (llvm::Type *)a4);
  }
  llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v6 + 80) |= 1u;
  llvm::GlobalObject::setAlignment();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  return v6;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildInterpolate(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, llvm::Value *a6, uint64_t a7)
{
  v35[4] = *MEMORY[0x1E4F143B8];
  long long v28 = *(_OWORD *)a2;
  uint64_t v29 = *(void *)(a2 + 16);
  if (v29) {
    llvm::MetadataTracking::track();
  }
  int v30 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v28);
  if (v29) {
    llvm::MetadataTracking::untrack();
  }
  int v14 = a3;
  unsigned int v15 = a3 - 1;
  if (v15) {
    llvm::FixedVectorType::get();
  }
  uint64_t v16 = llvm::PointerType::get();
  v34[0] = v35;
  v34[1] = (void *)0x400000000;
  uint64_t v31 = v33;
  uint64_t v32 = 0x400000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v34, v16);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v31, a5);
  if (a7)
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v34, v16);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v31, a7);
    BOOL v17 = (const char **)(a1 + 32 * a4 + 8 * v15 + 2104);
  }
  else
  {
    BOOL v17 = (const char **)(a1 + 32 * a4 + 8 * v15 + 2008);
  }
  BOOL v18 = *v17;
  if (a4 == 1)
  {
    if (!a6)
    {
      if (*(void *)(a1 + 1592)) {
        strlen(*(const char **)(a1 + 1592));
      }
      uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
      __int16 v27 = 257;
      a6 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v26);
    }
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v34, *(void *)(a1 + 192));
    uint64_t v20 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, a6, *(llvm::Type **)(a1 + 192));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v31, (uint64_t)v20);
  }
  if (v18) {
    strlen(v18);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  __int16 v27 = 257;
  uint64_t v22 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v21 + 24), v21, (uint64_t)v31, v32, (uint64_t)v26);
  v23.i32[0] = v14;
  uint8x8_t v24 = (uint8x8_t)vcnt_s8(v23);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.i32[0] != 1) {
    uint64_t v22 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, v22, 0, v14, 1);
  }
  if (v31 != v33) {
    free(v31);
  }
  if (v34[0] != v35) {
    free(v34[0]);
  }
  return v22;
}

uint64_t AGCLLVMBuilder::getOrInsertFunction<>()
{
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  return v0;
}

llvm::Value *AGCLLVMUserFragmentShader::replaceInterpolation(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4 = a2[3];
  uint64_t v5 = (llvm::Value *)*a2;
  if (a2[1] == 1)
  {
    *((unsigned char *)a1 + 5829) = 1;
    uint64_t v6 = 3;
  }
  else
  {
    uint64_t v6 = a2[2];
    if (v6 == 1)
    {
      if (*((int *)a1 + 1082) <= 1) {
        *((_DWORD *)a1 + 1082) = 2;
      }
      uint64_t v6 = 1;
    }
  }
  uint64_t v7 = llvm::PointerType::get();
  if (a2[1] == 3
    || (uint64_t v9 = v7,
        uint64_t v10 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40,
        uint64_t v11 = *((void *)a2 + 4),
        __int16 v72 = 257,
        uint64_t Cast = llvm::IRBuilderBase::CreateCast(v10, 49, v11, v9, (uint64_t)v71),
        unsigned int v13 = a2[1],
        v13 == 5)
    || v13 == 3)
  {
    uint64_t v14 = (uint64_t)a1 + *(void *)(*a1 - 24);
    unsigned int v15 = (llvm::Type **)*((void *)a2 + 4);
    __int16 v72 = 257;
    uint64_t v16 = AGCLLVMBuilder::tryDeducePointeeType(v15, v8);
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v14 + 40), v16, (uint64_t)v15, 0, (uint64_t)v71);
    goto LABEL_11;
  }
  uint64_t v20 = (llvm::Type *)Cast;
  if (v6 != 3)
  {
    uint64_t v35 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v36 = v35 + 32;
    uint64_t v37 = *(void *)(v35 + 400);
    uint64_t v38 = (llvm::IRBuilderBase *)(v35 + 40);
    if (v13)
    {
      long long v57 = *(_OWORD *)(v35 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v58, v38);
      int v59 = *(_DWORD *)(v36 + 104);
      uint64_t AlignedLoad = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *, uint64_t, llvm::Type *, void, void))(*(void *)v37 + 264))(v37, &v57, v5, v6, v20, 0, 0);
      if (!v58) {
        goto LABEL_11;
      }
    }
    else
    {
      long long v60 = *(_OWORD *)(v35 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v61, v38);
      int v62 = *(_DWORD *)(v36 + 104);
      uint64_t AlignedLoad = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *, uint64_t, llvm::Type *, void, uint64_t))(*(void *)v37 + 264))(v37, &v60, v5, v6, v20, 0, a1[711]);
      if (!v61) {
        goto LABEL_11;
      }
    }
    llvm::MetadataTracking::untrack();
    goto LABEL_11;
  }
  if (*(unsigned char *)(*(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 400) + 1768))
  {
    if (!llvm::Module::getGlobalVariable())
    {
      uint64_t v21 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v71[0] = "agc.provoking_vertex_index";
      __int16 v72 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      AGCLLVMBuilder::setupGlobalMetadata((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), v21);
      uint64_t v22 = (uint64_t)a1 + *(void *)(*a1 - 24);
      long long v68 = *(_OWORD *)(v22 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v69, (llvm::IRBuilderBase *)(v22 + 40));
      int v70 = *(_DWORD *)(v22 + 136);
      uint64_t v23 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v24 = *(void *)(*(void *)(*(void *)(v23 + 88) + 56) + 80);
      if (v24) {
        uint64_t v25 = (llvm::BasicBlock *)(v24 - 24);
      }
      else {
        uint64_t v25 = 0;
      }
      unsigned int v26 = (char **)(v23 + 40);
      uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v25);
      llvm::IRBuilderBase::SetInsertPoint(v26, (char *)v25, FirstInsertionPt);
      long long v28 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 40);
      __int16 v72 = 257;
      int v30 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v21, v29);
      uint64_t v31 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAlignedLoad(v28, v30, (uint64_t)v21, 0, (uint64_t)v71);
      uint64_t v32 = llvm::ConstantInt::get();
      __int16 v67 = 257;
      llvm::IRBuilderBase::CreateICmp(v28, 33, v31, v32, (uint64_t)v66);
      llvm::ConstantInt::get();
      llvm::ConstantInt::get();
      __int16 v72 = 257;
      uint64_t Select = llvm::IRBuilderBase::CreateSelect();
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 721), Select);
      uint64_t v34 = (uint64_t)a1 + *(void *)(*a1 - 24) + 32;
      long long v63 = v68;
      uint64_t v64 = v69;
      if (v69) {
        llvm::MetadataTracking::track();
      }
      int v65 = v70;
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v63, v34 + 8);
      if (v64) {
        llvm::MetadataTracking::untrack();
      }
      if (v69) {
        llvm::MetadataTracking::untrack();
      }
    }
  }
  else
  {
    uint64_t v39 = llvm::ConstantInt::get();
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 721), v39);
  }
  llvm::FixedVectorType::get();
  uint64_t AlignedLoad = (llvm::Value *)llvm::UndefValue::get();
  if (!v5)
  {
    if (v4 >= 2) {
      goto LABEL_39;
    }
    return AGCLLVMBuilder::truncateToSmall((uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 32), AlignedLoad, v4);
  }
  for (uint64_t i = 0; i != v5; uint64_t i = (llvm::Value *)((char *)i + 1))
  {
    uint64_t v41 = (uint64_t)a1 + *(void *)(*a1 - 24);
    ConstInBoundsGEP1_32 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP1_32((AGCLLVMBuilder *)(v41 + 32), v20, i);
    __int16 v72 = 257;
    uint64_t v44 = AGCLLVMBuilder::tryDeducePointeeType(ConstInBoundsGEP1_32, v43);
    uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v41 + 40), v44, (uint64_t)ConstInBoundsGEP1_32, 0, (uint64_t)v71);
    uint64_t v46 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v47 = (llvm::Value *)a1[723];
    __int16 v72 = 257;
    uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v46, v45, v47, (const llvm::Twine *)v71);
    uint64_t v49 = (uint64_t)a1 + *(void *)(*a1 - 24);
    __int16 v72 = 257;
    size_t v50 = (llvm::IRBuilderBase *)(v49 + 40);
    uint64_t v51 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v50, AlignedLoad, Element, v51, (const llvm::Twine *)v71);
  }
  if (v5 == 1)
  {
    uint64_t v52 = (uint64_t)a1 + *(void *)(*a1 - 24);
    __int16 v72 = 257;
    uint64_t v53 = (llvm::IRBuilderBase *)(v52 + 40);
    unsigned int v54 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v53, AlignedLoad, v54, (const llvm::Twine *)v71);
    if (v4 < 2) {
      return AGCLLVMBuilder::truncateToSmall((uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 32), AlignedLoad, v4);
    }
    goto LABEL_13;
  }
LABEL_11:
  if (v4 >= 2)
  {
    if (v5 == 1)
    {
LABEL_13:
      uint64_t v18 = *a1;
      uint64_t v19 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 232);
LABEL_40:
      uint64_t v55 = (uint64_t)a1 + *(void *)(v18 - 24) + 40;
      __int16 v72 = 257;
      uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v55, 49, (uint64_t)AlignedLoad, v19, (uint64_t)v71);
      return AGCLLVMBuilder::truncateToSmall((uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 32), AlignedLoad, v4);
    }
LABEL_39:
    uint64_t v19 = llvm::FixedVectorType::get();
    uint64_t v18 = *a1;
    goto LABEL_40;
  }
  return AGCLLVMBuilder::truncateToSmall((uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 32), AlignedLoad, v4);
}

llvm::Value *AGCLLVMBuilder::truncateToSmall(uint64_t *a1, llvm::Value *a2, int a3)
{
  uint64_t v3 = a2;
  switch(a3)
  {
    case 1:
      uint64_t v5 = a1 + 19;
      goto LABEL_6;
    case 2:
      uint64_t v5 = a1 + 22;
      goto LABEL_6;
    case 4:
    case 8:
      uint64_t v5 = a1 + 24;
      goto LABEL_6;
    case 5:
    case 9:
      uint64_t v5 = a1 + 23;
LABEL_6:
      uint64_t v6 = *v5;
      if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
        uint64_t v6 = llvm::FixedVectorType::get();
      }
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
        unsigned int v7 = *(unsigned __int8 *)(**(void **)(v6 + 16) + 8);
      }
      else {
        unsigned int v7 = *(_DWORD *)(v6 + 8);
      }
      unint64_t v8 = (llvm::IRBuilderBase *)(a1 + 1);
      __int16 v12 = 257;
      if (v7 > 6) {
        uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v8, 38, (uint64_t)v3, v6, (uint64_t)v11);
      }
      else {
        uint64_t Cast = llvm::IRBuilderBase::CreateFPTrunc(v8, v3, (llvm::Type *)v6, (const llvm::Twine *)v11);
      }
      uint64_t v3 = (llvm::Value *)Cast;
      break;
    default:
      return v3;
  }
  return v3;
}

uint64_t AGCLLVMUserObject::replaceBufferInputArgument(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  unsigned int v56 = 1;
  unsigned int v57 = a3;
  int v55 = 0;
  uint64_t v54 = 0;
  unsigned __int8 v53 = 0;
  uint64_t v52 = 0;
  char v51 = 0;
  unsigned int v8 = *(_DWORD *)(*a2 + 8);
  if ((v8 & 0xFE) == 0x12) {
    unsigned int v8 = *(_DWORD *)(**(void **)(*a2 + 16) + 8);
  }
  char v50 = 0;
  parseMDBuffer(a4, v8 >> 8, &v57, &v56, (unsigned int *)&v55, (_DWORD *)&v54 + 1, &v52, &v50, &v53, (int *)&v54, &v51);
  int v9 = v53;
  *(unsigned char *)(a1 + 3560) |= v53;
  if (a5 != -1) {
    unsigned int v57 = a5;
  }
  if (v51) {
    operator new();
  }
  uint64_t v10 = **(llvm::ArrayType ***)(*a2 + 16);
  if (*((unsigned char *)v10 + 8) == 15)
  {
    unsigned int v11 = v56;
    __int16 v12 = (llvm::Type *)llvm::ArrayType::get(v10, (llvm::Type *)v56);
    unsigned int v13 = v57;
    v61[0] = "agc.buffer_pointers_array.";
    uint64_t v62 = v57;
    __int16 v63 = 2051;
    uint64_t v49 = (uint64_t)v12;
    GlobalBufferBinding = (uint64_t *)AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v12, (const llvm::Twine *)v61, v57 & 0xFFFFF, 0, 5, 0);
    unsigned int v15 = *(uint64_t ***)(a1 + 944);
    if (!v15) {
      operator new();
    }
    uint64_t result = (uint64_t)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v15, v13, &v57);
    *(_DWORD *)(result + 32) = v11;
    uint64_t v17 = a2[1];
    if (v17)
    {
      uint64_t v18 = a1 + 8;
      do
      {
        uint64_t v19 = *(void *)(v17 + 24);
        uint64_t v17 = *(void *)(v17 + 8);
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40), (llvm::Instruction *)v19);
        if (*(unsigned char *)(v19 + 16) == 60)
        {
          uint64_t v21 = *(void *)(*(void *)a1 - 24) + a1;
          __int16 v60 = 257;
          llvm::Type::getInt32Ty(*(llvm::Type **)(v21 + 104), v20);
          v58[0] = (uint64_t *)llvm::ConstantInt::get();
          llvm::Type::getInt32Ty(*(llvm::Type **)(v21 + 104), v22);
          v58[1] = (uint64_t *)llvm::ConstantInt::get();
          uint64_t v24 = (llvm::Type **)(*(uint64_t (**)(void, void, uint64_t *, uint64_t **, uint64_t, void))(**(void **)(v21 + 112) + 48))(*(void *)(v21 + 112), 0, GlobalBufferBinding, v58, 2, 0);
          if (!v24)
          {
            __int16 v63 = 257;
            uint64_t v24 = (llvm::Type **)llvm::GetElementPtrInst::Create(0, GlobalBufferBinding, v58, 2);
            llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)(v21 + 40), (uint64_t)v24, (uint64_t)v59);
          }
          uint64_t v25 = *(void *)(*(void *)a1 - 24) + v18;
          __int16 v63 = 257;
          unsigned int v26 = AGCLLVMBuilder::tryDeducePointeeType(v24, v23);
          llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v25 + 32), v26, (uint64_t)v24, 0, (uint64_t)v61);
          llvm::Value::replaceAllUsesWith();
        }
        else
        {
          v59[0] = 0;
          v59[1] = 0;
          v59[0] = (void *)llvm::ConstantInt::get();
          v59[1] = *(void **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 32);
          uint64_t v27 = *(void *)(*(void *)a1 - 24) + v18 + 32;
          __int16 v63 = 257;
          uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v27, v49, GlobalBufferBinding, (uint64_t **)v59, 2, (uint64_t)v61);
          uint64_t v29 = *(void *)(*(void *)a1 - 24) + v18;
          __int16 v63 = 257;
          uint64_t v31 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v30);
          llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v29 + 32), v31, (uint64_t)GEP, 0, (uint64_t)v61);
          uint64_t v32 = *(void *)(v19 + 8);
          if (v32)
          {
            do
            {
              uint64_t v33 = *(void *)(v32 + 8);
              uint64_t v34 = *(llvm::Instruction **)(v32 + 24);
              llvm::Value::replaceAllUsesWith();
              llvm::Instruction::eraseFromParent(v34);
              uint64_t v32 = v33;
            }
            while (v33);
          }
        }
        uint64_t result = llvm::Instruction::eraseFromParent((llvm::Instruction *)v19);
      }
      while (v17);
    }
  }
  else
  {
    unsigned int v35 = v57;
    (*(void (**)(uint64_t, uint64_t *, void, uint64_t))(*(void *)a1 + 288))(a1, a2, v57, 0xFFFFFFFFLL);
    uint64_t v36 = *(void *)(*(void *)(a1 + 176) + 80);
    if (v36) {
      uint64_t v37 = v36 - 24;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v38 = *(void *)(v37 + 40);
    if (v38) {
      uint64_t v39 = (llvm::Instruction *)(v38 - 24);
    }
    else {
      uint64_t v39 = 0;
    }
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40), v39);
    if (v9) {
      uint64_t v40 = v54;
    }
    else {
      uint64_t v40 = 0xFFFFFFFFLL;
    }
    uint64_t v41 = AGCLLVMUserObject::setupBufferArgumentData((AGCLLVMUserObject *)a1, *a2, v35, 0xFFFFFFFF, v55, v50, v40);
    uint64_t v43 = v42;
    llvm::Value::replaceAllUsesWith();
    uint64_t result = llvm::Argument::hasAttribute();
    if (result)
    {
      uint64_t inserted = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
      if (!llvm::NamedMDNode::getNumOperands(inserted))
      {
        v61[0] = llvm::MDString::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
      }
      llvm::Module::getOrInsertNamedMetadata();
      uint64_t Operand = llvm::NamedMDNode::getOperand(inserted);
      v61[0] = llvm::ValueAsMetadata::get();
      v61[1] = Operand;
      llvm::Value::getName(v43);
      uint64_t v62 = llvm::MDString::get();
      uint64_t Impl = llvm::MDTuple::getImpl();
      llvm::MDNode::replaceOperandWith();
      uint64_t result = llvm::NamedMDNode::addOperand();
      unsigned int v47 = *(_DWORD *)(a1 + 3880);
      if (v47 >= *(_DWORD *)(a1 + 3884)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      size_t v48 = (uint64_t *)(*(void *)(a1 + 3872) + 16 * v47);
      uint64_t *v48 = v41;
      v48[1] = Impl;
      ++*(_DWORD *)(a1 + 3880);
    }
  }
  return result;
}

uint64_t AGCLLVMAGPFragmentShader::adjustFragCoordY(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t *std::__tree<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::__emplace_unique_key_args<AGCLLVMUserObject::Texture,AGCLLVMUserObject::Texture const&>(uint64_t *result, unsigned int a2, _OWORD *a3)
{
  unsigned int v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = (uint64_t **)(result + 1);
LABEL_9:
    int v9 = (uint64_t *)operator new(0x50uLL);
    long long v10 = a3[1];
    *((_OWORD *)v9 + 2) = *a3;
    *((_OWORD *)v9 + 3) = v10;
    *((_OWORD *)v9 + 4) = a3[2];
    return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t AGCLLVMUserObject::remapTexSampUnit(AGCLLVMUserObject *this, uint64_t a2)
{
  return a2;
}

void AGCLLVMAGPVertexShaderRegular::promoteInput(AGCLLVMAGPVertexShaderRegular *this, llvm::Value *a2, int a3, int a4)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1734)
    && *(_OWORD *)((char *)this + 10056) != 0)
  {
    if (a4 == -1) {
      snprintf(__str, 0x20uLL, "arg%d");
    }
    else {
      snprintf(__str, 0x20uLL, "arg%d.%d");
    }
    unsigned int v8 = **(llvm::Type ***)(*(void *)a2 + 16);
    uint64_t v174 = v8;
    int v9 = (*((_DWORD *)v8 + 2) & 0xFE) == 0x12
       ? *(unsigned __int8 *)(**((void **)v8 + 2) + 8)
       : *((_DWORD *)v8 + 2);
    if (v9 != 15 && llvm::Type::isSized((uint64_t)v8))
    {
      unint64_t TypeAllocSize = (void *)llvm::DataLayout::getTypeAllocSize((AGCLLVMAGPVertexShaderRegular *)((char *)this + 232), v8);
      uint64_t v185 = v10;
      unsigned int v17 = llvm::TypeSize::operator unsigned long long();
      if ((v17 & 3) != 0)
      {
        printMessage((char **)&AGCPrinter, "Cannot DMA promote %s : type size %u not a multiple of 4", v11, v12, v13, v14, v15, v16, (char)__str);
      }
      else
      {
        int v173 = 0;
        BOOL v169 = 0;
        uint64_t v168 = 0;
        uint64_t v171 = 0;
        unint64_t v170 = 0;
        char v172 = 0;
        unsigned int v164 = 128;
        char v162 = (llvm *)MEMORY[0x1CB79F270](0x4000, 8);
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty((uint64_t)&v162);
        v165[0] = 0;
        v165[24] = 0;
        __int16 v166 = 1;
        char v167 = 0;
        if ((AGCLLVMAGPVertexShaderRegular::canDMAPromote(this, (uint64_t)a2, (uint64_t)__str, &v173, (uint64_t)&v168, (uint64_t)&v162, v18, v19) & 1) != 0|| AGCLLVMAGPVertexShaderRegular::coerceStridedAccess(this, a2, __str, &v174, v20, v21, v22, v23)&& (v8 = v174, TypeAllocSize = (void *)llvm::DataLayout::getTypeAllocSize((AGCLLVMAGPVertexShaderRegular *)((char *)this + 232), v174), v185 = v69, unsigned int v17 = llvm::TypeSize::operator unsigned long long(), AGCLLVMAGPVertexShaderRegular::canDMAPromote(this, (uint64_t)a2, (uint64_t)__str,
                              &v173,
                              (uint64_t)&v168,
                              (uint64_t)&v162,
                              v70,
                              v71)))
        {
          uint64_t v24 = llvm::UndefValue::get();
          char v190 = &v192;
          uint64_t v191 = 0x800000000;
          unsigned int v158 = v17 >> 2;
          llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v190, v17 >> 2, v24);
          unint64_t v25 = AGCLLVMAGPVertexShaderRegular::analyzeLoads((uint64_t)this, v8, (uint64_t *)&v162);
          unint64_t v33 = v32 + 3;
          unsigned int v34 = ((unint64_t)(v32 + 3) >> 2) - (v25 >> 2);
          unsigned int v35 = (char *)this + *(void *)(*(void *)this - 24);
          unsigned int v36 = *(_DWORD *)(*((void *)v35 + 50) + 888);
          if (v36 >= 0x80) {
            unsigned int v36 = 128;
          }
          if (*((_DWORD *)this + 1256) + v34 >= v36 - 2)
          {
            printMessage((char **)&AGCPrinter, "Cannot DMA promote %s : ran out of vi's, need %u, already allocated %u, limit %u", v26, v27, v28, v29, v30, v31, (char)__str);
          }
          else
          {
            unint64_t v37 = v25;
            unint64_t v157 = v25 >> 2;
            uint64_t v38 = (llvm::IRBuilderBase *)(v35 + 40);
            uint64_t v39 = *(void *)(*((void *)this + 22) + 80);
            if (v39) {
              uint64_t v40 = v39 - 24;
            }
            else {
              uint64_t v40 = 0;
            }
            uint64_t v41 = *(void *)(v40 + 40);
            if (v41) {
              uint64_t v42 = (llvm::Instruction *)(v41 - 24);
            }
            else {
              uint64_t v42 = 0;
            }
            llvm::IRBuilderBase::SetInsertPoint(v38, v42);
            int v156 = *((_DWORD *)this + 1256);
            if (v17 >= 4)
            {
              unint64_t v43 = 0;
              unint64_t v44 = (v33 >> 2);
              unint64_t v45 = (v37 >> 2);
              if (v158 <= 1) {
                uint64_t v46 = 1;
              }
              else {
                uint64_t v46 = v158;
              }
              do
              {
                if (v43 >= v45 && v43 < v44)
                {
                  ++*((_DWORD *)this + 1256);
                  VIRead = AGCLLVMUserVertexShader::createVIRead(this);
                  v190[v43] = (uint64_t)VIRead;
                }
                ++v43;
              }
              while (v46 != v43);
            }
            int v48 = v166;
            uint64_t v176 = "vertex_input";
            __int16 v179 = 259;
            __int16 v183 = 264;
            LODWORD(v180) = a3;
            llvm::operator+((uint64_t)&TypeAllocSize, (uint64_t *)&v176, (uint64_t *)&v180);
            v154 = AGCLLVMAGPVertexShaderRegular::materializeVertexAttribute(this, v8, v48, &v190, (uint64_t)&TypeAllocSize);
            printMessage((char **)&AGCPrinter, "DMA promoting %s to VI, attribute std::string::size_type size = %u words, only words [%u .. %u] actually used", v49, v50, v51, v52, v53, v54, (char)__str);
            BOOL v55 = v173 == 2;
            printMessage((char **)&AGCPrinter, "DMA Entry = {reg_offset: %u, size : %u, offset %u, stride; %u, instanced: %s, div: %u, base_after_divisor: %s}",
              v56,
              v57,
              v58,
              v59,
              v60,
              v61,
              v156);
            LODWORD(v168) = v156;
            int v62 = a4;
            __int16 v63 = v154;
            _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&TypeAllocSize, a3, v62);
            HIDWORD(v168) = TypeAllocSize;
            unint64_t v170 = __PAIR64__(v157, v34);
            LODWORD(v171) = v158;
            BOOL v169 = v55;
            uint64_t v64 = (_OWORD *)llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>((uint64_t)this + 9464, (unint64_t)&v168);
            int v65 = (_OWORD *)(*((void *)this + 1183) + 32 * *((unsigned int *)this + 2368));
            long long v66 = v64[1];
            *int v65 = *v64;
            v65[1] = v66;
            ++*((_DWORD *)this + 2368);
            if (*((unsigned char *)v154 + 16) == 60)
            {
              uint64_t Alloca = (uint64_t *)*((void *)v154 - 4);
              long long v68 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + 232);
            }
            else
            {
              if (v167)
              {
                __int16 v72 = (llvm::BasicBlock **)((char *)this + *(void *)(*(void *)this - 24) + 40);
                LOWORD(v188) = 257;
                uint64_t Alloca = (uint64_t *)llvm::IRBuilderBase::CreateAlloca(v72, v8, 0, (const llvm::Twine *)&TypeAllocSize);
                llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Type **)v154, (uint64_t)Alloca, 0);
              }
              else
              {
                uint64_t Alloca = 0;
              }
              long long v68 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + 232);
            }
            int v73 = v163;
            if (v163)
            {
              uint64_t v74 = (char *)this + 8;
              do
              {
                int v75 = v162;
                uint64_t v76 = v164;
                if (v164)
                {
                  unint64_t v77 = (unint64_t)v164 << 7;
                  unsigned int v78 = (llvm::Instruction **)((char *)v162 + 24);
                  unint64_t v79 = v77;
                  while (1)
                  {
                    char v80 = *v78;
                    if (((unint64_t)*v78 | 0x1000) != 0xFFFFFFFFFFFFF000) {
                      break;
                    }
                    v78 += 16;
                    v79 -= 128;
                    if (!v79)
                    {
                      char v80 = (llvm::Instruction *)*((void *)v162 + 16 * (unint64_t)v164 + 3);
                      break;
                    }
                  }
                  char v81 = v162;
                  while ((*((void *)v81 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    char v81 = (llvm *)((char *)v81 + 128);
                    v77 -= 128;
                    if (!v77)
                    {
                      char v81 = (llvm *)((char *)v162 + 128 * (unint64_t)v164);
                      break;
                    }
                  }
                }
                else
                {
                  char v80 = (llvm::Instruction *)*((void *)v162 + 3);
                  char v81 = v162;
                }
                unint64_t TypeAllocSize = &v186;
                uint64_t v185 = 0x800000000;
                if (*((_DWORD *)v81 + 12))
                {
                  llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&TypeAllocSize, (uint64_t)v81 + 40);
                  int v75 = v162;
                  int v73 = v163;
                  uint64_t v76 = v164;
                }
                uint64_t v189 = *((void *)v81 + 15);
                char v82 = (llvm *)((char *)v75 + 128 * v76);
                if (v73)
                {
                  if (v76)
                  {
                    uint64_t v83 = v76 << 7;
                    while ((*((void *)v75 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
                    {
                      int v75 = (llvm *)((char *)v75 + 128);
                      v83 -= 128;
                      if (!v83)
                      {
                        int v75 = v82;
                        break;
                      }
                    }
                  }
                }
                else
                {
                  int v75 = (llvm *)((char *)v75 + 128 * v76);
                }
                llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::erase((int32x2_t *)&v162, v75);
                unint64_t v84 = v185;
                llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPVertexShaderRegular *)((char *)this + *(void *)(*(void *)this - 24) + 40), v80);
                if (v84)
                {
                  if ((_BYTE)v189)
                  {
                    unint64_t v180 = v182;
                    uint64_t v181 = 0xC00000000;
                    llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)&v180, v84, 0);
                    std::string v85 = (char *)TypeAllocSize;
                    __int16 v86 = v180;
                    uint64_t v87 = v180;
                    unint64_t v88 = v84;
                    do
                    {
                      long long v89 = (void *)(*(void *)v85 + 24);
                      if (*(_DWORD *)(*(void *)v85 + 32) >= 0x41u) {
                        long long v89 = (void *)*v89;
                      }
                      *v87++ = *v89;
                      v85 += 8;
                      --v88;
                    }
                    while (v88);
                    switch(HIDWORD(v189))
                    {
                      case 0:
                        AGCLLVMAGPVertexShaderRegular::createExtractFromVertexAttribute(this, (uint64_t)v63, (uint64_t)v86, v181);
                        break;
                      case 1:
                        std::string v107 = (llvm::Value *)AGCLLVMAGPVertexShaderRegular::createExtractFromVertexAttribute(this, (uint64_t)v63, (uint64_t)v86, v181);
                        AGCLLVMBuilder::extendVector((AGCLLVMAGPVertexShaderRegular *)((char *)this + *(void *)(*(void *)this - 24) + 32), v107, *(_DWORD *)(*(void *)v80 + 32));
                        break;
                      case 2:
                        uint64_t v176 = (void *)((llvm::DataLayout::getTypeSizeInBits(v68, *(llvm::Type **)v80) + 7) >> 3);
                        uint64_t v177 = v108 == 1;
                        unsigned int v109 = llvm::TypeSize::operator unsigned long long();
                        unsigned int v110 = v109 >> 2;
                        if ((*(_DWORD *)(*(void *)v80 + 8) & 0xFE) == 0x10)
                        {
                          uint64_t v111 = Alloca;
                          uint64_t v112 = *(llvm::ArrayType **)(**(void **)(*(void *)v80 + 16) + 24);
                          llvm::ArrayType::get(v112, (llvm::Type *)v110);
                          uint64_t InsertValue = llvm::UndefValue::get();
                          unsigned int v161 = 0;
                          if (v109 >= 4)
                          {
                            uint64_t v126 = v180;
                            do
                            {
                              uint64_t v127 = AGCLLVMAGPVertexShaderRegular::createExtractFromVertexAttribute(this, (uint64_t)v63, (uint64_t)v126, v181);
                              int v128 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                              __int16 v179 = 257;
                              uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v128, 49, v127, (uint64_t)v112, (uint64_t)&v176);
                              __int16 v160 = 257;
                              uint64_t InsertValue = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v128, InsertValue, Cast, (uint64_t)&v161, 1, (uint64_t)v159);
                              uint64_t v126 = v180;
                              ++*((_DWORD *)v180 + (v84 - 1));
                              ++v161;
                            }
                            while (v161 < v110);
                          }
                          uint64_t v130 = llvm::UndefValue::get();
                          uint64_t v131 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                          v159[0] = 0;
                          __int16 v179 = 257;
                          llvm::IRBuilderBase::CreateInsertValue((uint64_t)v131, v130, InsertValue, (uint64_t)v159, 1, (uint64_t)&v176);
                          uint64_t Alloca = v111;
                          uint64_t v74 = (char *)this + 8;
                          long long v68 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + 232);
                        }
                        else
                        {
                          uint64_t v122 = *((void *)v80 - 4);
                          if (*(unsigned char *)(v122 + 16) == 62)
                          {
                            uint64_t v123 = AGCLLVMAGPVertexShaderRegular::createExtractFromVertexAttribute(this, (uint64_t)v63, (uint64_t)v180, v181);
                            size_t v124 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                            uint64_t v125 = *(void *)v80;
                            __int16 v179 = 257;
                            llvm::IRBuilderBase::CreateCast((uint64_t)v124, 49, v123, v125, (uint64_t)&v176);
                            long long v68 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + 232);
                          }
                          else
                          {
                            uint64_t v153 = Alloca;
                            uint64_t v132 = **(void **)(**(void **)(v122 - 32) + 16);
                            llvm::FixedVectorType::get();
                            Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
                            if (v109 >= 4)
                            {
                              uint64_t v134 = 0;
                              uint64_t v135 = (v84 - 1);
                              if (v110 <= 1) {
                                uint64_t v136 = 1;
                              }
                              else {
                                uint64_t v136 = v110;
                              }
                              uint64_t v155 = v136;
                              BOOL v137 = v180;
                              do
                              {
                                uint64_t v138 = AGCLLVMAGPVertexShaderRegular::createExtractFromVertexAttribute(this, (uint64_t)v63, (uint64_t)v137, v181);
                                uint64_t v139 = (AGCLLVMAGPVertexShaderRegular *)((char *)this
                                                                       + *(void *)(*(void *)this - 24)
                                                                       + 40);
                                __int16 v179 = 257;
                                uint64_t v140 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v139, 49, v138, v132, (uint64_t)&v176);
                                __int16 v160 = 257;
                                size_t v141 = (llvm::Value *)llvm::ConstantInt::get();
                                Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v139, InsertElement, v140, v141, (const llvm::Twine *)v159);
                                BOOL v137 = v180;
                                ++*((_DWORD *)v180 + v135);
                                ++v134;
                              }
                              while (v155 != v134);
                            }
                            int v142 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                            uint64_t v143 = *(void *)v80;
                            __int16 v179 = 257;
                            llvm::IRBuilderBase::CreateCast((uint64_t)v142, 49, (uint64_t)InsertElement, v143, (uint64_t)&v176);
                            uint64_t v74 = (char *)this + 8;
                            long long v68 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + 232);
                            uint64_t Alloca = v153;
                          }
                        }
                        break;
                      case 3:
                        uint64_t v176 = v178;
                        uint64_t v177 = 0x800000000;
                        llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v176, (v84 + 1), 0);
                        uint64_t v114 = llvm::ConstantInt::get();
                        uint64_t v115 = 0;
                        *(void *)uint64_t v176 = v114;
                        do
                        {
                          *(void *)((char *)v176 + v115 + 8) = *(void *)((char *)TypeAllocSize + v115);
                          v115 += 8;
                        }
                        while (8 * v84 != v115);
                        uint64_t v116 = (uint64_t)&v74[*(void *)(*(void *)this - 24) + 32];
                        __int16 v160 = 257;
                        uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v116, (uint64_t)v174, Alloca, (uint64_t **)v176, v177, (uint64_t)v159);
                        uint64_t v118 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                        uint64_t v119 = llvm::PointerType::get();
                        __int16 v160 = 257;
                        char v120 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v118, 49, GEP, v119, (uint64_t)v159);
                        uint64_t v121 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + *(void *)(*(void *)this - 24) + 32);
                        __int16 v160 = 257;
                        AGCLLVMBuilder::CreateLoad(v121, v120, (const llvm::Twine *)v159);
                        if (v176 != v178) {
                          free(v176);
                        }
                        break;
                      default:
                        break;
                    }
                    uint64_t v99 = v180;
                    int v100 = v182;
                  }
                  else
                  {
                    uint64_t v176 = v178;
                    uint64_t v177 = 0x800000000;
                    llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v176, (v84 + 1), 0);
                    uint64_t v90 = llvm::ConstantInt::get();
                    uint64_t v91 = 0;
                    *(void *)uint64_t v176 = v90;
                    do
                    {
                      *(void *)((char *)v176 + v91 + 8) = *(void *)((char *)TypeAllocSize + v91);
                      v91 += 8;
                    }
                    while (8 * v84 != v91);
                    uint64_t v92 = (uint64_t)&v74[*(void *)(*(void *)this - 24) + 32];
                    __int16 v183 = 257;
                    uint64_t v94 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v92, (uint64_t)v174, Alloca, (uint64_t **)v176, v177, (uint64_t)&v180);
                    if ((HIDWORD(v189) | 2) == 3)
                    {
                      uint64_t v95 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                      uint64_t v96 = llvm::PointerType::get();
                      __int16 v183 = 257;
                      uint64_t v94 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v95, 49, (uint64_t)v94, v96, (uint64_t)&v180);
                    }
                    uint64_t v97 = &v74[*(void *)(*(void *)this - 24)];
                    __int16 v183 = 257;
                    int v98 = AGCLLVMBuilder::tryDeducePointeeType(v94, v93);
                    llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v97 + 4, v98, (uint64_t)v94, 0, (uint64_t)&v180);
                    uint64_t v99 = v176;
                    int v100 = v178;
                  }
                  if (v99 != v100) {
                    free(v99);
                  }
                }
                else if (HIDWORD(v189) == 3)
                {
                  int v101 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                  uint64_t v102 = llvm::PointerType::get();
                  __int16 v179 = 257;
                  uint64_t v103 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v101, 49, (uint64_t)Alloca, v102, (uint64_t)&v176);
                  std::string v104 = &v74[*(void *)(*(void *)this - 24)];
                  __int16 v179 = 257;
                  std::string v106 = AGCLLVMBuilder::tryDeducePointeeType(v103, v105);
                  llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v104 + 4, v106, (uint64_t)v103, 0, (uint64_t)&v176);
                }
                else if (HIDWORD(v189) == 1)
                {
                  AGCLLVMBuilder::extendVector((AGCLLVMAGPVertexShaderRegular *)((char *)this + *(void *)(*(void *)this - 24) + 32), v63, *(_DWORD *)(*(void *)v80 + 32));
                }
                uint64_t v144 = *((void *)v80 - 4);
                llvm::Value::replaceAllUsesWith();
                llvm::Instruction::eraseFromParent(v80);
                if (!*(void *)(v144 + 8))
                {
                  v175[3] = 0;
                  llvm::RecursivelyDeleteTriviallyDeadInstructions();
                  std::__function::__value_func<void ()(llvm::Value *)>::~__value_func[abi:nn180100](v175);
                }
                if (TypeAllocSize != &v186) {
                  free(TypeAllocSize);
                }
                int v73 = v163;
              }
              while (v163);
            }
          }
          if (v190 != &v192) {
            free(v190);
          }
        }
        llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v165);
        uint64_t v145 = v162;
        if (v164)
        {
          uint64_t v185 = 2;
          uint64_t v186 = 0;
          uint64_t v187 = -4096;
          unint64_t TypeAllocSize = &unk_1F2598998;
          uint64_t v188 = 0;
          uint64_t v191 = 2;
          uint64_t v192 = 0;
          uint64_t v193 = -8192;
          uint64_t v194 = 0;
          char v190 = (uint64_t *)&unk_1F2598998;
          unint64_t v146 = (char *)v162 + 56;
          unint64_t v147 = (unint64_t)v164 << 7;
          do
          {
            uint64_t v148 = *((void *)v146 - 4);
            if (v148 != v187 && v148 != v193)
            {
              int v150 = (char *)*((void *)v146 - 2);
              if (v146 != v150)
              {
                free(v150);
                uint64_t v148 = *((void *)v146 - 4);
              }
            }
            if (v148 != -8192 && v148 != -4096 && v148 != 0) {
              llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v146 - 48));
            }
            v146 += 128;
            v147 -= 128;
          }
          while (v147);
          if (v193 != -8192 && v193 != -4096 && v193) {
            llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v191);
          }
          if (v187 != -8192 && v187 != -4096)
          {
            if (v187) {
              llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v185);
            }
          }
          uint64_t v145 = v162;
          uint64_t v152 = (void *)((unint64_t)v164 << 7);
        }
        else
        {
          uint64_t v152 = 0;
        }
        llvm::deallocate_buffer(v145, v152);
      }
    }
  }
}

uint64_t MTLCompilerBuildRequestWithOptions(void *a1, char *a2, unint64_t a3, char a4, llvm::Module *a5, void *a6, void *a7, uint64_t a8, void *a9, void *a10, void *a11, char **a12)
{
  *a9 = 0;
  *a11 = 0;
  uint64_t v19 = mach_absolute_time();
  int v34 = 0;
  int v26 = AGCCodeGenServiceBuildRequestInternal(a1, a2, a3, 0, 0, a5, &v34, a6, a7);
  if ((a4 & 2) != 0)
  {
    *a11 = 32;
    uint64_t v27 = mach_absolute_time() - v19;
    if (getTimebaseInfo(void)::once != -1) {
      dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_15686);
    }
    unint64_t v28 = v27 * getTimebaseInfo(void)::sTimebaseInfo / *(unsigned int *)algn_1EBD0EA4C;
    unint64_t v29 = v28 - a1[7];
    a1[5] = v28;
    a1[6] = v29;
    *a10 = a1 + 4;
  }
  if (v26)
  {
    uint64_t result = 0;
    *a12 = 0;
  }
  else
  {
    unint64_t v33 = (char *)a1[2];
    uint64_t v32 = (char **)(a1 + 2);
    InternalErrorMessage = v33;
    if (!v33) {
      InternalErrorMessage = generateInternalErrorMessage(v32, v34);
    }
    *a12 = InternalErrorMessage;
    printMessage((char **)&AGCPrinter, "** Compilation failed with error: %s **", v20, v21, v22, v23, v24, v25, (char)InternalErrorMessage);
    return 1;
  }
  return result;
}

uint64_t AGCCodeGenServiceBuildRequestInternal(void *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, llvm::Module *a6, _DWORD *a7, void *a8, void *a9)
{
  uint64_t v11 = 0;
  uint64_t v91 = 0;
  std::string v85 = 0;
  __int16 v86 = 0;
  long long v89 = 0;
  char v93 = 0;
  uint64_t v87 = 0;
  unint64_t v88 = 0;
  unint64_t v84 = 0;
  uint64_t v12 = 0;
  uint64_t v90 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  unint64_t v15 = (unint64_t)&a2[a3];
  uint64_t v16 = a2;
  uint64_t v96 = a7;
  while (2)
  {
    uint64_t v17 = (uint64_t)v12;
    unint64_t v18 = *(unsigned int *)v16;
    if (a3 <= 4 * (v18 >> 8) || (uint64_t v19 = &a2[4 * (v18 >> 8)], (unint64_t)(v19 - 4) >= v15))
    {
LABEL_142:
      int v20 = 0;
      goto LABEL_147;
    }
    int v20 = 0;
    int v21 = *(_DWORD *)v16;
    int64_t v22 = v19 - v16;
    unint64_t v23 = v19 - v16 - 4;
    switch(*(_DWORD *)v16)
    {
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0x34u:
        *a7 = v21;
        ++v13;
        uint64_t v14 = 2;
        goto LABEL_123;
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
        *a7 = v21;
        ++v13;
        uint64_t v14 = 1;
        goto LABEL_123;
      case 0x3Au:
        int v27 = *a7;
        if (*a7 > 0x1Fu || ((1 << v27) & 0xF200800A) == 0)
        {
          unsigned int v28 = v27 - 90;
          if (v28 > 5 || ((1 << v28) & 0x35) == 0) {
            goto LABEL_142;
          }
        }
        if (v23 < 0x60) {
          goto LABEL_142;
        }
        goto LABEL_121;
      case 0x3Bu:
        if (*a7 > 0x32u || ((1 << *a7) & 0x4000000007814) == 0) {
          goto LABEL_142;
        }
        goto LABEL_120;
      case 0x3Cu:
        int v38 = *a7;
        if (*a7 > 0x1Fu || ((1 << v38) & 0xF200800A) == 0)
        {
          unsigned int v39 = v38 - 90;
          if (v39 > 5 || ((1 << v39) & 0x35) == 0) {
            goto LABEL_142;
          }
        }
        if (v19 - v16 == 4) {
          goto LABEL_142;
        }
        goto LABEL_121;
      case 0x3Du:
        BOOL v41 = *a7 == 9 || *a7 == 26;
        if (v19 - v16 == 4 || !v41) {
          goto LABEL_142;
        }
        goto LABEL_121;
      case 0x3Eu:
        if (v19 - v16 == 4 || *a7 != 10) {
          goto LABEL_142;
        }
        goto LABEL_121;
      case 0x3Fu:
        int v29 = *a7;
        if (*a7 <= 0x32u && ((1 << v29) & 0x4000000007814) != 0)
        {
          if (v23 < 0x48) {
            goto LABEL_142;
          }
        }
        else if (v23 < 0x48 || v29 != 5)
        {
          goto LABEL_142;
        }
LABEL_121:
        uint64_t v11 = v16 + 4;
LABEL_122:
        ++v13;
        goto LABEL_123;
      case 0x40u:
        if (v23 < 0x84) {
          goto LABEL_142;
        }
        goto LABEL_122;
      case 0x41u:
        if (v23 < 0x40) {
          goto LABEL_142;
        }
        goto LABEL_123;
      case 0x42u:
        uint64_t v83 = v11;
        unsigned int v43 = *a7;
        if (*a7 <= 0x32u && ((1 << v43) & 0x4000000007834) != 0)
        {
          if (v23 < 0x28) {
            goto LABEL_141;
          }
        }
        else
        {
          unint64_t v51 = v15;
          uint64_t v52 = v14;
          BOOL v53 = isComputeShader(v43);
          if (v23 < 0x28 || (a7 = v96, uint64_t v14 = v52, v15 = v51, !v53))
          {
LABEL_141:
            int v20 = 0;
            uint64_t v11 = v83;
            goto LABEL_147;
          }
        }
        ++v13;
        uint64_t v12 = (const unsigned __int8 *)v17;
        uint64_t v11 = v83;
LABEL_123:
        uint64_t v16 = v19;
        if (v21 != 96) {
          continue;
        }
        if ((v13 - 2) >= 8) {
          int v20 = 0;
        }
        else {
          int v20 = v14;
        }
        uint64_t v17 = (uint64_t)v12;
LABEL_147:
        uint64_t v54 = v11;
        char v55 = 0;
        uint64_t v56 = a6;
        uint64_t v57 = a1[8];
        if (!a6 && v20 != 1) {
          char v55 = (***(uint64_t (****)(void))(v57 + 32))(*(void *)(v57 + 32));
        }
        *(unsigned char *)(v57 + 377) = v55;
        if ((v20 - 1) >= 2)
        {
          uint64_t v61 = 0;
          a1[2] = strdup("compiler plugin input state failed validation");
          return v61;
        }
        MEMORY[0x1CB79EDB0](v99);
        if (a6) {
          goto LABEL_156;
        }
        if (a5)
        {
          if (!OGLCodeGenService::oglCodeGenService) {
            operator new();
          }
          uint64_t v56 = (llvm::Module *)(*(uint64_t (**)(char *, uint64_t))(OGLCodeGenService::oglCodeGenService + 16))(v99, a4);
LABEL_156:
          uint64_t v58 = (llvm::Module *)AGCGetReplacementIR(v56, (llvm::LLVMContext *)v99);
          if (v58)
          {
            uint64_t v59 = v58;
            if (v56)
            {
              uint64_t v60 = MEMORY[0x1CB79FA40](v56);
              MEMORY[0x1CB7A0780](v60, 0x10B2C407FF26C1CLL);
            }
          }
          else
          {
            uint64_t v59 = v56;
          }
        }
        else
        {
          uint64_t v59 = (llvm::Module *)AGCGetReplacementIR(0, (llvm::LLVMContext *)v99);
        }
        int v62 = *v96;
        __int16 v63 = (AGCLLVMCtx *)a1[8];
        AGCLLVMCtx::createGraphicsPasses(v63);
        uint64_t v61 = 0;
        switch(v62)
        {
          case 1:
            operator new();
          case 2:
            int v101 = (const char *)&unk_1F25DAD88;
            uint64_t v102 = (uint64_t)v54;
            *(void *)&long long v103 = 0;
            *((void *)&v103 + 1) = v54;
            operator new();
          case 3:
            AGPVertexShaderObject = (char *)AGCLLVMAGPVertexShader::createAGPVertexShaderObject((uint64_t)v63, v59, (uint64_t)v54, v17, v90);
            goto LABEL_228;
          case 4:
            int v101 = (const char *)&unk_1F25DAD88;
            uint64_t v102 = (uint64_t)v54;
            long long v103 = (unint64_t)v54;
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *))(**((void **)v63 + 4) + 64))(*((void **)v63 + 4));
            goto LABEL_228;
          case 5:
            __dst[0] = &unk_1F25DAD88;
            __dst[1] = v54;
            __dst[2] = v54;
            __dst[3] = 0;
            int v101 = "air.kernel";
            LOWORD(v104) = 259;
            uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v59, (const llvm::Twine *)&v101);
            uint64_t v70 = (uint64_t *)*((void *)v63 + 4);
            uint64_t v71 = *v70;
            if (NamedMetadata) {
              AGPVertexShaderObject = (char *)(*(uint64_t (**)(void))(v71 + 56))();
            }
            else {
              AGPVertexShaderObject = (char *)(*(uint64_t (**)(uint64_t *))(v71 + 64))(v70);
            }
            goto LABEL_228;
          case 6:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, llvm::Module *, unsigned char *))(**((void **)v63 + 4) + 48))(*((void **)v63 + 4), v63, v59, v54);
            goto LABEL_228;
          case 7:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, llvm::Module *, _DWORD *))(**((void **)v63 + 4) + 208))(*((void **)v63 + 4), v63, v59, v87);
            goto LABEL_228;
          case 8:
            operator new();
          case 9:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, llvm::Module *, unsigned char *))(**((void **)v63 + 4) + 96))(*((void **)v63 + 4), v63, v59, v54);
            goto LABEL_228;
          case 10:
            uint64_t v72 = **((void **)v63 + 4);
            if ((v54[16] & 0x80) != 0) {
              AGPVertexShaderObject = (char *)(*(uint64_t (**)(void))(v72 + 120))();
            }
            else {
              AGPVertexShaderObject = (char *)(*(uint64_t (**)(void))(v72 + 112))();
            }
            goto LABEL_228;
          case 11:
            operator new();
          case 12:
            operator new();
          case 13:
            operator new();
          case 14:
            operator new();
          case 15:
            operator new();
          case 16:
            operator new();
          case 17:
            AGCLLVMDriverSparseShaders::create(v63, (AGCLLVMCtx *)v99, (llvm::LLVMContext *)*v86);
          case 18:
            AGCLLVMDriverFastClearShaders::create((uint64_t)v63, (uint64_t)v99, *v91);
          case 19:
            operator new();
          case 20:
            AGCLLVMDriverExecuteIndirectESLGenerationShader::create(v63, (AGCLLVMCtx *)v99, v64);
          case 21:
            AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::create(v63, (AGCLLVMCtx *)v99, v64);
          case 22:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, char *))(**((void **)v63 + 4) + 152))(*((void **)v63 + 4), v63, v99);
            goto LABEL_228;
          case 23:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, char *))(**((void **)v63 + 4) + 144))(*((void **)v63 + 4), v63, v99);
            goto LABEL_228;
          case 24:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, char *, _DWORD *))(**((void **)v63 + 4) + 176))(*((void **)v63 + 4), v63, v99, v88);
            goto LABEL_228;
          case 25:
            int v73 = *v85 & 3;
            if (v73 == 2) {
              int v74 = ((v73 - 1) < 2) | 2;
            }
            else {
              int v74 = (v73 - 1) < 2;
            }
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, char *, void))(**((void **)v63 + 4) + 40))(*((void **)v63 + 4), v63, v99, v74 | *v85 & 4u);
            goto LABEL_228;
          case 26:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, char *, void, void, void))(**((void **)v63 + 4) + 104))(*((void **)v63 + 4), v63, v99, *v84 & 1, (*v84 >> 1) & 1, (*v84 >> 2) & 1);
            goto LABEL_228;
          case 28:
            operator new();
          case 29:
          case 30:
            int v65 = *(uint64_t (**)(void))(**((void **)v63 + 4) + 32);
            goto LABEL_203;
          case 31:
            int v65 = *(uint64_t (**)(void))(**((void **)v63 + 4) + 32);
            goto LABEL_203;
          case 32:
            int v65 = *(uint64_t (**)(void))(**((void **)v63 + 4) + 32);
LABEL_203:
            AGPVertexShaderObject = (char *)v65();
            goto LABEL_228;
          case 33:
          case 35:
            long long v66 = v63;
            uint64_t v67 = 1;
            goto LABEL_167;
          case 34:
          case 36:
            long long v66 = v63;
            uint64_t v67 = 0;
LABEL_167:
            AGCLLVMContextSwitchProgram::create(v66, (AGCLLVMCtx *)v99, (llvm::LLVMContext *)v67);
          case 37:
          case 38:
          case 39:
            operator new();
          case 40:
            {
              pluginCreateLLVMObject(AGCLLVMCtx &,_AGCStreamToken,llvm::LLVMContext &,llvm::Module *,CompilationState &)::computeCS = 0;
              *(void *)algn_1EA612A88 = 0;
              qword_1EA612A90 = 0;
            }
            AGCLLVMDriverTGSizeOptimizationShader::create((uint64_t)v63, (uint64_t)v99);
          case 41:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, char *))(**((void **)v63 + 4) + 160))(*((void **)v63 + 4), v63, v99);
            goto LABEL_228;
          case 42:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, char *, _DWORD *))(**((void **)v63 + 4) + 168))(*((void **)v63 + 4), v63, v99, v89);
            goto LABEL_228;
          case 43:
            AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader::create((uint64_t)v63, (uint64_t)v99, v93);
          case 44:
            AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader::create((uint64_t)v63, (uint64_t)v99, v93);
          case 45:
            AGCLLVMDriverTessellationBucketedSumInstanceCountsShader::create(v63, (AGCLLVMCtx *)v99, v64);
          case 46:
            AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader::create((uint64_t)v63, (uint64_t)v99, v93);
          case 47:
            AGCLLVMDriverVDMNOPDBGShader::create(v63, (AGCLLVMCtx *)v99, v64);
          case 48:
            AGCLLVMDriverTessellationClearInstanceCountsShader::create(v63, (AGCLLVMCtx *)v99, v64);
          case 49:
            operator new();
          case 50:
            operator new();
          case 52:
            operator new();
          case 54:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, char *))(**((void **)v63 + 4) + 184))(*((void **)v63 + 4), v63, v99);
            goto LABEL_228;
          case 55:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, char *))(**((void **)v63 + 4) + 192))(*((void **)v63 + 4), v63, v99);
            goto LABEL_228;
          case 56:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, char *))(**((void **)v63 + 4) + 200))(*((void **)v63 + 4), v63, v99);
            goto LABEL_228;
          case 90:
            AGCLLVMDriverGPUGatherVertexShader::create(v63, (AGCLLVMCtx *)v99, v64);
          case 91:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, char *))(**((void **)v63 + 4) + 128))(*((void **)v63 + 4), v63, v99);
            goto LABEL_228;
          case 92:
            AGCLLVMDriverPDSPatchUpVertexShader::create(v63, (AGCLLVMCtx *)v99, v64);
          case 93:
            AGPVertexShaderObject = (char *)(*(uint64_t (**)(void *, AGCLLVMCtx *, char *))(**((void **)v63 + 4) + 136))(*((void **)v63 + 4), v63, v99);
LABEL_228:
            int v75 = AGPVertexShaderObject;
            if (AGPVertexShaderObject)
            {
              if ((**(uint64_t (***)(char *))AGPVertexShaderObject)(AGPVertexShaderObject))
              {
                *((void *)&v103 + 1) = 0;
                uint64_t v61 = (*(uint64_t (**)(char *, void *, void *, void *, const char **))(*(void *)v75 + 8))(v75, a1, a1 + 1, a1 + 4, &v101);
                std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](&v101);
LABEL_238:
                (*(void (**)(char *))(*(void *)v75 + 32))(v75);
                goto LABEL_239;
              }
              uint64_t v76 = v75 + 8;
              if (v75[31] < 0)
              {
                if (!*((void *)v75 + 2))
                {
LABEL_237:
                  uint64_t v61 = 0;
                  goto LABEL_238;
                }
                uint64_t v76 = *(const char **)v76;
              }
              else if (!v75[31])
              {
                goto LABEL_237;
              }
              uint64_t v61 = 0;
              a1[2] = strdup(v76);
              goto LABEL_238;
            }
            uint64_t v61 = 0;
LABEL_239:
            llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v99);
            *a8 = *a1;
            *a9 = a1[1];
            break;
          case 94:
            AGCLLVMDriverVRRPatchVertexShader::create(v63, (AGCLLVMCtx *)v99, v64);
          case 95:
            AGCLLVMDriverFastClearVertexShaders::create((uint64_t)v63, (uint64_t)v99, *v91);
          default:
            goto LABEL_239;
        }
        return v61;
      case 0x43u:
        if (v23 < 8 || *a7 != 5) {
          goto LABEL_142;
        }
        goto LABEL_122;
      case 0x44u:
        if (*a7 <= 0x32u && ((1 << *a7) & 0x4000000007814) != 0 && v23 < 8) {
          goto LABEL_142;
        }
        goto LABEL_122;
      case 0x45u:
        if (v23 < 0x50) {
          goto LABEL_142;
        }
        goto LABEL_122;
      case 0x46u:
        if (v23 < 4) {
          goto LABEL_142;
        }
        goto LABEL_122;
      case 0x47u:
        if (v23 < 4) {
          goto LABEL_142;
        }
        goto LABEL_122;
      case 0x48u:
        if (v23 < 4) {
          goto LABEL_142;
        }
        goto LABEL_122;
      case 0x49u:
        if (v23 < 4) {
          goto LABEL_142;
        }
        __int16 v86 = (unsigned __int8 *)(v16 + 4);
        goto LABEL_122;
      case 0x4Au:
        if (v23 < 4) {
          goto LABEL_142;
        }
        uint64_t v91 = (unsigned int *)(v16 + 4);
        goto LABEL_122;
      case 0x4Bu:
        unint64_t v81 = v15;
        unsigned int v82 = v14;
        uint64_t v83 = v11;
        uint64_t v12 = (const unsigned __int8 *)(v16 + 4);
        int v101 = v16 + 4;
        uint64_t v102 = v19 - v16 - 4;
        long long v103 = xmmword_1CADD6270;
        uint64_t v104 = 0;
        char v105 = 1;
        if (v23 < 5) {
          goto LABEL_141;
        }
        unint64_t v30 = *(unsigned int *)v12;
        if ((int)v30 < 1) {
          goto LABEL_141;
        }
        if (v22 - 5 < v30) {
          goto LABEL_141;
        }
        uint64_t v31 = (flatbuffers::Table *)&v12[v30];
        if (!flatbuffers::Verifier::VerifyTableStart((flatbuffers::Verifier *)&v101, &v12[v30])
          || !flatbuffers::Table::VerifyOffset(v31, (const flatbuffers::Verifier *)&v101))
        {
          goto LABEL_141;
        }
        uint64_t v32 = *(int *)v31;
        if (*(unsigned __int16 *)((char *)v31 - v32) < 5u) {
          goto LABEL_65;
        }
        if (!*(_WORD *)((char *)v31 - v32 + 4)) {
          goto LABEL_57;
        }
        if (!flatbuffers::Verifier::VerifyVectorOrString((flatbuffers::Verifier *)&v101, (const unsigned __int8 *)v31+ *(unsigned __int16 *)((char *)v31 - v32 + 4)+ *(unsigned int *)((char *)v31 + *(unsigned __int16 *)((char *)v31 - v32 + 4)), 4uLL, 0))goto LABEL_141; {
        uint64_t v32 = *(int *)v31;
        }
        if (*(unsigned __int16 *)((char *)v31 - v32) < 5u) {
          goto LABEL_65;
        }
LABEL_57:
        uint64_t v33 = *(unsigned __int16 *)((char *)v31 - v32 + 4);
        if (!v33) {
          goto LABEL_65;
        }
        int v34 = (_DWORD *)((char *)v31 + v33 + *(unsigned int *)((char *)v31 + v33));
        if (!*v34) {
          goto LABEL_65;
        }
        unint64_t v35 = 0;
        unsigned int v36 = v34 + 1;
        unint64_t v80 = v102;
        unsigned int v78 = v101;
        unint64_t v79 = (void *)(v102 - 1);
        do
        {
          unint64_t v37 = (const unsigned __int8 *)v36 + *v36;
          __dst[0] = 0;
          if (!flatbuffers::Verifier::VerifyVectorOrString((flatbuffers::Verifier *)&v101, v37, 1uLL, (unint64_t *)__dst)|| v80 < 2|| v79 < __dst[0]|| v78[(unint64_t)__dst[0]])
          {
            goto LABEL_141;
          }
          ++v35;
          ++v36;
        }
        while (v35 < *v34);
LABEL_65:
        ++v13;
LABEL_107:
        uint64_t v11 = v83;
        a7 = v96;
        uint64_t v14 = v82;
        unint64_t v15 = v81;
        goto LABEL_123;
      case 0x4Cu:
        unint64_t v81 = v15;
        unsigned int v82 = v14;
        uint64_t v83 = v11;
        unint64_t v44 = (const unsigned __int8 *)(v16 + 4);
        int v101 = v16 + 4;
        uint64_t v102 = v19 - v16 - 4;
        long long v103 = xmmword_1CADD6270;
        uint64_t v104 = 0;
        char v105 = 1;
        if (v23 < 5) {
          goto LABEL_141;
        }
        unint64_t v45 = *(unsigned int *)v44;
        if ((int)v45 < 1) {
          goto LABEL_141;
        }
        if (v22 - 5 < v45) {
          goto LABEL_141;
        }
        uint64_t v46 = (flatbuffers::Table *)&v44[v45];
        if (!flatbuffers::Verifier::VerifyTableStart((flatbuffers::Verifier *)&v101, &v44[v45])) {
          goto LABEL_141;
        }
        if (!flatbuffers::Table::VerifyOffset(v46, (const flatbuffers::Verifier *)&v101)) {
          goto LABEL_141;
        }
        unsigned int v47 = (unsigned __int16 *)((char *)v46 - *(int *)v46);
        if (*v47 >= 5u)
        {
          uint64_t v48 = v47[2];
          if (v48)
          {
            if (!flatbuffers::Verifier::VerifyVectorOrString((flatbuffers::Verifier *)&v101, (const unsigned __int8 *)v46 + v48 + *(unsigned int *)((char *)v46 + v48), 4uLL, 0))goto LABEL_141; {
          }
            }
        }
        ++v13;
        uint64_t v90 = (uint64_t)v44;
        goto LABEL_107;
      case 0x4Du:
        if (v23 < 4) {
          goto LABEL_142;
        }
        goto LABEL_122;
      case 0x4Eu:
        int v49 = *a7;
        if ((*a7 > 0x1Bu || ((1 << v49) & 0x8070040) == 0) && v49 != 93 && v49 != 91) {
          goto LABEL_142;
        }
LABEL_120:
        if (v23 >= 0x18) {
          goto LABEL_121;
        }
        goto LABEL_142;
      case 0x4Fu:
        if (v23 < 4 || *a7 != 8) {
          goto LABEL_142;
        }
        goto LABEL_121;
      case 0x50u:
        if (v23 < 0x20) {
          goto LABEL_142;
        }
        goto LABEL_123;
      case 0x51u:
        if (v23 < 4) {
          goto LABEL_142;
        }
        char v93 = v16 + 4;
        goto LABEL_122;
      case 0x53u:
        if (v23 < 4) {
          goto LABEL_142;
        }
        goto LABEL_122;
      case 0x54u:
        if (v23 < 4) {
          goto LABEL_142;
        }
        uint64_t v87 = v16 + 4;
        goto LABEL_122;
      case 0x55u:
        if (v23 < 4) {
          goto LABEL_142;
        }
        unint64_t v88 = v16 + 4;
        goto LABEL_122;
      case 0x56u:
        if (v23 < 4) {
          goto LABEL_142;
        }
        long long v89 = v16 + 4;
        goto LABEL_122;
      case 0x57u:
        if (v23 < 4) {
          goto LABEL_142;
        }
        std::string v85 = v16 + 4;
        goto LABEL_122;
      case 0x58u:
        if (v23 < 4) {
          goto LABEL_142;
        }
        unint64_t v84 = v16 + 4;
        goto LABEL_122;
      case 0x60u:
        goto LABEL_122;
      default:
        goto LABEL_147;
    }
  }
}

uint64_t virtual thunk to'AGCLLVMUserObject::compile(AGCLLVMUserObject *this)
{
  return AGCLLVMUserObject::compile((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24)));
}

void AGCLLVMGen6TargetConfig::createMetalFragmentShader()
{
}

uint64_t AGCLLVMAGPFragmentShaderGen3::AGCLLVMAGPFragmentShaderGen3(uint64_t a1, uint64_t *a2, llvm::Module *a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned int *a7, int a8, _DWORD *a9)
{
  uint64_t v12 = (unsigned char *)(a1 + 5845);
  int v13 = (void *)AGCLLVMAGPFragmentShader::AGCLLVMAGPFragmentShader(a1, a2 + 1, a3, a4, a5, a6, a7);
  uint64_t v14 = *a2;
  *int v13 = *a2;
  *(void *)(a1 + *(void *)(v14 - 24)) = a2[21];
  *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 32) = a2[22];
  *(void *)(a1 + 4320) = a2[23];
  *(_OWORD *)(a1 + 6936) = 0u;
  *(void *)(a1 + 6928) = a1 + 6936;
  *(_OWORD *)(a1 + 6960) = 0u;
  *(void *)(a1 + 6952) = a1 + 6960;
  *(_OWORD *)(a1 + 6976) = 0u;
  *(_DWORD *)(a1 + 6992) = 0;
  *(void *)(a1 + 7000) = a1 + 7016;
  *(void *)(a1 + 7008) = 0x800000000;
  *(void *)(a1 + 7048) = a1 + 7064;
  *(void *)(a1 + 7056) = 0x800000000;
  *(_OWORD *)(a1 + 7096) = 0u;
  *(_OWORD *)(a1 + 7112) = 0u;
  *(_OWORD *)(a1 + 7128) = 0u;
  *(_OWORD *)(a1 + 7144) = 0u;
  *(_OWORD *)(a1 + 7160) = 0u;
  *(_OWORD *)(a1 + 7176) = 0u;
  *(_OWORD *)(a1 + 7192) = 0u;
  *(_OWORD *)(a1 + 7208) = 0u;
  *(unsigned char *)(a1 + 7224) = 0;
  *(void *)(a1 + 7232) = 4;
  *(void *)(a1 + 7248) = 0;
  *(void *)(a1 + 7240) = 0;
  *(_DWORD *)(a1 + 7256) = a8;
  int v15 = a8 == 3;
  v12[1415] = v15;
  *(_DWORD *)(a1 + 7264) = 0;
  *(void *)(a1 + 7272) = 4;
  *(void *)(a1 + 7280) = 0;
  *(void *)(a1 + 7288) = 0;
  *(void *)(a1 + 7296) = 4;
  *(void *)(a1 + 7312) = 0;
  *(void *)(a1 + 7304) = 0;
  if (*(unsigned char *)(*(void *)(*(void *)(*(void *)a1 - 24) + a1 + 400) + 1749))
  {
    uint64_t v16 = *(_OWORD **)(a1 + 904);
    unint64_t v17 = *(void *)(a1 + 912);
    if ((unint64_t)v16 >= v17)
    {
      uint64_t v19 = *(void *)(a1 + 896);
      uint64_t v20 = ((uint64_t)v16 - v19) >> 4;
      if ((unint64_t)(v20 + 1) >> 60) {
        goto LABEL_48;
      }
      uint64_t v21 = v17 - v19;
      uint64_t v22 = v21 >> 3;
      if (v21 >> 3 <= (unint64_t)(v20 + 1)) {
        uint64_t v22 = v20 + 1;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23) {
        unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = (_OWORD *)(v23 + 16 * v20);
      unint64_t v26 = v23 + 16 * v24;
      *uint64_t v25 = xmmword_1CADD6300;
      unint64_t v18 = v25 + 1;
      int v27 = *(char **)(a1 + 904);
      unsigned int v28 = *(char **)(a1 + 896);
      if (v27 != v28)
      {
        do
        {
          *--uint64_t v25 = *((_OWORD *)v27 - 1);
          v27 -= 16;
        }
        while (v27 != v28);
        int v27 = *(char **)(a1 + 896);
      }
      *(void *)(a1 + 896) = v25;
      *(void *)(a1 + 904) = v18;
      *(void *)(a1 + 912) = v26;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      *uint64_t v16 = xmmword_1CADD6300;
      unint64_t v18 = v16 + 1;
    }
    *(void *)(a1 + 904) = v18;
    int v29 = *(char **)(a1 + 928);
    unint64_t v30 = *(void *)(a1 + 936);
    if ((unint64_t)v29 < v30)
    {
      *(_OWORD *)int v29 = xmmword_1CADD6300;
      uint64_t v31 = v29 + 16;
LABEL_33:
      *(void *)(a1 + 928) = v31;
      int v15 = v12[1415];
      goto LABEL_34;
    }
    uint64_t v32 = *(char **)(a1 + 920);
    uint64_t v33 = (v29 - v32) >> 4;
    unint64_t v34 = v33 + 1;
    if (!((unint64_t)(v33 + 1) >> 60))
    {
      uint64_t v35 = v30 - (void)v32;
      if (v35 >> 3 > v34) {
        unint64_t v34 = v35 >> 3;
      }
      BOOL v36 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
      if (!v36) {
        unint64_t v37 = v34;
      }
      if (v37)
      {
        unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(v37);
        int v29 = *(char **)(a1 + 928);
        uint64_t v32 = *(char **)(a1 + 920);
      }
      else
      {
        uint64_t v38 = 0;
      }
      unsigned int v39 = (_OWORD *)(v37 + 16 * v33);
      unint64_t v40 = v37 + 16 * v38;
      *unsigned int v39 = xmmword_1CADD6300;
      uint64_t v31 = v39 + 1;
      if (v29 != v32)
      {
        do
        {
          *--unsigned int v39 = *((_OWORD *)v29 - 1);
          v29 -= 16;
        }
        while (v29 != v32);
        uint64_t v32 = *(char **)(a1 + 920);
      }
      *(void *)(a1 + 920) = v39;
      *(void *)(a1 + 928) = v31;
      *(void *)(a1 + 936) = v40;
      if (v32) {
        operator delete(v32);
      }
      goto LABEL_33;
    }
LABEL_48:
    abort();
  }
LABEL_34:
  if (v15) {
    *(_DWORD *)(a1 + 7264) = *a9;
  }
  if (*v12)
  {
    v12[17] = 1;
    uint64_t v41 = *(void *)(*(void *)(a1 + 5848) + 8);
    if (v41)
    {
      do
      {
        uint64_t v42 = *(void *)(*(void *)(*(void *)(v41 + 24) + 40) + 40);
        uint64_t v43 = v42 - 24;
        if (v42) {
          uint64_t v44 = v42 - 24;
        }
        else {
          uint64_t v44 = 0;
        }
        if (*(unsigned __int8 *)(v44 + 16) - 29 >= 0xB) {
          uint64_t v45 = 0;
        }
        else {
          uint64_t v45 = v43;
        }
        int v46 = *(unsigned __int8 *)(v45 + 16);
        if (v46 == 35) {
          break;
        }
        uint64_t v41 = *(void *)(v41 + 8);
      }
      while (v41);
      v12[17] = v46 != 35;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(16 * a1);
}

uint64_t AGCLLVMAGPFragmentShader::AGCLLVMAGPFragmentShader(uint64_t a1, uint64_t *a2, llvm::Module *a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v12 = (void *)AGCLLVMUserFragmentShader::AGCLLVMUserFragmentShader(a1, a2 + 1, a3, a4, a5, 0);
  uint64_t v13 = *a2;
  *uint64_t v12 = *a2;
  *(void *)(a1 + *(void *)(v13 - 24)) = a2[17];
  *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 32) = a2[18];
  *(void *)(a1 + 4320) = a2[19];
  *(_OWORD *)(a1 + 5880) = 0u;
  *(void *)(a1 + 5896) = 0x1000000000;
  *(void *)(a1 + 5912) = a1 + 5928;
  *(void *)(a1 + 5920) = 0x800000000;
  *(_DWORD *)(a1 + 6440) = 0;
  *(unsigned char *)(a1 + 6444) = 0;
  *(_OWORD *)(a1 + 6448) = 0u;
  *(_OWORD *)(a1 + 6464) = 0u;
  *(void *)(a1 + 6480) = 0;
  uint64_t v14 = 6488;
  do
  {
    int v15 = (void *)(a1 + v14);
    v15[1] = 0;
    v15[2] = 0;
    *int v15 = 4;
    uint64_t v16 = a1 + v14 + 24;
    v14 += 24;
  }
  while (v16 != a1 + 6608);
  uint64_t v17 = 0;
  uint64_t v18 = a1 + 6616;
  do
  {
    *(void *)(a1 + v17 + 6608) = v18 + v17 + 8;
    *(void *)(v18 + v17) = 0x300000000;
    v17 += 32;
  }
  while (v17 != 160);
  uint64_t v19 = 0;
  uint64_t v20 = a1 + 6776;
  do
  {
    *(void *)(a1 + v19 + 6768) = v20 + v19 + 8;
    *(void *)(v20 + v19) = 0x300000000;
    v19 += 32;
  }
  while (v19 != 160);
  AGCLLVMUserShader::enableStatistics(a1, *(_DWORD *)(*(void *)(a4 + 16) + 60) & 1, (*(_DWORD *)(*(void *)(a4 + 16) + 60) >> 1) & 1);
  uint64_t v21 = *(void *)(a4 + 16);
  *(unsigned char *)(a1 + 18) = (*(unsigned char *)(v21 + 60) & 8) != 0;
  *(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 2760) = (*(_DWORD *)(v21 + 60) & 0x4000000) != 0;
  *(_DWORD *)(a1 + 5876) = *(_DWORD *)(v21 + 56);
  *(void *)(a1 + 3304) = *(void *)(v21 + 16);
  *(unsigned char *)(a1 + 20) = (*(unsigned char *)(v21 + 60) & 4) != 0;
  if (a6 && a7)
  {
    uint64_t v22 = (int *)((char *)a6 + *a6);
    unint64_t v23 = (int *)((char *)a7 + *a7);
    uint64_t v24 = (unsigned __int16 *)((char *)v22 - *v22);
    if (*v24 >= 5u && (uint64_t v25 = v24[2]) != 0) {
      unint64_t v26 = (int *)((char *)v22 + v25 + *(unsigned int *)((char *)v22 + v25));
    }
    else {
      unint64_t v26 = 0;
    }
    int v27 = (unsigned __int16 *)((char *)v23 - *v23);
    if (*v27 >= 5u && (uint64_t v28 = v27[2]) != 0) {
      int v29 = (char *)v23 + v28 + *(unsigned int *)((char *)v23 + v28);
    }
    else {
      int v29 = 0;
    }
    if (*v26)
    {
      unint64_t v30 = 0;
      uint64_t v31 = v29 + 4;
      uint64_t v32 = (const char *)(v26 + 2);
      uint64_t v33 = v26 + 2;
      do
      {
        int v34 = *(_DWORD *)&v31[4 * v30];
        uint64_t v35 = *((unsigned int *)v32 - 1);
        size_t v36 = strlen(&v32[v35]);
        *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(a1 + 5880), (char *)v33 + v35, v36)+ 8) = v34;
        ++v30;
        ++v33;
        v32 += 4;
      }
      while (v30 < *v26);
    }
  }
  return a1;
}

uint64_t AGCLLVMUserFragmentShader::AGCLLVMUserFragmentShader(uint64_t a1, uint64_t *a2, llvm::Module *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11 = a1 + 4944;
  uint64_t v12 = (long long *)(a4 + 8);
  uint64_t v13 = AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)a1, a2 + 1, (uint64_t)a3, "air.fragment", *(void *)(a4 + 8), a6, 0);
  AGCLLVMFragmentShader::AGCLLVMFragmentShader((uint64_t)(v13 + 540), a2 + 7, a5, 0);
  uint64_t v14 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v14 - 24)) = a2[13];
  *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 32) = a2[14];
  *(void *)(a1 + 4320) = a2[15];
  *(unsigned char *)uint64_t v11 = 0;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_OWORD *)(a1 + 4968) = 0u;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 5000) = 0u;
  *(_OWORD *)(a1 + 5016) = 0u;
  *(_OWORD *)(a1 + 5032) = 0u;
  *(_OWORD *)(a1 + 5048) = 0u;
  *(_OWORD *)(a1 + 5064) = 0u;
  *(_OWORD *)(a1 + 5080) = 0u;
  *(_OWORD *)(a1 + 5096) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_OWORD *)(a1 + 5192) = 0u;
  uint64_t v15 = -256;
  do
  {
    uint64_t v16 = a1 + v15;
    *(void *)(v16 + 5216) = 4;
    *(_OWORD *)(v16 + 5224) = 0uLL;
    v15 += 32;
  }
  while (v15);
  *(_OWORD *)(a1 + 5432) = 0u;
  *(_OWORD *)(a1 + 5448) = 0u;
  *(_OWORD *)(a1 + 5400) = 0u;
  *(_OWORD *)(a1 + 5416) = 0u;
  *(_OWORD *)(a1 + 5368) = 0u;
  *(_OWORD *)(a1 + 5384) = 0u;
  *(_OWORD *)(a1 + 5336) = 0u;
  *(_OWORD *)(a1 + 5352) = 0u;
  *(_OWORD *)(a1 + 5304) = 0u;
  *(_OWORD *)(a1 + 5320) = 0u;
  *(_OWORD *)(a1 + 5272) = 0u;
  *(_OWORD *)(a1 + 5288) = 0u;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(_OWORD *)(a1 + 5256) = 0u;
  uint64_t v17 = -256;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_OWORD *)(a1 + 5224) = 0u;
  do
  {
    uint64_t v18 = a1 + v17;
    *(void *)(v18 + 5472) = 4;
    *(_OWORD *)(v18 + 5480) = 0uLL;
    v17 += 32;
  }
  while (v17);
  *(unsigned char *)(v11 + 520) = 0;
  *(unsigned char *)(v11 + 524) = 0;
  *(void *)(a1 + 5472) = 4;
  *(void *)(a1 + 5488) = 0;
  *(void *)(a1 + 5480) = 0;
  *(void *)(a1 + 5496) = 4;
  *(void *)(a1 + 5512) = 0;
  *(void *)(a1 + 5504) = 0;
  *(void *)(a1 + 5520) = 4;
  *(void *)(a1 + 5536) = 0;
  *(void *)(a1 + 5528) = 0;
  *(void *)(a1 + 5544) = 4;
  *(void *)(a1 + 5560) = 0;
  *(void *)(a1 + 5552) = 0;
  *(void *)(a1 + 5568) = 4;
  *(void *)(a1 + 5584) = 0;
  *(void *)(a1 + 5576) = 0;
  *(_DWORD *)(a1 + 5592) = (unsigned __int16)**(_DWORD **)(a4 + 8) >> 12;
  *(void *)(a1 + 5600) = 4;
  *(void *)(a1 + 5616) = 0;
  *(void *)(a1 + 5608) = 0;
  *(void *)(a1 + 5624) = 4;
  *(void *)(a1 + 5640) = 0;
  *(void *)(a1 + 5632) = 0;
  *(void *)(a1 + 5648) = 4;
  *(void *)(a1 + 5664) = 0;
  *(void *)(a1 + 5656) = 0;
  *(void *)(a1 + 5672) = 4;
  *(void *)(a1 + 5688) = 0;
  *(void *)(a1 + 5680) = 0;
  *(void *)(a1 + 5696) = 4;
  *(void *)(a1 + 5712) = 0;
  *(void *)(a1 + 5704) = 0;
  *(void *)(a1 + 5720) = 4;
  *(void *)(a1 + 5736) = 0;
  *(void *)(a1 + 5728) = 0;
  *(void *)(a1 + 5744) = 4;
  *(void *)(a1 + 5760) = 0;
  *(void *)(a1 + 5752) = 0;
  *(void *)(a1 + 5768) = 4;
  *(void *)(a1 + 5784) = 0;
  *(void *)(a1 + 5776) = 0;
  *(void *)(a1 + 5792) = &unk_1F25DAD88;
  long long v19 = *v12;
  *(void *)(a1 + 5816) = *((void *)v12 + 2);
  *(_OWORD *)(a1 + 5800) = v19;
  *(unsigned char *)(v11 + 891) = 0;
  *(void *)(a1 + 5824) = 0;
  *(_WORD *)(a1 + 5832) = 0;
  *(void *)(v11 + 892) = 0x500000000;
  *(_WORD *)(v11 + 900) = 0;
  *(void *)(a1 + 5848) = 0;
  *(void *)(a1 + 5864) = 0;
  *(void *)(a1 + 5856) = 0;
  *(_DWORD *)(a1 + 5872) = 0;
  uint64_t v20 = *(void *)(a4 + 16);
  *(unsigned char *)(a1 + 3712) = *(unsigned char *)(v20 + 61) & 1;
  *(unsigned char *)(a1 + 3713) = (*(_DWORD *)(v20 + 60) & 0x200) != 0;
  unsigned int v82 = "air.fragment";
  __int16 v83 = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a3, (const llvm::Twine *)&v82);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  unint64_t v23 = *(unsigned int *)(Operand + 8);
  if (v23 >= 4)
  {
    uint64_t v24 = Operand;
    for (unint64_t i = 3; i < v23; ++i)
    {
      unint64_t v26 = *(unsigned __int8 **)(v24 - 8 * v23 + 8 * i);
      unint64_t v27 = *v26;
      BOOL v28 = v27 > 0x22 || ((0x7FFFFFFF0uLL >> v27) & 1) == 0;
      if (!v28)
      {
        unint64_t v29 = *((unsigned int *)v26 + 2);
        if (v29)
        {
          for (unint64_t j = 0; j < v29; ++j)
          {
            if (isStringMDNode(*(llvm::MDString **)&v26[8 * j + -8 * v29], "air.fragment_rate"))
            {
              uint64_t String = llvm::MDString::getString(*(llvm::MDString **)&v26[8 * j + 8 + -8 * *((unsigned int *)v26 + 2)]);
              if (v32 == 5)
              {
                BOOL v33 = *(_DWORD *)String == 1869377379 && *(unsigned char *)(String + 4) == 114;
                BOOL v34 = v33;
              }
              else
              {
                BOOL v34 = 0;
              }
              *(_DWORD *)(a1 + 5872) = v34;
              if ((((*(_DWORD *)(*(void *)(a1 + 4912) + 32) >> 12) ^ (*(_DWORD *)(*(void *)(a1 + 4912) + 32) >> 8)) & 0xF) == 0) {
                *(_DWORD *)(a1 + 5872) = 0;
              }
            }
            unint64_t v29 = *((unsigned int *)v26 + 2);
          }
          unint64_t v23 = *(unsigned int *)(v24 + 8);
        }
      }
    }
  }
  uint64_t v35 = *(unsigned int *)(a1 + 96);
  if (v35)
  {
    for (uint64_t k = 0; k != v35; ++k)
    {
      uint64_t v37 = *(void *)(*(void *)(a1 + 88) + 8 * k);
      if (v37)
      {
        uint64_t v38 = llvm::MDString::getString(*(llvm::MDString **)(v37 - 8 * *(unsigned int *)(v37 + 8) + 8));
        switch(v39)
        {
          case 12:
            if (*(void *)v38 == 0x69736F702E726961 && *(_DWORD *)(v38 + 8) == 1852795252) {
              *(unsigned char *)(v11 + 887) = 1;
            }
            break;
          case 15:
            if (*(void *)v38 == 0x6E696F702E726961 && *(void *)(v38 + 7) == 0x64726F6F635F746ELL) {
              *(unsigned char *)(v11 + 889) = 1;
            }
            break;
          case 16:
            if (*(void *)v38 == 0x6E6F72662E726961 && *(void *)(v38 + 8) == 0x676E696361665F74) {
              *(unsigned char *)(v11 + 888) = 1;
            }
            break;
          case 18:
            if (*(void *)v38 == 0x706D61732E726961
              && *(void *)(v38 + 8) == 0x5F6B73616D5F656CLL
              && *(_WORD *)(v38 + 16) == 28265)
            {
              uint64_t v45 = *(unsigned int *)(v37 + 8);
              if (v37 - 8 * v45 + 16 == v37)
              {
                BOOL v48 = 0;
              }
              else
              {
                uint64_t v46 = -8 * v45;
                uint64_t v47 = v37 + 16;
                do
                {
                  BOOL v48 = isStringMDNode(*(llvm::MDString **)(v47 + v46), "air.post_depth_coverage");
                  if (v48) {
                    break;
                  }
                  BOOL v28 = v46 == -24;
                  v46 += 8;
                }
                while (!v28);
              }
              *(unsigned char *)(v11 + 912) = v48;
            }
            break;
          default:
            continue;
        }
      }
    }
  }
  int v49 = **(_DWORD **)(a1 + 5800);
  BOOL v50 = (v49 & 0x60000) == 0x40000 && ((v49 & 0x10000) != 0 || (*(unsigned char *)(*(void *)(a1 + 4912) + 33) & 0xE) != 0);
  *(unsigned char *)(v11 + 890) = v50;
  uint64_t v51 = *(void *)(a1 + 72);
  if (v51)
  {
    uint64_t v52 = *(unsigned int *)(v51 + 8);
    if (v52)
    {
      uint64_t v53 = 0;
      while (1)
      {
        uint64_t v54 = *(void *)(*(void *)(a1 + 72) - 8 * *(unsigned int *)(*(void *)(a1 + 72) + 8) + 8 * v53);
        uint64_t v55 = llvm::MDString::getString(*(llvm::MDString **)(v54 - 8 * *(unsigned int *)(v54 + 8)));
        uint64_t v57 = (void *)v55;
        uint64_t v58 = v56;
        if (v56 == 12) {
          break;
        }
        if (v56 != 9) {
          goto LABEL_90;
        }
        if (*(void *)v55 != 0x747065642E726961 || *(unsigned char *)(v55 + 8) != 104) {
          goto LABEL_90;
        }
        *(unsigned char *)(v11 + 891) = 1;
        *(_DWORD *)(a1 + 5840) = 0;
        uint64_t v60 = *(unsigned int *)(v54 + 8);
        if (v60 >= 2)
        {
          uint64_t v62 = 1;
          while (1)
          {
            uint64_t v61 = v54 - 8 * v60;
            __int16 v63 = *(llvm::MDString **)(v61 + 8 * v62);
            if (!*(unsigned char *)v63) {
              break;
            }
            if (v60 == ++v62) {
              goto LABEL_127;
            }
          }
          long long v66 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v61 + 8 * v62));
          if (v67 == 19)
          {
            BOOL v68 = *v66 == 0x747065642E726961 && v66[1] == 0x66696C6175715F68;
            if (v68 && *(void *)((char *)v66 + 11) == 0x72656966696C6175) {
              __int16 v63 = *(llvm::MDString **)(v54 - 8 * *(unsigned int *)(v54 + 8) + 8 * (v62 + 1));
            }
          }
          uint64_t v70 = (void *)llvm::MDString::getString(v63);
          switch(v71)
          {
            case 11:
              if (*v70 == 0x616572672E726961 && *(void *)((char *)v70 + 3) == 0x726574616572672ELL)
              {
                int v72 = 1;
                goto LABEL_125;
              }
              break;
            case 8:
              int v73 = 2 * (*v70 == 0x7373656C2E726961);
              goto LABEL_126;
            case 7:
              int v72 = 0;
              int v73 = 0;
              if (*(_DWORD *)v70 != 779250017 || *(_DWORD *)((char *)v70 + 3) != 2037276974) {
                goto LABEL_126;
              }
LABEL_125:
              int v73 = v72;
LABEL_126:
              *(_DWORD *)(v11 + 892) = v73;
              goto LABEL_127;
          }
          int v73 = 0;
          goto LABEL_126;
        }
LABEL_127:
        if (++v53 == v52) {
          goto LABEL_128;
        }
      }
      if (*(void *)v55 != 0x65766F632E726961 || *(_DWORD *)(v55 + 8) != 1701273970)
      {
LABEL_90:
        if (!AGCLLVMUserFragmentShader::isSampleMaskVariant((uint64_t *)v55, v56))
        {
          if (v58 == 11 && *v57 == 0x6E6574732E726961 && *(void *)((char *)v57 + 3) == 0x6C69636E6574732ELL) {
            *(unsigned char *)(v11 + 913) = 1;
          }
          goto LABEL_127;
        }
      }
      *(unsigned char *)(v11 + 900) = 1;
      goto LABEL_127;
    }
  }
LABEL_128:
  uint64_t Function = llvm::Module::getFunction();
  if (Function) {
    BOOL v77 = *(void *)(Function + 8) != 0;
  }
  else {
    BOOL v77 = 0;
  }
  *(unsigned char *)(v11 + 901) = v77;
  *(void *)(a1 + 5848) = Function;
  uint64_t v78 = llvm::Module::getFunction();
  if (v78) {
    BOOL v79 = *(void *)(v78 + 8) != 0;
  }
  else {
    BOOL v79 = 0;
  }
  uint64_t v80 = a1 + *(void *)(*(void *)a1 - 24);
  *(unsigned char *)(v80 + 456) = v79;
  *(void *)(v80 + 3280) = v78;
  return a1;
}

uint64_t AGCLLVMUserFragmentShader::isSampleMaskVariant(uint64_t *a1, uint64_t a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 15:
      uint64_t v4 = *a1;
      uint64_t v5 = *(uint64_t *)((char *)a1 + 7);
      BOOL v6 = v4 == 0x706D61732E726961;
      goto LABEL_14;
    case 18:
      uint64_t v7 = *a1;
      uint64_t v8 = a1[1];
      int v9 = *((unsigned __int16 *)a1 + 8);
      BOOL v11 = v7 == 0x706D61732E726961 && v8 == 0x5F6B73616D5F656CLL && v9 == 28265;
      goto LABEL_17;
    case 21:
      uint64_t v12 = *a1;
      uint64_t v13 = a1[1];
      uint64_t v5 = *(uint64_t *)((char *)a1 + 13);
      BOOL v14 = v12 == 0x6F6C6F632E726961;
      uint64_t v15 = 0x656C706D61735F72;
      goto LABEL_11;
    case 22:
      uint64_t v16 = *a1;
      uint64_t v13 = a1[1];
      uint64_t v5 = *(uint64_t *)((char *)a1 + 14);
      BOOL v14 = v16 == 0x747361722E726961;
      uint64_t v15 = 0x6C706D61735F7265;
LABEL_11:
      BOOL v6 = v14 && v13 == v15;
LABEL_14:
      BOOL v11 = v6 && v5 == 0x6B73616D5F656C70;
LABEL_17:
      uint64_t result = v11;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AGCLLVMFragmentShader::AGCLLVMFragmentShader(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7 = a2[1];
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = a2[2];
  *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 32) = a2[3];
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v8 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v8 - 24)) = a2[4];
  *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 32) = a2[5];
  bzero((void *)(a1 + 16), 0x240uLL);
  for (uint64_t i = 0; i != 576; i += 72)
  {
    uint64_t v10 = a1 + i;
    *(void *)(v10 + 68) = 0;
    *(void *)(v10 + 60) = 0;
    *(unsigned char *)(v10 + 76) = 0;
    *(unsigned char *)(v10 + 80) = 0;
    *(_DWORD *)(v10 + 84) = 0;
  }
  *(void *)(a1 + 592) = a3;
  *(_OWORD *)(a1 + 600) = 0u;
  if (a4) {
    AGCLLVMFragmentShader::initCompile((AGCLLVMFragmentShader *)a1);
  }
  return a1;
}

uint64_t AGCLLVMUserShader::enableStatistics(uint64_t this, int a2, int a3)
{
  uint64_t v5 = this;
  if ((a2 & 1) != 0 || a3)
  {
    this = llvm::Module::getOrInsertNamedMetadata();
    if (a2)
    {
      this = llvm::Module::getOrInsertNamedMetadata();
      *(unsigned char *)(v5 + 44) = 1;
    }
    if (a3)
    {
      return llvm::Module::getOrInsertNamedMetadata();
    }
  }
  return this;
}

AGCLLVMCtx *AGCLLVMCtx::createGraphicsPasses(AGCLLVMCtx *this)
{
  if (!*((void *)this + 44)) {
    AGCLLVMCtx::createPassManager(this);
  }
  return this;
}

uint64_t newObjectArrayWithIntersectionShadersIfNeeded<_AGCFragmentContextStateAGP>(void *a1, int a2, llvm::Module *this)
{
  uint64_t v5 = (llvm::Module *)"air.intersection";
  __int16 v6 = 259;
  if (llvm::Module::getNamedMetadata(this, (const llvm::Twine *)&v5)) {
    operator new();
  }
  if (a1) {
    return (uint64_t)a1 + *(void *)(*a1 - 24);
  }
  else {
    return 0;
  }
}

void *AGCGetReplacementIR(llvm::Module *this, llvm::LLVMContext *a2)
{
  v53[21] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0;
  {
    {
      v43[0] = "air.requestHash";
      LOWORD(v45) = 259;
      uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v43);
      if (NamedMetadata)
      {
        uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
        uint64_t String = (char *)llvm::MDString::getString(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)));
        std::string::basic_string[abi:nn180100]<0>(__p, String);
        uint64_t v10 = *(void **)(v4 + 8);
        uint64_t v8 = v4 + 8;
        int v9 = v10;
        if (!v10) {
          goto LABEL_14;
        }
        BOOL v11 = (void *)v8;
        do
        {
          BOOL v12 = std::less<std::string>::operator()[abi:nn180100](v9 + 4, __p);
          uint64_t v13 = v9 + 1;
          if (!v12)
          {
            uint64_t v13 = v9;
            BOOL v11 = v9;
          }
          int v9 = (void *)*v13;
        }
        while (*v13);
        if (v11 == (void *)v8 || std::less<std::string>::operator()[abi:nn180100](__p, v11 + 4))
        {
LABEL_14:
          uint64_t v3 = 0;
        }
        else
        {
          int v46 = 0;
          long long v44 = 0u;
          long long v45 = 0u;
          *(_OWORD *)uint64_t v43 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          uint64_t v51 = 0;
          v52[0] = (char *)v53;
          v52[1] = (char *)0x400000000;
          llvm::parseAssemblyString();
          uint64_t v3 = v39[0];
          if (!v39[0])
          {
            if ((SBYTE7(v48) & 0x80u) == 0) {
              uint64_t v15 = &v47;
            }
            else {
              uint64_t v15 = (long long *)v47;
            }
            if (v15)
            {
              if ((SBYTE7(v48) & 0x80u) == 0) {
                size_t v16 = BYTE7(v48);
              }
              else {
                size_t v16 = *((void *)&v47 + 1);
              }
              std::string::basic_string[abi:nn180100](&__dst, v15, v16);
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
            }
            uint64_t v17 = std::string::insert(&__dst, 0, "AssemblerError: error message is: ");
            std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
            v36.__r_.__value_.__r.__words[2] = v18;
            v17->__r_.__value_.__l.__size_ = 0;
            v17->__r_.__value_.__r.__words[2] = 0;
            v17->__r_.__value_.__r.__words[0] = 0;
            long long v19 = std::string::append(&v36, "\n");
            std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
            v37.__r_.__value_.__r.__words[2] = v20;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            v19->__r_.__value_.__r.__words[0] = 0;
            uint64_t v21 = std::string::append(&v37, "AssemblerError: line content is: ");
            std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
            v38.__r_.__value_.__r.__words[2] = v22;
            v21->__r_.__value_.__l.__size_ = 0;
            v21->__r_.__value_.__r.__words[2] = 0;
            v21->__r_.__value_.__r.__words[0] = 0;
            if (v49 >= 0) {
              unint64_t v23 = (char *)&v48 + 8;
            }
            else {
              unint64_t v23 = (char *)*((void *)&v48 + 1);
            }
            if (v23)
            {
              if (v49 >= 0) {
                size_t v24 = HIBYTE(v49);
              }
              else {
                size_t v24 = v49;
              }
              std::string::basic_string[abi:nn180100](&v32, v23, v24);
              unsigned int v25 = HIBYTE(v34);
              unint64_t v26 = (void **)v32;
              std::string::size_type v27 = v33;
            }
            else
            {
              std::string::size_type v27 = 0;
              unint64_t v26 = 0;
              unsigned int v25 = 0;
              uint64_t v32 = 0;
              std::string::size_type v33 = 0;
              uint64_t v34 = 0;
            }
            if ((v25 & 0x80u) == 0) {
              BOOL v28 = &v32;
            }
            else {
              BOOL v28 = v26;
            }
            if ((v25 & 0x80u) == 0) {
              std::string::size_type v29 = v25;
            }
            else {
              std::string::size_type v29 = v27;
            }
            unint64_t v30 = std::string::append(&v38, (const std::string::value_type *)v28, v29);
            std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
            *(_OWORD *)uint64_t v39 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
            std::string::size_type v40 = v31;
            v30->__r_.__value_.__l.__size_ = 0;
            v30->__r_.__value_.__r.__words[2] = 0;
            v30->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v34) < 0) {
              operator delete(v32);
            }
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v38.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v37.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v36.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v40) < 0) {
              operator delete(v39[0]);
            }
          }
          llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v52);
          if ((void)v50)
          {
            *((void *)&v50 + 1) = v50;
            operator delete((void *)v50);
          }
          if (SHIBYTE(v49) < 0) {
            operator delete(*((void **)&v48 + 1));
          }
          if (SBYTE7(v48) < 0) {
            operator delete((void *)v47);
          }
          if (SBYTE7(v45) < 0) {
            operator delete((void *)v44);
          }
        }
        if (v42 < 0) {
          operator delete(__p[0]);
        }
        return v3;
      }
      std::string::basic_string[abi:nn180100]<0>(v43, "Unable to find air.requestHash metadata");
      if (SBYTE7(v44) < 0) {
        operator delete(v43[0]);
      }
    }
    return 0;
  }
  return v3;
}

void virtual thunk to'AGCLLVMAGPFragmentShaderGen6::~AGCLLVMAGPFragmentShaderGen6(AGCLLVMAGPFragmentShaderGen6 *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F2574358;
  v1[933] = &off_1F2574708;
  v1[937] = &off_1F25747F8;
  v1[540] = off_1F2574608;
  unint64_t v2 = (void *)v1[915];
  if (v2 != v1 + 917) {
    free(v2);
  }
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3((AGCLLVMAGPFragmentShaderGen3 *)v1, (uint64_t *)off_1F2570390);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 933));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F2574358;
  v1[933] = &off_1F2574708;
  v1[937] = &off_1F25747F8;
  v1[540] = off_1F2574608;
  unint64_t v2 = (void *)v1[915];
  if (v2 != v1 + 917) {
    free(v2);
  }
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3((AGCLLVMAGPFragmentShaderGen3 *)v1, (uint64_t *)off_1F2570390);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 933));
}

void *std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(AGCLLVMAGPFragmentShaderGen3 *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[21];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[22];
  *((void *)this + 540) = a2[23];
  uint64_t v5 = *((void *)this + 914);
  if (v5 != -8192 && v5 != -4096 && v5) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 7296));
  }
  uint64_t v6 = *((void *)this + 911);
  if (v6 != -8192 && v6 != -4096 && v6) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 7272));
  }
  uint64_t v7 = *((void *)this + 906);
  if (v7 != -8192 && v7 != -4096 && v7) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 7232));
  }
  uint64_t v8 = (char *)*((void *)this + 881);
  if (v8 != (char *)this + 7064) {
    free(v8);
  }
  int v9 = (char *)*((void *)this + 875);
  if (v9 != (char *)this + 7016) {
    free(v9);
  }
  uint64_t v10 = *((unsigned int *)this + 1748);
  BOOL v11 = (llvm *)*((void *)this + 872);
  if (v10)
  {
    BOOL v12 = (llvm *)((char *)v11 + 16);
    uint64_t v13 = 40 * v10;
    do
    {
      if (*((_DWORD *)v12 - 4) <= 0xFFFFFFFD)
      {
        uint64_t v14 = *((void *)v12 + 2);
        if (v14 != -8192 && v14 != -4096 && v14 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList(v12);
        }
      }
      BOOL v12 = (llvm::ValueHandleBase *)((char *)v12 + 40);
      v13 -= 40;
    }
    while (v13);
    BOOL v11 = (llvm *)*((void *)this + 872);
    uint64_t v16 = 40 * *((unsigned int *)this + 1748);
  }
  else
  {
    uint64_t v16 = 0;
  }
  llvm::deallocate_buffer(v11, (void *)v16);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)this + 870));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)this + 867));
  AGCLLVMAGPFragmentShader::~AGCLLVMAGPFragmentShader(this, a2 + 1);
}

void AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader(AGCLLVMUserFragmentShader *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[13];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[14];
  *((void *)this + 540) = a2[15];
  uint64_t v5 = *((void *)this + 723);
  if (v5 != -8192 && v5 != -4096 && v5) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5768));
  }
  uint64_t v6 = *((void *)this + 720);
  if (v6 != -8192 && v6 != -4096 && v6) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5744));
  }
  uint64_t v7 = *((void *)this + 717);
  if (v7 != -8192 && v7 != -4096 && v7) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5720));
  }
  uint64_t v8 = *((void *)this + 714);
  if (v8 != -8192 && v8 != -4096 && v8) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5696));
  }
  uint64_t v9 = *((void *)this + 711);
  if (v9 != -8192 && v9 != -4096 && v9) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5672));
  }
  uint64_t v10 = *((void *)this + 708);
  if (v10 != -8192 && v10 != -4096 && v10) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5648));
  }
  uint64_t v11 = *((void *)this + 705);
  if (v11 != -8192 && v11 != -4096 && v11) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5624));
  }
  uint64_t v12 = *((void *)this + 702);
  if (v12 != -8192 && v12 != -4096 && v12) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5600));
  }
  uint64_t v13 = *((void *)this + 698);
  if (v13 != -8192 && v13 != -4096 && v13) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5568));
  }
  uint64_t v14 = *((void *)this + 695);
  if (v14 != -8192 && v14 != -4096 && v14) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5544));
  }
  uint64_t v15 = *((void *)this + 692);
  if (v15 != -8192 && v15 != -4096 && v15) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5520));
  }
  uint64_t v16 = *((void *)this + 689);
  if (v16 != -8192 && v16 != -4096 && v16) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5496));
  }
  uint64_t v17 = *((void *)this + 686);
  if (v17 != -8192 && v17 != -4096 && v17) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + 5472));
  }
  for (uint64_t i = 0; i != -256; i -= 32)
  {
    uint64_t v19 = *(void *)((char *)this + i + 5456);
    if (v19 != -8192 && v19 != -4096 && v19 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + i + 5440));
    }
  }
  for (uint64_t j = 0; j != -256; j -= 32)
  {
    uint64_t v22 = *(void *)((char *)this + j + 5200);
    if (v22 != -8192 && v22 != -4096 && v22 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserFragmentShader *)((char *)this + j + 5184));
    }
  }
  AGCLLVMUserShader::~AGCLLVMUserShader(this, a2 + 1);
}

BOOL flatbuffers::Verifier::VerifyVectorOrString(flatbuffers::Verifier *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4 = (unint64_t)&a2[-*(void *)this];
  if ((v4 & 3) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  unint64_t v5 = *((void *)this + 1);
  if (v5 < 5 || v5 - 4 < v4) {
    return 0;
  }
  unint64_t v7 = *(unsigned int *)a2;
  if (0x7FFFFFFF / a3 <= v7) {
    return 0;
  }
  unint64_t v8 = v7 * a3 + 4;
  if (a4)
  {
    *a4 = v8 + v4;
    unint64_t v5 = *((void *)this + 1);
  }
  BOOL v9 = v5 > v8;
  unint64_t v10 = v5 - v8;
  return v9 && v10 >= v4;
}

BOOL flatbuffers::Verifier::VerifyTableStart(flatbuffers::Verifier *this, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = (unint64_t)&a2[-*(void *)this];
  if ((v3 & 3) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  unint64_t v4 = *((void *)this + 1);
  BOOL v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(int *)a2;
  unsigned int v7 = *((_DWORD *)this + 5);
  unsigned int v8 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v8;
  unsigned int v9 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)this + 7)) {
    return 0;
  }
  unint64_t v10 = v3 - v6;
  if (v10)
  {
    uint64_t v11 = 0;
    if (*((unsigned char *)this + 40) || v4 - 2 < v10) {
      return v11;
    }
  }
  else if (v4 - 2 < v10)
  {
    return 0;
  }
  unint64_t v12 = *(unsigned __int16 *)(v2 + v10);
  if ((v12 & 1) != 0 && *((unsigned char *)this + 40)) {
    return 0;
  }
  BOOL v5 = v4 >= v12;
  unint64_t v14 = v4 - v12;
  return v14 != 0 && v5 && v14 >= v10;
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::replacePayloadSupportFunctions(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  uint64_t Function = llvm::Module::getFunction();
  if (Function)
  {
    uint64_t v6 = (llvm::Function *)Function;
    uint64_t v7 = *(void *)(Function + 8);
    if (v7)
    {
      do
      {
        uint64_t v8 = *(void *)(v7 + 8);
        unsigned int v9 = *(llvm::Instruction **)(v7 + 24);
        llvm::ConstantInt::get();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v9);
        uint64_t v7 = v8;
      }
      while (v8);
    }
    llvm::Function::eraseFromParent(v6);
  }
  uint64_t v10 = llvm::Module::getFunction();
  if (v10)
  {
    uint64_t v11 = (llvm::Function *)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = (unsigned __int8 *)a1;
    if (v12)
    {
      do
      {
        AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::computeDriverPayloadSize(v13, 6, 1uLL, 0);
        uint64_t v14 = *(void *)(v12 + 8);
        uint64_t v15 = *(llvm::Instruction **)(v12 + 24);
        llvm::ConstantInt::get();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v15);
        uint64_t v12 = v14;
      }
      while (v14);
    }
    llvm::Function::eraseFromParent(v11);
    a1 = (uint64_t)v13;
  }
  uint64_t v16 = llvm::Module::getFunction();
  if (v16)
  {
    uint64_t v17 = (llvm::Function *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v19 = (unsigned __int8 *)a1;
    if (v18)
    {
      do
      {
        AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::computeDriverPayloadSize(v19, 5, 0, 0);
        uint64_t v20 = *(void *)(v18 + 8);
        uint64_t v21 = *(llvm::Instruction **)(v18 + 24);
        llvm::ConstantInt::get();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v21);
        uint64_t v18 = v20;
      }
      while (v20);
    }
    llvm::Function::eraseFromParent(v17);
    a1 = (uint64_t)v19;
  }
  uint64_t v22 = llvm::Module::getFunction();
  if (v22)
  {
    uint64_t v23 = *(void *)(v22 + 8);
    if (v23)
    {
      do
      {
        uint64_t v24 = *(void *)(v23 + 8);
        unsigned int v25 = *(llvm::Instruction **)(v23 + 24);
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), v25);
        uint64_t v26 = *((void *)v25 - 4 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF));
        uint64_t v27 = *(void *)(a1 + 144);
        uint64_t v112 = a3;
        uint64_t v113 = v26;
        AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"llvm.agx3.update.bvh", 20, v27, (uint64_t)&v112, 2uLL);
        llvm::Instruction::eraseFromParent(v25);
        uint64_t v23 = v24;
      }
      while (v24);
    }
  }
  uint64_t v102 = (uint64_t *)a1;
  std::string::basic_string[abi:nn180100]<0>(&v112, "agc.query.allocate");
  LOBYTE(v115) = 1;
  std::string::basic_string[abi:nn180100]<0>(v116, "agc.query.deallocate");
  LOBYTE(v118) = 0;
  BOOL v28 = (std::string *)operator new(0x40uLL);
  char v29 = 0;
  uint64_t v30 = 0;
  std::string::size_type v31 = v28;
  do
  {
    char v32 = v29;
    std::string::size_type v33 = &v112 + 4 * v30;
    if (*((char *)v33 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v31, (const std::string::value_type *)*v33, (std::string::size_type)v33[1]);
    }
    else
    {
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)v33;
      v31->__r_.__value_.__r.__words[2] = (std::string::size_type)v33[2];
    }
    v31[1].__r_.__value_.__s.__data_[0] = *((unsigned char *)v33 + 24);
    std::string::size_type v31 = (std::string *)((char *)v31 + 32);
    char v29 = 1;
    uint64_t v30 = 1;
  }
  while ((v32 & 1) == 0);
  uint64_t v34 = 0;
  uint64_t v89 = ((char *)v31 - (char *)v28) >> 5;
  uint64_t v35 = (const char **)v102;
  do
  {
    if (*((char *)&v117 + v34 * 8 + 7) < 0) {
      operator delete((void *)v116[v34]);
    }
    v34 -= 4;
  }
  while (v34 != -8);
  uint64_t v98 = (uint64_t)a3;
  uint64_t v90 = v28;
  if (v31 != v28)
  {
    std::string v36 = (llvm::IRBuilderBase *)(v102 + 1);
    std::string v37 = v28;
    uint64_t v92 = (std::string *)((char *)v28 + 32 * v89);
    do
    {
      if (SHIBYTE(v37->__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v110, v37->__r_.__value_.__l.__data_, v37->__r_.__value_.__l.__size_);
      }
      else {
        std::string v110 = *v37;
      }
      std::string::value_type v111 = v37[1].__r_.__value_.__s.__data_[0];
      uint64_t v38 = llvm::Module::getFunction();
      if (v38)
      {
        uint64_t v39 = (llvm::Function *)v38;
        char v105 = (llvm::Function **)v109;
        uint64_t v106 = (llvm::Function **)v109;
        uint64_t v107 = 4;
        int v108 = 0;
        uint64_t v40 = *(void *)(v38 + 8);
        uint64_t v96 = v37;
        if (v40)
        {
          do
          {
            uint64_t v41 = *(void *)(v40 + 8);
            char v42 = (void *)llvm::Instruction::getFunction(*(llvm::Instruction **)(v40 + 24));
            llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v112, (llvm::SmallPtrSetImplBase *)&v105, v42);
            uint64_t v40 = v41;
          }
          while (v41);
          long long v44 = v105;
          uint64_t v43 = v106;
          unsigned int v46 = v107;
          LODWORD(v45) = HIDWORD(v107);
        }
        else
        {
          LODWORD(v45) = 0;
          unsigned int v46 = 4;
          uint64_t v43 = (llvm::Function **)v109;
          long long v44 = (llvm::Function **)v109;
        }
        if (v43 == v44) {
          uint64_t v45 = v45;
        }
        else {
          uint64_t v45 = v46;
        }
        long long v47 = v43;
        if (v45)
        {
          uint64_t v48 = 8 * v45;
          long long v47 = v43;
          while ((unint64_t)*v47 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v47;
            v48 -= 8;
            if (!v48) {
              goto LABEL_56;
            }
          }
        }
        long long v49 = &v43[v45];
        if (v47 != v49)
        {
          long long v50 = *v47;
          do
          {
            uint64_t v51 = v39;
            uint64_t v52 = *((void *)v50 + 1);
            while (v52)
            {
              uint64_t v52 = *(void *)(v52 + 8);
              uint64_t v112 = 0;
              uint64_t v113 = 0;
              v116[0] = 0;
              v116[1] = 0;
              uint64_t v115 = 0;
              uint64_t v117 = v119;
              uint64_t v118 = 0x400000000;
              v120[0] = (char *)&v121;
              v120[1] = (char *)0x800000000;
              uint64_t v122 = v124;
              uint64_t v123 = 0x800000000;
              v124[64] = 1;
              llvm::InlineFunction();
              if (v122 != v124) {
                free(v122);
              }
              llvm::SmallVector<llvm::WeakTrackingVH,8u>::~SmallVector(v120);
              if (v117 != v119) {
                free(v117);
              }
            }
            llvm::Function::eraseFromParent(v50);
            ++v47;
            uint64_t v39 = v51;
            if (v47 == v49) {
              break;
            }
            while (1)
            {
              long long v50 = *v47;
              if ((unint64_t)*v47 < 0xFFFFFFFFFFFFFFFELL) {
                break;
              }
              if (++v47 == v49) {
                goto LABEL_56;
              }
            }
          }
          while (v47 != v49);
        }
LABEL_56:
        uint64_t v94 = v39;
        uint64_t v53 = *((void *)v39 + 1);
        uint64_t v35 = (const char **)v102;
        while (v53)
        {
          uint64_t v54 = *(llvm::CallBase **)(v53 + 24);
          uint64_t v53 = *(void *)(v53 + 8);
          uint64_t v55 = **(llvm::Type ***)(**((void **)v54 - 4 * (*((_DWORD *)v54 + 5) & 0x7FFFFFF)) + 16);
          uint64_t v56 = llvm::CallBase::arg_end(v54);
          uint64_t v57 = (_DWORD *)((char *)v54 - 32 * (*((_DWORD *)v54 + 5) & 0x7FFFFFF));
          if (((v56 - (void)v57) & 0x1FFFFFFFC0) != 0) {
            uint64_t v58 = (llvm::Value *)*((void *)v57 + 4);
          }
          else {
            uint64_t v58 = 0;
          }
          llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(v102 + 47), v55);
          llvm::IRBuilderBase::SetInsertPoint(v36, v54);
          uint64_t v59 = (llvm::Value *)llvm::ConstantInt::get();
          if (v58)
          {
            uint64_t v60 = v102[26];
            LOWORD(v116[0]) = 257;
            uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v36, 39, (uint64_t)v58, v60, (uint64_t)&v112);
            __int16 v104 = 257;
            llvm::IRBuilderBase::CreateMul(v36, v59, Cast, (const llvm::Twine *)v103);
          }
          if (v111)
          {
            uint64_t v62 = *(void *)(llvm::Instruction::getFunction(v54) + 80);
            if (v62) {
              __int16 v63 = (llvm::BasicBlock *)(v62 - 24);
            }
            else {
              __int16 v63 = 0;
            }
            uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v63);
            if (FirstInsertionPt) {
              int v65 = (llvm::Instruction *)(FirstInsertionPt - 24);
            }
            else {
              int v65 = 0;
            }
            llvm::IRBuilderBase::SetInsertPoint(v36, v65);
            LOWORD(v116[0]) = 257;
            uint64_t Alloca = (llvm::Type **)llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v36, v55, v58, (const llvm::Twine *)&v112);
            llvm::IRBuilderBase::SetInsertPoint(v36, v54);
            llvm::IRBuilderBase::CreateLifetimeStart();
            uint64_t v67 = *(llvm::Type **)v54;
            LOWORD(v116[0]) = 257;
            llvm::IRBuilderBase::CreatePointerCast(v36, Alloca, v67, (const llvm::Twine *)&v112);
            llvm::Value::replaceAllUsesWith();
          }
          else
          {
            llvm::IRBuilderBase::SetInsertPoint(v36, v54);
            llvm::IRBuilderBase::CreateLifetimeEnd();
          }
          llvm::Instruction::eraseFromParent(v54);
        }
        llvm::Function::eraseFromParent(v94);
        if (v106 != v105) {
          free(v106);
        }
        std::string v37 = v96;
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      std::string v37 = (std::string *)((char *)v37 + 32);
    }
    while (v37 != v92);
  }
  BOOL v68 = v35[170];
  if (v68) {
    size_t v69 = strlen(v35[170]);
  }
  else {
    size_t v69 = 0;
  }
  uint64_t v70 = v35[171];
  if (v70) {
    size_t v71 = strlen(v35[171]);
  }
  else {
    size_t v71 = 0;
  }
  int v72 = operator new(0x50uLL);
  void *v72 = "agc.intersect.ray";
  v72[1] = 17;
  v72[2] = v68;
  v72[3] = v69;
  *((unsigned char *)v72 + 32) = 1;
  v72[5] = "agc.continue.ray";
  int v72[6] = 16;
  char v93 = (char *)(v72 + 10);
  int v73 = (llvm::IRBuilderBase *)(v35 + 1);
  v72[7] = v70;
  v72[8] = v71;
  int v74 = (char *)v72;
  std::string __p = v72;
  *((unsigned char *)v72 + 72) = 0;
  do
  {
    uint64_t v75 = *((void *)v74 + 3);
    uint64_t v101 = *((void *)v74 + 2);
    int v100 = v74[32];
    uint64_t v76 = llvm::Module::getFunction();
    if (v76)
    {
      uint64_t v95 = (llvm::Function *)v76;
      uint64_t v97 = v74;
      uint64_t v77 = *(void *)(v76 + 8);
      while (v77)
      {
        uint64_t v78 = *(llvm::Instruction **)(v77 + 24);
        uint64_t v77 = *(void *)(v77 + 8);
        llvm::IRBuilderBase::SetInsertPoint(v73, v78);
        uint64_t v112 = &v114;
        uint64_t v113 = 0x1000000000;
        if (v100) {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v112, v98);
        }
        BOOL v79 = (uint64_t *)((char *)v78 - 32 * (*((_DWORD *)v78 + 5) & 0x7FFFFFF));
        uint64_t v80 = llvm::CallBase::arg_end(v78);
        while (v79 != (uint64_t *)v80)
        {
          uint64_t v81 = *v79;
          v79 += 4;
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v112, v81);
        }
        unsigned int v82 = (llvm::Type *)llvm::PointerType::get();
        __int16 v83 = (llvm::Type *)llvm::PointerType::get();
        unint64_t v84 = *(llvm::Type ***)(a2 + 24);
        v109[0] = 257;
        Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v73, v84, v82, (const llvm::Twine *)&v105);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v112, (uint64_t)PointerCast);
        __int16 v86 = *(llvm::Type ***)(a2 + 40);
        v109[0] = 257;
        uint64_t v87 = llvm::IRBuilderBase::CreatePointerCast(v73, v86, v83, (const llvm::Twine *)&v105);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v112, (uint64_t)v87);
        AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)v102, v101, v75, v102[18], (uint64_t)v112, v113);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v78);
        if (v112 != &v114) {
          free(v112);
        }
      }
      llvm::Function::eraseFromParent(v95);
      int v74 = v97;
    }
    v74 += 40;
  }
  while (v74 != v93);
  operator delete(__p);
  if (v31 != v90)
  {
    uint64_t v88 = 32 * v89;
    do
    {
      if (v90->__r_.__value_.__s.__data_[v88 - 9] < 0) {
        operator delete(*(void **)((char *)&v90[-1] + v88 - 8));
      }
      v88 -= 32;
    }
    while (v88);
  }
  operator delete(v90);
}

uint64_t AGCLLVMUserObject::compile(AGCLLVMUserObject *this)
{
  v656[30] = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 37)) {
    return 0;
  }
  uint64_t v1 = this;
  BOOL v601 = MGGetBoolAnswer()
      && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DEBUG_LLVM_IR", v2)) != 0
      && *Value != 48
      && atoi(Value) != 0;
  uint64_t v10 = (char *)v1 + *(void *)(*(void *)v1 - 24);
  uint64_t v11 = v10 + 3224;
  if (v10[3247] < 0) {
    uint64_t v11 = (void *)*v11;
  }
  printMessage((char **)&AGCPrinter, "------ Compiling function : %s ------\n", v3, v4, v5, v6, v7, v8, (char)v11);
  uint64_t v12 = *(llvm::Module **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 368);
  *(void *)__str = "llvm.dbg.cu";
  LOWORD(v648) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v12, (const llvm::Twine *)__str);
  uint64_t v14 = *(void *)v1;
  if (NamedMetadata)
  {
    *((unsigned char *)v1 + *(void *)(v14 - 24) + 2760) = 1;
    uint64_t v15 = (llvm::Function *)*((void *)v1 + 22);
    if (v15)
    {
      Subprograuint64_t m = (llvm::DILocalScope *)llvm::Function::getSubprogram(v15);
      uint64_t v14 = *(void *)v1;
      if (Subprogram)
      {
        llvm::DILocalScope::getNonLexicalBlockFileScope(Subprogram);
        *((void *)v1 + 6) = llvm::DILocation::getImpl();
        uint64_t v14 = *(void *)v1;
      }
    }
  }
  uint64_t v17 = *(llvm::Module **)((char *)v1 + *(void *)(v14 - 24) + 368);
  *(void *)__str = "air.requestHash";
  LOWORD(v648) = 259;
  uint64_t v18 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v17, (const llvm::Twine *)__str);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t Operand = llvm::NamedMDNode::getOperand(v18);
    char String = llvm::MDString::getString(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)));
    printMessage((char **)&AGCPrinter, "------ Build Request Info ------", v22, v23, v24, v25, v26, v27, v595);
    printMessage((char **)&AGCPrinter, "hash: %s", v28, v29, v30, v31, v32, v33, String);
    printMessage((char **)&AGCPrinter, "------ End Build Request Info ------\n", v34, v35, v36, v37, v38, v39, v596);
    llvm::NamedMDNode::eraseFromParent(v19);
  }
  uint64_t v40 = *(llvm::Module **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 368);
  *(void *)__str = "air.shaderSource";
  LOWORD(v648) = 259;
  uint64_t v41 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v40, (const llvm::Twine *)__str);
  if (v41)
  {
    char v42 = v41;
    uint64_t v43 = llvm::NamedMDNode::getOperand(v41);
    uint64_t v44 = llvm::MDString::getString(*(llvm::MDString **)(v43 - 8 * *(unsigned int *)(v43 + 8)));
    uint64_t v45 = *(void *)(*(void *)v1 - 24);
    if (v44)
    {
      char v46 = v44;
      long long v47 = (_DWORD *)((char *)v1 + v45);
      uint64_t v48 = (const char *)(*(uint64_t (**)(char *))(*(void *)((char *)v1 + v45) + 56))((char *)v1 + v45);
      if (dumpShaderToFile(v48))
      {
        long long v49 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)v47 + 56))(v47);
        snprintf(__str, 0x80uLL, "%s shader %u (shader source)", v49, v47[818]);
        long long v50 = (const char *)(*(uint64_t (**)(_DWORD *))(*(void *)v47 + 56))(v47);
        if (!strcmp(v50, "compute") || !strcmp(v50, "compute-program")) {
          uint64_t v57 = "Compute";
        }
        else {
          uint64_t v57 = "Graphics";
        }
        printMessage((char **)&AGCPrinter, "------ Start %s %s -------\n", v51, v52, v53, v54, v55, v56, (char)v57);
        printMessage((char **)&AGCPrinter, "%s\n", v59, v60, v61, v62, v63, v64, v46);
        printMessage((char **)&AGCPrinter, "------ End %s %s -------\n", v65, v66, v67, v68, v69, v70, (char)v57);
      }
    }
    llvm::NamedMDNode::eraseFromParent(v42);
  }
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "generic", 0);
  char v71 = (*(uint64_t (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 56))((char *)v1 + *(void *)(*(void *)v1 - 24));
  printMessage((char **)&AGCPrinter, "------ Compilation flags for %s shader %u ------", v72, v73, v74, v75, v76, v77, v71);
  printMessage((char **)&AGCPrinter, "Object fast-math flags: {nonan=%d, noinf=%d, nosignedzero=%d, allowrcp=%d, unsafealgebra=%d}", v78, v79, v80, v81, v82, v83, (*(_DWORD *)((unsigned char *)v1 + *(void *)(*(void *)v1 - 24) + 136) & 2) != 0);
  printMessage((char **)&AGCPrinter, "Target fast-math flags: {nonan=%d, noinf=%d, nosignedzero=%d, allowrcp=%d, unsafealgebra=%d}", v84, v85, v86, v87, v88, v89, (*(_DWORD *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 104) & 2) != 0);
  printMessage((char **)&AGCPrinter, "Codegen fast-math options: { finite-math=%d, unsafe-fp-math=%d, less_pecise_fmad=%d}", v90, v91, v92, v93, v94, v95, *((unsigned char *)v1 + 34));
  char v96 = (*(uint64_t (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 56))((char *)v1 + *(void *)(*(void *)v1 - 24));
  printMessage((char **)&AGCPrinter, "------ End compilation flags for %s shader %u ------", v97, v98, v99, v100, v101, v102, v96);
  char v103 = (*(uint64_t (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 56))((char *)v1 + *(void *)(*(void *)v1 - 24));
  printMessage((char **)&AGCPrinter, "------ Start compilation key description for %s shader %u  ------", v104, v105, v106, v107, v108, v109, v103);
  (*(void (**)(char *__return_ptr))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 120))(__str);
  if (v646.i8[15] >= 0) {
    uint64_t v116 = __str;
  }
  else {
    LOBYTE(v116) = __str[0];
  }
  printMessage((char **)&AGCPrinter, "%s", v110, v111, v112, v113, v114, v115, (char)v116);
  if (v646.i8[15] < 0) {
    operator delete(*(void **)__str);
  }
  char v117 = (*(uint64_t (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 56))((char *)v1 + *(void *)(*(void *)v1 - 24));
  printMessage((char **)&AGCPrinter, "------ End compilation key description for %s shader %u  ------", v118, v119, v120, v121, v122, v123, v117);
  int DefaultRoundingMode = AGCLLVMObject::getDefaultRoundingMode((AGCLLVMUserObject *)((char *)v1
                                                                                  + *(void *)(*(void *)v1 - 24)));
  printMessage((char **)&AGCPrinter, "Default rounding mode: %s", v125, v126, v127, v128, v129, v130, (char)_AGCFPRoundingModeStrings[DefaultRoundingMode]);
  GlobalVariable = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
  if (GlobalVariable) {
    llvm::GlobalVariable::eraseFromParent(GlobalVariable);
  }
  v624 = v1;
  if (!*((unsigned char *)v1 + 45))
  {
LABEL_165:
    AGCLLVMUserObject::markFunctionsInline(v1, v132, v133, v134, v135, v136, v137, v138);
    (*(void (**)(AGCLLVMUserObject *))(*(void *)v1 + 40))(v1);
    if (v601) {
      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after simplifyGenericIR", 0);
    }
    goto LABEL_168;
  }
  uint64_t v139 = *(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 368);
  uint64_t v140 = v139 + 24;
  uint64_t v141 = *(void *)(v139 + 32);
  if (v141 == v139 + 24)
  {
    LOBYTE(v142) = 0;
    goto LABEL_163;
  }
  int v142 = 0;
  uint64_t v598 = v139 + 24;
  do
  {
    uint64_t v600 = v141;
    if (v141) {
      uint64_t v143 = (llvm::GlobalValue *)(v141 - 56);
    }
    else {
      uint64_t v143 = 0;
    }
    if (llvm::GlobalValue::isDeclaration(v143)) {
      goto LABEL_160;
    }
    int v599 = v142;
    *(void *)__str = &v646.i64[1];
    v646.i64[0] = 0x1000000000;
    uint64_t v144 = *((void *)v143 + 10);
    if (v144) {
      uint64_t v145 = v144 - 24;
    }
    else {
      uint64_t v145 = 0;
    }
    uint64_t v146 = v145 + 40;
    uint64_t v147 = *(void *)(v145 + 48);
    if (v147 == v145 + 40)
    {
      uint64_t v150 = 0;
      int v149 = &v646.i64[1];
    }
    else
    {
      do
      {
        if (v147) {
          uint64_t v148 = v147 - 24;
        }
        else {
          uint64_t v148 = 0;
        }
        if (v147 && *(unsigned char *)(v148 + 16) == 59) {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__str, v148);
        }
        uint64_t v147 = *(void *)(v147 + 8);
      }
      while (v147 != v146);
      int v149 = *(uint64_t **)__str;
      uint64_t v150 = v646.u32[0];
    }
    v635.__r_.__value_.__r.__words[0] = (std::string::size_type)&v635.__r_.__value_.__r.__words[2];
    v635.__r_.__value_.__l.__size_ = 0x100000000;
    v636 = 0;
    v637 = 0;
    LODWORD(v638) = 0;
    HIDWORD(v641[0]) = 0;
    uint64_t v639 = 0;
    uint64_t Function = 0;
    LOBYTE(v641[0]) = 0;
    int v151 = 0;
    if (!v150) {
      goto LABEL_155;
    }
    v608 = &v149[v150];
    do
    {
      uint64_t v152 = *v149;
      v632 = v634;
      v634[0] = v152;
      uint64_t v633 = 0x400000001;
      uint64_t v628 = 0;
      v626 = (uint64_t (*)(uint64_t))&v627;
      uint64_t v153 = (uint64_t (*)(uint64_t))operator new(0x28uLL);
      *((void *)v153 + 4) = v152;
      *(void *)uint64_t v153 = 0;
      *((void *)v153 + 1) = 0;
      *((void *)v153 + 2) = &v627;
      v626 = v153;
      v627 = v153;
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v153, (uint64_t *)v153);
      ++v628;
      unsigned int v154 = v633;
      if (!v633)
      {
        LODWORD(v185) = 0;
        goto LABEL_147;
      }
      v609 = v149;
      int v612 = v151;
      uint64_t v155 = 0;
      int v156 = 0;
      unint64_t v157 = 0;
      unsigned int v158 = 0;
      uint64_t v159 = 0;
      __int16 v160 = 0;
      char v604 = 0;
      do
      {
        uint64_t v161 = *((void *)v632 + --v154);
        LODWORD(v633) = v154;
        char v162 = *(llvm::Use **)(v161 + 8);
        if (v162)
        {
          uint64_t v618 = v161;
          while (1)
          {
            int v163 = (llvm::CallBase *)*((void *)v162 + 3);
            unsigned int v164 = *((unsigned __int8 *)v163 + 16);
            BOOL v165 = v164 < 0x1C || v163 == 0;
            if (v165) {
              goto LABEL_140;
            }
            if (*((unsigned __int8 *)v163 + 16) <= 0x3Du)
            {
              if (v164 == 60)
              {
                if (*((void *)v163 - 4) != v161 || (*((_WORD *)v163 + 9) & 1) != 0) {
                  goto LABEL_140;
                }
                if (v159 >= v160)
                {
                  uint64_t v173 = v159 - v158;
                  unint64_t v174 = v173 + 1;
                  if ((unint64_t)(v173 + 1) >> 61) {
                    goto LABEL_1016;
                  }
                  if (((char *)v160 - (char *)v158) >> 2 > v174) {
                    unint64_t v174 = ((char *)v160 - (char *)v158) >> 2;
                  }
                  if ((unint64_t)((char *)v160 - (char *)v158) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v175 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v175 = v174;
                  }
                  v614 = v157;
                  if (v175)
                  {
                    if (v175 >> 61) {
LABEL_1017:
                    }
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    uint64_t v176 = (char *)operator new(8 * v175);
                  }
                  else
                  {
                    uint64_t v176 = 0;
                  }
                  unint64_t v180 = (llvm::CallBase **)&v176[8 * v173];
                  *unint64_t v180 = v163;
                  uint64_t v181 = v180 + 1;
                  while (v159 != v158)
                  {
                    unint64_t v182 = *--v159;
                    *--unint64_t v180 = v182;
                  }
                  __int16 v160 = (llvm::Instruction **)&v176[8 * v175];
                  if (v158) {
                    operator delete(v158);
                  }
                  unsigned int v158 = v180;
                  uint64_t v159 = v181;
                  uint64_t v161 = v618;
                  unint64_t v157 = v614;
                }
                else
                {
                  *v159++ = v163;
                }
              }
              else
              {
                if (v164 != 61 || *((void *)v163 - 4) != v161 || (*((_WORD *)v163 + 9) & 1) != 0) {
                  goto LABEL_140;
                }
                if (v156 >= v157)
                {
                  uint64_t v169 = v156 - v155;
                  unint64_t v170 = v169 + 1;
                  if ((unint64_t)(v169 + 1) >> 61) {
                    goto LABEL_1016;
                  }
                  if (((char *)v157 - (char *)v155) >> 2 > v170) {
                    unint64_t v170 = ((char *)v157 - (char *)v155) >> 2;
                  }
                  if ((unint64_t)((char *)v157 - (char *)v155) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v171 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v171 = v170;
                  }
                  if (v171)
                  {
                    if (v171 >> 61) {
                      goto LABEL_1017;
                    }
                    char v172 = (char *)operator new(8 * v171);
                  }
                  else
                  {
                    char v172 = 0;
                  }
                  uint64_t v177 = (llvm::CallBase **)&v172[8 * v169];
                  *uint64_t v177 = v163;
                  int v178 = v177 + 1;
                  while (v156 != v155)
                  {
                    __int16 v179 = *--v156;
                    *--uint64_t v177 = v179;
                  }
                  unint64_t v157 = (llvm::Instruction **)&v172[8 * v171];
                  if (v155) {
                    operator delete(v155);
                  }
                  uint64_t v155 = v177;
                  int v156 = v178;
                  uint64_t v161 = v618;
                }
                else
                {
                  *v156++ = v163;
                }
              }
              goto LABEL_127;
            }
            if (v164 != 62)
            {
              if (v164 == 84)
              {
                if ((llvm::AttributeList::hasFnAttr() & 1) == 0
                  && ((llvm::CallBase::hasReadingOperandBundles(v163) & 1) != 0
                   || (llvm::CallBase::hasFnAttrOnCalledFunction() & 1) == 0))
                {
                  if (*(unsigned char *)(*(void *)v163 + 8) != 7) {
                    goto LABEL_140;
                  }
                  uint64_t v168 = *((void *)v163 - 4);
                  if (!v168
                    || *(unsigned char *)(v168 + 16)
                    || *(void *)(v168 + 24) != *((void *)v163 + 9)
                    || (*(unsigned char *)(v168 + 33) & 0x20) == 0
                    || (*(_DWORD *)(v168 + 36) - 167) >= 2)
                  {
                    llvm::Use::getOperandNo(v162);
                    if (!llvm::CallBase::paramHasAttr()) {
                      goto LABEL_140;
                    }
                    if (llvm::CallBase::paramHasAttr())
                    {
                      char v604 = 1;
                    }
                    else if ((llvm::CallBase::paramHasAttr() & 1) == 0)
                    {
                      goto LABEL_140;
                    }
                  }
                }
                goto LABEL_127;
              }
              if (v164 != 77) {
                goto LABEL_140;
              }
            }
            for (uint64_t i = v627; i; uint64_t i = *(uint64_t (**)(uint64_t))i)
            {
              unint64_t v167 = *((void *)i + 4);
              if ((unint64_t)v163 >= v167)
              {
                if (v167 >= (unint64_t)v163) {
                  goto LABEL_127;
                }
                uint64_t i = (uint64_t (*)(uint64_t))((char *)i + 8);
              }
            }
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v632, *((void *)v162 + 3));
            std::__tree<llvm::Instruction *>::__emplace_unique_key_args<llvm::Instruction *,llvm::Instruction * const&>((uint64_t *)&v626, (unint64_t)v163, (uint64_t)v163);
LABEL_127:
            char v162 = (llvm::Use *)*((void *)v162 + 1);
            if (!v162)
            {
              unsigned int v154 = v633;
              break;
            }
          }
        }
      }
      while (v154);
      unint64_t v183 = (char *)v156 - (char *)v155;
      if ((v158 != v159) | v604 & 1)
      {
        if (v183 != 8 || (uint64_t v184 = *((void *)*v155 - 4), llvm::UndefValue::get(), v158 == v159))
        {
LABEL_140:
          LODWORD(v185) = 0;
        }
        else
        {
          LODWORD(v185) = 0;
          uint64_t v186 = v158;
          do
          {
            uint64_t v187 = *v186;
            if (*((void *)*v186 - 4) == v184)
            {
              if (!LODWORD(v635.__r_.__value_.__r.__words[1]))
              {
                uint64_t Function = (void **)llvm::Instruction::getFunction(v187);
                llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>();
              }
              llvm::DominatorTree::dominates();
              llvm::Value::replaceAllUsesWith();
              llvm::Instruction::eraseFromParent(v187);
              LODWORD(v185) = v185 + 1;
            }
            ++v186;
          }
          while (v186 != v159);
        }
      }
      else
      {
        unint64_t v185 = v183 >> 3;
        if (v155 != v156)
        {
          uint64_t v188 = v155;
          do
          {
            uint64_t v189 = *v188++;
            llvm::Instruction::eraseFromParent(v189);
          }
          while (v188 != v156);
        }
      }
      int v151 = v612;
      int v149 = v609;
      if (v158) {
        operator delete(v158);
      }
      if (v155) {
        operator delete(v155);
      }
      uint64_t v1 = v624;
LABEL_147:
      std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v627);
      if (v632 != v634) {
        free(v632);
      }
      v151 += v185;
      ++v149;
    }
    while (v149 != v608);
LABEL_155:
    llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll((unsigned int *)&v636);
    llvm::deallocate_buffer(v636, (void *)(16 * v638));
    if ((std::string::size_type *)v635.__r_.__value_.__l.__data_ != &v635.__r_.__value_.__r.__words[2]) {
      free(v635.__r_.__value_.__l.__data_);
    }
    uint64_t v140 = v598;
    if (*(int64x2_t **)__str != (int64x2_t *)&v646.u64[1]) {
      free(*(void **)__str);
    }
    int v142 = v151 + v599;
LABEL_160:
    uint64_t v141 = *(void *)(v600 + 8);
  }
  while (v141 != v140);
LABEL_163:
  printMessage((char **)&AGCPrinter, "RemoveAndForwardAllocaStores: removed %u instructions", v133, v134, v135, v136, v137, v138, v142);
  if (v601)
  {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after RemoveAndForwardAllocaStores", 0);
    goto LABEL_165;
  }
  AGCLLVMUserObject::markFunctionsInline(v1, v190, v191, v192, v193, v194, v195, v196);
  (*(void (**)(AGCLLVMUserObject *))(*(void *)v1 + 40))(v1);
LABEL_168:
  int TexturesAndSamplers = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 48))(v1);
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after initCompile", 0);
  }
  if (TexturesAndSamplers) {
    int TexturesAndSamplers = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 120))(v1);
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after setupShaderInputs", 0);
  }
  if (TexturesAndSamplers) {
    int TexturesAndSamplers = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 200))(v1);
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after setupBufferAliasInfo", 0);
  }
  if (TexturesAndSamplers) {
    int TexturesAndSamplers = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 208))(v1);
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after setupStackOOBCheck", 0);
  }
  if (TexturesAndSamplers) {
    int TexturesAndSamplers = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 160))(v1);
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after setupInterpolationFunctions", 0);
  }
  if (TexturesAndSamplers) {
    int TexturesAndSamplers = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 136))(v1);
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after setupGlobalBindings", 0);
  }
  if (TexturesAndSamplers) {
    int TexturesAndSamplers = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 312))(v1);
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after setupArgumentBuffers", 0);
  }
  if (!TexturesAndSamplers) {
    goto LABEL_382;
  }
  uint64_t v198 = *(void *)v1;
  uint64_t v199 = *(void *)(*(void *)v1 - 24);
  if (*(unsigned char *)(*(void *)((char *)v1 + v199 + 400) + 1784) && !*((unsigned char *)v1 + 15))
  {
    int v201 = (*(uint64_t (**)(void))(*(void *)((char *)v1 + v199) + 72))();
    uint64_t v202 = *(void *)v1;
    uint64_t v203 = *(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 368);
    uint64_t v204 = v203 + 24;
    uint64_t v205 = *(void *)(v203 + 32);
    if (v205 == v203 + 24)
    {
      IsUserExternDeclaratiouint64_t n = 0;
    }
    else
    {
      do
      {
        if (v205) {
          uint64_t v206 = (AGCLLVMUserObject *)(v205 - 56);
        }
        else {
          uint64_t v206 = 0;
        }
        IsUserExternDeclaratiouint64_t n = AGCLLVMUserObject::functionIsUserExternDeclaration(v206, v200);
        if (IsUserExternDeclaration) {
          break;
        }
        uint64_t v205 = *(void *)(v205 + 8);
      }
      while (v205 != v204);
      uint64_t v202 = *(void *)v1;
    }
    v208 = (char *)v1 + *(void *)(v202 - 24);
    unint64_t v209 = v208 + 32;
    uint64_t v210 = *((void *)v208 + 46);
    uint64_t v211 = v210 + 24;
    uint64_t v212 = *(void *)(v210 + 32);
    if (v212 != v210 + 24)
    {
      uint64_t v213 = *(void *)(v210 + 32);
      do
      {
        if (v213) {
          uint64_t v214 = v213 - 56;
        }
        else {
          uint64_t v214 = 0;
        }
        uint64_t v215 = v214 + 72;
        for (uint64_t j = *(void *)(v214 + 80); j != v215; uint64_t j = *(void *)(j + 8))
        {
          uint64_t v217 = j - 24;
          if (!j) {
            uint64_t v217 = 0;
          }
          uint64_t v218 = v217 + 40;
          uint64_t v219 = *(void *)(v217 + 48);
          if (v219 != v218)
          {
            while (j != v215)
            {
              uint64_t v220 = v219 - 24;
              if (!v219) {
                uint64_t v220 = 0;
              }
              int v221 = *(unsigned __int8 *)(v220 + 16);
              if (v221 != 84) {
                uint64_t v220 = 0;
              }
              if (v219)
              {
                if (v221 == 84)
                {
                  uint64_t v222 = *(void *)(v220 - 32);
                  if (!v222 || *(unsigned char *)(v222 + 16) || *(void *)(v222 + 24) != *(void *)(v220 + 72))
                  {
                    int v226 = 1;
                    goto LABEL_237;
                  }
                }
              }
              uint64_t v219 = *(void *)(v219 + 8);
              uint64_t v223 = j - 24;
              if (!j) {
                uint64_t v223 = 0;
              }
              uint64_t v224 = v223 + 40;
              while (v219 == v224)
              {
                uint64_t j = *(void *)(j + 8);
                if (j == v215) {
                  goto LABEL_234;
                }
                uint64_t v225 = j - 24;
                if (!j) {
                  uint64_t v225 = 0;
                }
                uint64_t v224 = v225 + 40;
                uint64_t v219 = *(void *)(v225 + 48);
              }
            }
            break;
          }
        }
LABEL_234:
        uint64_t v213 = *(void *)(v213 + 8);
      }
      while (v213 != v211);
    }
    int v226 = 0;
LABEL_237:
    int v227 = *(unsigned __int8 *)(*((void *)v209 + 46) + 1785);
    if (v227)
    {
      LOBYTE(v227) = 0;
      if (!*((unsigned char *)v1 + 3712) && v212 != v211)
      {
        do
        {
          uint64_t v228 = v212 - 56;
          if (!v212) {
            uint64_t v228 = 0;
          }
          uint64_t v229 = v228 + 72;
          for (uint64_t k = *(void *)(v228 + 80); k != v229; uint64_t k = *(void *)(k + 8))
          {
            uint64_t v231 = k - 24;
            if (!k) {
              uint64_t v231 = 0;
            }
            uint64_t v232 = *(void *)(v231 + 48);
            if (v232 != v231 + 40)
            {
LABEL_280:
              while (k != v229)
              {
                uint64_t v233 = v232 - 24;
                if (!v232) {
                  uint64_t v233 = 0;
                }
                int v234 = *(unsigned __int8 *)(v233 + 16);
                if (v234 != 84) {
                  uint64_t v233 = 0;
                }
                if (v232)
                {
                  if (v234 == 84)
                  {
                    uint64_t v235 = *(void *)(v233 - 32);
                    if (v235)
                    {
                      if (!*(unsigned char *)(v235 + 16) && *(void *)(v235 + 24) == *(void *)(v233 + 72))
                      {
                        if ((uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v235), v237 >= 0xD)
                          && (*Name == 0x65746E692E726961
                            ? (BOOL v238 = *(void *)((char *)Name + 5) == 0x746365737265746ELL)
                            : (BOOL v238 = 0),
                              v238)
                          || (__int16 v239 = (void *)llvm::Value::getName((llvm::Value *)v235), v240 >= 0x1F)
                          && (*v239 == 0x6F6C6C612E726961 ? (BOOL v241 = v239[1] == 0x746E695F65746163) : (BOOL v241 = 0),
                              v241 ? (BOOL v242 = v239[2] == 0x6F69746365737265) : (BOOL v242 = 0),
                              v242 ? (BOOL v243 = *(void *)((char *)v239 + 23) == 0x79726575715F6E6FLL) : (BOOL v243 = 0),
                              v243))
                        {
                          LOBYTE(v227) = 1;
                          goto LABEL_283;
                        }
                      }
                    }
                  }
                }
                uint64_t v232 = *(void *)(v232 + 8);
                uint64_t v244 = k - 24;
                if (!k) {
                  uint64_t v244 = 0;
                }
                if (v232 == v244 + 40)
                {
                  while (1)
                  {
                    uint64_t k = *(void *)(k + 8);
                    if (k == v229) {
                      goto LABEL_281;
                    }
                    uint64_t v245 = k - 24;
                    if (!k) {
                      uint64_t v245 = 0;
                    }
                    uint64_t v232 = *(void *)(v245 + 48);
                    if (v232 != v245 + 40) {
                      goto LABEL_280;
                    }
                  }
                }
              }
              break;
            }
          }
LABEL_281:
          uint64_t v212 = *(void *)(v212 + 8);
        }
        while (v212 != v211);
        LOBYTE(v227) = 0;
LABEL_283:
        uint64_t v1 = v624;
      }
    }
    if ((IsUserExternDeclaration | v226))
    {
      LOBYTE(v227) = 1;
    }
    else if (v201 == 1)
    {
      LOBYTE(v227) = 1;
    }
    *((unsigned char *)v1 + 3656) = v227;
    *((unsigned char *)v1 + 3657) = IsUserExternDeclaration;
    uint64_t v198 = *(void *)v1;
  }
  long long v246 = (char *)v1 + *(void *)(v198 - 24);
  if (!*(unsigned char *)(*((void *)v246 + 50) + 1789))
  {
    int TexturesAndSamplers = 1;
    goto LABEL_382;
  }
  *(void *)__str = &v646.i64[1];
  v646.i64[0] = 0x400000000;
  memset(&v635, 0, 20);
  uint64_t v247 = *((void *)v246 + 46);
  uint64_t v248 = *(void *)(v247 + 32);
  for (m = v247 + 24; v248 != m; uint64_t v248 = *(void *)(v248 + 8))
  {
    if (v248) {
      unint64_t v249 = (uint64_t (*)(uint64_t))(v248 - 56);
    }
    else {
      unint64_t v249 = 0;
    }
    for (uint64_t n = (void *)*((void *)v249 + 10); n != (void *)((char *)v249 + 72); uint64_t n = (void *)n[1])
    {
      long long v251 = n - 3;
      if (!n) {
        long long v251 = 0;
      }
      uint64_t v252 = v251 + 5;
      for (iuint64_t i = (void *)v251[6]; ii != v252; iuint64_t i = (void *)ii[1])
      {
        if (ii) {
          uint64_t v254 = (uint64_t)(ii - 3);
        }
        else {
          uint64_t v254 = 0;
        }
        int v255 = *(unsigned __int8 *)(v254 + 16);
        if (v255 == 84) {
          uint64_t v256 = v254;
        }
        else {
          uint64_t v256 = 0;
        }
        if (ii && v255 == 84)
        {
          uint64_t v257 = *(void *)(v256 - 32);
          if (v257 && !*(unsigned char *)(v257 + 16) && *(void *)(v257 + 24) == *(void *)(v256 + 72))
          {
            v632 = (void *)llvm::Value::getName(*(llvm::Value **)(v256 - 32));
            uint64_t v633 = v261;
            if (llvm::StringRef::find() != -1 && llvm::StringRef::find() == -1)
            {
              v626 = v249;
              llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)&v635, (uint64_t *)&v626);
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v265 + 56, v256);
              *((unsigned char *)v624 + 10) = 1;
            }
            else if (llvm::StringRef::find() == -1)
            {
              if (llvm::StringRef::find() == -1)
              {
                if (AGCLLVMUserObject::functionIsUserExternDeclaration((AGCLLVMUserObject *)v257, v263))
                {
                  v626 = v249;
                  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)&v635, (uint64_t *)&v626);
                  uint64_t v267 = v266 + 200;
                }
                else
                {
                  v626 = v249;
                  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)&v635, (uint64_t *)&v626);
                  uint64_t v267 = v268 + 152;
                }
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v267, v256);
              }
              else
              {
                v626 = v249;
                llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)&v635, (uint64_t *)&v626);
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v264 + 8, v256);
                *((unsigned char *)v624 + *(void *)(*(void *)v624 - 24) + 456) = 1;
              }
            }
            else
            {
              v626 = v249;
              llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)&v635, (uint64_t *)&v626);
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v262 + 104, v256);
              *((unsigned char *)v624 + 11) = 1;
            }
            if (llvm::StringRef::find() != -1) {
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__str, v256);
            }
          }
          else
          {
            v632 = v249;
            llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)&v635, (uint64_t *)&v632);
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v258 + 200, v256);
          }
        }
        else if (ii && v255 == 29)
        {
          v632 = v249;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)&v635, (uint64_t *)&v632);
          unint64_t v260 = *(unsigned int *)(v259 + 256);
          if (v260 >= *(unsigned int *)(v259 + 260)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v259 + 248) + 8 * v260) = v254;
          ++*(_DWORD *)(v259 + 256);
        }
      }
    }
  }
  if ((MGGetBoolAnswer() & 1) != 0
    && (size_t v270 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_YIELD_FORCE_BARRIER", v269)) != 0
    && *v270 != 48
    && atoi(v270))
  {
    uint64_t v1 = v624;
    AGCLLVMUserObject::replaceSimdgroupAtomicWaitNotify(void)::$_0::operator()(v624);
    BOOL v271 = 0;
  }
  else
  {
    uint64_t v1 = v624;
    BOOL v271 = (*(unsigned int (**)(char *))(*(void *)((char *)v624 + *(void *)(*(void *)v624 - 24))
                                                  + 64))((char *)v624 + *(void *)(*(void *)v624 - 24)) == 7
        || (*(unsigned int (**)(char *))(*(void *)((char *)v624 + *(void *)(*(void *)v624 - 24))
                                                  + 64))((char *)v624 + *(void *)(*(void *)v624 - 24)) == 1
        || (*(unsigned int (**)(char *))(*(void *)((char *)v624 + *(void *)(*(void *)v624 - 24))
                                                  + 64))((char *)v624 + *(void *)(*(void *)v624 - 24)) == 2
        || (*(unsigned int (**)(char *))(*(void *)((char *)v624 + *(void *)(*(void *)v624 - 24))
                                                  + 64))((char *)v624 + *(void *)(*(void *)v624 - 24)) == 3
        || (*(unsigned int (**)(char *))(*(void *)((char *)v624 + *(void *)(*(void *)v624 - 24))
                                                  + 64))((char *)v624 + *(void *)(*(void *)v624 - 24)) == 4
        || (*(unsigned int (**)(char *))(*(void *)((char *)v624 + *(void *)(*(void *)v624 - 24))
                                                  + 64))((char *)v624 + *(void *)(*(void *)v624 - 24)) == 9;
  }
  if (!*((unsigned char *)v1 + 10) || !*((unsigned char *)v1 + 11))
  {
    BOOL v272 = 0;
    if (v271) {
      goto LABEL_349;
    }
LABEL_347:
    *((unsigned char *)v1 + 13) = 0;
    goto LABEL_355;
  }
  BOOL v272 = *((unsigned char *)v1 + *(void *)(*(void *)v1 - 24) + 456) != 0;
  if (!v271) {
    goto LABEL_347;
  }
LABEL_349:
  int v273 = v272 & (AGCLLVMUserObject::needsDylibResources(v1) ^ 1);
  int v274 = AGCLLVMUserObject::needsDylibResources(v1);
  *((unsigned char *)v1 + 13) = 0;
  if (v273 != 1)
  {
    if (!v274
      || (AGCLLVMUserObject::SimdgroupAtomicWaitNotify::foundBarrierDominatingAllSideEffectsAndExternalCalls(*((void *)v1 + 22), (uint64_t)&v635) & 1) != 0)
    {
      goto LABEL_355;
    }
    if (MGGetBoolAnswer()
      && (long long v301 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_YIELD_INSERT_BARRIER_FOR_DYLIB", v300)) != 0
      && *v301 != 48)
    {
      BOOL v302 = atoi(v301) != 0;
      if (v272) {
        goto LABEL_351;
      }
    }
    else
    {
      BOOL v302 = 0;
      if (v272) {
        goto LABEL_351;
      }
    }
    if (!v302) {
      goto LABEL_355;
    }
LABEL_351:
    AGCLLVMUserObject::replaceSimdgroupAtomicWaitNotify(void)::$_0::operator()(v1);
    goto LABEL_355;
  }
  if ((AGCLLVMUserObject::SimdgroupAtomicWaitNotify::foundBarrierDominatingAllSideEffectsAndExternalCalls(*((void *)v1 + 22), (uint64_t)&v635) & 1) == 0)goto LABEL_351; {
LABEL_355:
  }
  if (v646.i32[0])
  {
    v275 = *(void **)__str;
    uint64_t v276 = 8 * v646.u32[0];
    LOBYTE(v277) = 1;
    do
    {
      if (v277)
      {
        uint64_t v278 = *(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400);
        int v277 = (*(uint64_t (**)(uint64_t, void))(*(void *)v278 + 736))(v278, *v275);
      }
      else
      {
        int v277 = 0;
      }
      ++v275;
      v276 -= 8;
    }
    while (v276);
  }
  else
  {
    int v277 = 1;
  }
  int v279 = v277;
  unsigned int v280 = v635.__r_.__value_.__r.__words[2];
  unint64_t v281 = (llvm *)v635.__r_.__value_.__r.__words[0];
  if (LODWORD(v635.__r_.__value_.__r.__words[2]))
  {
    uint64_t v282 = 0;
    uint64_t v283 = 296 * LODWORD(v635.__r_.__value_.__r.__words[2]);
    do
    {
      if ((*(void *)((char *)v281 + v282) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        char v284 = (void *)((char *)v281 + v282);
        v285 = *(char **)((char *)v281 + v282 + 248);
        if ((char *)v281 + v282 + 264 != v285) {
          free(v285);
        }
        size_t v286 = (void *)v284[25];
        if (v284 + 27 != v286) {
          free(v286);
        }
        int v287 = (char *)v281 + v282;
        BOOL v288 = *(char **)((char *)v281 + v282 + 152);
        if ((char *)v281 + v282 + 168 != v288) {
          free(v288);
        }
        uint64_t v289 = (char *)*((void *)v287 + 13);
        if (v287 + 120 != v289) {
          free(v289);
        }
        v290 = *(char **)((char *)v281 + v282 + 56);
        if ((char *)v281 + v282 + 72 != v290) {
          free(v290);
        }
        v291 = (char *)v284[1];
        if ((char *)v281 + v282 + 24 != v291) {
          free(v291);
        }
      }
      v282 += 296;
    }
    while (v283 != v282);
  }
  llvm::deallocate_buffer(v281, (void *)(296 * v280));
  if (*(int64x2_t **)__str != (int64x2_t *)&v646.u64[1]) {
    free(*(void **)__str);
  }
  int TexturesAndSamplers = v279;
LABEL_382:
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after replaceSimdgroupAtomicWaitNotify", 0);
  }
  if (TexturesAndSamplers)
  {
    uint64_t v292 = *(void *)v1;
    if (*(unsigned char *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 1784))
    {
      int v605 = TexturesAndSamplers;
      if (*((void *)v1 + 22)
        && (int v293 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 416))(v1),
            uint64_t v292 = *(void *)v1,
            v293))
      {
        int v294 = (AGCLLVMUserObject *)((char *)v1 + *(void *)(v292 - 24) + 40);
        uint64_t v295 = *(void *)(*((void *)v1 + 22) + 80);
        if (v295) {
          uint64_t v296 = v295 - 24;
        }
        else {
          uint64_t v296 = 0;
        }
        uint64_t v297 = *(void *)(v296 + 40);
        if (v297) {
          int v298 = (llvm::Instruction *)(v297 - 24);
        }
        else {
          int v298 = 0;
        }
        llvm::IRBuilderBase::SetInsertPoint(v294, v298);
        *(void *)__str = "init_trace_buffer_tls_end";
        LOWORD(v648) = 259;
        *((void *)v1 + 472) = llvm::BasicBlock::splitBasicBlock();
        uint64_t v602 = 0;
        switch((*(unsigned int (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24))
                                                        + 64))((char *)v1 + *(void *)(*(void *)v1 - 24)))
        {
          case 0u:
            uint64_t v303 = 0;
            uint64_t v602 = 20;
            do
            {
              AGCLLVMUserObject::createTLSIntrinsic(v1, off_1E65EBB78[v303], off_1E65EBB78[v303 + 1]);
              v303 += 2;
            }
            while (v303 != 8);
            break;
          case 6u:
          case 9u:
            AGCLLVMUserObject::createTLSIntrinsic(v1, "agc.trace_buffer_render_target_array_index", "air.render_target_array_index");
            uint64_t v299 = 8;
            goto LABEL_407;
          case 7u:
            uint64_t v299 = 4;
LABEL_407:
            uint64_t v602 = v299;
            break;
          default:
            break;
        }
        if (*((void *)v1 + 472)) {
          *((void *)v1 + 472) = 0;
        }
        uint64_t v292 = *(void *)v1;
      }
      else
      {
        uint64_t v602 = 0;
      }
      uint64_t v304 = *(void *)((char *)v1 + *(void *)(v292 - 24) + 368);
      uint64_t v305 = *(void *)(v304 + 16);
      if (v305 == v304 + 8)
      {
        long long v619 = 0u;
      }
      else
      {
        do
        {
          if (v305) {
            uint64_t v306 = v305 - 56;
          }
          else {
            uint64_t v306 = 0;
          }
          if ((*(unsigned char *)(v306 + 33) & 0x1C) != 0 && (*(unsigned char *)(v306 + 80) & 2) == 0)
          {
            uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
            llvm::GlobalValue::setLinkage(inserted, 0);
            llvm::GlobalValue::setVisibility(inserted);
            *(void *)__str = "entry";
            LOWORD(v648) = 259;
            operator new();
          }
          uint64_t v305 = *(void *)(v305 + 8);
        }
        while (v305 != v304 + 8);
        long long v619 = 0uLL;
      }
      std::__introsort<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *,false>(0, 0, 0, 1);
      v308 = (int64x2_t *)((char *)v1 + 3752);
      uint64_t v309 = *((void *)&v619 + 1);
      unint64_t v310 = (uint64_t)(*((void *)&v619 + 1) - v619) >> 5;
      v311 = (char *)v1 + 3768;
      uint64_t v312 = *((void *)v1 + 469);
      if (v310 > (*((void *)v1 + 471) - v312) >> 5)
      {
        if (((*((void *)&v619 + 1) - (void)v619) & 0x8000000000000000) == 0)
        {
          uint64_t v313 = *((void *)v1 + 470) - v312;
          v648 = (char *)v1 + 3768;
          int v314 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,unsigned int>>>(v310);
          unint64_t v316 = *((void *)v1 + 470);
          uint64_t v317 = *((void *)v1 + 469);
          if (v316 == v317)
          {
            int64x2_t v320 = vdupq_n_s64(v316);
            long long v318 = &v314[v313];
          }
          else
          {
            long long v318 = &v314[v313];
            do
            {
              long long v319 = *(_OWORD *)(v316 - 32);
              *((void *)v318 - 2) = *(void *)(v316 - 16);
              *((_OWORD *)v318 - 2) = v319;
              *(void *)(v316 - 24) = 0;
              *(void *)(v316 - 16) = 0;
              *(void *)(v316 - 32) = 0;
              *((_DWORD *)v318 - 2) = *(_DWORD *)(v316 - 8);
              v318 -= 32;
              v316 -= 32;
            }
            while (v316 != v317);
            int64x2_t v320 = *v308;
          }
          *((void *)v1 + 469) = v318;
          *((void *)v1 + 470) = &v314[v313];
          int64x2_t v646 = v320;
          uint64_t v321 = *((void *)v1 + 471);
          *((void *)v1 + 471) = &v314[32 * v315];
          uint64_t v647 = v321;
          *(void *)__str = v320.i64[0];
          std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer((uint64_t)__str);
          goto LABEL_429;
        }
LABEL_1016:
        abort();
      }
LABEL_429:
      if ((void)v619 == *((void *)&v619 + 1))
      {
        int v322 = 0;
      }
      else
      {
        int v322 = 0;
        int v323 = (long long *)v619;
        do
        {
          int v324 = *((_DWORD *)v323 + 7);
          if (*((char *)v323 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v635, *(const std::string::value_type **)v323, *((void *)v323 + 1));
          }
          else
          {
            long long v325 = *v323;
            v635.__r_.__value_.__r.__words[2] = *((void *)v323 + 2);
            *(_OWORD *)&v635.__r_.__value_.__l.__data_ = v325;
          }
          int v326 = (v322 + v324 - 1) & -v324;
          LODWORD(v636) = v326;
          unint64_t v327 = *((void *)v624 + 470);
          unint64_t v328 = *((void *)v624 + 471);
          if (v327 >= v328)
          {
            uint64_t v331 = (uint64_t)(v327 - v308->i64[0]) >> 5;
            unint64_t v332 = v331 + 1;
            if ((unint64_t)(v331 + 1) >> 59) {
              goto LABEL_1016;
            }
            uint64_t v333 = v328 - v308->i64[0];
            if (v333 >> 4 > v332) {
              unint64_t v332 = v333 >> 4;
            }
            if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v334 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v334 = v332;
            }
            v648 = v311;
            v335 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,unsigned int>>>(v334);
            v337 = &v335[32 * v331];
            *(std::string *)v337 = v635;
            memset(&v635, 0, sizeof(v635));
            *((_DWORD *)v337 + 6) = v326;
            unint64_t v338 = *((void *)v624 + 470);
            uint64_t v339 = *((void *)v624 + 469);
            if (v338 == v339)
            {
              int64x2_t v342 = vdupq_n_s64(v338);
              v340 = &v335[32 * v331];
            }
            else
            {
              v340 = &v335[32 * v331];
              do
              {
                long long v341 = *(_OWORD *)(v338 - 32);
                *((void *)v340 - 2) = *(void *)(v338 - 16);
                *((_OWORD *)v340 - 2) = v341;
                *(void *)(v338 - 24) = 0;
                *(void *)(v338 - 16) = 0;
                *(void *)(v338 - 32) = 0;
                *((_DWORD *)v340 - 2) = *(_DWORD *)(v338 - 8);
                v340 -= 32;
                v338 -= 32;
              }
              while (v338 != v339);
              int64x2_t v342 = *v308;
            }
            long long v329 = v337 + 32;
            v330 = v624;
            *((void *)v624 + 469) = v340;
            *((void *)v624 + 470) = v337 + 32;
            int64x2_t v646 = v342;
            uint64_t v343 = *((void *)v624 + 471);
            *((void *)v624 + 471) = &v335[32 * v336];
            uint64_t v647 = v343;
            *(void *)__str = v342.i64[0];
            std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer((uint64_t)__str);
          }
          else
          {
            *(std::string *)unint64_t v327 = v635;
            *(_DWORD *)(v327 + 24) = v326;
            long long v329 = (char *)(v327 + 32);
            v330 = v624;
          }
          *((void *)v330 + 470) = v329;
          int v322 = *((_DWORD *)v323 + 6) + v326;
          v323 += 2;
        }
        while (v323 != *((long long **)&v619 + 1));
        uint64_t v1 = v624;
        *((_DWORD *)v624 + 936) = *(_DWORD *)(v619 + 28);
      }
      *((_DWORD *)v1 + 935) = v322;
      int TexturesAndSamplers = v605;
      if ((void)v619)
      {
        if ((void)v619 != *((void *)&v619 + 1))
        {
          do
          {
            if (*(char *)(v309 - 9) < 0) {
              operator delete(*(void **)(v309 - 32));
            }
            v309 -= 32;
          }
          while (v309 != (void)v619);
        }
        operator delete((void *)v619);
      }
      if (*((void *)v1 + 22))
      {
        if (AGCLLVMUserObject::needsDylibResources(v1))
        {
          if (v602) {
            goto LABEL_460;
          }
        }
        else
        {
          uint64_t v347 = *(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 368);
          uint64_t v348 = v347 + 8;
          for (juint64_t j = *(void *)(v347 + 16); ; juint64_t j = *(void *)(jj + 8))
          {
            if (jj == v348) {
              goto LABEL_480;
            }
            uint64_t v350 = jj - 56;
            if (!jj) {
              uint64_t v350 = 0;
            }
            if ((*(unsigned char *)(v350 + 33) & 0x1C) != 0 && (*(unsigned char *)(v350 + 80) & 2) == 0) {
              break;
            }
          }
          if (v602)
          {
LABEL_460:
            v344 = (llvm::Type *)llvm::PointerType::get();
            if ((*(unsigned int (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24))
                                                        + 64))((char *)v1 + *(void *)(*(void *)v1 - 24)) == 7
              || (*(unsigned int (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24))
                                                        + 64))((char *)v1 + *(void *)(*(void *)v1 - 24)) == 22)
            {
              uint64_t v345 = *(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824);
              unsigned int v346 = (*(uint64_t (**)(uint64_t))(*(void *)v345 + 568))(v345);
            }
            else
            {
              uint64_t v351 = *(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 824);
              unsigned int v346 = (*(uint64_t (**)(uint64_t))(*(void *)v351 + 288))(v351);
            }
            *(void *)__str = "agc.global_constructors";
            LOWORD(v648) = 259;
            AGCLLVMUserObject::createGlobalBufferBinding(v1, v344, (const llvm::Twine *)__str, v346, 0, 5, 0);
            uint64_t v352 = *(void *)(*((void *)v1 + 22) + 80);
            if (v352) {
              uint64_t v353 = v352 - 24;
            }
            else {
              uint64_t v353 = 0;
            }
            uint64_t v354 = *(void *)(v353 + 40);
            if (v354) {
              v355 = (llvm::Instruction *)(v354 - 24);
            }
            else {
              v355 = 0;
            }
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40), v355);
            *(void *)__str = "allocate_tls_end";
            LOWORD(v648) = 259;
            llvm::BasicBlock::splitBasicBlock();
            *(void *)__str = "allocate_tls";
            LOWORD(v648) = 259;
            operator new();
          }
        }
      }
    }
  }
LABEL_480:
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after setupThreadLocalStorage", 0);
  }
  if (TexturesAndSamplers) {
    int TexturesAndSamplers = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 112))(v1);
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after setupShaderWrapper", 0);
  }
  if (TexturesAndSamplers) {
    int TexturesAndSamplers = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 128))(v1);
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after setupShaderOutputs", 0);
  }
  if (TexturesAndSamplers)
  {
    v356 = (void *)*((void *)v1 + 106);
    if (v356 != (void *)((char *)v1 + 856))
    {
      do
      {
        AGCLLVMUserObject::lowerGlobalBindingVariable(v1, (llvm::GlobalVariable *)v356[5]);
        v357 = (void *)v356[1];
        if (v357)
        {
          do
          {
            v358 = v357;
            v357 = (void *)*v357;
          }
          while (v357);
        }
        else
        {
          do
          {
            v358 = (void *)v356[2];
            BOOL v165 = *v358 == (void)v356;
            v356 = v358;
          }
          while (!v165);
        }
        v356 = v358;
      }
      while (v358 != (void *)((char *)v1 + 856));
    }
    v359 = (void *)*((void *)v1 + 109);
    if (v359 != (void *)((char *)v1 + 880))
    {
      do
      {
        AGCLLVMUserObject::lowerGlobalBindingVariable(v1, (llvm::GlobalVariable *)v359[5]);
        v360 = (void *)v359[1];
        if (v360)
        {
          do
          {
            v361 = v360;
            v360 = (void *)*v360;
          }
          while (v360);
        }
        else
        {
          do
          {
            v361 = (void *)v359[2];
            BOOL v165 = *v361 == (void)v359;
            v359 = v361;
          }
          while (!v165);
        }
        v359 = v361;
      }
      while (v361 != (void *)((char *)v1 + 880));
    }
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after LowerGlobalBindings", 0);
  }
  if (TexturesAndSamplers)
  {
    if (!*((unsigned char *)v1 + 15))
    {
      v362 = *(void **)(*((void *)v1 + 21) + 72);
      v363 = *(void **)(*((void *)v1 + 21) + 80);
      if (v362 != v363)
      {
        do
        {
          v364 = (void *)*v362;
          llvm::MergeBlockIntoPredecessor();
          v362 = v364;
        }
        while (v364 != v363);
      }
    }
    uint64_t v365 = *(void *)(*(void *)v1 - 24);
    uint64_t v366 = *(void *)((char *)v1 + v365 + 464);
    if (!*(unsigned char *)(v366 + 378)) {
      llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(v366 + 352), *(llvm::Module **)((char *)v1 + v365 + 368));
    }
    if (!*((unsigned char *)v1 + 15))
    {
      llvm::NamedMDNode::eraseFromParent(*((llvm::NamedMDNode **)v1 + 8));
      if ((*(unsigned int (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 80))((char *)v1 + *(void *)(*(void *)v1 - 24)))
      {
        llvm::Function::getSubprogram(*((llvm::Function **)v1 + 22));
        llvm::Function::setSubprogram();
      }
      llvm::Function::eraseFromParent(*((llvm::Function **)v1 + 22));
    }
    if ((*(unsigned int (**)(AGCLLVMUserObject *))(*(void *)v1 + 24))(v1))
    {
      llvm::Module::getOrInsertNamedMetadata();
      llvm::ConstantInt::get();
      *(void *)__str = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
    *((void *)v1 + 22) = 0;
    *((void *)v1 + 8) = 0;
    *((void *)v1 + 9) = 0;
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after cleanupShaderIR", 0);
  }
  if (TexturesAndSamplers) {
    (*(void (**)(AGCLLVMUserObject *))(*(void *)v1 + 152))(v1);
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "After setupIndirectSamplers", 0);
  }
  if (TexturesAndSamplers) {
    int TexturesAndSamplers = AGCLLVMUserObject::allocateTexturesAndSamplers(v1);
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "After allocateTexturesAndSamplers", 0);
  }
  if (TexturesAndSamplers) {
    int TexturesAndSamplers = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 144))(v1);
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after setupImageBlocks", 0);
  }
  if (TexturesAndSamplers) {
    int TexturesAndSamplers = AGCLLVMUserObject::replaceTexturesAndSamplers(v1);
  }
  if (v601)
  {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after replaceTexturesAndSamplers", 0);
    AGCLLVMUserObject::replaceTrigIdentities(v1);
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after simplifyTrigIdentities", 0);
  }
  else
  {
    AGCLLVMUserObject::replaceTrigIdentities(v1);
  }
  (*(void (**)(AGCLLVMUserObject *))(*(void *)v1 + 216))(v1);
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after optimizeThreadgroupBarriers", 0);
  }
  if (TexturesAndSamplers) {
    int v367 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 232))(v1);
  }
  else {
    int v367 = 0;
  }
  if (v601) {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after markInvariantOutputs", 0);
  }
  uint64_t v368 = *(void *)v1;
  int v606 = v367;
  if (v367)
  {
    *(void *)__str = &v646.i64[1];
    v646.i64[0] = 0x800000000;
    v635.__r_.__value_.__r.__words[0] = (std::string::size_type)&v635.__r_.__value_.__r.__words[2];
    v635.__r_.__value_.__l.__size_ = 0x400000000;
    BOOL v375 = ((*(uint64_t (**)(char *))(*(void *)((char *)v1 + *(void *)(v368 - 24)) + 104))((char *)v1 + *(void *)(v368 - 24)) & 1) != 0
        || *((unsigned char *)v1 + 3657)
        || (*(unsigned int (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 64))((char *)v1 + *(void *)(*(void *)v1 - 24)) == 29;
    char v610 = v375;
    uint64_t v376 = *(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 368);
    uint64_t v377 = v376 + 24;
    uint64_t v378 = *(void *)(v376 + 32);
    if (v378 != v376 + 24)
    {
      int v603 = 0;
      uint64_t v607 = v376 + 24;
      while (1)
      {
        uint64_t v379 = v378 - 56;
        BOOL v165 = v378 == 0;
        uint64_t v378 = *(void *)(v378 + 8);
        uint64_t v380 = v165 ? 0 : v379;
        uint64_t v381 = v380 + 72;
        for (kuint64_t k = *(void *)(v380 + 80); ; kuint64_t k = *(void *)(kk + 8))
        {
          if (kk == v381) {
            goto LABEL_654;
          }
          uint64_t v383 = kk - 24;
          if (!kk) {
            uint64_t v383 = 0;
          }
          uint64_t v384 = *(void *)(v383 + 48);
          if (v384 != v383 + 40) {
            break;
          }
        }
        if (kk != v381) {
          break;
        }
LABEL_654:
        if (v378 == v377) {
          goto LABEL_655;
        }
      }
      uint64_t v620 = v381;
      while (2)
      {
        uint64_t v385 = v384 - 24;
        if (!v384) {
          uint64_t v385 = 0;
        }
        int v386 = *(unsigned __int8 *)(v385 + 16);
        if (v386 == 84) {
          uint64_t v387 = v385;
        }
        else {
          uint64_t v387 = 0;
        }
        if (!v384 || v386 != 84) {
          goto LABEL_625;
        }
        uint64_t v388 = *(void *)(v387 - 32);
        if (v388 && !*(unsigned char *)(v388 + 16) && *(void *)(v388 + 24) == *(void *)(v387 + 72))
        {
          llvm::Instruction::setMetadata();
          goto LABEL_625;
        }
        v632 = v634;
        uint64_t v633 = 0x400000000;
        if (*(void *)(v387 + 48) || (*(unsigned char *)(v387 + 23) & 0x20) != 0)
        {
          Metadatauint64_t Impl = llvm::Instruction::getMetadataImpl();
          if (MetadataImpl)
          {
            uint64_t v390 = MetadataImpl;
            uint64_t v391 = *(unsigned int *)(MetadataImpl + 8);
            if (v391)
            {
              uint64_t v616 = v378;
              for (muint64_t m = 0; mm != v391; ++mm)
              {
                v393 = *(unsigned __int8 **)(v390 - 8 * *(unsigned int *)(v390 + 8) + 8 * mm);
                if (((*v393 < 0x23uLL) & (0x7FFFFFFF0uLL >> *v393)) == 0) {
                  v393 = 0;
                }
                v394 = *(unsigned char **)&v393[-8 * *((unsigned int *)v393 + 2) + 16];
                if (((*v394 < 0x23uLL) & (0x7FFFFFFF0uLL >> *v394)) != 0) {
                  v395 = v394;
                }
                else {
                  v395 = 0;
                }
                unint64_t v396 = *((unsigned int *)v395 + 2);
                if (v396)
                {
                  for (nuint64_t n = 0; nn < v396; ++nn)
                  {
                    v398 = *(unsigned __int8 **)&v395[8 * nn + -8 * v396];
                    if (v398 && *v398 - 1 <= 1)
                    {
                      uint64_t v399 = *((void *)v398 + 16);
                      BOOL v400 = v399 && *(unsigned char *)(v399 + 16) == 0;
                      if (v400 && areTypesIsomorphic(*(void *)(v399 + 24), *(void *)(v387 + 72)))
                      {
                        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v632, (uint64_t)v398);
                        unint64_t v396 = *((unsigned int *)v395 + 2);
                      }
                    }
                  }
                }
              }
              int v401 = 1;
              uint64_t v377 = v607;
              uint64_t v378 = v616;
              goto LABEL_618;
            }
            int v401 = 1;
LABEL_619:
            uint64_t v369 = v633;
            if (v633)
            {
              llvm::MDTuple::getImpl();
              llvm::Instruction::setMetadata();
            }
            else if (v401)
            {
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v635, v387);
            }
LABEL_623:
            if (v632 != v634) {
              free(v632);
            }
LABEL_625:
            uint64_t v384 = *(void *)(v384 + 8);
            uint64_t v406 = kk - 24;
            if (!kk) {
              uint64_t v406 = 0;
            }
            if (v384 == v406 + 40)
            {
              do
              {
                kuint64_t k = *(void *)(kk + 8);
                if (kk == v381) {
                  goto LABEL_654;
                }
                uint64_t v407 = kk - 24;
                if (!kk) {
                  uint64_t v407 = 0;
                }
                uint64_t v384 = *(void *)(v407 + 48);
              }
              while (v384 == v407 + 40);
            }
            if (kk == v381) {
              goto LABEL_654;
            }
            continue;
          }
          uint64_t v388 = *(void *)(v387 - 32);
        }
        break;
      }
      if (v388 && !*(unsigned char *)(v388 + 16))
      {
        BOOL v165 = *(void *)(v388 + 24) == *(void *)(v387 + 72);
        char v402 = v610;
        if (v165) {
          char v402 = 1;
        }
        if (v402) {
          goto LABEL_601;
        }
      }
      else if (v610)
      {
LABEL_601:
        int v401 = 0;
        goto LABEL_619;
      }
      if ((*(void *)(v387 + 48) || (*(unsigned char *)(v387 + 23) & 0x20) != 0) && llvm::Instruction::getMetadataImpl()) {
        goto LABEL_623;
      }
      if (v603)
      {
LABEL_611:
        if (v646.i32[0])
        {
          v403 = *(char **)__str;
          uint64_t v404 = 8 * v646.u32[0];
          do
          {
            if (*(void *)v403
              && areTypesIsomorphic(*(void *)(*(void *)v403 + 24), *(void *)(v387 + 72)))
            {
              uint64_t v405 = llvm::ValueAsMetadata::get();
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v632, v405);
            }
            v403 += 8;
            v404 -= 8;
          }
          while (v404);
        }
        int v401 = 1;
        int v603 = 1;
LABEL_618:
        uint64_t v381 = v620;
        goto LABEL_619;
      }
      uint64_t v408 = *(void *)((char *)v624 + *(void *)(*(void *)v624 - 24) + 368);
      uint64_t v409 = v408 + 24;
      uint64_t v410 = *(void *)(v408 + 32);
      while (2)
      {
        if (v410 == v409) {
          goto LABEL_611;
        }
        if (v410) {
          v411 = (llvm::Value *)(v410 - 56);
        }
        else {
          v411 = 0;
        }
        v412 = (char *)v624 + *(void *)(*(void *)v624 - 24);
        llvm::Value::getName(v411);
        int Key = llvm::StringMapImpl::FindKey();
        if (Key == -1 || Key == (unint64_t)*((unsigned int *)v412 + 824))
        {
          for (uint64_t i1 = *((void *)v411 + 1); i1; uint64_t i1 = *(void *)(i1 + 8))
          {
            uint64_t v415 = *(void *)(i1 + 24);
            if (!v415 || *(unsigned char *)(v415 + 16) != 84) {
              goto LABEL_652;
            }
            uint64_t v416 = *(void *)(v415 - 32);
            if (!v416 || *(unsigned char *)(v416 + 16) || *(void *)(v416 + 24) != *(void *)(v415 + 72)) {
              uint64_t v416 = 0;
            }
            if ((llvm::Value *)v416 != v411) {
              goto LABEL_652;
            }
          }
        }
        else
        {
LABEL_652:
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__str, (uint64_t)v411);
        }
        uint64_t v410 = *(void *)(v410 + 8);
        continue;
      }
    }
LABEL_655:
    v417 = (std::string *)v635.__r_.__value_.__r.__words[0];
    if (LODWORD(v635.__r_.__value_.__r.__words[1]))
    {
      uint64_t v1 = v624;
      uint64_t v418 = 8 * LODWORD(v635.__r_.__value_.__r.__words[1]);
      int v367 = v606;
      do
      {
        v419 = (llvm::Instruction *)v417->__r_.__value_.__r.__words[0];
        v417 = (std::string *)((char *)v417 + 8);
        printMessage((char **)&AGCPrinter, "Removing unreachable function call", v369, v370, v371, v372, v373, v374, v597);
        std::string::append((std::string *)((char *)v624 + *(void *)(*(void *)v624 - 24) + 8), "Removing unreachable function call");
        llvm::UndefValue::get();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v419);
        v418 -= 8;
      }
      while (v418);
      v417 = (std::string *)v635.__r_.__value_.__r.__words[0];
    }
    else
    {
      uint64_t v1 = v624;
      int v367 = v606;
    }
    if (v417 != (std::string *)&v635.__r_.__value_.__r.__words[2]) {
      free(v417);
    }
    if (*(int64x2_t **)__str != (int64x2_t *)&v646.u64[1]) {
      free(*(void **)__str);
    }
    uint64_t v368 = *(void *)v1;
  }
  if (v601)
  {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(v368 - 24)), "after replaceFunctionGroups", 0);
    uint64_t v368 = *(void *)v1;
  }
  if (v367)
  {
    v420 = *(llvm::Module **)((char *)v1 + *(void *)(v368 - 24) + 368);
    *(void *)__str = "air.version";
    LOWORD(v648) = 259;
    v421 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v420, (const llvm::Twine *)__str);
    if (v421 && (uint64_t v423 = llvm::NamedMDNode::getOperand(v421)) != 0)
    {
      uint64_t v424 = v423;
      LODWORD(v635.__r_.__value_.__l.__data_) = 0;
      LODWORD(v632) = 0;
      *(_DWORD *)__str = 0;
      parseMDInt(0, v423, (unsigned int *)__str, &v635);
      BOOL v425 = 1;
      *(_DWORD *)__str = 1;
      parseMDInt(0, v424, (unsigned int *)__str, &v632);
      if (LODWORD(v635.__r_.__value_.__l.__data_) <= 2) {
        BOOL v425 = LODWORD(v635.__r_.__value_.__l.__data_) == 2 && v632 > 3;
      }
    }
    else
    {
      BOOL v425 = 0;
    }
    uint64_t v427 = 0;
    v635.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25C4770;
    v635.__r_.__value_.__l.__size_ = (std::string::size_type)AGCLLVMTargetLowerer::buildMemCpy1D;
    v635.__r_.__value_.__r.__words[2] = 0;
    v636 = (llvm *)&v635;
    v637 = &unk_1F25C4770;
    v638 = AGCLLVMTargetLowerer::buildMemCpy2D;
    uint64_t v639 = 0;
    uint64_t Function = &v637;
    v641[0] = &unk_1F25C4770;
    v641[1] = AGCLLVMTargetLowerer::buildGetNullSimdgroupEvent;
    v641[2] = 0;
    v641[3] = v641;
    v642[0] = &unk_1F25C4770;
    v642[1] = AGCLLVMTargetLowerer::buildIsNullSimdgroupEvent;
    v642[2] = 0;
    v642[3] = v642;
    v643[0] = &unk_1F25C4770;
    v643[1] = AGCLLVMTargetLowerer::buildWaitSimdgroupEvents;
    v643[2] = 0;
    v644[0] = v643;
    v422.n128_u64[0] = 0x400000000;
    do
    {
      v428 = &__str[v427 * 8];
      *(void *)v428 = &v646.i64[v427 + 1];
      *((void *)v428 + 1) = 0x400000000;
      v427 += 6;
    }
    while (v427 != 30);
    uint64_t v429 = *(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 368);
    uint64_t v430 = *(void *)(v429 + 32);
    for (i2 = v429 + 24; v430 != i2; uint64_t v430 = *(void *)(v430 + 8))
    {
      uint64_t v431 = v430 - 56;
      if (!v430) {
        uint64_t v431 = 0;
      }
      uint64_t v432 = v431 + 72;
      for (uint64_t i3 = *(void *)(v431 + 80); i3 != v432; uint64_t i3 = *(void *)(i3 + 8))
      {
        uint64_t v434 = i3 - 24;
        if (!i3) {
          uint64_t v434 = 0;
        }
        uint64_t v435 = v434 + 40;
        for (uint64_t i4 = *(void *)(v434 + 48); i4 != v435; uint64_t i4 = *(void *)(i4 + 8))
        {
          uint64_t v437 = i4 - 24;
          if (!i4) {
            uint64_t v437 = 0;
          }
          int v438 = *(unsigned __int8 *)(v437 + 16);
          if (v438 == 84) {
            uint64_t v439 = v437;
          }
          else {
            uint64_t v439 = 0;
          }
          if (i4 && v438 == 84)
          {
            uint64_t v440 = 0;
            while (1)
            {
              uint64_t v441 = *(void *)(v439 - 32);
              if (v441)
              {
                if (!*(unsigned char *)(v441 + 16) && *(void *)(v441 + 24) == *(void *)(v439 + 72))
                {
                  v632 = (void *)llvm::Value::getName((llvm::Value *)v441);
                  uint64_t v633 = v442;
                  strlen(AGCLLVMUserObject::replaceSimdgroupAsyncCopy(void)::names[v440]);
                  if (llvm::StringRef::find() != -1) {
                    break;
                  }
                }
              }
              if (++v440 == 5) {
                goto LABEL_702;
              }
            }
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__str[48 * v440], v439);
          }
LABEL_702:
          ;
        }
      }
    }
    uint64_t v443 = 0;
    uint64_t v1 = v624;
    while (1)
    {
      v444 = &__str[48 * v443];
      uint64_t v445 = *((unsigned int *)v444 + 2);
      if (v445) {
        break;
      }
LABEL_711:
      if (++v443 == 5)
      {
        uint64_t v450 = 0;
        int v367 = v606;
        do
        {
          v451 = (void *)v650[v450];
          if (&v650[v450 + 2] != v451) {
            free(v451);
          }
          v450 -= 6;
        }
        while (v450 != -30);
        for (uint64_t i5 = 0; i5 != -20; i5 -= 4)
        {
          v453 = (void *)v644[i5];
          if (&v643[i5] == v453)
          {
            (*(void (**)(void *))(v643[i5] + 32))(&v643[i5]);
          }
          else if (v453)
          {
            (*(void (**)(void *))(*v453 + 40))(v453);
          }
        }
        uint64_t v368 = *(void *)v624;
        goto LABEL_723;
      }
    }
    v446 = *(void ***)v444;
    v447 = (std::string *)((char *)&v635 + 32 * v443 + 24);
    uint64_t v448 = 8 * v445;
    while (1)
    {
      uint64_t v449 = *(void *)((char *)v624 + *(void *)(*(void *)v624 - 24) + 400);
      v632 = *v446;
      LOBYTE(v626) = v425;
      if (!v447->__r_.__value_.__r.__words[0]) {
        break;
      }
      (*(void (**)(std::string::size_type, uint64_t, void **, uint64_t (**)(uint64_t), __n128))(*(void *)v447->__r_.__value_.__l.__data_ + 48))(v447->__r_.__value_.__r.__words[0], v449, &v632, &v626, v422);
      ++v446;
      v448 -= 8;
      if (!v448) {
        goto LABEL_711;
      }
    }
LABEL_1015:
    ((void (*)(__n128))std::__throw_bad_function_call[abi:nn180100])(v422);
    goto LABEL_1016;
  }
LABEL_723:
  if (v601)
  {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(v368 - 24)), "after replaceSimdgroupAsyncCopy", 0);
    uint64_t v368 = *(void *)v1;
  }
  if (!v367)
  {
    char v454 = 0;
    goto LABEL_871;
  }
  char v454 = 1;
  if (!*(unsigned char *)(*(void *)((char *)v1 + *(void *)(v368 - 24) + 400) + 1809)) {
    goto LABEL_871;
  }
  *(void *)__str = "air.simdgroup_matrix_16x16_multiply_accumulate.";
  v646.i64[0] = 47;
  v455 = operator new(0x28uLL);
  void *v455 = &unk_1F25C4698;
  v455[1] = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulate;
  v455[2] = 0;
  v455[3] = 0;
  v455[4] = 0;
  v649[0] = v455;
  v649[1] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate.s.s.";
  v649[2] = 60;
  v456 = (char *)operator new(0x28uLL);
  *(void *)v456 = &unk_1F25C4698;
  *((void *)v456 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulate;
  *((void *)v456 + 2) = 0;
  *(_OWORD *)(v456 + 24) = xmmword_1CADD6450;
  v649[6] = v456;
  v649[7] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate.s.u.";
  v649[8] = 60;
  v457 = (char *)operator new(0x28uLL);
  *(void *)v457 = &unk_1F25C4698;
  *((void *)v457 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulate;
  *((void *)v457 + 2) = 0;
  *(_OWORD *)(v457 + 24) = xmmword_1CADD6460;
  v649[12] = v457;
  v649[13] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate.u.s.";
  v649[14] = 60;
  v458 = (char *)operator new(0x28uLL);
  *(void *)v458 = &unk_1F25C4698;
  *((void *)v458 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulate;
  *((void *)v458 + 2) = 0;
  *(_OWORD *)(v458 + 24) = xmmword_1CADD6470;
  v649[18] = v458;
  v650[0] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate.u.u.";
  v650[1] = 60;
  v459 = (char *)operator new(0x28uLL);
  *(void *)v459 = &unk_1F25C4698;
  *((void *)v459 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulate;
  *((void *)v459 + 2) = 0;
  *(_OWORD *)(v459 + 24) = xmmword_1CADD6480;
  v650[5] = v459;
  v650[6] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate.s.s.s.s.";
  v650[7] = 73;
  v460 = (char *)operator new(0x28uLL);
  *(void *)v460 = &unk_1F25C4698;
  *((void *)v460 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulate;
  *((void *)v460 + 2) = 0;
  *(void *)&long long v461 = 0x100000001;
  *((void *)&v461 + 1) = 0x100000001;
  *(_OWORD *)(v460 + 24) = v461;
  v650[11] = v460;
  v650[12] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate.s.s.u.s.";
  v650[13] = 73;
  v462 = (char *)operator new(0x28uLL);
  *(void *)v462 = &unk_1F25C4698;
  *((void *)v462 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulate;
  *((void *)v462 + 2) = 0;
  *(_OWORD *)(v462 + 24) = xmmword_1CADD6490;
  v650[17] = v462;
  v650[18] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate.s.u.s.s.";
  v650[19] = 73;
  v463 = (char *)operator new(0x28uLL);
  *(void *)v463 = &unk_1F25C4698;
  *((void *)v463 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulate;
  *((void *)v463 + 2) = 0;
  *(_OWORD *)(v463 + 24) = xmmword_1CADD64A0;
  v650[23] = v463;
  v650[24] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate.s.u.u.s.";
  v650[25] = 73;
  v464 = (char *)operator new(0x28uLL);
  *(void *)v464 = &unk_1F25C4698;
  *((void *)v464 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulate;
  *((void *)v464 + 2) = 0;
  *(_OWORD *)(v464 + 24) = xmmword_1CADD64B0;
  v650[29] = v464;
  v650[30] = "air.simdgroup_matrix_16x16_multiply_accumulate_transpose_operands.";
  v650[31] = 66;
  v465 = operator new(0x28uLL);
  void *v465 = &unk_1F25C4698;
  v465[1] = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands;
  v465[2] = 0;
  v465[3] = 0;
  v465[4] = 0;
  v650[35] = v465;
  v650[36] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_transpose_operands.s.s.";
  v650[37] = 79;
  v466 = (char *)operator new(0x28uLL);
  *(void *)v466 = &unk_1F25C4698;
  *((void *)v466 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands;
  *((void *)v466 + 2) = 0;
  *(_OWORD *)(v466 + 24) = xmmword_1CADD6450;
  v650[41] = v466;
  v650[42] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_transpose_operands.s.u.";
  v650[43] = 79;
  v467 = (char *)operator new(0x28uLL);
  *(void *)v467 = &unk_1F25C4698;
  *((void *)v467 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands;
  *((void *)v467 + 2) = 0;
  *(_OWORD *)(v467 + 24) = xmmword_1CADD6460;
  v650[47] = v467;
  v650[48] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_transpose_operands.u.s.";
  v650[49] = 79;
  v468 = (char *)operator new(0x28uLL);
  *(void *)v468 = &unk_1F25C4698;
  *((void *)v468 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands;
  *((void *)v468 + 2) = 0;
  *(_OWORD *)(v468 + 24) = xmmword_1CADD6470;
  v650[53] = v468;
  v650[54] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_transpose_operands.u.u.";
  v650[55] = 79;
  v469 = (char *)operator new(0x28uLL);
  *(void *)v469 = &unk_1F25C4698;
  *((void *)v469 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands;
  *((void *)v469 + 2) = 0;
  *(_OWORD *)(v469 + 24) = xmmword_1CADD6480;
  v650[59] = v469;
  v650[60] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate_transpose_operands.s.s.s.s.";
  v650[61] = 92;
  v470 = (char *)operator new(0x28uLL);
  *(void *)v470 = &unk_1F25C4698;
  *((void *)v470 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands;
  *((void *)v470 + 2) = 0;
  *(void *)&long long v471 = 0x100000001;
  *((void *)&v471 + 1) = 0x100000001;
  *(_OWORD *)(v470 + 24) = v471;
  v650[65] = v470;
  v650[66] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate_transpose_operands.s.s.u.s.";
  v650[67] = 92;
  v472 = (char *)operator new(0x28uLL);
  *(void *)v472 = &unk_1F25C4698;
  *((void *)v472 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands;
  *((void *)v472 + 2) = 0;
  *(_OWORD *)(v472 + 24) = xmmword_1CADD6490;
  v650[71] = v472;
  v650[72] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate_transpose_operands.s.u.s.s.";
  v650[73] = 92;
  v473 = (char *)operator new(0x28uLL);
  *(void *)v473 = &unk_1F25C4698;
  *((void *)v473 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands;
  *((void *)v473 + 2) = 0;
  *(_OWORD *)(v473 + 24) = xmmword_1CADD64A0;
  v650[77] = v473;
  v650[78] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate_transpose_operands.s.u.u.s.";
  v650[79] = 92;
  v474 = (char *)operator new(0x28uLL);
  *(void *)v474 = &unk_1F25C4698;
  *((void *)v474 + 1) = AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands;
  *((void *)v474 + 2) = 0;
  *(_OWORD *)(v474 + 24) = xmmword_1CADD64B0;
  v650[83] = v474;
  v626 = AGCLLVMTargetLowerer::buildSimdMatrixLoad;
  v627 = 0;
  std::pair<llvm::StringRef,std::function<BOOL ()(AGCLLVMTargetLowerer &,llvm::CallInst *)>>::pair[abi:nn180100]<char const(&)[33],BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),0>(v651, "air.simdgroup_matrix_16x16_load.", (uint64_t *)&v626);
  v651[6] = "air.simdgroup_matrix_16x16_store.";
  v651[7] = 33;
  v652[0] = &unk_1F25C46E0;
  v652[1] = AGCLLVMTargetLowerer::buildSimdMatrixStore;
  v652[2] = 0;
  v652[3] = v652;
  long long v625 = (unint64_t)AGCLLVMTargetLowerer::buildSimdMatrixLoad;
  std::pair<llvm::StringRef,std::function<BOOL ()(AGCLLVMTargetLowerer &,llvm::CallInst *)>>::pair[abi:nn180100]<char const(&)[33],BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),0>(v653, "air.simdgroup_matrix_8x8_load.s", (uint64_t *)&v625);
  v631[0] = (uint64_t)AGCLLVMTargetLowerer::buildSimdMatrixLoad;
  v631[1] = 0;
  std::pair<llvm::StringRef,std::function<BOOL ()(AGCLLVMTargetLowerer &,llvm::CallInst *)>>::pair[abi:nn180100]<char const(&)[33],BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),0>(v654, "air.simdgroup_matrix_8x8_load.u", v631);
  v630[0] = (uint64_t)AGCLLVMTargetLowerer::buildSimdMatrixStore;
  v630[1] = 0;
  std::pair<llvm::StringRef,std::function<BOOL ()(AGCLLVMTargetLowerer &,llvm::CallInst *)>>::pair[abi:nn180100]<char const(&)[33],BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),0>(v655, "air.simdgroup_matrix_8x8_store.s", v630);
  v629[0] = (uint64_t)AGCLLVMTargetLowerer::buildSimdMatrixStore;
  v629[1] = 0;
  std::pair<llvm::StringRef,std::function<BOOL ()(AGCLLVMTargetLowerer &,llvm::CallInst *)>>::pair[abi:nn180100]<char const(&)[33],BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),0>(v656, "air.simdgroup_matrix_8x8_store.u", v629);
  v656[6] = "air.simdgroup_matrix_16x16_init_diag.";
  v656[7] = 37;
  v475 = operator new(0x20uLL);
  void *v475 = &unk_1F25C4728;
  v475[1] = AGCLLVMTargetLowerer::buildSimdMatrixInit;
  v475[2] = 0;
  *((unsigned char *)v475 + 24) = 1;
  v656[11] = v475;
  v656[12] = "air.simdgroup_matrix_16x16_init_filled.";
  v656[13] = 39;
  v476 = operator new(0x20uLL);
  void *v476 = &unk_1F25C4728;
  v476[1] = AGCLLVMTargetLowerer::buildSimdMatrixInit;
  v476[2] = 0;
  *((unsigned char *)v476 + 24) = 0;
  v656[17] = v476;
  v656[18] = "air.simdgroup_matrix_8x8_init_diag";
  v656[19] = 34;
  v477 = operator new(0x20uLL);
  void *v477 = &unk_1F25C4728;
  v477[1] = AGCLLVMTargetLowerer::buildSimdMatrixInit;
  v477[2] = 0;
  *((unsigned char *)v477 + 24) = 1;
  v656[23] = v477;
  v656[24] = "air.simdgroup_matrix_8x8_init_filled";
  v656[25] = 36;
  v478 = operator new(0x20uLL);
  void *v478 = &unk_1F25C4728;
  v478[1] = AGCLLVMTargetLowerer::buildSimdMatrixInit;
  v478[2] = 0;
  *((unsigned char *)v478 + 24) = 0;
  v656[29] = v478;
  llvm::StringMapImpl::StringMapImpl((llvm::StringMapImpl *)&v632);
  uint64_t v479 = 0;
  while (2)
  {
    *(_OWORD *)&v635.__r_.__value_.__l.__data_ = *(_OWORD *)&__str[v479 * 8];
    v480 = (unint64_t *)v649[v479];
    if (v480)
    {
      if (&v646.u64[v479 + 1] == v480)
      {
        v638 = (uint64_t (*)(uint64_t))&v635.__r_.__value_.__r.__words[2];
        (*(void (**)(unint64_t *, std::string::size_type *))(*v480 + 24))(v480, &v635.__r_.__value_.__r.__words[2]);
      }
      else
      {
        v638 = (uint64_t (*)(uint64_t))(*(uint64_t (**)(unint64_t *))(*v480 + 16))(v480);
      }
    }
    else
    {
      v638 = 0;
    }
    long long v481 = *(_OWORD *)&v635.__r_.__value_.__l.__data_;
    unsigned int v482 = llvm::StringMapImpl::LookupBucketFor();
    v483 = v632;
    uint64_t v484 = *((void *)v632 + v482);
    if (v484)
    {
      if (v484 == -8)
      {
        --LODWORD(v634[0]);
        goto LABEL_736;
      }
    }
    else
    {
LABEL_736:
      uint64_t v485 = MEMORY[0x1CB79F270](*((void *)&v481 + 1) + 41, 8);
      v486 = (void *)v485;
      uint64_t v487 = v485 + 40;
      if (*((void *)&v481 + 1)) {
        memcpy((void *)(v485 + 40), (const void *)v481, *((size_t *)&v481 + 1));
      }
      *(unsigned char *)(v487 + *((void *)&v481 + 1)) = 0;
      void *v486 = *((void *)&v481 + 1);
      if (v638)
      {
        if ((char *)v638 == (char *)&v635.__r_.__value_.__r.__words[2])
        {
          v486[4] = v486 + 1;
          (*(void (**)(std::string::size_type *))(v635.__r_.__value_.__r.__words[2] + 24))(&v635.__r_.__value_.__r.__words[2]);
        }
        else
        {
          v486[4] = v638;
          v638 = 0;
        }
      }
      else
      {
        v486[4] = 0;
      }
      v483[v482] = v486;
      ++HIDWORD(v633);
      llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v632);
    }
    std::__function::__value_func<BOOL ()(AGCLLVMTargetLowerer &,llvm::CallInst *)>::~__value_func[abi:nn180100](&v635.__r_.__value_.__r.__words[2]);
    v479 += 6;
    if (v479 != 168) {
      continue;
    }
    break;
  }
  for (uint64_t i6 = 1312; i6 != -32; i6 -= 48)
    std::__function::__value_func<BOOL ()(AGCLLVMTargetLowerer &,llvm::CallInst *)>::~__value_func[abi:nn180100](&__str[i6]);
  *(_OWORD *)&v635.__r_.__value_.__l.__data_ = 0uLL;
  v635.__r_.__value_.__r.__words[2] = 0x3800000000;
  uint64_t v489 = *(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 368);
  uint64_t v490 = *(void *)(v489 + 32);
  uint64_t v613 = v489 + 24;
  if (v490 == v489 + 24)
  {
    std::string::size_type v522 = 0;
    uint64_t v523 = 0;
    i9 = 0;
  }
  else
  {
    while (2)
    {
      uint64_t v491 = v490 - 56;
      uint64_t v617 = v490;
      if (!v490) {
        uint64_t v491 = 0;
      }
      uint64_t v492 = v491 + 72;
      uint64_t v493 = *(void *)(v491 + 80);
      uint64_t v622 = v491 + 72;
      if (v493 != v491 + 72)
      {
        do
        {
          uint64_t v494 = v493 - 24;
          if (!v493) {
            uint64_t v494 = 0;
          }
          uint64_t v495 = v494 + 40;
          for (uint64_t i7 = *(void *)(v494 + 48); i7 != v495; uint64_t i7 = *(void *)(i7 + 8))
          {
            uint64_t v497 = i7 - 24;
            if (!i7) {
              uint64_t v497 = 0;
            }
            int v498 = *(unsigned __int8 *)(v497 + 16);
            if (v498 == 84) {
              uint64_t v499 = v497;
            }
            else {
              uint64_t v499 = 0;
            }
            if (i7 && v498 == 84)
            {
              if (v633)
              {
                for (i8 = (size_t **)v632; !*i8 || *i8 + 1 == 0; ++i8)
                  ;
              }
              else
              {
                i8 = (size_t **)v632;
              }
              v502 = (size_t **)((char *)v632 + 8 * v633);
              if (i8 != v502)
              {
                v503 = *i8;
                while (1)
                {
                  uint64_t v504 = *(void *)(v499 - 32);
                  if (v504)
                  {
                    if (!*(unsigned char *)(v504 + 16) && *(void *)(v504 + 24) == *(void *)(v499 + 72))
                    {
                      size_t v507 = *v503;
                      v505 = v503 + 5;
                      size_t v506 = v507;
                      v508 = (const void *)llvm::Value::getName((llvm::Value *)v504);
                      if (v509 >= v507 && (!v506 || !memcmp(v508, v505, v506))) {
                        break;
                      }
                    }
                  }
                  do
                  {
                    v510 = i8[1];
                    ++i8;
                    v503 = v510;
                    if (v510) {
                      BOOL v511 = v503 + 1 == 0;
                    }
                    else {
                      BOOL v511 = 1;
                    }
                  }
                  while (v511);
                  if (i8 == v502) {
                    goto LABEL_784;
                  }
                }
                unsigned int v512 = llvm::StringMapImpl::LookupBucketFor();
                std::string::size_type v513 = v635.__r_.__value_.__r.__words[0];
                uint64_t v514 = v512;
                uint64_t v515 = *(void *)(v635.__r_.__value_.__r.__words[0] + 8 * v512);
                if (v515 == -8)
                {
                  --LODWORD(v635.__r_.__value_.__r.__words[2]);
                }
                else if (v515)
                {
                  uint64_t v1 = v624;
LABEL_798:
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v515 + 8, v499);
                  *((unsigned char *)v1 + 12) = 1;
                  continue;
                }
                uint64_t v516 = MEMORY[0x1CB79F270](v506 + 57, 8);
                v517 = (void *)v516;
                uint64_t v518 = v516 + 56;
                if (v506) {
                  memcpy((void *)(v516 + 56), v505, v506);
                }
                *(unsigned char *)(v518 + v506) = 0;
                void *v517 = v506;
                v517[1] = v517 + 3;
                v517[2] = 0x400000000;
                *(void *)(v513 + 8 * v514) = v517;
                ++HIDWORD(v635.__r_.__value_.__r.__words[1]);
                unsigned int v519 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v635);
                v520 = (uint64_t *)(v635.__r_.__value_.__r.__words[0] + 8 * v519);
                uint64_t v1 = v624;
                uint64_t v492 = v622;
                while (1)
                {
                  uint64_t v515 = *v520;
                  if (*v520 && v515 != -8) {
                    break;
                  }
                  ++v520;
                }
                goto LABEL_798;
              }
            }
LABEL_784:
            ;
          }
          uint64_t v493 = *(void *)(v493 + 8);
        }
        while (v493 != v492);
      }
      uint64_t v490 = *(void *)(v617 + 8);
      if (v490 != v613) {
        continue;
      }
      break;
    }
    std::string::size_type v522 = v635.__r_.__value_.__r.__words[0];
    uint64_t v523 = LODWORD(v635.__r_.__value_.__r.__words[1]);
    if (LODWORD(v635.__r_.__value_.__r.__words[1]))
    {
      for (i9 = (uint64_t *)v635.__r_.__value_.__r.__words[0]; !*i9 || *i9 == -8; ++i9)
        ;
    }
    else
    {
      uint64_t v523 = 0;
      i9 = (uint64_t *)v635.__r_.__value_.__r.__words[0];
    }
  }
  v526 = (uint64_t *)(v522 + 8 * v523);
  if (i9 == v526)
  {
    char v454 = 1;
    goto LABEL_850;
  }
  v623 = (char *)v1 + 368;
  uint64_t v527 = *i9;
  char v454 = 1;
  v611 = v526;
  do
  {
    size_t v528 = *(void *)v527;
    *(void *)__str = &v646.i64[1];
    v646.i64[0] = 0x400000000;
    uint64_t v529 = *(unsigned int *)(v527 + 16);
    v530 = (char *)(v527 + 8);
    if (v529) {
      BOOL v531 = __str == v530;
    }
    else {
      BOOL v531 = 1;
    }
    if (v531) {
      goto LABEL_843;
    }
    if (v529 >= 5)
    {
      v646.i32[0] = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(&v646.u64[1], *(const void **)v530, 8 * *(unsigned int *)(v527 + 16));
    v532 = *(uint64_t **)__str;
    v533 = (const void *)(v527 + 56);
    v646.i32[0] = v529;
    uint64_t v534 = *(void *)__str + 8 * v529;
    do
    {
      if ((v454 & 1) == 0)
      {
        char v454 = 0;
        goto LABEL_839;
      }
      uint64_t v535 = *v532;
      unsigned int v536 = llvm::StringMapImpl::LookupBucketFor();
      v537 = v632;
      uint64_t v538 = v536;
      uint64_t v539 = *((void *)v632 + v536);
      if (v539 == -8)
      {
        --LODWORD(v634[0]);
LABEL_828:
        uint64_t v540 = MEMORY[0x1CB79F270](v528 + 41, 8);
        v541 = (void *)v540;
        uint64_t v542 = v540 + 40;
        if (v528) {
          memcpy((void *)(v540 + 40), v533, v528);
        }
        *(unsigned char *)(v542 + v528) = 0;
        void *v541 = v528;
        v541[4] = 0;
        v537[v538] = v541;
        ++HIDWORD(v633);
        unsigned int v543 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v632);
        for (i10 = (uint64_t *)((char *)v632 + 8 * v543); ; ++i10)
        {
          uint64_t v539 = *i10;
          if (*i10 && v539 != -8) {
            break;
          }
        }
        goto LABEL_837;
      }
      if (!v539) {
        goto LABEL_828;
      }
LABEL_837:
      uint64_t v546 = *(void *)&v623[*(void *)(*(void *)v624 - 24) + 32];
      v626 = (uint64_t (*)(uint64_t))v535;
      uint64_t v547 = *(void *)(v539 + 32);
      if (!v547) {
        goto LABEL_1015;
      }
      char v454 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (**)(uint64_t)))(*(void *)v547 + 48))(v547, v546, &v626);
      uint64_t v1 = v624;
LABEL_839:
      ++v532;
    }
    while (v532 != (uint64_t *)v534);
    if (*(int64x2_t **)__str != (int64x2_t *)&v646.u64[1]) {
      free(*(void **)__str);
    }
    v526 = v611;
    do
    {
LABEL_843:
      uint64_t v548 = i9[1];
      ++i9;
      uint64_t v527 = v548;
      if (v548) {
        BOOL v549 = v527 == -8;
      }
      else {
        BOOL v549 = 1;
      }
    }
    while (v549);
  }
  while (i9 != v526);
LABEL_850:
  if (HIDWORD(v635.__r_.__value_.__r.__words[1]) && LODWORD(v635.__r_.__value_.__r.__words[1]))
  {
    uint64_t v550 = 0;
    uint64_t v551 = 8 * LODWORD(v635.__r_.__value_.__r.__words[1]);
    do
    {
      v552 = *(llvm **)(v635.__r_.__value_.__r.__words[0] + v550);
      if (v552 != (llvm *)-8 && v552 != 0)
      {
        uint64_t v555 = *(void *)v552;
        v554 = (void *)*((void *)v552 + 1);
        if (v554 != (void *)((char *)v552 + 24)) {
          free(v554);
        }
        llvm::deallocate_buffer(v552, (void *)(v555 + 57));
      }
      v550 += 8;
    }
    while (v551 != v550);
  }
  free(v635.__r_.__value_.__l.__data_);
  if (HIDWORD(v633) && v633)
  {
    uint64_t v556 = 0;
    uint64_t v557 = 8 * v633;
    do
    {
      v558 = *(llvm **)((char *)v632 + v556);
      if (v558 != (llvm *)-8 && v558 != 0)
      {
        v560 = (void *)(*(void *)v558 + 41);
        std::__function::__value_func<BOOL ()(AGCLLVMTargetLowerer &,llvm::CallInst *)>::~__value_func[abi:nn180100]((void *)v558 + 1);
        llvm::deallocate_buffer(v558, v560);
      }
      v556 += 8;
    }
    while (v557 != v556);
  }
  free(v632);
  uint64_t v368 = *(void *)v1;
LABEL_871:
  if (v601)
  {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(v368 - 24)), "after replaceSimdgroupMatrices", 0);
    uint64_t v368 = *(void *)v1;
  }
  if (v454)
  {
    int v561 = (*(uint64_t (**)(AGCLLVMUserObject *))(v368 + 168))(v1);
    uint64_t v368 = *(void *)v1;
  }
  else
  {
    int v561 = 0;
  }
  if (v601)
  {
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(v368 - 24)), "after replacePreRuntimeLinkBuiltins", 0);
    uint64_t v368 = *(void *)v1;
  }
  if ((*(unsigned int (**)(char *))(*(void *)((char *)v1 + *(void *)(v368 - 24)) + 64))((char *)v1 + *(void *)(v368 - 24)) == 29)
  {
    if (v561) {
      int v561 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(*(void *)v1 + 256))(v1, 4);
    }
    if (v601) {
      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after linking rt runtime", 0);
    }
  }
  if ((*(unsigned int (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 64))((char *)v1 + *(void *)(*(void *)v1 - 24)) == 3
    || (*(unsigned int (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 64))((char *)v1 + *(void *)(*(void *)v1 - 24)) == 4)
  {
    if (v561) {
      int v561 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(*(void *)v1 + 256))(v1, 6);
    }
    if (v601) {
      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after linking gpe runtime", 0);
    }
  }
  uint64_t v562 = *(void *)v1;
  if (!*(unsigned char *)(*(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 816) + 45))
  {
    if (v561) {
      goto LABEL_901;
    }
    if (!v601) {
      goto LABEL_907;
    }
LABEL_898:
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(v562 - 24)), "after linking vf runtime", 0);
    goto LABEL_903;
  }
  if (!v561)
  {
    char v564 = 0;
    if (!v601)
    {
LABEL_908:
      AGCLLVMUserObject::replaceLateTextureBufferLength((uint64_t)v1);
      goto LABEL_909;
    }
LABEL_897:
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(v562 - 24)), "after linking ei runtime", 0);
    uint64_t v562 = *(void *)v1;
    if (v564) {
      goto LABEL_901;
    }
    goto LABEL_898;
  }
  int v563 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(*(void *)v1 + 256))(v1, 2);
  char v564 = v563;
  if (v601)
  {
    uint64_t v562 = *(void *)v1;
    goto LABEL_897;
  }
  if (!v563)
  {
LABEL_907:
    int v561 = 0;
    goto LABEL_908;
  }
  uint64_t v562 = *(void *)v1;
LABEL_901:
  int v565 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(v562 + 256))(v1, 3);
  int v561 = v565;
  if (!v601)
  {
    if (v565) {
      goto LABEL_905;
    }
    goto LABEL_908;
  }
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after linking vf runtime", 0);
  if ((v561 & 1) == 0)
  {
LABEL_903:
    int v561 = 0;
    goto LABEL_906;
  }
LABEL_905:
  int v561 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(*(void *)v1 + 256))(v1, 7);
  if (!v601) {
    goto LABEL_908;
  }
LABEL_906:
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after linking texture atomic runtime", 0);
  AGCLLVMUserObject::replaceLateTextureBufferLength((uint64_t)v1);
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after replaceLateTextureBufferLength", 0);
LABEL_909:
  if (*((unsigned char *)v1 + 14) || !MGGetBoolAnswer()) {
    goto LABEL_921;
  }
  v567 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_F16_FASTMATH_BUILTINS", v566);
  if (v567 && *v567 != 48)
  {
    if (atoi(v567))
    {
      if (v561) {
        int v561 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 184))(v1);
      }
      if (v601)
      {
        AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after replace f16 builtins", 0);
        if (v561) {
          goto LABEL_922;
        }
        int v561 = 0;
        goto LABEL_924;
      }
    }
LABEL_921:
    if (v561) {
      goto LABEL_922;
    }
    goto LABEL_923;
  }
  if ((v561 & 1) == 0)
  {
    int v561 = 0;
    goto LABEL_923;
  }
LABEL_922:
  int v561 = (*(uint64_t (**)(AGCLLVMUserObject *, void))(*(void *)v1 + 248))(v1, 0);
LABEL_923:
  if (v601) {
LABEL_924:
  }
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after linking metal runtime", 0);
  if (MGGetBoolAnswer())
  {
    v569 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_PRECISE_MATH", v568);
    if (v569)
    {
      if (*v569 != 48
        && atoi(v569)
        && *(void *)(*(void *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 816) + 32))
      {
        if (v561) {
          int v561 = (*(uint64_t (**)(AGCLLVMUserObject *, uint64_t))(*(void *)v1 + 248))(v1, 1);
        }
        if (v601) {
          AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after linking precise metal runtime", 0);
        }
      }
    }
  }
  uint64_t v570 = *(void *)(*(void *)v1 - 24);
  if (!*(unsigned char *)(*(void *)((char *)v1 + v570 + 400) + 1755))
  {
    if (v561)
    {
      int v571 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 192))(v1);
      int v572 = v571;
      if (!v601)
      {
        if (v571)
        {
          AGCLLVMUserObject::replaceCommandBufferPrivateData(v1);
          goto LABEL_950;
        }
        goto LABEL_988;
      }
      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after replaceIndirectResources", 0);
      if (v572)
      {
        AGCLLVMUserObject::replaceCommandBufferPrivateData(v1);
        goto LABEL_942;
      }
    }
    else
    {
      if (!v601) {
        goto LABEL_988;
      }
      AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + v570), "after replaceIndirectResources", 0);
    }
LABEL_947:
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after replaceCommandBufferPrivateData", 0);
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after replaceRaytracingFunctions", 0);
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after replaceBuiltins", 0);
    goto LABEL_953;
  }
  if ((v561 & 1) == 0)
  {
    if (!v601) {
      goto LABEL_988;
    }
    goto LABEL_947;
  }
  AGCLLVMUserObject::replaceCommandBufferPrivateData(v1);
  if (v601)
  {
LABEL_942:
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after replaceCommandBufferPrivateData", 0);
    AGCLLVMUserObject::replaceRaytracingFunctions(v1);
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after replaceRaytracingFunctions", 0);
    goto LABEL_951;
  }
LABEL_950:
  AGCLLVMUserObject::replaceRaytracingFunctions(v1);
LABEL_951:
  int v573 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 176))(v1);
  char v574 = v573;
  if (!v601)
  {
    if (v573) {
      goto LABEL_971;
    }
    goto LABEL_988;
  }
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after replaceBuiltins", 0);
  if ((v574 & 1) == 0)
  {
LABEL_953:
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after promoteGlobalConstants", 0);
    goto LABEL_954;
  }
LABEL_971:
  int v579 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 264))(v1);
  char v580 = v579;
  if (!v601)
  {
    if (v579) {
      goto LABEL_975;
    }
    goto LABEL_988;
  }
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after promoteGlobalConstants", 0);
  if ((v580 & 1) == 0)
  {
LABEL_954:
    AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after improveDMAPromotionOpportunity", 0);
    goto LABEL_955;
  }
LABEL_975:
  int v581 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 224))(v1);
  char v582 = v581;
  if (!v601)
  {
    if (v581)
    {
LABEL_979:
      if (!*((unsigned char *)v1 + 15))
      {
        uint64_t v583 = *((void *)v1 + 21);
        *(_WORD *)(v583 + 18) = *(_WORD *)(v583 + 18) & 0xC00F | (16
                                                                * (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 88))(v1));
        v584 = (llvm::Constant *)(*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 96))(v1);
        if (v584) {
          llvm::Function::setPrefixData(*((llvm::Function **)v1 + 21), v584);
        }
      }
      v585 = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
      if (v585)
      {
        v586 = v585;
        int NumOperands = llvm::NamedMDNode::getNumOperands(v585);
        *(void *)__str = &v646.i64[1];
        v646.i64[0] = 0x400000000;
        if (NumOperands) {
          unint64_t v588 = (NumOperands - 1) + 1;
        }
        else {
          unint64_t v588 = 0;
        }
        if (v588 >= 5) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        __int32 v590 = 0;
        if (NumOperands)
        {
          int v591 = 0;
          v592 = *(uint64_t **)__str;
          do
          {
            *v592++ = llvm::NamedMDNode::getOperand(v586);
            ++v591;
          }
          while (NumOperands != v591);
          __int32 v590 = v646.i32[0];
        }
        v646.i32[0] = v590 + v588;
        llvm::Module::eraseNamedMetadata(*(llvm::Module **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 368), v586);
        llvm::Module::getOrInsertNamedMetadata();
        v593 = *(unint64_t **)__str;
        if (v646.i32[0])
        {
          uint64_t v594 = 8 * v646.u32[0];
          do
          {
            if (*(void *)(*v593 - 8 * *(unsigned int *)(*v593 + 8))) {
              llvm::NamedMDNode::addOperand();
            }
            ++v593;
            v594 -= 8;
          }
          while (v594);
          v593 = *(unint64_t **)__str;
        }
        if (v593 != &v646.u64[1]) {
          free(v593);
        }
      }
      if (v601)
      {
        AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after prunePRIDsOfDeletedGlobals", 0);
        AGCLLVMUserObject::bindDylibResources((AGCLLVMUserObject **)v1);
        AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after bindDylibResources", 0);
      }
      else
      {
        AGCLLVMUserObject::bindDylibResources((AGCLLVMUserObject **)v1);
      }
      char v575 = (*(uint64_t (**)(char *, void))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24))
                                                       + 168))((char *)v1 + *(void *)(*(void *)v1 - 24), *((void *)v1 + 21));
      if (v601) {
        goto LABEL_956;
      }
      AGCLLVMUserObject::overrideFunctionAttributesAndLinkage(v1);
      AGCLLVMUserObject::overrideExternallyInitializedLinkage(v1);
      if (v575)
      {
LABEL_957:
        uint64_t v58 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)v1 + 328))(v1);
        if (v601) {
          goto LABEL_961;
        }
        AGCLLVMUserObject::replaceTextureStatePtr((uint64_t)v1);
        if (v58)
        {
LABEL_962:
          if ((*(unsigned int (**)(AGCLLVMUserObject *))(*(void *)v1 + 240))(v1))
          {
            *(_WORD *)__str = 0;
            int v576 = 1;
            __str[2] = 1;
            *(_DWORD *)&__str[4] = 0;
            unsigned int v577 = (*(uint64_t (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 64))((char *)v1 + *(void *)(*(void *)v1 - 24));
            if (v577 > 0x1E || ((1 << v577) & 0x60400180) == 0) {
              int v576 = 2;
            }
            __str[3] = (*(uint64_t (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24))
                                                         + 72))((char *)v1 + *(void *)(*(void *)v1 - 24));
            if (AGCLLVMCtx::compile(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 464), (uint64_t)v1 + *(void *)(*(void *)v1 - 24), *(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 368), *(_DWORD *)((char *)v1 + 33), v576, __str))
            {
              uint64_t v58 = (*(uint64_t (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24))
                                                      + 136))((char *)v1 + *(void *)(*(void *)v1 - 24));
              goto LABEL_991;
            }
          }
        }
        goto LABEL_990;
      }
LABEL_989:
      AGCLLVMUserObject::replaceTextureStatePtr((uint64_t)v1);
LABEL_990:
      uint64_t v58 = 0;
      goto LABEL_991;
    }
LABEL_988:
    AGCLLVMUserObject::overrideFunctionAttributesAndLinkage(v1);
    AGCLLVMUserObject::overrideExternallyInitializedLinkage(v1);
    goto LABEL_989;
  }
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after improveDMAPromotionOpportunity", 0);
  if (v582) {
    goto LABEL_979;
  }
LABEL_955:
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after prunePRIDsOfDeletedGlobals", 0);
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after bindDylibResources", 0);
  char v575 = 0;
LABEL_956:
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after finalizeDriverBindings", 0);
  AGCLLVMUserObject::overrideFunctionAttributesAndLinkage(v1);
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after overrideFunctionAttributesAndLinkage", 0);
  AGCLLVMUserObject::overrideExternallyInitializedLinkage(v1);
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after overrideExternallyInitializedLinkage", 0);
  if (v575) {
    goto LABEL_957;
  }
  uint64_t v58 = 0;
LABEL_961:
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after generateAuxiliaryShaders", 0);
  AGCLLVMUserObject::replaceTextureStatePtr((uint64_t)v1);
  AGCLLVMObject::printIR((AGCLLVMUserObject *)((char *)v1 + *(void *)(*(void *)v1 - 24)), "after replaceTextureStatePtr", 0);
  if (v58) {
    goto LABEL_962;
  }
LABEL_991:
  *(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 416) = mach_absolute_time()
                                                                    - *(void *)((char *)v1
                                                                                + *(void *)(*(void *)v1 - 24)
                                                                                + 408);
  return v58;
}

uint64_t AGCLLVMObject::getRelocModel(AGCLLVMObject *this)
{
  return 0;
}

void AGCLLVMUserObject::overrideFunctionAttributesAndLinkage(AGCLLVMUserObject *this)
{
  v50[8] = *MEMORY[0x1E4F143B8];
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_LATE_INLINING", v2);
    if (Value)
    {
      if (*Value != 48)
      {
        if (atoi(Value))
        {
          *((_DWORD *)this + 10) = 0;
          uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
          uint64_t v5 = v4 + 24;
          uint64_t v6 = *(void *)(v4 + 32);
          if (v6 != v4 + 24)
          {
            do
            {
              uint64_t v7 = (llvm::GlobalValue *)(v6 - 56);
              BOOL v22 = v6 == 0;
              uint64_t v6 = *(void *)(v6 + 8);
              if (v22) {
                uint64_t v8 = 0;
              }
              else {
                uint64_t v8 = v7;
              }
              if ((llvm::GlobalValue::isDeclaration(v8) & 1) == 0)
              {
                ++*((_DWORD *)this + 10);
                if (v8 != *((llvm::GlobalValue **)this + 21))
                {
                  llvm::Function::addFnAttr();
                  *((_DWORD *)v8 + 8) = *((_DWORD *)v8 + 8) & 0xFFFFBFC0 | 0x4007;
                }
              }
            }
            while (v6 != v5);
            if (*((_DWORD *)this + 10) > 1u) {
              llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464)+ 328), *(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368));
            }
          }
        }
      }
    }
  }
  if (MGGetBoolAnswer())
  {
    uint64_t v10 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_OPTSIZE", v9);
    if (v10)
    {
      if (*v10 != 48)
      {
        if (atoi(v10))
        {
          uint64_t v11 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
          uint64_t v12 = v11 + 24;
          uint64_t v13 = *(void *)(v11 + 32);
          if (v13 != v12)
          {
            do
            {
              uint64_t v14 = *(void *)(v13 + 8);
              if (v13) {
                uint64_t v15 = (llvm::GlobalValue *)(v13 - 56);
              }
              else {
                uint64_t v15 = 0;
              }
              if ((llvm::GlobalValue::isDeclaration(v15) & 1) == 0)
              {
                llvm::Function::removeFnAttr();
                llvm::Function::addFnAttr();
              }
              uint64_t v13 = v14;
            }
            while (v14 != v12);
          }
        }
      }
    }
  }
  if (!MGGetBoolAnswer()
    || (uint64_t v17 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_ENABLE_INTERSECTION_CALL", v16)) == 0
    || *v17 == 48
    || !atoi(v17))
  {
    uint64_t v23 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
    uint64_t v24 = v23 + 24;
    uint64_t v25 = *(void *)(v23 + 32);
LABEL_41:
    while (v25 != v24)
    {
      uint64_t v26 = v25 - 56;
      BOOL v22 = v25 == 0;
      uint64_t v25 = *(void *)(v25 + 8);
      if (v22) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      __int16 v28 = *(_WORD *)(v27 + 18);
      if ((v28 & 0x3FF0) == 0xFF0) {
        *(_WORD *)(v27 + 18) = v28 & 0xC00F;
      }
      uint64_t v29 = v27 + 72;
      for (uint64_t i = *(void *)(v27 + 80); i != v29; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v31 = i - 24;
        if (!i) {
          uint64_t v31 = 0;
        }
        uint64_t v32 = v31 + 40;
        uint64_t v33 = *(void *)(v31 + 48);
        if (v33 != v32)
        {
          while (i != v29)
          {
            if (v33)
            {
              if (*(unsigned char *)(v33 - 8) == 84)
              {
                __int16 v34 = *(_WORD *)(v33 - 6);
                if ((v34 & 0xFFC) == 0x3FC) {
                  *(_WORD *)(v33 - 6) = v34 & 0xF003;
                }
              }
            }
            uint64_t v33 = *(void *)(v33 + 8);
            uint64_t v35 = i - 24;
            if (!i) {
              uint64_t v35 = 0;
            }
            uint64_t v36 = v35 + 40;
            while (v33 == v36)
            {
              uint64_t i = *(void *)(i + 8);
              if (i == v29) {
                goto LABEL_41;
              }
              uint64_t v37 = i - 24;
              if (!i) {
                uint64_t v37 = 0;
              }
              uint64_t v36 = v37 + 40;
              uint64_t v33 = *(void *)(v37 + 48);
            }
          }
          goto LABEL_41;
        }
      }
    }
  }
  if (!*((unsigned char *)this + 3713) && !*((unsigned char *)this + 15))
  {
    int v49 = 0;
    uint64_t v18 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v19 = (uint64_t *)*((void *)v18 + 411);
    uint64_t v20 = *((unsigned int *)v18 + 824);
    if (v20)
    {
      for (uint64_t j = v19; ; ++j)
      {
        BOOL v22 = !*j || *j == -8;
        if (!v22) {
          break;
        }
      }
    }
    else
    {
      uint64_t j = v19;
    }
    uint64_t v38 = &v19[v20];
    if (j != v38)
    {
      unsigned int v39 = 0;
      uint64_t v40 = *j;
      do
      {
        uint64_t v41 = *(unsigned __int8 **)(*(void *)(v40 + 8) - 8 * *(unsigned int *)(*(void *)(v40 + 8) + 8));
        if (v41 && *v41 - 1 <= 1)
        {
          uint64_t v42 = *((void *)v41 + 16);
          if (*(unsigned char *)(v42 + 16)) {
            uint64_t v43 = 0;
          }
          else {
            uint64_t v43 = v42;
          }
        }
        else
        {
          uint64_t v43 = 0;
        }
        *(_DWORD *)(v43 + 32) = *(_DWORD *)(v43 + 32) & 0xFFFFBFC0 | 0x4007;
        if (v39 >= 8) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v50[v39] = v43;
        unsigned int v39 = ++v49;
        do
        {
          uint64_t v44 = j[1];
          ++j;
          uint64_t v40 = v44;
          if (v44) {
            BOOL v45 = v40 == -8;
          }
          else {
            BOOL v45 = 1;
          }
        }
        while (v45);
      }
      while (j != v38);
    }
    llvm::appendToCompilerUsed();
  }
  uint64_t v46 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v47 = v46 + 24;
  uint64_t v48 = *(void *)(v46 + 32);
  if (v48 != v46 + 24)
  {
    do
    {
      if (llvm::Function::hasFnAttribute())
      {
        llvm::Function::removeFnAttr();
        llvm::Function::addFnAttr();
      }
      uint64_t v48 = *(void *)(v48 + 8);
    }
    while (v48 != v47);
  }
}

void virtual thunk to'AGCLLVMAGPFragmentShader::getCompilationKeyDescription(AGCLLVMAGPFragmentShader *this@<X0>, uint64_t a2@<X8>)
{
}

void std::__introsort<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *,false>(unint64_t a1, void **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v121 = (long long *)(a2 - 8);
    uint64_t v122 = (uint64_t)(a2 - 4);
    uint64_t v120 = (long long *)(a2 - 12);
    unint64_t v9 = a1;
    unint64_t v125 = (unint64_t)a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v9;
          uint64_t v10 = (uint64_t)a2 - v9;
          uint64_t v11 = (uint64_t)((uint64_t)a2 - v9) >> 5;
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*((_DWORD *)a2 - 1) > *(_DWORD *)(a1 + 28))
                {
                  uint64_t v140 = *(void *)(a1 + 16);
                  long long v132 = *(_OWORD *)a1;
                  long long v49 = *(_OWORD *)v122;
                  *(void *)(a1 + 16) = *(void *)(v122 + 16);
                  *(_OWORD *)a1 = v49;
                  *(void *)(v122 + 16) = v140;
                  *(_OWORD *)uint64_t v122 = v132;
                  int v50 = *(_DWORD *)(a1 + 24);
                  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 - 2);
                  *((_DWORD *)a2 - 2) = v50;
                  int v51 = *(_DWORD *)(a1 + 28);
                  *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 - 1);
                  *((_DWORD *)a2 - 1) = v51;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((long long *)a1, (long long *)(a1 + 32), (long long *)v122);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(a1, a1 + 32, a1 + 64, v122);
                break;
              case 5:
                uint64_t v52 = (long long *)(a1 + 32);
                uint64_t v53 = (long long *)(a1 + 64);
                uint64_t v54 = (long long *)(a1 + 96);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(a1, a1 + 32, a1 + 64, a1 + 96);
                if (*((_DWORD *)a2 - 1) > *(_DWORD *)(a1 + 124))
                {
                  long long v55 = *v54;
                  uint64_t v56 = *(void *)(a1 + 112);
                  uint64_t v57 = *(void *)(v122 + 16);
                  *uint64_t v54 = *(_OWORD *)v122;
                  *(void *)(a1 + 112) = v57;
                  *(void *)(v122 + 16) = v56;
                  *(_OWORD *)uint64_t v122 = v55;
                  LODWORD(v56) = *(_DWORD *)(a1 + 120);
                  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 - 2);
                  *((_DWORD *)a2 - 2) = v56;
                  LODWORD(v56) = *(_DWORD *)(a1 + 124);
                  *(_DWORD *)(a1 + 124) = *((_DWORD *)a2 - 1);
                  *((_DWORD *)a2 - 1) = v56;
                  unsigned int v58 = *(_DWORD *)(a1 + 124);
                  unsigned int v59 = *(_DWORD *)(a1 + 92);
                  if (v58 > v59)
                  {
                    uint64_t v60 = *(void *)(a1 + 80);
                    long long v61 = *v53;
                    *uint64_t v53 = *v54;
                    *(void *)(a1 + 80) = *(void *)(a1 + 112);
                    *uint64_t v54 = v61;
                    *(void *)(a1 + 112) = v60;
                    int v62 = *(_DWORD *)(a1 + 88);
                    int v63 = *(_DWORD *)(a1 + 120);
                    *(_DWORD *)(a1 + 88) = v63;
                    *(_DWORD *)(a1 + 92) = v58;
                    *(_DWORD *)(a1 + 120) = v62;
                    *(_DWORD *)(a1 + 124) = v59;
                    unsigned int v64 = *(_DWORD *)(a1 + 60);
                    if (v58 > v64)
                    {
                      uint64_t v65 = *(void *)(a1 + 48);
                      long long v66 = *v52;
                      long long *v52 = *v53;
                      *(void *)(a1 + 48) = *(void *)(a1 + 80);
                      *uint64_t v53 = v66;
                      *(void *)(a1 + 80) = v65;
                      LODWORD(v65) = *(_DWORD *)(a1 + 56);
                      *(_DWORD *)(a1 + 56) = v63;
                      *(_DWORD *)(a1 + 60) = v58;
                      *(_DWORD *)(a1 + 88) = v65;
                      *(_DWORD *)(a1 + 92) = v64;
                      unsigned int v67 = *(_DWORD *)(a1 + 28);
                      if (v58 > v67)
                      {
                        uint64_t v141 = *(void *)(a1 + 16);
                        long long v133 = *(_OWORD *)a1;
                        *(_OWORD *)a1 = *v52;
                        *(void *)(a1 + 16) = *(void *)(a1 + 48);
                        long long *v52 = v133;
                        *(void *)(a1 + 48) = v141;
                        int v68 = *(_DWORD *)(a1 + 24);
                        *(_DWORD *)(a1 + 24) = v63;
                        *(_DWORD *)(a1 + 28) = v58;
                        *(_DWORD *)(a1 + 56) = v68;
                        *(_DWORD *)(a1 + 60) = v67;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v10 <= 767)
          {
            uint64_t v69 = (void **)(a1 + 32);
            BOOL v71 = (void **)a1 == a2 || v69 == a2;
            if (a4)
            {
              if (!v71)
              {
                uint64_t v72 = 0;
                unint64_t v73 = a1;
                do
                {
                  uint64_t v74 = v69;
                  unsigned int v75 = *(_DWORD *)(v73 + 60);
                  if (v75 > *(_DWORD *)(v73 + 28))
                  {
                    uint64_t v76 = *v69;
                    *(void *)uint64_t v134 = *(void *)(v73 + 40);
                    *(void *)&v134[7] = *(void *)(v73 + 47);
                    char v77 = *(unsigned char *)(v73 + 55);
                    v69[1] = 0;
                    v69[2] = 0;
                    *uint64_t v69 = 0;
                    int v78 = *(_DWORD *)(v73 + 56);
                    uint64_t v79 = v72;
                    while (1)
                    {
                      std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1 + v79 + 32, (__n128 *)(a1 + v79));
                      if (!v79) {
                        break;
                      }
                      unsigned int v80 = *(_DWORD *)(a1 + v79 - 4);
                      v79 -= 32;
                      if (v75 <= v80)
                      {
                        uint64_t v81 = a1 + v79 + 32;
                        goto LABEL_90;
                      }
                    }
                    uint64_t v81 = a1;
LABEL_90:
                    if (*(char *)(v81 + 23) < 0) {
                      operator delete(*(void **)v81);
                    }
                    *(void *)uint64_t v81 = v76;
                    *(void *)(v81 + 8) = *(void *)v134;
                    *(void *)(v81 + 15) = *(void *)&v134[7];
                    *(unsigned char *)(v81 + 23) = v77;
                    *(_DWORD *)(v81 + 24) = v78;
                    *(_DWORD *)(v81 + 28) = v75;
                  }
                  uint64_t v69 = v74 + 4;
                  v72 += 32;
                  unint64_t v73 = (unint64_t)v74;
                }
                while (v74 + 4 != a2);
              }
            }
            else if (!v71)
            {
              do
              {
                uint64_t v114 = v69;
                unsigned int v115 = *(_DWORD *)(a1 + 60);
                if (v115 > *(_DWORD *)(a1 + 28))
                {
                  uint64_t v116 = *v69;
                  *(void *)uint64_t v137 = *(void *)(a1 + 40);
                  *(void *)&v137[7] = *(void *)(a1 + 47);
                  char v117 = *(unsigned char *)(a1 + 55);
                  v69[1] = 0;
                  v69[2] = 0;
                  *uint64_t v69 = 0;
                  int v118 = *(_DWORD *)(a1 + 56);
                  do
                  {
                    unint64_t v119 = a1;
                    std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1 + 32, (__n128 *)a1);
                    a1 -= 32;
                  }
                  while (v115 > *(_DWORD *)(v119 - 4));
                  if (*(char *)(v119 + 23) < 0) {
                    operator delete(*(void **)v119);
                  }
                  *(void *)unint64_t v119 = v116;
                  *(void *)(v119 + 15) = *(void *)&v137[7];
                  *(void *)(v119 + 8) = *(void *)v137;
                  *(unsigned char *)(v119 + 23) = v117;
                  *(_DWORD *)(v119 + 24) = v118;
                  *(_DWORD *)(v119 + 28) = v115;
                }
                uint64_t v69 = v114 + 4;
                a1 = (unint64_t)v114;
              }
              while (v114 + 4 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((void **)a1 != a2)
            {
              int64_t v82 = (unint64_t)(v11 - 2) >> 1;
              int64_t v83 = v82;
              do
              {
                int64_t v84 = v83;
                if (v82 >= v83)
                {
                  uint64_t v85 = (2 * v83) | 1;
                  uint64_t v86 = (__n128 *)(a1 + 32 * v85);
                  if (2 * v84 + 2 < v11)
                  {
                    BOOL v87 = v86[1].n128_u32[3] > v86[3].n128_u32[3];
                    v86 += 2 * v87;
                    if (v87) {
                      uint64_t v85 = 2 * v84 + 2;
                    }
                  }
                  uint64_t v88 = (__n128 *)(a1 + 32 * v84);
                  unsigned __int32 v89 = v88[1].n128_u32[3];
                  if (v86[1].n128_u32[3] <= v89)
                  {
                    unint64_t v126 = v88->n128_u64[0];
                    *(void *)&v135[7] = *(unint64_t *)((char *)&v88->n128_u64[1] + 7);
                    *(void *)uint64_t v135 = v88->n128_u64[1];
                    unsigned __int8 v124 = v88[1].n128_u8[7];
                    v88->n128_u64[0] = 0;
                    v88->n128_u64[1] = 0;
                    v88[1].n128_u64[0] = 0;
                    unsigned __int32 v90 = v88[1].n128_u32[2];
                    do
                    {
                      uint64_t v91 = (uint64_t)v88;
                      uint64_t v88 = v86;
                      std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v91, v86);
                      if (v82 < v85) {
                        break;
                      }
                      uint64_t v92 = (2 * v85) | 1;
                      uint64_t v86 = (__n128 *)(a1 + 32 * v92);
                      if (2 * v85 + 2 < v11)
                      {
                        BOOL v87 = v86[1].n128_u32[3] > v86[3].n128_u32[3];
                        v86 += 2 * v87;
                        if (v87) {
                          uint64_t v92 = 2 * v85 + 2;
                        }
                      }
                      uint64_t v85 = v92;
                    }
                    while (v86[1].n128_u32[3] <= v89);
                    if (v88[1].n128_i8[7] < 0) {
                      operator delete((void *)v88->n128_u64[0]);
                    }
                    v88->n128_u64[0] = v126;
                    v88->n128_u64[1] = *(void *)v135;
                    *(unint64_t *)((char *)&v88->n128_u64[1] + 7) = *(void *)&v135[7];
                    v88[1].n128_u8[7] = v124;
                    v88[1].n128_u32[2] = v90;
                    v88[1].n128_u32[3] = v89;
                  }
                }
                int64_t v83 = v84 - 1;
              }
              while (v84);
              uint64_t v93 = (unint64_t)v10 >> 5;
              do
              {
                uint64_t v94 = 0;
                uint64_t v95 = *(void **)a1;
                char v96 = a2;
                *(void *)uint64_t v129 = *(void *)(a1 + 8);
                *(void *)&v129[7] = *(void *)(a1 + 15);
                char v97 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                uint64_t v98 = a1;
                int v100 = *(_DWORD *)(a1 + 24);
                int v99 = *(_DWORD *)(a1 + 28);
                do
                {
                  uint64_t v101 = v98 + 32 * v94 + 32;
                  uint64_t v102 = (2 * v94) | 1;
                  uint64_t v103 = 2 * v94 + 2;
                  if (v103 < v93)
                  {
                    unsigned int v104 = *(_DWORD *)(v101 + 28);
                    unsigned int v105 = *(_DWORD *)(v101 + 60);
                    v101 += 32 * (v104 > v105);
                    if (v104 > v105) {
                      uint64_t v102 = v103;
                    }
                  }
                  std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v98, (__n128 *)v101);
                  uint64_t v98 = v101;
                  uint64_t v94 = v102;
                }
                while (v102 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
                a2 -= 4;
                if ((void **)v101 == v96 - 4)
                {
                  if (*(char *)(v101 + 23) < 0) {
                    operator delete(*(void **)v101);
                  }
                  *(void *)uint64_t v101 = v95;
                  *(void *)(v101 + 8) = *(void *)v129;
                  *(void *)(v101 + 15) = *(void *)&v129[7];
                  *(unsigned char *)(v101 + 23) = v97;
                  *(_DWORD *)(v101 + 24) = v100;
                  *(_DWORD *)(v101 + 28) = v99;
                }
                else
                {
                  std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v101, (__n128 *)v96 - 2);
                  if (*((char *)v96 - 9) < 0) {
                    operator delete(*a2);
                  }
                  *(v96 - 4) = v95;
                  *(void **)((char *)v96 - 17) = *(void **)&v129[7];
                  *(v96 - 3) = *(void **)v129;
                  *((unsigned char *)v96 - 9) = v97;
                  *((_DWORD *)v96 - 2) = v100;
                  *((_DWORD *)v96 - 1) = v99;
                  uint64_t v106 = v101 + 32 - a1;
                  if (v106 >= 33)
                  {
                    unint64_t v107 = (((unint64_t)v106 >> 5) - 2) >> 1;
                    uint64_t v108 = (__n128 *)(a1 + 32 * v107);
                    unsigned __int32 v109 = *(_DWORD *)(v101 + 28);
                    if (v108[1].n128_u32[3] > v109)
                    {
                      uint64_t v110 = *(void **)v101;
                      *(void *)uint64_t v136 = *(void *)(v101 + 8);
                      *(void *)&v136[7] = *(void *)(v101 + 15);
                      char v111 = *(unsigned char *)(v101 + 23);
                      *(void *)(v101 + 8) = 0;
                      *(void *)(v101 + 16) = 0;
                      *(void *)uint64_t v101 = 0;
                      int v112 = *(_DWORD *)(v101 + 24);
                      do
                      {
                        uint64_t v113 = v101;
                        uint64_t v101 = (uint64_t)v108;
                        std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v113, v108);
                        if (!v107) {
                          break;
                        }
                        unint64_t v107 = (v107 - 1) >> 1;
                        uint64_t v108 = (__n128 *)(a1 + 32 * v107);
                      }
                      while (v108[1].n128_u32[3] > v109);
                      if (*(char *)(v101 + 23) < 0) {
                        operator delete(*(void **)v101);
                      }
                      *(void *)uint64_t v101 = v110;
                      *(void *)(v101 + 8) = *(void *)v136;
                      *(void *)(v101 + 15) = *(void *)&v136[7];
                      *(unsigned char *)(v101 + 23) = v111;
                      *(_DWORD *)(v101 + 24) = v112;
                      *(_DWORD *)(v101 + 28) = v109;
                    }
                  }
                }
                BOOL v87 = v93-- <= 2;
              }
              while (!v87);
            }
            return;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          unint64_t v13 = a1 + 32 * ((unint64_t)v11 >> 1);
          if ((unint64_t)v10 <= 0x1000)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((long long *)v13, (long long *)a1, (long long *)v122);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((long long *)a1, (long long *)v13, (long long *)v122);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((long long *)(a1 + 32), (long long *)(v13 - 32), v121);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((long long *)(a1 + 64), (long long *)(a1 + 32 + 32 * v12), v120);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((long long *)(v13 - 32), (long long *)v13, (long long *)(a1 + 32 + 32 * v12));
            uint64_t v138 = *(void *)(a1 + 16);
            long long v130 = *(_OWORD *)a1;
            uint64_t v14 = *(void *)(v13 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(void *)(a1 + 16) = v14;
            v15.n128_u64[1] = *((void *)&v130 + 1);
            *(void *)(v13 + 16) = v138;
            *(_OWORD *)unint64_t v13 = v130;
            v15.n128_u64[0] = *(void *)(a1 + 24);
            *(void *)(a1 + 24) = *(void *)(v13 + 24);
            *(void *)(v13 + 24) = v15.n128_u64[0];
          }
          --a3;
          if (a4) {
            break;
          }
          unsigned int v17 = *(_DWORD *)(a1 + 28);
          if (*(_DWORD *)(a1 - 4) > v17)
          {
            uint64_t v16 = a3;
            goto LABEL_13;
          }
          uint64_t v34 = *(void *)a1;
          *(void *)uint64_t v128 = *(void *)(a1 + 8);
          *(void *)&v128[7] = *(void *)(a1 + 15);
          char v35 = *(unsigned char *)(a1 + 23);
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          a2 = (void **)v125;
          if (v17 <= *(_DWORD *)(v125 - 4))
          {
            unint64_t v38 = a1 + 32;
            do
            {
              unint64_t v9 = v38;
              if (v38 >= v125) {
                break;
              }
              unsigned int v39 = *(_DWORD *)(v38 + 28);
              v38 += 32;
            }
            while (v17 <= v39);
          }
          else
          {
            unint64_t v36 = a1;
            do
            {
              unint64_t v9 = v36 + 32;
              unsigned int v37 = *(_DWORD *)(v36 + 60);
              v36 += 32;
            }
            while (v17 <= v37);
          }
          unint64_t v40 = v125;
          if (v9 < v125)
          {
            unint64_t v41 = v125;
            do
            {
              unint64_t v40 = v41 - 32;
              unsigned int v42 = *(_DWORD *)(v41 - 4);
              v41 -= 32;
            }
            while (v17 > v42);
          }
          int v43 = *(_DWORD *)(a1 + 24);
          while (v9 < v40)
          {
            uint64_t v139 = *(void *)(v9 + 16);
            __n128 v131 = *(__n128 *)v9;
            long long v44 = *(_OWORD *)v40;
            *(void *)(v9 + 16) = *(void *)(v40 + 16);
            *(_OWORD *)unint64_t v9 = v44;
            *(void *)(v40 + 16) = v139;
            *(__n128 *)unint64_t v40 = v131;
            int v45 = *(_DWORD *)(v9 + 24);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v40 + 24);
            *(_DWORD *)(v40 + 24) = v45;
            int v46 = *(_DWORD *)(v9 + 28);
            *(_DWORD *)(v9 + 28) = *(_DWORD *)(v40 + 28);
            *(_DWORD *)(v40 + 28) = v46;
            do
            {
              unsigned int v47 = *(_DWORD *)(v9 + 60);
              v9 += 32;
            }
            while (v17 <= v47);
            do
            {
              unsigned int v48 = *(_DWORD *)(v40 - 4);
              v40 -= 32;
            }
            while (v17 > v48);
          }
          BOOL v4 = v9 - 32 >= a1;
          BOOL v5 = v9 - 32 == a1;
          if (v9 - 32 != a1) {
            std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1, (__n128 *)(v9 - 32));
          }
          if (*(char *)(v9 - 9) < 0) {
            operator delete(*(void **)(v9 - 32));
          }
          a4 = 0;
          *(void *)(v9 - 32) = v34;
          *(void *)(v9 - 17) = *(void *)&v128[7];
          *(void *)(v9 - 24) = *(void *)v128;
          *(unsigned char *)(v9 - 9) = v35;
          *(_DWORD *)(v9 - 8) = v43;
          *(_DWORD *)(v9 - 4) = v17;
        }
        uint64_t v16 = a3;
        unsigned int v17 = *(_DWORD *)(a1 + 28);
LABEL_13:
        uint64_t v18 = *(void *)a1;
        *(void *)uint64_t v127 = *(void *)(a1 + 8);
        *(void *)&v127[7] = *(void *)(a1 + 15);
        char v19 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        int v20 = *(_DWORD *)(a1 + 24);
        unint64_t v21 = a1;
        do
        {
          unint64_t v22 = v21;
          v21 += 32;
        }
        while (*(_DWORD *)(v22 + 60) > v17);
        unint64_t v23 = v125;
        if (v22 == a1)
        {
          unint64_t v26 = v125;
          while (v21 < v26)
          {
            unint64_t v24 = v26 - 32;
            unsigned int v27 = *(_DWORD *)(v26 - 4);
            v26 -= 32;
            if (v27 > v17) {
              goto LABEL_23;
            }
          }
          unint64_t v24 = v26;
        }
        else
        {
          do
          {
            unint64_t v24 = v23 - 32;
            unsigned int v25 = *(_DWORD *)(v23 - 4);
            v23 -= 32;
          }
          while (v25 <= v17);
        }
LABEL_23:
        unint64_t v9 = v21;
        if (v21 < v24)
        {
          unint64_t v28 = v24;
          do
          {
            __n128 v15 = *(__n128 *)v9;
            uint64_t v29 = *(void *)(v9 + 16);
            uint64_t v30 = *(void *)(v28 + 16);
            *(_OWORD *)unint64_t v9 = *(_OWORD *)v28;
            *(void *)(v9 + 16) = v30;
            *(void *)(v28 + 16) = v29;
            *(__n128 *)unint64_t v28 = v15;
            LODWORD(v29) = *(_DWORD *)(v9 + 24);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v28 + 24);
            *(_DWORD *)(v28 + 24) = v29;
            LODWORD(v29) = *(_DWORD *)(v9 + 28);
            *(_DWORD *)(v9 + 28) = *(_DWORD *)(v28 + 28);
            *(_DWORD *)(v28 + 28) = v29;
            do
            {
              unsigned int v31 = *(_DWORD *)(v9 + 60);
              v9 += 32;
            }
            while (v31 > v17);
            do
            {
              unsigned int v32 = *(_DWORD *)(v28 - 4);
              v28 -= 32;
            }
            while (v32 <= v17);
          }
          while (v9 < v28);
        }
        if (v9 - 32 != a1) {
          __n128 v15 = std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1, (__n128 *)(v9 - 32));
        }
        if (*(char *)(v9 - 9) < 0) {
          operator delete(*(void **)(v9 - 32));
        }
        *(void *)(v9 - 32) = v18;
        *(void *)(v9 - 17) = *(void *)&v127[7];
        *(void *)(v9 - 24) = *(void *)v127;
        *(unsigned char *)(v9 - 9) = v19;
        *(_DWORD *)(v9 - 8) = v20;
        *(_DWORD *)(v9 - 4) = v17;
        BOOL v4 = v21 >= v24;
        a3 = v16;
        a2 = (void **)v125;
        if (v4) {
          break;
        }
LABEL_37:
        std::__introsort<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *,false>(a1, v9 - 32, a3, a4 & 1, v15);
        a4 = 0;
      }
      BOOL v33 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(a1, v9 - 32);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(v9, v125))
      {
        break;
      }
      if (!v33) {
        goto LABEL_37;
      }
    }
    a2 = (void **)(v9 - 32);
    if (!v33) {
      continue;
    }
    break;
  }
}

uint64_t AGCLLVMUserFragmentShader::debugTraceBufferEnabled(AGCLLVMUserFragmentShader *this)
{
  return *(unsigned __int8 *)(*((void *)this + 726) + 64) >> 7;
}

void AGCLLVMAGPFragmentShaderGen4::simplifyGenericIR(AGCLLVMAGPFragmentShaderGen4 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v313[24] = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)this + 55) & 0xFFFFFFF7) != 3
    || !*((unsigned char *)this + 5845)
    || *((unsigned char *)this + 5862)
    || (*(unsigned char *)(*((void *)this + 726) + 64) & 8) == 0)
  {
    goto LABEL_413;
  }
  int v236 = (char *)this + 5845;
  int v255 = (llvm::Value **)v259;
  uint64_t v256 = (llvm::Value **)v259;
  uint64_t v257 = 4;
  int v258 = 0;
  unsigned int v253 = 128;
  uint64_t v252 = (llvm *)MEMORY[0x1CB79F270](0x2000, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)&v252);
  v254[0] = 0;
  unsigned char v254[24] = 0;
  for (uint64_t i = *(void *)(*((void *)this + 731) + 8); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v11 = *(void *)(*(void *)(i + 24) + 40);
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__p, (llvm::SmallPtrSetImplBase *)&v255, *(void **)(v11 + 56));
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12)
    {
      uint64_t v13 = *(void *)(v11 + 8);
      while (1)
      {
        uint64_t v14 = *(void *)(v13 + 24);
        unsigned int v15 = *(unsigned __int8 *)(v14 + 16);
        uint64_t v13 = *(void *)(v13 + 8);
        BOOL v16 = v14 && v15 >= 0x1C;
        if (v16 && v15 - 29 <= 0xA) {
          break;
        }
        if (!v13) {
          goto LABEL_77;
        }
      }
      if (v13)
      {
        unsigned int v18 = 1;
        do
        {
          uint64_t v19 = *(void *)(v13 + 24);
          unsigned int v20 = *(unsigned __int8 *)(v19 + 16);
          if (v19) {
            BOOL v21 = v20 >= 0x1C;
          }
          else {
            BOOL v21 = 0;
          }
          if (v21 && v20 - 29 < 0xB) {
            ++v18;
          }
          uint64_t v13 = *(void *)(v13 + 8);
        }
        while (v13);
        if (v18 >= 2)
        {
          uint64_t v23 = *(void *)(v12 + 24);
          if (!v23 || ((unsigned int v24 = *(unsigned __int8 *)(v23 + 16), v24 >= 0x1C) ? (v25 = v24 - 29 >= 0xB) : (v25 = 1), v25))
          {
            do
            {
              uint64_t v12 = *(void *)(v12 + 8);
              uint64_t v26 = *(void *)(v12 + 24);
              unsigned int v27 = *(unsigned __int8 *)(v26 + 16);
              if (v26) {
                BOOL v28 = v27 >= 0x1C;
              }
              else {
                BOOL v28 = 0;
              }
            }
            while (!v28 || v27 - 29 > 0xA);
          }
          uint64_t v30 = *(void *)(v12 + 8);
          if (v30)
          {
            while (1)
            {
              uint64_t v31 = *(void *)(v30 + 24);
              unsigned int v32 = *(unsigned __int8 *)(v31 + 16);
              BOOL v33 = v31 && v32 >= 0x1C;
              if (v33 && v32 - 29 <= 0xA) {
                break;
              }
              uint64_t v30 = *(void *)(v30 + 8);
              if (!v30) {
                goto LABEL_77;
              }
            }
            do
            {
              LOWORD(v264) = 257;
              uint64_t v35 = llvm::CloneBasicBlock();
              std::string __p = &v262;
              uint64_t v262 = v35;
              uint64_t v261 = (void *)0x100000001;
              llvm::remapInstructionsInBlocks();
              if (__p != &v262) {
                free(__p);
              }
              unint64_t v36 = (void *)(v30 + 8);
              uint64_t v37 = *(void *)(v30 + 8);
              if (v37)
              {
                uint64_t v38 = *(void *)(v30 + 8);
                do
                {
                  uint64_t v39 = *(void *)(v38 + 24);
                  unsigned int v40 = *(unsigned __int8 *)(v39 + 16);
                  if (v39) {
                    BOOL v41 = v40 >= 0x1C;
                  }
                  else {
                    BOOL v41 = 0;
                  }
                  if (v41 && v40 - 29 < 0xB) {
                    break;
                  }
                  uint64_t v38 = *(void *)(v38 + 8);
                }
                while (v38);
              }
              else
              {
                uint64_t v38 = 0;
              }
              if (*(void *)v30)
              {
                **(void **)(v30 + 16) = v37;
                uint64_t v43 = *(void *)(v30 + 8);
                if (v43) {
                  *(void *)(v43 + 16) = *(void *)(v30 + 16);
                }
              }
              *(void *)uint64_t v30 = v35;
              if (v35)
              {
                uint64_t v46 = *(void *)(v35 + 8);
                int v45 = (void *)(v35 + 8);
                uint64_t v44 = v46;
                *unint64_t v36 = v46;
                if (v46) {
                  *(void *)(v44 + 16) = v36;
                }
                *(void *)(v30 + 16) = v45;
                *int v45 = v30;
              }
              uint64_t v30 = v38;
            }
            while (v38);
          }
        }
      }
    }
LABEL_77:
    ;
  }
  unsigned int v250 = 128;
  v249[0] = (llvm *)MEMORY[0x1CB79F270](13312, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::initEmpty((uint64_t)v249);
  v251[0] = 0;
  v251[24] = 0;
  if (v256 == v255) {
    unsigned int v47 = (uint64_t *)((char *)&v257 + 4);
  }
  else {
    unsigned int v47 = &v257;
  }
  uint64_t v48 = *(unsigned int *)v47;
  if (v48)
  {
    uint64_t v49 = 8 * v48;
    int v50 = v256;
    while ((unint64_t)*v50 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v50;
      v49 -= 8;
      if (!v49) {
        goto LABEL_223;
      }
    }
  }
  else
  {
    int v50 = v256;
  }
  int v51 = (char *)&v256[v48];
  if (v50 == (llvm::Value **)v51) {
    goto LABEL_223;
  }
  uint64_t v52 = (char *)this + 8;
  uint64_t v53 = (uint64_t *)&v294;
  uint64_t v54 = *v50;
  uint64_t v232 = (char *)&v256[v48];
LABEL_89:
  long long v55 = (unsigned int *)llvm::ValueMap<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v249, v54);
  uint64_t Name = (void *)llvm::Value::getName(v54);
  if (Name)
  {
    std::string::basic_string[abi:nn180100](&__p, Name, v57);
    p_p = &__p;
    if (v262 < 0) {
      LOBYTE(p_p) = (_BYTE)__p;
    }
  }
  else
  {
    uint64_t v261 = 0;
    std::string __p = 0;
    p_p = &__p;
    uint64_t v262 = 0;
  }
  printMessage((char **)&AGCPrinter, "Basic blocks of %s in post-order:\n", v58, v59, v60, v61, v62, v63, (char)p_p);
  if (SHIBYTE(v262) < 0) {
    operator delete(__p);
  }
  uint64_t v65 = *((void *)v54 + 10);
  if (v65) {
    long long v66 = (void *)(v65 - 24);
  }
  else {
    long long v66 = 0;
  }
  std::string __dst = v293;
  v290 = v293;
  uint64_t v291 = 8;
  int v292 = 0;
  int v294 = v296;
  uint64_t v295 = 0x800000000;
  llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v306, (llvm::SmallPtrSetImplBase *)&__dst, v66);
  unsigned int v67 = (void *)v66[5];
  if (v67 == v66 + 5)
  {
    uint64_t v70 = 0;
  }
  else
  {
    int v68 = v67 - 3;
    if (v67) {
      uint64_t v69 = v67 - 3;
    }
    else {
      uint64_t v69 = 0;
    }
    if (*((unsigned __int8 *)v69 + 16) - 29 >= 0xB) {
      uint64_t v70 = 0;
    }
    else {
      uint64_t v70 = v68;
    }
  }
  uint64_t v306 = v66;
  char v307 = v70;
  uint64_t v308 = 0;
  unint64_t v71 = llvm::SmallVectorTemplateCommon<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,true>>((uint64_t)v53, (unint64_t)&v306);
  uint64_t v72 = (char *)v294 + 24 * v295;
  long long v73 = *(_OWORD *)v71;
  *((void *)v72 + 2) = *(void *)(v71 + 16);
  *(_OWORD *)uint64_t v72 = v73;
  LODWORD(v295) = v295 + 1;
  llvm::po_iterator<llvm::BasicBlock *,llvm::SmallPtrSet<llvm::BasicBlock *,8u>,false,llvm::GraphTraits<llvm::BasicBlock *>>::traverseChild((uint64_t)&__dst);
  memset(&v288[1], 0, 200);
  long long v286 = 0u;
  uint64_t v287 = 0;
  long long v284 = 0u;
  long long v285 = 0u;
  long long v283 = 0u;
  unsigned int v280 = (llvm *)((char *)&v283 + 8);
  unint64_t v281 = (char *)&v283 + 8;
  uint64_t v282 = 8;
  v288[0] = &v288[2];
  HIDWORD(v288[1]) = 8;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
  v311 = v313;
  uint64_t v312 = 0x800000000;
  if (v295) {
    llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=((uint64_t)&v311, v53);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
  uint64_t v303 = v305;
  uint64_t v304 = 0x800000000;
  if (LODWORD(v288[1])) {
    llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=((uint64_t)&v303, (uint64_t *)v288);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
  BOOL v272 = v274;
  uint64_t v273 = 0x800000000;
  if (v312) {
    llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=((uint64_t)&v272, (uint64_t *)&v311);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
  int v277 = v279;
  uint64_t v278 = 0x800000000;
  if (v304) {
    llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=((uint64_t)&v277, (uint64_t *)&v303);
  }
  if (v303 != v305) {
    free(v303);
  }
  if (v298 != v297) {
    free(v298);
  }
  if (v311 != v313) {
    free(v311);
  }
  if (v307 != v306) {
    free(v307);
  }
  if (v288[0] != &v288[2]) {
    free(v288[0]);
  }
  if (v281 != v280) {
    free(v281);
  }
  if (v294 != v296) {
    free(v294);
  }
  if (v290 != __dst) {
    free(v290);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v306, &v310, (const llvm::SmallPtrSetImplBase *)&__p);
  v311 = v313;
  uint64_t v312 = 0x800000000;
  if (v273) {
    llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=((uint64_t *)&v311, (uint64_t *)&v272);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v297, &v301, (const llvm::SmallPtrSetImplBase *)&v275);
  uint64_t v303 = v305;
  uint64_t v304 = 0x800000000;
  if (v278) {
    llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=((uint64_t *)&v303, (uint64_t *)&v277);
  }
  while (1)
  {
    if (v312 != v304) {
      goto LABEL_145;
    }
    if (!v312) {
      break;
    }
    uint64_t v74 = v303;
    unsigned int v75 = v311;
    while (1)
    {
      BOOL v76 = *(void *)v75 == *(void *)v74 && v75[4] == v74[4];
      if (!v76) {
        break;
      }
      v75 += 6;
      v74 += 6;
      if (v75 == (_DWORD *)((char *)v311 + 24 * v312)) {
        goto LABEL_184;
      }
    }
LABEL_145:
    char v77 = (void *)*((void *)v311 + 3 * v312 - 3);
    int v78 = (void *)llvm::Value::getName((llvm::Value *)v77);
    if (v78)
    {
      std::string::basic_string[abi:nn180100](&__dst, v78, v79);
      p_dst = &__dst;
      if (v291 < 0) {
        LOBYTE(p_dst) = (_BYTE)__dst;
      }
    }
    else
    {
      v290 = 0;
      std::string __dst = 0;
      p_dst = &__dst;
      uint64_t v291 = 0;
    }
    printMessage((char **)&AGCPrinter, " %s\n", v80, v81, v82, v83, v84, v85, (char)p_dst);
    if (SHIBYTE(v291) < 0) {
      operator delete(__dst);
    }
    uint64_t v88 = v77 + 5;
    BOOL v87 = (void *)v77[5];
    if (v87 == v77 + 5)
    {
      BOOL v100 = 1;
    }
    else
    {
      unsigned __int32 v89 = v53;
      unsigned __int32 v90 = (llvm::Instruction *)(v87 - 3);
      if (v87) {
        uint64_t v91 = v87 - 3;
      }
      else {
        uint64_t v91 = 0;
      }
      if (*((unsigned __int8 *)v91 + 16) - 29 <= 0xA
        && (int NumSuccessors = llvm::Instruction::getNumSuccessors(v90)) != 0)
      {
        int v93 = 0;
        int v94 = NumSuccessors - 1;
        do
        {
          Successor = (const void *)llvm::Instruction::getSuccessor(v90);
          char v96 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)v55, Successor);
          uint64_t v97 = *((void *)v55 + 1);
          if (v97 == *(void *)v55) {
            uint64_t v98 = v55 + 5;
          }
          else {
            uint64_t v98 = v55 + 4;
          }
          int v99 = (const void **)(v97 + 8 * *v98);
          BOOL v76 = v99 == v96;
          BOOL v100 = v99 != v96;
        }
        while (!v76 && v94 != v93++);
        uint64_t v52 = (char *)this + 8;
        int v51 = v232;
      }
      else
      {
        BOOL v100 = 1;
      }
      uint64_t v53 = v89;
    }
    if (*v88) {
      uint64_t v102 = *v88 - 24;
    }
    else {
      uint64_t v102 = 0;
    }
    if (*(unsigned __int8 *)(v102 + 16) - 29 >= 0xB) {
      uint64_t v103 = 0;
    }
    else {
      uint64_t v103 = *v88 - 24;
    }
    int v104 = *(unsigned __int8 *)(v103 + 16);
    if (v100 && v104 != 29) {
      llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__dst, (llvm::SmallPtrSetImplBase *)v55, v77);
    }
    LODWORD(v312) = v312 - 1;
    if (v312) {
      llvm::po_iterator<llvm::BasicBlock *,llvm::SmallPtrSet<llvm::BasicBlock *,8u>,false,llvm::GraphTraits<llvm::BasicBlock *>>::traverseChild((uint64_t)&v306);
    }
  }
LABEL_184:
  if (v303 != v305) {
    free(v303);
  }
  if (v298 != v297) {
    free(v298);
  }
  if (v311 != v313) {
    free(v311);
  }
  if (v307 != v306) {
    free(v307);
  }
  if (v277 != v279) {
    free(v277);
  }
  if (v276 != v275) {
    free(v276);
  }
  if (v272 != v274) {
    free(v272);
  }
  if (v261 != __p) {
    free(v261);
  }
  uint64_t v106 = (void *)*((void *)v54 + 10);
  if (v106 == (void *)((char *)v54 + 72))
  {
    uint64_t v107 = 0;
  }
  else
  {
    uint64_t v107 = 0;
    do
    {
      ++v107;
      uint64_t v106 = (void *)v106[1];
    }
    while (v106 != (void *)((char *)v54 + 72));
  }
  uint64_t v108 = llvm::ValueMap<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v249, v54);
  if (v107 == *(_DWORD *)(v108 + 20) - *(_DWORD *)(v108 + 24))
  {
    for (uint64_t j = *((void *)v54 + 1); j; uint64_t j = *(void *)(j + 8))
    {
      uint64_t v110 = *(void *)(j + 24);
      __int16 v111 = *(_WORD *)(v110 + 18);
      if ((v111 & 3u) - 1 <= 1) {
        *(_WORD *)(v110 + 18) = v111 & 0xFFFC;
      }
      uint64_t v112 = *(void *)(v110 + 40);
      uint64_t v113 = *(void *)(v112 + 40);
      if (v113 != v112 + 40)
      {
        uint64_t v114 = v113 - 24;
        uint64_t v115 = v113 ? v113 - 24 : 0;
        unsigned int v116 = *(unsigned __int8 *)(v115 + 16) - 40;
        char v117 = v116 >= 0xFFFFFFF5 ? (llvm::Instruction *)v114 : 0;
        if (v116 >= 0xFFFFFFF5 && *((unsigned char *)v117 + 16) == 35)
        {
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40), v117);
          int v118 = &v52[*(void *)(*(void *)this - 24)];
          uint64_t v119 = *((void *)this + 731);
          LOWORD(v264) = 257;
          uint64_t v120 = llvm::IRBuilderBase::CreateCall((uint64_t)(v118 + 32), **(void **)(*(void *)v119 + 16), v119, 0, 0, (uint64_t)&__p);
          *((_WORD *)v120 + 9) = *((_WORD *)v120 + 9) & 0xFFFC | 1;
        }
      }
    }
  }
  while (++v50 != (llvm::Value **)v51)
  {
    uint64_t v54 = *v50;
    if ((unint64_t)*v50 < 0xFFFFFFFFFFFFFFFELL)
    {
      if (v50 != (llvm::Value **)v51) {
        goto LABEL_89;
      }
      break;
    }
  }
LABEL_223:
  unsigned int v299 = 128;
  uint64_t v297 = (llvm *)MEMORY[0x1CB79F270](13312, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::initEmpty((uint64_t)&v297);
  v300[0] = 0;
  char v302 = 0;
  LODWORD(v291) = 128;
  std::string __dst = (void *)MEMORY[0x1CB79F270](13312, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::initEmpty((uint64_t)&__dst);
  LOBYTE(v292) = 0;
  v293[16] = 0;
  for (uint64_t k = *(void *)(*((void *)this + 731) + 8); k; uint64_t k = *(void *)(k + 8))
  {
    uint64_t v122 = *(llvm::Value ***)(*(void *)(k + 24) + 40);
    uint64_t v123 = (unsigned int *)llvm::ValueMap<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v249, v122[7]);
    unsigned __int8 v124 = (llvm::SmallPtrSetImplBase *)llvm::ValueMap<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v297, (llvm::Value *)v122);
    AGCLLVMAGPFragmentShaderGen4::collectDiscardBasicBlocksSurvivorSet(v122, v123, v124, (uint64_t)&__dst);
  }
  LODWORD(v282) = 128;
  unsigned int v280 = (llvm *)MEMORY[0x1CB79F270](0x2000, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)&v280);
  LOBYTE(v283) = 0;
  BYTE8(v284) = 0;
  unsigned int v247 = 128;
  v246[0] = (llvm *)MEMORY[0x1CB79F270](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::initEmpty((uint64_t)v246);
  v248[0] = 0;
  v248[24] = 0;
  unsigned int v244 = 128;
  v243[0] = (llvm *)MEMORY[0x1CB79F270](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::initEmpty((uint64_t)v243);
  v245[0] = 0;
  v245[24] = 0;
  llvm::CloneModule();
  if (v256 == v255) {
    unint64_t v125 = (uint64_t *)((char *)&v257 + 4);
  }
  else {
    unint64_t v125 = &v257;
  }
  uint64_t v126 = *(unsigned int *)v125;
  if (v126)
  {
    uint64_t v127 = 8 * v126;
    uint64_t v128 = v256;
    while ((unint64_t)*v128 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v128;
      v127 -= 8;
      if (!v127) {
        goto LABEL_359;
      }
    }
  }
  else
  {
    uint64_t v128 = v256;
  }
  if (v128 != &v256[v126])
  {
    uint64_t v129 = *v128;
    uint64_t v130 = (uint64_t)*v128 + 72;
    for (uint64_t m = *((void *)*v128 + 10); m != v130; uint64_t m = *(void *)(m + 8))
    {
      if (m) {
        long long v132 = (llvm::Value *)(m - 24);
      }
      else {
        long long v132 = 0;
      }
      long long v133 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v280, v132);
      *llvm::ValueMap<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v246, (llvm::Value *)v133[2]) = v132;
    }
    uint64_t v134 = (void *)llvm::ValueMap<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v249, v129);
    if (v290)
    {
      if (v291)
      {
        uint64_t v135 = 104 * v291;
        uint64_t v136 = (char *)__dst;
        while ((*((void *)v136 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v136 += 104;
          v135 -= 104;
          if (!v135) {
            goto LABEL_328;
          }
        }
      }
      else
      {
        uint64_t v136 = (char *)__dst;
      }
      uint64_t v137 = (char *)__dst + 104 * v291;
      if (v136 != v137)
      {
        uint64_t v138 = (llvm::Value **)*((void *)v136 + 3);
        do
        {
          if (v138[7] != v129) {
            goto LABEL_251;
          }
          uint64_t v139 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v280, (llvm::Value *)v138);
          uint64_t v140 = *((void *)v136 + 6);
          uint64_t v141 = 56;
          if (v140 == *((void *)v136 + 5)) {
            uint64_t v141 = 60;
          }
          uint64_t v142 = *(unsigned int *)&v136[v141];
          if (v142)
          {
            uint64_t v143 = 8 * v142;
            uint64_t v144 = (llvm::Value **)*((void *)v136 + 6);
            while ((unint64_t)*v144 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v144;
              v143 -= 8;
              if (!v143) {
                goto LABEL_251;
              }
            }
          }
          else
          {
            uint64_t v144 = (llvm::Value **)*((void *)v136 + 6);
          }
          uint64_t v145 = (llvm::Value **)(v140 + 8 * v142);
          if (v144 == v145) {
            goto LABEL_251;
          }
          uint64_t v233 = (void *)(v139[2] + 40);
          int v234 = v145;
          uint64_t v146 = *v144;
          do
          {
            uint64_t v147 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v280, v146);
            uint64_t v148 = (void *)*v233;
            if ((void *)*v233 != v233)
            {
              int v149 = v148 - 3;
              if (v148) {
                uint64_t v150 = v148 - 3;
              }
              else {
                uint64_t v150 = 0;
              }
              unsigned int v151 = *((unsigned __int8 *)v150 + 16) - 40;
              if (v151 >= 0xFFFFFFF5) {
                uint64_t v152 = (uint64_t)v149;
              }
              else {
                uint64_t v152 = 0;
              }
              int v153 = *(unsigned __int8 *)(v152 + 16);
              if (v153 == 30 && v151 >= 0xFFFFFFF5)
              {
                __int16 v239 = (llvm::SmallPtrSetImplBase *)v134;
                unsigned int v167 = 0;
                uint64_t v168 = v152 - 32;
                do
                {
                  unsigned int v169 = v167;
                  uint64_t v170 = *(void *)(v168 - 32 * v167++);
                }
                while (v170 == v147[2]);
                BOOL v241 = (void **)(-32 * v169);
                unint64_t v171 = (llvm::Instruction *)v152;
                llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Instruction *)v152);
                llvm::IRBuilderBase::CreateBr((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40), *(llvm::BasicBlock **)((char *)v241 + v168));
                llvm::Instruction::eraseFromParent(v171);
                uint64_t v134 = v239;
              }
              else
              {
                uint64_t v235 = (llvm::Value *)v147[2];
                if (v151 >= 0xFFFFFFF5 && v153 == 31)
                {
                  unsigned int v156 = *(_DWORD *)(v152 + 20);
                  uint64_t v240 = v152;
                  if (((v156 >> 1) & 0x3FFFFFF) == 1)
                  {
                    uint64_t v158 = 0;
                  }
                  else
                  {
                    BOOL v238 = (llvm::SmallPtrSetImplBase *)v134;
                    uint64_t v157 = 0;
                    uint64_t v158 = 0;
                    uint64_t v237 = 2 * (((v156 >> 1) & 0x3FFFFFF) - 1);
                    do
                    {
                      int v159 = *(_DWORD *)(v152 + 20);
                      if ((v159 & 0x40000000) != 0) {
                        uint64_t v160 = *(void *)(v152 - 8);
                      }
                      else {
                        uint64_t v160 = v152 - 32 * (v159 & 0x7FFFFFF);
                      }
                      uint64_t v161 = (v157 + 3);
                      if (v157 == 0x1FFFFFFFCLL) {
                        uint64_t v161 = 1;
                      }
                      char v162 = *(llvm::Value **)(v160 + 32 * v161);
                      int v163 = (const void **)llvm::ValueMap<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v246, v162);
                      unsigned int v164 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find(v238, *v163);
                      uint64_t v165 = *((void *)v238 + 1);
                      if (v165 == *(void *)v238) {
                        __int16 v166 = (unsigned int *)((char *)v238 + 20);
                      }
                      else {
                        __int16 v166 = (unsigned int *)((char *)v238 + 16);
                      }
                      uint64_t v152 = v240;
                      if ((const void **)(v165 + 8 * *v166) == v164) {
                        uint64_t v158 = (uint64_t)v162;
                      }
                      v157 += 2;
                    }
                    while (v237 != v157);
                    unsigned int v156 = *(_DWORD *)(v240 + 20);
                    uint64_t v134 = v238;
                  }
                  if ((v156 & 0x40000000) != 0) {
                    uint64_t v172 = *(void *)(v152 - 8);
                  }
                  else {
                    uint64_t v172 = v152 - 32 * (v156 & 0x7FFFFFF);
                  }
                  if (v235 == *(llvm::Value **)(v172 + 32) && v158 != 0)
                  {
                    unint64_t v174 = (const void **)llvm::ValueMap<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v246, v235);
                    unint64_t v175 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)v134, *v174);
                    uint64_t v152 = v240;
                    uint64_t v176 = v134[1];
                    uint64_t v177 = v176 == *v134 ? (unsigned int *)((char *)v134 + 20) : (unsigned int *)(v134 + 2);
                    if ((const void **)(v176 + 8 * *v177) != v175)
                    {
                      llvm::SwitchInst::setDefaultDest(v240, v158);
                      uint64_t v152 = v240;
                    }
                  }
                  unsigned int v178 = *(_DWORD *)(v152 + 20);
                  if ((v178 & 0x7FFFFFE) != 2)
                  {
                    uint64_t v179 = 0;
                    uint64_t v180 = v152;
                    do
                    {
                      int v181 = *(_DWORD *)(v180 + 20);
                      if ((v181 & 0x40000000) != 0) {
                        uint64_t v182 = *(void *)(v180 - 8);
                      }
                      else {
                        uint64_t v182 = v180 - 32 * (v181 & 0x7FFFFFF);
                      }
                      uint64_t v183 = (2 * v179 + 3);
                      if (v179 == -2) {
                        uint64_t v183 = 1;
                      }
                      if (*(llvm::Value **)(v182 + 32 * v183) == v235)
                      {
                        uint64_t v180 = llvm::SwitchInst::removeCase();
                        uint64_t v179 = v184;
                        unsigned int v178 = *(_DWORD *)(v240 + 20);
                      }
                      else
                      {
                        ++v179;
                      }
                    }
                    while (v179 != ((v178 >> 1) & 0x3FFFFFF) - 1);
                  }
                }
              }
            }
            for (++v144; ; ++v144)
            {
              if (v144 == v234) {
                goto LABEL_251;
              }
              uint64_t v146 = *v144;
              if ((unint64_t)*v144 < 0xFFFFFFFFFFFFFFFELL) {
                break;
              }
            }
          }
          while (v144 != v234);
          do
          {
LABEL_251:
            v136 += 104;
            if (v136 == v137) {
              goto LABEL_328;
            }
            uint64_t v138 = (llvm::Value **)*((void *)v136 + 3);
          }
          while (((unint64_t)v138 | 0x1000) == 0xFFFFFFFFFFFFF000);
        }
        while (v136 != v137);
      }
    }
LABEL_328:
    uint64_t v185 = v134[1];
    if (v185 == *v134) {
      uint64_t v186 = (unsigned int *)v134 + 5;
    }
    else {
      uint64_t v186 = (unsigned int *)(v134 + 2);
    }
    uint64_t v187 = *v186;
    if (v187)
    {
      uint64_t v188 = 8 * v187;
      uint64_t v189 = (llvm::Value **)v134[1];
      while ((unint64_t)*v189 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v189;
        v188 -= 8;
        if (!v188) {
          goto LABEL_358;
        }
      }
    }
    else
    {
      uint64_t v189 = (llvm::Value **)v134[1];
    }
    uint64_t v190 = (llvm::Value **)(v185 + 8 * v187);
    if (v189 == v190)
    {
LABEL_358:
      uint64_t v200 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v280, v129)[2];
      std::string __p = &v262;
      uint64_t v261 = (void *)0x400000000;
      uint64_t v265 = 0;
      uint64_t v266 = 0;
      int v267 = 0;
      int v271 = 0;
      char v270 = 0;
      uint64_t v268 = 0;
      uint64_t v269 = v200;
      llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,true>>();
    }
    uint64_t v191 = *v189;
    while (2)
    {
      uint64_t v192 = (llvm::BasicBlock *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v280, v191)[2];
      if (v247)
      {
        unsigned int v193 = ((v192 >> 4) ^ (v192 >> 9)) & (v247 - 1);
        uint64_t v194 = (char *)v246[0] + 48 * v193;
        uint64_t v195 = (llvm::BasicBlock *)*((void *)v194 + 3);
        if (v192 == v195)
        {
LABEL_341:
          uint64_t v196 = (char *)v246[0] + 48 * v247;
LABEL_347:
          if (v196 != v194) {
            llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::erase((int32x2_t *)v246, (uint64_t)v194);
          }
          std::string __p = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t)v280, v282, (uint64_t)v191, &__p))uint64_t v199 = __p; {
          else
          }
            uint64_t v199 = (void *)((char *)v280 + 64 * (unint64_t)v282);
          if ((void *)((char *)v280 + 64 * (unint64_t)v282) != v199) {
            llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase((int32x2_t *)&v280, v199);
          }
          llvm::BasicBlock::eraseFromParent(v192);
          do
          {
            if (++v189 == v190) {
              goto LABEL_358;
            }
            uint64_t v191 = *v189;
          }
          while ((unint64_t)*v189 >= 0xFFFFFFFFFFFFFFFELL);
          if (v189 == v190) {
            goto LABEL_358;
          }
          continue;
        }
        int v197 = 1;
        while (v195 != (llvm::BasicBlock *)-4096)
        {
          unsigned int v198 = v193 + v197++;
          unsigned int v193 = v198 & (v247 - 1);
          uint64_t v194 = (char *)v246[0] + 48 * v193;
          uint64_t v195 = (llvm::BasicBlock *)*((void *)v194 + 3);
          if (v192 == v195) {
            goto LABEL_341;
          }
        }
      }
      break;
    }
    uint64_t v196 = (char *)v246[0] + 48 * v247;
    uint64_t v194 = v196;
    goto LABEL_347;
  }
LABEL_359:
  AGCLLVMObject::printIR((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24)), "after editClonedCFG", v242);
  uint64_t v201 = *(void *)(*((void *)this + 731) + 8);
  while (v201)
  {
    uint64_t v202 = *(llvm::Value **)(*(void *)(v201 + 24) + 40);
    uint64_t v203 = (void *)*((void *)v202 + 5);
    if (v203 == (void *)((char *)v202 + 40))
    {
      uint64_t v206 = 0;
    }
    else
    {
      uint64_t v204 = (llvm::Instruction *)(v203 - 3);
      if (v203) {
        uint64_t v205 = v203 - 3;
      }
      else {
        uint64_t v205 = 0;
      }
      if (*((unsigned __int8 *)v205 + 16) - 29 >= 0xB) {
        uint64_t v206 = 0;
      }
      else {
        uint64_t v206 = v204;
      }
    }
    uint64_t v201 = *(void *)(v201 + 8);
    unint64_t v207 = (llvm::BasicBlock *)*llvm::ValueMap<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v243, v202);
    if (v207)
    {
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40), v206);
      llvm::IRBuilderBase::CreateBr((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40), v207);
      llvm::Instruction::eraseFromParent(v206);
      uint64_t v208 = llvm::BasicBlock::phis(v207);
      if (v208 != v209)
      {
        uint64_t v210 = v208;
        uint64_t v211 = v209;
        do
        {
          uint64_t v212 = (llvm::Value *)llvm::UndefValue::get();
          llvm::PHINode::addIncoming((_DWORD *)v210, v212, v202);
          uint64_t v213 = *(void *)(v210 + 32);
          uint64_t v214 = v213 - 24;
          if (v213) {
            uint64_t v215 = v213 - 24;
          }
          else {
            uint64_t v215 = 0;
          }
          if (*(unsigned char *)(v215 + 16) == 83) {
            uint64_t v210 = v214;
          }
          else {
            uint64_t v210 = 0;
          }
        }
        while (v210 != v211);
      }
    }
    else
    {
      if (*(unsigned char *)(**(void **)(*(void *)(*((void *)v202 + 7) + 24) + 16) + 8) == 7) {
        uint64_t v216 = 0;
      }
      else {
        uint64_t v216 = llvm::UndefValue::get();
      }
      uint64_t v217 = **(void **)((char *)this + *(void *)(*(void *)this - 24) + 368);
      uint64_t v218 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40);
      MEMORY[0x1CB79EB60](v218, v217, v216, 0);
      llvm::ReplaceInstWithInst(v206, v218, v219);
    }
  }
  AGCLLVMObject::printIR((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24)), "after editOriginalCFG", 0);
  v236[17] = 1;
  if (v242)
  {
    uint64_t v220 = MEMORY[0x1CB79FA40]();
    MEMORY[0x1CB7A0780](v220, 0x10B2C407FF26C1CLL);
  }
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v245);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::destroyAll((uint64_t)v243[0], v244);
  llvm::deallocate_buffer(v243[0], (void *)(48 * v244));
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v248);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::destroyAll((uint64_t)v246[0], v247);
  llvm::deallocate_buffer(v246[0], (void *)(48 * v247));
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)&v283);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll((uint64_t)v280, v282);
  llvm::deallocate_buffer(v280, (void *)((unint64_t)v282 << 6));
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)&v292);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::destroyAll((uint64_t)__dst, v291);
  llvm::deallocate_buffer((llvm *)__dst, (void *)(104 * v291));
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v300);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::destroyAll((uint64_t)v297, v299);
  llvm::deallocate_buffer(v297, (void *)(104 * v299));
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v251);
  int v221 = v249[0];
  if (v250)
  {
    uint64_t v261 = (void *)2;
    uint64_t v262 = 0;
    uint64_t v263 = -4096;
    std::string __p = &unk_1F2576208;
    uint64_t v264 = 0;
    char v307 = (void *)2;
    uint64_t v308 = 0;
    uint64_t v309 = -8192;
    uint64_t v306 = &unk_1F2576208;
    unint64_t v310 = 0;
    uint64_t v222 = (uint64_t *)((char *)v249[0] + 24);
    uint64_t v223 = 104 * v250;
    do
    {
      uint64_t v224 = *v222;
      if (*v222 != v263 && v224 != v309)
      {
        int v226 = (void *)v222[3];
        if (v226 != (void *)v222[2])
        {
          free(v226);
          uint64_t v224 = *v222;
        }
      }
      if (v224 != -8192 && v224 != -4096 && v224 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v222 - 2));
      }
      v222 += 13;
      v223 -= 104;
    }
    while (v223);
    if (v309 != -8192 && v309 != -4096 && v309) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v307);
    }
    if (v263 != -8192 && v263 != -4096 && v263) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v261);
    }
    int v221 = v249[0];
    uint64_t v228 = 104 * v250;
  }
  else
  {
    uint64_t v228 = 0;
  }
  llvm::deallocate_buffer(v221, (void *)v228);
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v254);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll((uint64_t)v252, v253);
  llvm::deallocate_buffer(v252, (void *)((unint64_t)v253 << 6));
  if (v256 != v255) {
    free(v256);
  }
LABEL_413:
  uint64_t v229 = (char *)this + *(void *)(*(void *)this - 24);
  int v230 = (llvm::Module *)*((void *)v229 + 46);
  int v231 = *(unsigned __int8 *)(*((void *)v229 + 58) + 378);
  SimplifyGenericIR(v230, v231, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t AGCLLVMAGPFragmentShaderGen3::verifyLoweredIR(AGCLLVMAGPFragmentShaderGen3 *this)
{
  if (!*((unsigned char *)this + 7260)) {
    return AGCLLVMUserObject::verifyLoweredIR(this);
  }
  memset(&v6, 0, sizeof(v6));
  if (*((unsigned char *)this + 5832))
  {
    uint64_t v2 = "[[front_facing]]";
  }
  else if (*((unsigned char *)this + 5833))
  {
    uint64_t v2 = "[[point_coord]]";
  }
  else if (*((unsigned char *)this + 5835))
  {
    uint64_t v2 = "[[depth]]";
  }
  else if (*((unsigned char *)this + 5857))
  {
    uint64_t v2 = "[[stencil]]";
  }
  else if (*((unsigned char *)this + 5830) || *((unsigned char *)this + 5844))
  {
    uint64_t v2 = "[[sample_mask]]";
  }
  else if (*((unsigned char *)this + 5858))
  {
    uint64_t v2 = "[[viewport_array_index]]";
  }
  else if (*((unsigned char *)this + 5860))
  {
    uint64_t v2 = "[[amplification_id]]";
  }
  else if (*((unsigned char *)this + 5861))
  {
    uint64_t v2 = "[[amplification_count]]";
  }
  else if (*((unsigned char *)this + 5828))
  {
    uint64_t v2 = "interpolation of attributes";
  }
  else if (*((unsigned char *)this + 5845))
  {
    uint64_t v2 = "discard_fragment()";
  }
  else
  {
    if (!*((unsigned char *)this + *(void *)(*(void *)this - 24) + 456)) {
      return AGCLLVMUserObject::verifyLoweredIR(this);
    }
    uint64_t v2 = "threadgroup_barrier()";
  }
  MEMORY[0x1CB7A04E0](&v6, v2);
  if ((*((unsigned char *)&v6.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v6.__r_.__value_.__l.__size_) {
      goto LABEL_17;
    }
    operator delete(v6.__r_.__value_.__l.__data_);
    return AGCLLVMUserObject::verifyLoweredIR(this);
  }
  if (!*((unsigned char *)&v6.__r_.__value_.__s + 23)) {
    return AGCLLVMUserObject::verifyLoweredIR(this);
  }
LABEL_17:
  std::string::append(&v6, " unsupported in fragment functions bound to tile pipelines");
  if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v6;
  }
  else {
    uint64_t v3 = (std::string *)v6.__r_.__value_.__r.__words[0];
  }
  if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v6.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v6.__r_.__value_.__l.__size_;
  }
  std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (const std::string::value_type *)v3, size);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return 0;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::replaceBuiltins(AGCLLVMAGPFragmentShaderGen3 *this)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t result = AGCLLVMUserObject::replaceBuiltins(this);
  if (!result) {
    return result;
  }
  unsigned int v73 = result;
  uint64_t v3 = *(llvm::LLVMContext ***)((char *)this + *(void *)(*(void *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v93, *v3);
  int v99 = this;
  int v93 = &unk_1F2576230;
  v98[25] = v3;
  {
    AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[0] = (uint64_t)"air.get_local_size.i32";
    dword_1EBD0E7E0 = 1;
    qword_1EBD0E7E8 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildPixelsPerTile;
    unk_1EBD0E7F0 = 0;
    dword_1EBD0E7F8 = 4;
    word_1EBD0E7FC = 0;
    qword_1EBD0E800 = (uint64_t)"air.get_local_size.i16";
    dword_1EBD0E808 = 1;
    qword_1EBD0E810 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildPixelsPerTile;
    unk_1EBD0E818 = 0;
    dword_1EBD0E820 = 4;
    word_1EBD0E824 = 0;
    qword_1EBD0E828 = (uint64_t)"air.get_local_id.i32";
    dword_1EBD0E830 = 1;
    qword_1EBD0E838 = (uint64_t)AGCLLVMAGPFragmentShader::buildPixelPositionInTile;
    unk_1EBD0E840 = 0;
    dword_1EBD0E848 = 4;
    word_1EBD0E84C = 0;
    qword_1EBD0E850 = (uint64_t)"air.get_local_id.i16";
    dword_1EBD0E858 = 1;
    qword_1EBD0E860 = (uint64_t)AGCLLVMAGPFragmentShader::buildPixelPositionInTile;
    unk_1EBD0E868 = 0;
    dword_1EBD0E870 = 4;
    word_1EBD0E874 = 0;
    qword_1EBD0E878 = (uint64_t)"air.get_local_linear_id.i32";
    dword_1EBD0E880 = 1;
    qword_1EBD0E888 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildTileIndex;
    unk_1EBD0E890 = 0;
    dword_1EBD0E898 = 2;
    word_1EBD0E89C = 0;
    qword_1EBD0E8A0 = (uint64_t)"air.get_local_linear_id.i16";
    dword_1EBD0E8A8 = 1;
    qword_1EBD0E8B0 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildTileIndex;
    unk_1EBD0E8B8 = 0;
    dword_1EBD0E8C0 = 2;
    word_1EBD0E8C4 = 0;
    qword_1EBD0E8C8 = (uint64_t)"air.get_thread_index_in_simdgroup.i32";
    dword_1EBD0E8D0 = 1;
    qword_1EBD0E8D8 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildThreadIndexInSimdGroup;
    unk_1EBD0E8E0 = 0;
    dword_1EBD0E8E8 = 2;
    word_1EBD0E8EC = 0;
    qword_1EBD0E8F0 = (uint64_t)"air.get_thread_index_in_simdgroup.i16";
    dword_1EBD0E8F8 = 1;
    qword_1EBD0E900 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildThreadIndexInSimdGroup;
    unk_1EBD0E908 = 0;
    dword_1EBD0E910 = 2;
    word_1EBD0E914 = 0;
    qword_1EBD0E918 = (uint64_t)"air.get_simdgroup_index_in_threadgroup.i32";
    dword_1EBD0E920 = 1;
    qword_1EBD0E928 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildSimdGroupIndexInThreadgroup;
    unk_1EBD0E930 = 0;
    dword_1EBD0E938 = 2;
    word_1EBD0E93C = 0;
    qword_1EBD0E940 = (uint64_t)"air.get_simdgroup_index_in_threadgroup.i16";
    dword_1EBD0E948 = 1;
    qword_1EBD0E950 = (uint64_t)AGCLLVMAGPFragmentShaderGen3::buildSimdGroupIndexInThreadgroup;
    unk_1EBD0E958 = 0;
    dword_1EBD0E960 = 2;
    word_1EBD0E964 = 0;
  }
  uint64_t v4 = 0;
  BOOL v5 = &v89;
  do
  {
    if (AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v4]) {
      strlen((const char *)AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v4]);
    }
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v7 = (llvm::Function *)Function;
      uint64_t v8 = &AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v4];
      uint64_t v82 = v8 + 4;
      if (*((_DWORD *)v8 + 8) == 12)
      {
        uint64_t v12 = *(void *)(Function + 8);
        if (v12)
        {
          uint64_t v13 = &AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v4];
          uint64_t v14 = (void (**)(void *, uint64_t))(v13 + 2);
          unsigned int v15 = v13 + 3;
          do
          {
            uint64_t v16 = *(void *)(v12 + 24);
            uint64_t v12 = *(void *)(v12 + 8);
            unsigned int v17 = *v14;
            unsigned int v18 = (void *)((char *)v99 + (*v15 >> 1));
            if (*v15) {
              unsigned int v17 = *(void (**)(void *, uint64_t))(*v18 + v17);
            }
            v17(v18, v16);
          }
          while (v12);
        }
        goto LABEL_120;
      }
      if (*((_DWORD *)v8 + 8) == 11)
      {
        unint64_t v9 = &AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v4];
        uint64_t v10 = (unsigned char *)v9[2];
        if (v10)
        {
          size_t v11 = strlen((const char *)v9[2]);
          *(void *)&v100[0] = (char *)&v100[1] + 8;
          *(_OWORD *)((char *)v100 + 8) = xmmword_1CADD6290;
          llvm::SmallVectorImpl<char>::append<char const*,void>(v100, v10, &v10[v11]);
        }
        else
        {
          *(void *)&v100[1] = 64;
          v100[0] = (unint64_t)&v100[1] + 8;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(v100, ".", "");
        if (*(void *)&v100[1] < *((void *)&v100[0] + 1)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        if (*(_OWORD **)&v100[0] != (_OWORD *)((char *)&v100[1] + 8)) {
          free(*(void **)&v100[0]);
        }
        goto LABEL_120;
      }
      uint64_t v19 = **(void **)(*(void *)(Function + 24) + 16);
      BOOL v20 = (*(_DWORD *)(v19 + 8) & 0xFE) != 0x12
         || BYTE5(AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v4 + 4]) == 0;
      int v21 = !v20;
      uint64_t v76 = v4;
      if (v20) {
        uint64_t v22 = 1;
      }
      else {
        uint64_t v22 = *(unsigned int *)(v19 + 32);
      }
      uint64_t v83 = v22;
      int v74 = v96;
      unsigned int v75 = (llvm::Function *)Function;
      uint64_t v23 = *(void *)(Function + 8);
      if (!v23)
      {
LABEL_114:
        int v96 = v74;
        uint64_t v7 = v75;
        uint64_t v4 = v76;
LABEL_120:
        llvm::Function::eraseFromParent(v7);
        goto LABEL_121;
      }
      char v77 = &AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v4 + 1];
      unsigned int v24 = &AGCLLVMAGPFragmentShaderGen3::replaceTileFunctions(void)::workitem_functions[5 * v4];
      uint64_t v81 = (char *)v24 + 36;
      size_t v79 = v24 + 3;
      uint64_t v80 = (uint64_t (**)(void))(v24 + 2);
      while (1)
      {
        BOOL v25 = *(llvm::Instruction **)(v23 + 24);
        uint64_t v26 = *(void *)(v23 + 8);
        if (*(_DWORD *)v77 == 1)
        {
          int v27 = 0;
        }
        else
        {
          if (*(_DWORD *)v77 != 2) {
            goto LABEL_33;
          }
          int v27 = 121;
        }
        int v96 = v27;
LABEL_33:
        uint64_t v78 = v26;
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v94, v25);
        uint64_t v28 = llvm::UndefValue::get();
        if (v83)
        {
          for (uint64_t i = 0; i != v83; ++i)
          {
            uint64_t v84 = (llvm::Value *)v28;
            uint64_t v30 = v5;
            uint64_t v101 = 0;
            memset(v100, 0, sizeof(v100));
            unint64_t v31 = llvm::CallBase::arg_end(v25) - (void)v25 + 32 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF);
            if ((v31 & 0x1FFFFFFFE0) != 0)
            {
              uint64_t v32 = (v31 >> 5);
              BOOL v33 = (llvm::Value **)v100;
              uint64_t v34 = v25;
              do
              {
                uint64_t v35 = (llvm::Value **)((char *)v34 - 32 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF));
                unint64_t v36 = *v35;
                *BOOL v33 = *v35;
                if (v21 && (*(_DWORD *)(*(void *)v36 + 8) & 0xFE) == 0x12)
                {
                  __int16 v92 = 257;
                  uint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
                  *BOOL v33 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v94, v36, v37, (const llvm::Twine *)v91);
                }
                ++v33;
                uint64_t v34 = (llvm::Instruction *)((char *)v34 + 32);
                --v32;
              }
              while (v32);
            }
            if (*v81)
            {
              uint64_t v38 = **(llvm::Type ***)&v100[0];
              BOOL v5 = v30;
              if ((*(_DWORD *)(**(void **)&v100[0] + 8) & 0xFE) == 0x12) {
                uint64_t v38 = (llvm::Type *)**((void **)v38 + 2);
              }
              v91[0] = llvm::Type::getPrimitiveSizeInBits(v38);
              v91[1] = v39;
              if (llvm::TypeSize::operator unsigned long long() == 32)
              {
                int v40 = 0;
              }
              else
              {
                BOOL v41 = (llvm::Type *)v98[4];
                if ((*(_DWORD *)(**(void **)&v100[0] + 8) & 0xFE) == 0x12) {
                  BOOL v41 = (llvm::Type *)llvm::FixedVectorType::get();
                }
                if ((v31 & 0x1FFFFFFFE0) != 0)
                {
                  uint64_t v42 = (v31 >> 5);
                  uint64_t v43 = (llvm::Value **)v100;
                  do
                  {
                    uint64_t v44 = *v43;
                    __int16 v92 = 257;
                    *v43++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v94, v44, v41, (const llvm::Twine *)v91);
                    --v42;
                  }
                  while (v42);
                }
                int v40 = 1;
              }
            }
            else
            {
              int v40 = 0;
              BOOL v5 = v30;
            }
            if (llvm::FPMathOperator::classof((uint64_t)v25)) {
              unsigned int FastMathFlags = llvm::Instruction::getFastMathFlags(v25);
            }
            else {
              unsigned int FastMathFlags = 0;
            }
            uint64_t v46 = (char *)v99 + *(void *)(*(void *)v99 - 24);
            long long v88 = v95[2];
            llvm::IRBuilderBase::getCurrentDebugLocation(v5, (llvm::IRBuilderBase *)v94);
            int v90 = v96;
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v88, (uint64_t)(v46 + 40));
            if (v89) {
              llvm::MetadataTracking::untrack();
            }
            switch(*v82)
            {
              case 1:
                unsigned int v47 = *v80;
                uint64_t v48 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  unsigned int v47 = *(uint64_t (**)(void))(*v48 + v47);
                }
                uint64_t v59 = v47(v48);
                goto LABEL_99;
              case 2:
                uint64_t v56 = *v80;
                uint64_t v57 = *(void *)v25;
                uint64_t v58 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  goto LABEL_68;
                }
                goto LABEL_69;
              case 3:
                uint64_t v56 = *v80;
                uint64_t v57 = *(void *)&v100[0];
                uint64_t v58 = (void *)((char *)v99 + (*v79 >> 1));
                if ((*v79 & 1) == 0) {
                  goto LABEL_69;
                }
LABEL_68:
                uint64_t v56 = *(uint64_t (**)(void))(*v58 + v56);
LABEL_69:
                uint64_t v59 = ((uint64_t (*)(void *, uint64_t))v56)(v58, v57);
                goto LABEL_99;
              case 4:
                uint64_t v60 = (unsigned int *)(*(void *)&v100[0] + 24);
                if (*(_DWORD *)(*(void *)&v100[0] + 32) >= 0x41u) {
                  uint64_t v60 = *(unsigned int **)v60;
                }
                uint64_t v51 = *v60;
                uint64_t v49 = *v80;
                uint64_t v50 = *(void *)v25;
                uint64_t v52 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  uint64_t v49 = *(uint64_t (**)(void))(*v52 + v49);
                }
                goto LABEL_84;
              case 5:
                uint64_t v49 = *v80;
                uint64_t v51 = *((void *)&v100[0] + 1);
                uint64_t v50 = *(void *)&v100[0];
                uint64_t v52 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  uint64_t v49 = *(uint64_t (**)(void))(*v52 + v49);
                }
LABEL_84:
                uint64_t v59 = ((uint64_t (*)(void *, uint64_t, uint64_t))v49)(v52, v50, v51);
                goto LABEL_99;
              case 6:
                uint64_t v63 = *v80;
                uint64_t v65 = (const char *)*((void *)&v100[0] + 1);
                unsigned int v64 = *(_OWORD **)&v100[0];
                long long v66 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  uint64_t v63 = *(uint64_t (**)(void))(*v66 + v63);
                }
                uint64_t v68 = FastMathFlags;
                goto LABEL_98;
              case 7:
                uint64_t v63 = *v80;
                uint64_t v65 = (const char *)*((void *)&v100[0] + 1);
                unsigned int v64 = *(_OWORD **)&v100[0];
                uint64_t v68 = *(void *)&v100[1];
                long long v66 = (void *)((char *)v99 + (*v79 >> 1));
                if ((*v79 & 1) == 0) {
                  goto LABEL_98;
                }
                uint64_t v59 = (*(uint64_t (**)(void *, void, void, void))(*v66 + v63))(v66, *(void *)&v100[0], *((void *)&v100[0] + 1), *(void *)&v100[1]);
                goto LABEL_99;
              case 8:
                uint64_t v53 = *v80;
                uint64_t v61 = (_OWORD *)*((void *)&v100[0] + 1);
                uint64_t v54 = *(void *)&v100[0];
                uint64_t v62 = *(const char **)&v100[1];
                long long v55 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  uint64_t v53 = *(uint64_t (**)(void))(*v55 + v53);
                }
                uint64_t v69 = FastMathFlags;
                goto LABEL_92;
              case 9:
                uint64_t v63 = *v80;
                long long v66 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  uint64_t v63 = *(uint64_t (**)(void))(*v66 + v63);
                }
                unsigned int v64 = v100;
                uint64_t v65 = "";
                uint64_t v68 = 0;
LABEL_98:
                uint64_t v59 = ((uint64_t (*)(void *, _OWORD *, const char *, uint64_t))v63)(v66, v64, v65, v68);
                goto LABEL_99;
              case 0xA:
                uint64_t v53 = *v80;
                uint64_t v54 = *(void *)v25;
                long long v55 = (void *)((char *)v99 + (*v79 >> 1));
                if (*v79) {
                  uint64_t v53 = *(uint64_t (**)(void))(*v55 + v53);
                }
                uint64_t v61 = v100;
                uint64_t v62 = "";
                uint64_t v69 = 0;
LABEL_92:
                uint64_t v59 = ((uint64_t (*)(void *, uint64_t, _OWORD *, const char *, uint64_t))v53)(v55, v54, v61, v62, v69);
LABEL_99:
                FPTrunc = (llvm::Value *)v59;
                break;
              default:
                FPTrunc = 0;
                break;
            }
            uint64_t v70 = (char *)v99 + *(void *)(*(void *)v99 - 24);
            long long v85 = *(_OWORD *)(v70 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v86, (llvm::IRBuilderBase *)(v70 + 40));
            int v87 = *((_DWORD *)v70 + 34);
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v85, (uint64_t)v94);
            if (v86) {
              llvm::MetadataTracking::untrack();
            }
            if (v40)
            {
              uint64_t v71 = *(void *)v25;
              if (v21 && (*(_DWORD *)(v71 + 8) & 0xFE) == 0x12) {
                uint64_t v71 = **(void **)(v71 + 16);
              }
              __int16 v92 = 257;
              FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v94, FPTrunc, (llvm::Type *)v71, (const llvm::Twine *)v91);
              if (!v21) {
                goto LABEL_110;
              }
            }
            else if (!v21)
            {
              goto LABEL_110;
            }
            __int16 v92 = 257;
            uint64_t v72 = (llvm::Value *)llvm::ConstantInt::get();
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v94, v84, FPTrunc, v72, (const llvm::Twine *)v91);
LABEL_110:
            uint64_t v28 = (uint64_t)FPTrunc;
          }
        }
        if (*(void *)v25 != v98[1]) {
          llvm::Value::replaceAllUsesWith();
        }
        llvm::Instruction::eraseFromParent(v25);
        uint64_t v23 = v78;
        if (!v78) {
          goto LABEL_114;
        }
      }
    }
LABEL_121:
    ++v4;
  }
  while (v4 != 10);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v98);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v97);
  if (v94[0] != v95) {
    free(v94[0]);
  }
  return v73;
}

uint64_t AGCLLVMUserFragmentShader::wrapperCallingConvention(AGCLLVMUserFragmentShader *this)
{
  if ((*(unsigned char *)(*((void *)this + 614) + 33) & 0xE) != 0
    && (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1788)
     || *((int *)this + 1082) > 0))
  {
    return 103;
  }
  else
  {
    return 101;
  }
}

uint64_t AGCLLVMAGPFragmentShader::improveDMAPromotionOpportunity(AGCLLVMAGPFragmentShader *this)
{
  return 1;
}

uint64_t AGCLLVMAGPFragmentShader::setupInterpolationFunctions(AGCLLVMAGPFragmentShader *this)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  {
    AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interpolation_functions_map = 0;
    *(void *)&dword_1EBD0E7A0 = 0;
    qword_1EBD0E7A8 = 0x1800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interpolation_functions_map, &dword_1CAC02000);
  }
  if (!dword_1EBD0E7A4)
  {
    uint64_t v1 = 0;
    uint64_t v2 = "_center";
    uint64_t v3 = &AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comp_type;
    do
    {
      uint64_t v4 = 0;
      uint64_t v127 = &(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_loc)[2 * v1 + 1];
      uint64_t v118 = v1;
      if ((v1 & 0xFFFFFFFE) == 2) {
        char v5 = 1;
      }
      else {
        char v5 = -1;
      }
      char v125 = v5;
      std::string v6 = "_perspective";
      do
      {
        uint64_t v7 = 0;
        uint64_t v120 = v4;
        uint64_t v129 = &(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_mode)[2 * v4 + 1];
        uint64_t v8 = ".";
        do
        {
          uint64_t v9 = 0;
          uint64_t v123 = v7;
          __n128 v131 = &(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comps)[2 * v7 + 1];
          uint64_t v10 = "f16";
          do
          {
            uint64_t v146 = &v148;
            long long v147 = xmmword_1CADD6290;
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, "air.interpolate", "");
            size_t v11 = strlen(v2);
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, v2, &v2[v11]);
            size_t v12 = strlen(v6);
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, v6, &v6[v12]);
            size_t v13 = strlen(v8);
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, v8, &v8[v13]);
            size_t v14 = strlen(v10);
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, v10, &v10[v14]);
            unsigned int v15 = v3;
            int v16 = (int)v3[2 * v9 + 1];
            int v17 = *(_DWORD *)v127;
            int v18 = *(_DWORD *)v129;
            char v19 = *(unsigned char *)v131;
            uint64_t v20 = *llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::try_emplace<>(v146, v147);
            *(_DWORD *)(v20 + 8) = v17;
            *(_DWORD *)(v20 + 12) = v18;
            *(_DWORD *)(v20 + 16) = v16;
            *(unsigned char *)(v20 + 20) = v19;
            *(unsigned char *)(v20 + 21) = 0;
            *(unsigned char *)(v20 + 22) = v125;
            if (v146 != &v148) {
              free(v146);
            }
            uint64_t v21 = v9 + 1;
            uint64_t v3 = v15;
            uint64_t v10 = v15[2 * v9 + 2];
            uint64_t v9 = 1;
          }
          while (v21 != 2);
          uint64_t v7 = v123 + 1;
          uint64_t v8 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comps)[2 * v123 + 2];
        }
        while (v123 != 3);
        std::string v6 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_mode)[2 * v120 + 2];
        uint64_t v4 = 1;
      }
      while (v120 != 1);
      uint64_t v1 = v118 + 1;
      uint64_t v2 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_loc)[2 * v118 + 2];
    }
    while (v118 != 3);
    uint64_t v22 = 0;
    uint64_t v23 = ".";
    do
    {
      uint64_t v24 = 0;
      BOOL v25 = "f16";
      uint64_t v26 = v15;
      do
      {
        uint64_t v146 = &v148;
        long long v147 = xmmword_1CADD6290;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, "air.get_vertex_value", "");
        size_t v27 = strlen(v23);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, v23, &v23[v27]);
        size_t v28 = strlen(v25);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, v25, &v25[v28]);
        int v29 = (int)v26[2 * v24 + 1];
        char v30 = (char)(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comps)[2 * v22 + 1];
        uint64_t v31 = *llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::try_emplace<>(v146, v147);
        *(void *)(v31 + 8) = 0x500000000;
        *(_DWORD *)(v31 + 16) = v29;
        *(unsigned char *)(v31 + 20) = v30;
        *(_WORD *)(v31 + 21) = -256;
        if (v146 != &v148) {
          free(v146);
        }
        uint64_t v32 = v24 + 1;
        uint64_t v26 = v15;
        BOOL v25 = v15[2 * v24 + 2];
        uint64_t v24 = 1;
      }
      while (v32 != 2);
      ++v22;
      uint64_t v23 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comps)[2 * v22];
    }
    while (v22 != 4);
    uint64_t v33 = 0;
    uint64_t v34 = ".";
    do
    {
      uint64_t v35 = 0;
      *(void *)long long v132 = v33;
      unint64_t v36 = &(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comps)[2 * v33 + 1];
      uint64_t v37 = "i8";
      do
      {
        uint64_t v146 = &v148;
        long long v147 = xmmword_1CADD6290;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, "air.get_vertex_value", "");
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, ".s", "");
        size_t v38 = strlen(v34);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, v34, &v34[v38]);
        size_t v39 = strlen(v37);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, v37, &v37[v39]);
        int v40 = (int)(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::s_pvv_comp_type)[v35 + 1];
        char v41 = *(unsigned char *)v36;
        uint64_t v42 = *llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::try_emplace<>(v146, v147);
        *(void *)(v42 + 8) = 0x500000000;
        *(_DWORD *)(v42 + 16) = v40;
        *(unsigned char *)(v42 + 20) = v41;
        *(_WORD *)(v42 + 21) = -256;
        if (v146 != &v148) {
          free(v146);
        }
        uint64_t v37 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::s_pvv_comp_type)[v35 + 3];
        v35 += 3;
      }
      while (v35 != 9);
      uint64_t v43 = 0;
      uint64_t v44 = "i1";
      do
      {
        uint64_t v146 = &v148;
        long long v147 = xmmword_1CADD6290;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, "air.get_vertex_value", "");
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, ".u", "");
        size_t v45 = strlen(v34);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, v34, &v34[v45]);
        size_t v46 = strlen(v44);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v146, v44, &v44[v46]);
        int v47 = (int)(&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::u_pvv_comp_type)[v43 + 1];
        uint64_t v48 = *llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::try_emplace<>(v146, v147);
        *(void *)(v48 + 8) = 0x500000000;
        *(_DWORD *)(v48 + 16) = v47;
        *(unsigned char *)(v48 + 20) = v41;
        *(_WORD *)(v48 + 21) = -256;
        if (v146 != &v148) {
          free(v146);
        }
        uint64_t v44 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::u_pvv_comp_type)[v43 + 3];
        v43 += 3;
      }
      while (v43 != 12);
      uint64_t v33 = *(void *)v132 + 1;
      uint64_t v34 = (&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interp_comps)[2 * *(void *)v132 + 2];
    }
    while (*(void *)v132 != 3);
  }
  uint64_t v49 = (llvm::Type ***)this;
  uint64_t v50 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v51 = *(void *)(v50 + 32);
  uint64_t v114 = v50 + 24;
  if (v51 != v50 + 24)
  {
    uint64_t v52 = (char *)this + 200;
    uint64_t v53 = (char *)this + 8;
    while (1)
    {
      uint64_t v54 = v51 ? (llvm::Value *)(v51 - 56) : 0;
      uint64_t v116 = *(void *)(v51 + 8);
      llvm::Value::getName(v54);
      int Key = llvm::StringMapImpl::FindKey();
      if (Key != -1 && Key != (unint64_t)dword_1EBD0E7A0)
      {
        uint64_t v57 = *((void *)v54 + 1);
        if (v57) {
          break;
        }
      }
LABEL_75:
      uint64_t v51 = v116;
      if (v116 == v114) {
        return 1;
      }
    }
    uint64_t v58 = *(void *)(AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interpolation_functions_map
                    + 8 * Key);
    unsigned int v59 = *(_DWORD *)(v58 + 8);
    int v124 = *(_DWORD *)(v58 + 12);
    uint64_t v117 = *(unsigned __int8 *)(v58 + 22);
    uint64_t v119 = *(unsigned __int8 *)(v58 + 21);
    *(void *)long long v133 = *(unsigned __int8 *)(v58 + 20);
    unsigned int v121 = *(_DWORD *)(v58 + 16);
    uint64_t v60 = (char *)this + 168;
    if (v121 >= 2) {
      uint64_t v60 = v52;
    }
    uint64_t v115 = v60;
    unsigned int v128 = v59;
    while (1)
    {
      uint64_t v61 = *(llvm::Instruction **)(v57 + 24);
      uint64_t v62 = *(void *)(v57 + 8);
      llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v49 + (void)*(*v49 - 3) + 40), v61);
      uint64_t v126 = v62;
      if (v59 == 4 || v59 == 1)
      {
        uint64_t v63 = (llvm::Value *)*((void *)v61 + 4 * v117 + -4 * (*((_DWORD *)v61 + 5) & 0x7FFFFFF));
        if (v59 == 1 && v63)
        {
          unsigned int v64 = v61;
          uint64_t v65 = (uint64_t)v49 + (void)*(*v49 - 3) + 40;
          long long v66 = (llvm::Value *)llvm::ConstantInt::get();
          __int16 v149 = 257;
          unsigned int v67 = (llvm::IRBuilderBase *)v65;
          uint64_t v61 = v64;
          uint64_t v63 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v67, v63, v66, (const llvm::Twine *)&v146);
        }
      }
      else
      {
        uint64_t v63 = 0;
      }
      uint64_t v144 = 0;
      uint64_t Cast = 0;
      uint64_t v144 = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v68 = (uint64_t)*(*v49 - 3);
      uint64_t v130 = v61;
      uint64_t v69 = *((void *)v61 + 4 * v119 + -4 * (*((_DWORD *)v61 + 5) & 0x7FFFFFF));
      uint64_t v70 = *(void *)&v52[v68 + 32];
      __int16 v149 = 257;
      uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v49 + v68 + 40, 47, v69, v70, (uint64_t)&v146);
      uint64_t v71 = &v53[(void)*(*v49 - 3)];
      uint64_t v72 = (llvm::Type **)*((void *)this + 3 * *(void *)v133 + 813);
      __int16 v149 = 257;
      int v74 = AGCLLVMBuilder::tryDeducePointeeType(v72, v73);
      unsigned int v75 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v71 + 32), (uint64_t)v74, (uint64_t *)v72, &v144, 2, (uint64_t)&v146);
      if (v128 == 4)
      {
        uint64_t v76 = 0;
        uint64_t v146 = 0;
        *(void *)&long long v147 = 0;
        uint64_t v57 = v126;
        if (!v124)
        {
          uint64_t v146 = (uint64_t *)AGCLLVMAGPFragmentShader::calculateInterpolationCoords((AGCLLVMAGPFragmentShader *)v49, 1u, v63);
          *(void *)&long long v147 = v77;
          uint64_t v76 = (llvm::Value *)AGCLLVMAGPFragmentShader::interpolateAtOffset((uint64_t *)v49, &v146, 1u, v49[711], 0);
        }
        uint64_t v146 = (uint64_t *)AGCLLVMAGPFragmentShader::calculateInterpolationCoords((AGCLLVMAGPFragmentShader *)v49, *(unsigned int *)v133, v63);
        *(void *)&long long v147 = v78;
        Insertuint64_t Element = (llvm::Value *)AGCLLVMAGPFragmentShader::interpolateAtOffset((uint64_t *)v49, &v146, *(unsigned int *)v133, v75, v76);
      }
      else
      {
        if (v124 != 5)
        {
          if (v124)
          {
            uint64_t v107 = (char *)v49 + (void)*(*v49 - 3);
            uint64_t v140 = (uint64_t *)llvm::ConstantInt::get();
            uint64_t v141 = llvm::ConstantInt::get();
            __int16 v149 = 257;
            unsigned __int32 v109 = AGCLLVMBuilder::tryDeducePointeeType(v75, v108);
            uint64_t v110 = llvm::IRBuilderBase::CreateGEP((uint64_t)(v107 + 40), (uint64_t)v109, (uint64_t *)v75, &v140, 2, (uint64_t)&v146);
            __int16 v111 = (char *)v49 + (void)*(*v49 - 3);
            uint64_t v112 = *((void *)v111 + 50);
            long long v134 = *(_OWORD *)(v111 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v135, (llvm::IRBuilderBase *)(v111 + 40));
            int v136 = *((_DWORD *)v111 + 34);
            unsigned int v59 = v128;
            Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, unsigned __int8 *, void, uint64_t, llvm::Value *, void))(*(void *)v112 + 264))(v112, &v134, *(unsigned __int8 **)v133, v128, v110, v63, 0);
            if (v135) {
              llvm::MetadataTracking::untrack();
            }
            uint64_t v53 = (char *)this + 8;
          }
          else
          {
            uint64_t v80 = (char *)v49 + (void)*(*v49 - 3);
            uint64_t v140 = (uint64_t *)llvm::ConstantInt::get();
            uint64_t v141 = llvm::ConstantInt::get();
            __int16 v149 = 257;
            uint64_t v82 = AGCLLVMBuilder::tryDeducePointeeType(v75, v81);
            uint64_t v83 = llvm::IRBuilderBase::CreateGEP((uint64_t)(v80 + 40), (uint64_t)v82, (uint64_t *)v75, &v140, 2, (uint64_t)&v146);
            uint64_t v84 = (char *)v49 + (void)*(*v49 - 3);
            uint64_t v85 = *((void *)v84 + 50);
            long long v137 = *(_OWORD *)(v84 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v138, (llvm::IRBuilderBase *)(v84 + 40));
            int v139 = *((_DWORD *)v84 + 34);
            unsigned int v59 = v128;
            Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, unsigned __int8 *, void, uint64_t, llvm::Value *, llvm::Type **))(*(void *)v85 + 264))(v85, &v137, *(unsigned __int8 **)v133, v128, v83, v63, v49[711]);
            if (v138) {
              llvm::MetadataTracking::untrack();
            }
          }
          uint64_t v57 = v126;
          goto LABEL_71;
        }
        uint64_t v86 = *(void *)&v115[(void)*(*v49 - 3) + 32];
        llvm::FixedVectorType::get();
        Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
        if (*(_DWORD *)v133)
        {
          uint64_t v87 = v86;
          uint64_t v88 = 0;
          do
          {
            uint64_t v89 = (uint64_t *)((char *)v49 + (void)*(*v49 - 3));
            v143[0] = (uint64_t *)llvm::ConstantInt::get();
            v143[1] = (uint64_t *)llvm::ConstantInt::get();
            __int16 v149 = 257;
            uint64_t v91 = AGCLLVMBuilder::tryDeducePointeeType(v75, v90);
            v89 += 5;
            __int16 v92 = v52;
            uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v89, (uint64_t)v91, (uint64_t *)v75, v143, 2, (uint64_t)&v146);
            __int16 v142 = 257;
            uint64_t v95 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v94);
            uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v89, v95, (uint64_t)GEP, 0, (uint64_t)&v140);
            uint64_t v97 = (llvm::IRBuilderBase *)((char *)v49 + (void)*(*v49 - 3) + 40);
            uint64_t v98 = (llvm::Value *)((void *)v130 - 4 * (*((_DWORD *)v130 + 5) & 0x7FFFFFF))[4];
            __int16 v149 = 257;
            uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v97, AlignedLoad, v98, (const llvm::Twine *)&v146);
            BOOL v100 = (AGCLLVMAGPFragmentShader *)((char *)this + (void)*(*v49 - 3) + 40);
            __int16 v149 = 257;
            uint64_t v101 = llvm::IRBuilderBase::CreateCast((uint64_t)v100, 49, Element, v87, (uint64_t)&v146);
            __int16 v142 = 257;
            uint64_t v49 = (llvm::Type ***)this;
            uint64_t v102 = (llvm::Value *)llvm::ConstantInt::get();
            uint64_t v103 = (llvm::Value *)v101;
            uint64_t v52 = v92;
            Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v100, InsertElement, v103, v102, (const llvm::Twine *)&v140);
            ++v88;
          }
          while (*(void *)v133 != v88);
          uint64_t v57 = v126;
          unsigned int v59 = v128;
          if (*(_DWORD *)v133 == 1)
          {
            int v104 = (char *)this + *(void *)(*(void *)this - 24);
            __int16 v149 = 257;
            unsigned int v105 = (llvm::IRBuilderBase *)(v104 + 40);
            uint64_t v106 = (llvm::Value *)llvm::ConstantInt::get();
            Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v105, InsertElement, v106, (const llvm::Twine *)&v146);
          }
          uint64_t v53 = (char *)this + 8;
          goto LABEL_71;
        }
        uint64_t v57 = v126;
      }
      unsigned int v59 = v128;
LABEL_71:
      AGCLLVMBuilder::truncateToSmall((uint64_t *)((char *)v49 + (void)*(*v49 - 3) + 32), InsertElement, v121);
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v130);
      if (!v57) {
        goto LABEL_75;
      }
    }
  }
  return 1;
}

llvm::NamedMDNode *AGCLLVMUserObject::overrideExternallyInitializedLinkage(AGCLLVMUserObject *this)
{
  uint64_t v1 = *(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v9 = "air.external_initializations";
  __int16 v10 = 259;
  uint64_t result = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v1, (const llvm::Twine *)&v9);
  if (result)
  {
    uint64_t v3 = result;
    for (unsigned int i = 0; ; ++i)
    {
      uint64_t result = (llvm::NamedMDNode *)llvm::NamedMDNode::getNumOperands(v3);
      if (i >= result) {
        break;
      }
      uint64_t Operand = llvm::NamedMDNode::getOperand(v3);
      std::string v6 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8) + 8);
      if (v6 && *v6 - 1 <= 1)
      {
        uint64_t v7 = *((void *)v6 + 16);
        if (v7) {
          BOOL v8 = *(unsigned char *)(v7 + 16) == 3;
        }
        else {
          BOOL v8 = 0;
        }
        if (v8 && (*(_DWORD *)(v7 + 32) & 0xF) == 7)
        {
          llvm::GlobalValue::setLinkage(v7, 0);
          llvm::GlobalValue::setVisibility(v7);
        }
      }
    }
  }
  return result;
}

uint64_t AGCLLVMUserObject::replaceCommandBufferPrivateData(AGCLLVMUserObject *this)
{
  uint64_t result = llvm::Module::getFunction();
  if (result)
  {
    uint64_t v2 = result;
    llvm::Function::addFnAttr();
    *(_DWORD *)(v2 + 32) = *(_DWORD *)(v2 + 32) & 0xFFFFBFC0 | 0x4007;
    operator new();
  }
  return result;
}

uint64_t AGCLLVMUserObject::replaceLateTextureBufferLength(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)this - 24) + this + 368);
  uint64_t v2 = v1 + 24;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v30 = v2;
  if (v3 != v2)
  {
    uint64_t v4 = (uint64_t *)this;
    uint64_t v5 = this + 200;
    uint64_t v6 = this + 8;
    do
    {
      uint64_t v31 = *(void *)(v3 + 8);
      if (v3) {
        uint64_t v7 = (llvm::Value *)(v3 - 56);
      }
      else {
        uint64_t v7 = 0;
      }
      this = llvm::Value::getName(v7);
      if (v8 >= 0x26)
      {
        this = memcmp((const void *)this, "agx.texture_heap.texture_buffer_length", 0x26uLL);
        if (!this)
        {
          this = llvm::Module::getGlobalVariable();
          uint64_t v9 = *((void *)v7 + 1);
          if (v9)
          {
            __int16 v10 = (llvm::Type **)this;
            do
            {
              size_t v11 = *(llvm::Instruction **)(v9 + 24);
              uint64_t v9 = *(void *)(v9 + 8);
              if (*((unsigned char *)v11 + 16) == 84) {
                size_t v12 = v11;
              }
              else {
                size_t v12 = 0;
              }
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v4 + *(void *)(*v4 - 24) + 40), v12);
              uint64_t v13 = *((void *)v12 - 4 * (*((_DWORD *)v12 + 5) & 0x7FFFFFF));
              uint64_t v14 = *(void *)(*v4 - 24);
              uint64_t v15 = *(void *)(v14 + v5 + 32);
              __int16 v35 = 257;
              uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v4 + v14 + 40, 47, v13, v15, (uint64_t)v34);
              uint64_t v18 = *v4;
              char v19 = (char *)v4 + *(void *)(*v4 - 24);
              if (!*(_DWORD *)(*((void *)v19 + 50) + 1780))
              {
                uint64_t v20 = (llvm::IRBuilderBase *)(v19 + 40);
                uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
                __int16 v35 = 257;
                uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v20, Cast, v21, (const llvm::Twine *)v34);
                uint64_t v18 = *v4;
              }
              uint64_t v22 = (uint64_t *)((char *)v4 + *(void *)(v18 - 24));
              uint64_t v23 = (llvm::Type *)v22[29];
              __int16 v35 = 257;
              uint64_t v24 = AGCLLVMBuilder::tryDeducePointeeType(v10, v16);
              v22 += 5;
              uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v22, v24, (uint64_t)v10, 0, (uint64_t)v34);
              __int16 v33 = 257;
              uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v22, v23, AlignedLoad, Cast, (const llvm::Twine *)v32);
              uint64_t v27 = *(void *)(*v4 - 24) + v6;
              __int16 v35 = 257;
              int v29 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v28);
              llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v27 + 32), v29, (uint64_t)GEP, 0, (uint64_t)v34);
              llvm::Value::replaceAllUsesWith();
              this = llvm::Instruction::eraseFromParent(v12);
            }
            while (v9);
          }
        }
      }
      uint64_t v3 = v31;
    }
    while (v31 != v30);
  }
  return this;
}

uint64_t AGCLLVMUserObject::replacePreRuntimeLinkBuiltins(AGCLLVMUserObject *this)
{
  return 1;
}

void AGCLLVMUserObject::setupIndirectSamplersAGP(AGCLLVMUserObject *this)
{
  if (*((unsigned char *)this + 14))
  {
    AGCLLVMUserObject::setupIndirectSamplersGL(this);
  }
  else
  {
    uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v2 = *((void *)v1 + 58);
    if (!*(unsigned char *)(v2 + 378))
    {
      uint64_t v3 = *(llvm::legacy::PassManager **)(v2 + 360);
      if (!v3) {
        AGCLLVMCtx::createPassManager(*((AGCLLVMCtx **)v1 + 58));
      }
      uint64_t v4 = (llvm::Module *)*((void *)v1 + 46);
      llvm::legacy::PassManager::run(v3, v4);
    }
  }
}

uint64_t AGCLLVMUserObject::generateAuxiliaryShaders(AGCLLVMUserObject *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::replaceTextureStatePtr(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)this - 24) + this + 368);
  uint64_t v2 = v1 + 24;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v40 = v2;
  if (v3 != v2)
  {
    uint64_t v4 = (void *)this;
    uint64_t v5 = this + 200;
    uint64_t v6 = this + 368;
    uint64_t v7 = this + 8;
    do
    {
      uint64_t v41 = *(void *)(v3 + 8);
      if (v3) {
        unint64_t v8 = (llvm::Value *)(v3 - 56);
      }
      else {
        unint64_t v8 = 0;
      }
      this = llvm::Value::getName(v8);
      if (v9 >= 0x1A)
      {
        BOOL v10 = *(void *)this == 0x646E69622E786761 && *(void *)(this + 8) == 0x7865742E7373656CLL;
        BOOL v11 = v10 && *(void *)(this + 16) == 0x702E65746174732ELL;
        if (v11 && *(_WORD *)(this + 24) == 29300)
        {
          this = llvm::Module::getGlobalVariable();
          uint64_t v13 = *((void *)v8 + 1);
          if (v13)
          {
            uint64_t v14 = (llvm::Type **)this;
            do
            {
              uint64_t v42 = *(void *)(v13 + 8);
              uint64_t v15 = *(llvm::Instruction **)(v13 + 24);
              if (*((unsigned char *)v15 + 16) == 84) {
                int v16 = v15;
              }
              else {
                int v16 = 0;
              }
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v4 + *(void *)(*v4 - 24) + 40), v16);
              uint64_t v17 = *(void *)(*v4 - 24);
              uint64_t v18 = *((void *)v16 - 4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF));
              uint64_t v19 = *(void *)(v17 + v5 + 32);
              __int16 v44 = 257;
              uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v4 + v17 + 40, 47, v18, v19, (uint64_t)v43);
              uint64_t v21 = (llvm::IRBuilderBase *)((char *)v4 + *(void *)(*v4 - 24) + 40);
              __int16 v44 = 257;
              uint64_t v22 = (llvm::Value *)llvm::ConstantInt::get();
              Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v21, Cast, v22, (const llvm::Twine *)v43);
              uint64_t v24 = *(void *)(*v4 - 24) + v7;
              __int16 v44 = 257;
              uint64_t v26 = AGCLLVMBuilder::tryDeducePointeeType(v14, v25);
              uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v24 + 32), v26, (uint64_t)v14, 0, (uint64_t)v43);
              size_t v28 = v14;
              uint64_t v29 = v7;
              uint64_t v30 = v6;
              uint64_t v31 = (uint64_t)v4 + *(void *)(*v4 - 24) + 40;
              uint64_t v32 = llvm::PointerType::get();
              __int16 v44 = 257;
              uint64_t v33 = v31;
              uint64_t v6 = v30;
              uint64_t v7 = v29;
              uint64_t v14 = v28;
              uint64_t v34 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v33, 49, AlignedLoad, v32, (uint64_t)v43);
              __int16 v35 = (char *)v4 + *(void *)(*v4 - 24);
              unint64_t v36 = (llvm::Type *)*((void *)v35 + 27);
              __int16 v44 = 257;
              uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v35 + 40), v36, v34, Shl, (const llvm::Twine *)v43);
              uint64_t v38 = (uint64_t)v4 + *(void *)(*v4 - 24) + 40;
              uint64_t v39 = *(void *)v16;
              __int16 v44 = 257;
              llvm::IRBuilderBase::CreateCast(v38, 49, GEP, v39, (uint64_t)v43);
              llvm::Value::replaceAllUsesWith();
              this = llvm::Instruction::eraseFromParent(v16);
              uint64_t v13 = v42;
            }
            while (v42);
          }
        }
      }
      uint64_t v3 = v41;
    }
    while (v41 != v40);
  }
  return this;
}

uint64_t AGCLLVMUserObject::promoteGlobalConstants(AGCLLVMUserObject *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::setupBufferAliasInfo(AGCLLVMUserObject *this)
{
  v39[16] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 970))
  {
    uint64_t v37 = v39;
    uint64_t v38 = 0x1000000000;
    uint64_t v2 = *(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368);
    uint64_t v34 = "agx.buffer.alias.scopes";
    v36[8] = 259;
    uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)&v34);
    int NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    if (NumOperands)
    {
      int v5 = NumOperands;
      for (int i = 0; i != v5; ++i)
      {
        uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, Operand);
      }
    }
    uint64_t v34 = v36;
    uint64_t v35 = 0x2000000000;
    uint64_t v30 = v33;
    int v32 = 32;
    uint64_t v8 = *((unsigned int *)this + 970);
    if (v8)
    {
      unint64_t v9 = (uint64_t *)*((void *)this + 484);
      uint64_t v27 = &v9[2 * v8];
      while (1)
      {
        uint64_t v10 = *v9;
        BOOL v11 = (void *)v9[1];
        LODWORD(v35) = 0;
        unsigned int v31 = 0;
        uint64_t v12 = *(void *)(v10 + 8);
        if (!v12) {
          goto LABEL_42;
        }
        do
        {
          uint64_t v13 = *(void *)(v12 + 24);
          int v14 = *(unsigned __int8 *)(v13 + 16);
          if ((v14 - 60) < 2)
          {
            uint64_t v15 = &v34;
            goto LABEL_13;
          }
          if (v14 == 77 || v14 == 62)
          {
            uint64_t v15 = &v30;
LABEL_13:
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v15, v13);
          }
          uint64_t v12 = *(void *)(v12 + 8);
        }
        while (v12);
LABEL_15:
        unsigned int v16 = v31;
        while (v16)
        {
          uint64_t v17 = *((void *)v30 + --v16);
          unsigned int v31 = v16;
          int v18 = *(unsigned __int8 *)(v17 + 16);
          if ((v18 - 60) < 2)
          {
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v34, v17);
            goto LABEL_15;
          }
          if (v18 == 62 || v18 == 77)
          {
            for (uint64_t j = *(void *)(v17 + 8); j; uint64_t j = *(void *)(j + 8))
            {
              uint64_t v20 = *(void *)(j + 24);
              if (v20) {
                BOOL v21 = *(unsigned __int8 *)(v20 + 16) >= 0x1Cu;
              }
              else {
                BOOL v21 = 0;
              }
              if (v21) {
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v30, v20);
              }
            }
            goto LABEL_15;
          }
        }
        if (v35)
        {
          uint64_t v22 = (char *)v34;
          uint64_t v23 = (char *)v34 + 8 * v35;
          do
          {
            if (*(unsigned char *)(*(void *)v22 + 16) == 60)
            {
              v28[0] = v11;
              llvm::MDTuple::getImpl();
              llvm::Instruction::setMetadata();
            }
            else
            {
              v28[0] = v29;
              v28[1] = (void *)0x1000000000;
              if (v38)
              {
                uint64_t v24 = v37;
                uint64_t v25 = 8 * v38;
                do
                {
                  if ((void *)*v24 != v11) {
                    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v28, *v24);
                  }
                  ++v24;
                  v25 -= 8;
                }
                while (v25);
              }
              llvm::MDTuple::getImpl();
              llvm::Instruction::setMetadata();
              if (v28[0] != v29) {
                free(v28[0]);
              }
            }
            v22 += 8;
          }
          while (v22 != v23);
        }
LABEL_42:
        v9 += 2;
        if (v9 == v27)
        {
          if (v30 != v33) {
            free(v30);
          }
          break;
        }
      }
    }
    if (v34 != v36) {
      free(v34);
    }
    if (v37 != v39) {
      free(v37);
    }
  }
  return 1;
}

uint64_t AGCLLVMUserObject::markInvariantOutputs(AGCLLVMUserObject *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::setupGlobalBindings(AGCLLVMUserObject *this)
{
  uint64_t v2 = *(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368);
  unint64_t TypeAllocSize = "air.global_bindings";
  LOWORD(v79) = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)&TypeAllocSize);
  if (NamedMetadata)
  {
    uint64_t v4 = NamedMetadata;
    int NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    if (NumOperands)
    {
      int v6 = NumOperands;
      int v7 = 0;
      uint64_t v8 = (char *)this + 8;
      unint64_t v9 = &v77;
      uint64_t v10 = (uint64_t *)((char *)this + 976);
      int v69 = 1;
      while (1)
      {
        uint64_t Operand = llvm::NamedMDNode::getOperand(v4);
        uint64_t v12 = Operand - 8 * *(unsigned int *)(Operand + 8);
        uint64_t v13 = *(unsigned __int8 **)(v12 + 8);
        if (v13
          && *v13 - 1 <= 1
          && ((int v14 = (llvm::GlobalValue *)*((void *)v13 + 16)) != 0 ? (v15 = *((unsigned char *)v14 + 16) == 3) : (v15 = 0),
              v15))
        {
          uint64_t v16 = *(void *)(v12 + 16);
          uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v16 - 8 * *(unsigned int *)(v16 + 8) + 8));
          if (v18 <= 25)
          {
            switch(v18)
            {
              case 10:
                if (*(void *)String == 0x666675622E726961 && *(_WORD *)(String + 8) == 29285)
                {
LABEL_85:
                  v81[0] = 0;
                  uint64_t v75 = 0;
                  unsigned int v74 = 0;
                  uint64_t v73 = 0;
                  char v72 = 0;
                  unsigned int v71 = 0;
                  __int16 v70 = 0;
                  parseMDBuffer(v16, *(_DWORD *)(*(void *)v14 + 8) >> 8, v81, (_DWORD *)&v75 + 1, (unsigned int *)&v75, &v74, &v73, (char *)&v70, &v72, (int *)&v71, (char *)&v70 + 1);
                  if (HIBYTE(v70))
                  {
                    if (v74) {
                      unsigned int v42 = v75 / v74;
                    }
                    else {
                      unsigned int v42 = 0;
                    }
                    uint64_t v45 = *(void *)(*(void *)this - 24);
                    if (!*(unsigned char *)(*(void *)((char *)this + v45 + 400) + 1755))
                    {
                      unsigned int v63 = v70;
                      unsigned int v64 = v71;
                      uint64_t v46 = v81[0];
                      int v47 = (llvm::Type *)*((void *)v14 + 3);
                      unint64_t TypeAllocSize = (const char *)llvm::DataLayout::getTypeAllocSize((AGCLLVMUserObject *)((char *)this + 232), v47);
                      *(void *)&long long v77 = v48;
                      uint64_t v49 = v42 * llvm::TypeSize::operator unsigned long long();
                      (*(void (**)(AGCLLVMUserObject *, llvm::GlobalValue *, llvm::Type *, uint64_t, uint64_t, uint64_t, void, void))(*(void *)this + 296))(this, v14, v47, v46, 0xFFFFFFFFLL, v49, v63, v64);
                      operator new();
                    }
                    std::string::append((std::string *)&v8[v45], "Tier 1 argument buffer global binding is not supported");
                    int v44 = 0;
                  }
                  else
                  {
                    if (v72) {
                      uint64_t v43 = v71;
                    }
                    else {
                      uint64_t v43 = 0xFFFFFFFFLL;
                    }
                    if ((*(uint64_t (**)(AGCLLVMUserObject *, llvm::GlobalValue *, void, void, uint64_t, void, void, uint64_t))(*(void *)this + 296))(this, v14, **(void **)(*(void *)v14 + 16), v81[0], 0xFFFFFFFFLL, v75, v70, v43))
                    {
                      llvm::Value::replaceAllUsesWith();
                      int v44 = 1;
                    }
                    else
                    {
                      int v44 = 0;
                    }
                  }
                  v69 &= v44;
                }
                break;
              case 11:
                if (*(void *)String != 0x747865742E726961 || *(void *)(String + 3) != 0x657275747865742ELL)
                {
                  if (*(void *)String != 0x706D61732E726961 || *(void *)(String + 3) != 0x72656C706D61732ELL) {
                    break;
                  }
                  if (*((void *)v14 + 1))
                  {
                    LODWORD(v73) = 0;
                    v81[0] = 0;
                    BYTE4(v75) = 0;
                    int v32 = parseMDSampler(v16, &v73, v81, (BOOL *)&v75 + 4);
                    if (v32)
                    {
                      uint64_t v33 = *(void *)v14;
                      int v65 = BYTE4(v75);
                      if (BYTE4(v75))
                      {
                        uint64_t v34 = **(void **)(v33 + 16);
                        if (*(unsigned char *)(v34 + 8) == 16) {
                          uint64_t v34 = **(void **)(v34 + 16);
                        }
                        uint64_t v33 = **(void **)(v34 + 16);
                      }
                      int v35 = *(_DWORD *)(v33 + 8);
                      if ((v35 & 0x1FF) == 0x110)
                      {
                        uint64_t v33 = **(void **)(v33 + 16);
                        LOBYTE(v35) = *(unsigned char *)(v33 + 8);
                      }
                      unint64_t v36 = v10;
                      if (v35 == 15)
                      {
                        uint64_t v37 = **(void **)(v33 + 16);
                        if ((*(_DWORD *)(v37 + 8) & 0x1FF) == 0x110) {
                          uint64_t v33 = **(void **)(v37 + 16);
                        }
                      }
                      *((unsigned char *)v9 + 16) = 0;
                      *(void *)unint64_t v9 = 0;
                      *((void *)v9 + 1) = 0;
                      *((void *)&v77 + 1) = **(void **)(v33 + 16);
                      unsigned int v38 = v73;
                      unsigned int v67 = v9;
                      int v39 = v81[0];
                      LODWORD(TypeAllocSize) = v73 & 0xFFFFF;
                      HIDWORD(TypeAllocSize) = v81[0];
                      LOBYTE(v78) = 1;
                      std::__tree<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::__emplace_unique_key_args<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::Sampler const&>(v36, v73 & 0xFFFFF, &TypeAllocSize);
                      unsigned int v40 = v38;
                      uint64_t v10 = v36;
                      int v41 = v39;
                      unint64_t v9 = v67;
                      AGCLLVMUserObject::replaceGlobalTextureOrSamplerUsage(this, v14, v40, v41, v65 != 0, (unsigned __int8 **)this + 368, (unsigned __int8 **)this + 392);
                    }
                    goto LABEL_124;
                  }
LABEL_112:
                  int v32 = 1;
                  goto LABEL_124;
                }
                if (!*((void *)v14 + 1)) {
                  goto LABEL_112;
                }
                BYTE4(v75) = 0;
                LOBYTE(v75) = 0;
                LODWORD(v73) = 0;
                v81[0] = 0;
                LODWORD(TypeAllocSize) = 0;
                LOWORD(v77) = 0;
                *(void *)((char *)&v77 + 4) = 0xFFFFFFFFLL;
                uint64_t v78 = 0;
                uint64_t v79 = 0;
                char v80 = 0;
                int v32 = parseMDTexture(v16, &v73, v81, (char *)v9, (BOOL *)&v75 + 4, (BOOL *)&v77 + 1, &v75, (int *)&v77 + 1);
                if (!v32)
                {
LABEL_124:
                  v69 &= v32;
                  break;
                }
                uint64_t v68 = v9;
                uint64_t v50 = *(void *)v14;
                int v51 = BYTE4(v75);
                if (BYTE4(v75))
                {
                  uint64_t v52 = **(void **)(v50 + 16);
                  if (*(unsigned char *)(v52 + 8) == 16) {
                    uint64_t v52 = **(void **)(v52 + 16);
                  }
                  uint64_t v50 = **(void **)(v52 + 16);
                }
                int v53 = *(_DWORD *)(v50 + 8);
                if ((v53 & 0x1FF) == 0x110)
                {
                  uint64_t v50 = **(void **)(v50 + 16);
                  LOBYTE(v53) = *(unsigned char *)(v50 + 8);
                }
                long long v66 = v10;
                if (v53 == 15)
                {
                  uint64_t v54 = **(void **)(v50 + 16);
                  if ((*(_DWORD *)(v54 + 8) & 0x1FF) == 0x110) {
                    uint64_t v50 = **(void **)(v54 + 16);
                  }
                }
                uint64_t v79 = **(void **)(v50 + 16);
                unsigned int v55 = (*(uint64_t (**)(AGCLLVMUserObject *, void))(*(void *)this + 280))(this, v73);
                LODWORD(v73) = v55;
                int v56 = v81[0];
                *((_DWORD *)this + 829) += v81[0];
                *((unsigned char *)this + 3560) |= v75;
                LODWORD(TypeAllocSize) = v55 & 0xFFFFF;
                HIDWORD(TypeAllocSize) = v56;
                char v80 = 1;
                std::__tree<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::__emplace_unique_key_args<AGCLLVMUserObject::Texture,AGCLLVMUserObject::Texture const&>((uint64_t *)this + 119, v55 & 0xFFFFF, &TypeAllocSize);
                if ((v77 & 2) == 0)
                {
                  char v57 = v51 != 0;
                  goto LABEL_122;
                }
                if (v51)
                {
                  char v58 = v56 + v55;
                  if (v56 + v55 >= 0x40) {
                    char v58 = 64;
                  }
                  char v59 = v58 - v55;
                  if (v55 >= 0x40) {
                    char v59 = 0;
                  }
                  *((void *)this + 465) |= ~(-1 << v59) << v55;
                  if (v55 <= 0x40) {
                    char v60 = 64;
                  }
                  else {
                    char v60 = v55;
                  }
                  *((void *)this + 466) |= ~(-1 << (v56 - v59)) << v60;
                  char v57 = 1;
LABEL_122:
                  unint64_t v9 = v68;
                }
                else
                {
                  unint64_t v9 = v68;
                  char v57 = 0;
                  uint64_t v61 = 1 << v55;
                  if (v55 > 0x3F) {
                    *((void *)this + 466) |= v61;
                  }
                  else {
                    *((void *)this + 465) |= v61;
                  }
                }
                AGCLLVMUserObject::replaceGlobalTextureOrSamplerUsage(this, v14, v55, v56, v57, (unsigned __int8 **)this + 362, (unsigned __int8 **)this + 386);
                uint64_t v10 = v66;
                goto LABEL_124;
              case 19:
                BOOL v22 = *(void *)String == 0x69646E692E726961 && *(void *)(String + 8) == 0x6675625F74636572;
                if (v22 && *(void *)(String + 11) == 0x7265666675625F74) {
                  goto LABEL_85;
                }
                break;
            }
          }
          else if (v18 > 34)
          {
            if (v18 == 35)
            {
              uint64_t v24 = "air.instance_acceleration_structure";
              size_t v25 = 35;
            }
            else
            {
              if (v18 != 36) {
                goto LABEL_11;
              }
              uint64_t v24 = "air.primitive_acceleration_structure";
              size_t v25 = 36;
            }
            if (!memcmp((const void *)String, v24, v25)) {
              goto LABEL_85;
            }
          }
          else if (v18 == 26)
          {
            if (*(void *)String == 0x697369762E726961
              && *(void *)(String + 8) == 0x636E75665F656C62
              && *(void *)(String + 16) == 0x6261745F6E6F6974
              && *(_WORD *)(String + 24) == 25964)
            {
              goto LABEL_85;
            }
          }
          else if (v18 == 31)
          {
            BOOL v19 = *(void *)String == 0x65746E692E726961 && *(void *)(String + 8) == 0x6E6F697463657372;
            BOOL v20 = v19 && *(void *)(String + 16) == 0x6F6974636E75665FLL;
            if (v20 && *(void *)(String + 23) == 0x656C6261745F6E6FLL) {
              goto LABEL_85;
            }
          }
        }
        else
        {
          std::string::append((std::string *)&v8[*(void *)(*(void *)this - 24)], "global binding variable is empty\n");
        }
LABEL_11:
        if (v6 == ++v7) {
          return v69 & 1;
        }
      }
    }
  }
  LOBYTE(v69) = 1;
  return v69 & 1;
}

uint64_t AGCLLVMUserObject::setupStackOOBCheck(AGCLLVMUserObject *this)
{
  if (!MGGetBoolAnswer()
    || (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_DISABLE_STACK_OOB_CHECK", v1)) == 0
    || *Value == 48
    || !atoi(Value))
  {
    llvm::Module::getOrInsertNamedMetadata();
  }
  return 1;
}

uint64_t AGCLLVMUserObject::bindDylibResources(AGCLLVMUserObject **this)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t result = AGCLLVMUserObject::needsDylibResources((AGCLLVMUserObject *)this);
  if (result)
  {
    AGCLLVMUserObject::createDylibBaseGetterFunc((AGCLLVMUserObject *)this);
    AGCLLVMUserObject::buildBindlessImageArgumentPointer((unsigned __int8 *)this, 0, 0);
    AGCLLVMUserObject::buildBindlessImageArgumentPointer((unsigned __int8 *)this, 0, 1);
    AGCLLVMUserObject::buildImageTextureBufferLength((AGCLLVMUserObject *)this, 0);
    if (!this[309]) {
      AGCLLVMUserObject::createSamplerHeapGlobal((AGCLLVMUserObject *)this);
    }
    AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal((AGCLLVMUserObject *)this);
    if ((*(unsigned int (***)(char *))((char *)this + *((void *)*this - 3)))[8]((char *)this + *((void *)*this - 3)) != 29) {
      AGCLLVMUserObject::createIntersectionFunctionTableHeapGlobal((AGCLLVMUserObject *)this);
    }
    if ((*(unsigned char **)((char *)this + *((void *)*this - 3) + 400))[1785] && !*((unsigned char *)this + 3712))
    {
      AGCLLVMUserObject::createSCSUserDataBoundGlobal(this);
      AGCLLVMUserObject::createSCSDriverDataStartGlobal(this);
    }
    AGCLLVMUserObject::createAccelerationStructureHeapGlobal((AGCLLVMUserObject *)this);
    AGCLLVMUserObject::createVisibleFunctionTableHeapGlobal((AGCLLVMUserObject *)this);
    uint64_t v3 = *this;
    if ((*(unsigned char **)((char *)this + *((void *)*this - 3) + 400))[1785] && !*((unsigned char *)this + 3712))
    {
      AGCLLVMUserObject::createSCSIFTHeapGlobal(this);
      AGCLLVMUserObject::createGlobalRayStridesGlobal((AGCLLVMUserObject *)this);
      uint64_t v3 = *this;
    }
    if ((*(unsigned int (***)(char *))((char *)this + *((void *)v3 - 3)))[8]((char *)this + *((void *)v3 - 3)) != 8)
    {
      (*(void (***)(char *))((char *)this + *((void *)*this - 3)))[8]((char *)this + *((void *)*this - 3));
      int v4 = (*(uint64_t (***)(char *))((char *)this + *((void *)*this - 3)))[8]((char *)this + *((void *)*this - 3));
      BOOL v5 = (v4 - 6) < 4 || v4 == 22;
      if (v5 && !this[358])
      {
        int v6 = (char *)(this + 46);
        if ((*(unsigned int (***)(char *))((char *)this + *((void *)*this - 3)))[8]((char *)this + *((void *)*this - 3)) == 7
          || (*(unsigned int (***)(char *))((char *)this + *((void *)*this - 3)))[8]((char *)this + *((void *)*this - 3)) == 22)
        {
          uint64_t v7 = *(void *)(*(void *)&v6[*((void *)*this - 3) + 32] + 824);
          unsigned int v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 576))(v7, 0);
        }
        else
        {
          uint64_t v9 = *(void *)(*(void *)&v6[*((void *)*this - 3) + 32] + 824);
          unsigned int v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 296))(v9, 0);
        }
        unsigned int v10 = v8;
        BOOL v11 = (llvm::Type *)llvm::PointerType::get();
        v68[0] = "agc.stage_specific_dylib_global.";
        v69[0] = 0;
        __int16 v70 = 2307;
        GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v11, (const llvm::Twine *)v68, v10, 0, 5, 0);
        AGCLLVMUserObject::setDylibLinkage(GlobalBufferBinding, v13);
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 356), (uint64_t)GlobalBufferBinding);
        uint64_t __src = llvm::ValueAsMetadata::get();
        v68[0] = v69;
        v68[1] = (void *)0x100000000;
        llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)v68, &__src, &v72);
        uint64_t Impl = llvm::MDTuple::getImpl();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)(this + 359), Impl);
        if (v68[0] != v69) {
          free(v68[0]);
        }
      }
    }
    if ((*(unsigned int (***)(char *))((char *)this + *((void *)*this - 3)))[8]((char *)this + *((void *)*this - 3)) != 29) {
      AGCLLVMUserObject::createGlobalBindingTableGlobal((AGCLLVMUserObject *)this);
    }
    uint64_t v16 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
    uint64_t v17 = this[297];
    AGCLLVMUserObject::setDylibLinkage(v17, v15);
    uint64_t v18 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
    AGCLLVMObject::addDylibBinding(v16, v17);
    BOOL v19 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
    BOOL v20 = this[300];
    AGCLLVMUserObject::setDylibLinkage(v20, v21);
    uint64_t v22 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(void *)v22 + 32))(v22);
    AGCLLVMObject::addDylibBinding(v19, v20);
    uint64_t v23 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
    uint64_t v24 = this[303];
    AGCLLVMUserObject::setDylibLinkage(v24, v25);
    uint64_t v26 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(void *)v26 + 40))(v26);
    AGCLLVMObject::addDylibBinding(v23, v24);
    uint64_t v27 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
    size_t v28 = this[309];
    AGCLLVMUserObject::setDylibLinkage(v28, v29);
    uint64_t v30 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(void *)v30 + 48))(v30);
    AGCLLVMObject::addDylibBinding(v27, v28);
    unsigned int v31 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
    int v32 = this[327];
    AGCLLVMUserObject::setDylibLinkage(v32, v33);
    uint64_t v34 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(void *)v34 + 56))(v34);
    AGCLLVMObject::addDylibBinding(v31, v32);
    if ((*(unsigned int (***)(char *))((char *)this + *((void *)*this - 3)))[8]((char *)this + *((void *)*this - 3)) != 29)
    {
      unint64_t v36 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
      uint64_t v37 = this[331];
      AGCLLVMUserObject::setDylibLinkage(v37, v35);
      uint64_t v38 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(void *)v38 + 64))(v38);
      AGCLLVMObject::addDylibBinding(v36, v37);
    }
    int v39 = this[318];
    if (v39)
    {
      unsigned int v40 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
      AGCLLVMUserObject::setDylibLinkage(this[318], v35);
      uint64_t v41 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(void *)v41 + 96))(v41);
      AGCLLVMObject::addDylibBinding(v40, v39);
    }
    unsigned int v42 = this[321];
    if (v42)
    {
      uint64_t v43 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
      AGCLLVMUserObject::setDylibLinkage(this[321], v35);
      uint64_t v44 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(void *)v44 + 104))(v44);
      AGCLLVMObject::addDylibBinding(v43, v42);
    }
    uint64_t v45 = this[324];
    if (v45)
    {
      uint64_t v46 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
      AGCLLVMUserObject::setDylibLinkage(this[324], v35);
      uint64_t v47 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(void *)v47 + 120))(v47);
      AGCLLVMObject::addDylibBinding(v46, v45);
    }
    uint64_t v48 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
    uint64_t v49 = this[339];
    AGCLLVMUserObject::setDylibLinkage(v49, v35);
    uint64_t v50 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(void *)v50 + 88))(v50);
    AGCLLVMObject::addDylibBinding(v48, v49);
    int v51 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
    uint64_t v52 = this[335];
    AGCLLVMUserObject::setDylibLinkage(v52, v53);
    uint64_t v54 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
    (*(void (**)(uint64_t))(*(void *)v54 + 72))(v54);
    AGCLLVMObject::addDylibBinding(v51, v52);
    int v56 = this[342];
    if (v56)
    {
      char v57 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
      AGCLLVMUserObject::setDylibLinkage(this[342], v55);
      uint64_t v58 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(void *)v58 + 112))(v58);
      AGCLLVMObject::addDylibBinding(v57, v56);
    }
    int v59 = (*(uint64_t (***)(char *))((char *)this + *((void *)*this - 3)))[8]((char *)this + *((void *)*this - 3));
    if (((v59 - 6) < 4 || v59 == 22) && this[358])
    {
      uint64_t v61 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(void *)v61 + 128))(v61);
      uint64_t v62 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
      unsigned int v63 = this[358];
      AGCLLVMUserObject::setDylibLinkage(v63, v64);
      AGCLLVMObject::addDylibBinding(v62, v63);
    }
    int v65 = this[345];
    if (v65)
    {
      long long v66 = (AGCLLVMObject *)((char *)this + *((void *)*this - 3));
      AGCLLVMUserObject::setDylibLinkage(this[345], v60);
      uint64_t v67 = (*(void **)((char *)this + *((void *)*this - 3) + 400))[104];
      (*(void (**)(uint64_t))(*(void *)v67 + 80))(v67);
      AGCLLVMObject::addDylibBinding(v66, v65);
    }
    uint64_t result = (*(uint64_t (***)(char *))((char *)this + *((void *)*this - 3)))[13]((char *)this + *((void *)*this - 3));
    if (result)
    {
      AGCLLVMBuilder::getOrInsertFunction<>();
      v68[0] = "void_return";
      __int16 v70 = 259;
      operator new();
    }
  }
  return result;
}

uint64_t AGCLLVMUserObject::wrapperPrefixData(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::setupImageBlocks(AGCLLVMUserObject *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::verifyLoweredIR(AGCLLVMUserObject *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char *)this + 8;
  uint64_t v2 = *(void *)this;
  uint64_t v4 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(void *)(v4 + 32);
  if (v6 != v4 + 24)
  {
    char v7 = 0;
    do
    {
      while (1)
      {
        if (v6) {
          uint64_t v8 = v6 - 56;
        }
        else {
          uint64_t v8 = 0;
        }
        if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v8))
        {
          if (*(void *)(v8 + 8))
          {
            if ((*(unsigned char *)(v8 + 33) & 0x20) == 0)
            {
              __p[0] = (void *)llvm::Value::getName((llvm::Value *)v8);
              __p[1] = v9;
              if (llvm::StringRef::find() != -1)
              {
                {
                  AGCLLVMUserObject::verifyLoweredIR(void)::log = (uint64_t)os_log_create("com.apple.agx", "AGC");
                }
                BOOL v19 = AGCLLVMUserObject::verifyLoweredIR(void)::log;
                if (os_log_type_enabled((os_log_t)AGCLLVMUserObject::verifyLoweredIR(void)::log, OS_LOG_TYPE_FAULT))
                {
                  uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v8);
                  if (Name)
                  {
                    std::string::basic_string[abi:nn180100](__p, Name, v27);
                    size_t v28 = v30 >= 0 ? __p : (void **)__p[0];
                  }
                  else
                  {
                    __p[0] = 0;
                    __p[1] = 0;
                    size_t v28 = __p;
                    uint64_t v30 = 0;
                  }
                  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
                  _os_log_fault_impl(&dword_1CAC02000, v19, OS_LOG_TYPE_FAULT, "Encountered unlowered function call to %s", (uint8_t *)&__dst, 0xCu);
                  if (SHIBYTE(v30) < 0) {
                    operator delete(__p[0]);
                  }
                }
                BOOL v20 = (void *)llvm::Value::getName((llvm::Value *)v8);
                if (v20) {
                  std::string::basic_string[abi:nn180100](&__dst, v20, v21);
                }
                else {
                  memset(&__dst, 0, sizeof(__dst));
                }
                uint64_t v22 = std::string::insert(&__dst, 0, "Encountered unlowered function call to ");
                std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
                *(_OWORD *)std::string __p = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
                uint64_t v30 = v23;
                v22->__r_.__value_.__l.__size_ = 0;
                v22->__r_.__value_.__r.__words[2] = 0;
                v22->__r_.__value_.__r.__words[0] = 0;
                if (v30 >= 0) {
                  uint64_t v24 = __p;
                }
                else {
                  uint64_t v24 = (void **)__p[0];
                }
                if (v30 >= 0) {
                  std::string::size_type v25 = HIBYTE(v30);
                }
                else {
                  std::string::size_type v25 = (std::string::size_type)__p[1];
                }
                std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (const std::string::value_type *)v24, v25);
                if (SHIBYTE(v30) < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                return 0;
              }
            }
          }
        }
        if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v8))
        {
          if (*(void *)(v8 + 8))
          {
            if ((*(unsigned char *)(v8 + 33) & 0x20) == 0)
            {
              unsigned int v10 = (const void *)llvm::Value::getName((llvm::Value *)v8);
              if (v11 == 33 && !memcmp(v10, "agc.illegal_visible_function_call", 0x21uLL))
              {
                std::string::append((std::string *)&v3[*(void *)(*(void *)this - 24)], "Error: Encountered unsupported visible function call\n");
                char v7 = 1;
              }
            }
          }
        }
        if (!llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v8)) {
          break;
        }
        if (!*(void *)(v8 + 8)) {
          break;
        }
        if ((*(unsigned char *)(v8 + 33) & 0x20) != 0) {
          break;
        }
        uint64_t v12 = (const void *)llvm::Value::getName((llvm::Value *)v8);
        if (v13 != 36 || memcmp(v12, "agc.illegal_raytracing_function_call", 0x24uLL)) {
          break;
        }
        std::string::append((std::string *)&v3[*(void *)(*(void *)this - 24)], "Error: Encountered unsupported ray tracing function call\n");
        uint64_t v6 = *(void *)(v6 + 8);
        char v7 = 1;
        if (v6 == v5) {
          return 0;
        }
      }
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6 != v5);
    if (v7) {
      return 0;
    }
    uint64_t v2 = *(void *)this;
  }
  uint64_t v15 = *(void *)((char *)this + *(void *)(v2 - 24) + 368);
  uint64_t v16 = *(void *)(v15 + 32);
  if (v16 != v15 + 24)
  {
    uint64_t v17 = *(void *)(v15 + 32);
    do
    {
      if (v17 != v16)
      {
        if (v17) {
          uint64_t v18 = v17 - 56;
        }
        else {
          uint64_t v18 = 0;
        }
        if (v18 == *((void *)this + 21)) {
          llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList();
        }
      }
      uint64_t v17 = *(void *)(v17 + 8);
    }
    while (v17 != v15 + 24);
  }
  return 1;
}

uint64_t virtual thunk to'AGCLLVMAGPFragmentShaderGen3::constructReply(AGCLLVMAGPFragmentShaderGen3 *this)
{
  return AGCLLVMAGPFragmentShaderGen3::constructReply((AGCLLVMAGPFragmentShaderGen3 *)((char *)this
                                                                                     + *(void *)(*(void *)this
                                                                                                 - 152)));
}

uint64_t AGCLLVMAGPFragmentShaderGen3::constructReply(AGCLLVMAGPFragmentShaderGen3 *this)
{
  uint64_t v2 = AGCLLVMAGPFragmentShader::constructReply(this);
  if (v2)
  {
    if (*((unsigned char *)this + 7224))
    {
      int v3 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(void *)(*(void *)this - 24) + 2568), (const unsigned __int8 *)this + 7096, 8);
      int v4 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(void *)(*(void *)this - 24) + 2568), (const unsigned __int8 *)this + 7160, 8);
      uint64_t v5 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v6 = (flatbuffers::FlatBufferBuilder *)(v5 + 2568);
      v5[2638] = 1;
      int v7 = *((_DWORD *)v5 + 650) - *((_DWORD *)v5 + 654) + *((_DWORD *)v5 + 652);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v5 + 2568), 6, v4);
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v6, 4, v3);
      int v8 = flatbuffers::FlatBufferBuilder::EndTable(v6, v7);
    }
    else
    {
      int v8 = 0;
    }
    uint64_t v9 = *(void *)(*(void *)this - 24);
    if (*(unsigned char *)(*(void *)((char *)this + v9 + 400) + 1744)) {
      BOOL v10 = *((_DWORD *)this + 1610) == 1;
    }
    else {
      BOOL v10 = 0;
    }
    uint64_t v11 = (_DWORD *)((char *)this + v9);
    uint64_t v12 = (AGCLLVMAGPFragmentShaderGen3 *)((char *)this + v9 + 2568);
    int v13 = *((unsigned __int8 *)this + 5856);
    int v14 = *((_DWORD *)this + 1079);
    *((unsigned char *)this + v9 + 2638) = 1;
    int v15 = *(_DWORD *)((char *)this + v9 + 2600)
        - *(_DWORD *)((char *)this + v9 + 2616)
        + *(_DWORD *)((char *)this + v9 + 2608);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v12, 10, v14);
    if (v8)
    {
      flatbuffers::FlatBufferBuilder::Align(v12, 4uLL);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v12, 8, v11[650] - v11[654] + v11[652] - v8 + 4);
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v12, 6, v10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v12, 4, v13, 0);
    int v16 = flatbuffers::FlatBufferBuilder::EndTable(v12, v15);
    int v17 = AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(this);
    uint64_t v18 = (char *)this + *(void *)(*(void *)this - 24);
    v18[2638] = 1;
    int v19 = *((_DWORD *)v18 + 650) - *((_DWORD *)v18 + 654) + *((_DWORD *)v18 + 652);
    if (v16)
    {
      flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v18 + 2568), 4uLL);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v18 + 321, 6, *((_DWORD *)v18 + 650) - *((_DWORD *)v18 + 654) + *((_DWORD *)v18 + 652) - v16 + 4);
    }
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v18 + 2568), v17);
    BOOL v20 = (AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(void *)(*(void *)this - 24) + 2568);
    int v21 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v18 + 2568), v19);
    flatbuffers::FlatBufferBuilder::Finish(v20, v21, v22);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
  }
  return v2;
}

uint64_t AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>(uint64_t a1, _DWORD *a2)
{
  int v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t result = dumpShaderToFile(v3);
  if (result)
  {
    if (a2[8] - a2[12] + a2[10])
    {
      flatbuffers::IDLOptions::IDLOptions((flatbuffers::IDLOptions *)&v5);
      flatbuffers::Parser::Parser((flatbuffers::Parser *)v6, (const flatbuffers::IDLOptions *)&v5);
    }
  }
  return result;
}

uint64_t AGCLLVMUserObject::replaceSamplerFunctionUses(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v381 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(*(void *)a1 - 24);
  int v8 = *(unsigned char **)(v7 + a1 + 400);
  int v9 = *a3;
  if (v8[1750]) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = a3[1] == 2;
  }
  if (v10)
  {
    if ((v9 & 0xFFFFFFFE) == 2)
    {
      uint64_t v11 = (std::string *)(a1 + v7 + 8);
      uint64_t v12 = "Read or write to cube texture not supported";
LABEL_390:
      std::string::append(v11, v12);
      return 0;
    }
  }
  else if (v9 == 3)
  {
    (*(void (**)(unsigned char *, void))(*(void *)v8 + 392))(v8, *(void *)(a1 + 168));
    uint64_t v6 = *(void *)a1;
    int v9 = *a3;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v6 - 24) + a1 + 400) + 1741)) {
    BOOL v13 = v9 == 8;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(v6 + 432))(a1);
    if (v14)
    {
      if ((*(unsigned char *)(v14 + 35) & 2) != 0)
      {
        uint64_t v11 = (std::string *)(a1 + *(void *)(*(void *)a1 - 24) + 8);
        uint64_t v12 = "Large MRT not supported with image block write";
        goto LABEL_390;
      }
    }
  }
  uint64_t v353 = llvm::PointerType::get();
  llvm::StructType::get();
  uint64_t v15 = *(void *)a1;
  int v313 = *((unsigned __int8 *)a3 + 40);
  if (*((unsigned char *)a3 + 40)) {
    BOOL v319 = *(unsigned char *)(*(void *)(*(void *)(v15 - 24) + a1 + 400) + 1732) != 0;
  }
  else {
    BOOL v319 = 0;
  }
  uint64_t v16 = *(void *)(v15 - 24);
  uint64_t v17 = *(void *)(a2 + 8);
  uint64_t v18 = 1;
  if (!v17) {
    return v18;
  }
  uint64_t v326 = a1 + 368;
  int v306 = *(unsigned __int8 *)(*(void *)(v16 + a1 + 400) + 1739);
  uint64_t v307 = a1 + 8;
  int v318 = *(unsigned __int8 *)(**(void **)(*(void *)(a2 + 24) + 16) + 8);
  unsigned int v308 = *a3 & 0xFFFFFFFE;
  while (1)
  {
    int v19 = *(llvm::Instruction **)(v17 + 24);
    uint64_t v17 = *(void *)(v17 + 8);
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40), v19);
    uint64_t v20 = *(void *)a3;
    memset(v356, 0, 11);
    long long v357 = 0u;
    long long v358 = 0u;
    long long v359 = 0u;
    long long v360 = 0u;
    __int16 v361 = 0;
    long long v362 = 0u;
    long long v363 = 0u;
    long long v364 = 0u;
    uint64_t v365 = 0;
    char v374 = 0;
    long long v367 = 0u;
    memset(v368, 0, 28);
    uint64_t Select = 0;
    uint64_t v371 = 0;
    uint64_t v369 = 0;
    char v375 = 1;
    uint64_t v376 = 0;
    char v377 = 0;
    int v21 = a3[3];
    BOOL v372 = *((unsigned char *)a3 + 47) != 0;
    __int16 v373 = *((unsigned __int8 *)a3 + 46);
    int v366 = 4;
    uint64_t v22 = *((_DWORD *)v19 + 5) & 0x7FFFFFF;
    uint64_t v353 = v20;
    int v354 = v21;
    std::string::size_type v23 = (_DWORD *)((char *)v19 - 32 * v22);
    uint64_t ConstantSamplerGlobal = *((unsigned char *)a3 + 31) ? *(void *)&v23[8 * *((unsigned __int8 *)a3 + 31)] : 0;
    std::string::size_type v25 = *(unsigned __int8 **)&v23[8 * *((unsigned __int8 *)a3 + 30)];
    if (!v25 || v25[16] - 11 >= 2)
    {
      if (!ConstantSamplerGlobal)
      {
        int isConstantSampler = 0;
        unint64_t v352 = 0;
        unint64_t v351 = 0;
        if (!v25) {
          goto LABEL_35;
        }
        goto LABEL_33;
      }
      if (*(unsigned __int8 *)(ConstantSamplerGlobal + 16) - 11 >= 2) {
        break;
      }
    }
    llvm::UndefValue::get();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v19);
LABEL_368:
    if (!v17) {
      return 1;
    }
  }
  unint64_t v352 = 0;
  unint64_t v351 = 0;
  int isConstantSampler = AGCLLVMUserObject::isConstantSampler((AGCLLVMUserObject *)a1, (llvm::Value *)ConstantSamplerGlobal, &v352, &v351);
  if (!v25) {
    goto LABEL_35;
  }
LABEL_33:
  if (*(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v25) + 16) >= 0x15u
    && !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 384))(a1))
  {
    goto LABEL_368;
  }
LABEL_35:
  if ((isConstantSampler & 1) == 0)
  {
    char v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 400))(a1);
    if (ConstantSamplerGlobal)
    {
      if ((v27 & 1) == 0
        && *(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)ConstantSamplerGlobal) + 16) > 0x14u)
      {
        goto LABEL_368;
      }
    }
  }
  if ((!v319 | isConstantSampler | (*(unsigned int (**)(uint64_t))(*(void *)a1 + 336))(a1) ^ 1))
  {
    if ((llvm::AttributeList::hasFnAttr() & 1) != 0
      || (llvm::CallBase::hasFnAttrOnCalledFunction() & 1) != 0
      || a3[4] >= 2)
    {
      char v377 = 1;
    }
    __int16 v350 = 0;
    if (isConstantSampler && !*(_DWORD *)(*(void *)(*(void *)(*(void *)a1 - 24) + v326 + 32) + 1780))
    {
      unint64_t v29 = v352;
      if (v319)
      {
        unint64_t v30 = ((v352 >> 16) & 0xF) - 1;
        if (v30 > 7) {
          LOBYTE(v31) = 0;
        }
        else {
          int v31 = dword_1CADDEEF8[v30];
        }
        __int16 v350 = (32 * ((v352 & 0x6000) != 0)) | (((v352 & 0x6000) == 0x4000) << 6) | (((v352 & 0x1800) == 2048) << 7) | (((v352 & 0x600) == 512) << 8) | v31 & 0xF;
        unint64_t v29 = v352 & 0xFFFFFFFFFFF0FFFFLL;
      }
      uint64_t ConstantSamplerGlobal = AGCLLVMUserObject::getOrCreateConstantSamplerGlobal(a1, v29, v351);
    }
    BYTE1(v356[2]) = (*a3 - 9) < 2;
    uint64_t v32 = *((unsigned __int8 *)a3 + 35);
    int64x2_t v320 = (AGCLLVMUserObject *)v25;
    uint64_t v321 = v17;
    int v322 = isConstantSampler;
    if (*((unsigned char *)a3 + 35))
    {
      uint64_t v33 = (_DWORD *)((char *)v19 - 32 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
      uint64_t v34 = *(void *)&v33[8 * v32];
      int v35 = (void *)(v34 + 24);
      if (*(_DWORD *)(v34 + 32) >= 0x41u) {
        int v35 = (void *)*v35;
      }
      if (*v35)
      {
        unint64_t v36 = *(unsigned __int8 **)&v33[8 * v32 + 8];
        if (!v36 || v36[16] > 0x14u)
        {
          Splat = *(llvm::Value **)&v33[8 * v32 + 8];
LABEL_70:
          *((void *)&v364 + 1) = Splat;
          std::string::size_type v25 = (unsigned __int8 *)v320;
          uint64_t v17 = v321;
          goto LABEL_71;
        }
        if ((llvm::Constant::isZeroValue((llvm::Constant *)v36) & 1) == 0)
        {
          if ((*(_DWORD *)(*(void *)v36 + 8) & 0xFE) == 0x12)
          {
            uint64_t v37 = *(unsigned int *)(*(void *)v36 + 32);
            llvm::ConstantInt::get();
            Splat = (llvm::Value *)llvm::ConstantDataVector::getSplat();
            if (v37)
            {
              for (uint64_t i = 0; i != v37; ++i)
              {
                Aggregateuint64_t Element = llvm::Constant::getAggregateElement((llvm::Constant *)v36);
                uint64_t v41 = (llvm::Value *)AggregateElement;
                unsigned int v42 = *(_DWORD *)(AggregateElement + 32);
                if (v42 > 0x40) {
                  uint64_t v43 = **(void **)(AggregateElement + 24);
                }
                else {
                  uint64_t v43 = (uint64_t)(*(void *)(AggregateElement + 24) << -(char)v42) >> -(char)v42;
                }
                if ((unint64_t)(v43 - 8) <= 0xFFFFFFFFFFFFFFEFLL) {
                  uint64_t v41 = (llvm::Value *)llvm::ConstantInt::get();
                }
                uint64_t v44 = *(void *)(*(void *)a1 - 24) + a1;
                __int16 v380 = 257;
                uint64_t v45 = (llvm::IRBuilderBase *)(v44 + 40);
                uint64_t v46 = (llvm::Value *)llvm::ConstantInt::get();
                Splat = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v45, Splat, v41, v46, (const llvm::Twine *)v378);
                int isConstantSampler = v322;
              }
            }
          }
          else
          {
            unsigned int v129 = *((_DWORD *)v36 + 8);
            if (v129 > 0x40) {
              uint64_t v130 = **((void **)v36 + 3);
            }
            else {
              uint64_t v130 = (uint64_t)(*((void *)v36 + 3) << -(char)v129) >> -(char)v129;
            }
            Splat = (llvm::Value *)v36;
            if ((unint64_t)(v130 - 8) <= 0xFFFFFFFFFFFFFFEFLL) {
              Splat = (llvm::Value *)llvm::ConstantInt::get();
            }
          }
          goto LABEL_70;
        }
      }
    }
LABEL_71:
    if (*((unsigned char *)a3 + 39) && BYTE1(v356[2]))
    {
      uint64_t v47 = llvm::ConstantInt::get();
    }
    else
    {
      if (!*((unsigned char *)a3 + 39)) {
        goto LABEL_77;
      }
      uint64_t v47 = *((void *)v19 + 4 * *((unsigned __int8 *)a3 + 39) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
    }
    uint64_t v365 = (llvm::Type **)v47;
LABEL_77:
    if (v318 == 16)
    {
      if (!v319) {
        LOBYTE(v356[2]) = 1;
      }
      if (*((unsigned char *)a3 + 45)) {
        v368[1] = *((void *)v19 + 4 * *((unsigned __int8 *)a3 + 45) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
      }
    }
    uint64_t v48 = *((unsigned __int8 *)a3 + 37);
    if (*((unsigned char *)a3 + 37))
    {
      *((void *)&v367 + 1) = *((void *)v19 + 4 * v48 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
      v368[0] = *((void *)v19 + 4 * v48 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF) + 4);
      int v366 = 2;
      goto LABEL_84;
    }
    if (*((unsigned char *)a3 + 36))
    {
      unsigned int v64 = (uint64_t *)((char *)v19 + 32 * *((unsigned __int8 *)a3 + 36) + -32 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
      uint64_t v65 = *v64;
      *(void *)&long long v367 = v64[4];
      long long v66 = (void *)(v65 + 24);
      if (*(_DWORD *)(v65 + 32) >= 0x41u) {
        long long v66 = (void *)*v66;
      }
      uint64_t v67 = (void *)*v66;
      int v366 = v67 != 0;
      if (HIDWORD(v353))
      {
        uint64_t v68 = *(void *)a1;
        if (!v67)
        {
          if (!(*(unsigned int (**)(uint64_t))(v68 + 320))(a1))
          {
            int v366 = 1;
            goto LABEL_84;
          }
          uint64_t v68 = *(void *)a1;
        }
        if (!(*(unsigned int (**)(uint64_t))(v68 + 368))(a1)) {
          goto LABEL_84;
        }
        int v366 = 0;
        uint64_t v69 = *(void *)(*(void *)a1 - 24) + v307;
        __int16 v70 = (llvm::Type **)AGCLLVMUserObject::buildSamplerArgumentPointer((uint64_t *)a1, ConstantSamplerGlobal, 1u);
        __int16 v380 = 257;
        uint64_t v72 = AGCLLVMBuilder::tryDeducePointeeType(v70, v71);
        uint64_t v73 = (uint64_t *)(v69 + 32);
        int isConstantSampler = v322;
        uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v73, v72, (uint64_t)v70, 0, (uint64_t)v378);
        goto LABEL_360;
      }
LABEL_354:
      int v366 = 3;
      *(void *)&long long v367 = 0;
      goto LABEL_84;
    }
    uint64_t v83 = *((unsigned __int8 *)a3 + 38);
    if (*((unsigned char *)a3 + 38))
    {
      if (HIDWORD(v353))
      {
        int v366 = 1;
        uint64_t v84 = *((void *)v19 + 4 * v83 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
      }
      else if (v353 == 3)
      {
        int v366 = 1;
        uint64_t v84 = llvm::ConstantInt::get();
      }
      else
      {
        uint64_t v84 = 0;
        int v366 = 3;
      }
      *(void *)&long long v367 = v84;
      if (!v306 || *a3 != 8 && *a3 != 3)
      {
LABEL_84:
        if (v313) {
          v368[2] = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)(*(void *)(*(void *)a1 - 24) + a1 + 32), *((llvm::Value **)v19 + 4 * *((unsigned __int8 *)a3 + 40)+ -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF)), 1);
        }
        if (*((unsigned char *)a3 + 41)) {
          uint64_t v369 = *((void *)v19 + 4 * *((unsigned __int8 *)a3 + 41) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
        }
        int v49 = *a3;
        if (*a3 == 8 || v49 == 3)
        {
          int DefaultRoundingMode = a3[6];
          uint64_t v51 = *(void *)a1;
          if (!DefaultRoundingMode)
          {
            int DefaultRoundingMode = AGCLLVMObject::getDefaultRoundingMode((AGCLLVMObject *)(a1 + *(void *)(v51 - 24)));
            uint64_t v51 = *(void *)a1;
          }
          uint64_t v52 = *(void *)(v51 - 24);
          int v53 = *(unsigned char **)(v52 + v326 + 32);
          if (DefaultRoundingMode == 2 && !v53[1769])
          {
            uint64_t v11 = (std::string *)(v307 + v52);
            uint64_t v12 = "The specified rounding mode is not supported on this device.";
            goto LABEL_390;
          }
          v356[0] = AGCLLVMTargetLowerer::getRTZMode(v53, DefaultRoundingMode);
          int v49 = *a3;
        }
        uint64_t v54 = *(void *)(*(void *)a1 - 24);
        if (*(unsigned char *)(*(void *)(v54 + v326 + 32) + 1771)) {
          BOOL v55 = v49 == 0;
        }
        else {
          BOOL v55 = 0;
        }
        if (v55 && AGCLLVMObject::getDefaultRoundingMode((AGCLLVMObject *)(a1 + v54)) == 1) {
          LOBYTE(v356[1]) = 1;
        }
        if (*((unsigned char *)a3 + 42))
        {
          uint64_t Select = (uint64_t *)*((void *)v19
                              + 4 * *((unsigned __int8 *)a3 + 42)
                              + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
          uint64_t v56 = *Select;
          if ((*(_DWORD *)(*Select + 8) & 0xFE) == 0x12) {
            uint64_t v56 = **(void **)(v56 + 16);
          }
          uint64_t v57 = *(void *)(*(void *)a1 - 24) + a1;
          if (v56 == *(void *)(v57 + 200) && (v356[0] & 0xFFFFFFFE) == 2)
          {
            uint64_t v58 = v57 + 32;
            long long v347 = *(_OWORD *)(v57 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v348, (llvm::IRBuilderBase *)(v57 + 40));
            int v349 = *(_DWORD *)(v58 + 104);
            AGCLLVMUserObject::buildEmulatedIsF16Format((unsigned char *)a1, &v347, (AGCLLVMUserObject *)v25);
            if (v348) {
              llvm::MetadataTracking::untrack();
            }
            uint64_t v59 = *(void *)(*(void *)a1 - 24) + a1;
            uint64_t v60 = *(void *)(v59 + 400);
            long long v344 = *(_OWORD *)(v59 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v345, (llvm::IRBuilderBase *)(v59 + 40));
            int v346 = *(_DWORD *)(v59 + 136);
            AGCLLVMTargetLowerer::buildRTZF16Value(v60, (uint64_t)&v344, Select, v356[0] == 3);
            if (v345) {
              llvm::MetadataTracking::untrack();
            }
            __int16 v380 = 257;
            uint64_t Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect();
            std::string::size_type v25 = (unsigned __int8 *)v320;
            int isConstantSampler = v322;
          }
        }
        if (*((unsigned char *)a3 + 43)) {
          uint64_t v371 = (llvm::CmpInst **)*((void *)v19
        }
                                   + 4 * *((unsigned __int8 *)a3 + 43)
                                   + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
        if (*((unsigned char *)a3 + 44))
        {
          uint64_t v61 = *((void *)v19 + 4 * *((unsigned __int8 *)a3 + 44) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
          uint64_t v62 = (void *)(v61 + 24);
          if (*(_DWORD *)(v61 + 32) >= 0x41u) {
            uint64_t v62 = (void *)*v62;
          }
          char v63 = *(unsigned char *)v62;
        }
        else
        {
          if (v308 != 4)
          {
LABEL_130:
            uint64_t GlobalVarValue = 0;
            int v316 = *a3;
            if (ConstantSamplerGlobal || *a3 == 8) {
              goto LABEL_161;
            }
            __p[0] = (void *)4;
            __p[1] = 0;
            int64x2_t v342 = 0;
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 336))(a1))
            {
              uint64_t v78 = v17;
              if (HIDWORD(v353)) {
                uint64_t v79 = "agc.nnorm_sampler_wrapper_non_1d";
              }
              else {
                uint64_t v79 = "agc.nnorm_sampler_wrapper_1d";
              }
              uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
              if (GlobalVariable)
              {
                uint64_t v81 = GlobalVariable;
              }
              else
              {
                if (HIDWORD(v353)) {
                  uint64_t v85 = "agc.nnorm_sampler_non_1d";
                }
                else {
                  uint64_t v85 = "agc.nnorm_sampler_1d";
                }
                char v86 = 1;
                uint64_t v87 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
                HIBYTE(v380) = 1;
                if (*v85)
                {
                  v378[0] = (void *)v85;
                  char v88 = 3;
                }
                else
                {
                  char v88 = 1;
                }
                LOBYTE(v380) = v88;
                llvm::GlobalVariable::GlobalVariable();
                *((unsigned char *)v87 + 80) |= 1u;
                unint64_t v131 = *(unsigned int *)(*(void *)(*(void *)(*(void *)a1 - 24) + v326 + 32) + 1700);
                unint64_t v132 = __clz(v131) ^ 0x13F;
                if (v131) {
                  unint64_t v133 = v132;
                }
                else {
                  unint64_t v133 = 0;
                }
                unint64_t v305 = v133 | v305 & 0xFFFFFFFFFFFF0000;
                llvm::GlobalObject::setAlignment();
                llvm::GlobalObject::setSection();
                uint64_t v134 = *(void *)(*(void *)a1 - 24) + a1;
                uint64_t v135 = *(void *)(v134 + 376);
                uint64_t v136 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v134 + 32), v87);
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v135, v136);
                v378[0] = v87;
                llvm::ConstantStruct::get();
                uint64_t v81 = llvm::User::operator new((llvm::User *)0x58);
                HIBYTE(v380) = 1;
                if (*v79)
                {
                  v378[0] = (void *)v79;
                  char v86 = 3;
                }
                int isConstantSampler = v322;
                LOBYTE(v380) = v86;
                LOBYTE(v304) = 0;
                uint64_t v303 = 0x100000002;
                int v302 = 0;
                llvm::GlobalVariable::GlobalVariable();
                *(unsigned char *)(v81 + 80) |= 1u;
                llvm::GlobalVariable::setInitializer();
                v378[0] = (void *)4;
                v378[1] = 0;
                unint64_t v137 = v81;
                unint64_t v379 = v81;
                if (v81 != -8192)
                {
                  unint64_t v137 = v81;
                  if (v81 != -4096)
                  {
                    unint64_t v137 = v81;
                    if (v81)
                    {
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v378);
                      unint64_t v137 = v379;
                    }
                  }
                }
                std::__tree<llvm::WeakVH>::__emplace_unique_key_args<llvm::WeakVH,llvm::WeakVH>((uint64_t *)(a1 + 824), v137, v378);
                if (v379 != -8192 && v379 != -4096 && v379) {
                  llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v378);
                }
              }
              llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)__p, v81);
              uint64_t GlobalVarValue = AGCLLVMBuilder::getGlobalVarValue(v342, v82);
              uint64_t v17 = v78;
              std::string::size_type v25 = (unsigned __int8 *)v320;
              goto LABEL_157;
            }
            if (*a3 == 3)
            {
              unint64_t v77 = 0x807BFF0000002049;
              if (!a3[1])
              {
LABEL_137:
                unint64_t v76 = v77 & 0xFFFFFFFFFFFF9FFFLL;
                goto LABEL_154;
              }
            }
            else
            {
              unint64_t v76 = 0x807BFF0000002049;
              if (*a3 != 2) {
                goto LABEL_154;
              }
              unint64_t v77 = 0x807BFF0000002000;
              if (!*((unsigned char *)a3 + 49))
              {
                unint64_t v77 = ((*(unsigned char *)(a1 + 14) << 6) | (8 * *(unsigned char *)(a1 + 14)) | *(unsigned char *)(a1 + 14)) | 0x807BFF0000002000;
                if (!a3[1]) {
                  goto LABEL_137;
                }
              }
            }
            unint64_t v76 = v77 & 0xFFFFFFFFFFFF9FFFLL | 0x2000;
LABEL_154:
            uint64_t v89 = *(void *)(*(void *)a1 - 24);
            if (*(_DWORD *)(*(void *)(v89 + v326 + 32) + 1780))
            {
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(v89 + a1 + 40), v19);
              uint64_t v90 = llvm::PointerType::get();
              uint64_t GlobalVarValue = AGCLLVMUserObject::getBindlessConstantSampler(a1, v76, 0, v90);
              int isConstantSampler = 1;
            }
            else
            {
              uint64_t v91 = AGCLLVMUserObject::getOrCreateConstantSamplerGlobal(a1, v76, 0);
              llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)__p, v91);
              uint64_t GlobalVarValue = AGCLLVMBuilder::getGlobalVarValue(v342, v92);
            }
LABEL_157:
            if (v342 != (AGCLLVMBuilder *)-8192 && v342 != (AGCLLVMBuilder *)-4096 && v342)
            {
              uint64_t v93 = GlobalVarValue;
              llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)__p);
              uint64_t GlobalVarValue = v93;
            }
LABEL_161:
            if (*((unsigned char *)a3 + 47))
            {
              uint64_t v94 = *((void *)v19 + 4 * *((unsigned __int8 *)a3 + 46) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
              if (v94)
              {
                if (*(unsigned char *)(v94 + 16) == 16)
                {
                  uint64_t v95 = (void *)(v94 + 24);
                  if (*(_DWORD *)(v94 + 32) >= 0x41u) {
                    uint64_t v95 = (void *)*v95;
                  }
                  __int16 v373 = *v95;
                }
              }
            }
            unint64_t v310 = (llvm::Value *)GlobalVarValue;
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40), v19);
            int v96 = (llvm::Value *)*((void *)v19
                                 + 4 * *((unsigned __int8 *)a3 + 34)
                                 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
            *(void *)&long long v364 = v96;
            int v97 = a3[1];
            BOOL v99 = v97 == 2 && *a3 != 8;
            if (v97 == 3 || v99)
            {
              int v96 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)(*(void *)(*(void *)a1 - 24) + a1 + 32), v96, 4);
              uint64_t v314 = 0;
            }
            else
            {
              if (!*((unsigned char *)a3 + 49))
              {
                uint64_t v314 = 0;
LABEL_229:
                uint64_t v156 = *(void *)(*(void *)a1 - 24) + a1;
                uint64_t v157 = *(unsigned char **)(v156 + 400);
                if (v157[1765] && !*(unsigned char *)(a1 + 20))
                {
                  unsigned int v167 = (AGCLLVMBuilder *)(v156 + 32);
                  if (*a3 == 2)
                  {
                    long long v336 = *(_OWORD *)(v156 + 88);
                    llvm::IRBuilderBase::getCurrentDebugLocation(&v337, (llvm::IRBuilderBase *)(v156 + 40));
                    int v338 = *((_DWORD *)v167 + 26);
                    (*(void (**)(unsigned char *, long long *, uint64_t, unsigned __int8 *, uint64_t *, void, void, void, int, uint64_t, int))(*(void *)v157 + 912))(v157, &v336, a1, v25, &v353, *((unsigned __int8 *)a3 + 39), *((unsigned __int8 *)a3 + 43), *((unsigned __int8 *)a3 + 41), v302, v303, v304);
                    if (v337) {
                      llvm::MetadataTracking::untrack();
                    }
                  }
                  else if (*a3 == 3)
                  {
                    if (a3[2] == 1) {
                      *(void *)&long long v364 = AGCLLVMBuilder::clampToWidth(v167, (llvm::CmpInst **)v96, 0x10u, 0);
                    }
                    int v324 = isConstantSampler;
                    uint64_t v168 = (llvm::Value *)llvm::ConstantInt::get();
                    if (*((unsigned char *)a3 + 39))
                    {
                      uint64_t v169 = *(void *)(*(void *)a1 - 24) + v307;
                      uint64_t v170 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer((unsigned char *)a1, *((AGCLLVMUserObject **)v19 - 4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF)), 2u);
                      __int16 v380 = 257;
                      uint64_t v172 = AGCLLVMBuilder::tryDeducePointeeType(v170, v171);
                      uint64_t v173 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v169 + 32), v172, (uint64_t)v170, 0, (uint64_t)v378);
                      uint64_t v174 = *(void *)(*(void *)a1 - 24) + a1;
                      __int16 v380 = 257;
                      unint64_t v175 = (llvm::IRBuilderBase *)(v174 + 40);
                      uint64_t v176 = (llvm::Value *)llvm::ConstantInt::get();
                      uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v175, v173, v176, (const llvm::Twine *)v378);
                      unsigned int v178 = (llvm::Value *)llvm::ConstantInt::get();
                      __int16 v343 = 257;
                      Sub = (llvm::Type **)llvm::IRBuilderBase::CreateSub(v175, Element, v178, (const llvm::Twine *)__p);
                      uint64_t v180 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
                      int v181 = v365;
                      uint64_t v182 = *v365;
                      __int16 v380 = 257;
                      ZExtOrTrunc = llvm::IRBuilderBase::CreateZExtOrTrunc(v180, Sub, v182, (const llvm::Twine *)v378);
                      __int16 v343 = 257;
                      ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v180, 34, v181, (uint64_t)ZExtOrTrunc, (uint64_t)__p);
                      __int16 v340 = 257;
                      uint64_t v168 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v180, v168, ICmp, (const llvm::Twine *)&v339);
                    }
                    if (*((unsigned char *)a3 + 43))
                    {
                      uint64_t v185 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
                      uint64_t v186 = v371;
                      uint64_t v187 = llvm::ConstantInt::get();
                      __int16 v380 = 257;
                      uint64_t v188 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v185, 34, v186, v187, (uint64_t)v378);
                      __int16 v343 = 257;
                      llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v185, v168, v188, (const llvm::Twine *)__p);
                    }
                    std::string::size_type v25 = (unsigned __int8 *)v320;
                    uint64_t v189 = (llvm::Value *)v364;
                    uint64_t v190 = *(void *)(*(void *)a1 - 24) + a1;
                    if ((*(_DWORD *)(*(void *)v364 + 8) & 0xFE) == 0x12)
                    {
                      __int16 v380 = 257;
                      uint64_t v191 = (llvm::IRBuilderBase *)(v190 + 40);
                      uint64_t v192 = (llvm::Value *)llvm::ConstantInt::get();
                      llvm::IRBuilderBase::CreateExtractElement(v191, v189, v192, (const llvm::Twine *)v378);
                      unsigned int v193 = (llvm::Value *)v364;
                      uint64_t v194 = *(void *)(*(void *)a1 - 24) + a1 + 32;
                      llvm::ConstantInt::get();
                      __int16 v380 = 257;
                      uint64_t v195 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
                      __int16 v343 = 257;
                      uint64_t v196 = (llvm::Value *)llvm::ConstantInt::get();
                      *(void *)&long long v364 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v194 + 8), v193, v195, v196, (const llvm::Twine *)__p);
                      std::string::size_type v25 = (unsigned __int8 *)v320;
                      uint64_t v17 = v321;
                    }
                    else
                    {
                      llvm::ConstantInt::get();
                      __int16 v380 = 257;
                      *(void *)&long long v364 = llvm::IRBuilderBase::CreateSelect();
                    }
                    int isConstantSampler = v324;
                  }
                }
                BYTE2(v356[1]) = !v319;
                if (*((unsigned char *)a3 + 28)) {
                  BOOL v158 = !v319;
                }
                else {
                  BOOL v158 = 0;
                }
                BYTE1(v356[1]) = v158;
                *(void *)&long long v359 = AGCLLVMUserObject::buildImageArgumentPointer((unsigned char *)a1, (AGCLLVMUserObject *)v25, 2u);
                *((void *)&v359 + 1) = AGCLLVMUserObject::buildImageArgumentPointer((unsigned char *)a1, (AGCLLVMUserObject *)v25, 3u);
                if (*a3 == 8 || *a3 == 3)
                {
                  *(void *)&long long v357 = AGCLLVMUserObject::buildBindlessIndexAsPtr((AGCLLVMUserObject *)a1, (llvm::Value *)v25);
                  *((void *)&v358 + 1) = AGCLLVMUserObject::buildImageArgumentPointer((unsigned char *)a1, (AGCLLVMUserObject *)v25, 1u);
                  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 392))(a1)) {
                    goto LABEL_240;
                  }
                  unsigned int v159 = 4;
                  uint64_t v160 = &v360;
                }
                else
                {
                  uint64_t v161 = AGCLLVMUserObject::buildBindlessIndexAsPtr((AGCLLVMUserObject *)a1, (llvm::Value *)v25);
                  unsigned int v159 = 0;
                  *(void *)&long long v357 = v161;
                  uint64_t v160 = &v358;
                }
                *(void *)uint64_t v160 = AGCLLVMUserObject::buildImageArgumentPointer((unsigned char *)a1, (AGCLLVMUserObject *)v25, v159);
LABEL_240:
                if (v316 == 8)
                {
                  uint64_t v164 = *((unsigned __int8 *)a3 + 32);
                  __int16 v361 = *(_WORD *)(a1 + 3564);
                  *(void *)&long long v362 = *((void *)v19 + 4 * v164 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
                  *((void *)&v362 + 1) = *((void *)v19 + 4 * v164 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF) + 4);
                  *(void *)&long long v363 = *((void *)v19 + 4 * v164 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF) + 8);
                  *((void *)&v363 + 1) = *((void *)v19 + 4 * v164 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF) + 12);
                  int v355 = a3[5];
                  BYTE2(v356[2]) = (*(uint64_t (**)(uint64_t))(*(void *)(a1
                                                                                  + *(void *)(*(void *)a1 - 24))
                                                                      + 216))(a1 + *(void *)(*(void *)a1 - 24)) ^ 1;
                  uint64_t v165 = *((void *)v19 + 4 * *((unsigned __int8 *)a3 + 48) + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF));
                  __int16 v166 = (void *)(v165 + 24);
                  if (*(_DWORD *)(v165 + 32) >= 0x41u) {
                    __int16 v166 = (void *)*v166;
                  }
                  if (*v166) {
                    uint64_t v376 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
                  }
                  goto LABEL_263;
                }
                if (v310)
                {
                  uint64_t v162 = *(void *)(*(void *)a1 - 24);
                  if (*(_DWORD *)(*(void *)(v162 + v326 + 32) + 1780))
                  {
                    *((void *)&v357 + 1) = AGCLLVMUserObject::buildBindlessSamplerIndex((AGCLLVMUserObject *)a1, v310);
                    uint64_t Value = AGCLLVMUserObject::buildSamplerArgumentPointer((uint64_t *)a1, (uint64_t)v310, 0);
                  }
                  else
                  {
                    LODWORD(__p[0]) = 0;
                    __int16 v380 = 257;
                    uint64_t Value = llvm::IRBuilderBase::CreateExtractValue(v162 + a1 + 40, (uint64_t)v310, (uint64_t)__p, 1, (uint64_t)v378);
                  }
                  *((void *)&v360 + 1) = Value;
                  goto LABEL_263;
                }
                *((void *)&v357 + 1) = AGCLLVMUserObject::buildBindlessSamplerIndex((AGCLLVMUserObject *)a1, (llvm::Value *)ConstantSamplerGlobal);
                *((void *)&v360 + 1) = AGCLLVMUserObject::buildSamplerArgumentPointer((uint64_t *)a1, ConstantSamplerGlobal, 0);
                if (isConstantSampler)
                {
                  if (v319) {
                    goto LABEL_266;
                  }
                  goto LABEL_274;
                }
                unsigned int v217 = *(unsigned __int8 *)(ConstantSamplerGlobal + 16);
                if (!ConstantSamplerGlobal || (unsigned int v218 = v217 - 28, v217 < 0x1C))
                {
                  if (!ConstantSamplerGlobal || v217 != 5) {
                    goto LABEL_320;
                  }
                  unsigned int v218 = *(unsigned __int16 *)(ConstantSamplerGlobal + 18);
                }
                if (v218 - 48 <= 2)
                {
                  do
                  {
                    int v219 = *(_DWORD *)(ConstantSamplerGlobal + 20);
                    if ((v219 & 0x40000000) != 0) {
                      uint64_t v220 = *(uint64_t **)(ConstantSamplerGlobal - 8);
                    }
                    else {
                      uint64_t v220 = (uint64_t *)(ConstantSamplerGlobal - 32 * (v219 & 0x7FFFFFF));
                    }
                    uint64_t ConstantSamplerGlobal = *v220;
                    unsigned int v217 = *(unsigned __int8 *)(*v220 + 16);
                    if (ConstantSamplerGlobal) {
                      BOOL v221 = v217 >= 0x1C;
                    }
                    else {
                      BOOL v221 = 0;
                    }
                    if (v221)
                    {
                      unsigned int v223 = v217 - 28;
                    }
                    else
                    {
                      if (ConstantSamplerGlobal) {
                        BOOL v222 = v217 == 5;
                      }
                      else {
                        BOOL v222 = 0;
                      }
                      if (!v222) {
                        break;
                      }
                      unsigned int v223 = *(unsigned __int16 *)(ConstantSamplerGlobal + 18);
                    }
                  }
                  while (v223 - 48 < 3);
                }
LABEL_320:
                if (v217 == 3)
                {
                  if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)ConstantSamplerGlobal) & 1) == 0)
                  {
                    v378[0] = 0;
                    if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)(a1 + 696), *(_DWORD *)(a1 + 712), ConstantSamplerGlobal, v378))uint64_t v224 = (char *)v378[0]; {
                    else
                    }
                      uint64_t v224 = (char *)(*(void *)(a1 + 696) + 48 * *(unsigned int *)(a1 + 712));
                    int v292 = (unsigned int *)(v224 + 40);
LABEL_372:
                    uint64_t v197 = *v292;
                    if (v197 != -1) {
                      HIBYTE(v356[1]) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 360))(a1, v197) & 1;
                    }
                    goto LABEL_264;
                  }
                }
                else if (v217 <= 0x14)
                {
                  if (v217 == 16)
                  {
                    uint64_t PtrToInt = ConstantSamplerGlobal;
                  }
                  else
                  {
                    uint64_t PtrToInt = llvm::ConstantExpr::getPtrToInt();
                    if (PtrToInt) {
                      BOOL v293 = *(unsigned char *)(PtrToInt + 16) == 16;
                    }
                    else {
                      BOOL v293 = 0;
                    }
                    if (!v293)
                    {
                      uint64_t PtrToInt = llvm::ConstantExpr::getPtrToInt();
                      if (*(unsigned char *)(PtrToInt + 16) != 16) {
                        uint64_t PtrToInt = 0;
                      }
                    }
                  }
                  if (*(_DWORD *)(PtrToInt + 32) > 0x40u)
                  {
                    uint64_t v294 = **(void **)(PtrToInt + 24);
                    if ((v294 & 0x4000000000000000) != 0) {
                      goto LABEL_263;
                    }
                  }
                  else
                  {
                    uint64_t v294 = *(void *)(PtrToInt + 24);
                    if ((v294 & 0x4000000000000000) != 0) {
                      goto LABEL_263;
                    }
                  }
                  if (v294 < (unint64_t)*(unsigned int *)(a1 + 672))
                  {
                    int v292 = (unsigned int *)(*(void *)(a1 + 664) + 4 * v294);
                    goto LABEL_372;
                  }
                }
LABEL_263:
                uint64_t v197 = 0xFFFFFFFFLL;
LABEL_264:
                if (v319)
                {
                  if (!isConstantSampler)
                  {
                    LOWORD(v378[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 344))(a1, v197);
                    unsigned int v198 = v378;
                    goto LABEL_277;
                  }
LABEL_266:
                  unsigned int v198 = (void **)&v350;
LABEL_277:
                  uint64_t v204 = (llvm::Value *)AGCLLVMUserObject::buildEmulatePCF((AGCLLVMUserObject *)a1, (uint64_t)&v353, v198);
                  goto LABEL_278;
                }
                if (v313) {
                  char v199 = isConstantSampler;
                }
                else {
                  char v199 = 1;
                }
                if ((v199 & 1) == 0
                  && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 344))(a1, v197) & 0x10) != 0)
                {
                  uint64_t v200 = *(void *)(*(void *)a1 - 24) + a1;
                  uint64_t v201 = *(void *)(v200 + 400);
                  long long v333 = *(_OWORD *)(v200 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v334, (llvm::IRBuilderBase *)(v200 + 40));
                  int v335 = *(_DWORD *)(v200 + 136);
                  v368[2] = (*(uint64_t (**)(uint64_t, long long *, void, void))(*(void *)v201 + 40))(v201, &v333, v368[2], 0);
                  if (v334) {
                    llvm::MetadataTracking::untrack();
                  }
                }
LABEL_274:
                uint64_t v202 = *(void *)(*(void *)a1 - 24) + a1;
                uint64_t v203 = *(void *)(v202 + 400);
                long long v330 = *(_OWORD *)(v202 + 88);
                llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)&v331, (llvm::IRBuilderBase *)(v202 + 40));
                int v332 = *(_DWORD *)(v202 + 136);
                uint64_t v204 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t *))(*(void *)v203 + 272))(v203, &v330, &v353);
                uint64_t v205 = v331;
                if (v331) {
                  llvm::MetadataTracking::untrack();
                }
LABEL_278:
                if (!v204)
                {
LABEL_367:
                  llvm::Instruction::eraseFromParent(v19);
                  goto LABEL_368;
                }
                uint64_t v206 = (uint64_t)v204;
                if (v318 == 16)
                {
                  uint64_t v206 = (uint64_t)v204;
                  if (!LOBYTE(v356[2]))
                  {
                    uint64_t v207 = *(void *)(*(void *)a1 - 24) + a1;
                    uint64_t v208 = *(void *)(v207 + 400);
                    long long v327 = *(_OWORD *)(v207 + 88);
                    llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)&v328, (llvm::IRBuilderBase *)(v207 + 40));
                    int v329 = *(_DWORD *)(v207 + 136);
                    uint64_t v206 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *))(*(void *)v208 + 288))(v208, &v327, v204);
                    uint64_t v205 = v328;
                    if (v328) {
                      llvm::MetadataTracking::untrack();
                    }
                  }
                }
                if (v314)
                {
                  uint64_t v209 = *(void *)(*(void *)(*(void *)a1 - 24) + v326 + 32);
                  int v210 = (*(uint64_t (**)(uint64_t))(*(void *)v209 + 840))(v209);
                }
                else
                {
                  int v210 = 0;
                }
                BOOL v211 = a3[1] == 2 && *(unsigned char *)(a1 + 20) == 0;
                int v212 = *a3;
                if (*a3 == 2 && v210 | v211)
                {
                  uint64_t v213 = (llvm::Constant **)v204;
                  if (v318 == 16)
                  {
                    uint64_t v214 = *(void *)(*(void *)a1 - 24) + a1 + 40;
                    LODWORD(__p[0]) = 0;
                    __int16 v380 = 257;
                    uint64_t v213 = (llvm::Constant **)llvm::IRBuilderBase::CreateExtractValue(v214, (uint64_t)v204, (uint64_t)__p, 1, (uint64_t)v378);
                  }
                  uint64_t NullValue = (llvm::BasicBlock *)llvm::Constant::getNullValue(*v213, v205);
                  long long v325 = v213;
                  if ((*((_DWORD *)*v213 + 2) & 0xFE) == 0x12) {
                    uint64_t v317 = (llvm::Constant *)**((void **)*v213 + 2);
                  }
                  else {
                    uint64_t v317 = *v213;
                  }
                  uint64_t v225 = *(void *)(*(void *)a1 - 24) + v307;
                  int v226 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer((unsigned char *)a1, (AGCLLVMUserObject *)v25, 2u);
                  __int16 v380 = 257;
                  uint64_t v228 = AGCLLVMBuilder::tryDeducePointeeType(v226, v227);
                  uint64_t v229 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v225 + 32), v228, (uint64_t)v226, 0, (uint64_t)v378);
                  uint64_t v230 = *(void *)(*(void *)a1 - 24) + a1;
                  __int16 v380 = 257;
                  int v231 = (llvm::IRBuilderBase *)(v230 + 40);
                  uint64_t v232 = (llvm::Value *)llvm::ConstantInt::get();
                  uint64_t v233 = llvm::IRBuilderBase::CreateExtractElement(v231, v229, v232, (const llvm::Twine *)v378);
                  int v234 = (llvm::Value *)v233;
                  if (v211)
                  {
                    uint64_t LShr = (uint64_t *)v233;
                    if ((void)v367)
                    {
                      uint64_t v236 = *(void *)(*(void *)a1 - 24) + a1 + 40;
                      uint64_t v237 = *(void *)v234;
                      __int16 v380 = 257;
                      uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v236, 39, v367, v237, (uint64_t)v378);
                      __int16 v239 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
                      __int16 v380 = 257;
                      uint64_t LShr = (uint64_t *)llvm::IRBuilderBase::CreateLShr(v239, v234, Cast, (const llvm::Twine *)v378);
                    }
                    v311 = v234;
                    uint64_t v240 = *(void *)(*(void *)a1 - 24) + a1;
                    BOOL v241 = (llvm::Value *)v364;
                    __int16 v380 = 257;
                    BOOL v242 = (llvm::IRBuilderBase *)(v240 + 40);
                    BOOL v243 = (llvm::Value *)llvm::ConstantInt::get();
                    uint64_t v244 = llvm::IRBuilderBase::CreateExtractElement(v242, v241, v243, (const llvm::Twine *)v378);
                    uint64_t v245 = *LShr;
                    __int16 v343 = 257;
                    uint64_t v315 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)v242, 39, v244, v245, (uint64_t)__p);
                    long long v246 = (AGCLLVMBuilder *)(*(void *)(*(void *)a1 - 24) + a1 + 32);
                    unsigned int v247 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer((unsigned char *)a1, v320, 4u);
                    Load = (llvm::Value *)AGCLLVMBuilder::CreateLoad(v246, v247, "packedFormatAndAlpha");
                    unint64_t v249 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
                    unsigned int v250 = (llvm::Value *)llvm::ConstantInt::get();
                    v378[0] = "alpha";
                    __int16 v380 = 259;
                    UIToFP = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v249, Load, v250, (const llvm::Twine *)v378);
                    if (*((unsigned __int8 *)v317 + 8) <= 6u)
                    {
                      uint64_t v252 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
                      __int16 v380 = 257;
                      UIToFP = (llvm::Value *)llvm::IRBuilderBase::CreateUIToFP(v252, UIToFP, v317, (const llvm::Twine *)v378);
                    }
                    unsigned int v253 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)(*(void *)(*(void *)a1 - 24) + a1 + 32), UIToFP, v317);
                    if ((*((_DWORD *)*v325 + 2) & 0xFE) == 0x12)
                    {
                      uint64_t v254 = **(void **)(*(void *)NullValue + 16);
                      uint64_t v255 = *(void *)a1;
                      uint64_t v256 = *(void *)(*(void *)a1 - 24);
                      if (v254 == *(void *)(v256 + a1 + 208 + 32))
                      {
                        __int16 v380 = 257;
                        unsigned int v253 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v256 + a1 + 40, 39, (uint64_t)v253, v254, (uint64_t)v378);
                        uint64_t v255 = *(void *)a1;
                      }
                      uint64_t v257 = *(void *)(v255 - 24) + a1;
                      __int16 v380 = 257;
                      int v258 = (llvm::IRBuilderBase *)(v257 + 40);
                      uint64_t v259 = (llvm::Value *)llvm::ConstantInt::get();
                      llvm::IRBuilderBase::CreateInsertElement(v258, NullValue, v253, v259, (const llvm::Twine *)v378);
                    }
                    unint64_t v260 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
                    __int16 v380 = 257;
                    uint64_t v261 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v260, 35, v315, (uint64_t)LShr, (uint64_t)v378);
                    uint64_t v262 = (uint64_t)LShr;
                    uint64_t v263 = (llvm::Value *)v364;
                    if ((*(_DWORD *)(*(void *)v364 + 8) & 0xFE) == 0x12)
                    {
                      uint64_t v264 = *(void *)(*(void *)a1 - 24) + a1;
                      __int16 v380 = 257;
                      uint64_t v265 = (llvm::IRBuilderBase *)(v264 + 40);
                      uint64_t v266 = (llvm::Value *)llvm::ConstantInt::get();
                      uint64_t v267 = llvm::IRBuilderBase::CreateExtractElement(v265, v263, v266, (const llvm::Twine *)v378);
                      uint64_t v268 = *(void *)v311;
                      __int16 v343 = 257;
                      uint64_t v269 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)v265, 39, v267, v268, (uint64_t)__p);
                      char v270 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
                      __int16 v380 = 257;
                      int v271 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v270, 35, v269, v262, (uint64_t)v378);
                      __int16 v343 = 257;
                      llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v270, v261, v271, (const llvm::Twine *)__p);
                    }
                    __int16 v380 = 257;
                  }
                  else
                  {
                    if (!v210)
                    {
LABEL_363:
                      if (v318 == 16)
                      {
                        uint64_t v291 = *(void *)(*(void *)a1 - 24) + a1 + 40;
                        LODWORD(__p[0]) = 0;
                        __int16 v380 = 257;
                        llvm::IRBuilderBase::CreateInsertValue(v291, (uint64_t)v204, v206, (uint64_t)__p, 1, (uint64_t)v378);
                      }
                      uint64_t v17 = v321;
                      goto LABEL_366;
                    }
                    if (*((unsigned __int8 *)v317 + 8) <= 6u)
                    {
                      uint64_t v272 = *(void *)(*(void *)a1 - 24);
                      uint64_t v273 = *(void *)(v272 + a1 + 168 + 32);
                      __int16 v380 = 257;
                      int v234 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v272 + a1 + 40, 49, v233, v273, (uint64_t)v378);
                    }
                    uint64_t v287 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)(*(void *)(*(void *)a1 - 24) + a1 + 32), v234, v317);
                    uint64_t v288 = *(void *)(*(void *)a1 - 24) + a1;
                    __int16 v380 = 257;
                    uint64_t v289 = (llvm::IRBuilderBase *)(v288 + 40);
                    v290 = (llvm::Value *)llvm::ConstantInt::get();
                    llvm::IRBuilderBase::CreateInsertElement(v289, NullValue, v287, v290, (const llvm::Twine *)v378);
                    __int16 v380 = 257;
                  }
                  uint64_t v206 = llvm::IRBuilderBase::CreateSelect();
                  goto LABEL_363;
                }
                uint64_t v17 = v321;
                if (v212 == 10)
                {
                  uint64_t v275 = *(void *)(*(void *)a1 - 24) + a1;
                  __int16 v380 = 257;
                  uint64_t v216 = (llvm::IRBuilderBase *)(v275 + 40);
                }
                else
                {
                  if (v212 != 9)
                  {
LABEL_366:
                    llvm::Value::replaceAllUsesWith();
                    goto LABEL_367;
                  }
                  uint64_t v215 = *(void *)(*(void *)a1 - 24) + a1;
                  __int16 v380 = 257;
                  uint64_t v216 = (llvm::IRBuilderBase *)(v215 + 40);
                }
                uint64_t v276 = (llvm::Value *)llvm::ConstantInt::get();
                llvm::IRBuilderBase::CreateExtractElement(v216, v204, v276, (const llvm::Twine *)v378);
                goto LABEL_366;
              }
              int v323 = isConstantSampler;
              int v100 = a3[2];
              uint64_t v101 = a1 + 240;
              if (v100 == 1) {
                uint64_t v101 = a1 + 248;
              }
              uint64_t v102 = *(void *)(*(void *)(*(void *)a1 - 24) + v101 + 32);
              uint64_t v103 = AGCLLVMUserObject::buildImageTextureBufferLength((AGCLLVMUserObject *)a1, (llvm::Value *)v25);
              uint64_t v104 = *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 400);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v104 + 920))(v104, v105, v106);
              uint64_t v107 = (llvm::Value *)llvm::ConstantInt::get();
              uint64_t v108 = *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 400);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v108 + 920))(v108, v109, v110);
              uint64_t v111 = llvm::ConstantInt::get();
              uint64_t v112 = *(void *)(*(void *)a1 - 24);
              uint64_t v113 = (llvm::Value *)v364;
              uint64_t v309 = (llvm::Value *)v111;
              if (v100 != 1)
              {
                uint64_t v114 = v112 + a1 + 32;
                uint64_t v115 = *(void *)(v112 + a1 + 232);
                if ((*(_DWORD *)(*(void *)v364 + 8) & 0xFE) == 0x12) {
                  uint64_t v115 = llvm::FixedVectorType::get();
                }
                if ((*(_DWORD *)(v115 + 8) & 0xFE) == 0x12) {
                  unsigned int v116 = *(unsigned __int8 *)(**(void **)(v115 + 16) + 8);
                }
                else {
                  unsigned int v116 = *(_DWORD *)(v115 + 8);
                }
                uint64_t v117 = (llvm::IRBuilderBase *)(v114 + 8);
                __int16 v380 = 257;
                if (v116 > 6) {
                  uint64_t FPExt = llvm::IRBuilderBase::CreateCast((uint64_t)v117, 39, (uint64_t)v113, v115, (uint64_t)v378);
                }
                else {
                  uint64_t FPExt = llvm::IRBuilderBase::CreateFPExt(v117, v113, (llvm::Type *)v115, (const llvm::Twine *)v378);
                }
                uint64_t v113 = (llvm::Value *)FPExt;
              }
              *(void *)&long long v364 = v113;
              uint64_t v119 = (uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
              __int16 v380 = 257;
              uint64_t v314 = llvm::IRBuilderBase::CreateICmp(v119, 36, (llvm::CmpInst **)v113, v103, (uint64_t)v378);
              int v120 = *a3;
              if (*a3 == 3)
              {
                uint64_t v121 = *(void *)(*(void *)(*(void *)a1 - 24) + v326 + 32);
                if ((*(unsigned int (**)(uint64_t))(*(void *)v121 + 840))(v121))
                {
                  uint64_t v122 = *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 88);
                  v378[0] = "skip_texture_buffer_write";
                  __int16 v380 = 259;
                  llvm::BasicBlock::splitBasicBlock();
                  uint64_t v123 = *(void *)(v122 + 40);
                  if (v123 == v122 + 40)
                  {
                    uint64_t v126 = 0;
                  }
                  else
                  {
                    int v124 = (llvm::Instruction *)(v123 - 24);
                    if (v123) {
                      uint64_t v125 = v123 - 24;
                    }
                    else {
                      uint64_t v125 = 0;
                    }
                    if (*(unsigned __int8 *)(v125 + 16) - 29 >= 0xB) {
                      uint64_t v126 = 0;
                    }
                    else {
                      uint64_t v126 = v124;
                    }
                  }
                  llvm::Instruction::eraseFromParent(v126);
                  v378[0] = "texture_buffer_write";
                  __int16 v380 = 259;
                  operator new();
                }
                int v120 = *a3;
              }
              if (v120 == 2
                && (uint64_t v127 = *(void *)(*(void *)(*(void *)a1 - 24) + v326 + 32),
                    (*(unsigned int (**)(uint64_t))(*(void *)v127 + 840))(v127)))
              {
                llvm::ConstantInt::get();
                __int16 v380 = 257;
              }
              else
              {
                uint64_t v128 = *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 400);
                (*(void (**)(uint64_t))(*(void *)v128 + 920))(v128);
                llvm::ConstantInt::get();
                __int16 v380 = 257;
              }
              *(void *)&long long v364 = llvm::IRBuilderBase::CreateSelect();
              uint64_t v138 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
              __int16 v380 = 257;
              int v139 = (llvm::Type **)llvm::IRBuilderBase::CreateAnd(v138, (llvm::Value *)v364, v107, (const llvm::Twine *)v378);
              uint64_t v140 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
              __int16 v380 = 257;
              uint64_t v141 = (llvm::Type **)llvm::IRBuilderBase::CreateLShr(v140, (llvm::Value *)v364, v309, (const llvm::Twine *)v378);
              __int16 v142 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
              uint64_t v143 = **(llvm::Type ***)(v102 + 16);
              __int16 v380 = 257;
              TruncOrBituint64_t Cast = llvm::IRBuilderBase::CreateTruncOrBitCast(v142, v139, v143, (const llvm::Twine *)v378);
              uint64_t v145 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
              uint64_t v146 = **(llvm::Type ***)(v102 + 16);
              __int16 v380 = 257;
              long long v147 = llvm::IRBuilderBase::CreateTruncOrBitCast(v145, v141, v146, (const llvm::Twine *)v378);
              uint64_t v148 = (llvm::Value *)llvm::UndefValue::get();
              uint64_t v149 = *(void *)(*(void *)a1 - 24) + a1;
              __int16 v380 = 257;
              uint64_t v150 = (llvm::IRBuilderBase *)(v149 + 40);
              unsigned int v151 = (llvm::Value *)llvm::ConstantInt::get();
              Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v150, v148, TruncOrBitCast, v151, (const llvm::Twine *)v378);
              uint64_t v153 = *(void *)(*(void *)a1 - 24) + a1;
              __int16 v380 = 257;
              unsigned int v154 = (llvm::IRBuilderBase *)(v153 + 40);
              uint64_t v155 = (llvm::Value *)llvm::ConstantInt::get();
              int v96 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v154, InsertElement, v147, v155, (const llvm::Twine *)v378);
              std::string::size_type v25 = (unsigned __int8 *)v320;
              uint64_t v17 = v321;
              int isConstantSampler = v323;
            }
            *(void *)&long long v364 = v96;
            goto LABEL_229;
          }
          char v63 = 0;
        }
        char v374 = v63;
        goto LABEL_130;
      }
      uint64_t v277 = *(void *)(*(void *)a1 - 24) + v307;
      uint64_t v278 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer((unsigned char *)a1, (AGCLLVMUserObject *)v25, 7u);
      __int16 v380 = 257;
      unsigned int v280 = AGCLLVMBuilder::tryDeducePointeeType(v278, v279);
      unint64_t v281 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v277 + 32), v280, (uint64_t)v278, 0, (uint64_t)v378);
      uint64_t v282 = *(void *)(*(void *)a1 - 24) + a1;
      long long v283 = (llvm::IRBuilderBase *)(v282 + 40);
      long long v284 = (llvm::Value *)v367;
      long long v285 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)(v282 + 32), v281, *(llvm::Type **)v367);
      __int16 v380 = 257;
      std::string::size_type v25 = (unsigned __int8 *)v320;
      long long v286 = v284;
      int isConstantSampler = v322;
      uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAdd(v283, v286, v285, (const llvm::Twine *)v378);
    }
    else if (*((unsigned char *)a3 + 49))
    {
      int v366 = 1;
      uint64_t AlignedLoad = llvm::ConstantInt::get();
    }
    else
    {
      if (!BYTE1(v356[2])) {
        goto LABEL_354;
      }
      int v366 = 0;
      uint64_t AlignedLoad = llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(*(void *)a1 - 24) + a1 + 152 + 32), v28);
    }
LABEL_360:
    *(void *)&long long v367 = AlignedLoad;
    goto LABEL_84;
  }
  uint64_t v295 = std::string::basic_string[abi:nn180100]<0>(v378, "sample");
  if (*a3 == 1)
  {
    uint64_t v296 = "sample_compare";
LABEL_394:
    MEMORY[0x1CB7A04E0](v295, v296);
  }
  else if (*a3 == 5)
  {
    uint64_t v296 = "gather_compare";
    goto LABEL_394;
  }
  std::operator+<char>();
  int v298 = std::string::append(&v339, " must be known at compile time");
  unsigned int v299 = (AGCLLVMBuilder *)v298->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v298->__r_.__value_.__l.__data_;
  int64x2_t v342 = v299;
  v298->__r_.__value_.__l.__size_ = 0;
  v298->__r_.__value_.__r.__words[2] = 0;
  v298->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v342) >= 0) {
    v300 = __p;
  }
  else {
    v300 = (void **)__p[0];
  }
  if (SHIBYTE(v342) >= 0) {
    std::string::size_type v301 = HIBYTE(v342);
  }
  else {
    std::string::size_type v301 = (std::string::size_type)__p[1];
  }
  std::string::append((std::string *)(v307 + *(void *)(*(void *)a1 - 24)), (const std::string::value_type *)v300, v301);
  if (SHIBYTE(v342) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v339.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v379) < 0) {
    operator delete(v378[0]);
  }
  return 0;
}

uint64_t AGCLLVMUserObject::buildBindlessImageArgumentPointer(unsigned __int8 *a1, uint64_t a2, int a3)
{
  BOOL v6 = a3 == 1;
  uint64_t v7 = &a1[24 * v6];
  int v8 = (llvm::Type **)*((void *)v7 + 297);
  if (!v8)
  {
    {
      uint64_t v51 = *(void *)(*(void *)&a1[*(void *)(*(void *)a1 - 24) + 400] + 824);
      AGCLLVMUserObject::buildBindlessImageArgumentPointer(llvm::Value *,ImageArgumentQuery::Enum)::bind_indices[0] = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 416))(v51);
      uint64_t v52 = *(void *)(*(void *)&a1[*(void *)(*(void *)a1 - 24) + 400] + 824);
      dword_1EA612854 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 176))(v52);
      dword_1EA612858 = (*(uint64_t (**)(void))(**(void **)(*(void *)&a1[*(void *)(*(void *)a1 - 24) + 400]
                                                           + 824)
                                             + 664))();
      dword_1EA61285C = (*(uint64_t (**)(void))(**(void **)(*(void *)&a1[*(void *)(*(void *)a1 - 24) + 400]
                                                           + 824)
                                             + 424))();
      uint64_t v53 = *(void *)(*(void *)&a1[*(void *)(*(void *)a1 - 24) + 400] + 824);
      dword_1EA612860 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 184))(v53);
      dword_1EA612864 = (*(uint64_t (**)(void))(**(void **)(*(void *)&a1[*(void *)(*(void *)a1 - 24) + 400]
                                                           + 824)
                                             + 672))();
      dword_1EA612868 = (*(uint64_t (**)(void))(**(void **)(*(void *)&a1[*(void *)(*(void *)a1 - 24) + 400]
                                                           + 824)
                                             + 432))();
      uint64_t v54 = *(void *)(*(void *)&a1[*(void *)(*(void *)a1 - 24) + 400] + 824);
      dword_1EA61286C = (*(uint64_t (**)(uint64_t))(*(void *)v54 + 192))(v54);
      dword_1EA612870 = (*(uint64_t (**)(void))(**(void **)(*(void *)&a1[*(void *)(*(void *)a1 - 24) + 400]
                                                           + 824)
                                             + 696))();
      dword_1EA612874 = (*(uint64_t (**)(void))(**(void **)(*(void *)&a1[*(void *)(*(void *)a1 - 24) + 400]
                                                           + 824)
                                             + 440))();
      uint64_t v55 = *(void *)(*(void *)&a1[*(void *)(*(void *)a1 - 24) + 400] + 824);
      dword_1EA612878 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 200))(v55);
      dword_1EA61287C = (*(uint64_t (**)(void))(**(void **)(*(void *)&a1[*(void *)(*(void *)a1 - 24) + 400]
                                                           + 824)
                                             + 704))();
    }
    int v9 = (&AGCLLVMUserObject::buildBindlessImageArgumentPointer(llvm::Value *,ImageArgumentQuery::Enum)::bind_index_names[2 * a1[3566]])[v6];
    if ((*(unsigned int (**)(unsigned __int8 *))(*(void *)&a1[*(void *)(*(void *)a1 - 24)] + 64))(&a1[*(void *)(*(void *)a1 - 24)]) == 29) {
      uint64_t v10 = 2;
    }
    else {
      uint64_t v10 = (*(unsigned int (**)(unsigned __int8 *))(*(void *)&a1[*(void *)(*(void *)a1 - 24)] + 64))(&a1[*(void *)(*(void *)a1 - 24)]) != 7
    }
         && (*(unsigned int (**)(unsigned __int8 *))(*(void *)&a1[*(void *)(*(void *)a1 - 24)] + 64))(&a1[*(void *)(*(void *)a1 - 24)]) != 22
         && (*(unsigned int (**)(unsigned __int8 *))(*(void *)&a1[*(void *)(*(void *)a1 - 24)] + 64))(&a1[*(void *)(*(void *)a1 - 24)]) != 8
         && (*(unsigned int (**)(unsigned __int8 *))(*(void *)&a1[*(void *)(*(void *)a1 - 24)] + 64))(&a1[*(void *)(*(void *)a1 - 24)]) != 3
         && (*(unsigned int (**)(unsigned __int8 *))(*(void *)&a1[*(void *)(*(void *)a1 - 24)] + 64))(&a1[*(void *)(*(void *)a1 - 24)]) != 4;
    unsigned int v11 = AGCLLVMUserObject::buildBindlessImageArgumentPointer(llvm::Value *,ImageArgumentQuery::Enum)::bind_indices[6 * a1[3566] + 3 * v6 + v10];
    uint64_t v12 = (llvm::Type *)llvm::PointerType::get();
    if (*v9)
    {
      v78[0] = "agc.texture_heap.";
      v78[2] = v9;
      __int16 v13 = 771;
    }
    else
    {
      v78[0] = "agc.texture_heap.";
      __int16 v13 = 259;
    }
    __int16 v79 = v13;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v12, (const llvm::Twine *)v78, v11, 0, 5, 1);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v7 + 2360), (uint64_t)GlobalBufferBinding);
    int v8 = (llvm::Type **)*((void *)v7 + 297);
  }
  uint64_t Cast = 0;
  switch(a3)
  {
    case 0:
    case 1:
      uint64_t v16 = (uint64_t)&a1[*(void *)(*(void *)a1 - 24) + 40];
      uint64_t v17 = llvm::PointerType::get();
      __int16 v79 = 257;
      uint64_t Cast = llvm::IRBuilderBase::CreateCast(v16, 49, (uint64_t)v8, v17, (uint64_t)v78);
      break;
    case 2:
      uint64_t v56 = (llvm::Value *)a2;
      uint64_t v18 = (llvm::Type *)llvm::FixedVectorType::get();
      goto LABEL_18;
    case 3:
      return Cast;
    case 9:
      uint64_t Cast = AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)&a1[*(void *)(*(void *)a1 - 24) + 32], *(llvm::Type **)&a1[*(void *)(*(void *)a1 - 24) + 240]);
      uint64_t v38 = &a1[*(void *)(*(void *)a1 - 24)];
      int v39 = (uint64_t *)(v38 + 40);
      uint64_t v40 = *((void *)v38 + 30);
      __int16 v79 = 257;
      uint64_t v41 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(v38 + 40), 39, a2, v40, (uint64_t)v78);
      llvm::IRBuilderBase::CreateAlignedStore(v39, v41, Cast, 0);
      break;
    default:
      uint64_t v56 = (llvm::Value *)a2;
      uint64_t v18 = *(llvm::Type **)&a1[*(void *)(*(void *)a1 - 24) + 232];
LABEL_18:
      uint64_t v19 = llvm::PointerType::get();
      uint64_t v20 = llvm::PointerType::get();
      uint64_t v21 = llvm::PointerType::get();
      uint64_t v22 = &a1[*(void *)(*(void *)a1 - 24)];
      std::string::size_type v23 = (AGCLLVMBuilder *)(v22 + 32);
      uint64_t v24 = *((void *)v22 + 50);
      int v25 = *(_DWORD *)(v24 + 1780);
      if (v25) {
        uint64_t v19 = v21;
      }
      uint64_t v26 = (llvm::Type **)(v24 + 1672);
      char v27 = (llvm::Type **)(v22 + 216);
      if (v25) {
        char v27 = v26;
      }
      size_t v28 = *v27;
      uint64_t Cast = AGCLLVMBuilder::createAllocaInEntryBlock(v23, v18);
      unint64_t v29 = (uint64_t *)&a1[*(void *)(*(void *)a1 - 24) + 40];
      __int16 v79 = 257;
      int v31 = AGCLLVMBuilder::tryDeducePointeeType(v8, v30);
      uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v29, v31, (uint64_t)v8, 0, (uint64_t)v78);
      __int16 v77 = 257;
      uint64_t v33 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v29, 49, AlignedLoad, v19, (uint64_t)v76);
      __int16 v75 = 257;
      uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v29, v28, v33, v56, (const llvm::Twine *)v74);
      __int16 v73 = 257;
      uint64_t v35 = llvm::IRBuilderBase::CreateCast((uint64_t)v29, 49, GEP, v20, (uint64_t)v72);
      switch(a3)
      {
        case 2:
          unint64_t v36 = &a1[*(void *)(*(void *)a1 - 24)];
          uint64_t v37 = *((void *)v36 + 50);
          long long v69 = *(_OWORD *)(v36 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v70, (llvm::IRBuilderBase *)(v36 + 40));
          int v71 = *((_DWORD *)v36 + 34);
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v37 + 632))(v37, &v69, v35, Cast);
          if (v70) {
            goto LABEL_27;
          }
          break;
        case 4:
          unsigned int v42 = &a1[*(void *)(*(void *)a1 - 24)];
          uint64_t v43 = *((void *)v42 + 50);
          long long v57 = *(_OWORD *)(v42 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v58, (llvm::IRBuilderBase *)(v42 + 40));
          int v59 = *((_DWORD *)v42 + 34);
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v43 + 664))(v43, &v57, v35, Cast);
          if (v58) {
            goto LABEL_27;
          }
          break;
        case 5:
          uint64_t v45 = &a1[*(void *)(*(void *)a1 - 24)];
          uint64_t v46 = *((void *)v45 + 50);
          long long v66 = *(_OWORD *)(v45 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v67, (llvm::IRBuilderBase *)(v45 + 40));
          int v68 = *((_DWORD *)v45 + 34);
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v46 + 640))(v46, &v66, v35, Cast);
          if (v67) {
            goto LABEL_27;
          }
          break;
        case 6:
          uint64_t v47 = &a1[*(void *)(*(void *)a1 - 24)];
          uint64_t v48 = *((void *)v47 + 50);
          long long v63 = *(_OWORD *)(v47 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v64, (llvm::IRBuilderBase *)(v47 + 40));
          int v65 = *((_DWORD *)v47 + 34);
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v48 + 648))(v48, &v63, v35, Cast);
          if (v64) {
            goto LABEL_27;
          }
          break;
        case 7:
          int v49 = &a1[*(void *)(*(void *)a1 - 24)];
          uint64_t v50 = *((void *)v49 + 50);
          long long v60 = *(_OWORD *)(v49 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v61, (llvm::IRBuilderBase *)(v49 + 40));
          int v62 = *((_DWORD *)v49 + 34);
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v50 + 656))(v50, &v60, v35, Cast);
          if (v61) {
LABEL_27:
          }
            llvm::MetadataTracking::untrack();
          break;
        default:
          return Cast;
      }
      break;
  }
  return Cast;
}

uint64_t AGCLLVMUserFragmentShader::hasSamplerImplicitDerivatives(AGCLLVMUserFragmentShader *this)
{
  return 1;
}

uint64_t AGCLLVMAGPFragmentShader::supportsConstantSamplers(AGCLLVMAGPFragmentShader *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::isConstantSampler(AGCLLVMUserObject *this, llvm::Value *a2, unint64_t *a3, unint64_t *a4)
{
  if (!a2) {
    return 0;
  }
  BOOL v6 = a2;
  unsigned int v8 = *((unsigned __int8 *)a2 + 16);
  unsigned int v9 = v8 - 28;
  if (v8 >= 0x1C) {
    goto LABEL_5;
  }
  if (v8 == 5)
  {
    unsigned int v9 = *((unsigned __int16 *)a2 + 9);
LABEL_5:
    BOOL v10 = v9 != 48;
    while ((v9 & 0xFFFFFFFE) == 0x30)
    {
      int v11 = *((_DWORD *)v6 + 5);
      if ((v11 & 0x40000000) != 0) {
        uint64_t v12 = (llvm::Value **)*((void *)v6 - 1);
      }
      else {
        uint64_t v12 = (llvm::Value **)((char *)v6 - 32 * (v11 & 0x7FFFFFF));
      }
      BOOL v6 = *v12;
      unsigned int v8 = *((unsigned __int8 *)*v12 + 16);
      if (v6) {
        BOOL v13 = v8 >= 0x1C;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13)
      {
        unsigned int v9 = v8 - 28;
      }
      else
      {
        if (v6) {
          BOOL v14 = v8 == 5;
        }
        else {
          BOOL v14 = 0;
        }
        if (!v14) {
          goto LABEL_23;
        }
        unsigned int v9 = *((unsigned __int16 *)v6 + 9);
      }
    }
    goto LABEL_37;
  }
  BOOL v10 = 1;
LABEL_23:
  if (v8 == 16)
  {
    uint64_t v16 = (uint64_t *)((char *)v6 + 24);
    unsigned int v17 = *((_DWORD *)v6 + 8);
    goto LABEL_25;
  }
LABEL_37:
  if (v8 != 3) {
    return 0;
  }
  if (llvm::GlobalValue::isDeclaration(v6)) {
    return 0;
  }
  uint64_t v25 = *((void *)v6 - 4);
  if (!v25) {
    return 0;
  }
  int v26 = *(unsigned __int8 *)(v25 + 16);
  if (v26 == 14)
  {
    uint64_t ElementAsInteger = llvm::ConstantDataSequential::getElementAsInteger(*((llvm::ConstantDataSequential **)v6 - 4));
    uint64_t v18 = llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)v25);
    goto LABEL_28;
  }
  if (v26 != 16) {
    return 0;
  }
  uint64_t v16 = (uint64_t *)(v25 + 24);
  unsigned int v17 = *(_DWORD *)(v25 + 32);
LABEL_25:
  if (v17 >= 0x41) {
    uint64_t v16 = (uint64_t *)*v16;
  }
  uint64_t v18 = 0;
  uint64_t ElementAsInteger = *v16;
LABEL_28:
  uint64_t v20 = *(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368);
  *(void *)unint64_t v29 = "air.version";
  __int16 v30 = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v20, (const llvm::Twine *)v29);
  if (!NamedMetadata)
  {
    if (!*((unsigned char *)this + 14)) {
      goto LABEL_46;
    }
LABEL_44:
    if (ElementAsInteger < 0) {
      goto LABEL_46;
    }
    return 0;
  }
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  if (!Operand) {
    goto LABEL_46;
  }
  uint64_t v23 = Operand;
  uint64_t v28 = 0;
  v29[0] = 0;
  parseMDInt(0, Operand, v29, (_DWORD *)&v28 + 1);
  v29[0] = 1;
  parseMDInt(0, v23, v29, &v28);
  if (HIDWORD(v28) <= 1) {
    goto LABEL_44;
  }
  if (v28 <= 5 && HIDWORD(v28) == 2) {
    goto LABEL_44;
  }
  if (!v10) {
    return 0;
  }
LABEL_46:
  uint64_t v27 = *(void *)(*(void *)this - 24);
  if (*(unsigned char *)(*(void *)((char *)this + v27 + 400) + 1775)
    && (!(*(unsigned int (**)(void))(*(void *)((char *)this + v27) + 64))()
     || (*(unsigned int (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24)) == 7))
  {
    uint64_t v18 = 0;
    ElementAsInteger &= 0xFFFFFFFFFF0FFFFFLL;
  }
  *a3 = ElementAsInteger;
  *a4 = v18;
  return 1;
}

uint64_t AGCLLVMUserObject::hasES1LodBias(AGCLLVMUserObject *this)
{
  return 0;
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildSampleFunction(AGCLLVMBuilder *a1, uint64_t a2, uint64_t a3)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  if ((*(_DWORD *)a3 - 6) < 3) {
    return (llvm::Value *)(*(uint64_t (**)(AGCLLVMBuilder *, uint64_t))(*(void *)a1 + 1504))(a1, a3);
  }
  if (*(_DWORD *)a3 == 3) {
    uint64_t v7 = AGCLLVMGen2TargetLowerer::convertWriteValue(a1, *(_DWORD *)(a3 + 8), *(llvm::Value **)(a3 + 224));
  }
  else {
    uint64_t v7 = 0;
  }
  Sampleruint64_t Function = AGCLLVMGen2TargetLowerer::getSamplerFunction((uint64_t)a1, (int *)a3);
  return AGCLLVMGen2TargetLowerer::buildReadWriteImage((uint64_t)a1, (int *)a3, (uint64_t)v7, SamplerFunction);
}

uint64_t AGCLLVMGen2TargetLowerer::getSamplerFunction(uint64_t a1, int *a2)
{
  v52[18] = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  int v5 = a2[1];
  if (v5) {
    int v6 = a2[1];
  }
  else {
    int v6 = *a2 == 3;
  }
  if (a2[2] == 6) {
    int v7 = 7;
  }
  else {
    int v7 = a2[2];
  }
  uint64_t v8 = **((void **)a2 + 17);
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12) {
    int v9 = *(unsigned __int8 *)(**(void **)(v8 + 16) + 8);
  }
  else {
    int v9 = *(_DWORD *)(v8 + 8);
  }
  uint64_t v48 = *((void *)a2 + 25);
  uint64_t v10 = *((void *)a2 + 27);
  uint64_t v49 = *((void *)a2 + 19);
  v51[0] = v52;
  v51[1] = (void *)0x1000000000;
  int v11 = (char **)(a1 + 1896);
  if ((v4 & 0xFFFFFFFE) == 4) {
    int v11 = (char **)(a1 + 1904);
  }
  if (v4 == 3) {
    int v11 = (char **)(a1 + 1912);
  }
  std::string::basic_string[abi:nn180100]<0>(&v50, *v11);
  if (*a2 != 3)
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(void *)(a1 + 192));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(void *)(a1 + 192));
  }
  uint64_t v12 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v12);
  uint64_t v13 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v13);
  uint64_t v14 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v14);
  if (*(unsigned char *)(a1 + 2240))
  {
    uint64_t v15 = **((void **)a2 + 17);
    if ((*(_DWORD *)(v15 + 8) & 0xFE) != 0x12) {
      goto LABEL_21;
    }
    uint64_t v16 = *(uint64_t **)(v15 + 16);
  }
  else
  {
    uint64_t v16 = (uint64_t *)(a1 + 200);
  }
  uint64_t v15 = *v16;
LABEL_21:
  if (v15 == *(void *)(a1 + 200))
  {
    unsigned int v17 = ".i";
  }
  else if (v15 == *(void *)(a1 + 192))
  {
    unsigned int v17 = ".ci16";
  }
  else
  {
    unsigned int v17 = "";
  }
  switch(v6)
  {
    case 0:
      std::string::append(&v50, ".1d");
      if (v9 != 13) {
        uint64_t v15 = *(void *)(a1 + 168);
      }
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v15);
      if (!v49) {
        goto LABEL_62;
      }
      std::string::append(&v50, ".array");
      uint64_t v18 = *(void *)(a1 + 192);
      goto LABEL_61;
    case 1:
      std::string::append(&v50, ".2d");
      if (v9 == 13) {
        uint64_t v19 = llvm::FixedVectorType::get();
      }
      else {
        uint64_t v19 = *(void *)(a1 + 224);
      }
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v19);
      if (v10) {
        std::string::append(&v50, ".msaa");
      }
      if (v49)
      {
        std::string::append(&v50, ".array");
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(void *)(a1 + 192));
      }
      if (v9 == 13) {
        goto LABEL_63;
      }
      if (v48)
      {
        std::string::append(&v50, ".shadow");
        uint64_t v21 = *(void *)(a1 + 168);
LABEL_50:
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v21);
      }
      goto LABEL_64;
    case 2:
      std::string::append(&v50, ".cube");
      if (v9 == 13) {
        uint64_t v20 = "stf";
      }
      else {
        uint64_t v20 = *(const std::string::value_type **)(a1 + 2208);
      }
      std::string::append(&v50, v20);
      if (!*(unsigned char *)(a1 + 1750) && v9 == 13)
      {
        uint64_t v22 = 0;
        goto LABEL_122;
      }
      if (*(unsigned char *)(a1 + 2216))
      {
        uint64_t v23 = *(void *)(a1 + 224);
      }
      else
      {
        if (v9 != 13)
        {
          uint64_t v24 = (uint64_t *)(a1 + 288);
          goto LABEL_57;
        }
        uint64_t v23 = llvm::FixedVectorType::get();
      }
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v23);
      uint64_t v24 = (uint64_t *)(a1 + 192);
LABEL_57:
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *v24);
      if (v49)
      {
        std::string::append(&v50, ".array");
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(void *)(a1 + 192));
      }
      if (v48)
      {
        std::string::append(&v50, ".shadow");
        uint64_t v18 = *(void *)(a1 + 168);
LABEL_61:
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v18);
      }
LABEL_62:
      if (v9 == 13) {
LABEL_63:
      }
        std::string::append(&v50, v17);
LABEL_64:
      switch(a2[40])
      {
        case 0:
          uint64_t v25 = *(void *)(a1 + 152);
          goto LABEL_73;
        case 1:
          uint64_t v26 = 192;
          if (v9 != 13) {
            uint64_t v26 = 152;
          }
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(void *)(a1 + v26));
          std::string::append(&v50, ".lod");
          break;
        case 2:
          std::string::append(&v50, ".grad");
          uint64_t v27 = a2[1];
          if (v27 > 3) {
            unsigned int v28 = 0;
          }
          else {
            unsigned int v28 = dword_1CADD68E0[v27];
          }
          if (*(unsigned char *)(a1 + 2216)) {
            BOOL v29 = v5 == 2;
          }
          else {
            BOOL v29 = 0;
          }
          int v30 = v29;
          unsigned int v31 = v28 - v30;
          if (v28 != v30)
          {
            do
            {
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(void *)(a1 + 224));
              --v31;
            }
            while (v31);
          }
          break;
        case 3:
          if (*((void *)a2 + 27) || (v4 & 0xFFFFFFFE) == 4 && (std::string::append(&v50, ".gather"), *a2 == 4))
          {
            uint64_t v25 = *(void *)(a1 + 192);
LABEL_73:
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, v25);
          }
          break;
        default:
          break;
      }
      if (*((void *)a2 + 18))
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(void *)(a1 + 192));
        std::string::append(&v50, ".offset");
      }
      if (*a2 == 3)
      {
        if (v7 == 8 || v7 == 4)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(void *)(a1 + 304));
          uint64_t v32 = ".4xi16";
LABEL_92:
          std::string::append(&v50, v32);
          goto LABEL_108;
        }
        if ((v7 & 0xFFFFFFFB) == 3)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(void *)(a1 + 312));
          uint64_t v32 = ".4xi32";
          goto LABEL_92;
        }
        uint64_t v46 = 288;
        if (v7 == 1)
        {
          uint64_t v46 = 280;
          uint64_t v47 = ".4xh";
        }
        else
        {
          uint64_t v47 = ".4xf";
        }
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(void *)(a1 + v46));
        std::string::append(&v50, v47);
        if (a2[4] == 1)
        {
          uint64_t v32 = ".rtz";
          goto LABEL_92;
        }
      }
      else
      {
        if (v7 == 8 || v7 == 4)
        {
          uint64_t v33 = (uint64_t *)(a1 + 304);
          uint64_t v34 = ".4xi16";
        }
        else
        {
          unsigned int v35 = v7 & 0xFFFFFFFB;
          unint64_t v36 = ".4xf";
          uint64_t v37 = (uint64_t *)(a1 + 288);
          if (v7 == 1)
          {
            uint64_t v37 = (uint64_t *)(a1 + 280);
            unint64_t v36 = ".4xh";
          }
          BOOL v38 = v35 == 3;
          if (v35 == 3) {
            uint64_t v33 = (uint64_t *)(a1 + 312);
          }
          else {
            uint64_t v33 = v37;
          }
          if (v38) {
            uint64_t v34 = ".4xi32";
          }
          else {
            uint64_t v34 = v36;
          }
        }
        uint64_t v39 = *v33;
        std::string::append(&v50, v34);
        uint64_t v40 = *(void *)(a1 + 184);
        v52[16] = v39;
        v52[17] = v40;
        llvm::StructType::get();
      }
LABEL_108:
      if (v49) {
        std::string::append(&v50, ".i16");
      }
      int v41 = a2[40];
      unsigned int v42 = ".f16";
      if (!v41) {
        goto LABEL_114;
      }
      if (v41 == 1)
      {
        if (v9 == 13) {
          unsigned int v42 = ".i16";
        }
LABEL_114:
        std::string::append(&v50, v42);
      }
      if (*a2 != 3) {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v51, *(void *)(a1 + 152));
      }
      llvm::FunctionType::get();
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v43 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if (!v50.__r_.__value_.__r.__words[0]) {
          goto LABEL_121;
        }
      }
      else
      {
        uint64_t v43 = &v50;
      }
      strlen((const char *)v43);
LABEL_121:
      llvm::Module::getOrInsertFunction();
      uint64_t v22 = v44;
LABEL_122:
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      if (v51[0] != v52) {
        free(v51[0]);
      }
      return v22;
    case 3:
      std::string::append(&v50, ".3d");
      if (v9 == 13)
      {
        std::string::append(&v50, v17);
        uint64_t v21 = llvm::FixedVectorType::get();
      }
      else
      {
        uint64_t v21 = *(void *)(a1 + 288);
      }
      goto LABEL_50;
    default:
      goto LABEL_64;
  }
}

uint64_t AGCLLVMUserObject::getTextureBiasStateForUnit(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::buildBindlessSamplerIndex(AGCLLVMUserObject *this, llvm::Value *a2)
{
  int v3 = (char *)this + *(void *)(*(void *)this - 24);
  if (!*(_DWORD *)(*((void *)v3 + 50) + 1780))
  {
    int v6 = (char *)this + *(void *)(*(void *)this - 24) + 40;
    goto LABEL_5;
  }
  uint64_t v4 = *((void *)v3 + 29);
  __int16 v11 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v3 + 40), 47, (uint64_t)a2, v4, (uint64_t)v10);
  int v6 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  if (!Cast)
  {
LABEL_5:
    uint64_t v7 = llvm::ConstantInt::get();
    uint64_t v8 = llvm::PointerType::get();
    __int16 v11 = 257;
    return llvm::IRBuilderBase::CreateCast((uint64_t)v6, 48, v7, v8, (uint64_t)v10);
  }
  uint64_t v7 = Cast;
  uint64_t v8 = llvm::PointerType::get();
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v6, 48, v7, v8, (uint64_t)v10);
}

llvm::Type *AGCLLVMBuilder::tryDeducePointeeType(llvm::Type **this, llvm::Value *a2)
{
  int v3 = *this;
  if ((llvm::Type::isOpaquePointerTy(*this) & 1) == 0) {
    return (llvm::Type *)**((void **)v3 + 2);
  }
  unsigned int v4 = *((unsigned __int8 *)this + 16);
  if (v4 <= 0x1B)
  {
    if (v4 != 5)
    {
      if (v4 <= 3) {
        return this[3];
      }
      return 0;
    }
    if (*((_WORD *)this + 9) != 34) {
      return 0;
    }
  }
  else
  {
    if (v4 == 59) {
      return this[8];
    }
    if (v4 != 62) {
      return 0;
    }
  }
  return (llvm::Type *)MEMORY[0x1F417C440](this);
}

uint64_t AGCLLVMUserFragmentShader::addWrapperPostfix(AGCLLVMUserFragmentShader *this, llvm::Value *a2)
{
  uint64_t v2 = this;
  v441[3] = *MEMORY[0x1E4F143B8];
  int v3 = (char *)this + 4944;
  unsigned int v4 = (char *)this + 4944;
  if (*((unsigned char *)this + 5845) && !*((unsigned char *)this + 5862))
  {
    v436 = "feedback_output";
    __int16 v439 = 259;
    operator new();
  }
  v395 = 0;
  int v5 = **((_DWORD **)this + 725);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 619);
    uint64_t v7 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v8 = v7 + 32;
    if (v6 == *((void *)v7 + 40) || v6 == *((void *)v7 + 39))
    {
      uint64_t v9 = *((void *)v7 + 50);
      long long v421 = *(_OWORD *)(v7 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)&v422, (llvm::IRBuilderBase *)(v7 + 40));
      int v423 = *((_DWORD *)v8 + 26);
      __int16 v11 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
      uint64_t v12 = (llvm::Type **)*((void *)this + 622);
      __int16 v431 = 257;
      uint64_t v14 = AGCLLVMBuilder::tryDeducePointeeType(v12, v13);
      uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v11 + 5, v14, (uint64_t)v12, 0, (uint64_t)v430);
      __int16 v439 = 257;
      uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v11 + 5), AlignedLoad, v16, (const llvm::Twine *)&v436);
      uint64_t v18 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)v9 + 32))(v9, &v421, Element, (*(_DWORD *)(*((void *)this + 614) + 32) >> 8) & 0xF);
      uint64_t v19 = v422;
      if (v422) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v20 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
      uint64_t v21 = (llvm::Type **)*((void *)this + 692);
      __int16 v439 = 257;
      uint64_t v22 = AGCLLVMBuilder::tryDeducePointeeType(v21, v19);
      uint64_t v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v20 + 5, v22, (uint64_t)v21, 0, (uint64_t)&v436);
      uint64_t v24 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      __int16 v439 = 257;
      uint64_t v25 = (llvm::Type **)llvm::IRBuilderBase::CreateAnd(v24, v23, v18, (const llvm::Twine *)&v436);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v25, *((void *)this + 692), 0);
      uint64_t v2 = this;
      int v5 = **((_DWORD **)this + 725);
      int v3 = v4;
    }
  }
  if ((v5 & 2) != 0)
  {
    uint64_t v26 = *((void *)v2 + 619);
    uint64_t v27 = (char *)v2 + *(void *)(*(void *)v2 - 24);
    unsigned int v28 = v27 + 32;
    if (v26 == *((void *)v27 + 40) || v26 == *((void *)v27 + 39))
    {
      BOOL v29 = (llvm::Type **)*((void *)v2 + 622);
      __int16 v439 = 257;
      int v30 = v2;
      unsigned int v31 = AGCLLVMBuilder::tryDeducePointeeType(v29, a2);
      uint64_t v32 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v28 + 1, v31, (uint64_t)v29, 0, (uint64_t)&v436);
      uint64_t v33 = (llvm::Value *)llvm::ConstantFP::get();
      uint64_t v34 = (char *)v30 + *(void *)(*(void *)v30 - 24);
      __int16 v439 = 257;
      unsigned int v35 = (llvm::IRBuilderBase *)(v34 + 40);
      unint64_t v36 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v37 = v35;
      int v3 = v4;
      Insertuint64_t Element = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement(v37, v32, v33, v36, (const llvm::Twine *)&v436);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)v30 + *(void *)(*(void *)v30 - 24) + 40), InsertElement, *((void *)v30 + 622), 0);
      uint64_t v2 = v30;
      int v5 = **((_DWORD **)v30 + 725);
    }
  }
  if ((v5 & 4) != 0)
  {
    uint64_t v39 = (char *)v2 + *(void *)(*(void *)v2 - 24);
    uint64_t v40 = (char *)*((void *)v39 + 25);
    uint64_t v41 = *((void *)v39 + 29);
    v436 = v40;
    uint64_t v437 = v41;
    unsigned int v42 = v2;
    llvm::StructType::get();
    uint64_t v43 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v436 = "agc.coverage";
    __int16 v439 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    uint64_t v44 = (char *)v42 + *(void *)(*(void *)v42 - 24);
    uint64_t v45 = *((void *)v44 + 47);
    uint64_t v46 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v44 + 32), v43);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v45, v46);
    ConstInBoundsGEP2_32 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)((char *)v42 + *(void *)(*(void *)v42 - 24) + 32), v43, 0, v47, v48, v49);
    uint64_t v54 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)((char *)v42 + *(void *)(*(void *)v42 - 24) + 32), v43, (llvm::Value *)1, v51, v52, v53);
    uint64_t v55 = (uint64_t *)((char *)v42 + *(void *)(*(void *)v42 - 24));
    __int16 v439 = 257;
    long long v57 = AGCLLVMBuilder::tryDeducePointeeType(ConstInBoundsGEP2_32, v56);
    uint64_t v58 = llvm::IRBuilderBase::CreateAlignedLoad(v55 + 5, v57, (uint64_t)ConstInBoundsGEP2_32, 0, (uint64_t)&v436);
    int v59 = (uint64_t *)((char *)v42 + *(void *)(*(void *)v42 - 24));
    __int16 v439 = 257;
    uint64_t v61 = AGCLLVMBuilder::tryDeducePointeeType(v54, v60);
    int v62 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v59 + 5, v61, (uint64_t)v54, 0, (uint64_t)&v436);
    long long v63 = (char *)v42 + *(void *)(*(void *)v42 - 24);
    uint64_t v64 = *((void *)v63 + 50);
    long long v418 = *(_OWORD *)(v63 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v419, (llvm::IRBuilderBase *)(v63 + 40));
    int v420 = *((_DWORD *)v63 + 34);
    int v65 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)v64 + 32))(v64, &v418, v58, (*(_DWORD *)(*((void *)v42 + 614) + 32) >> 8) & 0xF);
    if (v419) {
      llvm::MetadataTracking::untrack();
    }
    long long v66 = this;
    if (*((unsigned char *)this + 14))
    {
      int v3 = v4;
      if ((**((unsigned char **)this + 725) & 8) != 0)
      {
        uint64_t v67 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        __int16 v439 = 257;
        uint64_t Not = llvm::IRBuilderBase::CreateNot(v67, v65, (const llvm::Twine *)&v436);
        long long v66 = this;
        int v65 = (llvm::Value *)Not;
      }
    }
    else
    {
      int v3 = v4;
    }
    long long v69 = (AGCLLVMUserFragmentShader *)((char *)v66 + *(void *)(*(void *)v66 - 24) + 40);
    __int16 v439 = 257;
    uint64_t v70 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v69, v65, v62, (const llvm::Twine *)&v436);
    int v71 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
    uint64_t v72 = (llvm::Type **)*((void *)this + 692);
    __int16 v439 = 257;
    unsigned int v74 = AGCLLVMBuilder::tryDeducePointeeType(v72, v73);
    __int16 v75 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v71 + 5, v74, (uint64_t)v72, 0, (uint64_t)&v436);
    unint64_t v76 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    __int16 v439 = 257;
    __int16 v77 = (llvm::Type **)llvm::IRBuilderBase::CreateAnd(v76, v75, v70, (const llvm::Twine *)&v436);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v77, *((void *)this + 692), 0);
    uint64_t v2 = this;
  }
  uint64_t v390 = v3;
  if (v3[890])
  {
    if ((*(_DWORD *)(*((void *)v2 + 614) + 32) & 0xE00) != 0) {
      uint64_t v78 = (char *)v2 + 5720;
    }
    else {
      uint64_t v78 = (char *)v2 + 5696;
    }
    uint64_t v79 = *((void *)v78 + 2);
    uint64_t v80 = (uint64_t)v2 + *(void *)(*(void *)v2 - 24) + 40;
    uint64_t v81 = (unsigned int *)v2;
    llvm::ConstantFP::get();
    uint64_t Splat = llvm::ConstantDataVector::getSplat();
    __int16 v439 = 257;
    uint64_t FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub(v80, v79, Splat, (uint64_t)&v436);
    uint64_t v84 = AGCLLVMBuilder::buildDotProduct((AGCLLVMBuilder *)((char *)v81 + *(void *)(*(void *)v81 - 24) + 32), FSub, FSub);
    uint64_t v85 = llvm::ConstantFP::get();
    uint64_t v86 = (uint64_t)v81 + *(void *)(*(void *)v81 - 24) + 40;
    __int16 v439 = 257;
    uint64_t v87 = llvm::IRBuilderBase::CreateFSub(v86, v85, (uint64_t)v84, (uint64_t)&v436);
    if (v3[520])
    {
      if (v3[520])
      {
        llvm::ConstantFP::get();
        __int16 v439 = 257;
        uint64_t FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
        uint64_t v2 = (AGCLLVMUserFragmentShader *)v81;
        int v96 = (llvm::Value *)FCmpHelper;
      }
      else
      {
        uint64_t v2 = (AGCLLVMUserFragmentShader *)v81;
        if ((v3[520] & 2) != 0)
        {
          char v88 = (uint64_t *)((char *)v81 + *(void *)(*(void *)v81 - 24));
          uint64_t v89 = (llvm::Type **)*((void *)v2 + 692);
          __int16 v439 = 257;
          uint64_t v90 = AGCLLVMBuilder::tryDeducePointeeType(v89, a2);
          uint64_t v91 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v88 + 5, v90, (uint64_t)v89, 0, (uint64_t)&v436);
          llvm::ConstantFP::get();
          __int16 v439 = 257;
          llvm::IRBuilderBase::CreateFCmpHelper();
          llvm::ConstantInt::get();
          llvm::ConstantInt::get();
          __int16 v439 = 257;
          __int16 v92 = this;
          int v3 = v4;
          uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
          uint64_t v94 = (AGCLLVMUserFragmentShader *)((char *)v92 + *(void *)(*(void *)v92 - 24) + 40);
          __int16 v439 = 257;
          uint64_t v95 = (llvm::Type **)llvm::IRBuilderBase::CreateAnd(v94, v91, Select, (const llvm::Twine *)&v436);
          llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)v92 + *(void *)(*(void *)v92 - 24) + 40), v95, *((void *)v92 + 692), 0);
          uint64_t v2 = this;
        }
        int v96 = 0;
      }
    }
    else
    {
      int v97 = (char *)v81 + *(void *)(*(void *)v81 - 24);
      uint64_t v98 = *((void *)v97 + 50);
      long long v415 = *(_OWORD *)(v97 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)&v416, (llvm::IRBuilderBase *)(v97 + 40));
      int v417 = *((_DWORD *)v97 + 34);
      uint64_t v99 = llvm::ConstantFP::get();
      (*(void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void))(*(void *)v98 + 24))(v98, &v415, v99, v87, 2, v81[1456]);
      a2 = v416;
      if (v416) {
        llvm::MetadataTracking::untrack();
      }
      int v96 = 0;
      int v3 = v4;
      v4[524] = 1;
      uint64_t v2 = (AGCLLVMUserFragmentShader *)v81;
    }
    if ((*(unsigned char *)(*((void *)v2 + 614) + 33) & 0xE) == 0)
    {
      uint64_t v101 = (char *)v2 + *(void *)(*(void *)v2 - 24);
      uint64_t v102 = (uint64_t)(v101 + 32);
      uint64_t v103 = *((void *)v101 + 50);
      uint64_t v104 = *(void *)(v103 + 1536);
      if (v104) {
        size_t v105 = strlen(*(const char **)(v103 + 1536));
      }
      else {
        size_t v105 = 0;
      }
      uint64_t v106 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(v102, v104, v105, *(void *)(v102 + 168), *(void *)(v102 + 168));
      uint64_t v107 = this;
      uint64_t v108 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v109 = (llvm::Value *)*((void *)this + 714);
      __int16 v439 = 257;
      uint64_t v110 = (llvm::IRBuilderBase *)(v108 + 40);
      uint64_t v111 = (llvm::Value *)llvm::ConstantInt::get();
      *(void *)&long long v432 = llvm::IRBuilderBase::CreateExtractElement(v110, v109, v111, (const llvm::Twine *)&v436);
      __int16 v431 = 257;
      uint64_t v112 = llvm::IRBuilderBase::CreateCall((uint64_t)v110, *(void *)(v106 + 24), v106, (uint64_t)&v432, 1, (uint64_t)v430);
      uint64_t v113 = (uint64_t)v107 + *(void *)(*(void *)v107 - 24) + 40;
      uint64_t v114 = llvm::ConstantFP::get();
      __int16 v439 = 257;
      uint64_t v115 = llvm::IRBuilderBase::CreateFSub(v113, v114, (uint64_t)v112, (uint64_t)&v436);
      uint64_t v116 = (uint64_t)v107 + *(void *)(*(void *)v107 - 24) + 40;
      __int16 v439 = 257;
      uint64_t FMul = llvm::IRBuilderBase::CreateFMul(v116, (uint64_t)v112, v115, (uint64_t)&v436);
      __int16 v431 = 257;
      uint64_t FDiv = llvm::IRBuilderBase::CreateFDiv(v116, v87, FMul, (uint64_t)v430);
      uint64_t v119 = (char *)v107 + *(void *)(*(void *)v107 - 24);
      uint64_t v120 = *((void *)v119 + 50);
      long long v412 = *(_OWORD *)(v119 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)&v413, (llvm::IRBuilderBase *)(v119 + 40));
      int v414 = *((_DWORD *)v119 + 34);
      FPuint64_t Cast = (*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)v120 + 40))(v120, &v412, FDiv, 0);
      uint64_t v122 = v413;
      if (v413) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v123 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
      int v124 = (llvm::Type **)*((void *)this + 622);
      __int16 v439 = 257;
      uint64_t v125 = AGCLLVMBuilder::tryDeducePointeeType(v124, v122);
      uint64_t v126 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v123 + 5, v125, (uint64_t)v124, 0, (uint64_t)&v436);
      uint64_t v127 = *(void *)v126;
      uint64_t v128 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      __int16 v431 = 257;
      unsigned int v129 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v130 = llvm::IRBuilderBase::CreateExtractElement(v128, v126, v129, (const llvm::Twine *)v430);
      uint64_t v131 = *(void *)(*(void *)this - 24);
      uint64_t v132 = **(void **)(v127 + 16);
      __int16 v435 = 257;
      if (*(void *)FPCast != v132)
      {
        unint64_t v133 = (uint64_t *)((char *)this + v131 + 40);
        if (*(unsigned __int8 *)(FPCast + 16) > 0x14u)
        {
          __int16 v439 = 257;
          FPuint64_t Cast = llvm::CastInst::CreateFPCast();
          llvm::IRBuilderBase::Insert<llvm::Instruction>(v133, FPCast, (uint64_t)&v432);
        }
        else
        {
          uint64_t v134 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)((char *)this + v131 + 112) + 256))(*(void *)((char *)this + v131 + 112), FPCast, v132);
          FPuint64_t Cast = v134;
          if (v134 && *(unsigned __int8 *)(v134 + 16) >= 0x1Cu) {
            llvm::IRBuilderBase::Insert<llvm::Instruction>(v133, v134, (uint64_t)&v432);
          }
        }
      }
      __int16 v439 = 257;
      uint64_t v135 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)v128, v130, FPCast, (uint64_t)&v436);
      uint64_t v136 = (char *)this + *(void *)(*(void *)this - 24);
      __int16 v439 = 257;
      unint64_t v137 = (llvm::IRBuilderBase *)(v136 + 40);
      uint64_t v138 = (llvm::Value *)llvm::ConstantInt::get();
      int v139 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement(v137, v126, v135, v138, (const llvm::Twine *)&v436);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v139, *((void *)this + 622), 0);
      uint64_t v2 = this;
      int v3 = v390;
    }
  }
  else
  {
    int v96 = 0;
  }
  char v140 = v3[520];
  uint64_t v141 = v3;
  if (v140)
  {
    unsigned int v154 = (char *)v2 + *(void *)(*(void *)v2 - 24);
    uint64_t v155 = (uint64_t *)(v154 + 40);
    if ((*(unsigned char *)(*((void *)v2 + 725) + 1) & 8) != 0)
    {
      uint64_t v160 = (AGCLLVMBuilder *)(v154 + 32);
      uint64_t v161 = (llvm::Type **)*((void *)this + 622);
      __int16 v431 = 257;
      uint64_t v162 = AGCLLVMBuilder::tryDeducePointeeType(v161, a2);
      int v163 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v155, v162, (uint64_t)v161, 0, (uint64_t)v430);
      __int16 v439 = 257;
      uint64_t v164 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v157 = this;
      uint64_t v165 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v155, v163, v164, (const llvm::Twine *)&v436);
      __int16 v166 = AGCLLVMBuilder::f32Extend(v160, v165, 1);
      uint64_t v159 = AGCLLVMUserFragmentShader::buildAlphaQuantize(this, v166);
    }
    else
    {
      uint64_t v156 = (llvm::Type **)*((void *)v2 + 695);
      __int16 v439 = 257;
      uint64_t v157 = v2;
      BOOL v158 = AGCLLVMBuilder::tryDeducePointeeType(v156, a2);
      uint64_t v159 = llvm::IRBuilderBase::CreateAlignedLoad(v155, v158, (uint64_t)v156, 0, (uint64_t)&v436);
    }
    uint64_t v167 = v159;
    uint64_t v168 = *(void *)(*(void *)v157 - 24);
    uint64_t v169 = v157;
    if (v141[890])
    {
      __int16 v439 = 257;
      unint64_t v175 = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper();
      uint64_t v176 = (AGCLLVMUserFragmentShader *)((char *)v157 + *(void *)(*(void *)v157 - 24) + 40);
      __int16 v439 = 257;
      llvm::IRBuilderBase::CreateAnd(v176, v175, v96, (const llvm::Twine *)&v436);
      llvm::ConstantFP::get();
      llvm::ConstantFP::get();
      __int16 v439 = 257;
      uint64_t v177 = llvm::IRBuilderBase::CreateSelect();
      unsigned int v178 = (char *)v157 + *(void *)(*(void *)v157 - 24);
      uint64_t v179 = *((void *)v178 + 50);
      long long v409 = *(_OWORD *)(v178 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v410, (llvm::IRBuilderBase *)(v178 + 40));
      int v411 = *((_DWORD *)v178 + 34);
      uint64_t v180 = llvm::ConstantFP::get();
      int v181 = v169;
      (*(void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void))(*(void *)v179 + 24))(v179, &v409, v177, v180, 4, *((unsigned int *)v169 + 1456));
      if (!v410) {
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v170 = (char *)v157 + v168;
      uint64_t v171 = *(void *)((char *)v169 + v168 + 400);
      long long v406 = *(_OWORD *)((char *)v169 + v168 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v407, (AGCLLVMUserFragmentShader *)((char *)v169 + v168 + 40));
      int v408 = *((_DWORD *)v170 + 34);
      int v181 = v169;
      (*(void (**)(uint64_t, long long *, uint64_t, void, void, void))(*(void *)v171 + 24))(v171, &v406, v167, *((void *)v169 + 698), *((unsigned int *)v169 + 1398), *((unsigned int *)v169 + 1456));
      if (!v407) {
        goto LABEL_71;
      }
    }
    llvm::MetadataTracking::untrack();
LABEL_71:
    v141[524] = 1;
    uint64_t v2 = v181;
    goto LABEL_94;
  }
  if ((v3[520] & 0xC) != 0)
  {
    if ((v3[520] & 4) != 0)
    {
      uint64_t v172 = (uint64_t *)((char *)v2 + *(void *)(*(void *)v2 - 24));
      __int16 v142 = v2;
      uint64_t v173 = (llvm::Type **)*((void *)v2 + 686);
      __int16 v439 = 257;
      uint64_t v174 = AGCLLVMBuilder::tryDeducePointeeType(v173, a2);
      uint64_t v143 = llvm::IRBuilderBase::CreateAlignedLoad(v172 + 5, v174, (uint64_t)v173, 0, (uint64_t)&v436);
      char v140 = v3[520];
      if ((v140 & 8) != 0)
      {
LABEL_53:
        uint64_t v144 = (uint64_t *)((char *)v142 + *(void *)(*(void *)v142 - 24));
        uint64_t v145 = (llvm::Type **)*((void *)v142 + 689);
        __int16 v439 = 257;
        uint64_t v146 = AGCLLVMBuilder::tryDeducePointeeType(v145, a2);
        uint64_t v147 = llvm::IRBuilderBase::CreateAlignedLoad(v144 + 5, v146, (uint64_t)v145, 0, (uint64_t)&v436);
        if ((v3[520] & 2) != 0)
        {
LABEL_54:
          uint64_t v148 = (uint64_t *)((char *)v142 + *(void *)(*(void *)v142 - 24));
          uint64_t v149 = v3;
          uint64_t v150 = (llvm::Type **)*((void *)v142 + 692);
          __int16 v439 = 257;
          unsigned int v151 = AGCLLVMBuilder::tryDeducePointeeType(v150, a2);
          uint64_t v152 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v148 + 5, v151, (uint64_t)v150, 0, (uint64_t)&v436);
          if (v149[900])
          {
            uint64_t v153 = *(void *)((char *)v142 + *(void *)(*(void *)v142 - 24) + 400);
            if (*(void *)(v153 + 1592)) {
              strlen(*(const char **)(v153 + 1592));
            }
            uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
            uint64_t v188 = this;
            uint64_t v189 = (char *)this + *(void *)(*(void *)this - 24);
            __int16 v439 = 257;
            uint64_t v190 = llvm::IRBuilderBase::CreateCall((uint64_t)(v189 + 40), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)&v436);
            uint64_t v191 = (AGCLLVMUserFragmentShader *)((char *)v188 + *(void *)(*(void *)v188 - 24) + 40);
            uint64_t v192 = (llvm::Value *)llvm::ConstantInt::get();
            __int16 v439 = 257;
            unsigned int v193 = v190;
            __int16 v142 = this;
            Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v191, v192, v193, (const llvm::Twine *)&v436);
            uint64_t v195 = (AGCLLVMUserFragmentShader *)((char *)v188 + *(void *)(*(void *)v188 - 24) + 40);
            __int16 v439 = 257;
            uint64_t v152 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v195, v152, Shl, (const llvm::Twine *)&v436);
            uint64_t v141 = v390;
          }
          uint64_t v196 = (uint64_t *)((char *)v142 + *(void *)(*(void *)v142 - 24) + 40);
          uint64_t v197 = llvm::ConstantInt::get();
          __int16 v439 = 257;
          llvm::IRBuilderBase::CreateICmp(v196, 33, (llvm::CmpInst **)v152, v197, (uint64_t)&v436);
          llvm::ConstantFP::getNaN();
          __int16 v439 = 257;
          __int16 v142 = this;
          uint64_t v143 = llvm::IRBuilderBase::CreateSelect();
          if (*((int *)this + 1082) <= 1) {
            *((_DWORD *)this + 1082) = 2;
          }
          int v3 = v141;
        }
LABEL_79:
        unsigned int v198 = v142;
        uint64_t v199 = *(void *)((char *)v142 + *(void *)(*(void *)v142 - 24) + 400);
        int v200 = (*(uint64_t (**)(uint64_t))(*(void *)v199 + 880))(v199);
        if (v143 && v200)
        {
          uint64_t v202 = (uint64_t *)v142;
          if (!*((void *)v142 + 733))
          {
            uint64_t v203 = v3;
            uint64_t v204 = llvm::PointerType::get();
            v436 = "agc.viewport_depth_range_pointer_global";
            __int16 v439 = 259;
            uint64_t v205 = *(void *)(*(void *)((char *)v142 + *(void *)(*(void *)v142 - 24) + 400) + 824);
            unsigned int v208 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v205 + 264))(v205, v206, v207);
            uint64_t v209 = (llvm::Type *)v204;
            int v3 = v203;
            GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(v142, v209, (const llvm::Twine *)&v436, v208, 0, 5, 0);
            uint64_t v202 = (uint64_t *)v142;
            *((void *)v142 + 733) = GlobalBufferBinding;
          }
          if (!v202[720])
          {
            BOOL v211 = v3;
            int v212 = (llvm::ValueHandleBase *)(v202 + 718);
            v211[914] = 1;
            uint64_t v213 = v202;
            (*(void (**)(char **__return_ptr, uint64_t *, void, const char *, uint64_t))(*v202 + 512))(&v436, v202, *(uint64_t *)((char *)v202 + *(void *)(*v202 - 24) + 232), "air.viewport_array_index", 24);
            uint64_t v214 = AGCLLVMUserFragmentShader::replaceInterpolation(v213, (unsigned int *)&v436);
            llvm::ValueHandleBase::operator=(v212, (uint64_t)v214);
            if (v440 != v441) {
              free(v440);
            }
            uint64_t v202 = (uint64_t *)v142;
          }
          uint64_t v215 = (uint64_t *)((char *)v202 + *(void *)(*v202 - 24));
          uint64_t v216 = (llvm::Type **)v202[733];
          __int16 v439 = 257;
          unsigned int v217 = v202;
          unsigned int v218 = AGCLLVMBuilder::tryDeducePointeeType(v216, v201);
          int v219 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v215 + 5, v218, (uint64_t)v216, 0, (uint64_t)&v436);
          uint64_t v220 = (char *)v217 + *(void *)(*v217 - 24);
          BOOL v221 = (llvm::Type *)*((void *)v220 + 29);
          __int16 v439 = 257;
          BOOL v222 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v220 + 5, v221, (uint64_t)v219, 0, (uint64_t)&v436);
          uint64_t Cast = (llvm::CmpInst **)v217[720];
          uint64_t v224 = *v222;
          if (*Cast != (llvm::CmpInst *)*v222)
          {
            uint64_t v225 = (uint64_t)v217 + *(void *)(*v217 - 24) + 40;
            __int16 v439 = 257;
            uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(v225, 39, (uint64_t)Cast, v224, (uint64_t)&v436);
          }
          int v226 = (uint64_t *)((char *)v217 + *(void *)(*v217 - 24) + 40);
          __int16 v439 = 257;
          llvm::IRBuilderBase::CreateICmp(v226, 36, Cast, (uint64_t)v222, (uint64_t)&v436);
          llvm::ConstantInt::get();
          __int16 v431 = 257;
          uint64_t v227 = llvm::IRBuilderBase::CreateSelect();
          uint64_t v228 = llvm::PointerType::get();
          uint64_t v229 = (char *)v217 + *(void *)(*v217 - 24);
          uint64_t v230 = (llvm::Type *)*((void *)v229 + 29);
          int v231 = (llvm::Value *)llvm::ConstantInt::get();
          __int16 v439 = 257;
          uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v229 + 40), v230, v219, v231, (const llvm::Twine *)&v436);
          __int16 v431 = 257;
          uint64_t v233 = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)(v229 + 40), 49, GEP, v228, (uint64_t)v430);
          int v234 = (char *)v217 + *(void *)(*v217 - 24);
          uint64_t v235 = *((void *)v234 + 32);
          *(void *)&long long v432 = v227;
          *((void *)&v432 + 1) = llvm::ConstantInt::get();
          __int16 v439 = 257;
          uint64_t v236 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v234 + 40), v235, v233, (uint64_t **)&v432, 2, (uint64_t)&v436);
          __int16 v431 = 257;
          BOOL v238 = AGCLLVMBuilder::tryDeducePointeeType(v236, v237);
          llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v234 + 5, v238, (uint64_t)v236, 0, (uint64_t)v430);
          __int16 v239 = (char *)v217 + *(void *)(*v217 - 24);
          uint64_t v240 = *((void *)v239 + 32);
          *(void *)&long long v432 = v227;
          *((void *)&v432 + 1) = llvm::ConstantInt::get();
          __int16 v439 = 257;
          BOOL v241 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v239 + 40), v240, v233, (uint64_t **)&v432, 2, (uint64_t)&v436);
          __int16 v431 = 257;
          BOOL v243 = AGCLLVMBuilder::tryDeducePointeeType(v241, v242);
          llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v239 + 5, v243, (uint64_t)v241, 0, (uint64_t)v430);
          __int16 v439 = 257;
          llvm::IRBuilderBase::CreateFCmpHelper();
          __int16 v431 = 257;
          llvm::IRBuilderBase::CreateSelect();
          __int16 v439 = 257;
          llvm::IRBuilderBase::CreateFCmpHelper();
          __int16 v431 = 257;
          uint64_t v143 = llvm::IRBuilderBase::CreateSelect();
          unsigned int v198 = (AGCLLVMUserFragmentShader *)v217;
          uint64_t v141 = v390;
        }
        else
        {
          uint64_t v141 = v3;
        }
        uint64_t v244 = (char *)v198 + *(void *)(*(void *)v198 - 24);
        uint64_t v245 = *((void *)v244 + 50);
        long long v403 = *(_OWORD *)(v244 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v404, (llvm::IRBuilderBase *)(v244 + 40));
        int v405 = *((_DWORD *)v244 + 34);
        (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v245 + 608))(v245, &v403, v143, v147);
        if (v404) {
          llvm::MetadataTracking::untrack();
        }
        v141[524] = 1;
        uint64_t v2 = this;
        goto LABEL_94;
      }
    }
    else
    {
      __int16 v142 = v2;
      uint64_t v143 = 0;
      if ((v3[520] & 8) != 0) {
        goto LABEL_53;
      }
    }
    uint64_t v147 = 0;
    if ((v140 & 2) != 0) {
      goto LABEL_54;
    }
    goto LABEL_79;
  }
  if ((v3[520] & 2) != 0)
  {
    uint64_t v182 = (uint64_t *)((char *)v2 + *(void *)(*(void *)v2 - 24));
    uint64_t v183 = (llvm::Type **)*((void *)v2 + 692);
    __int16 v439 = 257;
    uint64_t v184 = v2;
    uint64_t v185 = AGCLLVMBuilder::tryDeducePointeeType(v183, a2);
    uint64_t v186 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v182 + 5, v185, (uint64_t)v183, 0, (uint64_t)&v436);
    if (v3[524])
    {
      if (v3[918])
      {
        uint64_t v2 = v184;
      }
      else
      {
        uint64_t v371 = v184;
        if (v3[900] && (*(unsigned char *)(*((void *)v184 + 614) + 33) & 0xE) != 0)
        {
          uint64_t v372 = *(void *)((char *)v184 + *(void *)(*(void *)v184 - 24) + 400);
          if (*(void *)(v372 + 1592)) {
            strlen(*(const char **)(v372 + 1592));
          }
          uint64_t v373 = AGCLLVMBuilder::getOrInsertFunction<>();
          char v374 = (char *)v184 + *(void *)(*(void *)v184 - 24);
          __int16 v439 = 257;
          char v375 = llvm::IRBuilderBase::CreateCall((uint64_t)(v374 + 40), **(void **)(*(void *)v373 + 16), v373, 0, 0, (uint64_t)&v436);
          uint64_t v376 = (AGCLLVMUserFragmentShader *)((char *)v184 + *(void *)(*(void *)v184 - 24) + 40);
          char v377 = (llvm::Value *)llvm::ConstantInt::get();
          __int16 v439 = 257;
          uint64_t v378 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v376, v377, v375, (const llvm::Twine *)&v436);
          unint64_t v379 = (AGCLLVMUserFragmentShader *)((char *)v184 + *(void *)(*(void *)v184 - 24) + 40);
          __int16 v439 = 257;
          uint64_t v380 = llvm::IRBuilderBase::CreateAnd(v379, v186, v378, (const llvm::Twine *)&v436);
          uint64_t v371 = v184;
          uint64_t v186 = (llvm::Value *)v380;
        }
        uint64_t v381 = (char *)v371 + *(void *)(*(void *)v371 - 24);
        v382 = (AGCLLVMBuilder *)(v381 + 32);
        uint64_t v383 = (uint64_t *)(v381 + 40);
        uint64_t v384 = llvm::ConstantInt::get();
        __int16 v439 = 257;
        ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v383, 32, (llvm::CmpInst **)v186, v384, (uint64_t)&v436);
        int v386 = AGCLLVMBuilder::splat(v382, 4, ICmp);
        uint64_t v2 = v184;
        v395 = v386;
      }
    }
    else
    {
      uint64_t v369 = (char *)v184 + *(void *)(*(void *)v184 - 24);
      uint64_t v370 = *((void *)v369 + 50);
      long long v400 = *(_OWORD *)(v369 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v401, (llvm::IRBuilderBase *)(v369 + 40));
      int v402 = *((_DWORD *)v369 + 34);
      (*(void (**)(uint64_t, long long *, llvm::Value *))(*(void *)v370 + 616))(v370, &v400, v186);
      if (v401) {
        llvm::MetadataTracking::untrack();
      }
      v141[524] = 1;
      uint64_t v2 = v184;
    }
  }
LABEL_94:
  unsigned int v246 = *(unsigned __int8 *)(*((void *)v2 + 614) + 32);
  uint64_t v247 = **(void **)(*(void *)(*((void *)v2 + 22) + 24) + 16);
  if (v247 == *(void *)((char *)v2 + *(void *)(*(void *)v2 - 24) + 176))
  {
    unsigned __int8 v251 = 0;
    uint64_t v252 = (unsigned __int8 *)v141;
  }
  else
  {
    uint64_t v248 = v2;
    unint64_t v249 = *(unsigned int *)(*((void *)v2 + 9) + 8);
    unsigned int v250 = *(llvm::CallBase **)(*(void *)(llvm::Module::getFunction() + 8) + 24);
    if (((llvm::CallBase::arg_end(v250) - ((void)v250 - 32 * (*((_DWORD *)v250 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0)
    {
      v436 = v438;
      uint64_t v437 = 0x800000000;
      llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v436, v249, 0);
      if (v249)
      {
        uint64_t v2 = v248;
        if (*(unsigned char *)(v247 + 8) == 16)
        {
          AGCLLVMBuilder::unboxStruct((uint64_t)v248 + *(void *)(*(void *)v248 - 24) + 32, *((unsigned char **)v250 - 4 * (*((_DWORD *)v250 + 5) & 0x7FFFFFF)), (uint64_t)&v436);
          uint64_t v2 = v248;
        }
        else
        {
          *(void *)v436 = *((void *)v250 - 4 * (*((_DWORD *)v250 + 5) & 0x7FFFFFF));
        }
        uint64_t v253 = 0;
        unsigned __int8 v251 = 0;
        do
        {
          uint64_t v254 = v2;
          uint64_t v255 = *(void *)(*((void *)v2 + 9) - 8 * *(unsigned int *)(*((void *)v2 + 9) + 8) + 8 * v253);
          if (isStringMDNode(*(llvm::MDString **)(v255 - 8 * *(unsigned int *)(v255 + 8)), "air.render_target")
            && (uint64_t v256 = *(void *)&v436[8 * v253]) != 0)
          {
            uint64_t v2 = v254;
            if (*(unsigned char *)(v256 + 16) == 21)
            {
              uint64_t v257 = *(void *)(*((void *)v254 + 11) + 8 * *(unsigned int *)(v256 + 32));
              if (v257
                && isStringMDNode(*(llvm::MDString **)(v257 - 8 * *(unsigned int *)(v257 + 8) + 8), "air.render_target"))
              {
                LODWORD(v432) = 0;
                LODWORD(v427) = 0;
                v430[0] = 2;
                parseMDInt(0, v257, v430, &v432);
                v430[0] = 1;
                parseMDInt(0, v255, v430, &v427);
                if (v432 == v427) {
                  int v258 = 1 << v432;
                }
                else {
                  LOBYTE(v258) = 0;
                }
                v251 |= v258;
              }
              uint64_t v2 = this;
            }
          }
          else
          {
            uint64_t v2 = v254;
          }
          ++v253;
        }
        while (v249 != v253);
      }
      else
      {
        unsigned __int8 v251 = 0;
        uint64_t v2 = v248;
      }
      if (v436 != v438)
      {
        uint64_t v259 = v2;
        free(v436);
        uint64_t v2 = v259;
      }
      uint64_t v252 = (unsigned __int8 *)v390;
    }
    else
    {
      unsigned __int8 v251 = 0;
      uint64_t v252 = (unsigned __int8 *)v141;
      uint64_t v2 = v248;
    }
  }
  unsigned int v260 = v246;
  if (v246)
  {
    uint64_t v261 = (AGCLLVMUserFragmentShader *)((char *)v2 + 4320);
    int v394 = v251;
    uint64_t v391 = (char *)v2 + 4336;
    v389 = (char *)v2 + 8;
    uint64_t v387 = (char *)v2 + 4688;
    v393 = (AGCLLVMUserFragmentShader *)((char *)v2 + 4320);
    do
    {
      unsigned int v399 = v260;
      unsigned int v262 = __clz(v260);
      uint64_t v263 = v262 ^ 0x1F;
      unsigned int v264 = 0x80000000 >> v262;
      int v265 = *v252;
      uint64_t v266 = (unsigned int *)*((void *)v2 + 725);
      unsigned int v267 = v266[2];
      if ((v264 & v394) != 0)
      {
        unsigned int v268 = *v266;
        if ((v268 & 0x20) != 0)
        {
          unsigned int v272 = (v268 >> 6) & 0x1F;
          BOOL v273 = v272 > 0x10;
          int v274 = (1 << v272) & 0x10014;
          if (v273 || v274 == 0) {
            int v271 = 15;
          }
          else {
            int v271 = 0;
          }
        }
        else
        {
          uint64_t v269 = *((void *)v2 + 727);
          if (v269)
          {
            unsigned int v270 = *(_DWORD *)(v269 + 16);
            if ((v270 & 1) == 0) {
              goto LABEL_125;
            }
          }
          else
          {
            unsigned int v270 = *(_DWORD *)(*((void *)v2 + 726) + 4 * v263 + 24);
            if ((v270 & 1) == 0)
            {
LABEL_125:
              int v271 = 0;
              goto LABEL_141;
            }
          }
          uint64_t v276 = v2;
          uint64_t v277 = v252;
          if (blendIsNoOpForPassthrough((v270 >> 21) & 7, (v270 >> 1) & 0x1F, (v270 >> 6) & 0x1F)) {
            int v278 = 0;
          }
          else {
            int v278 = 7;
          }
          int IsNoOpForPassthrough = blendIsNoOpForPassthrough(HIBYTE(v270) & 7, (unsigned __int16)v270 >> 11, HIWORD(v270) & 0x1F);
          uint64_t v2 = v276;
          if (IsNoOpForPassthrough) {
            int v271 = v278;
          }
          else {
            int v271 = v278 | 8;
          }
          uint64_t v252 = v277;
        }
      }
      else
      {
        int v271 = 15;
      }
LABEL_141:
      int v280 = v264 & v265;
      if ((v264 & v265) != 0) {
        int v281 = 15;
      }
      else {
        int v281 = 0;
      }
      if (v280)
      {
        int v397 = v281;
        int v398 = v271;
        uint64_t v282 = (void *)((char *)v2 + 32 * v263);
        long long v283 = (llvm::Type *)v282[619];
        uint64_t v284 = v282[622];
        long long v285 = (uint64_t *)&v389[*(void *)(*(void *)v2 - 24) + 32];
        __int16 v439 = 257;
        long long v286 = v2;
        uint64_t v289 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v285, v283, v284, 0, (uint64_t)&v436);
        uint64_t v290 = v282[654];
        if (v290)
        {
          uint64_t v291 = (llvm::Type *)v282[651];
          int v292 = (uint64_t *)&v389[*(void *)(*(void *)v286 - 24) + 32];
          __int16 v439 = 257;
          BOOL v293 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v292, v291, v290, 0, (uint64_t)&v436);
        }
        else
        {
          BOOL v293 = 0;
        }
        int v296 = **((_DWORD **)v286 + 725);
        uint64_t v297 = *((void *)v286 + 727);
        int v298 = v286;
        if (v297) {
          unsigned int v299 = (int *)(v297 + 16);
        }
        else {
          unsigned int v299 = (int *)(*((void *)v286 + 726) + 4 * v263 + 24);
        }
        uint64_t v295 = v289;
        int v300 = *v299;
        unsigned int v396 = v264;
        if (!(**((_DWORD **)v286 + 725) & 0x20 | *v299 & 1)) {
          goto LABEL_173;
        }
        if (*((unsigned char *)v393 + 72 * v263 + 76))
        {
          std::string::size_type v301 = v293;
          if (*((unsigned char *)v298 + 14)) {
            BOOL v302 = 1;
          }
          else {
            BOOL v302 = *((unsigned char *)v298 + 32) == 0;
          }
          uint64_t v303 = (char *)v298 + *(void *)(*(void *)v298 - 24);
          uint64_t v304 = *((void *)v303 + 50);
          long long v432 = *(_OWORD *)(v303 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v433, (llvm::IRBuilderBase *)(v303 + 40));
          int v434 = *((_DWORD *)v303 + 34);
          uint64_t v305 = AGCLLVMTargetLowerer::buildClampColor(v304, (uint64_t)&v432, v289, (uint64_t)&v391[72 * v263 + 44], v302);
          if (v433) {
            llvm::MetadataTracking::untrack();
          }
          if (v301)
          {
            int v306 = (char *)this + *(void *)(*(void *)this - 24);
            uint64_t v307 = *((void *)v306 + 50);
            long long v427 = *(_OWORD *)(v306 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v428, (llvm::IRBuilderBase *)(v306 + 40));
            int v429 = *((_DWORD *)v306 + 34);
            BOOL v293 = (llvm::Value *)AGCLLVMTargetLowerer::buildClampColor(v307, (uint64_t)&v427, v301, (uint64_t)&v391[72 * v263 + 44], v302);
            if (v428) {
              llvm::MetadataTracking::untrack();
            }
          }
          else
          {
            BOOL v293 = 0;
          }
          int v298 = this;
          uint64_t v295 = (llvm::Value *)v305;
        }
        if ((v296 & 0x20) != 0)
        {
          if ((*(_DWORD *)(*((void *)v298 + 614) + 4 * v263) & 0x1Fu) > 0x15
            || ((1 << (*(_DWORD *)(*((void *)v298 + 614) + 4 * v263) & 0x1F)) & 0x331000) == 0)
          {
            unsigned int v308 = v295;
            Framebuffer = AGCLLVMFragmentShader::buildReadFramebuffer(v393, v263);
            unint64_t v310 = &v391[72 * v263];
            int v313 = AGCLLVMObject::buildConvertColor((uint64_t)this + *(void *)(*(void *)this - 24), v308, *((llvm::Type **)v310 + 2), v310[42], v310[41], *((unsigned int *)v310 + 17), v311, v312);
            int v316 = AGCLLVMObject::buildConvertColor((uint64_t)this + *(void *)(*(void *)this - 24), Framebuffer, *((llvm::Type **)v310 + 2), v310[42], v310[41], *((unsigned int *)v310 + 17), v314, v315);
            int v298 = this;
            uint64_t v317 = v316;
            BOOL v318 = 0;
            int v271 = v398;
            uint64_t v295 = v313;
            switch((**((_DWORD **)this + 725) >> 6) & 0x1F)
            {
              case 1:
                uint64_t Xor = llvm::ConstantInt::get();
                goto LABEL_220;
              case 2:
                uint64_t v353 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v439 = 257;
                int v354 = (const llvm::Twine *)&v436;
                goto LABEL_205;
              case 3:
                int v355 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v439 = 257;
                v356 = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v355, v316, (const llvm::Twine *)&v436);
                __int16 v431 = 257;
                int v271 = v398;
                int v354 = (const llvm::Twine *)v430;
                uint64_t v353 = v355;
                uint64_t v295 = v313;
                goto LABEL_206;
              case 4:
                goto LABEL_175;
              case 5:
                long long v357 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v439 = 257;
                uint64_t v295 = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v357, v313, (const llvm::Twine *)&v436);
                __int16 v431 = 257;
                int v271 = v398;
                int v354 = (const llvm::Twine *)v430;
                uint64_t v353 = v357;
LABEL_205:
                v356 = v317;
LABEL_206:
                uint64_t Xor = llvm::IRBuilderBase::CreateAnd(v353, v295, v356, v354);
                goto LABEL_220;
              case 6:
                long long v358 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v439 = 257;
                uint64_t Xor = llvm::IRBuilderBase::CreateXor(v358, v313, v317, (const llvm::Twine *)&v436);
                goto LABEL_220;
              case 7:
                long long v359 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v439 = 257;
                long long v360 = (const llvm::Twine *)&v436;
                goto LABEL_215;
              case 8:
                __int16 v361 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v439 = 257;
                uint64_t v362 = llvm::IRBuilderBase::CreateOr(v361, v313, v316, (const llvm::Twine *)&v436);
                goto LABEL_218;
              case 9:
                __int16 v361 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v439 = 257;
                uint64_t v362 = llvm::IRBuilderBase::CreateXor(v361, v313, v316, (const llvm::Twine *)&v436);
                goto LABEL_218;
              case 0xA:
                long long v363 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v439 = 257;
                long long v364 = (const llvm::Twine *)&v436;
                uint64_t v295 = v317;
                goto LABEL_219;
              case 0xB:
                uint64_t v365 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v439 = 257;
                int v366 = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v365, v316, (const llvm::Twine *)&v436);
                __int16 v431 = 257;
                int v271 = v398;
                long long v360 = (const llvm::Twine *)v430;
                long long v359 = v365;
                uint64_t v295 = v313;
                goto LABEL_216;
              case 0xC:
                long long v363 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v439 = 257;
                long long v364 = (const llvm::Twine *)&v436;
                goto LABEL_219;
              case 0xD:
                long long v367 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v439 = 257;
                uint64_t v295 = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v367, v313, (const llvm::Twine *)&v436);
                __int16 v431 = 257;
                int v271 = v398;
                long long v360 = (const llvm::Twine *)v430;
                long long v359 = v367;
LABEL_215:
                int v366 = v317;
LABEL_216:
                uint64_t Xor = llvm::IRBuilderBase::CreateOr(v359, v295, v366, v360);
                goto LABEL_220;
              case 0xE:
                __int16 v361 = (AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                __int16 v439 = 257;
                uint64_t v362 = llvm::IRBuilderBase::CreateAnd(v361, v313, v316, (const llvm::Twine *)&v436);
LABEL_218:
                uint64_t v295 = (llvm::Value *)v362;
                __int16 v431 = 257;
                int v271 = v398;
                long long v364 = (const llvm::Twine *)v430;
                long long v363 = v361;
LABEL_219:
                uint64_t Xor = llvm::IRBuilderBase::CreateNot(v363, v295, v364);
                goto LABEL_220;
              case 0xF:
                uint64_t Xor = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v316, v313);
LABEL_220:
                int v298 = this;
                uint64_t v295 = (llvm::Value *)Xor;
                BOOL v318 = 0;
                break;
              case 0x10:
                BOOL v318 = 0;
                uint64_t v295 = v316;
                break;
              default:
                BOOL v318 = 0;
                uint64_t v295 = 0;
                goto LABEL_174;
            }
            goto LABEL_175;
          }
LABEL_173:
          BOOL v318 = 0;
LABEL_174:
          int v271 = v398;
        }
        else
        {
          if ((v300 & 1) == 0) {
            goto LABEL_173;
          }
          int v271 = v398;
          if ((*(_DWORD *)(*((void *)v298 + 614) + 4 * v263) & 0x1Fu) > 0x12
            || ((1 << (*(_DWORD *)(*((void *)v298 + 614) + 4 * v263) & 0x1F)) & 0x40F30) == 0)
          {
            uint64_t v325 = *((void *)v298 + 727);
            if (v325) {
              uint64_t v326 = (_DWORD *)(v325 + 16);
            }
            else {
              uint64_t v326 = (_DWORD *)(*((void *)v298 + 726) + 4 * v263 + 24);
            }
            uint64_t v388 = v326;
            unsigned int v327 = *v326;
            unint64_t v328 = &v391[72 * v263];
            long long v330 = (llvm::Type *)*((void *)v328 + 1);
            int v329 = v328 + 8;
            uint64_t v331 = v298;
            int v332 = (unsigned int *)(v329 + 60);
            int v335 = AGCLLVMObject::buildConvertColor((uint64_t)v298 + *(void *)(*(void *)v298 - 24), v295, v330, 0, 1, *((unsigned int *)v329 + 15), v287, v288);
            if (v293) {
              long long v336 = AGCLLVMObject::buildConvertColor((uint64_t)v331 + *(void *)(*(void *)v331 - 24), v293, *(llvm::Type **)v329, 0, 1, *v332, v333, v334);
            }
            else {
              long long v336 = 0;
            }
            uint64_t v337 = AGCLLVMFragmentShader::buildReadFramebuffer(v393, v263);
            int v338 = *(llvm::Type **)v329;
            std::string v339 = &v391[72 * v263];
            unsigned int v341 = v339[42];
            __int16 v340 = (unsigned __int8 *)(v339 + 42);
            long long v344 = AGCLLVMObject::buildConvertColor((uint64_t)v331 + *(void *)(*(void *)v331 - 24), v337, v338, v341, *(v340 - 1), *v332, v342, v343);
            BOOL v318 = v340[18] && ((*v388 >> 21) & 7u) - 1 <= 1 && (HIBYTE(*v388) & 7u) - 1 < 2;
            uint64_t v345 = (llvm::Type **)v335;
            int v346 = (llvm::Type **)v336;
            long long v347 = (llvm::Type **)v336;
            uint64_t v348 = (llvm::Type **)v335;
            int v349 = v344;
            __int16 v350 = (llvm::Value *)AGCLLVMUserFragmentShader::buildBlendEquation(this, v345, v346, v344, (v327 >> 21) & 7, (v327 >> 1) & 0x1F, (v327 >> 6) & 0x1F, (uint64_t)(v340 + 2), *v340, 1u);
            unint64_t v351 = (llvm::Value *)AGCLLVMUserFragmentShader::buildBlendEquation(this, v348, v347, v349, HIBYTE(v327) & 7, (unsigned __int16)v327 >> 11, HIWORD(v327) & 0x1F, (uint64_t)(v340 + 2), *v340, 0);
            uint64_t v352 = AGCLLVMBuilder::combineRGBA((AGCLLVMUserFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 32), v350, v351);
            int v298 = this;
            uint64_t v295 = (llvm::Value *)v352;
            goto LABEL_174;
          }
          BOOL v318 = 0;
        }
LABEL_175:
        uint64_t v261 = v393;
        if (*((unsigned char *)v393 + 72 * v263 + 76) && *((unsigned char *)v393 + 72 * v263 + 56))
        {
          if (*(unsigned char *)(*(void *)&v387[*(void *)(*(void *)v393 - 24) + 32] + 1731)) {
            BOOL v320 = *((unsigned char *)v393 + 72 * v263 + 80) != 0;
          }
          else {
            BOOL v320 = 1;
          }
          int v281 = v397;
          if (!v320 || v318)
          {
            uint64_t v294 = v298;
          }
          else
          {
            uint64_t v294 = v298;
            uint64_t v321 = (char *)v298 + *(void *)(*(void *)v298 - 24);
            uint64_t v322 = *((void *)v321 + 50);
            long long v424 = *(_OWORD *)(v321 + 88);
            int v323 = v295;
            llvm::IRBuilderBase::getCurrentDebugLocation(&v425, (llvm::IRBuilderBase *)(v321 + 40));
            int v426 = *((_DWORD *)v321 + 34);
            uint64_t v324 = AGCLLVMTargetLowerer::buildClampColor(v322, (uint64_t)&v424, v323, (uint64_t)&v391[72 * v263 + 44], 0);
            if (v425) {
              llvm::MetadataTracking::untrack();
            }
            int v281 = v397;
            int v271 = v398;
            uint64_t v295 = (llvm::Value *)v324;
          }
        }
        else
        {
          uint64_t v294 = v298;
          int v281 = v397;
        }
        unsigned int v264 = v396;
        uint64_t v252 = (unsigned __int8 *)v390;
        goto LABEL_188;
      }
      uint64_t v294 = v2;
      uint64_t v295 = (llvm::Value *)llvm::UndefValue::get();
LABEL_188:
      unsigned int v260 = v264 ^ v399;
      AGCLLVMFragmentShader::buildWriteFramebuffer(v261, v295, v263, v281 & v271 & ((v267 >> v263) & 1 | (8 * ((HIBYTE(v267) >> v263) & 1)) | (2* ((BYTE1(v267) >> v263) & 1)) & 0xFFFFFFFB | (4 * ((BYTE2(v267) >> v263) & 1))), v395);
      uint64_t v2 = v294;
    }
    while (v264 != v399);
  }
  return (*(uint64_t (**)(AGCLLVMUserFragmentShader *))(*(void *)v2 + 584))(v2);
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::assign(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(result + 12) < a2)
  {
    *(_DWORD *)(result + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = *(unsigned int *)(result + 8);
  }
  if (v4)
  {
    int v5 = *(void **)result;
    do
    {
      *v5++ = a3;
      --v4;
    }
    while (v4);
  }
  unint64_t v6 = v3 - a2;
  if (v3 < a2)
  {
    uint64_t v7 = (void *)(*(void *)result + 8 * v3);
    do
      *v7++ = a3;
    while (!__CFADD__(v6++, 1));
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void AGCLLVMBuilder::unboxStruct(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(*(void *)a2 + 12);
  unsigned int v7 = *(_DWORD *)(a3 + 8);
  if (v7 != v6)
  {
    if (v7 <= v6)
    {
      if (*(_DWORD *)(a3 + 12) < v6) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v7 != v6) {
        bzero((void *)(*(void *)a3 + 8 * v7), 8 * v6 - 8 * v7);
      }
    }
    *(_DWORD *)(a3 + 8) = v6;
  }
  if (a2[16] == 93)
  {
    uint64_t v8 = a2;
    do
    {
      if (*((_DWORD *)v8 + 18) != 1) {
        break;
      }
      uint64_t v9 = **((unsigned int **)v8 + 8);
      if (!*(void *)(*(void *)a3 + 8 * v9)) {
        *(void *)(*(void *)a3 + 8 * v9) = *((void *)v8 - 4);
      }
      uint64_t v8 = (unsigned char *)*((void *)v8 - 8);
    }
    while (v8[16] == 93 && v8 != 0);
  }
  unsigned int v15 = 0;
  if (v6)
  {
    unsigned int v11 = 0;
    uint64_t v12 = a1 + 8;
    do
    {
      if (!*(void *)(*(void *)a3 + 8 * v11))
      {
        v14[16] = 257;
        uint64_t Value = llvm::IRBuilderBase::CreateExtractValue(v12, (uint64_t)a2, (uint64_t)&v15, 1, (uint64_t)v14);
        unsigned int v11 = v15;
        *(void *)(*(void *)a3 + 8 * v15) = Value;
      }
      unsigned int v15 = ++v11;
    }
    while (v11 < v6);
  }
}

void AGCLLVMAGPFragmentShaderGen6::setupPerPrimitiveVaryings(AGCLLVMAGPFragmentShaderGen6 *this)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 1832))
  {
    uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
    long long v69 = *(_OWORD *)(v2 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v70, (llvm::IRBuilderBase *)(v2 + 40));
    int v71 = *((_DWORD *)v2 + 34);
    unint64_t v3 = (unsigned __int8 *)*((void *)this + 723);
    if (v3 && v3[16] >= 0x1Cu)
    {
      unint64_t v4 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      NextNonDebugInstructiouint64_t n = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)v3);
      llvm::IRBuilderBase::SetInsertPoint(v4, NextNonDebugInstruction);
    }
    else
    {
      uint64_t v6 = *(void *)(*((void *)this + 21) + 80);
      if (v6) {
        unsigned int v7 = (llvm::BasicBlock *)(v6 - 24);
      }
      else {
        unsigned int v7 = 0;
      }
      uint64_t v8 = (char **)((char *)this + *(void *)(*(void *)this - 24) + 40);
      uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v7);
      llvm::IRBuilderBase::SetInsertPoint(v8, (char *)v7, FirstInsertionPt);
    }
    __p[0] = 0;
    __p[1] = 0;
    LODWORD(v73) = 0;
    unsigned int v74 = 0;
    uint64_t v75 = 0;
    v76[0] = v77;
    v76[1] = (void *)0x500000000;
    llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)v76, 5uLL, -559038737);
    *(_OWORD *)std::string __p = xmmword_1CADD62F0;
    LODWORD(v73) = 0;
    uint64_t v75 = AGCLLVMUserFragmentShader::setupInterpolation(this, 7, 0, 1u);
    uint64_t v10 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)__p);
    unsigned int v11 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    __int16 v68 = 257;
    uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Shl = llvm::IRBuilderBase::CreateShl(v11, v10, v12, (const llvm::Twine *)v67);
    uint64_t v14 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v15 = *((void *)v14 + 30);
    __int16 v68 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v14 + 40), 39, Shl, v15, (uint64_t)v67);
    if (v76[0] != v77) {
      free(v76[0]);
    }
    AGCLLVMAGPFragmentShader::getFragmentVarying((uint64_t)__p, this, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232), "agc.per_prim.primitive_address", 0x1EuLL, 1, 3, 1, 7, 0);
    unsigned int v17 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)__p);
    uint64_t v18 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v19 = *((void *)v18 + 30);
    __int16 v68 = 257;
    uint64_t v20 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v18 + 40), 39, (uint64_t)v17, v19, (uint64_t)v67);
    uint64_t v21 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    __int16 v68 = 257;
    uint64_t v22 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v23 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v21, v20, v22, (const llvm::Twine *)v67);
    if (v76[0] != v77) {
      free(v76[0]);
    }
    uint64_t v24 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    LOWORD(v75) = 257;
    long long v57 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v24, Cast, v23, (const llvm::Twine *)__p);
    *((unsigned char *)this + 6444) = 1;
    if (!*((void *)this + 911))
    {
      AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying((uint64_t)__p, this, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232), "air.amplification_id", 0x14uLL);
      uint64_t v25 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)__p);
      llvm::ValueHandleBase::operator=((AGCLLVMAGPFragmentShaderGen6 *)((char *)this + 7272), (uint64_t)v25);
      *((unsigned char *)this + 5860) = 1;
      if (v76[0] != v77) {
        free(v76[0]);
      }
    }
    uint64_t v26 = *(void *)this;
    char v27 = *(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1762);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v73 = 0;
    unsigned int v74 = v76;
    uint64_t v75 = 0x800000000;
    v77[62] = 0xFFFFFFFFLL;
    char v78 = v27;
    v84[7] = 0;
    memset(v79, 0, sizeof(v79));
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    memset(v84, 0, 26);
    char v85 = 1;
    uint64_t v28 = *((unsigned int *)this + 1480);
    if (v28)
    {
      unint64_t v29 = *((void *)this + 739);
      uint64_t v30 = v28 << 6;
      do
      {
        GenericVaryingAllocator::addVarying((uint64_t)__p, v29);
        v29 += 64;
        v30 -= 64;
      }
      while (v30);
      uint64_t v26 = *(void *)this;
    }
    GenericVaryingAllocator::allocate((GenericVaryingAllocator *)__p, *(const AGCLLVMTargetLowerer **)((char *)this + *(void *)(v26 - 24) + 400));
    int v65 = 0;
    int v66 = 4 * DWORD1(v80);
    if (v78) {
      unsigned int v31 = (HIDWORD(v81) + 1) >> 1;
    }
    else {
      unsigned int v31 = HIDWORD(v81);
    }
    unsigned int v32 = v31 + DWORD1(v80);
    int v63 = 4 * v32;
    int v64 = 4 * (v32 + DWORD1(v83));
    uint64_t v33 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    uint64_t v34 = (llvm::Value *)llvm::ConstantInt::get();
    unsigned int v35 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v36 = *((void *)this + 911);
    uint64_t v37 = *((void *)v35 + 29);
    __int16 v68 = 257;
    BOOL v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v35 + 40), 39, v36, v37, (uint64_t)v67);
    __int16 v62 = 257;
    uint64_t Mul = llvm::IRBuilderBase::CreateMul(v33, v34, v38, (const llvm::Twine *)v61);
    uint64_t v40 = *((unsigned int *)this + 1832);
    if (v40)
    {
      uint64_t v41 = (llvm::Value *)Mul;
      uint64_t v42 = *((void *)this + 915);
      uint64_t v43 = v42 + 16 * v40;
      do
      {
        if (v75)
        {
          uint64_t v44 = v74;
          unint64_t v45 = (unint64_t)v75 << 6;
          while (*((_DWORD *)v44 + 4) != *(_DWORD *)v42)
          {
            v44 += 8;
            v45 -= 64;
            if (!v45) {
              goto LABEL_29;
            }
          }
        }
        else
        {
LABEL_29:
          uint64_t v44 = 0;
        }
        uint64_t v46 = *(uint64_t **)(v42 + 8);
        uint64_t Add = (llvm::Value *)llvm::ConstantInt::get();
        if (*((unsigned char *)v44 + 57))
        {
          unsigned int v48 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
          __int16 v68 = 257;
          uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v48, Add, v41, (const llvm::Twine *)v67);
        }
        uint64_t v49 = *(void *)(*(void *)this - 24);
        std::string v50 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + v49 + 40);
        uint64_t v51 = *(void *)((char *)this + v49 + 240);
        __int16 v68 = 257;
        unsigned int v52 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v50, 39, (uint64_t)Add, v51, (uint64_t)v67);
        __int16 v62 = 257;
        uint64_t v53 = llvm::IRBuilderBase::CreateAdd(v50, v57, v52, (const llvm::Twine *)v61);
        uint64_t v54 = (char *)this + *(void *)(*(void *)this - 24) + 40;
        uint64_t v55 = *v46;
        __int16 v68 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v54, 48, v53, v55, (uint64_t)v67);
        llvm::Value::replaceAllUsesWith();
        v42 += 16;
      }
      while (v42 != v43);
    }
    uint64_t v56 = (char *)this + *(void *)(*(void *)this - 24) + 32;
    long long v58 = v69;
    uint64_t v59 = v70;
    if (v70) {
      llvm::MetadataTracking::track();
    }
    int v60 = v71;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v58, (uint64_t)(v56 + 8));
    if (v59) {
      llvm::MetadataTracking::untrack();
    }
    v67[0] = (void **)v79;
    std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](v67);
    llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)&v74);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v70) {
      llvm::MetadataTracking::untrack();
    }
  }
}

uint64_t AGCLLVMUserVertexShader::setupShaderOutputs(AGCLLVMUserVertexShader *this)
{
  uint64_t v1 = this;
  uint64_t v513 = *MEMORY[0x1E4F143B8];
  uint64_t v448 = (char *)this + 4880;
  uint64_t Function = (llvm::Function *)llvm::Module::getFunction();
  uint64_t v2 = *(llvm::CallBase **)(*((void *)Function + 1) + 24);
  uint64_t v3 = llvm::CallBase::arg_end(v2);
  long long v432 = (char **)v2;
  unint64_t v4 = (llvm::Value **)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  if (((v3 - (void)v4) & 0x1FFFFFFFE0) == 0)
  {
    unint64_t v6 = 0;
    uint64_t v430 = 0;
    uint64_t v5 = 0;
    uint64_t v499 = v501;
    uint64_t v500 = 0x1000000000;
    v496 = v498;
    uint64_t v497 = 0x1000000000;
LABEL_6:
    char v7 = 1;
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)*v4;
  uint64_t v430 = *v4;
  if (*(unsigned char *)(v5 + 8) == 16)
  {
    unint64_t v6 = *(unsigned int *)(v5 + 12);
    uint64_t v499 = v501;
    uint64_t v500 = 0x1000000000;
    v496 = v498;
    uint64_t v497 = 0x1000000000;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v499 = v501;
    uint64_t v500 = 0x1000000000;
    v496 = v498;
    uint64_t v497 = 0x1000000000;
    unint64_t v6 = 1;
  }
  llvm::SmallVectorImpl<unsigned int>::append((uint64_t)&v496, v6);
  char v7 = 0;
LABEL_9:
  memset(v495, 0, sizeof(v495));
  int v453 = 0;
  uint64_t NullValue = (llvm::Type **)llvm::ConstantInt::get();
  uint64_t Add = (llvm::Type **)llvm::ConstantInt::get();
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40), (llvm::Instruction *)v432);
  v493[0] = v494;
  v493[1] = (void *)0x800000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)v493, v6, 0);
  uint64_t v449 = v1;
  if ((v7 & 1) == 0)
  {
    if (*(unsigned char *)(v5 + 8) == 16) {
      AGCLLVMBuilder::unboxStruct((uint64_t)v1 + *(void *)(*(void *)v1 - 24) + 32, v430, (uint64_t)v493);
    }
    else {
      *(void *)v493[0] = v430;
    }
    uint64_t v64 = 0;
    __int16 v431 = 0;
    uint64_t v443 = 0;
    uint64_t v445 = (uint64_t)v1 + 4320;
    uint64_t v9 = v448;
    while (1)
    {
      uint64_t v65 = *(void *)(*((void *)v1 + 9) - 8 * *(unsigned int *)(*((void *)v1 + 9) + 8) + 8 * v64);
      uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v65 - 8 * *(unsigned int *)(v65 + 8)));
      uint64_t v68 = v67;
      long long v69 = (llvm::Value *)*((void *)v493[0] + v64);
      if (v9[202])
      {
        unint64_t v70 = 1;
        do
        {
          unint64_t v71 = *(unsigned int *)(v65 + 8);
          if (v70 >= v71) {
            break;
          }
          if (isStringMDNode(*(llvm::MDString **)(v65 - 8 * v71 + 8 * v70), "air.shared")) {
            goto LABEL_59;
          }
          ++v70;
        }
        while (v9[202]);
        uint64_t v72 = 1;
      }
      else
      {
LABEL_59:
        uint64_t v72 = 0;
      }
      if (v68 <= 16)
      {
        if (v68 == 12)
        {
          BOOL v83 = *(void *)String == 0x69736F702E726961 && *(_DWORD *)(String + 8) == 1852795252;
          uint64_t v1 = v449;
          if (v83)
          {
            v448[212] = v72;
            uint64_t v9 = v448;
            unint64_t v84 = *(unsigned int *)(v65 + 8);
            if (v84 >= 2)
            {
              unint64_t v85 = 1;
              while (!isStringMDNode(*(llvm::MDString **)(v65 - 8 * v84 + 8 * v85), "air.invariant"))
              {
                ++v85;
                unint64_t v84 = *(unsigned int *)(v65 + 8);
                if (v85 >= v84) {
                  goto LABEL_143;
                }
              }
              v448[179] = 1;
            }
LABEL_143:
            uint64_t v443 = (unsigned __int8 *)v69;
            goto LABEL_122;
          }
          goto LABEL_121;
        }
        if (v68 != 14)
        {
LABEL_120:
          uint64_t v1 = v449;
LABEL_121:
          uint64_t v9 = v448;
          goto LABEL_122;
        }
        BOOL v76 = *(void *)String == 0x6E696F702E726961 && *(void *)(String + 6) == 0x657A69735F746E69;
        uint64_t v1 = v449;
        if (!v76) {
          goto LABEL_121;
        }
        v448[213] = v72;
        uint64_t v9 = v448;
        __int16 v431 = v69;
      }
      else
      {
        switch(v68)
        {
          case 17:
            if (*(void *)String == 0x70696C632E726961
              && *(void *)(String + 8) == 0x636E61747369645FLL
              && *(unsigned char *)(String + 16) == 101)
            {
              uint64_t v1 = v449;
              char v86 = (*(uint64_t (**)(AGCLLVMUserVertexShader *, llvm::Value *, uint64_t, _OWORD *, int *))(*(void *)v449 + 488))(v449, v69, v65, v495, &v453);
              v448[216] = v72;
              uint64_t v9 = v448;
              if ((v86 & 1) == 0)
              {
                uint64_t v428 = 0;
                goto LABEL_434;
              }
              break;
            }
            BOOL v80 = *(void *)String == 0x747265762E726961
               && *(void *)(String + 8) == 0x757074756F5F7865
               && *(unsigned char *)(String + 16) == 116;
            uint64_t v1 = v449;
            if (v80)
            {
              std::string __p = 0;
              uint64_t v463 = 0;
              uint64_t v464 = 0;
              if ((*(unsigned int (**)(AGCLLVMUserVertexShader *, uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(void *)v449 + 496))(v449, v5, v64, v65, &v459, v72))
              {
                llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v499, v461, (uint64_t)v69);
                GenericVaryingAllocator::addVarying(v445, (unint64_t)&v459);
              }
              else if ((*(_DWORD *)(*(void *)v69 + 8) & 0xFE) == 0x12 {
                     && (!MGGetBoolAnswer()
              }
                      || (uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DISABLE_VARYING_SPLITTING", v87)) == 0
                      || *Value == 48
                      || !atoi(Value))
                     || MGGetBoolAnswer()
                     && (uint64_t v90 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_FORCE_VARYING_SPLITTING", v89)) != 0
                     && *v90 != 48
                     && atoi(v90))
              {
                long long __dst = 0u;
                long long v509 = 0u;
                unsigned int v91 = AGCLLVMBuilder::unboxVector((AGCLLVMUserVertexShader *)((char *)v449 + *(void *)(*(void *)v449 - 24) + 32), v69, (llvm::Value **)&__dst);
                if (v91)
                {
                  uint64_t v92 = 0;
                  uint64_t v93 = v91;
                  do
                  {
                    if ((*(unsigned int (**)(AGCLLVMUserVertexShader *, uint64_t, uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(void *)v449 + 504))(v449, v5, v64, v65, &v459, v72, v92))
                    {
                      llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v499, v461, *((void *)&__dst + v92));
                      GenericVaryingAllocator::addVarying(v445, (unint64_t)&v459);
                    }
                    ++v92;
                  }
                  while (v93 != v92);
                }
              }
              if (SHIBYTE(v464) < 0) {
                operator delete(__p);
              }
            }
            goto LABEL_121;
          case 24:
            BOOL v82 = *(void *)String == 0x776569762E726961
               && *(void *)(String + 8) == 0x7272615F74726F70
               && *(void *)(String + 16) == 0x7865646E695F7961;
            uint64_t v1 = v449;
            if (!v82) {
              goto LABEL_121;
            }
            v448[214] = v72;
            uint64_t v9 = v448;
            v448[153] = 1;
            uint64_t NullValue = (llvm::Type **)v69;
            break;
          case 29:
            BOOL v75 = *(void *)String == 0x646E65722E726961
               && *(void *)(String + 8) == 0x65677261745F7265
               && *(void *)(String + 16) == 0x5F79617272615F74
               && *(void *)(String + 21) == 0x7865646E695F7961;
            uint64_t v1 = v449;
            if (!v75) {
              goto LABEL_121;
            }
            v448[215] = v72;
            uint64_t v9 = v448;
            v448[154] = 1;
            uint64_t Add = (llvm::Type **)v69;
            break;
          default:
            goto LABEL_120;
        }
      }
LABEL_122:
      if (++v64 == v6) {
        goto LABEL_11;
      }
    }
  }
  __int16 v431 = 0;
  uint64_t v443 = 0;
  uint64_t v9 = v448;
LABEL_11:
  int v10 = *((_DWORD *)v1 + 1262) & v453;
  *((_DWORD *)v1 + 1262) = v10;
  v8.i32[0] = v10;
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v8);
  v11.i16[0] = vaddlv_u8(v11);
  *((_DWORD *)v1 + 1261) = v11.i32[0];
  if (v10 && (v9[216] || v9[212]))
  {
    v9[216] = 1;
    v9[212] = 1;
  }
  v9[152] = (*(uint64_t (**)(AGCLLVMUserVertexShader *, llvm::Value *))(*(void *)v1 + 528))(v1, v431);
  if (v9[202])
  {
    if (!v9[200])
    {
      *((void *)v1 + 633) = AGCLLVMUserVertexShader::getVertexAmpId(v1, *((_DWORD *)v1 + 1272));
      v9[200] = 1;
    }
    if (!v9[201])
    {
      *((void *)v1 + 634) = AGCLLVMUserVertexShader::getDriverGlobalConstant(v1, (llvm::Value *)0x54);
      v9[201] = 1;
    }
    uint64_t v13 = (uint64_t *)((char *)v1 + *(void *)(*(void *)v1 - 24));
    uint64_t v14 = (llvm::Type **)*((void *)v1 + 650);
    LOWORD(v463) = 257;
    uint64_t v15 = AGCLLVMBuilder::tryDeducePointeeType(v14, v12);
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v15, (uint64_t)v14, 0, (uint64_t)&v459);
    unsigned int v17 = (llvm::Type *)*((void *)v1 + 651);
    uint64_t v18 = (llvm::Value *)*((void *)v1 + 633);
    uint64_t v19 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
    LOWORD(v463) = 257;
    uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v19, v17, AlignedLoad, v18, (const llvm::Twine *)&v459);
    uint64_t v21 = (uint64_t *)((char *)v1 + *(void *)(*(void *)v1 - 24));
    LOWORD(v463) = 257;
    uint64_t v23 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v22);
    uint64_t v24 = (unsigned char *)llvm::IRBuilderBase::CreateAlignedLoad(v21 + 5, v23, (uint64_t)GEP, 0, (uint64_t)&v459);
    v459 = &v461;
    uint64_t v460 = 0x800000000;
    AGCLLVMBuilder::unboxStruct((uint64_t)v1 + *(void *)(*(void *)v1 - 24) + 32, v24, (uint64_t)&v459);
    if (!v9[153])
    {
      uint64_t NullValue = (llvm::Type **)llvm::Constant::getNullValue(**((llvm::Constant ***)v1 + 652), v25);
      v9[153] = 1;
    }
    v9[214] = 1;
    uint64_t v26 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 32), *(llvm::Value **)v459, *NullValue);
    *((void *)v1 + 652) = v26;
    uint64_t v27 = (uint64_t)v1 + *(void *)(*(void *)v1 - 24) + 40;
    uint64_t v28 = *(void *)v26;
    LOWORD(v510) = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v27, 39, (uint64_t)NullValue, v28, (uint64_t)&__dst);
    uint64_t v30 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
    unsigned int v31 = (llvm::Value *)*((void *)v1 + 652);
    LOWORD(v510) = 257;
    uint64_t NullValue = (llvm::Type **)llvm::IRBuilderBase::CreateAdd(v30, Cast, v31, (const llvm::Twine *)&__dst);
    if (!v9[154])
    {
      uint64_t Add = (llvm::Type **)llvm::Constant::getNullValue(**((llvm::Constant ***)v1 + 653), v32);
      v9[154] = 1;
    }
    v9[215] = 1;
    uint64_t v33 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 32), *((llvm::Value **)v459 + 1), *Add);
    *((void *)v1 + 653) = v33;
    uint64_t v34 = (uint64_t)v1 + *(void *)(*(void *)v1 - 24) + 40;
    uint64_t v35 = *(void *)v33;
    LOWORD(v510) = 257;
    uint64_t v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v34, 39, (uint64_t)Add, v35, (uint64_t)&__dst);
    uint64_t v37 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
    BOOL v38 = (llvm::Value *)*((void *)v1 + 653);
    LOWORD(v510) = 257;
    uint64_t Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd(v37, v36, v38, (const llvm::Twine *)&__dst);
    if (v459 != &v461) {
      free(v459);
    }
  }
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  LOBYTE(v459) = 1;
  BYTE1(v459) = v9[200];
  uint64_t v460 = (uint64_t)"air.amplification_id";
  uint64_t v461 = 20;
  std::string __p = (void *)*((void *)v1 + 633);
  uint64_t v466 = 0;
  uint64_t v467 = 0;
  uint64_t v468 = 0;
  char v469 = 0;
  char v470 = v9[201];
  long long v471 = "air.amplification_count";
  uint64_t v472 = 23;
  uint64_t v473 = *((void *)v1 + 634);
  uint64_t v474 = 0;
  uint64_t v475 = 0;
  uint64_t v476 = 0;
  char v477 = v9[214];
  char v478 = v9[153];
  uint64_t v479 = "air.viewport_array_index";
  uint64_t v480 = 24;
  long long v481 = NullValue;
  uint64_t v482 = 0;
  uint64_t v484 = 0;
  uint64_t v483 = 0;
  char v485 = v9[215];
  char v486 = v9[154];
  uint64_t v487 = "air.render_target_array_index";
  uint64_t v488 = 29;
  uint64_t v489 = Add;
  uint64_t v490 = 0;
  uint64_t v41 = (AGCLLVMUserVertexShader *)((char *)v1 + 4320);
  uint64_t v491 = 0;
  uint64_t v492 = 0;
  do
  {
    uint64_t v42 = (char *)&v459 + v39;
    if ((*(unsigned int (**)(AGCLLVMUserVertexShader *, void, void, char *, void))(*(void *)v1 + 512))(v1, *(void **)((char *)&v459 + v39 + 8), *(uint64_t *)((char *)&v461 + v39), (char *)&v463 + v39, *((unsigned __int8 *)&v459 + v39)))
    {
      uint64_t v43 = *(void *)v1;
      uint64_t v44 = (int8x16_t *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 32);
      unint64_t v45 = (const llvm::Type **)*((void *)v42 + 3);
      int ComponentType = AGCLLVMBuilder::getComponentType(v44, *v45, (unsigned int *)&__dst);
      if (v42[1])
      {
        int v47 = *(_DWORD *)((char *)&v463 + v39 + 4);
        if (v47 >= ComponentType)
        {
          if (v47 > ComponentType)
          {
            uint64_t v94 = (const std::string::value_type *)*((void *)v42 + 1);
            if (v94)
            {
              unint64_t v95 = *(&v461 + 12 * v40);
              uint64_t v96 = 4;
              if (v95 < 4) {
                uint64_t v96 = *(&v461 + 12 * v40);
              }
              std::string::basic_string[abi:nn180100](&__dst, (void *)&v94[v96], v95 - v96);
              unsigned int v97 = BYTE7(v509);
              std::string::size_type v98 = *((void *)&__dst + 1);
              uint64_t v94 = (const std::string::value_type *)__dst;
              uint64_t v43 = *(void *)v1;
            }
            else
            {
              std::string::size_type v98 = 0;
              unsigned int v97 = 0;
              long long __dst = 0uLL;
              *(void *)&long long v509 = 0;
            }
            if ((v97 & 0x80u) == 0) {
              p_dst = (const std::string::value_type *)&__dst;
            }
            else {
              p_dst = v94;
            }
            if ((v97 & 0x80u) == 0) {
              std::string::size_type v427 = v97;
            }
            else {
              std::string::size_type v427 = v98;
            }
            std::string::append((std::string *)((char *)v1 + *(void *)(v43 - 24) + 8), p_dst, v427);
            if (SBYTE7(v509) < 0) {
              operator delete((void *)__dst);
            }
            std::string::append((std::string *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 8), " type does not match between vertex and fragment function");
            uint64_t v428 = 0;
            goto LABEL_430;
          }
        }
        else
        {
          *((void *)v42 + 3) = AGCLLVMBuilder::truncateToSmall(v44->i64, (llvm::Value *)v45, v47);
        }
      }
      GenericVaryingAllocator::addVarying((uint64_t)v1 + 4320, (unint64_t)&v463 + v39);
      llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v499, *(unsigned int *)&v465[v39], *((void *)v42 + 3));
      uint64_t v9 = v448;
    }
    ++v40;
    v39 += 96;
  }
  while (v40 != 4);
  *((void *)&v509 + 1) = 0;
  uint64_t v510 = 0;
  uint64_t v511 = 0;
  if ((*(unsigned int (**)(AGCLLVMUserVertexShader *, long long *))(*(void *)v1 + 520))(v1, &__dst))
  {
    do
      GenericVaryingAllocator::addVarying((uint64_t)v1 + 4320, (unint64_t)&__dst);
    while (((*(uint64_t (**)(AGCLLVMUserVertexShader *, long long *))(*(void *)v1 + 520))(v1, &__dst) & 1) != 0);
  }
  if (SHIBYTE(v511) < 0) {
    operator delete(*((void **)&v509 + 1));
  }
  unint64_t v48 = 126 - 2 * __clz(v500);
  if (v500) {
    uint64_t v49 = v48;
  }
  else {
    uint64_t v49 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *,false>((unint64_t)v499, (unint64_t)v499 + 16 * v500, v49, 1);
  GenericVaryingAllocator::allocate((AGCLLVMUserVertexShader *)((char *)v1 + 4320), *(const AGCLLVMTargetLowerer **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400));
  std::string v50 = (llvm::BasicBlock *)v432[5];
  uint64_t v51 = llvm::ConstantInt::get();
  unsigned int v52 = (llvm::Value *)llvm::ConstantInt::get();
  *((_DWORD *)v9 + 39) = 0;
  *((_DWORD *)v9 + 40) = 0;
  uint64_t v53 = (char *)v1 + *(void *)(*(void *)v1 - 24);
  if (*(unsigned char *)(*((void *)v53 + 50) + 1753) && v9[200])
  {
    uint64_t v54 = (llvm::Type **)(v53 + 32);
    DriverGlobalConstant = (llvm::Value *)AGCLLVMUserVertexShader::getDriverGlobalConstant(v1, (llvm::Value *)0x54);
    unsigned int v52 = AGCLLVMBuilder::truncateToSmall(v54, DriverGlobalConstant, *(llvm::Type **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 2768));
    uint64_t v56 = (llvm::Type **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 32);
    if (*((_DWORD *)v1 + 1272)) {
      uint64_t v57 = 85;
    }
    else {
      uint64_t v57 = 84;
    }
    v502 = (llvm::Value *)AGCLLVMUserVertexShader::getDriverGlobalConstant(v1, (llvm::Value *)v57);
    long long v58 = (char *)v1 + *(void *)(*(void *)v1 - 24);
    uint64_t v59 = (uint64_t)(v58 + 32);
    uint64_t v60 = *((void *)v58 + 50);
    uint64_t v61 = *(void *)(v60 + 1488);
    if (v61) {
      size_t v62 = strlen(*(const char **)(v60 + 1488));
    }
    else {
      size_t v62 = 0;
    }
    uint64_t v99 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(v59, v61, v62, *(void *)(v59 + 200), *(void *)(v59 + 200));
    uint64_t v100 = (uint64_t)v1 + *(void *)(*(void *)v1 - 24) + 40;
    LOWORD(v510) = 257;
    uint64_t v101 = llvm::IRBuilderBase::CreateCall(v100, *(void *)(v99 + 24), v99, (uint64_t)&v502, 1, (uint64_t)&__dst);
    int v63 = AGCLLVMBuilder::truncateToSmall(v56, v101, *(llvm::Type **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 2768));
    uint64_t v9 = v448;
  }
  else
  {
    int v63 = (llvm::Value *)v51;
  }
  *((void *)v1 + 654) = llvm::ConstantInt::get();
  uint64_t v102 = llvm::ConstantInt::get();
  uint64_t Mul = (llvm::Value *)v102;
  *((void *)v1 + 655) = v102;
  int v104 = v9[212];
  if (v9[212]) {
    uint64_t v105 = (uint64_t)v63;
  }
  else {
    uint64_t v105 = v51;
  }
  *((void *)v1 + 656) = v105;
  if (v104)
  {
    uint64_t v106 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
    LOWORD(v510) = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v106, Mul, v52, (const llvm::Twine *)&__dst);
    int v107 = v9[212];
    *((void *)v1 + 657) = Mul;
    if (v107)
    {
      *((_DWORD *)v1 + 1260) += 4;
      goto LABEL_158;
    }
  }
  else
  {
    *((void *)v1 + 657) = v102;
  }
  *((_DWORD *)v9 + 39) += 4;
LABEL_158:
  uint64_t v108 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v109 = (llvm::Value *)*((void *)v1 + 654);
  LOWORD(v510) = 257;
  *((void *)v1 + 658) = llvm::IRBuilderBase::CreateAdd(v108, v109, Mul, (const llvm::Twine *)&__dst);
  uint64_t v110 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 659) = v110;
  *((void *)v1 + 660) = v51;
  *((void *)v1 + 661) = v110;
  uint64_t v111 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v112 = (llvm::Value *)*((void *)v1 + 658);
  LOWORD(v510) = 257;
  *((void *)v1 + 662) = llvm::IRBuilderBase::CreateAdd(v111, v112, v110, (const llvm::Twine *)&__dst);
  uint64_t v113 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 663) = v113;
  *((void *)v1 + 664) = v51;
  *((void *)v1 + 665) = v113;
  uint64_t v114 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v115 = (llvm::Value *)*((void *)v1 + 662);
  LOWORD(v510) = 257;
  *((void *)v1 + 666) = llvm::IRBuilderBase::CreateAdd(v114, v115, v113, (const llvm::Twine *)&__dst);
  uint64_t v116 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 667) = v116;
  *((void *)v1 + 668) = v51;
  *((void *)v1 + 669) = v116;
  uint64_t v117 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v118 = (llvm::Value *)*((void *)v1 + 666);
  LOWORD(v510) = 257;
  *((void *)v1 + 670) = llvm::IRBuilderBase::CreateAdd(v117, v118, v116, (const llvm::Twine *)&__dst);
  uint64_t v119 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 671) = v119;
  *((void *)v1 + 672) = v51;
  *((void *)v1 + 673) = v119;
  uint64_t v120 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v121 = (llvm::Value *)*((void *)v1 + 670);
  LOWORD(v510) = 257;
  *((void *)v1 + 674) = llvm::IRBuilderBase::CreateAdd(v120, v121, v119, (const llvm::Twine *)&__dst);
  uint64_t v122 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 675) = v122;
  *((void *)v1 + 676) = v51;
  *((void *)v1 + 677) = v122;
  uint64_t v123 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  int v124 = (llvm::Value *)*((void *)v1 + 674);
  LOWORD(v510) = 257;
  *((void *)v1 + 678) = llvm::IRBuilderBase::CreateAdd(v123, v124, v122, (const llvm::Twine *)&__dst);
  uint64_t v125 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 679) = v125;
  *((void *)v1 + 680) = v51;
  *((void *)v1 + 681) = v125;
  uint64_t v126 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v127 = (llvm::Value *)*((void *)v1 + 678);
  LOWORD(v510) = 257;
  *((void *)v1 + 682) = llvm::IRBuilderBase::CreateAdd(v126, v127, v125, (const llvm::Twine *)&__dst);
  uint64_t v128 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 683) = v128;
  *((void *)v1 + 684) = v51;
  *((void *)v1 + 685) = v128;
  unsigned int v129 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v130 = (llvm::Value *)*((void *)v1 + 682);
  LOWORD(v510) = 257;
  *((void *)v1 + 686) = llvm::IRBuilderBase::CreateAdd(v129, v130, v128, (const llvm::Twine *)&__dst);
  uint64_t v131 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 687) = v131;
  *((void *)v1 + 688) = v51;
  *((void *)v1 + 689) = v131;
  uint64_t v132 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  unint64_t v133 = (llvm::Value *)*((void *)v1 + 686);
  LOWORD(v510) = 257;
  uint64_t v134 = llvm::IRBuilderBase::CreateAdd(v132, v133, v131, (const llvm::Twine *)&__dst);
  *((void *)v1 + 690) = v134;
  v446 = v63;
  if (!*((_DWORD *)v1 + 1298) || *(unsigned char *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 1735)) {
    goto LABEL_296;
  }
  uint64_t v440 = v51;
  if (!v430) {
    goto LABEL_261;
  }
  LODWORD(v509) = 128;
  *(void *)&long long __dst = MEMORY[0x1CB79F270](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::initEmpty((uint64_t)&__dst);
  BYTE8(v509) = 0;
  char v512 = 0;
  if (*((unsigned char *)v430 + 16) == 83)
  {
    int v135 = *((_DWORD *)v430 + 5);
    unint64_t v136 = v135 & 0x7FFFFFF;
    if ((v135 & 0x7FFFFFF) != 0)
    {
      uint64_t v137 = 0;
      unint64_t v138 = 0;
      do
      {
        if ((v135 & 0x40000000) != 0) {
          int v139 = (char *)*((void *)v430 - 1);
        }
        else {
          int v139 = (char *)v430 - 32 * v136;
        }
        uint64_t v140 = *(void *)&v139[v137];
        *llvm::ValueMap<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&__dst, *(llvm::Value **)&v139[32 * *((unsigned int *)v430 + 15) + 8 * v138++]) = v140;
        int v135 = *((_DWORD *)v430 + 5);
        unint64_t v136 = v135 & 0x7FFFFFF;
        v137 += 32;
      }
      while (v138 < v136);
    }
  }
  else
  {
    SinglePredecessor = (llvm::Value *)llvm::BasicBlock::getSinglePredecessor(v50);
    *llvm::ValueMap<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&__dst, SinglePredecessor) = v430;
  }
  __int16 v142 = (int *)*((void *)v1 + 638);
  uint64_t v143 = (int *)*((void *)v1 + 639);
  if (v142 != v143)
  {
    while (1)
    {
      uint64_t v144 = *((void *)v142 + 3);
      if (!v144) {
        goto LABEL_200;
      }
      uint64_t v145 = **(void **)(v144 - 64);
      uint64_t v146 = (*(_DWORD *)(v145 + 8) & 0xFE) == 0x12 ? *(unsigned int *)(v145 + 32) : 1;
      unsigned int v147 = *v142;
      uint64_t v148 = v142[1];
      uint64_t v149 = llvm::ValueMap<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&__dst, *(llvm::Value **)(v144 + 40));
      uint64_t v150 = *v149;
      if (*(unsigned __int8 *)(*v149 + 16) - 11 < 2) {
        break;
      }
      while (*(void *)(v150 - 32) != *(void *)(v144 - 64))
      {
        uint64_t v150 = *(void *)(v150 - 64);
        if (*(unsigned __int8 *)(v150 + 16) - 11 <= 1) {
          goto LABEL_191;
        }
      }
      uint64_t v151 = **(unsigned int **)(v150 + 64);
      uint64_t v152 = *(void *)(*((void *)v449 + 9) - 8 * *(unsigned int *)(*((void *)v449 + 9) + 8) + 8 * v151);
      uint64_t v153 = llvm::MDString::getString(*(llvm::MDString **)(v152 - 8 * *(unsigned int *)(v152 + 8)));
      if (v154 == 17)
      {
        if (*(void *)v153 != 0x747265762E726961
          || *(void *)(v153 + 8) != 0x757074756F5F7865
          || *(unsigned char *)(v153 + 16) != 116)
        {
          break;
        }
        uint64_t v505 = 0;
        uint64_t v506 = 0;
        uint64_t v507 = 0;
        if ((*(unsigned int (**)(AGCLLVMUserVertexShader *, void, uint64_t, uint64_t, llvm::Value **, void))(*(void *)v449 + 496))(v449, *(void *)v430, v151, v152, &v502, 0))
        {
          uint64_t v161 = *((unsigned int *)v449 + 1088);
          if (v161)
          {
            uint64_t v162 = *((void *)v449 + 543);
            uint64_t v163 = v161 << 6;
            while (*(_DWORD *)(v162 + 16) != v504)
            {
              v162 += 64;
              v163 -= 64;
              if (!v163)
              {
                int v155 = 0xFFFF;
                goto LABEL_210;
              }
            }
            int v155 = *(_DWORD *)(v162 + 48);
          }
          else
          {
            int v155 = 0xFFFF;
          }
        }
        else
        {
          int v155 = -2;
        }
LABEL_210:
        if (SHIBYTE(v507) < 0) {
          operator delete((void *)v505);
        }
      }
      else
      {
        if (v154 != 12) {
          break;
        }
        if (*(void *)v153 ^ 0x69736F702E726961 | *(unsigned int *)(v153 + 8) ^ 0x6E6F6974) {
          int v155 = -2;
        }
        else {
          int v155 = 0;
        }
      }
LABEL_192:
      if (v146)
      {
        uint64_t v158 = *(void *)(*((void *)v449 + v148 + 641) + 8);
        while (1)
        {
          int v159 = *(_DWORD *)(v158 + 4 * v147);
          if (v159 != -2)
          {
            int v160 = v155;
            if (v159 == -1) {
              goto LABEL_198;
            }
            if (v155 != v159) {
              break;
            }
          }
LABEL_199:
          ++v155;
          ++v147;
          if (!--v146) {
            goto LABEL_200;
          }
        }
        int v160 = -2;
LABEL_198:
        *(_DWORD *)(v158 + 4 * v147) = v160;
        goto LABEL_199;
      }
LABEL_200:
      v142 += 8;
      if (v142 == v143) {
        goto LABEL_213;
      }
    }
LABEL_191:
    int v155 = -2;
    goto LABEL_192;
  }
LABEL_213:
  uint64_t v1 = v449;
  unint64_t v164 = *((unsigned int *)v449 + 1298);
  if (v164 >= 2)
  {
    for (unint64_t i = 0; i < v164; ++i)
    {
      __int16 v166 = (unsigned int *)*((void *)v449 + i + 641);
      uint64_t v167 = (_DWORD *)*((void *)v166 + 1);
      unint64_t v168 = *v166;
      if (*v167 < 0xFFFFFFFE)
      {
        if (v168 < 2) {
          continue;
        }
        int v169 = *v167 + 1;
        if (v167[1] == v169)
        {
          uint64_t v170 = 0;
          while (v168 - 2 != v170)
          {
            uint64_t v171 = v170;
            int v172 = v167[v170++ + 2];
            if (v169 + v170 != v172)
            {
              if (v171 + 2 < v168) {
                goto LABEL_216;
              }
              goto LABEL_218;
            }
          }
          continue;
        }
      }
LABEL_216:
      memset_pattern4(v167, &TFBufferMap::MAP_CONFLICT, 4 * v168);
      unint64_t v164 = *((unsigned int *)v449 + 1298);
LABEL_218:
      ;
    }
  }
  uint64_t v173 = (unsigned int *)*((void *)v449 + 638);
  uint64_t v174 = (unsigned int *)*((void *)v449 + 639);
  while (v173 != v174)
  {
    unint64_t v175 = (llvm::Instruction *)*((void *)v173 + 3);
    if (!v175) {
      goto LABEL_239;
    }
    uint64_t v176 = *v173;
    uint64_t v177 = **((void **)v175 - 8);
    if ((*(_DWORD *)(v177 + 8) & 0xFE) == 0x12)
    {
      unint64_t v178 = *(unsigned int *)(v177 + 32);
      if (!v178) {
        goto LABEL_238;
      }
    }
    else
    {
      unint64_t v178 = 1;
    }
    uint64_t v179 = *(void *)(*((void *)v449 + v173[1] + 641) + 8);
    if (*(_DWORD *)(v179 + 4 * v176) > 0xFFFFFFFD) {
      goto LABEL_239;
    }
    unint64_t v180 = 0;
    int v181 = v176 + 1;
    while (v178 - 1 != v180)
    {
      unsigned int v182 = *(_DWORD *)(v179 + 4 * (v181 + v180++));
      if (v182 >= 0xFFFFFFFE)
      {
        if (v180 < v178) {
          goto LABEL_239;
        }
        break;
      }
    }
LABEL_238:
    uint64_t v183 = (llvm::Value *)*((void *)v175 - 4);
    llvm::Instruction::eraseFromParent(v175);
    EraseInstructionChain(v183);
LABEL_239:
    v173 += 8;
  }
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)&v509 + 8);
  unsigned int v184 = v509;
  uint64_t v185 = (llvm *)__dst;
  if (v509)
  {
    uint64_t v503 = 2;
    uint64_t v504 = 0;
    uint64_t v505 = -4096;
    uint64_t v506 = 0;
    v502 = (llvm::Value *)&unk_1F25C63F8;
    uint64_t v455 = 2;
    uint64_t v456 = 0;
    uint64_t v457 = -8192;
    uint64_t v458 = 0;
    char v454 = &unk_1F25C63F8;
    uint64_t v186 = (uint64_t *)(__dst + 24);
    uint64_t v187 = 48 * v509;
    do
    {
      uint64_t v188 = *v186;
      if (*v186 != -8192 && v188 != -4096 && v188 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v186 - 2));
      }
      v186 += 6;
      v187 -= 48;
    }
    while (v187);
    if (v457 != -8192 && v457 != -4096 && v457 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v455);
    }
    if (v505 != -8192 && v505 != -4096 && v505) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v503);
    }
    uint64_t v185 = (llvm *)__dst;
    unsigned int v184 = v509;
  }
  llvm::deallocate_buffer(v185, (void *)(48 * v184));
  uint64_t v134 = *((void *)v449 + 690);
LABEL_261:
  if (*(unsigned char *)(v134 + 16) == 16) {
    uint64_t v191 = v134;
  }
  else {
    uint64_t v191 = 0;
  }
  uint64_t v192 = (void *)(v191 + 24);
  if (*(_DWORD *)(v191 + 32) >= 0x41u) {
    uint64_t v192 = (void *)*v192;
  }
  int v193 = *(_DWORD *)v192;
  unint64_t v194 = *((unsigned int *)v1 + 1298);
  if (v194 < 2)
  {
    int v196 = 0;
  }
  else
  {
    unint64_t v195 = 0;
    int v196 = 0;
    do
    {
      uint64_t v197 = (unsigned int *)*((void *)v1 + v195 + 641);
      unsigned int v198 = (_DWORD *)*((void *)v197 + 1);
      if (*v198 >= 0xFFFFFFFE)
      {
        uint64_t v199 = *v197;
        if (v199)
        {
          int v200 = v193;
          uint64_t v201 = v199;
          do
          {
            *v198++ = v200++;
            --v201;
          }
          while (v201);
          unint64_t v194 = *((unsigned int *)v1 + 1298);
        }
        v193 += v199;
        v196 += v199;
      }
      ++v195;
    }
    while (v195 < v194);
  }
  uint64_t v202 = (unsigned int *)*((void *)v1 + 638);
  uint64_t v203 = (unsigned int *)*((void *)v1 + 639);
  if (v202 != v203)
  {
    while (2)
    {
      uint64_t v204 = (llvm::Instruction *)*((void *)v202 + 3);
      if (v204)
      {
        uint64_t v205 = *v202;
        uint64_t v206 = v202[1];
        uint64_t v207 = (unsigned __int8 *)*((void *)v204 - 8);
        uint64_t v208 = **(void **)(**((void **)v204 - 4) + 16);
        if ((*(_DWORD *)(v208 + 8) & 0xFE) == 0x12)
        {
          unsigned int v209 = *(_DWORD *)(v208 + 32);
          uint64_t v210 = *((void *)v449 + v206 + 641);
          if (!v209) {
            goto LABEL_287;
          }
        }
        else
        {
          uint64_t v210 = *((void *)v449 + v206 + 641);
          unsigned int v209 = 1;
        }
        uint64_t v211 = *(void *)(v210 + 8);
        if (*(_DWORD *)(v211 + 4 * v205) <= 0xFFFFFFFD)
        {
          unint64_t v217 = 0;
          while (v209 - 1 != v217)
          {
            unsigned int v218 = *(_DWORD *)(v211 + 4 * (v205 + 1 + v217++));
            if (v218 >= 0xFFFFFFFE)
            {
              if (v217 < v209) {
                goto LABEL_284;
              }
              break;
            }
          }
        }
        else
        {
LABEL_284:
          int v212 = v193;
          unsigned int v213 = *v202;
          uint64_t v214 = v209;
          do
          {
            *(_DWORD *)(v211 + 4 * v213++) = v212++;
            --v214;
          }
          while (v214);
          v193 += v209;
          v196 += v209;
        }
LABEL_287:
        uint64_t v215 = (llvm::Value *)llvm::ConstantInt::get();
        AGCLLVMUserVertexShader::replaceOutputUses((uint64_t *)v449, v207, v215, 1, 0, 4u);
        uint64_t v216 = (llvm::Value *)*((void *)v204 - 4);
        llvm::Instruction::eraseFromParent(v204);
        EraseInstructionChain(v216);
      }
      v202 += 8;
      if (v202 == v203) {
        break;
      }
      continue;
    }
  }
  uint64_t v1 = v449;
  *((_DWORD *)v449 + 1257) += v196;
  uint64_t v51 = v440;
  int v63 = v446;
LABEL_296:
  int v219 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 691) = v219;
  *((void *)v1 + 692) = v51;
  *((void *)v1 + 693) = v219;
  *((_DWORD *)v1 + 1259) += *((_DWORD *)v1 + 1257) + GenericVaryingAllocator::getTotalSharedComponentWords(v41);
  uint64_t v220 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  BOOL v221 = (llvm::Value *)*((void *)v1 + 690);
  LOWORD(v510) = 257;
  *((void *)v1 + 694) = llvm::IRBuilderBase::CreateAdd(v220, v221, v219, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((void *)v1 + 695) = llvm::ConstantInt::get();
  *((void *)v1 + 696) = v63;
  BOOL v222 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 697) = v222;
  unsigned int v223 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v224 = (llvm::Value *)*((void *)v1 + 694);
  LOWORD(v510) = 257;
  *((void *)v1 + 698) = llvm::IRBuilderBase::CreateAdd(v223, v224, v222, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((void *)v1 + 699) = llvm::ConstantInt::get();
  *((void *)v1 + 700) = v63;
  uint64_t v225 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 701) = v225;
  int v226 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v227 = (llvm::Value *)*((void *)v1 + 698);
  LOWORD(v510) = 257;
  *((void *)v1 + 702) = llvm::IRBuilderBase::CreateAdd(v226, v227, v225, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((void *)v1 + 703) = llvm::ConstantInt::get();
  *((void *)v1 + 704) = v63;
  uint64_t v228 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 705) = v228;
  uint64_t v229 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v230 = (llvm::Value *)*((void *)v1 + 702);
  LOWORD(v510) = 257;
  *((void *)v1 + 706) = llvm::IRBuilderBase::CreateAdd(v229, v230, v228, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((void *)v1 + 707) = llvm::ConstantInt::get();
  *((void *)v1 + 708) = v63;
  int v231 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 709) = v231;
  uint64_t v232 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v233 = (llvm::Value *)*((void *)v1 + 706);
  LOWORD(v510) = 257;
  *((void *)v1 + 710) = llvm::IRBuilderBase::CreateAdd(v232, v233, v231, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((void *)v1 + 711) = llvm::ConstantInt::get();
  *((void *)v1 + 712) = v63;
  int v234 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 713) = v234;
  uint64_t v235 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v236 = (llvm::Value *)*((void *)v1 + 710);
  LOWORD(v510) = 257;
  *((void *)v1 + 714) = llvm::IRBuilderBase::CreateAdd(v235, v236, v234, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((void *)v1 + 715) = llvm::ConstantInt::get();
  *((void *)v1 + 716) = v446;
  uint64_t v237 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 717) = v237;
  BOOL v238 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  __int16 v239 = (llvm::Value *)*((void *)v1 + 714);
  LOWORD(v510) = 257;
  *((void *)v1 + 718) = llvm::IRBuilderBase::CreateAdd(v238, v239, v237, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((void *)v1 + 719) = llvm::ConstantInt::get();
  *((void *)v1 + 720) = v446;
  uint64_t v240 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 721) = v240;
  BOOL v241 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  BOOL v242 = (llvm::Value *)*((void *)v1 + 718);
  LOWORD(v510) = 257;
  *((void *)v1 + 722) = llvm::IRBuilderBase::CreateAdd(v241, v242, v240, (const llvm::Twine *)&__dst);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  *((void *)v1 + 723) = llvm::ConstantInt::get();
  *((void *)v1 + 724) = v446;
  BOOL v243 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 725) = v243;
  uint64_t v244 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  uint64_t v245 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v246 = v51;
  uint64_t v247 = (uint64_t)v1 + *(void *)(*(void *)v1 - 24) + 40;
  uint64_t v248 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v510) = 257;
  unint64_t v249 = (llvm::IRBuilderBase *)v247;
  uint64_t v250 = v246;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v249, v52, v248, (const llvm::Twine *)&__dst);
  LOWORD(v506) = 257;
  uint64_t v252 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v244, v245, Sub, (const llvm::Twine *)&v502);
  LOWORD(v458) = 257;
  *((void *)v1 + 725) = llvm::IRBuilderBase::CreateAdd(v244, v243, v252, (const llvm::Twine *)&v454);
  *((_DWORD *)v1 + 1260) += GenericVaryingAllocator::getTotalAmplifiedComponentWords(v41);
  uint64_t v253 = (uint64_t)v1 + *(void *)(*(void *)v1 - 24) + 40;
  uint64_t v254 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v510) = 257;
  uint64_t v255 = (llvm::IRBuilderBase *)v253;
  uint64_t v256 = v448;
  uint64_t v257 = v446;
  int v258 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v255, v254, v52, (const llvm::Twine *)&__dst);
  uint64_t v259 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  unsigned int v260 = (llvm::Value *)*((void *)v1 + 694);
  LOWORD(v510) = 257;
  *((void *)v1 + 742) = llvm::IRBuilderBase::CreateAdd(v259, v260, v258, (const llvm::Twine *)&__dst);
  uint64_t v261 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 743) = v261;
  int v262 = v448[213];
  if (v448[213]) {
    uint64_t v263 = (uint64_t)v446;
  }
  else {
    uint64_t v263 = v246;
  }
  *((void *)v1 + 744) = v263;
  if (v262)
  {
    unsigned int v264 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
    LOWORD(v510) = 257;
    uint64_t v261 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v264, v261, v52, (const llvm::Twine *)&__dst);
  }
  *((void *)v1 + 745) = v261;
  if (v448[152])
  {
    if (v448[213]) {
      ++*((_DWORD *)v1 + 1260);
    }
    else {
      ++*((_DWORD *)v448 + 39);
    }
  }
  uint64_t v265 = *(void *)(*(void *)v1 - 24);
  if (*(unsigned char *)(*(void *)((char *)v1 + v265 + 400) + 1748))
  {
    if (v448[153]) {
      BOOL v266 = 1;
    }
    else {
      BOOL v266 = v448[154] != 0;
    }
    if (v448[214]) {
      BOOL v272 = 1;
    }
    else {
      BOOL v272 = v448[215] != 0;
    }
    BOOL v273 = (llvm::Value *)*((void *)v1 + 742);
    LOWORD(v510) = 257;
    *((void *)v1 + 746) = llvm::IRBuilderBase::CreateAdd((AGCLLVMUserVertexShader *)((char *)v1 + v265 + 40), v273, v261, (const llvm::Twine *)&__dst);
    uint64_t v274 = llvm::ConstantInt::get();
    uint64_t v275 = (llvm::Value *)v274;
    *((void *)v1 + 747) = v274;
    if (v272)
    {
      uint64_t v257 = v446;
      *((void *)v1 + 748) = v446;
      uint64_t v276 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
      LOWORD(v510) = 257;
      uint64_t v275 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v276, v275, v52, (const llvm::Twine *)&__dst);
      uint64_t v277 = *((void *)v1 + 748);
      *((void *)v1 + 749) = v275;
      *((_OWORD *)v1 + 375) = *((_OWORD *)v1 + 373);
      *((void *)v1 + 752) = v277;
      *((void *)v1 + 753) = v275;
      if (v266) {
        ++*((_DWORD *)v1 + 1260);
      }
      uint64_t v256 = v448;
      goto LABEL_337;
    }
    *((void *)v1 + 748) = v250;
    *((void *)v1 + 749) = v274;
    *((void *)v1 + 750) = *((void *)v1 + 746);
    *((void *)v1 + 751) = v274;
    *((void *)v1 + 752) = v250;
    *((void *)v1 + 753) = v274;
    if (!v266)
    {
      uint64_t v257 = v446;
      uint64_t v256 = v448;
      goto LABEL_337;
    }
    uint64_t v257 = v446;
    uint64_t v256 = v448;
LABEL_336:
    ++*((_DWORD *)v256 + 39);
    goto LABEL_337;
  }
  unsigned int v267 = (llvm::Value *)*((void *)v1 + 742);
  LOWORD(v510) = 257;
  *((void *)v1 + 746) = llvm::IRBuilderBase::CreateAdd((AGCLLVMUserVertexShader *)((char *)v1 + v265 + 40), v267, v261, (const llvm::Twine *)&__dst);
  unsigned int v268 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 747) = v268;
  int v269 = v448[214];
  if (v448[214]) {
    uint64_t v270 = (uint64_t)v446;
  }
  else {
    uint64_t v270 = v246;
  }
  *((void *)v1 + 748) = v270;
  if (v269)
  {
    int v271 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
    LOWORD(v510) = 257;
    unsigned int v268 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v271, v268, v52, (const llvm::Twine *)&__dst);
  }
  *((void *)v1 + 749) = v268;
  if (v448[153])
  {
    if (v448[214]) {
      ++*((_DWORD *)v1 + 1260);
    }
    else {
      ++*((_DWORD *)v448 + 39);
    }
  }
  int v278 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  int v279 = (llvm::Value *)*((void *)v1 + 746);
  LOWORD(v510) = 257;
  *((void *)v1 + 750) = llvm::IRBuilderBase::CreateAdd(v278, v279, v268, (const llvm::Twine *)&__dst);
  uint64_t v275 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 751) = v275;
  int v280 = v448[215];
  if (v448[215]) {
    uint64_t v281 = (uint64_t)v446;
  }
  else {
    uint64_t v281 = v246;
  }
  *((void *)v1 + 752) = v281;
  if (v280)
  {
    uint64_t v282 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
    LOWORD(v510) = 257;
    uint64_t v275 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v282, v275, v52, (const llvm::Twine *)&__dst);
  }
  *((void *)v1 + 753) = v275;
  if (v448[154])
  {
    if (v448[215])
    {
      ++*((_DWORD *)v1 + 1260);
      goto LABEL_337;
    }
    goto LABEL_336;
  }
LABEL_337:
  long long v283 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
  uint64_t v284 = (llvm::Value *)*((void *)v1 + 750);
  LOWORD(v510) = 257;
  *((void *)v1 + 754) = llvm::IRBuilderBase::CreateAdd(v283, v284, v275, (const llvm::Twine *)&__dst);
  long long v285 = (llvm::Value *)llvm::ConstantInt::get();
  *((void *)v1 + 755) = v285;
  int v286 = v256[212];
  if (v256[212]) {
    uint64_t v287 = (uint64_t)v257;
  }
  else {
    uint64_t v287 = v250;
  }
  *((void *)v1 + 756) = v287;
  if (v286)
  {
    uint64_t v288 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
    LOWORD(v510) = 257;
    long long v285 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v288, v285, v52, (const llvm::Twine *)&__dst);
  }
  *((void *)v1 + 757) = v285;
  int v289 = *((_DWORD *)v1 + 1261);
  if (!v289)
  {
LABEL_345:
    if (!v443) {
      goto LABEL_347;
    }
    goto LABEL_346;
  }
  if (v256[212])
  {
    *((_DWORD *)v1 + 1260) += v289;
    goto LABEL_345;
  }
  *((_DWORD *)v256 + 39) += v289;
  if (v443)
  {
LABEL_346:
    uint64_t v290 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
    uint64_t v291 = (llvm::Value *)*((void *)v1 + 654);
    int v292 = (llvm::Value *)*((void *)v1 + 656);
    BOOL v293 = (llvm::Value *)*((void *)v1 + 655);
    LOWORD(v510) = 257;
    uint64_t v294 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v290, v292, v293, (const llvm::Twine *)&__dst);
    LOWORD(v506) = 257;
    uint64_t v295 = v291;
    uint64_t v256 = v448;
    int v296 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v290, v295, v294, (const llvm::Twine *)&v502);
    AGCLLVMUserVertexShader::replaceOutputUses((uint64_t *)v1, v443, v296, 0, v448[212], 4u);
  }
LABEL_347:
  uint64_t v297 = *((unsigned int *)v1 + 1088);
  if (v297)
  {
    int v298 = 0;
    int v439 = 0;
    int v441 = 0;
    uint64_t v442 = 0;
    uint64_t v299 = 0;
    uint64_t v300 = *((void *)v1 + 543);
    uint64_t v435 = v300 + (v297 << 6);
    v436 = (char *)v1 + 200;
    do
    {
      if (*v256) {
        BOOL v301 = *(unsigned char *)(v300 + 56) != 0;
      }
      else {
        BOOL v301 = 0;
      }
      unint64_t v302 = v500;
      if (v500)
      {
        unsigned int v303 = *(_DWORD *)(v300 + 16);
        uint64_t v304 = v499;
        do
        {
          unint64_t v305 = v302 >> 1;
          int v306 = &v304[2 * (v302 >> 1)];
          unsigned int v308 = *v306;
          uint64_t v307 = v306 + 4;
          v302 += ~(v302 >> 1);
          if (v308 < v303) {
            uint64_t v304 = v307;
          }
          else {
            unint64_t v302 = v305;
          }
        }
        while (v302);
        if (v304 != (void *)((char *)v499 + 16 * v500) && *(_DWORD *)v304 == v303)
        {
          v447 = (llvm::Value *)v299;
          uint64_t v309 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
          v444 = (llvm::Value *)*(unsigned int *)(v300 + 60);
          unint64_t v310 = (void *)((char *)v1 + 32 * (void)v444);
          uint64_t v311 = (llvm::Value *)v310[654];
          uint64_t v312 = (llvm::Value *)v310[656];
          int v313 = (llvm::Value *)v310[655];
          LOWORD(v510) = 257;
          uint64_t v314 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v309, v312, v313, (const llvm::Twine *)&__dst);
          LOWORD(v506) = 257;
          uint64_t v315 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v309, v311, v314, (const llvm::Twine *)&v502);
          int v316 = (unsigned __int8 *)v304[1];
          if (!v301)
          {
            BOOL v319 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
            BOOL v320 = (llvm::Value *)llvm::ConstantInt::get();
            LOWORD(v510) = 257;
            uint64_t v321 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v319, v315, v320, (const llvm::Twine *)&__dst);
            AGCLLVMUserVertexShader::replaceOutputUses((uint64_t *)v1, v316, v321, 1, *(unsigned __int8 *)(v300 + 57), *(_DWORD *)v300);
            uint64_t v256 = v448;
            goto LABEL_383;
          }
          uint64_t v503 = 0;
          uint64_t v504 = 0;
          uint64_t v505 = 0;
          v502 = (llvm::Value *)v316;
          if (*(void *)v316) {
            BOOL v317 = *(unsigned char *)(*(void *)v316 + 8) == 18;
          }
          else {
            BOOL v317 = 0;
          }
          if (!v317)
          {
            LODWORD(v318) = 1;
LABEL_371:
            int v322 = *(_DWORD *)(v300 + 52);
            uint64_t v318 = v318;
            int v323 = &v502;
            uint64_t v437 = v315;
            uint64_t v438 = v300;
            while (2)
            {
              uint64_t v324 = v449;
              uint64_t v325 = (AGCLLVMUserVertexShader *)((char *)v449 + *(void *)(*(void *)v449 - 24) + 40);
              uint64_t v326 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(v510) = 257;
              uint64_t v328 = llvm::IRBuilderBase::CreateAdd(v325, v315, v326, (const llvm::Twine *)&__dst);
              int v329 = *v323;
              int v330 = *(unsigned __int8 *)(v300 + 57);
              if (v447)
              {
                uint64_t v331 = *(void *)(*(void *)v449 - 24);
                if (v298 == v444 && v439 == (v322 & 0xFFFFFFFE))
                {
                  LOWORD(v510) = 257;
                  int v332 = (AGCLLVMUserVertexShader *)((char *)v449 + v331 + 40);
                  uint64_t v333 = (llvm::Value *)llvm::ConstantInt::get();
                  Insertuint64_t Element = llvm::IRBuilderBase::CreateInsertElement(v332, v447, v329, v333, (const llvm::Twine *)&__dst);
                  if (InsertElement)
                  {
                    uint64_t v335 = *(void *)(*(void *)v449 - 24);
                    uint64_t v336 = *(void *)&v436[v335 + 32];
                    LOWORD(v510) = 257;
                    uint64_t v337 = (unsigned __int8 *)llvm::IRBuilderBase::CreateCast((uint64_t)v449 + v335 + 40, 49, InsertElement, v336, (uint64_t)&__dst);
                    AGCLLVMUserVertexShader::replaceOutputUses((uint64_t *)v449, v337, v442, 1, v441 != 0, 4u);
                    v447 = 0;
                    uint64_t v442 = 0;
                  }
                  else
                  {
                    v447 = 0;
                  }
                  uint64_t v256 = v448;
                  uint64_t v300 = v438;
LABEL_381:
                  uint64_t v315 = v437;
                  ++v322;
                  ++v323;
                  int v298 = (int)v444;
                  if (!--v318)
                  {
                    int v298 = (int)v444;
                    uint64_t v1 = v449;
                    goto LABEL_383;
                  }
                  continue;
                }
                uint64_t v324 = v449;
                uint64_t v338 = *(void *)&v436[v331 + 32];
                LOWORD(v510) = 257;
                std::string v339 = (unsigned __int8 *)llvm::IRBuilderBase::CreateCast((uint64_t)v449 + v331 + 40, 49, (uint64_t)v447, v338, (uint64_t)&__dst);
                AGCLLVMUserVertexShader::replaceOutputUses((uint64_t *)v449, v339, v442, 1, v441 != 0, 4u);
              }
              break;
            }
            __int16 v340 = (llvm::Constant **)((char *)v324 + *(void *)(*(void *)v324 - 24));
            unsigned int v341 = (llvm::Value *)llvm::Constant::getNullValue(v340[31], v327);
            LOWORD(v510) = 257;
            uint64_t v342 = (llvm::Value *)llvm::ConstantInt::get();
            v447 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v340 + 5), v341, v329, v342, (const llvm::Twine *)&__dst);
            uint64_t v442 = (llvm::BasicBlock *)v328;
            int v441 = v330;
            int v439 = v322;
            uint64_t v256 = v448;
            uint64_t v300 = v438;
            goto LABEL_381;
          }
          if (*(_DWORD *)v300 >= *(_DWORD *)(*(void *)v316 + 32)) {
            LODWORD(v318) = *(_DWORD *)(*(void *)v316 + 32);
          }
          else {
            LODWORD(v318) = *(_DWORD *)v300;
          }
          AGCLLVMBuilder::unboxVector((AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 32), (llvm::Value *)v316, &v502);
          uint64_t v256 = v448;
          if (v318) {
            goto LABEL_371;
          }
LABEL_383:
          uint64_t v299 = (uint64_t)v447;
        }
      }
      v300 += 64;
    }
    while (v300 != v435);
    if (v299)
    {
      uint64_t v343 = (char *)v1 + *(void *)(*(void *)v1 - 24);
      uint64_t v344 = *((void *)v343 + 29);
      LOWORD(v510) = 257;
      uint64_t v345 = (unsigned __int8 *)llvm::IRBuilderBase::CreateCast((uint64_t)(v343 + 40), 49, v299, v344, (uint64_t)&__dst);
      AGCLLVMUserVertexShader::replaceOutputUses((uint64_t *)v1, v345, v442, 1, v441 != 0, 4u);
    }
  }
  uint64_t v346 = *(void *)v1;
  if (*((_DWORD *)v1 + 1298) && *(unsigned char *)(*(void *)((char *)v1 + *(void *)(v346 - 24) + 400) + 1735))
  {
    *(void *)&long long __dst = "return_block";
    LOWORD(v510) = 259;
    llvm::BasicBlock::splitBasicBlock();
    *(void *)&long long __dst = "tf_write_block";
    LOWORD(v510) = 259;
    operator new();
  }
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(v346 - 24) + 40), (llvm::Instruction *)v432);
  if (v256[152])
  {
    uint64_t v347 = (*(uint64_t (**)(AGCLLVMUserVertexShader *, llvm::Value *))(*(void *)v1 + 536))(v1, v431);
    uint64_t v348 = llvm::ConstantFP::get();
    int v349 = (char *)v1 + *(void *)(*(void *)v1 - 24);
    uint64_t v350 = *((void *)v349 + 50);
    long long v450 = *(_OWORD *)(v349 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v451, (llvm::IRBuilderBase *)(v349 + 40));
    int v452 = *((_DWORD *)v349 + 34);
    unint64_t v351 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void))(*(void *)v350 + 48))(v350, &v450, v347, v348, 0);
    if (v451) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v352 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
    uint64_t v353 = (llvm::Value *)*((void *)v1 + 742);
    int v354 = (llvm::Value *)*((void *)v1 + 744);
    int v355 = (llvm::Value *)*((void *)v1 + 743);
    LOWORD(v510) = 257;
    v356 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v352, v354, v355, (const llvm::Twine *)&__dst);
    LOWORD(v506) = 257;
    long long v357 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v352, v353, v356, (const llvm::Twine *)&v502);
    uint64_t v256 = v448;
    AGCLLVMUserVertexShader::replaceOutputUses((uint64_t *)v1, v351, v357, 2, v448[213], 4u);
  }
  uint64_t v358 = *(void *)v1;
  uint64_t v359 = *(void *)(*(void *)v1 - 24);
  uint64_t v360 = *(void *)((char *)v1 + v359 + 400);
  if (*(unsigned char *)(v360 + 1748))
  {
    if (v256[153] || v256[154])
    {
      uint64_t v361 = llvm::ConstantInt::get();
      if (v256[153])
      {
        uint64_t v362 = (char *)v1 + *(void *)(*(void *)v1 - 24);
        uint64_t v363 = *((void *)v362 + 29);
        if (*NullValue == (llvm::Type *)v363)
        {
          uint64_t v384 = (AGCLLVMBuilder *)(v362 + 32);
          uint64_t v385 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t v364 = AGCLLVMBuilder::buildICmpSel(v384, NullValue, v385, 36);
        }
        else
        {
          LOWORD(v510) = 257;
          uint64_t v364 = llvm::IRBuilderBase::CreateCast((uint64_t)(v362 + 40), 39, (uint64_t)NullValue, v363, (uint64_t)&__dst);
        }
        int v386 = (llvm::Value *)v364;
        uint64_t v387 = (llvm::Value *)AGCLLVMUserVertexShader::getDriverGlobalConstant(v1, (llvm::Value *)0x6C);
        uint64_t v388 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
        LOWORD(v510) = 257;
        uint64_t Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v388, v386, v387, (const llvm::Twine *)&__dst);
        uint64_t v390 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
        LOWORD(v510) = 257;
        uint64_t v391 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v383 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v390, Shl, v391, (const llvm::Twine *)&__dst);
        uint64_t v256 = v448;
      }
      else
      {
        uint64_t v383 = (llvm::Value *)v361;
      }
      if (v256[154])
      {
        v392 = (char *)v1 + *(void *)(*(void *)v1 - 24);
        uint64_t v393 = *((void *)v392 + 29);
        if (*Add == (llvm::Type *)v393)
        {
          v395 = (AGCLLVMBuilder *)(v392 + 32);
          unsigned int v396 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t v394 = AGCLLVMBuilder::buildICmpSel(v395, Add, v396, 36);
        }
        else
        {
          LOWORD(v510) = 257;
          uint64_t v394 = llvm::IRBuilderBase::CreateCast((uint64_t)(v392 + 40), 39, (uint64_t)Add, v393, (uint64_t)&__dst);
        }
        int v397 = (llvm::Value *)v394;
        int v398 = (llvm::Value *)AGCLLVMUserVertexShader::getDriverGlobalConstant(v1, (llvm::Value *)0x6C);
        unsigned int v399 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
        LOWORD(v510) = 257;
        long long v400 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v399, v397, v398, (const llvm::Twine *)&__dst);
        uint64_t v401 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
        LOWORD(v510) = 257;
        int v402 = (llvm::Value *)llvm::ConstantInt::get();
        long long v403 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v401, v400, v402, (const llvm::Twine *)&__dst);
        uint64_t v404 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
        LOWORD(v510) = 257;
        int v405 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v404, v383, v403, (const llvm::Twine *)&__dst);
        long long v406 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
        LOWORD(v510) = 257;
        uint64_t v383 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v406, v405, v397, (const llvm::Twine *)&__dst);
      }
      uint64_t v407 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
      int v408 = (llvm::Value *)*((void *)v1 + 746);
      long long v409 = (llvm::Value *)*((void *)v1 + 748);
      uint64_t v410 = (llvm::Value *)*((void *)v1 + 747);
      LOWORD(v510) = 257;
      int v411 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v407, v409, v410, (const llvm::Twine *)&__dst);
      LOWORD(v506) = 257;
      uint64_t v378 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v407, v408, v411, (const llvm::Twine *)&v502);
      if (v448[214]) {
        int v379 = 1;
      }
      else {
        int v379 = v448[215] != 0;
      }
      uint64_t v380 = (uint64_t *)v1;
      uint64_t v381 = (unsigned __int8 *)v383;
      int v382 = 4;
LABEL_420:
      AGCLLVMUserVertexShader::replaceOutputUses(v380, v381, v378, v382, v379, 4u);
    }
  }
  else
  {
    if (*(unsigned char *)(v360 + 1746) && v256[153])
    {
      uint64_t v365 = (AGCLLVMUserVertexShader *)((char *)v1 + v359 + 40);
      int v366 = (llvm::Value *)*((void *)v1 + 746);
      long long v367 = (llvm::Value *)*((void *)v1 + 748);
      uint64_t v368 = (llvm::Value *)*((void *)v1 + 747);
      LOWORD(v510) = 257;
      uint64_t v369 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v365, v367, v368, (const llvm::Twine *)&__dst);
      LOWORD(v506) = 257;
      uint64_t v370 = v366;
      uint64_t v256 = v448;
      uint64_t v371 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v365, v370, v369, (const llvm::Twine *)&v502);
      AGCLLVMUserVertexShader::replaceOutputUses((uint64_t *)v1, (unsigned __int8 *)NullValue, v371, 4, v448[214], 4u);
      uint64_t v358 = *(void *)v1;
    }
    uint64_t v372 = *(void *)(v358 - 24);
    if (*(unsigned char *)(*(void *)((char *)v1 + v372 + 400) + 1747) && v256[154])
    {
      uint64_t v373 = (AGCLLVMUserVertexShader *)((char *)v1 + v372 + 40);
      char v374 = (llvm::Value *)*((void *)v1 + 750);
      char v375 = (llvm::Value *)*((void *)v1 + 752);
      uint64_t v376 = (llvm::Value *)*((void *)v1 + 751);
      LOWORD(v510) = 257;
      char v377 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v373, v375, v376, (const llvm::Twine *)&__dst);
      LOWORD(v506) = 257;
      uint64_t v378 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v373, v374, v377, (const llvm::Twine *)&v502);
      int v379 = v448[215];
      uint64_t v380 = (uint64_t *)v1;
      uint64_t v381 = (unsigned __int8 *)Add;
      int v382 = 5;
      goto LABEL_420;
    }
  }
  uint64_t v412 = 0;
  int v413 = 0;
  int v414 = 1;
  do
  {
    if ((*((_DWORD *)v1 + 1262) & v414) != 0)
    {
      long long v415 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v416 = (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40);
      int v417 = (llvm::Value *)*((void *)v1 + 754);
      long long v418 = (llvm::Value *)*((void *)v1 + 756);
      uint64_t v419 = (llvm::Value *)*((void *)v1 + 755);
      LOWORD(v510) = 257;
      int v420 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v416, v418, v419, (const llvm::Twine *)&__dst);
      LOWORD(v506) = 257;
      long long v421 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v416, v417, v420, (const llvm::Twine *)&v502);
      LOWORD(v458) = 257;
      __n128 v422 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v416, v415, v421, (const llvm::Twine *)&v454);
      AGCLLVMUserVertexShader::replaceOutputUses((uint64_t *)v1, *(unsigned __int8 **)((char *)v495 + v412), v422, 3, v448[212], 4u);
      ++v413;
    }
    v414 *= 2;
    v412 += 8;
  }
  while (v412 != 64);
  if (v430) {
    EraseInstructionChain(v430);
  }
  int v423 = v432 + 3;
  if (!v432) {
    int v423 = 0;
  }
  llvm::IRBuilderBase::SetInsertPoint((char **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 40), v432[5], v423[1]);
  llvm::Instruction::eraseFromParent((llvm::Instruction *)v432);
  llvm::Function::eraseFromParent(Function);
  uint64_t v428 = 1;
LABEL_430:
  uint64_t v424 = 384;
  do
  {
    if (*((char *)&v456 + v424 + 7) < 0) {
      operator delete(*(void **)((char *)&v454 + v424));
    }
    v424 -= 96;
  }
  while (v424);
LABEL_434:
  if (v493[0] != v494) {
    free(v493[0]);
  }
  if (v496 != v498) {
    free(v496);
  }
  if (v499 != v501) {
    free(v499);
  }
  return v428;
}

uint64_t GenericVaryingAllocator::getTotalAmplifiedComponentWords(GenericVaryingAllocator *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  do
  {
    if (v1 <= 5 && ((1 << v1) & 0x27) != 0)
    {
      uint64_t v3 = (char *)this + 4 * v1;
      int v4 = *((_DWORD *)v3 + 160);
      int v5 = *((_DWORD *)v3 + 166);
      if (*((unsigned char *)this + 560)) {
        uint64_t v2 = v4 + v2 + ((v5 + 1) >> 1);
      }
      else {
        uint64_t v2 = (v4 + v2 + v5);
      }
    }
    ++v1;
  }
  while (v1 != 6);
  return v2;
}

uint64_t AGCLLVMAGPVertexShader::getGenericVaryingInfo(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7)
{
  uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8));
  GenericVarying::getComponentSemantic(&__p, String, v14, a7);
  int ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a1 + *(void *)(*a1 - 24) + 32), *(const llvm::Type **)(*(void *)(a2 + 16) + 8 * a3), &v21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t GenericVaryingInfo = AGCLLVMAGPVertexShader::getGenericVaryingInfo((uint64_t)a1, ComponentType, 1, p_p, size, a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return GenericVaryingInfo;
}

uint64_t AGCLLVMAGPVertexShader::getGenericVaryingInfo(uint64_t a1, int a2, int a3, void *a4, size_t a5, uint64_t a6, int a7)
{
  int Key = llvm::StringMapImpl::FindKey();
  if (Key == -1) {
    return 0;
  }
  uint64_t v15 = Key;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 9432)) {
    return 0;
  }
  uint64_t v16 = *(void *)(a1 + 9424);
  unsigned int v17 = *(_DWORD *)(*(void *)(v16 + 8 * Key) + 8);
  if (a2 != BYTE2(v17)) {
    return 0;
  }
  if ((HIBYTE(v17) & 0x7F) != a3)
  {
    a3 = HIBYTE(v17) & 0x7F;
    if (!*(unsigned char *)(a1 + 10049)) {
      return 0;
    }
  }
  int v18 = *(_DWORD *)(a1 + 9460) + 1;
  *(_DWORD *)(a1 + 9460) = v18;
  GenericVarying::GenericVarying((uint64_t)&v22, a3, a2, v17 & 0xF, BYTE1(v17), v18, a7);
  *(_OWORD *)a6 = v22;
  *(_DWORD *)(a6 + 16) = v23;
  uint64_t v19 = (void **)(a6 + 24);
  if (*(char *)(a6 + 47) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v24;
  *(void *)(a6 + 40) = v25;
  *(_OWORD *)(a6 + 48) = v26;
  if (a4)
  {
    std::string::basic_string[abi:nn180100](&v22, a4, a5);
  }
  else
  {
    long long v22 = 0uLL;
    uint64_t v23 = 0;
  }
  if (*(char *)(a6 + 47) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v22;
  *(void *)(a6 + 40) = v23;
  unsigned int v21 = *(llvm **)(v16 + 8 * v15);
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v21, (void *)(*(void *)v21 + 17));
  return 1;
}

uint64_t AGCLLVMBuilder::getComponentType(int8x16_t *this, const llvm::Type *a2, unsigned int *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *a3 = 1;
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
  {
    *a3 = *((_DWORD *)a2 + 8);
    a2 = (const llvm::Type *)**((void **)a2 + 2);
  }
  uint64_t result = 0;
  uint64_t v5 = this[9].i64[1];
  uint64_t v6 = this[11].i64[0];
  v7[0] = this[10].i64[1];
  v7[1] = v5;
  void v7[2] = v6;
  int8x16_t v8 = vextq_s8(this[12], this[12], 8uLL);
  uint64_t v9 = this[11].i64[1];
  while (a2 != (const llvm::Type *)v7[result])
  {
    if (++result == 6) {
      return 10;
    }
  }
  return result;
}

void GenericVarying::getComponentSemantic(std::string *a1, void *a2, size_t a3, unsigned int a4)
{
  std::string::basic_string[abi:nn180100]<0>(__p, "xyzw");
  if (a2) {
    std::string::basic_string[abi:nn180100](&__dst, a2, a3);
  }
  else {
    memset(&__dst, 0, sizeof(__dst));
  }
  int8x16_t v8 = std::string::append(&__dst, ".agc_comp.");
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = __p;
  if (v14 < 0) {
    uint64_t v10 = (void **)__p[0];
  }
  std::string::push_back(&v12, *((unsigned char *)v10 + a4));
  *a1 = v12;
  memset(&v12, 0, sizeof(v12));
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t AGCLLVMAGPVertexShader::getGenericVaryingInfo(uint64_t a1, void *a2, size_t a3, uint64_t a4, int a5)
{
  int Key = llvm::StringMapImpl::FindKey();
  if (Key == -1) {
    return 0;
  }
  uint64_t v11 = Key;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 9432)) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 9424);
  int v13 = *(unsigned __int8 *)(*(void *)(v12 + 8 * Key) + 10);
  if ((v13 - 2) > 3) {
    return 0;
  }
  int v14 = *(_DWORD *)(a1 + 9460) + 1;
  *(_DWORD *)(a1 + 9460) = v14;
  if (a5) {
    int v15 = 11;
  }
  else {
    int v15 = 2;
  }
  *(_DWORD *)a4 = 1;
  *(_DWORD *)(a4 + 4) = v13;
  *(void *)(a4 + 8) = 0x300000001;
  *(_DWORD *)(a4 + 16) = v14;
  uint64_t v16 = (void **)(a4 + 24);
  if (*(char *)(a4 + 47) < 0) {
    operator delete(*v16);
  }
  *(unsigned char *)(a4 + 56) = 0;
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(unsigned char *)(a4 + 57) = a5;
  *(unsigned char *)(a4 + 58) = 0;
  *(_DWORD *)(a4 + 60) = v15;
  if (a2)
  {
    std::string::basic_string[abi:nn180100](&__dst, a2, a3);
    if (*(char *)(a4 + 47) < 0) {
      operator delete(*v16);
    }
  }
  else
  {
    long long __dst = 0uLL;
    uint64_t v20 = 0;
  }
  *(_OWORD *)uint64_t v16 = __dst;
  *(void *)(a4 + 40) = v20;
  int v18 = *(llvm **)(v12 + 8 * v11);
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v18, (void *)(*(void *)v18 + 17));
  return 1;
}

llvm::Value *AGCLLVMUserVertexShader::replaceOutputUses(uint64_t *a1, unsigned __int8 *a2, llvm::Value *a3, int a4, int a5, unsigned int a6)
{
  int8x16_t v8 = a2;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v10 = (llvm::Type *)**((void **)v10 + 2);
  }
  uint64_t v11 = *(void *)(*a1 - 24);
  uint64_t v12 = (uint64_t)a1 + v11 + 32;
  BOOL v13 = v10 == *(llvm::Type **)((char *)a1 + v11 + 200) || v10 == *(llvm::Type **)((char *)a1 + v11 + 184);
  switch(a4)
  {
    case 0:
      uint64_t v14 = *(uint64_t *)((char *)a1 + v11 + 400);
      BOOL v15 = a5 == 0;
      uint64_t v16 = 1392;
      uint64_t v17 = 1448;
      goto LABEL_22;
    case 1:
      uint64_t v22 = *(uint64_t *)((char *)a1 + v11 + 400);
      uint64_t v23 = 1376;
      if (v13) {
        uint64_t v23 = 1384;
      }
      long long v24 = (const char **)(v22 + v23);
      uint64_t v25 = 1432;
      if (v13) {
        uint64_t v25 = 1440;
      }
      long long v26 = (const char **)(v22 + v25);
      if (!a5) {
        long long v26 = v24;
      }
      goto LABEL_25;
    case 2:
      uint64_t v14 = *(uint64_t *)((char *)a1 + v11 + 400);
      BOOL v15 = a5 == 0;
      uint64_t v16 = 1400;
      uint64_t v17 = 1456;
      goto LABEL_22;
    case 3:
      uint64_t v14 = *(uint64_t *)((char *)a1 + v11 + 400);
      BOOL v15 = a5 == 0;
      uint64_t v16 = 1408;
      uint64_t v17 = 1464;
      goto LABEL_22;
    case 4:
      uint64_t v14 = *(uint64_t *)((char *)a1 + v11 + 400);
      BOOL v15 = a5 == 0;
      uint64_t v16 = 1416;
      uint64_t v17 = 1472;
      goto LABEL_22;
    case 5:
      uint64_t v14 = *(uint64_t *)((char *)a1 + v11 + 400);
      BOOL v15 = a5 == 0;
      uint64_t v16 = 1424;
      uint64_t v17 = 1480;
LABEL_22:
      if (!v15) {
        uint64_t v16 = v17;
      }
      long long v26 = (const char **)(v14 + v16);
LABEL_25:
      int v18 = *v26;
      BOOL v15 = !v13;
      uint64_t v27 = 200;
      if (!v15) {
        uint64_t v27 = 168;
      }
      uint64_t v21 = *(void *)(v12 + v27);
      if (v18) {
        size_t v19 = strlen(v18);
      }
      else {
        size_t v19 = 0;
      }
      break;
    default:
      int v18 = 0;
      size_t v19 = 0;
      BOOL v15 = !v13;
      uint64_t v20 = 200;
      if (!v15) {
        uint64_t v20 = 168;
      }
      uint64_t v21 = *(void *)(v12 + v20);
      break;
  }
  uint64_t v28 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1 + v11 + 32, (uint64_t)v18, v19, *(uint64_t *)((char *)a1 + v11 + 176), *(uint64_t *)((char *)a1 + v11 + 2768), v21);
  uint64_t v29 = *(void *)v8;
  if (*(void *)v8 && *(unsigned char *)(v29 + 8) == 18)
  {
    unsigned int v30 = *(_DWORD *)(v29 + 32);
    if (v30 >= a6) {
      uint64_t v31 = a6;
    }
    else {
      uint64_t v31 = v30;
    }
    *(_OWORD *)unint64_t v71 = 0u;
    long long v72 = 0u;
    unsigned int v32 = v8[16];
    uint64_t v33 = (AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32);
    if (v32 < 0x15 || (v32 & 0xFE) == 0x5A)
    {
      AGCLLVMBuilder::unboxVector(v33, (llvm::Value *)v8, v71);
      if (!v31) {
        return (llvm::Value *)EraseInstructionChain((llvm::Value *)v8);
      }
      unint64_t v45 = v71;
      uint64_t v46 = v31;
      do
      {
        *unint64_t v45 = AGCLLVMBuilder::extendFromSmall((llvm::Type **)((char *)a1 + *(void *)(*a1 - 24) + 32), *v45, v10, 1);
        ++v45;
        --v46;
      }
      while (v46);
    }
    else
    {
      int8x16_t v8 = (unsigned __int8 *)AGCLLVMBuilder::extendFromSmall((llvm::Type **)v33, (llvm::Value *)v8, v10, 1);
      AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32), (llvm::Value *)v8, v71);
    }
    if (v31)
    {
      uint64_t v62 = v28;
      uint64_t v47 = 0;
      unint64_t v48 = a1 + 1;
      uint64_t v63 = v31;
      do
      {
        uint64_t Select = v71[v47];
        uint64_t v50 = *(void *)(*a1 - 24);
        if (v10 == *(llvm::Type **)((char *)a1 + v50 + 200))
        {
          if (*((unsigned char *)a1 + 5061))
          {
            uint64_t v51 = (llvm::IRBuilderBase *)((char *)a1 + v50 + 40);
            uint64_t v52 = *(uint64_t *)((char *)a1 + v50 + 232);
            __int16 v67 = 257;
            uint64_t v53 = v10;
            uint64_t v54 = a3;
            uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v51, 49, (uint64_t)Select, v52, (uint64_t)v66);
            uint64_t v56 = (llvm::Value *)llvm::ConstantInt::get();
            __int16 v70 = 257;
            uint64_t v57 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v51, Cast, v56, (const llvm::Twine *)&Add);
            uint64_t v58 = llvm::ConstantInt::get();
            __int16 v65 = 257;
            llvm::IRBuilderBase::CreateICmp((uint64_t *)v51, 34, v57, v58, (uint64_t)v64);
            llvm::ConstantFP::get();
            uint64_t v31 = v63;
            a3 = v54;
            uint64_t v10 = v53;
            uint64_t v28 = v62;
            unint64_t v48 = a1 + 1;
            uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
          }
        }
        uint64_t v59 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v60 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
        __int16 v67 = 257;
        uint64_t Add = llvm::IRBuilderBase::CreateAdd(v60, a3, v59, (const llvm::Twine *)v66);
        uint64_t v69 = (uint64_t)Select;
        uint64_t v61 = (uint64_t)v48 + *(void *)(*a1 - 24) + 32;
        __int16 v67 = 257;
        llvm::IRBuilderBase::CreateCall(v61, *(void *)(v28 + 24), v28, (uint64_t)&Add, 2, (uint64_t)v66);
        ++v47;
      }
      while (v31 != v47);
    }
    return (llvm::Value *)EraseInstructionChain((llvm::Value *)v8);
  }
  uint64_t v34 = (uint64_t)AGCLLVMBuilder::extendFromSmall((llvm::Type **)((char *)a1 + *(void *)(*a1 - 24) + 32), (llvm::Value *)v8, v10, 1);
  uint64_t v35 = *a1;
  uint64_t v36 = *(void *)(*a1 - 24);
  if (v10 == *(llvm::Type **)((char *)a1 + v36 + 200) && *((unsigned char *)a1 + 5061))
  {
    uint64_t v37 = (llvm::IRBuilderBase *)((char *)a1 + v36 + 40);
    uint64_t v38 = *(uint64_t *)((char *)a1 + v36 + 232);
    __int16 v67 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v37, 49, v34, v38, (uint64_t)v66);
    uint64_t v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v70 = 257;
    uint64_t v41 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v37, v39, v40, (const llvm::Twine *)&Add);
    uint64_t v42 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)v37, 34, v41, v42, (uint64_t)v64);
    llvm::ConstantFP::get();
    uint64_t v34 = llvm::IRBuilderBase::CreateSelect();
    uint64_t v35 = *a1;
  }
  uint64_t Add = (uint64_t)a3;
  uint64_t v69 = v34;
  uint64_t v43 = (uint64_t)a1 + *(void *)(v35 - 24) + 40;
  __int16 v67 = 257;
  return llvm::IRBuilderBase::CreateCall(v43, *(void *)(v28 + 24), v28, (uint64_t)&Add, 2, (uint64_t)v66);
}

uint64_t AGCLLVMAGPVertexShader::getGenericVaryingInfo(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8));
  size_t v13 = v12;
  uint64_t v14 = *(const llvm::Type **)(*(void *)(a2 + 16) + 8 * a3);
  int ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a1 + *(void *)(*a1 - 24) + 32), v14, &v18);
  if ((*((_DWORD *)v14 + 2) & 0xFE) == 0x12) {
    int v16 = *((_DWORD *)v14 + 8);
  }
  else {
    int v16 = 1;
  }
  return AGCLLVMAGPVertexShader::getGenericVaryingInfo((uint64_t)a1, ComponentType, v16, String, v13, a5, a6);
}

uint64_t AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  __src[0] = a5;
  __src[1] = a6;
  v10[0] = v11;
  v10[1] = (void *)0x200000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)v10, __src, v10);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v7 = v6;
  if (v10[0] != v11) {
    free(v10[0]);
  }
  return v7;
}

llvm::Value *AGCLLVMBuilder::extendFromSmall(llvm::Type **this, llvm::Value *a2, llvm::Type *a3, int a4)
{
  uint64_t v5 = a2;
  if (this[19] == a3)
  {
    uint64_t v7 = (uint64_t *)(this + 21);
  }
  else
  {
    if (this[24] != a3 && this[23] != a3 && this[22] != a3) {
      return v5;
    }
    uint64_t v7 = (uint64_t *)(this + 25);
  }
  uint64_t v8 = *v7;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v8 = llvm::FixedVectorType::get();
  }
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12) {
    unsigned int v9 = *(unsigned __int8 *)(**(void **)(v8 + 16) + 8);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 8);
  }
  uint64_t v10 = (llvm::IRBuilderBase *)(this + 1);
  if (v9 > 6)
  {
    __int16 v15 = 257;
    if (a4) {
      uint64_t v12 = 40;
    }
    else {
      uint64_t v12 = 39;
    }
    return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, v12, (uint64_t)v5, v8, (uint64_t)v14);
  }
  else
  {
    __int16 v15 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v10, v5, (llvm::Type *)v8, (const llvm::Twine *)v14);
  }
}

uint64_t AGCLLVMUserObject::replaceRaytracingFunctions(AGCLLVMUserObject *this)
{
  uint64_t v1 = this;
  *(void *)&long long v670 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1785)
    && !*((unsigned char *)this + 3712))
  {
    AGCLLVMUserObject::getRaytracingFunctionMap(this);
    if (!dword_1EBD0E00C)
    {
      std::string::basic_string[abi:nn180100]<0>(v621, "air.get_intersection_params_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v621[3], "air.get_world_space_ray_origin_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v623, "air.get_world_space_ray_direction_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v626, "air.get_ray_min_distance_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v629, "air.get_candidate_intersection_type_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v632, "air.get_candidate_triangle_distance_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v635, "air.is_candidate_non_opaque_bounding_box_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v638, "air.get_candidate_geometry_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v641, "air.get_candidate_primitive_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v643, "air.get_candidate_instance_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v644, "air.get_candidate_user_instance_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v645, "air.get_candidate_instance_count_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v646, "air.get_candidate_object_to_world_transform_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v647, "air.get_candidate_world_to_object_transform_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v648, "air.get_candidate_triangle_barycentric_coord_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v649, "air.is_candidate_triangle_front_facing_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(&v650, "air.get_candidate_curve_distance_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v651, "air.get_candidate_curve_parameter_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v652, "air.get_candidate_ray_origin_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v653, "air.get_candidate_ray_direction_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v654, "air.get_candidate_primitive_data_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v655, "air.get_committed_intersection_type_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v656, "air.get_committed_distance_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v657, "air.get_committed_geometry_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v658, "air.get_committed_primitive_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v659, "air.get_committed_instance_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v660, "air.get_committed_user_instance_id_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v661, "air.get_committed_instance_count_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v662, "air.get_committed_object_to_world_transform_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v663, "air.get_committed_world_to_object_transform_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v664, "air.get_committed_triangle_barycentric_coord_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v665, "air.is_committed_triangle_front_facing_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v666, "air.get_committed_curve_parameter_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v667, "air.get_committed_ray_origin_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v668, "air.get_committed_ray_direction_intersection_query");
      std::string::basic_string[abi:nn180100]<0>(v669, "air.get_committed_primitive_data_intersection_query");
      uint64_t v5 = 108;
      v589 = (std::string *)operator new(0x360uLL);
      int v591 = v589 + 36;
      __int32 v590 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)v621, &v670, v589);
      do
      {
        if (SHIBYTE(v621[v5 - 1]) < 0) {
          operator delete(*(void **)&v620[v5 * 8]);
        }
        v5 -= 3;
      }
      while (v5 * 8);
      std::string::basic_string[abi:nn180100]<0>(v621, "air.get_type_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v621[3], "air.get_distance_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v623, "air.get_primitive_id_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v626, "air.get_geometry_id_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v629, "air.get_primitive_data_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v632, "air.get_instance_id_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v635, "air.get_user_instance_id_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(&v638, "air.get_instance_count_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v641, "air.get_triangle_barycentric_coord_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v643, "air.is_triangle_front_facing_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v644, "air.get_curve_parameter_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v645, "air.get_object_to_world_transform_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v646, "air.get_world_to_object_transform_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v647, "air.get_ray_origin_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v648, "air.get_ray_direction_intersection_result");
      std::string::basic_string[abi:nn180100]<0>(v649, "air.get_ray_min_distance_intersection_result");
      uint64_t v6 = 48;
      v586 = (std::string *)operator new(0x180uLL);
      unint64_t v588 = v586 + 16;
      v587 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)v621, &v650, v586);
      do
      {
        if (SHIBYTE(v621[v6 - 1]) < 0) {
          operator delete(*(void **)&v620[v6 * 8]);
        }
        v6 -= 3;
      }
      while (v6 * 8);
      v621[0] = &v621[3];
      *(_OWORD *)&v621[1] = xmmword_1CADD64C0;
      __src[0] = &__src[3];
      *(_OWORD *)&__src[1] = xmmword_1CADD64C0;
      char v610 = &v612;
      long long v611 = xmmword_1CADD64C0;
      uint64_t v607 = v609;
      long long v608 = xmmword_1CADD64C0;
      char v604 = v606;
      long long v605 = xmmword_1CADD64C0;
      BOOL v601 = v603;
      long long v602 = xmmword_1CADD64C0;
      uint64_t v598 = v600;
      long long v599 = xmmword_1CADD64C0;
      char v595 = v597;
      long long v596 = xmmword_1CADD64C0;
      v592 = v594;
      long long v593 = xmmword_1CADD64C0;
      for (unsigned int i = 0; i < 2; ++i)
      {
        unsigned int v7 = 0;
        unsigned int v584 = 0;
        do
        {
          BOOL v8 = v7 != 0;
          for (unsigned int j = 0; j < 2; ++j)
          {
            for (unsigned int k = 0; k < 2; ++k)
            {
              unsigned int v581 = 0;
              do
              {
                for (unsigned int m = 0; m < 2; ++m)
                {
                  unsigned int v579 = 0;
                  do
                  {
                    LOWORD(v9) = 0;
                    unsigned int v578 = 0;
                    do
                    {
                      v572.__r_.__value_.__r.__words[0] = (std::string::size_type)&i;
                      v572.__r_.__value_.__l.__size_ = (std::string::size_type)&v584;
                      v572.__r_.__value_.__r.__words[2] = (std::string::size_type)&j;
                      p_unsigned int k = &k;
                      char v574 = &v581;
                      p_unsigned int m = &m;
                      int v576 = &v579;
                      unsigned int v577 = &v578;
                      __int16 v10 = v584 == 2;
                      __int16 v11 = v584 == 1;
                      __int16 v12 = j;
                      __int16 v13 = k;
                      __int16 v14 = v581;
                      __int16 v15 = m;
                      __int16 v16 = v579;
                      __int16 v17 = i;
                      std::string::basic_string[abi:nn180100]<0>(&v568, "air.intersect");
                      AGCLLVMUserObject::initializeRaytracingFunctionMap(void)::$_0::operator()((uint64_t)&__p, &v572, &v568);
                      if ((v571 & 0x80u) == 0) {
                        p_p = &__p;
                      }
                      else {
                        p_p = __p;
                      }
                      size_t v19 = v571;
                      if ((v571 & 0x80u) != 0) {
                        size_t v19 = v570;
                      }
                      v621[1] = 0;
                      llvm::SmallVectorImpl<char>::append<char const*,void>(v621, p_p, &p_p[v19]);
                      if ((char)v571 < 0) {
                        operator delete(__p);
                      }
                      if (SHIBYTE(v568.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v568.__r_.__value_.__l.__data_);
                      }
                      __int16 v20 = v11 | (32 * v9) | (v10 << 6) | (8 * v12) | (v13 << 7) | (16 * v14) | (2 * v15) | (4 * v16) | (v17 << 8);
                      uint64_t v21 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v621[0], (size_t)v621[1]);
                      *(_DWORD *)(v21 + 8) = 0;
                      *(_DWORD *)(v21 + 12) = v8;
                      *(_WORD *)(v21 + 16) = v20;
                      std::string::basic_string[abi:nn180100]<0>(&v567, "air.intersect_direct_access");
                      AGCLLVMUserObject::initializeRaytracingFunctionMap(void)::$_0::operator()((uint64_t)&__p, &v572, &v567);
                      if ((v571 & 0x80u) == 0) {
                        uint64_t v22 = &__p;
                      }
                      else {
                        uint64_t v22 = __p;
                      }
                      size_t v23 = v571;
                      if ((v571 & 0x80u) != 0) {
                        size_t v23 = v570;
                      }
                      v621[1] = 0;
                      llvm::SmallVectorImpl<char>::append<char const*,void>(v621, v22, &v22[v23]);
                      if ((char)v571 < 0) {
                        operator delete(__p);
                      }
                      if (SHIBYTE(v567.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v567.__r_.__value_.__l.__data_);
                      }
                      uint64_t v24 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v621[0], (size_t)v621[1]);
                      *(_DWORD *)(v24 + 8) = 1;
                      *(_DWORD *)(v24 + 12) = v8;
                      *(_WORD *)(v24 + 16) = v20;
                      std::string::basic_string[abi:nn180100]<0>(&v566, "air.release_intersection_result");
                      AGCLLVMUserObject::initializeRaytracingFunctionMap(void)::$_0::operator()((uint64_t)&__p, &v572, &v566);
                      if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v566.__r_.__value_.__l.__data_);
                      }
                      if ((v571 & 0x80u) == 0) {
                        uint64_t v25 = &__p;
                      }
                      else {
                        uint64_t v25 = __p;
                      }
                      if ((v571 & 0x80u) == 0) {
                        size_t v26 = v571;
                      }
                      else {
                        size_t v26 = v570;
                      }
                      uint64_t v27 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v25, v26);
                      *(_DWORD *)(v27 + 8) = 15;
                      *(_DWORD *)(v27 + 12) = v8;
                      *(_WORD *)(v27 + 16) = v20;
                      std::string::basic_string[abi:nn180100]<0>(&v563, "air.release_intersect_payload");
                      AGCLLVMUserObject::initializeRaytracingFunctionMap(void)::$_0::operator()((uint64_t)v564, &v572, &v563);
                      if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v563.__r_.__value_.__l.__data_);
                      }
                      if ((v565 & 0x80u) == 0) {
                        uint64_t v28 = v564;
                      }
                      else {
                        uint64_t v28 = (void **)v564[0];
                      }
                      if ((v565 & 0x80u) == 0) {
                        size_t v29 = v565;
                      }
                      else {
                        size_t v29 = (size_t)v564[1];
                      }
                      uint64_t v30 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v28, v29);
                      *(_DWORD *)(v30 + 8) = 16;
                      *(_DWORD *)(v30 + 12) = v8;
                      *(_WORD *)(v30 + 16) = v20;
                      uint64_t v31 = v586;
                      unsigned int v32 = v587;
                      while (v31 != v32)
                      {
                        if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v560, v31->__r_.__value_.__l.__data_, v31->__r_.__value_.__l.__size_);
                        }
                        else
                        {
                          long long v33 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
                          v560.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v560.__r_.__value_.__l.__data_ = v33;
                        }
                        AGCLLVMUserObject::initializeRaytracingFunctionMap(void)::$_0::operator()((uint64_t)v561, &v572, &v560);
                        if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v560.__r_.__value_.__l.__data_);
                        }
                        if ((v562 & 0x80u) == 0) {
                          uint64_t v34 = v561;
                        }
                        else {
                          uint64_t v34 = (void **)v561[0];
                        }
                        if ((v562 & 0x80u) == 0) {
                          size_t v35 = v562;
                        }
                        else {
                          size_t v35 = (size_t)v561[1];
                        }
                        uint64_t v36 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v34, v35);
                        *(_DWORD *)(v36 + 8) = 14;
                        *(_DWORD *)(v36 + 12) = v8;
                        *(_WORD *)(v36 + 16) = v20;
                        if ((char)v562 < 0) {
                          operator delete(v561[0]);
                        }
                        ++v31;
                      }
                      if ((char)v565 < 0) {
                        operator delete(v564[0]);
                      }
                      if ((char)v571 < 0) {
                        operator delete(__p);
                      }
                      unsigned int v9 = v578 + 1;
                      unsigned int v578 = v9;
                    }
                    while (v9 < 2);
                    ++v579;
                    BOOL v37 = v584 != 0;
                  }
                  while (v579 <= v37);
                }
                ++v581;
              }
              while (v581 <= v37);
              __src[1] = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(__src, "air.allocate_intersection_query", "");
              *(void *)&long long v611 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v610, "air.reset_intersection_query", "");
              *(void *)&long long v608 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v607, "air.next_intersection_query", "");
              *(void *)&long long v605 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v604, "air.abort_intersection_query", "");
              *(void *)&long long v602 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v601, "air.commit_triangle_intersection_intersection_query", "");
              *(void *)&long long v599 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v598, "air.commit_bounding_box_intersection_intersection_query", "");
              *(void *)&long long v596 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v595, "air.commit_curve_intersection_intersection_query", "");
              *(void *)&long long v593 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v592, "air.deallocate_intersection_query", "");
              if (v584)
              {
                if (v584 == 1) {
                  uint64_t v38 = ".instancing";
                }
                else {
                  uint64_t v38 = ".multi_level_instancing";
                }
                std::string::basic_string[abi:nn180100]<0>(&v572, v38);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v39 = &v572;
                }
                else {
                  uint64_t v39 = (std::string *)v572.__r_.__value_.__r.__words[0];
                }
                std::string::size_type size = HIBYTE(v572.__r_.__value_.__r.__words[2]);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = v572.__r_.__value_.__l.__size_;
                }
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, v39, (unsigned char *)v39 + size);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v41 = &v572;
                }
                else {
                  uint64_t v41 = (std::string *)v572.__r_.__value_.__r.__words[0];
                }
                std::string::size_type v42 = HIBYTE(v572.__r_.__value_.__r.__words[2]);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v42 = v572.__r_.__value_.__l.__size_;
                }
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v610, v41, (unsigned char *)v41 + v42);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v43 = &v572;
                }
                else {
                  uint64_t v43 = (std::string *)v572.__r_.__value_.__r.__words[0];
                }
                std::string::size_type v44 = HIBYTE(v572.__r_.__value_.__r.__words[2]);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v44 = v572.__r_.__value_.__l.__size_;
                }
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v607, v43, (unsigned char *)v43 + v44);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unint64_t v45 = &v572;
                }
                else {
                  unint64_t v45 = (std::string *)v572.__r_.__value_.__r.__words[0];
                }
                std::string::size_type v46 = HIBYTE(v572.__r_.__value_.__r.__words[2]);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v46 = v572.__r_.__value_.__l.__size_;
                }
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v604, v45, (unsigned char *)v45 + v46);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v47 = &v572;
                }
                else {
                  uint64_t v47 = (std::string *)v572.__r_.__value_.__r.__words[0];
                }
                std::string::size_type v48 = HIBYTE(v572.__r_.__value_.__r.__words[2]);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v48 = v572.__r_.__value_.__l.__size_;
                }
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v601, v47, (unsigned char *)v47 + v48);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v49 = &v572;
                }
                else {
                  uint64_t v49 = (std::string *)v572.__r_.__value_.__r.__words[0];
                }
                std::string::size_type v50 = HIBYTE(v572.__r_.__value_.__r.__words[2]);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v50 = v572.__r_.__value_.__l.__size_;
                }
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v598, v49, (unsigned char *)v49 + v50);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v51 = &v572;
                }
                else {
                  uint64_t v51 = (std::string *)v572.__r_.__value_.__r.__words[0];
                }
                std::string::size_type v52 = HIBYTE(v572.__r_.__value_.__r.__words[2]);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v52 = v572.__r_.__value_.__l.__size_;
                }
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v595, v51, (unsigned char *)v51 + v52);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v53 = &v572;
                }
                else {
                  uint64_t v53 = (std::string *)v572.__r_.__value_.__r.__words[0];
                }
                std::string::size_type v54 = HIBYTE(v572.__r_.__value_.__r.__words[2]);
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v54 = v572.__r_.__value_.__l.__size_;
                }
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v592, v53, (unsigned char *)v53 + v54);
                if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v572.__r_.__value_.__l.__data_);
                }
              }
              if (j)
              {
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v610, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v607, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v604, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v601, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v598, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v595, ".triangle_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v592, ".triangle_data", "");
              }
              __int16 v55 = k;
              if (k)
              {
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v610, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v607, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v604, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v601, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v598, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v595, ".curve_data", "");
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v592, ".curve_data", "");
                __int16 v55 = k;
              }
              __int16 v56 = (v584 == 1) | ((v584 == 2) << 6) | (8 * j) | (v55 << 7);
              uint64_t v57 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(__src[0], (size_t)__src[1]);
              *(_DWORD *)(v57 + 8) = 2;
              *(_DWORD *)(v57 + 12) = v8;
              *(_WORD *)(v57 + 16) = v56;
              uint64_t v58 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v610, v611);
              *(_DWORD *)(v58 + 8) = 3;
              *(_DWORD *)(v58 + 12) = v8;
              *(_WORD *)(v58 + 16) = v56;
              uint64_t v59 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v607, v608);
              *(_DWORD *)(v59 + 8) = 4;
              *(_DWORD *)(v59 + 12) = v8;
              *(_WORD *)(v59 + 16) = v56;
              uint64_t v60 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v604, v605);
              *(_DWORD *)(v60 + 8) = 5;
              *(_DWORD *)(v60 + 12) = v8;
              *(_WORD *)(v60 + 16) = v56;
              uint64_t v61 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v601, v602);
              *(_DWORD *)(v61 + 8) = 6;
              *(_DWORD *)(v61 + 12) = v8;
              *(_WORD *)(v61 + 16) = v56;
              uint64_t v62 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v598, v599);
              *(_DWORD *)(v62 + 8) = 7;
              *(_DWORD *)(v62 + 12) = v8;
              *(_WORD *)(v62 + 16) = v56;
              uint64_t v63 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v595, v596);
              *(_DWORD *)(v63 + 8) = 8;
              *(_DWORD *)(v63 + 12) = v8;
              *(_WORD *)(v63 + 16) = v56;
              uint64_t v64 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v592, v593);
              *(_DWORD *)(v64 + 8) = 10;
              *(_DWORD *)(v64 + 12) = v8;
              *(_WORD *)(v64 + 16) = v56;
              __int16 v65 = v589;
              int v66 = v590;
              while (v65 != v66)
              {
                if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(&v572, v65->__r_.__value_.__l.__data_, v65->__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v67 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
                  v572.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v572.__r_.__value_.__l.__data_ = v67;
                }
                unsigned int v68 = v584;
                if (v584 == 1)
                {
                  std::string::append(&v572, ".instancing");
                  unsigned int v68 = v584;
                }
                if (v68 == 2) {
                  std::string::append(&v572, ".multi_level_instancing");
                }
                if (j) {
                  std::string::append(&v572, ".triangle_data");
                }
                if (k) {
                  std::string::append(&v572, ".curve_data");
                }
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v69 = &v572;
                }
                else {
                  uint64_t v69 = (std::string *)v572.__r_.__value_.__r.__words[0];
                }
                if ((v572.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v70 = HIBYTE(v572.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v70 = v572.__r_.__value_.__l.__size_;
                }
                uint64_t v71 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(v69, v70);
                *(_DWORD *)(v71 + 8) = 9;
                *(_DWORD *)(v71 + 12) = v8;
                *(_WORD *)(v71 + 16) = v56;
                if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v572.__r_.__value_.__l.__data_);
                }
                ++v65;
              }
            }
          }
          unsigned int v7 = v584 + 1;
          unsigned int v584 = v7;
        }
        while (v7 < 3);
      }
      uint64_t v72 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>("air.get_size_intersection_function_table", 0x28uLL);
      *(void *)(v72 + 8) = 11;
      *(_WORD *)(v72 + 16) = 0;
      uint64_t v73 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>("air.get_buffer_intersection_function_table.p1i8", 0x2FuLL);
      *(void *)(v73 + 8) = 12;
      *(_WORD *)(v73 + 16) = 0;
      uint64_t v74 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>("air.get_buffer_intersection_function_table.p2i8", 0x2FuLL);
      *(void *)(v74 + 8) = 12;
      *(_WORD *)(v74 + 16) = 0;
      uint64_t v75 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>("air.set_buffer_intersection_function_table.p1i8", 0x2FuLL);
      *(void *)(v75 + 8) = 13;
      *(_WORD *)(v75 + 16) = 0;
      uint64_t v76 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>("air.set_buffer_intersection_function_table.p2i8", 0x2FuLL);
      *(void *)(v76 + 8) = 13;
      *(_WORD *)(v76 + 16) = 0;
      uint64_t v77 = *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>("air.intersect.gin1122SWWABvh", 0x1CuLL);
      *(void *)(v77 + 8) = 0;
      *(_WORD *)(v77 + 16) = 0;
      if (v592 != v594) {
        free(v592);
      }
      uint64_t v1 = this;
      if (v595 != v597) {
        free(v595);
      }
      if (v598 != v600) {
        free(v598);
      }
      if (v601 != v603) {
        free(v601);
      }
      if (v604 != v606) {
        free(v604);
      }
      if (v607 != v609) {
        free(v607);
      }
      if (v610 != &v612) {
        free(v610);
      }
      if (__src[0] != &__src[3]) {
        free(__src[0]);
      }
      if (v621[0] != &v621[3]) {
        free(v621[0]);
      }
      v621[0] = &v586;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v621);
      v621[0] = &v589;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v621);
    }
    AGCLLVMUserObject::createSCSIFTHeapGlobal(v1);
    char v78 = (AGCLLVMUserObject *)(*(uint64_t (**)(char *))(*(void *)((char *)v1
                                                                             + *(void *)(*(void *)v1 - 24))
                                                                 + 64))((char *)v1 + *(void *)(*(void *)v1 - 24));
    if (v78 != 29)
    {
      uint64_t v79 = (char *)v1 + *(void *)(*(void *)v1 - 24);
      BOOL v80 = (void *)*((void *)v79 + 50);
      uint64_t v81 = *((void *)v79 + 46);
      uint64_t GlobalRayStridesGlobal = AGCLLVMUserObject::createGlobalRayStridesGlobal(this);
      uint64_t v83 = *v80;
      unint64_t v84 = v80;
      uint64_t v1 = this;
      char v78 = (AGCLLVMUserObject *)(*(void *(**)(void **__return_ptr, void *, uint64_t, uint64_t))(v83 + 1288))(v621, v84, v81, GlobalRayStridesGlobal);
      long long v85 = *(_OWORD *)&v621[2];
      *(_OWORD *)((char *)this + 3784) = *(_OWORD *)v621;
      *(_OWORD *)((char *)this + 3800) = v85;
      *(_OWORD *)((char *)this + 3816) = v622;
    }
    AGCLLVMUserObject::getRaytracingFunctionMap(v78);
    AGCLLVMUserObject::createAccelerationStructureHeapGlobal(v1);
    if ((*(unsigned int (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 64))((char *)v1 + *(void *)(*(void *)v1 - 24)) != 8
      && (*(unsigned int (**)(char *))(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24)) + 64))((char *)v1 + *(void *)(*(void *)v1 - 24)) != 29)
    {
      AGCLLVMUserObject::createSCSConfigurationBufferGlobal((char *)v1);
    }
    if (*(unsigned char *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 1813))
    {
      char v86 = (unsigned char *)*((void *)v1 + 294);
      if (v86[48]) {
        BOOL v87 = 1;
      }
      else {
        BOOL v87 = v86[50] != 0;
      }
      (*(void (**)(AGCLLVMUserObject *, BOOL, void))(*(void *)v1 + 440))(v1, v87, v86[51]);
    }
    if (dword_1EBD0E008)
    {
      for (uint64_t n = (void *)AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map; ; ++n)
      {
        BOOL v89 = !*n || *n == -8;
        if (!v89) {
          break;
        }
      }
    }
    else
    {
      uint64_t n = (void *)AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map;
    }
    uint64_t v90 = AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map
        + 8 * dword_1EBD0E008;
    if (n != (void *)v90)
    {
      unint64_t v460 = 0;
      unint64_t v461 = 0;
      unsigned int v462 = 0;
      uint64_t v456 = (char *)v1 + 368;
      uint64_t v463 = (char *)v1 + 336;
      uint64_t v464 = (char *)v1 + 3784;
      long long v450 = (AGCLLVMUserObject *)((char *)v1 + 232);
      unsigned int v91 = (void *)*n;
      uint64_t v451 = AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map
           + 8 * dword_1EBD0E008;
      unint64_t v455 = 1;
      while (1)
      {
        char v477 = v91 + 3;
        uint64_t Function = llvm::Module::getFunction();
        if (Function)
        {
          uint64_t v93 = *(void *)(Function + 8);
          if (v93)
          {
            uint64_t v94 = 0;
            unint64_t v95 = 0;
            unint64_t v96 = 0;
            unsigned __int16 v97 = *((_WORD *)v91 + 8);
            unsigned int v466 = v97 & 1;
            unsigned int v490 = v97;
            int v479 = v97 & 0x41;
            v459 = (llvm::Function *)Function;
            std::string::size_type v98 = **(llvm::Type ***)(*(void *)(Function + 24) + 16);
            do
            {
              uint64_t v99 = *(void *)(v93 + 24);
              if ((unint64_t)v95 >= v96)
              {
                uint64_t v100 = (v95 - v94) >> 3;
                unint64_t v101 = v100 + 1;
                if ((unint64_t)(v100 + 1) >> 61) {
LABEL_633:
                }
                  abort();
                if ((uint64_t)(v96 - (void)v94) >> 2 > v101) {
                  unint64_t v101 = (uint64_t)(v96 - (void)v94) >> 2;
                }
                if (v96 - (unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v102 = v101;
                }
                if (v102)
                {
                  uint64_t v103 = v94;
                  unint64_t v102 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v102);
                  uint64_t v94 = v103;
                }
                else
                {
                  uint64_t v104 = 0;
                }
                uint64_t v105 = (char *)(v102 + 8 * v100);
                *(void *)uint64_t v105 = v99;
                uint64_t v106 = v105 + 8;
                while (v95 != v94)
                {
                  uint64_t v107 = *((void *)v95 - 1);
                  v95 -= 8;
                  *((void *)v105 - 1) = v107;
                  v105 -= 8;
                }
                unint64_t v96 = v102 + 8 * v104;
                if (v94) {
                  operator delete(v94);
                }
                uint64_t v94 = v105;
                unint64_t v95 = v106;
              }
              else
              {
                *(void *)unint64_t v95 = v99;
                v95 += 8;
              }
              uint64_t v93 = *(void *)(v93 + 8);
            }
            while (v93);
            if (v94 == v95)
            {
              char v454 = v94;
              uint64_t v457 = 0;
              uint64_t v458 = 0;
              uint64_t v1 = this;
              uint64_t v90 = v451;
LABEL_549:
              llvm::Function::eraseFromParent(v459);
              if (v454) {
                operator delete(v454);
              }
              if (v458) {
                operator delete(v458);
              }
              if (v457) {
                operator delete(v457);
              }
              goto LABEL_555;
            }
            uint64_t v457 = 0;
            uint64_t v458 = 0;
            long long __dst = 0;
            uint64_t v467 = 0;
            uint64_t v468 = 0;
            uint64_t v473 = 0;
            uint64_t v108 = 18;
            if (!v479) {
              uint64_t v108 = 16;
            }
            uint64_t v453 = v108;
            char v454 = v94;
            uint64_t v109 = 17;
            if (v479)
            {
              int v110 = 6;
            }
            else
            {
              uint64_t v109 = 15;
              int v110 = 5;
            }
            if ((v490 & 6) != 0) {
              ++v109;
            }
            uint64_t v470 = v109;
            if ((v490 & 6) != 0) {
              unsigned int v111 = v110 + 1;
            }
            else {
              unsigned int v111 = v110;
            }
            unsigned int v452 = v111;
            uint64_t v112 = (llvm::Instruction **)v94;
            char v485 = (uint64_t **)v98;
            while (2)
            {
              uint64_t v113 = *v112;
              int v114 = *((_DWORD *)*v112 + 5);
              llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), *v112);
              uint64_t v115 = llvm::UndefValue::get();
              int v116 = *((_DWORD *)v91 + 2);
              uint64_t v117 = (void *)((char *)v113 - 32 * (v114 & 0x7FFFFFF));
              switch(v116)
              {
                case 0:
                case 1:
                  char v486 = v113;
                  BOOL v89 = v116 == 1;
                  LOBYTE(v598) = v116 == 1;
                  uint64_t v118 = 3;
                  if (v89) {
                    uint64_t v118 = 1;
                  }
                  if ((v490 & 0x40) == 0) {
                    uint64_t v118 = 0;
                  }
                  uint64_t v119 = v470 + v118;
                  if ((v490 & 0x100) != 0) {
                    uint64_t v120 = v119 + 5;
                  }
                  else {
                    uint64_t v120 = v119;
                  }
                  uint64_t v121 = *((void *)v459 + 12);
                  if ((v490 & 0x100) == 0)
                  {
                    IntersectionFunctionTableHeapGlobal = AGCLLVMUserObject::createIntersectionFunctionTableHeapGlobal(this);
                    AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(this, v486, v452, IntersectionFunctionTableHeapGlobal, v123);
                  }
                  long long v481 = v112;
                  v621[0] = *(void **)v117;
                  v621[1] = *((void **)v117 + 4);
                  v621[2] = *((void **)v117 + 8);
                  v621[3] = *((void **)v117 + 12);
                  *(void *)&long long v622 = v117[16];
                  if (v479)
                  {
                    int v124 = v117 + 24;
                    uint64_t v125 = v117[20];
                  }
                  else
                  {
                    int v124 = v117 + 20;
                    uint64_t v125 = llvm::ConstantInt::get();
                  }
                  *((void *)&v622 + 1) = v125;
                  if ((v490 & 6) != 0)
                  {
                    uint64_t v188 = *v124;
                    v124 += 4;
                    uint64_t v187 = v188;
                  }
                  else
                  {
                    uint64_t v187 = llvm::ConstantFP::get();
                  }
                  uint64_t v623 = v187;
                  uint64_t v189 = (llvm::ConstantPointerNull *)llvm::PointerType::get();
                  uint64_t v191 = v189;
                  if ((v490 & 0x100) != 0)
                  {
                    uint64_t v624 = llvm::ConstantPointerNull::get(v189, v190);
                    uint64_t v625 = *v124;
                    uint64_t v626 = v124[4];
                    uint64_t v627 = v124[8];
                    unint64_t v194 = v124 + 16;
                    uint64_t v193 = v124[12];
                  }
                  else
                  {
                    uint64_t v624 = *v124;
                    uint64_t v625 = llvm::ConstantPointerNull::get(v189, v190);
                    uint64_t v626 = llvm::ConstantInt::get();
                    uint64_t v627 = llvm::ConstantInt::get();
                    uint64_t v193 = llvm::ConstantPointerNull::get(v191, v192);
                    unint64_t v194 = v124 + 4;
                  }
                  uint64_t v628 = v193;
                  unint64_t v195 = (llvm::Type **)*v194;
                  uint64_t v632 = *v194;
                  uint64_t v196 = v194[4];
                  uint64_t v633 = v196;
                  if (*(unsigned char *)(v196 + 16) == 16) {
                    uint64_t v197 = v196;
                  }
                  else {
                    uint64_t v197 = 0;
                  }
                  if (!v197)
                  {
                    LOBYTE(v631) = 0;
LABEL_319:
                    LODWORD(v634) = 1;
                    goto LABEL_320;
                  }
                  unsigned int v198 = (uint64_t *)(v197 + 24);
                  if (*(_DWORD *)(v197 + 32) > 0x40u)
                  {
                    uint64_t v200 = *(void *)*v198;
                    LOBYTE(v631) = v200 != 0;
                    if (!v200) {
                      goto LABEL_319;
                    }
                    unsigned int v198 = (uint64_t *)*v198;
                  }
                  else
                  {
                    uint64_t v199 = (uint64_t *)*v198;
                    LOBYTE(v631) = *v198 != 0;
                    if (!v199) {
                      goto LABEL_319;
                    }
                  }
                  uint64_t v201 = (uint64_t *)*v198;
                  uint64_t v202 = (void *)v460;
                  if (v460 <= (unint64_t)v201) {
                    uint64_t v202 = v201;
                  }
                  unint64_t v460 = (unint64_t)v202;
                  unsigned int ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(v450, *v195);
                  LODWORD(v634) = ABITypeAlignment;
                  unint64_t v204 = v455;
                  if (v455 <= ABITypeAlignment) {
                    unint64_t v204 = ABITypeAlignment;
                  }
                  unint64_t v455 = v204;
LABEL_320:
                  uint64_t v205 = (llvm::ConstantPointerNull *)llvm::PointerType::get();
                  uint64_t v635 = llvm::ConstantPointerNull::get(v205, v206);
                  uint64_t v636 = llvm::ConstantPointerNull::get(v205, v207);
                  if ((v490 & 0x40) != 0)
                  {
                    uint64_t v211 = v194[8];
                    unsigned int v209 = 31;
                    unsigned int v210 = v462;
                    if (v211 && *(unsigned char *)(v211 + 16) == 16)
                    {
                      int v212 = (void *)(v211 + 24);
                      if (*(_DWORD *)(v211 + 32) >= 0x41u) {
                        int v212 = (void *)*v212;
                      }
                      unsigned int v209 = *(_DWORD *)v212 - 1;
                    }
                    HIDWORD(v634) = v209;
                    if ((_BYTE)v598)
                    {
                      uint64_t v208 = v194 + 12;
                    }
                    else
                    {
                      uint64_t v635 = v194[12];
                      uint64_t v208 = v194 + 20;
                      uint64_t v636 = v194[16];
                    }
                  }
                  else
                  {
                    uint64_t v208 = v194 + 8;
                    unsigned int v209 = v466;
                    HIDWORD(v634) = v466;
                    unsigned int v210 = v462;
                  }
                  if (v210 <= v209) {
                    unsigned int v210 = v209;
                  }
                  uint64_t v637 = *v208;
                  uint64_t v638 = v208[4];
                  uint64_t v639 = (llvm::CmpInst **)v208[8];
                  v640 = (llvm::CmpInst **)v208[12];
                  v641[0] = v208[16];
                  v641[1] = v208[20];
                  unsigned int v462 = v210;
                  if (v120 + 3 == v121)
                  {
                    uint64_t v220 = v208[28];
                    uint64_t v642 = v208[24];
                    v643[0] = v220;
                    BOOL v221 = v208 + 36;
                    uint64_t v222 = v208[32];
                  }
                  else
                  {
                    BOOL v221 = v208 + 24;
                    uint64_t v642 = llvm::ConstantInt::get();
                    v643[0] = llvm::ConstantInt::get();
                    uint64_t v222 = llvm::ConstantInt::get();
                  }
                  v643[1] = v222;
                  if (v479)
                  {
                    uint64_t v224 = *v221;
                    v221 += 4;
                    uint64_t v223 = v224;
                  }
                  else
                  {
                    uint64_t v223 = 0;
                  }
                  v643[2] = v223;
                  v644[0] = *v221;
                  if ((v490 & 0x100) != 0)
                  {
                    uint64_t v629 = v221[4];
                    uint64_t v226 = v221[8];
                    uint64_t v225 = this;
                  }
                  else
                  {
                    uint64_t v225 = this;
                    uint64_t v629 = llvm::ConstantInt::get();
                    uint64_t v226 = llvm::ConstantInt::get();
                  }
                  uint64_t v630 = v226;
                  unint64_t v227 = (*(uint64_t (**)(void))(**(void **)&v456[*(void *)(*(void *)v225 - 24) + 32] + 960))();
                  unint64_t v228 = *((void *)v225 + 479);
                  if (v228 <= v227) {
                    unint64_t v228 = v227;
                  }
                  *((void *)v225 + 479) = v228;
                  uint64_t v230 = (void *)(v197 + 24);
                  if (*(_DWORD *)(v197 + 32) >= 0x41u) {
                    uint64_t v230 = (void *)*v230;
                  }
                  uint64_t v229 = *(void *)&v456[*(void *)(*(void *)v225 - 24) + 32];
                  unint64_t v231 = (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)v229 + 1272))(v229, *v230, 0, v490, HIDWORD(v634));
                  if (*v91 != 28
                    || (*v477 == 0x65746E692E726961 ? (BOOL v233 = v91[4] == 0x69672E7463657372) : (BOOL v233 = 0),
                        v233 ? (BOOL v234 = v91[5] == 0x575753323231316ELL) : (BOOL v234 = 0),
                        v234 ? (BOOL v235 = *((_DWORD *)v91 + 12) == 1752580673) : (BOOL v235 = 0),
                        !v235))
                  {
                    if (v461 <= v231) {
                      unint64_t v236 = v231;
                    }
                    else {
                      unint64_t v236 = v461;
                    }
                    unint64_t v237 = v460;
                    if (v460 <= v232) {
                      unint64_t v237 = v232;
                    }
                    unint64_t v460 = v237;
                    unint64_t v461 = v236;
                  }
                  __src[0] = &v615;
                  __src[1] = &v615;
                  void __src[2] = (void *)8;
                  LODWORD(__src[3]) = 0;
                  BOOL v238 = operator new(0x20uLL);
                  *BOOL v238 = &unk_1F25C63B0;
                  v238[1] = __src;
                  v238[2] = &v598;
                  v238[3] = &v601;
                  v603[0] = (uint64_t)v238;
                  __int16 v239 = (llvm::Value *)v644[0];
                  uint64_t v240 = (uint64_t *)((char *)v225 + *(void *)(*(void *)v225 - 24) + 40);
                  BOOL v241 = (llvm::CmpInst **)v641[0];
                  uint64_t v242 = llvm::ConstantInt::get();
                  char v610 = "may_be_opaque";
                  __int16 v613 = 259;
                  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v240, 33, v241, v242, (uint64_t)&v610);
                  BOOL v243 = (uint64_t *)((char *)v225 + *(void *)(*(void *)v225 - 24) + 40);
                  uint64_t v244 = v640;
                  uint64_t v245 = llvm::ConstantInt::get();
                  char v610 = "opaque_not_culled";
                  __int16 v613 = 259;
                  uint64_t v246 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v243, 33, v244, v245, (uint64_t)&v610);
                  uint64_t v247 = (uint64_t *)((char *)v225 + *(void *)(*(void *)v225 - 24) + 40);
                  uint64_t v248 = v639;
                  uint64_t v249 = llvm::ConstantInt::get();
                  char v610 = "tris_not_culled";
                  __int16 v613 = 259;
                  uint64_t v250 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v247, 33, v248, v249, (uint64_t)&v610);
                  llvm::ConstantFP::get();
                  char v610 = "tmin_is_0";
                  __int16 v613 = 259;
                  uint64_t FCmpHelper = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper();
                  std::function<BOOL ()(llvm::Value const*)>::operator()(v603[0], (uint64_t)v486);
                  uint64_t v252 = (llvm::Value *)llvm::ConstantInt::get();
                  uint64_t v253 = (AGCLLVMUserObject *)((char *)v225 + *(void *)(*(void *)v225 - 24) + 40);
                  __int16 v613 = 257;
                  uint64_t v254 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v253, v246, v250, (const llvm::Twine *)&v610);
                  uint64_t v255 = (AGCLLVMUserObject *)((char *)v225 + *(void *)(*(void *)v225 - 24) + 40);
                  __int16 v613 = 257;
                  uint64_t v256 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v255, v252, v239, (const llvm::Twine *)&v610);
                  uint64_t v257 = (AGCLLVMUserObject *)((char *)v225 + *(void *)(*(void *)v225 - 24) + 40);
                  v609[4] = 257;
                  int v258 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v257, v254, FCmpHelper, (const llvm::Twine *)&v607);
                  v606[4] = 257;
                  uint64_t v259 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v255, v256, v258, (const llvm::Twine *)&v604);
                  unsigned int v260 = (AGCLLVMUserObject *)((char *)v225 + *(void *)(*(void *)v225 - 24) + 40);
                  char v610 = "early_termination_allowed";
                  __int16 v613 = 259;
                  v644[1] = llvm::IRBuilderBase::CreateAnd(v260, v259, ICmp, (const llvm::Twine *)&v610);
                  void v644[2] = v259;
                  if ((void **)v603[0] == &v601)
                  {
                    (*((void (**)(void **))v601 + 4))(&v601);
                    uint64_t v112 = v481;
                    std::string::size_type v98 = (llvm::Type *)v485;
                  }
                  else
                  {
                    uint64_t v112 = v481;
                    std::string::size_type v98 = (llvm::Type *)v485;
                    if (v603[0]) {
                      (*(void (**)(void))(*(void *)v603[0] + 40))();
                    }
                  }
                  if (__src[1] != __src[0]) {
                    free(__src[1]);
                  }
                  if ((_BYTE)v598)
                  {
                    uint64_t v261 = (char *)this + *(void *)(*(void *)this - 24);
                    uint64_t v262 = *((void *)v261 + 50);
                    long long v557 = *(_OWORD *)(v261 + 88);
                    llvm::IRBuilderBase::getCurrentDebugLocation(&v558, (llvm::IRBuilderBase *)(v261 + 40));
                    int v559 = *((_DWORD *)v261 + 34);
                    uint64_t v263 = (*(uint64_t (**)(uint64_t, long long *, void **, void, char *, void))(*(void *)v262 + 1024))(v262, &v557, v621, *((void *)this + 339), v464, v490);
                    uint64_t v265 = v264;
                    if (v558) {
                      llvm::MetadataTracking::untrack();
                    }
                    BOOL v266 = v467;
                    if (v467 >= v473)
                    {
                      uint64_t v270 = v458;
                      unint64_t v271 = 0xAAAAAAAAAAAAAAABLL * (v467 - v458) + 1;
                      if (v271 > 0xAAAAAAAAAAAAAAALL) {
                        goto LABEL_633;
                      }
                      if (0x5555555555555556 * (v473 - v458) > v271) {
                        unint64_t v271 = 0x5555555555555556 * (v473 - v458);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * (v473 - v458) >= 0x555555555555555) {
                        unint64_t v272 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v272 = v271;
                      }
                      if (v272)
                      {
                        if (v272 > 0xAAAAAAAAAAAAAAALL) {
                          goto LABEL_634;
                        }
                        BOOL v273 = (char *)operator new(24 * v272);
                        uint64_t v270 = v458;
                        BOOL v266 = v467;
                      }
                      else
                      {
                        BOOL v273 = 0;
                      }
                      BOOL v319 = (uint64_t *)&v273[8 * (v467 - v458)];
                      *BOOL v319 = v263;
                      v319[1] = v265;
                      v319[2] = (uint64_t)v486;
                      if (v266 == v270)
                      {
                        uint64_t v321 = &v273[8 * (v467 - v458)];
                      }
                      else
                      {
                        BOOL v320 = &v273[8 * (v467 - v458)];
                        do
                        {
                          uint64_t v321 = v320 - 24;
                          long long v322 = *(_OWORD *)(v266 - 3);
                          *((void *)v320 - 1) = *(v266 - 1);
                          *(_OWORD *)(v320 - 24) = v322;
                          v266 -= 3;
                          v320 -= 24;
                        }
                        while (v266 != v270);
                      }
                      uint64_t v473 = (uint64_t *)&v273[24 * v272];
                      uint64_t v467 = v319 + 3;
                      if (v270) {
                        operator delete(v270);
                      }
                      uint64_t v458 = (uint64_t *)v321;
                    }
                    else
                    {
                      uint64_t *v467 = v263;
                      v467[1] = v265;
                      v467[2] = (uint64_t)v486;
                      v467 += 3;
                    }
                  }
                  else
                  {
                    uint64_t v619 = 0;
                    long long v618 = 0u;
                    long long v617 = 0u;
                    long long v616 = 0u;
                    long long v615 = 0u;
                    memset(__src, 0, sizeof(__src));
                    unsigned int v267 = (char *)this + *(void *)(*(void *)this - 24);
                    uint64_t v268 = *((void *)v267 + 50);
                    long long v554 = *(_OWORD *)(v267 + 88);
                    llvm::IRBuilderBase::getCurrentDebugLocation(&v555, (llvm::IRBuilderBase *)(v267 + 40));
                    int v556 = *((_DWORD *)v267 + 34);
                    (*(void (**)(void **__return_ptr, uint64_t, long long *, void **, void, char *, void))(*(void *)v268 + 1016))(__src, v268, &v554, v621, *((void *)this + 339), v464, v490);
                    if (v555) {
                      llvm::MetadataTracking::untrack();
                    }
                    int v269 = __dst;
                    if (__dst >= v468)
                    {
                      uint64_t v276 = v457;
                      unint64_t v277 = 0x6DB6DB6DB6DB6DB7 * (((char *)__dst - (char *)v457) >> 4) + 1;
                      if (v277 > 0x249249249249249) {
                        goto LABEL_633;
                      }
                      if (0xDB6DB6DB6DB6DB6ELL * (((char *)v468 - (char *)v457) >> 4) > v277) {
                        unint64_t v277 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v468 - (char *)v457) >> 4);
                      }
                      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)v468 - (char *)v457) >> 4)) >= 0x124924924924924) {
                        unint64_t v278 = 0x249249249249249;
                      }
                      else {
                        unint64_t v278 = v277;
                      }
                      if (v278)
                      {
                        if (v278 > 0x249249249249249) {
                          goto LABEL_634;
                        }
                        int v279 = (char *)operator new(112 * v278);
                        uint64_t v276 = v457;
                        int v269 = __dst;
                      }
                      else
                      {
                        int v279 = 0;
                      }
                      long long v323 = v618;
                      uint64_t v324 = &v279[16 * (((char *)__dst - (char *)v457) >> 4)];
                      *((_OWORD *)v324 + 4) = v617;
                      *((_OWORD *)v324 + 5) = v323;
                      uint64_t v325 = v619;
                      long long v326 = *(_OWORD *)&__src[2];
                      *(_OWORD *)uint64_t v324 = *(_OWORD *)__src;
                      *((_OWORD *)v324 + 1) = v326;
                      long long v327 = v616;
                      *((_OWORD *)v324 + 2) = v615;
                      *((_OWORD *)v324 + 3) = v327;
                      *((void *)v324 + 12) = v325;
                      *((void *)v324 + 13) = v486;
                      if (v269 == v276)
                      {
                        int v329 = &v279[16 * (((char *)__dst - (char *)v457) >> 4)];
                      }
                      else
                      {
                        uint64_t v328 = &v279[16 * (((char *)__dst - (char *)v457) >> 4)];
                        do
                        {
                          int v329 = v328 - 112;
                          long long v330 = *((_OWORD *)v269 - 7);
                          long long v331 = *((_OWORD *)v269 - 5);
                          *((_OWORD *)v328 - 6) = *((_OWORD *)v269 - 6);
                          *((_OWORD *)v328 - 5) = v331;
                          *((_OWORD *)v328 - 7) = v330;
                          long long v332 = *((_OWORD *)v269 - 4);
                          long long v333 = *((_OWORD *)v269 - 3);
                          long long v334 = *((_OWORD *)v269 - 1);
                          *((_OWORD *)v328 - 2) = *((_OWORD *)v269 - 2);
                          *((_OWORD *)v328 - 1) = v334;
                          *((_OWORD *)v328 - 4) = v332;
                          *((_OWORD *)v328 - 3) = v333;
                          v269 -= 14;
                          v328 -= 112;
                        }
                        while (v269 != v276);
                      }
                      uint64_t v468 = (uint64_t *)&v279[112 * v278];
                      long long __dst = (uint64_t *)(v324 + 112);
                      if (v276) {
                        operator delete(v276);
                      }
                      uint64_t v457 = (uint64_t *)v329;
                    }
                    else
                    {
                      memmove(__dst, __src, 0x68uLL);
                      __dst[13] = (uint64_t)v486;
                      __dst += 14;
                    }
                  }
                  uint64_t v335 = (char *)this + *(void *)(*(void *)this - 24);
                  if (*(unsigned char *)(*((void *)v335 + 50) + 1813))
                  {
                    uint64_t v336 = v335 + 32;
                    long long v551 = *(_OWORD *)(v335 + 88);
                    llvm::IRBuilderBase::getCurrentDebugLocation(&v552, (llvm::IRBuilderBase *)(v335 + 40));
                    int v553 = *((_DWORD *)v336 + 26);
                    AGCLLVMUserObject::buildRecordRaytraceForGin1122((uint64_t)this, &v551);
                    if (v552) {
                      llvm::MetadataTracking::untrack();
                    }
                  }
                  goto LABEL_295;
                case 2:
                  uint64_t v126 = v466;
                  unsigned int v127 = v462;
                  if ((v490 & 0x40) != 0)
                  {
                    uint64_t v128 = (char *)*v117;
                    if (*v117) {
                      BOOL v129 = *(unsigned char *)(*v117 + 16) == 16;
                    }
                    else {
                      BOOL v129 = 0;
                    }
                    if (v129)
                    {
                      int v280 = v128 + 24;
                      if (*((_DWORD *)v128 + 8) >= 0x41u) {
                        int v280 = (void *)*v280;
                      }
                      uint64_t v126 = (*(_DWORD *)v280 - 1);
                    }
                    else
                    {
                      uint64_t v126 = 31;
                    }
                  }
                  uint64_t v488 = v113;
                  uint64_t v483 = v112;
                  if (v462 <= v126) {
                    unsigned int v127 = v126;
                  }
                  unsigned int v462 = v127;
                  uint64_t v281 = *(void *)&v456[*(void *)(*(void *)this - 24) + 32];
                  unint64_t v282 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(*(void *)v281 + 1272))(v281, 0, 1, v490, v126);
                  unint64_t v283 = v461;
                  if (v461 <= v282) {
                    unint64_t v283 = v282;
                  }
                  unint64_t v461 = v283;
                  unint64_t v284 = (*(uint64_t (**)(void))(**(void **)&v456[*(void *)(*(void *)this - 24) + 32] + 960))();
                  unint64_t v285 = *((void *)this + 479);
                  if (v285 <= v284) {
                    unint64_t v285 = v284;
                  }
                  *((void *)this + 479) = v285;
                  unint64_t v286 = (unint64_t)this + *(void *)(*(void *)this - 24);
                  uint64_t v287 = *(void *)(v286 + 400);
                  long long v548 = *(_OWORD *)(v286 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v549, (llvm::IRBuilderBase *)(v286 + 40));
                  int v550 = *(_DWORD *)(v286 + 136);
                  uint64_t v288 = (*(uint64_t (**)(uint64_t, long long *, char *, void, uint64_t))(*(void *)v287
                                                                                                 + 1056))(v287, &v548, v464, v490, v126);
                  if (v549) {
                    llvm::MetadataTracking::untrack();
                  }
                  uint64_t v289 = *(void *)(v288 + 32);
                  if (v289) {
                    BOOL v290 = v289 == *(void *)(v288 + 40) + 40;
                  }
                  else {
                    BOOL v290 = 1;
                  }
                  if (v290) {
                    uint64_t v291 = 0;
                  }
                  else {
                    uint64_t v291 = (llvm::Instruction *)(v289 - 24);
                  }
                  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v291);
                  int v292 = (AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40);
                  LOWORD(v622) = 257;
                  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v292, (llvm::Type **)v288, v98, (const llvm::Twine *)v621);
                  uint64_t v294 = PointerCast;
                  uint64_t v295 = *((void *)this + 294);
                  unint64_t v296 = 0x9DDFEA08EB382D69
                       * (((8 * PointerCast) + 8) ^ ((unint64_t)PointerCast >> 32));
                  unint64_t v297 = 0x9DDFEA08EB382D69 * (((unint64_t)PointerCast >> 32) ^ (v296 >> 47) ^ v296);
                  unint64_t v298 = 0x9DDFEA08EB382D69 * (v297 ^ (v297 >> 47));
                  unint64_t v299 = *(void *)(v295 + 16);
                  if (!v299) {
                    goto LABEL_437;
                  }
                  uint8x8_t v300 = (uint8x8_t)vcnt_s8((int8x8_t)v299);
                  v300.i16[0] = vaddlv_u8(v300);
                  if (v300.u32[0] > 1uLL)
                  {
                    unint64_t v286 = 0x9DDFEA08EB382D69 * (v297 ^ (v297 >> 47));
                    if (v298 >= v299) {
                      unint64_t v286 = v298 % v299;
                    }
                  }
                  else
                  {
                    unint64_t v286 = v298 & (v299 - 1);
                  }
                  BOOL v301 = *(void ***)(*(void *)(v295 + 8) + 8 * v286);
                  if (!v301) {
                    goto LABEL_437;
                  }
                  unint64_t v302 = *v301;
                  if (!*v301) {
                    goto LABEL_437;
                  }
LABEL_428:
                  unint64_t v303 = v302[1];
                  if (v303 == v298)
                  {
                    if ((llvm::Value *)v302[2] != PointerCast) {
                      goto LABEL_436;
                    }
                    std::string::size_type v98 = (llvm::Type *)v485;
                    uint64_t v113 = v488;
LABEL_514:
                    v302[3] = v113;
                    uint64_t v112 = v483;
                    if (v294)
                    {
LABEL_294:
                      llvm::Value::replaceAllUsesWith();
                      llvm::Instruction::eraseFromParent(v113);
                    }
LABEL_295:
                    if (++v112 == (llvm::Instruction **)v95)
                    {
                      for (iunsigned int i = v457; ii != __dst; ii += 14)
                      {
                        uint64_t v346 = *ii;
                        uint64_t v345 = ii[1];
                        uint64_t v348 = ii[2];
                        uint64_t v347 = ii[3];
                        uint64_t v349 = ii[4];
                        uint64_t v471 = ii[5];
                        uint64_t v472 = ii[6];
                        uint64_t v474 = ii[7];
                        uint64_t v476 = (llvm::Value *)ii[8];
                        uint64_t v478 = ii[9];
                        uint64_t v480 = ii[10];
                        uint64_t v469 = ii[11];
                        uint64_t v350 = (llvm::Instruction *)ii[13];
                        uint64_t v484 = ii[12];
                        uint64_t v351 = llvm::UndefValue::get();
                        uint64_t v352 = this;
                        uint64_t v489 = v350;
                        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v350);
                        uint64_t v353 = (uint64_t)v352 + *(void *)(*(void *)v352 - 24) + 40;
                        LODWORD(__src[0]) = 0;
                        LOWORD(v622) = 257;
                        uint64_t InsertValue = llvm::IRBuilderBase::CreateInsertValue(v353, v351, v346, (uint64_t)__src, 1, (uint64_t)v621);
                        uint64_t v355 = (uint64_t)v352 + *(void *)(*(void *)v352 - 24) + 40;
                        LODWORD(__src[0]) = 1;
                        LOWORD(v622) = 257;
                        uint64_t v356 = llvm::IRBuilderBase::CreateInsertValue(v355, InsertValue, v345, (uint64_t)__src, 1, (uint64_t)v621);
                        uint64_t v357 = (uint64_t)v352 + *(void *)(*(void *)v352 - 24) + 40;
                        LODWORD(__src[0]) = 2;
                        LOWORD(v622) = 257;
                        uint64_t v358 = llvm::IRBuilderBase::CreateInsertValue(v357, v356, v348, (uint64_t)__src, 1, (uint64_t)v621);
                        uint64_t v359 = (uint64_t)v352 + *(void *)(*(void *)v352 - 24) + 40;
                        LODWORD(__src[0]) = 3;
                        LOWORD(v622) = 257;
                        uint64_t v360 = llvm::IRBuilderBase::CreateInsertValue(v359, v358, v347, (uint64_t)__src, 1, (uint64_t)v621);
                        uint64_t v361 = *(llvm::Module **)&v463[*(void *)(*(void *)this - 24) + 32];
                        v621[0] = "air.version";
                        LOWORD(v622) = 259;
                        uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v361, (const llvm::Twine *)v621);
                        if (NamedMetadata && (uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata)) != 0)
                        {
                          uint64_t v364 = Operand;
                          LODWORD(__src[0]) = 0;
                          LODWORD(v610) = 0;
                          LODWORD(v621[0]) = 0;
                          parseMDInt(0, Operand, (unsigned int *)v621, __src);
                          LODWORD(v621[0]) = 1;
                          parseMDInt(0, v364, (unsigned int *)v621, &v610);
                          if (LODWORD(__src[0]) > 2 || (int v365 = 4, LODWORD(__src[0]) == 2) && v610 >= 5)
                          {
                            int v366 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                            LODWORD(v607) = 4;
                            LOWORD(v622) = 257;
                            uint64_t v360 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v366, v360, v349, (uint64_t)&v607, 1, (uint64_t)v621);
                            int v365 = 5;
                          }
                        }
                        else
                        {
                          int v365 = 4;
                        }
                        if (v466)
                        {
                          long long v367 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                          int v368 = v365 + 1;
                          LODWORD(__src[0]) = v365;
                          LOWORD(v622) = 257;
                          uint64_t v369 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v367, v360, v471, (uint64_t)__src, 1, (uint64_t)v621);
                          uint64_t v370 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                          v365 += 2;
                          LODWORD(__src[0]) = v368;
                          LOWORD(v622) = 257;
                          uint64_t v360 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v370, v369, v472, (uint64_t)__src, 1, (uint64_t)v621);
                        }
                        if ((v490 & 0x40) != 0)
                        {
                          uint64_t v371 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                          LODWORD(__src[0]) = v365;
                          LOWORD(v622) = 257;
                          uint64_t v360 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v371, v360, v474, (uint64_t)__src, 1, (uint64_t)v621);
                          ++v365;
                        }
                        if ((v490 & 8) != 0)
                        {
                          uint64_t v372 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                          int v373 = v365 + 1;
                          LODWORD(__src[0]) = v365;
                          LOWORD(v622) = 257;
                          uint64_t v374 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v372, v360, (uint64_t)v476, (uint64_t)__src, 1, (uint64_t)v621);
                          char v375 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                          v365 += 2;
                          LODWORD(__src[0]) = v373;
                          LOWORD(v622) = 257;
                          uint64_t v360 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v375, v374, v478, (uint64_t)__src, 1, (uint64_t)v621);
                        }
                        if ((v490 & 0x80) != 0)
                        {
                          uint64_t v376 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                          LODWORD(__src[0]) = v365;
                          LOWORD(v622) = 257;
                          uint64_t v360 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v376, v360, v480, (uint64_t)__src, 1, (uint64_t)v621);
                          ++v365;
                        }
                        if ((v490 & 0x10) != 0)
                        {
                          char v377 = this;
                          uint64_t v378 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                          LODWORD(v610) = 0;
                          LOWORD(v622) = 257;
                          uint64_t Value = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v378, v469, (uint64_t)&v610, 1, (uint64_t)v621);
                          LODWORD(v607) = v365;
                          LOWORD(v615) = 257;
                          uint64_t v380 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v378, v360, Value, (uint64_t)&v607, 1, (uint64_t)__src);
                          uint64_t v381 = (uint64_t)v377 + *(void *)(*(void *)v377 - 24) + 40;
                          LODWORD(v610) = 1;
                          LOWORD(v622) = 257;
                          uint64_t v382 = llvm::IRBuilderBase::CreateExtractValue(v381, v469, (uint64_t)&v610, 1, (uint64_t)v621);
                          LODWORD(v607) = v365 + 1;
                          LOWORD(v615) = 257;
                          uint64_t v383 = llvm::IRBuilderBase::CreateInsertValue(v381, v380, v382, (uint64_t)&v607, 1, (uint64_t)__src);
                          uint64_t v384 = (uint64_t)v377 + *(void *)(*(void *)v377 - 24) + 40;
                          LODWORD(v610) = 2;
                          LOWORD(v622) = 257;
                          uint64_t v385 = llvm::IRBuilderBase::CreateExtractValue(v384, v469, (uint64_t)&v610, 1, (uint64_t)v621);
                          LODWORD(v607) = v365 + 2;
                          LOWORD(v615) = 257;
                          uint64_t v386 = llvm::IRBuilderBase::CreateInsertValue(v384, v383, v385, (uint64_t)&v607, 1, (uint64_t)__src);
                          uint64_t v387 = (uint64_t)v377 + *(void *)(*(void *)v377 - 24) + 40;
                          LODWORD(v610) = 3;
                          LOWORD(v622) = 257;
                          uint64_t v388 = llvm::IRBuilderBase::CreateExtractValue(v387, v469, (uint64_t)&v610, 1, (uint64_t)v621);
                          LODWORD(v607) = v365 + 3;
                          LOWORD(v615) = 257;
                          uint64_t v389 = llvm::IRBuilderBase::CreateInsertValue(v387, v386, v388, (uint64_t)&v607, 1, (uint64_t)__src);
                          uint64_t v390 = (uint64_t)v377 + *(void *)(*(void *)v377 - 24) + 40;
                          LODWORD(v610) = 0;
                          LOWORD(v622) = 257;
                          uint64_t v391 = llvm::IRBuilderBase::CreateExtractValue(v390, v484, (uint64_t)&v610, 1, (uint64_t)v621);
                          LODWORD(v607) = v365 + 4;
                          LOWORD(v615) = 257;
                          uint64_t v392 = llvm::IRBuilderBase::CreateInsertValue(v390, v389, v391, (uint64_t)&v607, 1, (uint64_t)__src);
                          uint64_t v393 = (uint64_t)v377 + *(void *)(*(void *)v377 - 24) + 40;
                          LODWORD(v610) = 1;
                          LOWORD(v622) = 257;
                          uint64_t v394 = llvm::IRBuilderBase::CreateExtractValue(v393, v484, (uint64_t)&v610, 1, (uint64_t)v621);
                          LODWORD(v607) = v365 + 5;
                          LOWORD(v615) = 257;
                          uint64_t v395 = llvm::IRBuilderBase::CreateInsertValue(v393, v392, v394, (uint64_t)&v607, 1, (uint64_t)__src);
                          uint64_t v396 = (uint64_t)v377 + *(void *)(*(void *)v377 - 24) + 40;
                          LODWORD(v610) = 2;
                          LOWORD(v622) = 257;
                          uint64_t v397 = llvm::IRBuilderBase::CreateExtractValue(v396, v484, (uint64_t)&v610, 1, (uint64_t)v621);
                          LODWORD(v607) = v365 + 6;
                          LOWORD(v615) = 257;
                          uint64_t v398 = llvm::IRBuilderBase::CreateInsertValue(v396, v395, v397, (uint64_t)&v607, 1, (uint64_t)__src);
                          uint64_t v399 = (uint64_t)v377 + *(void *)(*(void *)v377 - 24) + 40;
                          LODWORD(v610) = 3;
                          LOWORD(v622) = 257;
                          uint64_t v400 = llvm::IRBuilderBase::CreateExtractValue(v399, v484, (uint64_t)&v610, 1, (uint64_t)v621);
                          LODWORD(v607) = v365 + 7;
                          LOWORD(v615) = 257;
                          llvm::IRBuilderBase::CreateInsertValue(v399, v398, v400, (uint64_t)&v607, 1, (uint64_t)__src);
                        }
                        llvm::Value::replaceAllUsesWith();
                        llvm::Instruction::eraseFromParent(v489);
                      }
                      for (junsigned int j = v458; jj != v467; jj += 3)
                      {
                        uint64_t v403 = *jj;
                        uint64_t v402 = jj[1];
                        uint64_t v404 = (llvm::Instruction *)jj[2];
                        uint64_t v405 = llvm::UndefValue::get();
                        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v404);
                        uint64_t v406 = *v485[2];
                        uint64_t v407 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                        LOWORD(v622) = 257;
                        uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v407, 48, v403, v406, (uint64_t)v621);
                        LODWORD(v610) = 0;
                        LOWORD(v615) = 257;
                        uint64_t v409 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v407, v405, Cast, (uint64_t)&v610, 1, (uint64_t)__src);
                        uint64_t v410 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                        LODWORD(__src[0]) = 1;
                        LOWORD(v622) = 257;
                        llvm::IRBuilderBase::CreateInsertValue((uint64_t)v410, v409, v402, (uint64_t)__src, 1, (uint64_t)v621);
                        llvm::Value::replaceAllUsesWith();
                        llvm::Instruction::eraseFromParent(v404);
                      }
                      uint64_t v1 = this;
                      uint64_t v90 = v451;
                      goto LABEL_549;
                    }
                    continue;
                  }
                  if (v300.u32[0] > 1uLL)
                  {
                    if (v303 >= v299) {
                      v303 %= v299;
                    }
                  }
                  else
                  {
                    v303 &= v299 - 1;
                  }
                  if (v303 == v286)
                  {
LABEL_436:
                    unint64_t v302 = (void *)*v302;
                    if (!v302) {
                      goto LABEL_437;
                    }
                    goto LABEL_428;
                  }
LABEL_437:
                  unint64_t v302 = operator new(0x20uLL);
                  void *v302 = 0;
                  v302[1] = v298;
                  v302[2] = v294;
                  v302[3] = 0;
                  float v304 = (float)(unint64_t)(*(void *)(v295 + 32) + 1);
                  float v305 = *(float *)(v295 + 40);
                  if (v299 && (float)(v305 * (float)v299) >= v304) {
                    goto LABEL_504;
                  }
                  BOOL v306 = (v299 & (v299 - 1)) != 0;
                  if (v299 < 3) {
                    BOOL v306 = 1;
                  }
                  unint64_t v307 = v306 | (2 * v299);
                  unint64_t v308 = vcvtps_u32_f32(v304 / v305);
                  if (v307 <= v308) {
                    int8x8_t prime = (int8x8_t)v308;
                  }
                  else {
                    int8x8_t prime = (int8x8_t)v307;
                  }
                  if (*(void *)&prime == 1)
                  {
                    int8x8_t prime = (int8x8_t)2;
                  }
                  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                  {
                    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                  }
                  unint64_t v299 = *(void *)(v295 + 16);
                  if (*(void *)&prime > v299) {
                    goto LABEL_449;
                  }
                  if (*(void *)&prime >= v299) {
                    goto LABEL_499;
                  }
                  unint64_t v316 = vcvtps_u32_f32((float)*(unint64_t *)(v295 + 32) / *(float *)(v295 + 40));
                  if (v299 < 3
                    || (uint8x8_t v317 = (uint8x8_t)vcnt_s8((int8x8_t)v299), v317.i16[0] = vaddlv_u8(v317), v317.u32[0] > 1uLL))
                  {
                    unint64_t v316 = std::__next_prime(v316);
                  }
                  else
                  {
                    uint64_t v318 = 1 << -(char)__clz(v316 - 1);
                    if (v316 >= 2) {
                      unint64_t v316 = v318;
                    }
                  }
                  if (*(void *)&prime <= v316) {
                    int8x8_t prime = (int8x8_t)v316;
                  }
                  if (*(void *)&prime >= v299)
                  {
                    unint64_t v299 = *(void *)(v295 + 16);
                  }
                  else
                  {
                    if (!*(void *)&prime)
                    {
                      uint64_t v343 = *(void **)(v295 + 8);
                      *(void *)(v295 + 8) = 0;
                      if (v343) {
                        operator delete(v343);
                      }
                      unint64_t v299 = 0;
                      *(void *)(v295 + 16) = 0;
                      goto LABEL_499;
                    }
LABEL_449:
                    if (*(void *)&prime >> 61) {
LABEL_634:
                    }
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    unint64_t v310 = operator new(8 * *(void *)&prime);
                    uint64_t v311 = *(void **)(v295 + 8);
                    *(void *)(v295 + 8) = v310;
                    if (v311) {
                      operator delete(v311);
                    }
                    uint64_t v312 = 0;
                    *(int8x8_t *)(v295 + 16) = prime;
                    do
                      *(void *)(*(void *)(v295 + 8) + 8 * v312++) = 0;
                    while (*(void *)&prime != v312);
                    int v313 = *(void **)(v295 + 24);
                    if (v313)
                    {
                      unint64_t v314 = v313[1];
                      uint8x8_t v315 = (uint8x8_t)vcnt_s8(prime);
                      v315.i16[0] = vaddlv_u8(v315);
                      if (v315.u32[0] > 1uLL)
                      {
                        if (v314 >= *(void *)&prime) {
                          v314 %= *(void *)&prime;
                        }
                      }
                      else
                      {
                        v314 &= *(void *)&prime - 1;
                      }
                      *(void *)(*(void *)(v295 + 8) + 8 * v314) = v295 + 24;
                      uint64_t v337 = (void *)*v313;
                      if (*v313)
                      {
                        do
                        {
                          unint64_t v338 = v337[1];
                          if (v315.u32[0] > 1uLL)
                          {
                            if (v338 >= *(void *)&prime) {
                              v338 %= *(void *)&prime;
                            }
                          }
                          else
                          {
                            v338 &= *(void *)&prime - 1;
                          }
                          if (v338 != v314)
                          {
                            uint64_t v339 = *(void *)(v295 + 8);
                            if (!*(void *)(v339 + 8 * v338))
                            {
                              *(void *)(v339 + 8 * v338) = v313;
                              goto LABEL_495;
                            }
                            *int v313 = *v337;
                            void *v337 = **(void **)(*(void *)(v295 + 8) + 8 * v338);
                            **(void **)(*(void *)(v295 + 8) + 8 * v338) = v337;
                            uint64_t v337 = v313;
                          }
                          unint64_t v338 = v314;
LABEL_495:
                          int v313 = v337;
                          uint64_t v337 = (void *)*v337;
                          unint64_t v314 = v338;
                        }
                        while (v337);
                      }
                    }
                    unint64_t v299 = (unint64_t)prime;
                  }
LABEL_499:
                  if ((v299 & (v299 - 1)) != 0)
                  {
                    if (v298 >= v299) {
                      unint64_t v286 = v298 % v299;
                    }
                    else {
                      unint64_t v286 = v298;
                    }
                  }
                  else
                  {
                    unint64_t v286 = (v299 - 1) & v298;
                  }
LABEL_504:
                  uint64_t v340 = *(void *)(v295 + 8);
                  unsigned int v341 = *(void **)(v340 + 8 * v286);
                  if (v341)
                  {
                    void *v302 = *v341;
                    std::string::size_type v98 = (llvm::Type *)v485;
                    uint64_t v113 = v488;
                  }
                  else
                  {
                    void *v302 = *(void *)(v295 + 24);
                    *(void *)(v295 + 24) = v302;
                    *(void *)(v340 + 8 * v286) = v295 + 24;
                    std::string::size_type v98 = (llvm::Type *)v485;
                    uint64_t v113 = v488;
                    if (!*v302)
                    {
LABEL_513:
                      ++*(void *)(v295 + 32);
                      goto LABEL_514;
                    }
                    unint64_t v342 = *(void *)(*v302 + 8);
                    if ((v299 & (v299 - 1)) != 0)
                    {
                      if (v342 >= v299) {
                        v342 %= v299;
                      }
                    }
                    else
                    {
                      v342 &= v299 - 1;
                    }
                    unsigned int v341 = (void *)(*(void *)(v295 + 8) + 8 * v342);
                  }
                  *unsigned int v341 = v302;
                  goto LABEL_513;
                case 3:
                  uint64_t v487 = v113;
                  uint64_t v130 = *((void *)v459 + 12);
                  v621[0] = *(void **)v117;
                  v621[1] = *((void **)v117 + 4);
                  v621[2] = *((void **)v117 + 8);
                  v621[3] = *((void **)v117 + 12);
                  *(void *)&long long v622 = v117[16];
                  *((void *)&v622 + 1) = v117[20];
                  if (v479)
                  {
                    uint64_t v131 = v117 + 28;
                    uint64_t v132 = v117[24];
                  }
                  else
                  {
                    uint64_t v131 = v117 + 24;
                    uint64_t v132 = llvm::ConstantInt::get();
                  }
                  uint64_t v623 = v132;
                  uint64_t v624 = *v131;
                  uint64_t v625 = v131[4];
                  uint64_t v213 = v131[12];
                  uint64_t v626 = v131[8];
                  uint64_t v627 = v213;
                  uint64_t v214 = v131[20];
                  uint64_t v628 = v131[16];
                  uint64_t v629 = v214;
                  if (v453 == v130)
                  {
                    uint64_t v215 = v131[28];
                    uint64_t v630 = v131[24];
                    uint64_t v631 = v215;
                    uint64_t v216 = v131 + 36;
                    uint64_t v217 = v131[32];
                  }
                  else
                  {
                    uint64_t v216 = v131 + 24;
                    uint64_t v630 = llvm::ConstantInt::get();
                    uint64_t v631 = llvm::ConstantInt::get();
                    uint64_t v217 = llvm::ConstantInt::get();
                  }
                  uint64_t v632 = v217;
                  if (v479)
                  {
                    uint64_t v219 = *v216;
                    v216 += 4;
                    uint64_t v218 = v219;
                  }
                  else
                  {
                    uint64_t v218 = 0;
                  }
                  uint64_t v633 = v218;
                  uint64_t v634 = *v216;
                  uint64_t v274 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v275 = *((void *)v274 + 50);
                  long long v545 = *(_OWORD *)(v274 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v546, (llvm::IRBuilderBase *)(v274 + 40));
                  int v547 = *((_DWORD *)v274 + 34);
                  (*(void (**)(uint64_t, long long *, void **, void, char *, void))(*(void *)v275 + 1064))(v275, &v545, v621, *((void *)this + 339), v464, v490);
                  if (v546) {
                    goto LABEL_394;
                  }
                  goto LABEL_292;
                case 4:
                  unint64_t v133 = (void *)*v117;
                  uint64_t v487 = v113;
                  uint64_t v134 = (*(uint64_t (**)(void, void, llvm::Instruction *))(**((void **)this + 294)
                                                                                        + 16))(*((void *)this + 294), *v117, v113);
                  int v135 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v136 = *((void *)v135 + 50);
                  long long v542 = *(_OWORD *)(v135 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v543, (llvm::IRBuilderBase *)(v135 + 40));
                  int v544 = *((_DWORD *)v135 + 34);
                  uint64_t v115 = (*(uint64_t (**)(uint64_t, long long *, void *, void, char *, void, uint64_t))(*(void *)v136 + 1072))(v136, &v542, v133, *((void *)this + 339), v464, v490, v134);
                  if (!v543) {
                    goto LABEL_291;
                  }
                  goto LABEL_290;
                case 5:
                  uint64_t v137 = v113;
                  unint64_t v138 = (void *)*v117;
                  int v139 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v140 = *((void *)v139 + 50);
                  long long v539 = *(_OWORD *)(v139 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v540, (llvm::IRBuilderBase *)(v139 + 40));
                  int v541 = *((_DWORD *)v139 + 34);
                  (*(void (**)(uint64_t, long long *, void *, char *, void))(*(void *)v140 + 1080))(v140, &v539, v138, v464, v490);
                  if (!v540) {
                    goto LABEL_287;
                  }
                  goto LABEL_286;
                case 6:
                  uint64_t v487 = v113;
                  uint64_t v141 = (void *)*v117;
                  __int16 v142 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v143 = *((void *)v142 + 50);
                  long long v536 = *(_OWORD *)(v142 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v537, (llvm::IRBuilderBase *)(v142 + 40));
                  int v538 = *((_DWORD *)v142 + 34);
                  (*(void (**)(uint64_t, long long *, void *, void, char *, void))(*(void *)v143 + 1088))(v143, &v536, v141, *((void *)this + 339), v464, v490);
                  if (!v537) {
                    goto LABEL_291;
                  }
                  goto LABEL_290;
                case 7:
                  uint64_t v487 = v113;
                  uint64_t v144 = (void *)*v117;
                  uint64_t v145 = v117[4];
                  uint64_t v146 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v147 = *((void *)v146 + 50);
                  long long v533 = *(_OWORD *)(v146 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v534, (llvm::IRBuilderBase *)(v146 + 40));
                  int v535 = *((_DWORD *)v146 + 34);
                  (*(void (**)(uint64_t, long long *, void *, uint64_t, char *, void))(*(void *)v147 + 1096))(v147, &v533, v144, v145, v464, v490);
                  if (!v534) {
                    goto LABEL_291;
                  }
                  goto LABEL_290;
                case 8:
                  uint64_t v487 = v113;
                  uint64_t v148 = (void *)*v117;
                  uint64_t v149 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v150 = *((void *)v149 + 50);
                  long long v530 = *(_OWORD *)(v149 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v531, (llvm::IRBuilderBase *)(v149 + 40));
                  int v532 = *((_DWORD *)v149 + 34);
                  (*(void (**)(uint64_t, long long *, void *, void, char *, void))(*(void *)v150 + 1112))(v150, &v530, v148, *((void *)this + 339), v464, v490);
                  if (!v531) {
                    goto LABEL_291;
                  }
                  goto LABEL_290;
                case 9:
                  uint64_t v153 = (void *)*v117;
                  uint64_t v152 = v117 + 4;
                  uint64_t v151 = v153;
                  uint64_t v154 = llvm::ConstantInt::get();
                  uint64_t v487 = v113;
                  if (v152 != (uint64_t *)llvm::CallBase::arg_end(v113)) {
                    uint64_t v154 = *v152;
                  }
                  int v155 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v156 = *((void *)v155 + 50);
                  long long v521 = *(_OWORD *)(v155 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v522, (llvm::IRBuilderBase *)(v155 + 40));
                  int v523 = *((_DWORD *)v155 + 34);
                  LOWORD(v449) = v490;
                  uint64_t v115 = (*(uint64_t (**)(uint64_t, long long *, void *, void, void *, void, uint64_t **, uint64_t, char *, int))(*(void *)v156 + 1120))(v156, &v521, v151, *((void *)this + 339), v477, *v91, v485, v154, v464, v449);
                  if (v522) {
                    goto LABEL_290;
                  }
                  goto LABEL_291;
                case 10:
                  uint64_t v487 = v113;
                  uint64_t v157 = (void *)*v117;
                  uint64_t v158 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v159 = *((void *)v158 + 50);
                  long long v527 = *(_OWORD *)(v158 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v528, (llvm::IRBuilderBase *)(v158 + 40));
                  int v529 = *((_DWORD *)v158 + 34);
                  (*(void (**)(uint64_t, long long *, void *, char *, void))(*(void *)v159 + 1104))(v159, &v527, v157, v464, v490);
                  if (v528) {
                    llvm::MetadataTracking::untrack();
                  }
                  int v160 = (char *)this + *(void *)(*(void *)this - 24);
                  if (!*(unsigned char *)(*((void *)v160 + 50) + 1813)) {
                    goto LABEL_292;
                  }
                  uint64_t v161 = v160 + 32;
                  long long v524 = *(_OWORD *)(v160 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v525, (llvm::IRBuilderBase *)(v160 + 40));
                  int v526 = *((_DWORD *)v161 + 26);
                  AGCLLVMUserObject::buildRecordRaytraceForGin1122((uint64_t)this, &v524);
                  uint64_t v113 = v487;
                  if (!v525) {
                    goto LABEL_293;
                  }
                  llvm::MetadataTracking::untrack();
                  if (!v115) {
                    goto LABEL_295;
                  }
                  goto LABEL_294;
                case 11:
                  uint64_t v137 = v113;
                  uint64_t v162 = (void *)*v117;
                  uint64_t v163 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v164 = *((void *)v163 + 50);
                  long long v518 = *(_OWORD *)(v163 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v519, (llvm::IRBuilderBase *)(v163 + 40));
                  int v520 = *((_DWORD *)v163 + 34);
                  uint64_t v115 = (*(uint64_t (**)(uint64_t, long long *, void *, void))(*(void *)v164 + 1304))(v164, &v518, v162, *((void *)this + 318));
                  if (v519) {
                    goto LABEL_286;
                  }
                  goto LABEL_287;
                case 12:
                  uint64_t v487 = v113;
                  uint64_t v482 = v112;
                  uint64_t v165 = (void *)*v117;
                  uint64_t v166 = v117[4];
                  uint64_t v167 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v168 = *((void *)v167 + 50);
                  long long v515 = *(_OWORD *)(v167 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v516, (llvm::IRBuilderBase *)(v167 + 40));
                  int v517 = *((_DWORD *)v167 + 34);
                  uint64_t v115 = (*(uint64_t (**)(uint64_t, long long *, void *, void, uint64_t, llvm::Type *))(*(void *)v168 + 1312))(v168, &v515, v165, *((void *)this + 318), v166, v98);
                  if (v516) {
                    goto LABEL_279;
                  }
                  goto LABEL_280;
                case 13:
                  uint64_t v487 = v113;
                  uint64_t v482 = v112;
                  int v169 = (void *)*v117;
                  uint64_t v170 = v117[4];
                  uint64_t v171 = v117[8];
                  int v172 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v173 = *((void *)v172 + 50);
                  long long v512 = *(_OWORD *)(v172 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v513, (llvm::IRBuilderBase *)(v172 + 40));
                  int v514 = *((_DWORD *)v172 + 34);
                  uint64_t v115 = (*(uint64_t (**)(uint64_t, long long *, void *, void, uint64_t, uint64_t))(*(void *)v173 + 1320))(v173, &v512, v169, *((void *)this + 318), v170, v171);
                  if (v513) {
LABEL_279:
                  }
                    llvm::MetadataTracking::untrack();
LABEL_280:
                  uint64_t v112 = v482;
                  std::string::size_type v98 = (llvm::Type *)v485;
                  goto LABEL_292;
                case 14:
                  uint64_t v176 = (void *)*v117;
                  unint64_t v175 = v117 + 4;
                  uint64_t v174 = v176;
                  uint64_t v177 = llvm::ConstantInt::get();
                  uint64_t v487 = v113;
                  if (v175 != (uint64_t *)llvm::CallBase::arg_end(v113)) {
                    uint64_t v177 = *v175;
                  }
                  unint64_t v178 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v179 = *((void *)v178 + 50);
                  long long v509 = *(_OWORD *)(v178 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v510, (llvm::IRBuilderBase *)(v178 + 40));
                  int v511 = *((_DWORD *)v178 + 34);
                  LOWORD(v448) = v490;
                  uint64_t v115 = (*(uint64_t (**)(uint64_t, long long *, void *, uint64_t, void *, void, llvm::Type *, char *, int))(*(void *)v179 + 1032))(v179, &v509, v174, v177, v477, *v91, v98, v464, v448);
                  if (v510) {
LABEL_394:
                  }
                    llvm::MetadataTracking::untrack();
                  goto LABEL_292;
                case 15:
                  uint64_t v137 = v113;
                  unint64_t v180 = (void *)*v117;
                  int v181 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v182 = *((void *)v181 + 50);
                  long long v506 = *(_OWORD *)(v181 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v507, (llvm::IRBuilderBase *)(v181 + 40));
                  int v508 = *((_DWORD *)v181 + 34);
                  (*(void (**)(uint64_t, long long *, void *, char *, void))(*(void *)v182 + 1040))(v182, &v506, v180, v464, v490);
                  if (v507) {
LABEL_286:
                  }
                    llvm::MetadataTracking::untrack();
LABEL_287:
                  uint64_t v113 = v137;
                  std::string::size_type v98 = (llvm::Type *)v485;
                  if (!v115) {
                    goto LABEL_295;
                  }
                  goto LABEL_294;
                case 16:
                  uint64_t v487 = v113;
                  uint64_t v183 = (void *)*v117;
                  uint64_t v184 = v117[4];
                  uint64_t v185 = (char *)this + *(void *)(*(void *)this - 24);
                  uint64_t v186 = *((void *)v185 + 50);
                  long long v503 = *(_OWORD *)(v185 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation(&v504, (llvm::IRBuilderBase *)(v185 + 40));
                  int v505 = *((_DWORD *)v185 + 34);
                  (*(void (**)(uint64_t, long long *, void *, uint64_t, char *, void))(*(void *)v186 + 1048))(v186, &v503, v183, v184, v464, v490);
                  if (v504) {
LABEL_290:
                  }
                    llvm::MetadataTracking::untrack();
LABEL_291:
                  std::string::size_type v98 = (llvm::Type *)v485;
LABEL_292:
                  uint64_t v113 = v487;
                  goto LABEL_293;
                default:
LABEL_293:
                  if (v115) {
                    goto LABEL_294;
                  }
                  goto LABEL_295;
              }
            }
          }
          uint64_t v1 = this;
        }
        do
        {
LABEL_555:
          int v411 = (void *)n[1];
          ++n;
          unsigned int v91 = v411;
          if (v411) {
            BOOL v412 = v91 + 1 == 0;
          }
          else {
            BOOL v412 = 1;
          }
        }
        while (v412);
        if (n == (void *)v90) {
          goto LABEL_4;
        }
      }
    }
  }
  unsigned int v462 = 0;
  unint64_t v460 = 0;
  unint64_t v461 = 0;
  unint64_t v455 = 1;
LABEL_4:
  uint64_t v2 = *(void *)(*(void *)v1 - 24);
  if (*(unsigned char *)(*(void *)((char *)v1 + v2 + 400) + 1785)
    && !*((unsigned char *)v1 + 3712)
    && (*(unsigned int (**)(void))(*(void *)((char *)v1 + v2) + 64))() != 29)
  {
    uint64_t v3 = (unsigned char *)*((void *)v1 + 294);
    if (v3[48]) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v3[50] != 0;
    }
    int v413 = v3[51];
    BOOL v414 = v3[51] == 0;
    int v415 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 64))((char *)this + *(void *)(*(void *)this - 24));
    char v416 = v414 & ~v4;
    uint64_t v1 = this;
    if ((v416 & 1) == 0 && v415 != 8)
    {
      uint64_t v417 = *(void *)(*((void *)this + 21) + 80);
      if (v417) {
        uint64_t v418 = v417 - 24;
      }
      else {
        uint64_t v418 = 0;
      }
      uint64_t v419 = (AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      __n128 v422 = *(void **)(v418 + 40);
      int v420 = (void *)(v418 + 40);
      long long v421 = v422;
      if (v422 != v420)
      {
        while (1)
        {
          uint64_t v423 = v421 ? (uint64_t)(v421 - 3) : 0;
          if (*(unsigned char *)(v423 + 16) == 84
            && (uint64_t v424 = *(void *)(v423 - 32)) != 0
            && !*(unsigned char *)(v424 + 16)
            && *(void *)(v424 + 24) == *(void *)(v423 + 72)
            && (uint64_t Name = llvm::Value::getName((llvm::Value *)v424), v426 == 18))
          {
            BOOL v427 = *(void *)Name == 0x7867612E6D766C6CLL && *(void *)(Name + 8) == 0x6C6C612E736C742ELL;
            BOOL v428 = v427 && *(_WORD *)(Name + 16) == 25455;
            BOOL v429 = v428;
          }
          else
          {
            BOOL v429 = 0;
          }
          if (*(unsigned char *)(v423 + 16) == 59 || v429) {
            break;
          }
          long long v421 = (void *)*v421;
          if (v421 == v420) {
            goto LABEL_591;
          }
        }
        int v420 = v421;
      }
LABEL_591:
      uint64_t v430 = v420[1];
      if (v430) {
        __int16 v431 = (llvm::Instruction *)(v430 - 24);
      }
      else {
        __int16 v431 = 0;
      }
      llvm::IRBuilderBase::SetInsertPoint(v419, v431);
      if (!*((void *)this + 297)) {
        AGCLLVMUserObject::buildBindlessImageArgumentPointer((unsigned __int8 *)this, 0, 0);
      }
      if (!*((void *)this + 300)) {
        AGCLLVMUserObject::buildBindlessImageArgumentPointer((unsigned __int8 *)this, 0, 1);
      }
      if (!*((void *)this + 303)) {
        AGCLLVMUserObject::buildImageTextureBufferLength(this, 0);
      }
      if (!*((void *)this + 309)) {
        AGCLLVMUserObject::createSamplerHeapGlobal(this);
      }
      AGCLLVMUserObject::createAccelerationStructureHeapGlobal(this);
      AGCLLVMUserObject::createVisibleFunctionTableHeapGlobal(this);
      AGCLLVMUserObject::createSCSConfigurationBufferGlobal((char *)this);
      if (v460 || v413) {
        AGCLLVMUserObject::createSCSUserDataBoundGlobal(this);
      }
      AGCLLVMUserObject::createSCSDriverDataStartGlobal(this);
      AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal(this);
      long long v432 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
      GlobalBindingTableGlobal = (llvm::Type **)AGCLLVMUserObject::createGlobalBindingTableGlobal(this);
      LOWORD(v622) = 257;
      uint64_t v435 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBindingTableGlobal, v434);
      uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v432 + 5, v435, (uint64_t)GlobalBindingTableGlobal, 0, (uint64_t)v621);
      uint64_t v437 = (char *)this + *(void *)(*(void *)this - 24);
      uint64_t v438 = *((void *)v437 + 50);
      long long v500 = *(_OWORD *)(v437 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v501, (llvm::IRBuilderBase *)(v437 + 40));
      int v502 = *((_DWORD *)v437 + 34);
      llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v498, 2u, (void *)this + 307);
      uint64_t DylibBaseGetterFunc = AGCLLVMUserObject::createDylibBaseGetterFunc(this);
      llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v496, 2u, (void *)this + 337);
      llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v494, 2u, (void *)this + 333);
      llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v492, 2u, (void *)this + 325);
      (*(void (**)(void **__return_ptr, uint64_t, long long *, char *, char *, unsigned char *, uint64_t, unsigned char *, unsigned char *, unsigned char *, void, void, void, void, uint64_t, void, BOOL))(*(void *)v438 + 1000))(v621, v438, &v500, (char *)this + 3784, (char *)this + 2360, v498, DylibBaseGetterFunc, v496, v494, v492, *((void *)this + 312), *((void *)this + 315), *((void *)this + 321), *((void *)this + 324), AlignedLoad, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368), v4);
      if (v493 != -8192 && v493 != -4096 && v493) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v492);
      }
      if (v495 != -8192 && v495 != -4096 && v495) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v494);
      }
      if (v497 != -8192 && v497 != -4096 && v497) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v496);
      }
      if (v499 != -8192 && v499 != -4096 && v499) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v498);
      }
      if (v501) {
        llvm::MetadataTracking::untrack();
      }
      if (v621[2]) {
        llvm::MetadataTracking::untrack();
      }
      uint64_t v1 = this;
    }
    if (v4)
    {
      *((void *)v1 + 480) = v461;
      *((void *)v1 + 481) = v460;
      *((void *)v1 + 482) = v455;
      *((_DWORD *)v1 + 966) = v462;
    }
  }
  (*(void (**)(AGCLLVMUserObject *, uint64_t))(*(void *)v1 + 256))(v1, 4);
  uint64_t v440 = *(void *)v1;
  int v441 = v1;
  uint64_t v442 = *(unsigned char **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400);
  if (v442[1785] && !*((unsigned char *)v441 + 3712))
  {
    uint64_t AccelerationStructureHeapGlobal = AGCLLVMUserObject::createAccelerationStructureHeapGlobal(v441);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)v442 + 1368))(v442, (unsigned char *)v441 + 3784, AccelerationStructureHeapGlobal);
    uint64_t v440 = *(void *)v441;
    uint64_t v443 = 1;
  }
  else
  {
    uint64_t v443 = 0;
  }
  uint64_t v445 = *(void *)((char *)this + *(void *)(v440 - 24) + 400);
  uint64_t v446 = AGCLLVMUserObject::createAccelerationStructureHeapGlobal(this);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v445 + 1360))(v445, v446, v443);
}

void AGCLLVMUserObject::getRaytracingFunctionMap(AGCLLVMUserObject *this)
{
  {
    AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map = 0;
    *(void *)&dword_1EBD0E008 = 0;
    qword_1EBD0E010 = 0x1800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map, &dword_1CAC02000);
  }
}

llvm::Function *AGCLLVMGen5TargetLowerer::replaceAccelerationStructureSupportFunctions(AGCLLVMGen5TargetLowerer *this, llvm::Type **a2)
{
  uint64_t result = (llvm::Function *)llvm::Module::getFunction();
  if (result)
  {
    size_t v23 = result;
    uint64_t v5 = *((void *)result + 1);
    if (v5)
    {
      do
      {
        uint64_t v6 = *(void *)(v5 + 8);
        unsigned int v7 = *(llvm::Instruction **)(v5 + 24);
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMGen5TargetLowerer *)((char *)this + 8), v7);
        uint64_t v8 = *((void *)v7 - 4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF));
        uint64_t v9 = *((void *)this + 26);
        v30[0] = "ads_heap_index";
        __int16 v31 = 259;
        uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 47, v8, v9, (uint64_t)v30);
        __int16 v11 = (llvm::Value *)llvm::ConstantInt::get();
        v30[0] = "heap_offset";
        __int16 v31 = 259;
        uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen5TargetLowerer *)((char *)this + 8), Cast, v11, (const llvm::Twine *)v30);
        uint64_t v13 = llvm::PointerType::get();
        uint64_t v14 = llvm::PointerType::get();
        __int16 v15 = (llvm::Type *)*((void *)this + 23);
        __int16 v31 = 257;
        __int16 v17 = AGCLLVMBuilder::tryDeducePointeeType(a2, v16);
        uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v17, (uint64_t)a2, 0, (uint64_t)v30);
        __int16 v29 = 257;
        size_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, AlignedLoad, v13, (uint64_t)v28);
        __int16 v27 = 257;
        uint64_t GEP = llvm::IRBuilderBase::CreateGEP((AGCLLVMGen5TargetLowerer *)((char *)this + 8), v15, v19, Mul, (const llvm::Twine *)v26);
        uint64_t v24 = "heap_ptr";
        __int16 v25 = 259;
        uint64_t v21 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, GEP, v14, (uint64_t)&v24);
        uint64_t v22 = (llvm::Type *)*((void *)this + 26);
        __int16 v31 = 257;
        llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v22, v21, 0, (uint64_t)v30);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v7);
        uint64_t v5 = v6;
      }
      while (v6);
    }
    return (llvm::Function *)llvm::Function::eraseFromParent(v23);
  }
  return result;
}

uint64_t AGCLLVMUserObject::setupArgumentBuffers(AGCLLVMUserObject *this)
{
  v425[4] = *MEMORY[0x1E4F143B8];
  v390[0] = 0;
  v390[1] = 0;
  int64_t v391 = 0;
  if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1755))
  {
    uint64_t v2 = *((unsigned int *)this + 798);
    if (v2)
    {
      uint64_t v3 = (uint64_t *)*((void *)this + 398);
      uint64_t v4 = 8 * v2;
      while (1)
      {
        uint64_t v5 = *v3;
        if (*(unsigned char *)(*v3 + 1))
        {
          if (*(unsigned char *)(v5 + 2)) {
            break;
          }
        }
        ++v3;
        v4 -= 8;
        if (!v4) {
          goto LABEL_7;
        }
      }
      std::to_string(&v422, *(_DWORD *)(v5 + 48));
      int v354 = std::string::insert(&v422, 0, "buffer(");
      std::string::size_type v355 = v354->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v411.__r_.__value_.__l.__data_ = *(_OWORD *)&v354->__r_.__value_.__l.__data_;
      v411.__r_.__value_.__r.__words[2] = v355;
      v354->__r_.__value_.__l.__size_ = 0;
      v354->__r_.__value_.__r.__words[2] = 0;
      v354->__r_.__value_.__r.__words[0] = 0;
      uint64_t v356 = std::string::append(&v411, "): Argument buffer participates in modification as well as resource use");
      std::string::size_type v357 = v356->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v356->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = v357;
      v356->__r_.__value_.__l.__size_ = 0;
      v356->__r_.__value_.__r.__words[2] = 0;
      v356->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0) {
        uint64_t v358 = __p;
      }
      else {
        uint64_t v358 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v359 = __p[23];
      }
      else {
        std::string::size_type v359 = *(void *)&__p[8];
      }
      std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), v358, v359);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v411.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v422.__r_.__value_.__l.__data_);
      }
      goto LABEL_658;
    }
  }
LABEL_7:
  if (*((_DWORD *)this + 812))
  {
    uint64_t v6 = (int32x2_t *)((char *)this + 3240);
    uint64_t v385 = (char *)this + 8;
    int v373 = (char *)this + 200;
    uint64_t v369 = (char *)this + 208;
    long long v367 = (int32x2_t *)((char *)this + 3240);
    while (1)
    {
      uint64_t v7 = *((void *)this + 405);
      uint64_t v8 = *((unsigned int *)this + 814);
      uint64_t v9 = v7 + 48 * v8;
      if (v8)
      {
        uint64_t v10 = 48 * v8;
        while ((*(void *)(v7 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v7 += 48;
          v10 -= 48;
          if (!v10)
          {
            uint64_t v7 = v9;
            break;
          }
        }
      }
      uint64_t v11 = *(void *)(v7 + 24);
      uint64_t v12 = *(void *)(v7 + 40);
      llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::erase(v6, v7);
      if ((*(_DWORD *)(v12 + 8) & 0xFFFFFFFC) != 4) {
        goto LABEL_658;
      }
      int v13 = *(unsigned __int8 *)(v11 + 16);
      if (v13 == 62 && v11 != 0)
      {
        unsigned int v18 = (uint64_t *)*((void *)this + 403);
        if (!v18) {
LABEL_662:
        }
          abort();
        unsigned int v19 = *(_DWORD *)(*(void *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)) + 32);
        while (1)
        {
          while (1)
          {
            unsigned int v20 = *((_DWORD *)v18 + 8);
            if (v19 >= v20) {
              break;
            }
            unsigned int v18 = (uint64_t *)*v18;
            if (!v18) {
              goto LABEL_662;
            }
          }
          if (v20 >= v19) {
            break;
          }
          unsigned int v18 = (uint64_t *)v18[1];
          if (!v18) {
            goto LABEL_662;
          }
        }
        uint64_t v387 = v18[5];
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Instruction *)v11);
        uint64_t v376 = (llvm::Type **)v11;
        if (v12 && *(_DWORD *)(v12 + 8) == 7)
        {
          v415[0] = 0;
          AGCArgumentBuffer::lookup(*(AGCArgumentBuffer **)(v387 + 56), (const llvm::GetElementPtrInst *)v11, v415, __p);
          uint64_t v21 = (char *)v415[0];
          uint64_t v22 = (char *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32);
          *(void *)std::string __p = &__p[16];
          *(void *)&__p[8] = 0x800000000;
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)__p, v22, (char *)v415[0]);
          AGCArgumentBuffer::Constant::remapToTier1Indices(&v411, v12, __p);
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&v411, v21, (char *)v11);
          uint64_t v23 = *(void *)(v387 + 16);
          uint64_t v24 = *(uint64_t **)(v387 + 112);
          uint64_t v25 = (uint64_t)&v385[*(void *)(*(void *)this - 24) + 32];
          __int16 v423 = 257;
          llvm::IRBuilderBase::CreateGEP(v25, v23, v24, (uint64_t **)v411.__r_.__value_.__l.__data_, LODWORD(v411.__r_.__value_.__r.__words[1]), (uint64_t)&v422);
          if ((std::string::size_type *)v411.__r_.__value_.__l.__data_ != &v411.__r_.__value_.__r.__words[2]) {
            free(v411.__r_.__value_.__l.__data_);
          }
          if (*(unsigned char **)__p != &__p[16]) {
            free(*(void **)__p);
          }
          size_t v26 = "constant_gep";
        }
        else
        {
          v422.__r_.__value_.__r.__words[0] = (std::string::size_type)&v422.__r_.__value_.__r.__words[2];
          v422.__r_.__value_.__l.__size_ = 0x400000000;
          uint64_t v30 = (char *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32);
          *(void *)std::string __p = &__p[16];
          *(void *)&__p[8] = 0x800000000;
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)__p, v30, (char *)v11);
          int v31 = *(_DWORD *)(v12 + 8);
          if (v12 && v31 == 5)
          {
            v414.__r_.__value_.__r.__words[0] = (std::string::size_type)&v414.__r_.__value_.__r.__words[2];
            v414.__r_.__value_.__l.__size_ = 0x400000000;
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v414, 0);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v414, 1);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v414, 2);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v414, 3);
            long long v33 = (std::string *)v414.__r_.__value_.__r.__words[0];
            if (LODWORD(v414.__r_.__value_.__r.__words[1]))
            {
              uint64_t v381 = (llvm::Type *)(v414.__r_.__value_.__r.__words[0] + 4 * LODWORD(v414.__r_.__value_.__r.__words[1]));
              do
              {
                uint64_t v34 = *(void *)(*(void *)this - 24);
                uint64_t v35 = *(void *)(v387 + 16);
                uint64_t v36 = *(uint64_t **)(v387 + 112);
                switch(LODWORD(v33->__r_.__value_.__l.__data_))
                {
                  case 0:
                    char v37 = 0;
                    break;
                  case 1:
                    char v37 = 0;
                    break;
                  case 2:
                    char v37 = 1;
                    break;
                  case 3:
                    char v37 = 1;
                    break;
                  default:
                    char v37 = 1;
                    break;
                }
                v411.__r_.__value_.__r.__words[0] = (std::string::size_type)&v411.__r_.__value_.__r.__words[2];
                v411.__r_.__value_.__l.__size_ = 0x800000000;
                if (*(_DWORD *)(v12 + 112)) {
                  llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v411, v12 + 104);
                }
                uint64_t v38 = *(unsigned int *)(v12 + 192);
                if (v38)
                {
                  uint64_t v39 = *(unsigned int **)(v12 + 184);
                  uint64_t v40 = &v39[2 * v38];
                  do
                  {
                    uint64_t v41 = *v39;
                    uint64_t v42 = v39[1];
                    v39 += 2;
                    *(void *)(v411.__r_.__value_.__r.__words[0] + 8 * v42) = *(void *)(*(void *)__p + 8 * v41);
                  }
                  while (v39 != v40);
                }
                llvm::Type::getInt32Ty(*(llvm::Type **)((char *)this + v34 + 104), v32);
                *(void *)(v411.__r_.__value_.__r.__words[0] + 8 * LODWORD(v411.__r_.__value_.__r.__words[1]) - 16) = llvm::ConstantInt::get();
                if (v37)
                {
                  ResourceArrayIndex = AGCArgumentBuffer::Resource::getResourceArrayIndex(v12, (llvm::Type **)((char *)this + v34 + 40), __p);
                  uint64_t v45 = LODWORD(v411.__r_.__value_.__r.__words[1]);
                  *(void *)(v411.__r_.__value_.__r.__words[0] + 8 * LODWORD(v411.__r_.__value_.__r.__words[1]) - 8) = ResourceArrayIndex;
                }
                else
                {
                  llvm::Type::getInt32Ty(*(llvm::Type **)((char *)this + v34 + 104), v43);
                  *(void *)(v411.__r_.__value_.__r.__words[0] + 8 * LODWORD(v411.__r_.__value_.__r.__words[1]) - 8) = llvm::ConstantInt::get();
                  std::string::size_type v46 = AGCArgumentBuffer::Resource::getResourceArrayIndex(v12, (llvm::Type **)((char *)this + v34 + 40), __p);
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v411, (uint64_t)v46);
                  uint64_t v45 = LODWORD(v411.__r_.__value_.__r.__words[1]);
                }
                __int16 v417 = 257;
                uint64_t GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)&v385[v34 + 32], v35, v36, (uint64_t **)v411.__r_.__value_.__l.__data_, v45, (uint64_t)v415);
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v422, GEP);
                if ((std::string::size_type *)v411.__r_.__value_.__l.__data_ != &v411.__r_.__value_.__r.__words[2]) {
                  free(v411.__r_.__value_.__l.__data_);
                }
                long long v33 = (std::string *)((char *)v33 + 4);
              }
              while (v33 != (std::string *)v381);
              long long v33 = (std::string *)v414.__r_.__value_.__r.__words[0];
              uint64_t v6 = v367;
            }
            if (v33 != (std::string *)&v414.__r_.__value_.__r.__words[2]) {
              free(v33);
            }
            size_t v26 = "texture_gep";
          }
          else if (v12 && v31 == 6)
          {
            v414.__r_.__value_.__r.__words[0] = (std::string::size_type)&v414.__r_.__value_.__r.__words[2];
            v414.__r_.__value_.__l.__size_ = 0x300000000;
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v414, 0);
            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)&v414, 2);
            uint64_t v49 = (std::string *)v414.__r_.__value_.__r.__words[0];
            if (LODWORD(v414.__r_.__value_.__r.__words[1]))
            {
              uint64_t v382 = (llvm::Type *)(v414.__r_.__value_.__r.__words[0] + 4 * LODWORD(v414.__r_.__value_.__r.__words[1]));
              do
              {
                uint64_t v50 = *(void *)(*(void *)this - 24);
                uint64_t v51 = *(void *)(v387 + 16);
                std::string::size_type v52 = *(uint64_t **)(v387 + 112);
                BOOL v53 = LODWORD(v49->__r_.__value_.__l.__data_) != 1;
                if (LODWORD(v49->__r_.__value_.__l.__data_) == 2) {
                  BOOL v53 = 1;
                }
                if (LODWORD(v49->__r_.__value_.__l.__data_)) {
                  BOOL v54 = v53;
                }
                else {
                  BOOL v54 = 0;
                }
                v411.__r_.__value_.__r.__words[0] = (std::string::size_type)&v411.__r_.__value_.__r.__words[2];
                v411.__r_.__value_.__l.__size_ = 0x800000000;
                if (*(_DWORD *)(v12 + 112)) {
                  llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v411, v12 + 104);
                }
                uint64_t v55 = *(unsigned int *)(v12 + 192);
                if (v55)
                {
                  __int16 v56 = *(unsigned int **)(v12 + 184);
                  uint64_t v57 = &v56[2 * v55];
                  do
                  {
                    uint64_t v58 = *v56;
                    uint64_t v59 = v56[1];
                    v56 += 2;
                    *(void *)(v411.__r_.__value_.__r.__words[0] + 8 * v59) = *(void *)(*(void *)__p + 8 * v58);
                  }
                  while (v56 != v57);
                }
                llvm::Type::getInt32Ty(*(llvm::Type **)((char *)this + v50 + 104), v48);
                *(void *)(v411.__r_.__value_.__r.__words[0] + 8 * LODWORD(v411.__r_.__value_.__r.__words[1]) - 16) = llvm::ConstantInt::get();
                if (v54)
                {
                  uint64_t v61 = AGCArgumentBuffer::Resource::getResourceArrayIndex(v12, (llvm::Type **)((char *)this + v50 + 40), __p);
                  uint64_t v62 = LODWORD(v411.__r_.__value_.__r.__words[1]);
                  *(void *)(v411.__r_.__value_.__r.__words[0] + 8 * LODWORD(v411.__r_.__value_.__r.__words[1]) - 8) = v61;
                }
                else
                {
                  llvm::Type::getInt32Ty(*(llvm::Type **)((char *)this + v50 + 104), v60);
                  *(void *)(v411.__r_.__value_.__r.__words[0] + 8 * LODWORD(v411.__r_.__value_.__r.__words[1]) - 8) = llvm::ConstantInt::get();
                  uint64_t v63 = AGCArgumentBuffer::Resource::getResourceArrayIndex(v12, (llvm::Type **)((char *)this + v50 + 40), __p);
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v411, (uint64_t)v63);
                  uint64_t v62 = LODWORD(v411.__r_.__value_.__r.__words[1]);
                }
                __int16 v417 = 257;
                uint64_t v64 = llvm::IRBuilderBase::CreateGEP((uint64_t)&v385[v50 + 32], v51, v52, (uint64_t **)v411.__r_.__value_.__l.__data_, v62, (uint64_t)v415);
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v422, v64);
                if ((std::string::size_type *)v411.__r_.__value_.__l.__data_ != &v411.__r_.__value_.__r.__words[2]) {
                  free(v411.__r_.__value_.__l.__data_);
                }
                uint64_t v49 = (std::string *)((char *)v49 + 4);
              }
              while (v49 != (std::string *)v382);
              uint64_t v49 = (std::string *)v414.__r_.__value_.__r.__words[0];
              uint64_t v6 = v367;
            }
            if (v49 != (std::string *)&v414.__r_.__value_.__r.__words[2]) {
              free(v49);
            }
            size_t v26 = "sampler_gep";
          }
          else
          {
            if (v31 == 4) {
              uint64_t v80 = v12;
            }
            else {
              uint64_t v80 = 0;
            }
            uint64_t v81 = *(void *)(*(void *)this - 24);
            BOOL v82 = &v385[v81];
            uint64_t v83 = *(void *)(v387 + 16);
            unint64_t v84 = *(uint64_t **)(v387 + 112);
            AGCArgumentBuffer::Buffer::remapToTier1Indices(&v411, v80, (llvm::Type **)((char *)this + v81 + 40), __p);
            __int16 v417 = 257;
            uint64_t v85 = llvm::IRBuilderBase::CreateGEP((uint64_t)(v82 + 32), v83, v84, (uint64_t **)v411.__r_.__value_.__l.__data_, LODWORD(v411.__r_.__value_.__r.__words[1]), (uint64_t)v415);
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v422, v85);
            if ((std::string::size_type *)v411.__r_.__value_.__l.__data_ != &v411.__r_.__value_.__r.__words[2]) {
              free(v411.__r_.__value_.__l.__data_);
            }
            size_t v26 = "buffer_gep";
          }
          char v86 = (char *)this + *(void *)(*(void *)this - 24);
          uint64_t v87 = *(void *)(v387 + 16);
          char v88 = *(uint64_t **)(v387 + 112);
          v415[0] = *(llvm::Use **)(*(void *)v422.__r_.__value_.__l.__data_
                                  - 32 * (*(_DWORD *)(*(void *)v422.__r_.__value_.__l.__data_ + 20) & 0x7FFFFFF)
                                  + 32);
          v415[1] = (llvm::Use *)llvm::ConstantInt::get();
          v416[0] = llvm::ConstantInt::get();
          v413[0] = 257;
          uint64_t v89 = llvm::IRBuilderBase::CreateGEP((uint64_t)(v86 + 40), v87, v88, (uint64_t **)v415, 3, (uint64_t)&v411);
          uint64_t v90 = llvm::ConstantInt::get();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v422, v89);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v422, v90);
          v411.__r_.__value_.__r.__words[0] = (std::string::size_type)&v411.__r_.__value_.__r.__words[2];
          v411.__r_.__value_.__l.__size_ = 0x400000000;
          if (LODWORD(v422.__r_.__value_.__r.__words[1]))
          {
            unsigned int v91 = (uint64_t **)v422.__r_.__value_.__r.__words[0];
            uint64_t v92 = 8 * LODWORD(v422.__r_.__value_.__r.__words[1]);
            do
            {
              uint64_t v93 = *v91++;
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v411, *v93);
              v92 -= 8;
            }
            while (v92);
          }
          uint64_t v94 = (llvm::Type *)llvm::StructType::get();
          uint64_t InsertValue = (llvm::Type **)llvm::UndefValue::get();
          LODWORD(v414.__r_.__value_.__l.__data_) = 0;
          if (LODWORD(v422.__r_.__value_.__r.__words[1]))
          {
            unsigned int v96 = 0;
            do
            {
              unsigned __int16 v97 = (char *)this + *(void *)(*(void *)this - 24) + 40;
              uint64_t v98 = *(void *)(v422.__r_.__value_.__r.__words[0] + 8 * v96);
              __int16 v417 = 257;
              uint64_t InsertValue = (llvm::Type **)llvm::IRBuilderBase::CreateInsertValue((uint64_t)v97, (uint64_t)InsertValue, v98, (uint64_t)&v414, 1, (uint64_t)v415);
              unsigned int v96 = LODWORD(v414.__r_.__value_.__l.__data_) + 1;
              LODWORD(v414.__r_.__value_.__l.__data_) = v96;
            }
            while (LODWORD(v422.__r_.__value_.__r.__words[1]) > v96);
          }
          uint64_t AllocaInEntryBlock = (llvm::Value *)AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMUserObject *)((char *)this+ *(void *)(*(void *)this - 24)+ 32), v94);
          llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), InsertValue, (uint64_t)AllocaInEntryBlock, 0);
          AGCLLVMUserObject::addrSpaceReconciliation(this, AllocaInEntryBlock, *v376);
          if ((std::string::size_type *)v411.__r_.__value_.__l.__data_ != &v411.__r_.__value_.__r.__words[2]) {
            free(v411.__r_.__value_.__l.__data_);
          }
          if (*(unsigned char **)__p != &__p[16]) {
            free(*(void **)__p);
          }
          if ((std::string::size_type *)v422.__r_.__value_.__l.__data_ != &v422.__r_.__value_.__r.__words[2]) {
            free(v422.__r_.__value_.__l.__data_);
          }
        }
        char v100 = 1;
        BYTE1(v420) = 1;
        if (*v26)
        {
          *(void *)std::string __p = v26;
          char v100 = 3;
        }
        LOBYTE(v420) = v100;
        llvm::Value::setName();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v376);
        goto LABEL_145;
      }
      if (v13 != 60 || v11 == 0) {
        break;
      }
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Instruction *)v11);
      *(void *)std::string __p = &__p[16];
      *(void *)&__p[8] = 0x400000000;
      int v27 = *(_DWORD *)(v12 + 8);
      if (v12) {
        BOOL v28 = v27 == 5;
      }
      else {
        BOOL v28 = 0;
      }
      if (v28)
      {
        AGCArgumentBuffer::Texture::typeSet((AGCArgumentBuffer::Texture *)&v411, *(AGCLLVMTargetLowerer **)((char *)this + *(void *)(*(void *)this - 24) + 400), *(llvm::LLVMContext **)((char *)this + *(void *)(*(void *)this - 24) + 392));
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)__p, (uint64_t)&v411);
        if ((std::string::size_type *)v411.__r_.__value_.__l.__data_ != &v411.__r_.__value_.__r.__words[2]) {
          free(v411.__r_.__value_.__l.__data_);
        }
        AGCLLVMUserObject::replaceArgumentBufferLoadTextureOrSampler(this, (llvm::Type **)v11, (uint64_t)__p);
        __int16 v29 = "texture_load";
      }
      else if (v12 && v27 == 6)
      {
        AGCArgumentBuffer::Sampler::typeSet((AGCArgumentBuffer::Sampler *)&v411, *(AGCLLVMTargetLowerer **)((char *)this + *(void *)(*(void *)this - 24) + 400), *(llvm::LLVMContext **)((char *)this + *(void *)(*(void *)this - 24) + 392));
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)__p, (uint64_t)&v411);
        if ((std::string::size_type *)v411.__r_.__value_.__l.__data_ != &v411.__r_.__value_.__r.__words[2]) {
          free(v411.__r_.__value_.__l.__data_);
        }
        AGCLLVMUserObject::replaceArgumentBufferLoadTextureOrSampler(this, (llvm::Type **)v11, (uint64_t)__p);
        __int16 v29 = "sampler_load";
      }
      else
      {
        __int16 v65 = *(llvm::Value **)(v11 - 32);
        int v66 = (llvm::Type *)llvm::PointerType::get();
        v411.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
        uint64_t v67 = llvm::StructType::get();
        unsigned int v68 = (llvm::Type *)llvm::PointerType::get();
        uint64_t v69 = (uint64_t *)AGCLLVMUserObject::addrSpaceReconciliation(this, v65, v68);
        std::string::size_type v70 = (char *)this + *(void *)(*(void *)this - 24);
        v422.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
        v422.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
        v413[0] = 257;
        uint64_t v71 = llvm::IRBuilderBase::CreateGEP((uint64_t)(v70 + 40), v67, v69, (uint64_t **)&v422, 2, (uint64_t)&v411);
        uint64_t v72 = (uint64_t *)&v385[*(void *)(*(void *)this - 24) + 32];
        v413[0] = 257;
        uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v72, v66, v71, 0, (uint64_t)&v411);
        uint64_t v74 = (char *)this + *(void *)(*(void *)this - 24);
        uint64_t v75 = (llvm::Type *)*((void *)v74 + 30);
        v413[0] = 257;
        uint64_t v76 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v74 + 5, v75, AlignedLoad, 0, (uint64_t)&v411);
        uint64_t v77 = (char *)this + *(void *)(*(void *)this - 24) + 40;
        uint64_t v78 = *(void *)v11;
        v413[0] = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v77, 48, v76, v78, (uint64_t)&v411);
        __int16 v29 = "buffer_load";
      }
      char v79 = 1;
      HIBYTE(v413[0]) = 1;
      if (*v29)
      {
        v411.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        char v79 = 3;
      }
      LOBYTE(v413[0]) = v79;
      llvm::Value::setName();
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent((llvm::Instruction *)v11);
      if (*(unsigned char **)__p != &__p[16]) {
        free(*(void **)__p);
      }
LABEL_145:
      if (!*((_DWORD *)this + 812)) {
        goto LABEL_146;
      }
    }
    if (v13 != 61 || v11 == 0) {
      goto LABEL_658;
    }
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Instruction *)v11);
    *(void *)std::string __p = &__p[16];
    *(void *)&__p[8] = 0x400000000;
    int v17 = *(_DWORD *)(v12 + 8);
    if (v12 && v17 == 5)
    {
      AGCArgumentBuffer::Texture::typeSet((AGCArgumentBuffer::Texture *)&v411, *(AGCLLVMTargetLowerer **)((char *)this + *(void *)(*(void *)this - 24) + 400), *(llvm::LLVMContext **)((char *)this + *(void *)(*(void *)this - 24) + 392));
    }
    else
    {
      if (!v12 || v17 != 6)
      {
        uint64_t v101 = *(void *)(*(void *)this - 24);
        uint64_t v102 = *(void *)(v11 - 64);
        uint64_t v103 = *(void *)&v369[v101 + 32];
        v413[0] = 257;
        uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this + v101 + 40, 47, v102, v103, (uint64_t)&v411);
        v411.__r_.__value_.__r.__words[0] = llvm::PointerType::get();
        v411.__r_.__value_.__l.__size_ = llvm::PointerType::get();
        v411.__r_.__value_.__r.__words[2] = *(void *)&v373[*(void *)(*(void *)this - 24) + 32];
        uint64_t v105 = (llvm::Type *)llvm::StructType::get();
        uint64_t v106 = *(llvm::Value **)(v11 - 32);
        uint64_t v107 = (llvm::Type *)llvm::PointerType::get();
        uint64_t v108 = AGCLLVMUserObject::addrSpaceReconciliation(this, v106, v107);
        uint64_t v109 = (uint64_t *)&v385[*(void *)(*(void *)this - 24) + 32];
        v413[0] = 257;
        uint64_t v110 = llvm::IRBuilderBase::CreateAlignedLoad(v109, v105, v108, 0, (uint64_t)&v411);
        unsigned int v111 = (char *)this + *(void *)(*(void *)this - 24) + 40;
        LODWORD(v422.__r_.__value_.__l.__data_) = 0;
        v413[0] = 257;
        uint64_t Value = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v111, v110, (uint64_t)&v422, 1, (uint64_t)&v411);
        uint64_t v113 = (char *)this + *(void *)(*(void *)this - 24) + 40;
        LODWORD(v422.__r_.__value_.__l.__data_) = 1;
        v413[0] = 257;
        uint64_t v114 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v113, v110, (uint64_t)&v422, 1, (uint64_t)&v411);
        uint64_t v115 = (char *)this + *(void *)(*(void *)this - 24) + 40;
        LODWORD(v422.__r_.__value_.__l.__data_) = 2;
        v413[0] = 257;
        int v116 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v115, v110, (uint64_t)&v422, 1, (uint64_t)&v411);
        llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), Cast, Value, 0);
        llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v116, v114, 0);
LABEL_143:
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v11);
        if (*(unsigned char **)__p != &__p[16]) {
          free(*(void **)__p);
        }
        goto LABEL_145;
      }
      AGCArgumentBuffer::Sampler::typeSet((AGCArgumentBuffer::Sampler *)&v411, *(AGCLLVMTargetLowerer **)((char *)this + *(void *)(*(void *)this - 24) + 400), *(llvm::LLVMContext **)((char *)this + *(void *)(*(void *)this - 24) + 392));
    }
    llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)__p, (uint64_t)&v411);
    if ((std::string::size_type *)v411.__r_.__value_.__l.__data_ != &v411.__r_.__value_.__r.__words[2]) {
      free(v411.__r_.__value_.__l.__data_);
    }
    AGCLLVMUserObject::replaceArgumentBufferStoreTextureOrSampler(this, v11, (uint64_t)__p);
    goto LABEL_143;
  }
LABEL_146:
  uint64_t v117 = *((unsigned int *)this + 798);
  if (v117)
  {
    unint64_t v118 = *((void *)this + 398);
    unint64_t v119 = v118 + 8 * v117;
    char v375 = (char *)this + 8;
    LOBYTE(v120) = 1;
    unint64_t v364 = v119;
    while ((v120 & 1) == 0)
    {
      uint64_t v120 = 0;
LABEL_635:
      v118 += 8;
      if (v118 == v119) {
        goto LABEL_638;
      }
    }
    uint64_t v121 = *(void *)v118;
    *(_OWORD *)int v408 = 0u;
    *(_OWORD *)uint64_t v409 = 0u;
    int v410 = 1065353216;
    *(_OWORD *)uint64_t v405 = 0u;
    *(_OWORD *)uint64_t v406 = 0u;
    float v407 = 1.0;
    *(_OWORD *)uint64_t v402 = 0u;
    *(_OWORD *)uint64_t v403 = 0u;
    float v404 = 1.0;
    unsigned int __val = *(_DWORD *)(v121 + 48);
    int v389 = *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1755);
    v400[0] = this;
    v400[1] = v408;
    v400[2] = &__val;
    v424[0] = v425;
    v424[1] = (void *)0x400000000;
    uint64_t v386 = v121;
    uint64_t v122 = *(void *)(v121 + 8);
    if (*(unsigned char *)(v121 + 3) && (uint64_t v123 = *(void *)(v122 + 8)) != 0)
    {
      int v124 = 0;
      do
      {
        uint64_t v125 = *(void *)(v123 + 24);
        if (*(unsigned char *)(v125 + 16) == 60)
        {
          ++v124;
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v424, v125);
        }
        uint64_t v123 = *(void *)(v123 + 8);
      }
      while (v123);
      unsigned int v126 = v124 + 1;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v424, *(void *)(v386 + 8));
      if (v124 == -1)
      {
LABEL_619:
        uint64_t v120 = 1;
        if (!v389) {
          llvm::Value::replaceAllUsesWith();
        }
        goto LABEL_621;
      }
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v424, v122);
      unsigned int v126 = 1;
    }
    uint64_t v127 = 0;
    uint64_t v368 = v126;
    unint64_t v366 = v118;
LABEL_160:
    uint64_t v370 = v127;
    unint64_t v128 = *((void *)v424[0] + v127);
    uint64_t v129 = *(void *)(v128 + 8);
    if (!v129) {
      goto LABEL_618;
    }
    unint64_t v374 = *((void *)v424[0] + v127);
LABEL_162:
    uint64_t v130 = *(llvm::GetElementPtrInst **)(v129 + 24);
    uint64_t v129 = *(void *)(v129 + 8);
    v398[0] = 4;
    v398[1] = 0;
    uint64_t v399 = v130;
    if (v130 != (llvm::GetElementPtrInst *)-8192 && v130 != (llvm::GetElementPtrInst *)-4096 && v130 != 0) {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v398);
    }
    if (*(unsigned char *)(v128 + 16) == 21) {
      uint64_t v132 = v128;
    }
    else {
      uint64_t v132 = 0;
    }
    if (AGCLLVMUserObject::isAllocaStoreForDebugger(*((unsigned char *)this + 45), (uint64_t)v130, v132))
    {
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v130);
      unint64_t v133 = (char *)this + *(void *)(*(void *)this - 24) + 40;
      uint64_t v134 = *(void *)(v386 + 112);
      uint64_t v135 = *(void *)v128;
      LOWORD(v420) = 257;
      uint64_t v136 = llvm::IRBuilderBase::CreateCast((uint64_t)v133, 49, v134, v135, (uint64_t)__p);
      uint64_t v137 = (uint64_t *)((char *)v130 - 64);
      if (*((void *)v130 - 8))
      {
        **((void **)v130 - 6) = *((void *)v130 - 7);
        uint64_t v138 = *((void *)v130 - 7);
        if (v138) {
          *(void *)(v138 + 16) = *((void *)v130 - 6);
        }
      }
      uint64_t *v137 = v136;
      if (v136)
      {
        uint64_t v141 = *(void *)(v136 + 8);
        int v139 = (uint64_t **)(v136 + 8);
        uint64_t v140 = v141;
        *((void *)v130 - 7) = v141;
        if (v141) {
          *(void *)(v140 + 16) = (char *)v130 - 56;
        }
        *((void *)v130 - 6) = v139;
        *int v139 = v137;
      }
      int v142 = 6;
      goto LABEL_436;
    }
    uint64_t v388 = v129;
    uint64_t v143 = v399;
    if (v399 && *((unsigned char *)v399 + 16) == 62)
    {
      uint64_t v397 = 0;
      BOOL v396 = 0;
      uint64_t v144 = AGCArgumentBuffer::lookup(*(AGCArgumentBuffer **)(v386 + 56), v399, &v397, &v396);
      if (!v144 || (int v145 = *((_DWORD *)v144 + 2), (v145 & 0xFFFFFFFC) != 4))
      {
        if (!v389) {
          goto LABEL_434;
        }
        std::to_string(&v422, __val);
        uint64_t v161 = std::string::insert(&v422, 0, "buffer(");
        std::string::size_type v162 = v161->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v411.__r_.__value_.__l.__data_ = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
        v411.__r_.__value_.__r.__words[2] = v162;
        v161->__r_.__value_.__l.__size_ = 0;
        v161->__r_.__value_.__r.__words[2] = 0;
        v161->__r_.__value_.__r.__words[0] = 0;
        uint64_t v163 = std::string::append(&v411, "): Unable to map argument buffer access to resource");
        std::string::size_type v164 = v163->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
        *(void *)&__p[16] = v164;
        v163->__r_.__value_.__l.__size_ = 0;
        v163->__r_.__value_.__r.__words[2] = 0;
        v163->__r_.__value_.__r.__words[0] = 0;
        if (__p[23] >= 0) {
          uint64_t v165 = __p;
        }
        else {
          uint64_t v165 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v166 = __p[23];
        }
        else {
          std::string::size_type v166 = *(void *)&__p[8];
        }
        std::string::append((std::string *)&v375[*(void *)(*(void *)this - 24)], v165, v166);
        uint64_t v129 = v388;
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v411.__r_.__value_.__l.__data_);
        }
        unint64_t v128 = v374;
        if ((SHIBYTE(v422.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_204:
          int v142 = 1;
          goto LABEL_436;
        }
LABEL_203:
        operator delete(v422.__r_.__value_.__l.__data_);
        goto LABEL_204;
      }
      unint64_t v377 = (unint64_t)v144;
      uint64_t v146 = (char *)v397;
      if (v389 && v396 && v397 == v143 && AGCLLVMUserObject::isVoidPointerUseInIntrinsic(this, v143))
      {
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v143);
        uint64_t v147 = *(llvm::Value **)(v386 + 112);
        uint64_t v148 = *(void *)v147;
        if ((*(_DWORD *)(*(void *)v147 + 8) & 0xFE) == 0x12) {
          uint64_t v148 = **(void **)(v148 + 16);
        }
        unint64_t v128 = v374;
        uint64_t v149 = **(llvm::Type ***)(v148 + 16);
        uint64_t v150 = (llvm::Value *)((void *)v143 - 4 * (*((_DWORD *)v143 + 5) & 0x7FFFFFF))[4];
        uint64_t v151 = (llvm::IRBuilderBase *)&v375[*(void *)(*(void *)this - 24) + 32];
        LOWORD(v420) = 257;
        uint64_t v152 = llvm::IRBuilderBase::CreateGEP(v151, v149, v147, v150, (const llvm::Twine *)__p);
        uint64_t v153 = (char *)this + *(void *)(*(void *)this - 24) + 40;
        uint64_t v154 = *(void *)v143;
        LOWORD(v420) = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v153, 49, v152, v154, (uint64_t)__p);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v143);
        goto LABEL_218;
      }
      AGCArgumentBuffer::Resource::getResourceIdBounds((AGCArgumentBuffer::Resource *)v377, v143);
      if (v167)
      {
        if (v145 == 7) {
          goto LABEL_240;
        }
        if (v145 != 4)
        {
          if (v145 == 5) {
            unint64_t v168 = v377;
          }
          else {
            unint64_t v168 = 0;
          }
          if (v145 == 6) {
            unint64_t v169 = v377;
          }
          else {
            unint64_t v169 = 0;
          }
          uint64_t v170 = **(void **)(*(void *)v143 + 16);
          uint64_t v383 = (llvm::Type *)v170;
          if (*(unsigned char *)(v170 + 8) == 15) {
            uint64_t v170 = **(void **)(v170 + 16);
          }
          unint64_t v128 = v374;
          if (!v389 && !*(unsigned char *)v386)
          {
            int v142 = 6;
            unint64_t v118 = v366;
            goto LABEL_435;
          }
          if (!v168)
          {
            LOBYTE(v419) = 0;
            *(void *)&__p[8] = v169;
            *(void *)&__p[16] = v170;
            _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v411, *(_DWORD *)(v169 + 236), __val);
            int v293 = *(_DWORD *)(v169 + 240);
            *(_DWORD *)std::string __p = v411.__r_.__value_.__l.__data_;
            *(_DWORD *)&__p[4] = v293;
            unsigned int data = v411.__r_.__value_.__l.__data_;
            std::__tree<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::__emplace_unique_key_args<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::Sampler const&>((uint64_t *)this + 122, v411.__r_.__value_.__l.__data_, __p);
            *((unsigned char *)this + 3659) = 1;
            uint64_t v294 = (AGCArgumentBuffer::Resource *)v377;
LABEL_548:
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v143);
            ResourceId = AGCArgumentBuffer::Resource::getResourceId((uint64_t)v294, (llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 40), (uint64_t)v143);
            uint64_t v318 = v143;
            if (v389) {
              uint64_t v318 = (llvm::Value *)llvm::UndefValue::get();
            }
            v394[0] = vadd_s32(vdup_n_s32(data), (int32x2_t)AGCArgumentBuffer::Resource::getResourceIdBounds(v294, v143));
            if (v168) {
              BOOL v319 = (unsigned __int8 **)((char *)this + 2992);
            }
            else {
              BOOL v319 = (unsigned __int8 **)((char *)this + 3040);
            }
            AGCLLVMUserObject::buildABResourceIntrinsic(this, v319, v383, ResourceId, (AGCArgumentBuffer::Resource::Bounds *)v394, data, v318);
            llvm::Value::takeName();
            uint64_t v320 = *((void *)v143 + 1);
            uint64_t v129 = v388;
            while (1)
            {
              if (!v320)
              {
                unint64_t v118 = v366;
                unint64_t v128 = v374;
                goto LABEL_605;
              }
              v411.__r_.__value_.__r.__words[0] = (std::string::size_type)&v411.__r_.__value_.__r.__words[2];
              v411.__r_.__value_.__l.__size_ = 0x800000000;
              v422.__r_.__value_.__r.__words[0] = (std::string::size_type)&v422.__r_.__value_.__r.__words[2];
              v422.__r_.__value_.__l.__size_ = 0x800000000;
              *(void *)std::string __p = &v420;
              *(void *)&__p[8] = &v420;
              *(void *)&__p[16] = 8;
              LODWORD(v419) = 0;
              uint64_t v372 = *(void *)(v320 + 8);
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v411, *(void *)(v320 + 24));
              unsigned int v321 = v411.__r_.__value_.__r.__words[1];
              if (!LODWORD(v411.__r_.__value_.__r.__words[1]))
              {
LABEL_576:
                if (LODWORD(v422.__r_.__value_.__r.__words[1]))
                {
                  std::string::size_type v331 = v422.__r_.__value_.__r.__words[0];
                  std::string::size_type v332 = v422.__r_.__value_.__r.__words[0] + 8 * LODWORD(v422.__r_.__value_.__r.__words[1]);
                  do
                  {
                    long long v334 = *(llvm::Instruction **)(v332 - 8);
                    v332 -= 8;
                    long long v333 = v334;
                    if (v334)
                    {
                      llvm::Instruction::eraseFromParent(v333);
                      std::string::size_type v331 = v422.__r_.__value_.__r.__words[0];
                    }
                  }
                  while (v332 != v331);
                }
                char v335 = 1;
                uint64_t v129 = v388;
                goto LABEL_595;
              }
              char v322 = 0;
              while (1)
              {
                long long v323 = *(unsigned __int8 **)(v411.__r_.__value_.__r.__words[0] + 8 * v321 - 8);
                LODWORD(v411.__r_.__value_.__r.__words[1]) = v321 - 1;
                int v324 = v323[16];
                uint64_t v325 = v324 == 83 ? (AGCLLVMUserObject *)v323 : 0;
                if (v389 && v325) {
                  break;
                }
LABEL_571:
                if (v324 == 60)
                {
                  if (((v389 != 0) & v322) == 1)
                  {
                    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Instruction *)v323);
                    AGCLLVMUserObject::buildABResourceIntrinsic(this, v319, v383, ResourceId, (AGCArgumentBuffer::Resource::Bounds *)v394, data, v318);
                  }
                  llvm::Value::replaceAllUsesWith();
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v422, (uint64_t)v323);
                }
                unsigned int v321 = v411.__r_.__value_.__r.__words[1];
                if (!LODWORD(v411.__r_.__value_.__r.__words[1])) {
                  goto LABEL_576;
                }
              }
              llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v415, (llvm::SmallPtrSetImplBase *)__p, v323);
              if (AGCLLVMUserObject::IsPhiInputsEquivalent(v325, v326)) {
                break;
              }
              std::to_string(&v392, __val);
              uint64_t v336 = std::string::insert(&v392, 0, "buffer(");
              std::string::size_type v337 = v336->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v414.__r_.__value_.__l.__data_ = *(_OWORD *)&v336->__r_.__value_.__l.__data_;
              v414.__r_.__value_.__r.__words[2] = v337;
              v336->__r_.__value_.__l.__size_ = 0;
              v336->__r_.__value_.__r.__words[2] = 0;
              v336->__r_.__value_.__r.__words[0] = 0;
              unint64_t v338 = std::string::append(&v414, "): Unable to map argument buffer access to resource");
              std::string::size_type v339 = v338->__r_.__value_.__r.__words[2];
              *(_OWORD *)int v415 = *(_OWORD *)&v338->__r_.__value_.__l.__data_;
              v416[0] = v339;
              v338->__r_.__value_.__l.__size_ = 0;
              v338->__r_.__value_.__r.__words[2] = 0;
              v338->__r_.__value_.__r.__words[0] = 0;
              if (v416[0] >= 0) {
                uint64_t v340 = v415;
              }
              else {
                uint64_t v340 = (llvm::Use **)v415[0];
              }
              if (v416[0] >= 0) {
                std::string::size_type v341 = HIBYTE(v416[0]);
              }
              else {
                std::string::size_type v341 = (std::string::size_type)v415[1];
              }
              std::string::append((std::string *)&v375[*(void *)(*(void *)this - 24)], (const std::string::value_type *)v340, v341);
              if (SHIBYTE(v416[0]) < 0) {
                operator delete(v415[0]);
              }
              uint64_t v129 = v388;
              if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v414.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v392.__r_.__value_.__l.__data_);
              }
              char v335 = 0;
LABEL_595:
              if (*(void *)&__p[8] != *(void *)__p) {
                free(*(void **)&__p[8]);
              }
              if ((std::string::size_type *)v422.__r_.__value_.__l.__data_ != &v422.__r_.__value_.__r.__words[2]) {
                free(v422.__r_.__value_.__l.__data_);
              }
              if ((std::string::size_type *)v411.__r_.__value_.__l.__data_ != &v411.__r_.__value_.__r.__words[2]) {
                free(v411.__r_.__value_.__l.__data_);
              }
              uint64_t v320 = v372;
              if ((v335 & 1) == 0)
              {
                int v142 = 1;
                unint64_t v118 = v366;
LABEL_603:
                unint64_t v128 = v374;
LABEL_436:
                if (v399 != (llvm::GetElementPtrInst *)-8192 && v399 != (llvm::GetElementPtrInst *)-4096 && v399) {
                  llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v398);
                }
                if (v142 && v142 != 6)
                {
                  uint64_t v120 = 0;
LABEL_621:
                  if (v424[0] != v425) {
                    free(v424[0]);
                  }
                  uint64_t v343 = v403[0];
                  unint64_t v119 = v364;
                  if (v403[0])
                  {
                    do
                    {
                      uint64_t v344 = (void *)*v343;
                      operator delete(v343);
                      uint64_t v343 = v344;
                    }
                    while (v344);
                  }
                  uint64_t v345 = v402[0];
                  v402[0] = 0;
                  if (v345) {
                    operator delete(v345);
                  }
                  uint64_t v346 = v406[0];
                  if (v406[0])
                  {
                    do
                    {
                      uint64_t v347 = (void *)*v346;
                      operator delete(v346);
                      uint64_t v346 = v347;
                    }
                    while (v347);
                  }
                  uint64_t v348 = v405[0];
                  v405[0] = 0;
                  if (v348) {
                    operator delete(v348);
                  }
                  uint64_t v349 = v409[0];
                  if (v409[0])
                  {
                    do
                    {
                      uint64_t v350 = (void *)*v349;
                      operator delete(v349);
                      uint64_t v349 = v350;
                    }
                    while (v350);
                  }
                  uint64_t v351 = v408[0];
                  v408[0] = 0;
                  if (v351) {
                    operator delete(v351);
                  }
                  goto LABEL_635;
                }
                if (!v129)
                {
LABEL_618:
                  uint64_t v127 = v370 + 1;
                  if (v370 + 1 == v368) {
                    goto LABEL_619;
                  }
                  goto LABEL_160;
                }
                goto LABEL_162;
              }
            }
            uint64_t v327 = *((void *)v325 + 1);
            while (v327)
            {
              uint64_t v328 = *(const void **)(v327 + 24);
              uint64_t v327 = *(void *)(v327 + 8);
              int v329 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)__p, v328);
              if (*(void *)&__p[8] == *(void *)__p) {
                long long v330 = &__p[20];
              }
              else {
                long long v330 = &__p[16];
              }
              if ((const void **)(*(void *)&__p[8] + 8 * *(unsigned int *)v330) == v329)
              {
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v411, (uint64_t)v328);
                char v322 = 1;
              }
            }
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v422, (uint64_t)v323);
            int v324 = v323[16];
            goto LABEL_571;
          }
          char v421 = 0;
          *(_WORD *)&__p[8] = *(_WORD *)(v168 + 244);
          uint64_t v171 = (int *)(v168 + 248);
          if (!*(unsigned char *)(v168 + 252)) {
            uint64_t v171 = (int *)&RASTER_ORDER_GROUP_NONE;
          }
          int v172 = *v171;
          *(_DWORD *)&__p[16] = 0;
          *(_DWORD *)&unsigned char __p[12] = v172;
          unint64_t v419 = v168;
          uint64_t v420 = v170;
          _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v411, *(_DWORD *)(v168 + 236), __val);
          int v173 = *(_DWORD *)(v168 + 240);
          *(_DWORD *)std::string __p = v411.__r_.__value_.__l.__data_;
          *(_DWORD *)&__p[4] = v173;
          unsigned int data = v411.__r_.__value_.__l.__data_;
          std::__tree<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::__emplace_unique_key_args<AGCLLVMUserObject::Texture,AGCLLVMUserObject::Texture const&>((uint64_t *)this + 119, v411.__r_.__value_.__l.__data_, __p);
          *((unsigned char *)this + 3658) = 1;
          unint64_t v174 = 0x9DDFEA08EB382D69 * (((8 * v168) + 8) ^ HIDWORD(v168));
          unint64_t v175 = 0x9DDFEA08EB382D69 * (HIDWORD(v168) ^ (v174 >> 47) ^ v174);
          unint64_t v176 = 0x9DDFEA08EB382D69 * (v175 ^ (v175 >> 47));
          unint64_t v177 = (unint64_t)v402[1];
          if (v402[1])
          {
            uint8x8_t v178 = (uint8x8_t)vcnt_s8((int8x8_t)v402[1]);
            v178.i16[0] = vaddlv_u8(v178);
            if (v178.u32[0] > 1uLL)
            {
              unint64_t v128 = 0x9DDFEA08EB382D69 * (v175 ^ (v175 >> 47));
              if ((void *)v176 >= v402[1]) {
                unint64_t v128 = v176 % (unint64_t)v402[1];
              }
            }
            else
            {
              unint64_t v128 = v176 & ((unint64_t)v402[1] - 1);
            }
            uint64_t v295 = (void *)*((void *)v402[0] + v128);
            if (v295)
            {
              unint64_t v296 = (void *)*v295;
              if (v296)
              {
                uint64_t v294 = (AGCArgumentBuffer::Resource *)v377;
                do
                {
                  unint64_t v297 = v296[1];
                  if (v297 == v176)
                  {
                    if (v296[2] == v168) {
                      goto LABEL_548;
                    }
                  }
                  else
                  {
                    if (v178.u32[0] > 1uLL)
                    {
                      if ((void *)v297 >= v402[1]) {
                        v297 %= (unint64_t)v402[1];
                      }
                    }
                    else
                    {
                      v297 &= (unint64_t)v402[1] - 1;
                    }
                    if (v297 != v128) {
                      break;
                    }
                  }
                  unint64_t v296 = (void *)*v296;
                }
                while (v296);
              }
            }
          }
          unint64_t v298 = operator new(0x18uLL);
          *unint64_t v298 = 0;
          v298[1] = v176;
          v298[2] = v168;
          float v299 = (float)((unint64_t)v403[1] + 1);
          if (v177 && (float)(v404 * (float)v177) >= v299)
          {
LABEL_538:
            uint8x8_t v315 = v402[0];
            unint64_t v316 = (void *)*((void *)v402[0] + v128);
            if (v316)
            {
              *unint64_t v298 = *v316;
            }
            else
            {
              *unint64_t v298 = v403[0];
              v403[0] = v298;
              v315[v128] = v403;
              if (!*v298)
              {
LABEL_547:
                ++v403[1];
                *((_DWORD *)this + 832) += *(_DWORD *)(v168 + 240);
                uint64_t v294 = (AGCArgumentBuffer::Resource *)v377;
                goto LABEL_548;
              }
              unint64_t v317 = *(void *)(*v298 + 8);
              if ((v177 & (v177 - 1)) != 0)
              {
                if (v317 >= v177) {
                  v317 %= v177;
                }
              }
              else
              {
                v317 &= v177 - 1;
              }
              unint64_t v316 = (char *)v402[0] + 8 * v317;
            }
            *unint64_t v316 = v298;
            goto LABEL_547;
          }
          BOOL v300 = (v177 & (v177 - 1)) != 0;
          if (v177 < 3) {
            BOOL v300 = 1;
          }
          unint64_t v301 = v300 | (2 * v177);
          unint64_t v302 = vcvtps_u32_f32(v299 / v404);
          if (v301 <= v302) {
            int8x8_t prime = (int8x8_t)v302;
          }
          else {
            int8x8_t prime = (int8x8_t)v301;
          }
          if (*(void *)&prime == 1)
          {
            int8x8_t prime = (int8x8_t)2;
          }
          else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
          {
            int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            unint64_t v177 = (unint64_t)v402[1];
          }
          if (*(void *)&prime > v177) {
            goto LABEL_504;
          }
          if (*(void *)&prime < v177)
          {
            unint64_t v310 = vcvtps_u32_f32((float)(unint64_t)v403[1] / v404);
            if (v177 < 3
              || (uint8x8_t v311 = (uint8x8_t)vcnt_s8((int8x8_t)v177), v311.i16[0] = vaddlv_u8(v311), v311.u32[0] > 1uLL))
            {
              unint64_t v310 = std::__next_prime(v310);
            }
            else
            {
              uint64_t v312 = 1 << -(char)__clz(v310 - 1);
              if (v310 >= 2) {
                unint64_t v310 = v312;
              }
            }
            if (*(void *)&prime <= v310) {
              int8x8_t prime = (int8x8_t)v310;
            }
            if (*(void *)&prime >= v177)
            {
              unint64_t v177 = (unint64_t)v402[1];
            }
            else
            {
              if (prime)
              {
LABEL_504:
                if (*(void *)&prime >> 61) {
LABEL_663:
                }
                  std::__throw_bad_array_new_length[abi:nn180100]();
                float v304 = operator new(8 * *(void *)&prime);
                float v305 = v402[0];
                v402[0] = v304;
                if (v305) {
                  operator delete(v305);
                }
                uint64_t v306 = 0;
                v402[1] = (void *)prime;
                do
                  *((void *)v402[0] + v306++) = 0;
                while (*(void *)&prime != v306);
                unint64_t v307 = (void **)v403[0];
                if (v403[0])
                {
                  unint64_t v308 = *((void *)v403[0] + 1);
                  uint8x8_t v309 = (uint8x8_t)vcnt_s8(prime);
                  v309.i16[0] = vaddlv_u8(v309);
                  if (v309.u32[0] > 1uLL)
                  {
                    if (v308 >= *(void *)&prime) {
                      v308 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v308 &= *(void *)&prime - 1;
                  }
                  *((void *)v402[0] + v308) = v403;
                  for (unsigned int i = *v307; i; v308 = v314)
                  {
                    unint64_t v314 = i[1];
                    if (v309.u32[0] > 1uLL)
                    {
                      if (v314 >= *(void *)&prime) {
                        v314 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v314 &= *(void *)&prime - 1;
                    }
                    if (v314 != v308)
                    {
                      if (!*((void *)v402[0] + v314))
                      {
                        *((void *)v402[0] + v314) = v307;
                        goto LABEL_529;
                      }
                      *unint64_t v307 = (void *)*i;
                      *unsigned int i = **((void **)v402[0] + v314);
                      **((void **)v402[0] + v314) = i;
                      unsigned int i = v307;
                    }
                    unint64_t v314 = v308;
LABEL_529:
                    unint64_t v307 = (void **)i;
                    unsigned int i = (void *)*i;
                  }
                }
                unint64_t v177 = (unint64_t)prime;
                goto LABEL_533;
              }
              unint64_t v342 = v402[0];
              v402[0] = 0;
              if (v342) {
                operator delete(v342);
              }
              unint64_t v177 = 0;
              v402[1] = 0;
            }
          }
LABEL_533:
          if ((v177 & (v177 - 1)) != 0)
          {
            if (v176 >= v177) {
              unint64_t v128 = v176 % v177;
            }
            else {
              unint64_t v128 = v176;
            }
          }
          else
          {
            unint64_t v128 = (v177 - 1) & v176;
          }
          goto LABEL_538;
        }
LABEL_245:
        if (v389)
        {
          v422.__r_.__value_.__r.__words[0] = (std::string::size_type)&v422.__r_.__value_.__r.__words[2];
          v422.__r_.__value_.__l.__size_ = 0x800000000;
          *(void *)std::string __p = &v420;
          *(void *)&__p[8] = &v420;
          *(void *)&__p[16] = 8;
          LODWORD(v419) = 0;
          v415[0] = (llvm::Use *)v416;
          v415[1] = (llvm::Use *)0x800000000;
          uint64_t v183 = *((void *)v143 + 1);
          unint64_t v128 = v374;
          if (v183)
          {
            uint64_t v371 = v167;
            do
            {
              uint64_t v184 = *(void *)(v183 + 8);
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v422, *(void *)(v183 + 24));
              uint64_t v183 = v184;
            }
            while (v184);
            unsigned int v185 = v422.__r_.__value_.__r.__words[1];
            if (LODWORD(v422.__r_.__value_.__r.__words[1]))
            {
              uint64_t v363 = (char *)v143 + 32;
              unint64_t v186 = 0x9DDFEA08EB382D69 * (((8 * v377) + 8) ^ HIDWORD(v377));
              unint64_t v187 = 0x9DDFEA08EB382D69 * (HIDWORD(v377) ^ (v186 >> 47) ^ v186);
              unint64_t v365 = 0x9DDFEA08EB382D69 * (v187 ^ (v187 >> 47));
              while (1)
              {
                uint64_t v188 = *(uint64_t **)(v422.__r_.__value_.__r.__words[0] + 8 * v185 - 8);
                LODWORD(v422.__r_.__value_.__r.__words[1]) = v185 - 1;
                v394[0] = 4;
                v394[1] = 0;
                uint64_t v395 = v188;
                if (v188 == (uint64_t *)-8192
                  || (v188 != (uint64_t *)-4096 ? (BOOL v189 = v188 == 0) : (BOOL v189 = 1), v189))
                {
                  if (!v188) {
                    goto LABEL_270;
                  }
                }
                else
                {
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v394);
                  if (!v188) {
                    goto LABEL_270;
                  }
                }
                if (*((unsigned char *)v188 + 16) != 83) {
                  goto LABEL_270;
                }
                llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v411, (llvm::SmallPtrSetImplBase *)__p, v188);
                if (AGCLLVMUserObject::IsPhiInputsEquivalent((AGCLLVMUserObject *)v188, v190)) {
                  break;
                }
                std::to_string(&v392, __val);
                uint64_t v207 = std::string::insert(&v392, 0, "buffer(");
                std::string::size_type v208 = v207->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v414.__r_.__value_.__l.__data_ = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
                v414.__r_.__value_.__r.__words[2] = v208;
                v207->__r_.__value_.__l.__size_ = 0;
                v207->__r_.__value_.__r.__words[2] = 0;
                v207->__r_.__value_.__r.__words[0] = 0;
                unsigned int v209 = std::string::append(&v414, "): Unable to map argument buffer access to resource");
                std::string::size_type v210 = v209->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v411.__r_.__value_.__l.__data_ = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
                v411.__r_.__value_.__r.__words[2] = v210;
                v209->__r_.__value_.__l.__size_ = 0;
                v209->__r_.__value_.__r.__words[2] = 0;
                v209->__r_.__value_.__r.__words[0] = 0;
                if ((v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v211 = &v411;
                }
                else {
                  uint64_t v211 = (std::string *)v411.__r_.__value_.__r.__words[0];
                }
                if ((v411.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v411.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v411.__r_.__value_.__l.__size_;
                }
                std::string::append((std::string *)&v375[*(void *)(*(void *)this - 24)], (const std::string::value_type *)v211, size);
                if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v411.__r_.__value_.__l.__data_);
                }
                unint64_t v128 = v374;
                if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v414.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v392.__r_.__value_.__l.__data_);
                }
                int v142 = 1;
LABEL_417:
                if (v395 != (uint64_t *)-8192 && v395 != (uint64_t *)-4096 && v395) {
                  llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v394);
                }
                if (v142 != 9 && v142)
                {
                  uint64_t v129 = v388;
LABEL_466:
                  if ((void *)v415[0] != v416) {
                    free(v415[0]);
                  }
                  if (*(void *)&__p[8] != *(void *)__p) {
                    free(*(void **)&__p[8]);
                  }
                  if ((std::string::size_type *)v422.__r_.__value_.__l.__data_ != &v422.__r_.__value_.__r.__words[2]) {
                    free(v422.__r_.__value_.__l.__data_);
                  }
                  if (v142) {
                    goto LABEL_436;
                  }
LABEL_605:
                  int v142 = 0;
                  if (v389 && v399)
                  {
                    llvm::Instruction::eraseFromParent(v130);
                    int v142 = 0;
                  }
                  goto LABEL_436;
                }
                unsigned int v185 = v422.__r_.__value_.__r.__words[1];
                if (!LODWORD(v422.__r_.__value_.__r.__words[1])) {
                  goto LABEL_453;
                }
              }
              uint64_t v191 = v188[1];
              while (v191)
              {
                while (1)
                {
                  uint64_t v192 = *(const void **)(v191 + 24);
                  uint64_t v191 = *(void *)(v191 + 8);
                  uint64_t v193 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)__p, v192);
                  unint64_t v194 = (unsigned int *)(*(void *)&__p[8] == *(void *)__p ? &__p[20] : &__p[16]);
                  if ((const void **)(*(void *)&__p[8] + 8 * *v194) == v193) {
                    break;
                  }
                  if (!v191) {
                    goto LABEL_270;
                  }
                }
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v422, (uint64_t)v192);
              }
LABEL_270:
              int v195 = *((unsigned __int8 *)v395 + 16);
              if (v195 == 61)
              {
                int v142 = 9;
LABEL_416:
                unint64_t v128 = v374;
                goto LABEL_417;
              }
              if (v195 != 60) {
                goto LABEL_414;
              }
              unint64_t v196 = v377;
              if (!v371) {
                goto LABEL_309;
              }
              if (llvm::GetElementPtrInst::hasAllConstantIndices(v143))
              {
                uint64_t v197 = *(unsigned int *)(v377 + 232);
                uint64_t v198 = *(unsigned int *)(v377 + 24);
                if (v198)
                {
                  uint64_t v199 = *(void *)(v377 + 16);
                  uint64_t v200 = 16 * v198;
                  do
                  {
                    uint64_t v201 = *(void *)&v363[32 * *(unsigned int *)(*(void *)v199 + 32)
                                          + -32 * (*((_DWORD *)v143 + 5) & 0x7FFFFFF)];
                    uint64_t v202 = (void *)(v201 + 24);
                    if (*(_DWORD *)(v201 + 32) >= 0x41u) {
                      uint64_t v202 = (void *)*v202;
                    }
                    uint64_t v197 = (v197 + *(_DWORD *)(*(void *)v199 + 28) * *(_DWORD *)v202);
                    v199 += 16;
                    v200 -= 16;
                  }
                  while (v200);
                }
                if (*(unsigned char *)v386) {
                  (*(void (**)(AGCLLVMUserObject *, uint64_t *, uint64_t, void))(*(void *)this + 288))(this, v395, v197, __val);
                }
                uint64_t v203 = *(void *)(*((void *)this + 22) + 80);
                if (v203) {
                  uint64_t v204 = v203 - 24;
                }
                else {
                  uint64_t v204 = 0;
                }
                uint64_t v205 = *(void *)(v204 + 40);
                if (v205) {
                  uint64_t v206 = (llvm::Instruction *)(v205 - 24);
                }
                else {
                  uint64_t v206 = 0;
                }
                llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v206);
                if (!v395) {
                  goto LABEL_415;
                }
                AGCLLVMUserObject::replaceArgumentBufferAccesses(AGCLLVMUserObject::IndirectArgumentBufferInfo const*)::$_0::operator()((uint64_t)v400, v197, v377);
                goto LABEL_412;
              }
              uint64_t v213 = &RASTER_ORDER_GROUP_NONE;
              if (*(unsigned char *)(v377 + 276)) {
                uint64_t v213 = (_DWORD *)(v377 + 272);
              }
              if (*v213 == -1)
              {
LABEL_309:
                llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Instruction *)v188);
                uint64_t v216 = (char *)v397;
                uint64_t v217 = &v363[-32 * (*((_DWORD *)v143 + 5) & 0x7FFFFFF)];
                v411.__r_.__value_.__r.__words[0] = (std::string::size_type)&v411.__r_.__value_.__r.__words[2];
                v411.__r_.__value_.__l.__size_ = 0x800000000;
                llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&v411, v217, (char *)v397);
                AGCArgumentBuffer::Buffer::remapToTier1Indices(&v414, v377, (llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 40), &v411);
                llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&v414, v216, (char *)v143);
                uint64_t v218 = *(void *)(v386 + 16);
                uint64_t v219 = *(uint64_t **)(v386 + 112);
                uint64_t v220 = (uint64_t)&v375[*(void *)(*(void *)this - 24) + 32];
                __int16 v393 = 257;
                BOOL v221 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v220, v218, v219, (uint64_t **)v414.__r_.__value_.__l.__data_, LODWORD(v414.__r_.__value_.__r.__words[1]), (uint64_t)&v392);
                uint64_t v222 = &v375[*(void *)(*(void *)this - 24)];
                __int16 v393 = 257;
                uint64_t v224 = AGCLLVMBuilder::tryDeducePointeeType(v221, v223);
                uint64_t v225 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v222 + 4, v224, (uint64_t)v221, 0, (uint64_t)&v392);
                uint64_t v226 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                uint64_t v227 = *v188;
                __int16 v393 = 257;
                llvm::IRBuilderBase::CreateCast((uint64_t)v226, 48, v225, v227, (uint64_t)&v392);
                llvm::Value::replaceAllUsesWith();
                if ((std::string::size_type *)v414.__r_.__value_.__l.__data_ != &v414.__r_.__value_.__r.__words[2]) {
                  free(v414.__r_.__value_.__l.__data_);
                }
                if ((std::string::size_type *)v411.__r_.__value_.__l.__data_ != &v411.__r_.__value_.__r.__words[2]) {
                  free(v411.__r_.__value_.__l.__data_);
                }
LABEL_413:
                if (!v395)
                {
LABEL_415:
                  int v142 = 0;
                  goto LABEL_416;
                }
LABEL_414:
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v415, (uint64_t)v188);
                goto LABEL_415;
              }
              if (v405[1])
              {
                uint8x8_t v214 = (uint8x8_t)vcnt_s8((int8x8_t)v405[1]);
                v214.i16[0] = vaddlv_u8(v214);
                if (v214.u32[0] > 1uLL)
                {
                  unint64_t v215 = v365;
                  if ((void *)v365 >= v405[1]) {
                    unint64_t v215 = v365 % (unint64_t)v405[1];
                  }
                }
                else
                {
                  unint64_t v215 = v365 & ((unint64_t)v405[1] - 1);
                }
                unint64_t v228 = (void *)*((void *)v405[0] + v215);
                if (v228)
                {
                  uint64_t v229 = (void *)*v228;
                  if (*v228)
                  {
                    do
                    {
                      unint64_t v230 = v229[1];
                      if (v230 == v365)
                      {
                        if (v229[2] == v377)
                        {
                          uint64_t v362 = v229;
                          goto LABEL_411;
                        }
                      }
                      else
                      {
                        if (v214.u32[0] > 1uLL)
                        {
                          if ((void *)v230 >= v405[1]) {
                            v230 %= (unint64_t)v405[1];
                          }
                        }
                        else
                        {
                          v230 &= (unint64_t)v405[1] - 1;
                        }
                        if (v230 != v215) {
                          break;
                        }
                      }
                      uint64_t v229 = (void *)*v229;
                    }
                    while (v229);
                  }
                }
              }
              uint64_t v231 = *(void *)(*((void *)this + 22) + 80);
              if (v231) {
                uint64_t v232 = v231 - 24;
              }
              else {
                uint64_t v232 = 0;
              }
              uint64_t v233 = *(void *)(v232 + 40);
              if (v233) {
                BOOL v234 = (llvm::Instruction *)(v233 - 24);
              }
              else {
                BOOL v234 = 0;
              }
              llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v234);
              uint64_t v380 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)(v377 + 264), (llvm::Type *)*(unsigned int *)(v377 + 240));
              uint64_t v384 = (uint64_t *)AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 32), v380);
              unint64_t v235 = (unint64_t)v405[1];
              if (v405[1])
              {
                uint8x8_t v236 = (uint8x8_t)vcnt_s8((int8x8_t)v405[1]);
                v236.i16[0] = vaddlv_u8(v236);
                if (v236.u32[0] > 1uLL)
                {
                  unint64_t v118 = v365;
                  if ((void *)v365 >= v405[1]) {
                    unint64_t v118 = v365 % (unint64_t)v405[1];
                  }
                }
                else
                {
                  unint64_t v118 = v365 & ((unint64_t)v405[1] - 1);
                }
                unint64_t v237 = (void *)*((void *)v405[0] + v118);
                if (v237)
                {
                  BOOL v238 = (void *)*v237;
                  if (*v237)
                  {
                    do
                    {
                      unint64_t v239 = v238[1];
                      if (v239 == v365)
                      {
                        if (v238[2] == v377)
                        {
                          uint64_t v362 = v238;
                          goto LABEL_404;
                        }
                      }
                      else
                      {
                        if (v236.u32[0] > 1uLL)
                        {
                          if ((void *)v239 >= v405[1]) {
                            v239 %= (unint64_t)v405[1];
                          }
                        }
                        else
                        {
                          v239 &= (unint64_t)v405[1] - 1;
                        }
                        if (v239 != v118) {
                          break;
                        }
                      }
                      BOOL v238 = (void *)*v238;
                    }
                    while (v238);
                  }
                }
              }
              *(void *)&long long v240 = v377;
              *((void *)&v240 + 1) = v384;
              long long v361 = v240;
              BOOL v241 = operator new(0x20uLL);
              *BOOL v241 = 0;
              v241[1] = v365;
              *((_OWORD *)v241 + 1) = v361;
              float v242 = (float)((unint64_t)v406[1] + 1);
              if (v235 && (float)(v407 * (float)v235) >= v242)
              {
LABEL_394:
                int v258 = v405[0];
                uint64_t v259 = (void *)*((void *)v405[0] + v118);
                if (v259)
                {
                  *BOOL v241 = *v259;
                }
                else
                {
                  *BOOL v241 = v406[0];
                  v406[0] = v241;
                  v258[v118] = v406;
                  if (!*v241)
                  {
LABEL_403:
                    uint64_t v362 = v241;
                    ++v406[1];
LABEL_404:
                    if (*(_DWORD *)(v377 + 240))
                    {
                      unint64_t v261 = 0;
                      do
                      {
                        unsigned int v262 = *(_DWORD *)(v196 + 232);
                        uint64_t v263 = *(unsigned int *)(v196 + 24);
                        if (v263)
                        {
                          uint64_t v264 = *(_DWORD **)(v196 + 16);
                          uint64_t v265 = &v264[4 * v263];
                          unsigned int v266 = v261;
                          do
                          {
                            unsigned int v267 = v264[2];
                            int v268 = v266 / v267;
                            v266 %= v267;
                            v262 += *(_DWORD *)(*(void *)v264 + 28) * v268;
                            v264 += 4;
                          }
                          while (v264 != v265);
                        }
                        uint64_t v269 = *(void *)(*(void *)this - 24) + 32;
                        v414.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
                        v414.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
                        v413[0] = 257;
                        uint64_t v270 = llvm::IRBuilderBase::CreateGEP((uint64_t)&v375[v269], (uint64_t)v380, v384, (uint64_t **)&v414, 2, (uint64_t)&v411);
                        unint64_t v196 = v377;
                        unint64_t v271 = (llvm::Type **)AGCLLVMUserObject::replaceArgumentBufferAccesses(AGCLLVMUserObject::IndirectArgumentBufferInfo const*)::$_0::operator()((uint64_t)v400, v262, v377);
                        llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v271, v270, 0);
                        ++v261;
                      }
                      while (v261 < *(unsigned int *)(v377 + 240));
                    }
                    unint64_t v118 = v366;
LABEL_411:
                    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), (llvm::Instruction *)v188);
                    unint64_t v272 = (llvm::Type **)v362[3];
                    BOOL v273 = (char *)this + *(void *)(*(void *)this - 24);
                    v414.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
                    v414.__r_.__value_.__l.__size_ = (std::string::size_type)AGCArgumentBuffer::Resource::getResourceId(v377, (llvm::Type **)((char *)this+ *(void *)(*(void *)this - 24)+ 40), (uint64_t)v143);
                    v413[0] = 257;
                    uint64_t v275 = AGCLLVMBuilder::tryDeducePointeeType(v272, v274);
                    uint64_t v276 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v273 + 40), (uint64_t)v275, (uint64_t *)v272, (uint64_t **)&v414, 2, (uint64_t)&v411);
                    unint64_t v277 = &v375[*(void *)(*(void *)this - 24)];
                    v413[0] = 257;
                    int v279 = AGCLLVMBuilder::tryDeducePointeeType(v276, v278);
                    llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v277 + 4, v279, (uint64_t)v276, 0, (uint64_t)&v411);
LABEL_412:
                    llvm::Value::replaceAllUsesWith();
                    goto LABEL_413;
                  }
                  unint64_t v260 = *(void *)(*v241 + 8);
                  if ((v235 & (v235 - 1)) != 0)
                  {
                    if (v260 >= v235) {
                      v260 %= v235;
                    }
                  }
                  else
                  {
                    v260 &= v235 - 1;
                  }
                  uint64_t v259 = (char *)v405[0] + 8 * v260;
                }
                *uint64_t v259 = v241;
                goto LABEL_403;
              }
              BOOL v243 = (v235 & (v235 - 1)) != 0;
              if (v235 < 3) {
                BOOL v243 = 1;
              }
              unint64_t v244 = v243 | (2 * v235);
              unint64_t v245 = vcvtps_u32_f32(v242 / v407);
              if (v244 <= v245) {
                int8x8_t v246 = (int8x8_t)v245;
              }
              else {
                int8x8_t v246 = (int8x8_t)v244;
              }
              if (*(void *)&v246 == 1)
              {
                int8x8_t v246 = (int8x8_t)2;
              }
              else if ((*(void *)&v246 & (*(void *)&v246 - 1)) != 0)
              {
                int8x8_t v246 = (int8x8_t)std::__next_prime(*(void *)&v246);
                unint64_t v235 = (unint64_t)v405[1];
              }
              if (*(void *)&v246 > v235) {
                goto LABEL_360;
              }
              if (*(void *)&v246 < v235)
              {
                unint64_t v253 = vcvtps_u32_f32((float)(unint64_t)v406[1] / v407);
                if (v235 < 3
                  || (uint8x8_t v254 = (uint8x8_t)vcnt_s8((int8x8_t)v235), v254.i16[0] = vaddlv_u8(v254), v254.u32[0] > 1uLL))
                {
                  unint64_t v253 = std::__next_prime(v253);
                }
                else
                {
                  uint64_t v255 = 1 << -(char)__clz(v253 - 1);
                  if (v253 >= 2) {
                    unint64_t v253 = v255;
                  }
                }
                if (*(void *)&v246 <= v253) {
                  int8x8_t v246 = (int8x8_t)v253;
                }
                if (*(void *)&v246 >= v235)
                {
                  unint64_t v235 = (unint64_t)v405[1];
                }
                else
                {
                  if (v246)
                  {
LABEL_360:
                    if (*(void *)&v246 >> 61) {
                      goto LABEL_663;
                    }
                    uint64_t v247 = operator new(8 * *(void *)&v246);
                    uint64_t v248 = v405[0];
                    v405[0] = v247;
                    if (v248) {
                      operator delete(v248);
                    }
                    uint64_t v249 = 0;
                    v405[1] = (void *)v246;
                    do
                      *((void *)v405[0] + v249++) = 0;
                    while (*(void *)&v246 != v249);
                    uint64_t v250 = (void **)v406[0];
                    if (v406[0])
                    {
                      unint64_t v251 = *((void *)v406[0] + 1);
                      uint8x8_t v252 = (uint8x8_t)vcnt_s8(v246);
                      v252.i16[0] = vaddlv_u8(v252);
                      if (v252.u32[0] > 1uLL)
                      {
                        if (v251 >= *(void *)&v246) {
                          v251 %= *(void *)&v246;
                        }
                      }
                      else
                      {
                        v251 &= *(void *)&v246 - 1;
                      }
                      *((void *)v405[0] + v251) = v406;
                      for (j = *v250; j; unint64_t v251 = v257)
                      {
                        unint64_t v257 = j[1];
                        if (v252.u32[0] > 1uLL)
                        {
                          if (v257 >= *(void *)&v246) {
                            v257 %= *(void *)&v246;
                          }
                        }
                        else
                        {
                          v257 &= *(void *)&v246 - 1;
                        }
                        if (v257 != v251)
                        {
                          if (!*((void *)v405[0] + v257))
                          {
                            *((void *)v405[0] + v257) = v250;
                            goto LABEL_385;
                          }
                          *uint64_t v250 = (void *)*j;
                          void *j = **((void **)v405[0] + v257);
                          **((void **)v405[0] + v257) = j;
                          unsigned int j = v250;
                        }
                        unint64_t v257 = v251;
LABEL_385:
                        uint64_t v250 = (void **)j;
                        unsigned int j = (void *)*j;
                      }
                    }
                    unint64_t v235 = (unint64_t)v246;
                    goto LABEL_389;
                  }
                  int v280 = v405[0];
                  v405[0] = 0;
                  if (v280) {
                    operator delete(v280);
                  }
                  unint64_t v235 = 0;
                  v405[1] = 0;
                }
              }
LABEL_389:
              if ((v235 & (v235 - 1)) != 0)
              {
                if (v365 >= v235) {
                  unint64_t v118 = v365 % v235;
                }
                else {
                  unint64_t v118 = v365;
                }
              }
              else
              {
                unint64_t v118 = (v235 - 1) & v365;
              }
              goto LABEL_394;
            }
LABEL_453:
            v411.__r_.__value_.__r.__words[0] = (std::string::size_type)v413;
            v411.__r_.__value_.__l.__size_ = (std::string::size_type)v413;
            v411.__r_.__value_.__r.__words[2] = 8;
            int v412 = 0;
            uint64_t v129 = v388;
            if (LODWORD(v415[1]))
            {
              uint64_t v287 = (llvm::Use *)((char *)v415[0] + 8 * LODWORD(v415[1]));
              uint64_t v288 = v287;
              do
              {
                BOOL v290 = (const void *)*((void *)v288 - 1);
                uint64_t v288 = (llvm::Use *)((char *)v288 - 8);
                uint64_t v289 = v290;
                if (v290)
                {
                  uint64_t v291 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)&v411, v289);
                  int v292 = v411.__r_.__value_.__l.__size_ == v411.__r_.__value_.__r.__words[0]
                       ? (std::string::size_type *)((char *)&v411.__r_.__value_.__r.__words[2] + 4)
                       : &v411.__r_.__value_.__r.__words[2];
                  if ((const void **)(v411.__r_.__value_.__l.__size_ + 8 * *(unsigned int *)v292) == v291)
                  {
                    llvm::Instruction::eraseFromParent(*((llvm::Instruction **)v287 - 1));
                    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v414, (llvm::SmallPtrSetImplBase *)&v411, *((void **)v287 - 1));
                  }
                }
                uint64_t v287 = v288;
              }
              while (v288 != v415[0]);
              unint64_t v128 = v374;
              if (v411.__r_.__value_.__l.__size_ != v411.__r_.__value_.__r.__words[0]) {
                free((void *)v411.__r_.__value_.__l.__size_);
              }
            }
          }
          else
          {
            uint64_t v129 = v388;
          }
          int v142 = 0;
          goto LABEL_466;
        }
LABEL_434:
        int v142 = 6;
        unint64_t v128 = v374;
        goto LABEL_435;
      }
      if (v145 == 4) {
        goto LABEL_245;
      }
      if (v145 == 7)
      {
LABEL_240:
        if (v389)
        {
          uint64_t v179 = (char *)v143 - 32 * (*((_DWORD *)v143 + 5) & 0x7FFFFFF) + 32;
          *(void *)std::string __p = &__p[16];
          *(void *)&__p[8] = 0x800000000;
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)__p, v179, v146);
          AGCArgumentBuffer::Constant::remapToTier1Indices(&v411, v377, __p);
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&v411, v146, (char *)v143);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v143);
          uint64_t v180 = *(void *)(v386 + 16);
          int v181 = *(uint64_t **)(v386 + 112);
          uint64_t v182 = (uint64_t)&v375[*(void *)(*(void *)this - 24) + 32];
          __int16 v423 = 257;
          llvm::IRBuilderBase::CreateGEP(v182, v180, v181, (uint64_t **)v411.__r_.__value_.__l.__data_, LODWORD(v411.__r_.__value_.__r.__words[1]), (uint64_t)&v422);
          llvm::Value::replaceAllUsesWith();
          llvm::Value::takeName();
          unint64_t v128 = v374;
          if ((std::string::size_type *)v411.__r_.__value_.__l.__data_ != &v411.__r_.__value_.__r.__words[2]) {
            free(v411.__r_.__value_.__l.__data_);
          }
          uint64_t v129 = v388;
          if (*(unsigned char **)__p != &__p[16]) {
            free(*(void **)__p);
          }
          goto LABEL_605;
        }
        goto LABEL_434;
      }
      uint64_t v129 = v388;
      if (!v389)
      {
        int v142 = 6;
        goto LABEL_603;
      }
      std::to_string(&v422, __val);
      uint64_t v281 = std::string::insert(&v422, 0, "buffer(");
      std::string::size_type v282 = v281->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v411.__r_.__value_.__l.__data_ = *(_OWORD *)&v281->__r_.__value_.__l.__data_;
      v411.__r_.__value_.__r.__words[2] = v282;
      v281->__r_.__value_.__l.__size_ = 0;
      v281->__r_.__value_.__r.__words[2] = 0;
      v281->__r_.__value_.__r.__words[0] = 0;
      unint64_t v283 = std::string::append(&v411, "): Argument buffer accessed with non-zero array index");
      std::string::size_type v284 = v283->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v283->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = v284;
      v283->__r_.__value_.__l.__size_ = 0;
      v283->__r_.__value_.__r.__words[2] = 0;
      v283->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0) {
        unint64_t v285 = __p;
      }
      else {
        unint64_t v285 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v286 = __p[23];
      }
      else {
        std::string::size_type v286 = *(void *)&__p[8];
      }
      std::string::append((std::string *)&v375[*(void *)(*(void *)this - 24)], v285, v286);
      unint64_t v128 = v374;
      if ((__p[23] & 0x80000000) != 0) {
        goto LABEL_199;
      }
    }
    else
    {
      if (!v389)
      {
LABEL_218:
        int v142 = 6;
LABEL_435:
        uint64_t v129 = v388;
        goto LABEL_436;
      }
      std::to_string(&v422, __val);
      int v155 = std::string::insert(&v422, 0, "buffer(");
      std::string::size_type v156 = v155->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v411.__r_.__value_.__l.__data_ = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
      v411.__r_.__value_.__r.__words[2] = v156;
      v155->__r_.__value_.__l.__size_ = 0;
      v155->__r_.__value_.__r.__words[2] = 0;
      v155->__r_.__value_.__r.__words[0] = 0;
      uint64_t v157 = std::string::append(&v411, "): Unable to map argument buffer access to resource");
      std::string::size_type v158 = v157->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = v158;
      v157->__r_.__value_.__l.__size_ = 0;
      v157->__r_.__value_.__r.__words[2] = 0;
      v157->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0) {
        uint64_t v159 = __p;
      }
      else {
        uint64_t v159 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v160 = __p[23];
      }
      else {
        std::string::size_type v160 = *(void *)&__p[8];
      }
      std::string::append((std::string *)&v375[*(void *)(*(void *)this - 24)], v159, v160);
      uint64_t v129 = v388;
      if ((__p[23] & 0x80000000) != 0) {
LABEL_199:
      }
        operator delete(*(void **)__p);
    }
    if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v411.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v422.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_204;
    }
    goto LABEL_203;
  }
  uint64_t v120 = 1;
LABEL_638:
  (*(void (**)(unsigned char *__return_ptr))(**(void **)((char *)this + *(void *)(*(void *)this - 24) + 400)
                                              + 824))(__p);
  *(_OWORD *)uint64_t v390 = *(_OWORD *)&__p[8];
  int64_t v391 = v419;
  if (__p[0])
  {
    std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), "Total number of indirect argument buffer resources exceeded for");
    if (v391 >= 0) {
      uint64_t v352 = v390;
    }
    else {
      uint64_t v352 = (void **)v390[0];
    }
    if (v391 >= 0) {
      std::string::size_type v353 = HIBYTE(v391);
    }
    else {
      std::string::size_type v353 = (std::string::size_type)v390[1];
    }
    std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (const std::string::value_type *)v352, v353);
LABEL_658:
    uint64_t v120 = 0;
  }
  if (SHIBYTE(v391) < 0) {
    operator delete(v390[0]);
  }
  return v120;
}

void AGCLLVMGen5TargetLowerer::exceededResourceLimits(AGCLLVMGen5TargetLowerer *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X7>, char *a6@<X8>)
{
  std::string::basic_string[abi:nn180100]<0>(&v62, "");
  unsigned int v12 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 103) + 24))(*((void *)this + 103), a5);
  unsigned int v13 = (*(uint64_t (**)(void))(**((void **)this + 103) + 16))(*((void *)this + 103));
  unsigned int v14 = v13;
  if (v12 >= a2)
  {
    if (a4 <= 0x10 && v13 >= a3)
    {
      char v28 = 0;
      goto LABEL_80;
    }
  }
  else
  {
    std::to_string(&v56, a2);
    __int16 v15 = std::string::insert(&v56, 0, " buffers (");
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    int v17 = std::string::append(&v57, "/");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    unsigned int v19 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 103) + 24))(*((void *)this + 103), a5);
    std::to_string(&__p, v19);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v22 = std::string::append(&v58, (const std::string::value_type *)p_p, size);
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t v24 = std::string::append(&v59, ")");
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
    long long v60 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    uint64_t v61 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0) {
      size_t v26 = (const std::string::value_type *)&v60;
    }
    else {
      size_t v26 = (const std::string::value_type *)v60;
    }
    if (v61 >= 0) {
      std::string::size_type v27 = HIBYTE(v61);
    }
    else {
      std::string::size_type v27 = *((void *)&v60 + 1);
    }
    std::string::append(&v62, v26, v27);
    if (SHIBYTE(v61) < 0) {
      operator delete((void *)v60);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
  }
  if (v14 < a3)
  {
    std::to_string(&v56, a3);
    __int16 v29 = std::string::insert(&v56, 0, " textures (");
    std::string::size_type v30 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    int v31 = std::string::append(&v57, "/");
    std::string::size_type v32 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    unsigned int v33 = (*(uint64_t (**)(void))(**((void **)this + 103) + 16))(*((void *)this + 103));
    std::to_string(&__p, v33);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v34 = &__p;
    }
    else {
      uint64_t v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v36 = std::string::append(&v58, (const std::string::value_type *)v34, v35);
    std::string::size_type v37 = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    uint64_t v38 = std::string::append(&v59, ")");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[2];
    long long v60 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    uint64_t v61 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0) {
      uint64_t v40 = (const std::string::value_type *)&v60;
    }
    else {
      uint64_t v40 = (const std::string::value_type *)v60;
    }
    if (v61 >= 0) {
      std::string::size_type v41 = HIBYTE(v61);
    }
    else {
      std::string::size_type v41 = *((void *)&v60 + 1);
    }
    std::string::append(&v62, v40, v41);
    if (SHIBYTE(v61) < 0) {
      operator delete((void *)v60);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
  }
  if (a4 >= 0x11)
  {
    std::to_string(&v56, a4);
    uint64_t v42 = std::string::insert(&v56, 0, " samplers (");
    std::string::size_type v43 = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v44 = std::string::append(&v57, "/");
    std::string::size_type v45 = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v46 = &__p;
    }
    else {
      std::string::size_type v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v47 = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v48 = std::string::append(&v58, (const std::string::value_type *)v46, v47);
    std::string::size_type v49 = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    uint64_t v50 = std::string::append(&v59, ")");
    std::string::size_type v51 = v50->__r_.__value_.__r.__words[2];
    long long v60 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    uint64_t v61 = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0) {
      std::string::size_type v52 = (const std::string::value_type *)&v60;
    }
    else {
      std::string::size_type v52 = (const std::string::value_type *)v60;
    }
    if (v61 >= 0) {
      std::string::size_type v53 = HIBYTE(v61);
    }
    else {
      std::string::size_type v53 = *((void *)&v60 + 1);
    }
    std::string::append(&v62, v52, v53);
    if (SHIBYTE(v61) < 0) {
      operator delete((void *)v60);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
  }
  char v28 = 1;
LABEL_80:
  *a6 = v28;
  BOOL v54 = (std::string *)(a6 + 8);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v54, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *BOOL v54 = v62;
  }
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderMaxAPIBindPointsTexture()
{
  return 128;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderMaxAPIBindPointsBuffer(uint64_t a1, int a2)
{
  if (a2) {
    return 35;
  }
  else {
    return 31;
  }
}

uint64_t AGCLLVMUserObject::replaceTexturesAndSamplers(AGCLLVMUserObject *this)
{
  uint64_t v337 = *MEMORY[0x1E4F143B8];
  AGCLLVMUserObject::getSampleFunctionMap(this);
  AGCLLVMUserObject::getDimensionFunctionMap(v2);
  AGCLLVMUserObject::getTextureFenceFunctionSet(v3);
  AGCLLVMUserObject::getIsNullTextureFunctionSet(v4);
  AGCLLVMUserObject::getUniqueIDFunctionSet(v5);
  AGCLLVMUserObject::getTextureAtomicFunctionSet(v6);
  long long v323 = v325;
  uint64_t v324 = 0x800000000;
  ConstantSamplers = (AGCLLVMUserObject *)AGCLLVMUserObject::extractConstantSamplers(this, (uint64_t)&v323);
  uint64_t v320 = v322;
  unsigned int v321 = (llvm::Type *)0x800000000;
  v318[0] = v319;
  v318[1] = (void *)0x800000000;
  uint64_t v8 = (char *)this + 368;
  unint64_t v297 = (char *)this + 368;
  if (!v324) {
    goto LABEL_74;
  }
  uint64_t v9 = (llvm::Value **)v323;
  uint64_t v10 = (llvm::Value **)((char *)v323 + 8 * v324);
  do
  {
    uint64_t v11 = *v9;
    v334.__r_.__value_.__r.__words[0] = 0;
    v333.__r_.__value_.__r.__words[0] = 0;
    int isConstantSampler = (char *)AGCLLVMUserObject::isConstantSampler(this, v11, (unint64_t *)&v334, (unint64_t *)&v333);
    uint64_t v13 = v334.__r_.__value_.__r.__words[0];
    uint64_t v14 = v333.__r_.__value_.__r.__words[0];
    __int16 v15 = (char *)*((void *)this + 116);
    unint64_t v16 = *((void *)this + 117);
    if ((unint64_t)v15 >= v16)
    {
      int isConstantSampler = (char *)*((void *)this + 115);
      uint64_t v18 = (v15 - isConstantSampler) >> 4;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60) {
        abort();
      }
      uint64_t v20 = v16 - (void)isConstantSampler;
      if (v20 >> 3 > v19) {
        unint64_t v19 = v20 >> 3;
      }
      BOOL v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
      if (!v21) {
        unint64_t v22 = v19;
      }
      if (v22)
      {
        unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(v22);
        __int16 v15 = (char *)*((void *)this + 116);
        int isConstantSampler = (char *)*((void *)this + 115);
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v24 = (uint64_t *)(v22 + 16 * v18);
      *uint64_t v24 = v13;
      v24[1] = v14;
      std::string::size_type v25 = v24;
      if (v15 != isConstantSampler)
      {
        do
        {
          *((_OWORD *)v25 - 1) = *((_OWORD *)v15 - 1);
          v25 -= 2;
          v15 -= 16;
        }
        while (v15 != isConstantSampler);
        int isConstantSampler = (char *)*((void *)this + 115);
      }
      *((void *)this + 115) = v25;
      int v17 = v24 + 2;
      *((void *)this + 116) = v24 + 2;
      *((void *)this + 117) = v22 + 16 * v23;
      if (isConstantSampler) {
        operator delete(isConstantSampler);
      }
    }
    else
    {
      *(void *)__int16 v15 = v334.__r_.__value_.__r.__words[0];
      *((void *)v15 + 1) = v14;
      int v17 = v15 + 16;
    }
    *((void *)this + 116) = v17;
    uint64_t v26 = *(void *)this;
    if (*(_DWORD *)(*(void *)&v8[*(void *)(*(void *)this - 24) + 32] + 1780))
    {
LABEL_48:
      int v38 = (*(uint64_t (**)(AGCLLVMUserObject *))(v26 + 400))(this);
      uint64_t v39 = *(void *)(*(void *)this - 24);
      if (!v38)
      {
        uint64_t v50 = (std::string *)((char *)this + v39 + 8);
        std::string::size_type v51 = "Indirect samplers are not supported";
        goto LABEL_203;
      }
      if (*(_DWORD *)(*(void *)&v8[v39 + 32] + 1780))
      {
        AGCLLVMUserObject::getBindlessConstantSampler((uint64_t)this, v13, v14, *(void *)v11);
        ConstantSamplers = (AGCLLVMUserObject *)llvm::Value::replaceAllUsesWith();
      }
      else
      {
        if (v321 >= HIDWORD(v321)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v320 + v321) = ((*((void *)this + 113) - *((void *)this + 112)) >> 4) | 0x100000000;
        LODWORD(v321) = v321 + 1;
        uint64_t v40 = llvm::ConstantInt::get();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v318, v40);
        uint64_t ConstantSamplerGlobal = AGCLLVMUserObject::getOrCreateConstantSamplerGlobal((uint64_t)this, v13, v14);
        if (*((unsigned char *)this + 15) || *((unsigned char *)this + 3656))
        {
          uint64_t v42 = AGCLLVMUserObject::buildSamplerArgumentPointer((uint64_t *)this, ConstantSamplerGlobal, 0);
          std::string::size_type v43 = (char *)this + *(void *)(*(void *)this - 24) + 40;
          uint64_t v44 = *(void *)v11;
          LOWORD(v328) = 257;
          uint64_t v45 = 50;
        }
        else
        {
          std::string::size_type v46 = (char *)this + *(void *)(*(void *)this - 24) + 40;
          uint64_t v42 = llvm::ConstantInt::get();
          uint64_t v44 = *(void *)v11;
          LOWORD(v328) = 257;
          std::string::size_type v43 = v46;
          uint64_t v45 = 48;
        }
        llvm::IRBuilderBase::CreateCast((uint64_t)v43, v45, v42, v44, (uint64_t)&__p);
        ConstantSamplers = (AGCLLVMUserObject *)llvm::Value::replaceAllUsesWith();
        uint64_t v8 = (char *)this + 368;
      }
      goto LABEL_56;
    }
    AGCLLVMUserObject::getSampleFunctionMap((AGCLLVMUserObject *)isConstantSampler);
    AGCLLVMUserObject::getUniqueIDFunctionSet(v27);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    __p.__r_.__value_.__l.__size_ = 0x2000000000;
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__p, (uint64_t)v11);
    unsigned int v28 = __p.__r_.__value_.__r.__words[1];
    if (!LODWORD(__p.__r_.__value_.__r.__words[1]))
    {
LABEL_42:
      int v37 = 0;
      goto LABEL_44;
    }
    while (1)
    {
      uint64_t v29 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v28-- - 8);
      LODWORD(__p.__r_.__value_.__r.__words[1]) = v28;
      uint64_t v30 = *(void *)(v29 + 8);
      if (v30) {
        break;
      }
LABEL_41:
      uint64_t v8 = (char *)this + 368;
      if (!v28) {
        goto LABEL_42;
      }
    }
    while (1)
    {
      uint64_t v31 = *(void *)(v30 + 24);
      unsigned int v32 = *(unsigned __int8 *)(v31 + 16);
      if (v32 <= 0x1B)
      {
        if (v32 != 5 || *(_WORD *)(v31 + 18) != 49) {
          goto LABEL_43;
        }
        goto LABEL_27;
      }
      if (v32 == 84) {
        break;
      }
      if (v32 != 77) {
        goto LABEL_43;
      }
LABEL_27:
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__p, v31);
LABEL_28:
      uint64_t v30 = *(void *)(v30 + 8);
      if (!v30)
      {
        unsigned int v28 = __p.__r_.__value_.__r.__words[1];
        goto LABEL_41;
      }
    }
    uint64_t v33 = *(void *)(v31 - 32);
    if (v33 && !*(unsigned char *)(v33 + 16) && *(void *)(v33 + 24) == *(void *)(v31 + 72))
    {
      llvm::Value::getName((llvm::Value *)v33);
      int Key = llvm::StringMapImpl::FindKey();
      if (Key != -1 && Key != (unint64_t)dword_1EBD0EB78) {
        goto LABEL_28;
      }
      int v35 = llvm::StringMapImpl::FindKey();
      BOOL v36 = v35 == (unint64_t)dword_1EBD0EA80 || v35 == -1;
      if (!v36) {
        goto LABEL_28;
      }
    }
LABEL_43:
    int v37 = 1;
    uint64_t v8 = (char *)this + 368;
LABEL_44:
    ConstantSamplers = (AGCLLVMUserObject *)__p.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2]) {
      free(__p.__r_.__value_.__l.__data_);
    }
    if (v37)
    {
      uint64_t v26 = *(void *)this;
      goto LABEL_48;
    }
LABEL_56:
    ++v9;
  }
  while (v9 != v10);
  if (v321 && !*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1780))
  {
    uint64_t v47 = llvm::ArrayType::get(*((llvm::ArrayType **)this + 265), (llvm::Type *)v321);
    uint64_t v48 = llvm::User::operator new((llvm::User *)0x58);
    if (**((unsigned char **)this + 264))
    {
      __p.__r_.__value_.__r.__words[0] = *((void *)this + 264);
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)"_indirect";
      __int16 v49 = 771;
    }
    else
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"_indirect";
      __int16 v49 = 259;
    }
    LOWORD(v328) = v49;
    llvm::GlobalVariable::GlobalVariable();
    if (*((void *)this + 266)) {
      strlen(*((const char **)this + 266));
    }
    llvm::GlobalObject::setSection();
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
    __p.__r_.__value_.__l.__size_ = 0x2000000000;
    uint64_t v52 = llvm::ValueAsMetadata::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__p, v52);
    llvm::ConstantInt::get();
    uint64_t v53 = llvm::ValueAsMetadata::get();
    if (v321)
    {
      uint64_t v54 = v53;
      uint64_t v55 = (char *)v320;
      uint64_t v56 = 8 * v321;
      do
      {
        *(_OWORD *)&v334.__r_.__value_.__l.__data_ = (unint64_t)v54;
        v55 += 8;
        llvm::ConstantInt::get();
        v334.__r_.__value_.__l.__size_ = llvm::ValueAsMetadata::get();
        uint64_t Impl = llvm::MDTuple::getImpl();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__p, Impl);
        v56 -= 8;
      }
      while (v56);
    }
    uint64_t v58 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 376);
    uint64_t v59 = llvm::MDTuple::getImpl();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v58, v59);
    llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2088), v48);
    *((void *)this + 267) = v47;
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2]) {
      free(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v60 = llvm::ArrayType::get(*(llvm::ArrayType **)((char *)this + *(void *)(*(void *)this - 24) + 240), (llvm::Type *)v321);
    uint64_t v61 = llvm::User::operator new((llvm::User *)0x58);
    llvm::ArrayType::get(*(llvm::ArrayType **)((char *)this + *(void *)(*(void *)this - 24) + 240), (llvm::Type *)v321);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.constant_sampler_unique_id";
    LOWORD(v328) = 259;
    llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v61 + 80) |= 1u;
    llvm::ConstantArray::get();
    llvm::GlobalVariable::setInitializer();
    ConstantSamplers = (AGCLLVMUserObject *)llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2216), v61);
    *((void *)this + 283) = v60;
  }
LABEL_74:
  AGCLLVMUserObject::getGetNullTextureFunctionSet(ConstantSamplers);
  uint64_t v62 = *(void *)this;
  uint64_t v63 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
  uint64_t v64 = (llvm::Function *)(v63 + 24);
  __int16 v65 = *(llvm::Function **)(v63 + 32);
  if (v65 == (llvm::Function *)(v63 + 24)) {
    goto LABEL_119;
  }
  unint64_t v301 = (llvm::Function *)(v63 + 24);
  int v66 = &AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map;
  while (2)
  {
    uint64_t v67 = (llvm::Function *)((char *)v65 - 56);
    BOOL v36 = v65 == 0;
    __int16 v65 = (llvm::Function *)*((void *)v65 + 1);
    if (v36) {
      unsigned int v68 = 0;
    }
    else {
      unsigned int v68 = v67;
    }
    llvm::Value::getName(v68);
    uint64_t v69 = (AGCLLVMUserObject *)llvm::StringMapImpl::FindKey();
    if (v69 != -1 && (int)v69 != (unint64_t)*((unsigned int *)v66 + 704))
    {
      AGCLLVMUserObject::getSampleFunctionMap(v69);
      AGCLLVMUserObject::getDimensionFunctionMap(v70);
      AGCLLVMUserObject::getIsNullTextureFunctionSet(v71);
      AGCLLVMUserObject::getUniqueIDFunctionSet(v72);
      if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1755)
        || *((unsigned char *)this + 2344))
      {
        llvm::ConstantInt::get();
        llvm::ConstantExpr::getIntToPtr();
      }
      else
      {
        llvm::Constant::getNullValue(**(llvm::Constant ***)(*((void *)v68 + 3) + 16), v73);
      }
      uint64_t v306 = v68;
      uint64_t v74 = *((void *)v68 + 1);
      if (!v74) {
        goto LABEL_115;
      }
      while (1)
      {
        uint64_t v75 = *(llvm::Instruction **)(v74 + 24);
        uint64_t v74 = *(void *)(v74 + 8);
        uint64_t v76 = *((void *)v75 + 1);
        if (!v76) {
          goto LABEL_114;
        }
        do
        {
          uint64_t v77 = *(void *)(v76 + 24);
          uint64_t v76 = *(void *)(v76 + 8);
          if (v77)
          {
            if (*(unsigned char *)(v77 + 16) == 84)
            {
              uint64_t v78 = *(void *)(v77 - 32);
              if (v78)
              {
                if (!*(unsigned char *)(v78 + 16) && *(void *)(v78 + 24) == *(void *)(v77 + 72))
                {
                  llvm::Value::getName(*(llvm::Value **)(v77 - 32));
                  int v79 = llvm::StringMapImpl::FindKey();
                  uint64_t v80 = v79;
                  if (v79 == -1) {
                    uint64_t v80 = dword_1EBD0EB78;
                  }
                  uint64_t v81 = AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map + 8 * v80;
                  llvm::Value::getName((llvm::Value *)v78);
                  int v82 = llvm::StringMapImpl::FindKey();
                  BOOL v84 = v82 != -1 && v82 != (unint64_t)dword_1EBD0EAA0;
                  if (v81 != AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map
                            + 8 * dword_1EBD0EB78
                    || v84)
                  {
                    llvm::UndefValue::get();
LABEL_110:
                    llvm::Value::replaceAllUsesWith();
                    llvm::Instruction::eraseFromParent((llvm::Instruction *)v77);
                    continue;
                  }
                  llvm::Value::getName((llvm::Value *)v78);
                  int v86 = llvm::StringMapImpl::FindKey();
                  if (v86 != -1 && v86 != (unint64_t)dword_1EBD0EA80)
                  {
                    llvm::Constant::getNullValue(*(llvm::Constant **)v77, v87);
                    goto LABEL_110;
                  }
                  llvm::Value::getName((llvm::Value *)v78);
                  int v88 = llvm::StringMapImpl::FindKey();
                  if (v88 != -1 && v88 != (unint64_t)dword_1EBD0EAE0)
                  {
                    llvm::ConstantInt::get();
                    goto LABEL_110;
                  }
                }
              }
            }
          }
        }
        while (v76);
        if (*((void *)v75 + 1)) {
          llvm::Value::replaceAllUsesWith();
        }
LABEL_114:
        llvm::Instruction::eraseFromParent(v75);
        if (!v74)
        {
LABEL_115:
          llvm::Function::eraseFromParent(v306);
          uint64_t v64 = v301;
          int v66 = &AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map;
          break;
        }
      }
    }
    if (v65 != v64) {
      continue;
    }
    break;
  }
  uint64_t v62 = *(void *)this;
LABEL_119:
  uint64_t v89 = *(void *)((char *)this + *(void *)(v62 - 24) + 368);
  uint64_t v90 = *(llvm::Function **)(v89 + 32);
  unint64_t v307 = (llvm::Function *)(v89 + 24);
  if (v90 == (llvm::Function *)(v89 + 24))
  {
    char v294 = 0;
LABEL_213:
    uint64_t v165 = (char *)this + *(void *)(v62 - 24);
    uint64_t v166 = *((void *)v165 + 58);
    if (!*(unsigned char *)(v166 + 378))
    {
      unsigned __int8 v167 = *(llvm::legacy::PassManager **)(v166 + 368);
      if (!v167) {
        AGCLLVMCtx::createPassManager(*((AGCLLVMCtx **)v165 + 58));
      }
      llvm::legacy::PassManager::run(v167, *((llvm::Module **)v165 + 46));
    }
    unint64_t v168 = (char *)*((void *)this + 103);
    unint64_t v169 = (char *)this + 832;
    if (v168 != (char *)this + 832)
    {
      do
      {
        uint64_t v170 = *((void *)v168 + 6);
        if (v170)
        {
          if (*(void *)(v170 + 8))
          {
            uint64_t Name = (void *)llvm::Value::getName(*((llvm::Value **)v168 + 6));
            if (Name) {
              std::string::basic_string[abi:nn180100](&__p, Name, v172);
            }
            else {
              memset(&__p, 0, sizeof(__p));
            }
            printMessage((char **)&AGCPrinter, "%s: image or sample GV %s still has references: \n", v173, v174, v175, v176, v177, v178, (char)"void AGCLLVMUserObject::cleanupSamplerGlobalVariables()");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            uint64_t v179 = *(void *)(v170 + 8);
            if (v179)
            {
              uint64_t v180 = MEMORY[0x1E4FBA010] + 16;
              do
              {
                memset(&v334, 0, sizeof(v334));
                LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
                char v329 = 0;
                uint64_t v330 = 0;
                int v331 = 1;
                uint64_t v327 = 0;
                uint64_t v328 = 0;
                __p.__r_.__value_.__r.__words[2] = 0;
                __p.__r_.__value_.__r.__words[0] = v180;
                std::string::size_type v332 = &v334;
                llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&__p);
                llvm::Value::print(*(llvm::Value **)(v179 + 24), (llvm::raw_ostream *)&__p);
                LOBYTE(v187) = (_BYTE)v332;
                if (SHIBYTE(v332->__r_.__value_.__r.__words[2]) < 0) {
                  std::string::size_type v187 = v332->__r_.__value_.__r.__words[0];
                }
                printMessage((char **)&AGCPrinter, "\t%s\n", v181, v182, v183, v184, v185, v186, v187);
                llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
                if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v334.__r_.__value_.__l.__data_);
                }
                uint64_t v179 = *(void *)(v179 + 8);
              }
              while (v179);
            }
          }
          else
          {
            llvm::GlobalVariable::eraseFromParent(*((llvm::GlobalVariable **)v168 + 6));
          }
        }
        uint64_t v188 = (char *)*((void *)v168 + 1);
        if (v188)
        {
          do
          {
            BOOL v189 = v188;
            uint64_t v188 = *(char **)v188;
          }
          while (v188);
        }
        else
        {
          do
          {
            BOOL v189 = (char *)*((void *)v168 + 2);
            BOOL v36 = *(void *)v189 == (void)v168;
            unint64_t v168 = v189;
          }
          while (!v36);
        }
        unint64_t v168 = v189;
      }
      while (v189 != v169);
    }
    std::__tree<llvm::WeakVH>::destroy(*((void **)this + 104));
    *((void *)this + 103) = v169;
    *((_OWORD *)this + 52) = 0u;
    int v190 = *((_DWORD *)this + 192);
    if (v190 || *((_DWORD *)this + 193))
    {
      uint64_t v191 = (llvm **)((char *)this + 760);
      uint64_t v192 = *((unsigned int *)this + 194);
      if (v192 <= 4 * v190 || v192 < 0x41)
      {
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 2uLL;
        uint64_t v327 = -4096;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25C4628;
        uint64_t v328 = 0;
        *(_OWORD *)&v334.__r_.__value_.__r.__words[1] = 2uLL;
        uint64_t v335 = -8192;
        v334.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25C4628;
        uint64_t v336 = 0;
        if (v192)
        {
          uint64_t v197 = *v191;
          uint64_t v198 = 48 * v192;
          uint64_t v199 = (void *)((char *)v197 + 32);
          do
          {
            llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v199 - 3), &__p.__r_.__value_.__l.__size_);
            *uint64_t v199 = v328;
            v199 += 6;
            v198 -= 48;
          }
          while (v198);
          uint64_t v200 = v335;
          *((void *)this + 96) = 0;
          if (v200 != -8192 && v200 != -4096 && v200 != 0) {
            llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v334.__r_.__value_.__r.__words[1]);
          }
        }
        else
        {
          *((void *)this + 96) = 0;
        }
        if (v327 != -8192 && v327 != -4096 && v327) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&__p.__r_.__value_.__r.__words[1]);
        }
      }
      else
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::destroyAll((uint64_t)this + 760);
        int v193 = 1 << (33 - __clz(v190 - 1));
        if (v193 <= 64) {
          int v193 = 64;
        }
        if (v190) {
          int v194 = v193;
        }
        else {
          int v194 = 0;
        }
        if (v194 != *((_DWORD *)this + 194))
        {
          llvm::deallocate_buffer(*v191, (void *)(48 * v192));
          if (!v194)
          {
            *uint64_t v191 = 0;
            *((void *)this + 96) = 0;
            *((_DWORD *)this + 194) = 0;
            goto LABEL_267;
          }
          unint64_t v195 = (4 * v194 / 3u + 1) | ((unint64_t)(4 * v194 / 3u + 1) >> 1);
          unint64_t v196 = v195 | (v195 >> 2) | ((v195 | (v195 >> 2)) >> 4);
          LODWORD(v196) = (((v196 | (v196 >> 8)) >> 16) | v196 | (v196 >> 8)) + 1;
          *((_DWORD *)this + 194) = v196;
          *((void *)this + 95) = MEMORY[0x1CB79F270](48 * v196, 8);
        }
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::initEmpty((uint64_t)this + 760);
      }
    }
LABEL_267:
    llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)this + 784);
    if (*((void *)this + 112) == *((void *)this + 113)) {
      goto LABEL_440;
    }
    uint64_t v202 = *(void *)this;
    uint64_t v203 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
    uint64_t v204 = v203 + 8;
    uint64_t v205 = *(void *)(v203 + 16);
    if (v205 == v203 + 8)
    {
      int v208 = 0;
      int v207 = 0;
      uint64_t v206 = 0;
    }
    else
    {
      uint64_t v206 = 0;
      int v207 = 0;
      int v208 = 0;
      do
      {
        if (v205) {
          unsigned int v209 = (llvm::GlobalObject *)(v205 - 56);
        }
        else {
          unsigned int v209 = 0;
        }
        if (*((void *)v209 + 1))
        {
          if ((*((unsigned char *)v209 + 34) & 0x40) != 0
            && (std::string::size_type v210 = (void *)llvm::GlobalObject::getSectionImpl(v209), v211 == 11)
            && (*v210 == 0x74735F6567616D69
              ? (BOOL v212 = *(void *)((char *)v210 + 3) == 0x65746174735F6567)
              : (BOOL v212 = 0),
                v212))
          {
            if (*(unsigned char *)(*(void *)v209 + 8) == 17) {
              uint64_t v206 = (v206 + *(_DWORD *)(*(void *)v209 + 32));
            }
            else {
              uint64_t v206 = (v206 + 1);
            }
          }
          else if ((*((unsigned char *)v209 + 34) & 0x40) != 0 {
                 && (uint64_t v213 = (void *)llvm::GlobalObject::getSectionImpl(v209), v214 == 13)
          }
                 && (*v213 == 0x5F72656C706D6173
                   ? (BOOL v215 = *(void *)((char *)v213 + 5) == 0x65746174735F7265)
                   : (BOOL v215 = 0),
                     v215))
          {
            ++v208;
          }
          else if ((*((unsigned char *)v209 + 34) & 0x40) != 0 {
                 && (Sectionuint64_t Impl = (void *)llvm::GlobalObject::getSectionImpl(v209), v217 == 15)
          }
                 && (*SectionImpl == 0x746E6174736E6F63
                   ? (BOOL v218 = *(void *)((char *)SectionImpl + 7) == 0x7265766972645F74)
                   : (BOOL v218 = 0),
                     v218)
                 || (*((unsigned char *)v209 + 34) & 0x40) != 0
                 && (uint64_t v219 = (void *)llvm::GlobalObject::getSectionImpl(v209), v220 == 16)
                 && (*v219 == 0x746E6174736E6F63 ? (BOOL v221 = v219[1] == 0x72656C706D61735FLL) : (BOOL v221 = 0), v221))
          {
            ++v207;
          }
        }
        uint64_t v205 = *(void *)(v205 + 8);
      }
      while (v205 != v204);
      uint64_t v202 = *(void *)this;
    }
    uint64_t v222 = *(void *)((char *)this + *(void *)(v202 - 24) + 400);
    if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v222 + 496))(v222, v206, (v207 + v208)))
    {
LABEL_440:
      if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)this + 392))(this) & 1) == 0)
      {
        uint64_t v223 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
        uint64_t v224 = *(void *)(v223 + 32);
        uint64_t v295 = v223 + 24;
        if (v224 != v223 + 24)
        {
          do
          {
            uint64_t v296 = *(void *)(v224 + 8);
            if (v224) {
              uint64_t v225 = (llvm::Value *)(v224 - 56);
            }
            else {
              uint64_t v225 = 0;
            }
            uint64_t v226 = *(void *)&v297[*(void *)(*(void *)this - 24) + 32];
            uint8x8_t v309 = v225;
            uint64_t v227 = llvm::Value::getName(v225);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v226 + 896))(v226, v227, v228))
            {
              if (*(unsigned char *)(*(void *)&v297[*(void *)(*(void *)this - 24) + 32] + 1751)
                && llvm::Value::hasNUsesOrMore(v309))
              {
                {
                  AGCLLVMUserObject::replaceIndirectTextureWriteFunctionUses(llvm::Function *)::force_inline_env_var = 1;
                }
                BOOL v229 = AGCLLVMUserObject::replaceIndirectTextureWriteFunctionUses(llvm::Function *)::force_inline_env_var != 0;
              }
              else
              {
                BOOL v229 = 1;
              }
              char v298 = v229;
              uint64_t v230 = *((void *)v309 + 1);
              if (v230)
              {
                unint64_t v303 = 0;
                do
                {
                  unint64_t v231 = 0;
                  uint64_t v232 = *(void *)(v230 + 24);
                  uint64_t v299 = *(void *)(v230 + 8);
                  v333.__r_.__value_.__r.__words[0] = (std::string::size_type)&v333.__r_.__value_.__r.__words[2];
                  v333.__r_.__value_.__l.__size_ = 0x1000000000;
                  while (1)
                  {
                    uint64_t v233 = llvm::CallBase::arg_end((llvm::CallBase *)v232);
                    uint64_t v234 = v232 - 32 * (*(_DWORD *)(v232 + 20) & 0x7FFFFFF);
                    if (v231 >= ((unint64_t)(v233 - v234) >> 5))
                    {
                      uint64_t v300 = 0;
                      LODWORD(v231) = 0;
                      goto LABEL_340;
                    }
                    uint64_t v235 = *(void *)(v234 + 32 * v231);
                    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v333, v235);
                    int v236 = *(unsigned __int8 *)(v235 + 16);
                    do
                    {
                      if (v236 != 77) {
                        break;
                      }
                      uint64_t v235 = *(void *)(v235 - 32);
                      int v236 = *(unsigned __int8 *)(v235 + 16);
                    }
                    while (v235);
                    if (v236 == 84)
                    {
                      uint64_t v237 = *(void *)(v235 - 32);
                      if (v237)
                      {
                        if (!*(unsigned char *)(v237 + 16) && *(void *)(v237 + 24) == *(void *)(v235 + 72))
                        {
                          BOOL v238 = (void *)llvm::Value::getName((llvm::Value *)v237);
                          if (v239 == 21)
                          {
                            BOOL v240 = *v238 == 0x7867612E6D766C6CLL && v238[1] == 0x657275747865742ELL;
                            if (v240 && *(void *)((char *)v238 + 13) == 0x6574617453657275) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    ++v231;
                  }
                  uint64_t v300 = *(void *)(v235 - 32 * (*(_DWORD *)(v235 + 20) & 0x7FFFFFF) + 32);
LABEL_340:
                  uint64_t v242 = (v231 + 1);
                  for (uint64_t i = v232 + 32 * v242; ; i += 32)
                  {
                    uint64_t v244 = llvm::CallBase::arg_end((llvm::CallBase *)v232);
                    uint64_t v245 = *(_DWORD *)(v232 + 20) & 0x7FFFFFF;
                    if (v242 >= ((v244
                                                             - (v232
                                                              + 32 * (unint64_t)-(int)v245)) >> 5))
                      break;
                    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v333, *(void *)(i - 32 * v245));
                    LODWORD(v242) = v242 + 1;
                  }
                  uint64_t v246 = v300;
                  if (v300 && *(unsigned __int8 *)(v300 + 16) >= 0x15u)
                  {
                    uint64_t Function = (uint64_t)v303;
                    char v248 = v298;
                    if (v303) {
                      char v248 = 1;
                    }
                    if ((v248 & 1) == 0)
                    {
                      uint64_t v249 = llvm::Value::getName(v309);
                      uint64_t v250 = *(void *)&v297[*(void *)(*(void *)this - 24) + 32];
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v250 + 904))(v250, v249, v251, v251))
                      {
                        uint64_t v252 = *(void *)(v232 - 32 * (*(_DWORD *)(v232 + 20) & 0x7FFFFFF));
                        unint64_t v253 = (void *)(v252 + 24);
                        if (*(_DWORD *)(v252 + 32) >= 0x41u) {
                          unint64_t v253 = (void *)*v253;
                        }
                        uint8x8_t v254 = v309;
                        int v255 = *(_DWORD *)v253;
                      }
                      else
                      {
                        int v255 = -1;
                        uint8x8_t v254 = v309;
                      }
                      v317.n128_u64[0] = llvm::Value::getName(v254);
                      v317.n128_u64[1] = v256;
                      if (v255 < 0) {
                        uint64_t v257 = 8;
                      }
                      else {
                        uint64_t v257 = 9;
                      }
                      if (v255 < 0) {
                        int v258 = "llvm.agx";
                      }
                      else {
                        int v258 = "llvm.agx2";
                      }
                      llvm::StringRef::split(&v314, &v317, (uint64_t)v258, v257);
                      if (__src)
                      {
                        std::string::basic_string[abi:nn180100](&__dst, __src, __len);
                      }
                      else
                      {
                        long long __dst = 0;
                        std::string::size_type v312 = 0;
                        uint64_t v313 = 0;
                      }
                      if (v255 < 0)
                      {
                        std::string::basic_string[abi:nn180100]<0>(&v310, "agx.air.indirect");
                      }
                      else
                      {
                        std::string::basic_string[abi:nn180100]<0>(&__p, "agx2.air.indirect.format");
                        std::to_string(&v334, v255);
                        if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          uint64_t v259 = &v334;
                        }
                        else {
                          uint64_t v259 = (std::string *)v334.__r_.__value_.__r.__words[0];
                        }
                        if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string::size_type size = HIBYTE(v334.__r_.__value_.__r.__words[2]);
                        }
                        else {
                          std::string::size_type size = v334.__r_.__value_.__l.__size_;
                        }
                        unint64_t v261 = std::string::append(&__p, (const std::string::value_type *)v259, size);
                        std::string::size_type v262 = v261->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v310.__r_.__value_.__l.__data_ = *(_OWORD *)&v261->__r_.__value_.__l.__data_;
                        v310.__r_.__value_.__r.__words[2] = v262;
                        v261->__r_.__value_.__l.__size_ = 0;
                        v261->__r_.__value_.__r.__words[2] = 0;
                        v261->__r_.__value_.__r.__words[0] = 0;
                        if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v334.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__p.__r_.__value_.__l.__data_);
                        }
                      }
                      if (v313 >= 0) {
                        p_dst = (const std::string::value_type *)&__dst;
                      }
                      else {
                        p_dst = (const std::string::value_type *)__dst;
                      }
                      if (v313 >= 0) {
                        std::string::size_type v264 = HIBYTE(v313);
                      }
                      else {
                        std::string::size_type v264 = v312;
                      }
                      std::string::append(&v310, p_dst, v264);
                      uint64_t Function = llvm::Module::getFunction();
                      if (!Function)
                      {
                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
                        __p.__r_.__value_.__l.__size_ = 0x1000000000;
                        unsigned int v266 = v309;
                        if (*((unsigned char *)v309 + 18))
                        {
                          llvm::Function::BuildLazyArguments(v309);
                          unsigned int v266 = v309;
                        }
                        for (unsigned int j = (uint64_t *)*((void *)v266 + 11); ; j += 5)
                        {
                          if (*((_WORD *)v266 + 9))
                          {
                            llvm::Function::BuildLazyArguments(v309);
                            unsigned int v266 = v309;
                          }
                          if (j == (uint64_t *)(*((void *)v266 + 11) + 40 * *((void *)v266 + 12)))
                          {
                            uint64_t Int16Ty = llvm::Type::getInt16Ty(*(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 104), v265);
                            *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v231) = Int16Ty;
                            llvm::FunctionType::get();
                            llvm::Module::getOrInsertFunction();
                            unint64_t v271 = v270;
                            v334.__r_.__value_.__r.__words[0] = (std::string::size_type)&v334.__r_.__value_.__r.__words[2];
                            v334.__r_.__value_.__l.__size_ = 0x1000000000;
                            float v304 = v270;
                            if (*((void *)v270 + 12))
                            {
                              uint64_t v272 = 0;
                              unint64_t v273 = 0;
                              do
                              {
                                if (*((_WORD *)v271 + 9))
                                {
                                  llvm::Function::BuildLazyArguments(v304);
                                  unint64_t v271 = v304;
                                }
                                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v334, *((void *)v271 + 11) + v272);
                                unint64_t v271 = v304;
                                ++v273;
                                v272 += 40;
                              }
                              while (v273 < *((void *)v304 + 12));
                            }
                            operator new();
                          }
                          uint64_t v268 = *j;
                          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__p, v268);
                          unsigned int v266 = v309;
                        }
                      }
                      if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
                      {
                        uint64_t v274 = Function;
                        operator delete(v310.__r_.__value_.__l.__data_);
                        uint64_t Function = v274;
                      }
                      if (SHIBYTE(v313) < 0)
                      {
                        uint64_t v275 = Function;
                        operator delete(__dst);
                        uint64_t Function = v275;
                      }
                      uint64_t v246 = v300;
                    }
                    unint64_t v303 = (llvm::Function *)Function;
                    uint64_t v276 = *(void *)(v232 + 40);
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"indirect.tex.write.end";
                    LOWORD(v328) = 259;
                    unint64_t v277 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
                    uint64_t v278 = *(void *)(v276 + 40);
                    if (v278 == v276 + 40)
                    {
                      uint64_t v281 = 0;
                    }
                    else
                    {
                      int v279 = (llvm::Instruction *)(v278 - 24);
                      if (v278) {
                        uint64_t v280 = v278 - 24;
                      }
                      else {
                        uint64_t v280 = 0;
                      }
                      if (*(unsigned __int8 *)(v280 + 16) - 29 >= 0xB) {
                        uint64_t v281 = 0;
                      }
                      else {
                        uint64_t v281 = v279;
                      }
                    }
                    llvm::Instruction::eraseFromParent(v281);
                    std::string::size_type v282 = (char *)this + *(void *)(*(void *)this - 24);
                    *((void *)v282 + 11) = v276;
                    *((void *)v282 + 12) = v276 + 40;
                    uint64_t v283 = *(void *)(*(void *)this - 24);
                    uint64_t v284 = *(void *)((char *)this + v283 + 224);
                    LOWORD(v328) = 257;
                    uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)this + v283 + 40, 38, v246, v284, (uint64_t)&__p);
                    if (v298)
                    {
                      unsigned int v286 = *((_DWORD *)this + 829);
                      llvm::IRBuilderBase::CreateSwitch((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), Cast, (uint64_t)v277, v286);
                      if (v286)
                      {
                        llvm::ConstantInt::get();
                        llvm::ConstantInt::get();
                        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"indirect.switch.case";
                        LOWORD(v328) = 259;
                        operator new();
                      }
                    }
                    else
                    {
                      *(void *)(v333.__r_.__value_.__r.__words[0] + 8 * v231) = Cast;
                      uint64_t v287 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                      LOWORD(v328) = 257;
                      llvm::IRBuilderBase::CreateCall((uint64_t)v287, *((void *)v303 + 3), (uint64_t)v303, (uint64_t)v333.__r_.__value_.__l.__data_, LODWORD(v333.__r_.__value_.__r.__words[1]), (uint64_t)&__p);
                      llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v277);
                    }
                    llvm::Value::replaceAllUsesWith();
                    llvm::Instruction::eraseFromParent((llvm::Instruction *)v232);
                  }
                  uint64_t v230 = v299;
                  if ((std::string::size_type *)v333.__r_.__value_.__l.__data_ != &v333.__r_.__value_.__r.__words[2]) {
                    free(v333.__r_.__value_.__l.__data_);
                  }
                }
                while (v299);
              }
            }
            uint64_t v224 = v296;
          }
          while (v296 != v295);
        }
      }
      if (v294)
      {
        AGCLLVMUserObject::buildBindlessImageArgumentPointer((unsigned __int8 *)this, 0, 0);
        uint64_t v163 = 1;
        AGCLLVMUserObject::buildBindlessImageArgumentPointer((unsigned __int8 *)this, 0, 1);
        AGCLLVMUserObject::buildImageTextureBufferLength(this, 0);
      }
      else
      {
        uint64_t v163 = 1;
      }
    }
    else
    {
      std::to_string(&v333, v207 + v208 + v206);
      uint64_t v288 = std::string::insert(&v333, 0, "Total number of textures and samplers (");
      std::string::size_type v289 = v288->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v334.__r_.__value_.__l.__data_ = *(_OWORD *)&v288->__r_.__value_.__l.__data_;
      v334.__r_.__value_.__r.__words[2] = v289;
      v288->__r_.__value_.__l.__size_ = 0;
      v288->__r_.__value_.__r.__words[2] = 0;
      v288->__r_.__value_.__r.__words[0] = 0;
      BOOL v290 = std::string::append(&v334, ") exceeds GPU allowance.");
      std::string::size_type v291 = v290->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v290->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v291;
      v290->__r_.__value_.__l.__size_ = 0;
      v290->__r_.__value_.__r.__words[2] = 0;
      v290->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v293 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v293 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (const std::string::value_type *)p_p, v293);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v334.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v333.__r_.__value_.__l.__data_);
      }
      uint64_t v163 = 0;
    }
    goto LABEL_205;
  }
  char v305 = 0;
  char v294 = 0;
  unint64_t v308 = (AGCLLVMUserObject *)((char *)this + 8);
  do
  {
    unsigned int v91 = (llvm::Function *)((char *)v90 - 56);
    BOOL v36 = v90 == 0;
    uint64_t v90 = (llvm::Function *)*((void *)v90 + 1);
    if (v36) {
      uint64_t v92 = 0;
    }
    else {
      uint64_t v92 = v91;
    }
    llvm::Value::getName(v92);
    int v93 = llvm::StringMapImpl::FindKey();
    if (v93 != -1 && v93 != (unint64_t)dword_1EBD0EB78)
    {
      if (!AGCLLVMUserObject::replaceSamplerFunctionUses((uint64_t)this, (uint64_t)v92, (int *)(*(void *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map+ 8 * v93)+ 8)))goto LABEL_204; {
LABEL_152:
      }
      if (*((void *)v92 + 1)) {
        goto LABEL_170;
      }
      goto LABEL_196;
    }
    llvm::Value::getName(v92);
    int v95 = llvm::StringMapImpl::FindKey();
    if (v95 == -1 || v95 == (unint64_t)dword_1EBD0EAA0)
    {
      llvm::Value::getName(v92);
      int v134 = llvm::StringMapImpl::FindKey();
      if (v134 != -1 && v134 != (unint64_t)dword_1EBD0EA80)
      {
        __p.__r_.__value_.__r.__words[0] = llvm::Value::getName(v92);
        __p.__r_.__value_.__l.__size_ = v135;
        uint64_t v136 = llvm::StringRef::find();
        uint64_t v137 = *((void *)v92 + 1);
        if (!v137) {
          goto LABEL_196;
        }
        uint64_t v138 = v136;
        do
        {
          int v139 = *(llvm::Instruction **)(v137 + 24);
          uint64_t v137 = *(void *)(v137 + 8);
          uint64_t v140 = (unsigned __int8 *)*((void *)v139 - 4 * (*((_DWORD *)v139 + 5) & 0x7FFFFFF));
          if (v140[16] - 11 > 1)
          {
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v139);
            if (v138 == -1)
            {
              uint64_t v141 = (uint64_t *)((char *)v308 + *(void *)(*(void *)this - 24));
              int v142 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(this, (AGCLLVMUserObject *)v140, 9u);
              LOWORD(v328) = 257;
              uint64_t v144 = AGCLLVMBuilder::tryDeducePointeeType(v142, v143);
              llvm::IRBuilderBase::CreateAlignedLoad(v141 + 4, v144, (uint64_t)v142, 0, (uint64_t)&__p);
            }
            else
            {
              __p.__r_.__value_.__r.__words[0] = 0;
              if (AGCLLVMUserObject::isConstantSampler(this, (llvm::Value *)v140, (unint64_t *)&__p, (unint64_t *)&v334)&& !*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1780))
              {
                llvm::ConstantInt::get();
              }
              else
              {
                AGCLLVMUserObject::buildSamplerArgumentPointer((uint64_t *)this, (uint64_t)v140, 2u);
              }
            }
          }
          else
          {
            llvm::UndefValue::get();
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v139);
        }
        while (v137);
        if (!*((void *)v92 + 1)) {
          goto LABEL_196;
        }
LABEL_170:
        char v305 = 1;
        continue;
      }
      llvm::Value::getName(v92);
      int v145 = llvm::StringMapImpl::FindKey();
      if (v145 == -1 || v145 == (unint64_t)dword_1EBD0EAC0)
      {
        llvm::Value::getName(v92);
        int v152 = llvm::StringMapImpl::FindKey();
        if (v152 == -1 || v152 == (unint64_t)dword_1EBD0EAE0)
        {
          llvm::Value::getName(v92);
          int v153 = llvm::StringMapImpl::FindKey();
          if (v153 != -1 && v153 != (unint64_t)dword_1EBD0E030)
          {
            if (!*((void *)v92 + 1)) {
              goto LABEL_196;
            }
            char v294 = 1;
          }
          continue;
        }
        uint64_t v154 = *((void *)v92 + 1);
        if (!v154) {
          goto LABEL_196;
        }
        do
        {
          int v155 = *(llvm::Instruction **)(v154 + 24);
          uint64_t v154 = *(void *)(v154 + 8);
          std::string::size_type v156 = (unsigned __int8 *)*((void *)v155 - 4 * (*((_DWORD *)v155 + 5) & 0x7FFFFFF));
          if (v156[16] - 11 > 1)
          {
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v155);
            uint64_t v157 = (llvm::Constant **)AGCLLVMUserObject::buildImageHeapIndex(this, (llvm::Value *)v156);
            std::string::size_type v158 = v90;
            uint64_t v159 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
            LOWORD(v328) = 257;
            uint64_t NullValue = llvm::Constant::getNullValue(*v157, v160);
            std::string::size_type v162 = v159;
            uint64_t v90 = v158;
            llvm::IRBuilderBase::CreateICmp(v162, 32, v157, NullValue, (uint64_t)&__p);
          }
          else
          {
            llvm::UndefValue::get();
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v155);
        }
        while (v154);
        goto LABEL_152;
      }
      uint64_t v146 = *((void *)v92 + 1);
      if (!v146) {
        goto LABEL_196;
      }
      while (1)
      {
        uint64_t v147 = *(llvm::Instruction **)(v146 + 24);
        uint64_t v146 = *(void *)(v146 + 8);
        uint64_t v148 = (unsigned __int8 *)*((void *)v147 - 4 * (*((_DWORD *)v147 + 5) & 0x7FFFFFF));
        if (v148[16] - 11 > 1)
        {
          if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)this + 384))(this) & 1) == 0
            && *(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v148) + 16) > 0x14u)
          {
            goto LABEL_182;
          }
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v147);
          uint64_t v149 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
          if (*(void *)(v149 + 968)) {
            strlen(*(const char **)(v149 + 968));
          }
          uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
          uint64_t v151 = (char *)v308 + *(void *)(*(void *)this - 24);
          LOWORD(v328) = 257;
          llvm::IRBuilderBase::CreateCall((uint64_t)(v151 + 32), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)&__p);
        }
        else
        {
          llvm::UndefValue::get();
        }
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v147);
LABEL_182:
        if (!v146) {
          goto LABEL_152;
        }
      }
    }
    uint64_t v96 = *((void *)v92 + 1);
    if (!v96) {
      goto LABEL_196;
    }
    uint64_t v97 = *(void *)(AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map + 8 * v95);
    unint64_t v302 = v92;
    do
    {
      uint64_t v98 = *(llvm::Instruction **)(v96 + 24);
      uint64_t v96 = *(void *)(v96 + 8);
      uint64_t v99 = (unsigned __int8 *)*((void *)v98 - 4 * (*((_DWORD *)v98 + 5) & 0x7FFFFFF));
      if (v99[16] - 11 <= 1)
      {
        llvm::UndefValue::get();
LABEL_135:
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v98);
        continue;
      }
      if (((*(uint64_t (**)(AGCLLVMUserObject *))(*(void *)this + 384))(this) & 1) != 0
        || *(unsigned __int8 *)(llvm::Value::stripPointerCasts((llvm::Value *)v99) + 16) <= 0x14u)
      {
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40), v98);
        int v100 = *(_DWORD *)(v97 + 12);
        switch(v100)
        {
          case 0:
          case 1:
          case 2:
            if (v100 || !*(unsigned char *)(v97 + 16))
            {
              uint64_t v102 = (uint64_t *)((char *)v308 + *(void *)(*(void *)this - 24));
              uint64_t v103 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(this, (AGCLLVMUserObject *)v99, 2u);
              LOWORD(v328) = 257;
              uint64_t v105 = AGCLLVMBuilder::tryDeducePointeeType(v103, v104);
              uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v102 + 4, v105, (uint64_t)v103, 0, (uint64_t)&__p);
              uint64_t v107 = (char *)this + *(void *)(*(void *)this - 24);
              LOWORD(v328) = 257;
              uint64_t v108 = (llvm::IRBuilderBase *)(v107 + 40);
              uint64_t v109 = (llvm::Value *)llvm::ConstantInt::get();
              uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v108, AlignedLoad, v109, (const llvm::Twine *)&__p);
            }
            else
            {
              uint64_t Element = AGCLLVMUserObject::buildImageTextureBufferLength(this, (llvm::Value *)v99);
            }
            uint64_t v110 = (llvm::Value *)Element;
            uint64_t v111 = llvm::CallBase::arg_end(v98);
            uint64_t v112 = (llvm::Type ***)((char *)v98 - 32 * (*((_DWORD *)v98 + 5) & 0x7FFFFFF));
            if (((v111 - (void)v112) & 0x1FFFFFFFE0) == 0x40)
            {
              uint64_t v113 = AGCLLVMBuilder::i32Extend((AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 32), v112[4], 0);
              uint64_t v114 = (AGCLLVMUserObject *)((char *)this + *(void *)(*(void *)this - 24) + 40);
              LOWORD(v328) = 257;
              uint64_t LShr = (llvm::CmpInst **)llvm::IRBuilderBase::CreateLShr(v114, v110, v113, (const llvm::Twine *)&__p);
              uint64_t v116 = llvm::ConstantInt::get();
              llvm::ConstantInt::get();
              uint64_t v117 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
              LOWORD(v328) = 257;
              llvm::IRBuilderBase::CreateICmp(v117, 32, LShr, v116, (uint64_t)&__p);
              LOWORD(v328) = 257;
              uint64_t v92 = v302;
              llvm::IRBuilderBase::CreateSelect();
            }
            break;
          case 3:
            unint64_t v118 = (uint64_t *)((char *)v308 + *(void *)(*(void *)this - 24));
            unint64_t v119 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(this, (AGCLLVMUserObject *)v99, 2u);
            LOWORD(v328) = 257;
            uint64_t v121 = AGCLLVMBuilder::tryDeducePointeeType(v119, v120);
            uint64_t v122 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v118 + 4, v121, (uint64_t)v119, 0, (uint64_t)&__p);
            uint64_t v123 = (char *)this + *(void *)(*(void *)this - 24);
            LOWORD(v328) = 257;
            int v124 = (llvm::IRBuilderBase *)(v123 + 40);
            uint64_t v125 = (llvm::Value *)llvm::ConstantInt::get();
            llvm::IRBuilderBase::CreateExtractElement(v124, v122, v125, (const llvm::Twine *)&__p);
            break;
          case 4:
            unsigned int v126 = (uint64_t *)((char *)v308 + *(void *)(*(void *)this - 24));
            uint64_t v127 = this;
            unint64_t v128 = (AGCLLVMUserObject *)v99;
            unsigned int v129 = 5;
            goto LABEL_150;
          case 5:
            unsigned int v126 = (uint64_t *)((char *)v308 + *(void *)(*(void *)this - 24));
            uint64_t v127 = this;
            unint64_t v128 = (AGCLLVMUserObject *)v99;
            unsigned int v129 = 6;
LABEL_150:
            uint64_t v130 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(v127, v128, v129);
            LOWORD(v328) = 257;
            uint64_t v132 = AGCLLVMBuilder::tryDeducePointeeType(v130, v131);
            llvm::IRBuilderBase::CreateAlignedLoad(v126 + 4, v132, (uint64_t)v130, 0, (uint64_t)&__p);
            break;
          default:
            goto LABEL_135;
        }
        goto LABEL_135;
      }
    }
    while (v96);
    if (*((void *)v92 + 1)) {
      goto LABEL_170;
    }
LABEL_196:
    llvm::Function::eraseFromParent(v92);
  }
  while (v90 != v307);
  uint64_t v62 = *(void *)this;
  if ((v305 & 1) == 0) {
    goto LABEL_213;
  }
  if ((*(unsigned int (**)(AGCLLVMUserObject *))(v62 + 384))(this)) {
    std::string::size_type v51 = "Could not statically determine the target of a texture write";
  }
  else {
    std::string::size_type v51 = "Could not resolve texture/sampler references";
  }
  uint64_t v50 = (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8);
LABEL_203:
  std::string::append(v50, v51);
LABEL_204:
  uint64_t v163 = 0;
LABEL_205:
  if (v318[0] != v319) {
    free(v318[0]);
  }
  if (v320 != v322) {
    free(v320);
  }
  if (v323 != v325) {
    free(v323);
  }
  return v163;
}

BOOL AGCLLVMUserObject::areIndirectTextureWritesSupported(AGCLLVMUserObject *this)
{
  uint64_t v1 = *(void *)this;
  return (!*((unsigned char *)this + 14) || *(unsigned char *)(*(void *)((char *)this + *(void *)(v1 - 24) + 400) + 1751))
      && *(unsigned char *)(*(void *)((char *)this + *(void *)(v1 - 24) + 400) + 1738) != 0;
}

BOOL AGCLLVMGen2TargetLowerer::checkMaxTexturesAndSamplers(AGCLLVMGen2TargetLowerer *this, int a2, int a3)
{
  return (2 * a3 + 8 * a2) < 0x1000;
}

void AGCLLVMUserObject::getGetNullTextureFunctionSet(AGCLLVMUserObject *this)
{
  {
    AGCLLVMUserObject::getGetNullTextureFunctionSet(void)::get_null_texture_function_set = 0;
    *(void *)&dword_1EBD0EB00 = 0;
    qword_1EBD0EB08 = 0x800000000;
    __cxa_atexit((void (*)(void *))llvm::StringSet<llvm::MallocAllocator>::~StringSet, &AGCLLVMUserObject::getGetNullTextureFunctionSet(void)::get_null_texture_function_set, &dword_1CAC02000);
  }
}

void AGCLLVMUserObject::getTextureFenceFunctionSet(AGCLLVMUserObject *this)
{
  {
    AGCLLVMUserObject::getTextureFenceFunctionSet(void)::texturefence_function_set = 0;
    *(void *)&dword_1EBD0EAC0 = 0;
    qword_1EBD0EAC8 = 0x800000000;
    __cxa_atexit((void (*)(void *))llvm::StringSet<llvm::MallocAllocator>::~StringSet, &AGCLLVMUserObject::getTextureFenceFunctionSet(void)::texturefence_function_set, &dword_1CAC02000);
  }
}

uint64_t AGCLLVMAGPVertexShader::setupShaderInputs(AGCLLVMAGPVertexShader *this)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  AGCLLVMUserVertexShader::setupShaderInputs(this);
  uint64_t v2 = *((void *)this + 22);
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    uint64_t v4 = *((void *)this + 22);
    uint64_t v3 = *(void *)(v2 + 88);
    if (*(_WORD *)(v4 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    }
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 88);
  }
  uint64_t v5 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
  for (uint64_t i = (char *)this + 368; v3 != v5; v3 += 40)
  {
    if (*(void *)(v3 + 8))
    {
      uint64_t v6 = *(void *)(*((void *)this + 22) + 80);
      uint64_t v7 = v6 ? v6 - 24 : 0;
      uint64_t v8 = *(void *)(v7 + 40);
      uint64_t v9 = v8 ? (llvm::Instruction *)(v8 - 24) : 0;
      AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v9, *((void *)this + 6));
      uint64_t v10 = *(unsigned int *)(v3 + 32);
      uint64_t v11 = *(void *)(*((void *)this + 11) + 8 * v10);
      if ((AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v3, v10, v11) & 1) == 0)
      {
        if (isStringMDNode(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.amplification_count"))
        {
          uint64_t v12 = *(void *)(*(void *)this - 24);
          if (!*(unsigned char *)(*(void *)&i[v12 + 32] + 1753)) {
            goto LABEL_84;
          }
          uint64_t v13 = (llvm::Type **)((char *)this + v12 + 32);
          DriverGlobalConstant = (llvm::Value *)AGCLLVMUserVertexShader::getDriverGlobalConstant(this, (llvm::Value *)0x54);
          *((void *)this + 634) = AGCLLVMBuilder::truncateToSmall(v13, DriverGlobalConstant, *(llvm::Type **)v3);
          llvm::Value::replaceAllUsesWith();
          *((unsigned char *)this + 5081) = 1;
        }
        else if (isStringMDNode(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.amplification_mask"))
        {
          uint64_t v12 = *(void *)(*(void *)this - 24);
          if (!*(unsigned char *)(*(void *)&i[v12 + 32] + 1753)) {
            goto LABEL_84;
          }
          __int16 v15 = (llvm::Type **)((char *)this + v12 + 32);
          unint64_t v16 = (llvm::Value *)AGCLLVMUserVertexShader::getDriverGlobalConstant(this, (llvm::Value *)0x55);
          *((void *)this + 634) = AGCLLVMBuilder::truncateToSmall(v15, v16, *(llvm::Type **)v3);
          llvm::Value::replaceAllUsesWith();
        }
        else if (isStringMDNode(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.amplification_id"))
        {
          uint64_t v12 = *(void *)(*(void *)this - 24);
          if (!*(unsigned char *)(*(void *)&i[v12 + 32] + 1753))
          {
LABEL_84:
            std::string::append((std::string *)((char *)this + v12 + 8), "Vertex amplification is not supported by target architecture.");
            return 0;
          }
          int v17 = (llvm::Type **)((char *)this + v12 + 32);
          VertexAmpId = AGCLLVMUserVertexShader::getVertexAmpId(this, *((_DWORD *)this + 1272));
          *((void *)this + 633) = AGCLLVMBuilder::truncateToSmall(v17, VertexAmpId, *(llvm::Type **)v3);
          llvm::Value::replaceAllUsesWith();
          *((unsigned char *)this + 5080) = 1;
        }
      }
    }
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  BOOL v21 = 0;
  uint64_t v22 = *(void *)(*((void *)this + 22) + 80);
  if (v22) {
    uint64_t v23 = (llvm::BasicBlock *)(v22 - 24);
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v87 = (char *)this + 200;
  int v88 = (char *)this + 8;
  int v82 = (char *)this + 5024;
  uint64_t v83 = v23;
  do
  {
    if ((&off_1E65EA428)[2 * v19]) {
      strlen((&off_1E65EA428)[2 * v19]);
    }
    uint64_t Function = llvm::Module::getFunction();
    std::string::size_type v25 = (char *)this + 368;
    if (Function)
    {
      uint64_t v81 = (llvm::Function *)Function;
      uint64_t v26 = *(void *)(Function + 8);
      if (v26)
      {
        uint64_t v27 = LODWORD((&off_1E65EA428)[2 * v19 + 1]);
        do
        {
          unsigned int v28 = *(uint64_t **)(v26 + 24);
          uint64_t v26 = *(void *)(v26 + 8);
          if (v28[1])
          {
            if (v27 == 3) {
              uint64_t v29 = v20;
            }
            else {
              uint64_t v29 = v21;
            }
            if (!v29)
            {
              uint64_t v30 = (char **)&v88[*(void *)(*(void *)this - 24) + 32];
              uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v83);
              llvm::IRBuilderBase::SetInsertPoint(v30, (char *)v83, FirstInsertionPt);
              int v32 = (*(uint64_t (**)(void))(**(void **)&v25[*(void *)(*(void *)this - 24) + 32] + 464))();
              uint64_t v33 = *(void *)(*(void *)this - 24);
              if (v32)
              {
                uint64_t v34 = (char *)this + v33 + 40;
                uint64_t VIRead = AGCLLVMUserVertexShader::createVIRead(this, (uint64_t)v82, v27);
                uint64_t v36 = *(void *)&v87[*(void *)(*(void *)this - 24) + 32];
                LOWORD(v96) = 257;
                uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v34, 49, VIRead, v36, (uint64_t)v92);
                int v38 = (llvm::Value *)Cast;
                if (v27 == 3) {
                  uint64_t v39 = (uint64_t)v21;
                }
                else {
                  uint64_t v39 = Cast;
                }
                uint64_t v40 = v25;
                if (v27 == 3) {
                  uint64_t v41 = Cast;
                }
                else {
                  uint64_t v41 = (uint64_t)v20;
                }
                if ((*(unsigned int (**)(void))(**(void **)&v40[*(void *)(*(void *)this - 24) + 32] + 472))())
                {
                  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
                  uint64_t v43 = *(void *)(*(void *)this - 24);
                  uint64_t v44 = (AGCLLVMAGPVertexShader *)((char *)this + v43 + 40);
                  LOWORD(v96) = 257;
                  uint64_t v45 = llvm::IRBuilderBase::CreateCall((uint64_t)&v88[v43 + 32], **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v92);
                  __int16 v90 = 257;
                  uint64_t Add = llvm::IRBuilderBase::CreateAdd(v44, v38, v45, (const llvm::Twine *)v89);
                  if (v27 == 3) {
                    uint64_t v20 = (void *)Add;
                  }
                  else {
                    BOOL v21 = (void *)Add;
                  }
                }
                else
                {
                  BOOL v21 = (void *)v39;
                  uint64_t v20 = (void *)v41;
                }
                std::string::size_type v25 = (char *)this + 368;
              }
              else
              {
                unsigned int v47 = (*(uint64_t (**)(void, char *, uint64_t))(**(void **)&v25[v33 + 32] + 440))(*(void *)&v25[v33 + 32], v82, v27);
                unint64_t v48 = *((unsigned int *)this + 2500);
                if (v48 >= *((unsigned int *)this + 2501)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*((void *)this + 1249) + 8 * v48) = (v27 << 32) | v47;
                ++*((_DWORD *)this + 2500);
                __int16 v49 = (char *)this + *(void *)(*(void *)this - 24) + 40;
                uint64_t v50 = AGCLLVMUserVertexShader::createVIRead(this);
                uint64_t v51 = *(void *)&v87[*(void *)(*(void *)this - 24) + 32];
                LOWORD(v96) = 257;
                uint64_t v52 = llvm::IRBuilderBase::CreateCast((uint64_t)v49, 49, (uint64_t)v50, v51, (uint64_t)v92);
                if (v27 == 3) {
                  uint64_t v20 = (void *)v52;
                }
                else {
                  BOOL v21 = (void *)v52;
                }
              }
            }
            if (v27 == 3) {
              uint64_t v53 = v20;
            }
            else {
              uint64_t v53 = v21;
            }
            uint64_t v54 = *v28;
            if (*v53 != *v28)
            {
              uint64_t v55 = (char *)this + *(void *)(*(void *)this - 24) + 40;
              LOWORD(v96) = 257;
              llvm::IRBuilderBase::CreateCast((uint64_t)v55, 38, (uint64_t)v53, v54, (uint64_t)v92);
            }
            llvm::Value::replaceAllUsesWith();
          }
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v28);
        }
        while (v26);
      }
      llvm::Function::eraseFromParent(v81);
    }
    ++v19;
  }
  while (v19 != 4);
  v92[0] = "air.get_base_vertex.i32";
  v92[1] = "base_vertex";
  uint64_t v56 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
  int v93 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 152))(v56);
  int v94 = 0;
  int v95 = "air.get_base_vertex.i16";
  uint64_t v96 = "base_vertex";
  uint64_t v57 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
  int v97 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 152))(v57);
  int v98 = 0;
  uint64_t v99 = "air.get_base_instance.i32";
  int v100 = "base_instance";
  uint64_t v58 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
  int v101 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 160))(v58);
  int v102 = 1;
  uint64_t v103 = "air.get_base_instance.i16";
  uint64_t v104 = "base_instance";
  uint64_t v59 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
  uint64_t v60 = 0;
  int v105 = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 160))(v59);
  int v106 = 1;
  v91[0] = 0;
  v91[1] = 0;
  do
  {
    if (v92[3 * v60]) {
      strlen((const char *)v92[3 * v60]);
    }
    uint64_t v61 = llvm::Module::getFunction();
    if (v61)
    {
      BOOL v84 = (llvm::Function *)v61;
      uint64_t v62 = *(void *)(v61 + 8);
      if (v62)
      {
        uint64_t v63 = &v92[3 * v60];
        uint64_t v64 = (unsigned int *)v63 + 5;
        int v86 = v63 + 1;
        __int16 v65 = (unsigned int *)(v63 + 2);
        do
        {
          int v66 = *(llvm::Instruction **)(v62 + 24);
          uint64_t v62 = *(void *)(v62 + 8);
          if (*((void *)v66 + 1))
          {
            uint64_t v67 = *v64;
            GlobalBufferBinding = (llvm::Type **)v91[v67];
            if (!GlobalBufferBinding)
            {
              uint64_t v69 = (llvm::Type *)llvm::PointerType::get();
              if (*(unsigned char *)*v86)
              {
                v89[2] = *v86;
                char v70 = 3;
              }
              else
              {
                char v70 = 1;
              }
              v89[0] = "agc.buffer_pointers.";
              LOBYTE(v90) = 3;
              HIBYTE(v90) = v70;
              GlobalBufferBinding = (llvm::Type **)AGCLLVMUserObject::createGlobalBufferBinding(this, v69, (const llvm::Twine *)v89, *v65, 4, 5, 0);
              v91[v67] = GlobalBufferBinding;
            }
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 40), v66);
            uint64_t v71 = &v88[*(void *)(*(void *)this - 24)];
            __int16 v90 = 257;
            uint64_t v73 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBufferBinding, v72);
            uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v71 + 4, v73, (uint64_t)GlobalBufferBinding, 0, (uint64_t)v89);
            uint64_t v75 = (char *)this + *(void *)(*(void *)this - 24);
            uint64_t v76 = (llvm::Type *)*((void *)v75 + 29);
            __int16 v90 = 257;
            uint64_t v77 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v75 + 5, v76, AlignedLoad, 0, (uint64_t)v89);
            uint64_t v78 = (char *)this + *(void *)(*(void *)this - 24) + 40;
            uint64_t v79 = *(void *)v66;
            __int16 v90 = 257;
            llvm::IRBuilderBase::CreateCast((uint64_t)v78, 38, v77, v79, (uint64_t)v89);
            llvm::Value::replaceAllUsesWith();
          }
          llvm::Instruction::eraseFromParent(v66);
        }
        while (v62);
      }
      llvm::Function::eraseFromParent(v84);
    }
    ++v60;
  }
  while (v60 != 4);
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderBaseInstanceBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderBaseVertexBufferIndex()
{
  return 44;
}

void virtual thunk to'AGCLLVMAGPVertexShaderGen4::~AGCLLVMAGPVertexShaderGen4(AGCLLVMAGPVertexShaderGen4 *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F258FCA0;
  v1[1261] = &off_1F258FFF0;
  v1[1265] = &off_1F25900E0;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F2580510);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = off_1F258FCA0;
  v1[1261] = &off_1F258FFF0;
  v1[1265] = &off_1F25900E0;
  uint64_t v2 = (void *)v1[1249];
  if (v2 != v1 + 1251) {
    free(v2);
  }
  uint64_t v3 = (void *)v1[1183];
  if (v3 != v1 + 1185) {
    free(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1F2580510);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
}

BOOL virtual thunk to'AGCLLVMAGPVertexShader::enableSoftFaultOptimization(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned char *)this + *(void *)(*(void *)this - 200) + 10051) == 0;
}

BOOL virtual thunk to'AGCLLVMAGPVertexShaderGen4::constructReply(AGCLLVMAGPVertexShaderGen4 *this)
{
  return AGCLLVMAGPVertexShaderGen4::constructReply((AGCLLVMAGPVertexShaderGen4 *)((char *)this
                                                                                 + *(void *)(*(void *)this - 152)));
}

void virtual thunk to'AGCLLVMAGPVertexShader::getCompilationKeyDescription(AGCLLVMAGPVertexShader *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t virtual thunk to'AGCLLVMAGPVertexShader::buildBackendRequest(AGCLLVMAGPVertexShader *this, llvm::AGX::CompileRequest *a2)
{
  return AGCLLVMAGPVertexShader::buildBackendRequest((AGCLLVMAGPVertexShader *)((char *)this + *(void *)(*(void *)this - 104)), a2);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *,false>(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  uint64_t v10 = (unsigned int *)(a2 - 16);
  unint64_t k = v9;
  while (1)
  {
    unint64_t v9 = k;
    uint64_t v12 = a2 - k;
    unint64_t v13 = (uint64_t)(a2 - k) >> 4;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v47 = *v10;
          unsigned int v48 = *(_DWORD *)k;
          if (*v10 >= *(_DWORD *)k)
          {
            if (v48 < v47) {
              return result;
            }
            unint64_t v50 = *(void *)(a2 - 8);
            unint64_t v49 = *(void *)(k + 8);
            if (v50 >= v49) {
              return result;
            }
          }
          else
          {
            unint64_t v49 = *(void *)(k + 8);
            unint64_t v50 = *(void *)(a2 - 8);
          }
          *(_DWORD *)unint64_t k = v47;
          *(_DWORD *)(a2 - 16) = v48;
          *(void *)(k + 8) = v50;
          *(void *)(a2 - 8) = v49;
          return result;
        case 3uLL:
          return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)k, (unsigned int *)(k + 16), (unsigned int *)(a2 - 16));
        case 4uLL:
          return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(k, k + 16, k + 32, a2 - 16);
        case 5uLL:
          return (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(k, k + 16, k + 32, k + 48, (unsigned int *)(a2 - 16));
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 383)
    {
      unint64_t v51 = k + 16;
      BOOL v53 = k == a2 || v51 == a2;
      if (a4)
      {
        if (v53) {
          return result;
        }
        uint64_t v54 = 0;
        unint64_t v55 = k;
        while (2)
        {
          unint64_t v56 = v55;
          unint64_t v55 = v51;
          unsigned int v57 = *(_DWORD *)(v56 + 16);
          unsigned int v58 = *(_DWORD *)v56;
          if (v57 < *(_DWORD *)v56)
          {
            unint64_t v59 = *(void *)(v56 + 24);
            unint64_t v60 = *(void *)(v56 + 8);
            goto LABEL_114;
          }
          if (v58 >= v57)
          {
            unint64_t v59 = *(void *)(v56 + 24);
            unint64_t v60 = *(void *)(v56 + 8);
            if (v59 < v60)
            {
LABEL_114:
              *(_DWORD *)(v56 + 16) = v58;
              *(void *)(v55 + 8) = v60;
              unint64_t v61 = k;
              if (v56 != k)
              {
                uint64_t v62 = v54;
                do
                {
                  unsigned int v63 = *(_DWORD *)(k + v62 - 16);
                  if (v57 >= v63)
                  {
                    if (v63 < v57)
                    {
                      unint64_t v61 = v56;
                      goto LABEL_123;
                    }
                    unint64_t v61 = k + v62;
                    unint64_t v64 = *(void *)(k + v62 - 8);
                    if (v59 >= v64) {
                      goto LABEL_123;
                    }
                  }
                  else
                  {
                    unint64_t v64 = *(void *)(k + v62 - 8);
                  }
                  v56 -= 16;
                  uint64_t v65 = k + v62;
                  *(_DWORD *)uint64_t v65 = v63;
                  *(void *)(v65 + 8) = v64;
                  v62 -= 16;
                }
                while (v62);
                unint64_t v61 = k;
              }
LABEL_123:
              *(_DWORD *)unint64_t v61 = v57;
              *(void *)(v61 + 8) = v59;
            }
          }
          unint64_t v51 = v55 + 16;
          v54 += 16;
          if (v55 + 16 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v53) {
        return result;
      }
      while (2)
      {
        unint64_t v84 = v9;
        unint64_t v9 = v51;
        unsigned int v85 = *(_DWORD *)(v84 + 16);
        unsigned int v86 = *(_DWORD *)v84;
        if (v85 >= *(_DWORD *)v84)
        {
          if (v86 >= v85)
          {
            unint64_t v87 = *(void *)(v84 + 24);
            if (v87 < *(void *)(v84 + 8)) {
              goto LABEL_164;
            }
          }
        }
        else
        {
          unint64_t v87 = *(void *)(v84 + 24);
          do
          {
            do
            {
LABEL_164:
              unint64_t v88 = v84;
              unsigned int v89 = v86;
              unsigned int v90 = *(_DWORD *)(v84 - 16);
              v84 -= 16;
              unsigned int v86 = v90;
              *(_DWORD *)(v84 + 32) = v89;
              *(void *)(v84 + 40) = *(void *)(v84 + 24);
            }
            while (v85 < v90);
          }
          while (v86 >= v85 && v87 < *(void *)(v88 - 8));
          *(_DWORD *)unint64_t v88 = v85;
          *(void *)(v88 + 8) = v87;
        }
        unint64_t v51 = v9 + 16;
        if (v9 + 16 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = k + 16 * (v13 >> 1);
    if ((unint64_t)v12 >= 0x801)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)v9, (unsigned int *)(v9 + 16 * (v13 >> 1)), (unsigned int *)(a2 - 16));
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)(v9 + 16), (unsigned int *)(v15 - 16), (unsigned int *)(a2 - 32));
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)(v9 + 32), (unsigned int *)(v9 + 16 + 16 * v14), (unsigned int *)(a2 - 48));
      uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)(v15 - 16), (unsigned int *)v15, (unsigned int *)(v9 + 16 + 16 * v14));
      unsigned int v16 = *(_DWORD *)v9;
      *(_DWORD *)unint64_t v9 = *(_DWORD *)v15;
      *(_DWORD *)unint64_t v15 = v16;
      uint64_t v17 = *(void *)(v9 + 8);
      *(void *)(v9 + 8) = *(void *)(v15 + 8);
      *(void *)(v15 + 8) = v17;
    }
    else
    {
      uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)(v9 + 16 * (v13 >> 1)), (unsigned int *)v9, (unsigned int *)(a2 - 16));
    }
    --a3;
    unsigned int v18 = *(_DWORD *)v9;
    if ((a4 & 1) != 0 || (unsigned int v19 = *(_DWORD *)(v9 - 16), v19 < v18))
    {
LABEL_14:
      unint64_t v21 = *(void *)(v9 + 8);
      for (unint64_t i = v9 + 16; ; i += 16)
      {
        unsigned int v23 = *(_DWORD *)i;
        if (*(_DWORD *)i >= v18 && (v18 < v23 || *(void *)(i + 8) >= v21)) {
          break;
        }
      }
      if (i - 16 == v9)
      {
        unint64_t j = a2;
        if (i < a2)
        {
          unsigned int v27 = *v10;
          unint64_t j = a2 - 16;
          if (*v10 >= v18)
          {
            unint64_t j = a2 - 16;
            do
            {
              if (v18 >= v27)
              {
                if (*(void *)(j + 8) < v21 || i >= j) {
                  break;
                }
              }
              else if (i >= j)
              {
                break;
              }
              unsigned int v29 = *(_DWORD *)(j - 16);
              j -= 16;
              unsigned int v27 = v29;
            }
            while (v29 >= v18);
          }
        }
      }
      else
      {
        unsigned int v24 = *v10;
        for (unint64_t j = a2 - 16; v24 >= v18 && (v18 < v24 || *(void *)(j + 8) >= v21); j -= 16)
        {
          unsigned int v26 = *(_DWORD *)(j - 16);
          unsigned int v24 = v26;
        }
      }
      unint64_t k = i;
      if (i < j)
      {
        unsigned int v30 = *(_DWORD *)j;
        unint64_t k = i;
        unint64_t v31 = j;
        do
        {
          *(_DWORD *)unint64_t k = v30;
          *(_DWORD *)unint64_t v31 = v23;
          uint64_t v32 = *(void *)(k + 8);
          *(void *)(k + 8) = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = v32;
          do
          {
            do
            {
              unsigned int v33 = *(_DWORD *)(k + 16);
              k += 16;
              unsigned int v23 = v33;
            }
            while (v33 < v18);
          }
          while (v18 >= v23 && *(void *)(k + 8) < v21);
          do
          {
            unsigned int v34 = *(_DWORD *)(v31 - 16);
            v31 -= 16;
            unsigned int v30 = v34;
          }
          while (v34 >= v18 && (v18 < v30 || *(void *)(v31 + 8) >= v21));
        }
        while (k < v31);
      }
      if (k - 16 != v9)
      {
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(k - 16);
        *(void *)(v9 + 8) = *(void *)(k - 8);
      }
      *(_DWORD *)(k - 16) = v18;
      *(void *)(k - 8) = v21;
      if (i < j) {
        goto LABEL_51;
      }
      BOOL v35 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(v9, k - 16);
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(k, a2);
      if (result)
      {
        a2 = k - 16;
        if (v35) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v35)
      {
LABEL_51:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *,false>(v9, k - 16, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v18 < v19)
      {
        unint64_t v20 = *(void *)(v9 + 8);
      }
      else
      {
        unint64_t v20 = *(void *)(v9 + 8);
        if (*(void *)(v9 - 8) < v20) {
          goto LABEL_14;
        }
      }
      unsigned int v36 = *v10;
      if (v18 >= *v10 && (v36 < v18 || v20 >= *(void *)(a2 - 8)))
      {
        for (unint64_t k = v9 + 16; k < a2 && v18 >= *(_DWORD *)k && (*(_DWORD *)k < v18 || v20 >= *(void *)(k + 8)); k += 16)
          ;
      }
      else
      {
        unint64_t k = v9;
        do
        {
          unsigned int v38 = *(_DWORD *)(k + 16);
          k += 16;
          unsigned int v37 = v38;
        }
        while (v18 >= v38 && (v37 < v18 || v20 >= *(void *)(k + 8)));
      }
      unint64_t m = a2;
      if (k < a2)
      {
        for (unint64_t m = a2 - 16; v18 < v36 || v36 >= v18 && v20 < *(void *)(m + 8); m -= 16)
        {
          unsigned int v40 = *(_DWORD *)(m - 16);
          unsigned int v36 = v40;
        }
      }
      if (k < m)
      {
        unsigned int v41 = *(_DWORD *)k;
        unsigned int v42 = *(_DWORD *)m;
        do
        {
          *(_DWORD *)unint64_t k = v42;
          *(_DWORD *)unint64_t m = v41;
          unsigned int v43 = *(_DWORD *)(k + 16);
          k += 16;
          unsigned int v41 = v43;
          uint64_t v44 = *(void *)(k - 8);
          *(void *)(k - 8) = *(void *)(m + 8);
          *(void *)(m + 8) = v44;
          while (v18 >= v41 && (v41 < v18 || v20 >= *(void *)(k + 8)))
          {
            unsigned int v45 = *(_DWORD *)(k + 16);
            k += 16;
            unsigned int v41 = v45;
          }
          do
          {
            do
            {
              unsigned int v46 = *(_DWORD *)(m - 16);
              m -= 16;
              unsigned int v42 = v46;
            }
            while (v18 < v46);
          }
          while (v42 >= v18 && v20 < *(void *)(m + 8));
        }
        while (k < m);
      }
      BOOL v4 = k - 16 >= v9;
      BOOL v5 = k - 16 == v9;
      if (k - 16 != v9)
      {
        *(_DWORD *)unint64_t v9 = *(_DWORD *)(k - 16);
        *(void *)(v9 + 8) = *(void *)(k - 8);
      }
      a4 = 0;
      *(_DWORD *)(k - 16) = v18;
      *(void *)(k - 8) = v20;
    }
  }
  if (k != a2)
  {
    int64_t v66 = (v13 - 2) >> 1;
    int64_t v67 = v66;
    while (2)
    {
      int64_t v68 = v67;
      if (v66 >= v67)
      {
        uint64_t v69 = (2 * v67) | 1;
        unint64_t v70 = k + 16 * v69;
        if (2 * v68 + 2 < (uint64_t)v13)
        {
          unsigned int v71 = *(_DWORD *)(v70 + 16);
          if (*(_DWORD *)v70 < v71 || v71 >= *(_DWORD *)v70 && *(void *)(k + 16 * v69 + 8) < *(void *)(v70 + 24))
          {
            v70 += 16;
            uint64_t v69 = 2 * v68 + 2;
          }
        }
        unint64_t v72 = k + 16 * v68;
        unsigned int v73 = *(_DWORD *)v70;
        unsigned int v74 = *(_DWORD *)v72;
        if (*(_DWORD *)v70 >= *(_DWORD *)v72)
        {
          if (v74 < v73)
          {
            unint64_t v75 = *(void *)(v72 + 8);
            unint64_t v76 = *(void *)(v70 + 8);
            goto LABEL_138;
          }
          unint64_t v76 = *(void *)(v70 + 8);
          unint64_t v75 = *(void *)(k + 16 * v68 + 8);
          if (v76 >= v75)
          {
LABEL_138:
            *(_DWORD *)unint64_t v72 = v73;
            *(void *)(v72 + 8) = v76;
            if (v66 >= v69)
            {
              while (1)
              {
                uint64_t v78 = 2 * v69;
                uint64_t v69 = (2 * v69) | 1;
                unint64_t v77 = k + 16 * v69;
                uint64_t v79 = v78 + 2;
                if (v79 < (uint64_t)v13)
                {
                  unsigned int v80 = *(_DWORD *)(v77 + 16);
                  if (*(_DWORD *)v77 < v80
                    || v80 >= *(_DWORD *)v77 && *(void *)(k + 16 * v69 + 8) < *(void *)(v77 + 24))
                  {
                    v77 += 16;
                    uint64_t v69 = v79;
                  }
                }
                unsigned int v81 = *(_DWORD *)v77;
                if (*(_DWORD *)v77 < v74) {
                  break;
                }
                unint64_t v82 = *(void *)(v77 + 8);
                if (v74 >= v81 && v82 < v75) {
                  break;
                }
                *(_DWORD *)unint64_t v70 = v81;
                *(void *)(v70 + 8) = v82;
                unint64_t v70 = v77;
                if (v66 < v69) {
                  goto LABEL_140;
                }
              }
            }
            unint64_t v77 = v70;
LABEL_140:
            *(_DWORD *)unint64_t v77 = v74;
            *(void *)(v77 + 8) = v75;
          }
        }
      }
      int64_t v67 = v68 - 1;
      if (v68) {
        continue;
      }
      break;
    }
    uint64_t v91 = (unint64_t)v12 >> 4;
    while (2)
    {
      int64_t v92 = 0;
      unsigned int v93 = *(_DWORD *)k;
      uint64_t v94 = *(void *)(k + 8);
      uint64_t v95 = v91 - 2;
      if (v91 < 2) {
        uint64_t v95 = v91 - 1;
      }
      uint64_t v96 = v95 >> 1;
      unint64_t v97 = k;
      do
      {
        unint64_t v98 = v97;
        int64_t v99 = v92 + 1;
        v97 += 16 * (v92 + 1);
        uint64_t v100 = 2 * v92;
        uint64_t result = (2 * v92) | 1;
        int64_t v92 = result;
        uint64_t v101 = v100 + 2;
        if (v101 < v91)
        {
          uint64_t result = v97 + 16;
          unsigned int v102 = *(_DWORD *)(v97 + 16);
          if (*(_DWORD *)v97 < v102
            || v102 >= *(_DWORD *)v97 && *(void *)(v98 + 16 * v99 + 8) < *(void *)(v97 + 24))
          {
            v97 += 16;
            int64_t v92 = v101;
          }
        }
        *(_DWORD *)unint64_t v98 = *(_DWORD *)v97;
        *(void *)(v98 + 8) = *(void *)(v97 + 8);
      }
      while (v92 <= v96);
      if (v97 == a2 - 16)
      {
        *(_DWORD *)unint64_t v97 = v93;
        *(void *)(v97 + 8) = v94;
      }
      else
      {
        *(_DWORD *)unint64_t v97 = *(_DWORD *)(a2 - 16);
        *(void *)(v97 + 8) = *(void *)(a2 - 8);
        *(_DWORD *)(a2 - 16) = v93;
        *(void *)(a2 - 8) = v94;
        uint64_t v103 = v97 - k + 16;
        if (v103 >= 17)
        {
          unint64_t v104 = (v103 >> 4) - 2;
          unint64_t v105 = v104 >> 1;
          unint64_t v106 = k + 16 * (v104 >> 1);
          unsigned int v107 = *(_DWORD *)v106;
          unsigned int v108 = *(_DWORD *)v97;
          if (*(_DWORD *)v106 < *(_DWORD *)v97)
          {
            unint64_t v109 = *(void *)(v97 + 8);
            uint64_t result = *(void *)(v106 + 8);
            goto LABEL_183;
          }
          if (v108 >= v107)
          {
            uint64_t result = *(void *)(k + 16 * v105 + 8);
            unint64_t v109 = *(void *)(v97 + 8);
            if (result < v109)
            {
LABEL_183:
              *(_DWORD *)unint64_t v97 = v107;
              *(void *)(v97 + 8) = result;
              if (v104 >= 2)
              {
                while (1)
                {
                  unint64_t v111 = v105 - 1;
                  unint64_t v105 = (v105 - 1) >> 1;
                  unint64_t v110 = k + 16 * v105;
                  unsigned int v112 = *(_DWORD *)v110;
                  if (*(_DWORD *)v110 >= v108)
                  {
                    if (v108 < v112) {
                      break;
                    }
                    uint64_t result = *(void *)(k + 16 * v105 + 8);
                    if (result >= v109) {
                      break;
                    }
                  }
                  else
                  {
                    uint64_t result = *(void *)(v110 + 8);
                  }
                  *(_DWORD *)unint64_t v106 = v112;
                  *(void *)(v106 + 8) = result;
                  unint64_t v106 = k + 16 * v105;
                  if (v111 <= 1) {
                    goto LABEL_190;
                  }
                }
              }
              unint64_t v110 = v106;
LABEL_190:
              *(_DWORD *)unint64_t v110 = v108;
              *(void *)(v110 + 8) = v109;
            }
          }
        }
      }
      a2 -= 16;
      if (v91-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::vertexBuiltinRegisterDomain()
{
  return 2;
}

uint64_t GenericVaryingAllocator::getTotalSharedComponentWords(GenericVaryingAllocator *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  do
  {
    if (v1 <= 5 && ((1 << v1) & 0x27) != 0)
    {
      uint64_t v3 = (char *)this + 4 * v1;
      int v4 = *((_DWORD *)v3 + 148);
      int v5 = *((_DWORD *)v3 + 154);
      if (*((unsigned char *)this + 560)) {
        uint64_t v2 = v4 + v2 + ((v5 + 1) >> 1);
      }
      else {
        uint64_t v2 = (v4 + v2 + v5);
      }
    }
    ++v1;
  }
  while (v1 != 6);
  return v2;
}

uint64_t AGCLLVMUserVertexShader::getMaxSharedRegisters(AGCLLVMUserVertexShader *this)
{
  return *(unsigned int *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 844);
}

void AGCLLVMGen6TargetConfig::createMetalVertexShader()
{
}

void AGCLLVMAGPVertexShader::getCompilationKeyDescription(AGCLLVMAGPVertexShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 3);
  std::string::basic_string[abi:nn180100]<0>(v40, "AGCVertexContextStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v38, "mutableBuffers");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v44);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v45[1] + *(void *)(v45[0] - 24)) = *(_DWORD *)((unsigned char *)&v45[1] + *(void *)(v45[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v48, (const void **)v38, (uint64_t)__p);
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  v44[0] = *(void **)MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void **)((char *)v44 + *((void *)v44[0] - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
  v45[0] = v4;
  v45[1] = MEMORY[0x1E4FBA470] + 16;
  if (v46 < 0) {
    operator delete((void *)v45[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB7A0710](v47);
  std::string::basic_string[abi:nn180100]<0>(v44, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v49, (const void **)v44, *(_DWORD *)(v3 + 12) & 1);
  std::string::basic_string[abi:nn180100]<0>(__p, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v50, (const void **)__p, (*(_DWORD *)(v3 + 12) >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v36, "partition_mode");
  _agcFieldString<char const*>(&v51, (const void **)v36, _agcTessellationPartitionModeStrings[(*(void *)(v3 + 16) >> 8) & 3]);
  std::string::basic_string[abi:nn180100]<0>(v34, "step_function");
  _agcFieldString<char const*>(&v52, (const void **)v34, _agcTessellationStepFunctionStrings[(*(void *)(v3 + 16) >> 10) & 3]);
  std::string::basic_string[abi:nn180100]<0>(v32, "vertex_amplification_mode");
  _agcFieldString<char const*>(&v53, (const void **)v32, _AGCVertexAmplificationModeStrings[(*(void *)(v3 + 16) >> 12) & 3]);
  std::string::basic_string[abi:nn180100]<0>(v30, "manufactureUnlinkedVaryings");
  _agcFieldString<unsigned long long>(&v54, (const void **)v30, (*(void *)(v3 + 16) >> 18) & 1);
  std::string::basic_string[abi:nn180100]<0>(v28, "customBorderColor");
  _agcFieldString<unsigned long long>(&v55, (const void **)v28, (*(void *)(v3 + 16) >> 19) & 1);
  std::string::basic_string[abi:nn180100]<0>(v26, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v56, (const void **)v26, (*(_DWORD *)(v3 + 12) >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v24, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v57, (const void **)v24, (*(_DWORD *)(v3 + 12) >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v22, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v58, (const void **)v22, (*(_DWORD *)(v3 + 12) >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(v20, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v59, (const void **)v20, (*(_DWORD *)(v3 + 12) >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v18, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v60, (const void **)v18, (*(_DWORD *)(v3 + 12) >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v16, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v61, (const void **)v16, (unsigned __int16)(*(_DWORD *)(v3 + 12) >> 10));
  std::string::basic_string[abi:nn180100]<0>(v14, "enableStackShadow");
  _agcFieldString<unsigned int>(&v62, (const void **)v14, (*(_DWORD *)(v3 + 12) >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v12, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v63, (const void **)v12, *(_DWORD *)(v3 + 12) >> 31);
  std::string::basic_string[abi:nn180100]<0>(v10, "flatVaryingAnalysis");
  _agcFieldString<unsigned long long>(&v64, (const void **)v10, (*(void *)(v3 + 16) >> 21) & 1);
  std::string::basic_string[abi:nn180100]<0>(v8, "positionInvariance");
  _agcFieldString<unsigned long long>(&v65, (const void **)v8, (*(void *)(v3 + 16) >> 23) & 1);
  std::string::basic_string[abi:nn180100]<0>(v6, "enableFMAFold");
  _agcFieldString<unsigned long long>(&v66, (const void **)v6, (*(void *)(v3 + 16) >> 24) & 1);
  _agcGroupWithHeader(a2, (uint64_t)v40, (uint64_t)&v48, 19);
  uint64_t v5 = 456;
  do
  {
    if (v48.__r_.__value_.__s.__data_[v5 - 1] < 0) {
      operator delete(*(void **)&v47[v5 + 128]);
    }
    v5 -= 24;
  }
  while (v5);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v35 < 0) {
    operator delete(v34[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v43 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v45[0]) < 0) {
    operator delete(v44[0]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
}

uint64_t AGCLLVMAGPVertexShader::debugTraceBufferEnabled(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned __int8 *)this + 9459);
}

BOOL AGCLLVMAGPVertexShader::isPointSizePresent(uint64_t a1, uint64_t a2)
{
  return a2 || *(unsigned char *)(a1 + 9458) != 0;
}

uint64_t AGCLLVMObject::getTextureWriteFPRoundingMode(AGCLLVMObject *this)
{
  return 0;
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  unint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      uint64_t v8 = i[1];
      ++i;
      uint64_t v7 = v8;
    }
    return i;
  }
  uint64_t v10 = MEMORY[0x1CB79F270](a3 + 17, 8);
  uint64_t v11 = v10;
  uint64_t v12 = v10 + 16;
  if (a3) {
    memcpy((void *)(v10 + 16), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  *(void *)uint64_t v11 = a3;
  *(_DWORD *)(v11 + 8) = 0;
  *unint64_t i = v11;
  ++*((_DWORD *)a1 + 3);
  for (unint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::append(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2 + a2 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2)
  {
    uint64_t v3 = (_DWORD *)(*(void *)result + 4 * v2);
    uint64_t v4 = a2;
    do
    {
      *v3++ = -1;
      --v4;
    }
    while (v4);
    LODWORD(v2) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v2 + a2;
  return result;
}

uint64_t llvm::IRBuilderBase::CreateSub(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 9) + 72))(*((void *)this + 9));
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

void *AGCLLVMAGPVertexShaderRegular::AGCLLVMAGPVertexShaderRegular(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t result = (void *)AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader(a1, a2 + 1, a3, a4, a5, a6);
  uint64_t v8 = *a2;
  *uint64_t result = *a2;
  *(void *)((char *)result + *(void *)(v8 - 24)) = a2[13];
  *(void *)((char *)result + *(void *)(*result - 24) + 32) = a2[14];
  return result;
}

uint64_t AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2 = AGCLLVMUserVertexShader::setupShaderWrapper(this);
  if (*((unsigned char *)this + 14))
  {
    uint64_t v3 = (char *)this + *((void *)*this - 3);
    if (**(void **)(*((void *)this[22] + 3) + 16) == *((void *)v3 + 22))
    {
      uint64_t v4 = (unsigned char *)*((void *)v3 + 50);
      if (v4[1745]) {
        (*(void (**)(unsigned char *, llvm::Function *))(*(void *)v4 + 376))(v4, this[21]);
      }
    }
  }
  if (MGGetBoolAnswer())
  {
    uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_MTL_TESSELLATION_VS_WRITETHROUGH", v5);
    if (Value)
    {
      if (*Value != 48 && atoi(Value))
      {
        uint64_t v7 = *(uint64_t *)((char *)this + *((void *)*this - 3) + 400);
        (*(void (**)(uint64_t, llvm::Function *))(*(void *)v7 + 408))(v7, this[21]);
      }
    }
  }
  return v2;
}

void AGCLLVMAGPVertexShaderRegular::simplifyGenericIR(AGCLLVMAGPVertexShaderRegular *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*((_DWORD *)this + 10) > 1u)
  {
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 336), *(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368));
    AGCLLVMObject::printIR((AGCLLVMAGPVertexShaderRegular *)((char *)this + *(void *)(*(void *)this - 24)), "After inliner in AGCLLVMAGPVertexShaderRegular::simplifyGenericIR", 0);
    *((_DWORD *)this + 10) = 1;
  }
  uint64_t v10 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v11 = (llvm::Module *)*((void *)v10 + 46);
  int v12 = *(unsigned __int8 *)(*((void *)v10 + 58) + 378);
  SimplifyGenericIR(v11, v12, a3, a4, a5, a6, a7, a8, a9);
}

BOOL AGCLLVMAGPVertexShaderRegular::constructReply(AGCLLVMAGPVertexShaderRegular *this)
{
  BOOL result = AGCDeserializedReply::deserialize((AGCLLVMAGPVertexShaderRegular *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160));
  if (result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMAGPVertexShaderRegular *)((char *)this
                                                                        + *(void *)(*(void *)this - 24)));
    int v3 = AGCLLVMUserObject::constructFlatReply(this);
    int v4 = AGCLLVMUserVertexShader::constructFlatReply(this);
    int v5 = AGCLLVMAGPVertexShader::constructMTLVertexInfo(this);
    uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v7 = (flatbuffers::FlatBufferBuilder *)(v6 + 2472);
    v6[2542] = 1;
    int v8 = *((_DWORD *)v6 + 626) - *((_DWORD *)v6 + 630) + *((_DWORD *)v6 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v6 + 2472), v3);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v7, v4);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLVertexInfo>(v7, v5);
    char v9 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
    int v10 = flatbuffers::FlatBufferBuilder::EndTable(v7, v8);
    flatbuffers::FlatBufferBuilder::Finish(v9, v10, v11);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMAGPVertexShaderRegular *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
    return AGCLLVMAGPVertexShader::validateReply(this);
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShaderRegular::initCompile(AGCLLVMAGPVertexShaderRegular *this)
{
  uint64_t inited = AGCLLVMAGPVertexShader::initCompile(this);
  if (inited)
  {
    uint64_t v3 = *(void *)this;
    if (!*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1734))
    {
      uint64_t Function = llvm::Module::getFunction();
      *((void *)this + 1257) = Function;
      if (!Function) {
        *((void *)this + 1257) = llvm::Module::getFunction();
      }
      uint64_t v5 = llvm::Module::getFunction();
      *((void *)this + 1258) = v5;
      if (!v5) {
        *((void *)this + 1258) = llvm::Module::getFunction();
      }
      uint64_t v6 = llvm::Module::getFunction();
      *((void *)this + 1259) = v6;
      if (!v6) {
        *((void *)this + 1259) = llvm::Module::getFunction();
      }
      uint64_t v7 = llvm::Module::getFunction();
      *((void *)this + 1260) = v7;
      uint64_t v3 = *(void *)this;
      if (!v7)
      {
        *((void *)this + 1260) = llvm::Module::getFunction();
        uint64_t v3 = *(void *)this;
      }
    }
    if (*(unsigned char *)(*(void *)((char *)this + *(void *)(v3 - 24) + 400) + 1754)) {
      AGCLLVMUserShader::setUniformAtomicsMode(this);
    }
  }
  return inited;
}

void *AGCLLVMAGPVertexShaderGen4::AGCLLVMAGPVertexShaderGen4(void *a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 1261), a2, *a3);
  BOOL result = AGCLLVMAGPVertexShaderRegular::AGCLLVMAGPVertexShaderRegular((uint64_t)a1, (uint64_t *)&off_1F2580500, (uint64_t)a3, a4, a5, a6);
  *a1 = &unk_1F25800A8;
  a1[1261] = &unk_1F2580400;
  a1[1265] = &unk_1F25804F0;
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getVertexInputIntrinsic(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      uint64_t result = AGCLLVMBuilder::getOrInsertFunction<>();
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getVertexInputCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v11 = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v13 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v11);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 448))(a1, a4);
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)v7 + 16), v7, 0, 0, (uint64_t)v9);
}

BOOL AGCLLVMGen3TargetLowerer::vertexInputNeedsBias(uint64_t a1, int a2)
{
  return (a2 - 1) < 2;
}

void AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(AGCLLVMUserVertexShader *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[8];
  for (uint64_t i = 641; i != 645; ++i)
  {
    uint64_t v6 = *((void *)this + i);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7) {
        MEMORY[0x1CB7A0760](v7, 0x1000C8052888210);
      }
      MEMORY[0x1CB7A0780](v6, 0x1010C4082113244);
    }
  }
  for (uint64_t j = 0; j != -3360; j -= 24)
  {
    uint64_t v9 = *(void *)((char *)this + j + 9416);
    if (v9 != -8192 && v9 != -4096 && v9 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserVertexShader *)((char *)this + j + 9400));
    }
  }
  uint64_t v11 = *((void *)this + 638);
  if (v11)
  {
    uint64_t v12 = *((void *)this + 639);
    int v13 = (void *)*((void *)this + 638);
    if (v12 != v11)
    {
      do
      {
        uint64_t v14 = *(void *)(v12 - 8);
        if (v14 != -8192 && v14 != -4096 && v14 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v12 - 24));
        }
        v12 -= 32;
      }
      while (v12 != v11);
      int v13 = (void *)*((void *)this + 638);
    }
    *((void *)this + 639) = v11;
    operator delete(v13);
  }
  char v17 = (void **)((char *)this + 4888);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v17);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 543);
  unsigned int v16 = (void *)*((void *)this + 540);
  if (v16)
  {
    *((void *)this + 541) = v16;
    operator delete(v16);
  }
  AGCLLVMUserShader::~AGCLLVMUserShader(this, a2 + 1);
}

uint64_t AGCLLVMUserVertexShader::AGCLLVMUserVertexShader(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = a1 + 4880;
  uint64_t v9 = AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)a1, a2 + 1, a3, "air.vertex", a4, a5, 0);
  uint64_t v10 = *a2;
  *uint64_t v9 = *a2;
  *(void *)(a1 + *(void *)(v10 - 24)) = a2[7];
  *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 32) = a2[8];
  LOBYTE(v10) = *(unsigned char *)(*(void *)(*(void *)(*(void *)a1 - 24) + a1 + 400) + 1762);
  *(void *)(a1 + 4320) = 0;
  *(_OWORD *)(a1 + 4328) = 0u;
  *(void *)(a1 + 4344) = a1 + 4360;
  *(void *)(a1 + 4352) = 0x800000000;
  *(void *)(a1 + 4872) = 0xFFFFFFFFLL;
  *(unsigned char *)uint64_t v8 = v10;
  *(_DWORD *)(a1 + 5012) = 0;
  *(_OWORD *)(a1 + 4968) = 0u;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_OWORD *)(a1 + 4904) = 0u;
  *(_OWORD *)(a1 + 4920) = 0u;
  *(_OWORD *)(a1 + 4888) = 0u;
  *(_OWORD *)(a1 + 4994) = 0u;
  *(unsigned char *)(v8 + 136) = 1;
  *(void *)(a1 + 5024) = 0;
  *(_WORD *)(v8 + 153) = 0;
  *(unsigned char *)(v8 + 181) = 0;
  *(_DWORD *)(a1 + 5056) = 0;
  *(void *)(a1 + 5064) = llvm::ConstantInt::get();
  *(void *)(a1 + 5072) = llvm::ConstantInt::get();
  *(_WORD *)(a1 + 5080) = 0;
  *(unsigned char *)(v8 + 202) = 0;
  *(_DWORD *)(a1 + 5084) = 1;
  *(_DWORD *)(a1 + 5092) = 0;
  *(unsigned char *)(a1 + 5096) = 0;
  *(_OWORD *)(a1 + 5180) = 0u;
  *(_OWORD *)(a1 + 5168) = 0u;
  *(_OWORD *)(a1 + 5152) = 0u;
  *(_OWORD *)(a1 + 5136) = 0u;
  *(_OWORD *)(a1 + 5120) = 0u;
  *(_OWORD *)(a1 + 5104) = 0u;
  *(_DWORD *)(a1 + 5196) = -1;
  *(_OWORD *)(a1 + 5200) = 0u;
  *(void *)(a1 + 5216) = llvm::ConstantInt::get();
  *(void *)(a1 + 5224) = llvm::ConstantInt::get();
  uint64_t v11 = 6064;
  do
  {
    uint64_t v12 = (void *)(a1 + v11);
    v12[1] = 0;
    v12[2] = 0;
    *uint64_t v12 = 4;
    uint64_t v13 = a1 + v11 + 24;
    v11 += 24;
  }
  while (v13 != a1 + 9424);
  uint64_t v14 = a3 + 168;
  int v15 = *(char *)(a3 + 191);
  if (v15 < 0)
  {
    if (*(void *)(a3 + 176) != 20)
    {
LABEL_17:
      BOOL v21 = 0;
      goto LABEL_18;
    }
    uint64_t v14 = *(void *)v14;
  }
  else if (v15 != 20)
  {
    goto LABEL_17;
  }
  uint64_t v16 = *(void *)v14;
  uint64_t v17 = *(void *)(v14 + 8);
  int v18 = *(_DWORD *)(v14 + 16);
  BOOL v21 = v16 == 0x535F786574726556 && v17 == 0x6F72505F65746174 && v18 == 1835102823;
LABEL_18:
  *(unsigned char *)(v8 + 176) = v21;
  return a1;
}

uint64_t AGCLLVMUserVertexShader::wrapperCallingConvention(AGCLLVMUserVertexShader *this)
{
  return 102;
}

uint64_t AGCLLVMUserVertexShader::markInvariantOutputs(AGCLLVMUserVertexShader *this)
{
  uint64_t v2 = (char *)this + 5056;
  if (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_POS_INVARIANCE", v3))
  {
    BOOL v12 = MGGetBoolAnswer()
       && (uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_POS_INVARIANCE", v10)) != 0
       && *Value != 48
       && atoi(Value) != 0;
    v2[1] = v12;
  }
  if (*v2 || (v2[1] || v2[3]) && *((unsigned char *)this + 32))
  {
    SimplifyGenericIR(*(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368), *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 378), v4, v5, v6, v7, v8, v9, (char)__p);
    uint64_t v13 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
    if (*(void *)(v13 + 1392)) {
      strlen(*(const char **)(v13 + 1392));
    }
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      BOOL v15 = *((unsigned char *)this + 32) && (!v2[3] || v2[1]) && v2[2] != 0;
      uint64_t v16 = *(void *)this;
      uint64_t v17 = *(void **)((char *)this + *(void *)(*(void *)this - 24) + 368);
      std::string __p = 0;
      unsigned int v34 = 0;
      v37[0] = 0;
      v37[1] = 0;
      uint64_t v35 = 0;
      unsigned int v36 = v37;
      v37[2] = v17;
      BOOL v38 = v15;
      uint64_t v18 = *(void *)(Function + 8);
      if (v18)
      {
        do
        {
          char v19 = (llvm::Value **)(*(void *)(v18 + 24) - 32 * (*(_DWORD *)(*(void *)(v18 + 24) + 20) & 0x7FFFFFF));
          unint64_t v20 = (void *)((char *)*v19 + 24);
          if (*((_DWORD *)*v19 + 8) >= 0x41u) {
            unint64_t v20 = (void *)*v20;
          }
          if ((*(_DWORD *)v20 & 0xFFFFFFFC) == 0) {
            MarkInvariants::addSeed((uint64_t *)&__p, v19[4], 0);
          }
          uint64_t v18 = *(void *)(v18 + 8);
        }
        while (v18);
        uint64_t v16 = *(void *)this;
      }
      if ((MarkInvariants::markInvariant((MarkInvariants *)&__p, (llvm::Type **)((char *)this + *(void *)(v16 - 24) + 32)) & 1) == 0)
      {
        uint64_t v22 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
        uint64_t v23 = v22 + 24;
        for (uint64_t i = *(void *)(v22 + 32); i != v23; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v25 = i - 56;
          if (!i) {
            uint64_t v25 = 0;
          }
          uint64_t v26 = v25 + 72;
          for (uint64_t j = *(void *)(v25 + 80); j != v26; uint64_t j = *(void *)(j + 8))
          {
            uint64_t v28 = j - 24;
            if (!j) {
              uint64_t v28 = 0;
            }
            uint64_t v29 = *(void *)(v28 + 48);
            if (v29 != v28 + 40)
            {
LABEL_53:
              while (j != v26)
              {
                if (v29) {
                  unsigned int v30 = (llvm::Instruction *)(v29 - 24);
                }
                else {
                  unsigned int v30 = 0;
                }
                if (llvm::FPMathOperator::classof((uint64_t)v30)) {
                  llvm::Instruction::setFast(v30);
                }
                uint64_t v29 = *(void *)(v29 + 8);
                uint64_t v31 = j - 24;
                if (!j) {
                  uint64_t v31 = 0;
                }
                if (v29 == v31 + 40)
                {
                  while (1)
                  {
                    uint64_t j = *(void *)(j + 8);
                    if (j == v26) {
                      goto LABEL_54;
                    }
                    uint64_t v32 = j - 24;
                    if (!j) {
                      uint64_t v32 = 0;
                    }
                    uint64_t v29 = *(void *)(v32 + 48);
                    if (v29 != v32 + 40) {
                      goto LABEL_53;
                    }
                  }
                }
              }
              break;
            }
          }
LABEL_54:
          ;
        }
      }
      std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v37[0]);
      if (__p)
      {
        unsigned int v34 = __p;
        operator delete(__p);
      }
    }
  }
  return 1;
}

uint64_t AGCLLVMUserVertexShader::wrapperFunctionType(AGCLLVMUserVertexShader *this)
{
  uint64_t v1 = *((unsigned int *)this + 1256);
  if (v1)
  {
    uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24) + 32;
    uint64_t v3 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(*((unsigned int *)this + 1256));
    uint64_t v4 = 0;
    do
    {
      *(void *)&v3[v4] = *((void *)v2 + 21);
      v4 += 8;
    }
    while (8 * v1 != v4);
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = llvm::FunctionType::get();
  if (v5) {
    operator delete(v5);
  }
  return v6;
}

uint64_t AGCLLVMUserVertexShader::setupShaderWrapper(llvm::Function **this)
{
  v13[16] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = AGCLLVMUserObject::setupShaderWrapper((AGCLLVMUserObject *)this);
  if (v2)
  {
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v4 = (llvm::Function *)Function;
      v12[0] = v13;
      v12[1] = (void *)0x1000000000;
      uint64_t v5 = this[21];
      if (*((unsigned char *)v5 + 18))
      {
        llvm::Function::BuildLazyArguments(this[21]);
        uint64_t v7 = this[21];
        uint64_t v6 = *((void *)v5 + 11);
        if (*((_WORD *)v7 + 9)) {
          llvm::Function::BuildLazyArguments(v7);
        }
        uint64_t v5 = v7;
      }
      else
      {
        uint64_t v6 = *((void *)v5 + 11);
      }
      uint64_t v8 = *((void *)v5 + 11) + 40 * *((void *)v5 + 12);
      while (v6 != v8)
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v12, v6);
        v6 += 40;
      }
      uint64_t v9 = *((void *)v4 + 1);
      while (v9)
      {
        uint64_t v10 = *(llvm::Instruction **)(v9 + 24);
        uint64_t v9 = *(void *)(v9 + 8);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v10);
      }
      llvm::Function::eraseFromParent(v4);
      if (v12[0] != v13) {
        free(v12[0]);
      }
    }
  }
  return v2;
}

uint64_t AGCLLVMUserVertexShader::constructFlatReply(AGCLLVMUserVertexShader *this)
{
  uint64_t v1 = this;
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *((unsigned int *)this + 1298);
  if (!*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1735))
  {
    if (*((_DWORD *)this + 1298))
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      do
      {
        unint64_t v20 = (char *)v1 + 8 * v19;
        BOOL v21 = (unsigned int *)*((void *)v20 + 641);
        unsigned int v22 = *v21;
        if (*v21)
        {
          unsigned int v23 = 0;
          unint64_t v76 = (unsigned int **)(v20 + 5128);
          do
          {
            uint64_t v24 = *((void *)v21 + 1);
            int v25 = *(_DWORD *)(v24 + 4 * v23);
            if (v23 + 1 >= v22)
            {
              int v27 = 1;
            }
            else
            {
              int v26 = v22 - v23;
              int v27 = 1;
              while (v25 + v27 == *(_DWORD *)(v24 + 4 * (v23 + v27)))
              {
                if (v26 == ++v27)
                {
                  int v27 = v26;
                  break;
                }
              }
            }
            uint64_t v28 = (char *)v1 + *(void *)(*(void *)v1 - 24);
            uint64_t v29 = (flatbuffers::FlatBufferBuilder *)(v28 + 2472);
            v28[2542] = 1;
            int v30 = *((_DWORD *)v28 + 626) - *((_DWORD *)v28 + 630) + *((_DWORD *)v28 + 628);
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v28 + 309, 4, v27);
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v29, 6, v25);
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v29, 8, v19);
            flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v29, 10, v23);
            int v31 = flatbuffers::FlatBufferBuilder::EndTable(v29, v30);
            int v38 = v31;
            if (v17 >= v18)
            {
              uint64_t v39 = (v17 - v16) >> 2;
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62) {
LABEL_84:
              }
                abort();
              if ((v18 - v16) >> 1 > v40) {
                unint64_t v40 = (v18 - v16) >> 1;
              }
              if ((unint64_t)(v18 - v16) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v40;
              }
              if (v41)
              {
                if (v41 >> 62) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                unsigned int v42 = (char *)operator new(4 * v41);
              }
              else
              {
                unsigned int v42 = 0;
              }
              char v43 = &v42[4 * v39];
              *(_DWORD *)char v43 = v38;
              uint64_t v44 = v43 + 4;
              while (v17 != v16)
              {
                int v45 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *((_DWORD *)v43 - 1) = v45;
                v43 -= 4;
              }
              uint64_t v18 = &v42[4 * v41];
              if (v16) {
                operator delete(v16);
              }
              uint64_t v16 = v43;
              uint64_t v17 = v44;
              uint64_t v1 = this;
            }
            else
            {
              *(_DWORD *)uint64_t v17 = v31;
              v17 += 4;
            }
            printMessage((char **)&AGCPrinter, "TF entry: (buf %d, slot %d, size %d) =  uvs(%d)", v32, v33, v34, v35, v36, v37, v19);
            v23 += v27;
            BOOL v21 = *v76;
            unsigned int v22 = **v76;
          }
          while (v22 > v23);
          unint64_t v2 = *((unsigned int *)v1 + 1298);
        }
        ++v19;
      }
      while (v19 < v2);
      goto LABEL_56;
    }
LABEL_55:
    uint64_t v16 = 0;
    uint64_t v17 = 0;
LABEL_56:
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    goto LABEL_57;
  }
  if (!*((_DWORD *)this + 1298)) {
    goto LABEL_55;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = this;
  do
  {
    int v8 = **((_DWORD **)v7 + v6 + 641);
    if ((unint64_t)v4 >= v5)
    {
      uint64_t v9 = (v4 - v3) >> 2;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        goto LABEL_84;
      }
      if ((uint64_t)(v5 - (void)v3) >> 1 > v10) {
        unint64_t v10 = (uint64_t)(v5 - (void)v3) >> 1;
      }
      if (v5 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11) {
        unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = (char *)(v11 + 4 * v9);
      *(_DWORD *)uint64_t v13 = v8;
      uint64_t v14 = v13 + 4;
      while (v4 != v3)
      {
        int v15 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *((_DWORD *)v13 - 1) = v15;
        v13 -= 4;
      }
      unint64_t v5 = v11 + 4 * v12;
      if (v3) {
        operator delete(v3);
      }
      uint64_t v3 = v13;
      uint64_t v4 = v14;
    }
    else
    {
      *(_DWORD *)uint64_t v4 = v8;
      v4 += 4;
    }
    ++v6;
    uint64_t v7 = this;
  }
  while (v6 < *((unsigned int *)this + 1298));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v1 = this;
LABEL_57:
  unint64_t v77 = (char *)v1 + 4880;
  char v46 = *((unsigned char *)v1 + 4880);
  std::string __p = 0;
  unsigned int v80 = 0;
  uint64_t v81 = 0;
  v82[0] = (char *)v83;
  v82[1] = (char *)0x800000000;
  v83[64] = 0x1FFFFFFFFLL;
  char v84 = v46;
  v91[7] = 0;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  memset(v91, 0, 26);
  unsigned __int8 v92 = 1;
  if (*((_DWORD *)v1 + 1088))
  {
    unint64_t v47 = *((void *)v1 + 543);
    do
    {
      GenericVaryingAllocator::addVarying((uint64_t)&__p, v47);
      v47 += 64;
    }
    while (v47 < *((void *)v1 + 543) + ((unint64_t)*((unsigned int *)v1 + 1088) << 6));
  }
  GenericVaryingAllocator::allocate((GenericVaryingAllocator *)&__p, *(const AGCLLVMTargetLowerer **)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400));
  GenericVaryingAllocator::serialize((GenericVaryingAllocator *)&__p, (AGCLLVMUserVertexShader *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 2472));
  if (v80 == __p) {
    std::string v48 = &flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
  }
  else {
    std::string v48 = __p;
  }
  int v74 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)v1 + *(void *)(*(void *)v1 - 24) + 2472, (uint64_t)v48, (v80 - (unsigned char *)__p) >> 2);
  std::string v49 = (char *)v1 + *(void *)(*(void *)v1 - 24);
  std::string v50 = (flatbuffers::FlatBufferBuilder *)(v49 + 2472);
  v49[2542] = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v49 + 2472), v17 - v16, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v49 + 2472), v17 - v16, 4uLL);
  uint64_t v51 = v17 - v16;
  if (v51) {
    std::string v52 = v16;
  }
  else {
    std::string v52 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderTransformFeedbackVarying>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderTransformFeedbackVarying>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderTransformFeedbackVarying>> const&)::t;
  }
  if (v51)
  {
    uint64_t v53 = v51 >> 2;
    std::string v54 = v52 - 4;
    do
    {
      uint64_t v55 = v53 - 1;
      int v56 = *(_DWORD *)&v54[4 * v53];
      flatbuffers::FlatBufferBuilder::Align(v50, 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v50, *((_DWORD *)v49 + 626) - *((_DWORD *)v49 + 630) + *((_DWORD *)v49 + 628) - v56 + 4);
      uint64_t v53 = v55;
    }
    while (v55);
  }
  v49[2542] = 0;
  int v57 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v50, (unint64_t)v51 >> 2);
  if (v4 == v3) {
    std::string v58 = (const unsigned __int8 *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
  }
  else {
    std::string v58 = (const unsigned __int8 *)v3;
  }
  int v73 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned int>((AGCLLVMUserVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472), v58, (v4 - v3) >> 2);
  std::string v59 = (char *)this + *(void *)(*(void *)this - 24);
  std::string v60 = (flatbuffers::FlatBufferBuilder *)(v59 + 2472);
  v59[2542] = 1;
  int v61 = *((_DWORD *)v59 + 626) - *((_DWORD *)v59 + 630) + *((_DWORD *)v59 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v59 + 309, 4, v88);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 6, SDWORD1(v88));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 8, DWORD2(v88) + *((_DWORD *)this + 1257));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 16, SDWORD1(v89));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 10, SDWORD2(v86));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 12, SHIDWORD(v86));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 14, v87);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 18, SHIDWORD(v87));
  int v62 = flatbuffers::FlatBufferBuilder::EndTable(v60, v61);
  std::string v63 = (char *)this + *(void *)(*(void *)this - 24);
  std::string v64 = (flatbuffers::FlatBufferBuilder *)(v63 + 2472);
  v63[2542] = 1;
  LODWORD(v60) = *((_DWORD *)v63 + 626) - *((_DWORD *)v63 + 630) + *((_DWORD *)v63 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v63 + 309, 4, v91[0]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 6, v91[1]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 8, v91[2]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 16, v91[5]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 10, SDWORD2(v89));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 12, SHIDWORD(v89));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 14, v90);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 18, SHIDWORD(v90));
  LODWORD(v64) = flatbuffers::FlatBufferBuilder::EndTable(v64, (__int16)v60);
  uint64_t v65 = *(void *)this;
  std::string v66 = (char *)this + *(void *)(*(void *)this - 24);
  v66[2542] = 1;
  int v67 = v57;
  int v68 = *((_DWORD *)v66 + 626) - *((_DWORD *)v66 + 630) + *((_DWORD *)v66 + 628);
  int v69 = (*(uint64_t (**)(AGCLLVMUserVertexShader *))(v65 + 544))(this);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v66 + 2472), v69);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)v66 + 309, 6, v92, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)v66 + 309, 8, v77[152], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v66 + 309, 10, *((_DWORD *)this + 1259));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v66 + 309, 12, *((_DWORD *)this + 1260));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v66 + 309, 14, *((_DWORD *)this + 1261));
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v66 + 2472), 16, v62);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v66 + 2472), 18, (int)v64);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)v66 + 309, 20, LOBYTE(v91[6]), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v66 + 2472), 22, v74);
  if (v67)
  {
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v66 + 2472), 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v66 + 309, 24, *((_DWORD *)v66 + 626) - *((_DWORD *)v66 + 630) + *((_DWORD *)v66 + 628) - v67 + 4);
  }
  int v70 = *((_DWORD *)this + 1298);
  if (v70)
  {
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v66 + 309, 26, v70);
    if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1735)) {
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v66 + 2472), 28, v73);
    }
  }
  uint64_t v71 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v66 + 2472), v68);
  uint64_t v78 = (void **)&v85;
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v78);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector(v82);
  if (__p)
  {
    unsigned int v80 = __p;
    operator delete(__p);
  }
  if (v3) {
    operator delete(v3);
  }
  if (v16) {
    operator delete(v16);
  }
  return v71;
}

uint64_t AGCLLVMUserVertexShader::setupShaderInputs(AGCLLVMUserVertexShader *this)
{
  unint64_t v2 = (AGCLLVMUserVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v3 = *(void *)(*((void *)this + 22) + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(v4 + 40);
  if (v5) {
    unint64_t v6 = (llvm::Instruction *)(v5 - 24);
  }
  else {
    unint64_t v6 = 0;
  }
  llvm::IRBuilderBase::SetInsertPoint(v2, v6);
  uint64_t v7 = *((void *)this + 22);
  if (*(_WORD *)(v7 + 18))
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    uint64_t v9 = *((void *)this + 22);
    uint64_t v8 = *(void *)(v7 + 88);
    if (*(_WORD *)(v9 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    }
    uint64_t v7 = v9;
  }
  else
  {
    uint64_t v8 = *(void *)(v7 + 88);
  }
  for (uint64_t i = *(void *)(v7 + 88) + 40 * *(void *)(v7 + 96); v8 != i; v8 += 40)
  {
    uint64_t v11 = *(void *)(*((void *)this + 11) + 8 * *(unsigned int *)(v8 + 32));
    if (*(void *)(v8 + 8)) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12
      && isStringMDNode(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8), "air.vertex_transform_feedback"))
    {
      uint64_t v16 = 0;
      int v15 = 0;
      LODWORD(v14) = 3;
      parseMDInt(0, v11, (unsigned int *)&v14, (_DWORD *)&v16 + 1);
      LODWORD(v14) = 5;
      parseMDInt(0, v11, (unsigned int *)&v14, &v16);
      LODWORD(v14) = 7;
      parseMDInt(0, v11, (unsigned int *)&v14, &v15);
      operator new();
    }
  }
  return 1;
}

uint64_t AGCLLVMUserVertexShader::addWrapperPostfix(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)this - 24) + this + 400);
  if (*(unsigned char *)(v1 + 1813))
  {
    if (*(unsigned char *)(v1 + 1785))
    {
      unint64_t v2 = (void *)this;
      if (!*(unsigned char *)(this + 3712))
      {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 376))(this);
        if ((this & 1) == 0)
        {
          llvm::Type::getVoidTy(*(llvm::Type **)((char *)v2 + *(void *)(*v2 - 24) + 392), v3);
          llvm::FunctionType::get();
          llvm::Module::getOrInsertFunction();
          uint64_t v4 = (char *)v2 + *(void *)(*v2 - 24);
          __int16 v7 = 257;
          return (uint64_t)llvm::IRBuilderBase::CreateCall((uint64_t)(v4 + 40), **(void **)(*(void *)v5 + 16), v5, 0, 0, (uint64_t)v6);
        }
      }
    }
  }
  return this;
}

uint64_t AGCLLVMUserVertexShader::createVIRead(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v6 = *((void *)v5 + 50);
  long long v9 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v5 + 40));
  int v11 = *((_DWORD *)v5 + 34);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)v6 + 456))(v6, &v9, a2, a3);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  int v11 = (BOOL *)(a1 + 9456);
  BOOL v12 = (BOOL *)(a1 + 5057);
  uint64_t v13 = (void *)AGCLLVMUserVertexShader::AGCLLVMUserVertexShader(a1, a2 + 1, a3, a4, 0);
  uint64_t v14 = *a2;
  *uint64_t v13 = *a2;
  *(void *)(a1 + *(void *)(v14 - 24)) = a2[10];
  *(void *)(*(void *)(*(void *)a1 - 24) + a1 + 32) = a2[11];
  *(_DWORD *)(a1 + 9440) = 0;
  *(_OWORD *)(a1 + 9424) = 0u;
  *(_DWORD *)(a1 + 9444) = 16;
  *(void *)(a1 + 9456) = 0;
  *(void *)(a1 + 9464) = a1 + 9480;
  *(void *)(a1 + 9472) = 0x1000000000;
  *(void *)(a1 + 9992) = a1 + 10008;
  *(void *)(a1 + 10000) = 0x400000000;
  *(_WORD *)(a1 + 10049) = 0;
  if (a5 && a6)
  {
    int v15 = (int *)((char *)a5 + *a5);
    uint64_t v16 = (int *)((char *)a6 + *a6);
    uint64_t v17 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v17 >= 5u && (uint64_t v18 = v17[2]) != 0) {
      unint64_t v19 = (int *)((char *)v15 + v18 + *(unsigned int *)((char *)v15 + v18));
    }
    else {
      unint64_t v19 = 0;
    }
    unint64_t v20 = (unsigned __int16 *)((char *)v16 - *v16);
    uint64_t v44 = v12;
    int v45 = v11;
    if (*v20 >= 5u && (uint64_t v21 = v20[2]) != 0) {
      unsigned int v22 = (char *)v16 + v21 + *(unsigned int *)((char *)v16 + v21);
    }
    else {
      unsigned int v22 = 0;
    }
    if (*v19)
    {
      unint64_t v23 = 0;
      uint64_t v24 = v22 + 4;
      int v25 = (const char *)(v19 + 2);
      int v26 = v19 + 2;
      do
      {
        int v27 = *(_DWORD *)&v24[4 * v23];
        uint64_t v28 = *((unsigned int *)v25 - 1);
        size_t v29 = strlen(&v25[v28]);
        *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(a1 + 9424), (char *)v26 + v28, v29)+ 8) = v27;
        ++v23;
        ++v26;
        v25 += 4;
      }
      while (v23 < *v19);
    }
    BOOL v12 = v44;
    int v11 = v45;
    *int v45 = (*(_DWORD *)(a4 + 16) & 0x40000) != 0;
  }
  *(_DWORD *)(a1 + 5048) = *(unsigned __int8 *)(a4 + 16);
  *(_DWORD *)(a1 + 5052) = *(_DWORD *)(a4 + 8);
  AGCLLVMUserShader::enableStatistics(a1, *(_DWORD *)(a4 + 12) & 1, (*(_DWORD *)(a4 + 12) >> 1) & 1);
  *(unsigned char *)(a1 + 18) = (*(unsigned char *)(a4 + 12) & 8) != 0;
  uint64_t v30 = *(void *)a1;
  *(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 2760) = (*(_DWORD *)(a4 + 12) & 0x4000000) != 0;
  *(void *)(a1 + 3304) = *(void *)a4;
  *(_DWORD *)(a1 + 5088) = (*(_DWORD *)(a4 + 16) >> 12) & 3;
  unsigned int v31 = (*(_DWORD *)(a4 + 16) >> 14) & 0xF;
  *(_DWORD *)(a1 + 5084) = v31;
  if (*(unsigned char *)(*(void *)(*(void *)(v30 - 24) + a1 + 400) + 1753)) {
    BOOL v32 = v31 > 1;
  }
  else {
    BOOL v32 = 0;
  }
  int v33 = v32;
  v12[25] = v33;
  void v12[4] = (*(_DWORD *)(a4 + 16) & 0x8000000) != 0;
  if (v33 == 1) {
    *(_DWORD *)(a1 + 5088) = 0;
  }
  *(unsigned char *)(a1 + 20) = (*(unsigned char *)(a4 + 12) & 4) != 0;
  v11[1] = (*(_DWORD *)(a4 + 16) & 0x80000) != 0;
  *(_DWORD *)(a1 + 10040) = (*(_DWORD *)(a4 + 12) >> 4) & 7;
  *(_DWORD *)(a1 + 10044) = *(_DWORD *)(a4 + 12) >> 31;
  v11[595] = (*(_DWORD *)(a4 + 12) & 0x40000000) != 0;
  v11[2] = (*(_DWORD *)(a4 + 16) & 0x100000) != 0;
  v11[592] = (*(_DWORD *)(a4 + 12) & 0x80) != 0;
  *BOOL v12 = (*(_DWORD *)(a4 + 16) & 0x800000) != 0;
  v12[1] = *(unsigned char *)(a4 + 19) & 1;
  v12[3] = (*(_DWORD *)(a4 + 16) & 0x2000000) != 0;
  void v11[3] = (*(_DWORD *)(a4 + 16) & 0x4000000) != 0;
  *(unsigned char *)(a1 + 3712) = *(unsigned char *)(a4 + 13) & 1;
  *(unsigned char *)(a1 + 3713) = (*(_DWORD *)(a4 + 12) & 0x200) != 0;
  v11[594] = (*(_DWORD *)(a4 + 12) & 0x20000000) != 0;
  uint64_t v34 = *(llvm::Module **)(*(void *)(v30 - 24) + a1 + 368);
  char v46 = "llvm.module.flags";
  __int16 v47 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v34, (const llvm::Twine *)&v46);
  if (NamedMetadata)
  {
    uint64_t v36 = (llvm::NamedMDNode *)NamedMetadata;
    unsigned int v37 = 0;
LABEL_25:
    if (v37 < llvm::NamedMDNode::getNumOperands(v36))
    {
      uint64_t Operand = llvm::NamedMDNode::getOperand(v36);
      uint64_t v39 = 8 - 8 * *(unsigned int *)(Operand + 8);
      do
      {
        if (!v39)
        {
          ++v37;
          goto LABEL_25;
        }
        BOOL v40 = isStringMDNode(*(llvm::MDString **)(Operand + v39), "agx.allow_mismatched_component_counts");
        v39 += 8;
      }
      while (!v40);
      uint64_t v41 = *(void *)(*(void *)(Operand - 8 * *(unsigned int *)(Operand + 8) + 16) + 128);
      unsigned int v42 = (void *)(v41 + 24);
      if (*(_DWORD *)(v41 + 32) >= 0x41u) {
        unsigned int v42 = (void *)*v42;
      }
      if (*v42) {
        v11[593] = 1;
      }
    }
  }
  return a1;
}

uint64_t AGCLLVMAGPVertexShader::improveDMAPromotionOpportunity(AGCLLVMAGPVertexShader *this)
{
  return 1;
}

void *AGCLLVMAGPVertexShader::createAGPVertexShaderObject(uint64_t a1, llvm::Module *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = "air.vertex";
  __int16 v15 = 259;
  uint64_t NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)&v14);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  if (*(_DWORD *)(Operand + 8) == 4
    && isStringMDNode(*(llvm::MDString **)(*(void *)(Operand - 8) - 8 * *(unsigned int *)(*(void *)(Operand - 8) + 8)), "air.patch"))
  {
    uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, llvm::Module *, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 32) + 88))(*(void *)(a1 + 32), a1, this, a3, a4, a5);
    if (!result) {
      return result;
    }
    return (void *)((char *)result + *(void *)(*result - 24));
  }
  uint64_t v13 = **(void **)(a1 + 32);
  if ((*(unsigned char *)(a3 + 18) & 0x20) == 0) {
    return (void *)(*(uint64_t (**)(void))(v13 + 72))();
  }
  uint64_t result = (void *)(*(uint64_t (**)(void))(v13 + 80))();
  if (result) {
    return (void *)((char *)result + *(void *)(*result - 24));
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShader::constructFlatVertexInputs(AGCLLVMAGPVertexShader *this)
{
  return 0;
}

uint64_t AGCLLVMAGPVertexShader::getNextUnlinkedVarying(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 9456) || !*(_DWORD *)(a1 + 9436)) {
    return 0;
  }
  uint64_t v4 = *(size_t ***)(a1 + 9424);
  if (*(_DWORD *)(a1 + 9432))
  {
    while (1)
    {
      uint64_t v5 = *v4;
      if (*v4 && v5 + 1 != 0) {
        break;
      }
      ++v4;
    }
  }
  else
  {
    uint64_t v5 = *v4;
  }
  unsigned int v8 = *((_DWORD *)v5 + 2);
  int v9 = BYTE2(v8);
  int v10 = HIBYTE(v8) & 0x7F;
  int v11 = v8 & 0xF;
  int v12 = BYTE1(v8);
  int v13 = *(_DWORD *)(a1 + 9460) + 1;
  *(_DWORD *)(a1 + 9460) = v13;
  BOOL v14 = v9 == 1;
  switch(v11)
  {
    case 0:
      if (v9 == 1) {
        int v2 = 5;
      }
      else {
        int v2 = 1;
      }
      break;
    case 1:
      BOOL v15 = v9 == 1;
      int v16 = 2;
      int v17 = 6;
      goto LABEL_22;
    case 2:
      BOOL v15 = v9 == 1;
      int v16 = 3;
      int v17 = 7;
      goto LABEL_22;
    case 3:
      if (v9 == 1) {
        int v2 = 19;
      }
      else {
        int v2 = 18;
      }
      break;
    case 5:
      BOOL v15 = v9 == 1;
      int v16 = 4;
      int v17 = 8;
LABEL_22:
      if (v15) {
        int v2 = v17;
      }
      else {
        int v2 = v16;
      }
      break;
    default:
      break;
  }
  *(_DWORD *)a2 = v10;
  *(_DWORD *)(a2 + 4) = v9;
  *(_DWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 12) = v12;
  *(_DWORD *)(a2 + 16) = v13;
  uint64_t v18 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(unsigned char *)(a2 + 56) = v14;
  *(_WORD *)(a2 + 57) = 0;
  *(_DWORD *)(a2 + 60) = v2;
  std::string::basic_string[abi:nn180100](&__dst, *v4 + 2, **v4);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)uint64_t v18 = __dst;
  *(void *)(a2 + 40) = v21;
  unint64_t v19 = *v4;
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer((llvm *)v19, (void *)(*v19 + 17));
  return 1;
}

uint64_t AGCLLVMAGPVertexShader::constructMTLVertexInfo(AGCLLVMAGPVertexShader *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 24);
  if (*((void *)v3 + 107))
  {
    uint64_t v4 = v3 + 856;
    uint64_t v5 = *((void *)v3 + 108);
    uint64_t v6 = v3 + 1416;
    if (v5) {
      uint64_t v6 = v4;
    }
  }
  else
  {
    uint64_t v6 = v3 + 1416;
  }
  unsigned int v8 = *(unsigned int **)v6;
  uint64_t v7 = *((void *)v6 + 1);
  if (v8) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    int v10 = (int *)((char *)v8 + *v8);
    int v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 >= 5u)
    {
      uint64_t v12 = v11[2];
      if (v11[2])
      {
        uint64_t v13 = *(unsigned int *)((char *)v10 + v12);
        if (*(int *)((char *)v10 + v12 + v13))
        {
          unint64_t v97 = 0;
          std::string __p = 0;
          BOOL v14 = 0;
          BOOL v15 = 0;
          int v16 = 0;
          uint64_t v96 = 0;
          unint64_t v17 = 0;
          unsigned __int8 v92 = v10;
          while (1)
          {
            uint64_t v18 = (uint64_t)&v10[v17] + v12 + v13;
            unint64_t v19 = (int *)(v18 + 4 + *(unsigned int *)(v18 + 4));
            unint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
            unsigned int v21 = *v20;
            if (v21 < 0xB)
            {
              LODWORD(v22) = 0;
            }
            else
            {
              uint64_t v22 = v20[5];
              if (v20[5]) {
                LODWORD(v22) = *(int *)((char *)v19 + v22);
              }
            }
            unsigned int v23 = *((_DWORD *)this + 2368);
            uint64_t v24 = v22 - v23;
            if (v22 >= v23)
            {
              uint64_t v28 = (char *)this + *(void *)(*(void *)this - 24);
              v28[2542] = 1;
              if (v21 >= 5 && (uint64_t v29 = v20[2]) != 0) {
                int v30 = *(int *)((char *)v19 + v29);
              }
              else {
                int v30 = 0;
              }
              uint64_t v39 = (flatbuffers::FlatBufferBuilder *)(v28 + 2472);
              int v40 = *((_DWORD *)v28 + 626) - *((_DWORD *)v28 + 630) + *((_DWORD *)v28 + 628);
              uint64_t v41 = *((void *)this + 1249);
              flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v28 + 309, 4, v30);
              flatbuffers::FlatBufferBuilder::AddElement<signed char>(v39, 6, *(char *)(v41 + 8 * v24 + 4));
              int v42 = flatbuffers::FlatBufferBuilder::EndTable(v39, v40);
              int v43 = v42;
              if (v16 >= v96)
              {
                uint64_t v44 = (v16 - v15) >> 2;
                unint64_t v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 62) {
                  goto LABEL_97;
                }
                if ((v96 - v15) >> 1 > v45) {
                  unint64_t v45 = (v96 - v15) >> 1;
                }
                if ((unint64_t)(v96 - v15) >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v46 = v45;
                }
                if (v46)
                {
                  if (v46 >> 62) {
                    goto LABEL_98;
                  }
                  __int16 v47 = (char *)operator new(4 * v46);
                }
                else
                {
                  __int16 v47 = 0;
                }
                int v61 = &v47[4 * v44];
                *(_DWORD *)int v61 = v43;
                int v62 = v61 + 4;
                while (v16 != v15)
                {
                  int v63 = *((_DWORD *)v16 - 1);
                  v16 -= 4;
                  *((_DWORD *)v61 - 1) = v63;
                  v61 -= 4;
                }
                uint64_t v96 = &v47[4 * v46];
                if (v15) {
                  operator delete(v15);
                }
                BOOL v15 = v61;
                int v16 = v62;
LABEL_72:
                int v10 = v92;
                goto LABEL_73;
              }
              *(_DWORD *)int v16 = v42;
              v16 += 4;
            }
            else
            {
              int v25 = (char *)this + *(void *)(*(void *)this - 24);
              v25[2542] = 1;
              uint64_t v95 = v15;
              if (v21 >= 5 && (uint64_t v26 = v20[2]) != 0) {
                int v27 = *(int *)((char *)v19 + v26);
              }
              else {
                int v27 = 0;
              }
              uint64_t v31 = v22;
              BOOL v32 = (flatbuffers::FlatBufferBuilder *)(v25 + 2472);
              int v33 = *((_DWORD *)v25 + 626);
              int v93 = *((_DWORD *)v25 + 628);
              int v94 = *((_DWORD *)v25 + 630);
              uint64_t v34 = *((void *)this + 1183);
              flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v25 + 309, 4, v27);
              uint64_t v35 = v34 + 32 * v31;
              flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v32, 6, *(_DWORD *)(v35 + 4));
              flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v32, 8, *(unsigned __int8 *)(v35 + 8), 0);
              int v36 = 0;
              unsigned int v37 = (unsigned __int16 *)((char *)v19 - *v19);
              if (*v37 >= 7u)
              {
                uint64_t v38 = v37[3];
                if (v38) {
                  int v36 = *(int *)((char *)v19 + v38);
                }
                else {
                  int v36 = 0;
                }
              }
              flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v32, 10, v36);
              std::string v48 = (unsigned __int16 *)((char *)v19 - *v19);
              if (*v48 < 9u)
              {
                int v52 = 0;
                __int16 v51 = v93;
                __int16 v50 = v94;
              }
              else
              {
                uint64_t v49 = v48[4];
                __int16 v51 = v93;
                __int16 v50 = v94;
                if (v49) {
                  int v52 = *(int *)((char *)v19 + v49);
                }
                else {
                  int v52 = 0;
                }
              }
              __int16 v53 = v33 - v50 + v51;
              flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v32, 12, v52);
              uint64_t v54 = v34 + 32 * v31;
              flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v32, 14, *(_DWORD *)(v54 + 20));
              flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v32, 16, *(_DWORD *)(v54 + 24));
              flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v32, 18, *(unsigned __int8 *)(v54 + 28), 0);
              int v55 = flatbuffers::FlatBufferBuilder::EndTable(v32, v53);
              int v56 = v55;
              if (v14 >= v97)
              {
                uint64_t v57 = (v14 - __p) >> 2;
                unint64_t v58 = v57 + 1;
                BOOL v15 = v95;
                if ((unint64_t)(v57 + 1) >> 62) {
LABEL_97:
                }
                  abort();
                if ((v97 - __p) >> 1 > v58) {
                  unint64_t v58 = (v97 - __p) >> 1;
                }
                if ((unint64_t)(v97 - __p) >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v59 = v58;
                }
                if (v59)
                {
                  if (v59 >> 62) {
LABEL_98:
                  }
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  std::string v60 = (char *)operator new(4 * v59);
                }
                else
                {
                  std::string v60 = 0;
                }
                std::string v64 = &v60[4 * v57];
                *(_DWORD *)std::string v64 = v56;
                uint64_t v65 = v64 + 4;
                while (v14 != __p)
                {
                  int v66 = *((_DWORD *)v14 - 1);
                  v14 -= 4;
                  *((_DWORD *)v64 - 1) = v66;
                  v64 -= 4;
                }
                unint64_t v97 = &v60[4 * v59];
                if (__p) {
                  operator delete(__p);
                }
                std::string __p = v64;
                BOOL v14 = v65;
                goto LABEL_72;
              }
              *(_DWORD *)BOOL v14 = v55;
              v14 += 4;
              int v10 = v92;
              BOOL v15 = v95;
            }
LABEL_73:
            ++v17;
            uint64_t v12 = *(unsigned __int16 *)((char *)v10 - *v10 + 4);
            uint64_t v13 = *(unsigned int *)((char *)v10 + v12);
            if (v17 >= *(unsigned int *)((char *)v10 + v12 + v13))
            {
              uint64_t v2 = *(void *)this;
              int v67 = __p;
              goto LABEL_76;
            }
          }
        }
      }
    }
  }
  int v67 = 0;
  BOOL v15 = 0;
  int v16 = 0;
  BOOL v14 = 0;
LABEL_76:
  int v68 = (char *)this + *(void *)(v2 - 24);
  int v69 = (flatbuffers::FlatBufferBuilder *)(v68 + 2472);
  uint64_t v70 = v14 - v67;
  v68[2542] = 1;
  uint64_t v71 = v67;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v68 + 2472), v14 - v67, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v68 + 2472), v70, 4uLL);
  uint64_t v72 = v14 - v71;
  __pa = v71;
  if (v14 == v71) {
    int v73 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::MTLVertexAttribInput>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::MTLVertexAttribInput>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::MTLVertexAttribInput>> const&)::t;
  }
  else {
    int v73 = v71;
  }
  if (v14 != v71)
  {
    uint64_t v74 = v72 >> 2;
    unint64_t v75 = v73 - 4;
    do
    {
      uint64_t v76 = v74 - 1;
      int v77 = *(_DWORD *)&v75[4 * v74];
      flatbuffers::FlatBufferBuilder::Align(v69, 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v69, *((_DWORD *)v68 + 626) - *((_DWORD *)v68 + 630) + *((_DWORD *)v68 + 628) - v77 + 4);
      uint64_t v74 = v76;
    }
    while (v76);
  }
  v68[2542] = 0;
  int v78 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v69, (unint64_t)v72 >> 2);
  uint64_t v79 = (char *)this + *(void *)(*(void *)this - 24);
  unsigned int v80 = (flatbuffers::FlatBufferBuilder *)(v79 + 2472);
  v79[2542] = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v79 + 2472), v16 - v15, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)(v79 + 2472), v16 - v15, 4uLL);
  uint64_t v81 = v16 - v15;
  if (v16 == v15) {
    unint64_t v82 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::MTLVertexBuiltin>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::MTLVertexBuiltin>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::MTLVertexBuiltin>> const&)::t;
  }
  else {
    unint64_t v82 = v15;
  }
  if (v16 != v15)
  {
    uint64_t v83 = v81 >> 2;
    char v84 = v82 - 4;
    do
    {
      uint64_t v85 = v83 - 1;
      int v86 = *(_DWORD *)&v84[4 * v83];
      flatbuffers::FlatBufferBuilder::Align(v80, 4uLL);
      flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v80, *((_DWORD *)v79 + 626) - *((_DWORD *)v79 + 630) + *((_DWORD *)v79 + 628) - v86 + 4);
      uint64_t v83 = v85;
    }
    while (v85);
  }
  v79[2542] = 0;
  int v87 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v80, (unint64_t)v81 >> 2);
  long long v88 = (char *)this + *(void *)(*(void *)this - 24);
  v88[2542] = 1;
  int v89 = *((_DWORD *)v88 + 626) - *((_DWORD *)v88 + 630) + *((_DWORD *)v88 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v88 + 309, 4, *((_DWORD *)this + 1256));
  if (v78)
  {
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v88 + 2472), 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v88 + 309, 6, *((_DWORD *)v88 + 626) - *((_DWORD *)v88 + 630) + *((_DWORD *)v88 + 628) - v78 + 4);
  }
  if (v87)
  {
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)(v88 + 2472), 4uLL);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v88 + 309, 8, *((_DWORD *)v88 + 626) - *((_DWORD *)v88 + 630) + *((_DWORD *)v88 + 628) - v87 + 4);
  }
  uint64_t v90 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v88 + 2472), v89);
  if (v15) {
    operator delete(v15);
  }
  if (__pa) {
    operator delete(__pa);
  }
  return v90;
}

uint64_t AGCLLVMAGPVertexShader::buildBackendRequest(AGCLLVMAGPVertexShader *this, llvm::AGX::CompileRequest *a2)
{
  if (*((_DWORD *)this + 2368))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      llvm::AGX::CompileRequest::addDMAListEntry(a2);
      ++v5;
      v4 += 32;
    }
    while (v5 < *((unsigned int *)this + 2368));
  }
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 464))(v6);
  if (!result && *((_DWORD *)this + 2500))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = llvm::AGX::CompileRequest::addDMAListEntry(a2);
      ++v9;
      v8 += 8;
    }
    while (v9 < *((unsigned int *)this + 2500));
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShader::setupShaderOutputs(AGCLLVMAGPVertexShader *this)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 5080;
  unsigned int v9 = AGCLLVMUserVertexShader::setupShaderOutputs(this);
  int v10 = (char *)this + *(void *)(*(void *)this - 24);
  if (**(void **)(*(void *)(*((void *)this + 22) + 24) + 16) == *((void *)v10 + 22)
    && *(unsigned char *)(*((void *)v10 + 50) + 1729))
  {
    __p.__r_.__value_.__r.__words[0] = llvm::ConstantFP::get();
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0];
    uint64_t v50 = llvm::ConstantFP::get();
    int v11 = (unsigned __int8 *)llvm::ConstantVector::get();
    uint64_t v12 = (AGCLLVMAGPVertexShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    uint64_t v13 = (llvm::Value *)*((void *)this + 654);
    BOOL v14 = (llvm::Value *)*((void *)this + 656);
    BOOL v15 = (llvm::Value *)*((void *)this + 655);
    __int16 v51 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v12, v14, v15, (const llvm::Twine *)&__p);
    __int16 v48 = 257;
    uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v12, v13, Mul, (const llvm::Twine *)&__dst);
    AGCLLVMUserVertexShader::replaceOutputUses((uint64_t *)this, v11, Add, 0, v2[12], 4u);
  }
  int v18 = *((_DWORD *)this + 2359);
  if (v18)
  {
    printMessage((char **)&AGCPrinter, "Following fragment input(s) mismatching vertex shader output type(s) or not written by vertex shader: ", v3, v4, v5, v6, v7, v8, v46);
    uint64_t v19 = *((unsigned int *)this + 2358);
    if (v19)
    {
      for (uint64_t i = (size_t **)*((void *)this + 1178); !*i || *i + 1 == 0; ++i)
        ;
    }
    else
    {
      uint64_t i = (size_t **)*((void *)this + 1178);
    }
    uint64_t v22 = *((void *)this + 1178) + 8 * v19;
    if (i != (size_t **)v22)
    {
      unsigned int v23 = *i;
      do
      {
        std::string::basic_string[abi:nn180100](&__p, v23 + 2, *v23);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          LOBYTE(p_p) = __p.__r_.__value_.__s.__data_[0];
        }
        printMessage((char **)&AGCPrinter, "\t%s", v24, v25, v26, v27, v28, v29, (char)p_p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        do
        {
          uint64_t v31 = i[1];
          ++i;
          unsigned int v23 = v31;
          if (v31) {
            BOOL v32 = v23 + 1 == 0;
          }
          else {
            BOOL v32 = 1;
          }
        }
        while (v32);
      }
      while (i != (size_t **)v22);
    }
    uint64_t v33 = *((unsigned int *)this + 2358);
    if (v33)
    {
      for (uint64_t j = *((void *)this + 1178); !*(void *)j || *(void *)j == -8; j += 8)
        ;
    }
    else
    {
      uint64_t j = *((void *)this + 1178);
    }
    uint64_t v36 = *((void *)this + 1178) + 8 * v33;
    if (j != v36)
    {
      unsigned int v37 = (char *)this + 8;
      uint64_t v38 = "";
      do
      {
        std::string::append((std::string *)&v37[*(void *)(*(void *)this - 24)], v38);
        std::string::basic_string[abi:nn180100](&__dst, (void *)(*(void *)j + 16), **(void **)j);
        attribute_name(&__p, &__dst);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v39 = &__p;
        }
        else {
          uint64_t v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)&v37[*(void *)(*(void *)this - 24)], (const std::string::value_type *)v39, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        do
        {
          uint64_t v42 = *(void *)(j + 8);
          j += 8;
          uint64_t v41 = v42;
          if (v42) {
            BOOL v43 = v41 == -8;
          }
          else {
            BOOL v43 = 1;
          }
        }
        while (v43);
        uint64_t v38 = ",";
      }
      while (j != v36);
    }
  }
  if (*v2)
  {
    llvm::Module::getOrInsertNamedMetadata();
    if (*((_DWORD *)this + 1272) > 1u) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = llvm::MDString::get();
    }
    __p.__r_.__value_.__r.__words[0] = v44;
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  if (v18) {
    return 0;
  }
  else {
    return v9;
  }
}

BOOL AGCLLVMAGPVertexShader::validateReply(AGCLLVMAGPVertexShader *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  if (*((void *)v1 + 87))
  {
    uint64_t v2 = v1 + 696;
    uint64_t v3 = *((void *)v1 + 88);
    uint64_t v4 = v1 + 1256;
    if (v3) {
      uint64_t v4 = v2;
    }
  }
  else
  {
    uint64_t v4 = v1 + 1256;
  }
  uint64_t v5 = (int *)(*(void *)v4 + **(unsigned int **)v4);
  uint64_t v6 = (unsigned int *)((char *)v5 + *(unsigned __int16 *)((char *)v5 - *v5 + 4));
  uint64_t v7 = (unsigned int *)((char *)v6
                      + *v6
                      + *(unsigned __int16 *)((char *)v6 + *v6 - *(unsigned int *)((char *)v6 + *v6) + 8));
  return *(unsigned int *)((char *)v7 + *v7) < 0x21;
}

uint64_t AGCLLVMAGPVertexShader::initCompile(AGCLLVMAGPVertexShader *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  AGCLLVMUserObject::initCompile(this);
  if (*((unsigned char *)this + 5082))
  {
    uint64_t v9 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232);
    uint64_t v10 = v9;
    uint64_t v2 = llvm::StructType::get();
    uint64_t v3 = (llvm::Type *)llvm::PointerType::get();
    *((void *)this + 651) = v2;
    uint64_t v7 = "agc.view_mappings_pointer_global";
    __int16 v8 = 259;
    uint64_t v4 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 824);
    unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 256))(v4);
    *((void *)this + 650) = AGCLLVMUserObject::createGlobalBufferBinding(this, v3, (const llvm::Twine *)&v7, v5, *((_DWORD *)this + 1271), 5, 0);
  }
  if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1752)
    || !AGCLLVMUserObject::detectTextureWrites(this))
  {
    return 1;
  }
  std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), "Texture writes not supported in vertex shaders");
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildFastFMin(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6 = (void *)*((void *)this + 94);
  if (v6) {
    LODWORD(v6) = *(_DWORD *)((unsigned char *)v6 + *(void *)(*v6 - 24) + 136) & 2;
  }
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    int v7 = *(unsigned __int8 *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  else {
    int v7 = *(_DWORD *)(*(void *)a2 + 8);
  }
  BOOL v9 = v7 == 2 && v6 == 0;
  uint64_t v10 = *((void *)this + 46);
  long long v13 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v14, (AGCLLVMAirBuiltins *)((char *)this + 8));
  int v15 = *((_DWORD *)this + 26);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, llvm::Value *, BOOL))(*(void *)v10 + 48))(v10, &v13, a2, a3, v9);
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  return v11;
}

uint64_t AGCLLVMUserObject::getMaxTotalThreadsPerThreadgroup(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::setupInterpolationFunctions(AGCLLVMUserObject *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::markNonMainFunctionInline(AGCLLVMUserObject *this, llvm::Function *a2, char a3)
{
  if ((*((unsigned char *)a2 + 33) & 0x20) != 0) {
    isDeclaratiouint64_t n = 1;
  }
  else {
    isDeclaratiouint64_t n = llvm::GlobalValue::isDeclaration(a2);
  }
  int v7 = (char *)this + *(void *)(*(void *)this - 24);
  llvm::Value::getName(a2);
  uint64_t result = llvm::StringMapImpl::FindKey();
  if (result != -1 && (int)result != (unint64_t)*((unsigned int *)v7 + 824) || *((unsigned char *)this + 15))
  {
    uint64_t result = llvm::GlobalValue::setLinkage((uint64_t)a2, 0);
LABEL_8:
    if ((isDeclaration & 1) == 0)
    {
      ++*((_DWORD *)this + 10);
      if ((a3 & 1) == 0)
      {
        return llvm::Function::addFnAttr();
      }
    }
    return result;
  }
  if ((isDeclaration & 1) == 0) {
    *((_DWORD *)a2 + 8) = *((_DWORD *)a2 + 8) & 0xFFFFBFC0 | 0x4007;
  }
  if (*((void *)a2 + 1)) {
    goto LABEL_8;
  }
  return llvm::Function::eraseFromParent(a2);
}

uint64_t AGCLLVMUserObject::addWrapperPrefix(AGCLLVMUserObject *this)
{
  return 1;
}

uint64_t AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG11::CompileReplyBinarySchema>(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t result = dumpShaderToFile(v3);
  if (result)
  {
    if (a2[8] - a2[12] + a2[10])
    {
      flatbuffers::IDLOptions::IDLOptions((flatbuffers::IDLOptions *)&v5);
      flatbuffers::Parser::Parser((flatbuffers::Parser *)v6, (const flatbuffers::IDLOptions *)&v5);
    }
  }
  return result;
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(flatbuffers::FlatBufferBuilder *result, int a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 6, v4);
  }
  return result;
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLVertexInfo>(flatbuffers::FlatBufferBuilder *result, int a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 12, v4);
  }
  return result;
}

uint64_t GLCompilerCreate(void *__src, size_t __len, uint64_t a3)
{
  int v4 = std::string::basic_string[abi:nn180100](&__dst, __src, __len);
  uint64_t Internal = AGCCodeGenServiceCreateInternal((uint64_t)v4, a3, 0);
  if (v8 < 0) {
    operator delete(__dst);
  }
  return Internal;
}

uint64_t AGCCodeGenServiceCreateInternal(uint64_t a1, uint64_t a2, unsigned int a3)
{
  std::string v5 = (AGCEnv *)LLVMAGXRuntimeMajorVersion();
  if (v5 == 1)
  {
    AGCEnv::load(v5);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a1 + 8);
    }
    if (v6) {
      AGCEnv::deserialize(a1);
    }
    if (!MGGetBoolAnswer()
      || (uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"USE_MONOLITHIC_COMPILER", v7)) == 0
      || *Value == 48
      || !atoi(Value))
    {
      if (MGGetBoolAnswer()) {
        AGCEnv::getValue((AGCEnv *)"MTL_MONOLITHIC_COMPILER", v9);
      }
    }
    AGCPrinter = 0;
    if (MGGetBoolAnswer())
    {
      unint64_t v17 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_STATUS_FILE", v10);
      if (v17)
      {
        if (*v17 != 48 && atoi(v17)) {
          initPrinter(&AGCPrinter, a3 < 2);
        }
      }
    }
    printMessage((char **)&AGCPrinter, "Running LLVM version %d.", v11, v12, v13, v14, v15, v16, 23);
    AGCEnv::getVarValuesString(&v27);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &v27;
    }
    else {
      LOBYTE(v24) = v27.__r_.__value_.__s.__data_[0];
    }
    printMessage((char **)&AGCPrinter, "%s", v18, v19, v20, v21, v22, v23, (char)v24);
    AGCLLVMCtx::initialize(v25);
    operator new();
  }
  return 0;
}

void AGCEnv::load(AGCEnv *this)
{
  v56[20] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (AGCEnv *)MGGetBoolAnswer();
  if (!v1) {
    return;
  }
  OSLog = AGCEnv::getOSLog(v1);
  if (os_log_type_enabled(OSLog, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v54) = 136315138;
    *(void *)((char *)&v54 + 4) = "load";
    _os_log_debug_impl(&dword_1CAC02000, OSLog, OS_LOG_TYPE_DEBUG, "%s(){\n", (uint8_t *)&v54, 0xCu);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "/System/Library/PrivateFrameworks/AGXCompilerCore.framework/EnvVars.txt");
  uint64_t v3 = MEMORY[0x1E4FBA460] + 24;
  uint64_t v4 = MEMORY[0x1E4FBA460] + 64;
  v56[0] = MEMORY[0x1E4FBA460] + 64;
  std::string v5 = (void *)MEMORY[0x1E4FBA3F8];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  *(void *)&long long v54 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)&v55[*(void *)(v54 - 24) - 16] = v6;
  *((void *)&v54 + 1) = 0;
  int v7 = (std::ios_base *)&v55[*(void *)(v54 - 24) - 16];
  std::ios_base::init(v7, v55);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *(void *)&long long v54 = v3;
  v56[0] = v4;
  MEMORY[0x1CB7A0580](v55);
  char v8 = (AGCEnv *)std::filebuf::open();
  if (!v8) {
    std::ios_base::clear((std::ios_base *)&v55[*(void *)(v54 - 24) - 16], *(_DWORD *)&v55[*(void *)(v54 - 24) + 16] | 4);
  }
  int v9 = *(_DWORD *)&v55[*(void *)(v54 - 24) + 16] & 5;
  uint64_t v10 = AGCEnv::getOSLog(v8);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
  if (v9)
  {
    if (v11)
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1CAC02000, v10, OS_LOG_TYPE_DEBUG, "}\n", buf, 2u);
    }
    goto LABEL_49;
  }
  if (v11)
  {
    uint64_t v41 = __p;
    if (v46 < 0) {
      uint64_t v41 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v41;
    _os_log_debug_impl(&dword_1CAC02000, v10, OS_LOG_TYPE_DEBUG, "Reading environment variables from '%s'", buf, 0xCu);
  }
  AGCEnv::getStatusVariables((AGCEnv *)v11);
  AGCEnv::getEnvLookup(v12);
  memset(&__str, 0, sizeof(__str));
  uint64_t v13 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)&v55[*(void *)(v54 - 24) - 16]);
    uint64_t v14 = std::locale::use_facet((const std::locale *)buf, v13);
    unsigned __int8 v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale((std::locale *)buf);
    uint64_t v16 = (AGCEnv *)std::getline[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v54, (uint64_t)&__str, v15);
    if ((v55[*(void *)(v54 - 24) + 16] & 5) != 0) {
      break;
    }
    std::string::size_type v17 = std::string::find(&__str, 61, 0);
    if (v17 == -1)
    {
      uint64_t v26 = AGCEnv::getOSLog((AGCEnv *)0xFFFFFFFFFFFFFFFFLL);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1CAC02000, v26, OS_LOG_TYPE_DEBUG, "Skipped line with no '=' character in EnvVars.txt", buf, 2u);
      }
    }
    else
    {
      std::string::size_type v18 = v17;
      std::string::basic_string(&v43, &__str, 0, v17, (std::allocator<char> *)buf);
      std::string::basic_string(&v42, &__str, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)buf);
      AGCEnv::trim(&v43);
      uint64_t v19 = AGCEnv::trim(&v42);
      std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v21 = AGCEnv::getStatusVariables(void)::status_vars;
        uint64_t v22 = qword_1EBD0EB40 - AGCEnv::getStatusVariables(void)::status_vars;
        if (qword_1EBD0EB40 == AGCEnv::getStatusVariables(void)::status_vars)
        {
          uint64_t v25 = (const char **)AGCEnv::getStatusVariables(void)::status_vars;
        }
        else
        {
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v23 = &v43;
          }
          else {
            uint64_t v23 = (std::string *)v43.__r_.__value_.__r.__words[0];
          }
          uint64_t v24 = 8 * (v22 >> 3);
          uint64_t v25 = (const char **)AGCEnv::getStatusVariables(void)::status_vars;
          while (1)
          {
            uint64_t v19 = (std::string *)strcmp(*v25, (const char *)v23);
            if (!v19) {
              break;
            }
            ++v25;
            v24 -= 8;
            if (!v24) {
              goto LABEL_36;
            }
          }
        }
        if (v25 == (const char **)(v21 + (v22 & 0xFFFFFFFFFFFFFFF8)))
        {
LABEL_36:
          uint64_t v38 = AGCEnv::getOSLog((AGCEnv *)v19);
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_37;
          }
          uint64_t v39 = &v43;
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v39 = (std::string *)v43.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&buf[4] = v39;
          uint64_t v28 = v38;
          uint64_t v29 = "Read unknown variable from EnvVars.txt: %s";
          uint32_t v30 = 12;
        }
        else
        {
          *(void *)buf = &v43;
          uint64_t v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v43, (long long **)buf);
          BOOL v32 = std::string::operator=((std::string *)(v31 + 7), &v42);
          uint64_t v33 = AGCEnv::getOSLog((AGCEnv *)v32);
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_37;
          }
          std::string::size_type v34 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
          uint64_t v35 = &v43;
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            std::string::size_type v34 = v43.__r_.__value_.__l.__size_;
            uint64_t v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v36 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
          unsigned int v37 = &v42;
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            std::string::size_type v36 = v42.__r_.__value_.__l.__size_;
            unsigned int v37 = (std::string *)v42.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = v35;
          __int16 v48 = 2048;
          std::string::size_type v49 = v34;
          __int16 v50 = 2080;
          __int16 v51 = v37;
          __int16 v52 = 2048;
          std::string::size_type v53 = v36;
          uint64_t v28 = v33;
          uint64_t v29 = "%s[%zu] = %s[%zu]\n";
          uint32_t v30 = 42;
        }
      }
      else
      {
        std::string v27 = AGCEnv::getOSLog((AGCEnv *)v19);
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_37;
        }
        *(_WORD *)buf = 0;
        uint64_t v28 = v27;
        uint64_t v29 = "Skipped line with empty variable name in EnvVars.txt";
        uint32_t v30 = 2;
      }
      _os_log_debug_impl(&dword_1CAC02000, v28, OS_LOG_TYPE_DEBUG, v29, buf, v30);
LABEL_37:
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
    }
  }
  int v40 = AGCEnv::getOSLog(v16);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1CAC02000, v40, OS_LOG_TYPE_DEBUG, "}\n", buf, 2u);
  }
  std::string v5 = (void *)MEMORY[0x1E4FBA3F8];
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_49:
  *(void *)&long long v54 = *v5;
  *(void *)&v55[*(void *)(v54 - 24) - 16] = v5[3];
  MEMORY[0x1CB7A0590](v55);
  std::istream::~istream();
  MEMORY[0x1CB7A0710](v56);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
}

void AGCEnv::deserialize(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (AGCEnv *)MGGetBoolAnswer();
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
    if ((v3 & 0x80u) != 0) {
      uint64_t v3 = *(void *)(a1 + 8);
    }
    if (v3)
    {
      AGCEnv::getEnvLookup(v2);
      OSLog = AGCEnv::getOSLog(v4);
      std::string::size_type v6 = os_log_type_enabled(OSLog, OS_LOG_TYPE_DEBUG);
      if (v6)
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = "deserialize";
        _os_log_debug_impl(&dword_1CAC02000, OSLog, OS_LOG_TYPE_DEBUG, "%s(){\n", buf, 0xCu);
      }
      std::string::size_type v7 = 0;
      do
      {
        std::string::size_type v8 = *(unsigned __int8 *)(a1 + 23);
        if ((v8 & 0x80u) != 0) {
          std::string::size_type v8 = *(void *)(a1 + 8);
        }
        if (v7 >= v8) {
          break;
        }
        std::string::size_type v6 = std::string::find((const std::string *)a1, 10, v7);
        if (v6 == -1) {
          break;
        }
        std::string::size_type v9 = v6;
        std::string::basic_string(&v20, (const std::string *)a1, v7, v6 - v7, (std::allocator<char> *)buf);
        std::string::size_type v7 = v9 + 1;
        std::string::size_type v6 = std::string::find((const std::string *)a1, 10, v9 + 1);
        std::string::size_type v10 = v6;
        if (v6 != -1)
        {
          std::string::basic_string(&__str, (const std::string *)a1, v7, v6 - v7, (std::allocator<char> *)buf);
          *(void *)buf = &v20;
          BOOL v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v20, (long long **)buf);
          uint64_t v12 = std::string::operator=((std::string *)(v11 + 7), &__str);
          uint64_t v13 = AGCEnv::getOSLog((AGCEnv *)v12);
          std::string::size_type v6 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
          if (v6)
          {
            std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
            if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned __int8 v15 = &v20;
            }
            else {
              unsigned __int8 v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
            }
            if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v20.__r_.__value_.__l.__size_;
            }
            std::string::size_type v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_str = &__str;
            }
            else {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v16 = __str.__r_.__value_.__l.__size_;
            }
            *(_DWORD *)buf = 136315906;
            *(void *)&buf[4] = v15;
            __int16 v22 = 2048;
            std::string::size_type v23 = size;
            __int16 v24 = 2080;
            uint64_t v25 = p_str;
            __int16 v26 = 2048;
            std::string::size_type v27 = v16;
            _os_log_debug_impl(&dword_1CAC02000, v13, OS_LOG_TYPE_DEBUG, "\t%s[%zu] = %s[%zu]\n", buf, 0x2Au);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::size_type v7 = v10 + 1;
        }
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v20.__r_.__value_.__l.__data_);
        }
      }
      while (v10 != -1);
      std::string::size_type v18 = AGCEnv::getOSLog((AGCEnv *)v6);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1CAC02000, v18, OS_LOG_TYPE_DEBUG, "}\n", buf, 2u);
      }
    }
  }
}

uint64_t initPrinter(void *a1, int a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  getFilePath();
  if (byte_1EA612A77 < 0)
  {
    *(unsigned char *)getFilePath(void)::file_path = 0;
    qword_1EA612A68 = 0;
  }
  else
  {
    LOBYTE(getFilePath(void)::file_path) = 0;
    byte_1EA612A77 = 0;
  }
  if (!MGGetBoolAnswer()
    || (std::string v5 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_STATUS_FILE_STDERR", v4)) == 0
    || *v5 == 48
    || !atoi(v5))
  {
    memset(&v56, 0, sizeof(v56));
    uint64_t Value = 0;
    if (MGGetBoolAnswer()) {
      uint64_t Value = (const std::string::value_type *)AGCEnv::getValue((AGCEnv *)"AGC_STATUS_LOG_DIRECTORY", v6);
    }
    if (MGGetBoolAnswer()
      && (std::string::size_type v9 = (const char *)AGCEnv::getValue((AGCEnv *)"USE_MONOLITHIC_COMPILER", v8)) != 0
      && *v9 != 48
      && atoi(v9))
    {
      BOOL v10 = 1;
      if (!Value) {
        goto LABEL_33;
      }
    }
    else
    {
      if (!MGGetBoolAnswer()
        || (uint64_t v12 = (const char *)AGCEnv::getValue((AGCEnv *)"MTL_MONOLITHIC_COMPILER", v11)) == 0
        || *v12 == 48)
      {
        if (stat("/private/var/mobile/Library/Logs/", &v57)) {
          goto LABEL_21;
        }
LABEL_36:
        std::string::size_type v16 = "/private/var/mobile/Library/Logs/";
        goto LABEL_37;
      }
      BOOL v10 = atoi(v12) != 0;
      if (!Value)
      {
LABEL_33:
        if (stat("/private/var/mobile/Library/Logs/", &v57))
        {
          if (v10)
          {
            uint64_t v13 = [(NSString *)NSHomeDirectory() UTF8String];
LABEL_22:
            std::string::basic_string[abi:nn180100]<0>(buf, v13);
            if (buf[23] >= 0) {
              uint64_t v14 = buf;
            }
            else {
              uint64_t v14 = *(const std::string::value_type **)buf;
            }
            if (buf[23] >= 0) {
              std::string::size_type v15 = buf[23];
            }
            else {
              std::string::size_type v15 = *(void *)&buf[8];
            }
            std::string::append(&v56, v14, v15);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
LABEL_38:
            std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
            std::string::size_type v18 = &v56;
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            {
              std::string::size_type size = v56.__r_.__value_.__l.__size_;
              std::string::size_type v18 = (std::string *)v56.__r_.__value_.__r.__words[0];
            }
            if (v18->__r_.__value_.__s.__data_[size - 1] != 47) {
              std::string::push_back(&v56, 47);
            }
            if (a2) {
              uint64_t v19 = "OpenGL";
            }
            else {
              uint64_t v19 = "Metal";
            }
            std::string::append(&v56, v19);
            if (MGGetBoolAnswer())
            {
              uint64_t v21 = (const std::string::value_type *)AGCEnv::getValue((AGCEnv *)"AGC_STATUS_LOG_PREFIX", v20);
              if (v21)
              {
                __int16 v22 = v21;
                std::string::push_back(&v56, 47);
                std::string::append(&v56, v22);
              }
            }
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v23 = &v56;
            }
            else {
              std::string::size_type v23 = (std::string *)v56.__r_.__value_.__r.__words[0];
            }
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v24 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v24 = v56.__r_.__value_.__l.__size_;
            }
            uint64_t v25 = &getFilePath(void)::file_path;
            std::string::append((std::string *)&getFilePath(void)::file_path, (const std::string::value_type *)v23, v24);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v56.__r_.__value_.__l.__data_);
            }
            if (byte_1EA612A77 >= 0) {
              __int16 v26 = (const char *)&getFilePath(void)::file_path;
            }
            else {
              __int16 v26 = (const char *)getFilePath(void)::file_path;
            }
            if (stat(v26, &v57))
            {
              if (byte_1EA612A77 >= 0) {
                std::string::size_type v27 = (const char *)&getFilePath(void)::file_path;
              }
              else {
                std::string::size_type v27 = (const char *)getFilePath(void)::file_path;
              }
              if (mkpath_np(v27, 0x1FFu))
              {
                uint64_t v28 = (FILE *)*MEMORY[0x1E4F143C8];
                if (byte_1EA612A77 >= 0) {
                  uint64_t v29 = (const char *)&getFilePath(void)::file_path;
                }
                else {
                  uint64_t v29 = (const char *)getFilePath(void)::file_path;
                }
                uint32_t v30 = __error();
                fprintf(v28, "AGC: %s:%d:%s: *** Failed to create: %s, with error code %d\n", "agc_file_printer.h", 514, "initPrinter", v29, *v30);
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  if (byte_1EA612A77 >= 0) {
                    __int16 v52 = &getFilePath(void)::file_path;
                  }
                  else {
                    __int16 v52 = (uint64_t *)getFilePath(void)::file_path;
                  }
                  int v53 = *__error();
                  *(_DWORD *)buf = 136316162;
                  *(void *)&buf[4] = "agc_file_printer.h";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 514;
                  *(_WORD *)&buf[18] = 2080;
                  *(void *)&buf[20] = "initPrinter";
                  __int16 v59 = 2080;
                  std::string v60 = v52;
                  __int16 v61 = 1024;
                  int v62 = v53;
                  _os_log_error_impl(&dword_1CAC02000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "AGC: AGC: %s:%d:%s: *** Failed to create: %s, with error code %d\n", buf, 0x2Cu);
                }
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
                {
                  if (byte_1EA612A77 < 0) {
                    uint64_t v25 = (uint64_t *)getFilePath(void)::file_path;
                  }
                  int v31 = *__error();
                  *(_DWORD *)buf = 136316162;
                  *(void *)&buf[4] = "agc_file_printer.h";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 514;
                  *(_WORD *)&buf[18] = 2080;
                  *(void *)&buf[20] = "initPrinter";
                  __int16 v59 = 2080;
                  std::string v60 = v25;
                  __int16 v61 = 1024;
                  int v62 = v31;
                  BOOL v32 = MEMORY[0x1E4F14500];
                  uint64_t v33 = "AGC: AGC: %s:%d:%s: *** Failed to create: %s, with error code %d\n";
LABEL_84:
                  _os_log_impl(&dword_1CAC02000, v32, OS_LOG_TYPE_INFO, v33, buf, 0x2Cu);
                }
              }
              else
              {
                if (byte_1EA612A77 >= 0) {
                  std::string::size_type v34 = (const char *)&getFilePath(void)::file_path;
                }
                else {
                  std::string::size_type v34 = (const char *)getFilePath(void)::file_path;
                }
                if (chown(v34, 0x1F5u, 0xFFFFFFFF))
                {
                  uint64_t v35 = (FILE *)*MEMORY[0x1E4F143C8];
                  if (byte_1EA612A77 >= 0) {
                    std::string::size_type v36 = (const char *)&getFilePath(void)::file_path;
                  }
                  else {
                    std::string::size_type v36 = (const char *)getFilePath(void)::file_path;
                  }
                  unsigned int v37 = __error();
                  fprintf(v35, "AGC: %s:%d:%s: *** Failed to modify: %s, with error code %d\n", "agc_file_printer.h", 507, "initPrinter", v36, *v37);
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    if (byte_1EA612A77 >= 0) {
                      long long v54 = &getFilePath(void)::file_path;
                    }
                    else {
                      long long v54 = (uint64_t *)getFilePath(void)::file_path;
                    }
                    int v55 = *__error();
                    *(_DWORD *)buf = 136316162;
                    *(void *)&buf[4] = "agc_file_printer.h";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 507;
                    *(_WORD *)&buf[18] = 2080;
                    *(void *)&buf[20] = "initPrinter";
                    __int16 v59 = 2080;
                    std::string v60 = v54;
                    __int16 v61 = 1024;
                    int v62 = v55;
                    _os_log_error_impl(&dword_1CAC02000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "AGC: AGC: %s:%d:%s: *** Failed to modify: %s, with error code %d\n", buf, 0x2Cu);
                  }
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
                  {
                    if (byte_1EA612A77 < 0) {
                      uint64_t v25 = (uint64_t *)getFilePath(void)::file_path;
                    }
                    int v38 = *__error();
                    *(_DWORD *)buf = 136316162;
                    *(void *)&buf[4] = "agc_file_printer.h";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 507;
                    *(_WORD *)&buf[18] = 2080;
                    *(void *)&buf[20] = "initPrinter";
                    __int16 v59 = 2080;
                    std::string v60 = v25;
                    __int16 v61 = 1024;
                    int v62 = v38;
                    BOOL v32 = MEMORY[0x1E4F14500];
                    uint64_t v33 = "AGC: AGC: %s:%d:%s: *** Failed to modify: %s, with error code %d\n";
                    goto LABEL_84;
                  }
                }
              }
            }
            std::string::append((std::string *)&getFilePath(void)::file_path, "/");
            if (!MGGetBoolAnswer()
              || (int v40 = (const std::string::value_type *)AGCEnv::getValue((AGCEnv *)"AGC_CLIENT_PROCESS_NAME", v39)) == 0)
            {
              if (a2) {
                int v40 = "agc_gl_status";
              }
              else {
                int v40 = "agc_mtl_status";
              }
            }
            std::string::append((std::string *)&getFilePath(void)::file_path, v40);
            if (!MGGetBoolAnswer()
              || (std::string v42 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_STATUS_FILE_NO_PID", v41)) == 0
              || *v42 == 48
              || !atoi(v42))
            {
              pid_t v43 = getpid();
              std::to_string(&v56, v43);
              uint64_t v44 = std::string::insert(&v56, 0, "_");
              std::string::size_type v45 = v44->__r_.__value_.__r.__words[2];
              *(_OWORD *)buf = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
              *(void *)&buf[16] = v45;
              v44->__r_.__value_.__l.__size_ = 0;
              v44->__r_.__value_.__r.__words[2] = 0;
              v44->__r_.__value_.__r.__words[0] = 0;
              if (buf[23] >= 0) {
                char v46 = buf;
              }
              else {
                char v46 = *(const std::string::value_type **)buf;
              }
              if (buf[23] >= 0) {
                std::string::size_type v47 = buf[23];
              }
              else {
                std::string::size_type v47 = *(void *)&buf[8];
              }
              std::string::append((std::string *)&getFilePath(void)::file_path, v46, v47);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v56.__r_.__value_.__l.__data_);
              }
            }
            LODWORD(v48) = MGGetBoolAnswer();
            if (v48)
            {
              __int16 v48 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_STATUS_FILE_MAX_SIZE_IN_BYTES", v49);
              if (v48)
              {
                if (*v48 == 48) {
                  LODWORD(v48) = 0;
                }
                else {
                  LODWORD(v48) = atoi(v48);
                }
              }
            }
            status_file_cap = (int)v48;
            if (byte_1EA612A77 >= 0) {
              __int16 v50 = (const char *)&getFilePath(void)::file_path;
            }
            else {
              __int16 v50 = (const char *)getFilePath(void)::file_path;
            }
            stat(v50, &v57);
            operator new();
          }
LABEL_21:
          uint64_t v13 = "/tmp/";
          goto LABEL_22;
        }
        goto LABEL_36;
      }
    }
    if (v10)
    {
      std::string::size_type v16 = Value;
LABEL_37:
      std::string::append(&v56, v16);
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  *a1 = MEMORY[0x1E4FBA240];
  return std::ostream::flush();
}

void AGCEnv::getVarValuesString(std::string *this)
{
  std::string::basic_string[abi:nn180100]<0>(this, "Active environment variable values:\n");
  uint64_t v2 = (AGCEnv *)MGGetBoolAnswer();
  if (v2)
  {
    AGCEnv::getStatusVariables(v2);
    uint64_t v4 = AGCEnv::getStatusVariables(void)::status_vars;
    if (qword_1EBD0EB40 != AGCEnv::getStatusVariables(void)::status_vars)
    {
      unint64_t v5 = 0;
      unsigned int v6 = 1;
      do
      {
        std::string::size_type v7 = *(AGCEnv **)(v4 + 8 * v5);
        uint64_t Value = (const std::string::value_type *)AGCEnv::getValue(v7, v3);
        if (Value)
        {
          std::string::size_type v9 = Value;
          std::string::append(this, (const std::string::value_type *)v7);
          std::string::append(this, "=");
          std::string::append(this, v9);
          std::string::append(this, "\n");
        }
        unint64_t v5 = v6;
        uint64_t v4 = AGCEnv::getStatusVariables(void)::status_vars;
        ++v6;
      }
      while (v5 < (qword_1EBD0EB40 - AGCEnv::getStatusVariables(void)::status_vars) >> 3);
    }
  }
}

void std::vector<std::unique_ptr<llvm::AGX::Diagnostic>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void getFilePath(void)
{
  {
    getFilePath(void)::file_path = 0;
    qword_1EA612A68 = 0;
    unk_1EA612A70 = 0;
    __cxa_atexit(MEMORY[0x1E4FBA210], &getFilePath(void)::file_path, &dword_1CAC02000);
  }
}

void *std::string::basic_string[abi:nn180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *std::locale __b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(void *a1, long long **a2)
{
  uint64_t v3 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&AGCEnv::getEnvLookup(void)::envlookup, &v12, a1);
  uint64_t v4 = *v3;
  if (!*v3)
  {
    unint64_t v5 = v3;
    uint64_t v4 = (uint64_t *)operator new(0x50uLL);
    v10[1] = &qword_1EBD0EB28;
    uint64_t v6 = (std::string *)(v4 + 4);
    size_t v7 = *a2;
    if (*((char *)*a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      v4[6] = *((void *)v7 + 2);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
    }
    v4[7] = 0;
    v4[8] = 0;
    v4[9] = 0;
    char v11 = 1;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at((uint64_t **)&AGCEnv::getEnvLookup(void)::envlookup, v12, v5, v4);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:nn180100]((uint64_t)v10);
  }
  return v4;
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        size_t v7 = v4;
        long long v8 = v4 + 4;
        if (!std::less<std::string>::operator()[abi:nn180100](a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v8, a3)) {
        break;
      }
      unint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    size_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::getline[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x1CB7A05A0](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    size_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    long long v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      void v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    ++v6;
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

std::string *AGCEnv::trim(std::string *this)
{
  int v2 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  std::string::size_type v3 = this->__r_.__value_.__r.__words[0];
  if (v2 >= 0) {
    uint64_t v4 = this;
  }
  else {
    uint64_t v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (v2 >= 0) {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  uint64_t v6 = MEMORY[0x1E4F14390];
  if (size)
  {
    size_t v7 = (std::string *)((char *)v4 + size);
    do
    {
      unsigned int v8 = v4->__r_.__value_.__s.__data_[0];
      if ((v8 & 0x80000000) != 0)
      {
        if (!__maskrune(v8, 0x4000uLL)) {
          goto LABEL_15;
        }
      }
      else if ((*(_DWORD *)(v6 + 4 * v8 + 60) & 0x4000) == 0)
      {
        goto LABEL_15;
      }
      uint64_t v4 = (std::string *)((char *)v4 + 1);
      --size;
    }
    while (size);
    uint64_t v4 = v7;
LABEL_15:
    LOBYTE(v2) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    std::string::size_type v3 = this->__r_.__value_.__r.__words[0];
  }
  if ((v2 & 0x80u) == 0) {
    int v9 = this;
  }
  else {
    int v9 = (std::string *)v3;
  }
  std::string::erase(this, 0, (char *)v4 - (char *)v9);
  uint64_t v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  int v11 = (char)v10;
  uint64_t v12 = (char *)this + v10;
  if (v11 >= 0) {
    std::string::size_type v13 = (std::string::size_type)v12;
  }
  else {
    std::string::size_type v13 = this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_;
  }
  if (v11 >= 0) {
    uint64_t v14 = this;
  }
  else {
    uint64_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  while ((std::string *)v13 != v14)
  {
    unsigned int v16 = *(char *)--v13;
    unsigned int v15 = v16;
    if ((v16 & 0x80000000) != 0)
    {
      if (!__maskrune(v15, 0x4000uLL))
      {
LABEL_30:
        uint64_t v14 = (std::string *)(v13 + 1);
        break;
      }
    }
    else if ((*(_DWORD *)(v6 + 4 * v15 + 60) & 0x4000) == 0)
    {
      goto LABEL_30;
    }
  }
  uint64_t v17 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  int v18 = (char)v17;
  uint64_t v19 = (char *)this + v17;
  if (v18 >= 0)
  {
    std::string v20 = this;
  }
  else
  {
    uint64_t v19 = (char *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    std::string v20 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  return std::string::erase(this, (char *)v14 - (char *)v20, v19 - (char *)v14);
}

void AGCCodeGenServiceDestroyInternal(void *a1)
{
  uint64_t v2 = OGLCodeGenService::oglCodeGenService;
  if (OGLCodeGenService::oglCodeGenService)
  {
    (*(void (**)(void))(OGLCodeGenService::oglCodeGenService + 8))();
    dlclose(*(void **)v2);
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
    *(void *)uint64_t v2 = 0;
    MEMORY[0x1CB7A0780](v2, 0x80C40D6874129);
  }
  OGLCodeGenService::oglCodeGenService = 0;
  if (AGCPrinter) {
    BOOL v3 = AGCPrinter == MEMORY[0x1E4FBA240];
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
LABEL_9:
    if (a1) {
      goto LABEL_10;
    }
    return;
  }
  (*(void (**)(void))(*(void *)AGCPrinter + 8))();
  AGCPrinter = 0;
  getFilePath();
  if ((byte_1EA612A77 & 0x80000000) == 0)
  {
    LOBYTE(getFilePath(void)::file_path) = 0;
    byte_1EA612A77 = 0;
    goto LABEL_9;
  }
  *(unsigned char *)getFilePath(void)::file_path = 0;
  qword_1EA612A68 = 0;
  if (a1)
  {
LABEL_10:
    uint64_t v4 = (AGCLLVMCtx *)a1[8];
    if (v4)
    {
      AGCLLVMCtx::~AGCLLVMCtx(v4);
      MEMORY[0x1CB7A0780]();
    }
    JUMPOUT(0x1CB7A0780);
  }
}

uint64_t GLCompilerBuildRequest(void *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v9 = 0;
  return AGCCodeGenServiceBuildRequestInternal(a1, a2, a3, a4, a5, 0, &v9, a7, a8);
}

BOOL isComputeShader(unsigned int a1)
{
  BOOL result = 1;
  if (a1 > 0x1B || ((1 << a1) & 0x8070040) == 0) {
    return a1 == 91 || a1 == 93;
  }
  return result;
}

uint64_t AGCLLVMFragmentContextState::enableImgWBlkPBECmp(AGCLLVMFragmentContextState *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 2) + 65) >> 1) & 1;
}

uint64_t GLCompilerLogBuildRequest(int a1, void *a2, size_t a3, const void *a4, size_t a5, unsigned int a6, char *a7)
{
  unsigned int v11 = a6;
  uint64_t result = GLCompilerLogBuildRequestInternal(a2, a3, a7, "state", &v11);
  if (result) {
    return GLCompilerLogBuildRequestInternal(a4, a5, a7, "bitcode", 0);
  }
  return result;
}

void GLCompilerReleaseReply(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t MTLCompilerCreate(unsigned int *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  size_t v5 = a1[1];
  size_t v6 = a1[2];
  size_t v7 = a1 + 3;
  std::string::basic_string[abi:nn180100](&__dst, a1 + 3, v5);
  std::string::basic_string[abi:nn180100](&__p, (char *)v7 + v5, v6);
  unint64_t v8 = (v5 + v6 + 12);
  memset(&v11, 0, sizeof(v11));
  if (a2 > v8) {
    std::string::append(&v11, (const std::string::value_type *)a1 + v8, a2 - v8);
  }
  uint64_t Internal = AGCCodeGenServiceCreateInternal((uint64_t)&v11, v4, 2u);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (v15 < 0) {
    operator delete(__dst);
  }
  return Internal;
}

char *generateInternalErrorMessage(char **a1, int a2)
{
  std::string::basic_string[abi:nn180100]<0>(&v7, "Internal error during ");
  if ((a2 - 3) <= 5) {
    std::string::append(&v7, off_1E65E9E40[a2 - 3]);
  }
  std::string::append(&v7, "function compilation");
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    size_t v5 = (void *)v7.__r_.__value_.__r.__words[0];
    uint64_t v4 = strdup(v7.__r_.__value_.__l.__data_);
    *a1 = v4;
    operator delete(v5);
  }
  else
  {
    uint64_t v4 = strdup((const char *)&v7);
    *a1 = v4;
  }
  return v4;
}

uint64_t MTLCompilerBuildRequestWithSerializedBitcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, char **a13)
{
  *a11 = 0;
  *a9 = 0;
  *a7 = 0;
  *a12 = 0;
  *a10 = 0;
  *a8 = 0;
  *a13 = generateInternalErrorMessage(&v14, 0);
  return 1;
}

uint64_t MTLCompilerBuildRequest(void *a1, char *a2, unint64_t a3, llvm::Module *a4, void *a5, void *a6, char **a7)
{
  int v19 = 0;
  if (AGCCodeGenServiceBuildRequestInternal(a1, a2, a3, 0, 0, a4, &v19, a5, a6))
  {
    uint64_t result = 0;
    *a7 = 0;
  }
  else
  {
    int v18 = (char *)a1[2];
    uint64_t v17 = (char **)(a1 + 2);
    InternalErrorMessage = v18;
    if (!v18) {
      InternalErrorMessage = generateInternalErrorMessage(v17, v19);
    }
    *a7 = InternalErrorMessage;
    printMessage((char **)&AGCPrinter, "** Compilation failed with error: %s **", v9, v10, v11, v12, v13, v14, (char)InternalErrorMessage);
    return 1;
  }
  return result;
}

void AGCEnv::getStatusVariables(AGCEnv *this)
{
  {
    AGCEnv::getStatusVariables(void)::status_vars = (uint64_t)operator new(0x128uLL);
    uint64_t v1 = AGCEnv::getStatusVariables(void)::status_vars + 296;
    qword_1EBD0EB48 = AGCEnv::getStatusVariables(void)::status_vars + 296;
    memcpy((void *)AGCEnv::getStatusVariables(void)::status_vars, off_1E65E9E70, 0x128uLL);
    qword_1EBD0EB40 = v1;
    __cxa_atexit((void (*)(void *))std::vector<char const*>::~vector[abi:nn180100], &AGCEnv::getStatusVariables(void)::status_vars, &dword_1CAC02000);
  }
}

uint64_t std::vector<char const*>::~vector[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t std::map<std::string,std::string>::~map[abi:nn180100](uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t AGCEnv::getOSLog(AGCEnv *this)
{
  uint64_t v1 = &AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map;
  {
    uint64_t v1 = &AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map;
    if (v3)
    {
      AGCEnv::getOSLog(void)::log = (uint64_t)os_log_create("com.apple.agx", "AGCEnv");
      uint64_t v1 = &AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map;
    }
  }
  return v1[362];
}

uint64_t GLCompilerLogBuildRequestInternal(const void *a1, size_t a2, const char *a3, const char *a4, unsigned int *a5)
{
  if (!a2) {
    return 1;
  }
  uint64_t v17 = 0;
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", @"/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/AGX", 1, 0, &v17) & 1) == 0)
  {
    syslog(3, "Unable to create log directory");
    return 0;
  }
  uint64_t v10 = NSString;
  if (getFileDateFormatter(void)::onceToken != -1) {
    dispatch_once(&getFileDateFormatter(void)::onceToken, &__block_literal_global);
  }
  uint64_t v11 = (void *)[v10 stringWithFormat:@"%@/%s_%@_%s.log", @"/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/AGX", a3, objc_msgSend((id)getFileDateFormatter(void)::formatter, "stringFromDate:", objc_msgSend(MEMORY[0x1E4F1C9C8], "date")), a4];
  uint64_t v12 = fopen((const char *)[v11 UTF8String], "wb");
  if (!v12)
  {
    [v11 UTF8String];
    syslog(3, "Failure to create log file: %s");
    return 0;
  }
  uint64_t v13 = v12;
  if (a5 && fwrite(a5, 1uLL, 4uLL, v12) != 4 || (uint64_t v14 = 1, v15 = fwrite(a1, 1uLL, a2, v13), fclose(v13), v15 != a2))
  {
    [v11 UTF8String];
    syslog(3, "Failed to write log file (wrote %zu bytes, expected %zu bytes): %s");
    return 0;
  }
  return v14;
}

uint64_t ___ZL20getFileDateFormatterv_block_invoke()
{
  getFileDateFormatter(void)::formatter = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28C10]);
  [(id)getFileDateFormatter(void)::formatter setDateStyle:1];
  uint64_t v0 = (void *)getFileDateFormatter(void)::formatter;
  return [v0 setDateFormat:@"yyyy_MM_dd_HH_mm_ssZZZ"];
}

uint64_t anonymous namespace'::reportError(uint64_t a1)
{
  uint64_t v2 = (FILE **)MEMORY[0x1E4F143C8];
  fwrite("Error occured during IR replacement\n", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
  if (*(char *)(a1 + 23) >= 0) {
    int v3 = (const char *)a1;
  }
  else {
    int v3 = *(const char **)a1;
  }
  return fprintf(*v2, "%s\n", v3);
}

char **llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0) {
        operator delete(*(void **)&v2[v4 - 24]);
      }
      v4 -= 40;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void ___ZN12_GLOBAL__N_120AGCReplacementIRInfoC2Ev_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

BOOL validateUserLocalMemoryUsage(unsigned int __val, unsigned int a2, std::string *a3)
{
  if (__val > a2)
  {
    std::to_string(&v22, __val);
    size_t v6 = std::string::insert(&v22, 0, "Threadgroup memory size (");
    std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v23, ") ");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v24, "exceeds the maximum threadgroup memory allowed (");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = std::string::append(&v25, (const std::string::value_type *)p_p, size);
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    unsigned int v16 = std::string::append(&v26, ")");
    std::string::size_type v17 = v16->__r_.__value_.__r.__words[2];
    long long v27 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    uint64_t v28 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v28 >= 0) {
      int v18 = (const std::string::value_type *)&v27;
    }
    else {
      int v18 = (const std::string::value_type *)v27;
    }
    if (v28 >= 0) {
      std::string::size_type v19 = HIBYTE(v28);
    }
    else {
      std::string::size_type v19 = *((void *)&v27 + 1);
    }
    std::string::append(a3, v18, v19);
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)v27);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  return __val <= a2;
}

uint64_t validateUserMeshLocalMemoryUsage(unsigned int a1, unsigned int __val, unsigned int a3, unsigned int a4, unsigned int a5, std::string *a6)
{
  if (a1 > a3)
  {
    std::to_string(&v58, a1);
    unint64_t v8 = std::string::insert(&v58, 0, "Threadgroup memory size (");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v59, ") ");
    std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v60, "exceeds the maximum threadgroup memory allowed (");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unsigned int v14 = a3;
LABEL_5:
    std::to_string(&v57, v14);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v23 = &v57;
    }
    else {
      std::string v23 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v57.__r_.__value_.__l.__size_;
    }
    std::string v25 = std::string::append(&v61, (const std::string::value_type *)v23, size);
    std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    long long v27 = std::string::append(&v62, ")");
    std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
    long long v63 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    uint64_t v64 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0) {
      uint64_t v29 = (const std::string::value_type *)&v63;
    }
    else {
      uint64_t v29 = (const std::string::value_type *)v63;
    }
    if (v64 >= 0) {
      std::string::size_type v30 = HIBYTE(v64);
    }
    else {
      std::string::size_type v30 = *((void *)&v63 + 1);
    }
    std::string::append(a6, v29, v30);
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)v63);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    int v31 = (void *)v58.__r_.__value_.__r.__words[0];
    goto LABEL_31;
  }
  if (__val > a4)
  {
    std::to_string(&v58, __val);
    std::string::size_type v17 = std::string::insert(&v58, 0, "Total mesh size (");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v19 = std::string::append(&v59, ") ");
    std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v60, "exceeds the maximum mesh size allowed (");
    std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    unsigned int v14 = a4;
    goto LABEL_5;
  }
  if (__val + a1 <= a5) {
    return 1;
  }
  std::to_string(&v56, a1);
  std::string::size_type v34 = std::string::insert(&v56, 0, "Threadgroup memory size and mesh size (");
  std::string::size_type v35 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v36 = std::string::append(&v57, " + ");
  std::string::size_type v37 = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v55, __val);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v38 = &v55;
  }
  else {
    int v38 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v39 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v39 = v55.__r_.__value_.__l.__size_;
  }
  int v40 = std::string::append(&v58, (const std::string::value_type *)v38, v39);
  std::string::size_type v41 = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  std::string v42 = std::string::append(&v59, ") ");
  std::string::size_type v43 = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  uint64_t v44 = std::string::append(&v60, "exceed the maximum limit allowed (");
  std::string::size_type v45 = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v54, a5);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v46 = &v54;
  }
  else {
    char v46 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v47 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v47 = v54.__r_.__value_.__l.__size_;
  }
  __int16 v48 = std::string::append(&v61, (const std::string::value_type *)v46, v47);
  std::string::size_type v49 = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  __int16 v50 = std::string::append(&v62, ")");
  std::string::size_type v51 = v50->__r_.__value_.__r.__words[2];
  long long v63 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  uint64_t v64 = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (v64 >= 0) {
    __int16 v52 = (const std::string::value_type *)&v63;
  }
  else {
    __int16 v52 = (const std::string::value_type *)v63;
  }
  if (v64 >= 0) {
    std::string::size_type v53 = HIBYTE(v64);
  }
  else {
    std::string::size_type v53 = *((void *)&v63 + 1);
  }
  std::string::append(a6, v52, v53);
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)v63);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    int v31 = (void *)v56.__r_.__value_.__r.__words[0];
LABEL_31:
    operator delete(v31);
  }
  return 0;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

uint64_t virtual thunk to'AGCLLVMUserFragmentShader::enableImgWBlkPBECmp(AGCLLVMUserFragmentShader *this)
{
  return (*(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 232) + 5808) + 65) >> 1) & 1;
}

uint64_t AGCLLVMObject::getCompiledObjectSize(AGCLLVMObject *this)
{
  return *(void *)(*((void *)this + 58) + 160);
}

uint64_t AGCLLVMObject::getCompiledObject(AGCLLVMObject *this)
{
  return *(void *)(*((void *)this + 58) + 152);
}

uint64_t virtual thunk to'AGCLLVMAGPFragmentShader::constructReply(AGCLLVMAGPFragmentShader *this)
{
  return AGCLLVMAGPFragmentShader::constructReply((AGCLLVMAGPFragmentShader *)((char *)this
                                                                             + *(void *)(*(void *)this - 152)));
}

flatbuffers::IDLOptions *flatbuffers::IDLOptions::IDLOptions(flatbuffers::IDLOptions *this)
{
  *(_DWORD *)((char *)this + 3) = 0;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 2) = 2;
  *((_DWORD *)this + 3) = 257;
  *((unsigned char *)this + 16) = 1;
  *(void *)((char *)this + 17) = 0;
  *((unsigned char *)this + 25) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)this + 4, "std::unique_ptr");
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 20) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)this + 14, "T");
  *((_WORD *)this + 68) = 1;
  *((unsigned char *)this + 138) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 18) = 0;
  *(void *)((char *)this + 165) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 1;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 29) = 0;
  *(_DWORD *)((char *)this + 255) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((void *)this + 41) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)this + 42, "_generated");
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 1;
  *((void *)this + 49) = 0;
  *((_WORD *)this + 200) = 257;
  return this;
}

void flatbuffers::Parser::Parser(flatbuffers::Parser *this, const flatbuffers::IDLOptions *a2)
{
  *(_OWORD *)this = 0u;
  *((void *)this + 2) = 0xFFFFFFFF00000000;
  *((unsigned char *)this + 24) = 1;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = (char *)this + 88;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 16) = (char *)this + 136;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = (char *)this + 184;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 27) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  uint64_t v4 = (char *)this + 232;
  *((void *)this + 28) = (char *)this + 232;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((unsigned char *)this + 344) = 0;
  *((_OWORD *)this + 22) = xmmword_1CADD6280;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 1;
  *((_WORD *)this + 208) = 256;
  size_t v5 = (char *)this + 432;
  *((void *)this + 53) = 0;
  size_t v6 = operator new(0x100uLL);
  *((void *)v4 + 27) = v6 + 16;
  _OWORD *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  unsigned int v6[11] = 0u;
  v6[12] = 0u;
  v6[13] = 0u;
  v6[14] = 0u;
  v6[15] = 0u;
  v4[248] = 0;
  *((void *)v4 + 30) = 0;
  *((_OWORD *)v4 + 14) = 0u;
  *(void *)(v4 + 252) = 7;
  *(_OWORD *)(v5 + 72) = 0u;
  *((void *)v4 + 33) = v5 + 72;
  *(_OWORD *)(v5 + 104) = 0u;
  *((void *)v4 + 36) = v5;
  *((void *)v4 + 37) = v5 + 104;
  *((void *)v4 + 25) = v6;
  *((void *)v4 + 26) = v6;
  *((void *)v4 + 40) = v5;
  *((void *)v4 + 41) = 0;
  *((_WORD *)v4 + 168) = 0;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 340) = 0u;
  *(_OWORD *)(v4 + 356) = 0u;
  *(_OWORD *)(v4 + 372) = 0u;
  *((_OWORD *)v4 + 24) = 0u;
  *((void *)v4 + 50) = v4 + 408;
  *((_OWORD *)v4 + 27) = 0u;
  *((void *)v4 + 53) = v4 + 432;
  *((_OWORD *)v4 + 28) = 0u;
  *((void *)v4 + 60) = 0;
  *((void *)v4 + 61) = 0;
  *((void *)v4 + 58) = 0;
  *((void *)v4 + 59) = v4 + 480;
  long long v7 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 506) = *(_OWORD *)((char *)a2 + 10);
  *((_OWORD *)v4 + 31) = v7;
  unint64_t v8 = (std::string *)(v4 + 528);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 2);
    *((void *)v4 + 68) = *((void *)a2 + 6);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  uint64_t v10 = (std::string *)((char *)this + 784);
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)((char *)a2 + 56);
    *((void *)this + 100) = *((void *)a2 + 9);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)this + 202) = *((_DWORD *)a2 + 20);
  uint64_t v12 = (std::string *)((char *)this + 816);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v13 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 104) = *((void *)a2 + 13);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  unsigned int v14 = (std::string *)((char *)this + 840);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v15 = *((_OWORD *)a2 + 7);
    *((void *)this + 107) = *((void *)a2 + 16);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  __int16 v16 = *((_WORD *)a2 + 68);
  *((unsigned char *)this + 866) = *((unsigned char *)a2 + 138);
  *((_WORD *)this + 432) = v16;
  std::string::size_type v17 = (std::string *)((char *)this + 872);
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v18 = *((_OWORD *)a2 + 9);
    *((void *)this + 111) = *((void *)a2 + 20);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  int v19 = *((_DWORD *)a2 + 42);
  *((unsigned char *)this + 900) = *((unsigned char *)a2 + 172);
  *((_DWORD *)this + 224) = v19;
  std::string::size_type v20 = (std::string *)((char *)this + 904);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *((const std::string::value_type **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v21 = *((_OWORD *)a2 + 11);
    *((void *)this + 115) = *((void *)a2 + 24);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  std::string::size_type v22 = (std::string *)((char *)this + 928);
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *((const std::string::value_type **)a2 + 25), *((void *)a2 + 26));
  }
  else
  {
    long long v23 = *(_OWORD *)((char *)a2 + 200);
    *((void *)this + 118) = *((void *)a2 + 27);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
  }
  *((_DWORD *)this + 238) = *((_DWORD *)a2 + 56);
  std::string v24 = (std::string *)((char *)this + 960);
  if (*((char *)a2 + 255) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *((const std::string::value_type **)a2 + 29), *((void *)a2 + 30));
  }
  else
  {
    long long v25 = *(_OWORD *)((char *)a2 + 232);
    *((void *)this + 122) = *((void *)a2 + 31);
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
  }
  __int16 v26 = *((_WORD *)a2 + 128);
  *((unsigned char *)this + 986) = *((unsigned char *)a2 + 258);
  *((_WORD *)this + 492) = v26;
  *((void *)this + 124) = 0;
  *((void *)this + 126) = 0;
  *((void *)this + 125) = 0;
  long long v27 = (long long *)*((void *)a2 + 33);
  std::string::size_type v28 = (long long *)*((void *)a2 + 34);
  if (v28 != v27)
  {
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3);
    if (v29 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    std::string::size_type v30 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v29);
    *((void *)this + 124) = v30;
    *((void *)this + 125) = v30;
    *((void *)this + 126) = &v30[v31];
    do
    {
      if (*((char *)v27 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)v27, *((void *)v27 + 1));
      }
      else
      {
        long long v32 = *v27;
        v30->__r_.__value_.__r.__words[2] = *((void *)v27 + 2);
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v32;
      }
      long long v27 = (long long *)((char *)v27 + 24);
      ++v30;
    }
    while (v27 != v28);
    *((void *)this + 125) = v30;
  }
  uint64_t v33 = (std::string *)((char *)this + 1016);
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external(v33, *((const std::string::value_type **)a2 + 36), *((void *)a2 + 37));
  }
  else
  {
    long long v34 = *((_OWORD *)a2 + 18);
    *((void *)this + 129) = *((void *)a2 + 38);
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
  }
  std::string::size_type v35 = (std::string *)((char *)this + 1040);
  if (*((char *)a2 + 335) < 0)
  {
    std::string::__init_copy_ctor_external(v35, *((const std::string::value_type **)a2 + 39), *((void *)a2 + 40));
  }
  else
  {
    long long v36 = *(_OWORD *)((char *)a2 + 312);
    *((void *)this + 132) = *((void *)a2 + 41);
    *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
  }
  std::string::size_type v37 = (std::string *)((char *)this + 1064);
  if (*((char *)a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external(v37, *((const std::string::value_type **)a2 + 42), *((void *)a2 + 43));
  }
  else
  {
    long long v38 = *((_OWORD *)a2 + 21);
    *((void *)this + 135) = *((void *)a2 + 44);
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
  }
  std::string::size_type v39 = (std::string *)((char *)this + 1088);
  if (*((char *)a2 + 383) < 0)
  {
    std::string::__init_copy_ctor_external(v39, *((const std::string::value_type **)a2 + 45), *((void *)a2 + 46));
  }
  else
  {
    long long v40 = *(_OWORD *)((char *)a2 + 360);
    *((void *)this + 138) = *((void *)a2 + 47);
    *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
  }
  long long v41 = *((_OWORD *)a2 + 24);
  *((_WORD *)this + 564) = *((_WORD *)a2 + 200);
  *(_OWORD *)((char *)this + 1112) = v41;
  *((unsigned char *)this + 1136) = 0;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  if (*((unsigned char *)this + 984)) {
    *((unsigned char *)this + 416) = 1;
  }
  operator new();
}

void flatbuffers::IDLOptions::~IDLOptions(void **this)
{
  if (*((char *)this + 383) < 0) {
    operator delete(this[45]);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(this[42]);
  }
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  uint64_t v2 = this + 33;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

void flatbuffers::Parser::~Parser(flatbuffers::Parser *this)
{
  uint64_t v3 = (void ***)*((void *)this + 34);
  uint64_t v2 = (void ***)*((void *)this + 35);
  while (v3 != v2)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      long long v32 = *v3;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
      MEMORY[0x1CB7A0780](v4, 0x1020C4016EE4530);
      uint64_t v2 = (void ***)*((void *)this + 35);
    }
    ++v3;
  }
  uint64_t v5 = *((void *)this + 147);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 148);
    long long v7 = (void *)*((void *)this + 147);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 17) < 0) {
          operator delete(*(void **)(v6 - 40));
        }
        v6 -= 72;
      }
      while (v6 != v5);
      long long v7 = (void *)*((void *)this + 147);
    }
    *((void *)this + 148) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 1175) < 0) {
    operator delete(*((void **)this + 144));
  }
  flatbuffers::IDLOptions::~IDLOptions((void **)this + 91);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 89));
  long long v32 = (void **)((char *)this + 680);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((char **)this + 83));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void **)this + 80));
  if (*((char *)this + 631) < 0) {
    operator delete(*((void **)this + 76));
  }
  if (*((char *)this + 607) < 0) {
    operator delete(*((void **)this + 73));
  }
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)this + 67));
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((void **)this + 63));
  unint64_t v8 = (void *)*((void *)this + 57);
  if (v8)
  {
    *((void *)this + 58) = v8;
    operator delete(v8);
  }
  long long v9 = (void *)*((void *)this + 54);
  if (v9)
  {
    *((void *)this + 55) = v9;
    operator delete(v9);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::Parser *)((char *)this + 336));
  if (*((char *)this + 335) < 0) {
    operator delete(*((void **)this + 39));
  }
  uint64_t v10 = (void *)*((void *)this + 34);
  if (v10)
  {
    *((void *)this + 35) = v10;
    operator delete(v10);
  }
  uint64_t v12 = (uint64_t *)*((void *)this + 31);
  long long v11 = (uint64_t *)*((void *)this + 32);
  if (v12 != v11)
  {
    do
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        long long v15 = *(uint64_t **)(v13 + 176);
        unsigned int v14 = *(uint64_t **)(v13 + 184);
        if (v15 != v14)
        {
          do
          {
            uint64_t v16 = *v15;
            if (*v15)
            {
              flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v16 + 72);
              long long v32 = (void **)(v16 + 48);
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
              if (*(char *)(v16 + 47) < 0) {
                operator delete(*(void **)(v16 + 24));
              }
              if (*(char *)(v16 + 23) < 0) {
                operator delete(*(void **)v16);
              }
              MEMORY[0x1CB7A0780](v16, 0x10B2C40EE200C30);
              unsigned int v14 = *(uint64_t **)(v13 + 184);
            }
            ++v15;
          }
          while (v15 != v14);
          long long v15 = *(uint64_t **)(v13 + 176);
        }
        if (v15)
        {
          *(void *)(v13 + 184) = v15;
          operator delete(v15);
        }
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(v13 + 160));
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v13 + 72);
        long long v32 = (void **)(v13 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
        if (*(char *)(v13 + 47) < 0) {
          operator delete(*(void **)(v13 + 24));
        }
        if (*(char *)(v13 + 23) < 0) {
          operator delete(*(void **)v13);
        }
        MEMORY[0x1CB7A0780](v13, 0x10B2C401A85D49FLL);
        long long v11 = (uint64_t *)*((void *)this + 32);
      }
      ++v12;
    }
    while (v12 != v11);
    uint64_t v12 = (uint64_t *)*((void *)this + 31);
  }
  if (v12)
  {
    *((void *)this + 32) = v12;
    operator delete(v12);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 29));
  long long v18 = (uint64_t *)*((void *)this + 25);
  std::string::size_type v17 = (uint64_t *)*((void *)this + 26);
  if (v18 != v17)
  {
    do
    {
      uint64_t v19 = *v18;
      if (*v18)
      {
        long long v21 = *(uint64_t **)(v19 + 208);
        std::string::size_type v20 = *(uint64_t **)(v19 + 216);
        if (v21 != v20)
        {
          do
          {
            uint64_t v22 = *v21;
            if (*v21)
            {
              flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v22 + 88);
              long long v32 = (void **)(v22 + 24);
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
              if (*(char *)(v22 + 23) < 0) {
                operator delete(*(void **)v22);
              }
              MEMORY[0x1CB7A0780](v22, 0x10B2C4072A4B994);
              std::string::size_type v20 = *(uint64_t **)(v19 + 216);
            }
            ++v21;
          }
          while (v21 != v20);
          long long v21 = *(uint64_t **)(v19 + 208);
        }
        if (v21)
        {
          *(void *)(v19 + 216) = v21;
          operator delete(v21);
        }
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(v19 + 192));
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v19 + 72);
        long long v32 = (void **)(v19 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
        if (*(char *)(v19 + 47) < 0) {
          operator delete(*(void **)(v19 + 24));
        }
        if (*(char *)(v19 + 23) < 0) {
          operator delete(*(void **)v19);
        }
        MEMORY[0x1CB7A0780](v19, 0x10B2C409EE52067);
        std::string::size_type v17 = (uint64_t *)*((void *)this + 26);
      }
      ++v18;
    }
    while (v18 != v17);
    long long v18 = (uint64_t *)*((void *)this + 25);
  }
  if (v18)
  {
    *((void *)this + 26) = v18;
    operator delete(v18);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 23));
  std::string v24 = (uint64_t *)*((void *)this + 19);
  long long v23 = (uint64_t *)*((void *)this + 20);
  if (v24 != v23)
  {
    do
    {
      uint64_t v25 = *v24;
      if (*v24)
      {
        uint64_t v26 = *(void *)(v25 + 224);
        *(void *)(v25 + 224) = 0;
        if (v26)
        {
          if (*(char *)(v26 + 23) < 0) {
            operator delete(*(void **)v26);
          }
          MEMORY[0x1CB7A0780](v26, 0x1012C40EC159624);
        }
        std::string::size_type v28 = *(uint64_t **)(v25 + 176);
        long long v27 = *(uint64_t **)(v25 + 184);
        if (v28 != v27)
        {
          do
          {
            uint64_t v29 = *v28;
            if (*v28)
            {
              if (*(char *)(v29 + 207) < 0) {
                operator delete(*(void **)(v29 + 184));
              }
              flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v29 + 72);
              long long v32 = (void **)(v29 + 48);
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
              if (*(char *)(v29 + 47) < 0) {
                operator delete(*(void **)(v29 + 24));
              }
              if (*(char *)(v29 + 23) < 0) {
                operator delete(*(void **)v29);
              }
              MEMORY[0x1CB7A0780](v29, 0x10B2C40559199D4);
              long long v27 = *(uint64_t **)(v25 + 184);
            }
            ++v28;
          }
          while (v28 != v27);
          std::string::size_type v28 = *(uint64_t **)(v25 + 176);
        }
        if (v28)
        {
          *(void *)(v25 + 184) = v28;
          operator delete(v28);
        }
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(v25 + 160));
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v25 + 72);
        long long v32 = (void **)(v25 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
        if (*(char *)(v25 + 47) < 0) {
          operator delete(*(void **)(v25 + 24));
        }
        if (*(char *)(v25 + 23) < 0) {
          operator delete(*(void **)v25);
        }
        MEMORY[0x1CB7A0780](v25, 0x10B2C4058EA06FBLL);
        long long v23 = (uint64_t *)*((void *)this + 20);
      }
      ++v24;
    }
    while (v24 != v23);
    std::string v24 = (uint64_t *)*((void *)this + 19);
  }
  if (v24)
  {
    *((void *)this + 20) = v24;
    operator delete(v24);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 17));
  uint64_t v31 = (void *)*((void *)this + 13);
  std::string::size_type v30 = (void *)*((void *)this + 14);
  if (v31 != v30)
  {
    do
    {
      if (*v31)
      {
        MEMORY[0x1CB7A0780](*v31, 0x1020C4001A1C0B8);
        std::string::size_type v30 = (void *)*((void *)this + 14);
      }
      ++v31;
    }
    while (v31 != v30);
    uint64_t v31 = (void *)*((void *)this + 13);
  }
  if (v31)
  {
    *((void *)this + 14) = v31;
    operator delete(v31);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 11));
  long long v32 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v32);
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*((void *)a1 + 1));
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)a1 + 8));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (*(char *)(v4 + 55) < 0) {
          operator delete(*(void **)(v4 + 32));
        }
        MEMORY[0x1CB7A0780](v4, 0x1032C40E9BF265ALL);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

char *flatbuffers::Allocator::reallocate_downward(flatbuffers::Allocator *this, unsigned __int8 *a2, uint64_t a3, uint64_t a4, size_t a5, size_t a6)
{
  uint64_t v12 = (char *)(*(uint64_t (**)(flatbuffers::Allocator *, uint64_t))(*(void *)this + 16))(this, a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(flatbuffers::Allocator *, unsigned __int8 *, uint64_t))(*(void *)this + 24))(this, a2, a3);
  return v12;
}

void flatbuffers::DefaultAllocator::deallocate(flatbuffers::DefaultAllocator *this, unsigned __int8 *a2)
{
  if (a2) {
    JUMPOUT(0x1CB7A0760);
  }
}

void flatbuffers::DefaultAllocator::allocate(flatbuffers::DefaultAllocator *this)
{
}

void flatbuffers::DefaultAllocator::~DefaultAllocator(flatbuffers::DefaultAllocator *this)
{
}

uint64_t **std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v5;
        unint64_t v8 = v5 + 4;
        if (!std::less<std::string>::operator()[abi:nn180100](a2, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v6;
        long long v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v8, a2)) {
        break;
      }
      long long v9 = v6 + 1;
      uint64_t v5 = v6[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_9:
    uint64_t v10 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x40uLL);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    v6[6] = *(uint64_t **)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((unsigned char *)v6 + 56) = 0;
    _OWORD *v6 = 0;
    v6[1] = 0;
    v6[2] = v10;
    *long long v9 = (uint64_t *)v6;
    long long v11 = (uint64_t *)**a1;
    uint64_t v12 = (uint64_t *)v6;
    if (v11)
    {
      *a1 = v11;
      uint64_t v12 = *v9;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

const char *AGCEnv::getBool(AGCEnv *this, const char *a2)
{
  uint64_t result = (const char *)AGCEnv::getValue(this, a2);
  if (result)
  {
    if (*result == 48) {
      return 0;
    }
    else {
      return (const char *)(atoi(result) != 0);
    }
  }
  return result;
}

uint64_t printHexDump(char **a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5, int a6)
{
  uint64_t result = isValidToPrintMessage(a1);
  if (result)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v27);
    if (a6)
    {
      uint64_t v12 = *a1;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"{", 1);
      std::ios_base::getloc((const std::ios_base *)&v12[*(void *)(*(void *)v12 - 24)]);
      uint64_t v13 = std::locale::use_facet(&v30, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v30);
      std::ostream::put();
      std::ostream::flush();
    }
    if (a3)
    {
      unint64_t v14 = 0;
      unint64_t v15 = a4;
      uint64_t v16 = a4 - 1;
      do
      {
        if (a6 && !(v14 % v15)) {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\t", 1);
        }
        std::string::size_type v17 = *a1;
        size_t v18 = strlen(a5);
        uint64_t v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)a5, v18);
        *(void *)&v17[*(void *)(*(void *)v17 - 24) + 24] = 2;
        std::operator<<[abi:nn180100]<std::char_traits<char>>(v19, 48);
        *(_DWORD *)&v17[*(void *)(*(void *)v17 - 24) + 8] = *(_DWORD *)&v17[*(void *)(*(void *)v17 - 24) + 8] & 0xFFFFFFB5 | 8;
        std::string::size_type v20 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)" ", 1);
        if (v14 % v15 == v16)
        {
          std::ios_base::getloc((const std::ios_base *)&(*a1)[*(void *)(*(void *)*a1 - 24)]);
          long long v21 = std::locale::use_facet(&v30, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
          std::locale::~locale(&v30);
          std::ostream::put();
          std::ostream::flush();
        }
        ++v14;
      }
      while (a3 != v14);
    }
    if (a6)
    {
      uint64_t v22 = *a1;
      std::ios_base::getloc((const std::ios_base *)&(*a1)[*(void *)(*(void *)*a1 - 24)]);
      long long v23 = (std::locale::id *)MEMORY[0x1E4FBA258];
      std::string v24 = std::locale::use_facet(&v30, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale(&v30);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"}", 1);
      std::ios_base::getloc((const std::ios_base *)&v22[*(void *)(*(void *)v22 - 24)]);
      uint64_t v25 = std::locale::use_facet(&v30, v23);
      ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
      std::locale::~locale(&v30);
      std::ostream::put();
      std::ostream::flush();
    }
    std::ostream::flush();
    v27[0] = *MEMORY[0x1E4FBA408];
    uint64_t v26 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v27[2] = v26;
    v27[3] = MEMORY[0x1E4FBA470] + 16;
    if (v28 < 0) {
      operator delete((void *)v27[11]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x1CB7A0710](&v29);
  }
  return result;
}

void *std::operator<<[abi:nn180100]<std::char_traits<char>>(void *a1, char a2)
{
  uint64_t v4 = (char *)a1 + *(void *)(*a1 - 24);
  if (*((_DWORD *)v4 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    uint64_t v5 = std::locale::use_facet(&v7, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v7);
  }
  *((_DWORD *)v4 + 36) = a2;
  return a1;
}

uint64_t virtual thunk to'AGCLLVMAGPFragmentShader::getForwardProgressMode(AGCLLVMAGPFragmentShader *this)
{
  return *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 128) + 5808) + 60) >> 31;
}

void AGCLLVMObject::getObjectName(AGCLLVMObject *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 3271) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 406), *((void *)this + 407));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 203);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 408);
  }
}

void virtual thunk to'AGCLLVMAGPFragmentShader::~AGCLLVMAGPFragmentShader(AGCLLVMAGPFragmentShader *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6928));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  uint64_t v2 = (AGCLLVMObject *)(v1 + 6928);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t AGCLLVMObject::isDMAPromotionDisabled(AGCLLVMObject *this)
{
  return 0;
}

uint64_t AGCLLVMObject::enableSoftFaultOptimization(AGCLLVMObject *this)
{
  return 0;
}

uint64_t AGCLLVMObject::getBufferBoundsCheckMode(AGCLLVMObject *this)
{
  return 0;
}

uint64_t AGCLLVMObject::getForwardProgressMode(AGCLLVMObject *this)
{
  return 0;
}

uint64_t AGCLLVMObject::getMainDeserializedReply(AGCLLVMObject *this)
{
  return (uint64_t)this + 472;
}

uint64_t AGCLLVMUserFragmentShader::getSupportExternalVisibleFunctions(AGCLLVMUserFragmentShader *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 726) + 64) >> 6) & 1;
}

uint64_t AGCLLVMUserFragmentShader::replacePullMode_Or_ParentVertex_Index()
{
  return 0;
}

uint64_t AGCLLVMUserFragmentShader::detectSideEffects(AGCLLVMUserFragmentShader *this)
{
  return 1;
}

uint64_t AGCLLVMUserFragmentShader::enableImgWBlkPBECmp(AGCLLVMUserFragmentShader *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 726) + 65) >> 1) & 1;
}

uint64_t AGCLLVMUserFragmentShader::getTextureWriteFPRoundingMode(AGCLLVMUserFragmentShader *this)
{
  return (*(_DWORD *)(*((void *)this + 726) + 64) >> 4) & 3;
}

uint64_t AGCLLVMUserFragmentShader::getShaderType(AGCLLVMUserFragmentShader *this)
{
  return 6;
}

const char *AGCLLVMUserFragmentShader::dumpType(AGCLLVMUserFragmentShader *this)
{
  return "fragment";
}

uint64_t AGCLLVMUserShader::getTileConstant()
{
  return 0;
}

uint64_t AGCLLVMUserObject::buildGin1122WA(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::getDrawBufferState(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::supportComputeSplitDispatch(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserFragmentShader::usesCustomBorderColor(AGCLLVMUserFragmentShader *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 726) + 64) >> 2) & 1;
}

uint64_t AGCLLVMUserObject::disableGin1122SWWA(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::supportsConstantSamplers(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::improveDMAPromotionOpportunity(AGCLLVMUserObject *this)
{
  return 1;
}

uint64_t AGCLLVMUserObject::isIntersectionFunctionBufferIntersectionFunction(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::adjustDfDyForInversion(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMObject::enableImgWBlkPBECmp(AGCLLVMObject *this)
{
  return 1;
}

uint64_t AGCLLVMObject::getSupportExternalVisibleFunctions(AGCLLVMObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::debugTraceBufferEnabled(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::usesCustomBorderColor(AGCLLVMUserObject *this)
{
  return 0;
}

uint64_t AGCLLVMUserObject::hasSamplerImplicitDerivatives(AGCLLVMUserObject *this)
{
  return 0;
}

void non-virtual thunk to'AGCLLVMAGPFragmentShader::~AGCLLVMAGPFragmentShader(AGCLLVMAGPFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMAGPFragmentShader *)((char *)this + 2608));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t vars8;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMAGPFragmentShader *)((char *)this + 2608));
}

uint64_t AGCLLVMAGPFragmentShader::setupPerPrimitiveVarying(AGCLLVMAGPFragmentShader *this)
{
  return 0;
}

uint64_t AGCLLVMAGPFragmentShader::isDMAPromotionDisabled(AGCLLVMAGPFragmentShader *this)
{
  return *(unsigned __int8 *)(*((void *)this + 726) + 60) >> 7;
}

BOOL AGCLLVMAGPFragmentShader::enableSoftFaultOptimization(AGCLLVMAGPFragmentShader *this)
{
  return (*(unsigned char *)(*((void *)this + 726) + 63) & 0x40) == 0;
}

uint64_t AGCLLVMAGPFragmentShader::getForwardProgressMode(AGCLLVMAGPFragmentShader *this)
{
  return *(_DWORD *)(*((void *)this + 726) + 60) >> 31;
}

uint64_t AGCLLVMAGPFragmentShader::getBufferBoundsCheckMode(AGCLLVMAGPFragmentShader *this)
{
  return (*(_DWORD *)(*((void *)this + 726) + 60) >> 4) & 7;
}

uint64_t AGCLLVMAGPFragmentShader::buildPixelPositionInTile(AGCLLVMAGPFragmentShader *this, llvm::Type *a2, uint64_t a3)
{
  uint64_t v5 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v6 = *((void *)v5 + 50);
  long long v9 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v10, (llvm::IRBuilderBase *)(v5 + 40));
  int v11 = *((_DWORD *)v5 + 34);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type *, uint64_t))(*(void *)v6 + 256))(v6, &v9, a2, a3);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

void AGCLLVMAGPFragmentShader::setupPullMode_Or_ParentVertex_Globals(AGCLLVMAGPFragmentShader *this)
{
  std::string::size_type v20 = (char *)this + 6448;
  uint64_t v19 = (char *)this + 288;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  size_t v18 = (char *)this + 6488;
  std::string::size_type v17 = (char *)this + 6608;
  uint64_t v16 = (char *)this + 6768;
  for (uint64_t i = 1; i != 5; ++i)
  {
    uint64_t v3 = (llvm::Type *)*(unsigned int *)&v20[4 * i];
    if (v3)
    {
      uint64_t v4 = (llvm::ArrayType *)llvm::ArrayType::get(*(llvm::ArrayType **)&v19[*(void *)(*(void *)this - 24) + 32], (llvm::Type *)i);
      llvm::ArrayType::get(v4, v3);
      uint64_t v5 = llvm::User::operator new((llvm::User *)0x58);
      long long v27 = "agc.pullmode_or_parentvertex_";
      unint64_t v22 = v22 & 0xFFFFFFFF00000000 | i;
      unint64_t v29 = v22;
      __int16 v30 = 2051;
      v24[0] = &v27;
      v25[0] = "_component_coefficients";
      __int16 v26 = 770;
      uint64_t v6 = llvm::GlobalVariable::GlobalVariable();
      *(unsigned char *)(v6 + 80) |= 1u;
      unint64_t v21 = v21 & 0xFFFFFFFFFFFF0000 | 0x104;
      llvm::GlobalObject::setAlignment();
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)&v18[24 * i], v5);
      v24[0] = v25;
      v24[1] = (void *)0x400000000;
      uint64_t v7 = llvm::ValueAsMetadata::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, v7);
      llvm::ConstantInt::get();
      uint64_t v8 = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      uint64_t v9 = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      uint64_t v10 = llvm::ValueAsMetadata::get();
      uint64_t v23 = i;
      int v11 = &v17[32 * i];
      if (*((_DWORD *)v11 + 2))
      {
        uint64_t v12 = v10;
        unint64_t v13 = 0;
        do
        {
          if (*(_DWORD *)(*(void *)&v16[32 * v23] + 4 * v13) == 1) {
            unint64_t v14 = (const char *)v8;
          }
          else {
            unint64_t v14 = (const char *)v9;
          }
          uint64_t v28 = 0;
          unint64_t v29 = 0;
          long long v27 = v14;
          llvm::ConstantInt::get();
          uint64_t v28 = llvm::ValueAsMetadata::get();
          unint64_t v29 = v12;
          uint64_t Impl = llvm::MDTuple::getImpl();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, Impl);
          ++v13;
        }
        while (v13 < *((unsigned int *)v11 + 2));
      }
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      if (v24[0] != v25) {
        free(v24[0]);
      }
      uint64_t i = v23;
    }
  }
}

uint64_t AGCLLVMAGPFragmentShader::replacePullMode_Or_ParentVertex_Index(void *a1, uint64_t a2)
{
  uint64_t v4 = llvm::ConstantInt::get();
  uint64_t v5 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
  uint64_t v6 = *(void *)(a2 + 24);
  __int16 v9 = 257;
  return llvm::IRBuilderBase::CreateCast(v5, 48, v4, v6, (uint64_t)v8);
}

uint64_t llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 65));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t AGCLLVMAGPFragmentShader::getBarycentricCoordVarying@<X0>(AGCLLVMUserShader *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v16[1] = 0;
  uint64_t v17 = 0;
  v16[0] = 0;
  unsigned int v14 = 0;
  AGCLLVMAGPFragmentShader::agpParseStageIOMetadata(a1, a3, v16, (int *)&v17 + 1, (int *)&v17, &v15, &v14, &v13);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
    a2 = **(void **)(a2 + 16);
  }
  if (v14 == 2 && a2 == *(void *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 216)) {
    unsigned int v8 = 5;
  }
  else {
    unsigned int v8 = v14;
  }
  int v10 = v17;
  int v9 = HIDWORD(v17);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = a4 + 56;
  *(void *)(a4 + 48) = 0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign(a4 + 40, 5uLL, -559038737);
  *(_DWORD *)(a4 + 8) = v10;
  *(_DWORD *)(a4 + 12) = v8;
  *(_DWORD *)a4 = 2;
  *(_DWORD *)(a4 + 4) = v9;
  BOOL v11 = v9 != 0;
  *(_DWORD *)(a4 + 16) = v11;
  uint64_t result = AGCLLVMUserFragmentShader::setupInterpolation(a1, 8, v11, 2u);
  *(void *)(a4 + 32) = result;
  return result;
}

uint64_t llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t AGCLLVMAGPFragmentShader::getPrimitiveIdVarying@<X0>(AGCLLVMAGPFragmentShader *this@<X0>, llvm::Type *a2@<X1>, uint64_t a3@<X8>)
{
  int ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)this + *(void *)(*(void *)this - 24) + 32), a2, &v7);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = a3 + 56;
  *(void *)(a3 + 48) = 0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign(a3 + 40, 5uLL, -559038737);
  *(void *)a3 = 0x100000001;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 12) = ComponentType;
  *(_DWORD *)(a3 + 16) = 0;
  uint64_t result = AGCLLVMUserFragmentShader::setupInterpolation(this, 7, 0, 1u);
  *(void *)(a3 + 32) = result;
  return result;
}

void AGCLLVMAGPFragmentShader::getFragmentViewportOrLayerIdVarying(void *a1@<X0>, const llvm::Type *a2@<X1>, void *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X8>)
{
  if ((*(_DWORD *)(a1[726] + 64) & 0x100) != 0) {
    int v10 = 3;
  }
  else {
    int v10 = 1;
  }
  int ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a1 + *(void *)(*a1 - 24) + 32), a2, &v12);
  AGCLLVMAGPFragmentShader::getFragmentVarying(a5, a1, (uint64_t)a2, a3, a4, v10, 3, 1, ComponentType, 0);
}

uint64_t llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v2) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

void llvm::SmallVectorTemplateBase<GenericVarying,false>::grow()
{
}

void llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>::grow()
{
}

BOOL AGCLLVMAGPFragmentShader::needsPCFClamp(AGCLLVMAGPFragmentShader *this)
{
  return *((_DWORD *)this + 1469) != 0;
}

uint64_t AGCLLVMAGPFragmentShader::getPCFStateForUnit(AGCLLVMAGPFragmentShader *this, char a2)
{
  return 16 * ((*((_DWORD *)this + 1469) >> a2) & 1u);
}

uint64_t llvm::IRBuilderBase::CreateGEP(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t **, uint64_t, void))(**(void **)(a1 + 72)
                                                                                           + 48))(*(void *)(a1 + 72), a2, a3, a4, a5, 0);
  if (!v12)
  {
    uint64_t v12 = llvm::GetElementPtrInst::Create(a2, a3, a4, a5);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v12, a6);
  }
  return v12;
}

uint64_t AGCLLVMAGPFragmentShader::calculateInterpolationCoords(AGCLLVMAGPFragmentShader *this, unsigned int a2, llvm::Value *a3)
{
  v51[2] = *MEMORY[0x1E4F143B8];
  if (a2 >= 2) {
    llvm::FixedVectorType::get();
  }
  uint64_t v5 = 0;
  v51[0] = llvm::UndefValue::get();
  v51[1] = v51[0];
  v50[0] = v51[0];
  v50[1] = v51[0];
  char v6 = 1;
  do
  {
    char v7 = v6;
    unsigned int v8 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v9 = *((void *)v8 + 50);
    int v10 = (llvm::Type *)*((void *)v8 + 28);
    char v45 = v6;
    if (*(unsigned char *)(v9 + 1786))
    {
      uint64_t v11 = 1584;
      if (v7) {
        uint64_t v11 = 1576;
      }
      if (*(void *)(v9 + v11)) {
        strlen(*(const char **)(v9 + v11));
      }
      uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
      uint64_t v14 = *(void *)(*(void *)this - 24);
      int v15 = (AGCLLVMAGPFragmentShader *)((char *)this + v14 + 40);
      __int16 v49 = 257;
      uint64_t v16 = llvm::IRBuilderBase::CreateCall((uint64_t)this + v14 + 40, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v48);
      __int16 v47 = 257;
      FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI(v15, v16, v10, (const llvm::Twine *)v46);
      size_t v18 = (AGCLLVMAGPFragmentShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v49 = 257;
      uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v18, FPToUI, v19, (const llvm::Twine *)v48);
    }
    else
    {
      uint64_t v12 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMAGPFragmentShader *, llvm::Type *, uint64_t))(*(void *)this + 608))(this, v10, v5);
    }
    uint64_t v20 = *(void *)(*(void *)this - 24);
    unint64_t v21 = *(llvm::Type **)((char *)this + v20 + 200);
    __int16 v49 = 257;
    UIToFP = (llvm::Value *)llvm::IRBuilderBase::CreateUIToFP((AGCLLVMAGPFragmentShader *)((char *)this + v20 + 40), v12, v21, (const llvm::Twine *)v48);
    uint64_t v23 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v49 = 257;
    std::string v24 = (llvm::IRBuilderBase *)(v23 + 40);
    uint64_t v25 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Element = llvm::IRBuilderBase::CreateExtractElement(v24, a3, v25, (const llvm::Twine *)v48);
    if (a2)
    {
      long long v27 = (llvm::Value *)Element;
      uint64_t v28 = 0;
      do
      {
        Insertuint64_t Element = (uint64_t)UIToFP;
        uint64_t v30 = (uint64_t)v27;
        if (a2 >= 2)
        {
          uint64_t v31 = (char *)this + *(void *)(*(void *)this - 24);
          long long v32 = (llvm::Value *)v51[v5];
          __int16 v49 = 257;
          uint64_t v33 = (llvm::IRBuilderBase *)(v31 + 40);
          long long v34 = (llvm::Value *)llvm::ConstantInt::get();
          Insertuint64_t Element = llvm::IRBuilderBase::CreateInsertElement(v33, v32, UIToFP, v34, (const llvm::Twine *)v48);
          std::string::size_type v35 = (char *)this + *(void *)(*(void *)this - 24);
          long long v36 = (llvm::Value *)v50[v5];
          __int16 v49 = 257;
          std::string::size_type v37 = (llvm::IRBuilderBase *)(v35 + 40);
          long long v38 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t v30 = llvm::IRBuilderBase::CreateInsertElement(v37, v36, v27, v38, (const llvm::Twine *)v48);
        }
        v51[v5] = InsertElement;
        v50[v5] = v30;
        ++v28;
      }
      while (a2 != v28);
    }
    std::string::size_type v39 = (char *)this + *(void *)(*(void *)this - 24) + 40;
    uint64_t v40 = v51[v5];
    uint64_t v41 = v50[v5];
    __int16 v49 = 257;
    uint64_t FAdd = llvm::IRBuilderBase::CreateFAdd((uint64_t)v39, v40, v41, (uint64_t)v48);
    char v6 = 0;
    v51[v5] = FAdd;
    uint64_t v5 = 1;
  }
  while ((v45 & 1) != 0);
  return v51[0];
}

uint64_t AGCLLVMAGPFragmentShader::interpolateAtOffset(uint64_t *a1, _OWORD *a2, unsigned int a3, llvm::Type **a4, llvm::Value *a5)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (a3 < 2)
  {
    uint64_t v9 = llvm::UndefValue::get();
    uint64_t v96 = v9;
    uint64_t v97 = v9;
    uint64_t v98 = v9;
    if (!a3)
    {
      uint64_t FAdd = v9;
      goto LABEL_13;
    }
  }
  else
  {
    llvm::FixedVectorType::get();
    uint64_t v96 = llvm::UndefValue::get();
    uint64_t v97 = v96;
    uint64_t v98 = v96;
  }
  uint64_t v85 = a2;
  uint64_t v10 = 0;
  do
  {
    uint64_t GEP = a4;
    if (*(unsigned char *)(**((void **)*a4 + 2) + 8) == 17)
    {
      uint64_t v12 = (char *)a1 + *(void *)(*a1 - 24);
      v93[0] = (uint64_t *)llvm::ConstantInt::get();
      v93[1] = (uint64_t *)llvm::ConstantInt::get();
      __int16 v92 = 257;
      uint64_t v14 = AGCLLVMBuilder::tryDeducePointeeType(a4, v13);
      uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v12 + 40), (uint64_t)v14, (uint64_t *)a4, v93, 2, (uint64_t)v91);
    }
    uint64_t v15 = (uint64_t)a1 + *(void *)(*a1 - 24) + 8;
    __int16 v92 = 257;
    uint64_t v16 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v8);
    uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v15 + 32), v16, (uint64_t)GEP, 0, (uint64_t)v91);
    for (uint64_t i = 0; i != 3; ++i)
    {
      uint64_t v19 = (char *)a1 + *(void *)(*a1 - 24);
      __int16 v92 = 257;
      uint64_t v20 = (llvm::IRBuilderBase *)(v19 + 40);
      unint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v20, AlignedLoad, v21, (const llvm::Twine *)v91);
      if (a3 >= 2)
      {
        uint64_t v23 = (char *)a1 + *(void *)(*a1 - 24);
        std::string v24 = (llvm::Value *)*(&v96 + i);
        __int16 v92 = 257;
        uint64_t v25 = (llvm::IRBuilderBase *)(v23 + 40);
        __int16 v26 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v25, v24, Element, v26, (const llvm::Twine *)v91);
      }
      *(&v96 + i) = (uint64_t)Element;
    }
    ++v10;
  }
  while (v10 != a3);
  uint64_t FAdd = v98;
  a2 = v85;
LABEL_13:
  long long v95 = *a2;
  for (uint64_t j = 8; j != -8; j -= 8)
  {
    uint64_t v29 = *(uint64_t *)((char *)&v96 + j);
    uint64_t v30 = *(void *)((char *)&v95 + j);
    uint64_t v31 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
    __int16 v92 = 257;
    uint64_t FMul = llvm::IRBuilderBase::CreateFMul(v31, v29, v30, (uint64_t)v91);
    __int16 v92 = 257;
    uint64_t FAdd = llvm::IRBuilderBase::CreateFAdd(v31, FMul, FAdd, (uint64_t)v91);
  }
  if (a5)
  {
    uint64_t v33 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v34 = (uint64_t)(v33 + 40);
    std::string::size_type v35 = AGCLLVMBuilder::splat((AGCLLVMBuilder *)(v33 + 32), a3, a5);
    __int16 v92 = 257;
    uint64_t FAdd = llvm::IRBuilderBase::CreateFDiv(v34, FAdd, (uint64_t)v35, (uint64_t)v91);
  }
  long long v36 = (char *)a1 + *(void *)(*a1 - 24);
  if (*(unsigned char *)(*((void *)v36 + 50) + 1773))
  {
    std::string::size_type v37 = (AGCLLVMBuilder *)(v36 + 32);
    long long v38 = (llvm::Value *)llvm::ConstantInt::get();
    std::string::size_type v39 = AGCLLVMBuilder::splat(v37, a3, v38);
    uint64_t v40 = (AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32);
    uint64_t v41 = (llvm::Value *)llvm::ConstantInt::get();
    long long v88 = AGCLLVMBuilder::splat(v40, a3, v41);
    std::string v42 = (AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32);
    std::string::size_type v43 = (llvm::Value *)llvm::ConstantInt::get();
    int v87 = AGCLLVMBuilder::splat(v42, a3, v43);
    uint64_t v44 = (AGCLLVMBuilder *)((char *)a1 + *(void *)(*a1 - 24) + 32);
    char v45 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v90 = AGCLLVMBuilder::splat(v44, a3, v45);
    char v46 = (llvm::Type **)((char *)a1 + *(void *)(*a1 - 24));
    llvm::Type::getFPMantissaWidth(v46[25]);
    __int16 v47 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v48 = AGCLLVMBuilder::splat((AGCLLVMBuilder *)(v46 + 4), a3, v47);
    uint64_t v49 = *a1;
    uint64_t v50 = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 232);
    if (a3 >= 2)
    {
      uint64_t v50 = llvm::FixedVectorType::get();
      uint64_t v49 = *a1;
    }
    uint64_t v51 = (uint64_t)a1 + *(void *)(v49 - 24) + 40;
    __int16 v92 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v51, 49, v96, v50, (uint64_t)v91);
    uint64_t v53 = (uint64_t)a1 + *(void *)(*a1 - 24) + 40;
    __int16 v92 = 257;
    std::string v54 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v53, 49, v97, v50, (uint64_t)v91);
    std::string v55 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v92 = 257;
    std::string v56 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v55, Cast, v39, (const llvm::Twine *)v91);
    std::string v57 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v92 = 257;
    std::string v58 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v57, Cast, v88, (const llvm::Twine *)v91);
    __int16 v94 = 257;
    uint64_t LShr = (llvm::CmpInst **)llvm::IRBuilderBase::CreateLShr(v57, v58, v48, (const llvm::Twine *)v93);
    std::string v60 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v92 = 257;
    std::string v61 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v60, v54, v39, (const llvm::Twine *)v91);
    std::string v62 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v92 = 257;
    long long v63 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v62, v54, v88, (const llvm::Twine *)v91);
    __int16 v94 = 257;
    uint64_t v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateLShr(v62, v63, v48, (const llvm::Twine *)v93);
    uint64_t v65 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v92 = 257;
    int v66 = (llvm::Value *)v56;
    ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v65, 33, v56, (uint64_t)v87, (uint64_t)v91);
    int v68 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v92 = 257;
    int v69 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v68, 32, LShr, (uint64_t)v87, (uint64_t)v91);
    uint64_t v70 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v92 = 257;
    uint64_t v71 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v70, 33, v61, (uint64_t)v87, (uint64_t)v91);
    uint64_t v72 = (uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v92 = 257;
    int v73 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v72, 32, v64, (uint64_t)v87, (uint64_t)v91);
    uint64_t v74 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v92 = 257;
    unint64_t v75 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v74, ICmp, v69, (const llvm::Twine *)v91);
    uint64_t v76 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v92 = 257;
    int v77 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v76, v71, v73, (const llvm::Twine *)v91);
    int v78 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v92 = 257;
    uint64_t v79 = llvm::IRBuilderBase::CreateAnd(v78, v66, v90, (const llvm::Twine *)v91);
    uint64_t v80 = *(void *)v75;
    __int16 v94 = 257;
    uint64_t v81 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v78, 38, v79, v80, (uint64_t)v93);
    unint64_t v82 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
    __int16 v92 = 257;
    uint64_t v83 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v82, v75, v77, (const llvm::Twine *)v91);
    __int16 v94 = 257;
    llvm::IRBuilderBase::CreateAnd(v82, v83, v81, (const llvm::Twine *)v93);
    __int16 v92 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return FAdd;
}

uint64_t llvm::IRBuilderBase::CreateFDiv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  }
  uint64_t v7 = llvm::IRBuilderBase::foldConstant(a1, 21, a2, a3, a4);
  if (!v7)
  {
    uint64_t v7 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::setFPAttrs(a1, v7);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v7, a4);
  }
  return v7;
}

uint64_t llvm::IRBuilderBase::CreateUIToFP(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((unsigned char *)this + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return llvm::IRBuilderBase::CreateCast((uint64_t)this, 43, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t llvm::IRBuilderBase::CreateFPToUI(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((unsigned char *)this + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return llvm::IRBuilderBase::CreateCast((uint64_t)this, 41, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t *llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t i = (uint64_t *)(AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interpolation_functions_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EBD0E7A8) = qword_1EBD0E7A8 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      uint64_t v6 = i[1];
      ++i;
      uint64_t v5 = v6;
    }
    return i;
  }
  uint64_t v8 = MEMORY[0x1CB79F270](a2 + 25, 8);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 24;
  if (a2) {
    memcpy((void *)(v8 + 24), a1, a2);
  }
  *(unsigned char *)(v10 + a2) = 0;
  *(void *)uint64_t v9 = a2;
  *(void *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = 10;
  *(_WORD *)(v9 + 20) = 1;
  *(unsigned char *)(v9 + 22) = -1;
  *uint64_t i = v9;
  ++dword_1EBD0E7A4;
  for (uint64_t i = (uint64_t *)(AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interpolation_functions_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMAGPFragmentShader::initializeInterpolationFunctionsMap(void)::interpolation_functions_map));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::StringMap<AGCLLVMAGPFragmentShader::InterpolationFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 25));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void AGCLLVMAGPFragmentShader::~AGCLLVMAGPFragmentShader(AGCLLVMAGPFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6928));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6928));
}

void virtual thunk to'AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(AGCLLVMAGPFragmentShaderGen3 *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 7320));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  uint64_t v2 = (AGCLLVMObject *)(v1 + 7320);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

void non-virtual thunk to'AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(AGCLLVMAGPFragmentShaderGen3 *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 3000));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t vars8;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 3000));
}

uint64_t AGCLLVMAGPFragmentShaderGen3::buildPixelPositionInTile(AGCLLVMAGPFragmentShaderGen3 *this, llvm::Type *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  uint64_t v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *, llvm::Type *, uint64_t))(*(void *)v7 + 256))(v7, &v11, a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::getDrawBufferState(AGCLLVMAGPFragmentShaderGen3 *this)
{
  return *((void *)this + 614);
}

uint64_t AGCLLVMAGPFragmentShaderGen3::buildSimdGroupIndexInThreadgroup(AGCLLVMAGPFragmentShaderGen3 *this, llvm::Type *a2)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = v14;
  long long v13 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v12, "llvm.agx2.simd.group", "");
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v5 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  __int16 v11 = 257;
  uint64_t v6 = llvm::IRBuilderBase::CreateCall((uint64_t)v5, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v10);
  v9[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v5, 38, (uint64_t)v6, (uint64_t)a2, (uint64_t)v9);
  if (v12 != v14) {
    free(v12);
  }
  return Cast;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::buildThreadIndexInSimdGroup(AGCLLVMAGPFragmentShaderGen3 *this, llvm::Type *a2)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = v14;
  long long v13 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v12, "llvm.agx2.simd.element", "");
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v5 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  __int16 v11 = 257;
  uint64_t v6 = llvm::IRBuilderBase::CreateCall((uint64_t)v5, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v10);
  v9[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v5, 38, (uint64_t)v6, (uint64_t)a2, (uint64_t)v9);
  if (v12 != v14) {
    free(v12);
  }
  return Cast;
}

uint64_t AGCLLVMAGPFragmentShaderGen3::buildTileIndex(AGCLLVMAGPFragmentShaderGen3 *this, llvm::Type *a2)
{
  if (!*((void *)this + 906))
  {
    uint64_t v4 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v36[0] = "agc.tile.count.x";
    __int16 v37 = 259;
    uint64_t v5 = llvm::GlobalVariable::GlobalVariable();
    *(unsigned char *)(v5 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v7 = *((void *)v6 + 47);
    uint64_t v8 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v6 + 32), v4);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v7, v8);
    llvm::ValueHandleBase::operator=((AGCLLVMAGPFragmentShaderGen3 *)((char *)this + 7232), (uint64_t)v4);
  }
  uint64_t v9 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 680))(v9);
  __int16 v11 = (char *)this + *(void *)(*(void *)this - 24);
  long long v33 = *(_OWORD *)(v11 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v34, (llvm::IRBuilderBase *)(v11 + 40));
  int v35 = *((_DWORD *)v11 + 34);
  uint64_t v12 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v10, (uint64_t)&v33, (uint64_t)a2, 0);
  if (v34) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v13 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 680))(v13);
  uint64_t v15 = (char *)this + *(void *)(*(void *)this - 24);
  long long v30 = *(_OWORD *)(v15 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)&v31, (llvm::IRBuilderBase *)(v15 + 40));
  int v32 = *((_DWORD *)v15 + 34);
  uint64_t v16 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v14, (uint64_t)&v30, (uint64_t)a2, 1);
  uint64_t v17 = v31;
  if (v31) {
    llvm::MetadataTracking::untrack();
  }
  size_t v18 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v19 = (llvm::Type **)*((void *)this + 906);
  __int16 v37 = 257;
  uint64_t v20 = AGCLLVMBuilder::tryDeducePointeeType(v19, v17);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v18, v20, (uint64_t)v19, 0, (uint64_t)v36);
  __int16 v29 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v18, 38, AlignedLoad, (uint64_t)a2, (uint64_t)v28);
  __int16 v27 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)v18, v16, Cast, (const llvm::Twine *)v26);
  std::string v24 = (AGCLLVMAGPFragmentShaderGen3 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v37 = 257;
  return llvm::IRBuilderBase::CreateAdd(v24, Mul, v12, (const llvm::Twine *)v36);
}

uint64_t AGCLLVMAGPFragmentShader::buildPixelPositionInTile(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 608))();
}

uint64_t AGCLLVMAGPFragmentShaderGen3::buildPixelsPerTile(AGCLLVMAGPFragmentShaderGen3 *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 400);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 680))(v6);
  uint64_t v8 = (char *)this + *(void *)(*(void *)this - 24);
  long long v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (llvm::IRBuilderBase *)(v8 + 40));
  int v13 = *((_DWORD *)v8 + 34);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildLocalSize(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

void *AGCLLVMAGPFragmentShaderGen3::setupLIBStructValueFromType(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a4;
  v46[4] = *MEMORY[0x1E4F143B8];
  int v11 = *(unsigned __int8 *)(a2 + 8);
  if (a2 && v11 == 16)
  {
    uint64_t v41 = result;
    unsigned int v13 = a5;
    uint64_t result = (void *)llvm::DataLayout::getStructLayout();
    if (*(_DWORD *)(a2 + 12))
    {
      unint64_t v14 = 0;
      uint64_t v15 = result + 2;
      do
      {
        int v16 = v15[v14];
        llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a3, v14);
        uint64_t v17 = v8;
        uint64_t v18 = *(void *)(*(void *)(a2 + 16) + 8 * v14);
        std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__value_func[abi:nn180100]((uint64_t)v46, a7);
        uint64_t v19 = v18;
        uint64_t v8 = v17;
        AGCLLVMAGPFragmentShaderGen3::setupLIBStructValueFromType(v41, v19, a3, v17, v16 + v13, a6, v46);
        uint64_t result = std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__value_func[abi:nn180100](v46);
        --*(_DWORD *)(a3 + 8);
        ++v14;
      }
      while (v14 < *(unsigned int *)(a2 + 12));
    }
    return result;
  }
  if (a2 && v11 == 17)
  {
    uint64_t v20 = *(void *)(a4 + 8);
    if (v20)
    {
      unint64_t v22 = result;
      uint64_t v24 = a4 + 8;
      do
      {
        unsigned int v25 = *(_DWORD *)(v20 + 28);
        BOOL v26 = v25 >= a5;
        if (v25 >= a5) {
          __int16 v27 = (uint64_t *)v20;
        }
        else {
          __int16 v27 = (uint64_t *)(v20 + 8);
        }
        if (v26) {
          uint64_t v24 = v20;
        }
        uint64_t v20 = *v27;
      }
      while (*v27);
      if (v24 != a4 + 8 && *(_DWORD *)(v24 + 28) <= a5 && *(void *)(a2 + 32))
      {
        LODWORD(v28) = 0;
        int v42 = *(_DWORD *)(v24 + 32);
        do
        {
          v43[0] = llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(v22 + 29), *(llvm::Type **)(a2 + 24));
          v43[1] = v29;
          int v30 = llvm::TypeSize::operator unsigned long long();
          llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a3, v28);
          uint64_t v31 = v8;
          uint64_t v32 = *(void *)(a2 + 24);
          std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__value_func[abi:nn180100]((uint64_t)v45, a7);
          uint64_t v33 = v32;
          uint64_t v8 = v31;
          AGCLLVMAGPFragmentShaderGen3::setupLIBStructValueFromType(v22, v33, a3, v31, (v42 + v28 * v30), v28 == 0, v45);
          uint64_t result = std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__value_func[abi:nn180100](v45);
          --*(_DWORD *)(a3 + 8);
          unint64_t v28 = (v28 + 1);
        }
        while (*(void *)(a2 + 32) > v28);
      }
    }
    return result;
  }
  if (!a6)
  {
LABEL_37:
    v43[0] = a2;
    unsigned int v44 = a5;
    uint64_t v39 = *(void *)(a7 + 24);
    if (v39) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, uint64_t, unsigned int *))(*(void *)v39 + 48))(v39, v43, a3, &v44);
    }
    uint64_t v40 = (void *)((uint64_t (*)(void))std::__throw_bad_function_call[abi:nn180100])();
    return std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__value_func[abi:nn180100](v40);
  }
  uint64_t v34 = *(void *)(a4 + 8);
  if (v34)
  {
    uint64_t v35 = a4 + 8;
    do
    {
      unsigned int v36 = *(_DWORD *)(v34 + 28);
      BOOL v37 = v36 >= a5;
      if (v36 >= a5) {
        long long v38 = (uint64_t *)v34;
      }
      else {
        long long v38 = (uint64_t *)(v34 + 8);
      }
      if (v37) {
        uint64_t v35 = v34;
      }
      uint64_t v34 = *v38;
    }
    while (*v38);
    if (v35 != a4 + 8 && *(_DWORD *)(v35 + 28) <= a5)
    {
      a5 = *(_DWORD *)(v35 + 32);
      goto LABEL_37;
    }
  }
  return result;
}

void *std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v4 = *a4;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(*(void *)v5 - 24) + v5 + 40;
  uint64_t v7 = **(void **)(a1 + 16);
  uint64_t v8 = *(void *)a3;
  uint64_t v9 = *(unsigned int *)(a3 + 8);
  __int16 v14 = 257;
  uint64_t Value = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue(v6, v7, v8, v9, (uint64_t)v13);
  v13[0] = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>,unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::LookupBucketFor<unsigned int>(*(void *)(v5 + 6976), *(_DWORD *)(v5 + 6992), v4, v13);
  if (result) {
    BOOL v12 = v13[0] == *(void *)(v5 + 6976) + 40 * *(unsigned int *)(v5 + 6992);
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12) {
    return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(*(void *)(*(void *)v5 - 24) + v5 + 40), Value, *(void *)(v13[0] + 32), 0);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>,unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::LookupBucketFor<unsigned int>(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    uint64_t v6 = (_DWORD *)(a1 + 40 * v5);
    int v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (_DWORD *)(a1 + 40 * (v13 & v4));
        int v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

__n128 std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25762D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25762D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderOutputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__func()
{
}

void std::__throw_overflow_error[abi:nn180100]()
{
  std::__libcpp_verbose_abort("overflow_error was thrown in -fno-exceptions mode with message \"%s\"", "bitset to_ullong overflow error");
  AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying(v0, v1, v2, v3, v4);
}

void AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying(uint64_t a1, void *a2, llvm::Type *a3, void *a4, size_t a5)
{
  int ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a2 + *(void *)(*a2 - 24) + 32), a3, &v11);
  AGCLLVMAGPFragmentShader::getFragmentVarying(a1, a2, (uint64_t)a3, a4, a5, 1, 3, 1, ComponentType, 0);
}

uint64_t std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, _WORD *a4)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *(void *)(a1 + 16);
  unsigned __int16 v8 = *(_WORD *)(v7 + 3564) + *a4;
  (*(void (**)(void))(**(void **)(*(void *)(*(void *)v7 - 24) + v7 + 400) + 680))();
  uint64_t v9 = (llvm::Type *)v6;
  if (*(unsigned char *)(v6 + 8) == 15) {
    uint64_t v9 = **(llvm::Type ***)(v6 + 16);
  }
  unint64_t v10 = v8 % (unint64_t)llvm::DataLayout::getABITypeAlignment((llvm::DataLayout *)(v7 + 232), v9);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)v7 - 24) + v7 + 400) + 680))();
  uint64_t v12 = *(void *)(*(void *)v7 - 24) + v7;
  uint64_t v13 = v12 + 32;
  long long v35 = *(_OWORD *)(v12 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v36, (llvm::IRBuilderBase *)(v12 + 40));
  int v37 = *(_DWORD *)(v13 + 104);
  if (v10)
  {
    unsigned int v14 = *(unsigned __int16 *)(*(void *)(v7 + 4912) + 32) >> 12;
    unsigned int v15 = *(unsigned __int16 *)(v7 + 4312);
    int v16 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v17 = (uint64_t)AGCLLVMGen3TargetLowerer::splitUnalignedLoads(v11, &v35, 0, v14, v15, v6, v16, 0, 0);
  }
  else
  {
    uint64_t v18 = *(unsigned __int16 *)(*(void *)(v7 + 4912) + 32) >> 12;
    uint64_t v19 = *(unsigned __int16 *)(v7 + 4312);
    uint64_t v20 = llvm::ConstantInt::get();
    uint64_t v17 = AGCLLVMGen3TargetLowerer::buildReadOutputPartitionFromIR(v11, &v35, 0, 0, v18, v19, (llvm::Type ***)v6, v20, 0, 0);
  }
  unint64_t v21 = (llvm::Instruction *)v17;
  if (v36) {
    llvm::MetadataTracking::untrack();
  }
  NextNonDebugInstructiouint64_t n = llvm::Instruction::getNextNonDebugInstruction(v21);
  uint64_t v23 = (llvm::IRBuilderBase *)(*(void *)(*(void *)v7 - 24) + v7 + 40);
  if (NextNonDebugInstruction)
  {
    uint64_t v24 = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction(v21);
    llvm::IRBuilderBase::SetInsertPoint(v23, v24);
  }
  else
  {
    uint64_t v25 = *((void *)v21 + 5);
    *(void *)(*(void *)(*(void *)v7 - 24) + v7 + 88) = v25;
    *((void *)v23 + 7) = v25 + 40;
  }
  uint64_t v26 = *(void *)(*(void *)v7 - 24) + v7 + 40;
  __int16 v34 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v26, 49, (uint64_t)v21, v6, (uint64_t)v33);
  uint64_t v28 = *(void *)(*(void *)v7 - 24) + v7 + 40;
  uint64_t v29 = **(void **)(a1 + 8);
  uint64_t v30 = *(void *)a3;
  uint64_t v31 = *(unsigned int *)(a3 + 8);
  __int16 v34 = 257;
  uint64_t result = llvm::IRBuilderBase::CreateInsertValue(v28, v29, Cast, v30, v31, (uint64_t)v33);
  **(void **)(a1 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F2576290;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F2576290;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::setupShaderInputs(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__func()
{
}

void *llvm::TrackingMDRef::operator=(void *a1, void *a2)
{
  if (a2 != a1)
  {
    if (*a1) {
      llvm::MetadataTracking::untrack();
    }
    *a1 = *a2;
    if (*a2)
    {
      llvm::MetadataTracking::retrack();
      *a2 = 0;
    }
  }
  return a1;
}

llvm::ValueHandleBase *std::__function::__func<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::operator()(uint64_t a1, llvm::Type **a2, uint64_t a3, int *a4)
{
  size_t v4 = *a2;
  int v5 = *a4;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (llvm::BasicBlock **)(*(void *)(*(void *)v6 - 24) + v6 + 40);
  __int16 v18 = 257;
  uint64_t Alloca = llvm::IRBuilderBase::CreateAlloca(v7, v4, 0, (const llvm::Twine *)&v15);
  unsigned int v15 = v4;
  v16[0] = 4;
  v16[1] = 0;
  uint64_t v17 = Alloca;
  if (Alloca != -8192 && Alloca != -4096 && Alloca != 0) {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v16);
  }
  uint64_t v19 = 0;
  char v10 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>,unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::LookupBucketFor<unsigned int>(*(void *)(v6 + 6976), *(_DWORD *)(v6 + 6992), v5, &v19);
  uint64_t v11 = v19;
  if ((v10 & 1) == 0)
  {
    int v12 = *(_DWORD *)(v6 + 6984);
    unsigned int v13 = *(_DWORD *)(v6 + 6992);
    if (4 * v12 + 4 >= 3 * v13)
    {
      v13 *= 2;
    }
    else if (v13 + ~v12 - *(_DWORD *)(v6 + 6988) > v13 >> 3)
    {
LABEL_10:
      ++*(_DWORD *)(v6 + 6984);
      if (*(_DWORD *)v11 != -1) {
        --*(_DWORD *)(v6 + 6988);
      }
      *(_DWORD *)uint64_t v11 = v5;
      *(_OWORD *)(v11 + 8) = xmmword_1CADD62B0;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0;
      goto LABEL_13;
    }
    llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::grow(v6 + 6976, v13);
    uint64_t v19 = 0;
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>,unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::LookupBucketFor<unsigned int>(*(void *)(v6 + 6976), *(_DWORD *)(v6 + 6992), v5, &v19);
    uint64_t v11 = v19;
    goto LABEL_10;
  }
LABEL_13:
  *(void *)(v11 + 8) = v15;
  __n128 result = llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v11 + 16), v16);
  if (v17 != -8192 && v17 != -4096)
  {
    if (v17) {
      return (llvm::ValueHandleBase *)llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
    }
  }
  return result;
}

_DWORD *llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  size_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = MEMORY[0x1CB79F270]((void *)v8, 40 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 40 * v10;
      do
      {
        *__n128 result = -1;
        result += 10;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 40 * v3;
      unsigned int v13 = (void *)((char *)v4 + 16);
      do
      {
        unsigned int v14 = *((_DWORD *)v13 - 4);
        if (v14 <= 0xFFFFFFFD)
        {
          uint64_t v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>,unsigned int,AGCLLVMUserFragmentShader::OutputStorage,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,AGCLLVMUserFragmentShader::OutputStorage>>::LookupBucketFor<unsigned int>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          unsigned int v15 = v19;
          *uint64_t v19 = *((_DWORD *)v13 - 4);
          *((void *)v15 + 1) = *(v13 - 1);
          llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v15 + 4), 2u, v13);
          ++*(_DWORD *)(a1 + 8);
          uint64_t v16 = v13[2];
          if (v16 != -8192 && v16 != -4096 && v16) {
            llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v13);
          }
        }
        v13 += 5;
        v12 -= 40;
      }
      while (v12);
    }
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v17 = *(unsigned int *)(a1 + 16);
    if (v17)
    {
      uint64_t v18 = 40 * v17;
      do
      {
        *__n128 result = -1;
        result += 10;
        v18 -= 40;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t std::__function::__func<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F2576248;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F2576248;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0,std::allocator<AGCLLVMAGPFragmentShaderGen3::addWrapperPrefix(void)::$_0>,void ()(llvm::Type *,llvm::SmallVectorImpl<unsigned int> &,unsigned int)>::~__func()
{
}

uint64_t AGCLLVMAGPFragmentShaderGen3::setupROGTable(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7 = *(unsigned int *)(a1 + 4312);
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v8 != v7)
  {
    if (v8 <= v7) {
      llvm::SmallVectorImpl<unsigned int>::append(a2, v7 - v8);
    }
    else {
      *(_DWORD *)(a2 + 8) = v7;
    }
  }
  if (*(unsigned char *)(a1 + 7260)) {
    goto LABEL_6;
  }
  uint64_t v10 = *((unsigned int *)a4 + 2);
  if (v10)
  {
    for (uint64_t i = *a4; !*(void *)i || *(void *)i == -8; i += 8)
      ;
  }
  else
  {
    uint64_t i = *a4;
  }
  uint64_t v42 = *a4 + 8 * v10;
  if (i == v42)
  {
LABEL_6:
    char v9 = 1;
  }
  else
  {
    unsigned int v13 = *(_DWORD **)i;
    char v9 = 1;
    do
    {
      int v14 = v13[3];
      unsigned int v15 = v13[4];
      if (v15 <= 1) {
        unsigned int v15 = 1;
      }
      int v16 = v15 * v14;
      if (v13[2] + a3 < v15 * v14 + v13[2] + a3)
      {
        unsigned int v17 = v13[6];
        uint64_t v18 = 4 * (v13[2] + a3);
        do
        {
          int v19 = *(_DWORD *)(*(void *)a2 + v18);
          if (v19 == -1)
          {
            *(_DWORD *)(*(void *)a2 + v18) = v17;
          }
          else if (((v19 != v17) & v9) == 1)
          {
            std::string::size_type v20 = **(void **)i;
            v51.__r_.__value_.__r.__words[0] = *(void *)i + 48;
            v51.__r_.__value_.__l.__size_ = v20;
            v50.__r_.__value_.__s.__data_[0] = 64;
            llvm::StringRef::split(&v52, (__n128 *)&v51, (uint64_t)&v50, 1);
            if (v53) {
              std::string::basic_string[abi:nn180100](&__dst, v53, v54);
            }
            else {
              memset(&__dst, 0, sizeof(__dst));
            }
            unint64_t v21 = std::string::insert(&__dst, 0, "Raster order group for imageblock field ");
            std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
            v47.__r_.__value_.__r.__words[2] = v22;
            v21->__r_.__value_.__l.__size_ = 0;
            v21->__r_.__value_.__r.__words[2] = 0;
            v21->__r_.__value_.__r.__words[0] = 0;
            uint64_t v23 = std::string::append(&v47, " in output struct (");
            std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v48.__r_.__value_.__r.__words[2] = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v45, v17);
            if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v25 = &v45;
            }
            else {
              uint64_t v25 = (std::string *)v45.__r_.__value_.__r.__words[0];
            }
            if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v45.__r_.__value_.__l.__size_;
            }
            __int16 v27 = std::string::append(&v48, (const std::string::value_type *)v25, size);
            std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
            v49.__r_.__value_.__r.__words[2] = v28;
            v27->__r_.__value_.__l.__size_ = 0;
            v27->__r_.__value_.__r.__words[2] = 0;
            v27->__r_.__value_.__r.__words[0] = 0;
            uint64_t v29 = std::string::append(&v49, ") does not match raster order group in input struct (");
            std::string::size_type v30 = v29->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            v50.__r_.__value_.__r.__words[2] = v30;
            v29->__r_.__value_.__l.__size_ = 0;
            v29->__r_.__value_.__r.__words[2] = 0;
            v29->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v44, *(_DWORD *)(*(void *)a2 + v18));
            if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v31 = &v44;
            }
            else {
              uint64_t v31 = (std::string *)v44.__r_.__value_.__r.__words[0];
            }
            if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v32 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v32 = v44.__r_.__value_.__l.__size_;
            }
            uint64_t v33 = std::string::append(&v50, (const std::string::value_type *)v31, v32);
            std::string::size_type v34 = v33->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
            v51.__r_.__value_.__r.__words[2] = v34;
            v33->__r_.__value_.__l.__size_ = 0;
            v33->__r_.__value_.__r.__words[2] = 0;
            v33->__r_.__value_.__r.__words[0] = 0;
            long long v35 = (__n128 *)std::string::append(&v51, ")");
            uint64_t v36 = (void *)v35[1].n128_u64[0];
            __n128 v52 = *v35;
            uint64_t v53 = v36;
            v35->n128_u64[1] = 0;
            v35[1].n128_u64[0] = 0;
            v35->n128_u64[0] = 0;
            if (SHIBYTE(v53) >= 0) {
              int v37 = &v52;
            }
            else {
              int v37 = (__n128 *)v52.n128_u64[0];
            }
            if (SHIBYTE(v53) >= 0) {
              std::string::size_type v38 = HIBYTE(v53);
            }
            else {
              std::string::size_type v38 = v52.n128_u64[1];
            }
            std::string::append((std::string *)(a1 + 8 + *(void *)(*(void *)a1 - 24)), (const std::string::value_type *)v37, v38);
            if (SHIBYTE(v53) < 0) {
              operator delete((void *)v52.n128_u64[0]);
            }
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v51.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v44.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v50.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v49.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v45.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v48.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v47.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            char v9 = 0;
          }
          v18 += 4;
          --v16;
        }
        while (v16);
      }
      do
      {
        uint64_t v39 = *(_DWORD **)(i + 8);
        i += 8;
        unsigned int v13 = v39;
        if (v39) {
          BOOL v40 = v13 + 2 == 0;
        }
        else {
          BOOL v40 = 1;
        }
      }
      while (v40);
    }
    while (i != v42);
  }
  return v9 & 1;
}

BOOL AGCLLVMAGPFragmentShaderGen3::setupLIBViewToMasterFieldOffsetMap(uint64_t *a1, int a2, llvm::StringMapImpl *a3, uint64_t a4)
{
  uint64_t i = a1;
  if (a2)
  {
    for (uint64_t i = a1; !*i || *i == -8; ++i)
      ;
  }
  uint64_t v8 = &a1[a2];
  if (i != v8)
  {
    uint64_t v9 = *i;
    do
    {
      if (*((_DWORD *)a3 + 3))
      {
        uint64_t v10 = llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::try_emplace<>(a3, (const void *)(v9 + 48), *(void *)v9);
        uint64_t v11 = *i;
        uint64_t v9 = *v10;
      }
      else
      {
        uint64_t v11 = v9;
      }
      int v12 = *(_DWORD *)(v9 + 8);
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a4, *(_DWORD *)(v11 + 8), (_DWORD *)(v11 + 8))+ 8) = v12;
      do
      {
        uint64_t v13 = i[1];
        ++i;
        uint64_t v9 = v13;
        if (v13) {
          BOOL v14 = v9 == -8;
        }
        else {
          BOOL v14 = 1;
        }
      }
      while (v14);
    }
    while (i != v8);
  }
  return *(void *)(a4 + 16) != 0;
}

uint64_t llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        unint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 49));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      uint64_t v8 = i[1];
      ++i;
      uint64_t v7 = v8;
    }
    return i;
  }
  uint64_t v10 = MEMORY[0x1CB79F270](a3 + 49, 8);
  uint64_t v11 = v10;
  uint64_t v12 = v10 + 48;
  if (a3) {
    memcpy((void *)(v10 + 48), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  *(void *)uint64_t v11 = a3;
  *(_DWORD *)(v11 + 24) = -1;
  *(void *)(v11 + 32) = 0;
  *(unsigned char *)(v11 + 40) = 0;
  *uint64_t i = v11;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    void *v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    _DWORD *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

__n128 llvm::StringRef::split(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = llvm::StringRef::find();
  if (v7 == -1)
  {
    a1[1].n128_u64[0] = 0;
    a1[1].n128_u64[1] = 0;
    __n128 result = *a2;
    *a1 = *a2;
  }
  else
  {
    unint64_t v10 = a2->n128_u64[0];
    unint64_t v9 = a2->n128_u64[1];
    if (v9 >= v7) {
      unint64_t v11 = v7;
    }
    else {
      unint64_t v11 = a2->n128_u64[1];
    }
    unint64_t v12 = v7 + a4;
    if (v9 < v7 + a4) {
      unint64_t v12 = a2->n128_u64[1];
    }
    a1->n128_u64[0] = v10;
    a1->n128_u64[1] = v11;
    a1[1].n128_u64[0] = v10 + v12;
    a1[1].n128_u64[1] = v9 - v12;
  }
  return result;
}

void AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(AGCLLVMAGPFragmentShaderGen3 *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 7320));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 7320));
}

void virtual thunk to'AGCLLVMAGPFragmentShaderGen4::~AGCLLVMAGPFragmentShaderGen4(AGCLLVMAGPFragmentShaderGen4 *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F256F938;
  v1[933] = &unk_1F256FCE8;
  v1[937] = &unk_1F256FDD8;
  v1[540] = &unk_1F256FBE8;
  uint64_t v2 = (void *)v1[915];
  if (v2 != v1 + 917) {
    free(v2);
  }
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3((AGCLLVMAGPFragmentShaderGen3 *)v1, (uint64_t *)off_1F256FDE8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 933));
  JUMPOUT(0x1CB7A0780);
}

{
  void *v1;
  void *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 48));
  *uint64_t v1 = &unk_1F256F938;
  v1[933] = &unk_1F256FCE8;
  v1[937] = &unk_1F256FDD8;
  v1[540] = &unk_1F256FBE8;
  uint64_t v2 = (void *)v1[915];
  if (v2 != v1 + 917) {
    free(v2);
  }
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3((AGCLLVMAGPFragmentShaderGen3 *)v1, (uint64_t *)off_1F256FDE8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 933));
}

void non-virtual thunk to'AGCLLVMAGPFragmentShaderGen4::~AGCLLVMAGPFragmentShaderGen4(AGCLLVMAGPFragmentShaderGen4 *this)
{
  uint64_t v2 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this - 4320);
  *((void *)this - 540) = &unk_1F256F938;
  uint64_t v3 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 3144);
  *((void *)this + 393) = &unk_1F256FCE8;
  *((void *)this + 397) = &unk_1F256FDD8;
  *(void *)this = &unk_1F256FBE8;
  uint64_t v4 = (char *)*((void *)this + 375);
  if (v4 != (char *)this + 3016) {
    free(v4);
  }
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(v2, (uint64_t *)off_1F256FDE8);
  AGCLLVMObject::~AGCLLVMObject(v3);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMAGPFragmentShaderGen3 *v2;
  AGCLLVMObject *v3;
  char *v4;
  uint64_t vars8;

  uint64_t v2 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this - 4320);
  *((void *)this - 540) = &unk_1F256F938;
  uint64_t v3 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 3144);
  *((void *)this + 393) = &unk_1F256FCE8;
  *((void *)this + 397) = &unk_1F256FDD8;
  *(void *)this = &unk_1F256FBE8;
  uint64_t v4 = (char *)*((void *)this + 375);
  if (v4 != (char *)this + 3016) {
    free(v4);
  }
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(v2, (uint64_t *)off_1F256FDE8);
  AGCLLVMObject::~AGCLLVMObject(v3);
}

uint64_t AGCLLVMAGPFragmentShaderGen4::setupPerPrimitiveVarying(AGCLLVMAGPFragmentShaderGen4 *this, unsigned int a2, int a3)
{
  if (a3 != 1) {
    llvm::FixedVectorType::get();
  }
  uint64_t v5 = llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  unsigned int v6 = *((_DWORD *)this + 1832);
  if (v6 >= *((_DWORD *)this + 1833)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v7 = (void *)(*((void *)this + 915) + 16 * v6);
  void *v7 = a2;
  v7[1] = v5;
  ++*((_DWORD *)this + 1832);
  return v5;
}

void AGCLLVMAGPFragmentShaderGen4::setupPerPrimitiveVaryings(AGCLLVMAGPFragmentShaderGen4 *this)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 1832))
  {
    uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
    long long v79 = *(_OWORD *)(v2 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v80, (llvm::IRBuilderBase *)(v2 + 40));
    int v81 = *((_DWORD *)v2 + 34);
    uint64_t v3 = (unsigned __int8 *)*((void *)this + 723);
    if (v3 && v3[16] >= 0x1Cu)
    {
      uint64_t v4 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      NextNonDebugInstructiouint64_t n = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)v3);
      llvm::IRBuilderBase::SetInsertPoint(v4, NextNonDebugInstruction);
    }
    else
    {
      uint64_t v6 = *(void *)(*((void *)this + 21) + 80);
      if (v6) {
        unint64_t v7 = (llvm::BasicBlock *)(v6 - 24);
      }
      else {
        unint64_t v7 = 0;
      }
      unsigned int v8 = (char **)((char *)this + *(void *)(*(void *)this - 24) + 40);
      uint64_t FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v7);
      llvm::IRBuilderBase::SetInsertPoint(v8, (char *)v7, FirstInsertionPt);
    }
    AGCLLVMAGPFragmentShader::getFragmentVarying((uint64_t)&__p, this, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232), "agc.per_prim.primitive_address_2", 0x20uLL, 1, 3, 1, 7, 0);
    unint64_t v10 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)&__p);
    unint64_t v11 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v12 = *((void *)v11 + 30);
    LOWORD(v85) = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v11 + 40), 39, (uint64_t)v10, v12, (uint64_t)&v82);
    if (v93 != v94) {
      free(v93);
    }
    AGCLLVMAGPFragmentShader::getFragmentVarying((uint64_t)&__p, this, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232), "agc.per_prim.primitive_address", 0x1EuLL, 1, 3, 1, 7, 0);
    BOOL v14 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)&__p);
    unsigned int v15 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v16 = *((void *)v15 + 30);
    LOWORD(v85) = 257;
    unsigned int v17 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v15 + 40), 39, (uint64_t)v14, v16, (uint64_t)&v82);
    uint64_t v18 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    LOWORD(v85) = 257;
    int v19 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v18, v17, v19, (const llvm::Twine *)&v82);
    if (v93 != v94) {
      free(v93);
    }
    unint64_t v21 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    LOWORD(v92) = 257;
    uint64_t v65 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v21, Cast, Shl, (const llvm::Twine *)&__p);
    if (!*((void *)this + 911))
    {
      AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying((uint64_t)&__p, this, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232), "air.amplification_id", 0x14uLL);
      std::string::size_type v22 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)&__p);
      llvm::ValueHandleBase::operator=((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 7272), (uint64_t)v22);
      *((unsigned char *)this + 5860) = 1;
      if (v93 != v94) {
        free(v93);
      }
    }
    if (!*((void *)this + 914))
    {
      AGCLLVMAGPFragmentShaderGen3::getAmplificationVarying((uint64_t)&__p, this, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232), "air.amplification_count", 0x17uLL);
      uint64_t v23 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)&__p);
      llvm::ValueHandleBase::operator=((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 7296), (uint64_t)v23);
      *((unsigned char *)this + 5861) = 1;
      if (v93 != v94) {
        free(v93);
      }
    }
    uint64_t v24 = *(void *)this;
    char v25 = *(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1762);
    std::string __p = 0;
    int v89 = 0;
    uint64_t v90 = 0;
    uint64_t v91 = &v93;
    uint64_t v92 = 0x800000000;
    v94[62] = 0xFFFFFFFFLL;
    char v95 = v25;
    v101[7] = 0;
    memset(v96, 0, sizeof(v96));
    long long v97 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    memset(v101, 0, 26);
    char v102 = 1;
    uint64_t v26 = *((unsigned int *)this + 1480);
    if (v26)
    {
      unint64_t v27 = *((void *)this + 739);
      uint64_t v28 = v26 << 6;
      do
      {
        GenericVaryingAllocator::addVarying((uint64_t)&__p, v27);
        v27 += 64;
        v28 -= 64;
      }
      while (v28);
      uint64_t v24 = *(void *)this;
    }
    GenericVaryingAllocator::allocate((GenericVaryingAllocator *)&__p, *(const AGCLLVMTargetLowerer **)((char *)this + *(void *)(v24 - 24) + 400));
    int v77 = 0;
    int v78 = 4 * DWORD1(v97);
    if (v95) {
      unsigned int v29 = (HIDWORD(v98) + 1) >> 1;
    }
    else {
      unsigned int v29 = HIDWORD(v98);
    }
    unsigned int v30 = v29 + DWORD1(v97);
    int v75 = 4 * v30;
    int v76 = 4 * (v30 + DWORD1(v100));
    uint64_t v31 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    std::string::size_type v32 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v33 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v34 = *((void *)this + 911);
    uint64_t v35 = *((void *)v33 + 29);
    LOWORD(v85) = 257;
    uint64_t v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v33 + 40), 39, v34, v35, (uint64_t)&v82);
    __int16 v74 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v31, v32, v36, (const llvm::Twine *)v73);
    int v37 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    std::string::size_type v38 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v39 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    BOOL v40 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v41 = (llvm::Value *)*((void *)this + 914);
    LOWORD(v85) = 257;
    uint64_t v42 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v39, v40, v41, (const llvm::Twine *)&v82);
    __int16 v74 = 257;
    uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v37, v38, v42, (const llvm::Twine *)v73);
    long long v82 = 0uLL;
    int v83 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    v86[0] = v87;
    v86[1] = (void *)0x500000000;
    llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)v86, 5uLL, -559038737);
    int v83 = 0;
    long long v82 = xmmword_1CADD62E0;
    uint64_t v85 = AGCLLVMUserFragmentShader::setupInterpolation(this, 7, 0, 1u);
    std::string v44 = AGCLLVMUserFragmentShader::replaceInterpolation((uint64_t *)this, (unsigned int *)&v82);
    std::string v45 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    __int16 v74 = 257;
    uint64_t v46 = llvm::IRBuilderBase::CreateMul(v45, Add, v44, (const llvm::Twine *)v73);
    uint64_t v47 = *((unsigned int *)this + 1832);
    if (v47)
    {
      std::string v48 = (llvm::Value *)v46;
      uint64_t v49 = *((void *)this + 915);
      uint64_t v50 = v49 + 16 * v47;
      do
      {
        if (v92)
        {
          std::string v51 = v91;
          unint64_t v52 = (unint64_t)v92 << 6;
          while (*((_DWORD *)v51 + 4) != *(_DWORD *)v49)
          {
            v51 += 8;
            v52 -= 64;
            if (!v52) {
              goto LABEL_32;
            }
          }
        }
        else
        {
LABEL_32:
          std::string v51 = 0;
        }
        uint64_t v53 = *(uint64_t **)(v49 + 8);
        size_t v54 = (llvm::Value *)llvm::ConstantInt::get();
        if (*((unsigned char *)v51 + 57))
        {
          std::string v55 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
          __int16 v74 = 257;
          size_t v54 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v55, v54, Mul, (const llvm::Twine *)v73);
        }
        std::string v56 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + *(void *)(*(void *)this - 24) + 40);
        __int16 v74 = 257;
        uint64_t v57 = llvm::IRBuilderBase::CreateAdd(v56, v54, v48, (const llvm::Twine *)v73);
        uint64_t v58 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 240);
        __int16 v72 = 257;
        std::string v59 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v56, 39, v57, v58, (uint64_t)v71);
        __int16 v70 = 257;
        uint64_t v60 = llvm::IRBuilderBase::CreateAdd(v56, v65, v59, (const llvm::Twine *)v69);
        std::string v61 = (char *)this + *(void *)(*(void *)this - 24) + 40;
        uint64_t v62 = *v53;
        __int16 v74 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v61, 48, v60, v62, (uint64_t)v73);
        llvm::Value::replaceAllUsesWith();
        v49 += 16;
      }
      while (v49 != v50);
    }
    long long v63 = (char *)this + *(void *)(*(void *)this - 24) + 32;
    long long v66 = v79;
    uint64_t v67 = v80;
    if (v80) {
      llvm::MetadataTracking::track();
    }
    int v68 = v81;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v66, (uint64_t)(v63 + 8));
    if (v67) {
      llvm::MetadataTracking::untrack();
    }
    if (v86[0] != v87) {
      free(v86[0]);
    }
    *(void *)&long long v82 = v96;
    std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100]((void ***)&v82);
    llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)&v91);
    if (__p)
    {
      int v89 = __p;
      operator delete(__p);
    }
    if (v80) {
      llvm::MetadataTracking::untrack();
    }
  }
}

uint64_t llvm::IRBuilderBase::CreateShl(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 9) + 152))(*((void *)this + 9));
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

void AGCLLVMAGPFragmentShaderGen4::getPrimitiveIdVarying(AGCLLVMAGPFragmentShaderGen4 *this@<X0>, llvm::Type *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)this + *(void *)(*(void *)this - 24) + 32), a2, v13);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = a3 + 56;
  *(void *)(a3 + 48) = 0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign(a3 + 40, 5uLL, -559038737);
  *(_DWORD *)a3 = 1;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 12) = ComponentType;
  *(_DWORD *)(a3 + 16) = 0;
  if ((*(unsigned char *)(*((void *)this + 726) + 65) & 1) == 0
    || (int Key = llvm::StringMapImpl::FindKey(), Key == -1)
    || Key == (unint64_t)*((unsigned int *)this + 1472))
  {
    *(_DWORD *)(a3 + 4) = 1;
    *(void *)(a3 + 32) = AGCLLVMUserFragmentShader::setupInterpolation(this, 7, *(unsigned int *)(a3 + 16), *(_DWORD *)a3);
  }
  else
  {
    int v7 = *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 5880), "agc.per_prim.primitive_id", 0x19uLL)+ 8);
    uint64_t v8 = *((unsigned int *)this + 1480);
    v13[0] = 1;
    v13[1] = ComponentType;
    uint64_t v14 = 0x300000003;
    int v15 = v8;
    *(_OWORD *)std::string __p = 0u;
    long long v17 = 0u;
    BOOL v18 = ComponentType == 1;
    BOOL v19 = v7 < 0;
    char v20 = 0;
    if (ComponentType == 1) {
      int v9 = 19;
    }
    else {
      int v9 = 18;
    }
    if (ComponentType == 1) {
      int v10 = 21;
    }
    else {
      int v10 = 20;
    }
    if (v7 >= 0) {
      int v11 = v9;
    }
    else {
      int v11 = v10;
    }
    int v21 = v11;
    MEMORY[0x1CB7A04E0](__p, "agc.per_prim.primitive_id");
    __n128 v12 = llvm::SmallVectorTemplateBase<GenericVarying,false>::push_back((uint64_t)this + 5912, (unint64_t)v13);
    *(_DWORD *)(a3 + 16) = v8;
    *(void *)(a3 + 4) = 0x300000003;
    *(void *)(a3 + 32) = (*(uint64_t (**)(AGCLLVMAGPFragmentShaderGen4 *, uint64_t, uint64_t, void, __n128))(*(void *)this + 648))(this, v8, 1, 0, v12);
    if (SBYTE7(v17) < 0) {
      operator delete(__p[0]);
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = (char *)(*(void *)result + (v1 << 6));
    __n128 result = *(void *)result + 8;
    do
    {
      uint64_t v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_1F25CCA88;
      *((void *)v4 + 3) = v9;
      uint64_t v5 = (char *)v4 + 56;
      __n128 result = (uint64_t)v4 + 64;
      v2 += 64;
    }
    while (v5 != v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::initEmpty(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 104 * v1;
    __n128 result = *(void *)result + 8;
    do
    {
      uint64_t v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_1F2576208;
      *((void *)v4 + 3) = v9;
      uint64_t v5 = (char *)v4 + 96;
      __n128 result = (uint64_t)v4 + 104;
      v2 += 104;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::initEmpty(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 104 * v1;
    __n128 result = *(void *)result + 8;
    do
    {
      uint64_t v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_1F25761E0;
      *((void *)v4 + 3) = v9;
      uint64_t v5 = (char *)v4 + 96;
      __n128 result = (uint64_t)v4 + 104;
      v2 += 104;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t llvm::ValueMap<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  int v7 = &unk_1F2576208;
  uint64_t v10 = a1;
  uint64_t v11 = 0;
  char v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  uint64_t v4 = v11;
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 8), v8);
    *(void *)(v4 + 32) = v10;
    *(void *)(v4 + 40) = v4 + 72;
    *(void *)(v4 + 48) = v4 + 72;
    *(void *)(v4 + 56) = 4;
    *(_DWORD *)(v4 + 64) = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 40;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::initEmpty(uint64_t result)
{
  *(void *)(result + 8) = 0;
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -4096;
  uint64_t v9 = 0;
  unsigned int v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)result + 48 * v1;
    __n128 result = *(void *)result + 8;
    do
    {
      uint64_t v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v7[0]) >> 1) & 3, v7);
      *((void *)v4 - 1) = &unk_1F25761B8;
      *((void *)v4 + 3) = v9;
      uint64_t v5 = (char *)v4 + 40;
      __n128 result = (uint64_t)v4 + 48;
      v2 += 48;
    }
    while (v5 != (char *)v3);
    if (v8 != -8192 && v8 != -4096 && v8 != 0) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
    }
  }
  return result;
}

uint64_t llvm::ValueMap<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  int v7 = &unk_1F25761E0;
  uint64_t v10 = a1;
  uint64_t v11 = 0;
  char v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  uint64_t v4 = v11;
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 8), v8);
    *(void *)(v4 + 32) = v10;
    *(void *)(v4 + 40) = v4 + 72;
    *(void *)(v4 + 48) = v4 + 72;
    *(void *)(v4 + 56) = 4;
    *(_DWORD *)(v4 + 64) = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 40;
}

void *AGCLLVMAGPFragmentShaderGen4::collectDiscardBasicBlocksSurvivorSet(void *result, unsigned int *a2, llvm::SmallPtrSetImplBase *a3, uint64_t a4)
{
  uint64_t v4 = result[1];
  if (v4)
  {
    uint64_t v8 = result;
    while (1)
    {
      uint64_t v9 = *(void *)(v4 + 24);
      unsigned int v10 = *(unsigned __int8 *)(v9 + 16);
      BOOL v11 = v9 && v10 >= 0x1C;
      if (v11 && v10 - 29 < 0xB) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4) {
        return result;
      }
    }
LABEL_13:
    uint64_t v13 = *(void **)(v9 + 40);
    uint64_t v14 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)a2, v13);
    uint64_t v15 = *((void *)a2 + 1);
    if (v15 == *(void *)a2) {
      uint64_t v16 = a2 + 5;
    }
    else {
      uint64_t v16 = a2 + 4;
    }
    if ((const void **)(v15 + 8 * *v16) == v14)
    {
      llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v21, a3, v13);
      long long v17 = (llvm::SmallPtrSetImplBase *)llvm::ValueMap<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[](a4, (llvm::Value *)v13);
      __n128 result = llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v21, v17, v8);
    }
    else
    {
      __n128 result = (void *)AGCLLVMAGPFragmentShaderGen4::collectDiscardBasicBlocksSurvivorSet(v13, a2, a3, a4);
    }
    while (1)
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4) {
        break;
      }
      uint64_t v9 = *(void *)(v4 + 24);
      unsigned int v18 = *(unsigned __int8 *)(v9 + 16);
      if (v9) {
        BOOL v19 = v18 >= 0x1C;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19 && v18 - 29 < 0xB) {
        goto LABEL_13;
      }
    }
  }
  return result;
}

void *llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  int v7 = &unk_1F25CCA88;
  uint64_t v10 = a1;
  BOOL v11 = 0;
  char v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  uint64_t v4 = v11;
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, (uint64_t)v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v8);
    uint64_t v4[4] = v10;
    v4[5] = 6;
    v4[6] = 0;
    v4[7] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 5;
}

void *llvm::ValueMap<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  int v7 = &unk_1F25761B8;
  uint64_t v10 = a1;
  BOOL v11 = 0;
  char v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  uint64_t v4 = v11;
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, (uint64_t)v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v8);
    uint64_t v4[4] = v10;
    v4[5] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return v4 + 5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::destroyAll(uint64_t result, unsigned int a2)
{
  if (a2)
  {
    uint64_t v11 = 2;
    uint64_t v12 = 0;
    uint64_t v13 = -4096;
    uint64_t v14 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = &unk_1F25761B8;
    uint64_t v6 = 2;
    uint64_t v7 = 0;
    uint64_t v8 = -8192;
    uint64_t v2 = 48 * a2;
    char v3 = (uint64_t *)(result + 24);
    do
    {
      uint64_t v4 = *v3;
      if (*v3 != -8192 && v4 != -4096 && v4 != 0) {
        __n128 result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v3 - 2));
      }
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll(uint64_t result, unsigned int a2)
{
  if (a2)
  {
    uint64_t v14 = 2;
    uint64_t v15 = 0;
    uint64_t v16 = -4096;
    uint64_t v17 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = &unk_1F25CCA88;
    uint64_t v9 = 2;
    uint64_t v10 = 0;
    uint64_t v11 = -8192;
    unint64_t v2 = (unint64_t)a2 << 6;
    char v3 = (llvm::ValueHandleBase *)(result + 40);
    do
    {
      uint64_t v4 = *((void *)v3 - 2);
      if (v4 != v16 && v4 != v11)
      {
        uint64_t v6 = *((void *)v3 + 2);
        if (v6 != -8192 && v6 != -4096 && v6 != 0)
        {
          __n128 result = llvm::ValueHandleBase::RemoveFromUseList(v3);
          uint64_t v4 = *((void *)v3 - 2);
        }
      }
      if (v4 != -8192 && v4 != -4096 && v4 != 0) {
        __n128 result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)((char *)v3 - 32));
      }
      char v3 = (llvm::ValueHandleBase *)((char *)v3 + 64);
      v2 -= 64;
    }
    while (v2);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::destroyAll(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v13 = 2;
    uint64_t v14 = 0;
    uint64_t v15 = -4096;
    uint64_t v16 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = &unk_1F25761E0;
    uint64_t v8 = 2;
    uint64_t v9 = 0;
    uint64_t v10 = -8192;
    uint64_t v2 = 104 * a2;
    char v3 = (uint64_t *)(a1 + 24);
    do
    {
      uint64_t v4 = *v3;
      if (*v3 != v15 && v4 != v10)
      {
        uint64_t v6 = (void *)v3[3];
        if (v6 != (void *)v3[2])
        {
          free(v6);
          uint64_t v4 = *v3;
        }
      }
      if (v4 != -8192 && v4 != -4096 && v4 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v3 - 2));
      }
      v3 += 13;
      v2 -= 104;
    }
    while (v2);
  }
}

_DWORD *llvm::PHINode::addIncoming(_DWORD *this, llvm::Value *a2, llvm::BasicBlock *a3)
{
  uint64_t v5 = this;
  int v6 = this[5];
  if ((v6 & 0x7FFFFFF) == this[15])
  {
    this = (_DWORD *)llvm::PHINode::growOperands((llvm::PHINode *)this);
    int v6 = v5[5];
  }
  uint64_t v7 = (v6 + 1) & 0x7FFFFFF;
  void v5[5] = v6 & 0xF8000000 | (v6 + 1) & 0x7FFFFFF;
  uint64_t v8 = (v7 - 1);
  if ((v6 & 0x40000000) != 0) {
    uint64_t v9 = (_DWORD *)*((void *)v5 - 1);
  }
  else {
    uint64_t v9 = &v5[-8 * v7];
  }
  uint64_t v10 = &v9[8 * v8];
  if (*(void *)v10)
  {
    **((void **)v10 + 2) = *((void *)v10 + 1);
    uint64_t v11 = *((void *)v10 + 1);
    if (v11) {
      *(void *)(v11 + 16) = *((void *)v10 + 2);
    }
  }
  *(void *)uint64_t v10 = a2;
  if (a2)
  {
    uint64_t v14 = *((void *)a2 + 1);
    uint64_t v13 = (void *)((char *)a2 + 8);
    uint64_t v12 = v14;
    uint64_t v15 = &v9[8 * v8];
    *((void *)v15 + 1) = v14;
    if (v14) {
      *(void *)(v12 + 16) = v15 + 2;
    }
    *((void *)v15 + 2) = v13;
    *uint64_t v13 = v10;
  }
  int v16 = v5[5];
  uint64_t v17 = v16 & 0x7FFFFFF;
  if ((v16 & 0x40000000) != 0) {
    unsigned int v18 = (_DWORD *)*((void *)v5 - 1);
  }
  else {
    unsigned int v18 = &v5[-8 * v17];
  }
  *(void *)&v18[8 * v5[15] + 2 * (v17 - 1)] = a3;
  return this;
}

void llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v15, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v17 = v4;
  std::string::size_type v22 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v16, &v22))uint64_t v5 = v22; {
  else
  }
    uint64_t v5 = (void *)(*(void *)v4 + 104 * v4[2].u32[0]);
  if ((void *)(*(void *)v17 + 104 * v17[2].u32[0]) != v5)
  {
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    int v6 = v17;
    uint64_t v7 = (void *)v5[6];
    if (v7 != (void *)v5[5]) {
      free(v7);
    }
    v23[0] = 2;
    v23[1] = 0;
    uint64_t v24 = -8192;
    uint64_t v25 = 0;
    std::string::size_type v22 = &unk_1F2576208;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v5 + 1), v23);
    uint64_t v8 = v24;
    v5[4] = v25;
    if (v8 != -8192 && v8 != -4096 && v8) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
    }
    v6[1] = vadd_s32(v6[1], (int32x2_t)0x1FFFFFFFFLL);
    uint64_t v9 = (uint64_t)v17;
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v18, a2);
    unsigned int v18 = &unk_1F2576208;
    uint64_t v21 = v9;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v23, (LODWORD(v19[0]) >> 1) & 3, v19);
    std::string::size_type v22 = &unk_1F2576208;
    uint64_t v25 = v21;
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    uint64_t v28 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)v9, *(_DWORD *)(v9 + 16), v24, &v28) & 1) == 0)
    {
      uint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(v9, (uint64_t)&v22, v28);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v10 + 8), v23);
      *(void *)(v10 + 32) = v25;
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    }
    if (v27 != v26) {
      free(v27);
    }
    if (v24 != -8192 && v24 != -4096 && v24) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
    }
    if (v20 != -8192 && v20 != -4096 && v20) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v19);
    }
    if (v12 != v11) {
      free(v12);
    }
    if (v14 != v13) {
      free(v14);
    }
  }
  if (v16 != -8192 && v16 != -4096)
  {
    if (v16) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = a1 + 104 * v5;
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = a1 + 104 * (v13 & v4);
        uint64_t v7 = *(void *)(v6 + 24);
        uint64_t v8 = 1;
        if (v7 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

llvm::CallbackVH *llvm::CallbackVH::CallbackVH(llvm::CallbackVH *this, llvm::Value *a2)
{
  *((void *)this + 1) = 2;
  *((void *)this + 2) = 0;
  uint64_t v3 = (llvm::CallbackVH *)((char *)this + 8);
  *((void *)v3 + 2) = a2;
  if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2) {
    llvm::ValueHandleBase::AddToUseList(v3);
  }
  *(void *)this = MEMORY[0x1E4FB9FE8] + 16;
  return this;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x1CB79F270]((void *)v8, 104 * v8, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::initEmpty(a1);
    v22[0] = 2;
    v22[1] = 0;
    uint64_t v23 = -4096;
    uint64_t v24 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = &unk_1F2576208;
    v18[0] = 2;
    v18[1] = 0;
    uint64_t v19 = -8192;
    if (v3)
    {
      uint64_t v9 = (uint64_t *)((char *)v4 + 24);
      uint64_t v10 = 104 * v3;
      do
      {
        uint64_t v11 = *v9;
        if (*v9 != v23 && v11 != v19)
        {
          uint64_t v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v25);
          uint64_t v13 = v25;
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v25 + 8), v9 - 2);
          *(void *)(v13 + 32) = v9[1];
          llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
          ++*(_DWORD *)(a1 + 8);
          uint64_t v14 = (void *)v9[3];
          if (v14 != (void *)v9[2]) {
            free(v14);
          }
        }
        uint64_t v15 = *v9;
        if (*v9 != -8192 && v15 != -4096 && v15 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
        }
        v9 += 13;
        v10 -= 104;
      }
      while (v10);
      if (v19 != -8192 && v19 != -4096 && v19) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
      }
    }
    if (v23 != -8192 && v23 != -4096 && v23) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v22);
    }
    return llvm::deallocate_buffer(v4, (void *)(104 * v3));
  }
  else
  {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::initEmpty(a1);
  }
}

uint64_t llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v8, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v10 = v2;
  uint64_t v11 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)v2, *(_DWORD *)(v2 + 16), v9, &v11);
  if (result)
  {
    int v4 = v11;
    unint64_t v5 = (void *)v11[6];
    if (v5 != (void *)v11[5]) {
      free(v5);
    }
    v12[0] = 2;
    v12[1] = 0;
    uint64_t v13 = -8192;
    uint64_t v14 = 0;
    uint64_t v11 = &unk_1F2576208;
    uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v12);
    uint64_t v6 = v13;
    uint64_t v4[4] = v14;
    if (v6 != -8192 && v6 != -4096 && v6) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return result;
}

void llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v15, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  int v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v17 = v4;
  std::string::size_type v22 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v16, &v22))unint64_t v5 = v22; {
  else
  }
    unint64_t v5 = (void *)(*(void *)v4 + 104 * v4[2].u32[0]);
  if ((void *)(*(void *)v17 + 104 * v17[2].u32[0]) != v5)
  {
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    uint64_t v6 = v17;
    int v7 = (void *)v5[6];
    if (v7 != (void *)v5[5]) {
      free(v7);
    }
    v23[0] = 2;
    v23[1] = 0;
    uint64_t v24 = -8192;
    uint64_t v25 = 0;
    std::string::size_type v22 = &unk_1F25761E0;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v5 + 1), v23);
    uint64_t v8 = v24;
    v5[4] = v25;
    if (v8 != -8192 && v8 != -4096 && v8) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
    }
    v6[1] = vadd_s32(v6[1], (int32x2_t)0x1FFFFFFFFLL);
    uint64_t v9 = (uint64_t)v17;
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v18, a2);
    unsigned int v18 = &unk_1F25761E0;
    uint64_t v21 = v9;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v23, (LODWORD(v19[0]) >> 1) & 3, v19);
    std::string::size_type v22 = &unk_1F25761E0;
    uint64_t v25 = v21;
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    uint64_t v28 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)v9, *(_DWORD *)(v9 + 16), v24, &v28) & 1) == 0)
    {
      uint64_t v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(v9, (uint64_t)&v22, v28);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v10 + 8), v23);
      *(void *)(v10 + 32) = v25;
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
    }
    if (v27 != v26) {
      free(v27);
    }
    if (v24 != -8192 && v24 != -4096 && v24) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v23);
    }
    if (v20 != -8192 && v20 != -4096 && v20) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v19);
    }
    if (v12 != v11) {
      free(v12);
    }
    if (v14 != v13) {
      free(v14);
    }
  }
  if (v16 != -8192 && v16 != -4096)
  {
    if (v16) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x1CB79F270]((void *)v8, 104 * v8, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::initEmpty(a1);
    v22[0] = 2;
    v22[1] = 0;
    uint64_t v23 = -4096;
    uint64_t v24 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = &unk_1F25761E0;
    v18[0] = 2;
    v18[1] = 0;
    uint64_t v19 = -8192;
    if (v3)
    {
      uint64_t v9 = (uint64_t *)((char *)v4 + 24);
      uint64_t v10 = 104 * v3;
      do
      {
        uint64_t v11 = *v9;
        if (*v9 != v23 && v11 != v19)
        {
          uint64_t v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v25);
          uint64_t v13 = v25;
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v25 + 8), v9 - 2);
          *(void *)(v13 + 32) = v9[1];
          llvm::SmallPtrSetImplBase::SmallPtrSetImplBase();
          ++*(_DWORD *)(a1 + 8);
          uint64_t v14 = (void *)v9[3];
          if (v14 != (void *)v9[2]) {
            free(v14);
          }
        }
        uint64_t v15 = *v9;
        if (*v9 != -8192 && v15 != -4096 && v15 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
        }
        v9 += 13;
        v10 -= 104;
      }
      while (v10);
      if (v19 != -8192 && v19 != -4096 && v19) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
      }
    }
    if (v23 != -8192 && v23 != -4096 && v23) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v22);
    }
    return llvm::deallocate_buffer(v4, (void *)(104 * v3));
  }
  else
  {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::initEmpty(a1);
  }
}

uint64_t llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v8, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v10 = v2;
  uint64_t v11 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>,llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock *,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Function const*,llvm::SmallPtrSet<llvm::BasicBlock *,4u>,llvm::ValueMapConfig<llvm::Function const*,llvm::sys::SmartMutex<false>>>>(*(void *)v2, *(_DWORD *)(v2 + 16), v9, &v11);
  if (result)
  {
    int v4 = v11;
    unint64_t v5 = (void *)v11[6];
    if (v5 != (void *)v11[5]) {
      free(v5);
    }
    v12[0] = 2;
    v12[1] = 0;
    uint64_t v13 = -8192;
    uint64_t v14 = 0;
    uint64_t v11 = &unk_1F25761E0;
    uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v12);
    uint64_t v6 = v13;
    uint64_t v4[4] = v14;
    if (v6 != -8192 && v6 != -4096 && v6) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  }
  return result;
}

void llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v16, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  int v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v15 = &unk_1F25CCA88;
  unsigned int v18 = v4;
  uint64_t v10 = 0;
  int v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v17, &v10);
  unint64_t v6 = *(void *)v4 + ((unint64_t)v4[2].u32[0] << 6);
  if (v5) {
    int v7 = v10;
  }
  else {
    int v7 = (llvm::Value *)v6;
  }
  if ((llvm::Value *)(*(void *)v18 + ((unint64_t)v18[2].u32[0] << 6)) != v7)
  {
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v13, 3u, (void *)v7 + 5);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase(v18, v7);
    uint64_t v8 = v18;
    uint64_t v10 = a2;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, 3u, v13);
    llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert(&v9, (uint64_t)v8, &v10);
    if (v12 != -8192 && v12 != -4096 && v12) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
    if (v14 != -8192 && v14 != -4096 && v14) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v13);
    }
  }
  if (v17 != -8192 && v17 != -4096)
  {
    if (v17) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v5 = a1 + (v4 << 6);
    uint64_t v6 = *(void *)(v5 + 24);
    if (v6 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        uint64_t v5 = a1 + (v4 << 6);
        uint64_t v6 = *(void *)(v5 + 24);
        uint64_t v7 = 1;
        if (v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        uint64_t v5 = v9;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase(int32x2_t *a1, void *a2)
{
  uint64_t v4 = a2[7];
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(a2 + 5));
  }
  v9[0] = 2;
  v9[1] = 0;
  uint64_t v10 = -8192;
  uint64_t v11 = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 1), v9);
  uint64_t v6 = v10;
  a2[4] = v11;
  if (v6 != -8192 && v6 != -4096 && v6 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v9);
  }
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

__n128 llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert(__n128 *a1, uint64_t a2, llvm::Value **a3)
{
  uint64_t v5 = a3 + 1;
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v12, *a3);
  int v12 = &unk_1F25CCA88;
  uint64_t v15 = a2;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v17, (LODWORD(v13[0]) >> 1) & 3, v13);
  uint64_t v16 = &unk_1F25CCA88;
  uint64_t v19 = v15;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v20, 3u, v5);
  std::string::size_type v22 = 0;
  char v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(*(void *)a2, *(_DWORD *)(a2 + 16), v18, &v22);
  uint64_t v7 = v22;
  if (v6)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t v7 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(a2, (uint64_t)&v16, (uint64_t)v22);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v7 + 1), v17);
    v7[4] = v19;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v7 + 5), 3u, v20);
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a2;
  uint64_t v10 = *(unsigned int *)(a2 + 16);
  if (v21 != -8192 && v21 != -4096 && v21) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
  }
  if (v18 != -8192 && v18 != -4096 && v18) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v17);
  }
  if (v14 != -8192 && v14 != -4096 && v14) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v13);
  }
  result.n128_u64[0] = (unint64_t)v7;
  result.n128_u64[1] = v9 + (v10 << 6);
  *a1 = result;
  a1[1].n128_u8[0] = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x1CB79F270]((unint64_t)v8 << 6, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty(a1);
    v22[0] = 2;
    v22[1] = 0;
    uint64_t v23 = -4096;
    uint64_t v24 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = &unk_1F25CCA88;
    v18[0] = 2;
    v18[1] = 0;
    uint64_t v19 = -8192;
    if (v3)
    {
      uint64_t v9 = (void *)((char *)v4 + 32);
      uint64_t v10 = v3 << 6;
      do
      {
        uint64_t v11 = *(v9 - 1);
        if (v11 != v23 && v11 != v19)
        {
          uint64_t v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v25);
          uint64_t v13 = v25;
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v25 + 8), v9 - 3);
          *(void *)(v13 + 32) = *v9;
          llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v13 + 40), 3u, v9 + 1);
          ++*(_DWORD *)(a1 + 8);
          uint64_t v14 = v9[3];
          if (v14 != -8192 && v14 != -4096 && v14) {
            llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 + 1));
          }
        }
        uint64_t v15 = *(v9 - 1);
        if (v15 != -8192 && v15 != -4096 && v15 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 3));
        }
        v9 += 8;
        v10 -= 64;
      }
      while (v10);
      if (v19 != -8192 && v19 != -4096 && v19) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
      }
    }
    if (v23 != -8192 && v23 != -4096 && v23) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v22);
    }
    return llvm::deallocate_buffer(v4, (void *)(v3 << 6));
  }
  else
  {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty(a1);
  }
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v9, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v11 = v2;
  int v12 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(*(void *)v2, *(_DWORD *)(v2 + 16), v10, &v12);
  if (result)
  {
    uint64_t v4 = v12;
    uint64_t v5 = v12[7];
    if (v5 != -8192 && v5 != -4096 && v5 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v12 + 5));
    }
    v13[0] = 2;
    v13[1] = 0;
    uint64_t v14 = -8192;
    uint64_t v15 = 0;
    int v12 = &unk_1F25CCA88;
    uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v13);
    uint64_t v7 = v14;
    uint64_t v4[4] = v15;
    if (v7 != -8192 && v7 != -4096 && v7) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v13);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v10 != -8192 && v10 != -4096 && v10 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v9);
  }
  return result;
}

uint64_t llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v10, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  int v12 = v4;
  uint64_t v17 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v11, &v17))uint64_t v5 = (uint64_t)v17; {
  else
  }
    uint64_t v5 = *(void *)v4 + 48 * v4[2].u32[0];
  uint64_t result = (uint64_t)v12;
  if (*(void *)v12 + 48 * v12[2].u32[0] != v5)
  {
    uint64_t v7 = *(void *)(v5 + 40);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::erase(v12, v5);
    unsigned int v8 = v12;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v13, a2);
    uint64_t v13 = &unk_1F25761B8;
    uint64_t v16 = v8;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v18, (LODWORD(v14[0]) >> 1) & 3, v14);
    uint64_t v17 = &unk_1F25761B8;
    uint64_t v20 = v16;
    uint64_t v21 = v7;
    uint64_t v22 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v8, v8[2].i32[0], v19, &v22);
    if ((result & 1) == 0)
    {
      uint64_t v9 = (void *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)v8, (uint64_t)&v17, v22);
      uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v9 + 1), v18);
      v9[4] = v20;
      void v9[5] = v21;
    }
    if (v19 != -8192 && v19 != -4096 && v19) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
    }
    if (v15 != -8192 && v15 != -4096 && v15) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v14);
    }
  }
  if (v11 != -8192 && v11 != -4096)
  {
    if (v11) {
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v10);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = a1 + 48 * v5;
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = a1 + 48 * (v13 & v4);
        uint64_t v7 = *(void *)(v6 + 24);
        uint64_t v8 = 1;
        if (v7 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::erase(int32x2_t *a1, uint64_t a2)
{
  v7[0] = 2;
  v7[1] = 0;
  uint64_t v8 = -8192;
  uint64_t v9 = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 8), v7);
  uint64_t v4 = v8;
  *(void *)(a2 + 32) = v9;
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::grow(a1, v6);
  uint64_t v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x1CB79F270]((void *)v8, 48 * v8, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::initEmpty(a1);
    v20[0] = 2;
    v20[1] = 0;
    uint64_t v21 = -4096;
    uint64_t v22 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &unk_1F25761B8;
    v16[0] = 2;
    v16[1] = 0;
    uint64_t v17 = -8192;
    if (v3)
    {
      uint64_t v9 = (uint64_t *)((char *)v4 + 24);
      uint64_t v10 = 48 * v3;
      do
      {
        uint64_t v11 = *v9;
        if (*v9 != v21 && v11 != v17)
        {
          uint64_t v23 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v23);
          uint64_t v13 = v23;
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v23 + 8), v9 - 2);
          *(void *)(v13 + 32) = v9[1];
          *(void *)(v13 + 40) = v9[2];
          ++*(_DWORD *)(a1 + 8);
          uint64_t v11 = *v9;
        }
        if (v11 != -8192 && v11 != -4096 && v11 != 0) {
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
        }
        v9 += 6;
        v10 -= 48;
      }
      while (v10);
      if (v17 != -8192 && v17 != -4096 && v17) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
      }
    }
    if (v21 != -8192 && v21 != -4096 && v21) {
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    }
    return llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::initEmpty(a1);
  }
}

uint64_t llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v9 = v2;
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(void *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if (result)
  {
    uint64_t v4 = v10;
    v11[0] = 2;
    v11[1] = 0;
    uint64_t v12 = -8192;
    uint64_t v13 = 0;
    uint64_t v10 = &unk_1F25761B8;
    uint64_t result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v11);
    uint64_t v5 = v12;
    uint64_t v4[4] = v13;
    if (v5 != -8192 && v5 != -4096 && v5) {
      uint64_t result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
    }
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0) {
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 16 * v1;
    uint64_t v3 = (uint64_t *)(*(void *)a1 + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v4 = *v3;
        uint64_t *v3 = 0;
        if (v4) {
          std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100](v4);
        }
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return (uint64_t *)(a1 + 16 * a2);
  }
  LODWORD(v3) = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  uint64_t v4 = (uint64_t *)(a1 + 16 * v3);
  uint64_t v5 = *v4;
  if (*v4 != a3)
  {
    int v6 = 1;
    while (v5 != -4096)
    {
      int v7 = v3 + v6++;
      uint64_t v3 = v7 & (a2 - 1);
      uint64_t v5 = *(void *)(a1 + 16 * v3);
      if (v5 == a3) {
        return (uint64_t *)(a1 + 16 * v3);
      }
    }
    return (uint64_t *)(a1 + 16 * a2);
  }
  return v4;
}

void std::default_delete<llvm::DomTreeNodeBase<llvm::BasicBlock>>::operator()[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }
  JUMPOUT(0x1CB7A0780);
}

const void **llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find(llvm::SmallPtrSetImplBase *a1, const void *a2)
{
  uint64_t result = llvm::SmallPtrSetImplBase::find_imp(a1, a2);
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = 16;
  if (v4 == *(void *)a1) {
    uint64_t v5 = 20;
  }
  int v6 = (const void **)(v4 + 8 * *(unsigned int *)((char *)a1 + v5));
  if (v6 != result)
  {
    while ((unint64_t)*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v6) {
        return v6;
      }
    }
  }
  return result;
}

uint64_t llvm::SwitchInst::setDefaultDest(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 20);
  if ((v2 & 0x40000000) != 0) {
    uint64_t v3 = *(void *)(result - 8);
  }
  else {
    uint64_t v3 = result - 32 * (v2 & 0x7FFFFFF);
  }
  uint64_t v4 = (void *)(v3 + 32);
  if (*(void *)(v3 + 32))
  {
    **(void **)(v3 + 48) = *(void *)(v3 + 40);
    uint64_t v5 = *(void *)(v3 + 40);
    if (v5) {
      *(void *)(v5 + 16) = *(void *)(v3 + 48);
    }
  }
  *uint64_t v4 = a2;
  if (a2)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    int v6 = (void *)(a2 + 8);
    uint64_t v7 = v8;
    *(void *)(v3 + 40) = v8;
    if (v8) {
      *(void *)(v7 + 16) = v3 + 40;
    }
    *(void *)(v3 + 48) = v6;
    void *v6 = v4;
  }
  return result;
}

uint64_t llvm::po_iterator<llvm::BasicBlock *,llvm::SmallPtrSet<llvm::BasicBlock *,8u>,false,llvm::GraphTraits<llvm::BasicBlock *>>::traverseChild(uint64_t a1)
{
  uint64_t v2 = a1 + 96;
  while (1)
  {
    uint64_t v3 = *(void *)(a1 + 96) + 24 * *(unsigned int *)(a1 + 104);
    uint64_t v4 = *(void *)(v3 - 24);
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5 == v4 + 40
      || ((int v6 = (llvm::Instruction *)(v5 - 24), v5) ? (v7 = v5 - 24) : (v7 = 0),
          *(unsigned __int8 *)(v7 + 16) - 29 > 0xA))
    {
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = llvm::Instruction::getNumSuccessors(v6);
    }
    if (*(_DWORD *)(v3 - 8) == result) {
      break;
    }
    uint64_t v9 = *(void *)(a1 + 96) + 24 * *(unsigned int *)(a1 + 104);
    uint64_t v10 = *(llvm::Instruction **)(v9 - 16);
    ++*(_DWORD *)(v9 - 8);
    Successor = (void *)llvm::Instruction::getSuccessor(v10);
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v19, (llvm::SmallPtrSetImplBase *)a1, Successor);
    if ((_BYTE)v20)
    {
      uint64_t v12 = (void *)Successor[5];
      if (v12 == Successor + 5)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v13 = v12 - 3;
        if (v12) {
          uint64_t v14 = v12 - 3;
        }
        else {
          uint64_t v14 = 0;
        }
        if (*((unsigned __int8 *)v14 + 16) - 29 >= 0xB) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v13;
        }
      }
      v19[0] = Successor;
      v19[1] = v15;
      uint64_t v20 = 0;
      unint64_t v16 = llvm::SmallVectorTemplateCommon<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,true>>(v2, (unint64_t)v19);
      uint64_t v17 = *(void *)(a1 + 96) + 24 * *(unsigned int *)(a1 + 104);
      long long v18 = *(_OWORD *)v16;
      *(void *)(v17 + 16) = *(void *)(v16 + 16);
      *(_OWORD *)uint64_t v17 = v18;
      ++*(_DWORD *)(a1 + 104);
    }
  }
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>,true>>(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v4 = *(void *)a1 + 24 * v2;
    if (*(void *)a1 > a2 || v4 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

uint64_t *llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    unsigned int v3 = *((_DWORD *)a2 + 2);
    uint64_t v4 = *((unsigned int *)a1 + 2);
    if (v4 >= v3)
    {
      if (v3)
      {
        uint64_t v5 = *a2;
        uint64_t v6 = *a2 + 24 * v3;
        uint64_t v7 = *a1;
        do
        {
          *(void *)uint64_t v7 = *(void *)v5;
          uint64_t v8 = *(void *)(v5 + 8);
          *(_DWORD *)(v7 + 16) = *(_DWORD *)(v5 + 16);
          *(void *)(v7 + 8) = v8;
          v5 += 24;
          v7 += 24;
        }
        while (v5 != v6);
      }
    }
    else
    {
      if (*((_DWORD *)a1 + 3) < v3)
      {
        *((_DWORD *)a1 + 2) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        uint64_t v9 = *a2;
        uint64_t v10 = *a2 + 24 * v4;
        uint64_t v11 = *a1;
        do
        {
          *(void *)uint64_t v11 = *(void *)v9;
          uint64_t v12 = *(void *)(v9 + 8);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v9 + 16);
          *(void *)(v11 + 8) = v12;
          v9 += 24;
          v11 += 24;
        }
        while (v9 != v10);
      }
      else
      {
        uint64_t v4 = 0;
      }
      uint64_t v13 = *((unsigned int *)a2 + 2);
      if (v4 != v13) {
        memcpy((void *)(*a1 + 24 * v4), (const void *)(*a2 + 24 * v4), *a2 + 24 * v13 - (*a2 + 24 * v4));
      }
    }
    *((_DWORD *)a1 + 2) = v3;
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::BasicBlock *,llvm::SuccIterator<llvm::Instruction,llvm::BasicBlock>>>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v5 = a2 + 2;
    uint64_t v4 = *a2;
    if ((uint64_t *)*a2 == a2 + 2)
    {
      unsigned int v7 = *((_DWORD *)a2 + 2);
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if (v8 >= v7)
      {
        if (v7)
        {
          uint64_t v9 = *(_DWORD **)a1;
          uint64_t v10 = v4 + 24 * v7;
          do
          {
            *(void *)uint64_t v9 = *(void *)v4;
            uint64_t v11 = *(void *)(v4 + 8);
            v9[4] = *(_DWORD *)(v4 + 16);
            *((void *)v9 + 1) = v11;
            v4 += 24;
            v9 += 6;
          }
          while (v4 != v10);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v7)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v8)
        {
          uint64_t v12 = v4 + 24 * v8;
          uint64_t v13 = *(_DWORD **)a1;
          do
          {
            *(void *)uint64_t v13 = *(void *)v4;
            uint64_t v14 = *(void *)(v4 + 8);
            void v13[4] = *(_DWORD *)(v4 + 16);
            *((void *)v13 + 1) = v14;
            v4 += 24;
            v13 += 6;
          }
          while (v4 != v12);
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v15 = *((unsigned int *)a2 + 2);
        if (v8 != v15) {
          memcpy((void *)(*(void *)a1 + 24 * v8), (const void *)(*a2 + 24 * v8), *a2 + 24 * v15 - (*a2 + 24 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v7;
    }
    else
    {
      uint64_t v6 = *(_DWORD **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *a2;
      }
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
    }
    *((_DWORD *)a2 + 2) = 0;
  }
  return a1;
}

void AGCLLVMAGPFragmentShaderGen4::~AGCLLVMAGPFragmentShaderGen4(AGCLLVMAGPFragmentShaderGen4 *this)
{
  *(void *)this = &unk_1F256F938;
  unsigned int v2 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 7464);
  *((void *)this + 933) = &unk_1F256FCE8;
  *((void *)this + 937) = &unk_1F256FDD8;
  *((void *)this + 540) = &unk_1F256FBE8;
  unsigned int v3 = (char *)*((void *)this + 915);
  if (v3 != (char *)this + 7336) {
    free(v3);
  }
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(this, (uint64_t *)off_1F256FDE8);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  char *v3;

  *(void *)this = &unk_1F256F938;
  unsigned int v2 = (AGCLLVMAGPFragmentShaderGen4 *)((char *)this + 7464);
  *((void *)this + 933) = &unk_1F256FCE8;
  *((void *)this + 937) = &unk_1F256FDD8;
  *((void *)this + 540) = &unk_1F256FBE8;
  unsigned int v3 = (char *)*((void *)this + 915);
  if (v3 != (char *)this + 7336) {
    free(v3);
  }
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(this, (uint64_t *)off_1F256FDE8);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

void non-virtual thunk to'AGCLLVMAGPFragmentShaderGen6::~AGCLLVMAGPFragmentShaderGen6(AGCLLVMAGPFragmentShaderGen6 *this)
{
  unsigned int v2 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this - 4320);
  *((void *)this - 540) = off_1F2574358;
  unsigned int v3 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + 3144);
  *((void *)this + 393) = &off_1F2574708;
  *((void *)this + 397) = &off_1F25747F8;
  *(void *)this = off_1F2574608;
  uint64_t v4 = (char *)*((void *)this + 375);
  if (v4 != (char *)this + 3016) {
    free(v4);
  }
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(v2, (uint64_t *)off_1F2570390);
  AGCLLVMObject::~AGCLLVMObject(v3);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMAGPFragmentShaderGen3 *v2;
  AGCLLVMObject *v3;
  char *v4;
  uint64_t vars8;

  unsigned int v2 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this - 4320);
  *((void *)this - 540) = off_1F2574358;
  unsigned int v3 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + 3144);
  *((void *)this + 393) = &off_1F2574708;
  *((void *)this + 397) = &off_1F25747F8;
  *(void *)this = off_1F2574608;
  uint64_t v4 = (char *)*((void *)this + 375);
  if (v4 != (char *)this + 3016) {
    free(v4);
  }
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(v2, (uint64_t *)off_1F2570390);
  AGCLLVMObject::~AGCLLVMObject(v3);
}

void AGCLLVMAGPFragmentShaderGen6::getPrimitiveIdVarying(AGCLLVMAGPFragmentShaderGen6 *this@<X0>, llvm::Type *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)this + *(void *)(*(void *)this - 24) + 32), a2, v13);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = a3 + 56;
  *(void *)(a3 + 48) = 0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign(a3 + 40, 5uLL, -559038737);
  *(_DWORD *)a3 = 1;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 12) = ComponentType;
  *(_DWORD *)(a3 + 16) = 0;
  if ((*(unsigned char *)(*((void *)this + 726) + 65) & 1) == 0
    || (int Key = llvm::StringMapImpl::FindKey(), Key == -1)
    || Key == (unint64_t)*((unsigned int *)this + 1472))
  {
    *(_DWORD *)(a3 + 4) = 1;
    *(void *)(a3 + 32) = AGCLLVMUserFragmentShader::setupInterpolation(this, 7, *(unsigned int *)(a3 + 16), *(_DWORD *)a3);
  }
  else
  {
    int v7 = *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((AGCLLVMAGPFragmentShaderGen6 *)((char *)this + 5880), "agc.per_prim.primitive_id", 0x19uLL)+ 8);
    uint64_t v8 = *((unsigned int *)this + 1480);
    v13[0] = 1;
    v13[1] = ComponentType;
    uint64_t v14 = 0x300000003;
    int v15 = v8;
    *(_OWORD *)std::string __p = 0u;
    long long v17 = 0u;
    BOOL v18 = ComponentType == 1;
    BOOL v19 = v7 < 0;
    char v20 = 0;
    if (ComponentType == 1) {
      int v9 = 19;
    }
    else {
      int v9 = 18;
    }
    if (ComponentType == 1) {
      int v10 = 21;
    }
    else {
      int v10 = 20;
    }
    if (v7 >= 0) {
      int v11 = v9;
    }
    else {
      int v11 = v10;
    }
    int v21 = v11;
    MEMORY[0x1CB7A04E0](__p, "agc.per_prim.primitive_id");
    __n128 v12 = llvm::SmallVectorTemplateBase<GenericVarying,false>::push_back((uint64_t)this + 5912, (unint64_t)v13);
    *(_DWORD *)(a3 + 16) = v8;
    *(void *)(a3 + 4) = 0x300000003;
    *(void *)(a3 + 32) = (*(uint64_t (**)(AGCLLVMAGPFragmentShaderGen6 *, uint64_t, uint64_t, void, __n128))(*(void *)this + 648))(this, v8, 1, 0, v12);
    if (SBYTE7(v17) < 0) {
      operator delete(__p[0]);
    }
  }
}

void AGCLLVMAGPFragmentShaderGen6::~AGCLLVMAGPFragmentShaderGen6(AGCLLVMAGPFragmentShaderGen6 *this)
{
  *(void *)this = off_1F2574358;
  unsigned int v2 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + 7464);
  *((void *)this + 933) = &off_1F2574708;
  *((void *)this + 937) = &off_1F25747F8;
  *((void *)this + 540) = off_1F2574608;
  unsigned int v3 = (char *)*((void *)this + 915);
  if (v3 != (char *)this + 7336) {
    free(v3);
  }
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(this, (uint64_t *)off_1F2570390);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  char *v3;

  *(void *)this = off_1F2574358;
  unsigned int v2 = (AGCLLVMAGPFragmentShaderGen6 *)((char *)this + 7464);
  *((void *)this + 933) = &off_1F2574708;
  *((void *)this + 937) = &off_1F25747F8;
  *((void *)this + 540) = off_1F2574608;
  unsigned int v3 = (char *)*((void *)this + 915);
  if (v3 != (char *)this + 7336) {
    free(v3);
  }
  AGCLLVMAGPFragmentShaderGen3::~AGCLLVMAGPFragmentShaderGen3(this, (uint64_t *)off_1F2570390);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

uint64_t llvm::LLT::dump(llvm::LLT *this)
{
  unsigned int v2 = (llvm::raw_ostream *)llvm::dbgs(this);
  unsigned int v3 = (llvm *)llvm::LLT::print(this, v2);
  uint64_t result = llvm::dbgs(v3);
  uint64_t v5 = *(unsigned char **)(result + 32);
  if ((unint64_t)v5 >= *(void *)(result + 24))
  {
    return MEMORY[0x1F417AD20]();
  }
  else
  {
    *(void *)(result + 32) = v5 + 1;
    *uint64_t v5 = 10;
  }
  return result;
}

uint64_t AGCLLVMUserMeshShaderAnalysis::constructReply(AGCLLVMUserMeshShaderAnalysis *this)
{
  unsigned int v2 = (AGCLLVMUserMeshShaderAnalysis *)((char *)this + 2472);
  *((unsigned char *)this + 2542) = 1;
  int v3 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)this + 309, 4, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 6, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 8, 0);
  int v4 = flatbuffers::FlatBufferBuilder::EndTable(v2, v3);
  GenericVaryingAllocator::allocate((AGCLLVMUserMeshShaderAnalysis *)((char *)this + 3320), *((const AGCLLVMTargetLowerer **)this + 50));
  GenericVaryingAllocator::serialize((AGCLLVMUserMeshShaderAnalysis *)((char *)this + 3320), v2);
  uint64_t v5 = *((void *)this + 416) - *((void *)this + 415);
  if (v5) {
    uint64_t v6 = (void *)*((void *)this + 415);
  }
  else {
    uint64_t v6 = &flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
  }
  int v7 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)v2, (uint64_t)v6, v5 >> 2);
  uint64_t v45 = 0;
  BOOL VaryingSignature = GenericVaryingAllocator::getVaryingSignature((uint64_t)this + 3320, v2, (_DWORD *)&v45 + 1, &v45);
  *((unsigned char *)this + 2542) = 1;
  uint64_t v9 = *((void *)this + 313);
  uint64_t v10 = *((void *)this + 315);
  uint64_t v11 = *((void *)this + 314);
  if (VaryingSignature)
  {
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v2, 10, SHIDWORD(v45));
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v2, 12, v45);
  }
  int v12 = flatbuffers::FlatBufferBuilder::EndTable(v2, (unsigned __int16)v9 - (unsigned __int16)v10 + (unsigned __int16)v11);
  uint64_t v13 = AGCLLVMObject::constructFlatReply(this);
  int v15 = flatbuffers::FlatBufferBuilder::EndTable(v13, v14);
  *((unsigned char *)this + 2542) = 1;
  int v16 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v2, 4, v4);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 6, *((_DWORD *)this + 1009));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 8, *((_DWORD *)this + 1010));
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(v2, 10, *((char *)this + 4044));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 12, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 14, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 16, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 18, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 60, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 20, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 22, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 28, *((unsigned __int8 *)this + 4008), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v2, 30, v7);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 32, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2, 34, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 36, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 38, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 40, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 42, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 44, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v2, 46, 0, 0);
  unsigned int v17 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v2, 1);
  flatbuffers::FlatBufferBuilder::TrackField(v2, 54, v17);
  int v18 = flatbuffers::FlatBufferBuilder::EndTable(v2, v16);
  *((unsigned char *)this + 2542) = 1;
  int v19 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v2, v15);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MeshShaderInfo>(v2, v18);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLVertexInfo>(v2, v12);
  int v20 = flatbuffers::FlatBufferBuilder::EndTable(v2, v19);
  flatbuffers::FlatBufferBuilder::Finish(v2, v20, v21);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this, v2);
  uint64_t v36 = 0;
  char v37 = 0;
  long long v38 = xmmword_1CADD6280;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v41 = 0x1000000000000;
  uint64_t v42 = 1;
  __int16 v43 = 256;
  uint64_t v44 = 0;
  int v22 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v36, 0);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)&v36, v22, v23);
  uint64_t v24 = (const void *)v40;
  size_t v25 = (v39 - v40 + DWORD2(v39));
  size_t v26 = (*((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628));
  uint64_t v27 = (v25 + 7) & 0x1FFFFFFF8;
  uint64_t v28 = (v26 + 7) & 0x1FFFFFFF8;
  uint64_t v29 = v28 + v27 + 376;
  unsigned int v30 = (char *)malloc_type_calloc(1uLL, v29 + 40, 0x7843BC0uLL);
  *(_DWORD *)unsigned int v30 = -17958193;
  *((void *)v30 + 4) = 0x13800000019;
  *((_DWORD *)v30 + 4) = 2;
  uint64_t v31 = v27 + v28 + 8;
  *((void *)v30 + 8) = v31;
  *((void *)v30 + 9) = 368;
  *((void *)v30 + 10) = v31;
  *((_DWORD *)v30 + 24) = 3;
  *(_OWORD *)(v30 + 120) = *(_OWORD *)"__TEXT";
  *((_DWORD *)v30 + 38) = 368;
  *((void *)v30 + 18) = 8;
  *((void *)v30 + 46) = 0;
  *(_OWORD *)(v30 + 200) = *(_OWORD *)"__GPU_METADATA";
  *((_DWORD *)v30 + 58) = 376;
  *((void *)v30 + 28) = v27;
  memcpy(v30 + 376, v24, v25);
  *(_OWORD *)(v30 + 280) = *(_OWORD *)"__GPU_LD_MD";
  *((_DWORD *)v30 + 78) = v27 + 376;
  *((void *)v30 + 38) = v28;
  memcpy(&v30[(v27 + 376) & 0xFFFFFFF8], *((const void **)this + 315), v26);
  uint64_t v32 = (uint64_t)&v30[*((unsigned int *)v30 + 9) + 32];
  *(void *)uint64_t v32 = 0x1800000002;
  *(_DWORD *)(v32 + 8) = v29;
  *(_DWORD *)(v32 + 12) = 1;
  uint64_t v33 = (v29 + 16);
  *(_DWORD *)(v32 + 16) = v33;
  *(_DWORD *)(v32 + 20) = 20;
  strcpy(&v30[v33], "__agc.ctx_switch");
  uint64_t v34 = &v30[*(unsigned int *)(v32 + 8)];
  *(_DWORD *)uint64_t v34 = 1;
  *((_WORD *)v34 + 2) = 270;
  *((void *)this + 59) = v30;
  *((void *)this + 60) = v29 + 40;
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v36);
  return 1;
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MeshShaderInfo>(flatbuffers::FlatBufferBuilder *result, int a2)
{
  if (a2)
  {
    int v3 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    int v4 = *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4;
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 22, v4);
  }
  return result;
}

void *AGCLLVMUserMeshShaderAnalysis::getCompilationKeyDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "");
}

uint64_t AGCLLVMUserMeshShaderAnalysis::getShaderType(AGCLLVMUserMeshShaderAnalysis *this)
{
  return 2;
}

const char *AGCLLVMUserMeshShaderAnalysis::dumpType(AGCLLVMUserMeshShaderAnalysis *this)
{
  return "mesh_analysis";
}

void AGCLLVMUserMeshShaderAnalysis::~AGCLLVMUserMeshShaderAnalysis(AGCLLVMUserMeshShaderAnalysis *this)
{
  *(void *)this = &unk_1F2576320;
  *((void *)this + 4) = &unk_1F2576410;
  int v3 = (void **)((char *)this + 3888);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v3);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 418);
  unsigned int v2 = (void *)*((void *)this + 415);
  if (v2)
  {
    *((void *)this + 416) = v2;
    operator delete(v2);
  }
  AGCLLVMObject::~AGCLLVMObject(this);
  JUMPOUT(0x1CB7A0780);
}

{
  void *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F2576320;
  *((void *)this + 4) = &unk_1F2576410;
  int v3 = (void **)((char *)this + 3888);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v3);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 418);
  unsigned int v2 = (void *)*((void *)this + 415);
  if (v2)
  {
    *((void *)this + 416) = v2;
    operator delete(v2);
  }
  AGCLLVMObject::~AGCLLVMObject(this);
}

unsigned int *AGCLLVMUserMeshShaderAnalysis::compile(AGCLLVMUserMeshShaderAnalysis *this)
{
  unsigned int v2 = (llvm::Module *)*((void *)this + 503);
  *(void *)&long long v49 = "air.mesh";
  WORD4(__p) = 259;
  uint64_t result = (unsigned int *)llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)&v49);
  if (!result) {
    return result;
  }
  uint64_t result = (unsigned int *)llvm::NamedMDNode::getOperand((llvm::NamedMDNode *)result);
  if (!result) {
    return result;
  }
  uint64_t v4 = *(void *)&result[-2 * result[2] + 4];
  unint64_t v5 = *(unsigned int *)(v4 + 8);
  if (!v5) {
    return (unsigned int *)(*(uint64_t (**)(AGCLLVMUserMeshShaderAnalysis *))(*(void *)this + 136))(this);
  }
  unint64_t v6 = 0;
  int v7 = (_DWORD *)((char *)this + 4040);
  char v8 = 1;
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = *(void *)(v4 - 8 * v5 + 8 * v6);
        if (!v9 || !isStringMDNode(*(llvm::MDString **)(v9 - 8 * *(unsigned int *)(v9 + 8) + 8), "air.mesh")) {
          goto LABEL_74;
        }
        if (v8)
        {
          uint64_t v10 = *(unsigned __int8 **)(v9 - 8 * *(unsigned int *)(v9 + 8) + 16);
          if (v10)
          {
            unint64_t v11 = *v10;
            if (v11 <= 0x22
              && ((0x7FFFFFFF0uLL >> v11) & 1) != 0
              && *((_DWORD *)v10 + 2) == 6
              && isStringMDNode(*((llvm::MDString **)v10 - 6), "air.mesh_type_info"))
            {
              uint64_t v13 = &v10[-8 * *((unsigned int *)v10 + 2)];
              __int16 v14 = (unsigned __int8 *)*((void *)v13 + 1);
              if (v14)
              {
                unint64_t v15 = *v14;
                if (v15 <= 0x22 && ((0x7FFFFFFF0uLL >> v15) & 1) != 0)
                {
                  unsigned int v17 = (unsigned __int8 *)*((void *)v13 + 2);
                  if (v17)
                  {
                    unint64_t v18 = *v17;
                    if (v18 <= 0x22 && ((0x7FFFFFFF0uLL >> v18) & 1) != 0)
                    {
                      LODWORD(v49) = 3;
                      std::string v48 = v17;
                      if (parseMDInt(0, (uint64_t)v10, (unsigned int *)&v49, (_DWORD *)this + 1009))
                      {
                        LODWORD(v49) = 4;
                        if (parseMDInt(0, (uint64_t)v10, (unsigned int *)&v49, v7))
                        {
                          BOOL v20 = parseMDPrimitiveType((uint64_t)v10, (int *)this + 1011);
                          int v21 = v48;
                          if (v20) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_64:
        char v8 = 0;
        uint64_t result = 0;
        ++v6;
        unint64_t v5 = *(unsigned int *)(v4 + 8);
        if (v6 >= v5) {
          return result;
        }
      }
      unint64_t v22 = *((unsigned int *)v14 + 2);
      if (v22)
      {
        unint64_t v23 = 0;
        uint64_t v47 = v7;
        do
        {
          uint64_t v24 = *(unsigned __int8 **)&v14[8 * v23 + -8 * v22];
          if (!v24) {
            goto LABEL_64;
          }
          unint64_t v25 = *v24;
          if (v25 > 0x22 || ((0x7FFFFFFF0uLL >> v25) & 1) == 0) {
            goto LABEL_64;
          }
          if (*((unsigned char *)this + 4033))
          {
            unint64_t v27 = 1;
            while (1)
            {
              unint64_t v28 = *((unsigned int *)v24 + 2);
              BOOL v29 = v27 >= v28;
              if (v27 >= v28) {
                break;
              }
              if (isStringMDNode(*(llvm::MDString **)&v24[8 * v27++ + -8 * v28], "air.shared"))
              {
                BOOL v29 = 0;
                break;
              }
            }
            int v7 = v47;
          }
          else
          {
            BOOL v29 = 0;
          }
          AGCLLVMUserMeshShaderAnalysis::addGenericVarying((uint64_t)this, (uint64_t)v24, 0, v29);
          ++v23;
          unint64_t v22 = *((unsigned int *)v14 + 2);
          int v21 = v48;
        }
        while (v23 < v22);
      }
      unint64_t v31 = *((unsigned int *)v21 + 2);
      if (v31) {
        break;
      }
      ++v6;
      unint64_t v5 = *(unsigned int *)(v4 + 8);
      char v8 = 1;
      if (v6 >= v5) {
        return (unsigned int *)(*(uint64_t (**)(AGCLLVMUserMeshShaderAnalysis *))(*(void *)this + 136))(this);
      }
    }
    uint64_t v45 = 0;
    char v44 = 0;
    unint64_t v32 = 0;
    while (1)
    {
      uint64_t v33 = *(unsigned __int8 **)&v21[8 * v32 + -8 * v31];
      if (!v33) {
        break;
      }
      unint64_t v34 = *v33;
      if (v34 > 0x22 || ((0x7FFFFFFF0uLL >> v34) & 1) == 0) {
        break;
      }
      if (*((unsigned char *)this + 4033))
      {
        unint64_t v46 = v32;
        uint64_t v36 = v7;
        unint64_t v37 = 1;
        while (1)
        {
          unint64_t v38 = *((unsigned int *)v33 + 2);
          BOOL v39 = v37 >= v38;
          if (v37 >= v38) {
            break;
          }
          if (isStringMDNode(*(llvm::MDString **)&v33[8 * v37++ + -8 * v38], "air.shared"))
          {
            BOOL v39 = 0;
            break;
          }
        }
        int v7 = v36;
        unint64_t v32 = v46;
      }
      else
      {
        BOOL v39 = 0;
      }
      if (AGCLLVMUserMeshShaderAnalysis::addGenericVarying((uint64_t)this, (uint64_t)v33, 1, v39))
      {
        char v44 = 1;
      }
      else
      {
        BOOL v41 = isStringMDNode(*(llvm::MDString **)&v33[-8 * *((unsigned int *)v33 + 2)], "air.primitive_id");
        BYTE4(v45) |= v41;
        BOOL v42 = v45;
        if (v41) {
          BOOL v42 = v39;
        }
        LODWORD(v45) = v42;
      }
      int v21 = v48;
      ++v32;
      unint64_t v31 = *((unsigned int *)v48 + 2);
      if (v32 >= v31)
      {
        char v8 = 1;
        goto LABEL_67;
      }
    }
    char v8 = 0;
LABEL_67:
    if ((v45 & 0x100000000) != 0 || ((*((unsigned char *)this + 4032) == 0) & v44) == 1)
    {
      long long v49 = xmmword_1CADD6310;
      int v50 = 0;
      long long __p = 0u;
      long long v52 = 0u;
      char v53 = 0;
      char v54 = v45 & 1;
      char v55 = 0;
      if (v45) {
        int v43 = 20;
      }
      else {
        int v43 = 18;
      }
      int v56 = v43;
      MEMORY[0x1CB7A04E0]();
      GenericVaryingAllocator::addVarying((uint64_t)this + 3320, (unint64_t)&v49);
      if (SBYTE7(v52) < 0) {
        operator delete((void *)__p);
      }
    }
LABEL_74:
    ++v6;
    unint64_t v5 = *(unsigned int *)(v4 + 8);
  }
  while (v6 < v5);
  if (v8) {
    return (unsigned int *)(*(uint64_t (**)(AGCLLVMUserMeshShaderAnalysis *))(*(void *)this + 136))(this);
  }
  else {
    return 0;
  }
}

BOOL parseMDPrimitiveType(uint64_t a1, int *a2)
{
  if (isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 40), "air.line"))
  {
    int v4 = 1;
  }
  else if (isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 40), "air.point"))
  {
    int v4 = 0;
  }
  else
  {
    BOOL result = isStringMDNode(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 40), "air.triangle");
    if (!result) {
      return result;
    }
    int v4 = 2;
  }
  *a2 = v4;
  return 1;
}

uint64_t AGCLLVMUserMeshShaderAnalysis::addGenericVarying(uint64_t a1, uint64_t a2, int a3, int a4)
{
  char v8 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (a3) {
    uint64_t v9 = "air.primitive_data";
  }
  else {
    uint64_t v9 = "air.vertex_data";
  }
  if (isStringMDNode(v8, v9))
  {
    unsigned int v32 = 0;
  }
  else
  {
    if (a3) {
      uint64_t v10 = "air.mesh_primitive_data";
    }
    else {
      uint64_t v10 = "air.mesh_vertex_data";
    }
    BOOL v11 = isStringMDNode(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8)), v10);
    uint64_t result = 0;
    unsigned int v32 = 0;
    if (!v11) {
      return result;
    }
  }
  LODWORD(v21) = 1;
  uint64_t result = parseMDInt(0, a2, (unsigned int *)&v21, &v32);
  if (result)
  {
    uint64_t result = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
    if (result)
    {
      if (*(unsigned char *)result)
      {
        return 0;
      }
      else
      {
        if (a3) {
          int v13 = 3;
        }
        else {
          int v13 = 0;
        }
        if (v32 < 0xFFFFFFFA) {
          int v14 = ((a3 != 0) | (2 * v32)) + 6;
        }
        else {
          int v14 = ~v32;
        }
        uint64_t v21 = 1;
        int v22 = v13;
        int v23 = 0;
        int v24 = v14;
        uint64_t v27 = 0;
        char v28 = 0;
        char v29 = a4;
        char v30 = 0;
        if (a4) {
          int v15 = 10;
        }
        else {
          int v15 = 1;
        }
        if (a4) {
          int v16 = 20;
        }
        else {
          int v16 = 18;
        }
        if (a3) {
          int v15 = v16;
        }
        int v31 = v15;
        uint64_t String = (void *)llvm::MDString::getString((llvm::MDString *)result);
        if (String)
        {
          std::string::basic_string[abi:nn180100](&v19, String, v18);
        }
        else
        {
          long long v19 = 0uLL;
          uint64_t v20 = 0;
        }
        long long __p = v19;
        uint64_t v26 = v20;
        GenericVaryingAllocator::addVarying(a1 + 3320, (unint64_t)&v21);
        if (SHIBYTE(v26) < 0) {
          operator delete((void *)__p);
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t virtual thunk to'AGCLLVMUserObjectShaderBase::needsThreadgroupMemoryOOBChecks(AGCLLVMUserObjectShaderBase *this)
{
  uint64_t v1 = (AGCLLVMUserObjectShaderBase *)((char *)this + *(void *)(*(void *)this - 216));
  if (*(unsigned char *)(*(void *)((char *)v1 + *(void *)(*(void *)v1 - 24) + 400) + 1766)) {
    return AGCLLVMUserObject::isThreadgroupMemoryUsed(v1);
  }
  else {
    return 0;
  }
}

uint64_t virtual thunk to'AGCLLVMUserMeshShader::isDMAPromotionDisabled(AGCLLVMUserMeshShader *this)
{
  return *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 208) + 4520) + 12) >> 7;
}

BOOL virtual thunk to'AGCLLVMUserMeshShader::enableSoftFaultOptimization(AGCLLVMUserMeshShader *this)
{
  return (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 200) + 4520) + 15) & 0x40) == 0;
}

uint64_t virtual thunk to'AGCLLVMUserMeshShader::getBufferBoundsCheckMode(AGCLLVMUserMeshShader *this)
{
  return (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 192) + 4520) + 12) >> 4) & 7;
}

uint64_t virtual thunk to'AGCLLVMUserMeshShader::constructReply(AGCLLVMUserMeshShader *this)
{
  return AGCLLVMUserMeshShader::constructReply((AGCLLVMUserMeshShader *)((char *)this
                                                                       + *(void *)(*(void *)this - 152)));
}

uint64_t AGCLLVMUserMeshShader::constructReply(AGCLLVMUserMeshShader *this)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  if (!AGCDeserializedReply::deserialize((AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160)))return 0; {
  AGCLLVMObject::validateBackendReply((AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24)));
  }
  int v73 = AGCLLVMUserObject::constructFlatReply(this);
  unsigned int v2 = (char *)this + *(void *)(*(void *)this - 24);
  int v3 = (flatbuffers::FlatBufferBuilder *)(v2 + 2472);
  v2[2542] = 1;
  int v4 = *((_DWORD *)v2 + 626) - *((_DWORD *)v2 + 630) + *((_DWORD *)v2 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v2 + 309, 4, *((_DWORD *)this + 1098));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 6, *((_DWORD *)this + 1099));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 8, *((_DWORD *)this + 1100));
  int v5 = flatbuffers::FlatBufferBuilder::EndTable(v3, v4);
  char v6 = *((unsigned char *)this + 5256);
  int v81 = 0;
  long long v82 = 0;
  uint64_t v83 = 0;
  v84[0] = (char *)v85;
  v84[1] = (char *)0x800000000;
  v85[64] = 0x1FFFFFFFFLL;
  char v86 = v6;
  v93[7] = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  memset(v93, 0, 26);
  char v94 = 1;
  if (*((_DWORD *)this + 1182))
  {
    unint64_t v7 = *((void *)this + 590);
    do
    {
      GenericVaryingAllocator::addVarying((uint64_t)&v81, v7);
      v7 += 64;
    }
    while (v7 < *((void *)this + 590) + ((unint64_t)*((unsigned int *)this + 1182) << 6));
  }
  GenericVaryingAllocator::allocate((GenericVaryingAllocator *)&v81, *(const AGCLLVMTargetLowerer **)((char *)this + *(void *)(*(void *)this - 24) + 400));
  GenericVaryingAllocator::serialize((GenericVaryingAllocator *)&v81, (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  if (v82 == v81) {
    char v8 = &flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
  }
  else {
    char v8 = v81;
  }
  int v9 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v8, (v82 - (unsigned char *)v81) >> 2);
  uint64_t v10 = (char *)this + *(void *)(*(void *)this - 24);
  BOOL v11 = (flatbuffers::FlatBufferBuilder *)(v10 + 2472);
  v10[2542] = 1;
  int v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v10 + 309, 4, v90);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 6, SDWORD1(v90));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, SDWORD2(v90));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 16, SDWORD1(v91));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 10, SDWORD2(v88));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 12, SHIDWORD(v88));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 14, v89);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 18, SHIDWORD(v89));
  int v13 = flatbuffers::FlatBufferBuilder::EndTable(v11, v12);
  int v14 = (char *)this + *(void *)(*(void *)this - 24);
  int v15 = (flatbuffers::FlatBufferBuilder *)(v14 + 2472);
  v14[2542] = 1;
  int v16 = *((_DWORD *)v14 + 626) - *((_DWORD *)v14 + 630) + *((_DWORD *)v14 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v14 + 309, 4, v93[0]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 6, v93[1]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 8, v93[2]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 16, v93[5]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 10, SDWORD2(v91));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 12, SHIDWORD(v91));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 14, v92);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v15, 18, SHIDWORD(v92));
  int v17 = flatbuffers::FlatBufferBuilder::EndTable(v15, v16);
  size_t v18 = (char *)this + *(void *)(*(void *)this - 24);
  long long v19 = (flatbuffers::FlatBufferBuilder *)(v18 + 2472);
  v18[2542] = 1;
  int v20 = *((_DWORD *)v18 + 626) - *((_DWORD *)v18 + 630) + *((_DWORD *)v18 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v18 + 2472), 4, v5);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 6, *((_DWORD *)this + 1150));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 8, *((_DWORD *)this + 1151));
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(v19, 10, *((char *)this + 4612));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 12, *((_DWORD *)this + 1164));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 14, *((_DWORD *)this + 1165));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 16, *((_DWORD *)this + 1160) - *((_DWORD *)this + 1166));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 18, *((_DWORD *)this + 1162));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 60, *((_DWORD *)this + 1166));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 20, *((_DWORD *)this + 1161));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 22, *((_DWORD *)this + 1163));
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v19, 24, v13);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v19, 26, v17);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 28, LOBYTE(v93[6]), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v19, 30, v9);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 32, *((unsigned __int8 *)this + 4625), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 34, *((_DWORD *)this + 1155));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 36, *((unsigned __int8 *)this + 4629), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 38, *((unsigned __int8 *)this + 4627), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 40, *((unsigned __int8 *)this + 4631), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 42, *((unsigned __int8 *)this + 4616), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 44, *((unsigned __int8 *)this + 4626), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 46, *((unsigned __int8 *)this + 4633), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 48, *((_DWORD *)this + 1092));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 50, *((unsigned __int8 *)this + 4384), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 52, *((unsigned __int8 *)this + 4632), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v19, 54, *((_DWORD *)this + 1140));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 56, *((unsigned __int8 *)this + 12), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v19, 58, *((unsigned __int8 *)this + 4385), 0);
  int v21 = flatbuffers::FlatBufferBuilder::EndTable(v19, v20);
  int v22 = (char *)this + *(void *)(*(void *)this - 24);
  int v23 = (flatbuffers::FlatBufferBuilder *)(v22 + 2472);
  v22[2542] = 1;
  LODWORD(v19) = *((_DWORD *)v22 + 626) - *((_DWORD *)v22 + 630) + *((_DWORD *)v22 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v22 + 2472), v73);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MeshShaderInfo>(v23, v21);
  int v24 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
  int v25 = flatbuffers::FlatBufferBuilder::EndTable(v23, (__int16)v19);
  flatbuffers::FlatBufferBuilder::Finish(v24, v25, v26);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  int v27 = AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(this);
  char v28 = (char *)this + *(void *)(*(void *)this - 24);
  char v29 = (flatbuffers::FlatBufferBuilder *)(v28 + 2568);
  v28[2638] = 1;
  int v30 = *((_DWORD *)v28 + 650) - *((_DWORD *)v28 + 654) + *((_DWORD *)v28 + 652);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v28 + 2568), v27);
  int v31 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 2568);
  int v32 = flatbuffers::FlatBufferBuilder::EndTable(v29, v30);
  flatbuffers::FlatBufferBuilder::Finish(v31, v32, v33);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
  uint64_t v34 = *(void *)(*(void *)this - 24);
  uint64_t v35 = (char *)this + v34;
  uint64_t v36 = (char *)this + v34 + 696;
  if (*(void *)v36)
  {
    if (*((void *)v35 + 88)) {
      unint64_t v37 = (void *)((char *)this + v34 + 696);
    }
    else {
      unint64_t v37 = v35 + 1256;
    }
  }
  else
  {
    unint64_t v37 = v35 + 1256;
  }
  BOOL v39 = (int *)(*v37 + *(unsigned int *)*v37);
  long long v40 = (unsigned int *)((char *)v39 + *(unsigned __int16 *)((char *)v39 - *v39 + 4));
  BOOL v41 = (int *)((char *)v40 + *v40);
  if (*(void *)v36)
  {
    uint64_t v42 = *((void *)v35 + 88);
    int v43 = v35 + 1256;
    if (!v42) {
      uint64_t v36 = v43;
    }
  }
  else
  {
    uint64_t v36 = v35 + 1256;
  }
  char v44 = 0;
  uint64_t v45 = (unsigned int *)((char *)v41 + *(unsigned __int16 *)((char *)v41 - *v41 + 8));
  if (*(void *)v36 && *((void *)v36 + 1)) {
    char v44 = (int *)(*(void *)v36 + **(unsigned int **)v36);
  }
  unint64_t v46 = (unsigned __int16 *)((char *)v44 - *v44);
  if (*v46 >= 5u && (uint64_t v47 = v46[2]) != 0) {
    std::string v48 = (int *)((char *)v44 + v47 + *(unsigned int *)((char *)v44 + v47));
  }
  else {
    std::string v48 = 0;
  }
  long long v49 = (unsigned __int16 *)((char *)v48 - *v48);
  if (*v49 >= 0x3Du && (uint64_t v50 = v49[30]) != 0) {
    unsigned int v51 = *(int *)((char *)v48 + v50);
  }
  else {
    unsigned int v51 = 0;
  }
  unsigned int v52 = *(unsigned int *)((char *)v45 + *v45);
  int v70 = *((_DWORD *)this + 1150);
  int v71 = *((_DWORD *)this + 1169);
  int v72 = *((_DWORD *)this + 1167);
  int v74 = *((_DWORD *)this + 1168);
  int v53 = *((_DWORD *)this + 1151);
  int v54 = *((_DWORD *)this + 1170);
  int v55 = *((_DWORD *)this + 1140);
  unsigned int v56 = *((_DWORD *)this + 1171);
  unsigned int v57 = *(_DWORD *)(*(void *)((char *)this + v34 + 400) + 908);
  if (v56 > v57)
  {
    std::to_string(&v76, v56);
    uint64_t v58 = std::string::insert(&v76, 0, "Mesh unique scalar count of ");
    std::string::size_type v59 = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    uint64_t v60 = std::string::append(&v77, " exceeds limit of ");
    std::string::size_type v61 = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v75, *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 908));
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v62 = &v75;
    }
    else {
      uint64_t v62 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v75.__r_.__value_.__l.__size_;
    }
    uint64_t v64 = std::string::append(&v78, (const std::string::value_type *)v62, size);
    std::string::size_type v65 = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    uint64_t v80 = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    if (v80 >= 0) {
      long long v66 = __p;
    }
    else {
      long long v66 = (void **)__p[0];
    }
    if (v80 >= 0) {
      std::string::size_type v67 = HIBYTE(v80);
    }
    else {
      std::string::size_type v67 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (const std::string::value_type *)v66, v67);
    if (SHIBYTE(v80) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
  }
  if (v52 > 0x20)
  {
    uint64_t v38 = 0;
  }
  else
  {
    unsigned int v68 = validateUserMeshLocalMemoryUsage(v51, ((v70 + 3) & 0xFFFFFFFC) * v72 + v53 * v74 + (v71 * ((v70 + 3) & 0xFFFFFFFC) + v54 * v53) * v55, *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 900), *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 896), *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 904), (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8));
    if (v56 <= v57) {
      uint64_t v38 = v68;
    }
    else {
      uint64_t v38 = 0;
    }
  }
  __p[0] = &v87;
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector(v84);
  if (v81)
  {
    long long v82 = v81;
    operator delete(v81);
  }
  return v38;
}

void virtual thunk to'AGCLLVMUserMeshShader::getCompilationKeyDescription(AGCLLVMUserMeshShader *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMUserMeshShader::getCompilationKeyDescription(AGCLLVMUserMeshShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v3 = (_DWORD *)*((void *)this + 565);
  std::string::basic_string[abi:nn180100]<0>(&v56, "AGCMeshContextStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v54, "mutableBuffers");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v57);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v57.__r_.__value_.__r.__words[2], (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v57.__r_.__value_.__r + *(void *)(v57.__r_.__value_.__r.__words[2] - 24) + 24) = *(_DWORD *)((char *)&v57.__r_.__value_.__r + *(void *)(v57.__r_.__value_.__r.__words[2] - 24) + 24) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v70, (const void **)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v57.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + *(void *)(v57.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v57.__r_.__value_.__r.__words[2] = v4;
  uint64_t v58 = MEMORY[0x1E4FBA470] + 16;
  if (v60 < 0) {
    operator delete(v59);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB7A0710](&v61);
  std::string::basic_string[abi:nn180100]<0>(v52, "maxTotalThreadsPerThreadgroup");
  _agcFieldString<unsigned int>(&v71, (const void **)v52, v3[5]);
  std::string::basic_string[abi:nn180100]<0>(v50, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v72, (const void **)v50, v3[3] & 1);
  std::string::basic_string[abi:nn180100]<0>(v48, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v73, (const void **)v48, (v3[3] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v46, "maxVertexAmplificationCount");
  _agcFieldString<unsigned int>(&v74, (const void **)v46, v3[4] & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v44, "manufactureUnlinkedVaryings");
  _agcFieldString<unsigned int>(&v75, (const void **)v44, (v3[4] >> 4) & 1);
  std::string::basic_string[abi:nn180100]<0>(v42, "customBorderColor");
  _agcFieldString<unsigned int>(&v76, (const void **)v42, (v3[4] >> 5) & 1);
  std::string::basic_string[abi:nn180100]<0>(v40, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v77, (const void **)v40, (v3[3] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v38, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v78, (const void **)v38, (v3[3] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v36, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v79, (const void **)v36, (v3[3] >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v34, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v80, (const void **)&v34, (v3[3] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v32, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v81, (const void **)v32, (v3[3] >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v30, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v82, (const void **)v30, (unsigned __int16)(v3[3] >> 10));
  std::string::basic_string[abi:nn180100]<0>(v28, "enableStackShadow");
  _agcFieldString<unsigned int>(&v83, (const void **)v28, (v3[3] >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v26, "bufferBoundsCheckMode");
  _agcFieldString<unsigned int>(&v84, (const void **)v26, (v3[3] >> 4) & 7);
  std::string::basic_string[abi:nn180100]<0>(v24, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v85, (const void **)v24, v3[3] >> 31);
  std::string::basic_string[abi:nn180100]<0>(v22, "addDefaultPointSize");
  _agcFieldString<unsigned int>(&v86, (const void **)v22, (v3[4] >> 6) & 1);
  std::string::basic_string[abi:nn180100]<0>(v20, "disableDMAPromotion");
  _agcFieldString<unsigned int>(&v87, (const void **)v20, (v3[3] >> 7) & 1);
  std::string::basic_string[abi:nn180100]<0>(v18, "noObjectShader");
  _agcFieldString<unsigned int>(&v88, (const void **)v18, (v3[4] >> 8) & 1);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v68, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  }
  else {
    std::string v68 = v56;
  }
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v68, 0);
  std::string::basic_string[abi:nn180100]<0>(v63, "{");
  _agcIndentedLine(&v65, (std::string::value_type *)v63, 0);
  if ((v67 & 0x80u) == 0) {
    int v5 = (const std::string::value_type *)&v65;
  }
  else {
    int v5 = (const std::string::value_type *)v65;
  }
  if ((v67 & 0x80u) == 0) {
    std::string::size_type v6 = v67;
  }
  else {
    std::string::size_type v6 = v66;
  }
  unint64_t v7 = std::string::append(&__p, v5, v6);
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((char)v67 < 0) {
    operator delete(v65);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = 0; i != 57; i += 3)
  {
    uint64_t v10 = (char *)&v70 + i * 8;
    if (SHIBYTE(v70.__r_.__value_.__r.__words[i + 2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else {
      std::string __p = *(std::string *)v10;
    }
    int v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v62, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v62 = __p;
    }
    _agcIndentedLine(&v65, (std::string::value_type *)&v62, 1);
    if ((v67 & 0x80u) == 0) {
      int v12 = (const std::string::value_type *)&v65;
    }
    else {
      int v12 = (const std::string::value_type *)v65;
    }
    if ((v67 & 0x80u) == 0) {
      std::string::size_type v13 = v67;
    }
    else {
      std::string::size_type v13 = v66;
    }
    std::string::append(&v57, v12, v13);
    if ((char)v67 < 0) {
      operator delete(v65);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v62.__r_.__value_.__l.__data_);
      if ((v11 & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v65, "}");
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v65, 0);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v14 = &v57;
  }
  else {
    int v14 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v57.__r_.__value_.__l.__size_;
  }
  int v16 = std::string::insert(&__p, 0, (const std::string::value_type *)v14, size);
  *a2 = *v16;
  v16->__r_.__value_.__r.__words[0] = 0;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v67 < 0) {
    operator delete(v65);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = 57;
  do
  {
    if (v70.__r_.__value_.__s.__data_[v17 * 8 - 1] < 0) {
      operator delete((void *)__p.__r_.__value_.__r.__words[v17 + 1]);
    }
    v17 -= 3;
  }
  while (v17 * 8);
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (v55 < 0) {
    operator delete(v54[0]);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
}

uint64_t virtual thunk to'AGCLLVMUserMeshShader::getForwardProgressMode(AGCLLVMUserMeshShader *this)
{
  return *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 128) + 4520) + 12) >> 31;
}

uint64_t virtual thunk to'AGCLLVMUserMeshShader::getShaderType(AGCLLVMUserMeshShader *this)
{
  return 2;
}

const char *virtual thunk to'AGCLLVMUserMeshShader::dumpType(AGCLLVMUserMeshShader *this)
{
  return "mesh";
}

void virtual thunk to'AGCLLVMUserMeshShader::~AGCLLVMUserMeshShader(AGCLLVMUserMeshShader *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  *(void *)uint64_t v1 = &unk_1F2576430;
  *((void *)v1 + 756) = &unk_1F2576768;
  *((void *)v1 + 760) = &unk_1F2576858;
  int v5 = (void **)(v1 + 5264);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v5);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)v1 + 590);
  unsigned int v2 = (void *)*((void *)v1 + 587);
  if (v2)
  {
    *((void *)v1 + 588) = v2;
    operator delete(v2);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 4568));
  uint64_t v3 = *((void *)v1 + 569);
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 4536));
  }
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase((AGCLLVMUserObjectShaderBase *)v1, (uint64_t *)off_1F2576868);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6048));
  JUMPOUT(0x1CB7A0780);
}

{
  char *v1;
  void *v2;
  uint64_t v3;
  void **v5;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  *(void *)uint64_t v1 = &unk_1F2576430;
  *((void *)v1 + 756) = &unk_1F2576768;
  *((void *)v1 + 760) = &unk_1F2576858;
  int v5 = (void **)(v1 + 5264);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v5);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)v1 + 590);
  unsigned int v2 = (void *)*((void *)v1 + 587);
  if (v2)
  {
    *((void *)v1 + 588) = v2;
    operator delete(v2);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 4568));
  uint64_t v3 = *((void *)v1 + 569);
  if (v3 != -8192 && v3 != -4096 && v3 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 4536));
  }
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase((AGCLLVMUserObjectShaderBase *)v1, (uint64_t *)off_1F2576868);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6048));
}

void AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase(AGCLLVMUserObjectShaderBase *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 32) = a2[8];
  uint64_t v5 = *((void *)this + 564);
  if (v5 != -8192 && v5 != -4096 && v5 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase *)((char *)this + 4496));
  }
  uint64_t v7 = *((void *)this + 561);
  if (v7 != -8192 && v7 != -4096 && v7) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase *)((char *)this + 4472));
  }
  std::string::size_type v8 = (void *)*((void *)this + 556);
  if (v8)
  {
    do
    {
      int v9 = (void *)*v8;
      AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderBase::FunctionStateCache *)(v8 + 3));
      operator delete(v8);
      std::string::size_type v8 = v9;
    }
    while (v9);
  }
  uint64_t v10 = (void *)*((void *)this + 554);
  *((void *)this + 554) = 0;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = *((void *)this + 553);
  if (v11 != -8192 && v11 != -4096 && v11) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase *)((char *)this + 4408));
  }
  AGCLLVMUserShader::~AGCLLVMUserShader(this, a2 + 1);
}

void AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache(AGCLLVMUserObjectShaderBase::FunctionStateCache *this)
{
  uint64_t v2 = *((void *)this + 38);
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 288));
  }
  uint64_t v4 = *((void *)this + 35);
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 264));
  }
  uint64_t v6 = *((void *)this + 32);
  if (v6 != -8192 && v6 != -4096 && v6 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 240));
  }
  uint64_t v8 = *((void *)this + 29);
  if (v8 != -8192 && v8 != -4096 && v8) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 216));
  }
  uint64_t v9 = *((void *)this + 26);
  if (v9 != -8192 && v9 != -4096 && v9) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 192));
  }
  uint64_t v10 = *((void *)this + 23);
  if (v10 != -8192 && v10 != -4096 && v10) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 168));
  }
  uint64_t v11 = *((void *)this + 20);
  if (v11 != -8192 && v11 != -4096 && v11) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 144));
  }
  uint64_t v12 = *((void *)this + 17);
  if (v12 != -8192 && v12 != -4096 && v12) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 120));
  }
  uint64_t v13 = *((void *)this + 14);
  if (v13 != -8192 && v13 != -4096 && v13) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 96));
  }
  uint64_t v14 = *((void *)this + 11);
  if (v14 != -8192 && v14 != -4096 && v14) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 72));
  }
  uint64_t v15 = *((void *)this + 8);
  if (v15 != -8192 && v15 != -4096 && v15) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 48));
  }
  uint64_t v16 = *((void *)this + 5);
  if (v16 != -8192 && v16 != -4096 && v16) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderBase::FunctionStateCache *)((char *)this + 24));
  }
  uint64_t v17 = *((void *)this + 2);
  if (v17 != -8192 && v17 != -4096)
  {
    if (v17) {
      llvm::ValueHandleBase::RemoveFromUseList(this);
    }
  }
}

uint64_t AGCLLVMUserObjectShaderBase::needsPayloadInvalidate(AGCLLVMUserObjectShaderBase *this)
{
  return 0;
}

uint64_t AGCLLVMUserObjectShaderBase::needsThreadgroupMemoryOOBChecks(AGCLLVMUserObjectShaderBase *this)
{
  if (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 1766)) {
    return AGCLLVMUserObject::isThreadgroupMemoryUsed(this);
  }
  else {
    return 0;
  }
}

uint64_t AGCLLVMUserObjectShaderBase::needsPCFClamp(AGCLLVMUserObjectShaderBase *this)
{
  return 0;
}

uint64_t AGCLLVMUserObjectShaderBase::getPCFStateForUnit(AGCLLVMUserObjectShaderBase *this)
{
  return 0;
}

uint64_t AGCLLVMUserObjectShaderBase::supportsConstantSamplers(AGCLLVMUserObjectShaderBase *this)
{
  return 1;
}

uint64_t AGCLLVMUserObjectShaderBase::getMaxSharedRegisters(AGCLLVMUserObjectShaderBase *this)
{
  return *(unsigned int *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 852);
}

uint64_t AGCLLVMUserObjectShaderBase::improveDMAPromotionOpportunity(AGCLLVMUserObjectShaderBase *this)
{
  return 1;
}

uint64_t AGCLLVMUserObjectShaderBase::wrapperCallingConvention(AGCLLVMUserObjectShaderBase *this)
{
  return 106;
}

uint64_t AGCLLVMUserObjectShaderBase::wrapperFunctionType(AGCLLVMUserObjectShaderBase *this)
{
  return llvm::FunctionType::get();
}

uint64_t AGCLLVMUserMeshShader::isDMAPromotionDisabled(AGCLLVMUserMeshShader *this)
{
  return *(unsigned __int8 *)(*((void *)this + 565) + 12) >> 7;
}

BOOL AGCLLVMUserMeshShader::enableSoftFaultOptimization(AGCLLVMUserMeshShader *this)
{
  return (*(unsigned char *)(*((void *)this + 565) + 15) & 0x40) == 0;
}

uint64_t AGCLLVMUserMeshShader::getForwardProgressMode(AGCLLVMUserMeshShader *this)
{
  return *(_DWORD *)(*((void *)this + 565) + 12) >> 31;
}

uint64_t AGCLLVMUserMeshShader::getBufferBoundsCheckMode(AGCLLVMUserMeshShader *this)
{
  return (*(_DWORD *)(*((void *)this + 565) + 12) >> 4) & 7;
}

uint64_t AGCLLVMUserMeshShader::getShaderType(AGCLLVMUserMeshShader *this)
{
  return 2;
}

const char *AGCLLVMUserMeshShader::dumpType(AGCLLVMUserMeshShader *this)
{
  return "mesh";
}

llvm::Type **AGCLLVMUserMeshShader::buildNumGroups(AGCLLVMUserMeshShader *this, llvm::Type *a2)
{
  uint64_t v4 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v5 = *((void *)v4 + 50);
  long long v21 = *(_OWORD *)(v4 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v22, (llvm::IRBuilderBase *)(v4 + 40));
  int v23 = *((_DWORD *)v4 + 34);
  uint64_t v6 = (llvm::Type **)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v5 + 320))(v5, &v21);
  uint64_t v7 = (llvm::Type *)llvm::PointerType::get();
  __int16 v20 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v4 + 40), v6, v7, (const llvm::Twine *)v19);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v9 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v10 = (llvm::Type *)*((void *)v9 + 29);
  uint64_t v11 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v20 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v9 + 40), v10, PointerCast, v11, (const llvm::Twine *)v19);
  uint64_t v13 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
  __int16 v20 = 257;
  uint64_t v15 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v14);
  uint64_t AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v15, (uint64_t)GEP, 0, (uint64_t)v19);
  uint64_t v17 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v20 = 257;
  return llvm::IRBuilderBase::CreateZExtOrTrunc(v17, AlignedLoad, a2, (const llvm::Twine *)v19);
}

llvm::Value *llvm::IRBuilderBase::CreatePointerCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  Pointeruint64_t Cast = (llvm::Value *)a2;
  if (*a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      Pointeruint64_t Cast = (llvm::Value *)llvm::CastInst::CreatePointerCast();
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)PointerCast, (uint64_t)a4);
    }
    else
    {
      Pointeruint64_t Cast = (llvm::Value *)(*(uint64_t (**)(void, llvm::Type **, llvm::Type *))(**((void **)this + 9)
                                                                                                  + 232))(*((void *)this + 9), a2, a3);
      if (PointerCast) {
        BOOL v7 = *((unsigned __int8 *)PointerCast + 16) >= 0x1Cu;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7) {
        llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)PointerCast, (uint64_t)a4);
      }
    }
  }
  return PointerCast;
}

llvm::Type **llvm::IRBuilderBase::CreateZExtOrTrunc(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  unsigned int v9 = llvm::Type::getScalarSizeInBits(a3);
  if (ScalarSizeInBits >= v9)
  {
    if (ScalarSizeInBits <= v9) {
      return a2;
    }
    uint64_t v10 = 38;
  }
  else
  {
    uint64_t v10 = 39;
  }
  return (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this, v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t AGCLLVMUserMeshShader::buildGlobalSize(AGCLLVMUserMeshShader *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserMeshShader *))(*(void *)this + 504))(this);
  BOOL v7 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(this, a2, a3);
  uint64_t v8 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateMul(v8, v6, v7, (const llvm::Twine *)v10);
}

uint64_t AGCLLVMUserMeshShader::needsPayloadInvalidate(AGCLLVMUserMeshShader *this)
{
  return 1;
}

uint64_t AGCLLVMUserMeshShader::usesCustomBorderColor(AGCLLVMUserMeshShader *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 565) + 16) >> 5) & 1;
}

uint64_t AGCLLVMUserMeshShader::markInvariantOutputs(AGCLLVMUserMeshShader *this)
{
  if (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_POS_INVARIANCE", v2))
  {
    BOOL v11 = MGGetBoolAnswer()
       && (uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_POS_INVARIANCE", v9)) != 0
       && *Value != 48
       && atoi(Value) != 0;
    *((unsigned char *)this + 4528) = v11;
  }
  if (*((unsigned char *)this + 4528))
  {
    if (*((unsigned char *)this + 32))
    {
      SimplifyGenericIR(*(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368), *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 378), v3, v4, v5, v6, v7, v8, (char)__p);
      uint64_t Function = llvm::Module::getFunction();
      if (Function)
      {
        uint64_t v13 = *(void *)this;
        uint64_t v14 = *(void **)((char *)this + *(void *)(*(void *)this - 24) + 368);
        std::string __p = 0;
        char v29 = 0;
        v32[0] = 0;
        v32[1] = 0;
        uint64_t v30 = 0;
        char v31 = v32;
        v32[2] = v14;
        char v33 = 0;
        uint64_t v15 = *(void *)(Function + 8);
        if (v15)
        {
          do
          {
            MarkInvariants::addSeed((uint64_t *)&__p, *(llvm::Value **)(*(void *)(v15 + 24)- 32 * (*(_DWORD *)(*(void *)(v15 + 24) + 20) & 0x7FFFFFF)+ 32), 0);
            uint64_t v15 = *(void *)(v15 + 8);
          }
          while (v15);
          uint64_t v13 = *(void *)this;
        }
        if ((MarkInvariants::markInvariant((MarkInvariants *)&__p, (llvm::Type **)((char *)this + *(void *)(v13 - 24) + 32)) & 1) == 0)
        {
          uint64_t v17 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
          uint64_t v18 = v17 + 24;
          for (uint64_t i = *(void *)(v17 + 32); i != v18; uint64_t i = *(void *)(i + 8))
          {
            uint64_t v20 = i - 56;
            if (!i) {
              uint64_t v20 = 0;
            }
            uint64_t v21 = v20 + 72;
            for (uint64_t j = *(void *)(v20 + 80); j != v21; uint64_t j = *(void *)(j + 8))
            {
              uint64_t v23 = j - 24;
              if (!j) {
                uint64_t v23 = 0;
              }
              uint64_t v24 = *(void *)(v23 + 48);
              if (v24 != v23 + 40)
              {
LABEL_40:
                while (j != v21)
                {
                  if (v24) {
                    char v25 = (llvm::Instruction *)(v24 - 24);
                  }
                  else {
                    char v25 = 0;
                  }
                  if (llvm::FPMathOperator::classof((uint64_t)v25)) {
                    llvm::Instruction::setFast(v25);
                  }
                  uint64_t v24 = *(void *)(v24 + 8);
                  uint64_t v26 = j - 24;
                  if (!j) {
                    uint64_t v26 = 0;
                  }
                  if (v24 == v26 + 40)
                  {
                    while (1)
                    {
                      uint64_t j = *(void *)(j + 8);
                      if (j == v21) {
                        goto LABEL_41;
                      }
                      uint64_t v27 = j - 24;
                      if (!j) {
                        uint64_t v27 = 0;
                      }
                      uint64_t v24 = *(void *)(v27 + 48);
                      if (v24 != v27 + 40) {
                        goto LABEL_40;
                      }
                    }
                  }
                }
                break;
              }
            }
LABEL_41:
            ;
          }
        }
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v32[0]);
        if (__p)
        {
          char v29 = __p;
          operator delete(__p);
        }
      }
    }
  }
  return 1;
}

uint64_t AGCLLVMUserMeshShader::replaceBuiltins(AGCLLVMUserMeshShader *this)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t result = AGCLLVMUserObjectShaderBase::replaceBuiltins(this);
  if (!result) {
    return result;
  }
  unsigned int v74 = result;
  uint64_t v3 = *(llvm::LLVMContext ***)((char *)this + *(void *)(*(void *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v134, *v3);
  std::string v73 = this;
  uint64_t v140 = this;
  int v134 = &unk_1F2577470;
  v139[25] = v3;
  {
    std::string::basic_string[abi:nn180100]<0>(AGCLLVMUserMeshShader::replaceBuiltins(void)::workitem_functions, "air.set_position_mesh");
    dword_1EA612AE8 = 0;
    dword_1EA612AF0 = 1;
    qword_1EA612AF8 = (uint64_t)AGCLLVMUserMeshShader::buildSetPosition;
    unk_1EA612B00 = 0;
    dword_1EA612B08 = 7;
    word_1EA612B0C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612B10, "air.set_point_size_mesh");
    dword_1EA612B28 = 0;
    dword_1EA612B30 = 1;
    qword_1EA612B38 = (uint64_t)AGCLLVMUserMeshShader::buildSetPointSize;
    unk_1EA612B40 = 0;
    dword_1EA612B48 = 7;
    word_1EA612B4C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612B50, "air.set_clip_distance_mesh");
    dword_1EA612B68 = 0;
    dword_1EA612B70 = 1;
    qword_1EA612B78 = (uint64_t)AGCLLVMUserMeshShader::buildSetClipDistance;
    unk_1EA612B80 = 0;
    dword_1EA612B88 = 9;
    word_1EA612B8C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612B90, "air.set_render_target_array_index_mesh");
    dword_1EA612BA8 = 1;
    dword_1EA612BB0 = 1;
    qword_1EA612BB8 = (uint64_t)AGCLLVMUserMeshShader::buildSetLayerId;
    unk_1EA612BC0 = 0;
    dword_1EA612BC8 = 7;
    word_1EA612BCC = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612BD0, "air.set_viewport_array_index_mesh");
    dword_1EA612BE8 = 1;
    dword_1EA612BF0 = 1;
    qword_1EA612BF8 = (uint64_t)AGCLLVMUserMeshShader::buildSetViewportId;
    unk_1EA612C00 = 0;
    dword_1EA612C08 = 7;
    word_1EA612C0C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612C10, "air.set_primitive_id_mesh");
    dword_1EA612C28 = 0;
    dword_1EA612C30 = 1;
    qword_1EA612C38 = (uint64_t)AGCLLVMUserMeshShader::buildSetPrimitiveId;
    unk_1EA612C40 = 0;
    dword_1EA612C48 = 7;
    word_1EA612C4C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612C50, "air.set_primitive_culled_mesh");
    dword_1EA612C68 = 0;
    dword_1EA612C70 = 1;
    qword_1EA612C78 = (uint64_t)AGCLLVMUserMeshShader::buildSetPrimitiveCulled;
    unk_1EA612C80 = 0;
    dword_1EA612C88 = 7;
    word_1EA612C8C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612C90, "air.set_index_mesh");
    dword_1EA612CA8 = 0;
    dword_1EA612CB0 = 1;
    qword_1EA612CB8 = (uint64_t)AGCLLVMUserMeshShader::buildSetIndex;
    unk_1EA612CC0 = 0;
    dword_1EA612CC8 = 7;
    word_1EA612CCC = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612CD0, "air.set_indices_mesh.v2i8");
    dword_1EA612CE8 = 0;
    dword_1EA612CF0 = 1;
    qword_1EA612CF8 = (uint64_t)AGCLLVMUserMeshShader::buildSetIndices;
    qword_1EA612D00 = 0;
    dword_1EA612D08 = 7;
    word_1EA612D0C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612D10, "air.set_indices_mesh.v4i8");
    dword_1EA612D28 = 0;
    dword_1EA612D30 = 1;
    qword_1EA612D38 = (uint64_t)AGCLLVMUserMeshShader::buildSetIndices;
    qword_1EA612D40 = 0;
    dword_1EA612D48 = 7;
    word_1EA612D4C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612D50, "air.set_vertex_data_mesh");
    dword_1EA612D68 = 2;
    dword_1EA612D70 = 1;
    qword_1EA612D78 = (uint64_t)AGCLLVMUserMeshShader::buildSetVertexData;
    qword_1EA612D80 = 0;
    dword_1EA612D88 = 9;
    word_1EA612D8C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612D90, "air.set_primitive_data_mesh");
    dword_1EA612DA8 = 2;
    dword_1EA612DB0 = 1;
    qword_1EA612DB8 = (uint64_t)AGCLLVMUserMeshShader::buildSetPrimitiveData;
    qword_1EA612DC0 = 0;
    dword_1EA612DC8 = 9;
    word_1EA612DCC = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612DD0, "air.set_primitive_count_mesh");
    dword_1EA612DE8 = 0;
    dword_1EA612DF0 = 1;
    qword_1EA612DF8 = (uint64_t)AGCLLVMUserMeshShader::buildSetPrimitiveCount;
    qword_1EA612E00 = 0;
    dword_1EA612E08 = 5;
    word_1EA612E0C = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612E10, "air.object_threadgroup_position_in_grid");
    dword_1EA612E28 = 0;
    dword_1EA612E30 = 1;
    qword_1EA612E38 = (uint64_t)AGCLLVMUserMeshShader::buildOSTGGridPosition;
    qword_1EA612E40 = 0;
    dword_1EA612E48 = 1;
    word_1EA612E4C = 0;
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_1CAC02000);
  }
  uint64_t v75 = 0;
  uint64_t v4 = &v93;
  do
  {
    std::string::basic_string[abi:nn180100]<0>(&__p, "");
    uint64_t v131 = (const void **)&v133;
    uint64_t v132 = 0x100000000;
    llvm::SmallVectorImpl<std::string>::append<std::string const*,void>((uint64_t)&v131, &__p, &v126);
    if ((v125[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
    std::string::basic_string[abi:nn180100]<0>(&__p, ".i8");
    std::string::basic_string[abi:nn180100]<0>(&v126, ".i16");
    std::string::basic_string[abi:nn180100]<0>(v127, ".i32");
    v129[0] = (char *)&v130;
    v129[1] = (char *)0x300000000;
    llvm::SmallVectorImpl<std::string>::append<std::string const*,void>((uint64_t)v129, &__p, v128);
    for (uint64_t i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v127[i + 2]) < 0) {
        operator delete((void *)v127[i]);
      }
    }
    std::string::basic_string[abi:nn180100]<0>(v100, ".i1");
    std::string::basic_string[abi:nn180100]<0>(&v100[3], ".i8");
    std::string::basic_string[abi:nn180100]<0>(v102, ".i16");
    std::string::basic_string[abi:nn180100]<0>(v103, ".i32");
    std::string::basic_string[abi:nn180100]<0>(v104, ".f16");
    std::string::basic_string[abi:nn180100]<0>(v105, ".f32");
    std::string::basic_string[abi:nn180100]<0>(v106, ".v2i1");
    std::string::basic_string[abi:nn180100]<0>(v107, ".v2i8");
    std::string::basic_string[abi:nn180100]<0>(v108, ".v2i16");
    std::string::basic_string[abi:nn180100]<0>(v109, ".v2i32");
    std::string::basic_string[abi:nn180100]<0>(v110, ".v2f16");
    std::string::basic_string[abi:nn180100]<0>(v111, ".v2f32");
    std::string::basic_string[abi:nn180100]<0>(v112, ".v3i1");
    std::string::basic_string[abi:nn180100]<0>(v113, ".v3i8");
    std::string::basic_string[abi:nn180100]<0>(v114, ".v3i16");
    std::string::basic_string[abi:nn180100]<0>(v115, ".v3i32");
    std::string::basic_string[abi:nn180100]<0>(v116, ".v3f16");
    std::string::basic_string[abi:nn180100]<0>(v117, ".v3f32");
    std::string::basic_string[abi:nn180100]<0>(v118, ".v4i1");
    std::string::basic_string[abi:nn180100]<0>(v119, ".v4i8");
    std::string::basic_string[abi:nn180100]<0>(v120, ".v4i16");
    std::string::basic_string[abi:nn180100]<0>(v121, ".v4i32");
    std::string::basic_string[abi:nn180100]<0>(v122, ".v4f16");
    std::string::basic_string[abi:nn180100]<0>(v123, ".v4f32");
    *(void *)&long long __p = v125;
    *((void *)&__p + 1) = 0x1800000000;
    llvm::SmallVectorImpl<std::string>::append<std::string const*,void>((uint64_t)&__p, (long long *)v100, &__p);
    uint64_t v6 = 72;
    do
    {
      if (SHIBYTE(v100[v6 - 1]) < 0) {
        operator delete((void *)v98[v6 + 2]);
      }
      v6 -= 3;
    }
    while (v6 * 8);
    uint64_t v7 = &AGCLLVMUserMeshShader::replaceBuiltins(void)::workitem_functions[64 * v75];
    int v8 = *((_DWORD *)v7 + 6);
    if (v8 == 1)
    {
      p_p = (long long *)v129;
      goto LABEL_18;
    }
    if (v8 == 2)
    {
      p_p = &__p;
LABEL_18:
      llvm::SmallVectorImpl<std::string>::operator=((uint64_t)&v131, (uint64_t)p_p);
    }
    if (!v132) {
      goto LABEL_137;
    }
    uint64_t v10 = v131;
    std::string v79 = (char *)&v131[3 * v132];
    BOOL v11 = &AGCLLVMUserMeshShader::replaceBuiltins(void)::workitem_functions[64 * v75];
    std::string v81 = v11 + 32;
    std::string v83 = (uint64_t *)(v11 + 48);
    std::string v84 = (const char **)(v11 + 40);
    std::string v76 = v11 + 61;
    std::string v85 = v11 + 60;
    std::string v86 = v11 + 56;
    do
    {
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v90, (const void **)v7, v10);
      uint64_t Function = llvm::Module::getFunction();
      if (!Function) {
        goto LABEL_134;
      }
      std::string v80 = (llvm::Function *)Function;
      if (*v86 == 12)
      {
        uint64_t v16 = *(void *)(Function + 8);
        while (v16)
        {
          uint64_t v17 = *(void *)(v16 + 24);
          uint64_t v16 = *(void *)(v16 + 8);
          uint64_t v18 = *v84;
          char v19 = (void *)((char *)v140 + (*v83 >> 1));
          if (*v83) {
            uint64_t v18 = *(const char **)(*v19 + v18);
          }
          ((void (*)(void *, uint64_t))v18)(v19, v17);
        }
        goto LABEL_133;
      }
      if (*v86 == 11)
      {
        uint64_t v13 = v10;
        uint64_t v14 = (char *)*v84;
        if (*v84)
        {
          size_t v15 = strlen(*v84);
          v100[0] = &v100[3];
          *(_OWORD *)&v100[1] = xmmword_1CADD6290;
          llvm::SmallVectorImpl<char>::append<char const*,void>(v100, v14, &v14[v15]);
        }
        else
        {
          v100[2] = (void *)64;
          v100[0] = &v100[3];
          v100[1] = 0;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(v100, ".", "");
        uint64_t v10 = v13;
        if (v100[2] < v100[1]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        if (v100[0] != &v100[3]) {
          free(v100[0]);
        }
        goto LABEL_133;
      }
      uint64_t v20 = **(void **)(*(void *)(Function + 24) + 16);
      BOOL v21 = (*(_DWORD *)(v20 + 8) & 0xFE) != 0x12 || *v76 == 0;
      int v22 = !v21;
      std::string v78 = v10;
      if (v21) {
        uint64_t v23 = 1;
      }
      else {
        uint64_t v23 = *(unsigned int *)(v20 + 32);
      }
      uint64_t v87 = v23;
      int v77 = v137;
      uint64_t v24 = *(void *)(Function + 8);
      if (v24)
      {
        do
        {
          char v25 = *(llvm::Instruction **)(v24 + 24);
          uint64_t v82 = *(void *)(v24 + 8);
          if (*v81 == 1)
          {
            int v26 = 0;
          }
          else
          {
            if (*v81 != 2) {
              goto LABEL_46;
            }
            int v26 = 121;
          }
          int v137 = v26;
LABEL_46:
          llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v135, v25);
          uint64_t v27 = llvm::UndefValue::get();
          if (v87)
          {
            uint64_t v28 = 0;
            while (1)
            {
              std::string v88 = (llvm::Value *)v27;
              uint64_t v89 = v28;
              char v29 = v4;
              v102[0] = 0;
              long long v101 = 0u;
              memset(v100, 0, sizeof(v100));
              unint64_t v30 = llvm::CallBase::arg_end(v25) - (void)v25 + 32 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF);
              if ((v30 & 0x1FFFFFFFE0) != 0)
              {
                uint64_t v31 = (v30 >> 5);
                int v32 = v100;
                char v33 = v25;
                do
                {
                  uint64_t v34 = (llvm::Value **)((char *)v33 - 32 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF));
                  char v35 = *v34;
                  *int v32 = *v34;
                  if (v22 && (*(_DWORD *)(*(void *)v35 + 8) & 0xFE) == 0x12)
                  {
                    __int16 v99 = 257;
                    uint64_t v36 = (llvm::Value *)llvm::ConstantInt::get();
                    *int v32 = (void *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v135, v35, v36, (const llvm::Twine *)v98);
                  }
                  ++v32;
                  char v33 = (llvm::Instruction *)((char *)v33 + 32);
                  --v31;
                }
                while (v31);
              }
              if (*v85)
              {
                char v37 = *(llvm::Type **)v100[0];
                uint64_t v4 = v29;
                if ((*(_DWORD *)(*(void *)v100[0] + 8) & 0xFE) == 0x12) {
                  char v37 = (llvm::Type *)**((void **)v37 + 2);
                }
                v98[0] = llvm::Type::getPrimitiveSizeInBits(v37);
                v98[1] = v38;
                if (llvm::TypeSize::operator unsigned long long() == 32)
                {
                  int v39 = 0;
                }
                else
                {
                  long long v40 = (llvm::Type *)v139[4];
                  if ((*(_DWORD *)(*(void *)v100[0] + 8) & 0xFE) == 0x12) {
                    long long v40 = (llvm::Type *)llvm::FixedVectorType::get();
                  }
                  if ((v30 & 0x1FFFFFFFE0) != 0)
                  {
                    uint64_t v41 = (v30 >> 5);
                    uint64_t v42 = v100;
                    do
                    {
                      char v43 = (llvm::Value *)*v42;
                      __int16 v99 = 257;
                      *v42++ = (void *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v135, v43, v40, (const llvm::Twine *)v98);
                      --v41;
                    }
                    while (v41);
                  }
                  int v39 = 1;
                }
              }
              else
              {
                int v39 = 0;
                uint64_t v4 = v29;
              }
              if (llvm::FPMathOperator::classof((uint64_t)v25)) {
                unsigned int FastMathFlags = llvm::Instruction::getFastMathFlags(v25);
              }
              else {
                unsigned int FastMathFlags = 0;
              }
              char v45 = (char *)v140 + *(void *)(*(void *)v140 - 24);
              long long v95 = v136[2];
              llvm::IRBuilderBase::getCurrentDebugLocation(&v96, (llvm::IRBuilderBase *)v135);
              int v97 = v137;
              AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v95, (uint64_t)(v45 + 40));
              if (v96) {
                llvm::MetadataTracking::untrack();
              }
              switch(*v86)
              {
                case 1:
                  unint64_t v46 = *v84;
                  char v47 = (void *)((char *)v140 + (*v83 >> 1));
                  if (*v83) {
                    unint64_t v46 = *(const char **)(*v47 + v46);
                  }
                  uint64_t v61 = ((uint64_t (*)(void *))v46)(v47);
                  goto LABEL_112;
                case 2:
                  char v55 = *v84;
                  std::string v56 = *(llvm::Type **)v25;
                  std::string v57 = (void *)((char *)v140 + (*v83 >> 1));
                  if (*v83) {
                    goto LABEL_87;
                  }
                  goto LABEL_88;
                case 3:
                  char v55 = *v84;
                  std::string v56 = (llvm::Type *)v100[0];
                  std::string v57 = (void *)((char *)v140 + (*v83 >> 1));
                  if ((*v83 & 1) == 0) {
                    goto LABEL_88;
                  }
LABEL_87:
                  char v55 = *(const char **)(*v57 + v55);
LABEL_88:
                  uint64_t v61 = ((uint64_t (*)(void *, llvm::Type *))v55)(v57, v56);
                  goto LABEL_112;
                case 4:
                  uint64_t v58 = (unsigned int *)((char *)v100[0] + 24);
                  if (*((_DWORD *)v100[0] + 8) >= 0x41u) {
                    uint64_t v58 = *(unsigned int **)v58;
                  }
                  uint64_t v50 = (void *)*v58;
                  std::string v48 = *v84;
                  char v49 = *(llvm::Type **)v25;
                  char v51 = (void *)((char *)v140 + (*v83 >> 1));
                  if (*v83) {
                    std::string v48 = *(const char **)(*v51 + v48);
                  }
                  goto LABEL_97;
                case 5:
                  std::string v48 = *v84;
                  char v49 = (llvm::Type *)v100[0];
                  uint64_t v50 = v100[1];
                  char v51 = (void *)((char *)v140 + (*v83 >> 1));
                  if (*v83) {
                    std::string v48 = *(const char **)(*v51 + v48);
                  }
LABEL_97:
                  uint64_t v61 = ((uint64_t (*)(void *, llvm::Type *, void *))v48)(v51, v49, v50);
                  goto LABEL_112;
                case 6:
                  std::string v62 = *v84;
                  long long v63 = (void **)v100[0];
                  char v64 = (const char *)v100[1];
                  std::string::size_type v65 = (void *)((char *)v140 + (*v83 >> 1));
                  if (*v83) {
                    std::string v62 = *(const char **)(*v65 + v62);
                  }
                  unint64_t v66 = FastMathFlags;
                  goto LABEL_111;
                case 7:
                  std::string v62 = *v84;
                  long long v63 = (void **)v100[0];
                  char v64 = (const char *)v100[1];
                  unint64_t v66 = (unint64_t)v100[2];
                  std::string::size_type v65 = (void *)((char *)v140 + (*v83 >> 1));
                  if ((*v83 & 1) == 0) {
                    goto LABEL_111;
                  }
                  uint64_t v61 = (*(uint64_t (**)(void *, void *, void *, void *))(*v65 + v62))(v65, v100[0], v100[1], v100[2]);
                  goto LABEL_112;
                case 8:
                  unsigned int v52 = *v84;
                  char v53 = (llvm::Type *)v100[0];
                  std::string::size_type v59 = (void **)v100[1];
                  char v60 = (const char *)v100[2];
                  int v54 = (void *)((char *)v140 + (*v83 >> 1));
                  if (*v83) {
                    unsigned int v52 = *(const char **)(*v54 + v52);
                  }
                  uint64_t v68 = FastMathFlags;
                  goto LABEL_103;
                case 9:
                  std::string v62 = *v84;
                  std::string::size_type v65 = (void *)((char *)v140 + (*v83 >> 1));
                  if (*v83) {
                    std::string v62 = *(const char **)(*v65 + v62);
                  }
                  long long v63 = v100;
                  char v64 = "";
                  unint64_t v66 = 0;
LABEL_111:
                  uint64_t v61 = ((uint64_t (*)(void *, void **, const char *, unint64_t))v62)(v65, v63, v64, v66);
                  goto LABEL_112;
                case 0xA:
                  unsigned int v52 = *v84;
                  char v53 = *(llvm::Type **)v25;
                  int v54 = (void *)((char *)v140 + (*v83 >> 1));
                  if (*v83) {
                    unsigned int v52 = *(const char **)(*v54 + v52);
                  }
                  std::string::size_type v59 = v100;
                  char v60 = "";
                  uint64_t v68 = 0;
LABEL_103:
                  uint64_t v61 = ((uint64_t (*)(void *, llvm::Type *, void **, const char *, uint64_t))v52)(v54, v53, v59, v60, v68);
LABEL_112:
                  FPTrunc = (llvm::Value *)v61;
                  break;
                default:
                  FPTrunc = 0;
                  break;
              }
              int v69 = (char *)v140 + *(void *)(*(void *)v140 - 24);
              long long v92 = *(_OWORD *)(v69 + 88);
              llvm::IRBuilderBase::getCurrentDebugLocation(v4, (llvm::IRBuilderBase *)(v69 + 40));
              int v94 = *((_DWORD *)v69 + 34);
              AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v92, (uint64_t)v135);
              if (v93) {
                llvm::MetadataTracking::untrack();
              }
              if (v39) {
                break;
              }
              uint64_t v71 = v89;
              if (v22) {
                goto LABEL_122;
              }
LABEL_123:
              uint64_t v28 = v71 + 1;
              uint64_t v27 = (uint64_t)FPTrunc;
              if (v28 == v87) {
                goto LABEL_124;
              }
            }
            std::string v70 = *(llvm::Type **)v25;
            if (v22 && (*((_DWORD *)v70 + 2) & 0xFE) == 0x12) {
              std::string v70 = (llvm::Type *)**((void **)v70 + 2);
            }
            uint64_t v71 = v89;
            __int16 v99 = 257;
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v135, FPTrunc, v70, (const llvm::Twine *)v98);
            if (!v22) {
              goto LABEL_123;
            }
LABEL_122:
            __int16 v99 = 257;
            std::string v72 = (llvm::Value *)llvm::ConstantInt::get();
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v135, v88, FPTrunc, v72, (const llvm::Twine *)v98);
            goto LABEL_123;
          }
LABEL_124:
          if (*(void *)v25 != v139[1]) {
            llvm::Value::replaceAllUsesWith();
          }
          llvm::Instruction::eraseFromParent(v25);
          uint64_t v24 = v82;
        }
        while (v82);
      }
      int v137 = v77;
      uint64_t v7 = &AGCLLVMUserMeshShader::replaceBuiltins(void)::workitem_functions[64 * v75];
      uint64_t v10 = v78;
LABEL_133:
      llvm::Function::eraseFromParent(v80);
LABEL_134:
      if (v91 < 0) {
        operator delete(v90);
      }
      v10 += 3;
    }
    while (v10 != (const void **)v79);
LABEL_137:
    llvm::SmallVector<std::string,24u>::~SmallVector((char **)&__p);
    llvm::SmallVector<std::string,24u>::~SmallVector(v129);
    llvm::SmallVector<std::string,24u>::~SmallVector((char **)&v131);
    ++v75;
  }
  while (v75 != 14);
  AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(v73, 7, 3);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v139);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v138);
  if (v135[0] != v136) {
    free(v135[0]);
  }
  return v74;
}

void llvm::SmallVectorImpl<std::string>::append<std::string const*,void>(uint64_t a1, long long *a2, long long *a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3);
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v4 + v5 > *(unsigned int *)(a1 + 12)) {
    llvm::SmallVectorTemplateBase<std::string,false>::grow();
  }
  std::uninitialized_copy[abi:nn180100]<std::string const*,std::string*>(a2, a3, (std::string *)(*(void *)a1 + 24 * v5));
  *(_DWORD *)(a1 + 8) += v4;
}

uint64_t llvm::SmallVectorImpl<std::string>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        int v8 = *(const std::string **)a2;
        unsigned int v9 = *(std::string **)a1;
        uint64_t v10 = 24 * v4;
        do
        {
          std::string::operator=(v9++, v8++);
          v10 -= 24;
        }
        while (v10);
        BOOL v11 = *(std::string **)a1;
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        BOOL v11 = *(std::string **)a1;
        unsigned int v9 = *(std::string **)a1;
      }
      for (uint64_t i = &v11[v5]; i != v9; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(i[-1].__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        if (v5)
        {
          uint64_t v6 = *(std::string **)a1;
          uint64_t v7 = v5;
          do
          {
            if (SHIBYTE(v6[v7 - 1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v6[v7 - 1].__r_.__value_.__l.__data_);
            }
            --v7;
          }
          while (v7 * 24);
        }
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorTemplateBase<std::string,false>::grow();
      }
      if (v5)
      {
        uint64_t v12 = *(const std::string **)a2;
        uint64_t v13 = *(std::string **)a1;
        uint64_t v14 = 24 * v5;
        do
        {
          std::string::operator=(v13++, v12++);
          v14 -= 24;
        }
        while (v14);
      }
      else
      {
        uint64_t v5 = 0;
      }
      std::uninitialized_copy[abi:nn180100]<std::string const*,std::string*>((long long *)(*(void *)a2 + 24 * v5), (long long *)(*(void *)a2 + 24 * *(unsigned int *)(a2 + 8)), (std::string *)(*(void *)a1 + 24 * v5));
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

char **llvm::SmallVector<std::string,24u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    do
    {
      if (v2[v4 - 1] < 0) {
        operator delete(*(void **)&v2[v4 - 24]);
      }
      v4 -= 24;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<std::string,false>::grow()
{
}

void std::uninitialized_copy[abi:nn180100]<std::string const*,std::string*>(long long *a1, long long *a2, std::string *this)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v6 = *v5;
        this->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
      }
      uint64_t v5 = (long long *)((char *)v5 + 24);
      ++this;
    }
    while (v5 != a2);
  }
}

uint64_t AGCLLVMUserMeshShader::buildOSTGGridPosition(AGCLLVMUserMeshShader *this)
{
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v3 = (llvm::Type *)*((void *)v2 + 27);
  uint64_t v4 = *((void *)v2 + 50);
  long long v16 = *(_OWORD *)(v2 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v17, (llvm::IRBuilderBase *)(v2 + 40));
  int v18 = *((_DWORD *)v2 + 34);
  uint64_t v5 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v4 + 320))(v4, &v16);
  long long v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v15 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v2 + 40), v3, v5, v6, (const llvm::Twine *)v14);
  int v8 = (llvm::Type *)llvm::PointerType::get();
  v13[16] = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v2 + 40), GEP, v8, (const llvm::Twine *)v13);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v10 = (char *)this + *(void *)(*(void *)this - 24);
  BOOL v11 = (llvm::Type *)*((void *)v10 + 38);
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v10 + 5, v11, (uint64_t)PointerCast, 0, (uint64_t)v14);
}

uint64_t AGCLLVMUserMeshShader::buildSetPrimitiveCount(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v5 = (char *)this + *(void *)(*(void *)this - 24);
  long long v6 = (uint64_t *)(v5 + 40);
  uint64_t v7 = *((void *)v5 + 28);
  __int16 v12 = 257;
  uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(v5 + 40), 38, (uint64_t)a3, v7, (uint64_t)v11);
  uint64_t PrimCountPointer = AGCLLVMUserMeshShader::getPrimCountPointer(this, a2);
  llvm::IRBuilderBase::CreateAlignedStore(v6, Cast, PrimCountPointer, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::getPrimCountPointer(AGCLLVMUserMeshShader *this, llvm::Type **a2)
{
  uint64_t v3 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v4 = (llvm::Type *)*((void *)this + 541);
  __int16 v11 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v3, a2, v4, (const llvm::Twine *)v10);
  long long v6 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v7 = (llvm::Type *)*((void *)v6 + 28);
  int v8 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v6 + 40), v7, PointerCast, v8, (const llvm::Twine *)v10);
}

uint64_t AGCLLVMUserMeshShader::buildSetPrimitiveData(AGCLLVMUserObjectShaderBase *this, uint64_t a2)
{
  uint64_t v4 = *(llvm::Type ***)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v5 = (void *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u) {
    uint64_t v5 = (void *)*v5;
  }
  unsigned int v6 = *(_DWORD *)v5;
  uint64_t v7 = *(llvm::Value **)(a2 + 16);
  int v8 = *(llvm::Value **)(a2 + 24);
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
  return AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, v4, 1, v6, v7, v8, VertexAmpId);
}

uint64_t AGCLLVMUserMeshShader::buildSetVaryingData(uint64_t a1, llvm::Type **a2, int a3, unsigned int a4, llvm::Value *a5, llvm::Value *a6, llvm::Value *a7)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  int v8 = ((a3 != 0) | (2 * a4)) + 6;
  if (a4 >= 0xFFFFFFFA) {
    int v8 = ~a4;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 4728);
  if (v9)
  {
    uint64_t v13 = *(void *)(a1 + 4720);
    uint64_t v14 = v9 << 6;
    while (*(_DWORD *)(v13 + 16) != v8)
    {
      v13 += 64;
      v14 -= 64;
      if (!v14) {
        goto LABEL_7;
      }
    }
    *(_OWORD *)std::string v62 = 0u;
    long long v63 = 0u;
    unsigned int v16 = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)(*(void *)(*(void *)a1 - 24) + a1 + 32), a6, v62);
    unsigned int v17 = v16;
    uint64_t v18 = *(void *)v62[0];
    char v19 = (void *)(*(void *)(*(void *)a1 - 24) + a1);
    if (*(void *)v62[0] == v19[26] || v18 == v19[27] || v18 == v19[28])
    {
      uint64_t v18 = v19[29];
      if (v16)
      {
        uint64_t v20 = v62;
        unsigned int v54 = v16;
        uint64_t v21 = v16;
        do
        {
          uint64_t v22 = *(void *)(*(void *)a1 - 24);
          uint64_t v23 = (uint64_t)*v20;
          uint64_t v24 = *(void *)(v22 + a1 + 200 + 32);
          __int16 v61 = 257;
          *v20++ = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v22 + a1 + 40, 39, v23, v24, (uint64_t)v60);
          --v21;
        }
        while (v21);
        unsigned int v17 = v54;
      }
    }
    BasePointer = AGCLLVMUserMeshShader::getBasePointer((void *)a1, a2, a3, *(_DWORD *)(v13 + 60), v18, a7);
    int v26 = (llvm::Type *)v18;
    if (a3 == 1)
    {
      uint64_t v27 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
      uint64_t v28 = v18;
      uint64_t v29 = llvm::ConstantInt::get();
      unsigned int v30 = v17;
      uint64_t v31 = *(void *)(*(void *)a1 - 24) + a1 + 40;
      VertexAmpCount = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpCount((AGCLLVMUserObjectShaderBase *)a1, v32);
      uint64_t v34 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v61 = 257;
      char v35 = (llvm::IRBuilderBase *)v31;
      unsigned int v17 = v30;
      uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v35, VertexAmpCount, v34, (const llvm::Twine *)v60);
      __int16 v59 = 257;
      char v37 = (llvm::Value *)v29;
      int v26 = (llvm::Type *)v28;
      uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v27, v37, Mul, (const llvm::Twine *)v58);
      int v39 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
      __int16 v61 = 257;
      a5 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v39, a5, Add, (const llvm::Twine *)v60);
    }
    if (v17)
    {
      for (uint64_t i = 0;
            i != v17;
            llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(*(void *)(*(void *)a1 - 24) + a1 + 40), (llvm::Type **)v62[i++], GEP, 0))
      {
        if (*(unsigned char *)(v13 + 56))
        {
          uint64_t v41 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
          uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
          __int16 v61 = 257;
          char v43 = v26;
          uint64_t v44 = llvm::IRBuilderBase::CreateMul(v41, a5, v42, (const llvm::Twine *)v60);
          char v45 = (llvm::Value *)llvm::ConstantInt::get();
          __int16 v59 = 257;
          unint64_t v46 = (llvm::Value *)v44;
          int v26 = v43;
          char v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v41, v46, v45, (const llvm::Twine *)v58);
          __int16 v57 = 257;
          std::string v48 = (const llvm::Twine *)&v56;
          char v49 = v41;
          uint64_t v50 = v43;
        }
        else
        {
          char v51 = (llvm::IRBuilderBase *)(*(void *)(*(void *)a1 - 24) + a1 + 40);
          unsigned int v52 = (llvm::Value *)llvm::ConstantInt::get();
          __int16 v61 = 257;
          char v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v51, a5, v52, (const llvm::Twine *)v60);
          __int16 v59 = 257;
          std::string v48 = (const llvm::Twine *)v58;
          char v49 = v51;
          uint64_t v50 = v26;
        }
        uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v49, v50, BasePointer, v47, v48);
      }
    }
    return llvm::UndefValue::get();
  }
  else
  {
LABEL_7:
    return llvm::UndefValue::get();
  }
}

llvm::Value *AGCLLVMUserMeshShader::getBasePointer(void *a1, llvm::Type **a2, int a3, unsigned int a4, uint64_t a5, llvm::Value *a6)
{
  __int16 v11 = (llvm::Type *)llvm::PointerType::get();
  __int16 v12 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v13 = *(void *)(*a1 - 24);
  if (a3)
  {
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = *(void *)((char *)a1 + v13 + 400);
    long long v30 = *(_OWORD *)((char *)a1 + v13 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v31, (llvm::IRBuilderBase *)((char *)a1 + v13 + 40));
    int v32 = *((_DWORD *)v14 + 34);
    Pointeruint64_t Cast = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v15 + 328))(v15, &v30);
    if (v31) {
      llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    __int16 v34 = 257;
    Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)((char *)a1 + v13 + 40), a2, v11, (const llvm::Twine *)v33);
  }
  uint64_t v17 = (uint64_t)&a1[3 * a4 + 678];
  uint64_t v18 = *(llvm::Value **)v17;
  if (!*(unsigned char *)(v17 + 12)) {
    a6 = (llvm::Value *)llvm::ConstantInt::get();
  }
  char v19 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v20 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  __int16 v34 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v20, a6, v19, (const llvm::Twine *)v33);
  __int16 v29 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v20, v18, Mul, (const llvm::Twine *)v28);
  uint64_t v23 = (char *)a1 + *(void *)(*a1 - 24);
  uint64_t v24 = (llvm::Type *)*((void *)v23 + 27);
  __int16 v34 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v23 + 40), v24, PointerCast, Add, (const llvm::Twine *)v33);
  int v26 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  __int16 v34 = 257;
  return llvm::IRBuilderBase::CreatePointerCast(v26, GEP, v12, (const llvm::Twine *)v33);
}

uint64_t AGCLLVMUserMeshShader::buildSetVertexData(AGCLLVMUserObjectShaderBase *this, uint64_t a2)
{
  uint64_t v4 = *(llvm::Type ***)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v5 = (void *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u) {
    uint64_t v5 = (void *)*v5;
  }
  unsigned int v6 = *(_DWORD *)v5;
  uint64_t v7 = *(llvm::Value **)(a2 + 16);
  int v8 = *(llvm::Value **)(a2 + 24);
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
  return AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, v4, 0, v6, v7, v8, VertexAmpId);
}

uint64_t AGCLLVMUserMeshShader::buildSetIndices(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Type **a4)
{
  int v8 = *a4;
  uint64_t v9 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v10 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v19 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v10, a2, v9, (const llvm::Twine *)v18);
  __int16 v12 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v13 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v19 = 257;
  UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v12, a3, v13, (const llvm::Twine *)v18);
  uint64_t v15 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v19 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v15, v8, PointerCast, UDiv, (const llvm::Twine *)v18);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), a4, GEP, 0);
  return llvm::UndefValue::get();
}

uint64_t llvm::IRBuilderBase::CreateUDiv(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 9) + 104))(*((void *)this + 9));
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t AGCLLVMUserMeshShader::buildSetIndex(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Type **a4)
{
  BOOL v7 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  int v8 = (llvm::Type *)*((void *)this + 540);
  __int16 v15 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v7, a2, v8, (const llvm::Twine *)v14);
  uint64_t v10 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v11 = (llvm::Type *)*((void *)v10 + 27);
  __int16 v15 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v10 + 40), v11, PointerCast, a3, (const llvm::Twine *)v14);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), a4, GEP, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetPrimitiveCulled(llvm::Type **this, llvm::Type **a2, llvm::Value *a3, llvm::Value *a4)
{
  BuiltinPointer = (llvm::Type **)AGCLLVMUserMeshShader::getBuiltinPointer((AGCLLVMUserObjectShaderBase *)this, a2, 0x17u, 0, a3, *(llvm::Type **)((char *)this + *((void *)*this - 3) + 232));
  BOOL v7 = (char *)this + *((void *)*this - 3);
  uint64_t v8 = *((void *)v7 + 27);
  __int16 v23 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v7 + 40), 39, (uint64_t)a4, v8, (uint64_t)v22);
  uint64_t v10 = (llvm::IRBuilderBase *)((char *)this + *((void *)*this - 3) + 40);
  __int16 v23 = 257;
  __int16 v11 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl(v10, Cast, v11, (const llvm::Twine *)v22);
  uint64_t v13 = (char *)this + *((void *)*this - 3);
  uint64_t v14 = (llvm::Type *)*((void *)v13 + 27);
  __int16 v15 = (llvm::IRBuilderBase *)(v13 + 40);
  unsigned int v16 = this[540];
  __int16 v23 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v13 + 40), BuiltinPointer, v16, (const llvm::Twine *)v22);
  uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
  v21[16] = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v15, v14, PointerCast, v18, (const llvm::Twine *)v21);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *((void *)*this - 3) + 40), Shl, GEP, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::getBuiltinPointer(AGCLLVMUserObjectShaderBase *a1, llvm::Type **a2, unsigned int a3, uint64_t a4, llvm::Value *a5, llvm::Type *a6)
{
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(a1);
  BasePointer = AGCLLVMUserMeshShader::getBasePointer(a1, a2, 0, a3, (uint64_t)a6, VertexAmpId);
  uint64_t v13 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v19 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v13, a5, v14, (const llvm::Twine *)v18);
  unsigned int v16 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  __int16 v19 = 257;
  return llvm::IRBuilderBase::CreateGEP(v16, a6, BasePointer, Add, (const llvm::Twine *)v18);
}

uint64_t AGCLLVMUserMeshShader::buildSetPrimitiveId(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Value *a4)
{
  if (*((unsigned char *)this + 4634))
  {
    VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, a2, 1, 0xFFFFFFFF, a3, a4, VertexAmpId);
  }
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetViewportId(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v8 = (char *)this + 4405;
  uint64_t v9 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v10 = *((void *)v9 + 29);
  __int16 v41 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v9 + 40), 39, (uint64_t)a4, v10, (uint64_t)v40);
  if (*v8)
  {
    __int16 v12 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
    VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    VpLayerIdOffsetPointer = (llvm::Type **)AGCLLVMUserMeshShader::getVpLayerIdOffsetPointer(this, a2, VertexAmpId);
    __int16 v41 = 257;
    unsigned int v16 = AGCLLVMBuilder::tryDeducePointeeType(VpLayerIdOffsetPointer, v15);
    uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v12 + 5, v16, (uint64_t)VpLayerIdOffsetPointer, 0, (uint64_t)v40);
    uint64_t v18 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v19 = (llvm::IRBuilderBase *)(v18 + 40);
    uint64_t v20 = *((void *)v18 + 29);
    __int16 v41 = 257;
    uint64_t v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v18 + 40), 39, AlignedLoad, v20, (uint64_t)v40);
    __int16 v39 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v19, Cast, v21, (const llvm::Twine *)v38);
  }
  if (v8[225])
  {
    uint64_t v22 = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, a2, 1, 0xFFFFFFFD, a3, Cast, v22);
  }
  BuiltinPointer = (llvm::Type **)AGCLLVMUserMeshShader::getBuiltinPointer(this, a2, 0x17u, 0, a3, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232));
  uint64_t v24 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v25 = llvm::ConstantInt::get();
  __int16 v41 = 257;
  llvm::IRBuilderBase::CreateICmp(v24, 37, (llvm::CmpInst **)Cast, v25, (uint64_t)v40);
  llvm::ConstantInt::get();
  __int16 v39 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  uint64_t v27 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v28 = *((void *)v27 + 27);
  __int16 v41 = 257;
  __int16 v29 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(v27 + 40), 38, Select, v28, (uint64_t)v40);
  long long v30 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v31 = (llvm::Type *)*((void *)v30 + 27);
  int v32 = (llvm::IRBuilderBase *)(v30 + 40);
  char v33 = (llvm::Type *)*((void *)this + 540);
  __int16 v41 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v30 + 40), BuiltinPointer, v33, (const llvm::Twine *)v40);
  char v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v39 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v32, v31, PointerCast, v35, (const llvm::Twine *)v38);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v29, GEP, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::getVpLayerIdOffsetPointer(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v5 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v6 = (llvm::Type *)*((void *)this + 541);
  __int16 v18 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v5, a2, v6, (const llvm::Twine *)v17);
  uint64_t v8 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v18 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v8, a3, v9, (const llvm::Twine *)v17);
  __int16 v11 = (llvm::Value *)llvm::ConstantInt::get();
  unsigned char v16[16] = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v8, Mul, v11, (const llvm::Twine *)v16);
  uint64_t v13 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v14 = (llvm::Type *)*((void *)v13 + 28);
  __int16 v18 = 257;
  return llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v13 + 40), v14, PointerCast, Add, (const llvm::Twine *)v17);
}

uint64_t AGCLLVMUserMeshShader::buildSetLayerId(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v8 = (char *)this + 4405;
  uint64_t v9 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v10 = *((void *)v9 + 29);
  __int16 v37 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v9 + 40), 39, (uint64_t)a4, v10, (uint64_t)v36);
  if (*v8)
  {
    __int16 v12 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24));
    VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    VpLayerIdOffsetPointer = (llvm::Type **)AGCLLVMUserMeshShader::getVpLayerIdOffsetPointer(this, a2, VertexAmpId);
    __int16 v37 = 257;
    unsigned int v16 = AGCLLVMBuilder::tryDeducePointeeType(VpLayerIdOffsetPointer, v15);
    uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v12 + 5, v16, (uint64_t)VpLayerIdOffsetPointer, 0, (uint64_t)v36);
    __int16 v18 = (char *)this + *(void *)(*(void *)this - 24);
    __int16 v19 = (llvm::IRBuilderBase *)(v18 + 40);
    uint64_t v20 = *((void *)v18 + 29);
    __int16 v37 = 257;
    uint64_t v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v18 + 40), 39, AlignedLoad, v20, (uint64_t)v36);
    __int16 v35 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v19, Cast, v21, (const llvm::Twine *)&v34);
  }
  if (v8[223])
  {
    uint64_t v22 = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    AGCLLVMUserMeshShader::buildSetVaryingData((uint64_t)this, a2, 1, 0xFFFFFFFC, a3, Cast, v22);
  }
  BuiltinPointer = (llvm::Type **)AGCLLVMUserMeshShader::getBuiltinPointer(this, a2, 0x17u, 0, a3, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232));
  uint64_t v24 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v25 = llvm::ConstantInt::get();
  __int16 v37 = 257;
  llvm::IRBuilderBase::CreateICmp(v24, 37, (llvm::CmpInst **)Cast, v25, (uint64_t)v36);
  llvm::ConstantInt::get();
  __int16 v35 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  uint64_t v27 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v28 = *((void *)v27 + 28);
  __int16 v37 = 257;
  __int16 v29 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(v27 + 40), 38, Select, v28, (uint64_t)v36);
  long long v30 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v31 = (llvm::Type *)*((void *)this + 541);
  __int16 v37 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v30, BuiltinPointer, v31, (const llvm::Twine *)v36);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v29, (uint64_t)PointerCast, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetClipDistance(AGCLLVMUserObjectShaderBase *a1, uint64_t a2)
{
  uint64_t v4 = *(llvm::Type ***)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = (unsigned int *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u) {
    uint64_t v6 = *(unsigned int **)v6;
  }
  BOOL v7 = *(llvm::Type ***)(a2 + 24);
  uint64_t BuiltinPointer = AGCLLVMUserMeshShader::getBuiltinPointer(a1, v4, 0x19u, *v6, *(llvm::Value **)(a2 + 16), *(llvm::Type **)((char *)a1 + *(void *)(*(void *)a1 - 24) + 200));
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40), v7, BuiltinPointer, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetPointSize(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Type **a4)
{
  uint64_t BuiltinPointer = AGCLLVMUserMeshShader::getBuiltinPointer(this, a2, 0x16u, 0, a3, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 200));
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), a4, BuiltinPointer, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::buildSetPosition(AGCLLVMUserMeshShader *this, llvm::Type **a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memset(v13, 0, sizeof(v13));
  BOOL v7 = (char *)this + 168;
  unsigned int v8 = AGCLLVMBuilder::unboxVector((AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 32), a4, (llvm::Value **)v13);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v8;
    do
    {
      uint64_t BuiltinPointer = AGCLLVMUserMeshShader::getBuiltinPointer(this, a2, 0, v9, a3, *(llvm::Type **)&v7[*(void *)(*(void *)this - 24) + 32]);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), *((llvm::Type ***)v13 + v9++), BuiltinPointer, 0);
    }
    while (v10 != v9);
  }
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShader::setupShaderInputs(AGCLLVMUserMeshShader *this)
{
  uint64_t v280 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 22);
  uint64_t v3 = *(void *)(v2 + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v239 = v4;
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v2);
    uint64_t v6 = *((void *)this + 22);
    uint64_t v5 = *(void *)(v2 + 88);
    if (*(_WORD *)(v6 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    }
    uint64_t v2 = v6;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 88);
  }
  uint64_t v243 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
  if (v5 == v243)
  {
LABEL_322:
    AGCLLVMUserObjectShaderBase::setupShaderInputs(this);
    return 1;
  }
  uint64_t v234 = (int32x2_t *)((char *)this + 5316);
  BOOL v7 = (char *)this + 4405;
  uint64_t v242 = (char *)this + 4668;
  BOOL v241 = (char *)this + 4676;
  BOOL v240 = (_DWORD *)((char *)this + 4684);
  uint64_t v233 = (_DWORD *)((char *)this + 4620);
  unsigned int v8 = (unsigned int *)((char *)this + 4568);
  char v248 = (AGCLLVMUserMeshShader *)((char *)this + 4696);
  uint64_t v237 = (char *)this + 8;
  BOOL v238 = (char *)this + 368;
  uint64_t v9 = (char *)this + 5424;
  int v236 = (char *)this + 4656;
  uint64_t v235 = (char *)this + 192;
  uint64_t v249 = (char *)this + 5424;
  do
  {
    uint64_t v10 = *(void *)(*((void *)this + 11) + 8 * *(unsigned int *)(v5 + 32));
    if (*(void *)(v5 + 8)) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      int v12 = 1;
      goto LABEL_283;
    }
    uint64_t v13 = *(void *)(v239 + 40);
    if (v13) {
      uint64_t v14 = (llvm::Instruction *)(v13 - 24);
    }
    else {
      uint64_t v14 = 0;
    }
    AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v14, *((void *)this + 6));
    BOOL v15 = isStringMDNode(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8), "air.mesh");
    uint64_t v16 = v10 - 8 * *(unsigned int *)(v10 + 8);
    uint64_t v247 = v5;
    if (!v15)
    {
      int v12 = 1;
      if (isStringMDNode(*(llvm::MDString **)(v16 + 8), "air.amplification_id"))
      {
        uint64_t v27 = (llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32);
        VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
        AGCLLVMBuilder::truncateToSmall(v27, VertexAmpId, *(llvm::Type **)v5);
        llvm::Value::replaceAllUsesWith();
        v7[160] = 1;
      }
      goto LABEL_283;
    }
    uint64_t v17 = *(unsigned __int8 **)(v16 + 16);
    if (!v17)
    {
      uint64_t v24 = 0;
      goto LABEL_45;
    }
    unint64_t v18 = *v17;
    BOOL v19 = v18 > 0x22 || ((0x7FFFFFFF0uLL >> v18) & 1) == 0;
    if (v19 || *((_DWORD *)v17 + 2) != 6 || !isStringMDNode(*((llvm::MDString **)v17 - 6), "air.mesh_type_info"))
    {
      uint64_t v24 = 0;
      goto LABEL_45;
    }
    uint64_t v20 = &v17[-8 * *((unsigned int *)v17 + 2)];
    uint64_t v21 = (unsigned __int8 *)*((void *)v20 + 1);
    if (!v21) {
      goto LABEL_39;
    }
    unint64_t v22 = *v21;
    if (v22 > 0x22 || ((0x7FFFFFFF0uLL >> v22) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v24 = (unsigned __int8 *)*((void *)v20 + 2);
    if (v24)
    {
      unint64_t v25 = *v24;
      if (v25 <= 0x22 && ((0x7FFFFFFF0uLL >> v25) & 1) != 0)
      {
        LODWORD(v259[0]) = 3;
        if (parseMDInt(0, (uint64_t)v17, (unsigned int *)v259, (_DWORD *)this + 1150))
        {
          LODWORD(v259[0]) = 4;
          if (parseMDInt(0, (uint64_t)v17, (unsigned int *)v259, (_DWORD *)this + 1151))
          {
            BOOL v219 = parseMDPrimitiveType((uint64_t)v17, (int *)this + 1153);
            *((_DWORD *)this + 1152) = (*((_DWORD *)this + 1150) + 3) & 0xFFFFFFFC;
            if (v219)
            {
              unint64_t v220 = *((unsigned int *)v21 + 2);
              if (!v220)
              {
                int v29 = 1;
                goto LABEL_320;
              }
              uint64_t v221 = 0;
              while (1)
              {
                uint64_t v222 = *(unsigned __int8 **)&v21[8 * v221 + -8 * v220];
                if (!v222) {
                  break;
                }
                unint64_t v223 = *v222;
                if (v223 > 0x22 || ((0x7FFFFFFF0uLL >> v223) & 1) == 0) {
                  break;
                }
                uint64_t v246 = v221;
                if (*v7)
                {
                  unint64_t v225 = 1;
                  while (1)
                  {
                    unint64_t v226 = *((unsigned int *)v222 + 2);
                    BOOL v227 = v225 >= v226;
                    if (v225 >= v226) {
                      break;
                    }
                    if (isStringMDNode(*(llvm::MDString **)&v222[8 * v225++ + -8 * v226], "air.shared")) {
                      goto LABEL_300;
                    }
                  }
                }
                else
                {
LABEL_300:
                  BOOL v227 = 0;
                }
                AGCLLVMUserObjectShaderBase::accumulateAPIMeshSize((uint64_t)v222, 0, (uint64_t)v242, (uint64_t)v241, v240);
                if ((AGCLLVMUserMeshShader::addGenericVarying((uint64_t)this, (uint64_t)v222, 0, v227) & 1) == 0)
                {
                  if (isStringMDNode(*(llvm::MDString **)&v222[-8 * *((unsigned int *)v222 + 2)], "air.position"))
                  {
                    v7[211] = v227;
                    unint64_t v229 = *((unsigned int *)v222 + 2);
                    if (v229 >= 2)
                    {
                      unint64_t v230 = 1;
                      while (!isStringMDNode(*(llvm::MDString **)&v222[8 * v230 + -8 * v229], "air.invariant"))
                      {
                        ++v230;
                        unint64_t v229 = *((unsigned int *)v222 + 2);
                        if (v230 >= v229) {
                          goto LABEL_302;
                        }
                      }
                      v7[123] = 1;
                    }
                  }
                  else if (isStringMDNode(*(llvm::MDString **)&v222[-8 * *((unsigned int *)v222 + 2)], "air.point_size"))
                  {
                    v7[220] = 1;
                    v7[221] = v227;
                  }
                  else
                  {
                    if (!isStringMDNode(*(llvm::MDString **)&v222[-8 * *((unsigned int *)v222 + 2)], "air.clip_distance"))break; {
                    *uint64_t v233 = 1;
                    }
                    v7[219] = v227;
                    LODWORD(v259[0]) = 1;
                    if (*((_DWORD *)v222 + 2) >= 2u)
                    {
                      do
                      {
                        if (parseMDInt("air.clip_distance_array_size", (uint64_t)v222, (unsigned int *)v259, v233)) {
                          break;
                        }
                        ++LODWORD(v259[0]);
                      }
                      while (LODWORD(v259[0]) < *((_DWORD *)v222 + 2));
                    }
                  }
                }
LABEL_302:
                uint64_t v221 = v246 + 1;
                unint64_t v220 = *((unsigned int *)v21 + 2);
                int v29 = 1;
                if (v246 + 1 >= v220) {
                  goto LABEL_320;
                }
              }
            }
            int v29 = 0;
LABEL_320:
            uint64_t v9 = (char *)this + 5424;
            goto LABEL_46;
          }
        }
        goto LABEL_40;
      }
LABEL_39:
      uint64_t v24 = 0;
    }
LABEL_40:
    uint64_t v9 = (char *)this + 5424;
LABEL_45:
    int v29 = 0;
    *((_DWORD *)this + 1152) = (*((_DWORD *)this + 1150) + 3) & 0xFFFFFFFC;
LABEL_46:
    if (v7[211]) {
      BOOL v30 = 1;
    }
    else {
      BOOL v30 = v7[219] != 0;
    }
    v7[219] = v30;
    v7[211] = v30;
    if (!v29)
    {
      int v244 = 0;
      goto LABEL_78;
    }
    unint64_t v31 = *((unsigned int *)v24 + 2);
    if (!v31)
    {
      int v244 = 1;
      goto LABEL_78;
    }
    unint64_t v32 = 0;
    while (1)
    {
      char v33 = *(unsigned __int8 **)&v24[8 * v32 + -8 * v31];
      if (!v33) {
        break;
      }
      unint64_t v34 = *v33;
      if (v34 > 0x22 || ((0x7FFFFFFF0uLL >> v34) & 1) == 0) {
        break;
      }
      if (*v7)
      {
        unint64_t v36 = 1;
        while (1)
        {
          unint64_t v37 = *((unsigned int *)v33 + 2);
          BOOL v38 = v36 >= v37;
          if (v36 >= v37) {
            break;
          }
          if (isStringMDNode(*(llvm::MDString **)&v33[8 * v36++ + -8 * v37], "air.shared")) {
            goto LABEL_61;
          }
        }
      }
      else
      {
LABEL_61:
        BOOL v38 = 0;
      }
      AGCLLVMUserObjectShaderBase::accumulateAPIMeshSize((uint64_t)v33, 1u, (uint64_t)v242, (uint64_t)v241, v240);
      if (AGCLLVMUserMeshShader::addGenericVarying((uint64_t)this, (uint64_t)v33, 1, v38)) {
        goto LABEL_70;
      }
      if (isStringMDNode(*(llvm::MDString **)&v33[-8 * *((unsigned int *)v33 + 2)], "air.render_target_array_index"))
      {
        v7[222] = 1;
LABEL_69:
        v7[228] |= v38;
        goto LABEL_70;
      }
      if (isStringMDNode(*(llvm::MDString **)&v33[-8 * *((unsigned int *)v33 + 2)], "air.viewport_array_index"))
      {
        v7[224] = 1;
        goto LABEL_69;
      }
      if (isStringMDNode(*(llvm::MDString **)&v33[-8 * *((unsigned int *)v33 + 2)], "air.primitive_culled"))
      {
        v7[226] = 1;
        goto LABEL_69;
      }
      if (!isStringMDNode(*(llvm::MDString **)&v33[-8 * *((unsigned int *)v33 + 2)], "air.primitive_id")) {
        break;
      }
      v7[230] = 1;
      v7[231] = v38;
LABEL_70:
      ++v32;
      unint64_t v31 = *((unsigned int *)v24 + 2);
      if (v32 >= v31)
      {
        int v244 = 1;
        goto LABEL_77;
      }
    }
    int v244 = 0;
LABEL_77:
    uint64_t v9 = (char *)this + 5424;
LABEL_78:
    uint64_t v40 = 0;
    char v262 = v7[231];
    char v266 = v7[228];
    char v270 = v266;
    char v274 = *v7;
    v259[0] = "agc.per_prim.primitive_address";
    v259[1] = 0xFFFFFFFE00000000;
    char v260 = 0;
    v261[0] = (char *)this + 4637;
    v261[1] = "agc.per_prim.primitive_id";
    v261[2] = 0xFFFFFFFF00000001;
    uint64_t v263 = (char *)this + 4634;
    std::string::size_type v264 = "air.render_target_array_index";
    unint64_t v265 = 0xFFFFFFFC00000001;
    unsigned int v267 = (char *)this + 4628;
    uint64_t v268 = "air.viewport_array_index";
    unint64_t v269 = 0xFFFFFFFD00000001;
    unint64_t v271 = (char *)this + 4630;
    uint64_t v272 = "air.amplification_id";
    unint64_t v273 = 0xFFFFFFFB00000000;
    uint64_t v275 = (char *)this + 4566;
    uint64_t v276 = "air.amplification_count";
    unint64_t v277 = 0xFFFFFFFA00000001;
    char v278 = 0;
    int v279 = (char *)this + 4564;
    do
    {
      uint64_t v41 = v259[v40];
      int v42 = v259[v40 + 1];
      unsigned int v43 = HIDWORD(v259[v40 + 1]);
      int v44 = LOBYTE(v259[v40 + 2]);
      if (v41) {
        strlen((const char *)v259[v40]);
      }
      int Key = llvm::StringMapImpl::FindKey();
      if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 1144))
      {
        char v52 = 0;
      }
      else
      {
        char v53 = v7;
        unsigned int v54 = *(llvm **)(*(void *)v8 + 8 * Key);
        char v55 = v8;
        unsigned int v56 = *((_DWORD *)v54 + 2);
        __int16 v57 = v55;
        llvm::StringMapImpl::RemoveKey();
        llvm::deallocate_buffer(v54, (void *)(*(void *)v54 + 17));
        if (v43 >= 0xFFFFFFFA) {
          int v58 = ~v43;
        }
        else {
          int v58 = ((v42 != 0) | (2 * v43)) + 6;
        }
        GenericVarying::GenericVarying((uint64_t)__dst, HIBYTE(v56) & 0x7F, BYTE2(v56), v56 & 0xF, BYTE1(v56), v58, v44 != 0);
        MEMORY[0x1CB7A04E0](&v255[4], v41);
        GenericVaryingAllocator::addVarying((uint64_t)v248, (unint64_t)__dst);
        if ((v255[27] & 0x80000000) != 0) {
          operator delete(*(void **)&v255[4]);
        }
        char v52 = 1;
        unsigned int v8 = v57;
        BOOL v7 = v53;
        uint64_t v9 = (char *)this + 5424;
      }
      *(unsigned char *)v261[v40] = v52;
      v40 += 4;
    }
    while (v40 != 24);
    if (v7[222])
    {
      BOOL v59 = 1;
      uint64_t v5 = v247;
      int v12 = v244;
    }
    else
    {
      uint64_t v5 = v247;
      int v12 = v244;
      if (v7[224]) {
        BOOL v59 = 1;
      }
      else {
        BOOL v59 = v7[226] != 0;
      }
    }
    v7[227] = v59;
    if (v7[162])
    {
      uint64_t v60 = *((void *)this + 590);
      uint64_t v61 = *((unsigned int *)this + 1182);
      if (v61 >= 2)
      {
        uint64_t v62 = v60 + 64;
        uint64_t v63 = (v61 << 6) - 64;
        do
        {
          if (*(_DWORD *)(v60 + 16) < *(_DWORD *)(v62 + 16)) {
            uint64_t v60 = v62;
          }
          v62 += 64;
          v63 -= 64;
        }
        while (v63);
      }
      uint64_t v64 = *((unsigned int *)this + 1144);
      if (v64)
      {
        for (uint64_t i = (uint64_t *)*((void *)this + 571); !*i || *i == -8; ++i)
          ;
      }
      else
      {
        uint64_t i = (uint64_t *)*((void *)this + 571);
      }
      uint64_t v67 = *((void *)this + 571) + 8 * v64;
      if (i != (uint64_t *)v67)
      {
        int v68 = *(_DWORD *)(v60 + 16);
        uint64_t v69 = *i;
        do
        {
          unsigned int v70 = *(_DWORD *)(v69 + 8);
          *(_DWORD *)std::string __dst = HIBYTE(v70) & 0x7F;
          *(_DWORD *)&__dst[4] = BYTE2(v70);
          ++v68;
          *(_DWORD *)&__dst[8] = v70 & 0xF;
          *(_DWORD *)&__dst[12] = BYTE1(v70);
          *(_DWORD *)&__dst[16] = v68;
          memset(&v255[4], 0, 32);
          BOOL v256 = BYTE2(v70) == 1;
          __int16 v257 = 0;
          switch(v70 & 0xF)
          {
            case 0u:
              if (BYTE2(v70) == 1) {
                int v71 = 5;
              }
              else {
                int v71 = 1;
              }
              goto LABEL_129;
            case 1u:
              if (BYTE2(v70) == 1) {
                int v71 = 6;
              }
              else {
                int v71 = 2;
              }
              goto LABEL_129;
            case 2u:
              if (BYTE2(v70) == 1) {
                int v71 = 7;
              }
              else {
                int v71 = 3;
              }
              goto LABEL_129;
            case 3u:
              if (BYTE2(v70) == 1) {
                int v71 = 19;
              }
              else {
                int v71 = 18;
              }
              goto LABEL_129;
            case 5u:
              if (BYTE2(v70) == 1) {
                int v71 = 8;
              }
              else {
                int v71 = 4;
              }
LABEL_129:
              int v258 = v71;
              break;
            default:
              break;
          }
          MEMORY[0x1CB7A04E0](&v255[4], v69 + 16);
          GenericVaryingAllocator::addVarying((uint64_t)v248, (unint64_t)__dst);
          if ((v255[27] & 0x80000000) != 0) {
            operator delete(*(void **)&v255[4]);
          }
          do
          {
            uint64_t v72 = i[1];
            ++i;
            uint64_t v69 = v72;
            if (v72) {
              BOOL v73 = v69 == -8;
            }
            else {
              BOOL v73 = 1;
            }
          }
          while (v73);
        }
        while (i != (uint64_t *)v67);
      }
      llvm::StringMap<unsigned int,llvm::MallocAllocator>::clear(v8);
      uint64_t v5 = v247;
      uint64_t v9 = (char *)this + 5424;
      int v12 = v244;
    }
    if (*((_DWORD *)this + 1145))
    {
      printMessage((char **)&AGCPrinter, "Following fragment input(s) mismatching mesh shader output type(s) or not written by mesh shader: ", v46, v47, v48, v49, v50, v51, v232);
      uint64_t v74 = *((unsigned int *)this + 1144);
      if (v74)
      {
        uint64_t v75 = (size_t **)*((void *)this + 571);
        std::string v76 = (char *)this + 8;
        while (!*v75 || *v75 + 1 == 0)
          ++v75;
      }
      else
      {
        uint64_t v75 = (size_t **)*((void *)this + 571);
        std::string v76 = (char *)this + 8;
      }
      uint64_t v78 = *((void *)this + 571) + 8 * v74;
      if (v75 != (size_t **)v78)
      {
        std::string v79 = *v75;
        do
        {
          std::string::basic_string[abi:nn180100](__dst, v79 + 2, *v79);
          if (v255[3] >= 0) {
            std::string v86 = __dst;
          }
          else {
            LOBYTE(v86) = __dst[0];
          }
          printMessage((char **)&AGCPrinter, "\t%s", v80, v81, v82, v83, v84, v85, (char)v86);
          if ((v255[3] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          do
          {
            uint64_t v87 = v75[1];
            ++v75;
            std::string v79 = v87;
            if (v87) {
              BOOL v88 = v79 + 1 == 0;
            }
            else {
              BOOL v88 = 1;
            }
          }
          while (v88);
        }
        while (v75 != (size_t **)v78);
      }
      uint64_t v89 = *((unsigned int *)this + 1144);
      if (v89)
      {
        for (uint64_t j = *((void *)this + 571); !*(void *)j || *(void *)j == -8; j += 8)
          ;
      }
      else
      {
        uint64_t j = *((void *)this + 571);
      }
      uint64_t v92 = *((void *)this + 571) + 8 * v89;
      if (j != v92)
      {
        uint64_t v93 = "";
        do
        {
          std::string::append((std::string *)&v76[*(void *)(*(void *)this - 24)], v93);
          std::string::basic_string[abi:nn180100](&v252, (void *)(*(void *)j + 16), **(void **)j);
          attribute_name((std::string *)__dst, &v252);
          if (v255[3] >= 0) {
            int v94 = __dst;
          }
          else {
            int v94 = *(const std::string::value_type **)__dst;
          }
          if (v255[3] >= 0) {
            std::string::size_type v95 = v255[3];
          }
          else {
            std::string::size_type v95 = *(void *)&__dst[8];
          }
          std::string::append((std::string *)&v76[*(void *)(*(void *)this - 24)], v94, v95);
          if ((v255[3] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v252.__r_.__value_.__l.__data_);
          }
          do
          {
            uint64_t v97 = *(void *)(j + 8);
            j += 8;
            uint64_t v96 = v97;
            if (v97) {
              BOOL v98 = v96 == -8;
            }
            else {
              BOOL v98 = 1;
            }
          }
          while (v98);
          uint64_t v93 = ",";
        }
        while (j != v92);
      }
      int v12 = 0;
      uint64_t v5 = v247;
    }
    GenericVaryingAllocator::allocate(v248, *(const AGCLLVMTargetLowerer **)&v238[*(void *)(*(void *)this - 24) + 32]);
    int v245 = v12;
    if (v12)
    {
      bzero(v9, 0x270uLL);
      *(void *)&v255[16] = 0;
      *(_OWORD *)&__dst[4] = 0u;
      *(_OWORD *)int v255 = 0u;
      int v99 = *((_DWORD *)this + 1151);
      *(_DWORD *)std::string __dst = 4 * v99;
      *(_WORD *)&__dst[4] = *(_WORD *)(v7 + 227);
      int v100 = *((_DWORD *)this + 1152);
      *(_DWORD *)&__dst[8] = 23;
      *(_DWORD *)&__dst[12] = 16 * v100;
      __dst[16] = 1;
      __dst[17] = v7[211];
      *(_DWORD *)&v255[4] = 4 * v100;
      v255[8] = v7[220];
      v255[9] = __dst[17];
      int v101 = *((_DWORD *)this + 1155);
      *(_DWORD *)&v255[12] = 22;
      *(void *)&v255[16] = (4 * v100 * v101);
      *(_DWORD *)&v255[20] = v101 != 0;
      v255[21] = v7[219];
      *(_DWORD *)&v255[24] = 25;
      int v102 = *((_DWORD *)this + 1153);
      if (v102 == 1) {
        int v103 = 2;
      }
      else {
        int v103 = 1;
      }
      if (v102 == 2) {
        int v104 = 3;
      }
      else {
        int v104 = v103;
      }
      unsigned int v105 = (v104 * v99 + 15) & 0xFFFFFFF0;
      *((_DWORD *)this + 1172) = v105;
      *((_DWORD *)this + 1166) = v105;
      unsigned int v106 = v105 + 16;
      if (*v7)
      {
        *((_DWORD *)this + 1354) = v106;
        v106 += (4 * *((_DWORD *)this + 1140) + 15) & 0xFFFFFFF0;
      }
      for (uint64_t k = 0; k != 48; k += 12)
      {
        unsigned int v108 = (int *)&__dst[k];
        if (__dst[k + 5]) {
          BOOL v109 = 1;
        }
        else {
          BOOL v109 = __dst[k + 4] == 0;
        }
        if (!v109)
        {
          int v110 = *v108;
          int v111 = v108[2];
          if (v111 != 26)
          {
            uint64_t v112 = llvm::ConstantInt::get();
            uint64_t v113 = &v9[24 * v111];
            *(void *)uint64_t v113 = v112;
            v113[12] = 0;
          }
          v106 += (v110 + 15) & 0xFFFFFFF0;
        }
      }
      for (uint64_t m = 0; m != 128; m += 16)
      {
        int v115 = *((_DWORD *)this + 1152);
        uint64_t v116 = (char *)this + 4 * *(unsigned int *)&byte_1CADD6970[m + 4];
        uint64_t v117 = (unsigned int *)(v116 + 5312);
        if (byte_1CADD6970[m]) {
          BOOL v118 = v7[851] == 0;
        }
        else {
          BOOL v118 = 1;
        }
        if (v118)
        {
          unint64_t v119 = v116 + 5288;
          if (byte_1CADD6970[m]) {
            uint64_t v120 = v117;
          }
          else {
            uint64_t v120 = (unsigned int *)v119;
          }
          unsigned int v121 = *v120;
        }
        else
        {
          unsigned int v121 = (*v117 + 1) >> 1;
        }
        int v122 = *(_DWORD *)&byte_1CADD6970[m + 8];
        if (v122 != 26)
        {
          uint64_t v123 = llvm::ConstantInt::get();
          int v124 = &v249[24 * v122];
          *(void *)int v124 = v123;
          v124[12] = 0;
        }
        v106 += (4 * v115 * v121 + 15) & 0xFFFFFFF0;
      }
      uint64_t v125 = 0;
      int v126 = 0;
      *((_DWORD *)this + 1160) = v106;
      do
      {
        uint64_t v127 = (int *)&__dst[v125];
        if (__dst[v125 + 5]) {
          BOOL v128 = __dst[v125 + 4] == 0;
        }
        else {
          BOOL v128 = 1;
        }
        if (!v128)
        {
          int v129 = *v127;
          int v130 = v127[2];
          if (v130 != 26)
          {
            uint64_t v131 = llvm::ConstantInt::get();
            uint64_t v132 = &v249[24 * v130];
            *(void *)uint64_t v132 = v131;
            v132[12] = 1;
          }
          v126 += (v129 + 15) & 0xFFFFFFF0;
        }
        v125 += 12;
      }
      while (v125 != 48);
      for (uint64_t n = 0; n != 128; n += 16)
      {
        int v134 = *((_DWORD *)this + 1152);
        std::string::size_type v135 = (char *)this + 4 * *(unsigned int *)&byte_1CADD6970[n + 4];
        uint64_t v136 = (unsigned int *)(v135 + 5360);
        if (byte_1CADD6970[n]) {
          BOOL v137 = v7[851] == 0;
        }
        else {
          BOOL v137 = 1;
        }
        if (v137)
        {
          uint64_t v138 = v135 + 5336;
          if (byte_1CADD6970[n]) {
            int v139 = v136;
          }
          else {
            int v139 = (unsigned int *)v138;
          }
          unsigned int v140 = *v139;
        }
        else
        {
          unsigned int v140 = (*v136 + 1) >> 1;
        }
        int v141 = *(_DWORD *)&byte_1CADD6970[n + 12];
        if (v141 != 26)
        {
          uint64_t v142 = llvm::ConstantInt::get();
          uint64_t v143 = &v249[24 * v141];
          *(void *)uint64_t v143 = v142;
          v143[12] = 1;
        }
        v126 += (4 * v134 * v140 + 15) & 0xFFFFFFF0;
      }
      char v144 = 0;
      uint64_t v145 = 0;
      int v146 = 0;
      *((_DWORD *)this + 1162) = v126;
      uint64_t v9 = (char *)this + 5424;
      do
      {
        char v147 = v144;
        if (byte_1CADD6A98[16 * v145]) {
          BOOL v148 = v7[851] == 0;
        }
        else {
          BOOL v148 = 1;
        }
        if (v148)
        {
          uint64_t v149 = (char *)this + 5300;
          if (byte_1CADD6A98[16 * v145]) {
            uint64_t v149 = (char *)this + 5324;
          }
          unsigned int v150 = *(_DWORD *)v149;
        }
        else
        {
          unsigned int v150 = (*((_DWORD *)this + 1331) + 1) >> 1;
        }
        int v151 = *(_DWORD *)&byte_1CADD6A98[16 * v145 + 8];
        if (v151 != 26)
        {
          uint64_t v152 = llvm::ConstantInt::get();
          int v153 = &v249[24 * v151];
          *(void *)int v153 = v152;
          v153[12] = 0;
        }
        v146 += 4 * v150;
        char v144 = 1;
        uint64_t v145 = 1;
      }
      while ((v147 & 1) == 0);
      char v154 = 0;
      uint64_t v155 = 0;
      int v156 = 0;
      *((_DWORD *)this + 1161) = v146;
      do
      {
        char v157 = v154;
        if (byte_1CADD6A98[16 * v155]) {
          BOOL v158 = v7[851] == 0;
        }
        else {
          BOOL v158 = 1;
        }
        if (v158)
        {
          uint64_t v159 = (char *)this + 5372;
          if (!byte_1CADD6A98[16 * v155]) {
            uint64_t v159 = (char *)this + 5348;
          }
          unsigned int v160 = *(_DWORD *)v159;
        }
        else
        {
          unsigned int v160 = (*((_DWORD *)this + 1343) + 1) >> 1;
        }
        int v161 = *(_DWORD *)&byte_1CADD6A98[16 * v155 + 12];
        if (v161 != 26)
        {
          uint64_t v162 = llvm::ConstantInt::get();
          uint64_t v163 = &v249[24 * v161];
          *(void *)uint64_t v163 = v162;
          v163[12] = 1;
        }
        v156 += 4 * v160;
        char v154 = 1;
        uint64_t v155 = 1;
      }
      while ((v157 & 1) == 0);
      *((_DWORD *)this + 1163) = v156;
      *((_DWORD *)this + 1360) = 4;
      int v164 = v7[851];
      *((_DWORD *)this + 1366) = *((_DWORD *)this + 1322);
      *((_DWORD *)this + 1372) = *((_DWORD *)this + 1323);
      *((_DWORD *)this + 1378) = *((_DWORD *)this + 1324);
      *((_DWORD *)this + 1384) = *((_DWORD *)this + 1327);
      *((_DWORD *)this + 1468) = *((_DWORD *)this + 1325);
      unsigned int v165 = *((_DWORD *)this + 1328);
      if (v164)
      {
        unsigned int v165 = (v165 + 1) >> 1;
        uint32x2_t v166 = vshr_n_u32((uint32x2_t)vadd_s32(*v234, (int32x2_t)0x100000001), 1uLL);
        unsigned int v167 = (*((_DWORD *)this + 1333) + 1) >> 1;
      }
      else
      {
        uint32x2_t v166 = (uint32x2_t)*v234;
        unsigned int v167 = *((_DWORD *)this + 1333);
      }
      uint64_t v5 = v247;
      int v12 = v245;
      *((_DWORD *)this + 1390) = v165;
      *((_DWORD *)this + 1396) = v166.i32[0];
      unsigned int v8 = (unsigned int *)((char *)this + 4568);
      *((_DWORD *)this + 1402) = v166.i32[1];
      *((_DWORD *)this + 1408) = v167;
      *((_DWORD *)this + 1474) = *((_DWORD *)this + 1331);
      *((_DWORD *)this + 1420) = *((_DWORD *)this + 1334);
      *((_DWORD *)this + 1426) = *((_DWORD *)this + 1335);
      *((_DWORD *)this + 1432) = *((_DWORD *)this + 1336);
      *((_DWORD *)this + 1438) = *((_DWORD *)this + 1339);
      *((_DWORD *)this + 1480) = *((_DWORD *)this + 1337);
      unsigned int v168 = *((_DWORD *)this + 1340);
      if (v164)
      {
        unsigned int v168 = (v168 + 1) >> 1;
        unsigned int v169 = (*((_DWORD *)this + 1341) + 1) >> 1;
        unsigned int v170 = (*((_DWORD *)this + 1342) + 1) >> 1;
        unsigned int v171 = (*((_DWORD *)this + 1345) + 1) >> 1;
        unsigned int v172 = (*((_DWORD *)this + 1343) + 1) >> 1;
      }
      else
      {
        unsigned int v169 = *((_DWORD *)this + 1341);
        unsigned int v170 = *((_DWORD *)this + 1342);
        unsigned int v171 = *((_DWORD *)this + 1345);
        unsigned int v172 = *((_DWORD *)this + 1343);
      }
      *((_DWORD *)this + 1444) = v168;
      *((_DWORD *)this + 1450) = v169;
      *((_DWORD *)this + 1456) = v170;
      *((_DWORD *)this + 1462) = v171;
      *((_DWORD *)this + 1486) = v172;
      *((_DWORD *)this + 1492) = v7[220];
      *((_DWORD *)this + 1498) = v7[227];
      *((_DWORD *)this + 1504) = 0;
      *((_DWORD *)this + 1510) = *((_DWORD *)this + 1155);
      uint64_t v173 = operator new(0x48uLL);
      uint64_t v174 = 0;
      uint64_t v175 = 0;
      v173[8] = 0x1900000016;
      *(_OWORD *)uint64_t v173 = xmmword_1CADD69F0;
      *((_OWORD *)v173 + 1) = unk_1CADD6A00;
      *((_OWORD *)v173 + 2) = xmmword_1CADD6A10;
      *((_OWORD *)v173 + 3) = unk_1CADD6A20;
      *((_DWORD *)this + 1358) = 0;
      do
      {
        uint64_t v176 = *(unsigned int *)((char *)v173 + v174);
        int v177 = *(_DWORD *)&v249[24 * v175 + 16];
        if (v177 && v249[24 * v175 + 12]) {
          int v178 = v177 << 16;
        }
        else {
          int v178 = (unsigned __int16)*(_DWORD *)&v249[24 * v175 + 16];
        }
        *(_DWORD *)&v249[24 * v176 + 8] = (unsigned __int16)(*(_WORD *)&v249[24 * v175 + 8] + v178) | ((unsigned __int16)(*(_WORD *)&v249[24 * v175 + 10] + HIWORD(v178)) << 16);
        v174 += 4;
        uint64_t v175 = v176;
      }
      while (v174 != 72);
      operator delete(v173);
    }
    *((_DWORD *)this + 1164) = GenericVaryingAllocator::getTotalSharedComponentWords(v248);
    *((_DWORD *)this + 1165) = GenericVaryingAllocator::getTotalAmplifiedComponentWords(v248);
    *(_DWORD *)&v236[4 * v7[211]] += 4;
    *(_DWORD *)&v236[4 * v7[221]] += v7[220];
    *(_DWORD *)&v236[4 * v7[219]] += *((_DWORD *)this + 1155);
    if (v12)
    {
      uint64_t v179 = *(void *)(*(void *)&v238[*(void *)(*(void *)this - 24) + 32] + 824);
      unsigned int v180 = (*(uint64_t (**)(uint64_t))(*(void *)v179 + 328))(v179);
      uint64_t v181 = (llvm::Type **)AGCLLVMUserObject::setupBufferArgumentData(this, *((void *)this + 542), v180, 0xFFFFFFFF, 0, 0, 0xFFFFFFFFLL);
      llvm::ValueHandleBase::operator=((AGCLLVMUserMeshShader *)((char *)this + 4536), v182);
      uint64_t v183 = (AGCLLVMUserMeshShader *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      uint64_t v184 = *(llvm::Type **)v5;
      *(_WORD *)&v255[12] = 257;
      llvm::IRBuilderBase::CreatePointerCast(v183, v181, v184, (const llvm::Twine *)__dst);
      llvm::Value::replaceAllUsesWith();
    }
    if (*v7)
    {
      uint64_t v185 = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
      v7[160] = 1;
      uint64_t v186 = &v237[*(void *)(*(void *)this - 24)];
      std::string::size_type v187 = (llvm::Type **)*((void *)this + 675);
      *(_WORD *)&v255[12] = 257;
      BOOL v189 = AGCLLVMBuilder::tryDeducePointeeType(v187, v188);
      uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v186 + 4, v189, (uint64_t)v187, 0, (uint64_t)__dst);
      uint64_t v191 = (llvm::Type *)*((void *)this + 676);
      uint64_t v192 = (llvm::IRBuilderBase *)&v237[*(void *)(*(void *)this - 24) + 32];
      *(_WORD *)&v255[12] = 257;
      uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v192, v191, AlignedLoad, v185, (const llvm::Twine *)__dst);
      int v194 = (llvm::Type *)*((void *)this + 676);
      unint64_t v195 = (uint64_t *)&v237[*(void *)(*(void *)this - 24) + 32];
      *(_WORD *)&v255[12] = 257;
      unint64_t v196 = (unsigned char *)llvm::IRBuilderBase::CreateAlignedLoad(v195, v194, GEP, 0, (uint64_t)__dst);
      *(void *)std::string __dst = &__dst[16];
      *(void *)&__dst[8] = 0x800000000;
      AGCLLVMBuilder::unboxStruct((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v196, (uint64_t)__dst);
      uint64_t v197 = *(void *)(*(void *)this - 24);
      uint64_t v198 = (char *)this + v197 + 40;
      uint64_t v199 = &v237[v197];
      uint64_t v200 = (llvm::Type **)*((void *)this + 569);
      __int16 v253 = 257;
      uint64_t v202 = AGCLLVMBuilder::tryDeducePointeeType(v200, v201);
      uint64_t v203 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v199 + 4, v202, (uint64_t)v200, 0, (uint64_t)&v252);
      uint64_t v204 = *((void *)this + 542);
      __int16 v251 = 257;
      uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v198, 48, v203, v204, (uint64_t)v250);
      uint64_t VpLayerIdOffsetPointer = AGCLLVMUserMeshShader::getVpLayerIdOffsetPointer(this, Cast, v185);
      uint64_t v207 = AGCLLVMUserMeshShader::getVpLayerIdOffsetPointer(this, Cast, v185);
      uint64_t v208 = *(void *)(*(void *)this - 24);
      unsigned int v209 = (uint64_t *)((char *)this + v208 + 40);
      uint64_t v210 = **(void **)__dst;
      uint64_t v211 = *(void *)&v235[v208 + 32];
      __int16 v253 = 257;
      BOOL v212 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v209, 38, v210, v211, (uint64_t)&v252);
      llvm::IRBuilderBase::CreateAlignedStore(v209, v212, VpLayerIdOffsetPointer, 0);
      uint64_t v213 = *(void *)(*(void *)this - 24);
      uint64_t v214 = (uint64_t *)((char *)this + v213 + 40);
      uint64_t v215 = *(void *)(*(void *)__dst + 8);
      uint64_t v216 = *(void *)&v235[v213 + 32];
      __int16 v253 = 257;
      uint64_t v217 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v214, 38, v215, v216, (uint64_t)&v252);
      llvm::IRBuilderBase::CreateAlignedStore(v214, v217, v207, 0);
      if (*(unsigned char **)__dst != &__dst[16]) {
        free(*(void **)__dst);
      }
      uint64_t v5 = v247;
      uint64_t v9 = (char *)this + 5424;
      int v12 = v245;
    }
LABEL_283:
    if (!v12) {
      break;
    }
    v5 += 40;
  }
  while (v5 != v243);
  if (v12) {
    goto LABEL_322;
  }
  return 0;
}

uint64_t AGCLLVMUserMeshShader::addGenericVarying(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v8 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (a3) {
    uint64_t v9 = "air.primitive_data";
  }
  else {
    uint64_t v9 = "air.vertex_data";
  }
  if (isStringMDNode(v8, v9))
  {
    unsigned int v28 = 0;
  }
  else
  {
    uint64_t v10 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8));
    if (a3) {
      BOOL v11 = "air.mesh_primitive_data";
    }
    else {
      BOOL v11 = "air.mesh_vertex_data";
    }
    BOOL v12 = 0;
    unsigned int v28 = 0;
    if (!isStringMDNode(v10, v11)) {
      return v12;
    }
  }
  v25[0] = 1;
  if (!parseMDInt(0, a2, v25, &v28)) {
    return 0;
  }
  uint64_t v13 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (!v13 || *(unsigned char *)v13) {
    return 0;
  }
  llvm::MDString::getString(v13);
  int Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 4576)) {
    return 1;
  }
  uint64_t v16 = *(llvm **)(*(void *)(a1 + 4568) + 8 * Key);
  unsigned int v17 = *((_DWORD *)v16 + 2);
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v16, (void *)(*(void *)v16 + 17));
  int v18 = v17 & 0xF;
  BOOL v12 = !a3 && v18 != 3 || a3 == 1 && v18 == 3;
  if (v28 < 0xFFFFFFFA) {
    int v20 = ((a3 != 0) | (2 * v28)) + 6;
  }
  else {
    int v20 = ~v28;
  }
  GenericVarying::GenericVarying((uint64_t)v25, HIBYTE(v17) & 0x7F, BYTE2(v17), v18, BYTE1(v17), v20, a4);
  uint64_t String = (void *)llvm::MDString::getString(v13);
  if (String)
  {
    std::string::basic_string[abi:nn180100](&v23, String, v22);
  }
  else
  {
    long long v23 = 0uLL;
    uint64_t v24 = 0;
  }
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v23;
  uint64_t v27 = v24;
  GenericVaryingAllocator::addVarying(a1 + 4696, (unint64_t)v25);
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)__p);
  }
  return v12;
}

unsigned int *llvm::StringMap<unsigned int,llvm::MallocAllocator>::clear(unsigned int *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    uint64_t v2 = result[2];
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)v1;
        uint64_t result = *(unsigned int **)(*(void *)v1 + v3);
        if (result != (unsigned int *)-8 && result != 0) {
          uint64_t result = (unsigned int *)llvm::deallocate_buffer((llvm *)result, (void *)(*(void *)result + 17));
        }
        *(void *)(v5 + v3) = 0;
        v3 += 8;
      }
      while (v4 != v3);
    }
    v1[3] = 0;
    v1[4] = 0;
  }
  return result;
}

void attribute_name(std::string *a1, std::string *this)
{
  size_t __idx = 0;
  std::string::size_type v4 = std::string::find(this, "generated(", 0, 0xAuLL);
  if (v4 == -1)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v6 = (const std::string::value_type *)this->__r_.__value_.__r.__words[0];
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      std::string::__init_copy_ctor_external(a1, v6, size);
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)&this->__r_.__value_.__l.__data_;
      a1->__r_.__value_.__r.__words[2] = this->__r_.__value_.__r.__words[2];
    }
  }
  else
  {
    std::string::basic_string(&__str, this, v4 + 10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
    int v5 = std::stoi(&__str, &__idx, 10);
    std::string::basic_string(a1, &__str, __idx, v5, (std::allocator<char> *)&v10);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void AGCLLVMUserMeshShader::addWrapperPostfix(AGCLLVMUserMeshShader *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v2[0] = llvm::ConstantInt::get();
  v2[1] = llvm::ConstantInt::get();
  AGCLLVMObject::buildWGBarrier((uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t)v2, 2);
  v2[0] = "exit";
  __int16 v3 = 259;
  operator new();
}

uint64_t llvm::IRBuilderBase::CreateCondBr(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x1CB79EAD0](v8, a3, a4, a2, 0);
  __int16 v11 = 257;
  return llvm::IRBuilderBase::Insert<llvm::Instruction>(a1, v8, (uint64_t)v10);
}

uint64_t llvm::IRBuilderBase::CreateNot(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
  {
    uint64_t Not = (*(uint64_t (**)(void, llvm::Value *))(**((void **)this + 9) + 208))(*((void *)this + 9), a2);
    if (Not) {
      BOOL v6 = *(unsigned __int8 *)(Not + 16) >= 0x1Cu;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, Not, (uint64_t)a3);
    }
  }
  else
  {
    uint64_t Not = llvm::BinaryOperator::CreateNot();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, Not, (uint64_t)a3);
  }
  return Not;
}

void AGCLLVMUserMeshShader::buildWriteVaryings(AGCLLVMUserObjectShaderBase *a1, llvm::Type **a2, uint64_t a3, uint64_t a4, int a5)
{
  llvm::ConstantInt::get();
  if (a5)
  {
    uint64_t v9 = (uint64_t)a1 + *(void *)(*(void *)a1 - 24) + 40;
    uint64_t VertexAmpCount = AGCLLVMUserObjectShaderBase::getVertexAmpCount(a1, v8);
    uint64_t v11 = *(void *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 224);
    __int16 v15 = 257;
    llvm::IRBuilderBase::CreateCast(v9, 38, VertexAmpCount, v11, (uint64_t)v14);
  }
  else
  {
    llvm::ConstantInt::get();
  }
  BOOL v12 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  uint64_t v13 = (llvm::Type *)*((void *)a1 + 540);
  __int16 v15 = 257;
  llvm::IRBuilderBase::CreatePointerCast(v12, a2, v13, (const llvm::Twine *)v14);
  v14[0] = "loop";
  __int16 v15 = 259;
  operator new();
}

llvm::User *llvm::IRBuilderBase::CreatePHI(llvm::IRBuilderBase *this, llvm::Type *a2, int a3, const llvm::Twine *a4)
{
  BOOL v7 = (llvm::User *)llvm::User::operator new((llvm::User *)0x40);
  *(_DWORD *)(llvm::Instruction::Instruction() + 60) = a3;
  llvm::Value::setName();
  llvm::User::allocHungoffUses(v7);
  if (llvm::FPMathOperator::classof((uint64_t)v7)) {
    llvm::IRBuilderBase::setFPAttrs((uint64_t)this, (uint64_t)v7);
  }
  (*(void (**)(void, llvm::User *, const llvm::Twine *, void, void))(**((void **)this + 10) + 16))(*((void *)this + 10), v7, a4, *((void *)this + 6), *((void *)this + 7));
  uint64_t v8 = *((unsigned int *)this + 2);
  if (v8)
  {
    uint64_t v9 = *(void **)this;
    char v10 = &v9[2 * v8];
    do
    {
      llvm::Instruction::setMetadata();
      v9 += 2;
    }
    while (v9 != v10);
  }
  return v7;
}

uint64_t AGCLLVMUserMeshShader::initCompile(AGCLLVMUserMeshShader *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1092), *(_DWORD *)(*((void *)this + 565) + 20), *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 864), (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (unsigned int *)this + 1092);
  if (v2)
  {
    __int16 v3 = (BOOL *)this + 4384;
    AGCLLVMUserObjectShaderBase::initCompile(this);
    if (*((unsigned char *)this + 4405))
    {
      v29[0] = *(void **)((char *)this + *(void *)(*(void *)this - 24) + 232);
      v29[1] = v29[0];
      uint64_t v4 = llvm::StructType::get();
      int v5 = (llvm::Type *)llvm::PointerType::get();
      *((void *)this + 676) = v4;
      *(void *)&long long v26 = "agc.view_mappings_pointer_global";
      __int16 v28 = 259;
      unsigned int v6 = (*(uint64_t (**)(void))(**(void **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400)
                                              + 824)
                                + 256))();
      *((void *)this + 675) = AGCLLVMUserObject::createGlobalBufferBinding(this, v5, (const llvm::Twine *)&v26, v6, *((_DWORD *)this + 1140), 5, 0);
    }
    BOOL v7 = (std::string *)std::string::basic_string[abi:nn180100]<0>(v29, "air.get_global_size");
    uint64_t v8 = std::string::append(v7, ".i32");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    long long v26 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v27 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (llvm::Module::getFunction())
    {
      BOOL *v3 = 1;
    }
    else
    {
      std::string::basic_string[abi:nn180100]<0>(&v23, "air.get_global_size");
      char v10 = std::string::append(&v23, ".i16");
      std::string::size_type v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v24 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v25 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (llvm::Module::getFunction())
      {
        BOOL *v3 = 1;
      }
      else
      {
        std::string::basic_string[abi:nn180100]<0>(&v20, "air.get_num_groups");
        BOOL v12 = std::string::append(&v20, ".i32");
        std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v21 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        std::string::size_type v22 = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        if (llvm::Module::getFunction())
        {
          BOOL *v3 = 1;
        }
        else
        {
          std::string::basic_string[abi:nn180100]<0>(&v17, "air.get_num_groups");
          uint64_t v14 = std::string::append(&v17, ".i16");
          std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          std::string::size_type v19 = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          BOOL *v3 = llvm::Module::getFunction() != 0;
          if (SHIBYTE(v19) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v17.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v22) < 0) {
          operator delete(v21[0]);
        }
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v20.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(v24[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v27) < 0) {
      operator delete((void *)v26);
    }
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    std::string::basic_string[abi:nn180100]<0>(&v26, "air.object_threadgroup_position_in_grid");
    *((unsigned char *)this + 4385) = llvm::Module::getFunction() != 0;
    if (SHIBYTE(v27) < 0) {
      operator delete((void *)v26);
    }
  }
  return v2;
}

void AGCLLVMUserMeshShader::~AGCLLVMUserMeshShader(AGCLLVMUserMeshShader *this)
{
  *(void *)this = &unk_1F2576430;
  uint64_t v2 = (AGCLLVMUserMeshShader *)((char *)this + 6048);
  *((void *)this + 756) = &unk_1F2576768;
  *((void *)this + 760) = &unk_1F2576858;
  int v5 = (void **)((char *)this + 5264);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v5);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 590);
  __int16 v3 = (void *)*((void *)this + 587);
  if (v3)
  {
    *((void *)this + 588) = v3;
    operator delete(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4568);
  uint64_t v4 = *((void *)this + 569);
  if (v4 != -8192 && v4 != -4096 && v4) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShader *)((char *)this + 4536));
  }
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase(this, (uint64_t *)off_1F2576868);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CB7A0780);
}

{
  AGCLLVMObject *v2;
  void *v3;
  uint64_t v4;
  void **v5;

  *(void *)this = &unk_1F2576430;
  uint64_t v2 = (AGCLLVMUserMeshShader *)((char *)this + 6048);
  *((void *)this + 756) = &unk_1F2576768;
  *((void *)this + 760) = &unk_1F2576858;
  int v5 = (void **)((char *)this + 5264);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v5);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 590);
  __int16 v3 = (void *)*((void *)this + 587);
  if (v3)
  {
    *((void *)this + 588) = v3;
    operator delete(v3);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4568);
  uint64_t v4 = *((void *)this + 569);
  if (v4 != -8192 && v4 != -4096 && v4) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShader *)((char *)this + 4536));
  }
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase(this, (uint64_t *)off_1F2576868);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

void AGCLLVMUserMeshShaderAnalysis::AGCLLVMUserMeshShaderAnalysis(AGCLLVMObject *a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, char a5)
{
  AGCLLVMObject::AGCLLVMObject(a1, a2, *a3);
  *(void *)uint64_t v8 = &unk_1F2576320;
  *(void *)(v8 + 32) = &unk_1F2576410;
  char v9 = *(unsigned char *)(*(void *)(v8 + 400) + 1762);
  *(void *)(v8 + 3328) = 0;
  *(void *)(v8 + 3336) = 0;
  *(void *)(v8 + 3320) = 0;
  *(void *)(v8 + 3344) = v8 + 3360;
  *(void *)(v8 + 3352) = 0x800000000;
  *(void *)(v8 + 3872) = 0x1FFFFFFFFLL;
  *(unsigned char *)(v8 + 3880) = v9;
  *(_DWORD *)(v8 + 4012) = 0;
  *(_OWORD *)(v8 + 3994) = 0u;
  *(_OWORD *)(v8 + 3984) = 0u;
  *(_OWORD *)(v8 + 3968) = 0u;
  *(_OWORD *)(v8 + 3952) = 0u;
  *(_OWORD *)(v8 + 3936) = 0u;
  *(_OWORD *)(v8 + 3920) = 0u;
  *(_OWORD *)(v8 + 3904) = 0u;
  *(_OWORD *)(v8 + 3888) = 0u;
  *(unsigned char *)(v8 + 4016) = 1;
  *(unsigned char *)(v8 + 4032) = a5;
  *(void *)(v8 + 4024) = a3;
  *(unsigned char *)(v8 + 4033) = (*(_DWORD *)(a4 + 16) & 0xE) != 0;
}

uint64_t virtual thunk to'AGCLLVMUserMeshShaderSW::isDMAPromotionDisabled(AGCLLVMUserMeshShaderSW *this)
{
  return *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 208) + 4520) + 12) >> 7;
}

BOOL virtual thunk to'AGCLLVMUserMeshShaderSW::enableSoftFaultOptimization(AGCLLVMUserMeshShaderSW *this)
{
  return (*(unsigned char *)(*(void *)((char *)this + *(void *)(*(void *)this - 200) + 4520) + 15) & 0x40) == 0;
}

uint64_t virtual thunk to'AGCLLVMUserMeshShaderSW::getBufferBoundsCheckMode(AGCLLVMUserMeshShaderSW *this)
{
  return (*(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 192) + 4520) + 12) >> 4) & 7;
}

uint64_t virtual thunk to'AGCLLVMUserMeshShaderSW::constructReply(AGCLLVMUserMeshShaderSW *this)
{
  return AGCLLVMUserMeshShaderSW::constructReply((AGCLLVMUserMeshShaderSW *)((char *)this
                                                                           + *(void *)(*(void *)this - 152)));
}

uint64_t AGCLLVMUserMeshShaderSW::constructReply(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  if (!AGCDeserializedReply::deserialize((AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 472), *(_DWORD **)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 152), *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 160)))return 0; {
  AGCLLVMObject::validateBackendReply((AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24)));
  }
  int v96 = AGCLLVMUserObject::constructFlatReply(this);
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v3 = (flatbuffers::FlatBufferBuilder *)(v2 + 2472);
  v2[2542] = 1;
  int v4 = *((_DWORD *)v2 + 626) - *((_DWORD *)v2 + 630) + *((_DWORD *)v2 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v2 + 309, 4, *((_DWORD *)this + 1098));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 6, *((_DWORD *)this + 1099));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 8, *((_DWORD *)this + 1100));
  int v5 = flatbuffers::FlatBufferBuilder::EndTable(v3, v4);
  char v6 = *((unsigned char *)this + 5264);
  int v104 = 0;
  unsigned int v105 = 0;
  uint64_t v106 = 0;
  v107[0] = (char *)v108;
  v107[1] = (char *)0x800000000;
  v108[64] = 0x1FFFFFFFFLL;
  char v109 = v6;
  v116[7] = 0;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  memset(v116, 0, 26);
  char v117 = 1;
  if (*((_DWORD *)this + 1184))
  {
    unint64_t v7 = *((void *)this + 591);
    do
    {
      GenericVaryingAllocator::addVarying((uint64_t)&v104, v7);
      v7 += 64;
    }
    while (v7 < *((void *)this + 591) + ((unint64_t)*((unsigned int *)this + 1184) << 6));
  }
  GenericVaryingAllocator::allocate((GenericVaryingAllocator *)&v104, *(const AGCLLVMTargetLowerer **)((char *)this + *(void *)(*(void *)this - 24) + 400));
  GenericVaryingAllocator::serialize((GenericVaryingAllocator *)&v104, (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  if (v105 == v104) {
    uint64_t v8 = &flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
  }
  else {
    uint64_t v8 = v104;
  }
  int v9 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)v8, (v105 - (unsigned char *)v104) >> 2);
  char v10 = (char *)this + *(void *)(*(void *)this - 24);
  std::string::size_type v11 = (flatbuffers::FlatBufferBuilder *)(v10 + 2472);
  v10[2542] = 1;
  int v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v10 + 309, 4, v113);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 6, SDWORD1(v113));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, SDWORD2(v113));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 10, SDWORD2(v111));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 12, SHIDWORD(v111));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 14, v112);
  LODWORD(v11) = flatbuffers::FlatBufferBuilder::EndTable(v11, v12);
  std::string::size_type v13 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v14 = (flatbuffers::FlatBufferBuilder *)(v13 + 2472);
  v13[2542] = 1;
  int v15 = *((_DWORD *)v13 + 626) - *((_DWORD *)v13 + 630) + *((_DWORD *)v13 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v13 + 309, 4, v116[0]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14, 6, v116[1]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14, 8, v116[2]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14, 10, SDWORD2(v114));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14, 12, SHIDWORD(v114));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14, 14, v115);
  int v16 = flatbuffers::FlatBufferBuilder::EndTable(v14, v15);
  std::string v17 = (char *)this + *(void *)(*(void *)this - 24);
  int v18 = (flatbuffers::FlatBufferBuilder *)(v17 + 2472);
  v17[2542] = 1;
  int v19 = *((_DWORD *)v17 + 626) - *((_DWORD *)v17 + 630) + *((_DWORD *)v17 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((flatbuffers::FlatBufferBuilder *)(v17 + 2472), 4, v5);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 6, *((_DWORD *)this + 1152));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 8, *((_DWORD *)this + 1153));
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(v18, 10, *((char *)this + 4624));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 12, *((_DWORD *)this + 1163));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 14, *((_DWORD *)this + 1165));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 16, *((_DWORD *)this + 1163));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 18, *((_DWORD *)this + 1165));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 60, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 20, *((_DWORD *)this + 1164));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 22, *((_DWORD *)this + 1166));
  int v20 = (int)v11;
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v18, 24, (int)v11);
  LODWORD(v11) = v16;
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v18, 26, v16);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 28, LOBYTE(v116[6]), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v18, 30, v9);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 32, *((unsigned __int8 *)this + 4637), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 34, *((_DWORD *)this + 1158));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 36, *((unsigned __int8 *)this + 4641), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 38, *((unsigned __int8 *)this + 4639), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 40, *((unsigned __int8 *)this + 4643), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 42, *((unsigned __int8 *)this + 4629), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 44, *((unsigned __int8 *)this + 4638), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 46, *((unsigned __int8 *)this + 4645), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 48, *((_DWORD *)this + 1092));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 50, *((unsigned __int8 *)this + 4384), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 52, *((unsigned __int8 *)this + 4644), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 54, *((_DWORD *)this + 1140));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 56, *((unsigned __int8 *)this + 12), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 58, *((unsigned __int8 *)this + 4385), 0);
  int v94 = flatbuffers::FlatBufferBuilder::EndTable(v18, v19);
  uint64_t v21 = (char *)this + *(void *)(*(void *)this - 24);
  std::string::size_type v22 = (flatbuffers::FlatBufferBuilder *)(v21 + 2472);
  int v23 = *(_DWORD *)(*((void *)v21 + 50) + 864);
  v21[2542] = 1;
  int v24 = *((_DWORD *)v21 + 626) - *((_DWORD *)v21 + 630) + *((_DWORD *)v21 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)v21 + 309, 12, v23);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v22, 14, 0, 0);
  unsigned int v25 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v22, 1);
  flatbuffers::FlatBufferBuilder::TrackField(v22, 10, v25);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v22, 8, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v22, 6, 0, 0);
  int v92 = flatbuffers::FlatBufferBuilder::EndTable(v22, v24);
  long long v26 = (char *)this + *(void *)(*(void *)this - 24);
  v26[2542] = 1;
  int v27 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v26 + 2472), (unsigned __int16)*((_DWORD *)v26 + 626) - (unsigned __int16)*((_DWORD *)v26 + 630) + *((_DWORD *)v26 + 628));
  flatbuffers::FlatBufferBuilder::Finish((AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 2472), v27, v28);
  int v29 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>> const&)::t, 0);
  int v30 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(void *)(*(void *)this - 24) + 2472, (uint64_t)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>> const&)::t, 0);
  uint64_t v31 = (char *)this + *(void *)(*(void *)this - 24);
  unint64_t v32 = (flatbuffers::FlatBufferBuilder *)(v31 + 2472);
  v31[2542] = 1;
  int v33 = *((_DWORD *)v31 + 626) - *((_DWORD *)v31 + 630) + *((_DWORD *)v31 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v31 + 2472), v29);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v32, v30);
  int v34 = flatbuffers::FlatBufferBuilder::EndTable(v32, v33);
  __int16 v35 = (char *)this + *(void *)(*(void *)this - 24);
  unint64_t v36 = (flatbuffers::FlatBufferBuilder *)(v35 + 2472);
  v35[2542] = 1;
  int v37 = *((_DWORD *)v35 + 626) - *((_DWORD *)v35 + 630) + *((_DWORD *)v35 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v35 + 2472), v34);
  unsigned int v38 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v36, 1);
  flatbuffers::FlatBufferBuilder::TrackField(v36, 6, v38);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v36, 8, *((unsigned __int8 *)this + 4637), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36, 10, *((_DWORD *)this + 1167));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36, 12, *((_DWORD *)this + 1168));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36, 14, *((_DWORD *)this + 1158));
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v36, 16, v20);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v36, 18, (int)v11);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v36, 20, LOBYTE(v116[6]), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v36, 22, v9);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36, 26, 0);
  int v39 = flatbuffers::FlatBufferBuilder::EndTable(v36, v37);
  uint64_t v40 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v41 = (flatbuffers::FlatBufferBuilder *)(v40 + 2568);
  LODWORD(v11) = *((unsigned __int8 *)this + 4641);
  int v42 = *((unsigned __int8 *)this + 4639);
  LODWORD(v36) = *((unsigned __int8 *)this + 4629);
  int v43 = *((unsigned __int8 *)this + 4638);
  LODWORD(v32) = *((unsigned __int8 *)this + 4645);
  v40[2638] = 1;
  LODWORD(v18) = *((_DWORD *)v40 + 650) - *((_DWORD *)v40 + 654) + *((_DWORD *)v40 + 652);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)v40 + 321, 14, (int)v32, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v41, 12, (int)v32, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v41, 10, v43, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v41, 8, (int)v36, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v41, 6, v42, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v41, 4, (int)v11, 0);
  LODWORD(v11) = flatbuffers::FlatBufferBuilder::EndTable(v41, (__int16)v18);
  int v44 = (char *)this + *(void *)(*(void *)this - 24);
  char v45 = (flatbuffers::FlatBufferBuilder *)(v44 + 2472);
  v44[2542] = 1;
  int v46 = *((_DWORD *)v44 + 626) - *((_DWORD *)v44 + 630) + *((_DWORD *)v44 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v44 + 2472), v96);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MeshShaderInfo>(v45, v94);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v45, v92);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v45, v39);
  uint64_t v47 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 2472);
  int v48 = flatbuffers::FlatBufferBuilder::EndTable(v45, v46);
  flatbuffers::FlatBufferBuilder::Finish(v47, v48, v49);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 2472));
  uint64_t v50 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v51 = (flatbuffers::FlatBufferBuilder *)(v50 + 2568);
  v50[2638] = 1;
  LODWORD(v47) = *((_DWORD *)v50 + 650) - *((_DWORD *)v50 + 654) + *((_DWORD *)v50 + 652);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((flatbuffers::FlatBufferBuilder *)(v50 + 2568), (int)v11);
  char v52 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 2568);
  int v53 = flatbuffers::FlatBufferBuilder::EndTable(v51, (__int16)v47);
  flatbuffers::FlatBufferBuilder::Finish(v52, v53, v54);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG11::CompileReplyBinarySchema>((uint64_t)this + *(void *)(*(void *)this - 24), (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 2568));
  uint64_t v55 = *(void *)(*(void *)this - 24);
  unsigned int v56 = (char *)this + v55;
  __int16 v57 = (char *)this + v55 + 696;
  if (*(void *)v57)
  {
    if (*((void *)v56 + 88)) {
      int v58 = (void *)((char *)this + v55 + 696);
    }
    else {
      int v58 = v56 + 1256;
    }
  }
  else
  {
    int v58 = v56 + 1256;
  }
  uint64_t v60 = (int *)(*v58 + *(unsigned int *)*v58);
  uint64_t v61 = (unsigned int *)((char *)v60 + *(unsigned __int16 *)((char *)v60 - *v60 + 4));
  uint64_t v62 = (int *)((char *)v61 + *v61);
  if (*(void *)v57)
  {
    uint64_t v63 = *((void *)v56 + 88);
    uint64_t v64 = v56 + 1256;
    if (!v63) {
      __int16 v57 = v64;
    }
  }
  else
  {
    __int16 v57 = v56 + 1256;
  }
  std::string::size_type v65 = 0;
  unint64_t v66 = (unsigned int *)((char *)v62 + *(unsigned __int16 *)((char *)v62 - *v62 + 8));
  if (*(void *)v57 && *((void *)v57 + 1)) {
    std::string::size_type v65 = (int *)(*(void *)v57 + **(unsigned int **)v57);
  }
  uint64_t v67 = (unsigned __int16 *)((char *)v65 - *v65);
  if (*v67 >= 5u && (uint64_t v68 = v67[2]) != 0) {
    uint64_t v69 = (int *)((char *)v65 + v68 + *(unsigned int *)((char *)v65 + v68));
  }
  else {
    uint64_t v69 = 0;
  }
  unsigned int v70 = (unsigned __int16 *)((char *)v69 - *v69);
  if (*v70 >= 0x3Du && (uint64_t v71 = v70[30]) != 0) {
    unsigned int v72 = *(int *)((char *)v69 + v71);
  }
  else {
    unsigned int v72 = 0;
  }
  unsigned int v73 = *(unsigned int *)((char *)v66 + *v66);
  int v74 = *((_DWORD *)this + 1152);
  int v93 = *((_DWORD *)this + 1171);
  int v95 = *((_DWORD *)this + 1169);
  int v97 = *((_DWORD *)this + 1170);
  int v75 = *((_DWORD *)this + 1153);
  int v76 = *((_DWORD *)this + 1172);
  int v77 = *((_DWORD *)this + 1140);
  unsigned int v78 = *((_DWORD *)this + 1173);
  unsigned int v79 = *(_DWORD *)(*(void *)((char *)this + v55 + 400) + 908);
  if (v78 > v79)
  {
    std::to_string(&v99, v78);
    uint64_t v80 = std::string::insert(&v99, 0, "Mesh unique scalar count of ");
    std::string::size_type v81 = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v100.__r_.__value_.__r.__words[2] = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    uint64_t v82 = std::string::append(&v100, " exceeds limit of ");
    std::string::size_type v83 = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v98, *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 908));
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v84 = &v98;
    }
    else {
      uint64_t v84 = (std::string *)v98.__r_.__value_.__r.__words[0];
    }
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v98.__r_.__value_.__l.__size_;
    }
    std::string v86 = std::string::append(&v101, (const std::string::value_type *)v84, size);
    std::string::size_type v87 = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    uint64_t v103 = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    if (v103 >= 0) {
      BOOL v88 = __p;
    }
    else {
      BOOL v88 = (void **)__p[0];
    }
    if (v103 >= 0) {
      std::string::size_type v89 = HIBYTE(v103);
    }
    else {
      std::string::size_type v89 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8), (const std::string::value_type *)v88, v89);
    if (SHIBYTE(v103) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v100.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
  }
  if (v73 > 0x20)
  {
    uint64_t v59 = 0;
  }
  else
  {
    unsigned int v90 = validateUserMeshLocalMemoryUsage(v72, ((v74 + 3) & 0xFFFFFFFC) * v95 + v75 * v97 + (v93 * ((v74 + 3) & 0xFFFFFFFC) + v76 * v75) * v77, *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 900), *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 896), *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 400) + 904), (std::string *)((char *)this + *(void *)(*(void *)this - 24) + 8));
    if (v78 <= v79) {
      uint64_t v59 = v90;
    }
    else {
      uint64_t v59 = 0;
    }
  }
  __p[0] = &v110;
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector(v107);
  if (v104)
  {
    unsigned int v105 = v104;
    operator delete(v104);
  }
  return v59;
}

void virtual thunk to'AGCLLVMUserMeshShaderSW::getCompilationKeyDescription(AGCLLVMUserMeshShaderSW *this@<X0>, std::string *a2@<X8>)
{
}

void AGCLLVMUserMeshShaderSW::getCompilationKeyDescription(AGCLLVMUserMeshShaderSW *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  __int16 v3 = (_DWORD *)*((void *)this + 565);
  std::string::basic_string[abi:nn180100]<0>(&v56, "AGCMeshContextStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v54, "mutableBuffers");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v57);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v57.__r_.__value_.__r.__words[2], (uint64_t)"0x", 2);
  *(_DWORD *)((char *)&v57.__r_.__value_.__r + *(void *)(v57.__r_.__value_.__r.__words[2] - 24) + 24) = *(_DWORD *)((char *)&v57.__r_.__value_.__r + *(void *)(v57.__r_.__value_.__r.__words[2] - 24) + 24) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v70, (const void **)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v57.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + *(void *)(v57.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v57.__r_.__value_.__r.__words[2] = v4;
  uint64_t v58 = MEMORY[0x1E4FBA470] + 16;
  if (v60 < 0) {
    operator delete(v59);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CB7A0710](&v61);
  std::string::basic_string[abi:nn180100]<0>(v52, "maxTotalThreadsPerThreadgroup");
  _agcFieldString<unsigned int>(&v71, (const void **)v52, v3[5]);
  std::string::basic_string[abi:nn180100]<0>(v50, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v72, (const void **)v50, v3[3] & 1);
  std::string::basic_string[abi:nn180100]<0>(v48, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v73, (const void **)v48, (v3[3] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v46, "maxVertexAmplificationCount");
  _agcFieldString<unsigned int>(&v74, (const void **)v46, v3[4] & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v44, "manufactureUnlinkedVaryings");
  _agcFieldString<unsigned int>(&v75, (const void **)v44, (v3[4] >> 4) & 1);
  std::string::basic_string[abi:nn180100]<0>(v42, "customBorderColor");
  _agcFieldString<unsigned int>(&v76, (const void **)v42, (v3[4] >> 5) & 1);
  std::string::basic_string[abi:nn180100]<0>(v40, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v77, (const void **)v40, (v3[3] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v38, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v78, (const void **)v38, (v3[3] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v36, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v79, (const void **)v36, (v3[3] >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v34, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v80, (const void **)&v34, (v3[3] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v32, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v81, (const void **)v32, (v3[3] >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v30, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v82, (const void **)v30, (unsigned __int16)(v3[3] >> 10));
  std::string::basic_string[abi:nn180100]<0>(v28, "enableStackShadow");
  _agcFieldString<unsigned int>(&v83, (const void **)v28, (v3[3] >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v26, "bufferBoundsCheckMode");
  _agcFieldString<unsigned int>(&v84, (const void **)v26, (v3[3] >> 4) & 7);
  std::string::basic_string[abi:nn180100]<0>(v24, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v85, (const void **)v24, v3[3] >> 31);
  std::string::basic_string[abi:nn180100]<0>(v22, "addDefaultPointSize");
  _agcFieldString<unsigned int>(&v86, (const void **)v22, (v3[4] >> 6) & 1);
  std::string::basic_string[abi:nn180100]<0>(v20, "disableDMAPromotion");
  _agcFieldString<unsigned int>(&v87, (const void **)v20, (v3[3] >> 7) & 1);
  std::string::basic_string[abi:nn180100]<0>(v18, "noObjectShader");
  _agcFieldString<unsigned int>(&v88, (const void **)v18, (v3[4] >> 8) & 1);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v68, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  }
  else {
    std::string v68 = v56;
  }
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v68, 0);
  std::string::basic_string[abi:nn180100]<0>(v63, "{");
  _agcIndentedLine(&v65, (std::string::value_type *)v63, 0);
  if ((v67 & 0x80u) == 0) {
    int v5 = (const std::string::value_type *)&v65;
  }
  else {
    int v5 = (const std::string::value_type *)v65;
  }
  if ((v67 & 0x80u) == 0) {
    std::string::size_type v6 = v67;
  }
  else {
    std::string::size_type v6 = v66;
  }
  unint64_t v7 = std::string::append(&__p, v5, v6);
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((char)v67 < 0) {
    operator delete(v65);
  }
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = 0; i != 57; i += 3)
  {
    char v10 = (char *)&v70 + i * 8;
    if (SHIBYTE(v70.__r_.__value_.__r.__words[i + 2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else {
      std::string __p = *(std::string *)v10;
    }
    int v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v62, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v62 = __p;
    }
    _agcIndentedLine(&v65, (std::string::value_type *)&v62, 1);
    if ((v67 & 0x80u) == 0) {
      int v12 = (const std::string::value_type *)&v65;
    }
    else {
      int v12 = (const std::string::value_type *)v65;
    }
    if ((v67 & 0x80u) == 0) {
      std::string::size_type v13 = v67;
    }
    else {
      std::string::size_type v13 = v66;
    }
    std::string::append(&v57, v12, v13);
    if ((char)v67 < 0) {
      operator delete(v65);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v62.__r_.__value_.__l.__data_);
      if ((v11 & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v65, "}");
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v65, 0);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &v57;
  }
  else {
    uint64_t v14 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v57.__r_.__value_.__l.__size_;
  }
  int v16 = std::string::insert(&__p, 0, (const std::string::value_type *)v14, size);
  *a2 = *v16;
  v16->__r_.__value_.__r.__words[0] = 0;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v67 < 0) {
    operator delete(v65);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = 57;
  do
  {
    if (v70.__r_.__value_.__s.__data_[v17 * 8 - 1] < 0) {
      operator delete((void *)__p.__r_.__value_.__r.__words[v17 + 1]);
    }
    v17 -= 3;
  }
  while (v17 * 8);
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  if (v51 < 0) {
    operator delete(v50[0]);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (v55 < 0) {
    operator delete(v54[0]);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
}

uint64_t virtual thunk to'AGCLLVMUserMeshShaderSW::getForwardProgressMode(AGCLLVMUserMeshShaderSW *this)
{
  return *(_DWORD *)(*(void *)((char *)this + *(void *)(*(void *)this - 128) + 4520) + 12) >> 31;
}

uint64_t virtual thunk to'AGCLLVMUserMeshShaderSW::getShaderType(AGCLLVMUserMeshShaderSW *this)
{
  return 4;
}

const char *virtual thunk to'AGCLLVMUserMeshShaderSW::dumpType(AGCLLVMUserMeshShaderSW *this)
{
  return "mesh";
}

void virtual thunk to'AGCLLVMUserMeshShaderSW::~AGCLLVMUserMeshShaderSW(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 48);
  AGCLLVMUserMeshShaderSW::~AGCLLVMUserMeshShaderSW((AGCLLVMUserMeshShaderSW *)v1);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6776));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;
  AGCLLVMObject *v2;
  uint64_t vars8;

  AGCLLVMUserMeshShaderSW::~AGCLLVMUserMeshShaderSW((AGCLLVMUserMeshShaderSW *)((char *)this
                                                                              + *(void *)(*(void *)this - 48)));
  uint64_t v2 = (AGCLLVMObject *)(v1 + 6776);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

void AGCLLVMUserMeshShaderSW::~AGCLLVMUserMeshShaderSW(AGCLLVMUserMeshShaderSW *this)
{
  *(void *)this = &unk_1F2577490;
  *((void *)this + 847) = &unk_1F25777C8;
  *((void *)this + 851) = &unk_1F25778B8;
  uint64_t v2 = *((void *)this + 846);
  if (v2 != -8192 && v2 != -4096 && v2 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShaderSW *)((char *)this + 6752));
  }
  std::string::size_type v4 = (char *)*((void *)this + 676);
  if (v4 != (char *)this + 5424) {
    free(v4);
  }
  unint64_t v7 = (void **)((char *)this + 5272);
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100](&v7);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector((char **)this + 591);
  int v5 = (void *)*((void *)this + 588);
  if (v5)
  {
    *((void *)this + 589) = v5;
    operator delete(v5);
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4576);
  uint64_t v6 = *((void *)this + 569);
  if (v6 != -8192 && v6 != -4096 && v6) {
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserMeshShaderSW *)((char *)this + 4536));
  }
  AGCLLVMUserObjectShaderBase::~AGCLLVMUserObjectShaderBase(this, (uint64_t *)off_1F25778C8);
}

{
  uint64_t v1;
  uint64_t vars8;

  AGCLLVMUserMeshShaderSW::~AGCLLVMUserMeshShaderSW(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6776));
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t v1;

  AGCLLVMUserMeshShaderSW::~AGCLLVMUserMeshShaderSW(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6776));
}

uint64_t AGCLLVMUserMeshShaderSW::isDMAPromotionDisabled(AGCLLVMUserMeshShaderSW *this)
{
  return *(unsigned __int8 *)(*((void *)this + 565) + 12) >> 7;
}

BOOL AGCLLVMUserMeshShaderSW::enableSoftFaultOptimization(AGCLLVMUserMeshShaderSW *this)
{
  return (*(unsigned char *)(*((void *)this + 565) + 15) & 0x40) == 0;
}

uint64_t AGCLLVMUserMeshShaderSW::getForwardProgressMode(AGCLLVMUserMeshShaderSW *this)
{
  return *(_DWORD *)(*((void *)this + 565) + 12) >> 31;
}

uint64_t AGCLLVMUserMeshShaderSW::getBufferBoundsCheckMode(AGCLLVMUserMeshShaderSW *this)
{
  return (*(_DWORD *)(*((void *)this + 565) + 12) >> 4) & 7;
}

uint64_t AGCLLVMUserMeshShaderSW::getShaderType(AGCLLVMUserMeshShaderSW *this)
{
  return 4;
}

const char *AGCLLVMUserMeshShaderSW::dumpType(AGCLLVMUserMeshShaderSW *this)
{
  return "mesh";
}

uint64_t AGCLLVMUserMeshShaderSW::replacePayloadBufferAccesses(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2)
{
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  int v5 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v9 = 257;
  uint64_t v6 = llvm::IRBuilderBase::CreateCall((uint64_t)(v5 + 40), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v8);
  AGCLLVMUserObjectShaderBase::replaceEmulatedPayloadBufferAccesses(this, a2, v6);
  return 1;
}

uint64_t AGCLLVMUserMeshShaderSW::buildNumGroups(AGCLLVMUserMeshShaderSW *this, llvm::Type *a2, int a3)
{
  uint64_t v6 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserMeshShaderSW *))(*(void *)this + 496))(this);
  unint64_t v7 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(this, a2, a3);
  std::string::size_type v8 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v16 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v8, v6, v7, (const llvm::Twine *)v15);
  char v10 = (llvm::Value *)llvm::ConstantInt::get();
  v14[16] = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v8, Add, v10, (const llvm::Twine *)v14);
  int v12 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v16 = 257;
  return llvm::IRBuilderBase::CreateUDiv(v12, Sub, v7, (const llvm::Twine *)v15);
}

uint64_t AGCLLVMUserMeshShaderSW::buildGlobalSize(llvm::Type ***this, llvm::Type *a2)
{
  if (!this[535])
  {
    std::string::size_type v4 = (llvm::Type *)llvm::PointerType::get();
    unsigned int v5 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 368))();
    v43[0] = "agc.indirect_wg_size_buffer_pointer.";
    uint64_t v44 = v5;
    __int16 v45 = 2051;
    unsigned int v6 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 368))();
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v4, (const llvm::Twine *)v43, v6, 12, 5, 0);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 533), (uint64_t)GlobalBufferBinding);
  }
  std::string::size_type v8 = (uint64_t *)((char *)this + (void)*(*this - 3));
  __int16 v9 = this[535];
  __int16 v45 = 257;
  char v10 = AGCLLVMBuilder::tryDeducePointeeType(v9, a2);
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, (uint64_t)v9, 0, (uint64_t)v43);
  int v12 = (char *)this + (void)*(*this - 3);
  std::string::size_type v13 = (llvm::Type *)*((void *)v12 + 29);
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v45 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v12 + 40), v13, AlignedLoad, v14, (const llvm::Twine *)v43);
  __int16 v16 = (uint64_t *)((char *)this + (void)*(*this - 3) + 40);
  __int16 v45 = 257;
  int v18 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v17);
  uint64_t v19 = llvm::IRBuilderBase::CreateAlignedLoad(v16, v18, (uint64_t)GEP, 0, (uint64_t)v43);
  __int16 v42 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v16, 38, v19, (uint64_t)a2, (uint64_t)v41);
  if (!this[538])
  {
    std::string::size_type v22 = (llvm::Type *)llvm::PointerType::get();
    unsigned int v23 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 360))();
    v43[0] = "agc.indirect_wg_count_buffer_pointer.";
    uint64_t v44 = v23;
    __int16 v45 = 2051;
    unsigned int v24 = (*(uint64_t (**)(void))(*(*(void ***)((char *)this + (void)*(*this - 3) + 400))[103] + 360))();
    char v25 = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v22, (const llvm::Twine *)v43, v24, 12, 5, 0);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 536), (uint64_t)v25);
  }
  long long v26 = (uint64_t *)((char *)this + (void)*(*this - 3));
  char v27 = this[538];
  __int16 v45 = 257;
  __int16 v28 = AGCLLVMBuilder::tryDeducePointeeType(v27, v20);
  char v29 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v26 + 5, v28, (uint64_t)v27, 0, (uint64_t)v43);
  int v30 = (char *)this + (void)*(*this - 3);
  char v31 = (llvm::Type *)*((void *)v30 + 29);
  unint64_t v32 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v45 = 257;
  char v33 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v30 + 40), v31, v29, v32, (const llvm::Twine *)v43);
  int v34 = (uint64_t *)((char *)this + (void)*(*this - 3) + 40);
  __int16 v45 = 257;
  unint64_t v36 = AGCLLVMBuilder::tryDeducePointeeType(v33, v35);
  uint64_t v37 = llvm::IRBuilderBase::CreateAlignedLoad(v34, v36, (uint64_t)v33, 0, (uint64_t)v43);
  __int16 v42 = 257;
  unsigned int v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v34, 38, v37, (uint64_t)a2, (uint64_t)v41);
  char v39 = (llvm::IRBuilderBase *)((char *)this + (void)*(*this - 3) + 40);
  __int16 v45 = 257;
  return llvm::IRBuilderBase::CreateMul(v39, Cast, v38, (const llvm::Twine *)v43);
}

uint64_t AGCLLVMUserMeshShaderSW::usesCustomBorderColor(AGCLLVMUserMeshShaderSW *this)
{
  return (*(unsigned __int8 *)(*((void *)this + 565) + 16) >> 5) & 1;
}

void AGCLLVMUserMeshShaderSW::generateAuxiliaryShaders(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v3 = (uint64_t *)(v2 + 32);
  uint64_t v4 = *((void *)v2 + 50);
  uint64_t v5 = *(void *)(v4 + 1392);
  if (v5) {
    size_t v6 = strlen(*(const char **)(v4 + 1392));
  }
  else {
    size_t v6 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v3, v5, v6, v3[18], v3[24], v3[21]);
  unint64_t v7 = (char *)this + *(void *)(*(void *)this - 24);
  std::string::size_type v8 = (uint64_t *)(v7 + 32);
  uint64_t v9 = *((void *)v7 + 50);
  uint64_t v10 = *(void *)(v9 + 1448);
  if (v10) {
    size_t v11 = strlen(*(const char **)(v9 + 1448));
  }
  else {
    size_t v11 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v8, v10, v11, v8[18], v8[24], v8[21]);
  int v12 = (char *)this + *(void *)(*(void *)this - 24);
  std::string::size_type v13 = (uint64_t *)(v12 + 32);
  uint64_t v14 = *((void *)v12 + 50);
  uint64_t v15 = *(void *)(v14 + 1376);
  if (v15) {
    size_t v16 = strlen(*(const char **)(v14 + 1376));
  }
  else {
    size_t v16 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v13, v15, v16, v13[18], v13[24], v13[25]);
  uint64_t v17 = (char *)this + *(void *)(*(void *)this - 24);
  int v18 = (uint64_t *)(v17 + 32);
  uint64_t v19 = *((void *)v17 + 50);
  uint64_t v20 = *(void *)(v19 + 1384);
  if (v20) {
    size_t v21 = strlen(*(const char **)(v19 + 1384));
  }
  else {
    size_t v21 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v18, v20, v21, v18[18], v18[24], v18[21]);
  std::string::size_type v22 = (char *)this + *(void *)(*(void *)this - 24);
  unsigned int v23 = (uint64_t *)(v22 + 32);
  uint64_t v24 = *((void *)v22 + 50);
  uint64_t v25 = *(void *)(v24 + 1432);
  if (v25) {
    size_t v26 = strlen(*(const char **)(v24 + 1432));
  }
  else {
    size_t v26 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v23, v25, v26, v23[18], v23[24], v23[25]);
  char v27 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v28 = (uint64_t *)(v27 + 32);
  uint64_t v29 = *((void *)v27 + 50);
  uint64_t v30 = *(void *)(v29 + 1440);
  if (v30) {
    size_t v31 = strlen(*(const char **)(v29 + 1440));
  }
  else {
    size_t v31 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v28, v30, v31, v28[18], v28[24], v28[21]);
  unint64_t v32 = (char *)this + *(void *)(*(void *)this - 24);
  char v33 = (uint64_t *)(v32 + 32);
  uint64_t v34 = *((void *)v32 + 50);
  uint64_t v35 = *(void *)(v34 + 1400);
  if (v35) {
    size_t v36 = strlen(*(const char **)(v34 + 1400));
  }
  else {
    size_t v36 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v33, v35, v36, v33[18], v33[24], v33[21]);
  uint64_t v37 = (char *)this + *(void *)(*(void *)this - 24);
  unsigned int v38 = (uint64_t *)(v37 + 32);
  uint64_t v39 = *((void *)v37 + 50);
  uint64_t v40 = *(void *)(v39 + 1456);
  if (v40) {
    size_t v41 = strlen(*(const char **)(v39 + 1456));
  }
  else {
    size_t v41 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v38, v40, v41, v38[18], v38[24], v38[21]);
  __int16 v42 = (char *)this + *(void *)(*(void *)this - 24);
  char v43 = (uint64_t *)(v42 + 32);
  uint64_t v44 = *((void *)v42 + 50);
  uint64_t v45 = *(void *)(v44 + 1408);
  if (v45) {
    size_t v46 = strlen(*(const char **)(v44 + 1408));
  }
  else {
    size_t v46 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v43, v45, v46, v43[18], v43[24], v43[21]);
  char v47 = (char *)this + *(void *)(*(void *)this - 24);
  int v48 = (uint64_t *)(v47 + 32);
  uint64_t v49 = *((void *)v47 + 50);
  uint64_t v50 = *(void *)(v49 + 1464);
  if (v50) {
    size_t v51 = strlen(*(const char **)(v49 + 1464));
  }
  else {
    size_t v51 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v48, v50, v51, v48[18], v48[24], v48[21]);
  char v52 = (char *)this + *(void *)(*(void *)this - 24);
  char v53 = (uint64_t *)(v52 + 32);
  uint64_t v54 = *((void *)v52 + 50);
  uint64_t v55 = *(void *)(v54 + 1416);
  if (v55) {
    size_t v56 = strlen(*(const char **)(v54 + 1416));
  }
  else {
    size_t v56 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v53, v55, v56, v53[18], v53[24], v53[25]);
  std::string v57 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v58 = (uint64_t *)(v57 + 32);
  uint64_t v59 = *((void *)v57 + 50);
  uint64_t v60 = *(void *)(v59 + 1472);
  if (v60) {
    size_t v61 = strlen(*(const char **)(v59 + 1472));
  }
  else {
    size_t v61 = 0;
  }
  AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v58, v60, v61, v58[18], v58[24], v58[25]);
  uint64_t v62 = *(void *)(*(void *)this - 24);
  uint64_t v63 = (char *)operator new(0x30uLL);
  uint64_t v64 = 0;
  std::string::size_type v65 = (const double *)((char *)this + v62 + 200);
  float64x2_t v66 = vld1q_dup_f64(v65);
  do
  {
    *(float64x2_t *)&v63[v64] = v66;
    v64 += 16;
  }
  while (v64 != 48);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  *(_WORD *)(v67 + 18) = *(_WORD *)(v67 + 18) & 0xC00F | 0x660;
  operator new();
}

llvm::Value *AGCLLVMUserMeshShaderSW::getBasePointer(void *a1, llvm::Value *a2, int a3, unsigned int a4, uint64_t a5, llvm::Value *a6)
{
  size_t v11 = *(llvm::Type **)((char *)a1 + *(void *)(*a1 - 24) + 216);
  int v12 = (llvm::Type *)llvm::PointerType::get();
  std::string::size_type v13 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v14 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  if (a3)
  {
    EmulationStateBuffer = (llvm::Type **)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(a1, 6, 0);
    __int16 v33 = 257;
    Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v14, EmulationStateBuffer, v12, (const llvm::Twine *)v32);
  }
  else
  {
    uint64_t v17 = (llvm::Type **)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(a1, 5, 0);
    __int16 v35 = 257;
    Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v14, v17, v12, (const llvm::Twine *)v34);
  }
  int v18 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v35 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v18, a2, v19, (const llvm::Twine *)v34);
  __int16 v33 = 257;
  uint64_t GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v18, v11, PointerCast, Mul, (const llvm::Twine *)v32);
  uint64_t v22 = (uint64_t)&a1[6 * a4 + 688];
  unsigned int v23 = *(llvm::Value **)v22;
  if (!*(unsigned char *)(v22 + 12)) {
    a6 = (llvm::Value *)llvm::ConstantInt::get();
  }
  uint64_t v24 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v25 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  __int16 v35 = 257;
  size_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v25, a6, v24, (const llvm::Twine *)v34);
  __int16 v33 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v25, v23, v26, (const llvm::Twine *)v32);
  __int16 v28 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  __int16 v35 = 257;
  uint64_t v29 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v28, v11, GEP, Add, (const llvm::Twine *)v34);
  uint64_t v30 = (llvm::IRBuilderBase *)((char *)a1 + *(void *)(*a1 - 24) + 40);
  __int16 v35 = 257;
  return llvm::IRBuilderBase::CreatePointerCast(v30, v29, v13, (const llvm::Twine *)v34);
}

uint64_t llvm::IRBuilderBase::CreateAShr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 9) + 168))(*((void *)this + 9));
    if (v6) {
      BOOL v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
    }
  }
  else
  {
    uint64_t v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

llvm::Value *AGCLLVMUserMeshShaderSW::generateAuxiliaryShaders(void)::$_0::operator()(llvm::Value *result)
{
  void v11[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = **(void **)result;
  if (v1)
  {
    uint64_t v2 = result;
    __int16 v3 = (void *)*((void *)result + 1);
    uint64_t v4 = (char *)v3 + *(void *)(*v3 - 24);
    uint64_t v5 = *((void *)v4 + 29);
    __int16 v10 = 257;
    **(void **)uint64_t result = llvm::IRBuilderBase::CreateCast((uint64_t)(v4 + 40), 49, v1, v5, (uint64_t)v9);
    uint64_t v6 = (uint64_t)v3 + *(void *)(*v3 - 24) + 32;
    if (**((unsigned char **)v2 + 2)) {
      BOOL v7 = (uint64_t *)*((void *)v2 + 3);
    }
    else {
      BOOL v7 = (uint64_t *)*((void *)v2 + 5);
    }
    uint64_t v8 = *v7;
    v11[0] = **((void **)v2 + 4);
    v11[1] = **(void **)v2;
    __int16 v10 = 257;
    uint64_t result = llvm::IRBuilderBase::CreateCall(v6 + 8, **(void **)(*(void *)v8 + 16), v8, (uint64_t)v11, 2, (uint64_t)v9);
    **(void **)uint64_t v2 = 0;
    **((void **)v2 + 4) = 0;
  }
  return result;
}

uint64_t AGCLLVMUserMeshShaderSW::markInvariantOutputs(AGCLLVMUserMeshShaderSW *this)
{
  if (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_POS_INVARIANCE", v2))
  {
    BOOL v11 = MGGetBoolAnswer()
       && (uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_POS_INVARIANCE", v9)) != 0
       && *Value != 48
       && atoi(Value) != 0;
    *((unsigned char *)this + 4528) = v11;
  }
  if (*((unsigned char *)this + 4528))
  {
    if (*((unsigned char *)this + 32))
    {
      SimplifyGenericIR(*(llvm::Module **)((char *)this + *(void *)(*(void *)this - 24) + 368), *(unsigned __int8 *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 464) + 378), v3, v4, v5, v6, v7, v8, (char)__p);
      uint64_t Function = llvm::Module::getFunction();
      if (Function)
      {
        uint64_t v13 = *(void *)this;
        uint64_t v14 = *(void **)((char *)this + *(void *)(*(void *)this - 24) + 368);
        std::string __p = 0;
        uint64_t v29 = 0;
        v32[0] = 0;
        v32[1] = 0;
        uint64_t v30 = 0;
        size_t v31 = v32;
        v32[2] = v14;
        char v33 = 0;
        uint64_t v15 = *(void *)(Function + 8);
        if (v15)
        {
          do
          {
            MarkInvariants::addSeed((uint64_t *)&__p, *(llvm::Value **)(*(void *)(v15 + 24)- 32 * (*(_DWORD *)(*(void *)(v15 + 24) + 20) & 0x7FFFFFF)+ 32), 0);
            uint64_t v15 = *(void *)(v15 + 8);
          }
          while (v15);
          uint64_t v13 = *(void *)this;
        }
        if ((MarkInvariants::markInvariant((MarkInvariants *)&__p, (llvm::Type **)((char *)this + *(void *)(v13 - 24) + 32)) & 1) == 0)
        {
          uint64_t v17 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 368);
          uint64_t v18 = v17 + 24;
          for (uint64_t i = *(void *)(v17 + 32); i != v18; uint64_t i = *(void *)(i + 8))
          {
            uint64_t v20 = i - 56;
            if (!i) {
              uint64_t v20 = 0;
            }
            uint64_t v21 = v20 + 72;
            for (uint64_t j = *(void *)(v20 + 80); j != v21; uint64_t j = *(void *)(j + 8))
            {
              uint64_t v23 = j - 24;
              if (!j) {
                uint64_t v23 = 0;
              }
              uint64_t v24 = *(void *)(v23 + 48);
              if (v24 != v23 + 40)
              {
LABEL_40:
                while (j != v21)
                {
                  if (v24) {
                    uint64_t v25 = (llvm::Instruction *)(v24 - 24);
                  }
                  else {
                    uint64_t v25 = 0;
                  }
                  if (llvm::FPMathOperator::classof((uint64_t)v25)) {
                    llvm::Instruction::setFast(v25);
                  }
                  uint64_t v24 = *(void *)(v24 + 8);
                  uint64_t v26 = j - 24;
                  if (!j) {
                    uint64_t v26 = 0;
                  }
                  if (v24 == v26 + 40)
                  {
                    while (1)
                    {
                      uint64_t j = *(void *)(j + 8);
                      if (j == v21) {
                        goto LABEL_41;
                      }
                      uint64_t v27 = j - 24;
                      if (!j) {
                        uint64_t v27 = 0;
                      }
                      uint64_t v24 = *(void *)(v27 + 48);
                      if (v24 != v27 + 40) {
                        goto LABEL_40;
                      }
                    }
                  }
                }
                break;
              }
            }
LABEL_41:
            ;
          }
        }
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v32[0]);
        if (__p)
        {
          uint64_t v29 = __p;
          operator delete(__p);
        }
      }
    }
  }
  return 1;
}

uint64_t AGCLLVMUserMeshShaderSW::replacePreRuntimeLinkBuiltins(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(llvm::LLVMContext ***)((char *)this + *(void *)(*(void *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v133, *v2);
  std::string v72 = this;
  int v139 = this;
  uint64_t v133 = &unk_1F25784D0;
  v138[25] = v2;
  {
    std::string::basic_string[abi:nn180100]<0>(AGCLLVMUserMeshShaderSW::replacePreRuntimeLinkBuiltins(void)::workitem_functions, "air.set_position_mesh");
    dword_1EA612E70 = 0;
    byte_1EA612E74 = 0;
    dword_1EA612E78 = 1;
    qword_1EA612E80 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetPosition;
    unk_1EA612E88 = 0;
    dword_1EA612E90 = 7;
    word_1EA612E94 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612E98, "air.set_point_size_mesh");
    dword_1EA612EB0 = 0;
    byte_1EA612EB4 = 0;
    dword_1EA612EB8 = 1;
    qword_1EA612EC0 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetPointSize;
    unk_1EA612EC8 = 0;
    dword_1EA612ED0 = 7;
    word_1EA612ED4 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612ED8, "air.set_clip_distance_mesh");
    dword_1EA612EF0 = 0;
    byte_1EA612EF4 = 0;
    dword_1EA612EF8 = 1;
    qword_1EA612F00 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetClipDistance;
    unk_1EA612F08 = 0;
    dword_1EA612F10 = 9;
    word_1EA612F14 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612F18, "air.set_render_target_array_index_mesh");
    dword_1EA612F30 = 1;
    byte_1EA612F34 = 0;
    dword_1EA612F38 = 1;
    qword_1EA612F40 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetLayerId;
    unk_1EA612F48 = 0;
    dword_1EA612F50 = 7;
    word_1EA612F54 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612F58, "air.set_viewport_array_index_mesh");
    dword_1EA612F70 = 1;
    byte_1EA612F74 = 0;
    dword_1EA612F78 = 1;
    qword_1EA612F80 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetViewportId;
    unk_1EA612F88 = 0;
    dword_1EA612F90 = 7;
    word_1EA612F94 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612F98, "air.set_primitive_id_mesh");
    dword_1EA612FB0 = 0;
    byte_1EA612FB4 = 0;
    dword_1EA612FB8 = 1;
    qword_1EA612FC0 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetPrimitiveId;
    unk_1EA612FC8 = 0;
    dword_1EA612FD0 = 7;
    word_1EA612FD4 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA612FD8, "air.set_primitive_culled_mesh");
    dword_1EA612FF0 = 0;
    byte_1EA612FF4 = 0;
    dword_1EA612FF8 = 1;
    qword_1EA613000 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetPrimitiveCulled;
    unk_1EA613008 = 0;
    dword_1EA613010 = 7;
    word_1EA613014 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA613018, "air.set_index_mesh");
    dword_1EA613030 = 0;
    byte_1EA613034 = 0;
    dword_1EA613038 = 1;
    qword_1EA613040 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetIndex;
    unk_1EA613048 = 0;
    dword_1EA613050 = 7;
    word_1EA613054 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA613058, "air.set_indices_mesh.v2i8");
    dword_1EA613070 = 0;
    byte_1EA613074 = 0;
    dword_1EA613078 = 1;
    qword_1EA613080 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetIndices;
    qword_1EA613088 = 0;
    dword_1EA613090 = 7;
    word_1EA613094 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA613098, "air.set_indices_mesh.v4i8");
    dword_1EA6130B0 = 0;
    byte_1EA6130B4 = 0;
    dword_1EA6130B8 = 1;
    qword_1EA6130C0 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetIndices;
    qword_1EA6130C8 = 0;
    dword_1EA6130D0 = 7;
    word_1EA6130D4 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA6130D8, "air.set_vertex_data_mesh");
    dword_1EA6130F0 = 2;
    byte_1EA6130F4 = 0;
    dword_1EA6130F8 = 1;
    qword_1EA613100 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetVertexData;
    qword_1EA613108 = 0;
    dword_1EA613110 = 9;
    word_1EA613114 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA613118, "air.set_primitive_data_mesh");
    dword_1EA613130 = 2;
    byte_1EA613134 = 0;
    dword_1EA613138 = 1;
    qword_1EA613140 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetPrimitiveData;
    qword_1EA613148 = 0;
    dword_1EA613150 = 9;
    word_1EA613154 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA613158, "air.set_primitive_count_mesh");
    dword_1EA613170 = 0;
    byte_1EA613174 = 0;
    dword_1EA613178 = 1;
    qword_1EA613180 = (uint64_t)AGCLLVMUserMeshShaderSW::buildSetPrimitiveCount;
    qword_1EA613188 = 0;
    dword_1EA613190 = 5;
    word_1EA613194 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA613198, "agc.gpe.get_payload_id");
    dword_1EA6131B0 = 0;
    byte_1EA6131B4 = 0;
    dword_1EA6131B8 = 1;
    qword_1EA6131C0 = (uint64_t)AGCLLVMUserMeshShaderSW::getGlobalLinearGroupID;
    qword_1EA6131C8 = 0;
    dword_1EA6131D0 = 1;
    word_1EA6131D4 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA6131D8, "air.object_threadgroup_position_in_grid");
    dword_1EA6131F0 = 0;
    byte_1EA6131F4 = 0;
    dword_1EA6131F8 = 1;
    qword_1EA613200 = (uint64_t)AGCLLVMUserMeshShaderSW::buildOSTGGridPosition;
    qword_1EA613208 = 0;
    dword_1EA613210 = 1;
    word_1EA613214 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA613218, "air.get_global_size");
    dword_1EA613230 = 1;
    byte_1EA613234 = 1;
    dword_1EA613238 = 1;
    qword_1EA613240 = (uint64_t)AGCLLVMUserMeshShaderSW::buildGlobalSizeUbergrid;
    qword_1EA613248 = 0;
    dword_1EA613250 = 4;
    word_1EA613254 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA613258, "air.get_global_id");
    dword_1EA613270 = 1;
    byte_1EA613274 = 1;
    dword_1EA613278 = 1;
    qword_1EA613280 = (uint64_t)AGCLLVMUserMeshShaderSW::buildGlobalIDUbergrid;
    qword_1EA613288 = 0;
    dword_1EA613290 = 4;
    word_1EA613294 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA613298, "air.get_num_groups");
    dword_1EA6132B0 = 1;
    byte_1EA6132B4 = 1;
    dword_1EA6132B8 = 1;
    qword_1EA6132C0 = (uint64_t)AGCLLVMUserMeshShaderSW::buildNumGroupsUbergrid;
    qword_1EA6132C8 = 0;
    dword_1EA6132D0 = 4;
    word_1EA6132D4 = 0;
    std::string::basic_string[abi:nn180100]<0>(qword_1EA6132D8, "air.get_group_id");
    dword_1EA6132F0 = 1;
    byte_1EA6132F4 = 1;
    dword_1EA6132F8 = 1;
    qword_1EA613300 = (uint64_t)AGCLLVMUserMeshShaderSW::buildGroupIDSW;
    qword_1EA613308 = 0;
    dword_1EA613310 = 4;
    word_1EA613314 = 0;
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_421, 0, &dword_1CAC02000);
  }
  uint64_t v3 = 0;
  uint64_t v4 = &v95;
  do
  {
    std::string v77 = &AGCLLVMUserMeshShaderSW::replacePreRuntimeLinkBuiltins(void)::workitem_functions[64 * v3];
    if (!v77[28] || (*(unsigned char *)(*((void *)v72 + 565) + 17) & 1) == 0)
    {
      std::string::basic_string[abi:nn180100]<0>(&__p, "");
      int v130 = (const void **)&v132;
      uint64_t v131 = 0x100000000;
      llvm::SmallVectorImpl<std::string>::append<std::string const*,void>((uint64_t)&v130, &__p, &v125);
      if ((v124[7] & 0x80000000) != 0) {
        operator delete((void *)__p);
      }
      std::string::basic_string[abi:nn180100]<0>(&__p, ".i8");
      std::string::basic_string[abi:nn180100]<0>(&v125, ".i16");
      std::string::basic_string[abi:nn180100]<0>(v126, ".i32");
      v128[0] = (char *)&v129;
      v128[1] = (char *)0x300000000;
      llvm::SmallVectorImpl<std::string>::append<std::string const*,void>((uint64_t)v128, &__p, v127);
      for (uint64_t i = 0; i != -9; i -= 3)
      {
        if (SHIBYTE(v126[i + 2]) < 0) {
          operator delete((void *)v126[i]);
        }
      }
      std::string::basic_string[abi:nn180100]<0>(v99, ".i1");
      std::string::basic_string[abi:nn180100]<0>(&v99[3], ".i8");
      std::string::basic_string[abi:nn180100]<0>(v101, ".i16");
      std::string::basic_string[abi:nn180100]<0>(v102, ".i32");
      std::string::basic_string[abi:nn180100]<0>(v103, ".f16");
      std::string::basic_string[abi:nn180100]<0>(v104, ".f32");
      std::string::basic_string[abi:nn180100]<0>(v105, ".v2i1");
      std::string::basic_string[abi:nn180100]<0>(v106, ".v2i8");
      std::string::basic_string[abi:nn180100]<0>(v107, ".v2i16");
      std::string::basic_string[abi:nn180100]<0>(v108, ".v2i32");
      std::string::basic_string[abi:nn180100]<0>(v109, ".v2f16");
      std::string::basic_string[abi:nn180100]<0>(v110, ".v2f32");
      std::string::basic_string[abi:nn180100]<0>(v111, ".v3i1");
      std::string::basic_string[abi:nn180100]<0>(v112, ".v3i8");
      std::string::basic_string[abi:nn180100]<0>(v113, ".v3i16");
      std::string::basic_string[abi:nn180100]<0>(v114, ".v3i32");
      std::string::basic_string[abi:nn180100]<0>(v115, ".v3f16");
      std::string::basic_string[abi:nn180100]<0>(v116, ".v3f32");
      std::string::basic_string[abi:nn180100]<0>(v117, ".v4i1");
      std::string::basic_string[abi:nn180100]<0>(v118, ".v4i8");
      std::string::basic_string[abi:nn180100]<0>(v119, ".v4i16");
      std::string::basic_string[abi:nn180100]<0>(v120, ".v4i32");
      std::string::basic_string[abi:nn180100]<0>(v121, ".v4f16");
      std::string::basic_string[abi:nn180100]<0>(v122, ".v4f32");
      *(void *)&long long __p = v124;
      *((void *)&__p + 1) = 0x1800000000;
      llvm::SmallVectorImpl<std::string>::append<std::string const*,void>((uint64_t)&__p, (long long *)v99, &__p);
      uint64_t v6 = 72;
      do
      {
        if (SHIBYTE(v99[v6 - 1]) < 0) {
          operator delete((void *)v97[v6 + 2]);
        }
        v6 -= 3;
      }
      while (v6 * 8);
      int v7 = *(_DWORD *)&AGCLLVMUserMeshShaderSW::replacePreRuntimeLinkBuiltins(void)::workitem_functions[64 * v3 + 24];
      if (v7 == 1)
      {
        p_p = (long long *)v128;
      }
      else
      {
        if (v7 != 2) {
          goto LABEL_20;
        }
        p_p = &__p;
      }
      llvm::SmallVectorImpl<std::string>::operator=((uint64_t)&v130, (uint64_t)p_p);
LABEL_20:
      if (!v131)
      {
LABEL_137:
        llvm::SmallVector<std::string,24u>::~SmallVector((char **)&__p);
        llvm::SmallVector<std::string,24u>::~SmallVector(v128);
        llvm::SmallVector<std::string,24u>::~SmallVector((char **)&v130);
        goto LABEL_138;
      }
      uint64_t v9 = v130;
      std::string v76 = (char *)&v130[3 * v131];
      __int16 v10 = &AGCLLVMUserMeshShaderSW::replacePreRuntimeLinkBuiltins(void)::workitem_functions[64 * v3];
      std::string v80 = v10 + 32;
      std::string v82 = (uint64_t *)(v10 + 48);
      std::string v83 = (const char **)(v10 + 40);
      std::string v73 = v10 + 61;
      uint64_t v74 = v3;
      std::string v84 = v10 + 60;
      std::string v85 = v10 + 56;
      while (1)
      {
        std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v89, (const void **)v77, v9);
        uint64_t Function = llvm::Module::getFunction();
        if (Function) {
          break;
        }
LABEL_134:
        if (v90 < 0) {
          operator delete(v89);
        }
        v9 += 3;
        if (v9 == (const void **)v76) {
          goto LABEL_137;
        }
      }
      std::string v78 = v9;
      std::string v79 = (llvm::Function *)Function;
      if (*v85 == 12)
      {
        uint64_t v14 = *(void *)(Function + 8);
        while (v14)
        {
          uint64_t v15 = *(void *)(v14 + 24);
          uint64_t v14 = *(void *)(v14 + 8);
          size_t v16 = *v83;
          uint64_t v17 = (void *)((char *)v139 + (*v82 >> 1));
          if (*v82) {
            size_t v16 = *(const char **)(*v17 + v16);
          }
          ((void (*)(void *, uint64_t))v16)(v17, v15);
        }
        goto LABEL_133;
      }
      if (*v85 == 11)
      {
        int v12 = (char *)*v83;
        if (*v83)
        {
          size_t v13 = strlen(*v83);
          v99[0] = &v99[3];
          *(_OWORD *)&v99[1] = xmmword_1CADD6290;
          llvm::SmallVectorImpl<char>::append<char const*,void>(v99, v12, &v12[v13]);
        }
        else
        {
          v99[2] = (void *)64;
          v99[0] = &v99[3];
          v99[1] = 0;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(v99, ".", "");
        if (v99[2] < v99[1]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        if (v99[0] != &v99[3]) {
          free(v99[0]);
        }
        goto LABEL_133;
      }
      uint64_t v18 = **(void **)(*(void *)(Function + 24) + 16);
      BOOL v19 = (*(_DWORD *)(v18 + 8) & 0xFE) != 0x12 || *v73 == 0;
      int v20 = !v19;
      if (v19) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = *(unsigned int *)(v18 + 32);
      }
      uint64_t v86 = v21;
      int v75 = v136;
      uint64_t v22 = *(void *)(Function + 8);
      if (!v22)
      {
LABEL_127:
        int v136 = v75;
        uint64_t v3 = v74;
LABEL_133:
        llvm::Function::eraseFromParent(v79);
        uint64_t v9 = v78;
        goto LABEL_134;
      }
      while (1)
      {
        uint64_t v23 = *(llvm::Instruction **)(v22 + 24);
        uint64_t v81 = *(void *)(v22 + 8);
        if (*v80 == 1) {
          break;
        }
        if (*v80 == 2)
        {
          int v24 = 121;
LABEL_46:
          int v136 = v24;
        }
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v134, v23);
        uint64_t v25 = llvm::UndefValue::get();
        if (v86)
        {
          uint64_t v26 = 0;
          do
          {
            std::string v87 = (llvm::Value *)v25;
            uint64_t v88 = v26;
            uint64_t v27 = v4;
            v101[0] = 0;
            long long v100 = 0u;
            memset(v99, 0, sizeof(v99));
            unint64_t v28 = llvm::CallBase::arg_end(v23) - (void)v23 + 32 * (*((_DWORD *)v23 + 5) & 0x7FFFFFF);
            if ((v28 & 0x1FFFFFFFE0) != 0)
            {
              uint64_t v29 = (v28 >> 5);
              uint64_t v30 = v99;
              size_t v31 = v23;
              do
              {
                unint64_t v32 = (llvm::Value **)((char *)v31 - 32 * (*((_DWORD *)v23 + 5) & 0x7FFFFFF));
                char v33 = *v32;
                llvm::IRBuilderBase *v30 = *v32;
                if (v20 && (*(_DWORD *)(*(void *)v33 + 8) & 0xFE) == 0x12)
                {
                  __int16 v98 = 257;
                  uint64_t v34 = (llvm::Value *)llvm::ConstantInt::get();
                  llvm::IRBuilderBase *v30 = (void *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v134, v33, v34, (const llvm::Twine *)v97);
                }
                ++v30;
                size_t v31 = (llvm::Instruction *)((char *)v31 + 32);
                --v29;
              }
              while (v29);
            }
            if (*v84)
            {
              __int16 v35 = *(llvm::Type **)v99[0];
              uint64_t v4 = v27;
              if ((*(_DWORD *)(*(void *)v99[0] + 8) & 0xFE) == 0x12) {
                __int16 v35 = (llvm::Type *)**((void **)v35 + 2);
              }
              v97[0] = llvm::Type::getPrimitiveSizeInBits(v35);
              v97[1] = v36;
              if (llvm::TypeSize::operator unsigned long long() == 32)
              {
                int v37 = 0;
              }
              else
              {
                unsigned int v38 = (llvm::Type *)v138[4];
                if ((*(_DWORD *)(*(void *)v99[0] + 8) & 0xFE) == 0x12) {
                  unsigned int v38 = (llvm::Type *)llvm::FixedVectorType::get();
                }
                if ((v28 & 0x1FFFFFFFE0) != 0)
                {
                  uint64_t v39 = (v28 >> 5);
                  uint64_t v40 = v99;
                  do
                  {
                    size_t v41 = (llvm::Value *)*v40;
                    __int16 v98 = 257;
                    *v40++ = (void *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v134, v41, v38, (const llvm::Twine *)v97);
                    --v39;
                  }
                  while (v39);
                }
                int v37 = 1;
              }
            }
            else
            {
              int v37 = 0;
              uint64_t v4 = v27;
            }
            if (llvm::FPMathOperator::classof((uint64_t)v23)) {
              unsigned int FastMathFlags = llvm::Instruction::getFastMathFlags(v23);
            }
            else {
              unsigned int FastMathFlags = 0;
            }
            char v43 = (char *)v139 + *(void *)(*(void *)v139 - 24);
            long long v94 = v135[2];
            llvm::IRBuilderBase::getCurrentDebugLocation(v4, (llvm::IRBuilderBase *)v134);
            int v96 = v136;
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v94, (uint64_t)(v43 + 40));
            if (v95) {
              llvm::MetadataTracking::untrack();
            }
            switch(*v85)
            {
              case 1:
                uint64_t v44 = *v83;
                uint64_t v45 = (void *)((char *)v139 + (*v82 >> 1));
                if (*v82) {
                  uint64_t v44 = *(const char **)(*v45 + v44);
                }
                uint64_t v59 = ((uint64_t (*)(void *))v44)(v45);
                goto LABEL_113;
              case 2:
                char v53 = *v83;
                uint64_t v54 = *(llvm::Type **)v23;
                uint64_t v55 = (void *)((char *)v139 + (*v82 >> 1));
                if (*v82) {
                  goto LABEL_88;
                }
                goto LABEL_89;
              case 3:
                char v53 = *v83;
                uint64_t v54 = (llvm::Type *)v99[0];
                uint64_t v55 = (void *)((char *)v139 + (*v82 >> 1));
                if ((*v82 & 1) == 0) {
                  goto LABEL_89;
                }
LABEL_88:
                char v53 = *(const char **)(*v55 + v53);
LABEL_89:
                uint64_t v59 = ((uint64_t (*)(void *, llvm::Type *))v53)(v55, v54);
                goto LABEL_113;
              case 4:
                size_t v56 = (unsigned int *)((char *)v99[0] + 24);
                if (*((_DWORD *)v99[0] + 8) >= 0x41u) {
                  size_t v56 = *(unsigned int **)v56;
                }
                int v48 = (void *)*v56;
                size_t v46 = *v83;
                char v47 = *(llvm::Type **)v23;
                uint64_t v49 = (void *)((char *)v139 + (*v82 >> 1));
                if (*v82) {
                  size_t v46 = *(const char **)(*v49 + v46);
                }
                goto LABEL_98;
              case 5:
                size_t v46 = *v83;
                char v47 = (llvm::Type *)v99[0];
                int v48 = v99[1];
                uint64_t v49 = (void *)((char *)v139 + (*v82 >> 1));
                if (*v82) {
                  size_t v46 = *(const char **)(*v49 + v46);
                }
LABEL_98:
                uint64_t v59 = ((uint64_t (*)(void *, llvm::Type *, void *))v46)(v49, v47, v48);
                goto LABEL_113;
              case 6:
                uint64_t v60 = *v83;
                size_t v61 = (void **)v99[0];
                uint64_t v62 = (const char *)v99[1];
                uint64_t v63 = (void *)((char *)v139 + (*v82 >> 1));
                if (*v82) {
                  uint64_t v60 = *(const char **)(*v63 + v60);
                }
                unint64_t v64 = FastMathFlags;
                goto LABEL_112;
              case 7:
                uint64_t v60 = *v83;
                size_t v61 = (void **)v99[0];
                uint64_t v62 = (const char *)v99[1];
                unint64_t v64 = (unint64_t)v99[2];
                uint64_t v63 = (void *)((char *)v139 + (*v82 >> 1));
                if ((*v82 & 1) == 0) {
                  goto LABEL_112;
                }
                uint64_t v59 = (*(uint64_t (**)(void *, void *, void *, void *))(*v63 + v60))(v63, v99[0], v99[1], v99[2]);
                goto LABEL_113;
              case 8:
                uint64_t v50 = *v83;
                size_t v51 = (llvm::Type *)v99[0];
                std::string v57 = (void **)v99[1];
                uint64_t v58 = (const char *)v99[2];
                char v52 = (void *)((char *)v139 + (*v82 >> 1));
                if (*v82) {
                  uint64_t v50 = *(const char **)(*v52 + v50);
                }
                uint64_t v66 = FastMathFlags;
                goto LABEL_104;
              case 9:
                uint64_t v60 = *v83;
                uint64_t v63 = (void *)((char *)v139 + (*v82 >> 1));
                if (*v82) {
                  uint64_t v60 = *(const char **)(*v63 + v60);
                }
                size_t v61 = v99;
                uint64_t v62 = "";
                unint64_t v64 = 0;
LABEL_112:
                uint64_t v59 = ((uint64_t (*)(void *, void **, const char *, unint64_t))v60)(v63, v61, v62, v64);
                goto LABEL_113;
              case 0xA:
                uint64_t v50 = *v83;
                size_t v51 = *(llvm::Type **)v23;
                char v52 = (void *)((char *)v139 + (*v82 >> 1));
                if (*v82) {
                  uint64_t v50 = *(const char **)(*v52 + v50);
                }
                std::string v57 = v99;
                uint64_t v58 = "";
                uint64_t v66 = 0;
LABEL_104:
                uint64_t v59 = ((uint64_t (*)(void *, llvm::Type *, void **, const char *, uint64_t))v50)(v52, v51, v57, v58, v66);
LABEL_113:
                FPTrunc = (llvm::Value *)v59;
                break;
              default:
                FPTrunc = 0;
                break;
            }
            uint64_t v67 = (char *)v139 + *(void *)(*(void *)v139 - 24);
            long long v91 = *(_OWORD *)(v67 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation(&v92, (llvm::IRBuilderBase *)(v67 + 40));
            int v93 = *((_DWORD *)v67 + 34);
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v91, (uint64_t)v134);
            if (v92) {
              llvm::MetadataTracking::untrack();
            }
            if (v37)
            {
              std::string v68 = *(llvm::Type **)v23;
              if (v20 && (*((_DWORD *)v68 + 2) & 0xFE) == 0x12) {
                std::string v68 = (llvm::Type *)**((void **)v68 + 2);
              }
              __int16 v98 = 257;
              FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v134, FPTrunc, v68, (const llvm::Twine *)v97);
            }
            if (v20)
            {
              __int16 v98 = 257;
              uint64_t v69 = (llvm::Value *)llvm::ConstantInt::get();
              FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v134, v87, FPTrunc, v69, (const llvm::Twine *)v97);
            }
            uint64_t v26 = v88 + 1;
            uint64_t v25 = (uint64_t)FPTrunc;
          }
          while (v88 + 1 != v86);
        }
        if (*(void *)v23 != v138[1]) {
          llvm::Value::replaceAllUsesWith();
        }
        llvm::Instruction::eraseFromParent(v23);
        uint64_t v22 = v81;
        if (!v81) {
          goto LABEL_127;
        }
      }
      int v24 = 0;
      goto LABEL_46;
    }
LABEL_138:
    ++v3;
  }
  while (v3 != 19);
  std::string v70 = (llvm::Value *)*((void *)v72 + 569);
  if (v70) {
    AGCLLVMUserObjectShaderBase::mutateValueAddressSpace(v72, v70);
  }
  AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(v72, 7, 1);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v138);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v137);
  if (v134[0] != v135) {
    free(v134[0]);
  }
  return 1;
}

uint64_t AGCLLVMUserMeshShaderSW::buildGroupIDSW(AGCLLVMUserMeshShaderSW *this, llvm::Type *a2, int a3)
{
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  int v9 = a3 + 1;
  unsigned char v8[16] = 257;
  return llvm::IRBuilderBase::CreateExtractValue((uint64_t)v6, GridProperties, (uint64_t)&v9, 1, (uint64_t)v8);
}

uint64_t AGCLLVMUserMeshShaderSW::getGridProperties(AGCLLVMUserMeshShaderSW *this)
{
  v69[0] = *MEMORY[0x1E4F143B8];
  EmulationStateCacheForCurrentuint64_t Function = AGCLLVMUserObjectShaderBase::getEmulationStateCacheForCurrentFunction(this);
  uint64_t v3 = EmulationStateCacheForCurrentFunction[35];
  if (!v3)
  {
    uint64_t v4 = EmulationStateCacheForCurrentFunction;
    uint64_t v5 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 33);
    uint64_t v6 = (char *)this + *(void *)(*(void *)this - 24);
    long long v49 = *(_OWORD *)(v6 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v50, (llvm::IRBuilderBase *)(v6 + 40));
    int v51 = *((_DWORD *)v6 + 34);
    int v7 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v8 = (llvm::IRBuilderBase *)(v7 + 40);
    uint64_t v9 = *(void *)(*(void *)(*((void *)v7 + 11) + 56) + 80);
    if (v9) {
      __int16 v10 = (llvm::BasicBlock *)(v9 - 24);
    }
    else {
      __int16 v10 = 0;
    }
    uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v10);
    if (FirstInsertionPt) {
      int v12 = (llvm::Instruction *)(FirstInsertionPt - 24);
    }
    else {
      int v12 = 0;
    }
    llvm::IRBuilderBase::SetInsertPoint(v8, v12);
    if (!llvm::StructType::getTypeByName())
    {
      uint64_t v55 = *(void **)((char *)this + *(void *)(*(void *)this - 24) + 232);
      uint64_t v56 = (uint64_t)v55;
      v57[0] = v55;
      v57[1] = v55;
      uint64_t v58 = v55;
      uint64_t v59 = v55;
      uint64_t v60 = v55;
      size_t v61 = v55;
      uint64_t v62 = v55;
      llvm::StructType::create();
    }
    uint64_t v13 = AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232), 0);
    uint64_t v45 = AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232), 1);
    uint64_t v14 = AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232), 2);
    char v52 = v54;
    uint64_t v53 = 0x600000000;
    if (*(unsigned char *)(*((void *)this + 565) + 17))
    {
      uint64_t __src = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232);
      uint64_t v64 = __src;
      uint64_t v65 = __src;
      uint64_t v66 = __src;
      uint64_t v67 = __src;
      uint64_t v68 = __src;
      uint64_t v55 = v57;
      uint64_t v56 = 0x600000000;
      llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v55, &__src, v69);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      uint64_t v20 = v36;
      if (v55 != v57) {
        free(v55);
      }
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v13);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v45);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v14);
      uint64_t v37 = (*(uint64_t (**)(AGCLLVMUserMeshShaderSW *, void, void))(*(void *)this + 504))(this, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232), 0);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v37);
      uint64_t v38 = (*(uint64_t (**)(AGCLLVMUserMeshShaderSW *, void, uint64_t))(*(void *)this + 504))(this, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232), 1);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v38);
      uint64_t v14 = (*(uint64_t (**)(AGCLLVMUserMeshShaderSW *, void, uint64_t))(*(void *)this + 504))(this, *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232), 2);
    }
    else
    {
      uint64_t v43 = v13;
      uint64_t v44 = v5;
      uint64_t v15 = llvm::PointerType::get();
      uint64_t v16 = llvm::PointerType::get();
      uint64_t v17 = llvm::PointerType::get();
      uint64_t v18 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232);
      uint64_t __src = v15;
      uint64_t v64 = v16;
      uint64_t v65 = v17;
      uint64_t v66 = v18;
      uint64_t v67 = v18;
      uint64_t v68 = v18;
      uint64_t v55 = v57;
      uint64_t v56 = 0x600000000;
      llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v55, &__src, v69);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      uint64_t v20 = v19;
      if (v55 != v57) {
        free(v55);
      }
      uint64_t EmulationStateBuffer = AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 1, 1);
      uint64_t v22 = AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 0, 1);
      llvm::IRBuilderBase::SetInsertPoint((char **)((char *)this + *(void *)(*(void *)this - 24) + 40), *(char **)(v22 + 40), *(char **)(v22 + 32));
      uint64_t v23 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
      int v24 = (llvm::Type **)*((void *)this + 561);
      LOWORD(v58) = 257;
      uint64_t v26 = AGCLLVMBuilder::tryDeducePointeeType(v24, v25);
      uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v23, v26, (uint64_t)v24, 0, (uint64_t)&v55);
      uint64_t v28 = llvm::PointerType::get();
      LOWORD(v67) = 257;
      uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v23, 49, AlignedLoad, v28, (uint64_t)&__src);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, Cast);
      uint64_t v30 = (char *)this + *(void *)(*(void *)this - 24) + 40;
      uint64_t v31 = llvm::PointerType::get();
      LOWORD(v58) = 257;
      uint64_t v32 = llvm::IRBuilderBase::CreateCast((uint64_t)v30, 49, EmulationStateBuffer, v31, (uint64_t)&v55);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v32);
      char v33 = (char *)this + *(void *)(*(void *)this - 24) + 40;
      uint64_t v34 = llvm::PointerType::get();
      LOWORD(v58) = 257;
      uint64_t v35 = llvm::IRBuilderBase::CreateCast((uint64_t)v33, 49, v22, v34, (uint64_t)&v55);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v35);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v43);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v45);
      uint64_t v5 = v44;
    }
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v14);
    uint64_t v39 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v55 = "agc.gpe.grid_properties";
    LOWORD(v58) = 259;
    uint64_t v40 = llvm::IRBuilderBase::CreateCall((uint64_t)(v39 + 40), *(void *)(v20 + 24), v20, (uint64_t)v52, v53, (uint64_t)&v55);
    llvm::ValueHandleBase::operator=(v5, (uint64_t)v40);
    size_t v41 = (char *)this + *(void *)(*(void *)this - 24) + 32;
    long long v46 = v49;
    uint64_t v47 = v50;
    if (v50) {
      llvm::MetadataTracking::track();
    }
    int v48 = v51;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v46, (uint64_t)(v41 + 8));
    if (v47) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v3 = v4[35];
    if (v52 != v54) {
      free(v52);
    }
    if (v50) {
      llvm::MetadataTracking::untrack();
    }
  }
  return v3;
}

void *AGCLLVMUserObjectShaderBase::getEmulationStateCacheForCurrentFunction(AGCLLVMUserObjectShaderBase *this)
{
  unint64_t v3 = 0x9DDFEA08EB382D69;
  unint64_t v4 = *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 24) + 88) + 56);
  uint64_t v5 = (void *)((char *)this + 4432);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)this + 555);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v11 = v8 % v9;
      }
    }
    else
    {
      unint64_t v11 = v8 & (v9 - 1);
    }
    int v12 = *(void **)(*v5 + 8 * v11);
    if (v12)
    {
      for (uint64_t i = (void *)*v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v8)
        {
          if (i[2] == v4) {
            goto LABEL_58;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  v50[0] = 4;
  v50[1] = 0;
  void v50[2] = 0;
  v50[3] = 4;
  void v50[4] = 0;
  v50[5] = 0;
  v50[6] = 4;
  v50[7] = 0;
  v50[8] = 0;
  void v50[9] = 4;
  v50[10] = 0;
  v50[11] = 0;
  v50[12] = 4;
  v50[13] = 0;
  v50[14] = 0;
  v50[15] = 4;
  v50[16] = 0;
  v50[17] = 0;
  v50[18] = 4;
  v50[19] = 0;
  v50[20] = 0;
  v50[21] = 4;
  v50[22] = 0;
  v50[23] = 0;
  v50[24] = 4;
  v50[25] = 0;
  v50[26] = 0;
  v50[27] = 4;
  v50[28] = 0;
  v50[29] = 0;
  v50[30] = 4;
  v50[31] = 0;
  unsigned char v50[32] = 0;
  v50[33] = 4;
  v50[34] = 0;
  v50[35] = 0;
  v50[37] = 0;
  v50[38] = 0;
  v50[36] = 4;
  unint64_t v51 = v4;
  AGCLLVMUserObjectShaderBase::FunctionStateCache::FunctionStateCache((uint64_t)&v52, v50);
  unint64_t v15 = v51;
  unint64_t v16 = 0x9DDFEA08EB382D69 * (((8 * v51) + 8) ^ HIDWORD(v51));
  unint64_t v17 = 0x9DDFEA08EB382D69 * (HIDWORD(v51) ^ (v16 >> 47) ^ v16);
  unint64_t v18 = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
  unint64_t v3 = *((void *)this + 555);
  if (v3)
  {
    uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      unint64_t v1 = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
      if (v18 >= v3) {
        unint64_t v1 = v18 % v3;
      }
    }
    else
    {
      unint64_t v1 = v18 & (v3 - 1);
    }
    uint64_t v21 = *(void **)(*v5 + 8 * v1);
    if (v21)
    {
      for (uint64_t j = (void *)*v21; j; uint64_t j = (void *)*j)
      {
        unint64_t v23 = j[1];
        if (v23 == v18)
        {
          if (j[2] == v51) {
            goto LABEL_57;
          }
        }
        else
        {
          if (v19.u32[0] > 1uLL)
          {
            if (v23 >= v3) {
              v23 %= v3;
            }
          }
          else
          {
            v23 &= v3 - 1;
          }
          if (v23 != v1) {
            break;
          }
        }
      }
    }
    uint64_t v20 = v5;
  }
  else
  {
    uint64_t v20 = v5;
  }
  int v24 = (void *)((char *)this + 4448);
  uint64_t v25 = operator new(0x150uLL);
  v54[1] = (uint64_t)this + 4448;
  *uint64_t v25 = 0;
  v25[1] = v18;
  void v25[2] = v15;
  AGCLLVMUserObjectShaderBase::FunctionStateCache::FunctionStateCache((uint64_t)(v25 + 3), &v52);
  char v55 = 1;
  float v26 = (float)(unint64_t)(*((void *)this + 557) + 1);
  float v27 = *((float *)this + 1116);
  if (!v3 || (float)(v27 * (float)v3) < v26)
  {
    BOOL v28 = 1;
    if (v3 >= 3) {
      BOOL v28 = (v3 & (v3 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v3);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t v31 = v30;
    }
    else {
      size_t v31 = v29;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>((uint64_t)v20, v31);
    unint64_t v3 = *((void *)this + 555);
    if ((v3 & (v3 - 1)) != 0)
    {
      if (v18 >= v3) {
        unint64_t v1 = v18 % v3;
      }
      else {
        unint64_t v1 = v18;
      }
    }
    else
    {
      unint64_t v1 = (v3 - 1) & v18;
    }
  }
  uint64_t v32 = *v20;
  char v33 = *(void **)(*v20 + 8 * v1);
  if (v33)
  {
    *uint64_t v25 = *v33;
    uint64_t v5 = v20;
  }
  else
  {
    *uint64_t v25 = *v24;
    *int v24 = v25;
    *(void *)(v32 + 8 * v1) = v24;
    uint64_t v5 = v20;
    if (!*v25) {
      goto LABEL_56;
    }
    unint64_t v34 = *(void *)(*v25 + 8);
    if ((v3 & (v3 - 1)) != 0)
    {
      if (v34 >= v3) {
        v34 %= v3;
      }
    }
    else
    {
      v34 &= v3 - 1;
    }
    char v33 = (void *)(*v20 + 8 * v34);
  }
  *char v33 = v25;
LABEL_56:
  v54[0] = 0;
  ++*((void *)this + 557);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,void *>>>>::reset[abi:nn180100](v54);
LABEL_57:
  AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderBase::FunctionStateCache *)&v52);
  AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderBase::FunctionStateCache *)v50);
  unint64_t v9 = *((void *)this + 555);
LABEL_58:
  if (v9)
  {
    uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v35.i16[0] = vaddlv_u8(v35);
    if (v35.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v36 = *(void ***)(*v5 + 8 * v3);
    if (v36)
    {
      for (uint64_t k = *v36; k; uint64_t k = (void *)*k)
      {
        unint64_t v38 = k[1];
        if (v38 == v8)
        {
          if (k[2] == v4) {
            return k + 3;
          }
        }
        else
        {
          if (v35.u32[0] > 1uLL)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          if (v38 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v39 = (void *)((char *)this + 4448);
  uint64_t k = operator new(0x150uLL);
  unint64_t v51 = (unint64_t)k;
  char v52 = (char *)this + 4448;
  *uint64_t k = 0;
  k[1] = v8;
  k[2] = v4;
  k[3] = 4;
  k[4] = 0;
  k[5] = 0;
  k[6] = 4;
  k[7] = 0;
  k[8] = 0;
  k[9] = 4;
  k[10] = 0;
  k[11] = 0;
  k[12] = 4;
  k[13] = 0;
  k[14] = 0;
  k[15] = 4;
  k[16] = 0;
  k[17] = 0;
  k[18] = 4;
  k[19] = 0;
  k[20] = 0;
  k[21] = 4;
  k[22] = 0;
  k[23] = 0;
  k[24] = 4;
  k[25] = 0;
  k[26] = 0;
  k[27] = 4;
  k[28] = 0;
  k[29] = 0;
  k[30] = 4;
  k[31] = 0;
  k[32] = 0;
  k[33] = 4;
  k[34] = 0;
  k[35] = 0;
  k[36] = 4;
  k[37] = 0;
  k[38] = 0;
  k[39] = 4;
  k[40] = 0;
  k[41] = 0;
  char v53 = 1;
  float v40 = (float)(unint64_t)(*((void *)this + 557) + 1);
  float v41 = *((float *)this + 1116);
  if (!v9 || (float)(v41 * (float)v9) < v40)
  {
    BOOL v42 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    unint64_t v43 = v42 | (2 * v9);
    unint64_t v44 = vcvtps_u32_f32(v40 / v41);
    if (v43 <= v44) {
      size_t v45 = v44;
    }
    else {
      size_t v45 = v43;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>((uint64_t)v5, v45);
    unint64_t v9 = *((void *)this + 555);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v46 = *v5;
  uint64_t v47 = *(void **)(*v5 + 8 * v3);
  if (v47)
  {
    *uint64_t k = *v47;
LABEL_96:
    void *v47 = k;
    goto LABEL_97;
  }
  *uint64_t k = *v39;
  *uint64_t v39 = k;
  *(void *)(v46 + 8 * v3) = v39;
  if (*k)
  {
    unint64_t v48 = *(void *)(*k + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v48 >= v9) {
        v48 %= v9;
      }
    }
    else
    {
      v48 &= v9 - 1;
    }
    uint64_t v47 = (void *)(*v5 + 8 * v48);
    goto LABEL_96;
  }
LABEL_97:
  unint64_t v51 = 0;
  ++*((void *)this + 557);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,void *>>>>::reset[abi:nn180100]((uint64_t *)&v51);
  return k + 3;
}

uint64_t AGCLLVMUserObjectShaderBase::FunctionStateCache::FunctionStateCache(uint64_t a1, void *a2)
{
  unint64_t v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)a1, 2u, a2);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)((char *)v4 + 24), 2u, a2 + 3);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 48), 2u, a2 + 6);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 72), 2u, a2 + 9);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 96), 2u, a2 + 12);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 120), 2u, a2 + 15);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 144), 2u, a2 + 18);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 168), 2u, a2 + 21);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 192), 2u, a2 + 24);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 216), 2u, a2 + 27);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 240), 2u, a2 + 30);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 264), 2u, a2 + 33);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 288), 2u, a2 + 36);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,void *>>>>::reset[abi:nn180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16)) {
      AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderBase::FunctionStateCache *)(v1 + 24));
    }
    operator delete((void *)v1);
  }
}

uint64_t AGCLLVMUserMeshShaderSW::buildNumGroupsUbergrid(AGCLLVMUserMeshShaderSW *this, llvm::Type *a2, int a3)
{
  unint64_t v4 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  int v8 = a3 + 6;
  unsigned char v7[16] = 257;
  return llvm::IRBuilderBase::CreateExtractValue((uint64_t)v4, GridProperties, (uint64_t)&v8, 1, (uint64_t)v7);
}

uint64_t AGCLLVMUserMeshShaderSW::buildGlobalIDUbergrid(AGCLLVMUserMeshShaderSW *this, llvm::Type *a2, uint64_t a3)
{
  unint64_t v6 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v14[0] = a3 + 1;
  __int16 v17 = 257;
  uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v6, GridProperties, (uint64_t)v14, 1, (uint64_t)v16);
  unint64_t v9 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(this, a2, a3);
  uint8x8_t v10 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalID(this, a2, a3);
  unint64_t v11 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v17 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, Value, v9, (const llvm::Twine *)v16);
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateAdd(v11, Mul, v10, (const llvm::Twine *)v14);
}

uint64_t AGCLLVMUserMeshShaderSW::buildGlobalSizeUbergrid(AGCLLVMUserMeshShaderSW *this, llvm::Type *a2, int a3)
{
  uint64_t v5 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(this, a2, a3);
  unint64_t v6 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  int v14 = a3 + 6;
  __int16 v13 = 257;
  uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v6, GridProperties, (uint64_t)&v14, 1, (uint64_t)v12);
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateMul(v6, Value, v5, (const llvm::Twine *)v10);
}

llvm::Value *AGCLLVMUserMeshShaderSW::buildOSTGGridPosition(AGCLLVMUserMeshShaderSW *this)
{
  if (*(unsigned char *)(*((void *)this + 565) + 17))
  {
    unint64_t v18 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 32);
    uint8x8_t v19 = (llvm::Value *)llvm::ConstantInt::get();
    return AGCLLVMBuilder::splat(v18, 3, v19);
  }
  else
  {
    uint64_t EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 2, 0);
    unint64_t v4 = v3;
    uint64_t v5 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    unint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
    unint64_t v7 = (char *)this + *(void *)(*(void *)this - 24) + 40;
    uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
    int v25 = 5;
    __int16 v24 = 257;
    uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v7, GridProperties, (uint64_t)&v25, 1, (uint64_t)v23);
    __int16 v22 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, Value, (const llvm::Twine *)v21);
    v20[16] = 257;
    uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v5, v4, EmulationStateBuffer, Mul, (const llvm::Twine *)v20);
    int v12 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
    __int16 v13 = (llvm::Type *)llvm::PointerType::get();
    __int16 v24 = 257;
    Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v12, GEP, v13, (const llvm::Twine *)v23);
    __int16 v15 = (char *)this + *(void *)(*(void *)this - 24);
    unint64_t v16 = (llvm::Type *)*((void *)v15 + 38);
    __int16 v24 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v15 + 5, v16, (uint64_t)PointerCast, 0, (uint64_t)v23);
  }
}

uint64_t AGCLLVMUserMeshShaderSW::getGlobalLinearGroupID(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  unint64_t v3 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  int v6 = 5;
  v5[16] = 257;
  return llvm::IRBuilderBase::CreateExtractValue((uint64_t)v3, GridProperties, (uint64_t)&v6, 1, (uint64_t)v5);
}

llvm::Value *AGCLLVMUserMeshShaderSW::buildSetPrimitiveCount(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  LODWORD(__src[0]) = 0;
  __int16 v36 = 257;
  uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v5, GridProperties, (uint64_t)__src, 1, (uint64_t)v34);
  uint64_t EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 4, 0);
  uint8x8_t v10 = v9;
  v30[0] = AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 3, 0);
  v30[1] = Value;
  __int16 v11 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t v12 = AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 5, 0);
  uint64_t v13 = llvm::PointerType::get();
  __int16 v36 = 257;
  v30[2] = llvm::IRBuilderBase::CreateCast((uint64_t)v11, 49, v12, v13, (uint64_t)v34);
  int v14 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v15 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v32) = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v14, Value, v15, (const llvm::Twine *)__src);
  __int16 v29 = 257;
  void v30[3] = llvm::IRBuilderBase::CreateGEP(v14, v10, EmulationStateBuffer, Mul, (const llvm::Twine *)v28);
  void v30[4] = a3;
  v30[5] = llvm::ConstantInt::get();
  uint64_t v17 = llvm::PointerType::get();
  uint64_t v18 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 232);
  uint64_t v19 = llvm::PointerType::get();
  uint64_t v20 = llvm::PointerType::get();
  uint64_t v21 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v22 = *((void *)v21 + 29);
  uint64_t v23 = *((void *)v21 + 27);
  __src[0] = v17;
  __src[1] = v18;
  void __src[2] = v19;
  void __src[3] = v20;
  uint64_t v32 = v22;
  uint64_t v33 = v23;
  v34[0] = v35;
  v34[1] = (void *)0x600000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)v34, __src, v34);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v25 = v24;
  if (v34[0] != v35) {
    free(v34[0]);
  }
  float v26 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  __int16 v36 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v26, *(void *)(v25 + 24), v25, (uint64_t)v30, 6, (uint64_t)v34);
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetPrimitiveData(AGCLLVMUserObjectShaderBase *this, void *a2)
{
  uint64_t v3 = a2[1];
  unint64_t v4 = (void *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u) {
    unint64_t v4 = (void *)*v4;
  }
  unsigned int v5 = *(_DWORD *)v4;
  int v6 = (llvm::Value *)a2[2];
  unint64_t v7 = (llvm::Value *)a2[3];
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
  return AGCLLVMUserMeshShaderSW::buildSetVaryingData(this, 1, v5, v6, v7, VertexAmpId);
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetVaryingData(AGCLLVMUserMeshShaderSW *a1, int a2, unsigned int a3, llvm::Value *a4, llvm::Value *a5, llvm::Value *a6)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v7 = ((a2 != 0) | (2 * a3)) + 7;
  if (a3 >= 0xFFFFFFF9) {
    int v7 = ~a3;
  }
  uint64_t v8 = *((unsigned int *)a1 + 1184);
  if (v8)
  {
    uint64_t v11 = *((void *)a1 + 591);
    uint64_t v12 = v8 << 6;
    while (*(_DWORD *)(v11 + 16) != v7)
    {
      v11 += 64;
      v12 -= 64;
      if (!v12) {
        goto LABEL_7;
      }
    }
    *(_OWORD *)uint64_t v60 = 0u;
    long long v61 = 0u;
    unsigned int v14 = AGCLLVMBuilder::unboxVector((AGCLLVMUserMeshShaderSW *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 32), a5, v60);
    unsigned int v15 = v14;
    uint64_t v16 = *(void *)v60[0];
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = (void *)((char *)a1 + *(void *)(*(void *)a1 - 24));
    if (*(void *)v60[0] == v18[26] || v16 == v18[27] || v16 == v18[28])
    {
      uint64_t v52 = v18[29];
      if (v14)
      {
        uint64_t v19 = v60;
        uint64_t v20 = v14;
        do
        {
          uint64_t v21 = *(void *)(*(void *)a1 - 24);
          uint64_t v22 = (uint64_t)*v19;
          uint64_t v23 = *(void *)((char *)a1 + v21 + 232);
          __int16 v59 = 257;
          *v19++ = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a1 + v21 + 40, 39, v22, v23, (uint64_t)v58);
          --v20;
        }
        while (v20);
        uint64_t v17 = *(void *)a1;
      }
    }
    else
    {
      uint64_t v52 = *(void *)v60[0];
    }
    uint64_t v24 = (uint64_t)a1 + *(void *)(v17 - 24) + 40;
    uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(a1);
    v56[0] = 0;
    __int16 v59 = 257;
    uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue(v24, GridProperties, (uint64_t)v56, 1, (uint64_t)v58);
    float v27 = (llvm::Type *)v52;
    BasePointer = AGCLLVMUserMeshShaderSW::getBasePointer(a1, Value, a2, *(_DWORD *)(v11 + 60), v52, a6);
    if (a2 == 1)
    {
      __int16 v29 = (AGCLLVMUserMeshShaderSW *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
      uint64_t v30 = llvm::ConstantInt::get();
      size_t v31 = (AGCLLVMUserMeshShaderSW *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
      uint64_t VertexAmpCount = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpCount(a1, v32);
      unint64_t v34 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v59 = 257;
      uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v31, VertexAmpCount, v34, (const llvm::Twine *)v58);
      __int16 v57 = 257;
      __int16 v36 = (llvm::Value *)v30;
      float v27 = (llvm::Type *)v52;
      uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v29, v36, Mul, (const llvm::Twine *)v56);
      unint64_t v38 = (AGCLLVMUserMeshShaderSW *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
      __int16 v59 = 257;
      a4 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v38, a4, Add, (const llvm::Twine *)v58);
    }
    if (v15)
    {
      uint64_t v39 = 0;
      uint64_t v40 = v15;
      do
      {
        if (*(unsigned char *)(v11 + 56))
        {
          float v41 = (AGCLLVMUserMeshShaderSW *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
          BOOL v42 = (llvm::Value *)llvm::ConstantInt::get();
          __int16 v59 = 257;
          uint64_t v43 = llvm::IRBuilderBase::CreateMul(v41, a4, v42, (const llvm::Twine *)v58);
          unint64_t v44 = (llvm::Value *)llvm::ConstantInt::get();
          __int16 v57 = 257;
          size_t v45 = (llvm::Value *)v43;
          float v27 = (llvm::Type *)v52;
          uint64_t v46 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v41, v45, v44, (const llvm::Twine *)v56);
          __int16 v55 = 257;
          uint64_t v47 = (const llvm::Twine *)&v54;
          unint64_t v48 = v41;
        }
        else
        {
          long long v49 = (AGCLLVMUserMeshShaderSW *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
          uint64_t v50 = (llvm::Value *)llvm::ConstantInt::get();
          __int16 v59 = 257;
          uint64_t v46 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v49, a4, v50, (const llvm::Twine *)v58);
          __int16 v57 = 257;
          uint64_t v47 = (const llvm::Twine *)v56;
          unint64_t v48 = v49;
        }
        uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v48, v27, BasePointer, v46, v47);
        llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40), (llvm::Type **)v60[v39++], GEP, 0);
      }
      while (v40 != v39);
    }
    return llvm::UndefValue::get();
  }
  else
  {
LABEL_7:
    return llvm::UndefValue::get();
  }
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetVertexData(AGCLLVMUserObjectShaderBase *this, void *a2)
{
  uint64_t v3 = a2[1];
  unint64_t v4 = (void *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u) {
    unint64_t v4 = (void *)*v4;
  }
  unsigned int v5 = *(_DWORD *)v4;
  int v6 = (llvm::Value *)a2[2];
  int v7 = (llvm::Value *)a2[3];
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
  return AGCLLVMUserMeshShaderSW::buildSetVaryingData(this, 0, v5, v6, v7, VertexAmpId);
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetIndices(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Type **a4)
{
  int v7 = *a4;
  uint64_t v8 = (llvm::Type *)llvm::PointerType::get();
  unint64_t v9 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v28[0] = 0;
  __int16 v31 = 257;
  uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v9, GridProperties, (uint64_t)v28, 1, (uint64_t)v30);
  uint64_t EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 4, 0);
  unsigned int v14 = v13;
  unsigned int v15 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24));
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  unsigned int v15 = (llvm::IRBuilderBase *)((char *)v15 + 40);
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v15, Value, v16, (const llvm::Twine *)v30);
  __int16 v29 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v15, v14, EmulationStateBuffer, Mul, (const llvm::Twine *)v28);
  __int16 v27 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v15, GEP, v8, (const llvm::Twine *)v26);
  uint64_t v20 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v20, a3, v21, (const llvm::Twine *)v30);
  uint64_t v23 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v31 = 257;
  uint64_t v24 = llvm::IRBuilderBase::CreateGEP(v23, v7, PointerCast, UDiv, (const llvm::Twine *)v30);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), a4, v24, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetIndex(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Type **a4)
{
  int v7 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v21[0] = 0;
  __int16 v24 = 257;
  uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v7, GridProperties, (uint64_t)v21, 1, (uint64_t)v23);
  uint64_t EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 4, 0);
  uint64_t v12 = v11;
  uint64_t v13 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  unsigned int v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v13, Value, v14, (const llvm::Twine *)v23);
  __int16 v22 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v13, a3, Mul, (const llvm::Twine *)v21);
  __int16 v20 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v13, v12, EmulationStateBuffer, Add, (const llvm::Twine *)v19);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), a4, GEP, 0);
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetPrimitiveCulled(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  int v7 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v25[0] = 0;
  __int16 v28 = 257;
  uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v7, GridProperties, (uint64_t)v25, 1, (uint64_t)v27);
  uint64_t BuiltinPointer = (llvm::Type **)AGCLLVMUserMeshShaderSW::getBuiltinPointer(this, Value, 0x17u, 0, a3, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232));
  uint64_t v11 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v12 = *((void *)v11 + 27);
  __int16 v28 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v11 + 40), 39, (uint64_t)a4, v12, (uint64_t)v27);
  unsigned int v14 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v28 = 257;
  unsigned int v15 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl(v14, Cast, v15, (const llvm::Twine *)v27);
  uint64_t v17 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v18 = (llvm::Type *)*((void *)v17 + 27);
  uint64_t v19 = (llvm::IRBuilderBase *)(v17 + 40);
  __int16 v20 = (llvm::Type *)llvm::PointerType::get();
  __int16 v28 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v19, BuiltinPointer, v20, (const llvm::Twine *)v27);
  __int16 v22 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v26 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v19, v18, PointerCast, v22, (const llvm::Twine *)v25);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), Shl, GEP, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShaderSW::getBuiltinPointer(AGCLLVMUserObjectShaderBase *a1, llvm::Value *a2, unsigned int a3, uint64_t a4, llvm::Value *a5, llvm::Type *a6)
{
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(a1);
  BasePointer = AGCLLVMUserMeshShaderSW::getBasePointer(a1, a2, 0, a3, (uint64_t)a6, VertexAmpId);
  uint64_t v13 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  unsigned int v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v19 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v13, a5, v14, (const llvm::Twine *)v18);
  uint64_t v16 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 40);
  __int16 v19 = 257;
  return llvm::IRBuilderBase::CreateGEP(v16, a6, BasePointer, Add, (const llvm::Twine *)v18);
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetPrimitiveId(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  if (*((unsigned char *)this + 4646))
  {
    VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    AGCLLVMUserMeshShaderSW::buildSetVaryingData(this, 1, 0xFFFFFFFF, a3, a4, VertexAmpId);
  }
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetViewportId(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  int v7 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v8 = *((void *)v7 + 29);
  __int16 v32 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v7 + 40), 39, (uint64_t)a4, v8, (uint64_t)v31);
  if (*((unsigned char *)this + 4642))
  {
    VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    AGCLLVMUserMeshShaderSW::buildSetVaryingData(this, 1, 0xFFFFFFFC, a3, Cast, VertexAmpId);
  }
  uint64_t v11 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v29[0] = 0;
  __int16 v32 = 257;
  uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v11, GridProperties, (uint64_t)v29, 1, (uint64_t)v31);
  uint64_t BuiltinPointer = (llvm::Type **)AGCLLVMUserMeshShaderSW::getBuiltinPointer(this, Value, 0x17u, 0, a3, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232));
  unsigned int v15 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v32 = 257;
  llvm::IRBuilderBase::CreateICmp(v15, 37, (llvm::CmpInst **)Cast, v16, (uint64_t)v31);
  llvm::ConstantInt::get();
  __int16 v30 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  uint64_t v18 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v19 = *((void *)v18 + 27);
  __int16 v32 = 257;
  __int16 v20 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(v18 + 40), 38, Select, v19, (uint64_t)v31);
  uint64_t v21 = (char *)this + *(void *)(*(void *)this - 24);
  __int16 v22 = (llvm::Type *)*((void *)v21 + 27);
  uint64_t v23 = (llvm::IRBuilderBase *)(v21 + 40);
  __int16 v24 = (llvm::Type *)llvm::PointerType::get();
  __int16 v32 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v23, BuiltinPointer, v24, (const llvm::Twine *)v31);
  __int16 v26 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v30 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP(v23, v22, PointerCast, v26, (const llvm::Twine *)v29);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v20, GEP, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetLayerId(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  int v7 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v8 = *((void *)v7 + 29);
  __int16 v28 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v7 + 40), 39, (uint64_t)a4, v8, (uint64_t)v27);
  if (*((unsigned char *)this + 4640))
  {
    VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    AGCLLVMUserMeshShaderSW::buildSetVaryingData(this, 1, 0xFFFFFFFB, a3, Cast, VertexAmpId);
  }
  uint64_t v11 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v25[0] = 0;
  __int16 v28 = 257;
  uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v11, GridProperties, (uint64_t)v25, 1, (uint64_t)v27);
  uint64_t BuiltinPointer = (llvm::Type **)AGCLLVMUserMeshShaderSW::getBuiltinPointer(this, Value, 0x17u, 0, a3, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 232));
  unsigned int v15 = (uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v28 = 257;
  llvm::IRBuilderBase::CreateICmp(v15, 37, (llvm::CmpInst **)Cast, v16, (uint64_t)v27);
  llvm::ConstantInt::get();
  __int16 v26 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  uint64_t v18 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v19 = *((void *)v18 + 28);
  __int16 v28 = 257;
  __int16 v20 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(v18 + 40), 38, Select, v19, (uint64_t)v27);
  uint64_t v21 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(void *)(*(void *)this - 24) + 40);
  __int16 v22 = (llvm::Type *)llvm::PointerType::get();
  __int16 v28 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v21, BuiltinPointer, v22, (const llvm::Twine *)v27);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v20, (uint64_t)PointerCast, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetClipDistance(AGCLLVMUserMeshShaderSW *this, void *a2)
{
  uint64_t v3 = a2[1];
  unint64_t v4 = (unsigned int *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u) {
    unint64_t v4 = *(unsigned int **)v4;
  }
  uint64_t v5 = *v4;
  int v6 = (llvm::Value *)a2[2];
  int v7 = (llvm::Type **)a2[3];
  uint64_t v8 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  int v14 = 0;
  v13[16] = 257;
  uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v8, GridProperties, (uint64_t)&v14, 1, (uint64_t)v13);
  uint64_t BuiltinPointer = AGCLLVMUserMeshShaderSW::getBuiltinPointer(this, Value, 0x19u, v5, v6, *(llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 200));
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), v7, BuiltinPointer, 0);
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetPointSize(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Type **a4)
{
  int v7 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  int v19 = 0;
  __int16 v18 = 257;
  uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v7, GridProperties, (uint64_t)&v19, 1, (uint64_t)v17);
  uint8x8_t v10 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v11 = *a4;
  uint64_t v12 = *((void *)v10 + 25);
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
  BasePointer = AGCLLVMUserMeshShaderSW::getBasePointer(this, Value, 0, 0x16u, v12, VertexAmpId);
  __int16 v18 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v10 + 40), v11, BasePointer, a3, (const llvm::Twine *)v17);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), a4, GEP, 0);
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetPosition(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Type **a4)
{
  int v7 = (char *)this + *(void *)(*(void *)this - 24) + 40;
  uint64_t GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  int v19 = 0;
  __int16 v18 = 257;
  uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v7, GridProperties, (uint64_t)&v19, 1, (uint64_t)v17);
  uint8x8_t v10 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v11 = *a4;
  uint64_t v12 = *((void *)v10 + 40);
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
  BasePointer = AGCLLVMUserMeshShaderSW::getBasePointer(this, Value, 0, 0, v12, VertexAmpId);
  __int16 v18 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v10 + 40), v11, BasePointer, a3, (const llvm::Twine *)v17);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(void *)(*(void *)this - 24) + 40), a4, GEP, 0);
}

uint64_t AGCLLVMUserMeshShaderSW::setupShaderInputs(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t v252 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 22);
  uint64_t v3 = *(void *)(v2 + 80);
  if (v3) {
    uint64_t v4 = v3 - 24;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v209 = v4;
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v2);
    uint64_t v6 = *((void *)this + 22);
    uint64_t v5 = *(uint64_t **)(v2 + 88);
    if (*(_WORD *)(v6 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    }
    uint64_t v2 = v6;
  }
  else
  {
    uint64_t v5 = *(uint64_t **)(v2 + 88);
  }
  uint64_t v212 = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
  if (v5 == (uint64_t *)v212)
  {
LABEL_356:
    AGCLLVMUserObjectShaderBase::setupShaderInputs(this);
    return 1;
  }
  uint64_t v207 = (int32x2_t *)((char *)this + 5324);
  int v7 = (char *)this + 4405;
  uint64_t v217 = (char *)this + 4676;
  uint64_t v216 = (char *)this + 4684;
  uint64_t v215 = (_DWORD *)((char *)this + 4692);
  uint64_t v211 = (_DWORD *)((char *)this + 4632);
  uint64_t v8 = (unsigned int *)((char *)this + 4576);
  BOOL v219 = (AGCLLVMUserMeshShaderSW *)((char *)this + 4704);
  BOOL v218 = (char *)this + 8;
  uint64_t v208 = (char *)this + 4668;
  unint64_t v220 = (char *)this + 5504;
  do
  {
    uint64_t v9 = *(void *)(*((void *)this + 11) + 8 * *((unsigned int *)v5 + 8));
    if (v5[1]) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      int v11 = 1;
      goto LABEL_336;
    }
    uint64_t v12 = *(void *)(v209 + 40);
    if (v12) {
      uint64_t v13 = (llvm::Instruction *)(v12 - 24);
    }
    else {
      uint64_t v13 = 0;
    }
    AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(void *)(*(void *)this - 24) + 32, v13, *((void *)this + 6));
    BOOL v14 = isStringMDNode(*(llvm::MDString **)(v9 - 8 * *(unsigned int *)(v9 + 8) + 8), "air.mesh");
    uint64_t v15 = v9 - 8 * *(unsigned int *)(v9 + 8);
    if (!v14)
    {
      int v11 = 1;
      if (isStringMDNode(*(llvm::MDString **)(v15 + 8), "air.amplification_id"))
      {
        uint64_t v39 = (llvm::Type **)((char *)this + *(void *)(*(void *)this - 24) + 32);
        VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
        AGCLLVMBuilder::truncateToSmall(v39, VertexAmpId, (llvm::Type *)*v5);
        llvm::Value::replaceAllUsesWith();
        v7[160] = 1;
      }
      goto LABEL_336;
    }
    uint64_t v210 = v5;
    uint64_t v16 = *(unsigned __int8 **)(v15 + 16);
    if (!v16) {
      goto LABEL_34;
    }
    unint64_t v17 = *v16;
    BOOL v18 = v17 > 0x22 || ((0x7FFFFFFF0uLL >> v17) & 1) == 0;
    if (v18 || *((_DWORD *)v16 + 2) != 6 || !isStringMDNode(*((llvm::MDString **)v16 - 6), "air.mesh_type_info")) {
      goto LABEL_34;
    }
    int v19 = &v16[-8 * *((unsigned int *)v16 + 2)];
    __int16 v20 = (unsigned __int8 *)*((void *)v19 + 1);
    if (!v20) {
      goto LABEL_345;
    }
    unint64_t v21 = *v20;
    if (v21 <= 0x22 && ((0x7FFFFFFF0uLL >> v21) & 1) != 0)
    {
      uint64_t v23 = (unsigned __int8 *)*((void *)v19 + 2);
      if (v23)
      {
        unint64_t v201 = *v23;
        if (v201 > 0x22 || ((0x7FFFFFFF0uLL >> v201) & 1) == 0)
        {
LABEL_345:
          uint64_t v23 = 0;
          goto LABEL_35;
        }
        LODWORD(v227[0]) = 3;
        if (parseMDInt(0, (uint64_t)v16, (unsigned int *)v227, (_DWORD *)this + 1152))
        {
          LODWORD(v227[0]) = 4;
          if (parseMDInt(0, (uint64_t)v16, (unsigned int *)v227, (_DWORD *)this + 1153))
          {
            if (isStringMDNode(*(llvm::MDString **)&v16[-8 * *((unsigned int *)v16 + 2) + 40], "air.line"))
            {
              int v204 = 1;
LABEL_354:
              *((_DWORD *)this + 1156) = v204;
              int v24 = 1;
              goto LABEL_36;
            }
            if (isStringMDNode(*(llvm::MDString **)&v16[-8 * *((unsigned int *)v16 + 2) + 40], "air.point"))
            {
              int v204 = 0;
              goto LABEL_354;
            }
            if (isStringMDNode(*(llvm::MDString **)&v16[-8 * *((unsigned int *)v16 + 2) + 40], "air.triangle"))
            {
              int v204 = 2;
              goto LABEL_354;
            }
          }
        }
      }
    }
    else
    {
LABEL_34:
      uint64_t v23 = 0;
      __int16 v20 = 0;
    }
LABEL_35:
    int v24 = 0;
LABEL_36:
    *((_DWORD *)this + 1154) = (*((_DWORD *)this + 1152) + 3) & 0xFFFFFFFC;
    int v25 = *((_DWORD *)this + 1156);
    if (v25 == 1) {
      int v26 = 2;
    }
    else {
      int v26 = 1;
    }
    if (v25 == 2) {
      int v27 = 3;
    }
    else {
      int v27 = v26;
    }
    *((_DWORD *)this + 1155) = (v27 * *((_DWORD *)this + 1153) + 3) & 0xFFFFFFFC;
    if (v24)
    {
      unint64_t v28 = *((unsigned int *)v20 + 2);
      if (v28)
      {
        unint64_t v29 = 0;
        while (1)
        {
          __int16 v30 = *(unsigned __int8 **)&v20[8 * v29 + -8 * v28];
          if (!v30) {
            break;
          }
          unint64_t v31 = *v30;
          if (v31 > 0x22 || ((0x7FFFFFFF0uLL >> v31) & 1) == 0) {
            break;
          }
          if (*v7)
          {
            unint64_t v33 = 1;
            while (1)
            {
              unint64_t v34 = *((unsigned int *)v30 + 2);
              BOOL v35 = v33 >= v34;
              if (v33 >= v34) {
                break;
              }
              if (isStringMDNode(*(llvm::MDString **)&v30[8 * v33++ + -8 * v34], "air.shared")) {
                goto LABEL_54;
              }
            }
          }
          else
          {
LABEL_54:
            BOOL v35 = 0;
          }
          AGCLLVMUserObjectShaderBase::accumulateAPIMeshSize((uint64_t)v30, 0, (uint64_t)v217, (uint64_t)v216, v215);
          if ((AGCLLVMUserMeshShaderSW::addGenericVarying((uint64_t)this, (uint64_t)v30, 0, v35) & 1) == 0)
          {
            if (isStringMDNode(*(llvm::MDString **)&v30[-8 * *((unsigned int *)v30 + 2)], "air.position"))
            {
              v7[223] = 1;
              v7[224] = v35;
              unint64_t v37 = *((unsigned int *)v30 + 2);
              if (v37 >= 2)
              {
                unint64_t v38 = 1;
                while (!isStringMDNode(*(llvm::MDString **)&v30[8 * v38 + -8 * v37], "air.invariant"))
                {
                  ++v38;
                  unint64_t v37 = *((unsigned int *)v30 + 2);
                  if (v38 >= v37) {
                    goto LABEL_70;
                  }
                }
                v7[123] = 1;
              }
            }
            else if (isStringMDNode(*(llvm::MDString **)&v30[-8 * *((unsigned int *)v30 + 2)], "air.point_size"))
            {
              v7[232] = 1;
              v7[233] = v35;
            }
            else
            {
              if (!isStringMDNode(*(llvm::MDString **)&v30[-8 * *((unsigned int *)v30 + 2)], "air.clip_distance")) {
                break;
              }
              *uint64_t v211 = 1;
              v7[231] = v35;
              LODWORD(v227[0]) = 1;
              if (*((_DWORD *)v30 + 2) >= 2u)
              {
                do
                {
                  if (parseMDInt("air.clip_distance_array_size", (uint64_t)v30, (unsigned int *)v227, v211)) {
                    break;
                  }
                  ++LODWORD(v227[0]);
                }
                while (LODWORD(v227[0]) < *((_DWORD *)v30 + 2));
              }
            }
          }
LABEL_70:
          ++v29;
          unint64_t v28 = *((unsigned int *)v20 + 2);
          if (v29 >= v28)
          {
            int v24 = 1;
            goto LABEL_76;
          }
        }
        int v24 = 0;
      }
      else
      {
        int v24 = 1;
      }
    }
LABEL_76:
    if (v7[224]) {
      BOOL v41 = 1;
    }
    else {
      BOOL v41 = v7[231] != 0;
    }
    v7[231] = v41;
    v7[224] = v41;
    if (v24)
    {
      unint64_t v42 = *((unsigned int *)v23 + 2);
      if (v42)
      {
        for (unint64_t i = 0; i < v42; ++i)
        {
          unint64_t v44 = *(unsigned __int8 **)&v23[8 * i + -8 * v42];
          if (!v44) {
            goto LABEL_106;
          }
          unint64_t v45 = *v44;
          if (v45 > 0x22 || ((0x7FFFFFFF0uLL >> v45) & 1) == 0) {
            goto LABEL_106;
          }
          if (*v7)
          {
            unint64_t v47 = 1;
            while (1)
            {
              unint64_t v48 = *((unsigned int *)v44 + 2);
              BOOL v49 = v47 >= v48;
              if (v47 >= v48) {
                break;
              }
              if (isStringMDNode(*(llvm::MDString **)&v44[8 * v47++ + -8 * v48], "air.shared"))
              {
                BOOL v49 = 0;
                break;
              }
            }
          }
          else
          {
            BOOL v49 = 0;
          }
          AGCLLVMUserObjectShaderBase::accumulateAPIMeshSize((uint64_t)v44, 1u, (uint64_t)v217, (uint64_t)v216, v215);
          if ((AGCLLVMUserMeshShaderSW::addGenericVarying((uint64_t)this, (uint64_t)v44, 1, v49) & 1) == 0)
          {
            if (isStringMDNode(*(llvm::MDString **)&v44[-8 * *((unsigned int *)v44 + 2)], "air.render_target_array_index"))
            {
              v7[234] = 1;
LABEL_101:
              v7[240] |= v49;
              goto LABEL_102;
            }
            if (isStringMDNode(*(llvm::MDString **)&v44[-8 * *((unsigned int *)v44 + 2)], "air.viewport_array_index"))
            {
              v7[236] = 1;
              goto LABEL_101;
            }
            if (isStringMDNode(*(llvm::MDString **)&v44[-8 * *((unsigned int *)v44 + 2)], "air.primitive_culled"))
            {
              v7[238] = 1;
              goto LABEL_101;
            }
            if (!isStringMDNode(*(llvm::MDString **)&v44[-8 * *((unsigned int *)v44 + 2)], "air.primitive_id")) {
              goto LABEL_106;
            }
            v7[242] = 1;
            v7[243] = v49;
          }
LABEL_102:
          unint64_t v42 = *((unsigned int *)v23 + 2);
        }
      }
      int v213 = 1;
    }
    else
    {
LABEL_106:
      int v213 = 0;
    }
    uint64_t v51 = 0;
    char v234 = v7[243];
    char v238 = v7[240];
    char v242 = v238;
    char v246 = *v7;
    v227[0] = "agc.per_prim.primitive_address";
    v227[1] = 0xFFFFFFFE00000000;
    char v228 = 0;
    v229[0] = (char *)this + 4649;
    v229[1] = "agc.per_prim.primitive_address_2";
    v229[2] = 0xFFFFFFFD00000000;
    char v230 = 0;
    unint64_t v231 = (char *)this + 4649;
    char v232 = "agc.per_prim.primitive_id";
    unint64_t v233 = 0xFFFFFFFF00000001;
    uint64_t v235 = (char *)this + 4646;
    int v236 = "air.render_target_array_index";
    unint64_t v237 = 0xFFFFFFFB00000001;
    uint64_t v239 = (char *)this + 4640;
    BOOL v240 = "air.viewport_array_index";
    unint64_t v241 = 0xFFFFFFFC00000001;
    uint64_t v243 = (char *)this + 4642;
    int v244 = "air.amplification_id";
    unint64_t v245 = 0xFFFFFFFA00000000;
    uint64_t v247 = (char *)this + 4566;
    char v248 = "air.amplification_count";
    unint64_t v249 = 0xFFFFFFF900000001;
    char v250 = 0;
    __int16 v251 = (char *)this + 4564;
    do
    {
      uint64_t v52 = v227[v51];
      int v53 = v227[v51 + 1];
      unsigned int v54 = HIDWORD(v227[v51 + 1]);
      int v55 = LOBYTE(v227[v51 + 2]);
      if (v52) {
        strlen((const char *)v227[v51]);
      }
      int Key = llvm::StringMapImpl::FindKey();
      if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 1146))
      {
        char v63 = 0;
      }
      else
      {
        uint64_t v64 = v7;
        uint64_t v65 = *(llvm **)(*(void *)v8 + 8 * Key);
        uint64_t v66 = v8;
        unsigned int v67 = *((_DWORD *)v65 + 2);
        uint64_t v68 = v66;
        llvm::StringMapImpl::RemoveKey();
        llvm::deallocate_buffer(v65, (void *)(*(void *)v65 + 17));
        if (v54 >= 0xFFFFFFF9) {
          int v69 = ~v54;
        }
        else {
          int v69 = ((v53 != 0) | (2 * v54)) + 7;
        }
        GenericVarying::GenericVarying((uint64_t)__dst, HIBYTE(v67) & 0x7F, BYTE2(v67), v67 & 0xF, BYTE1(v67), v69, v55 != 0);
        MEMORY[0x1CB7A04E0](&v223[4], v52);
        GenericVaryingAllocator::addVarying((uint64_t)v219, (unint64_t)__dst);
        if ((v223[27] & 0x80000000) != 0) {
          operator delete(*(void **)&v223[4]);
        }
        char v63 = 1;
        uint64_t v8 = v68;
        int v7 = v64;
      }
      *(unsigned char *)v229[v51] = v63;
      v51 += 4;
    }
    while (v51 != 28);
    if (v7[234])
    {
      BOOL v70 = 1;
      int v71 = v213;
    }
    else
    {
      int v71 = v213;
      if (v7[236]) {
        BOOL v70 = 1;
      }
      else {
        BOOL v70 = v7[238] != 0;
      }
    }
    v7[239] = v70;
    v7[162] = v70;
    if (v7[163])
    {
      uint64_t v72 = *((void *)this + 591);
      uint64_t v73 = *((unsigned int *)this + 1184);
      if (v73 >= 2)
      {
        uint64_t v74 = v72 + 64;
        uint64_t v75 = (v73 << 6) - 64;
        do
        {
          if (*(_DWORD *)(v72 + 16) < *(_DWORD *)(v74 + 16)) {
            uint64_t v72 = v74;
          }
          v74 += 64;
          v75 -= 64;
        }
        while (v75);
      }
      uint64_t v76 = *((unsigned int *)this + 1146);
      if (v76)
      {
        for (uint64_t j = (uint64_t *)*((void *)this + 572); !*j || *j == -8; ++j)
          ;
      }
      else
      {
        uint64_t j = (uint64_t *)*((void *)this + 572);
      }
      uint64_t v79 = *((void *)this + 572) + 8 * v76;
      if (j != (uint64_t *)v79)
      {
        int v80 = *(_DWORD *)(v72 + 16);
        uint64_t v81 = *j;
        do
        {
          unsigned int v82 = *(_DWORD *)(v81 + 8);
          *(_DWORD *)std::string __dst = HIBYTE(v82) & 0x7F;
          *(_DWORD *)&__dst[4] = BYTE2(v82);
          ++v80;
          *(_DWORD *)&__dst[8] = v82 & 0xF;
          *(_DWORD *)&__dst[12] = BYTE1(v82);
          *(_DWORD *)&__dst[16] = v80;
          memset(&v223[4], 0, 32);
          BOOL v224 = BYTE2(v82) == 1;
          __int16 v225 = 0;
          switch(v82 & 0xF)
          {
            case 0u:
              if (BYTE2(v82) == 1) {
                int v83 = 5;
              }
              else {
                int v83 = 1;
              }
              goto LABEL_158;
            case 1u:
              BOOL v84 = BYTE2(v82) == 1;
              int v83 = 2;
              int v85 = 6;
              goto LABEL_149;
            case 2u:
              BOOL v84 = BYTE2(v82) == 1;
              int v83 = 3;
              int v85 = 7;
LABEL_149:
              if (v84) {
                int v83 = v85;
              }
              goto LABEL_158;
            case 3u:
              if (BYTE2(v82) == 1) {
                int v83 = 19;
              }
              else {
                int v83 = 18;
              }
              goto LABEL_158;
            case 5u:
              if (BYTE2(v82) == 1) {
                int v83 = 8;
              }
              else {
                int v83 = 4;
              }
LABEL_158:
              int v226 = v83;
              break;
            default:
              break;
          }
          MEMORY[0x1CB7A04E0](&v223[4], v81 + 16);
          GenericVaryingAllocator::addVarying((uint64_t)v219, (unint64_t)__dst);
          if ((v223[27] & 0x80000000) != 0) {
            operator delete(*(void **)&v223[4]);
          }
          do
          {
            uint64_t v86 = j[1];
            ++j;
            uint64_t v81 = v86;
            if (v86) {
              BOOL v87 = v81 == -8;
            }
            else {
              BOOL v87 = 1;
            }
          }
          while (v87);
        }
        while (j != (uint64_t *)v79);
      }
      llvm::StringMap<unsigned int,llvm::MallocAllocator>::clear(v8);
      int v71 = v213;
    }
    if (*((_DWORD *)this + 1147))
    {
      printMessage((char **)&AGCPrinter, "Following fragment input(s) mismatching mesh shader output type(s) or not written by mesh shader: ", v57, v58, v59, v60, v61, v62, v206);
      uint64_t v88 = *((unsigned int *)this + 1146);
      if (v88)
      {
        for (uint64_t k = (size_t **)*((void *)this + 572); !*k || *k + 1 == 0; ++k)
          ;
      }
      else
      {
        uint64_t k = (size_t **)*((void *)this + 572);
      }
      uint64_t v91 = *((void *)this + 572) + 8 * v88;
      if (k != (size_t **)v91)
      {
        uint64_t v92 = *k;
        do
        {
          std::string::basic_string[abi:nn180100](__dst, v92 + 2, *v92);
          if (v223[3] >= 0) {
            std::string v99 = __dst;
          }
          else {
            LOBYTE(v99) = __dst[0];
          }
          printMessage((char **)&AGCPrinter, "\t%s", v93, v94, v95, v96, v97, v98, (char)v99);
          if ((v223[3] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          do
          {
            long long v100 = k[1];
            ++k;
            uint64_t v92 = v100;
            if (v100) {
              BOOL v101 = v92 + 1 == 0;
            }
            else {
              BOOL v101 = 1;
            }
          }
          while (v101);
        }
        while (k != (size_t **)v91);
      }
      uint64_t v102 = *((unsigned int *)this + 1146);
      if (v102)
      {
        for (uint64_t m = *((void *)this + 572); !*(void *)m || *(void *)m == -8; m += 8)
          ;
      }
      else
      {
        uint64_t m = *((void *)this + 572);
      }
      uint64_t v105 = *((void *)this + 572) + 8 * v102;
      if (m != v105)
      {
        uint64_t v106 = "";
        do
        {
          std::string::append((std::string *)&v218[*(void *)(*(void *)this - 24)], v106);
          std::string::basic_string[abi:nn180100](&v221, (void *)(*(void *)m + 16), **(void **)m);
          attribute_name((std::string *)__dst, &v221);
          if (v223[3] >= 0) {
            unsigned int v107 = __dst;
          }
          else {
            unsigned int v107 = *(const std::string::value_type **)__dst;
          }
          if (v223[3] >= 0) {
            std::string::size_type v108 = v223[3];
          }
          else {
            std::string::size_type v108 = *(void *)&__dst[8];
          }
          std::string::append((std::string *)&v218[*(void *)(*(void *)this - 24)], v107, v108);
          if ((v223[3] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v221.__r_.__value_.__l.__data_);
          }
          do
          {
            uint64_t v110 = *(void *)(m + 8);
            m += 8;
            uint64_t v109 = v110;
            if (v110) {
              BOOL v111 = v109 == -8;
            }
            else {
              BOOL v111 = 1;
            }
          }
          while (v111);
          uint64_t v106 = ",";
        }
        while (m != v105);
      }
      int v71 = 0;
    }
    GenericVaryingAllocator::allocate(v219, *(const AGCLLVMTargetLowerer **)((char *)this + *(void *)(*(void *)this - 24) + 400));
    int v214 = v71;
    if (v71)
    {
      bzero(v220, 0x4E0uLL);
      *(void *)&v223[16] = 0;
      *(_OWORD *)&__dst[4] = 0u;
      *(_OWORD *)unint64_t v223 = 0u;
      int v112 = *((_DWORD *)this + 1153);
      *(_DWORD *)std::string __dst = 4 * v112;
      *(_WORD *)&__dst[4] = *(_WORD *)(v7 + 239);
      int v113 = *((_DWORD *)this + 1154);
      *(_DWORD *)&__dst[8] = 23;
      *(_DWORD *)&__dst[12] = 16 * v113;
      BOOL v114 = 1;
      __dst[16] = 1;
      __dst[17] = v7[224];
      *(_DWORD *)&v223[4] = 4 * v113;
      v223[8] = v7[232];
      v223[9] = __dst[17];
      int v115 = *((_DWORD *)this + 1158);
      *(_DWORD *)&v223[12] = 22;
      *(void *)&v223[16] = (4 * v113 * v115);
      *(_DWORD *)&v223[20] = v115 != 0;
      v223[21] = v7[231];
      *(_DWORD *)&v223[24] = 25;
      if (*v7)
      {
        AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
        int v112 = *((_DWORD *)this + 1153);
        BOOL v114 = *v7 == 0;
      }
      int v116 = *((_DWORD *)this + 1156);
      if (v116 == 1) {
        int v117 = 2;
      }
      else {
        int v117 = 1;
      }
      if (v116 == 2) {
        int v118 = 3;
      }
      else {
        int v118 = v117;
      }
      unsigned int v119 = (v118 * v112 + 15) & 0xFFFFFFF0;
      *((_DWORD *)this + 1174) = v119;
      unsigned int v120 = v119 + 16;
      if (!v114)
      {
        *((_DWORD *)this + 1374) = v120;
        v120 += (4 * *((_DWORD *)this + 1140) + 15) & 0xFFFFFFF0;
      }
      for (uint64_t n = 0; n != 48; n += 12)
      {
        int v122 = (int *)&__dst[n];
        if (__dst[n + 5]) {
          BOOL v123 = 1;
        }
        else {
          BOOL v123 = __dst[n + 4] == 0;
        }
        if (!v123)
        {
          int v124 = *v122;
          int v125 = v122[2];
          if (v125 != 26)
          {
            uint64_t v126 = llvm::ConstantInt::get();
            uint64_t v127 = &v220[48 * v125];
            *(void *)uint64_t v127 = v126;
            v127[12] = 0;
          }
          v120 += (v124 + 15) & 0xFFFFFFF0;
        }
      }
      for (iunint64_t i = 0; ii != 96; ii += 16)
      {
        int v129 = *((_DWORD *)this + 1154);
        int v130 = (char *)this + 4 * *(unsigned int *)&byte_1CADD6A38[ii + 4];
        uint64_t v131 = (unsigned int *)(v130 + 5320);
        if (byte_1CADD6A38[ii]) {
          BOOL v132 = v7[859] == 0;
        }
        else {
          BOOL v132 = 1;
        }
        if (v132)
        {
          uint64_t v133 = v130 + 5296;
          if (byte_1CADD6A38[ii]) {
            int v134 = v131;
          }
          else {
            int v134 = (unsigned int *)v133;
          }
          unsigned int v135 = *v134;
        }
        else
        {
          unsigned int v135 = (*v131 + 1) >> 1;
        }
        int v136 = *(_DWORD *)&byte_1CADD6A38[ii + 8];
        if (v136 != 26)
        {
          uint64_t v137 = llvm::ConstantInt::get();
          uint64_t v138 = &v220[48 * v136];
          *(void *)uint64_t v138 = v137;
          v138[12] = 0;
        }
        v120 += (4 * v129 * v135 + 15) & 0xFFFFFFF0;
      }
      uint64_t v139 = 0;
      int v140 = 0;
      *((_DWORD *)this + 1163) = v120;
      do
      {
        int v141 = (int *)&__dst[v139];
        if (__dst[v139 + 5]) {
          BOOL v142 = __dst[v139 + 4] == 0;
        }
        else {
          BOOL v142 = 1;
        }
        if (!v142)
        {
          int v143 = *v141;
          int v144 = v141[2];
          if (v144 != 26)
          {
            uint64_t v145 = llvm::ConstantInt::get();
            int v146 = &v220[48 * v144];
            *(void *)int v146 = v145;
            v146[12] = 1;
          }
          v140 += (v143 + 15) & 0xFFFFFFF0;
        }
        v139 += 12;
      }
      while (v139 != 48);
      for (juint64_t j = 0; jj != 96; jj += 16)
      {
        int v148 = *((_DWORD *)this + 1154);
        uint64_t v149 = (char *)this + 4 * *(unsigned int *)&byte_1CADD6A38[jj + 4];
        unsigned int v150 = (unsigned int *)(v149 + 5368);
        if (byte_1CADD6A38[jj]) {
          BOOL v151 = v7[859] == 0;
        }
        else {
          BOOL v151 = 1;
        }
        if (v151)
        {
          uint64_t v152 = v149 + 5344;
          if (byte_1CADD6A38[jj]) {
            int v153 = v150;
          }
          else {
            int v153 = (unsigned int *)v152;
          }
          unsigned int v154 = *v153;
        }
        else
        {
          unsigned int v154 = (*v150 + 1) >> 1;
        }
        int v155 = *(_DWORD *)&byte_1CADD6A38[jj + 12];
        if (v155 != 26)
        {
          uint64_t v156 = llvm::ConstantInt::get();
          char v157 = &v220[48 * v155];
          *(void *)char v157 = v156;
          v157[12] = 1;
        }
        v140 += (4 * v148 * v154 + 15) & 0xFFFFFFF0;
      }
      char v158 = 0;
      uint64_t v159 = 0;
      int v160 = 0;
      *((_DWORD *)this + 1165) = v140;
      do
      {
        char v161 = v158;
        if (byte_1CADD6A98[16 * v159]) {
          BOOL v162 = v7[859] == 0;
        }
        else {
          BOOL v162 = 1;
        }
        if (v162)
        {
          uint64_t v163 = (char *)this + 5332;
          if (!byte_1CADD6A98[16 * v159]) {
            uint64_t v163 = (char *)this + 5308;
          }
          unsigned int v164 = *(_DWORD *)v163;
        }
        else
        {
          unsigned int v164 = (*((_DWORD *)this + 1333) + 1) >> 1;
        }
        int v165 = *(_DWORD *)&byte_1CADD6A98[16 * v159 + 8];
        if (v165 != 26)
        {
          uint64_t v166 = llvm::ConstantInt::get();
          unsigned int v167 = &v220[48 * v165];
          *(void *)unsigned int v167 = v166;
          v167[12] = 0;
        }
        v160 += 4 * v164;
        char v158 = 1;
        uint64_t v159 = 1;
      }
      while ((v161 & 1) == 0);
      char v168 = 0;
      uint64_t v169 = 0;
      int v170 = 0;
      *((_DWORD *)this + 1164) = v160;
      do
      {
        char v171 = v168;
        if (byte_1CADD6A98[16 * v169]) {
          BOOL v172 = v7[859] == 0;
        }
        else {
          BOOL v172 = 1;
        }
        if (v172)
        {
          uint64_t v173 = (char *)this + 5380;
          if (!byte_1CADD6A98[16 * v169]) {
            uint64_t v173 = (char *)this + 5356;
          }
          unsigned int v174 = *(_DWORD *)v173;
        }
        else
        {
          unsigned int v174 = (*((_DWORD *)this + 1345) + 1) >> 1;
        }
        int v175 = *(_DWORD *)&byte_1CADD6A98[16 * v169 + 12];
        if (v175 != 26)
        {
          uint64_t v176 = llvm::ConstantInt::get();
          int v177 = &v220[48 * v175];
          *(void *)int v177 = v176;
          v177[12] = 1;
        }
        v170 += 4 * v174;
        char v168 = 1;
        uint64_t v169 = 1;
      }
      while ((v171 & 1) == 0);
      *((_DWORD *)this + 1166) = v170;
      *((_DWORD *)this + 1380) = 4;
      int v178 = v7[859];
      *((_DWORD *)this + 1392) = *((_DWORD *)this + 1324);
      *((_DWORD *)this + 1404) = *((_DWORD *)this + 1325);
      *((_DWORD *)this + 1416) = *((_DWORD *)this + 1326);
      *((_DWORD *)this + 1596) = *((_DWORD *)this + 1327);
      unsigned int v179 = *((_DWORD *)this + 1330);
      if (v178)
      {
        unsigned int v179 = (v179 + 1) >> 1;
        uint32x2_t v180 = vshr_n_u32((uint32x2_t)vadd_s32(*v207, (int32x2_t)0x100000001), 1uLL);
      }
      else
      {
        uint32x2_t v180 = (uint32x2_t)*v207;
      }
      *((_DWORD *)this + 1440) = v179;
      *((_DWORD *)this + 1464) = v180.i32[1];
      *((_DWORD *)this + 1452) = v180.i32[0];
      *((_DWORD *)this + 1608) = *((_DWORD *)this + 1333);
      *((_DWORD *)this + 1500) = *((_DWORD *)this + 1336);
      *((_DWORD *)this + 1512) = *((_DWORD *)this + 1337);
      *((_DWORD *)this + 1524) = *((_DWORD *)this + 1338);
      *((_DWORD *)this + 1620) = *((_DWORD *)this + 1339);
      unsigned int v181 = *((_DWORD *)this + 1342);
      if (v178)
      {
        unsigned int v181 = (v181 + 1) >> 1;
        unsigned int v182 = (*((_DWORD *)this + 1343) + 1) >> 1;
        uint32x2_t v183 = vshr_n_u32((uint32x2_t)vadd_s32(*(int32x2_t *)((char *)this + 5376), (int32x2_t)0x100000001), 1uLL);
      }
      else
      {
        unsigned int v182 = *((_DWORD *)this + 1343);
        uint32x2_t v183 = *(uint32x2_t *)((char *)this + 5376);
      }
      *((_DWORD *)this + 1548) = v181;
      *((_DWORD *)this + 1560) = v182;
      *((_DWORD *)this + 1572) = v183.i32[0];
      *((_DWORD *)this + 1632) = v183.i32[1];
      *((_DWORD *)this + 1644) = v7[232];
      *((_DWORD *)this + 1656) = v7[239];
      *((_DWORD *)this + 1668) = 0;
      *((_DWORD *)this + 1680) = *((_DWORD *)this + 1158);
      uint64_t v184 = operator new(0x38uLL);
      uint64_t v185 = 0;
      uint64_t v186 = 0;
      v184[6] = 0x1900000016;
      *(_OWORD *)uint64_t v184 = xmmword_1CADD6AB8;
      *((_OWORD *)v184 + 1) = unk_1CADD6AC8;
      *((_OWORD *)v184 + 2) = xmmword_1CADD6AD8;
      *((_DWORD *)this + 1378) = 0;
      do
      {
        uint64_t v187 = *(unsigned int *)((char *)v184 + v185);
        int v188 = *(_DWORD *)&v220[48 * v186 + 16];
        if (v188 && v220[48 * v186 + 12]) {
          int v189 = v188 << 16;
        }
        else {
          int v189 = (unsigned __int16)*(_DWORD *)&v220[48 * v186 + 16];
        }
        *(_DWORD *)&v220[48 * v187 + 8] = (unsigned __int16)(*(_WORD *)&v220[48 * v186 + 8] + v189) | ((unsigned __int16)(*(_WORD *)&v220[48 * v186 + 10] + HIWORD(v189)) << 16);
        v185 += 4;
        uint64_t v186 = v187;
      }
      while (v185 != 56);
      operator delete(v184);
    }
    *((_DWORD *)this + 1167) = GenericVaryingAllocator::getTotalSharedComponentWords(v219);
    *((_DWORD *)this + 1168) = GenericVaryingAllocator::getTotalAmplifiedComponentWords(v219);
    *(_DWORD *)&v208[4 * v7[224]] += 4;
    *(_DWORD *)&v208[4 * v7[233]] += v7[232];
    *(_DWORD *)&v208[4 * v7[231]] += *((_DWORD *)this + 1158);
    if (v7[236]) {
      int v190 = 1;
    }
    else {
      int v190 = v7[234];
    }
    int v11 = v214;
    *(_DWORD *)&v208[4 * v7[240]] += v190;
    if (v214)
    {
      uint64_t v191 = *(void *)(*(void *)this - 24);
      uint64_t Cast = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v193 = *v210;
      *(_WORD *)&v223[12] = 257;
      uint64_t v194 = *Cast;
      if (*Cast == v193)
      {
        int v11 = v214;
      }
      else
      {
        int v195 = *(_DWORD *)(v194 + 8);
        int v196 = v195;
        if ((*(_DWORD *)(v194 + 8) & 0xFE) == 0x12) {
          int v196 = *(unsigned __int8 *)(**(void **)(v194 + 16) + 8);
        }
        uint64_t v197 = (char *)this + v191 + 40;
        int v11 = v214;
        if (v196 == 15
          && ((*(_DWORD *)(v193 + 8) & 0xFE) != 0x12
            ? (int v198 = *(_DWORD *)(v193 + 8))
            : (int v198 = *(unsigned __int8 *)(**(void **)(v193 + 16) + 8)),
              v198 == 13))
        {
          uint64_t v199 = 47;
        }
        else
        {
          if ((*(_DWORD *)(v194 + 8) & 0xFE) == 0x12) {
            int v195 = *(unsigned __int8 *)(**(void **)(v194 + 16) + 8);
          }
          if (v195 == 13
            && ((*(_DWORD *)(v193 + 8) & 0xFE) != 0x12
              ? (int v200 = *(_DWORD *)(v193 + 8))
              : (int v200 = *(unsigned __int8 *)(**(void **)(v193 + 16) + 8)),
                v200 == 15))
          {
            uint64_t v199 = 48;
          }
          else
          {
            uint64_t v199 = 49;
          }
        }
        uint64_t Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v197, v199, (uint64_t)Cast, v193, (uint64_t)__dst);
      }
      llvm::Value::replaceAllUsesWith();
      llvm::ValueHandleBase::operator=((AGCLLVMUserMeshShaderSW *)((char *)this + 4536), (uint64_t)Cast);
    }
    if (*v7)
    {
      llvm::Module::getOrInsertNamedMetadata();
      *(void *)std::string __dst = llvm::MDString::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
    uint64_t v5 = v210;
LABEL_336:
    if (!v11) {
      break;
    }
    v5 += 5;
  }
  while (v5 != (uint64_t *)v212);
  if (v11) {
    goto LABEL_356;
  }
  return 0;
}