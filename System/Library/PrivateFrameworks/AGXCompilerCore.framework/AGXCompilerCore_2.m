void AGCLLVMCtx::AGCLLVMCtx(uint64_t a1, uint64_t a2, uint64_t a3, int a4, long long *a5, uint64_t a6)
{
  std::string *v9;
  long long v10;
  int v11;
  const char *v12;
  BOOL v13;
  const char *Value;
  size_t v15;
  Boolean *v16;
  const std::string::value_type *v17;
  void **v18;
  unint64_t v19;
  Boolean keyExistsAndHasValidFormat[16];
  uint64_t v21;

  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = a4;
  llvm::AGX::AGXCompiler::AGXCompiler();
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 176;
  *(_OWORD *)(a1 + 160) = xmmword_1CADD64C0;
  v9 = (std::string *)(a1 + 384);
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 368) = 0;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    v10 = *a5;
    *(void *)(a1 + 400) = *((void *)a5 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  llvm::AGX::TelemetryCollector::TelemetryCollector((llvm::AGX::TelemetryCollector *)(a1 + 448));
  *(unsigned char *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 378) = 0;
  v11 = MGGetBoolAnswer();
  v13 = 0;
  if (v11)
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DISABLE_OPTIMIZATIONS", v12);
    v13 = Value && *Value != 48 && atoi(Value) != 0;
  }
  *(unsigned char *)(a1 + 378) = v13;
  if (*((char *)a5 + 23) >= 0) {
    v15 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    v15 = *((void *)a5 + 1);
  }
  v16 = keyExistsAndHasValidFormat;
  std::string::basic_string[abi:nn180100]((uint64_t)keyExistsAndHasValidFormat, v15 + 18);
  if (v21 < 0) {
    v16 = *(Boolean **)keyExistsAndHasValidFormat;
  }
  if (v15)
  {
    if (*((char *)a5 + 23) >= 0) {
      v17 = (const std::string::value_type *)a5;
    }
    else {
      v17 = *(const std::string::value_type **)a5;
    }
    memmove(v16, v17, v15);
  }
  v18 = (void **)(a1 + 408);
  strcpy((char *)&v16[v15], "/metal_rt.metallib");
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)v18 = *(_OWORD *)keyExistsAndHasValidFormat;
  *(void *)(a1 + 424) = v21;
  v19 = *(unsigned __int8 *)(a6 + 23);
  if ((v19 & 0x80u) != 0) {
    v19 = *(void *)(a6 + 8);
  }
  *(_DWORD *)(a1 + 440) = v19 >> 2;
  operator new[]();
}

void AGCLLVMCtx::~AGCLLVMCtx(AGCLLVMCtx *this)
{
  for (uint64_t i = 328; i != 352; i += 8)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    *(void *)((char *)this + i) = 0;
  }
  uint64_t v4 = *((void *)this + 44);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 44) = 0;
  uint64_t v5 = *((void *)this + 45);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 45) = 0;
  uint64_t v6 = *((void *)this + 46);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 46) = 0;
  uint64_t v7 = *((void *)this + 54);
  if (v7) {
    MEMORY[0x1CB7A0760](v7, 0x1000C8052888210);
  }
  MEMORY[0x1CB79F7B0]((char *)this + 448);
  if (*((char *)this + 431) < 0) {
    operator delete(*((void **)this + 51));
  }
  if (*((char *)this + 407) < 0) {
    operator delete(*((void **)this + 48));
  }
  if (*((char *)this + 327) < 0) {
    operator delete(*((void **)this + 38));
  }
  v8 = (char *)*((void *)this + 19);
  if (v8 != (char *)this + 176) {
    free(v8);
  }
  if (*((unsigned char *)this + 144))
  {
    MEMORY[0x1CB79F710]((char *)this + 128);
    *((unsigned char *)this + 144) = 0;
  }
  if (*((unsigned char *)this + 120))
  {
    MEMORY[0x1CB79F710]((char *)this + 104);
    *((unsigned char *)this + 120) = 0;
  }
  if (*((unsigned char *)this + 96))
  {
    MEMORY[0x1CB79F710]((char *)this + 80);
    *((unsigned char *)this + 96) = 0;
  }
  if (*((unsigned char *)this + 72))
  {
    MEMORY[0x1CB79F710]((char *)this + 56);
    *((unsigned char *)this + 72) = 0;
  }
  llvm::AGX::AGXCompiler::~AGXCompiler((AGCLLVMCtx *)((char *)this + 48));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

BOOL AGCLLVMCtx::addPass(AGCLLVMCtx *this, llvm::legacy::PassManager *a2, llvm::Pass *a3)
{
  if (isValidToPrintMessage((char **)&AGCPrinter)) {
    operator new();
  }
  (*(void (**)(llvm::legacy::PassManager *, llvm::Pass *))(*(void *)a2 + 16))(a2, a3);
  BOOL result = isValidToPrintMessage((char **)&AGCPrinter);
  if (result) {
    operator new();
  }
  return result;
}

void AGCLLVMCtx::createPassManager(AGCLLVMCtx *this)
{
}

uint64_t AGCLLVMVerifyModulePass::runOnModule(AGCLLVMVerifyModulePass *this, llvm::Module *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 48)) {
    int v2 = 4;
  }
  else {
    int v2 = 8;
  }
  if ((**((_DWORD **)this + 7) & v2) != 0)
  {
    v38[0] = 0;
    v38[1] = 0;
    uint64_t v39 = 0;
    int v30 = 0;
    char v34 = 0;
    uint64_t v35 = 0;
    int v36 = 1;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    uint64_t v29 = MEMORY[0x1E4FBA010] + 16;
    v37 = v38;
    llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v29);
    if (llvm::verifyModule())
    {
      uint64_t v4 = (FILE *)*MEMORY[0x1E4F143C8];
      if (*((unsigned char *)this + 48)) {
        uint64_t v5 = "before";
      }
      else {
        uint64_t v5 = "after";
      }
      uint64_t v6 = (void *)*((void *)this + 4);
      if (v6)
      {
        std::string::basic_string[abi:nn180100](buf, v6, *((void *)this + 5));
        if (buf[23] >= 0) {
          uint64_t v7 = buf;
        }
        else {
          uint64_t v7 = *(const char **)buf;
        }
      }
      else
      {
        memset(buf, 0, 24);
        uint64_t v7 = buf;
      }
      v8 = (const char *)v37;
      if (*((char *)v37 + 23) < 0) {
        v8 = (const char *)*v37;
      }
      fprintf(v4, "AGC: %s:%d:%s: *** Module verification failed %s pass '%s' : %s\n", "agc_llvm_object.cpp", 252, "runOnModule", v5, v7, v8);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        if (*((unsigned char *)this + 48)) {
          v22 = "before";
        }
        else {
          v22 = "after";
        }
        v23 = (void *)*((void *)this + 4);
        if (v23)
        {
          std::string::basic_string[abi:nn180100](&__p, v23, *((void *)this + 5));
          if (v28 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
        }
        else
        {
          __p = 0;
          uint64_t v27 = 0;
          p_p = &__p;
          uint64_t v28 = 0;
        }
        v25 = v37;
        if (*((char *)v37 + 23) < 0) {
          v25 = *v37;
        }
        *(_DWORD *)buf = 136316418;
        *(void *)&buf[4] = "agc_llvm_object.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 252;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "runOnModule";
        __int16 v41 = 2080;
        v42 = v22;
        __int16 v43 = 2080;
        v44 = p_p;
        __int16 v45 = 2080;
        v46 = v25;
        _os_log_error_impl(&dword_1CAC02000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "AGC: AGC: %s:%d:%s: *** Module verification failed %s pass '%s' : %s\n", buf, 0x3Au);
        if (SHIBYTE(v28) < 0) {
          operator delete(__p);
        }
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
      {
        if (*((unsigned char *)this + 48)) {
          v15 = "before";
        }
        else {
          v15 = "after";
        }
        v16 = (void *)*((void *)this + 4);
        if (v16)
        {
          std::string::basic_string[abi:nn180100](&__p, v16, *((void *)this + 5));
          if (v28 >= 0) {
            v17 = &__p;
          }
          else {
            v17 = __p;
          }
        }
        else
        {
          __p = 0;
          uint64_t v27 = 0;
          v17 = &__p;
          uint64_t v28 = 0;
        }
        v18 = v37;
        if (*((char *)v37 + 23) < 0) {
          v18 = *v37;
        }
        *(_DWORD *)buf = 136316418;
        *(void *)&buf[4] = "agc_llvm_object.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 252;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "runOnModule";
        __int16 v41 = 2080;
        v42 = v15;
        __int16 v43 = 2080;
        v44 = v17;
        __int16 v45 = 2080;
        v46 = v18;
        _os_log_impl(&dword_1CAC02000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "AGC: AGC: %s:%d:%s: *** Module verification failed %s pass '%s' : %s\n", buf, 0x3Au);
        if (SHIBYTE(v28) < 0) {
          operator delete(__p);
        }
      }
      if (*((unsigned char *)this + 48)) {
        v19 = "before";
      }
      else {
        v19 = "after";
      }
      v20 = (void *)*((void *)this + 4);
      if (v20) {
        std::string::basic_string[abi:nn180100](buf, v20, *((void *)this + 5));
      }
      else {
        memset(buf, 0, 24);
      }
      printMessage((char **)&AGCPrinter, "Module verification failed %s pass '%s' : %s", v9, v10, v11, v12, v13, v14, (char)v19);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v29);
    if (SHIBYTE(v39) < 0) {
      operator delete(v38[0]);
    }
  }
  return 0;
}

void AGCLLVMVerifyModulePass::getAnalysisUsage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

const char *AGCLLVMVerifyModulePass::getPassName(AGCLLVMVerifyModulePass *this)
{
  return "verify module";
}

void AGCLLVMVerifyModulePass::~AGCLLVMVerifyModulePass(AGCLLVMVerifyModulePass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CB7A0780);
}

uint64_t AGCLLVMPrintModulePass::runOnModule(AGCLLVMPrintModulePass *this, llvm::Module *a2)
{
  if (*((unsigned char *)this + 48)) {
    int v2 = 1;
  }
  else {
    int v2 = 2;
  }
  if ((**((_DWORD **)this + 7) & v2) != 0)
  {
    memset(&__str, 0, sizeof(__str));
    int v52 = 0;
    char v56 = 0;
    uint64_t v57 = 0;
    int v58 = 1;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v53 = 0;
    uint64_t v51 = MEMORY[0x1E4FBA010] + 16;
    p_str = &__str;
    llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v51);
    llvm::Module::print();
    if (v55 != v53) {
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v51);
    }
    uint64_t v4 = *((void *)this + 7);
    uint64_t v5 = (std::string *)(v4 + 8);
    uint64_t v6 = *(unsigned __int8 *)(v4 + 31);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = *(unsigned __int8 *)(v4 + 31);
    }
    else {
      uint64_t v7 = *(void *)(v4 + 16);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (v7 == size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v9 = &__str;
      }
      else {
        uint64_t v9 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v6 & 0x80) != 0)
      {
        BOOL v15 = memcmp(v5->__r_.__value_.__l.__data_, v9, *(void *)(v4 + 16)) != 0;
      }
      else if (*(unsigned char *)(v4 + 31))
      {
        uint64_t v10 = v6 - 1;
        uint64_t v11 = (unsigned __int8 *)(v4 + 8);
        do
        {
          int v13 = *v11++;
          int v12 = v13;
          int v14 = v9->__r_.__value_.__s.__data_[0];
          uint64_t v9 = (std::string *)((char *)v9 + 1);
          BOOL v15 = v12 != v14;
        }
        while (v12 == v14 && v10-- != 0);
      }
      else
      {
        BOOL v15 = 0;
      }
    }
    else
    {
      BOOL v15 = 1;
    }
    std::string::operator=(v5, &__str);
    memset(&v50, 0, sizeof(v50));
    MEMORY[0x1CB7A04E0](&v50, "------ ");
    if (*((unsigned char *)this + 48)) {
      v17 = "Before ";
    }
    else {
      v17 = "After ";
    }
    std::string::append(&v50, v17);
    std::string::append(&v50, *((const std::string::value_type **)this + 4), *((void *)this + 5));
    if (v15)
    {
      std::string::append(&v50, " ------");
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v24 = &v50;
      }
      else {
        LOBYTE(v24) = v50.__r_.__value_.__s.__data_[0];
      }
      printMessage((char **)&AGCPrinter, "%s", v18, v19, v20, v21, v22, v23, (char)v24);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v31 = &__str;
      }
      else {
        LOBYTE(v31) = __str.__r_.__value_.__s.__data_[0];
      }
      printMessage((char **)&AGCPrinter, "%s", v25, v26, v27, v28, v29, v30, (char)v31);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v32 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v32 = v50.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:nn180100](__p, v32, 45);
      if (v49 >= 0) {
        uint64_t v39 = __p;
      }
      else {
        LOBYTE(v39) = __p[0];
      }
      printMessage((char **)&AGCPrinter, "%s", v33, v34, v35, v36, v37, v38, (char)v39);
      if (v49 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      std::string::append(&v50, " (No change)");
      std::string::append(&v50, " ------");
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v46 = &v50;
      }
      else {
        LOBYTE(v46) = v50.__r_.__value_.__s.__data_[0];
      }
      printMessage((char **)&AGCPrinter, "%s", v40, v41, v42, v43, v44, v45, (char)v46);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v51);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return 0;
}

void AGCLLVMPrintModulePass::getAnalysisUsage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

const char *AGCLLVMPrintModulePass::getPassName(AGCLLVMPrintModulePass *this)
{
  return "print module";
}

void AGCLLVMPrintModulePass::~AGCLLVMPrintModulePass(AGCLLVMPrintModulePass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CB7A0780);
}

uint64_t AGCLLVMObject::linkCommon(AGCLLVMObject *this, llvm::Module *a2, int a3, llvm::Function *a4)
{
  v39[4] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 1;
  }
  v8 = (char *)a2 + 24;
  for (uint64_t i = *((void *)a2 + 4); (char *)i != v8; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v10 = i - 56;
    }
    else {
      uint64_t v10 = 0;
    }
    if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v10) && (*(unsigned char *)(v10 + 34) & 0x80) != 0) {
      llvm::GlobalValue::setLinkage(v10, 3);
    }
    if ((*(_DWORD *)(v10 + 32) & 0xFu) - 7 >= 2) {
      llvm::GlobalValue::setVisibility(v10);
    }
  }
  uint64_t v11 = *(void *)(*((void *)this + 58) + 32);
  int v12 = *(void **)(v11 + 8);
  if (v12) {
    size_t v13 = strlen(*(const char **)(v11 + 8));
  }
  else {
    size_t v13 = 0;
  }
  llvm::Module::setTargetTriple((uint64_t)a2, v12, v13);
  uint64_t v15 = *(void *)(*((void *)this + 58) + 32);
  if (*(void *)(v15 + 16)) {
    strlen(*(const char **)(v15 + 16));
  }
  llvm::Module::setDataLayout();
  uint64_t v38 = a2;
  v39[3] = 0;
  int v16 = llvm::Linker::linkModules();
  std::__function::__value_func<void ()(llvm::Module &,llvm::StringSet<llvm::MallocAllocator> const&)>::~__value_func[abi:nn180100](v39);
  uint64_t v17 = MEMORY[0x1CB79FA40](v38);
  MEMORY[0x1CB7A0780](v17, 0x10B2C407FF26C1CLL);
  if ((v16 & 1) == 0)
  {
    uint64_t v18 = *((void *)this + 46);
    uint64_t v19 = v18 + 24;
    uint64_t v20 = *(void *)(v18 + 32);
    if (a3)
    {
      if (v20 != v18 + 24)
      {
        do
        {
          uint64_t v21 = v20 - 56;
          BOOL v25 = v20 == 0;
          uint64_t v20 = *(void *)(v20 + 8);
          if (v25) {
            uint64_t v22 = 0;
          }
          else {
            uint64_t v22 = v21;
          }
          if ((llvm::Function *)v22 != a4)
          {
            Name = (void *)llvm::Value::getName((llvm::Value *)v22);
            if (v24 != 22
              || (*Name == 0x626F6C672E636761 ? (BOOL v25 = Name[1] == 0x74736E6F635F6C61) : (BOOL v25 = 0),
                  v25 ? (BOOL v26 = *(void *)((char *)Name + 14) == 0x726F746375727473) : (BOOL v26 = 0),
                  !v26))
            {
              llvm::Value::getName((llvm::Value *)v22);
              int Key = llvm::StringMapImpl::FindKey();
              if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 824))
              {
                int v28 = *(_DWORD *)(v22 + 32);
                if ((v28 & 0xF) != 0) {
                  goto LABEL_42;
                }
              }
              else
              {
                int v28 = *(_DWORD *)(v22 + 32);
              }
              if ((v28 & 0x30) == 0x10)
              {
LABEL_42:
                if (!*(void *)(v22 + 8)) {
                  llvm::Function::eraseFromParent((llvm::Function *)v22);
                }
              }
            }
          }
        }
        while (v20 != v19);
      }
    }
    else
    {
      unsigned int v29 = 1;
      if (v20 != v18 + 24)
      {
        do
        {
          uint64_t v30 = v20 - 56;
          BOOL v25 = v20 == 0;
          uint64_t v20 = *(void *)(v20 + 8);
          if (v25) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = v30;
          }
          if ((llvm::Function *)v31 != a4)
          {
            int v32 = *(_DWORD *)(v31 + 32);
            BOOL v33 = (v32 & 0xF) != 0 || (*(_DWORD *)(v31 + 32) & 0x30) == 16;
            if (v33 && !*(void *)(v31 + 8))
            {
              llvm::Function::eraseFromParent((llvm::Function *)v31);
            }
            else if ((v32 & 0x2000) == 0 && (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v31) & 1) == 0)
            {
              *(_DWORD *)(v31 + 32) = *(_DWORD *)(v31 + 32) & 0xFFFFBFC0 | 0x4007;
              llvm::Function::addFnAttr();
              ++v29;
            }
          }
        }
        while (v20 != v19);
        uint64_t v18 = *((void *)this + 46);
      }
      uint64_t v34 = v18 + 8;
      uint64_t v35 = *(void *)(v18 + 16);
      if (v35 != v18 + 8)
      {
        do
        {
          uint64_t v36 = v35 - 56;
          BOOL v25 = v35 == 0;
          uint64_t v35 = *(void *)(v35 + 8);
          if (v25) {
            uint64_t v37 = 0;
          }
          else {
            uint64_t v37 = v36;
          }
          if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v37) & 1) == 0)
          {
            if (*(void *)(v37 + 8)) {
              *(_DWORD *)(v37 + 32) = *(_DWORD *)(v37 + 32) & 0xFFFFBFC0 | 0x4007;
            }
            else {
              llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v37);
            }
          }
        }
        while (v35 != v34);
      }
      if (v29 > 1) {
        llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*((void *)this + 58) + 344), *((llvm::Module **)this + 46));
      }
    }
  }
  return v16 ^ 1u;
}

llvm::Module *AGCLLVMObject::linkDSFile(AGCLLVMObject *this, const char *__s, llvm::Function *a3)
{
  uint64_t v6 = **((void **)this + 46);
  if (__s) {
    size_t v7 = strlen(__s);
  }
  else {
    size_t v7 = 0;
  }
  BOOL result = (llvm::Module *)AGCLLVMObject::readBitcode(v6, (const UInt8 *)__s, v7, 1);
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = (AGCLLVMAirBuiltins *)(*(uint64_t (**)(void, void, llvm::Module *))(**((void **)this + 50)
                                                                                          + 816))(*((void *)this + 50), 0, result);
    AGCLLVMAirBuiltins::replaceBuiltins(v10);
    BOOL result = (llvm::Module *)AGCLLVMObject::linkCommon(this, v9, 0, a3);
    if (v10)
    {
      uint64_t v11 = *(uint64_t (**)(AGCLLVMAirBuiltins *))(*(void *)v10 + 16);
      return (llvm::Module *)v11(v10);
    }
  }
  return result;
}

uint64_t AGCLLVMObject::readBitcode(uint64_t a1, const UInt8 *a2, CFIndex a3, int a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  CFStringRef v5 = CFStringCreateWithBytes(0, a2, a3, 0x8000100u, 1u);
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.AGXCompilerCore");
  if (a4) {
    CFStringRef v7 = @"ds";
  }
  else {
    CFStringRef v7 = @"ds_internal";
  }
  CFURLRef v8 = CFBundleCopyResourceURL(BundleWithIdentifier, v5, @"ds", v7);
  if (!v8) {
    AGCLLVMObject::readBitcode(AGCLLVMCtx &,llvm::LLVMContext &,llvm::StringRef,BOOL)::$_0::operator()[abi:[AGX] Failed assertion _bitcode_url_]();
  }
  CFURLRef v9 = v8;
  CFStringRef v10 = CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);
  CFStringGetCString(v10, buffer, 1024, 0x600u);
  CFRelease(v5);
  CFRelease(v9);
  CFRelease(v10);
  uint64_t v11 = MEMORY[0x1E4FBA460] + 24;
  uint64_t v12 = MEMORY[0x1E4FBA460] + 64;
  v66[0] = MEMORY[0x1E4FBA460] + 64;
  size_t v13 = (void *)MEMORY[0x1E4FBA3F8];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  v64[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)v64 + *(void *)(v64[0] - 24)) = v14;
  v64[1] = 0;
  uint64_t v15 = (std::ios_base *)((char *)v64 + *(void *)(v64[0] - 24));
  std::ios_base::init(v15, v65);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  v64[0] = v11;
  v66[0] = v12;
  MEMORY[0x1CB7A0580](v65);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)v64 + *(void *)(v64[0] - 24)), *(_DWORD *)&v65[*(void *)(v64[0] - 24) + 16] | 4);
  }
  int v16 = (char *)v64 + *(void *)(v64[0] - 24);
  if ((v16[32] & 5) != 0)
  {
    uint64_t v17 = (void *)MEMORY[0x1E4FBA240];
    uint64_t v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"readBitcode", 11);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"(): unable to open file: ", 25);
    size_t v19 = strlen(buffer);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)buffer, v19);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
    uint64_t v20 = std::locale::use_facet(v53, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(v53);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v21 = 0;
  }
  else
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    BOOL v25 = (void *)*((void *)v16 + 5);
    while (v25)
    {
      BOOL v26 = (char *)v25[3];
      uint64_t v27 = (char *)v25[4];
      if (v26 == v27)
      {
        if ((*(unsigned int (**)(void *))(*v25 + 72))(v25) == -1) {
          break;
        }
        BOOL v26 = (char *)v25[3];
        uint64_t v27 = (char *)v25[4];
      }
      if (v26 == v27) {
        char v28 = (*(uint64_t (**)(void *))(*v25 + 72))(v25);
      }
      else {
        char v28 = *v26;
      }
      if (v23 >= v24)
      {
        uint64_t v30 = (uint64_t)&v23[-v22 + 1];
        if (v30 < 0) {
          abort();
        }
        if (2 * (uint64_t)&v24[-v22] > (unint64_t)v30) {
          uint64_t v30 = 2 * (void)&v24[-v22];
        }
        if ((unint64_t)&v24[-v22] >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v31 = v30;
        }
        if (v31) {
          int v32 = (char *)operator new(v31);
        }
        else {
          int v32 = 0;
        }
        BOOL v33 = &v23[(void)v32 - v22];
        *BOOL v33 = v28;
        unsigned int v29 = v33 + 1;
        if (v23 != (char *)v22)
        {
          uint64_t v34 = &v23[~v22];
          do
          {
            char v35 = *--v23;
            (v34--)[(void)v32] = v35;
          }
          while (v23 != (char *)v22);
          BOOL v33 = v32;
        }
        uint64_t v24 = &v32[v31];
        if (v22) {
          operator delete((void *)v22);
        }
        unint64_t v22 = (unint64_t)v33;
      }
      else
      {
        char *v23 = v28;
        unsigned int v29 = v23 + 1;
      }
      uint64_t v36 = v25[3];
      if (v36 == v25[4]) {
        (*(void (**)(void *))(*v25 + 80))(v25);
      }
      else {
        v25[3] = v36 + 1;
      }
      uint64_t v23 = v29;
    }
    *(_DWORD *)unint64_t v22 = 186106078;
    *(_DWORD *)(v22 + 20) = -557825214;
    int v56 = 0;
    *(_OWORD *)uint64_t v54 = 0u;
    long long v55 = 0u;
    *(_OWORD *)&v53[0].__locale_ = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long __p = 0u;
    uint64_t v61 = 0;
    v62[0] = (char *)&v63;
    v62[1] = (char *)0x400000000;
    unint64_t v48 = v22;
    char v49 = &v23[-v22];
    std::string v50 = buffer;
    size_t v51 = strlen(buffer);
    uint64_t v37 = (llvm *)llvm::parseIR();
    uint64_t v21 = v52;
    uint64_t v52 = 0;
    if (!v21)
    {
      uint64_t v39 = (llvm::raw_ostream *)llvm::errs(v37);
      llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v53, "readBitcode", v39);
      if ((SBYTE7(v55) & 0x80u) == 0) {
        uint64_t v40 = v54;
      }
      else {
        uint64_t v40 = (void **)v54[0];
      }
      if (v40)
      {
        if ((SBYTE7(v55) & 0x80u) == 0) {
          size_t v41 = BYTE7(v55);
        }
        else {
          size_t v41 = (size_t)v54[1];
        }
        std::string::basic_string[abi:nn180100](&__dst, v40, v41);
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
      }
      if ((SBYTE7(v58) & 0x80u) == 0) {
        uint64_t v42 = &v57;
      }
      else {
        uint64_t v42 = (long long *)v57;
      }
      if (v42)
      {
        if ((SBYTE7(v58) & 0x80u) == 0) {
          size_t v43 = BYTE7(v58);
        }
        else {
          size_t v43 = *((void *)&v57 + 1);
        }
        std::string::basic_string[abi:nn180100](&v46, v42, v43);
      }
      else
      {
        memset(&v46, 0, sizeof(v46));
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v44, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v44 = __dst;
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v45, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
      }
      else {
        std::string v45 = v46;
      }
      AGCLLVMObject::readBitcode(AGCLLVMCtx &,llvm::LLVMContext &,llvm::StringRef,BOOL)::$_1::operator()[abi:[AGX] Failed assertion _false_]();
      AGCLLVMObject::readBitcode(AGCLLVMCtx &,llvm::LLVMContext &,llvm::StringRef,BOOL)::$_0::operator()[abi:[AGX] Failed assertion _bitcode_url_]();
    }
    llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v62);
    size_t v13 = (void *)MEMORY[0x1E4FBA3F8];
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete(*((void **)&v58 + 1));
    }
    if (SBYTE7(v58) < 0) {
      operator delete((void *)v57);
    }
    if (SBYTE7(v55) < 0) {
      operator delete(v54[0]);
    }
    operator delete((void *)v22);
  }
  v64[0] = *v13;
  *(void *)((char *)v64 + *(void *)(v64[0] - 24)) = v13[3];
  MEMORY[0x1CB7A0590](v65);
  std::istream::~istream();
  MEMORY[0x1CB7A0710](v66);
  return v21;
}

void AGCLLVMObject::readBitcode(AGCLLVMCtx &,llvm::LLVMContext &,llvm::StringRef,BOOL)::$_0::operator()[abi:[AGX] Failed assertion _bitcode_url_]()
{
}

uint64_t AGCLLVMObject::readBitcode(AGCLLVMCtx &,llvm::LLVMContext &,llvm::StringRef,BOOL)::$_1::operator()[abi:[AGX] Failed assertion _false_]()
{
  os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  _os_log_send_and_compose_impl();
  uint64_t result = _os_crash_msg();
  __break(1u);
  return result;
}

void llvm::function_ref<llvm::Optional<std::string> ()(llvm::StringRef)>::callback_fn<llvm::$_2>(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void AGCLLVMObject::extractPhaseOffsetsWithAux(flatbuffers::Vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const*,flatbuffers::Vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const*,flatbuffers::Offset<flatbuffers::Vector<unsigned int>> &)::$_0::operator()(void *a1, _DWORD *a2)
{
  if (a2 && *a2)
  {
    uint64_t v3 = *(uint64_t **)(a1[1] + 16);
    if (v3)
    {
      uint64_t v4 = a2 + 1;
      do
      {
        CFStringRef v5 = (int *)((char *)v4 + *v4);
        uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
        if (*v6 >= 5u && (uint64_t v7 = v6[2]) != 0) {
          CFURLRef v8 = (char *)v5 + v7 + *(unsigned int *)((char *)v5 + v7);
        }
        else {
          CFURLRef v8 = 0;
        }
        std::string::basic_string[abi:nn180100]<0>(__p, v8 + 4);
        int v9 = *((char *)v3 + 39);
        unsigned __int8 v10 = v44;
        if ((v44 & 0x80u) == 0) {
          size_t v11 = v44;
        }
        else {
          size_t v11 = (size_t)__p[1];
        }
        if ((v44 & 0x80u) == 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        if (v9 >= 0) {
          size_t v13 = *((unsigned __int8 *)v3 + 39);
        }
        else {
          size_t v13 = v3[3];
        }
        if (v9 >= 0) {
          uint64_t v14 = v3 + 2;
        }
        else {
          uint64_t v14 = (const void *)v3[2];
        }
        if (v13 >= v11) {
          size_t v15 = v11;
        }
        else {
          size_t v15 = v13;
        }
        if (!memcmp(v12, v14, v15) && v13 == v11)
        {
          uint64_t v17 = *a1;
          size_t v19 = *(_DWORD **)(*a1 + 8);
          unint64_t v18 = *(void *)(*a1 + 16);
          if ((unint64_t)v19 >= v18)
          {
            uint64_t v21 = *(_DWORD **)v17;
            uint64_t v22 = ((uint64_t)v19 - *(void *)v17) >> 2;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62) {
              goto LABEL_67;
            }
            uint64_t v24 = v18 - (void)v21;
            if (v24 >> 1 > v23) {
              unint64_t v23 = v24 >> 1;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25)
            {
              unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v25);
              uint64_t v21 = *(_DWORD **)v17;
              size_t v19 = *(_DWORD **)(v17 + 8);
            }
            else
            {
              uint64_t v26 = 0;
            }
            uint64_t v27 = (_DWORD *)(v25 + 4 * v22);
            *uint64_t v27 = *((_DWORD *)v3 + 10);
            uint64_t v20 = v27 + 1;
            while (v19 != v21)
            {
              int v28 = *--v19;
              *--uint64_t v27 = v28;
            }
            *(void *)uint64_t v17 = v27;
            *(void *)(v17 + 8) = v20;
            *(void *)(v17 + 16) = v25 + 4 * v26;
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            _DWORD *v19 = *((_DWORD *)v3 + 10);
            uint64_t v20 = v19 + 1;
          }
          *(void *)(v17 + 8) = v20;
          unsigned __int8 v10 = v44;
        }
        if ((v10 & 0x80) != 0) {
          operator delete(__p[0]);
        }
        uint64_t v3 = (uint64_t *)*v3;
      }
      while (v3);
    }
  }
  else
  {
    uint64_t v29 = *a1;
    size_t v31 = *(_DWORD **)(*a1 + 8);
    unint64_t v30 = *(void *)(*a1 + 16);
    if ((unint64_t)v31 >= v30)
    {
      BOOL v33 = *(_DWORD **)v29;
      uint64_t v34 = ((uint64_t)v31 - *(void *)v29) >> 2;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62) {
LABEL_67:
      }
        abort();
      uint64_t v36 = v30 - (void)v33;
      if (v36 >> 1 > v35) {
        unint64_t v35 = v36 >> 1;
      }
      BOOL v37 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v37) {
        unint64_t v38 = v35;
      }
      if (v38)
      {
        unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v38);
        BOOL v33 = *(_DWORD **)v29;
        size_t v31 = *(_DWORD **)(v29 + 8);
      }
      else
      {
        uint64_t v39 = 0;
      }
      uint64_t v40 = (_DWORD *)(v38 + 4 * v34);
      unint64_t v41 = v38 + 4 * v39;
      *uint64_t v40 = -1;
      int v32 = v40 + 1;
      while (v31 != v33)
      {
        int v42 = *--v31;
        *--uint64_t v40 = v42;
      }
      *(void *)uint64_t v29 = v40;
      *(void *)(v29 + 8) = v32;
      *(void *)(v29 + 16) = v41;
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *size_t v31 = -1;
      int v32 = v31 + 1;
    }
    *(void *)(v29 + 8) = v32;
  }
}

llvm::Value *AGCLLVMObject::buildWGBarrier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 456) = 1;
  uint64_t v6 = *(void *)(a1 + 400);
  uint64_t v7 = *(void *)(v6 + 936);
  if (v7) {
    size_t v8 = strlen(*(const char **)(v6 + 936));
  }
  else {
    size_t v8 = 0;
  }
  uint64_t v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1 + 32, v7, v8, *(void *)(a1 + 176), *(void *)(a1 + 224), *(void *)(a1 + 224));
  __int16 v12 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 40, *(void *)(v9 + 24), v9, a2, a3, (uint64_t)v11);
}

void AGCLLVMObject::addDylibBinding(AGCLLVMObject *this, llvm::GlobalVariable *a2)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  __src[0] = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  __src[1] = llvm::ValueAsMetadata::get();
  v5[0] = v6;
  v5[1] = (void *)0x200000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)v5, __src, v5);
  uint64_t Impl = llvm::MDTuple::getImpl();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this + 2936, Impl);
  if (v5[0] != v6) {
    free(v5[0]);
  }
}

uint64_t AGCLLVMObject::buildMulShiftDiv(AGCLLVMObject *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  size_t v8 = (AGCLLVMObject *)((char *)this + 40);
  uint64_t v9 = *((void *)this + 30);
  __int16 v29 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 39, (uint64_t)a2, v9, (uint64_t)v28);
  uint64_t v11 = *((void *)this + 30);
  __int16 v27 = 257;
  __int16 v12 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v8, 39, (uint64_t)a3, v11, (uint64_t)v26);
  __int16 v25 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v8, Cast, v12, (const llvm::Twine *)v24);
  uint64_t v14 = *((void *)this + 30);
  __int16 v29 = 257;
  size_t v15 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v8, 39, (uint64_t)a2, v14, (uint64_t)v28);
  __int16 v27 = 257;
  uint64_t Add = llvm::IRBuilderBase::CreateAdd(v8, Mul, v15, (const llvm::Twine *)v26);
  uint64_t v17 = *((void *)this + 35);
  __int16 v29 = 257;
  unint64_t v18 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v8, 49, Add, v17, (uint64_t)v28);
  __int16 v29 = 257;
  size_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v8, v18, v19, (const llvm::Twine *)v28);
  __int16 v29 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v8, Element, a4, (const llvm::Twine *)v28);
  uint64_t v22 = *(void *)a2;
  __int16 v27 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v8, 39, LShr, v22, (uint64_t)v26);
}

uint64_t AGCLLVMObject::createGlobalBufferBinding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = llvm::User::operator new((llvm::User *)0x58);
  uint64_t v8 = llvm::GlobalVariable::GlobalVariable();
  *(unsigned char *)(v8 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  __src[0] = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  __src[1] = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  void __src[2] = llvm::ValueAsMetadata::get();
  v14[0] = v15;
  v14[1] = (void *)0x400000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)v14, __src, v14);
  if (a5)
  {
    llvm::ConstantInt::get();
    uint64_t v9 = llvm::ValueAsMetadata::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v14, v9);
  }
  uint64_t v10 = *(void *)(a1 + 376);
  uint64_t Impl = llvm::MDTuple::getImpl();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v10, Impl);
  if (v14[0] != v15) {
    free(v14[0]);
  }
  return v7;
}

void AGCLLVMObject::replaceConstantChainWithInstrs(AGCLLVMObject *this, llvm::Constant *a2)
{
  v65[32] = *MEMORY[0x1E4F143B8];
  uint64_t v63 = (char *)v65;
  uint64_t v64 = 0x1000000000;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(void *)(v2 + 24);
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4 || *(unsigned __int8 *)(v3 + 16) >= 0x1Cu) {
        llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v63, v2, v4);
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
    int v5 = v64;
    v60 = v62;
    for (uint64_t i = 0x400000000; v64; v5 = v64)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v6 = &v63[16 * v5];
          uint64_t v7 = *(void *)(*((void *)v6 - 2) + 24);
          if (v7) {
            BOOL v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
          }
          else {
            BOOL v8 = 0;
          }
          if (v8)
          {
            unsigned int v56 = 128;
            v55[0] = (llvm *)MEMORY[0x1CB79F270](0x2000, 8);
            llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)v55);
            v57[0] = 0;
            v57[24] = 0;
            if (i)
            {
              uint64_t v52 = v6;
              uint64_t v14 = (llvm::ConstantExpr **)v60;
              uint64_t v53 = (char *)v60 + 8 * i;
              do
              {
                size_t v15 = *v14;
                int v16 = *((unsigned __int8 *)*v14 + 16);
                if (*v14) {
                  BOOL v17 = v16 == 5;
                }
                else {
                  BOOL v17 = 0;
                }
                uint64_t v54 = v14;
                if (v17)
                {
                  AsInstruction = (void *)llvm::ConstantExpr::getAsInstruction(v15, 0);
                  llvm::Instruction::insertBefore();
                }
                else
                {
                  if (v15) {
                    BOOL v18 = v16 == 10;
                  }
                  else {
                    BOOL v18 = 0;
                  }
                  if (v18)
                  {
                    uint64_t v30 = llvm::UndefValue::get();
                    Context = (llvm::Type *)llvm::Value::getContext(v15);
                    llvm::Type::getInt32Ty(Context, v32);
                    uint64_t v33 = *(unsigned int *)(*(void *)v15 + 32);
                    if (v33)
                    {
                      uint64_t v34 = 0;
                      unint64_t v35 = v15;
                      do
                      {
                        uint64_t v36 = (llvm::Value *)*((void *)v35 - 4 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF));
                        *(void *)buf = 0;
                        if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t)v55[0], v56, (uint64_t)v36, buf))
                        {
                          BOOL v37 = *(char **)buf;
                          unint64_t v38 = v55[0];
                          uint64_t v39 = v56;
                        }
                        else
                        {
                          unint64_t v38 = v55[0];
                          uint64_t v39 = v56;
                          BOOL v37 = (char *)v55[0] + 64 * (unint64_t)v56;
                        }
                        if ((char *)v38 + 64 * v39 == v37)
                        {
                          *(void *)buf = 6;
                          *(void *)&buf[8] = 0;
                          *(void *)&buf[16] = v36;
                          if (v36 != (llvm::Value *)-8192 && v36 != (llvm::Value *)-4096 && v36 != 0) {
                            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)buf);
                          }
                        }
                        else
                        {
                          uint64_t v40 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v55, v36);
                          llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)buf, 3u, v40);
                        }
                        uint64_t v42 = *(void *)&buf[16];
                        if (*(void *)&buf[16] != -8192 && *(void *)&buf[16] != -4096 && *(void *)&buf[16]) {
                          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)buf);
                        }
                        uint64_t v43 = llvm::ConstantInt::get();
                        __int16 v59 = 257;
                        AsInstruction = (void *)llvm::User::operator new((llvm::User *)0x40);
                        MEMORY[0x1CB79F370](AsInstruction, v30, v42, v43, buf, 0);
                        llvm::Instruction::insertBefore();
                        ++v34;
                        unint64_t v35 = (llvm::ConstantExpr *)((char *)v35 + 32);
                        uint64_t v30 = (uint64_t)AsInstruction;
                      }
                      while (v33 != v34);
                    }
                    else
                    {
                      AsInstruction = (void *)v30;
                    }
                  }
                  else
                  {
                    if (v15) {
                      BOOL v19 = v16 == 9;
                    }
                    else {
                      BOOL v19 = 0;
                    }
                    if (!v19)
                    {
                      fprintf((FILE *)*MEMORY[0x1E4F143C8], "AGC: %s:%d:%s: !!! Unable to replace a constant with instructions\n", "agc_llvm_object.cpp", 1794, "void AGCLLVMObject::replaceConstantChainWithInstrs(Constant *)");
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(void *)&buf[4] = "agc_llvm_object.cpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 1794;
                        *(_WORD *)&buf[18] = 2080;
                        *(void *)&buf[20] = "void AGCLLVMObject::replaceConstantChainWithInstrs(Constant *)";
                        _os_log_error_impl(&dword_1CAC02000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "AGC: AGC: %s:%d:%s: !!! Unable to replace a constant with instructions\n", buf, 0x1Cu);
                      }
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(void *)&buf[4] = "agc_llvm_object.cpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 1794;
                        *(_WORD *)&buf[18] = 2080;
                        *(void *)&buf[20] = "void AGCLLVMObject::replaceConstantChainWithInstrs(Constant *)";
                        _os_log_impl(&dword_1CAC02000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "AGC: AGC: %s:%d:%s: !!! Unable to replace a constant with instructions\n", buf, 0x1Cu);
                      }
                      abort();
                    }
                    AsInstruction = (void *)llvm::UndefValue::get();
                    uint64_t v21 = *(unsigned int *)(*(void *)v15 + 12);
                    if (v21)
                    {
                      uint64_t v22 = 0;
                      unint64_t v23 = v15;
                      do
                      {
                        uint64_t v24 = (llvm::Value *)*((void *)v23 - 4 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF));
                        *(void *)buf = 0;
                        if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t)v55[0], v56, (uint64_t)v24, buf))
                        {
                          __int16 v25 = *(char **)buf;
                          uint64_t v26 = v55[0];
                          uint64_t v27 = v56;
                        }
                        else
                        {
                          uint64_t v26 = v55[0];
                          uint64_t v27 = v56;
                          __int16 v25 = (char *)v55[0] + 64 * (unint64_t)v56;
                        }
                        if ((char *)v26 + 64 * v27 == v25)
                        {
                          *(void *)buf = 6;
                          *(void *)&buf[8] = 0;
                          *(void *)&buf[16] = v24;
                          if (v24 != (llvm::Value *)-8192 && v24 != (llvm::Value *)-4096 && v24 != 0) {
                            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)buf);
                          }
                        }
                        else
                        {
                          int v28 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v55, v24);
                          llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)buf, 3u, v28);
                        }
                        if (*(void *)&buf[16] != -8192 && *(void *)&buf[16] != -4096 && *(void *)&buf[16]) {
                          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)buf);
                        }
                        __int16 v59 = 257;
                        AsInstruction = (void *)llvm::InsertValueInst::Create();
                        llvm::Instruction::insertBefore();
                        ++v22;
                        unint64_t v23 = (llvm::ConstantExpr *)((char *)v23 + 32);
                      }
                      while (v21 != v22);
                    }
                  }
                }
                unsigned __int8 v44 = (llvm::ValueHandleBase *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v55, v15);
                llvm::ValueHandleBase::operator=(v44, (uint64_t)AsInstruction);
                llvm::ValueMapper::ValueMapper();
                llvm::ValueMapper::remapInstruction((llvm::ValueMapper *)buf, (llvm::Instruction *)AsInstruction);
                MEMORY[0x1CB79EE40](buf);
                uint64_t v14 = v54 + 1;
              }
              while (v54 + 1 != (llvm::ConstantExpr **)v53);
              uint64_t v45 = *((void *)v52 - 2);
              if (*(void *)v45)
              {
                **(void **)(v45 + 16) = *(void *)(v45 + 8);
                uint64_t v46 = *(void *)(v45 + 8);
                if (v46) {
                  *(void *)(v46 + 16) = *(void *)(v45 + 16);
                }
              }
              *(void *)uint64_t v45 = AsInstruction;
              uint64_t v49 = AsInstruction[1];
              unint64_t v48 = AsInstruction + 1;
              uint64_t v47 = v49;
              *(void *)(v45 + 8) = v49;
              if (v49) {
                *(void *)(v47 + 16) = v45 + 8;
              }
              *(void *)(v45 + 16) = v48;
              *unint64_t v48 = v45;
            }
            LODWORD(v64) = v64 - 1;
            llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v57);
            llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll((uint64_t)v55[0], v56);
            llvm::deallocate_buffer(v55[0], (void *)((unint64_t)v56 << 6));
            goto LABEL_89;
          }
          uint64_t v9 = *((void *)v6 - 1);
          if (v9) {
            break;
          }
          LODWORD(v64) = --v5;
          LODWORD(i) = i - 1;
          if (!v5) {
            goto LABEL_92;
          }
        }
        uint64_t v10 = *(void *)(v7 + 8);
        if (v10) {
          break;
        }
        LODWORD(v64) = --v5;
        if (!v5) {
          goto LABEL_92;
        }
      }
      if (v9 == v10 && (!i || *((void *)v60 + i - 1) != v7))
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v60, *(void *)(*((void *)v6 - 2) + 24));
        uint64_t v9 = *((void *)v6 - 1);
      }
      *((void *)v6 - 1) = *(void *)(v9 + 8);
      uint64_t v11 = *(void *)(v9 + 24);
      unsigned int v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 < 0x1C)
      {
        if (v12 < 4) {
          continue;
        }
        uint64_t v13 = *(void *)(v11 + 8);
        if (!v13) {
          continue;
        }
      }
      else
      {
        uint64_t v13 = *(void *)(v11 + 8);
      }
      llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v63, v9, v13);
LABEL_89:
      ;
    }
  }
  else
  {
    v60 = v62;
    uint64_t i = 0x400000000;
  }
LABEL_92:
  llvm::Constant::removeDeadConstantUsers(this);
  if (v60 != v62) {
    free(v60);
  }
  if (v63 != (char *)v65) {
    free(v63);
  }
}

llvm::Type *RewriteAdressSpacePass::TypeRemapper::remapType(RewriteAdressSpacePass::TypeRemapper *this, llvm::Type *a2)
{
  v33[8] = *MEMORY[0x1E4F143B8];
  int v5 = (char *)this + 16;
  uint64_t v4 = *((void *)this + 2);
  uint64_t v6 = *((unsigned int *)this + 8);
  if (!v6) {
    goto LABEL_9;
  }
  LODWORD(v7) = ((a2 >> 4) ^ (a2 >> 9)) & (v6 - 1);
  uint64_t v8 = v4 + 16 * v7;
  uint64_t v9 = *(llvm::Type **)v8;
  if (*(llvm::Type **)v8 != a2)
  {
    int v11 = 1;
    while (v9 != (llvm::Type *)-4096)
    {
      int v12 = v7 + v11++;
      uint64_t v7 = v12 & (v6 - 1);
      uint64_t v9 = *(llvm::Type **)(v4 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = v4 + 16 * v7;
        goto LABEL_3;
      }
    }
LABEL_9:
    int v13 = *((_DWORD *)a2 + 2);
    if (a2 && v13 == 17)
    {
      uint64_t v14 = (llvm::ArrayType *)(*(uint64_t (**)(RewriteAdressSpacePass::TypeRemapper *, void))(*(void *)this + 24))(this, *((void *)a2 + 3));
      uint64_t v15 = llvm::ArrayType::get(v14, *((llvm::Type **)a2 + 4));
LABEL_12:
      uint64_t v10 = (llvm::Type *)v15;
      goto LABEL_20;
    }
    if (a2 && v13 == 14)
    {
      uint64_t v16 = *((void *)a2 + 2);
      BOOL v17 = (unsigned char *)(v16 + 8 * *((unsigned int *)a2 + 3));
      size_t v31 = v33;
      uint64_t v32 = 0x800000000;
      llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v31, (unsigned char *)(v16 + 8), v17);
      if (v32)
      {
        BOOL v18 = v31;
        uint64_t v19 = 8 * v32;
        do
        {
          void *v18 = (*(uint64_t (**)(RewriteAdressSpacePass::TypeRemapper *, void))(*(void *)this + 24))(this, *v18);
          ++v18;
          v19 -= 8;
        }
        while (v19);
      }
      (*(void (**)(RewriteAdressSpacePass::TypeRemapper *, void))(*(void *)this + 24))(this, **((void **)a2 + 2));
      uint64_t v10 = (llvm::Type *)llvm::FunctionType::get();
      uint64_t v20 = v31;
      if (v31 != v33) {
LABEL_19:
      }
        free(v20);
    }
    else
    {
      if (a2 && v13 == 15)
      {
        (*(void (**)(RewriteAdressSpacePass::TypeRemapper *, void))(*(void *)this + 24))(this, **((void **)a2 + 2));
        uint64_t v15 = llvm::PointerType::get();
        goto LABEL_12;
      }
      if (a2 && v13 == 16)
      {
        uint64_t v10 = a2;
        if ((v13 & 0x100) != 0)
        {
          uint64_t v26 = (unsigned char *)*((void *)a2 + 2);
          uint64_t v27 = &v26[8 * *((unsigned int *)a2 + 3)];
          size_t v31 = v33;
          uint64_t v32 = 0x800000000;
          llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v31, v26, v27);
          if (v32)
          {
            int v28 = v31;
            uint64_t v29 = 8 * v32;
            do
            {
              *int v28 = (*(uint64_t (**)(RewriteAdressSpacePass::TypeRemapper *, void))(*(void *)this + 24))(this, *v28);
              ++v28;
              v29 -= 8;
            }
            while (v29);
          }
          if ((*((_DWORD *)a2 + 2) & 0x400) != 0)
          {
            uint64_t v30 = llvm::StructType::get();
          }
          else
          {
            llvm::StructType::getName(a2);
            uint64_t v30 = llvm::StructType::create();
          }
          uint64_t v10 = (llvm::Type *)v30;
          uint64_t v20 = v31;
          if (v31 != v33) {
            goto LABEL_19;
          }
        }
      }
      else
      {
        uint64_t v10 = a2;
        if (a2)
        {
          uint64_t v10 = a2;
          if ((v13 & 0xFE) == 0x12)
          {
            (*(void (**)(RewriteAdressSpacePass::TypeRemapper *, void))(*(void *)this + 24))(this, *((void *)a2 + 3));
            uint64_t v15 = llvm::VectorType::get();
            goto LABEL_12;
          }
        }
      }
    }
LABEL_20:
    size_t v31 = 0;
    char v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*((void *)this + 2), *((_DWORD *)this + 8), (uint64_t)a2, &v31);
    uint64_t v22 = v31;
    if (v21)
    {
LABEL_26:
      v22[1] = v10;
      return v10;
    }
    int v23 = *((_DWORD *)this + 6);
    unsigned int v24 = *((_DWORD *)this + 8);
    if (4 * v23 + 4 >= 3 * v24)
    {
      v24 *= 2;
    }
    else if (v24 + ~v23 - *((_DWORD *)this + 7) > v24 >> 3)
    {
LABEL_23:
      ++*((_DWORD *)this + 6);
      if (*v22 != -4096) {
        --*((_DWORD *)this + 7);
      }
      void *v22 = a2;
      v22[1] = 0;
      goto LABEL_26;
    }
    llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::grow((uint64_t)v5, v24);
    size_t v31 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*((void *)this + 2), *((_DWORD *)this + 8), (uint64_t)a2, &v31);
    uint64_t v22 = v31;
    goto LABEL_23;
  }
LABEL_3:
  if (v8 == v4 + 16 * v6) {
    goto LABEL_9;
  }
  return *(llvm::Type **)(v8 + 8);
}

void RewriteAdressSpacePass::TypeRemapper::~TypeRemapper(llvm **this)
{
  *this = (llvm *)&unk_1F25CC9B8;
  llvm::deallocate_buffer(this[2], (void *)(16 * *((unsigned int *)this + 8)));
  JUMPOUT(0x1CB7A0780);
}

{
  *this = (llvm *)&unk_1F25CC9B8;
  llvm::deallocate_buffer(this[2], (void *)(16 * *((unsigned int *)this + 8)));
}

uint64_t RewriteAdressSpacePass::runOnModule(RewriteAdressSpacePass *this, llvm::Module *a2)
{
  v52[32] = *MEMORY[0x1E4F143B8];
  std::string v50 = v52;
  uint64_t v51 = 0x2000000000;
  unsigned int v35 = 128;
  uint64_t v33 = (llvm *)MEMORY[0x1CB79F270](0x2000, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)&v33);
  v36[0] = 0;
  v36[24] = 0;
  for (uint64_t i = (void *)*((void *)a2 + 4); i != (void *)((char *)a2 + 24); uint64_t i = (void *)i[1])
  {
    if (i) {
      uint64_t v4 = (llvm::Value *)(i - 7);
    }
    else {
      uint64_t v4 = 0;
    }
    llvm::Module::materialize();
    if (llvm::GlobalValue::isDeclaration(v4))
    {
      if (*((_DWORD *)v4 + 9))
      {
        uint64_t v46 = (llvm *)&v48;
        uint64_t v47 = 0x800000000;
        llvm::Intrinsic::getIntrinsicInfoTableEntries();
        BOOL v37 = v46;
        uint64_t v38 = v47;
        uint64_t v40 = (llvm *)&v42;
        uint64_t v41 = 0x800000000;
        llvm::Intrinsic::matchIntrinsicSignature();
        int v5 = (llvm::Type **)v40;
        if (v41)
        {
          uint64_t v6 = 8 * v41;
          do
          {
            *int v5 = RewriteAdressSpacePass::TypeRemapper::remapType((RewriteAdressSpacePass *)((char *)this + 32), *v5);
            ++v5;
            v6 -= 8;
          }
          while (v6);
        }
        uint64_t Declaration = llvm::Intrinsic::getDeclaration();
        if (v4 != (llvm::Value *)Declaration)
        {
          uint64_t v8 = Declaration;
          uint64_t v9 = (llvm::ValueHandleBase *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v33, v4);
          llvm::ValueHandleBase::operator=(v9, v8);
        }
        if (v40 != (llvm *)&v42) {
          free(v40);
        }
        if (v46 != (llvm *)&v48) {
          free(v46);
        }
      }
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v50, (uint64_t)v4);
    }
  }
  unsigned int v48 = 128;
  uint64_t v46 = (llvm *)MEMORY[0x1CB79F270](0x2000, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)&v46);
  v49[0] = 0;
  v49[24] = 0;
  if (v51)
  {
    uint64_t v10 = (uint64_t *)v50;
    uint64_t v11 = 8 * v51;
    do
    {
      uint64_t v12 = *v10++;
      int v13 = RewriteAdressSpacePass::TypeRemapper::remapType((RewriteAdressSpacePass *)((char *)this + 32), *(llvm::Type **)(v12 + 24));
      uint64_t v14 = *(_DWORD *)(v12 + 32) & 0xF;
      __int16 v44 = 257;
      uint64_t v15 = llvm::User::operator new((llvm::User *)0x78);
      MEMORY[0x1CB79FC90](v15, v13, v14, 0xFFFFFFFFLL, &v40, a2);
      uint64_t v16 = (llvm::ValueHandleBase *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v46, (llvm::Value *)v12);
      llvm::ValueHandleBase::operator=(v16, v15);
      v11 -= 8;
    }
    while (v11);
    if (v51)
    {
      BOOL v17 = (llvm::Value **)v50;
      BOOL v18 = (llvm::Value **)((char *)v50 + 8 * v51);
      do
      {
        uint64_t v19 = *v17;
        uint64_t v20 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v46, *v17)[2];
        unsigned int v42 = 128;
        uint64_t v40 = (llvm *)MEMORY[0x1CB79F270](0x2000, 8);
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)&v40);
        v43[0] = 0;
        char v45 = 0;
        char v21 = v33;
        if (v34)
        {
          if (v35)
          {
            unint64_t v22 = (unint64_t)v35 << 6;
            while ((*((void *)v21 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              char v21 = (llvm *)((char *)v21 + 64);
              v22 -= 64;
              if (!v22) {
                goto LABEL_29;
              }
            }
          }
        }
        else
        {
LABEL_29:
          char v21 = (llvm *)((char *)v33 + 64 * (unint64_t)v35);
        }
        llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert<llvm::ValueMapIterator<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::Value const*>>((uint64_t)&v40, (uint64_t)v21, (uint64_t)v33 + 64 * (unint64_t)v35, (uint64_t)v33 + 64 * (unint64_t)v35);
        int v23 = v46;
        if (v47)
        {
          if (v48)
          {
            unint64_t v24 = (unint64_t)v48 << 6;
            while ((*((void *)v23 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              int v23 = (llvm *)((char *)v23 + 64);
              v24 -= 64;
              if (!v24) {
                goto LABEL_35;
              }
            }
          }
        }
        else
        {
LABEL_35:
          int v23 = (llvm *)((char *)v46 + 64 * (unint64_t)v48);
        }
        llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert<llvm::ValueMapIterator<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::Value const*>>((uint64_t)&v40, (uint64_t)v23, (uint64_t)v46 + 64 * (unint64_t)v48, (uint64_t)v46 + 64 * (unint64_t)v48);
        if (*((_WORD *)v19 + 9)) {
          llvm::Function::BuildLazyArguments(v19);
        }
        __int16 v25 = (llvm::Value *)*((void *)v19 + 11);
        if (*(_WORD *)(v20 + 18)) {
          llvm::Function::BuildLazyArguments((llvm::Function *)v20);
        }
        for (uint64_t j = *(void *)(v20 + 88); ; j += 40)
        {
          if (*((_WORD *)v19 + 9)) {
            llvm::Function::BuildLazyArguments(v19);
          }
          if (v25 == (llvm::Value *)(*((void *)v19 + 11) + 40 * *((void *)v19 + 12))) {
            break;
          }
          if (*(_WORD *)(v20 + 18)) {
            llvm::Function::BuildLazyArguments((llvm::Function *)v20);
          }
          if (j == *(void *)(v20 + 88) + 40 * *(void *)(v20 + 96)) {
            break;
          }
          uint64_t v27 = (llvm::ValueHandleBase *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v40, v25);
          llvm::ValueHandleBase::operator=(v27, j);
          __int16 v25 = (llvm::Value *)((char *)v25 + 40);
        }
        BOOL v37 = v39;
        uint64_t v38 = 0x400000000;
        llvm::CloneFunctionInto();
        if (v37 != v39) {
          free(v37);
        }
        llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v43);
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll((uint64_t)v40, v42);
        llvm::deallocate_buffer(v40, (void *)((unint64_t)v42 << 6));
        ++v17;
      }
      while (v17 != v18);
      if (v51)
      {
        int v28 = (llvm::Value **)v50;
        uint64_t v29 = 8 * v51;
        do
        {
          uint64_t v30 = *v28++;
          llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v46, v30);
          llvm::Value::takeName();
          llvm::UndefValue::get();
          llvm::Value::replaceAllUsesWith();
          llvm::Function::eraseFromParent(v30);
          v29 -= 8;
        }
        while (v29);
      }
    }
  }
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v49);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll((uint64_t)v46, v48);
  llvm::deallocate_buffer(v46, (void *)((unint64_t)v48 << 6));
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v36);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll((uint64_t)v33, v35);
  llvm::deallocate_buffer(v33, (void *)((unint64_t)v35 << 6));
  if (v50 != v52) {
    free(v50);
  }
  return 1;
}

void llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert<llvm::ValueMapIterator<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::Value const*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a4)
  {
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    uint64_t v8 = a2;
    do
    {
      uint64_t v12 = *(llvm::Value **)(v8 + 24);
      llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v13, 3u, (void *)(v8 + 40));
      llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert(&v11, a1, &v12);
      if (v14 != -8192 && v14 != -4096 && v14 != 0) {
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v13);
      }
      while (1)
      {
        v8 += 64;
        if (v8 == a3) {
          break;
        }
        if ((*(void *)(v8 + 24) | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_13;
        }
      }
      uint64_t v8 = a3;
LABEL_13:
      ;
    }
    while (v8 != a4);
  }
}

void RewriteAdressSpacePass::~RewriteAdressSpacePass(RewriteAdressSpacePass *this)
{
  *(void *)this = &unk_1F25CC9E8;
  *((void *)this + 4) = &unk_1F25CC9B8;
  llvm::deallocate_buffer(*((llvm **)this + 6), (void *)(16 * *((unsigned int *)this + 16)));
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CB7A0780);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F25CC9E8;
  *((void *)this + 4) = &unk_1F25CC9B8;
  llvm::deallocate_buffer(*((llvm **)this + 6), (void *)(16 * *((unsigned int *)this + 16)));
  llvm::Pass::~Pass(this);
}

uint64_t AGCLLVMTargetLowerer::getIntIntrinsicName(uint64_t *a1, llvm::Type *this)
{
  int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(this);
  uint64_t result = 0;
  HIDWORD(v5) = ScalarSizeInBits;
  LODWORD(v5) = ScalarSizeInBits - 8;
  switch((v5 >> 3))
  {
    case 0u:
      goto LABEL_5;
    case 1u:
      ++a1;
      goto LABEL_5;
    case 3u:
      a1 += 2;
      goto LABEL_5;
    case 7u:
      a1 += 3;
LABEL_5:
      uint64_t result = *a1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateNeg(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
  {
    uint64_t Neg = (*(uint64_t (**)(void, llvm::Value *, void, void))(**((void **)this + 9) + 192))(*((void *)this + 9), a2, 0, 0);
    if (Neg) {
      BOOL v6 = *(unsigned __int8 *)(Neg + 16) >= 0x1Cu;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, Neg, (uint64_t)a3);
    }
  }
  else
  {
    uint64_t Neg = llvm::BinaryOperator::CreateNeg();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, Neg, (uint64_t)a3);
  }
  return Neg;
}

llvm::Value *AGCLLVMTargetBuilder::getMinMaxConstants(AGCLLVMTargetBuilder *this, llvm::Type *a2, int a3, llvm::Value **a4, llvm::Value **a5, llvm::Type **a6)
{
  llvm::Type::getScalarSizeInBits(a2);
  *a6 = (llvm::Type *)llvm::IntegerType::get();
  uint64_t result = (llvm::Value *)llvm::Type::getScalarSizeInBits(a2);
  HIDWORD(v12) = result;
  LODWORD(v12) = result - 8;
  switch((v12 >> 3))
  {
    case 0u:
      if (!a3) {
        goto LABEL_10;
      }
      goto LABEL_9;
    case 1u:
      if (a3) {
        goto LABEL_9;
      }
      goto LABEL_10;
    case 3u:
      if (a3) {
        goto LABEL_9;
      }
      goto LABEL_10;
    case 7u:
      *a6 = a2;
      if (a3)
      {
LABEL_9:
        *a4 = (llvm::Value *)llvm::ConstantInt::getSigned();
        uint64_t result = (llvm::Value *)llvm::ConstantInt::getSigned();
      }
      else
      {
LABEL_10:
        *a4 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t result = (llvm::Value *)llvm::ConstantInt::get();
      }
      *a5 = result;
      break;
    default:
      return result;
  }
  return result;
}

llvm::Type **AGCLLVMTargetBuilder::buildAddSat(AGCLLVMTargetBuilder *this, llvm::Type **a2, llvm::Type **a3, int a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  uint64_t v9 = 1048;
  if (a4) {
    uint64_t v9 = 1016;
  }
  IntIntrinsicName = (const char *)AGCLLVMTargetLowerer::getIntIntrinsicName((uint64_t *)(*((void *)this + 46) + v9), *a2);
  if (IntIntrinsicName)
  {
    uint64_t v11 = (uint64_t)IntIntrinsicName;
    size_t v12 = strlen(IntIntrinsicName);
    uint64_t v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this, v11, v12, (uint64_t)v8, (uint64_t)v8, (uint64_t)v8);
    v45[0] = a2;
    v45[1] = a3;
    __int16 v44 = 257;
    return (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v13 + 24), v13, (uint64_t)v45, 2, (uint64_t)v43);
  }
  uint64_t v41 = 0;
  unsigned int v42 = 0;
  uint64_t v40 = 0;
  AGCLLVMTargetBuilder::getMinMaxConstants(*((AGCLLVMTargetBuilder **)this + 9), v8, a4, &v42, &v41, &v40);
  if (a4)
  {
    uint64_t v15 = v40;
    unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v40);
    BOOL v17 = (AGCLLVMTargetBuilder *)((char *)this + 8);
    if (ScalarSizeInBits > llvm::Type::getScalarSizeInBits(v8))
    {
      __int16 v44 = 257;
      SExtOrTrunc = llvm::IRBuilderBase::CreateSExtOrTrunc(v17, a2, v15, (const llvm::Twine *)v43);
      __int16 v44 = 257;
      uint64_t v19 = llvm::IRBuilderBase::CreateSExtOrTrunc(v17, a3, v15, (const llvm::Twine *)v43);
      __int16 v44 = 257;
      uint64_t Add = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v17, (llvm::Value *)SExtOrTrunc, (llvm::Value *)v19, (const llvm::Twine *)v43);
      __int16 v44 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v17, 38, Add, (uint64_t)v41, (uint64_t)v43);
      __int16 v46 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v17, 40, Add, (uint64_t)v42, (uint64_t)v45);
      llvm::IRBuilderBase::CreateSelect();
      Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
      unint64_t v22 = *a2;
      __int16 v44 = 257;
      return llvm::IRBuilderBase::CreateSExtOrTrunc(v17, Select, v22, (const llvm::Twine *)v43);
    }
    __int16 v44 = 257;
    uint64_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v17, (llvm::Value *)a2, (llvm::Value *)a3, (const llvm::Twine *)v43);
    llvm::Type::getScalarSizeInBits(v8);
    __int16 v44 = 257;
    uint64_t v27 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v17, (llvm::Value *)a2, v27, (const llvm::Twine *)v43);
    llvm::Type::getScalarSizeInBits(v8);
    __int16 v44 = 257;
    uint64_t v29 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v30 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v17, (llvm::Value *)a3, v29, (const llvm::Twine *)v43);
    __int16 v44 = 257;
    Xor = (llvm::Value *)llvm::IRBuilderBase::CreateXor(v17, LShr, v30, (const llvm::Twine *)v43);
    uint64_t v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v46 = 257;
    uint64_t v33 = (llvm::Value *)llvm::IRBuilderBase::CreateXor(v17, Xor, v32, (const llvm::Twine *)v45);
    llvm::Type::getScalarSizeInBits(v8);
    __int16 v44 = 257;
    int v34 = (llvm::Value *)llvm::ConstantInt::get();
    unsigned int v35 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v17, v26, v34, (const llvm::Twine *)v43);
    __int16 v44 = 257;
    uint64_t v36 = (llvm::Value *)llvm::IRBuilderBase::CreateXor(v17, LShr, v35, (const llvm::Twine *)v43);
    __int16 v46 = 257;
    BOOL v37 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v17, v33, v36, (const llvm::Twine *)v45);
    uint64_t v38 = llvm::ConstantInt::get();
    __int16 v44 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)v17, 40, (llvm::CmpInst **)v26, v38, (uint64_t)v43);
    __int16 v46 = 257;
    llvm::IRBuilderBase::CreateSelect();
    uint64_t v39 = llvm::ConstantInt::get();
    __int16 v44 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)v17, 32, v37, v39, (uint64_t)v43);
    __int16 v46 = 257;
  }
  else
  {
    int v23 = (AGCLLVMTargetBuilder *)((char *)this + 8);
    __int16 v44 = 257;
    unint64_t v24 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v23, (llvm::Value *)a2, (llvm::Value *)a3, (const llvm::Twine *)v43);
    __int16 v44 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)v23, 36, v24, (uint64_t)a2, (uint64_t)v43);
    __int16 v25 = *a2;
    __int16 v46 = 257;
    llvm::IRBuilderBase::CreateZExtOrTrunc(v23, (llvm::Type **)v41, v25, (const llvm::Twine *)v45);
  }
  return (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
}

llvm::Type **llvm::IRBuilderBase::CreateSExtOrTrunc(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  unsigned int v9 = llvm::Type::getScalarSizeInBits(a3);
  if (ScalarSizeInBits >= v9)
  {
    if (ScalarSizeInBits <= v9) {
      return a2;
    }
    uint64_t v10 = 38;
  }
  else
  {
    uint64_t v10 = 40;
  }
  return (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this, v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

llvm::Value *AGCLLVMTargetBuilder::CreateBarrier(uint64_t *a1)
{
  v8[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[46];
  uint64_t v3 = *(void *)(v2 + 936);
  if (v3) {
    size_t v4 = strlen(*(const char **)(v2 + 936));
  }
  else {
    size_t v4 = 0;
  }
  uint64_t v5 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, v3, v4, a1[18], a1[24], a1[24]);
  v8[0] = llvm::ConstantInt::get();
  v8[1] = llvm::ConstantInt::get();
  v7[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v5 + 24), v5, (uint64_t)v8, 2, (uint64_t)v7);
}

uint64_t *AGCLLVMTargetConfig::initializeAirBuiltinsMap(AGCLLVMTargetConfig *this, AGCLLVMAirBuiltinsMap *a2)
{
  return AGCLLVMAirBuiltinsMap::insertBuiltinReplacementsBase(a2, this);
}

uint64_t AGCLLVMTargetConfig::getDMARegisterLayoutMask(AGCLLVMTargetConfig *this)
{
  return 0;
}

void AGCLLVMTargetConfig::getTargetFeatureString(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t AGCLLVMTargetConfig::createMetalIntersectionShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createGeometryPipelineEmulationFWAllocationPreMeshShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createGeometryPipelineEmulationFWAllocationPostObjectShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createGeometryPipelineEmulationFWAllocationSetupShader()
{
  return 0;
}

void AGCLLVMTargetConfig::createBVHBuilderShader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[8] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(_DWORD *)a4 & 0x3FFFFFFF;
  uint64_t v8 = off_1E65EA990[v7];
  size_t v9 = strlen(v8);
  BOOL v17 = v19;
  long long v18 = xmmword_1CADD6290;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, v8, &v8[v9]);
  if (v7 > 0x74)
  {
    if ((*(unsigned char *)(a4 + 3) & 0x40) != 0)
    {
      uint64_t v14 = "_assert";
      uint64_t v15 = "";
    }
    else
    {
      uint64_t v14 = "_release";
      uint64_t v15 = "";
    }
    goto LABEL_30;
  }
  if ((v7 - 98) <= 0x12)
  {
    if (*(int *)a4 < 0) {
      uint64_t v10 = "_legacy";
    }
    else {
      uint64_t v10 = "_temporal";
    }
    uint64_t v11 = 7;
    if (*(int *)a4 >= 0) {
      uint64_t v11 = 9;
    }
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, v10, &v10[v11]);
  }
  if ((*(unsigned char *)(a4 + 3) & 0x40) != 0)
  {
    size_t v12 = "_assert";
    uint64_t v13 = "";
  }
  else
  {
    size_t v12 = "_release";
    uint64_t v13 = "";
  }
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, v12, v13);
  {
    AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::riaBvhGenOverride = 0;
  }
  if (AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::riaBvhGenOverride >= 1)
  {
    if (AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::riaBvhGenOverride == 3)
    {
      uint64_t v14 = "_gen3";
      goto LABEL_29;
    }
    if (AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::riaBvhGenOverride != 2)
    {
      if (AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::riaBvhGenOverride != 1) {
        goto LABEL_31;
      }
      goto LABEL_24;
    }
LABEL_27:
    uint64_t v14 = "_gen2";
    goto LABEL_29;
  }
  int v16 = *(_DWORD *)(*(void *)(a2 + 32) + 28);
  if (v16 > 31)
  {
    if (v16 == 32 || v16 == 34) {
      goto LABEL_27;
    }
  }
  else if (v16 == 24 || v16 == 31)
  {
LABEL_24:
    uint64_t v14 = "_gen1";
LABEL_29:
    uint64_t v15 = v14 + 5;
LABEL_30:
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, v14, v15);
  }
LABEL_31:
  AGCLLVMObject::readBitcode(a3, (const UInt8 *)v17, v18, 0);
  {
    {
      AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::computeCS = 0;
      *(void *)algn_1EA613AA8 = 0;
      qword_1EA613AB0 = 0;
    }
  }
  operator new();
}

void AGCLLVMTargetConfig::createComputeControlFlowPredicateShader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &,unsigned int,BOOL,BOOL)::computeCS = 0;
    *(void *)algn_1EA613A78 = 0;
    qword_1EA613A80 = 0;
  }
  ComputeControlFlowBitcodeFileName = getComputeControlFlowBitcodeFileName(*(void *)(a2 + 32));
  BOOL v6 = (const UInt8 *)ComputeControlFlowBitcodeFileName;
  if (ComputeControlFlowBitcodeFileName) {
    size_t v7 = strlen(ComputeControlFlowBitcodeFileName);
  }
  else {
    size_t v7 = 0;
  }
  AGCLLVMObject::readBitcode(a3, v6, v7, 1);
  operator new();
}

void AGCLLVMTargetConfig::createComputeProgressMarkerShader(AGCLLVMTargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  {
    {
      AGCLLVMDriverComputeProgressMarkerShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
      *(void *)algn_1EA613A58 = 0;
      qword_1EA613A60 = 0;
    }
  }
  AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)"progress_marker_compute", 23, 0);
  operator new();
}

void AGCLLVMTargetConfig::createExecuteIndirectCDMRangeExecutionShader(AGCLLVMTargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  int v5 = *(_DWORD *)(*((void *)a2 + 4) + 28);
  if ((v5 - 6) >= 2)
  {
    if (v5 != 4) {
      goto LABEL_6;
    }
    BOOL v6 = "cei_pds_gen_range_exec_gen1";
  }
  else
  {
    BOOL v6 = "cei_pds_gen_range_exec_gen2";
  }
  MEMORY[0x1CB7A04E0](__p, v6);
LABEL_6:
  if ((v10 & 0x80u) == 0) {
    size_t v7 = __p;
  }
  else {
    size_t v7 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    CFIndex v8 = v10;
  }
  else {
    CFIndex v8 = (CFIndex)__p[1];
  }
  AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)v7, v8, 0);
  {
    {
      AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
      *(void *)algn_1EA6138B8 = 0;
      qword_1EA6138C0 = 0;
    }
  }
  operator new();
}

void AGCLLVMTargetConfig::createExecuteIndirectCDMPatchUpShader(AGCLLVMTargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  int v5 = *(_DWORD *)(*((void *)a2 + 4) + 28);
  if ((v5 - 6) >= 2)
  {
    if (v5 != 4) {
      goto LABEL_6;
    }
    BOOL v6 = "cei_pds_gen_gen1";
  }
  else
  {
    BOOL v6 = "cei_pds_gen_gen2";
  }
  MEMORY[0x1CB7A04E0](__p, v6);
LABEL_6:
  if ((v10 & 0x80u) == 0) {
    size_t v7 = __p;
  }
  else {
    size_t v7 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    CFIndex v8 = v10;
  }
  else {
    CFIndex v8 = (CFIndex)__p[1];
  }
  AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)v7, v8, 0);
  {
    {
      AGCLLVMDriverExecuteIndirectComputeShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
      *(void *)algn_1EA613898 = 0;
      qword_1EA6138A0 = 0;
    }
  }
  operator new();
}

void AGCLLVMTargetConfig::createPDSPatchUpComputeShader(AGCLLVMTargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  {
    {
      AGCLLVMDriverPDSPatchUpComputeShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
      *(void *)algn_1EA613878 = 0;
      qword_1EA613880 = 0;
    }
  }
  operator new();
}

void AGCLLVMTargetConfig::createGPUGatherComputeShader(AGCLLVMTargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  {
    {
      AGCLLVMDriverGPUGatherComputeShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
      *(void *)algn_1EA613858 = 0;
      qword_1EA613860 = 0;
    }
  }
  operator new();
}

uint64_t AGCLLVMTargetConfig::createMetalMeshShaderAnalysis()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createMetalMeshShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createPassThroughObjectShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createMetalObjectShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createMetalPostTessellationShader()
{
  return 0;
}

void AGCLLVMTargetConfig::createMetalVertexShaderForAnalysis()
{
}

void AGCLLVMTargetConfig::createMetalVertexShader()
{
}

void AGCLLVMTargetConfig::createMetalFragmentShader()
{
}

uint64_t AGCLLVMTargetConfig::createMetalTileShader()
{
  return 0;
}

void AGCLLVMTargetConfig::createMetalComputeShader()
{
}

uint64_t AGCLLVMTargetConfig::createTileDispatchVertexShader()
{
  return 0;
}

void AGCLLVMTargetConfig::createPassthroughVertexShader(AGCLLVMTargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t AGCLLVMTargetConfig::supportFastISel(AGCLLVMTargetConfig *this)
{
  return 1;
}

uint64_t AGCLLVMTargetLowerer::buildPack9995()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildUnpack9995()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildPack111110()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildUnpack111110()
{
  return 0;
}

llvm::Value *AGCLLVMTargetLowerer::buildUnpackFloatFormat(llvm::Type **a1, unsigned int a2, llvm::Type *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (unsigned __int8 *)&formats + 9 * a2;
  uint64_t v12 = *v11;
  llvm::FixedVectorType::get();
  InsertElement = (llvm::Value *)llvm::UndefValue::get();
  if (v12)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      uint64_t v15 = (llvm::Value *)(*((uint64_t (**)(llvm::Type **, uint64_t, void, void, uint64_t, uint64_t))*a1
                            + 177))(a1, a4, v11[i + 5], v11[i + 1], a5, a6);
      int v16 = AGCLLVMBuilder::truncateToSmall(a1, v15, a3);
      BOOL v17 = v11;
      long long v18 = a3;
      uint64_t v19 = a4;
      uint64_t v20 = a5;
      uint64_t v21 = a6;
      unint64_t v22 = v16;
      __int16 v27 = 257;
      int v23 = (llvm::Value *)llvm::ConstantInt::get();
      unint64_t v24 = v22;
      a6 = v21;
      a5 = v20;
      a4 = v19;
      a3 = v18;
      uint64_t v11 = v17;
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v24, v23, (const llvm::Twine *)v26);
    }
  }
  return InsertElement;
}

llvm::Value *AGCLLVMTargetLowerer::buildPackFloatFormat(llvm::Type **a1, unsigned int a2, llvm::Type *a3, llvm::Value *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v12 = (char *)&formats + 9 * a2;
  uint64_t v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = 0;
    do
    {
      __int16 v21 = 257;
      uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), a4, v15, (const llvm::Twine *)v20);
      BOOL v17 = (llvm::Value *)(*((uint64_t (**)(llvm::Type **, uint64_t, void, void, uint64_t, uint64_t))*a1
                            + 178))(a1, Element, v12[v14 + 1], v12[v14 + 5], a5, a6);
      __int16 v21 = 257;
      uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 1), v11, v17, (const llvm::Twine *)v20);
      ++v14;
    }
    while (v13 != v14);
  }
  return AGCLLVMBuilder::truncateToSmall(a1, v11, a3);
}

uint64_t AGCLLVMTargetLowerer::buildPack1010102(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*a1 + 1456))(a1, 5, a1[25], a2, a3, a4);
}

uint64_t AGCLLVMTargetLowerer::buildUnpack1010102(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 3) {
    uint64_t v5 = 4;
  }
  else {
    uint64_t v5 = 5;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1464))(a1, v5, a3, a2);
}

llvm::Value *AGCLLVMTargetLowerer::buildPackUIntTo1010102(llvm::Type **this, llvm::Value *a2)
{
  size_t v4 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v5 = 0;
  for (uint64_t i = 0; i != 4; ++i)
  {
    __int16 v17 = 257;
    size_t v7 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Element = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(this + 1), a2, v7, (const llvm::Twine *)v16);
    if (i == 3) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = 10;
    }
    unsigned __int8 v10 = (llvm::Type **)AGCLLVMBuilder::clampToWidth((AGCLLVMBuilder *)this, Element, v9, 0);
    uint64_t v11 = this[25];
    __int16 v17 = 257;
    IntCast = llvm::IRBuilderBase::CreateIntCast((llvm::IRBuilderBase *)(this + 1), v10, v11, 0, (const llvm::Twine *)v16);
    __int16 v17 = 257;
    uint64_t v13 = (llvm::Value *)llvm::ConstantInt::get();
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(this + 1), IntCast, v13, (const llvm::Twine *)v16);
    __int16 v17 = 257;
    uint64_t result = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(this + 1), v4, Shl, (const llvm::Twine *)v16);
    size_t v4 = result;
    v5 += 10;
  }
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildPackFromFloat(AGCLLVMTargetLowerer *this, llvm::Value *a2, int a3, int a4, BOOL a5, int a6)
{
  unsigned __int8 v10 = AGCLLVMBuilder::f32Extend(this, a2, 1);
  uint64_t v11 = (AGCLLVMTargetLowerer *)((char *)this + 8);
  long long v25 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v26, (AGCLLVMTargetLowerer *)((char *)this + 8));
  int v27 = *((_DWORD *)this + 26);
  uint64_t v12 = llvm::ConstantFP::get();
  uint64_t v13 = llvm::ConstantFP::get();
  uint64_t v14 = (*(uint64_t (**)(AGCLLVMTargetLowerer *, long long *, llvm::Value *, uint64_t, uint64_t, void))(*(void *)this + 80))(this, &v25, v10, v12, v13, 0);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v15 = llvm::ConstantFP::get();
  __int16 v24 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, v14, v15, (uint64_t)v23);
  uint64_t v16 = *((void *)this + 160);
  if (v16) {
    size_t v17 = strlen(*((const char **)this + 160));
  }
  else {
    size_t v17 = 0;
  }
  uint64_t v18 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, v16, v17, *((void *)this + 25), *((void *)this + 21));
  __int16 v24 = 257;
  uint64_t v19 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, **(void **)(*(void *)v18 + 16), v18, (uint64_t)&FMul, 1, (uint64_t)v23);
  if ((a4 + a3) <= 0x1F && a6)
  {
    __int16 v24 = 257;
    uint64_t v20 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v11, v19, v20, (const llvm::Twine *)v23);
  }
  __int16 v24 = 257;
  __int16 v21 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateShl(v11, v19, v21, (const llvm::Twine *)v23);
}

uint64_t AGCLLVMTargetLowerer::buildUnpackToFloat(AGCLLVMTargetLowerer *this, llvm::Value *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12 = (AGCLLVMTargetLowerer *)((char *)this + 8);
  __int16 v30 = 257;
  uint64_t v13 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t LShr = (llvm::Type **)llvm::IRBuilderBase::CreateLShr(v12, a2, v13, (const llvm::Twine *)v29);
  uint64_t v15 = (llvm::Type *)*((void *)this + 24);
  __int16 v30 = 257;
  IntCast = llvm::IRBuilderBase::CreateIntCast(v12, LShr, v15, 0, (const llvm::Twine *)v29);
  if (a6)
  {
    __int16 v30 = 257;
    size_t v17 = (llvm::Value *)llvm::ConstantInt::get();
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v12, IntCast, v17, (const llvm::Twine *)v29);
    __int16 v30 = 257;
    uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
    AShr = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAShr(v12, Shl, v19, (const llvm::Twine *)v29);
    if (a5)
    {
      __int16 v21 = (llvm::Value *)llvm::ConstantInt::get();
      AShr = (llvm::CmpInst **)AGCLLVMBuilder::buildICmpSel(this, AShr, v21, 38);
    }
    unint64_t v22 = (llvm::Type *)*((void *)this + 21);
    __int16 v30 = 257;
    uint64_t SIToFP = llvm::IRBuilderBase::CreateSIToFP(v12, (llvm::Value *)AShr, v22, (const llvm::Twine *)v29);
  }
  else
  {
    if ((a4 + a3) <= 0x1F)
    {
      __int16 v30 = 257;
      __int16 v24 = (llvm::Value *)llvm::ConstantInt::get();
      IntCast = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v12, IntCast, v24, (const llvm::Twine *)v29);
    }
    long long v25 = (llvm::Type *)*((void *)this + 21);
    __int16 v30 = 257;
    uint64_t SIToFP = llvm::IRBuilderBase::CreateUIToFP(v12, IntCast, v25, (const llvm::Twine *)v29);
  }
  uint64_t v26 = SIToFP;
  if (a5)
  {
    uint64_t v27 = llvm::ConstantFP::get();
    __int16 v30 = 257;
    return llvm::IRBuilderBase::CreateFMul((uint64_t)v12, v26, v27, (uint64_t)v29);
  }
  return v26;
}

llvm::Value *AGCLLVMTargetLowerer::buildUnpackNorm16(AGCLLVMTargetLowerer *this, llvm::Value *a2, llvm::Function *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12
    && (uint64_t v6 = *(unsigned int *)(*(void *)a2 + 32), v6 != 1))
  {
    llvm::FixedVectorType::get();
    Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        __int16 v15 = 257;
        unsigned __int8 v10 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((AGCLLVMTargetLowerer *)((char *)this + 8), a2, v10, (const llvm::Twine *)v14);
        uint64_t v16 = AGCLLVMBuilder::extendVector(this, Element, 2);
        uint64_t v17 = 0;
        uint64_t v17 = llvm::ConstantInt::get();
        __int16 v15 = 257;
        uint64_t v12 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *((void *)a3 + 3), (uint64_t)a3, (uint64_t)&v16, 2, (uint64_t)v14);
        __int16 v15 = 257;
        uint64_t v13 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMTargetLowerer *)((char *)this + 8), InsertElement, v12, v13, (const llvm::Twine *)v14);
      }
    }
  }
  else
  {
    uint64_t v16 = AGCLLVMBuilder::extendVector(this, a2, 2);
    uint64_t v17 = llvm::ConstantInt::get();
    __int16 v15 = 257;
    return llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *((void *)a3 + 3), (uint64_t)a3, (uint64_t)&v16, 2, (uint64_t)v14);
  }
  return InsertElement;
}

llvm::Value *AGCLLVMTargetLowerer::buildUnpackNorm8(AGCLLVMTargetLowerer *this, llvm::Value *a2, llvm::Function *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) != 0x12)
  {
    uint64_t v6 = AGCLLVMBuilder::extendVector(this, a2, 4);
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)a2 + 32);
  uint64_t v6 = AGCLLVMBuilder::extendVector(this, a2, 4);
  if (v5 == 1)
  {
LABEL_8:
    uint64_t v14 = v6;
    uint64_t v15 = llvm::ConstantInt::get();
    __int16 v13 = 257;
    return llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *((void *)a3 + 3), (uint64_t)a3, (uint64_t)&v14, 2, (uint64_t)v12);
  }
  llvm::FixedVectorType::get();
  Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v14 = v6;
      uint64_t v15 = 0;
      uint64_t v15 = llvm::ConstantInt::get();
      __int16 v13 = 257;
      unsigned int v9 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *((void *)a3 + 3), (uint64_t)a3, (uint64_t)&v14, 2, (uint64_t)v12);
      __int16 v13 = 257;
      unsigned __int8 v10 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMTargetLowerer *)((char *)this + 8), InsertElement, v9, v10, (const llvm::Twine *)v12);
    }
  }
  return InsertElement;
}

void AGCLLVMTargetLowerer::analyseIntersectionQueryUsage(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AGCLLVMTargetLowerer::getPayloadVariant(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getRaytracingShaderType(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildGlobalBindingOffsetIntrinsic()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSCSDoneRayTraceSCSFlagRead()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSetBufferIntersectionFunctionTable()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildGetBufferIntersectionFunctionTable()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildGetSizeIntersectionFunctionTable()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::createDriverParameterShaderCoreBinding()
{
  return 0;
}

double AGCLLVMTargetLowerer::createShaderCoreBindings@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void *AGCLLVMTargetLowerer::getIntersectionMainFunctionName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "");
}

uint64_t AGCLLVMTargetLowerer::computeDriverPayloadSizeAndUserPayloadSize(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildRayDriverTestHit()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildRayHasMoreResults()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildRayRunThisThread()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildRayHasTerminated()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::commitIntersectionTestSerial()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::commitIntersectionTestParallel()
{
  return 0;
}

double AGCLLVMTargetLowerer::buildCurveIntersectionTest@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double AGCLLVMTargetLowerer::buildBoundingBoxIntersectionTest@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double AGCLLVMTargetLowerer::buildTriangleIntersectionTest@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildIntersectionQueryAccessor()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildNextIntersectionQuery()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildAllocateIntersectionQuery()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildIntersectionResultAccessor()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildIntersectRayForDirectAccess()
{
  return 0;
}

double AGCLLVMTargetLowerer::buildIntersectRayWithResults@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildIntersectRay()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSCSConfiguration@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  uint64_t v5 = (void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a2 + 16) = v4;
  if (v4)
  {
    uint64_t result = llvm::MetadataTracking::retrack();
    *uint64_t v5 = 0;
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildSCSGOTPointer()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSCSPerEncoderIndirectionTablePointer()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSCSGlobalBindingTablePointer()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildProgramType()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getRayTraversalDepth(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getVRIDAllocation(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getVRIDAndCoreID(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildIntersectionShaderArgument()
{
  return 0;
}

void AGCLLVMTargetLowerer::createGPUVAMasks(void *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t AGCLLVMTargetLowerer::maxImageDimLog2(AGCLLVMTargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMTargetLowerer::buildTextureOOBReadSWWA(uint64_t a1, uint64_t a2, unsigned char *a3, AGCLLVMUserObject *a4, void *a5, int a6, int a7, int a8)
{
  long long v65 = *(_OWORD *)a2;
  uint64_t v66 = *(void *)(a2 + 16);
  if (v66) {
    llvm::MetadataTracking::track();
  }
  int v67 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v65);
  if (v66) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  if (a5[21])
  {
    uint64_t v17 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(a3, a4, 5u);
    __int16 v69 = 257;
    uint64_t v19 = AGCLLVMBuilder::tryDeducePointeeType(v17, v18);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v19, (uint64_t)v17, 0, (uint64_t)v68);
    __int16 v21 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v64 = 257;
    Sub = (llvm::Type **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v21, (const llvm::Twine *)v63);
    int v23 = (llvm::CmpInst **)a5[21];
    __int16 v24 = *v23;
    __int16 v69 = 257;
    ZExtOrTrunc = llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)(a1 + 8), Sub, v24, (const llvm::Twine *)v68);
    __int16 v64 = 257;
    ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 34, v23, (uint64_t)ZExtOrTrunc, (uint64_t)v63);
    __int16 v62 = 257;
    uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v16, ICmp, (const llvm::Twine *)v61);
  }
  if (a6)
  {
    uint64_t v27 = (uint64_t *)&a3[*(void *)(*(void *)a3 - 24)];
    int v28 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(a3, a4, 2u);
    __int16 v69 = 257;
    __int16 v30 = AGCLLVMBuilder::tryDeducePointeeType(v28, v29);
    size_t v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v27 + 5, v30, (uint64_t)v28, 0, (uint64_t)v68);
    uint64_t v32 = &a3[*(void *)(*(void *)a3 - 24)];
    __int16 v69 = 257;
    uint64_t v33 = (llvm::IRBuilderBase *)(v32 + 40);
    int v34 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v33, v31, v34, (const llvm::Twine *)v68);
    uint64_t v36 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    BOOL v37 = (llvm::Type **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), Element, v36, (const llvm::Twine *)v68);
    uint64_t v38 = (llvm::CmpInst **)a5[19];
    uint64_t v39 = *v38;
    __int16 v69 = 257;
    uint64_t v40 = llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)(a1 + 8), v37, v39, (const llvm::Twine *)v68);
    __int16 v64 = 257;
    uint64_t v41 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 34, v38, (uint64_t)v40, (uint64_t)v63);
    __int16 v62 = 257;
    uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v16, v41, (const llvm::Twine *)v61);
  }
  if (a7)
  {
    unsigned int v42 = (llvm::CmpInst **)a5[29];
    uint64_t v43 = llvm::ConstantInt::get();
    __int16 v69 = 257;
    __int16 v44 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 34, v42, v43, (uint64_t)v68);
    __int16 v64 = 257;
    uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v16, v44, (const llvm::Twine *)v63);
  }
  if (a8)
  {
    char v45 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(a3, a4, 6u);
    __int16 v69 = 257;
    uint64_t v47 = AGCLLVMBuilder::tryDeducePointeeType(v45, v46);
    unsigned int v48 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v47, (uint64_t)v45, 0, (uint64_t)v68);
    uint64_t v49 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v64 = 257;
    std::string v50 = (llvm::Type **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v48, v49, (const llvm::Twine *)v63);
    uint64_t v51 = (llvm::CmpInst **)a5[27];
    uint64_t v52 = *v51;
    __int16 v69 = 257;
    uint64_t v53 = llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)(a1 + 8), v50, v52, (const llvm::Twine *)v68);
    __int16 v64 = 257;
    uint64_t v54 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 34, v51, (uint64_t)v53, (uint64_t)v63);
    __int16 v62 = 257;
    llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v16, v54, (const llvm::Twine *)v61);
  }
  long long v55 = (llvm::Value *)a5[17];
  if ((*(_DWORD *)(*(void *)v55 + 8) & 0xFE) == 0x12)
  {
    __int16 v69 = 257;
    unsigned int v56 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v55, v56, (const llvm::Twine *)v68);
    long long v57 = (llvm::Value *)a5[17];
    llvm::ConstantInt::get();
    __int16 v69 = 257;
    Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    __int16 v64 = 257;
    __int16 v59 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t result = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v57, Select, v59, (const llvm::Twine *)v63);
  }
  else
  {
    llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t result = llvm::IRBuilderBase::CreateSelect();
  }
  a5[17] = result;
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildBarycentricCoords(uint64_t a1, uint64_t a2, llvm::Value *a3, int a4)
{
  long long v27 = *(_OWORD *)a2;
  uint64_t v28 = *(void *)(a2 + 16);
  if (v28) {
    llvm::MetadataTracking::track();
  }
  int v29 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v27);
  if (v28) {
    llvm::MetadataTracking::untrack();
  }
  if (a4 == 3)
  {
    __int16 v26 = 257;
    unsigned __int8 v10 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v10, (const llvm::Twine *)v25);
    __int16 v26 = 257;
    uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v13 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v12, (const llvm::Twine *)v25);
    uint64_t v14 = llvm::ConstantFP::get();
    __int16 v26 = 257;
    Fuint64_t Add = llvm::IRBuilderBase::CreateFAdd(a1 + 8, (uint64_t)Element, (uint64_t)v13, (uint64_t)v25);
    v24[16] = 257;
    FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub(a1 + 8, v14, FAdd, (uint64_t)v24);
    uint64_t v17 = (llvm::Value *)llvm::UndefValue::get();
    __int16 v26 = 257;
    uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
    Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v17, Element, v18, (const llvm::Twine *)v25);
    __int16 v26 = 257;
    uint64_t v20 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v21 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v13, v20, (const llvm::Twine *)v25);
    __int16 v26 = 257;
    unint64_t v22 = (llvm::Value *)llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v21, FSub, v22, (const llvm::Twine *)v25);
  }
  if (a4 != 2)
  {
    if (a4 != 1) {
      return 0;
    }
    __int16 v26 = 257;
    CFIndex v8 = (llvm::Value *)llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v8, (const llvm::Twine *)v25);
  }
  return (uint64_t)a3;
}

uint64_t AGCLLVMTargetLowerer::needsShaderDepthClamp(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::supportsHWMeshShading(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::supportsMeshShading(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::supportsBarycentricCoords(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::supportsPrimitiveID(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::textureBufferRequiresProtectedReadWrite(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::isValidTileSize(AGCLLVMTargetLowerer *this)
{
  return 1;
}

void AGCLLVMTargetLowerer::exceededResourceLimits(AGCLLVMTargetLowerer *this@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  unsigned int v12 = a5 + a2;
  unsigned int v13 = a6 + a3;
  unsigned int v14 = a7 + a4;
  std::string::basic_string[abi:nn180100]<0>(&v65, "");
  unsigned int v15 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 103) + 24))(*((void *)this + 103), a8);
  unsigned int v16 = (*(uint64_t (**)(void))(**((void **)this + 103) + 16))(*((void *)this + 103));
  unsigned int v17 = v16;
  if (v12 <= v15)
  {
    if (v14 <= 0x10 && v13 <= v16)
    {
      char v31 = 0;
      goto LABEL_80;
    }
  }
  else
  {
    std::to_string(&v59, v12);
    uint64_t v18 = std::string::insert(&v59, 0, " buffers (");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v60, "/");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    unsigned int v22 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 103) + 24))(*((void *)this + 103), a8);
    std::to_string(&__p, v22);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    long long v25 = std::string::append(&v61, (const std::string::value_type *)p_p, size);
    std::string::size_type v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    long long v27 = std::string::append(&v62, ")");
    std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
    long long v63 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    uint64_t v64 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0) {
      int v29 = (const std::string::value_type *)&v63;
    }
    else {
      int v29 = (const std::string::value_type *)v63;
    }
    if (v64 >= 0) {
      std::string::size_type v30 = HIBYTE(v64);
    }
    else {
      std::string::size_type v30 = *((void *)&v63 + 1);
    }
    std::string::append(&v65, v29, v30);
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)v63);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  if (v13 > v17)
  {
    std::to_string(&v59, v13);
    uint64_t v32 = std::string::insert(&v59, 0, " textures (");
    std::string::size_type v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    int v34 = std::string::append(&v60, "/");
    std::string::size_type v35 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    unsigned int v36 = (*(uint64_t (**)(void))(**((void **)this + 103) + 16))(*((void *)this + 103));
    std::to_string(&__p, v36);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v37 = &__p;
    }
    else {
      BOOL v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v39 = std::string::append(&v61, (const std::string::value_type *)v37, v38);
    std::string::size_type v40 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    uint64_t v41 = std::string::append(&v62, ")");
    std::string::size_type v42 = v41->__r_.__value_.__r.__words[2];
    long long v63 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    uint64_t v64 = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0) {
      uint64_t v43 = (const std::string::value_type *)&v63;
    }
    else {
      uint64_t v43 = (const std::string::value_type *)v63;
    }
    if (v64 >= 0) {
      std::string::size_type v44 = HIBYTE(v64);
    }
    else {
      std::string::size_type v44 = *((void *)&v63 + 1);
    }
    std::string::append(&v65, v43, v44);
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)v63);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  if (v14 >= 0x11)
  {
    std::to_string(&v59, v14);
    char v45 = std::string::insert(&v59, 0, " samplers (");
    std::string::size_type v46 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    uint64_t v47 = std::string::append(&v60, "/");
    std::string::size_type v48 = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v49 = &__p;
    }
    else {
      uint64_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v50 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v50 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v51 = std::string::append(&v61, (const std::string::value_type *)v49, v50);
    std::string::size_type v52 = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    uint64_t v53 = std::string::append(&v62, ")");
    std::string::size_type v54 = v53->__r_.__value_.__r.__words[2];
    long long v63 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    uint64_t v64 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0) {
      long long v55 = (const std::string::value_type *)&v63;
    }
    else {
      long long v55 = (const std::string::value_type *)v63;
    }
    if (v64 >= 0) {
      std::string::size_type v56 = HIBYTE(v64);
    }
    else {
      std::string::size_type v56 = *((void *)&v63 + 1);
    }
    std::string::append(&v65, v55, v56);
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)v63);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  char v31 = 1;
LABEL_80:
  *a9 = v31;
  long long v57 = (std::string *)(a9 + 8);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v57, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *long long v57 = v65;
  }
}

uint64_t AGCLLVMTargetLowerer::buildConvertHFP8_Vector()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildConvertHFP8_F2F()
{
  return 0;
}

void AGCLLVMTargetLowerer::buildConvertHFP8_ParseArgTypes(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrixInit()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrixStore()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrixLoad()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulate()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdYield()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdgroupAtomicWaitNotify()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::toGen5(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::toGen3(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::toGen2(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getDisableTriangleMerging(AGCLLVMTargetLowerer *this, int a2, unsigned int a3, BOOL a4, unsigned int a5, const unsigned __int8 *a6)
{
  if (a3 > 1) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  return v6 | a5;
}

llvm::Value *AGCLLVMTargetLowerer::buildMovmsk(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  int v6 = (llvm::Type *)llvm::IntegerType::get();
  uint64_t v7 = *(void *)(a1 + 1512);
  if (v7) {
    size_t v8 = strlen(*(const char **)(a1 + 1512));
  }
  else {
    size_t v8 = 0;
  }
  unsigned int v9 = (llvm::IRBuilderBase *)(a1 + 8);
  uint64_t v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, v7, v8, *(void *)(a1 + 144), (uint64_t)v6);
  __int16 v13 = 257;
  IntCast = llvm::IRBuilderBase::CreateIntCast(v9, a3, v6, 1, (const llvm::Twine *)v12);
  __int16 v13 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v9, *(void *)(v10 + 24), v10, (uint64_t)&IntCast, 1, (uint64_t)v12);
}

llvm::Value *AGCLLVMTargetLowerer::buildDepthf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a3;
  long long v11 = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v13 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v11);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v5 = *(void *)(a1 + 1504);
  if (v5) {
    size_t v6 = strlen(*(const char **)(a1 + 1504));
  }
  else {
    size_t v6 = 0;
  }
  uint64_t v7 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, v5, v6, *(void *)(a1 + 144), *(void *)(a1 + 168));
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v7 + 24), v7, (uint64_t)&v14, 1, (uint64_t)v9);
}

uint64_t AGCLLVMTargetLowerer::buildGammaExpansion(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  long long v30 = *(_OWORD *)a2;
  uint64_t v31 = *(void *)(a2 + 16);
  if (v31) {
    llvm::MetadataTracking::track();
  }
  int v32 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v30);
  if (v31) {
    llvm::MetadataTracking::untrack();
  }
  size_t v6 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, a3, 0, 3, 1);
  Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
  uint64_t v8 = *(unsigned int *)(*(void *)v6 + 32);
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      __int16 v29 = 257;
      __int16 v10 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v6, v10, (const llvm::Twine *)v28);
      long long v25 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v26, (llvm::IRBuilderBase *)(a1 + 8));
      int v27 = *(_DWORD *)(a1 + 104);
      uint64_t v12 = *(void *)(a1 + 192);
      __int16 v29 = 257;
      uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, Element, v12, (uint64_t)v28);
      uint64_t v14 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, void, void))(*(void *)a1 + 152))(a1, &v25, Cast, 0, *(void *)(a1 + 152));
      if (v26) {
        llvm::MetadataTracking::untrack();
      }
      __int16 v29 = 257;
      uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v14, v15, (const llvm::Twine *)v28);
    }
  }
  long long v22 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v23, (llvm::IRBuilderBase *)(a1 + 8));
  int v24 = *(_DWORD *)(a1 + 104);
  __int16 v29 = 257;
  int v16 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v17 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v16, (const llvm::Twine *)v28);
  uint64_t v18 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 96))(a1, &v22, v17, 8, 0, 32);
  if (v23) {
    llvm::MetadataTracking::untrack();
  }
  std::string::size_type v19 = *(llvm::Type **)(a1 + 152);
  __int16 v29 = 257;
  FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(a1 + 8), v18, v19, (const llvm::Twine *)v28);
  return AGCLLVMBuilder::combineRGBA((AGCLLVMBuilder *)a1, InsertElement, FPTrunc);
}

uint64_t AGCLLVMTargetLowerer::isGammaSpaceConversionNecessary()
{
  return 1;
}

uint64_t AGCLLVMTargetLowerer::convertRegisterMaskToMRTMask(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  int8x16_t v6 = (int8x16_t)vdupq_n_s64(a3);
  do
  {
    if (((1 << v3) & *(_DWORD *)(a2 + 32)) != 0)
    {
      int v7 = 0;
      unsigned int v8 = *(_DWORD *)(a2 + v4);
      unsigned int v9 = ((v8 >> 12) * *(_DWORD *)(a1 + 868)) >> 1;
      switch(v8 & 0x1F)
      {
        case 2u:
        case 3u:
        case 4u:
        case 5u:
          if ((a3 & (1 << v9)) != 0) {
            int v14 = 3;
          }
          else {
            int v14 = 0;
          }
          uint64_t v15 = 2 << v9;
          int v7 = v14 | 0xC;
          goto LABEL_15;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x16u:
          uint32x4_t v10 = vshlq_u32((uint32x4_t)xmmword_1CADD64E0, (uint32x4_t)vdupq_n_s32(v9));
          v11.i64[0] = v10.i32[2];
          v11.i64[1] = v10.i32[3];
          int8x16_t v12 = v11;
          v11.i64[0] = v10.i32[0];
          v11.i64[1] = v10.i32[1];
          int8x16_t v13 = vbicq_s8((int8x16_t)xmmword_1CADD64E0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v11)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v12))));
          goto LABEL_10;
        case 0xAu:
        case 0xBu:
        case 0x11u:
          uint32x4_t v16 = (uint32x4_t)vdupq_n_s32(v9);
          uint32x4_t v17 = vshlq_u32((uint32x4_t)xmmword_1CADD64E0, v16);
          v18.i64[0] = v17.i32[2];
          v18.i64[1] = v17.i32[3];
          int8x16_t v19 = v18;
          v18.i64[0] = v17.i32[0];
          v18.i64[1] = v17.i32[1];
          int8x16_t v20 = vbicq_s8((int8x16_t)xmmword_1CADD64F0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v18)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v19))));
          uint32x4_t v21 = vshlq_u32((uint32x4_t)xmmword_1CADD6500, v16);
          v18.i64[0] = v21.i32[2];
          v18.i64[1] = v21.i32[3];
          int8x16_t v22 = v18;
          v18.i64[0] = v21.i32[0];
          v18.i64[1] = v21.i32[1];
          int8x16_t v13 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1CADD6510, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v18)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v22)))), v20);
LABEL_10:
          int8x8_t v23 = vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
          int v7 = v23.i32[0] | v23.i32[1];
          break;
        case 0x12u:
          if ((a3 & (1 << v9)) != 0) {
            int v14 = 3;
          }
          else {
            int v14 = 0;
          }
          uint64_t v15 = 2 << v9;
          int v7 = v14 | 0xE;
LABEL_15:
          if ((a3 & v15) == 0) {
            int v7 = v14;
          }
          break;
        default:
          break;
      }
      v5 |= ((-1 << (v8 >> 5)) & ((int)((v7 & ~(-1 << (v8 >> 5))) >> ((v8 >> 5) - 1) << 31) >> 31) & 0xF | v7 & ~(-1 << (v8 >> 5))) << v4;
    }
    v4 += 4;
    ++v3;
  }
  while (v4 != 32);
  return v5;
}

uint64_t AGCLLVMTargetLowerer::emulatedColorMask(AGCLLVMTargetLowerer *this, unsigned int a2, uint64_t a3)
{
  return a3;
}

uint64_t *AGCLLVMTargetLowerer::fragmentOutputConfiguration@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4 = 0;
  *(void *)(a4 + 52) = 0;
  *(void *)(a4 + 44) = 0;
  *(unsigned char *)(a4 + 60) = 0;
  *(unsigned char *)(a4 + 64) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 68) = a3;
  *(_OWORD *)(a4 + 27) = 0u;
  switch(a2)
  {
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 0x12u:
      uint64_t v5 = result + 37;
      goto LABEL_6;
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      uint64_t v5 = result + 38;
      goto LABEL_6;
    case 0xAu:
    case 0xBu:
      uint64_t v5 = result + 39;
      goto LABEL_6;
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x16u:
      uint64_t v5 = result + 35;
LABEL_6:
      uint64_t v4 = *v5;
      *(void *)a4 = v4;
      if (a2 - 2 < 2)
      {
        *(void *)(a4 + 8) = result[35];
        uint64_t v4 = result[37];
      }
      else if (a2 - 6 >= 2)
      {
        if (a2 == 18)
        {
          uint64_t v6 = result[38];
          *(void *)(a4 + 8) = v6;
          *(void *)(a4 + 24) = v6;
          *(void *)(a4 + 32) = 0x200000001;
LABEL_16:
          int v7 = result + 38;
          goto LABEL_21;
        }
LABEL_13:
        *(void *)(a4 + 8) = v4;
      }
      else
      {
        *(void *)(a4 + 8) = result[36];
        uint64_t v4 = result[38];
      }
      *(void *)(a4 + 24) = v4;
      if (a2 > 0x16) {
        goto LABEL_18;
      }
      if (((1 << a2) & 0x7D93C0) != 0) {
        goto LABEL_16;
      }
      if (((1 << a2) & 0x603C) != 0 || ((1 << a2) & 0x20C00) == 0) {
LABEL_18:
      }
        int v7 = result + 37;
      else {
        int v7 = result + 39;
      }
LABEL_21:
      *(void *)(a4 + 16) = *v7;
      switch(a2)
      {
        case 2u:
        case 6u:
        case 0xDu:
          *(_WORD *)(a4 + 41) = 257;
          *(_OWORD *)(a4 + 44) = xmmword_1CADD6520;
          goto LABEL_27;
        case 3u:
        case 7u:
        case 0xEu:
          *(unsigned char *)(a4 + 41) = 1;
          *(_OWORD *)(a4 + 44) = xmmword_1CADD6530;
          goto LABEL_27;
        case 4u:
        case 8u:
        case 0xAu:
          *(unsigned char *)(a4 + 42) = 1;
          goto LABEL_28;
        case 0xCu:
        case 0x11u:
          *(unsigned char *)(a4 + 41) = 1;
          goto LABEL_28;
        case 0xFu:
        case 0x16u:
          int v8 = dword_1CADD6120[a2 == 22];
          *(_WORD *)(a4 + 41) = 257;
          *(_DWORD *)(a4 + 44) = dword_1CADD6128[a2 == 22];
          *(_DWORD *)(a4 + 48) = 0;
          *(_DWORD *)(a4 + 52) = v8;
          *(_DWORD *)(a4 + 56) = 1065353216;
LABEL_27:
          *(unsigned char *)(a4 + 60) = 1;
LABEL_28:
          if (a2 <= 0x16 && ((1 << a2) & 0x40E000) != 0) {
            *(unsigned char *)(a4 + 40) = 1;
          }
          break;
        default:
          return result;
      }
      return result;
    case 0x11u:
      uint64_t v4 = result[36];
      *(void *)a4 = v4;
      goto LABEL_13;
    default:
      goto LABEL_13;
  }
}

BOOL AGCLLVMTargetLowerer::isMSAASampleCountSupported(AGCLLVMTargetLowerer *this, unsigned __int32 a2, int8x8_t a3)
{
  a3.i32[0] = a2;
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(a3);
  v3.i16[0] = vaddlv_u8(v3);
  return v3.i32[0] == 1 && *((_DWORD *)this + 451) >= a2;
}

uint64_t AGCLLVMTargetLowerer::isFormatSupported(uint64_t a1, unsigned int a2)
{
  return (a2 < 0x17) & (0x46FFFCu >> a2);
}

BOOL AGCLLVMTargetLowerer::isImageWriteBlockFromDimensionSupported(uint64_t a1, int a2)
{
  return a2 == 2 || a2 == 4;
}

uint64_t AGCLLVMTargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMTargetLowerer::buildFrontFacing(uint64_t a1, uint64_t a2)
{
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  if (*(void *)(a1 + 1568)) {
    strlen(*(const char **)(a1 + 1568));
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v9 = 257;
  uint64_t v5 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v8);
  uint64_t v6 = llvm::ConstantInt::get();
  __int16 v9 = 257;
  return llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v5, v6, (uint64_t)v8);
}

void AGCLLVMTargetLowerer::getListOfFunctionsInMetalRuntimeWithFastAndNonFastVariants(void *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t AGCLLVMTargetLowerer::getExecutionScopedSamplerStateRegisterCount(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::vertexInputNeedsBias()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::vertexBuiltinRegisterDomain(AGCLLVMTargetLowerer *this)
{
  return 0;
}

llvm::Value *AGCLLVMTargetLowerer::getVertexInputCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v14 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v12);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 440))(a1, a3, a4);
  uint64_t v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, (uint64_t)"agc.read_vi.f32", 15, a1[21], a1[25]);
  uint64_t v11 = llvm::ConstantInt::get();
  v10[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v8 + 24), v8, (uint64_t)&v11, 1, (uint64_t)v10);
}

uint64_t AGCLLVMTargetLowerer::getVertexInputIntrinsic()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getVertexInputRegister(uint64_t a1, _DWORD *a2)
{
  uint64_t result = *a2;
  *a2 = result + 1;
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildCoherentStore()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildCoherentLoad()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildGetMeshPrimitivePointer()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildGetPayloadPointer()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSparseSample(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v14 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v12);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = *(void *)(a1 + 184);
  v15[0] = *a3;
  v15[1] = v6;
  llvm::StructType::get();
  uint64_t v7 = llvm::UndefValue::get();
  int v11 = 0;
  __int16 v16 = 257;
  uint64_t InsertValue = llvm::IRBuilderBase::CreateInsertValue(a1 + 8, v7, (uint64_t)a3, (uint64_t)&v11, 1, (uint64_t)v15);
  uint64_t v9 = llvm::ConstantInt::get();
  int v11 = 1;
  __int16 v16 = 257;
  return llvm::IRBuilderBase::CreateInsertValue(a1 + 8, InsertValue, v9, (uint64_t)&v11, 1, (uint64_t)v15);
}

void AGCLLVMTargetLowerer::buildManualResolve(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t AGCLLVMTargetLowerer::buildReadOutputPartitionFromState(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type *a4)
{
  long long v28 = *(_OWORD *)a2;
  uint64_t v29 = *(void *)(a2 + 16);
  if (v29) {
    llvm::MetadataTracking::track();
  }
  int v30 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v28);
  if (v29) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v19 = (uint64_t)a4;
  v20[0] = llvm::Type::getPrimitiveSizeInBits(a4);
  v20[1] = v8;
  int v9 = llvm::TypeSize::operator unsigned long long();
  unsigned int v10 = *(_DWORD *)(a3 + 4);
  switch(*(_DWORD *)a3)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x16:
      v10 *= 2;
      break;
    case 0xA:
    case 0xB:
    case 0x11:
      v10 *= 4;
      break;
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
      unsigned int v10 = 4;
      break;
    default:
      unsigned int v10 = 0;
      break;
  }
  if (v9 == 32)
  {
    long long v25 = *(_OWORD *)a2;
    uint64_t v26 = *(void *)(a2 + 16);
    if (v26) {
      llvm::MetadataTracking::track();
    }
    int v27 = *(_DWORD *)(a2 + 24);
    Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, void, void))(*(void *)a1 + 232))(a1, &v25, *(void *)(a3 + 32), *(void *)(a3 + 24));
    if (v26) {
      llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    llvm::FixedVectorType::get();
    Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
    if (v10)
    {
      uint64_t v12 = 0;
      do
      {
        long long v22 = *(_OWORD *)a2;
        uint64_t v23 = *(void *)(a2 + 16);
        if (v23) {
          llvm::MetadataTracking::track();
        }
        int v24 = *(_DWORD *)(a2 + 24);
        uint64_t v13 = *(llvm::Value **)(a3 + 32);
        int v14 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v21 = 257;
        uint64_t Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v13, v14, (const llvm::Twine *)v20);
        __int16 v16 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, void))(*(void *)a1 + 232))(a1, &v22, Add, *(void *)(a3 + 24));
        if (v23) {
          llvm::MetadataTracking::untrack();
        }
        __int16 v21 = 257;
        uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v16, v17, (const llvm::Twine *)v20);
        ++v12;
      }
      while (((unint64_t)v10 + 3) >> 2 != v12);
    }
  }
  __int16 v21 = 257;
  return llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)InsertElement, v19, (uint64_t)v20);
}

uint64_t AGCLLVMTargetLowerer::buildWriteOutputPartitionFromState@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, llvm::Type *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v36 = *(_OWORD *)a2;
  uint64_t v37 = *(void *)(a2 + 16);
  if (v37) {
    llvm::MetadataTracking::track();
  }
  int v38 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v36);
  if (v37) {
    llvm::MetadataTracking::untrack();
  }
  v31[0] = llvm::Type::getPrimitiveSizeInBits(a4);
  v31[1] = v11;
  int v12 = llvm::TypeSize::operator unsigned long long();
  unsigned int v13 = *(_DWORD *)(a3 + 4);
  switch(*(_DWORD *)a3)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x16:
      v13 *= 2;
      break;
    case 0xA:
    case 0xB:
    case 0x11:
      v13 *= 4;
      break;
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
      unsigned int v13 = 4;
      break;
    default:
      unsigned int v13 = 0;
      break;
  }
  if (v12 == 32)
  {
    long long v33 = *(_OWORD *)a2;
    uint64_t v34 = *(void *)(a2 + 16);
    if (v34) {
      llvm::MetadataTracking::track();
    }
    int v35 = *(_DWORD *)(a2 + 24);
    uint64_t v14 = *(void *)(a3 + 32);
    uint64_t v15 = a1[25];
    __int16 v32 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, a5, v15, (uint64_t)v31);
    uint64_t result = (*(uint64_t (**)(void *, long long *, uint64_t, uint64_t, void))(*a1 + 224))(a1, &v33, v14, Cast, *(void *)(a3 + 24));
    if (v34) {
      uint64_t result = llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    uint64_t v18 = llvm::FixedVectorType::get();
    __int16 v32 = 257;
    uint64_t result = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, a5, v18, (uint64_t)v31);
    if (v13)
    {
      uint64_t v19 = (llvm::Value *)result;
      uint64_t v20 = 0;
      unint64_t v21 = ((unint64_t)v13 + 3) >> 2;
      do
      {
        __int16 v32 = 257;
        long long v22 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v19, v22, (const llvm::Twine *)v31);
        long long v28 = *(_OWORD *)a2;
        uint64_t v29 = *(void *)(a2 + 16);
        if (v29) {
          llvm::MetadataTracking::track();
        }
        int v30 = *(_DWORD *)(a2 + 24);
        int v24 = *(llvm::Value **)(a3 + 32);
        long long v25 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v32 = 257;
        uint64_t Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v24, v25, (const llvm::Twine *)v31);
        uint64_t result = (*(uint64_t (**)(void *, long long *, uint64_t, uint64_t, void))(*a1 + 224))(a1, &v28, Add, Element, *(void *)(a3 + 24));
        if (v29) {
          uint64_t result = llvm::MetadataTracking::untrack();
        }
        ++v20;
      }
      while (v21 != v20);
    }
  }
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(_DWORD *)(a6 + 24) = 0;
  *(void *)(a6 + 16) = 0;
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildPackXR10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v18 = *(_OWORD *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  if (v19) {
    llvm::MetadataTracking::track();
  }
  int v20 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v18);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = llvm::ConstantFP::get();
  __int16 v17 = 257;
  uint64_t FMul = llvm::IRBuilderBase::CreateFMul(a1 + 8, a3, v6, (uint64_t)v16);
  uint64_t v8 = llvm::ConstantFP::get();
  __int16 v15 = 257;
  Fuint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd(a1 + 8, FMul, v8, (uint64_t)v14);
  unsigned int v10 = *(llvm::Type **)(a1 + 304);
  __int16 v17 = 257;
  FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 8), FAdd, v10, (const llvm::Twine *)v16);
  int v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), FPToUI, v12, (const llvm::Twine *)v14);
}

uint64_t AGCLLVMTargetLowerer::buildUnpackXR10(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  long long v26 = *(_OWORD *)a2;
  uint64_t v27 = *(void *)(a2 + 16);
  if (v27) {
    llvm::MetadataTracking::track();
  }
  int v28 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v26);
  if (v27) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v30 = 257;
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v29);
  uint64_t v8 = *(llvm::Type **)(a1 + 280);
  __int16 v30 = 257;
  uint64_t UIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(a1 + 8), LShr, v8, (const llvm::Twine *)v29);
  uint64_t v10 = llvm::ConstantFP::get();
  __int16 v25 = 257;
  uint64_t FSub = llvm::IRBuilderBase::CreateFSub(a1 + 8, UIToFP, v10, (uint64_t)v24);
  uint64_t v12 = llvm::ConstantFP::get();
  __int16 v30 = 257;
  uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul(a1 + 8, FSub, v12, (uint64_t)v29);
  long long v21 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v22, (llvm::IRBuilderBase *)(a1 + 8));
  int v23 = *(_DWORD *)(a1 + 104);
  __int16 v30 = 257;
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), FMul, v14, (const llvm::Twine *)v29);
  uint64_t v16 = llvm::ConstantFP::get();
  uint64_t v17 = llvm::ConstantFP::get();
  long long v18 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, &v21, Element, v16, v17, 0);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v30 = 257;
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), FMul, v18, v19, (const llvm::Twine *)v29);
}

uint64_t AGCLLVMTargetLowerer::buildUnpackFormat(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v19 = *(_OWORD *)a2;
  uint64_t v20 = *(void *)(a2 + 16);
  if (v20) {
    llvm::MetadataTracking::track();
  }
  int v21 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v19);
  if (v20) {
    llvm::MetadataTracking::untrack();
  }
  switch((int)a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1464))(a1, a3, a4, a5, a6, a7);
      break;
    case 4:
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1440))(a1, a5, a4, 3, a6, a7);
      break;
    case 5:
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1440))(a1, a5, a4, 4, a6, a7);
      break;
    case 6:
      __int16 v15 = (llvm::Value *)(*(uint64_t (**)(void *, uint64_t, void, uint64_t, uint64_t, uint64_t))(*a1 + 1440))(a1, a5, a1[19], 4, a6, a7);
      uint64_t v16 = (llvm::Type *)a1[38];
      __int16 v18 = 257;
      uint64_t result = llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 1), v15, v16, (const llvm::Twine *)v17);
      break;
    case 7:
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 1472))(a1, a5, a4);
      break;
    case 8:
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 1488))(a1, a5, a4);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildPackFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t result = 0;
  switch((int)a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1456))(a1, a3, a4, a5, a6, a7);
      break;
    case 5:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1448))(a1, a5, a6, a7);
      break;
    case 6:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 1432))(a1, a5);
      break;
    case 7:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 1480))(a1, a5);
      break;
    case 8:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 1496))(a1, a5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildUnpackNorm(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  long long v26 = *(_OWORD *)a2;
  uint64_t v27 = *(void *)(a2 + 16);
  if (v27) {
    llvm::MetadataTracking::track();
  }
  int v28 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v26);
  if (v27) {
    llvm::MetadataTracking::untrack();
  }
  if (a4 == 16)
  {
    uint64_t v15 = 164;
    if (a5) {
      uint64_t v15 = 162;
    }
    uint64_t v16 = a1[v15];
    if (v16) {
      size_t v17 = strlen((const char *)a1[v15]);
    }
    else {
      size_t v17 = 0;
    }
    uint64_t v21 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, v16, v17, a1[21], a1[30], a1[25]);
    uint64_t v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 1408))(a1, a3, v21);
  }
  else
  {
    if (a4 != 8) {
      return 0;
    }
    uint64_t v12 = 165;
    if (a5) {
      uint64_t v12 = 163;
    }
    uint64_t v13 = a1[v12];
    if (v13) {
      size_t v14 = strlen((const char *)a1[v12]);
    }
    else {
      size_t v14 = 0;
    }
    uint64_t v19 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, v13, v14, a1[21], a1[37], a1[25]);
    uint64_t v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 1400))(a1, a3, v19);
  }
  __int16 v18 = v20;
  if (a6 != 32)
  {
    uint64_t v22 = (llvm::Type *)a1[19];
    __int16 v25 = 257;
    return llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(a1 + 1), v20, v22, (const llvm::Twine *)v24);
  }
  return (uint64_t)v18;
}

uint64_t AGCLLVMTargetLowerer::buildDisableAtomicSmashingIntrinsic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t AGCLLVMTargetLowerer::buildAtomicFnAddrSpaceCast(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t AGCLLVMTargetLowerer::buildFMax(AGCLLVMBuilder *a1, long long *a2, llvm::Value *a3, llvm::Value *a4, int a5)
{
  if (a5)
  {
    long long v18 = *a2;
    uint64_t v19 = *((void *)a2 + 2);
    if (v19) {
      llvm::MetadataTracking::track();
    }
    int v20 = *((_DWORD *)a2 + 6);
    int v9 = AGCLLVMTargetLowerer::flushNaN((uint64_t)a1, (uint64_t)&v18, a3, a4);
    if (v19) {
      llvm::MetadataTracking::untrack();
    }
    long long v15 = *a2;
    uint64_t v16 = *((void *)a2 + 2);
    if (v16) {
      llvm::MetadataTracking::track();
    }
    int v17 = *((_DWORD *)a2 + 6);
    a4 = AGCLLVMTargetLowerer::flushNaN((uint64_t)a1, (uint64_t)&v15, a4, a3);
    if (v16) {
      llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    int v9 = a3;
  }
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v14 = *((_DWORD *)a2 + 6);
  uint64_t v10 = AGCLLVMTargetLowerer::buildFCmpSel(a1, (uint64_t)&v12, (uint64_t)v9, a4);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  return v10;
}

llvm::Value *AGCLLVMTargetLowerer::flushNaN(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm::Value *a4)
{
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  std::string::basic_string[abi:nn180100]<0>(&v15, *(char **)(a1 + 1832));
  uint64_t v8 = *(void *)a3;
  if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12) {
    uint64_t v8 = **(void **)(v8 + 16);
  }
  if (v8 == *(void *)(a1 + 152)) {
    int v9 = ".f16";
  }
  else {
    int v9 = ".f32";
  }
  std::string::append(&v15, v9);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v15;
  }
  else {
    uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  long long v12 = (llvm::Function *)AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, (uint64_t)v10, size, v8, v8, v8);
  uint64_t v13 = AGCLLVMBuilder::map2((AGCLLVMBuilder *)a1, v12, a3, a4);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v13;
}

uint64_t AGCLLVMTargetLowerer::buildFCmpSel(AGCLLVMBuilder *a1, uint64_t a2, uint64_t a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  if (*(void *)a3 != *(void *)a4) {
    AGCLLVMBuilder::splat(a1, *(_DWORD *)(*(void *)a3 + 32), a4);
  }
  llvm::IRBuilderBase::CreateFCmpHelper();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMTargetLowerer::buildFMin(AGCLLVMBuilder *a1, long long *a2, llvm::Value *a3, llvm::Value *a4, int a5)
{
  if (a5)
  {
    long long v18 = *a2;
    uint64_t v19 = *((void *)a2 + 2);
    if (v19) {
      llvm::MetadataTracking::track();
    }
    int v20 = *((_DWORD *)a2 + 6);
    long long v9 = AGCLLVMTargetLowerer::flushNaN((uint64_t)a1, (uint64_t)&v18, a3, a4);
    if (v19) {
      llvm::MetadataTracking::untrack();
    }
    long long v15 = *a2;
    uint64_t v16 = *((void *)a2 + 2);
    if (v16) {
      llvm::MetadataTracking::track();
    }
    int v17 = *((_DWORD *)a2 + 6);
    a4 = AGCLLVMTargetLowerer::flushNaN((uint64_t)a1, (uint64_t)&v15, a4, a3);
    if (v16) {
      llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    long long v9 = a3;
  }
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v14 = *((_DWORD *)a2 + 6);
  uint64_t v10 = AGCLLVMTargetLowerer::buildFCmpSel(a1, (uint64_t)&v12, (uint64_t)v9, a4);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  return v10;
}

uint64_t *std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 12))
    {
      uint64_t v3 = *(unsigned int *)(v2 + 8);
      if (v3)
      {
        uint64_t v4 = 0;
        uint64_t v5 = 8 * v3;
        do
        {
          uint64_t v6 = *(llvm **)(*(void *)v2 + v4);
          if (v6 != (llvm *)-8 && v6 != 0) {
            llvm::deallocate_buffer(v6, (void *)(*(void *)v6 + 41));
          }
          v4 += 8;
        }
        while (v5 != v4);
      }
    }
    free(*(void **)v2);
    JUMPOUT(0x1CB7A0780);
  }
  return result;
}

uint64_t AGCLLVMTargetLowerer::remapGradients(uint64_t result, uint64_t a2, llvm::Value *a3, llvm::Value *a4, unsigned int a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    uint64_t v8 = 0;
    long long v9 = (llvm::IRBuilderBase *)(result + 8);
    uint64_t v10 = a5;
    do
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = llvm::ConstantInt::get();
      uint64_t v15 = llvm::ConstantInt::get();
      int v11 = (llvm::Value *)llvm::ConstantVector::get();
      unsigned char v13[16] = 257;
      uint64_t ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector(v9, a3, a4, v11, (const llvm::Twine *)v13);
      uint64_t result = llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a2, ShuffleVector);
      ++v8;
    }
    while (v10 != v8);
  }
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildBiasF2IVarying(uint64_t a1, uint64_t a2, llvm *a3)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  if ((!MGGetBoolAnswer()
     || (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_BIAS_F2I_VARYING", v6)) == 0
     || *Value == 48
     || !atoi(Value))
    && (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_BIAS_F2I_VARYING", v8)
     || !*(unsigned char *)(a1 + 808)
     || *(unsigned char *)(a1 + 1776)))
  {
    return (uint64_t)a3;
  }
  uint64_t v94 = a2;
  uint64_t v95 = a1;
  v100 = a3;
  uint64_t v96 = (uint64_t)a3;
  __src = a3;
  uint64_t v104 = 0xFFFFFFFFLL;
  v106 = v108;
  uint64_t v107 = 0xA00000000;
  llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::append<std::tuple<llvm::Value *,int> const*,void>((unsigned int *)&v106, &__src, &v105);
  __src = 0;
  uint64_t v104 = 0;
  unsigned int v105 = 0;
  long long v9 = (uint64_t *)&v100;
LABEL_10:
  *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, v9)+ 8) = 255;
  while (v107)
  {
    uint64_t v10 = (char *)v106 + 16 * v107;
    uint64_t v11 = *((void *)v10 - 2);
    uint64_t v12 = *((void *)v10 - 1);
    LODWORD(v107) = v107 - 1;
    unsigned int v13 = *(unsigned __int8 *)(v11 + 16);
    if (v11) {
      BOOL v14 = v13 >= 0x15;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14)
    {
      if (v11) {
        BOOL v15 = v13 >= 0x1C;
      }
      else {
        BOOL v15 = 0;
      }
      if (!v15) {
        break;
      }
      int v16 = *(unsigned __int8 *)(v11 + 16);
      if ((v16 - 59) > 0xFFFFFFED || v16 == 85 || v16 == 83)
      {
        int v17 = *(_DWORD *)(v11 + 20);
        unint64_t v18 = v17 & 0x7FFFFFF;
        if ((v17 & 0x7FFFFFF) != 0)
        {
          uint64_t v19 = 0;
          unint64_t v20 = 0;
          do
          {
            if ((v17 & 0x40000000) != 0) {
              uint64_t v21 = *(void *)(v11 - 8);
            }
            else {
              uint64_t v21 = v11 - 32 * v18;
            }
            uint64_t v22 = *(unsigned char **)(v21 + v19);
            if (v22) {
              BOOL v23 = v22[16] == 22;
            }
            else {
              BOOL v23 = 0;
            }
            if (!v23)
            {
              if ((*(_DWORD *)(*(void *)v22 + 8) & 0xFE) == 0x12) {
                unsigned int v24 = v12;
              }
              else {
                unsigned int v24 = -1;
              }
              uint64_t v101 = *(void *)(v21 + v19);
              v102 = 0;
              if (v24 == -1) {
                int v25 = 255;
              }
              else {
                int v25 = 1 << v24;
              }
              long long v26 = __src;
              uint64_t v27 = v105;
              int v28 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v105, (uint64_t)v22, &v102);
              uint64_t v29 = v102;
              if (v28) {
                BOOL v30 = v102 == (_DWORD *)((char *)v26 + 16 * v27);
              }
              else {
                BOOL v30 = 1;
              }
              if (v30)
              {
                llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v106, (uint64_t)v22, v24);
                *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, &v101)+ 8) = v25;
              }
              else if ((v25 & ~v102[2]) != 0)
              {
                llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v106, (uint64_t)v22, v24);
                v29[2] |= v25;
              }
              int v17 = *(_DWORD *)(v11 + 20);
            }
            ++v20;
            unint64_t v18 = v17 & 0x7FFFFFF;
            v19 += 32;
          }
          while (v20 < v18);
        }
      }
      else if ((v16 - 79) >= 0xFFFFFFF3)
      {
        uint64_t v34 = *(void *)(v11 - 32);
        if ((*(_DWORD *)(*(void *)v34 + 8) & 0xFE) == 0x12)
        {
          if (v12 == -1) {
            goto LABEL_77;
          }
          if ((*(_DWORD *)(*(void *)v11 + 8) & 0xFE) != 0x12
            || *(_DWORD *)(*(void *)v34 + 32) != *(_DWORD *)(*(void *)v11 + 32))
          {
            goto LABEL_70;
          }
          uint64_t v101 = *(void *)(v11 - 32);
          int v35 = 1 << v12;
LABEL_78:
          v102 = 0;
          std::string::size_type v42 = __src;
          uint64_t v43 = v105;
          int v44 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v105, v34, &v102);
          char v45 = v102;
          if (v44) {
            BOOL v46 = v102 == (_DWORD *)((char *)v42 + 16 * v43);
          }
          else {
            BOOL v46 = 1;
          }
          if (v46)
          {
LABEL_83:
            uint64_t v47 = v34;
            unsigned int v48 = v12;
LABEL_84:
            llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v106, v47, v48);
            *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, &v101)+ 8) = v35;
          }
          else
          {
LABEL_135:
            if ((v35 & ~v45[2]) != 0)
            {
              uint64_t v79 = v34;
              unsigned int v80 = v12;
LABEL_137:
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v106, v79, v80);
              v45[2] |= v35;
            }
          }
        }
        else
        {
          if (v12 == -1)
          {
LABEL_77:
            uint64_t v101 = *(void *)(v11 - 32);
            int v35 = 255;
            goto LABEL_78;
          }
LABEL_70:
          uint64_t v101 = *(void *)(v11 - 32);
          v102 = 0;
          long long v36 = __src;
          uint64_t v37 = v105;
          int v38 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v105, v34, &v102);
          uint64_t v39 = v102;
          if (v38) {
            BOOL v40 = v102 == (_DWORD *)((char *)v36 + 16 * v37);
          }
          else {
            BOOL v40 = 1;
          }
          if (v40)
          {
            uint64_t v82 = v34;
LABEL_147:
            llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v106, v82, 0xFFFFFFFF);
            long long v9 = &v101;
            goto LABEL_10;
          }
          if (*((unsigned __int8 *)v102 + 8) != 0xFF)
          {
            uint64_t v41 = v34;
            goto LABEL_76;
          }
        }
      }
      else
      {
        switch(*(unsigned char *)(v11 + 16))
        {
          case 'T':
            unint64_t v83 = *(_DWORD *)(v11 + 20) & 0x7FFFFFF;
            if ((*(_DWORD *)(v11 + 20) & 0x7FFFFFF) == 0) {
              goto LABEL_168;
            }
            unint64_t v84 = 1;
            uint64_t v85 = v11;
            do
            {
              v86 = *(llvm::Value **)(v85 - 32 * v83);
              if (v86) {
                BOOL v87 = *((unsigned char *)v86 + 16) == 3;
              }
              else {
                BOOL v87 = 0;
              }
              BOOL v90 = v87
                 && (Name = (void *)llvm::Value::getName(v86), v89 >= 0xF)
                 && *Name == 0x66656F632E636761
                 && *(void *)((char *)Name + 7) == 0x746E656963696666;
              unint64_t v83 = *(_DWORD *)(v11 + 20) & 0x7FFFFFF;
              if (v84 >= v83) {
                break;
              }
              ++v84;
              v85 += 32;
            }
            while (!v90);
            goto LABEL_169;
          case 'Y':
            uint64_t v31 = *(void *)(v11 - 32);
            if (v31) {
              BOOL v32 = *(unsigned char *)(v31 + 16) == 16;
            }
            else {
              BOOL v32 = 0;
            }
            if (v32)
            {
              long long v33 = (void *)(v31 + 24);
              if (*(_DWORD *)(v31 + 32) >= 0x41u) {
                long long v33 = (void *)*v33;
              }
              LODWORD(v12) = *(_DWORD *)v33;
            }
            uint64_t v34 = *(void *)(v11 - 64);
            uint64_t v101 = v34;
            if (v12 == -1) {
              int v35 = 255;
            }
            else {
              int v35 = 1 << v12;
            }
            goto LABEL_78;
          case 'Z':
            uint64_t v49 = *(void *)(v11 - 32);
            if (*(unsigned char *)(v49 + 16) != 16) {
              uint64_t v49 = 0;
            }
            if (v12 == -1 || v49 == 0)
            {
              uint64_t v51 = *(void *)(v11 - 64);
              uint64_t v101 = v51;
              v102 = 0;
              std::string::size_type v52 = __src;
              uint64_t v53 = v105;
              int v54 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v105, v51, &v102);
              long long v55 = v102;
              if (v54) {
                BOOL v56 = v102 == (_DWORD *)((char *)v52 + 16 * v53);
              }
              else {
                BOOL v56 = 1;
              }
              if (v56)
              {
                llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v106, v51, 0xFFFFFFFF);
                *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, &v101)+ 8) = 255;
              }
              else if (*((unsigned __int8 *)v102 + 8) != 0xFF)
              {
                llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v106, v51, 0xFFFFFFFF);
                v55[2] |= 0xFFu;
              }
            }
            else
            {
              if (*(_DWORD *)(v49 + 32) >= 0x41u) {
                uint64_t v65 = **(void **)(v49 + 24);
              }
              else {
                uint64_t v65 = *(void *)(v49 + 24);
              }
              if (v65 == (int)v12)
              {
                uint64_t v72 = *(void *)(v11 - 64);
                uint64_t v101 = v72;
                v102 = 0;
                v73 = __src;
                uint64_t v74 = v105;
                int v75 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v105, v72, &v102);
                uint64_t v39 = v102;
                if (v75) {
                  BOOL v76 = v102 == (_DWORD *)((char *)v73 + 16 * v74);
                }
                else {
                  BOOL v76 = 1;
                }
                if (v76)
                {
                  uint64_t v82 = v72;
                  goto LABEL_147;
                }
                if (*((unsigned __int8 *)v102 + 8) == 0xFF) {
                  continue;
                }
                uint64_t v41 = v72;
                break;
              }
            }
            uint64_t v34 = *(void *)(v11 - 96);
            uint64_t v101 = v34;
            v102 = 0;
            if (v12 == -1) {
              int v35 = 255;
            }
            else {
              int v35 = 1 << v12;
            }
            v77 = __src;
            uint64_t v78 = v105;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v105, v34, &v102))goto LABEL_83; {
            char v45 = v102;
            }
            if (v102 == (_DWORD *)((char *)v77 + 16 * v78)) {
              goto LABEL_83;
            }
            goto LABEL_135;
          case '[':
            if (v12 != -1)
            {
              unsigned int v57 = *(_DWORD *)(*(void *)(v11 + 64) + 4 * v12);
              if (v57 == -1) {
                continue;
              }
              uint64_t v58 = *(void *)(v11 - 64);
              unsigned int v59 = *(_DWORD *)(*(void *)v58 + 32);
              BOOL v14 = v57 >= v59;
              unsigned int v60 = v57 - v59;
              if (v14)
              {
                uint64_t v58 = *(void *)(v11 - 32);
                unsigned int v57 = v60;
              }
              uint64_t v101 = v58;
              v102 = 0;
              if (v57 == -1) {
                int v35 = 255;
              }
              else {
                int v35 = 1 << v57;
              }
              std::string v61 = __src;
              uint64_t v62 = v105;
              int v63 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v105, v58, &v102);
              char v45 = v102;
              if (v63) {
                BOOL v64 = v102 == (_DWORD *)((char *)v61 + 16 * v62);
              }
              else {
                BOOL v64 = 1;
              }
              if (v64)
              {
                uint64_t v47 = v58;
                unsigned int v48 = v57;
                goto LABEL_84;
              }
              if ((v35 & ~v102[2]) != 0)
              {
                uint64_t v79 = v58;
                unsigned int v80 = v57;
                goto LABEL_137;
              }
              continue;
            }
            uint64_t v66 = *(void *)(v11 - 64);
            uint64_t v101 = v66;
            v102 = 0;
            int v67 = __src;
            uint64_t v68 = v105;
            int v69 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v105, v66, &v102);
            v70 = v102;
            if (v69) {
              BOOL v71 = v102 == (_DWORD *)((char *)v67 + 16 * v68);
            }
            else {
              BOOL v71 = 1;
            }
            if (v71)
            {
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v106, v66, 0xFFFFFFFF);
              *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, &v101)+ 8) = 255;
              int v67 = __src;
              uint64_t v68 = v105;
            }
            else if (*((unsigned __int8 *)v102 + 8) != 0xFF)
            {
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v106, v66, 0xFFFFFFFF);
              v70[2] |= 0xFFu;
            }
            uint64_t v81 = *(void *)(v11 - 32);
            uint64_t v101 = v81;
            v102 = 0;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)v67, v68, v81, &v102)|| (uint64_t v39 = v102, v102 == (_DWORD *)((char *)v67 + 16 * v68)))
            {
              uint64_t v82 = v81;
              goto LABEL_147;
            }
            if (*((unsigned __int8 *)v102 + 8) == 0xFF) {
              continue;
            }
            uint64_t v41 = v81;
            break;
          default:
            continue;
        }
LABEL_76:
        llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v106, v41, 0xFFFFFFFF);
        v39[2] |= 0xFFu;
      }
    }
  }
LABEL_168:
  BOOL v90 = 0;
LABEL_169:
  llvm::deallocate_buffer(__src, (void *)(16 * v105));
  if (v106 != v108) {
    free(v106);
  }
  a3 = (llvm *)v96;
  if (v90)
  {
    long long v97 = *(_OWORD *)v94;
    uint64_t v98 = *(void *)(v94 + 16);
    if (v98) {
      llvm::MetadataTracking::track();
    }
    int v99 = *(_DWORD *)(v94 + 24);
    AGCLLVMTargetLowerer::SetIP(v95, &v97);
    if (v98) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v92 = llvm::ConstantFP::get();
    v108[8] = 257;
    return llvm::IRBuilderBase::CreateFAdd(v95 + 8, v96, v92, (uint64_t)&v106);
  }
  return (uint64_t)a3;
}

uint64_t AGCLLVMTargetLowerer::buildRTZF16Value(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  long long v46 = *(_OWORD *)a2;
  uint64_t v47 = *(void *)(a2 + 16);
  if (v47) {
    llvm::MetadataTracking::track();
  }
  int v48 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v46);
  if (v47) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)*a3;
  if ((*(_DWORD *)(*a3 + 8) & 0xFE) == 0x12) {
    uint64_t v9 = llvm::FixedVectorType::get();
  }
  else {
    uint64_t v9 = *(void *)(a1 + 200);
  }
  uint64_t v10 = (llvm::IRBuilderBase *)(a1 + 8);
  __int16 v45 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)a3, v9, (uint64_t)v44);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v45 = 257;
  unsigned int v13 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), Cast, v12, (const llvm::Twine *)v44);
  uint64_t v14 = llvm::ConstantInt::get();
  __int16 v45 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v13, v14, (uint64_t)v44);
  uint64_t v15 = llvm::ConstantFP::get();
  uint64_t v16 = llvm::ConstantFP::get();
  long long v41 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v42, (llvm::IRBuilderBase *)(a1 + 8));
  int v43 = *(_DWORD *)(a1 + 104);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, &v41, a3, v15, v16, 0);
  if (v42) {
    llvm::MetadataTracking::untrack();
  }
  if (a4)
  {
    int v18 = *((_DWORD *)v8 + 2);
    uint64_t v19 = *(void *)(a1 + 192);
    if ((v18 & 0xFE) == 0x12)
    {
      uint64_t v19 = llvm::FixedVectorType::get();
      int v18 = *((_DWORD *)v8 + 2);
    }
    uint64_t v20 = *(void *)(a1 + 152);
    if ((v18 & 0xFE) == 0x12) {
      uint64_t v20 = llvm::FixedVectorType::get();
    }
    uint64_t v37 = v19;
    __int16 v45 = 257;
    uint64_t v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)a3, v9, (uint64_t)v44);
    uint64_t v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v45 = 257;
    uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v21, v22, (const llvm::Twine *)v44);
    unsigned int v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v45 = 257;
    int v25 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), LShr, v24, (const llvm::Twine *)v44);
    long long v38 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v39, (llvm::IRBuilderBase *)(a1 + 8));
    int v40 = *(_DWORD *)(a1 + 104);
    AGCLLVMTargetLowerer::CreateFabs(a1, &v38, a3);
    if (v39) {
      llvm::MetadataTracking::untrack();
    }
    llvm::ConstantFP::get();
    __int16 v45 = 257;
    llvm::IRBuilderBase::CreateFCmpHelper();
    __int16 v45 = 257;
    long long v26 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 49, v17, v9, (uint64_t)v44);
    uint64_t v27 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v45 = 257;
    int v28 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v10, v26, v27, (const llvm::Twine *)v44);
    uint64_t v29 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v45 = 257;
    Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v10, v28, v29, (const llvm::Twine *)v44);
    uint64_t v31 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v45 = 257;
    BOOL v32 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v10, Sub, v31, (const llvm::Twine *)v44);
    __int16 v45 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateOr(v10, v32, v25, (const llvm::Twine *)v44);
    __int16 v45 = 257;
    uint64_t v34 = llvm::IRBuilderBase::CreateCast((uint64_t)v10, 38, v33, v37, (uint64_t)v44);
    __int16 v45 = 257;
    int v35 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 49, v34, v20, (uint64_t)v44);
    __int16 v45 = 257;
    llvm::IRBuilderBase::CreateFPExt(v10, v35, v8, (const llvm::Twine *)v44);
    llvm::ConstantFP::get();
    __int16 v45 = 257;
    llvm::IRBuilderBase::CreateSelect();
  }
  __int16 v45 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t *AGCLLVMTargetConfig::createTargetConfig(int a1)
{
  v1 = 0;
  switch((__int16)a1)
  {
    case 4:
      v1 = &AGCLLVMCreateG5TargetConfig(AGCTargetArch)::g5pC0;
        return v1;
      qword_1EA611E90 = 0;
      qword_1EA611EA8 = 0;
      qword_1EA611E78 = (uint64_t)"agx1-apple-ios";
      unk_1EA611E80 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
      qword_1EA611E88 = 0x400050004;
      qword_1EA611E98 = 0x10000010100;
      unk_1EA611EA0 = 60;
      AGCLLVMCreateG5TargetConfig(AGCTargetArch)::g5pC0 = (uint64_t)&unk_1F25D5F00;
      __cxa_atexit((void (*)(void *))AGCLLVMG5TargetConfig::~AGCLLVMG5TargetConfig, &AGCLLVMCreateG5TargetConfig(AGCTargetArch)::g5pC0, &dword_1CAC02000);
      goto LABEL_157;
    case 6:
    case 7:
      return AGCLLVMCreateG9TargetConfig(a1);
    case 8:
      v1 = &AGCLLVMCreateG10TargetConfig(AGCTargetArch)::g10pB0;
      {
        qword_1EBD0EA40 = 0;
        qword_1EBD0EA10 = (uint64_t)"agx2-apple-ios";
        unk_1EBD0EA18 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
        qword_1EBD0EA20 = 0x800030008;
        qword_1EBD0EA28 = (uint64_t)"/metal_rt_precise.metallib";
        qword_1EBD0EA30 = 0x100010000010100;
        unk_1EBD0EA38 = 124;
        AGCLLVMCreateG10TargetConfig(AGCTargetArch)::g10pB0 = (uint64_t)&unk_1F25CCBD8;
        __cxa_atexit((void (*)(void *))AGCLLVMG10TargetConfig::~AGCLLVMG10TargetConfig, &AGCLLVMCreateG10TargetConfig(AGCTargetArch)::g10pB0, &dword_1CAC02000);
LABEL_157:
        __cxa_guard_release(v53);
      }
      return v1;
    case 9:
    case 10:
    case 11:
    case 23:
      {
        int v25 = a1;
        a1 = v25;
        if (v26)
        {
          AGCLLVMGen4TargetConfig::AGCLLVMGen4TargetConfig((uint64_t)&AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pA0, 65545);
          AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pA0 = (uint64_t)&unk_1F25CD360;
          __cxa_atexit((void (*)(void *))AGCLLVMG11TargetConfig::~AGCLLVMG11TargetConfig, &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pA0, &dword_1CAC02000);
          a1 = v25;
        }
      }
      {
        int v27 = a1;
        a1 = v27;
        if (v28)
        {
          AGCLLVMGen4TargetConfig::AGCLLVMGen4TargetConfig((uint64_t)&AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mA0, 65546);
          AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mA0 = (uint64_t)&unk_1F25CD360;
          __cxa_atexit((void (*)(void *))AGCLLVMG11TargetConfig::~AGCLLVMG11TargetConfig, &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mA0, &dword_1CAC02000);
          a1 = v27;
        }
      }
      {
        int v29 = a1;
        a1 = v29;
        if (v30)
        {
          AGCLLVMGen4TargetConfig::AGCLLVMGen4TargetConfig((uint64_t)&AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11gA0, 65547);
          AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11gA0 = (uint64_t)&unk_1F25CD360;
          __cxa_atexit((void (*)(void *))AGCLLVMG11TargetConfig::~AGCLLVMG11TargetConfig, &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11gA0, &dword_1CAC02000);
          a1 = v29;
        }
      }
      {
        int v31 = a1;
        a1 = v31;
        if (v32)
        {
          AGCLLVMGen4TargetConfig::AGCLLVMGen4TargetConfig((uint64_t)&AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pB0, 196617);
          AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pB0 = (uint64_t)&unk_1F25CD360;
          __cxa_atexit((void (*)(void *))AGCLLVMG11TargetConfig::~AGCLLVMG11TargetConfig, &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pB0, &dword_1CAC02000);
          a1 = v31;
        }
      }
      {
        int v33 = a1;
        a1 = v33;
        if (v34)
        {
          AGCLLVMGen4TargetConfig::AGCLLVMGen4TargetConfig((uint64_t)&AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mB0, 196618);
          AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mB0 = (uint64_t)&unk_1F25CD360;
          __cxa_atexit((void (*)(void *))AGCLLVMG11TargetConfig::~AGCLLVMG11TargetConfig, &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mB0, &dword_1CAC02000);
          a1 = v33;
        }
      }
      if (a1 > 65558)
      {
        if (a1 != 65559)
        {
          if (a1 == 196617) {
            return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pB0;
          }
          if (a1 == 196618) {
            return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mB0;
          }
          return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mA0;
        }
        return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11gA0;
      }
      if (a1 == 65545) {
        return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pA0;
      }
      if (a1 == 65547) {
        return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11gA0;
      }
      return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mA0;
    case 12:
      {
        int v54 = a1;
        a1 = v54;
        if (v55)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pA0, 65548);
          AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pA0 = (uint64_t)&unk_1F25CDAF0;
          __cxa_atexit((void (*)(void *))AGCLLVMG12TargetConfig::~AGCLLVMG12TargetConfig, &AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pA0, &dword_1CAC02000);
          a1 = v54;
        }
      }
      {
        int v65 = a1;
        a1 = v65;
        if (v56)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pB0, 196620);
          AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pB0 = (uint64_t)&unk_1F25CDAF0;
          __cxa_atexit((void (*)(void *))AGCLLVMG12TargetConfig::~AGCLLVMG12TargetConfig, &AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pB0, &dword_1CAC02000);
          a1 = v65;
        }
      }
      if (a1 == 196620) {
        return &AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pB0;
      }
      else {
        return &AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pA0;
      }
    case 14:
    case 16:
    case 25:
    case 26:
    case 27:
      {
        int v6 = a1;
        a1 = v6;
        if (v7)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pA0, 65550);
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pA0 = (uint64_t)&unk_1F25CE360;
          dword_1EA612A4C = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pA0, &dword_1CAC02000);
          a1 = v6;
        }
      }
      {
        int v8 = a1;
        a1 = v8;
        if (v9)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gA0, 65552);
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gA0 = (uint64_t)&unk_1F25CE360;
          dword_1EA6129CC = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gA0, &dword_1CAC02000);
          a1 = v8;
        }
      }
      {
        int v10 = a1;
        a1 = v10;
        if (v11)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pB0, 196622);
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pB0 = (uint64_t)&unk_1F25CE360;
          dword_1EA61292C = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pB0, &dword_1CAC02000);
          a1 = v10;
        }
      }
      {
        int v12 = a1;
        a1 = v12;
        if (v13)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gB0, 196624);
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gB0 = (uint64_t)&unk_1F25CE360;
          dword_1EA612A0C = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gB0, &dword_1CAC02000);
          a1 = v12;
        }
      }
      {
        int v14 = a1;
        a1 = v14;
        if (v15)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sA0, 65561);
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sA0 = (uint64_t)&unk_1F25CE360;
          dword_1EA614994 = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sA0, &dword_1CAC02000);
          a1 = v14;
        }
      }
      {
        int v16 = a1;
        a1 = v16;
        if (v17)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cA0, 65562);
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cA0 = (uint64_t)&unk_1F25CE360;
          dword_1EA6149DC = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cA0, &dword_1CAC02000);
          a1 = v16;
        }
      }
      {
        int v64 = a1;
        a1 = v64;
        if (v18)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dA0, 65563);
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dA0 = (uint64_t)&unk_1F25CE360;
          dword_1EA614A24 = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dA0, &dword_1CAC02000);
          a1 = v64;
        }
      }
      {
        int v19 = a1;
        a1 = v19;
        if (v20)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sB0, 196633);
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sB0 = (uint64_t)&unk_1F25CE360;
          dword_1EA614A6C = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sB0, &dword_1CAC02000);
          a1 = v19;
        }
      }
      {
        int v21 = a1;
        a1 = v21;
        if (v22)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cB0, 196634);
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cB0 = (uint64_t)&unk_1F25CE360;
          dword_1EA614AB4 = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cB0, &dword_1CAC02000);
          a1 = v21;
        }
      }
      {
        int v23 = a1;
        a1 = v23;
        if (v24)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dB0, 196635);
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dB0 = (uint64_t)&unk_1F25CE360;
          dword_1EA614AFC = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dB0, &dword_1CAC02000);
          a1 = v23;
        }
      }
      v1 = &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pA0;
      if (a1 <= 196621)
      {
        if (a1 > 65561)
        {
          if (a1 == 65562)
          {
            return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cA0;
          }
          else if (a1 == 65563)
          {
            return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dA0;
          }
        }
        else if (a1 == 65552)
        {
          return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gA0;
        }
        else if (a1 == 65561)
        {
          return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sA0;
        }
      }
      else if (a1 <= 196632)
      {
        if (a1 == 196622)
        {
          return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pB0;
        }
        else if (a1 == 196624)
        {
          return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gB0;
        }
      }
      else
      {
        switch(a1)
        {
          case 196633:
            return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sB0;
          case 196634:
            return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cB0;
          case 196635:
            return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dB0;
        }
      }
      return v1;
    case 17:
    case 18:
      goto LABEL_78;
    case 19:
    case 20:
    case 21:
      {
        int v35 = a1;
        a1 = v35;
        if (v36)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sA0, 65555);
          AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sA0 = (uint64_t)&unk_1F25CF440;
          dword_1EA614B44 = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig, &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sA0, &dword_1CAC02000);
          a1 = v35;
        }
      }
      {
        int v37 = a1;
        a1 = v37;
        if (v38)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sB0, 196627);
          AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sB0 = (uint64_t)&unk_1F25CF440;
          dword_1EA614B8C = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig, &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sB0, &dword_1CAC02000);
          a1 = v37;
        }
      }
      {
        int v39 = a1;
        a1 = v39;
        if (v40)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cA0, 65556);
          AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cA0 = (uint64_t)&unk_1F25CF440;
          dword_1EA614BD4 = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig, &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cA0, &dword_1CAC02000);
          a1 = v39;
        }
      }
      {
        int v41 = a1;
        a1 = v41;
        if (v42)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cB0, 196628);
          AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cB0 = (uint64_t)&unk_1F25CF440;
          dword_1EA614C1C = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig, &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cB0, &dword_1CAC02000);
          a1 = v41;
        }
      }
      {
        int v43 = a1;
        a1 = v43;
        if (v44)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dA0, 65557);
          AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dA0 = (uint64_t)&unk_1F25CF440;
          dword_1EA614C64 = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig, &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dA0, &dword_1CAC02000);
          a1 = v43;
        }
      }
      {
        int v45 = a1;
        a1 = v45;
        if (v46)
        {
          AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dB0, 196629);
          AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dB0 = (uint64_t)&unk_1F25CF440;
          dword_1EA614CAC = 64;
          __cxa_atexit((void (*)(void *))AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig, &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dB0, &dword_1CAC02000);
          a1 = v45;
        }
      }
      v1 = &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sA0;
      if (a1 <= 196626)
      {
        if (a1 == 65556)
        {
          return &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cA0;
        }
        else if (a1 == 65557)
        {
          return &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dA0;
        }
      }
      else
      {
        switch(a1)
        {
          case 196629:
            return &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dB0;
          case 196628:
            return &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cB0;
          case 196627:
            return &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sB0;
        }
      }
      return v1;
    case 22:
      if (a1 != 196630) {
        goto LABEL_81;
      }
      a1 = 196625;
LABEL_78:
      return AGCLLVMCreateG14TargetConfig(a1);
    case 24:
LABEL_81:
      return AGCLLVMCreateG15TargetConfig(a1);
    case 31:
      {
        int v57 = a1;
        a1 = v57;
        if (v58)
        {
          AGCLLVMG16PA0TargetConfig::AGCLLVMG16PA0TargetConfig();
          __cxa_atexit((void (*)(void *))AGCLLVMG16PA0TargetConfig::~AGCLLVMG16PA0TargetConfig, &AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pA0, &dword_1CAC02000);
          a1 = v57;
        }
      }
      {
        int v59 = a1;
        a1 = v59;
        if (v60)
        {
          AGCLLVMG16PB0TargetConfig::AGCLLVMG16PB0TargetConfig((uint64_t)&AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pB0, 196639);
          __cxa_atexit((void (*)(void *))AGCLLVMG16PB0TargetConfig::~AGCLLVMG16PB0TargetConfig, &AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pB0, &dword_1CAC02000);
          a1 = v59;
        }
      }
      int v4 = 262175;
      {
        int v61 = a1;
        int v4 = 262175;
        int v63 = v62;
        a1 = v61;
        if (v63)
        {
          AGCLLVMG16PB0TargetConfig::AGCLLVMG16PB0TargetConfig((uint64_t)&AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pB1, 262175);
          __cxa_atexit((void (*)(void *))AGCLLVMG16PB0TargetConfig::~AGCLLVMG16PB0TargetConfig, &AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pB1, &dword_1CAC02000);
          int v4 = 262175;
          a1 = v61;
        }
      }
      if (a1 == 196639) {
        uint64_t v3 = (uint64_t *)&AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pB0;
      }
      else {
        uint64_t v3 = &AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pA0;
      }
      uint64_t v5 = (uint64_t *)&AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pB1;
      goto LABEL_91;
    case 32:
    case 34:
      {
        int v47 = a1;
        a1 = v47;
        if (v48)
        {
          AGCLLVMG16GA0TargetConfig::AGCLLVMG16GA0TargetConfig();
          __cxa_atexit((void (*)(void *))AGCLLVMG16GA0TargetConfig::~AGCLLVMG16GA0TargetConfig, &AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g16g_a0, &dword_1CAC02000);
          a1 = v47;
        }
      }
      {
        int v49 = a1;
        a1 = v49;
        if (v50)
        {
          AGCLLVMG16GB0TargetConfig::AGCLLVMG16GB0TargetConfig();
          __cxa_atexit((void (*)(void *))AGCLLVMG16GB0TargetConfig::~AGCLLVMG16GB0TargetConfig, &AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g16g_b0, &dword_1CAC02000);
          a1 = v49;
        }
      }
      {
        int v51 = a1;
        a1 = v51;
        if (v52)
        {
          AGCLLVMG17PA0TargetConfig::AGCLLVMG17PA0TargetConfig();
          __cxa_atexit((void (*)(void *))AGCLLVMG17PA0TargetConfig::~AGCLLVMG17PA0TargetConfig, &AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g17p_a0, &dword_1CAC02000);
          a1 = v51;
        }
      }
      if (a1 == 196640) {
        uint64_t v3 = &AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g16g_b0;
      }
      else {
        uint64_t v3 = &AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g16g_a0;
      }
      int v4 = 65570;
      uint64_t v5 = &AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g17p_a0;
LABEL_91:
      if (a1 == v4) {
        return v5;
      }
      else {
        return v3;
      }
    default:
      return v1;
  }
}

void AGCLLVMG10TargetConfig::createTileDispatchVertexShader(AGCLLVMG10TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  operator new();
}

void AGCLLVMG10TargetConfig::~AGCLLVMG10TargetConfig(AGCLLVMG10TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

void AGCLLVMG10TargetConfig::createTargetLowerer(AGCLLVMG10TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG10TargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3)
{
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
    a3 = **(void **)(a3 + 16);
  }
  if (a3 == *(void *)(a1 + 168) && a2 == 1) {
    return 917504;
  }
  else {
    return (a2 << 16);
  }
}

uint64_t AGCLLVMG10TargetLowerer::maxImageDimLog2(AGCLLVMG10TargetLowerer *this)
{
  return 14;
}

BOOL AGCLLVMGen2TargetLowerer::isImageBlockWrite(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v3 = *(const void **)(a1 + 1920);
  if (!v3) {
    return 1;
  }
  size_t v6 = strlen(*(const char **)(a1 + 1920));
  if (a3 < v6) {
    return 0;
  }
  return !v6 || memcmp(a2, v3, v6) == 0;
}

BOOL AGCLLVMGen2TargetLowerer::isTextureWriteFunction(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v3 = *(const void **)(a1 + 1912);
  if (!v3) {
    return 1;
  }
  size_t v7 = strlen(*(const char **)(a1 + 1912));
  if (a3 >= v7 && (!v7 || !memcmp(a2, v3, v7))) {
    return 1;
  }
  int v8 = *(const char **)(a1 + 1920);
  if (!v8) {
    return 1;
  }
  size_t v9 = strlen(v8);
  if (a3 < v9) {
    return 0;
  }
  return !v9 || memcmp(a2, v8, v9) == 0;
}

BOOL AGCLLVMG10TargetLowerer::isValidTileSize(AGCLLVMG10TargetLowerer *this, int a2, int a3)
{
  return a2 == a3;
}

void AGCLLVMGen3TargetLowerer::printAsm(AGCLLVMGen3TargetLowerer *this, const unsigned __int8 *a2, uint64_t a3, const AGCLLVMObject *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  size_t v7 = (const char *)(*(uint64_t (**)(const AGCLLVMObject *))(*(void *)a4 + 56))(a4);
  snprintf(__str, 0x80uLL, "%s shader %u (driver disassembler)", v7, *((_DWORD *)a4 + 818));
  printMessage((char **)&AGCPrinter, "------ Start USC %s -------\n", v8, v9, v10, v11, v12, v13, (char)__str);
  printHexDump((char **)&AGCPrinter, (uint64_t)a2, a3, 0x10u, "0x", 1);
  printMessage((char **)&AGCPrinter, "\n------- End USC %s --------\n", v14, v15, v16, v17, v18, v19, (char)__str);
}

BOOL AGCLLVMG10TargetLowerer::checkMaxTexturesAndSamplers(AGCLLVMG10TargetLowerer *this, unsigned int a2, unsigned int a3)
{
  return a2 < 0x80 && a3 < 0x1C;
}

uint64_t AGCLLVMGen3TargetLowerer::vertexBuiltinRegisterDomain(AGCLLVMGen3TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMGen3TargetLowerer::getVertexInputCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v18 = *(_OWORD *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  if (v19) {
    llvm::MetadataTracking::track();
  }
  int v20 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v18);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 440))(a1, a3, a4);
  uint64_t v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, (uint64_t)"agc.read_vi.f32", 15, a1[21], a1[25]);
  v14[0] = llvm::ConstantInt::get();
  __int16 v17 = 257;
  uint64_t v9 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v8 + 24), v8, (uint64_t)v14, 1, (uint64_t)v16);
  if (a4 == 9)
  {
    uint64_t v10 = a1[25];
    __int16 v17 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, (uint64_t)v9, v10, (uint64_t)v16);
    uint64_t v12 = a1[24];
    __int16 v15 = 257;
    return llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, Cast, v12, (uint64_t)v14);
  }
  return (uint64_t)v9;
}

uint64_t AGCLLVMGen3TargetLowerer::getVertexInputRegister(uint64_t a1, _DWORD *a2, int a3)
{
  if ((a3 - 1) > 4) {
    return 0;
  }
  uint64_t result = dword_1CADDEFD0[a3 - 1];
  if (*a2 <= result) {
    *a2 = result + 1;
  }
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::setLoadStoreCacheControl()
{
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  return llvm::Function::addFnAttr();
}

uint64_t AGCLLVMGen3TargetLowerer::bypassL1ForStoresForVertexDataDependencies(AGCLLVMGen3TargetLowerer *this, llvm::Function *a2)
{
  return llvm::Function::addFnAttr();
}

const char *AGCLLVMGen3TargetLowerer::setSlcCachePolicyForImageWrites(AGCLLVMGen3TargetLowerer *this, llvm::Function *a2)
{
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_G10_IMAGE_WRITE_CACHE_CTL", v2);
    if (Value)
    {
      strlen(Value);
      llvm::Function::addFnAttr();
    }
  }
  uint64_t result = (const char *)MGGetBoolAnswer();
  if (result)
  {
    uint64_t result = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_IMAGE_WRITE_PERSISTANCE", v5);
    if (result)
    {
      strlen(result);
      return (const char *)llvm::Function::addFnAttr();
    }
  }
  return result;
}

uint64_t AGCLLVMGen2TargetLowerer::forceWritethroughForStores(AGCLLVMGen2TargetLowerer *this, llvm::Function *a2)
{
  llvm::Function::addFnAttr();
  return llvm::Function::addFnAttr();
}

uint64_t AGCLLVMGen3TargetLowerer::isPartitionLockingHandlingRequired(AGCLLVMGen3TargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMGen3TargetLowerer::setupMetalDriverShaderPRIDS(AGCLLVMGen3TargetLowerer *this)
{
  return AGCLLVMGen3TargetLowerer::setupFixedPRIDS((uint64_t)this, 0);
}

void AGCLLVMG10TargetLowerer::~AGCLLVMG10TargetLowerer(AGCLLVMG10TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

std::string *AGCLLVMG11TargetConfig::getTargetFeatureString@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if ((LODWORD(this[1].__r_.__value_.__l.__data_) - 65545) <= 1) {
    return std::string::append(a2, "-smpfwd");
  }
  return this;
}

void AGCLLVMG11TargetConfig::createMetalPostTessellationShader()
{
}

void AGCLLVMG11TargetConfig::~AGCLLVMG11TargetConfig(AGCLLVMG11TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

void AGCLLVMG11TargetConfig::createTargetLowerer(AGCLLVMG11TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG11TargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3)
{
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
    a3 = **(void **)(a3 + 16);
  }
  if (a3 == *(void *)(a1 + 168) && a2 == 1) {
    return 917504;
  }
  else {
    return (a2 << 16);
  }
}

uint64_t AGCLLVMG11TargetLowerer::maxImageDimLog2(AGCLLVMG11TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMGen4TargetLowerer::getVertexInputRegister(uint64_t a1, _DWORD *a2, int a3)
{
  if ((a3 - 1) > 8) {
    return 0;
  }
  uint64_t result = dword_1CADDEFE4[a3 - 1];
  if (*a2 <= result) {
    *a2 = result + 1;
  }
  return result;
}

void AGCLLVMG11TargetLowerer::~AGCLLVMG11TargetLowerer(AGCLLVMG11TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMG12TargetConfig::~AGCLLVMG12TargetConfig(AGCLLVMG12TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

void AGCLLVMG12TargetConfig::createTargetLowerer(AGCLLVMG12TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG12TargetLowerer::buildShuffleAndFill(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  uint64_t v12 = AGCLLVMGen5TargetLowerer::buildShuffleAndFillEmulation(a1, &v14, a3, a4, a5, a6);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  return v12;
}

uint64_t AGCLLVMG12TargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3)
{
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
    a3 = **(void **)(a3 + 16);
  }
  if (a3 == *(void *)(a1 + 168) && a2 == 1) {
    return 917504;
  }
  else {
    return (a2 << 16);
  }
}

uint64_t AGCLLVMG12TargetLowerer::maxImageDimLog2(AGCLLVMG12TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG12TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  int v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(unsigned char *)(a1 + 1770))
  {
    int v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    int v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    int v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    uint64_t v26 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    uint64_t v28 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    int v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    int v30 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    int v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    int v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    uint64_t v34 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    int v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    int v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    int v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    int v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    uint64_t v42 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    uint64_t v44 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    int v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    int v46 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    int v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    uint64_t v50 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    uint64_t v52 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    __int16 v71 = 257;
    int v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    int v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    uint64_t v57 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    int v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    int v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    int v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    __int16 v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG12TargetLowerer::buildImageBaseLevelExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v23 = *(_OWORD *)a2;
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v22 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v21);
  uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v21);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v20 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v19);
  uint64_t v14 = a1[25];
  __int16 v18 = 257;
  uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v17);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Cast, a4, 0);
}

uint64_t AGCLLVMG12TargetLowerer::buildImageSampleCountExtract(void *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v29 = *(_OWORD *)a2;
  uint64_t v30 = *(void *)(a2 + 16);
  if (v30) {
    llvm::MetadataTracking::track();
  }
  int v31 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v29);
  if (v30) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v27);
  __int16 v26 = 257;
  uint64_t v12 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v11);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v12, (uint64_t)GEP, 0, (uint64_t)v25);
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  uint64_t v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v14, (const llvm::Twine *)v27);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v26 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v15, v16, (const llvm::Twine *)v25);
  uint64_t v18 = a1[25];
  __int16 v24 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v18, (uint64_t)v23);
  __int16 v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v20, Cast, (const llvm::Twine *)v27);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG12TargetLowerer::buildImageMipCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v32 = *(_OWORD *)a2;
  uint64_t v33 = *(void *)(a2 + 16);
  if (v33) {
    llvm::MetadataTracking::track();
  }
  int v34 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v32);
  if (v33) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v31 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v30);
  uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v30);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v28);
  uint64_t v14 = a1[25];
  __int16 v27 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v26);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  __int16 v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v16, (const llvm::Twine *)v30);
  uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t v19 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v17, v18, (const llvm::Twine *)v28);
  uint64_t v20 = a1[25];
  __int16 v27 = 257;
  uint64_t v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v19, v20, (uint64_t)v26);
  __int16 v31 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 1), Cast, v21, (const llvm::Twine *)v30);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Sub, v23, (const llvm::Twine *)v28);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Add, a4, 0);
}

uint64_t AGCLLVMG12TargetLowerer::buildImageDimensionsExtract(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v98 = *(_OWORD *)a2;
  uint64_t v99 = *(void *)(a2 + 16);
  if (v99) {
    llvm::MetadataTracking::track();
  }
  int v100 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v98);
  if (v99) {
    llvm::MetadataTracking::untrack();
  }
  size_t v7 = *(llvm::Type **)(a1 + 208);
  __int16 v97 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v7, (uint64_t)a3, 0, (uint64_t)v96);
  uint64_t v9 = *(llvm::Type **)(a1 + 208);
  uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v9, a3, v10, (const llvm::Twine *)v96);
  __int16 v95 = 257;
  uint64_t v13 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v12);
  uint64_t v14 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v13, (uint64_t)GEP, 0, (uint64_t)v94);
  uint64_t v15 = *(llvm::Type **)(a1 + 208);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  __int16 v17 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v15, a3, v16, (const llvm::Twine *)v96);
  __int16 v95 = 257;
  uint64_t v19 = AGCLLVMBuilder::tryDeducePointeeType(v17, v18);
  uint64_t v20 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v19, (uint64_t)v17, 0, (uint64_t)v94);
  uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  __int16 v22 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v14, v21, (const llvm::Twine *)v96);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v22, v23, (const llvm::Twine *)v94);
  uint64_t v25 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v25, (uint64_t)v92);
  __int16 v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Cast, v27, (const llvm::Twine *)v90);
  __int16 v29 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  uint64_t v30 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v29, (const llvm::Twine *)v96);
  __int16 v31 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v32 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v30, v31, (const llvm::Twine *)v94);
  uint64_t v33 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  int v34 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v32, v33, (uint64_t)v92);
  int v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  uint64_t v36 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v35, (const llvm::Twine *)v96);
  int v37 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v38 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v36, v37, (const llvm::Twine *)v94);
  uint64_t v39 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  int v40 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v38, v39, (uint64_t)v92);
  uint64_t v41 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v42 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v40, v41, (const llvm::Twine *)v90);
  int v43 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v42, v34);
  uint64_t v44 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  int v45 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v44, (const llvm::Twine *)v96);
  int v46 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v47 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v45, v46, (const llvm::Twine *)v94);
  uint64_t v48 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  uint64_t v49 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v47, v48, (uint64_t)v92);
  uint64_t v50 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  int v51 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v49, v50, (const llvm::Twine *)v90);
  uint64_t v52 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v51, v34);
  uint64_t v53 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, v34);
  int v54 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  int v55 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v20, v54, (const llvm::Twine *)v96);
  uint64_t v56 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v57 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v55, v56, (const llvm::Twine *)v94);
  uint64_t v58 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  int v59 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v57, v58, (uint64_t)v92);
  int v60 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v59, v60, (const llvm::Twine *)v90);
  int v61 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  int v62 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v61, (const llvm::Twine *)v96);
  __int16 v63 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v64 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v62, v63, (const llvm::Twine *)v94);
  uint64_t v65 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  uint64_t v66 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v64, v65, (uint64_t)v92);
  __int16 v67 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  uint64_t v68 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v67, (const llvm::Twine *)v96);
  __int16 v69 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v70 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v68, v69, (const llvm::Twine *)v94);
  uint64_t v71 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  long long v72 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v70, v71, (uint64_t)v92);
  uint64_t v73 = llvm::ConstantInt::get();
  __int16 v97 = 257;
  uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v66, v73, (uint64_t)v96);
  uint64_t v75 = llvm::ConstantInt::get();
  __int16 v95 = 257;
  BOOL v76 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v72, v75, (uint64_t)v94);
  __int16 v93 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), ICmp, v76, (const llvm::Twine *)v92);
  __int16 v97 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 312), v78);
  __int16 v97 = 257;
  unsigned int v80 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), NullValue, v43, v80, (const llvm::Twine *)v96);
  __int16 v97 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v52, v82, (const llvm::Twine *)v96);
  __int16 v97 = 257;
  unint64_t v84 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v85 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v83, v53, v84, (const llvm::Twine *)v96);
  __int16 v97 = 257;
  v86 = (llvm::Value *)llvm::ConstantInt::get();
  BOOL v87 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v85, Select, v86, (const llvm::Twine *)v96);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v87, a4, 0);
}

BOOL AGCLLVMG12TargetLowerer::isImageWriteBlockFromDimensionSupported(uint64_t a1, int a2)
{
  return (a2 - 2) < 4;
}

uint64_t AGCLLVMG12TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGCLLVMG12TargetLowerer::~AGCLLVMG12TargetLowerer(AGCLLVMG12TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig(AGCLLVMG13TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

void AGCLLVMG13TargetConfig::createTargetLowerer(AGCLLVMG13TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG13TargetLowerer::buildShuffleAndFill(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  uint64_t v12 = AGCLLVMGen5TargetLowerer::buildShuffleAndFillEmulation(a1, &v14, a3, a4, a5, a6);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  return v12;
}

uint64_t AGCLLVMG13TargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3, int a4, char a5, int a6)
{
  int v6 = *(_DWORD *)(a3 + 8) & 0xFE;
  if (a6)
  {
    uint64_t v7 = a3;
    if (v6 == 18) {
      uint64_t v7 = **(void **)(a3 + 16);
    }
    if (a2 == 1) {
      int v8 = 3;
    }
    else {
      int v8 = a2;
    }
    if (a2 == 12) {
      int v9 = 16;
    }
    else {
      int v9 = v8;
    }
    if (a2 == 13) {
      int v10 = 15;
    }
    else {
      int v10 = v9;
    }
    if (a5) {
      int v10 = a2;
    }
    if (v7 == *(void *)(a1 + 168) && a4 != 0) {
      a2 = v10;
    }
  }
  if (v6 == 18) {
    a3 = **(void **)(a3 + 16);
  }
  BOOL v13 = a2 == 1 && a3 == *(void *)(a1 + 168);
  return v13 | (a2 << 16);
}

void AGCLLVMG13TargetLowerer::createGPUVAMasks(int *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0;
  int v6 = (void *)(a3 + 8);
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = a3 + 8;
  uint64_t v7 = *a1;
  uint64_t v8 = *(unsigned __int16 *)((char *)a1 - v7 + 4);
  uint64_t v9 = *(unsigned int *)((char *)a1 + v8);
  int v10 = (int *)((char *)a1 + v8 + v9);
  uint64_t v11 = *(unsigned __int16 *)((char *)v10 - *v10 + 12);
  uint64_t v12 = (char *)v10 + v11;
  uint64_t v13 = *(unsigned int *)((char *)v10 + v11);
  uint64_t v14 = *(unsigned int *)&v12[v13];
  if (v14)
  {
    uint64_t v15 = 4 * v14;
    if (a2) {
      int v16 = -524484864;
    }
    else {
      int v16 = 65280;
    }
    uint64_t v17 = v8 + v9 + v11 + v13;
    do
    {
      uint64_t v18 = *(unsigned int *)((char *)a1 + v17 + 4);
      uint64_t v19 = (char *)a1 + v17 + v18 - *(int *)((char *)a1 + v17 + v18 + 4);
      if (*((unsigned __int16 *)v19 + 2) >= 7u && (uint64_t v20 = *((unsigned __int16 *)v19 + 5)) != 0) {
        unsigned int v21 = *(int *)((char *)a1 + v17 + v18 + v20 + 4);
      }
      else {
        unsigned int v21 = 0;
      }
      unsigned int v64 = v21;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v21, &v64)+ 8) = v16;
      v17 += 4;
      v15 -= 4;
    }
    while (v15);
    uint64_t v22 = -(uint64_t)*a1;
  }
  else
  {
    uint64_t v22 = -v7;
  }
  long long v23 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 + v22 + 4));
  __int16 v24 = (int *)((char *)v23 + *v23);
  uint64_t v25 = (char *)v24 - *v24;
  __int16 v26 = (unsigned int *)((char *)v24
                       + *((unsigned __int16 *)v25 + 4)
                       + *(unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 4)));
  uint64_t v27 = *v26;
  if (v27)
  {
    unint64_t v28 = 0;
    uint64_t v29 = 4 * v27;
    while (1)
    {
      uint64_t v30 = v26[v28 / 4 + 1];
      uint64_t v31 = v30 - *(int *)((char *)&v26[v28 / 4 + 1] + v30);
      uint64_t v32 = (char *)&v26[v28 / 4] + v31;
      unsigned int v33 = *((unsigned __int16 *)v32 + 2);
      if (v33 < 5) {
        break;
      }
      uint64_t v34 = *((unsigned __int16 *)v32 + 4);
      if (!v34)
      {
        uint64_t v36 = (uint64_t)v26 + v30 + v28 + 4;
        int v37 = (char *)&v26[v28 / 4] + v31;
LABEL_22:
        uint64_t v38 = v37 + 4;
        if (v33 >= 0xB)
        {
          uint64_t v39 = *((unsigned __int16 *)v38 + 5);
          if (v39)
          {
            int v35 = *(_DWORD *)(v36 + v39);
            goto LABEL_26;
          }
        }
        break;
      }
      if (!*((unsigned char *)&v26[v28 / 4 + 1] + v30 + v34))
      {
        uint64_t v36 = (uint64_t)v26 + v30 + v28 + 4;
        int v37 = (char *)&v26[v28 / 4] + v31;
        goto LABEL_22;
      }
      v28 += 4;
      if (v29 == v28) {
        goto LABEL_19;
      }
    }
    int v35 = 0;
  }
  else
  {
LABEL_19:
    int v35 = -1;
  }
LABEL_26:
  int v40 = (unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 12));
  uint64_t v41 = *v40;
  int v43 = (unsigned int *)((char *)v40 + v41 + 4);
  uint64_t v42 = *(unsigned int *)((char *)v40 + v41);
  if (v42)
  {
    uint64_t v44 = &v43[v42];
    do
    {
      int v45 = (int *)((char *)v43 + *v43);
      int v46 = (unsigned __int16 *)((char *)v45 - *v45);
      unsigned int v47 = *v46;
      if (v47 >= 5 && v46[2] && *((unsigned char *)v45 + v46[2]) == 110)
      {
        if (v47 <= 6)
        {
          unsigned int v48 = 0;
          int v49 = 0;
          unsigned int v63 = 0;
        }
        else
        {
          unsigned int v48 = v46[3] ? *(int *)((char *)v45 + v46[3]) : 0;
          unsigned int v63 = v48;
          if (v47 >= 9 && (uint64_t v50 = v46[4]) != 0) {
            int v49 = *(int *)((char *)v45 + v50);
          }
          else {
            int v49 = 0;
          }
        }
        uint64_t v51 = *v6;
        if (*v6)
        {
          uint64_t v52 = v6;
          do
          {
            unsigned int v53 = *(_DWORD *)(v51 + 28);
            BOOL v54 = v53 >= v48;
            if (v53 >= v48) {
              int v55 = (uint64_t *)v51;
            }
            else {
              int v55 = (uint64_t *)(v51 + 8);
            }
            if (v54) {
              uint64_t v52 = (void *)v51;
            }
            uint64_t v51 = *v55;
          }
          while (*v55);
          if (v52 != v6 && v48 >= *((_DWORD *)v52 + 7))
          {
            unsigned int v56 = (v49 + v35) << 7;
            unsigned int v57 = v56 & 0x7F00;
            unsigned int v58 = (v57 & 0xFFFF7FFF | ((((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2)) >> 1)) & 1) << 15)) ^ 0x8000;
            if (a2)
            {
              int v59 = 0;
              unsigned int v60 = v58 | 0xBC0000;
              unsigned int v61 = v60 >> 8;
              int v62 = 43;
              do
              {
                v61 ^= ((int)(v61 >> v59 << 31) >> 31) & v62;
                v62 *= 2;
                ++v59;
              }
              while (v59 != 19);
              unsigned int v58 = v60 & 0x7FFFFFF | ((v61 >> 19) << 27);
            }
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v48, &v63)+ 8) = v58;
          }
        }
      }
      ++v43;
    }
    while (v43 != v44);
  }
}

uint64_t AGCLLVMG13TargetLowerer::maxImageDimLog2(AGCLLVMG13TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG13TargetLowerer::needsShaderDepthClamp(AGCLLVMG13TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG13TargetLowerer::supportsMeshShading(AGCLLVMG13TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG13TargetLowerer::supportsBarycentricCoords(AGCLLVMG13TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG13TargetLowerer::supportsPrimitiveID(AGCLLVMG13TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG13TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  uint64_t v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(unsigned char *)(a1 + 1770))
  {
    uint64_t v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    long long v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    __int16 v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    uint64_t v26 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    uint64_t v28 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    uint64_t v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    uint64_t v34 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    int v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    int v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    uint64_t v42 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    uint64_t v44 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    int v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    int v46 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    uint64_t v50 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    uint64_t v52 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    unsigned int v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    __int16 v71 = 257;
    BOOL v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    int v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    uint64_t v57 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    unsigned int v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    int v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    __int16 v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG13TargetLowerer::buildImageBaseLevelExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v23 = *(_OWORD *)a2;
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v22 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v21);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v21);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v20 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v19);
  uint64_t v14 = a1[25];
  __int16 v18 = 257;
  uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v17);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Cast, a4, 0);
}

uint64_t AGCLLVMG13TargetLowerer::buildImageSampleCountExtract(void *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v29 = *(_OWORD *)a2;
  uint64_t v30 = *(void *)(a2 + 16);
  if (v30) {
    llvm::MetadataTracking::track();
  }
  int v31 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v29);
  if (v30) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v27);
  __int16 v26 = 257;
  uint64_t v12 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v11);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v12, (uint64_t)GEP, 0, (uint64_t)v25);
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  uint64_t v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v14, (const llvm::Twine *)v27);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v26 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v15, v16, (const llvm::Twine *)v25);
  uint64_t v18 = a1[25];
  __int16 v24 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v18, (uint64_t)v23);
  __int16 v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v20, Cast, (const llvm::Twine *)v27);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG13TargetLowerer::buildImageMipCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v32 = *(_OWORD *)a2;
  uint64_t v33 = *(void *)(a2 + 16);
  if (v33) {
    llvm::MetadataTracking::track();
  }
  int v34 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v32);
  if (v33) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v31 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v30);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v30);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v28);
  uint64_t v14 = a1[25];
  __int16 v27 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v26);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  uint64_t v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v16, (const llvm::Twine *)v30);
  uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t v19 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v17, v18, (const llvm::Twine *)v28);
  uint64_t v20 = a1[25];
  __int16 v27 = 257;
  unsigned int v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v19, v20, (uint64_t)v26);
  __int16 v31 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 1), Cast, v21, (const llvm::Twine *)v30);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Sub, v23, (const llvm::Twine *)v28);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Add, a4, 0);
}

uint64_t AGCLLVMG13TargetLowerer::buildImageDimensionsExtract(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v98 = *(_OWORD *)a2;
  uint64_t v99 = *(void *)(a2 + 16);
  if (v99) {
    llvm::MetadataTracking::track();
  }
  int v100 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v98);
  if (v99) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = *(llvm::Type **)(a1 + 208);
  __int16 v97 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v7, (uint64_t)a3, 0, (uint64_t)v96);
  uint64_t v9 = *(llvm::Type **)(a1 + 208);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v9, a3, v10, (const llvm::Twine *)v96);
  __int16 v95 = 257;
  uint64_t v13 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v12);
  uint64_t v14 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v13, (uint64_t)GEP, 0, (uint64_t)v94);
  uint64_t v15 = *(llvm::Type **)(a1 + 208);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  uint64_t v17 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v15, a3, v16, (const llvm::Twine *)v96);
  __int16 v95 = 257;
  uint64_t v19 = AGCLLVMBuilder::tryDeducePointeeType(v17, v18);
  uint64_t v20 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v19, (uint64_t)v17, 0, (uint64_t)v94);
  unsigned int v21 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  __int16 v22 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v14, v21, (const llvm::Twine *)v96);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v22, v23, (const llvm::Twine *)v94);
  uint64_t v25 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v25, (uint64_t)v92);
  __int16 v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Cast, v27, (const llvm::Twine *)v90);
  __int16 v29 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  uint64_t v30 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v29, (const llvm::Twine *)v96);
  __int16 v31 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v32 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v30, v31, (const llvm::Twine *)v94);
  uint64_t v33 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  int v34 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v32, v33, (uint64_t)v92);
  int v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  uint64_t v36 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v35, (const llvm::Twine *)v96);
  int v37 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v38 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v36, v37, (const llvm::Twine *)v94);
  uint64_t v39 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  int v40 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v38, v39, (uint64_t)v92);
  uint64_t v41 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v42 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v40, v41, (const llvm::Twine *)v90);
  int v43 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v42, v34);
  uint64_t v44 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  int v45 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v44, (const llvm::Twine *)v96);
  int v46 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v47 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v45, v46, (const llvm::Twine *)v94);
  uint64_t v48 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  uint64_t v49 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v47, v48, (uint64_t)v92);
  uint64_t v50 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v51 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v49, v50, (const llvm::Twine *)v90);
  uint64_t v52 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v51, v34);
  unsigned int v53 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, v34);
  BOOL v54 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  int v55 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v20, v54, (const llvm::Twine *)v96);
  uint64_t v56 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v57 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v55, v56, (const llvm::Twine *)v94);
  uint64_t v58 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  int v59 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v57, v58, (uint64_t)v92);
  unsigned int v60 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v59, v60, (const llvm::Twine *)v90);
  unsigned int v61 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  int v62 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v61, (const llvm::Twine *)v96);
  __int16 v63 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v64 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v62, v63, (const llvm::Twine *)v94);
  uint64_t v65 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  uint64_t v66 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v64, v65, (uint64_t)v92);
  __int16 v67 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v97 = 257;
  uint64_t v68 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v67, (const llvm::Twine *)v96);
  __int16 v69 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v70 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v68, v69, (const llvm::Twine *)v94);
  uint64_t v71 = *(void *)(a1 + 200);
  __int16 v93 = 257;
  long long v72 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v70, v71, (uint64_t)v92);
  uint64_t v73 = llvm::ConstantInt::get();
  __int16 v97 = 257;
  uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v66, v73, (uint64_t)v96);
  uint64_t v75 = llvm::ConstantInt::get();
  __int16 v95 = 257;
  BOOL v76 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v72, v75, (uint64_t)v94);
  __int16 v93 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), ICmp, v76, (const llvm::Twine *)v92);
  __int16 v97 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 312), v78);
  __int16 v97 = 257;
  unsigned int v80 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), NullValue, v43, v80, (const llvm::Twine *)v96);
  __int16 v97 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v52, v82, (const llvm::Twine *)v96);
  __int16 v97 = 257;
  unint64_t v84 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v85 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v83, v53, v84, (const llvm::Twine *)v96);
  __int16 v97 = 257;
  v86 = (llvm::Value *)llvm::ConstantInt::get();
  BOOL v87 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v85, Select, v86, (const llvm::Twine *)v96);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v87, a4, 0);
}

void AGCLLVMG13TargetLowerer::~AGCLLVMG13TargetLowerer(AGCLLVMG13TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMG14TargetConfig::~AGCLLVMG14TargetConfig(AGCLLVMG14TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

void AGCLLVMG14TargetConfig::createTargetLowerer(AGCLLVMG14TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG14TargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3, int a4, char a5, int a6)
{
  int v6 = *(_DWORD *)(a3 + 8) & 0xFE;
  if (a6)
  {
    uint64_t v7 = a3;
    if (v6 == 18) {
      uint64_t v7 = **(void **)(a3 + 16);
    }
    if (a2 == 1) {
      int v8 = 3;
    }
    else {
      int v8 = a2;
    }
    if (a2 == 12) {
      int v9 = 16;
    }
    else {
      int v9 = v8;
    }
    if (a2 == 13) {
      int v10 = 15;
    }
    else {
      int v10 = v9;
    }
    if (a5) {
      int v10 = a2;
    }
    if (v7 == *(void *)(a1 + 168) && a4 != 0) {
      a2 = v10;
    }
  }
  if (v6 == 18) {
    a3 = **(void **)(a3 + 16);
  }
  BOOL v13 = a2 == 1 && a3 == *(void *)(a1 + 168);
  return v13 | (a2 << 16);
}

void AGCLLVMG14TargetLowerer::createGPUVAMasks(int *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0;
  int v6 = (void *)(a3 + 8);
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = a3 + 8;
  uint64_t v7 = *a1;
  uint64_t v8 = *(unsigned __int16 *)((char *)a1 - v7 + 4);
  uint64_t v9 = *(unsigned int *)((char *)a1 + v8);
  int v10 = (int *)((char *)a1 + v8 + v9);
  uint64_t v11 = *(unsigned __int16 *)((char *)v10 - *v10 + 12);
  uint64_t v12 = (char *)v10 + v11;
  uint64_t v13 = *(unsigned int *)((char *)v10 + v11);
  uint64_t v14 = *(unsigned int *)&v12[v13];
  if (v14)
  {
    uint64_t v15 = 4 * v14;
    if (a2) {
      int v16 = -524484864;
    }
    else {
      int v16 = 65280;
    }
    uint64_t v17 = v8 + v9 + v11 + v13;
    do
    {
      uint64_t v18 = *(unsigned int *)((char *)a1 + v17 + 4);
      uint64_t v19 = (char *)a1 + v17 + v18 - *(int *)((char *)a1 + v17 + v18 + 4);
      if (*((unsigned __int16 *)v19 + 2) >= 7u && (uint64_t v20 = *((unsigned __int16 *)v19 + 5)) != 0) {
        unsigned int v21 = *(int *)((char *)a1 + v17 + v18 + v20 + 4);
      }
      else {
        unsigned int v21 = 0;
      }
      unsigned int v64 = v21;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v21, &v64)+ 8) = v16;
      v17 += 4;
      v15 -= 4;
    }
    while (v15);
    uint64_t v22 = -(uint64_t)*a1;
  }
  else
  {
    uint64_t v22 = -v7;
  }
  long long v23 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 + v22 + 4));
  __int16 v24 = (int *)((char *)v23 + *v23);
  uint64_t v25 = (char *)v24 - *v24;
  __int16 v26 = (unsigned int *)((char *)v24
                       + *((unsigned __int16 *)v25 + 4)
                       + *(unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 4)));
  uint64_t v27 = *v26;
  if (v27)
  {
    unint64_t v28 = 0;
    uint64_t v29 = 4 * v27;
    while (1)
    {
      uint64_t v30 = v26[v28 / 4 + 1];
      uint64_t v31 = v30 - *(int *)((char *)&v26[v28 / 4 + 1] + v30);
      uint64_t v32 = (char *)&v26[v28 / 4] + v31;
      unsigned int v33 = *((unsigned __int16 *)v32 + 2);
      if (v33 < 5) {
        break;
      }
      uint64_t v34 = *((unsigned __int16 *)v32 + 4);
      if (!v34)
      {
        uint64_t v36 = (uint64_t)v26 + v30 + v28 + 4;
        int v37 = (char *)&v26[v28 / 4] + v31;
LABEL_22:
        uint64_t v38 = v37 + 4;
        if (v33 >= 0xB)
        {
          uint64_t v39 = *((unsigned __int16 *)v38 + 5);
          if (v39)
          {
            int v35 = *(_DWORD *)(v36 + v39);
            goto LABEL_26;
          }
        }
        break;
      }
      if (!*((unsigned char *)&v26[v28 / 4 + 1] + v30 + v34))
      {
        uint64_t v36 = (uint64_t)v26 + v30 + v28 + 4;
        int v37 = (char *)&v26[v28 / 4] + v31;
        goto LABEL_22;
      }
      v28 += 4;
      if (v29 == v28) {
        goto LABEL_19;
      }
    }
    int v35 = 0;
  }
  else
  {
LABEL_19:
    int v35 = -1;
  }
LABEL_26:
  int v40 = (unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 12));
  uint64_t v41 = *v40;
  int v43 = (unsigned int *)((char *)v40 + v41 + 4);
  uint64_t v42 = *(unsigned int *)((char *)v40 + v41);
  if (v42)
  {
    uint64_t v44 = &v43[v42];
    do
    {
      int v45 = (int *)((char *)v43 + *v43);
      int v46 = (unsigned __int16 *)((char *)v45 - *v45);
      unsigned int v47 = *v46;
      if (v47 >= 5 && v46[2] && *((unsigned char *)v45 + v46[2]) == 110)
      {
        if (v47 <= 6)
        {
          unsigned int v48 = 0;
          int v49 = 0;
          unsigned int v63 = 0;
        }
        else
        {
          unsigned int v48 = v46[3] ? *(int *)((char *)v45 + v46[3]) : 0;
          unsigned int v63 = v48;
          if (v47 >= 9 && (uint64_t v50 = v46[4]) != 0) {
            int v49 = *(int *)((char *)v45 + v50);
          }
          else {
            int v49 = 0;
          }
        }
        uint64_t v51 = *v6;
        if (*v6)
        {
          uint64_t v52 = v6;
          do
          {
            unsigned int v53 = *(_DWORD *)(v51 + 28);
            BOOL v54 = v53 >= v48;
            if (v53 >= v48) {
              int v55 = (uint64_t *)v51;
            }
            else {
              int v55 = (uint64_t *)(v51 + 8);
            }
            if (v54) {
              uint64_t v52 = (void *)v51;
            }
            uint64_t v51 = *v55;
          }
          while (*v55);
          if (v52 != v6 && v48 >= *((_DWORD *)v52 + 7))
          {
            unsigned int v56 = (v49 + v35) << 7;
            unsigned int v57 = v56 & 0x7F00;
            unsigned int v58 = (v57 & 0xFFFF7FFF | ((((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2)) >> 1)) & 1) << 15)) ^ 0x8000;
            if (a2)
            {
              int v59 = 0;
              unsigned int v60 = v58 | 0xBC0000;
              unsigned int v61 = v60 >> 8;
              int v62 = 43;
              do
              {
                v61 ^= ((int)(v61 >> v59 << 31) >> 31) & v62;
                v62 *= 2;
                ++v59;
              }
              while (v59 != 19);
              unsigned int v58 = v60 & 0x7FFFFFF | ((v61 >> 19) << 27);
            }
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v48, &v63)+ 8) = v58;
          }
        }
      }
      ++v43;
    }
    while (v43 != v44);
  }
}

uint64_t AGCLLVMG14TargetLowerer::maxImageDimLog2(AGCLLVMG14TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG14TargetLowerer::needsShaderDepthClamp(AGCLLVMG14TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14TargetLowerer::supportsMeshShading(AGCLLVMG14TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14TargetLowerer::supportsBarycentricCoords(AGCLLVMG14TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14TargetLowerer::supportsPrimitiveID(AGCLLVMG14TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  uint64_t v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(unsigned char *)(a1 + 1770))
  {
    uint64_t v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    long long v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    __int16 v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    uint64_t v26 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    uint64_t v28 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    uint64_t v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    uint64_t v34 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    int v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    int v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    uint64_t v42 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    uint64_t v44 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    int v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    int v46 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    uint64_t v50 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    uint64_t v52 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    unsigned int v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    __int16 v71 = 257;
    BOOL v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    int v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    uint64_t v57 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    unsigned int v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    int v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    __int16 v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG14TargetLowerer::buildImageBaseLevelExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v23 = *(_OWORD *)a2;
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v22 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v21);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v21);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v20 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v19);
  uint64_t v14 = a1[25];
  __int16 v18 = 257;
  uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v17);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Cast, a4, 0);
}

uint64_t AGCLLVMG14TargetLowerer::buildImageSampleCountExtract(void *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v29 = *(_OWORD *)a2;
  uint64_t v30 = *(void *)(a2 + 16);
  if (v30) {
    llvm::MetadataTracking::track();
  }
  int v31 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v29);
  if (v30) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v27);
  __int16 v26 = 257;
  uint64_t v12 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v11);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v12, (uint64_t)GEP, 0, (uint64_t)v25);
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  uint64_t v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v14, (const llvm::Twine *)v27);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v26 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v15, v16, (const llvm::Twine *)v25);
  uint64_t v18 = a1[25];
  __int16 v24 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v18, (uint64_t)v23);
  __int16 v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v20, Cast, (const llvm::Twine *)v27);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG14TargetLowerer::buildImageMipCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v32 = *(_OWORD *)a2;
  uint64_t v33 = *(void *)(a2 + 16);
  if (v33) {
    llvm::MetadataTracking::track();
  }
  int v34 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v32);
  if (v33) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v31 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v30);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v30);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v28);
  uint64_t v14 = a1[25];
  __int16 v27 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v26);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  uint64_t v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v16, (const llvm::Twine *)v30);
  uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t v19 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v17, v18, (const llvm::Twine *)v28);
  uint64_t v20 = a1[25];
  __int16 v27 = 257;
  unsigned int v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v19, v20, (uint64_t)v26);
  __int16 v31 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 1), Cast, v21, (const llvm::Twine *)v30);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Sub, v23, (const llvm::Twine *)v28);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Add, a4, 0);
}

uint64_t AGCLLVMG14TargetLowerer::buildImageDimensionsExtract(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v94 = *(_OWORD *)a2;
  uint64_t v95 = *(void *)(a2 + 16);
  if (v95) {
    llvm::MetadataTracking::track();
  }
  int v96 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v94);
  if (v95) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = *(llvm::Type **)(a1 + 208);
  __int16 v93 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v7, (uint64_t)a3, 0, (uint64_t)v92);
  uint64_t v9 = *(llvm::Type **)(a1 + 208);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v9, a3, v10, (const llvm::Twine *)v92);
  __int16 v91 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v9, GEP, 0, (uint64_t)v90);
  uint64_t v13 = *(llvm::Type **)(a1 + 208);
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v13, a3, v14, (const llvm::Twine *)v92);
  __int16 v91 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v13, v15, 0, (uint64_t)v90);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v12, v17, (const llvm::Twine *)v92);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v18, v19, (const llvm::Twine *)v90);
  uint64_t v21 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v21, (uint64_t)v88);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Cast, v23, (const llvm::Twine *)v86);
  int v25 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  __int16 v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v25, (const llvm::Twine *)v92);
  __int16 v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v26, v27, (const llvm::Twine *)v90);
  uint64_t v29 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t v30 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v28, v29, (uint64_t)v88);
  __int16 v31 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  long long v32 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v31, (const llvm::Twine *)v92);
  uint64_t v33 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v34 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v32, v33, (const llvm::Twine *)v90);
  uint64_t v35 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v34, v35, (uint64_t)v88);
  int v37 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v36, v37, (const llvm::Twine *)v86);
  uint64_t v39 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v38, v30);
  int v40 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v41 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v40, (const llvm::Twine *)v92);
  uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v43 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v41, v42, (const llvm::Twine *)v90);
  uint64_t v44 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  int v45 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v43, v44, (uint64_t)v88);
  int v46 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v45, v46, (const llvm::Twine *)v86);
  unsigned int v48 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v47, v30);
  uint64_t v49 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, v30);
  uint64_t v50 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v51 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v16, v50, (const llvm::Twine *)v92);
  uint64_t v52 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v53 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v51, v52, (const llvm::Twine *)v90);
  uint64_t v54 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  int v55 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v53, v54, (uint64_t)v88);
  uint64_t v56 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v55, v56, (const llvm::Twine *)v86);
  uint64_t v57 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  unsigned int v58 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v57, (const llvm::Twine *)v92);
  int v59 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v60 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v90);
  uint64_t v61 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  int v62 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v60, v61, (uint64_t)v88);
  __int16 v63 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  unsigned int v64 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v63, (const llvm::Twine *)v92);
  __int16 v65 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v66 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v64, v65, (const llvm::Twine *)v90);
  uint64_t v67 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t v68 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v66, v67, (uint64_t)v88);
  uint64_t v69 = llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v62, v69, (uint64_t)v92);
  uint64_t v71 = llvm::ConstantInt::get();
  __int16 v91 = 257;
  long long v72 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v68, v71, (uint64_t)v90);
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), ICmp, v72, (const llvm::Twine *)v88);
  __int16 v93 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 312), v74);
  __int16 v93 = 257;
  BOOL v76 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), NullValue, v39, v76, (const llvm::Twine *)v92);
  __int16 v93 = 257;
  uint64_t v78 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v79 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v48, v78, (const llvm::Twine *)v92);
  __int16 v93 = 257;
  unsigned int v80 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v79, v49, v80, (const llvm::Twine *)v92);
  __int16 v93 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v83 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v81, Select, v82, (const llvm::Twine *)v92);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v83, a4, 0);
}

void AGCLLVMG14TargetLowerer::~AGCLLVMG14TargetLowerer(AGCLLVMG14TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

uint64_t *AGCLLVMCreateG14TargetConfig(int a1)
{
  {
    int v7 = a1;
    a1 = v7;
    if (v3)
    {
      AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pA0, 65553);
      AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pA0 = (uint64_t)&unk_1F25CEBD0;
      dword_1EA61276C = 64;
      __cxa_atexit((void (*)(void *))AGCLLVMG14TargetConfig::~AGCLLVMG14TargetConfig, &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pA0, &dword_1CAC02000);
      a1 = v7;
    }
  }
  {
    int v8 = a1;
    a1 = v8;
    if (v4)
    {
      AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pB0, 196625);
      AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pB0 = (uint64_t)&unk_1F25CEBD0;
      dword_1EA611F84 = 64;
      __cxa_atexit((void (*)(void *))AGCLLVMG14TargetConfig::~AGCLLVMG14TargetConfig, &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pB0, &dword_1CAC02000);
      a1 = v8;
    }
  }
  {
    int v9 = a1;
    a1 = v9;
    if (v5)
    {
      AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gA0, 65554);
      AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gA0 = (uint64_t)&unk_1F25CEBD0;
      dword_1EA6126EC = 64;
      __cxa_atexit((void (*)(void *))AGCLLVMG14TargetConfig::~AGCLLVMG14TargetConfig, &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gA0, &dword_1CAC02000);
      a1 = v9;
    }
  }
  {
    int v10 = a1;
    a1 = v10;
    if (v6)
    {
      AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig((uint64_t)&AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gB0, 196626);
      AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gB0 = (uint64_t)&unk_1F25CEBD0;
      dword_1EA61272C = 64;
      __cxa_atexit((void (*)(void *))AGCLLVMG14TargetConfig::~AGCLLVMG14TargetConfig, &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gB0, &dword_1CAC02000);
      a1 = v10;
    }
  }
  v1 = &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pA0;
  if (a1 == 196625) {
    v1 = &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pB0;
  }
  if (a1 == 196626) {
    v1 = &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gB0;
  }
  if (a1 == 65554) {
    return &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gA0;
  }
  else {
    return v1;
  }
}

void AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig(AGCLLVMG14XTargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

void AGCLLVMG14XTargetConfig::createTargetLowerer(AGCLLVMG14XTargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG14XTargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3, int a4, char a5, int a6)
{
  int v6 = *(_DWORD *)(a3 + 8) & 0xFE;
  if (a6)
  {
    uint64_t v7 = a3;
    if (v6 == 18) {
      uint64_t v7 = **(void **)(a3 + 16);
    }
    if (a2 == 1) {
      int v8 = 3;
    }
    else {
      int v8 = a2;
    }
    if (a2 == 12) {
      int v9 = 16;
    }
    else {
      int v9 = v8;
    }
    if (a2 == 13) {
      int v10 = 15;
    }
    else {
      int v10 = v9;
    }
    if (a5) {
      int v10 = a2;
    }
    if (v7 == *(void *)(a1 + 168) && a4 != 0) {
      a2 = v10;
    }
  }
  if (v6 == 18) {
    a3 = **(void **)(a3 + 16);
  }
  BOOL v13 = a2 == 1 && a3 == *(void *)(a1 + 168);
  return v13 | (a2 << 16);
}

void AGCLLVMG14XTargetLowerer::createGPUVAMasks(int *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0;
  int v6 = (void *)(a3 + 8);
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = a3 + 8;
  uint64_t v7 = *a1;
  uint64_t v8 = *(unsigned __int16 *)((char *)a1 - v7 + 4);
  uint64_t v9 = *(unsigned int *)((char *)a1 + v8);
  int v10 = (int *)((char *)a1 + v8 + v9);
  uint64_t v11 = *(unsigned __int16 *)((char *)v10 - *v10 + 12);
  uint64_t v12 = (char *)v10 + v11;
  uint64_t v13 = *(unsigned int *)((char *)v10 + v11);
  uint64_t v14 = *(unsigned int *)&v12[v13];
  if (v14)
  {
    uint64_t v15 = 4 * v14;
    if (a2) {
      int v16 = -524484864;
    }
    else {
      int v16 = 65280;
    }
    uint64_t v17 = v8 + v9 + v11 + v13;
    do
    {
      uint64_t v18 = *(unsigned int *)((char *)a1 + v17 + 4);
      uint64_t v19 = (char *)a1 + v17 + v18 - *(int *)((char *)a1 + v17 + v18 + 4);
      if (*((unsigned __int16 *)v19 + 2) >= 7u && (uint64_t v20 = *((unsigned __int16 *)v19 + 5)) != 0) {
        unsigned int v21 = *(int *)((char *)a1 + v17 + v18 + v20 + 4);
      }
      else {
        unsigned int v21 = 0;
      }
      unsigned int v64 = v21;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v21, &v64)+ 8) = v16;
      v17 += 4;
      v15 -= 4;
    }
    while (v15);
    uint64_t v22 = -(uint64_t)*a1;
  }
  else
  {
    uint64_t v22 = -v7;
  }
  long long v23 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 + v22 + 4));
  __int16 v24 = (int *)((char *)v23 + *v23);
  int v25 = (char *)v24 - *v24;
  __int16 v26 = (unsigned int *)((char *)v24
                       + *((unsigned __int16 *)v25 + 4)
                       + *(unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 4)));
  uint64_t v27 = *v26;
  if (v27)
  {
    unint64_t v28 = 0;
    uint64_t v29 = 4 * v27;
    while (1)
    {
      uint64_t v30 = v26[v28 / 4 + 1];
      uint64_t v31 = v30 - *(int *)((char *)&v26[v28 / 4 + 1] + v30);
      long long v32 = (char *)&v26[v28 / 4] + v31;
      unsigned int v33 = *((unsigned __int16 *)v32 + 2);
      if (v33 < 5) {
        break;
      }
      uint64_t v34 = *((unsigned __int16 *)v32 + 4);
      if (!v34)
      {
        uint64_t v36 = (uint64_t)v26 + v30 + v28 + 4;
        int v37 = (char *)&v26[v28 / 4] + v31;
LABEL_22:
        uint64_t v38 = v37 + 4;
        if (v33 >= 0xB)
        {
          uint64_t v39 = *((unsigned __int16 *)v38 + 5);
          if (v39)
          {
            int v35 = *(_DWORD *)(v36 + v39);
            goto LABEL_26;
          }
        }
        break;
      }
      if (!*((unsigned char *)&v26[v28 / 4 + 1] + v30 + v34))
      {
        uint64_t v36 = (uint64_t)v26 + v30 + v28 + 4;
        int v37 = (char *)&v26[v28 / 4] + v31;
        goto LABEL_22;
      }
      v28 += 4;
      if (v29 == v28) {
        goto LABEL_19;
      }
    }
    int v35 = 0;
  }
  else
  {
LABEL_19:
    int v35 = -1;
  }
LABEL_26:
  int v40 = (unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 12));
  uint64_t v41 = *v40;
  uint64_t v43 = (unsigned int *)((char *)v40 + v41 + 4);
  uint64_t v42 = *(unsigned int *)((char *)v40 + v41);
  if (v42)
  {
    uint64_t v44 = &v43[v42];
    do
    {
      int v45 = (int *)((char *)v43 + *v43);
      int v46 = (unsigned __int16 *)((char *)v45 - *v45);
      unsigned int v47 = *v46;
      if (v47 >= 5 && v46[2] && *((unsigned char *)v45 + v46[2]) == 110)
      {
        if (v47 <= 6)
        {
          unsigned int v48 = 0;
          int v49 = 0;
          unsigned int v63 = 0;
        }
        else
        {
          unsigned int v48 = v46[3] ? *(int *)((char *)v45 + v46[3]) : 0;
          unsigned int v63 = v48;
          if (v47 >= 9 && (uint64_t v50 = v46[4]) != 0) {
            int v49 = *(int *)((char *)v45 + v50);
          }
          else {
            int v49 = 0;
          }
        }
        uint64_t v51 = *v6;
        if (*v6)
        {
          uint64_t v52 = v6;
          do
          {
            unsigned int v53 = *(_DWORD *)(v51 + 28);
            BOOL v54 = v53 >= v48;
            if (v53 >= v48) {
              int v55 = (uint64_t *)v51;
            }
            else {
              int v55 = (uint64_t *)(v51 + 8);
            }
            if (v54) {
              uint64_t v52 = (void *)v51;
            }
            uint64_t v51 = *v55;
          }
          while (*v55);
          if (v52 != v6 && v48 >= *((_DWORD *)v52 + 7))
          {
            unsigned int v56 = (v49 + v35) << 7;
            unsigned int v57 = v56 & 0x7F00;
            unsigned int v58 = (v57 & 0xFFFF7FFF | ((((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2)) >> 1)) & 1) << 15)) ^ 0x8000;
            if (a2)
            {
              int v59 = 0;
              unsigned int v60 = v58 | 0xBC0000;
              unsigned int v61 = v60 >> 8;
              int v62 = 43;
              do
              {
                v61 ^= ((int)(v61 >> v59 << 31) >> 31) & v62;
                v62 *= 2;
                ++v59;
              }
              while (v59 != 19);
              unsigned int v58 = v60 & 0x7FFFFFF | ((v61 >> 19) << 27);
            }
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v48, &v63)+ 8) = v58;
          }
        }
      }
      ++v43;
    }
    while (v43 != v44);
  }
}

uint64_t AGCLLVMG14XTargetLowerer::maxImageDimLog2(AGCLLVMG14XTargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG14XTargetLowerer::needsShaderDepthClamp(AGCLLVMG14XTargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14XTargetLowerer::supportsMeshShading(AGCLLVMG14XTargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14XTargetLowerer::supportsBarycentricCoords(AGCLLVMG14XTargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14XTargetLowerer::supportsPrimitiveID(AGCLLVMG14XTargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14XTargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  uint64_t v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  uint64_t result = llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), Shl, a4, 0);
  if (!*(unsigned char *)(a1 + 1770))
  {
    long long v23 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    __int16 v24 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v23, (const llvm::Twine *)v70);
    int v25 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v26 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v24, v25, (const llvm::Twine *)v68);
    uint64_t v27 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    unint64_t v28 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v26, v27, (uint64_t)v66);
    uint64_t v29 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v30 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v28, v29, (uint64_t)v64);
    uint64_t v31 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    long long v32 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v31, (const llvm::Twine *)v70);
    unsigned int v33 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v34 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v32, v33, (const llvm::Twine *)v68);
    uint64_t v35 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v36 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v34, v35, (uint64_t)v66);
    uint64_t v37 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v36, v37, (uint64_t)v64);
    uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    int v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v39, (const llvm::Twine *)v70);
    uint64_t v41 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v42 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v40, v41, (const llvm::Twine *)v68);
    uint64_t v43 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v44 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v42, v43, (uint64_t)v66);
    uint64_t v45 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    int v46 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v44, v45, (uint64_t)v64);
    unsigned int v47 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v48 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v47, (const llvm::Twine *)v70);
    int v49 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v50 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v48, v49, (const llvm::Twine *)v68);
    uint64_t v51 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v52 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v50, v51, (uint64_t)v66);
    uint64_t v53 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    BOOL v54 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v52, v53, (uint64_t)v64);
    __int16 v71 = 257;
    int v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v38, v46, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    unsigned int v56 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v55, v54, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v57 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v30, v56, (const llvm::Twine *)v70);
    uint64_t v58 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    int v59 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v57, v58, (uint64_t)v68);
    unsigned int v60 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v61 = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v59, v60, (const llvm::Twine *)v70);
    return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v61, a4, 0);
  }
  return result;
}

uint64_t AGCLLVMG14XTargetLowerer::buildImageBaseLevelExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v23 = *(_OWORD *)a2;
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v22 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v21);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v21);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v20 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v19);
  uint64_t v14 = a1[25];
  __int16 v18 = 257;
  uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v17);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Cast, a4, 0);
}

uint64_t AGCLLVMG14XTargetLowerer::buildImageSampleCountExtract(void *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v29 = *(_OWORD *)a2;
  uint64_t v30 = *(void *)(a2 + 16);
  if (v30) {
    llvm::MetadataTracking::track();
  }
  int v31 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v29);
  if (v30) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v27);
  __int16 v26 = 257;
  uint64_t v12 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v11);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v12, (uint64_t)GEP, 0, (uint64_t)v25);
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  uint64_t v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v14, (const llvm::Twine *)v27);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v26 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v15, v16, (const llvm::Twine *)v25);
  uint64_t v18 = a1[25];
  __int16 v24 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v18, (uint64_t)v23);
  __int16 v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v20, Cast, (const llvm::Twine *)v27);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG14XTargetLowerer::buildImageMipCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v32 = *(_OWORD *)a2;
  uint64_t v33 = *(void *)(a2 + 16);
  if (v33) {
    llvm::MetadataTracking::track();
  }
  int v34 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v32);
  if (v33) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v31 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v30);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v30);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v28);
  uint64_t v14 = a1[25];
  __int16 v27 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v26);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  uint64_t v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v16, (const llvm::Twine *)v30);
  uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t v19 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v17, v18, (const llvm::Twine *)v28);
  uint64_t v20 = a1[25];
  __int16 v27 = 257;
  unsigned int v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v19, v20, (uint64_t)v26);
  __int16 v31 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 1), Cast, v21, (const llvm::Twine *)v30);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Sub, v23, (const llvm::Twine *)v28);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Add, a4, 0);
}

uint64_t AGCLLVMG14XTargetLowerer::buildImageDimensionsExtract(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v94 = *(_OWORD *)a2;
  uint64_t v95 = *(void *)(a2 + 16);
  if (v95) {
    llvm::MetadataTracking::track();
  }
  int v96 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v94);
  if (v95) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = *(llvm::Type **)(a1 + 208);
  __int16 v93 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v7, (uint64_t)a3, 0, (uint64_t)v92);
  uint64_t v9 = *(llvm::Type **)(a1 + 208);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v9, a3, v10, (const llvm::Twine *)v92);
  __int16 v91 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v9, GEP, 0, (uint64_t)v90);
  uint64_t v13 = *(llvm::Type **)(a1 + 208);
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v13, a3, v14, (const llvm::Twine *)v92);
  __int16 v91 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v13, v15, 0, (uint64_t)v90);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v12, v17, (const llvm::Twine *)v92);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v18, v19, (const llvm::Twine *)v90);
  uint64_t v21 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v21, (uint64_t)v88);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Cast, v23, (const llvm::Twine *)v86);
  int v25 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  __int16 v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v25, (const llvm::Twine *)v92);
  __int16 v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v26, v27, (const llvm::Twine *)v90);
  uint64_t v29 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t v30 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v28, v29, (uint64_t)v88);
  __int16 v31 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  long long v32 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v31, (const llvm::Twine *)v92);
  uint64_t v33 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v34 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v32, v33, (const llvm::Twine *)v90);
  uint64_t v35 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v34, v35, (uint64_t)v88);
  uint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v36, v37, (const llvm::Twine *)v86);
  uint64_t v39 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v38, v30);
  int v40 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v41 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v40, (const llvm::Twine *)v92);
  uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v43 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v41, v42, (const llvm::Twine *)v90);
  uint64_t v44 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v43, v44, (uint64_t)v88);
  int v46 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v45, v46, (const llvm::Twine *)v86);
  unsigned int v48 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v47, v30);
  int v49 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, v30);
  uint64_t v50 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v51 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v16, v50, (const llvm::Twine *)v92);
  uint64_t v52 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v53 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v51, v52, (const llvm::Twine *)v90);
  uint64_t v54 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  int v55 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v53, v54, (uint64_t)v88);
  unsigned int v56 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v55, v56, (const llvm::Twine *)v86);
  uint64_t v57 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v58 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v57, (const llvm::Twine *)v92);
  int v59 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v60 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v90);
  uint64_t v61 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  int v62 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v60, v61, (uint64_t)v88);
  __int16 v63 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  unsigned int v64 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v63, (const llvm::Twine *)v92);
  __int16 v65 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v66 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v64, v65, (const llvm::Twine *)v90);
  uint64_t v67 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t v68 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v66, v67, (uint64_t)v88);
  uint64_t v69 = llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v62, v69, (uint64_t)v92);
  uint64_t v71 = llvm::ConstantInt::get();
  __int16 v91 = 257;
  long long v72 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v68, v71, (uint64_t)v90);
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), ICmp, v72, (const llvm::Twine *)v88);
  __int16 v93 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 312), v74);
  __int16 v93 = 257;
  BOOL v76 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), NullValue, v39, v76, (const llvm::Twine *)v92);
  __int16 v93 = 257;
  uint64_t v78 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v79 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v48, v78, (const llvm::Twine *)v92);
  __int16 v93 = 257;
  unsigned int v80 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v79, v49, v80, (const llvm::Twine *)v92);
  __int16 v93 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v83 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v81, Select, v82, (const llvm::Twine *)v92);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v83, a4, 0);
}

void AGCLLVMG14XTargetLowerer::~AGCLLVMG14XTargetLowerer(AGCLLVMG14XTargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

uint64_t *AGCLLVMCreateG15TargetConfig(int a1)
{
  {
    int v7 = a1;
    a1 = v7;
    if (v3)
    {
      AGCLLVMG15PB0TargetConfig::AGCLLVMG15PB0TargetConfig();
      __cxa_atexit((void (*)(void *))AGCLLVMG15PB0TargetConfig::~AGCLLVMG15PB0TargetConfig, &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15pB0, &dword_1CAC02000);
      a1 = v7;
    }
  }
  {
    int v8 = a1;
    a1 = v8;
    if (v4)
    {
      AGCLLVMG15GA0TargetConfig::AGCLLVMG15GA0TargetConfig();
      __cxa_atexit((void (*)(void *))AGCLLVMG15GA0TargetConfig::~AGCLLVMG15GA0TargetConfig, &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gA0, &dword_1CAC02000);
      a1 = v8;
    }
  }
  {
    int v9 = a1;
    a1 = v9;
    if (v5)
    {
      AGCLLVMG15GB0TargetConfig::AGCLLVMG15GB0TargetConfig();
      __cxa_atexit((void (*)(void *))AGCLLVMG15GB0TargetConfig::~AGCLLVMG15GB0TargetConfig, &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gB0, &dword_1CAC02000);
      a1 = v9;
    }
  }
  {
    int v10 = a1;
    a1 = v10;
    if (v6)
    {
      AGCLLVMG15GC0TargetConfig::AGCLLVMG15GC0TargetConfig();
      __cxa_atexit((void (*)(void *))AGCLLVMG15GC0TargetConfig::~AGCLLVMG15GC0TargetConfig, &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gC0, &dword_1CAC02000);
      a1 = v10;
    }
  }
  v1 = &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15pB0;
  if (a1 == 65560) {
    v1 = &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gA0;
  }
  if (a1 == 196632) {
    v1 = &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gB0;
  }
  if (a1 == 327704) {
    return &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gC0;
  }
  else {
    return v1;
  }
}

void AGCLLVMG15GC0TargetConfig::~AGCLLVMG15GC0TargetConfig(AGCLLVMG15GC0TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMG15GB0TargetConfig::~AGCLLVMG15GB0TargetConfig(AGCLLVMG15GB0TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMG15GA0TargetConfig::~AGCLLVMG15GA0TargetConfig(AGCLLVMG15GA0TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMG15PB0TargetConfig::~AGCLLVMG15PB0TargetConfig(AGCLLVMG15PB0TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMG15TargetLowerer::AGCLLVMG15TargetLowerer(AGCLLVMG15TargetLowerer *this, llvm::LLVMContext *a2, const char **a3)
{
}

void AGCLLVMG15GA0TargetConfig::createTargetLowerer(AGCLLVMG15GA0TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG15GA0TargetLowerer::extractMaxLevel(AGCLLVMG15GA0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG15GA0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  int v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG15GA0TargetLowerer::extractBaseLevel(AGCLLVMG15GA0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG15GA0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  int v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG15GA0TargetLowerer::maxImageDimLog2(AGCLLVMG15GA0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG15GA0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  int v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  uint64_t v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(unsigned char *)(a1 + 1770))
  {
    __int16 v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    long long v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    __int16 v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    uint64_t v26 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    __int16 v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    uint64_t v28 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    __int16 v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    long long v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    uint64_t v34 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    int v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    uint64_t v42 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    uint64_t v44 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    int v46 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    uint64_t v50 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    uint64_t v52 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    __int16 v71 = 257;
    uint64_t v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    int v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    uint64_t v57 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    uint64_t v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    int v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    __int16 v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG15GA0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  if (v26) {
    llvm::MetadataTracking::track();
  }
  int v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  int v8 = (llvm::Type *)a1[26];
  __int16 v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  uint64_t v14 = a1[25];
  __int16 v20 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG15GA0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v96 = *(_OWORD *)a2;
  uint64_t v97 = *(void *)(a2 + 16);
  if (v97) {
    llvm::MetadataTracking::track();
  }
  int v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97) {
    llvm::MetadataTracking::untrack();
  }
  int v7 = (llvm::Type *)a1[26];
  __int16 v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  uint64_t v9 = (llvm::Type *)a1[26];
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  __int16 v13 = (llvm::Type *)a1[26];
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  uint64_t v21 = a1[25];
  __int16 v91 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  long long v25 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  int v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  uint64_t v29 = a1[25];
  __int16 v91 = 257;
  uint64_t v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  uint64_t v31 = llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  __int16 v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  uint64_t v33 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  uint64_t v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  uint64_t v37 = a1[25];
  __int16 v91 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  int v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  uint64_t v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  uint64_t v44 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  uint64_t v46 = a1[25];
  __int16 v91 = 257;
  unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  uint64_t v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  uint64_t v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  uint64_t v52 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  uint64_t v54 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  uint64_t v56 = a1[25];
  __int16 v91 = 257;
  uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  uint64_t v58 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  int v59 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  uint64_t v63 = a1[25];
  __int16 v91 = 257;
  unsigned int v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  __int16 v65 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  __int16 v67 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  uint64_t v69 = a1[25];
  __int16 v91 = 257;
  uint64_t v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  uint64_t v71 = llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  uint64_t v73 = llvm::ConstantInt::get();
  __int16 v93 = 257;
  int v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  __int16 v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  __int16 v95 = 257;
  uint64_t v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  __int16 v95 = 257;
  uint64_t v78 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unsigned int v80 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unint64_t v84 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG15GA0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGCLLVMG15GA0TargetLowerer::~AGCLLVMG15GA0TargetLowerer(AGCLLVMG15GA0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

double AGCLLVMG15GA0TargetConfig::AGCLLVMG15GA0TargetConfig()
{
  qword_1EA614D40 = 0;
  qword_1EA614D20 = 0x1800010018;
  qword_1EA614D28 = (uint64_t)"/metal_rt_precise.metallib";
  double result = 7.29290208e-304;
  qword_1EA614D30 = 0x101010000000000;
  unk_1EA614D38 = 124;
  qword_1EA614D10 = (uint64_t)"agx3-apple-ios";
  unk_1EA614D18 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gA0 = (uint64_t)&unk_1F25D0440;
  return result;
}

void AGCLLVMG15GB0TargetConfig::createTargetLowerer(AGCLLVMG15GB0TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG15GB0TargetLowerer::extractMaxLevel(AGCLLVMG15GB0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG15GB0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  int v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG15GB0TargetLowerer::extractBaseLevel(AGCLLVMG15GB0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG15GB0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  int v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG15GB0TargetLowerer::maxImageDimLog2(AGCLLVMG15GB0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG15GB0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  int v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  __int16 v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(unsigned char *)(a1 + 1770))
  {
    __int16 v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    long long v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    __int16 v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    uint64_t v26 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    uint64_t v28 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    long long v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    uint64_t v34 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    int v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    uint64_t v42 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    uint64_t v44 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    uint64_t v46 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    uint64_t v50 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    uint64_t v52 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    __int16 v71 = 257;
    uint64_t v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    uint64_t v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    uint64_t v57 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    uint64_t v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    int v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    __int16 v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG15GB0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  if (v26) {
    llvm::MetadataTracking::track();
  }
  int v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  int v8 = (llvm::Type *)a1[26];
  __int16 v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  uint64_t v14 = a1[25];
  __int16 v20 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG15GB0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v96 = *(_OWORD *)a2;
  uint64_t v97 = *(void *)(a2 + 16);
  if (v97) {
    llvm::MetadataTracking::track();
  }
  int v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97) {
    llvm::MetadataTracking::untrack();
  }
  int v7 = (llvm::Type *)a1[26];
  __int16 v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  uint64_t v9 = (llvm::Type *)a1[26];
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  __int16 v13 = (llvm::Type *)a1[26];
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  uint64_t v21 = a1[25];
  __int16 v91 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  long long v25 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  int v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  uint64_t v29 = a1[25];
  __int16 v91 = 257;
  uint64_t v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  uint64_t v31 = llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  __int16 v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  uint64_t v33 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  uint64_t v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  uint64_t v37 = a1[25];
  __int16 v91 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  int v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  uint64_t v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  uint64_t v44 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  uint64_t v46 = a1[25];
  __int16 v91 = 257;
  unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  uint64_t v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  uint64_t v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  uint64_t v52 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  uint64_t v54 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  uint64_t v56 = a1[25];
  __int16 v91 = 257;
  uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  uint64_t v58 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  int v59 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  uint64_t v63 = a1[25];
  __int16 v91 = 257;
  unsigned int v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  __int16 v65 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  __int16 v67 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  uint64_t v69 = a1[25];
  __int16 v91 = 257;
  uint64_t v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  uint64_t v71 = llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  uint64_t v73 = llvm::ConstantInt::get();
  __int16 v93 = 257;
  int v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  __int16 v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  __int16 v95 = 257;
  uint64_t v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  __int16 v95 = 257;
  uint64_t v78 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unsigned int v80 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unint64_t v84 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG15GB0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGCLLVMG15GB0TargetLowerer::~AGCLLVMG15GB0TargetLowerer(AGCLLVMG15GB0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

double AGCLLVMG15GB0TargetConfig::AGCLLVMG15GB0TargetConfig()
{
  qword_1EA614D88 = 0;
  qword_1EA614D68 = 0x1800030018;
  qword_1EA614D70 = (uint64_t)"/metal_rt_precise.metallib";
  double result = 7.29290208e-304;
  qword_1EA614D78 = 0x101010000000000;
  unk_1EA614D80 = 124;
  qword_1EA614D58 = (uint64_t)"agx3-apple-ios";
  unk_1EA614D60 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gB0 = (uint64_t)&unk_1F25D0CD8;
  return result;
}

void AGCLLVMG15GC0TargetConfig::createTargetLowerer(AGCLLVMG15GC0TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG15GC0TargetLowerer::extractMaxLevel(AGCLLVMG15GC0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG15GC0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  int v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG15GC0TargetLowerer::extractBaseLevel(AGCLLVMG15GC0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG15GC0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  int v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG15GC0TargetLowerer::maxImageDimLog2(AGCLLVMG15GC0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG15GC0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  int v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  __int16 v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(unsigned char *)(a1 + 1770))
  {
    __int16 v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    long long v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    __int16 v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    uint64_t v26 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    uint64_t v28 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    long long v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    uint64_t v34 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    int v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    uint64_t v42 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    uint64_t v44 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    uint64_t v46 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    uint64_t v50 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    uint64_t v52 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    __int16 v71 = 257;
    uint64_t v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    uint64_t v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    uint64_t v57 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    uint64_t v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    int v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    __int16 v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG15GC0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  if (v26) {
    llvm::MetadataTracking::track();
  }
  int v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  int v8 = (llvm::Type *)a1[26];
  __int16 v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  uint64_t v14 = a1[25];
  __int16 v20 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG15GC0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v96 = *(_OWORD *)a2;
  uint64_t v97 = *(void *)(a2 + 16);
  if (v97) {
    llvm::MetadataTracking::track();
  }
  int v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97) {
    llvm::MetadataTracking::untrack();
  }
  int v7 = (llvm::Type *)a1[26];
  __int16 v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  uint64_t v9 = (llvm::Type *)a1[26];
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  __int16 v13 = (llvm::Type *)a1[26];
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  uint64_t v21 = a1[25];
  __int16 v91 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  long long v25 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  int v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  uint64_t v29 = a1[25];
  __int16 v91 = 257;
  uint64_t v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  uint64_t v31 = llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  __int16 v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  uint64_t v33 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  uint64_t v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  uint64_t v37 = a1[25];
  __int16 v91 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  int v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  uint64_t v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  uint64_t v44 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  uint64_t v46 = a1[25];
  __int16 v91 = 257;
  unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  uint64_t v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  uint64_t v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  uint64_t v52 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  uint64_t v54 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  uint64_t v56 = a1[25];
  __int16 v91 = 257;
  uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  uint64_t v58 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  int v59 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  uint64_t v63 = a1[25];
  __int16 v91 = 257;
  unsigned int v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  __int16 v65 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  __int16 v67 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  uint64_t v69 = a1[25];
  __int16 v91 = 257;
  uint64_t v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  uint64_t v71 = llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  uint64_t v73 = llvm::ConstantInt::get();
  __int16 v93 = 257;
  int v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  __int16 v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  __int16 v95 = 257;
  uint64_t v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  __int16 v95 = 257;
  uint64_t v78 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unsigned int v80 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unint64_t v84 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG15GC0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGCLLVMG15GC0TargetLowerer::~AGCLLVMG15GC0TargetLowerer(AGCLLVMG15GC0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

double AGCLLVMG15GC0TargetConfig::AGCLLVMG15GC0TargetConfig()
{
  qword_1EA614DD0 = 0;
  qword_1EA614DB0 = 0x1800050018;
  qword_1EA614DB8 = (uint64_t)"/metal_rt_precise.metallib";
  double result = 7.29290208e-304;
  qword_1EA614DC0 = 0x101010000000000;
  unk_1EA614DC8 = 124;
  qword_1EA614DA0 = (uint64_t)"agx3-apple-ios";
  unk_1EA614DA8 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gC0 = (uint64_t)&unk_1F25D1570;
  return result;
}

void AGCLLVMG15PB0TargetConfig::createTargetLowerer(AGCLLVMG15PB0TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG15PB0TargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3, int a4, char a5, int a6)
{
  int v6 = *(_DWORD *)(a3 + 8) & 0xFE;
  if (a6)
  {
    uint64_t v7 = a3;
    if (v6 == 18) {
      uint64_t v7 = **(void **)(a3 + 16);
    }
    if (a2 == 1) {
      int v8 = 3;
    }
    else {
      int v8 = a2;
    }
    if (a2 == 12) {
      int v9 = 16;
    }
    else {
      int v9 = v8;
    }
    if (a2 == 13) {
      int v10 = 15;
    }
    else {
      int v10 = v9;
    }
    if (a5) {
      int v10 = a2;
    }
    if (v7 == *(void *)(a1 + 168) && a4 != 0) {
      a2 = v10;
    }
  }
  if (v6 == 18) {
    a3 = **(void **)(a3 + 16);
  }
  BOOL v13 = a2 == 1 && a3 == *(void *)(a1 + 168);
  return v13 | (a2 << 16);
}

void AGCLLVMG15PB0TargetLowerer::createGPUVAMasks(int *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0;
  int v6 = (void *)(a3 + 8);
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = a3 + 8;
  uint64_t v7 = *a1;
  uint64_t v8 = *(unsigned __int16 *)((char *)a1 - v7 + 4);
  uint64_t v9 = *(unsigned int *)((char *)a1 + v8);
  int v10 = (int *)((char *)a1 + v8 + v9);
  uint64_t v11 = *(unsigned __int16 *)((char *)v10 - *v10 + 12);
  uint64_t v12 = (char *)v10 + v11;
  uint64_t v13 = *(unsigned int *)((char *)v10 + v11);
  uint64_t v14 = *(unsigned int *)&v12[v13];
  if (v14)
  {
    uint64_t v15 = 4 * v14;
    if (a2) {
      int v16 = -524484864;
    }
    else {
      int v16 = 65280;
    }
    uint64_t v17 = v8 + v9 + v11 + v13;
    do
    {
      uint64_t v18 = *(unsigned int *)((char *)a1 + v17 + 4);
      uint64_t v19 = (char *)a1 + v17 + v18 - *(int *)((char *)a1 + v17 + v18 + 4);
      if (*((unsigned __int16 *)v19 + 2) >= 7u && (uint64_t v20 = *((unsigned __int16 *)v19 + 5)) != 0) {
        unsigned int v21 = *(int *)((char *)a1 + v17 + v18 + v20 + 4);
      }
      else {
        unsigned int v21 = 0;
      }
      unsigned int v64 = v21;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v21, &v64)+ 8) = v16;
      v17 += 4;
      v15 -= 4;
    }
    while (v15);
    uint64_t v22 = -(uint64_t)*a1;
  }
  else
  {
    uint64_t v22 = -v7;
  }
  long long v23 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 + v22 + 4));
  __int16 v24 = (int *)((char *)v23 + *v23);
  long long v25 = (char *)v24 - *v24;
  uint64_t v26 = (unsigned int *)((char *)v24
                       + *((unsigned __int16 *)v25 + 4)
                       + *(unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 4)));
  uint64_t v27 = *v26;
  if (v27)
  {
    unint64_t v28 = 0;
    uint64_t v29 = 4 * v27;
    while (1)
    {
      uint64_t v30 = v26[v28 / 4 + 1];
      uint64_t v31 = v30 - *(int *)((char *)&v26[v28 / 4 + 1] + v30);
      long long v32 = (char *)&v26[v28 / 4] + v31;
      unsigned int v33 = *((unsigned __int16 *)v32 + 2);
      if (v33 < 5) {
        break;
      }
      uint64_t v34 = *((unsigned __int16 *)v32 + 4);
      if (!v34)
      {
        uint64_t v36 = (uint64_t)v26 + v30 + v28 + 4;
        uint64_t v37 = (char *)&v26[v28 / 4] + v31;
LABEL_22:
        uint64_t v38 = v37 + 4;
        if (v33 >= 0xB)
        {
          uint64_t v39 = *((unsigned __int16 *)v38 + 5);
          if (v39)
          {
            int v35 = *(_DWORD *)(v36 + v39);
            goto LABEL_26;
          }
        }
        break;
      }
      if (!*((unsigned char *)&v26[v28 / 4 + 1] + v30 + v34))
      {
        uint64_t v36 = (uint64_t)v26 + v30 + v28 + 4;
        uint64_t v37 = (char *)&v26[v28 / 4] + v31;
        goto LABEL_22;
      }
      v28 += 4;
      if (v29 == v28) {
        goto LABEL_19;
      }
    }
    int v35 = 0;
  }
  else
  {
LABEL_19:
    int v35 = -1;
  }
LABEL_26:
  int v40 = (unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 12));
  uint64_t v41 = *v40;
  uint64_t v43 = (unsigned int *)((char *)v40 + v41 + 4);
  uint64_t v42 = *(unsigned int *)((char *)v40 + v41);
  if (v42)
  {
    uint64_t v44 = &v43[v42];
    do
    {
      uint64_t v45 = (int *)((char *)v43 + *v43);
      uint64_t v46 = (unsigned __int16 *)((char *)v45 - *v45);
      unsigned int v47 = *v46;
      if (v47 >= 5 && v46[2] && *((unsigned char *)v45 + v46[2]) == 110)
      {
        if (v47 <= 6)
        {
          unsigned int v48 = 0;
          int v49 = 0;
          unsigned int v63 = 0;
        }
        else
        {
          unsigned int v48 = v46[3] ? *(int *)((char *)v45 + v46[3]) : 0;
          unsigned int v63 = v48;
          if (v47 >= 9 && (uint64_t v50 = v46[4]) != 0) {
            int v49 = *(int *)((char *)v45 + v50);
          }
          else {
            int v49 = 0;
          }
        }
        uint64_t v51 = *v6;
        if (*v6)
        {
          uint64_t v52 = v6;
          do
          {
            unsigned int v53 = *(_DWORD *)(v51 + 28);
            BOOL v54 = v53 >= v48;
            if (v53 >= v48) {
              uint64_t v55 = (uint64_t *)v51;
            }
            else {
              uint64_t v55 = (uint64_t *)(v51 + 8);
            }
            if (v54) {
              uint64_t v52 = (void *)v51;
            }
            uint64_t v51 = *v55;
          }
          while (*v55);
          if (v52 != v6 && v48 >= *((_DWORD *)v52 + 7))
          {
            unsigned int v56 = (v49 + v35) << 7;
            unsigned int v57 = v56 & 0x7F00;
            unsigned int v58 = (v57 & 0xFFFF7FFF | ((((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2)) >> 1)) & 1) << 15)) ^ 0x8000;
            if (a2)
            {
              int v59 = 0;
              unsigned int v60 = v58 | 0xBC0000;
              unsigned int v61 = v60 >> 8;
              int v62 = 43;
              do
              {
                v61 ^= ((int)(v61 >> v59 << 31) >> 31) & v62;
                v62 *= 2;
                ++v59;
              }
              while (v59 != 19);
              unsigned int v58 = v60 & 0x7FFFFFF | ((v61 >> 19) << 27);
            }
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v48, &v63)+ 8) = v58;
          }
        }
      }
      ++v43;
    }
    while (v43 != v44);
  }
}

uint64_t AGCLLVMG15PB0TargetLowerer::maxImageDimLog2(AGCLLVMG15PB0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG15PB0TargetLowerer::needsShaderDepthClamp(AGCLLVMG15PB0TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG15PB0TargetLowerer::supportsMeshShading(AGCLLVMG15PB0TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG15PB0TargetLowerer::supportsBarycentricCoords(AGCLLVMG15PB0TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG15PB0TargetLowerer::supportsPrimitiveID(AGCLLVMG15PB0TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG15PB0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  uint64_t v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(unsigned char *)(a1 + 1770))
  {
    uint64_t v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    long long v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    __int16 v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    uint64_t v26 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    uint64_t v28 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    long long v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    uint64_t v34 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    int v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    uint64_t v42 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    uint64_t v44 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    uint64_t v46 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    uint64_t v50 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    uint64_t v52 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    unsigned int v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    __int16 v71 = 257;
    BOOL v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    uint64_t v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    uint64_t v57 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    unsigned int v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    int v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    __int16 v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG15PB0TargetLowerer::buildImageBaseLevelExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v23 = *(_OWORD *)a2;
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v22 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v21);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v21);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v20 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v19);
  uint64_t v14 = a1[25];
  __int16 v18 = 257;
  uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v17);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Cast, a4, 0);
}

uint64_t AGCLLVMG15PB0TargetLowerer::buildImageSampleCountExtract(void *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v29 = *(_OWORD *)a2;
  uint64_t v30 = *(void *)(a2 + 16);
  if (v30) {
    llvm::MetadataTracking::track();
  }
  int v31 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v29);
  if (v30) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v27);
  __int16 v26 = 257;
  uint64_t v12 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v11);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v12, (uint64_t)GEP, 0, (uint64_t)v25);
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  uint64_t v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v14, (const llvm::Twine *)v27);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v26 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v15, v16, (const llvm::Twine *)v25);
  uint64_t v18 = a1[25];
  __int16 v24 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v18, (uint64_t)v23);
  __int16 v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v28 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v20, Cast, (const llvm::Twine *)v27);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG15PB0TargetLowerer::buildImageMipCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v32 = *(_OWORD *)a2;
  uint64_t v33 = *(void *)(a2 + 16);
  if (v33) {
    llvm::MetadataTracking::track();
  }
  int v34 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v32);
  if (v33) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v31 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v30);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v30);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v28);
  uint64_t v14 = a1[25];
  __int16 v27 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v26);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  uint64_t v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v16, (const llvm::Twine *)v30);
  uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t v19 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v17, v18, (const llvm::Twine *)v28);
  uint64_t v20 = a1[25];
  __int16 v27 = 257;
  unsigned int v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v19, v20, (uint64_t)v26);
  __int16 v31 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 1), Cast, v21, (const llvm::Twine *)v30);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v29 = 257;
  uint64_t Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Sub, v23, (const llvm::Twine *)v28);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Add, a4, 0);
}

uint64_t AGCLLVMG15PB0TargetLowerer::buildImageDimensionsExtract(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v94 = *(_OWORD *)a2;
  uint64_t v95 = *(void *)(a2 + 16);
  if (v95) {
    llvm::MetadataTracking::track();
  }
  int v96 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v94);
  if (v95) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = *(llvm::Type **)(a1 + 208);
  __int16 v93 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v7, (uint64_t)a3, 0, (uint64_t)v92);
  uint64_t v9 = *(llvm::Type **)(a1 + 208);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v9, a3, v10, (const llvm::Twine *)v92);
  __int16 v91 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v9, GEP, 0, (uint64_t)v90);
  uint64_t v13 = *(llvm::Type **)(a1 + 208);
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v13, a3, v14, (const llvm::Twine *)v92);
  __int16 v91 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v13, v15, 0, (uint64_t)v90);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v12, v17, (const llvm::Twine *)v92);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v18, v19, (const llvm::Twine *)v90);
  uint64_t v21 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v21, (uint64_t)v88);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Cast, v23, (const llvm::Twine *)v86);
  int v25 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  __int16 v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v25, (const llvm::Twine *)v92);
  __int16 v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v26, v27, (const llvm::Twine *)v90);
  uint64_t v29 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t v30 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v28, v29, (uint64_t)v88);
  __int16 v31 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  long long v32 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v31, (const llvm::Twine *)v92);
  uint64_t v33 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v34 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v32, v33, (const llvm::Twine *)v90);
  uint64_t v35 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v34, v35, (uint64_t)v88);
  uint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v36, v37, (const llvm::Twine *)v86);
  uint64_t v39 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v38, v30);
  int v40 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v41 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v40, (const llvm::Twine *)v92);
  uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v43 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v41, v42, (const llvm::Twine *)v90);
  uint64_t v44 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v43, v44, (uint64_t)v88);
  uint64_t v46 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v45, v46, (const llvm::Twine *)v86);
  unsigned int v48 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v47, v30);
  uint64_t v49 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, v30);
  uint64_t v50 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v51 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v16, v50, (const llvm::Twine *)v92);
  uint64_t v52 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v53 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v51, v52, (const llvm::Twine *)v90);
  uint64_t v54 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t v55 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v53, v54, (uint64_t)v88);
  uint64_t v56 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v55, v56, (const llvm::Twine *)v86);
  uint64_t v57 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  unsigned int v58 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v57, (const llvm::Twine *)v92);
  int v59 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v60 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v90);
  uint64_t v61 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  int v62 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v60, v61, (uint64_t)v88);
  __int16 v63 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  unsigned int v64 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v63, (const llvm::Twine *)v92);
  __int16 v65 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v91 = 257;
  uint64_t v66 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v64, v65, (const llvm::Twine *)v90);
  uint64_t v67 = *(void *)(a1 + 200);
  __int16 v89 = 257;
  uint64_t v68 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v66, v67, (uint64_t)v88);
  uint64_t v69 = llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v62, v69, (uint64_t)v92);
  uint64_t v71 = llvm::ConstantInt::get();
  __int16 v91 = 257;
  long long v72 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v68, v71, (uint64_t)v90);
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), ICmp, v72, (const llvm::Twine *)v88);
  __int16 v93 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 312), v74);
  __int16 v93 = 257;
  BOOL v76 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), NullValue, v39, v76, (const llvm::Twine *)v92);
  __int16 v93 = 257;
  uint64_t v78 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v79 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v48, v78, (const llvm::Twine *)v92);
  __int16 v93 = 257;
  unsigned int v80 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v79, v49, v80, (const llvm::Twine *)v92);
  __int16 v93 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v83 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v81, Select, v82, (const llvm::Twine *)v92);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v83, a4, 0);
}

uint64_t AGCLLVMG15PB0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGCLLVMG15PB0TargetLowerer::~AGCLLVMG15PB0TargetLowerer(AGCLLVMG15PB0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

double AGCLLVMG15PB0TargetConfig::AGCLLVMG15PB0TargetConfig()
{
  qword_1EA614CF8 = 0;
  qword_1EA614CC8 = (uint64_t)"agx2-apple-ios";
  unk_1EA614CD0 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  qword_1EA614CD8 = 0x1600030016;
  qword_1EA614CE0 = (uint64_t)"/metal_rt_precise.metallib";
  double result = 7.29290208e-304;
  qword_1EA614CE8 = 0x101010000010100;
  unk_1EA614CF0 = 0x400000007CLL;
  AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15pB0 = (uint64_t)&unk_1F25D1E08;
  return result;
}

void AGCLLVMG16PB0TargetConfig::~AGCLLVMG16PB0TargetConfig(AGCLLVMG16PB0TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMG16PA0TargetConfig::~AGCLLVMG16PA0TargetConfig(AGCLLVMG16PA0TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMG16GA0TargetConfig::~AGCLLVMG16GA0TargetConfig(AGCLLVMG16GA0TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

void AGCLLVMG16GA0TargetConfig::createTargetLowerer(AGCLLVMG16GA0TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG16GA0TargetLowerer::extractMaxLevel(AGCLLVMG16GA0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG16GA0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG16GA0TargetLowerer::extractBaseLevel(AGCLLVMG16GA0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG16GA0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG16GA0TargetLowerer::maxImageDimLog2(AGCLLVMG16GA0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG16GA0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  uint64_t v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(unsigned char *)(a1 + 1770))
  {
    __int16 v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    long long v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    __int16 v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    uint64_t v26 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    __int16 v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    uint64_t v28 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    __int16 v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    long long v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    uint64_t v34 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    int v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    uint64_t v42 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    uint64_t v44 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    uint64_t v46 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    uint64_t v50 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    uint64_t v52 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    __int16 v71 = 257;
    uint64_t v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    uint64_t v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    uint64_t v57 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    unsigned int v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    int v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    __int16 v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG16GA0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  if (v26) {
    llvm::MetadataTracking::track();
  }
  int v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  uint64_t v14 = a1[25];
  __int16 v20 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG16GA0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v96 = *(_OWORD *)a2;
  uint64_t v97 = *(void *)(a2 + 16);
  if (v97) {
    llvm::MetadataTracking::track();
  }
  int v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = (llvm::Type *)a1[26];
  __int16 v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  uint64_t v9 = (llvm::Type *)a1[26];
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  __int16 v13 = (llvm::Type *)a1[26];
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  uint64_t v21 = a1[25];
  __int16 v91 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  long long v25 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  int v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  uint64_t v29 = a1[25];
  __int16 v91 = 257;
  uint64_t v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  uint64_t v31 = llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  __int16 v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  uint64_t v33 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  uint64_t v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  uint64_t v37 = a1[25];
  __int16 v91 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  int v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  uint64_t v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  uint64_t v44 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  uint64_t v46 = a1[25];
  __int16 v91 = 257;
  unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  uint64_t v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  uint64_t v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  uint64_t v52 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  uint64_t v54 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  uint64_t v56 = a1[25];
  __int16 v91 = 257;
  uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  unsigned int v58 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  int v59 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  uint64_t v63 = a1[25];
  __int16 v91 = 257;
  unsigned int v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  __int16 v65 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  __int16 v67 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  uint64_t v69 = a1[25];
  __int16 v91 = 257;
  uint64_t v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  uint64_t v71 = llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  uint64_t v73 = llvm::ConstantInt::get();
  __int16 v93 = 257;
  int v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  __int16 v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  __int16 v95 = 257;
  uint64_t v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  __int16 v95 = 257;
  uint64_t v78 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unsigned int v80 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unint64_t v84 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG16GA0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGCLLVMG16GA0TargetLowerer::~AGCLLVMG16GA0TargetLowerer(AGCLLVMG16GA0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

double AGCLLVMG16GA0TargetConfig::AGCLLVMG16GA0TargetConfig()
{
  qword_1EA614F18 = 0;
  qword_1EA614EF8 = 0x2000010020;
  qword_1EA614F00 = (uint64_t)"/metal_rt_precise.metallib";
  double result = 7.29290208e-304;
  qword_1EA614F08 = 0x101010000000000;
  unk_1EA614F10 = 124;
  qword_1EA614EE8 = (uint64_t)"agx3-apple-ios";
  unk_1EA614EF0 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g16g_a0 = (uint64_t)&unk_1F25D2E08;
  return result;
}

void AGCLLVMG16GB0TargetConfig::~AGCLLVMG16GB0TargetConfig(AGCLLVMG16GB0TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

void AGCLLVMG16GB0TargetConfig::createTargetLowerer(AGCLLVMG16GB0TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG16GB0TargetLowerer::extractMaxLevel(AGCLLVMG16GB0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG16GB0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG16GB0TargetLowerer::extractBaseLevel(AGCLLVMG16GB0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG16GB0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG16GB0TargetLowerer::maxImageDimLog2(AGCLLVMG16GB0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG16GB0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  __int16 v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(unsigned char *)(a1 + 1770))
  {
    __int16 v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    long long v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    __int16 v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    uint64_t v26 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    uint64_t v28 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    long long v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    uint64_t v34 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    int v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    uint64_t v42 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    uint64_t v44 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    uint64_t v46 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    uint64_t v50 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    uint64_t v52 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    __int16 v71 = 257;
    uint64_t v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    uint64_t v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    uint64_t v57 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    unsigned int v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    int v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    __int16 v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG16GB0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  if (v26) {
    llvm::MetadataTracking::track();
  }
  int v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  uint64_t v14 = a1[25];
  __int16 v20 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG16GB0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v96 = *(_OWORD *)a2;
  uint64_t v97 = *(void *)(a2 + 16);
  if (v97) {
    llvm::MetadataTracking::track();
  }
  int v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = (llvm::Type *)a1[26];
  __int16 v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  uint64_t v9 = (llvm::Type *)a1[26];
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  __int16 v13 = (llvm::Type *)a1[26];
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  uint64_t v21 = a1[25];
  __int16 v91 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  long long v25 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  int v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  uint64_t v29 = a1[25];
  __int16 v91 = 257;
  uint64_t v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  uint64_t v31 = llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  __int16 v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  uint64_t v33 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  uint64_t v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  uint64_t v37 = a1[25];
  __int16 v91 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  int v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  uint64_t v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  uint64_t v44 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  uint64_t v46 = a1[25];
  __int16 v91 = 257;
  unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  uint64_t v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  uint64_t v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  uint64_t v52 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  uint64_t v54 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  uint64_t v56 = a1[25];
  __int16 v91 = 257;
  uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  unsigned int v58 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  int v59 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  uint64_t v63 = a1[25];
  __int16 v91 = 257;
  unsigned int v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  __int16 v65 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  __int16 v67 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  uint64_t v69 = a1[25];
  __int16 v91 = 257;
  uint64_t v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  uint64_t v71 = llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  uint64_t v73 = llvm::ConstantInt::get();
  __int16 v93 = 257;
  int v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  __int16 v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  __int16 v95 = 257;
  uint64_t v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  __int16 v95 = 257;
  uint64_t v78 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unsigned int v80 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unint64_t v84 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG16GB0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGCLLVMG16GB0TargetLowerer::~AGCLLVMG16GB0TargetLowerer(AGCLLVMG16GB0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

double AGCLLVMG16GB0TargetConfig::AGCLLVMG16GB0TargetConfig()
{
  qword_1EA614F60 = 0;
  qword_1EA614F40 = 0x2000030020;
  qword_1EA614F48 = (uint64_t)"/metal_rt_precise.metallib";
  double result = 7.29290208e-304;
  qword_1EA614F50 = 0x101010000000000;
  unk_1EA614F58 = 124;
  qword_1EA614F30 = (uint64_t)"agx3-apple-ios";
  unk_1EA614F38 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g16g_b0 = (uint64_t)&unk_1F25D36A0;
  return result;
}

void AGCLLVMG16PA0TargetConfig::createTargetLowerer(AGCLLVMG16PA0TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG16PA0TargetLowerer::extractMaxLevel(AGCLLVMG16PA0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG16PA0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG16PA0TargetLowerer::extractBaseLevel(AGCLLVMG16PA0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG16PA0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG16PA0TargetLowerer::maxImageDimLog2(AGCLLVMG16PA0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG16PA0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  __int16 v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(unsigned char *)(a1 + 1770))
  {
    __int16 v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    long long v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    __int16 v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    uint64_t v26 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    uint64_t v28 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    long long v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    uint64_t v34 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    int v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    uint64_t v42 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    uint64_t v44 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    uint64_t v46 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    uint64_t v50 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    uint64_t v52 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    __int16 v71 = 257;
    uint64_t v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    uint64_t v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    uint64_t v57 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    unsigned int v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    int v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    __int16 v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG16PA0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  if (v26) {
    llvm::MetadataTracking::track();
  }
  int v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  uint64_t v14 = a1[25];
  __int16 v20 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG16PA0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v96 = *(_OWORD *)a2;
  uint64_t v97 = *(void *)(a2 + 16);
  if (v97) {
    llvm::MetadataTracking::track();
  }
  int v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = (llvm::Type *)a1[26];
  __int16 v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  uint64_t v9 = (llvm::Type *)a1[26];
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  __int16 v13 = (llvm::Type *)a1[26];
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  uint64_t v21 = a1[25];
  __int16 v91 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  long long v25 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  int v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  uint64_t v29 = a1[25];
  __int16 v91 = 257;
  uint64_t v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  uint64_t v31 = llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  __int16 v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  uint64_t v33 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  uint64_t v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  uint64_t v37 = a1[25];
  __int16 v91 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  int v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  uint64_t v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  uint64_t v44 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  uint64_t v46 = a1[25];
  __int16 v91 = 257;
  unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  uint64_t v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  uint64_t v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  uint64_t v52 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  uint64_t v54 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  uint64_t v56 = a1[25];
  __int16 v91 = 257;
  uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  unsigned int v58 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  int v59 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  uint64_t v63 = a1[25];
  __int16 v91 = 257;
  unsigned int v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  __int16 v65 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  __int16 v67 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  uint64_t v69 = a1[25];
  __int16 v91 = 257;
  uint64_t v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  uint64_t v71 = llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  uint64_t v73 = llvm::ConstantInt::get();
  __int16 v93 = 257;
  int v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  __int16 v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  __int16 v95 = 257;
  uint64_t v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  __int16 v95 = 257;
  uint64_t v78 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unsigned int v80 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unint64_t v84 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG16PA0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGCLLVMG16PA0TargetLowerer::~AGCLLVMG16PA0TargetLowerer(AGCLLVMG16PA0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

double AGCLLVMG16PA0TargetConfig::AGCLLVMG16PA0TargetConfig()
{
  qword_1EA6127B0 = 0;
  qword_1EA612790 = 0x1F0001001FLL;
  qword_1EA612798 = (uint64_t)"/metal_rt_precise.metallib";
  double result = 7.29290208e-304;
  qword_1EA6127A0 = 0x101010000000000;
  unk_1EA6127A8 = 124;
  qword_1EA612780 = (uint64_t)"agx3-apple-ios";
  unk_1EA612788 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pA0 = (uint64_t)&unk_1F25D3F38;
  return result;
}

uint64_t AGCLLVMG16PB0TargetLowerer::extractMaxLevel(AGCLLVMG16PB0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG16PB0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG16PB0TargetLowerer::maxImageDimLog2(AGCLLVMG16PB0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG16PB0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  __int16 v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(unsigned char *)(a1 + 1770))
  {
    __int16 v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    long long v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    __int16 v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    uint64_t v26 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    uint64_t v28 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    long long v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    uint64_t v34 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    int v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    uint64_t v42 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    uint64_t v44 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    uint64_t v46 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    uint64_t v50 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    uint64_t v52 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    __int16 v71 = 257;
    uint64_t v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    uint64_t v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    uint64_t v57 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    unsigned int v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    int v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    __int16 v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG16PB0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  if (v26) {
    llvm::MetadataTracking::track();
  }
  int v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  uint64_t v14 = a1[25];
  __int16 v20 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG16PB0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGCLLVMG16PB0TargetConfig::AGCLLVMG16PB0TargetConfig(uint64_t a1, int a2)
{
  AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig(a1, a2);
  *(_DWORD *)(v2 + 52) = 0;
  *(_WORD *)(v2 + 41) = 0;
  *(void *)uint64_t v2 = &unk_1F25D47D0;
  *(void *)(v2 + 8) = "agx3-apple-ios";
}

void AGCLLVMG17PA0TargetConfig::~AGCLLVMG17PA0TargetConfig(AGCLLVMG17PA0TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

void AGCLLVMG17PA0TargetConfig::createTargetLowerer(AGCLLVMG17PA0TargetConfig *this, llvm::LLVMContext *a2)
{
}

uint64_t AGCLLVMG17PA0TargetLowerer::extractMaxLevel(AGCLLVMG17PA0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG17PA0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG17PA0TargetLowerer::extractBaseLevel(AGCLLVMG17PA0TargetLowerer *this, llvm::Value *a2)
{
  int v4 = (AGCLLVMG17PA0TargetLowerer *)((char *)this + 8);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  int v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  uint64_t v7 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v13 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  uint64_t v9 = *((void *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG17PA0TargetLowerer::maxImageDimLog2(AGCLLVMG17PA0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG17PA0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73) {
    llvm::MetadataTracking::track();
  }
  int v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(llvm::Type **)(a1 + 208);
  __int16 v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  uint64_t v14 = *(void *)(a1 + 200);
  __int16 v67 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  uint64_t v16 = llvm::ConstantInt::get();
  __int16 v65 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  uint64_t v18 = *(void *)(a1 + 200);
  __int16 v63 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  __int16 v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(unsigned char *)(a1 + 1770))
  {
    __int16 v22 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    long long v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    __int16 v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    uint64_t v26 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    int v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    uint64_t v28 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    long long v32 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    uint64_t v34 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    uint64_t v36 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    int v40 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    uint64_t v42 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    uint64_t v44 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    uint64_t v46 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v69 = 257;
    uint64_t v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    uint64_t v50 = *(void *)(a1 + 200);
    __int16 v67 = 257;
    uint64_t v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    uint64_t v52 = llvm::ConstantInt::get();
    __int16 v65 = 257;
    uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    __int16 v71 = 257;
    uint64_t v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    __int16 v71 = 257;
    uint64_t v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    __int16 v71 = 259;
    uint64_t v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    uint64_t v57 = *(void *)(a1 + 200);
    __int16 v69 = 257;
    unsigned int v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    int v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v71 = 257;
    uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    __int16 v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG17PA0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  if (v26) {
    llvm::MetadataTracking::track();
  }
  int v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  __int16 v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  uint64_t v14 = a1[25];
  __int16 v20 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG17PA0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v96 = *(_OWORD *)a2;
  uint64_t v97 = *(void *)(a2 + 16);
  if (v97) {
    llvm::MetadataTracking::track();
  }
  int v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = (llvm::Type *)a1[26];
  __int16 v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  uint64_t v9 = (llvm::Type *)a1[26];
  int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  __int16 v13 = (llvm::Type *)a1[26];
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  __int16 v93 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  uint64_t v21 = a1[25];
  __int16 v91 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  long long v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  long long v25 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  int v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  uint64_t v29 = a1[25];
  __int16 v91 = 257;
  uint64_t v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  uint64_t v31 = llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  __int16 v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  uint64_t v33 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  uint64_t v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  uint64_t v37 = a1[25];
  __int16 v91 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  int v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  uint64_t v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  uint64_t v44 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  uint64_t v46 = a1[25];
  __int16 v91 = 257;
  unsigned int v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  uint64_t v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  uint64_t v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  uint64_t v52 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  uint64_t v54 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  uint64_t v56 = a1[25];
  __int16 v91 = 257;
  uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  unsigned int v58 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  int v59 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  uint64_t v63 = a1[25];
  __int16 v91 = 257;
  unsigned int v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  __int16 v65 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  __int16 v67 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v93 = 257;
  uint64_t v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  uint64_t v69 = a1[25];
  __int16 v91 = 257;
  uint64_t v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  uint64_t v71 = llvm::ConstantInt::get();
  __int16 v95 = 257;
  uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  uint64_t v73 = llvm::ConstantInt::get();
  __int16 v93 = 257;
  int v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  __int16 v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  __int16 v95 = 257;
  uint64_t v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  __int16 v95 = 257;
  uint64_t v78 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unsigned int v80 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  uint64_t v82 = (llvm::Value *)llvm::ConstantInt::get();
  unint64_t v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  __int16 v95 = 257;
  unint64_t v84 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG17PA0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGCLLVMG17PA0TargetLowerer::~AGCLLVMG17PA0TargetLowerer(AGCLLVMG17PA0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

double AGCLLVMG17PA0TargetConfig::AGCLLVMG17PA0TargetConfig()
{
  qword_1EA614FA8 = 0;
  qword_1EA614F88 = 0x2200010022;
  qword_1EA614F90 = (uint64_t)"/metal_rt_precise.metallib";
  double result = 7.29290208e-304;
  qword_1EA614F98 = 0x101010000000000;
  unk_1EA614FA0 = 124;
  qword_1EA614F78 = (uint64_t)"agx3-apple-ios";
  unk_1EA614F80 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g17p_a0 = (uint64_t)&unk_1F25D5068;
  return result;
}

llvm::Value *AGCLLVMG5TargetLowerer::applyCoordBias(AGCLLVMG5TargetLowerer *this, llvm::Value *a2, llvm::Value **a3, char a4)
{
  uint64_t v8 = llvm::PointerType::get();
  __int16 v30 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)a2, v8, (uint64_t)v29);
  int v10 = (llvm::Type *)*((void *)this + 21);
  uint64_t v11 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v30 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((AGCLLVMG5TargetLowerer *)((char *)this + 8), v10, Cast, v11, (const llvm::Twine *)v29);
  uint64_t v13 = llvm::PointerType::get();
  __int16 v30 = 257;
  uint64_t v14 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, GEP, v13, (uint64_t)v29);
  __int16 v30 = 257;
  uint64_t v16 = AGCLLVMBuilder::tryDeducePointeeType(v14, v15);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v16, (uint64_t)v14, 0, (uint64_t)v29);
  uint64_t v18 = *(void *)*a3;
  uint64_t v19 = *(unsigned int *)(v18 + 32);
  Insertuint64_t Element = AGCLLVMBuilder::extendVector(this, AlignedLoad, *(_DWORD *)(v18 + 32));
  if (v19 >= 3)
  {
    for (uint64_t i = 2; i != v19; ++i)
    {
      __int16 v22 = (llvm::Value *)llvm::ConstantFP::get();
      __int16 v30 = 257;
      long long v23 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMG5TargetLowerer *)((char *)this + 8), InsertElement, v22, v23, (const llvm::Twine *)v29);
    }
  }
  __int16 v24 = AGCLLVMGen2TargetLowerer::foldFPTruncExt(this, *a3);
  *a3 = v24;
  __int16 v30 = 257;
  double result = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, (uint64_t)v24, (uint64_t)InsertElement, (uint64_t)v29);
  *a3 = result;
  if (a4)
  {
    long long v26 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v27, (AGCLLVMG5TargetLowerer *)((char *)this + 8));
    int v28 = *((_DWORD *)this + 26);
    double result = (llvm::Value *)(*(uint64_t (**)(AGCLLVMG5TargetLowerer *, long long *, void, void))(*(void *)this + 40))(this, &v26, *a3, 0);
    *a3 = result;
    if (v27) {
      return (llvm::Value *)llvm::MetadataTracking::untrack();
    }
  }
  return result;
}

uint64_t AGCLLVMG5TargetLowerer::buildFrontFacing(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  if (*(void *)(a1 + 1568)) {
    strlen(*(const char **)(a1 + 1568));
  }
  v17[0] = v18;
  v17[1] = (void *)0x100000000;
  llvm::SmallVectorImpl<llvm::Type *>::assign((uint64_t)v17, 0);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v7 = v6;
  if (v17[0] != v18) {
    free(v17[0]);
  }
  __int16 v19 = 257;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  uint64_t v9 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCall((uint64_t)v8, **(void **)(*(void *)v7 + 16), v7, 0, 0, (uint64_t)v17);
  __int16 v19 = 257;
  uint64_t v11 = AGCLLVMBuilder::tryDeducePointeeType(a3, v10);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v8, v11, (uint64_t)a3, 0, (uint64_t)v17);
  __int16 v19 = 257;
  return llvm::IRBuilderBase::CreateICmp(v8, 32, v9, AlignedLoad, (uint64_t)v17);
}

uint64_t AGCLLVMGen2TargetLowerer::countInstructions(AGCLLVMGen2TargetLowerer *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  *a4 = 0;
  return 0;
}

void AGCLLVMGen2TargetLowerer::printAsm(AGCLLVMGen2TargetLowerer *this, const unsigned __int8 *a2, unint64_t a3, const AGCLLVMObject *a4)
{
  v46[2] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (const char *)(*(uint64_t (**)(const AGCLLVMObject *))(*(void *)a4 + 56))(a4);
  snprintf(__str, 0x80uLL, "%s shader %u (driver disassembler)", v7, *((_DWORD *)a4 + 818));
  printMessage((char **)&AGCPrinter, "------ Start USC %s -------\n", v8, v9, v10, v11, v12, v13, (char)__str);
  memset(&__p, 0, sizeof(__p));
  if (a3 >= 2)
  {
    uint64_t v20 = 0;
    unsigned int v21 = 0;
    unsigned int v22 = 1;
    int v23 = 1;
    do
    {
      if (v23)
      {
        std::string::basic_string[abi:nn180100]<0>(&v41, "\t[Inst ");
        std::to_string(&v44, v21);
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v24 = &v44;
        }
        else {
          __int16 v24 = (std::string *)v44.__r_.__value_.__r.__words[0];
        }
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v44.__r_.__value_.__l.__size_;
        }
        long long v26 = std::string::append(&v41, (const std::string::value_type *)v24, size);
        std::string::size_type v27 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:nn180100]<0>(v39, ", offset ");
        if ((v40 & 0x80u) == 0) {
          int v28 = v39;
        }
        else {
          int v28 = (void **)v39[0];
        }
        if ((v40 & 0x80u) == 0) {
          std::string::size_type v29 = v40;
        }
        else {
          std::string::size_type v29 = (std::string::size_type)v39[1];
        }
        __int16 v30 = std::string::append(&v45, (const std::string::value_type *)v28, v29);
        std::string::size_type v31 = v30->__r_.__value_.__r.__words[0];
        v46[0] = v30->__r_.__value_.__l.__size_;
        *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
        char v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__r.__words[0] = v31;
        __p.__r_.__value_.__l.__size_ = v46[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v46 + 7);
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v32;
        if ((char)v40 < 0) {
          operator delete(v39[0]);
        }
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v41.__r_.__value_.__l.__data_);
        }
        sprintf((char *)&v44, " 0x%04x", v22 - 1);
        std::string::basic_string[abi:nn180100]<0>(&v41, "]");
        uint64_t v33 = std::string::insert(&v41, 0, (const std::string::value_type *)&v44);
        std::string::size_type v34 = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v35 = &v45;
        }
        else {
          uint64_t v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
        }
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v36 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v36 = v45.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v35, v36);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v41.__r_.__value_.__l.__data_);
        }
        ++v21;
      }
      sprintf((char *)&v45, " 0x%04x", *(unsigned __int16 *)&a2[2 * v20]);
      std::string::append(&__p, (const std::string::value_type *)&v45);
      if ((*(_WORD *)&a2[2 * v20] & 0x100) != 0)
      {
        int v23 = 0;
      }
      else
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          LOBYTE(p_p) = __p.__r_.__value_.__s.__data_[0];
        }
        printMessage((char **)&AGCPrinter, "%s", v14, v15, v16, v17, v18, v19, (char)p_p);
        MEMORY[0x1CB7A04E0](&__p, "");
        int v23 = 1;
      }
      uint64_t v20 = v22;
    }
    while (a3 >> 1 > v22++);
  }
  printMessage((char **)&AGCPrinter, "\n------- End USC %s --------\n", v14, v15, v16, v17, v18, v19, (char)__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t AGCLLVMGen2TargetLowerer::setLoadStoreCacheControl()
{
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  return llvm::Function::addFnAttr();
}

uint64_t AGCLLVMGen2TargetLowerer::bypassL1ForStoresForVertexDataDependencies(AGCLLVMGen2TargetLowerer *this, llvm::Function *a2)
{
  llvm::Function::addFnAttr();
  return llvm::Function::addFnAttr();
}

uint64_t AGCLLVMGen2TargetLowerer::setSlcCachePolicyForImageWrites(AGCLLVMGen2TargetLowerer *this, llvm::Function *a2)
{
  return llvm::Function::addFnAttr();
}

llvm::Value *AGCLLVMG5TargetLowerer::buildSampleFunction(uint64_t *a1, uint64_t a2, void *a3)
{
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  if ((*(_DWORD *)a3 - 6) < 3) {
    return (llvm::Value *)(*(uint64_t (**)(uint64_t *, void *))(*a1 + 1504))(a1, a3);
  }
  if (*(_DWORD *)a3 == 3)
  {
    memcpy(__dst, a3, sizeof(__dst));
    uint64_t v7 = a1[7];
    uint64_t v18 = "end_write_image";
    __int16 v19 = 259;
    llvm::BasicBlock::splitBasicBlock();
    uint64_t v8 = *(void *)(v7 + 40);
    if (v8 == v7 + 40)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v9 = (llvm::Instruction *)(v8 - 24);
      if (v8) {
        uint64_t v10 = v8 - 24;
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(unsigned __int8 *)(v10 + 16) - 29 >= 0xB) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v9;
      }
    }
    llvm::Instruction::eraseFromParent(v11);
    a1[7] = v7;
    a1[8] = v7 + 40;
    uint64_t v12 = (llvm::Type **)a3[10];
    __int16 v19 = 257;
    uint64_t v14 = AGCLLVMBuilder::tryDeducePointeeType(v12, v13);
    llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v14, (uint64_t)v12, 0, (uint64_t)&v18);
    if (__dst[2] <= 1u)
    {
      uint64_t v18 = "SET_TOP_NIBBLE";
      __int16 v19 = 259;
      operator new();
    }
    uint64_t v18 = "I16";
    __int16 v19 = 259;
    operator new();
  }
  return AGCLLVMG5TargetLowerer::buildReadWriteImage((uint64_t)a1, a3, 0, 0, 0);
}

llvm::Value *AGCLLVMG5TargetLowerer::buildReadWriteImage(uint64_t a1, void *__src, int a3, int a4, int a5)
{
  int v5 = a4;
  uint64_t v7 = __src;
  __dst[33] = *(void **)MEMORY[0x1E4F143B8];
  if (*(_DWORD *)__src != 3)
  {
    int v17 = 0;
    goto LABEL_37;
  }
  uint64_t v10 = (llvm::Type **)__src[10];
  LOWORD(__dst[4]) = 257;
  uint64_t v11 = AGCLLVMBuilder::tryDeducePointeeType(v10, (llvm::Value *)__src);
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v11, (uint64_t)v10, 0, (uint64_t)__dst);
  unsigned int v13 = *((_DWORD *)v7 + 2);
  uint64_t v14 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, (llvm::Value *)v7[28], 4);
  uint64_t v15 = *(void *)(a1 + 1888);
  if (v15) {
    size_t v16 = strlen(*(const char **)(a1 + 1888));
  }
  else {
    size_t v16 = 0;
  }
  uint64_t v18 = (uint64_t *)AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v15, v16, *(void *)(a1 + 192), *(void *)(a1 + 168), *(void *)(a1 + 192));
  uint64_t v19 = *(void *)(a1 + 192);
  LOWORD(__dst[4]) = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)AlignedLoad, v19, (uint64_t)__dst);
  unsigned int v20 = v13 - 3;
  if ((*(_DWORD *)(*(void *)v14 + 8) & 0xFE) == 0x12) {
    unsigned int v21 = *(unsigned __int8 *)(**(void **)(*(void *)v14 + 16) + 8);
  }
  else {
    unsigned int v21 = *(_DWORD *)(*(void *)v14 + 8);
  }
  BOOL v22 = v21 >= 7;
  uint64_t v23 = 192;
  if (!v22) {
    uint64_t v23 = 152;
  }
  int v17 = AGCLLVMBuilder::extendFromSmall((llvm::Type **)a1, v14, *(llvm::Type **)(a1 + v23), v20 < 2);
  if (v13 > 1)
  {
    if (a3)
    {
      int v132 = a3;
      Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
      if (a4)
      {
        for (uint64_t i = 0; i != 4; ++i)
        {
          __dst[0] = &__dst[2];
          __dst[1] = (void *)0x300000000;
          __int16 v148 = 257;
          char v32 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v17, v32, (const llvm::Twine *)v147);
          std::string::size_type v34 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, Element, v20 < 2);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__dst, (uint64_t)v34);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__dst, (uint64_t)Cast);
          __int16 v148 = 257;
          uint64_t v35 = llvm::IRBuilderBase::CreateCall(a1 + 8, v18[3], (uint64_t)v18, (uint64_t)__dst[0], LODWORD(__dst[1]), (uint64_t)v147);
          __int16 v148 = 257;
          std::string::size_type v36 = (llvm::Value *)llvm::ConstantInt::get();
          Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v35, v36, (const llvm::Twine *)v147);
          if (__dst[0] != &__dst[2]) {
            free(__dst[0]);
          }
        }
      }
      else
      {
        for (uint64_t j = 0; j != 4; ++j)
        {
          __dst[0] = &__dst[2];
          __dst[1] = (void *)0x300000000;
          __int16 v148 = 257;
          std::string v44 = (llvm::Value *)llvm::ConstantInt::get();
          std::string v45 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v17, v44, (const llvm::Twine *)v147);
          uint64_t v46 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, v45, v20 < 2);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__dst, (uint64_t)v46);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__dst, (uint64_t)Cast);
          __int16 v148 = 257;
          unsigned int v47 = llvm::IRBuilderBase::CreateCall(a1 + 8, v18[3], (uint64_t)v18, (uint64_t)__dst[0], LODWORD(__dst[1]), (uint64_t)v147);
          __int16 v148 = 257;
          unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
          Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v47, v48, (const llvm::Twine *)v147);
          if (__dst[0] != &__dst[2]) {
            free(__dst[0]);
          }
        }
      }
LABEL_35:
      uint64_t v49 = *(void *)(a1 + 280);
      LOWORD(__dst[4]) = 257;
      int v17 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)InsertElement, v49, (uint64_t)__dst);
      a3 = v132;
      goto LABEL_36;
    }
    int v17 = (llvm::Value *)AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)a1, v17, *(llvm::Type **)(a1 + 168));
LABEL_36:
    int v5 = a4;
    goto LABEL_37;
  }
  if (v13 != 1) {
    goto LABEL_36;
  }
  int v5 = a4;
  if (!a3 || !a4)
  {
    if (!a3)
    {
      if (a4)
      {
        int v56 = a3;
        uint64_t v57 = AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)a1, v17, *(llvm::Type **)(a1 + 200));
        llvm::ConstantInt::get();
        Splat = (llvm::Value *)llvm::ConstantDataVector::getSplat();
        LOWORD(__dst[4]) = 257;
        int v59 = (llvm::Value *)v57;
        a3 = v56;
        uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v59, Splat, (const llvm::Twine *)__dst);
        uint64_t v61 = (llvm::Value *)AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)a1, Add, *(llvm::Type **)(a1 + 168));
        uint64_t v62 = *(llvm::Type **)(a1 + 152);
        uint64_t v63 = (llvm::Type **)a1;
      }
      else
      {
        uint64_t v62 = *(llvm::Type **)(a1 + 152);
        uint64_t v63 = (llvm::Type **)a1;
        uint64_t v61 = v17;
      }
      int v17 = AGCLLVMBuilder::truncateToSmall(v63, v61, v62);
      goto LABEL_37;
    }
    int v132 = a3;
    Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
    for (uint64_t k = 0; k != 4; ++k)
    {
      __dst[0] = &__dst[2];
      __dst[1] = (void *)0x300000000;
      __int16 v148 = 257;
      uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v17, v38, (const llvm::Twine *)v147);
      unsigned __int8 v40 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, v39, 1);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__dst, (uint64_t)v40);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__dst, (uint64_t)Cast);
      __int16 v148 = 257;
      std::string v41 = llvm::IRBuilderBase::CreateCall(a1 + 8, v18[3], (uint64_t)v18, (uint64_t)__dst[0], LODWORD(__dst[1]), (uint64_t)v147);
      __int16 v148 = 257;
      uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v41, v42, (const llvm::Twine *)v147);
      if (__dst[0] != &__dst[2]) {
        free(__dst[0]);
      }
    }
    goto LABEL_35;
  }
  v133 = v7;
  __int16 v24 = (llvm::Value *)AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)a1, v17, *(llvm::Type **)(a1 + 200));
  uint64_t v25 = AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)a1, v24, *(llvm::Type **)(a1 + 168));
  uint64_t v150 = a1;
  uint64_t v151 = v25;
  uint64_t v149 = a1;
  __dst[0] = (void *)a1;
  LODWORD(__dst[1]) = a5;
  __dst[2] = v18;
  __dst[3] = &v151;
  __dst[4] = &v150;
  __dst[5] = &v149;
  v136 = (llvm::Value *)AGCLLVMG5TargetLowerer::convertWriteValue(ComponentType,llvm::Value *,llvm::Value *,BOOL,BOOL,AGCLLVMG5TargetLowerer::XR10Format)::$_2::operator()((uint64_t)__dst);
  long long v26 = (llvm::Value *)AGCLLVMG5TargetLowerer::convertWriteValue(ComponentType,llvm::Value *,llvm::Value *,BOOL,BOOL,AGCLLVMG5TargetLowerer::XR10Format)::$_2::operator()((uint64_t)__dst);
  std::string::size_type v27 = (llvm::Value *)AGCLLVMG5TargetLowerer::convertWriteValue(ComponentType,llvm::Value *,llvm::Value *,BOOL,BOOL,AGCLLVMG5TargetLowerer::XR10Format)::$_2::operator()((uint64_t)__dst);
  uint64_t v28 = llvm::ConstantInt::get();
  if ((a5 - 3) >= 2)
  {
    std::string::size_type v29 = (llvm::Value *)v28;
    if (!a5)
    {
      std::string::size_type v29 = (llvm::Value *)AGCLLVMG5TargetLowerer::convertWriteValue(ComponentType,llvm::Value *,llvm::Value *,BOOL,BOOL,AGCLLVMG5TargetLowerer::XR10Format)::$_2::operator()((uint64_t)__dst);
      goto LABEL_55;
    }
  }
  else
  {
    std::string::size_type v29 = (llvm::Value *)AGCLLVMG5TargetLowerer::convertWriteValue(ComponentType,llvm::Value *,llvm::Value *,BOOL,BOOL,AGCLLVMG5TargetLowerer::XR10Format)::$_2::operator()((uint64_t)__dst);
  }
  if ((a5 - 1) < 2)
  {
    __int16 v148 = 257;
    uint64_t v79 = (llvm::Value *)llvm::ConstantInt::get();
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v29, v79, (const llvm::Twine *)v147);
    __int16 v146 = 257;
    uint64_t v81 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v82 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v136, v81, (const llvm::Twine *)v145);
    __int16 v144 = 257;
    unint64_t v83 = (llvm::Value *)llvm::ConstantInt::get();
    unint64_t v84 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v26, v83, (const llvm::Twine *)v143);
    __int16 v142 = 257;
    uint64_t v85 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v84, v27, (const llvm::Twine *)v141);
    __int16 v140 = 257;
    v86 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v82, v85, (const llvm::Twine *)v139);
    __int16 v138 = 257;
    uint64_t v87 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v86, (const llvm::Twine *)v137);
    uint64_t ICmp = 0;
    goto LABEL_56;
  }
  if ((a5 - 3) < 2)
  {
    __int16 v148 = 257;
    unsigned int v64 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v65 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v26, v64, (const llvm::Twine *)v147);
    __int16 v146 = 257;
    uint64_t v66 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v67 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v27, v66, (const llvm::Twine *)v145);
    __int16 v144 = 257;
    uint64_t v68 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v65, v67, (const llvm::Twine *)v143);
    uint64_t v69 = *(void *)(a1 + 216);
    __int16 v142 = 257;
    uint64_t v70 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v68, v69, (uint64_t)v141);
    __int16 v148 = 257;
    uint64_t v71 = (llvm::Value *)llvm::ConstantInt::get();
    long long v72 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v29, v71, (const llvm::Twine *)v147);
    __int16 v146 = 257;
    uint64_t v73 = (llvm::Value *)llvm::ConstantInt::get();
    int v74 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v136, v73, (const llvm::Twine *)v145);
    __int16 v144 = 257;
    uint64_t v75 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v72, v74, (const llvm::Twine *)v143);
    uint64_t v76 = *(void *)(a1 + 216);
    __int16 v142 = 257;
    int v5 = a4;
    v77 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v75, v76, (uint64_t)v141);
    uint64_t Select = AGCLLVMBuilder::concatenateVectors((AGCLLVMBuilder *)a1, v70, v77);
LABEL_58:
    int v17 = (llvm::Value *)Select;
    goto LABEL_59;
  }
  if (a5)
  {
    int v17 = 0;
    goto LABEL_59;
  }
LABEL_55:
  __int16 v148 = 257;
  __int16 v89 = (llvm::Value *)llvm::ConstantInt::get();
  v131 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v29, v89, (const llvm::Twine *)v147);
  __int16 v146 = 257;
  BOOL v90 = v27;
  __int16 v91 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v92 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v27, v91, (const llvm::Twine *)v145);
  __int16 v144 = 257;
  __int16 v93 = (llvm::Value *)llvm::ConstantInt::get();
  long long v94 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v26, v93, (const llvm::Twine *)v143);
  __int16 v142 = 257;
  __int16 v95 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v94, v136, (const llvm::Twine *)v141);
  __int16 v140 = 257;
  long long v96 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v92, v95, (const llvm::Twine *)v139);
  __int16 v138 = 257;
  uint64_t v87 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v131, v96, (const llvm::Twine *)v137);
  __int16 v148 = 257;
  uint64_t v97 = (llvm::Value *)llvm::ConstantInt::get();
  int v98 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v29, v97, (const llvm::Twine *)v147);
  __int16 v146 = 257;
  uint64_t v99 = (llvm::Value *)llvm::ConstantInt::get();
  int v100 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v136, v99, (const llvm::Twine *)v145);
  __int16 v144 = 257;
  uint64_t v101 = (llvm::Value *)llvm::ConstantInt::get();
  v102 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v26, v101, (const llvm::Twine *)v143);
  __int16 v142 = 257;
  v103 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v102, v90, (const llvm::Twine *)v141);
  __int16 v140 = 257;
  uint64_t v104 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v100, v103, (const llvm::Twine *)v139);
  __int16 v138 = 257;
  uint64_t v105 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v98, v104, (const llvm::Twine *)v137);
  v106 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v148 = 257;
  uint64_t v107 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v106, (const llvm::Twine *)v147);
  uint64_t v108 = llvm::ConstantInt::get();
  __int16 v146 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 33, v107, v108, (uint64_t)v145);
  uint64_t v109 = *(void *)(a1 + 216);
  __int16 v148 = 257;
  v110 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v105, v109, (uint64_t)v147);
  NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 280), v111);
  __int16 v148 = 257;
  v113 = (llvm::Value *)llvm::ConstantInt::get();
  v114 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v110, v113, (const llvm::Twine *)v147);
  __int16 v146 = 257;
  v115 = (llvm::Value *)llvm::ConstantInt::get();
  v116 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), NullValue, v114, v115, (const llvm::Twine *)v145);
  __int16 v148 = 257;
  v117 = (llvm::Value *)llvm::ConstantInt::get();
  v118 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v110, v117, (const llvm::Twine *)v147);
  __int16 v146 = 257;
  v119 = (llvm::Value *)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v116, v118, v119, (const llvm::Twine *)v145);
LABEL_56:
  uint64_t v120 = *(void *)(a1 + 216);
  __int16 v148 = 257;
  v121 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v87, v120, (uint64_t)v147);
  v123 = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 280), v122);
  __int16 v148 = 257;
  v124 = (llvm::Value *)llvm::ConstantInt::get();
  v125 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v121, v124, (const llvm::Twine *)v147);
  __int16 v146 = 257;
  v126 = (llvm::Value *)llvm::ConstantInt::get();
  v127 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v123, v125, v126, (const llvm::Twine *)v145);
  __int16 v148 = 257;
  v128 = (llvm::Value *)llvm::ConstantInt::get();
  v129 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v121, v128, (const llvm::Twine *)v147);
  __int16 v146 = 257;
  v130 = (llvm::Value *)llvm::ConstantInt::get();
  int v17 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v127, v129, v130, (const llvm::Twine *)v145);
  if (ICmp)
  {
    __int16 v148 = 257;
    uint64_t Select = llvm::IRBuilderBase::CreateSelect();
    goto LABEL_58;
  }
LABEL_59:
  uint64_t v7 = v133;
LABEL_37:
  unsigned int v50 = *((_DWORD *)v7 + 2);
  if (v50 > 1)
  {
    memcpy(__dst, v7, 0x108uLL);
    if ((v50 & 0xFFFFFFFB) == 3) {
      int v53 = v5;
    }
    else {
      int v53 = 1;
    }
    LODWORD(__dst[1]) = v53 | a3;
    uint64_t v52 = (int *)__dst;
    uint64_t v51 = a1;
  }
  else
  {
    uint64_t v51 = a1;
    uint64_t v52 = (int *)v7;
  }
  uint64_t SamplerFunction = AGCLLVMGen2TargetLowerer::getSamplerFunction(v51, v52);
  return AGCLLVMGen2TargetLowerer::buildReadWriteImage(a1, (int *)v7, (uint64_t)v17, SamplerFunction);
}

uint64_t AGCLLVMG5TargetLowerer::convertWriteValue(ComponentType,llvm::Value *,llvm::Value *,BOOL,BOOL,AGCLLVMG5TargetLowerer::XR10Format)::$_2::operator()(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)a1;
  int v3 = **(llvm::Value ***)(a1 + 24);
  __int16 v25 = 257;
  int v4 = (llvm::IRBuilderBase *)(v2 + 1);
  int v5 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v2 + 1), v3, v5, (const llvm::Twine *)v24);
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
    case 3:
      uint64_t v7 = **(void **)(a1 + 40);
      uint64_t v8 = llvm::ConstantFP::get();
      __int16 v25 = 257;
      uint64_t FMul = llvm::IRBuilderBase::CreateFMul(v7 + 8, Element, v8, (uint64_t)v24);
      uint64_t v10 = llvm::ConstantFP::get();
      __int16 v27 = 257;
      Fuint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd(v7 + 8, FMul, v10, (uint64_t)v26);
      goto LABEL_6;
    case 2:
    case 4:
      long long v21 = *(_OWORD *)(v2 + 7);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v22, (llvm::IRBuilderBase *)(v2 + 1));
      int v23 = *((_DWORD *)v2 + 26);
      uint64_t v12 = (llvm::Value *)(*(uint64_t (**)(uint64_t *, long long *, uint64_t, uint64_t, uint64_t))(*v2 + 144))(v2, &v21, Element, 1, v2[25]);
      if (v22) {
        llvm::MetadataTracking::untrack();
      }
      break;
    default:
      uint64_t v13 = **(void **)(a1 + 32) + 8;
      uint64_t v14 = llvm::ConstantFP::get();
      __int16 v25 = 257;
      Fuint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateFMul(v13, Element, v14, (uint64_t)v24);
LABEL_6:
      v26[0] = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)v2, FAdd, 1);
      v26[1] = llvm::ConstantInt::get();
      uint64_t v15 = *(void *)(a1 + 16);
      __int16 v25 = 257;
      uint64_t v12 = llvm::IRBuilderBase::CreateCall((uint64_t)(v2 + 1), *(void *)(v15 + 24), v15, (uint64_t)v26, 2, (uint64_t)v24);
      break;
  }
  size_t v16 = (llvm::CmpInst **)AGCLLVMBuilder::extendFromSmall((llvm::Type **)v2, v12, *(llvm::Type **)v12, 1);
  uint64_t v17 = llvm::ConstantInt::get();
  __int16 v25 = 257;
  llvm::IRBuilderBase::CreateICmp(v2 + 1, 34, v16, v17, (uint64_t)v24);
  llvm::ConstantInt::get();
  __int16 v27 = 257;
  uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  __int16 v25 = 257;
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateAnd(v4, Select, v19, (const llvm::Twine *)v24);
}

uint64_t AGCLLVMGen2TargetLowerer::isPartitionLockingHandlingRequired(AGCLLVMGen2TargetLowerer *this)
{
  return 1;
}

void AGCLLVMG5TargetLowerer::~AGCLLVMG5TargetLowerer(AGCLLVMG5TargetLowerer *this)
{
  AGCLLVMTargetLowerer::~AGCLLVMTargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

llvm::Value *AGCLLVMG5TargetLowerer::coerceSampleType(void *a1, llvm::Value *a2, int a3)
{
  if ((a3 == 8 || a3 == 4)
    && (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12
    && !*(unsigned char *)(**(void **)(*(void *)a2 + 16) + 8))
  {
    uint64_t v4 = a1[38];
    __int16 v6 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, (uint64_t)a2, v4, (uint64_t)v5);
  }
  else
  {
    return AGCLLVMBuilder::coerceSampleType(a1, a2, a3);
  }
}

void AGCLLVMG5TargetConfig::~AGCLLVMG5TargetConfig(AGCLLVMG5TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

void AGCLLVMG5TargetConfig::createTargetLowerer(AGCLLVMG5TargetConfig *this, llvm::LLVMContext *a2)
{
}

void AGCLLVMG9TargetConfig::~AGCLLVMG9TargetConfig(AGCLLVMG9TargetConfig *this)
{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CB7A0780);
}

{
  *(void *)this = &unk_1F25CCAB0;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

void AGCLLVMG9TargetConfig::createTargetLowerer(AGCLLVMG9TargetConfig *this, llvm::LLVMContext *a2)
{
}

llvm::Value *AGCLLVMG9TargetLowerer::applyCoordBias(AGCLLVMG9TargetLowerer *this, llvm::Value *a2, llvm::Value **a3, char a4)
{
  uint64_t v8 = llvm::PointerType::get();
  __int16 v30 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)a2, v8, (uint64_t)v29);
  uint64_t v10 = (llvm::Type *)*((void *)this + 21);
  uint64_t v11 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v30 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((AGCLLVMG9TargetLowerer *)((char *)this + 8), v10, Cast, v11, (const llvm::Twine *)v29);
  uint64_t v13 = llvm::PointerType::get();
  __int16 v30 = 257;
  uint64_t v14 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, GEP, v13, (uint64_t)v29);
  __int16 v30 = 257;
  size_t v16 = AGCLLVMBuilder::tryDeducePointeeType(v14, v15);
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v16, (uint64_t)v14, 0, (uint64_t)v29);
  uint64_t v18 = *(void *)*a3;
  uint64_t v19 = *(unsigned int *)(v18 + 32);
  Insertuint64_t Element = AGCLLVMBuilder::extendVector(this, AlignedLoad, *(_DWORD *)(v18 + 32));
  if (v19 >= 3)
  {
    for (uint64_t i = 2; i != v19; ++i)
    {
      uint64_t v22 = (llvm::Value *)llvm::ConstantFP::get();
      __int16 v30 = 257;
      int v23 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMG9TargetLowerer *)((char *)this + 8), InsertElement, v22, v23, (const llvm::Twine *)v29);
    }
  }
  __int16 v24 = AGCLLVMGen2TargetLowerer::foldFPTruncExt(this, *a3);
  *a3 = v24;
  __int16 v30 = 257;
  double result = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, (uint64_t)v24, (uint64_t)InsertElement, (uint64_t)v29);
  *a3 = result;
  if (a4)
  {
    long long v26 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v27, (AGCLLVMG9TargetLowerer *)((char *)this + 8));
    int v28 = *((_DWORD *)this + 26);
    double result = (llvm::Value *)(*(uint64_t (**)(AGCLLVMG9TargetLowerer *, long long *, void, void))(*(void *)this + 40))(this, &v26, *a3, 0);
    *a3 = result;
    if (v27) {
      return (llvm::Value *)llvm::MetadataTracking::untrack();
    }
  }
  return result;
}

llvm::Value *AGCLLVMG9TargetLowerer::buildSampleFunction(AGCLLVMBuilder *a1, uint64_t a2, uint64_t a3)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  if ((*(_DWORD *)a3 - 6) <= 2) {
    return (llvm::Value *)(*(uint64_t (**)(AGCLLVMBuilder *, uint64_t))(*(void *)a1 + 1504))(a1, a3);
  }
  if (*(_DWORD *)a3 == 3) {
    uint64_t v7 = AGCLLVMGen2TargetLowerer::convertWriteValue(a1, *(_DWORD *)(a3 + 8), *(llvm::Value **)(a3 + 224));
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t SamplerFunction = AGCLLVMGen2TargetLowerer::getSamplerFunction((uint64_t)a1, (int *)a3);
  return AGCLLVMGen2TargetLowerer::buildReadWriteImage((uint64_t)a1, (int *)a3, (uint64_t)v7, SamplerFunction);
}

void AGCLLVMG9TargetLowerer::~AGCLLVMG9TargetLowerer(AGCLLVMG9TargetLowerer *this)
{
  AGCLLVMTargetLowerer::~AGCLLVMTargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

llvm::Value *AGCLLVMG9TargetLowerer::coerceSampleType(void *a1, llvm::Value *a2, int a3)
{
  if ((a3 == 8 || a3 == 4)
    && (*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12
    && !*(unsigned char *)(**(void **)(*(void *)a2 + 16) + 8))
  {
    uint64_t v4 = a1[38];
    __int16 v6 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, (uint64_t)a2, v4, (uint64_t)v5);
  }
  else
  {
    return AGCLLVMBuilder::coerceSampleType(a1, a2, a3);
  }
}

uint64_t *AGCLLVMCreateG9TargetConfig(int a1)
{
  {
    int v4 = a1;
    a1 = v4;
    if (v2)
    {
      qword_1EBD0E0B8 = 0;
      qword_1EBD0E0D0 = 0;
      qword_1EBD0E0A0 = (uint64_t)"agx1-apple-ios";
      unk_1EBD0E0A8 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
      qword_1EBD0E0B0 = 0x600010006;
      qword_1EBD0E0C0 = 0x10000010100;
      unk_1EBD0E0C8 = 60;
      AGCLLVMCreateG9TargetConfig(AGCTargetArch)::g9pA0 = (uint64_t)&unk_1F25D6000;
      __cxa_atexit((void (*)(void *))AGCLLVMG9TargetConfig::~AGCLLVMG9TargetConfig, &AGCLLVMCreateG9TargetConfig(AGCTargetArch)::g9pA0, &dword_1CAC02000);
      a1 = v4;
    }
  }
  {
    int v5 = a1;
    a1 = v5;
    if (v3)
    {
      qword_1EBD0E078 = 0;
      qword_1EBD0E090 = 0;
      qword_1EBD0E060 = (uint64_t)"agx1-apple-ios";
      unk_1EBD0E068 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
      qword_1EBD0E070 = 0x700010007;
      qword_1EBD0E080 = 0x10000010100;
      unk_1EBD0E088 = 60;
      AGCLLVMCreateG9TargetConfig(AGCTargetArch)::g9gA0 = (uint64_t)&unk_1F25D6000;
      __cxa_atexit((void (*)(void *))AGCLLVMG9TargetConfig::~AGCLLVMG9TargetConfig, &AGCLLVMCreateG9TargetConfig(AGCTargetArch)::g9gA0, &dword_1CAC02000);
      a1 = v5;
    }
  }
  if (a1 == 65543) {
    return &AGCLLVMCreateG9TargetConfig(AGCTargetArch)::g9gA0;
  }
  else {
    return &AGCLLVMCreateG9TargetConfig(AGCTargetArch)::g9pA0;
  }
}

void AGCLLVMGen2TargetConfig::createMetalPostTessellationShader()
{
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getCount()
{
  return 12;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getStageSpecificBindpoint1()
{
  return 11;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getStageSpecificBindpoint0()
{
  return 10;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getRayDriverDataStartIndex()
{
  return 13;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getRayStridesIndex()
{
  return 12;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getRayUserDataBoundsIndex()
{
  return 11;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getIFTHeapAddressIndex()
{
  return 10;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getAccelerationStructureHeapIndex()
{
  return 8;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getGlobalBindingTableIndex()
{
  return 9;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getVisibleFunctionTableHeapIndex()
{
  return 7;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getIntersectionFunctionTableHeapIndex()
{
  return 6;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getPerEncoderIndirectionTableIndex()
{
  return 5;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getSamplerHeapIndex()
{
  return 4;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getTextureHeapLengthIndex()
{
  return 3;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getTextureHeapWriteIndex()
{
  return 2;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getTextureHeapReadIndex()
{
  return 1;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getGOTIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getPerEncoderIndirectionTableSize()
{
  return 11;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getPerEncoderIndirectionTablePrivateDataIndex()
{
  return 10;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getPerEncoderIndirectionTableFragmentBuiltinEncoderStateIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getPerEncoderIndirectionTablePipelineStateHeapBufferIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getPerEncoderIndirectionTableICBHeapBufferIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getGeometryPipelineEmulationMailboxLookupBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getGeometryPipelineEmulationPerDispatchInfoIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getGeometryPipelineEmulationPerKickInfoIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getObjectIndirectBufferWgSizeIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getObjectIndirectBufferWgCountIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataCount()
{
  return 8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataGotIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataGlobalBindingsTableIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataDoneRayTracingFlagIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataShaderStrideIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataInstanceLevelsIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataShaderUserSizeIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickDoraStateBufferIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickLeafPointersInfoIndex()
{
  return 5;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickGin1122SWWABvhIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickDriverDataStartIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickPayloadStridesIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickUserBoundsIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickIftHeapIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerEncoderIndirectionTableIndex()
{
  return 13;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsDoraStateBufferIndex()
{
  return 12;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsDriverDataStartIndex()
{
  return 10;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsUserDataBoundsIndex()
{
  return 9;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsShaderStridesIndex()
{
  return 32;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsLeafPointersInfoIndex()
{
  return 11;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsIFTHeapIndex()
{
  return 8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsVFTHeapIndex()
{
  return 7;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsBVHHeapIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsSamplerHeapIndex()
{
  return 5;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsWidthTextureHeapIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsWriteTextureHeapIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsReadTextureHeapIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsSizeIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsDriverSizeIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionPerEncoderIndirectionTableIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionVisibleFunctionTableHeapBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionWidthTextureHeapBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionDylibGOTBufferIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionBVHStateHeapBufferIndex()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionWriteTextureGatherBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionReadTextureGatherBufferIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionSamplerGatherBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionSamplerHeapBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionWriteTextureHeapBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionReadTextureHeapBufferIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeDylibGlobalBindingTableIndex()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSCSPerShaderConfigurationTableBufferIndex()
{
  return 62;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSCSPerKickConfigurationTableBufferIndex()
{
  return 61;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeControlFlowPredicateLinkTokenWordsIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeControlFlowPredicateFailLinkAddressIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeControlFlowPredicatePassLinkAddressIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeControlFlowPredicateRightOperandIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeControlFlowPredicateLeftOperandIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeBVHStateHeapBufferIndex()
{
  return 59;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeProgressMarkerBufferIndex()
{
  return 57;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeDylibStageSpecificBindPointIndex(uint64_t a1, int a2)
{
  return (a2 + 64);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeGlobalConstructorsBufferIndex()
{
  return 58;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeDylibGOTBufferIndex()
{
  return 56;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSplitDispatchParameterEnabled()
{
  return 12;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSplitDispatchParameterThreadsPerGrid()
{
  return 9;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSplitDispatchParameterThreadOffset()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSplitDispatchParameterThreadgroupsPerGrid()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSplitDispatchParameterThreadgroupOffset()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSplitDispatchParameters()
{
  return 55;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeExecuteIndirectIndirectCommandBufferBufferIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeExecuteIndirectInputParametersBufferIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeVisibleFunctionTableHeapBufferIndex()
{
  return 51;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeIntersectionFunctionTableHeapBufferIndex()
{
  return 50;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputePerEncoderIndirectionTableIndex()
{
  return 49;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSamplerGatherBufferIndex()
{
  return 48;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSamplerHeapBufferIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeWidthTextureHeapBufferIndex()
{
  return 46;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeWriteTextureGatherBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeReadTextureGatherBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeWriteTextureHeapBufferIndex()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeReadTextureHeapBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeGatherOrPatchUpOffsetsBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeStageInBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeTGOptCountIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeTGOptParamsIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeFastIntegerDivideBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeIndirectBufferWgSizeIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeIndirectBufferWgCountIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeMaxSPIBindPoints()
{
  return 65;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeMaxAPIBindPointsBuffer(uint64_t a1, int a2)
{
  if (a2) {
    return 35;
  }
  else {
    return 31;
  }
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeMaxAPIBindPointsTexture()
{
  return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getMeshLocalMeshDataIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderSCSPerShaderConfigurationTableBufferIndex()
{
  return 64;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderSCSPerKickConfigurationTableBufferIndex()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderDylibGlobalBindingTableIndex()
{
  return 61;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderDylibStageSpecificBindPointIndex(uint64_t a1, int a2)
{
  return (a2 + 62);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderGlobalConstructorsBufferIndex()
{
  return 60;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderDylibGOTBufferIndex()
{
  return 59;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderBVHStateHeapBufferIndex()
{
  return 54;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderFragmentViewportDepthRange()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderVertexAmplificationViewMappingsIndex()
{
  return 58;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderVisibleFunctionTableHeapBufferIndex()
{
  return 57;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderIntersectionFunctionTableHeapBufferIndex()
{
  return 55;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderPerEncoderIndirectionTableIndex()
{
  return 56;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderSamplerGatherBufferIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderSamplerHeapBufferIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderWidthTextureHeapBufferIndex()
{
  return 51;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderWriteTextureGatherBufferIndex()
{
  return 50;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderReadTextureGatherBufferIndex()
{
  return 49;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderWriteTextureHeapBufferIndex()
{
  return 48;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderReadTextureHeapBufferIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderBaseImmediateBufferIndex()
{
  return 46;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderBaseInstanceBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderBaseVertexBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderGLMTLReserved()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationConsumerControlPointIndexBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationConsumerPositionInPatchBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationConsumerPatchIndexBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationProducerInternalInstanceIDsBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationProducerInternalInstanceCountsBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationProducerDrawElemIndirectCmdsInputBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationProducerDrawElemIndirectCmdsOutputBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationInternalDrawIndexOffsetsBufferIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationInternalPerPatchDataBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationInternalPerPatchIDBufferIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationFactorBufferIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderMaxSPIBindPoints()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderMaxAPIIndirectBuffer()
{
  return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderMaxAPIIndirectTexture()
{
  return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderMaxAPIBindPointsBuffer(uint64_t a1, int a2)
{
  if (a2) {
    return 35;
  }
  else {
    return 31;
  }
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderMaxAPIBindPointsTexture()
{
  return 31;
}

uint64_t AGCLLVMGen2TargetLowerer::buildWriteImageBlock(uint64_t a1, uint64_t a2)
{
  v56[16] = *MEMORY[0x1E4F143B8];
  memset(&v51, 0, sizeof(v51));
  v55[0] = v56;
  v55[1] = (void *)0x1000000000;
  uint64_t v52 = v54;
  uint64_t v53 = 0x1000000000;
  if (*(_DWORD *)a2 == 8)
  {
    MEMORY[0x1CB7A04E0](&v51, *(void *)(a1 + 1920));
    uint64_t v4 = llvm::PointerType::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, v4);
    uint64_t v5 = *(void *)(a2 + 104);
    uint64_t v6 = llvm::PointerType::get();
    __int16 v50 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v5, v6, (uint64_t)v49);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, Cast);
    uint64_t v8 = llvm::PointerType::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, v8);
    uint64_t v9 = *(void *)(a2 + 56);
    uint64_t v10 = llvm::PointerType::get();
    __int16 v50 = 257;
    uint64_t v11 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v9, v10, (uint64_t)v49);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v11);
    uint64_t v12 = llvm::PointerType::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, v12);
    uint64_t v13 = *(void *)(a2 + 32);
    if (!v13)
    {
      uint64_t v14 = llvm::ConstantInt::get();
      __int16 v50 = 257;
      uint64_t v13 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v14, v12, (uint64_t)v49);
    }
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v13);
    int v15 = *(_DWORD *)(a2 + 4);
    if (v15 == 3)
    {
      std::string::append(&v51, ".3d");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(void *)(a1 + 304));
      uint64_t v38 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, *(llvm::Value **)(a2 + 136), *(llvm::Type **)(a1 + 192));
      uint64_t v17 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, v38, 4);
    }
    else
    {
      if (v15 != 1) {
        goto LABEL_20;
      }
      std::string::append(&v51, ".2d");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(void *)(a1 + 240));
      size_t v16 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, *(llvm::Value **)(a2 + 136), *(llvm::Type **)(a1 + 192));
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, (uint64_t)v16);
      if (!*(void *)(a2 + 152)) {
        goto LABEL_20;
      }
      std::string::append(&v51, ".array");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(void *)(a1 + 192));
      uint64_t v17 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, *(llvm::Value **)(a2 + 152), *(llvm::Type **)(a1 + 192));
    }
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, (uint64_t)v17);
LABEL_20:
    if (*(void *)(a2 + 168)) {
      std::string::append(&v51, ".lod");
    }
    unsigned int v39 = *(_DWORD *)(a2 + 8);
    if (v39 <= 7 && ((1 << v39) & 0x89) != 0) {
      unsigned __int8 v40 = ".32";
    }
    else {
      unsigned __int8 v40 = ".16";
    }
    std::string::append(&v51, v40);
    if (*(void *)(a2 + 168))
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(void *)(a1 + 192));
      uint64_t v41 = *(void *)(a2 + 168);
      uint64_t v42 = *(void *)(a1 + 192);
      __int16 v50 = 257;
      uint64_t v43 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v49);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v43);
    }
    goto LABEL_28;
  }
  unsigned int v18 = (*(_DWORD *)(a2 + 8) > 7u) | (0x76u >> *(_DWORD *)(a2 + 8));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(void *)(a1 + 192));
  uint64_t v19 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v19);
  if (*(_DWORD *)a2 == 7) {
    MEMORY[0x1CB7A04E0](&v51, *(void *)(a1 + 1936));
  }
  else {
    MEMORY[0x1CB7A04E0](&v51, *(void *)(a1 + 1928));
  }
  if (v18) {
    unsigned int v20 = ".4xh";
  }
  else {
    unsigned int v20 = ".4xf";
  }
  std::string::append(&v51, v20);
  uint64_t v21 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, v21);
  uint64_t v22 = *(void *)(a2 + 104);
  uint64_t v23 = llvm::PointerType::get();
  __int16 v50 = 257;
  uint64_t v24 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v22, v23, (uint64_t)v49);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v24);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(void *)(a1 + 240));
  __int16 v25 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, *(llvm::Value **)(a2 + 136), *(llvm::Type **)(a1 + 240));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, (uint64_t)v25);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(void *)(a1 + 192));
  long long v26 = *(llvm::Value **)(a2 + 144);
  __int16 v50 = 257;
  uint64_t v27 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v26, v27, (const llvm::Twine *)v49);
  std::string::size_type v29 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, Element, *(llvm::Type **)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, (uint64_t)v29);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(void *)(a1 + 192));
  __int16 v30 = *(llvm::Value **)(a2 + 144);
  __int16 v50 = 257;
  std::string::size_type v31 = (llvm::Value *)llvm::ConstantInt::get();
  char v32 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v30, v31, (const llvm::Twine *)v49);
  uint64_t v33 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, v32, *(llvm::Type **)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, (uint64_t)v33);
  if (*(_DWORD *)a2 == 7)
  {
    uint64_t v34 = 168;
    if (v18) {
      uint64_t v34 = 152;
    }
    uint64_t v35 = *(llvm::Type **)(a1 + v34);
    uint64_t v36 = llvm::FixedVectorType::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, v36);
    uint64_t v37 = AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)a1, *(llvm::Value **)(a2 + 224), v35);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v37);
  }
LABEL_28:
  llvm::FunctionType::get();
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string v44 = &v51;
LABEL_31:
    strlen((const char *)v44);
    goto LABEL_32;
  }
  std::string v44 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if (v51.__r_.__value_.__r.__words[0]) {
    goto LABEL_31;
  }
LABEL_32:
  llvm::Module::getOrInsertFunction();
  __int16 v50 = 257;
  uint64_t v46 = (uint64_t)llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v45 + 24), v45, (uint64_t)v52, v53, (uint64_t)v49);
  if (*(_DWORD *)a2 == 6)
  {
    switch(*(_DWORD *)(a2 + 8))
    {
      case 3:
      case 7:
        uint64_t v47 = *(void *)(a1 + 312);
        goto LABEL_36;
      case 4:
      case 8:
        uint64_t v47 = *(void *)(a1 + 304);
LABEL_36:
        __int16 v50 = 257;
        uint64_t v46 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v46, v47, (uint64_t)v49);
        break;
      default:
        break;
    }
  }
  if (v52 != v54) {
    free(v52);
  }
  if (v55[0] != v56) {
    free(v55[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  return v46;
}

void AGCLLVMGen2TargetLowerer::createBuiltins(AGCLLVMGen2TargetLowerer *this, AGCLLVMUserObject *a2, llvm::Module *a3)
{
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildGammaSpaceConversion(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  long long v31 = *(_OWORD *)a2;
  uint64_t v32 = *(void *)(a2 + 16);
  if (v32) {
    llvm::MetadataTracking::track();
  }
  int v33 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v31);
  if (v32) {
    llvm::MetadataTracking::untrack();
  }
  long long v28 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v29, (llvm::IRBuilderBase *)(a1 + 8));
  int v30 = *(_DWORD *)(a1 + 104);
  uint64_t v9 = (llvm::Value *)AGCLLVMTargetLowerer::buildClampColor(a1, (uint64_t)&v28, a3, a5, 0);
  if (v29) {
    llvm::MetadataTracking::untrack();
  }
  long long v25 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v26, (llvm::IRBuilderBase *)(a1 + 8));
  int v10 = *(_DWORD *)(a1 + 104);
  int v27 = v10;
  long long v34 = v25;
  uint64_t v35 = v26;
  if (v26)
  {
    llvm::MetadataTracking::track();
    int v10 = v27;
  }
  int v36 = v10;
  AGCLLVMTargetLowerer::SetIP(a1, &v34);
  if (v35) {
    llvm::MetadataTracking::untrack();
  }
  if (*(void *)v9 == *(void *)(a1 + 288) || *(void *)v9 == *(void *)(a1 + 280))
  {
    uint64_t v11 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, v9, 0, 3, 1);
    __int16 v40 = 257;
    uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v9, v12, (const llvm::Twine *)&v37);
    uint64_t v14 = Element;
    uint64_t v15 = *(void *)(a1 + 184);
    if ((*(_DWORD *)(*(void *)v11 + 8) & 0xFE) == 0x12)
    {
      uint64_t v24 = Element;
      *(_OWORD *)uint64_t v41 = 0u;
      long long v42 = 0u;
      AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, v11, v41);
      uint64_t v16 = *(unsigned int *)(*(void *)v11 + 32);
      if (v16)
      {
        uint64_t v17 = 0;
        Insertuint64_t Element = 0;
        do
        {
          uint64_t v19 = v41[v17];
          long long v37 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v38, (llvm::IRBuilderBase *)(a1 + 8));
          int v39 = *(_DWORD *)(a1 + 104);
          unsigned int v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *, void, uint64_t))(*(void *)a1 + 144))(a1, &v37, v19, 0, v15);
          if (v38) {
            llvm::MetadataTracking::untrack();
          }
          if (!InsertElement)
          {
            llvm::FixedVectorType::get();
            Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
          }
          __int16 v40 = 257;
          uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
          Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v20, v21, (const llvm::Twine *)&v37);
          ++v17;
        }
        while (v16 != v17);
      }
      else
      {
        Insertuint64_t Element = 0;
      }
      uint64_t v14 = v24;
    }
    else
    {
      long long v37 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v38, (llvm::IRBuilderBase *)(a1 + 8));
      int v39 = *(_DWORD *)(a1 + 104);
      Insertuint64_t Element = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *, void, uint64_t))(*(void *)a1 + 144))(a1, &v37, v11, 0, v15);
      if (v38) {
        llvm::MetadataTracking::untrack();
      }
    }
    long long v37 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v38, (llvm::IRBuilderBase *)(a1 + 8));
    int v39 = *(_DWORD *)(a1 + 104);
    uint64_t v22 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 88))(a1, &v37, v14, 8, 0, 1);
    if (v38) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v9 = (llvm::Value *)AGCLLVMBuilder::combineRGBA((AGCLLVMBuilder *)a1, InsertElement, v22);
  }
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  return v9;
}

llvm::Value *AGCLLVMGen2TargetLowerer::convertWriteValue(AGCLLVMBuilder *this, int a2, llvm::Value *a3)
{
  uint64_t Element = a3;
  if (a2 == 6)
  {
    if ((*(_DWORD *)(*(void *)a3 + 8) & 0xFE) == 0x12)
    {
      __int16 v30 = 257;
      uint64_t v5 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((AGCLLVMBuilder *)((char *)this + 8), Element, v5, (const llvm::Twine *)v29);
    }
    uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v30 = 257;
    uint64_t v7 = llvm::IRBuilderBase::CreateAnd((AGCLLVMBuilder *)((char *)this + 8), Element, v6, (const llvm::Twine *)v29);
    uint64_t v8 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v30 = 257;
    uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((AGCLLVMBuilder *)((char *)this + 8), Element, v8, (const llvm::Twine *)v29);
    int v10 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v28 = 257;
    uint64_t v11 = llvm::IRBuilderBase::CreateAnd((AGCLLVMBuilder *)((char *)this + 8), LShr, v10, (const llvm::Twine *)v27);
    llvm::FixedVectorType::get();
    uint64_t v12 = (llvm::Value *)llvm::UndefValue::get();
    uint64_t v13 = *((void *)this + 25);
    __int16 v30 = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 38, v7, v13, (uint64_t)v29);
    __int16 v28 = 257;
    uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
    Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), v12, Cast, v15, (const llvm::Twine *)v27);
    uint64_t v17 = *((void *)this + 25);
    __int16 v30 = 257;
    unsigned int v18 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 38, v11, v17, (uint64_t)v29);
    __int16 v28 = 257;
    uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
    unsigned int v20 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), InsertElement, v18, v19, (const llvm::Twine *)v27);
    uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v30 = 257;
    uint64_t v22 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v23 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), v20, v21, v22, (const llvm::Twine *)v29);
    uint64_t v24 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v30 = 257;
    long long v25 = (llvm::Value *)llvm::ConstantInt::get();
    return (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), v23, v24, v25, (const llvm::Twine *)v29);
  }
  else
  {
    return AGCLLVMBuilder::extendVector(this, a3, 4);
  }
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildInterpolate(AGCLLVMBuilder *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  long long v23 = *(_OWORD *)a2;
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  unsigned int v13 = a3 - 1;
  if (a3 != 1) {
    llvm::FixedVectorType::get();
  }
  uint64_t v14 = llvm::PointerType::get();
  v29[0] = v30;
  v29[1] = (void *)0x400000000;
  uint64_t v26 = v28;
  uint64_t v27 = 0x400000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, v14);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, a5);
  if (a7)
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, v14);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, a7);
    uint64_t v15 = (const char **)((char *)a1 + 32 * a4 + 8 * v13 + 2104);
  }
  else
  {
    uint64_t v15 = (const char **)((char *)a1 + 32 * a4 + 8 * v13 + 2008);
  }
  if (*v15) {
    strlen(*v15);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  __int16 v22 = 257;
  uint64_t v17 = llvm::IRBuilderBase::CreateCall((uint64_t)a1 + 8, *(void *)(v16 + 24), v16, (uint64_t)v26, v27, (uint64_t)v21);
  v18.i32[0] = a3;
  uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.i32[0] != 1) {
    uint64_t v17 = (llvm::Value *)AGCLLVMBuilder::subrangeVector(a1, v17, 0, a3, 1);
  }
  if (v26 != v28) {
    free(v26);
  }
  if (v29[0] != v30) {
    free(v29[0]);
  }
  return v17;
}

uint64_t AGCLLVMGen2TargetLowerer::buildLocalID(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  uint8x8_t v19 = v21;
  long long v20 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.agx1.local.", "");
  llvm::SmallVectorTemplateBase<char,true>::push_back(&v19, aXyz[a4]);
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v9 = a1 + 8;
  __int16 v15 = 257;
  int v10 = llvm::IRBuilderBase::CreateCall(v9, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  unsigned char v13[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v9, 38, (uint64_t)v10, a3, (uint64_t)v13);
  if (v19 != v21) {
    free(v19);
  }
  return Cast;
}

uint64_t AGCLLVMGen2TargetLowerer::buildCopyOffChipMRTPixelData@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a3;
  long long v13 = *a2;
  uint64_t v14 = *((void *)a2 + 2);
  if (v14) {
    llvm::MetadataTracking::track();
  }
  int v15 = *((_DWORD *)a2 + 6);
  int v10 = *(_DWORD *)(a4 + 4 * v9);
  uint64_t v11 = llvm::ConstantInt::get();
  uint64_t result = (uint64_t)AGCLLVMGen2TargetLowerer::buildCopyOffChipMRTPixelDataStateless(a1, (uint64_t)&v13, BYTE2(v10), v11);
  if (v14) {
    uint64_t result = llvm::MetadataTracking::untrack();
  }
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 24) = 0;
  *(void *)(a5 + 16) = 0;
  return result;
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildCopyOffChipMRTPixelDataStateless(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(void *)(a1 + 1664);
  if (v8) {
    size_t v9 = strlen(*(const char **)(a1 + 1664));
  }
  else {
    size_t v9 = 0;
  }
  uint64_t v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v8, v9, *(void *)(a1 + 144), *(void *)(a1 + 192), *(void *)(a1 + 192));
  v17[0] = a4;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 528))(a1, a3);
  v17[1] = llvm::ConstantInt::get();
  __int16 v13 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildEmitpix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v21 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  if (v22) {
    llvm::MetadataTracking::track();
  }
  int v23 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v21);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  if (*(void *)(a1 + 1848)) {
    strlen(*(const char **)(a1 + 1848));
  }
  uint64_t v13 = *(void *)(a1 + 192);
  uint64_t v14 = llvm::PointerType::get();
  uint64_t v15 = *(void *)(a1 + 192);
  __src[0] = v13;
  __src[1] = v14;
  void __src[2] = v15;
  void __src[3] = v15;
  uint64_t v25 = v15;
  uint64_t Cast = v28;
  uint64_t v27 = 0x500000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&Cast, __src, &Cast);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v17 = v16;
  if (Cast != v28) {
    free(Cast);
  }
  uint64_t v18 = *(void *)(a1 + 192);
  LOWORD(v29) = 257;
  uint64_t Cast = (void *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, a9, v18, (uint64_t)&Cast);
  uint64_t v19 = llvm::PointerType::get();
  LOWORD(v25) = 257;
  uint64_t v27 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a3, v19, (uint64_t)__src);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 528))(a1, a8);
  v28[0] = llvm::ConstantInt::get();
  v28[1] = llvm::ConstantInt::get();
  uint64_t v29 = llvm::ConstantInt::get();
  LOWORD(v25) = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v17 + 24), v17, (uint64_t)&Cast, 5, (uint64_t)__src);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildReadOutputRegister(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(void *)(a1 + 1520);
  if (v8) {
    size_t v9 = strlen(*(const char **)(a1 + 1520));
  }
  else {
    size_t v9 = 0;
  }
  uint64_t v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v8, v9, *(void *)(a1 + 200), *(void *)(a1 + 192), *(void *)(a1 + 192));
  v17[0] = a3;
  v17[1] = a4;
  __int16 v13 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildWriteOutputRegister(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v10 = *(void *)(a1 + 1528);
  if (v10) {
    size_t v11 = strlen(*(const char **)(a1 + 1528));
  }
  else {
    size_t v11 = 0;
  }
  uint64_t v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(a1, v10, v11, *(void *)(a1 + 144), *(void *)(a1 + 192), *(void *)(a1 + 200), *(void *)(a1 + 192));
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = a5;
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v12 + 24), v12, (uint64_t)v19, 3, (uint64_t)v14);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildGExp(void *a1, uint64_t a2, llvm::Type **a3, int a4, uint64_t a5)
{
  long long v22 = *(_OWORD *)a2;
  uint64_t v23 = *(void *)(a2 + 16);
  if (v23) {
    llvm::MetadataTracking::track();
  }
  int v24 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v22);
  if (v23) {
    llvm::MetadataTracking::untrack();
  }
  if (a4)
  {
    uint64_t v10 = 2000;
    uint64_t v11 = 1992;
  }
  else
  {
    uint64_t v10 = 1968;
    uint64_t v11 = 1960;
  }
  if (a1[21] == a5) {
    uint64_t v10 = v11;
  }
  uint64_t v12 = *(void *)((char *)a1 + v10);
  if (v12) {
    size_t v13 = strlen(*(const char **)((char *)a1 + v10));
  }
  else {
    size_t v13 = 0;
  }
  uint64_t v14 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, v12, v13, a5, a1[24]);
  __int16 v15 = (llvm::Type *)a1[24];
  __int16 v20 = 257;
  Intuint64_t Cast = llvm::IRBuilderBase::CreateIntCast((llvm::IRBuilderBase *)(a1 + 1), a3, v15, 0, (const llvm::Twine *)v19);
  __int16 v18 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v14 + 24), v14, (uint64_t)&IntCast, 1, (uint64_t)v17);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildGCmp(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, llvm::Type *a5)
{
  uint64_t v29 = a3;
  long long v26 = *(_OWORD *)a2;
  uint64_t v27 = *(void *)(a2 + 16);
  if (v27) {
    llvm::MetadataTracking::track();
  }
  int v28 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v26);
  if (v27) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v10 = *a3;
  uint64_t v11 = *(void *)(a1 + 168);
  uint64_t v12 = 192;
  if (v10 == v11) {
    uint64_t v12 = 200;
  }
  uint64_t v13 = *(void *)(a1 + v12);
  BOOL v14 = v10 == v11;
  if (a4)
  {
    uint64_t v15 = 1984;
    uint64_t v16 = 1976;
  }
  else
  {
    uint64_t v15 = 1952;
    uint64_t v16 = 1944;
  }
  if (v14) {
    uint64_t v15 = v16;
  }
  uint64_t v17 = *(void *)(a1 + v15);
  if (v17) {
    size_t v18 = strlen(*(const char **)(a1 + v15));
  }
  else {
    size_t v18 = 0;
  }
  uint64_t v19 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, v17, v18, v13, v10);
  __int16 v20 = (llvm::IRBuilderBase *)(a1 + 8);
  __int16 v25 = 257;
  long long v21 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t)v20, *(void *)(v19 + 24), v19, (uint64_t)&v29, 1, (uint64_t)v24);
  v23[16] = 257;
  return llvm::IRBuilderBase::CreateIntCast(v20, v21, a5, 0, (const llvm::Twine *)v23);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildForceF16Precision(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = *(void *)(a1 + 1888);
  if (v6) {
    size_t v7 = strlen(*(const char **)(a1 + 1888));
  }
  else {
    size_t v7 = 0;
  }
  uint64_t v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v6, v7, *(void *)(a1 + 192), *(void *)(a1 + 168), *(void *)(a1 + 192));
  v18[0] = a3;
  v18[1] = llvm::ConstantInt::get();
  __int16 v14 = 257;
  size_t v9 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v8 + 24), v8, (uint64_t)v18, 2, (uint64_t)v13);
  uint64_t v10 = *(void *)(a1 + 152);
  __int16 v14 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v9, v10, (uint64_t)v13);
  return AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, Cast, 1);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildPackNorm(uint64_t *a1, uint64_t a2, llvm::Value *a3, int a4, int a5)
{
  long long v38 = *(_OWORD *)a2;
  uint64_t v39 = *(void *)(a2 + 16);
  if (v39) {
    llvm::MetadataTracking::track();
  }
  int v40 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v38);
  if (v39) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v10 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, a3, 1);
  uint64_t v41 = v10;
  if (a4 == 16)
  {
    BOOL v11 = a5 == 0;
    uint64_t v12 = 1880;
    uint64_t v13 = 1872;
  }
  else
  {
    if (a4 != 8)
    {
      long long v15 = 0;
      goto LABEL_14;
    }
    BOOL v11 = a5 == 0;
    uint64_t v12 = 1864;
    uint64_t v13 = 1856;
  }
  if (!v11) {
    uint64_t v12 = v13;
  }
  __int16 v14 = (const char **)((char *)a1 + v12);
  long long v15 = *v14;
  if (*v14)
  {
    size_t v16 = strlen(*v14);
    goto LABEL_15;
  }
LABEL_14:
  size_t v16 = 0;
LABEL_15:
  uint64_t v17 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, (uint64_t)v15, v16, a1[24], a1[21]);
  uint64_t v18 = v17;
  uint64_t v19 = 24;
  if (a4 == 8) {
    uint64_t v19 = 23;
  }
  __int16 v20 = (llvm::Type *)a1[v19];
  if ((*(_DWORD *)(*(void *)v10 + 8) & 0xFE) == 0x12
    && (uint64_t v21 = *(unsigned int *)(*(void *)v10 + 32), v21 != 1))
  {
    llvm::FixedVectorType::get();
    Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
    if (v21)
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        __int16 v37 = 257;
        uint64_t v29 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v10, v29, (const llvm::Twine *)v36);
        __int16 v35 = 257;
        uint64_t v30 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v18 + 24), v18, (uint64_t)&Element, 1, (uint64_t)v34);
        __int16 v37 = 257;
        long long v31 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v30, v31, (const llvm::Twine *)v36);
      }
    }
    long long v26 = (llvm::Type *)llvm::FixedVectorType::get();
    __int16 v37 = 257;
    int v24 = (const llvm::Twine *)v36;
    __int16 v25 = (llvm::IRBuilderBase *)(a1 + 1);
    uint64_t v23 = (llvm::Type **)InsertElement;
  }
  else
  {
    uint64_t v22 = (uint64_t)(a1 + 1);
    __int16 v37 = 257;
    uint64_t v23 = (llvm::Type **)llvm::IRBuilderBase::CreateCall(v22, *(void *)(v17 + 24), v17, (uint64_t)&v41, 1, (uint64_t)v36);
    __int16 v35 = 257;
    int v24 = (const llvm::Twine *)v34;
    __int16 v25 = (llvm::IRBuilderBase *)v22;
    long long v26 = v20;
  }
  return llvm::IRBuilderBase::CreateIntCast(v25, v23, v26, 0, v24);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildCoverageMask(uint64_t a1, uint64_t a2, llvm::Value *a3, unsigned int a4)
{
  v22[2] = *MEMORY[0x1E4F143B8];
  long long v18 = *(_OWORD *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  if (v19) {
    llvm::MetadataTracking::track();
  }
  int v20 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v18);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v21 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, a3, 1);
  if (a4 > 1)
  {
    uint64_t v9 = *(void *)(a1 + 1864);
    if (v9) {
      size_t v10 = strlen(*(const char **)(a1 + 1864));
    }
    else {
      size_t v10 = 0;
    }
    uint64_t v11 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, v9, v10, *(void *)(a1 + 192), *(void *)(a1 + 168));
    __int16 v17 = 257;
    uint64_t v12 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v11 + 24), v11, (uint64_t)&v21, 1, (uint64_t)v16);
    uint64_t v13 = *(void *)(a1 + 2200);
    if (v13) {
      size_t v14 = strlen(*(const char **)(a1 + 2200));
    }
    else {
      size_t v14 = 0;
    }
    uint64_t v15 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v13, v14, *(void *)(a1 + 200), *(void *)(a1 + 192), *(void *)(a1 + 192));
    v22[0] = llvm::ConstantInt::get();
    v22[1] = v12;
    __int16 v17 = 257;
    return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v15 + 24), v15, (uint64_t)v22, 2, (uint64_t)v16);
  }
  else
  {
    llvm::ConstantFP::get();
    llvm::IRBuilderBase::CreateFCmpHelper();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    __int16 v17 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
}

uint64_t AGCLLVMGen2TargetLowerer::buildAlphaTest(uint64_t a1, uint64_t a2)
{
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantInt::get();
  llvm::ConstantInt::get();
  __int16 v9 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  long long v6 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7) {
    llvm::MetadataTracking::track();
  }
  int v8 = *(_DWORD *)(a2 + 24);
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 616))(a1, &v6, Select);
  if (v7) {
    return llvm::MetadataTracking::untrack();
  }
  return result;
}

void AGCLLVMGen2TargetLowerer::~AGCLLVMGen2TargetLowerer(AGCLLVMGen2TargetLowerer *this)
{
  AGCLLVMTargetLowerer::~AGCLLVMTargetLowerer(this);
  JUMPOUT(0x1CB7A0780);
}

BOOL AGCLLVMGen2TargetConfig::supportFastISel(AGCLLVMGen2TargetConfig *this)
{
  return *((_DWORD *)this + 7) == 4;
}

llvm::Value *AGCLLVMGen2TargetLowerer::foldFPTruncExt(AGCLLVMGen2TargetLowerer *this, llvm::Value *a2)
{
  int v2 = a2;
  v21[7] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12)
  {
    uint64_t v5 = (uint64_t *)*(unsigned int *)(v4 + 32);
    if (!v5) {
      goto LABEL_28;
    }
  }
  else
  {
    LODWORD(v5) = 1;
  }
  uint64_t v6 = 0;
  uint64_t v7 = v5;
  do
  {
    unsigned int v8 = v6;
    uint64_t v9 = (uint64_t)v2;
    while (1)
    {
      for (uint64_t i = v9; ; uint64_t i = *(void *)(i - 32))
      {
        int v11 = *(unsigned __int8 *)(i + 16);
        if (!i || (v11 - 75) < 0xFFFFFFFE) {
          break;
        }
      }
      if (!i || v11 != 91) {
        break;
      }
      uint64_t v9 = *(void *)(i - 64);
      unsigned int v8 = *(_DWORD *)(*(void *)(i + 64) + 4 * v8);
      if (v8 == -1)
      {
        uint64_t v9 = llvm::UndefValue::get();
        unsigned int v8 = 0;
      }
      else
      {
        unsigned int v12 = *(_DWORD *)(*(void *)v9 + 32);
        BOOL v13 = v8 >= v12;
        unsigned int v14 = v8 - v12;
        if (v13)
        {
          uint64_t v9 = *(void *)(i - 32);
          unsigned int v8 = v14;
        }
      }
    }
    LODWORD(v21[2 * v6]) = v8;
    v21[2 * v6++ - 1] = i;
  }
  while (v6 != v7);
  uint64_t v5 = v20;
  if (v7 <= 1)
  {
LABEL_28:
    uint64_t v17 = *v5;
LABEL_29:
    if (v17 == v4) {
      return (llvm::Value *)v5;
    }
    return v2;
  }
  uint64_t v15 = 0;
  size_t v16 = (uint64_t **)v21;
  while (*(v16 - 1) == v20 && v15 == *(_DWORD *)v16)
  {
    uint64_t v17 = *v20;
    uint64_t v18 = *v20;
    if ((*(_DWORD *)(*v20 + 8) & 0xFE) == 0x12) {
      uint64_t v18 = **(void **)(v17 + 16);
    }
    if (v18 != *((void *)this + 21)) {
      break;
    }
    ++v15;
    v16 += 2;
    if (v7 == v15) {
      goto LABEL_29;
    }
  }
  return v2;
}

uint64_t *AGCLLVMGen3TargetConfig::initializeAirBuiltinsMap(AGCLLVMGen3TargetConfig *this, AGCLLVMAirBuiltinsMap *a2)
{
  AGCLLVMAirBuiltinsMap::insertBuiltinReplacementsBase(a2, this);
  uint64_t v3 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_broadcast", 0xEuLL);
  *(_DWORD *)(v3 + 8) = 1;
  *(void *)(v3 + 16) = AGCLLVMAirBuiltins::buildQuadBroadcast;
  *(void *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 5;
  *(_WORD *)(v3 + 36) = 0;
  uint64_t v4 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle", 0xCuLL);
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)(v4 + 16) = AGCLLVMAirBuiltins::buildQuadShuffle;
  *(void *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 5;
  *(_WORD *)(v4 + 36) = 0;
  uint64_t v5 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_up", 0xFuLL);
  *(_DWORD *)(v5 + 8) = 1;
  *(void *)(v5 + 16) = AGCLLVMAirBuiltins::buildQuadShuffleUp;
  *(void *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 32) = 5;
  *(_WORD *)(v5 + 36) = 0;
  uint64_t v6 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_down", 0x11uLL);
  *(_DWORD *)(v6 + 8) = 1;
  *(void *)(v6 + 16) = AGCLLVMAirBuiltins::buildQuadShuffleDown;
  *(void *)(v6 + 24) = 0;
  *(_DWORD *)(v6 + 32) = 5;
  *(_WORD *)(v6 + 36) = 0;
  uint64_t v7 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_xor", 0x10uLL);
  *(_DWORD *)(v7 + 8) = 1;
  *(void *)(v7 + 16) = AGCLLVMAirBuiltins::buildQuadShuffleXor;
  *(void *)(v7 + 24) = 0;
  *(_DWORD *)(v7 + 32) = 5;
  *(_WORD *)(v7 + 36) = 0;
  uint64_t v8 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_rotate_up", 0x16uLL);
  *(_DWORD *)(v8 + 8) = 1;
  *(void *)(v8 + 16) = AGCLLVMAirBuiltins::buildQuadShuffleRotateUp;
  *(void *)(v8 + 24) = 0;
  *(_DWORD *)(v8 + 32) = 5;
  *(_WORD *)(v8 + 36) = 0;
  uint64_t v9 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_rotate_down", 0x18uLL);
  *(_DWORD *)(v9 + 8) = 1;
  *(void *)(v9 + 16) = AGCLLVMAirBuiltins::buildQuadShuffleRotateDown;
  *(void *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 32) = 5;
  *(_WORD *)(v9 + 36) = 0;
  uint64_t v10 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "wg", 2uLL);
  *(_DWORD *)(v10 + 8) = 1;
  *(void *)(v10 + 16) = AGCLLVMAirBuiltins::buildWGBarrier;
  *(void *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 32) = 9;
  *(_WORD *)(v10 + 36) = 0;
  uint64_t v11 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_quad_element", 0x10uLL);
  *(_DWORD *)(v11 + 8) = 1;
  *(void *)(v11 + 16) = AGCLLVMAirBuiltins::buildQuadElement;
  *(void *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 32) = 9;
  *(_WORD *)(v11 + 36) = 0;
  uint64_t v12 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_threads_per_simdgroup", 0x19uLL);
  *(_DWORD *)(v12 + 8) = 1;
  *(void *)(v12 + 16) = AGCLLVMAirBuiltins::buildThreadExecutionWidth;
  *(void *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 32) = 9;
  *(_WORD *)(v12 + 36) = 0;
  uint64_t v13 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "load", 4uLL);
  *(_DWORD *)(v13 + 8) = 1;
  *(void *)(v13 + 16) = AGCLLVMAirBuiltins::buildCoherentLoad;
  *(void *)(v13 + 24) = 0;
  *(_DWORD *)(v13 + 32) = 10;
  *(_WORD *)(v13 + 36) = 0;
  uint64_t result = llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "store", 5uLL);
  uint64_t v15 = *result;
  *(_DWORD *)(v15 + 8) = 1;
  *(void *)(v15 + 16) = AGCLLVMAirBuiltins::buildCoherentStore;
  *(void *)(v15 + 24) = 0;
  *(_DWORD *)(v15 + 32) = 9;
  *(_WORD *)(v15 + 36) = 0;
  return result;
}

uint64_t AGCLLVMGen3TargetConfig::getDMARegisterLayoutMask(AGCLLVMGen3TargetConfig *this)
{
  return 6;
}

void AGCLLVMGen3TargetConfig::createComputeControlFlowPredicateShader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  {
    AGCLLVMDriverComputeControlFlowPredicateShaderGen3::create(AGCLLVMCtx &,llvm::LLVMContext &,unsigned int,BOOL,BOOL)::computeCS = 0;
    *(void *)algn_1EA613A38 = 0;
    qword_1EA613A40 = 0;
  }
  ComputeControlFlowBitcodeFileName = getComputeControlFlowBitcodeFileName(*(void *)(a2 + 32));
  uint64_t v6 = (const UInt8 *)ComputeControlFlowBitcodeFileName;
  if (ComputeControlFlowBitcodeFileName) {
    size_t v7 = strlen(ComputeControlFlowBitcodeFileName);
  }
  else {
    size_t v7 = 0;
  }
  AGCLLVMObject::readBitcode(a3, v6, v7, 1);
  operator new();
}

void AGCLLVMGen3TargetConfig::createComputeProgressMarkerShader(AGCLLVMGen3TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  {
    {
      AGCLLVMDriverComputeProgressMarkerShaderGen3::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
      *(void *)algn_1EA613A18 = 0;
      qword_1EA613A20 = 0;
    }
  }
  AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)"progress_marker_compute", 23, 0);
  operator new();
}

void AGCLLVMGen3TargetConfig::createExecuteIndirectCDMRangeExecutionShader(AGCLLVMGen3TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  v34[3] = *MEMORY[0x1E4F143B8];
  memset(&__p, 0, sizeof(__p));
  switch(*(_DWORD *)(*((void *)a2 + 4) + 28))
  {
    case 0xE:
    case 0x10:
    case 0x19:
    case 0x1A:
    case 0x1B:
      uint64_t v5 = "cei_range_exec_gen4";
      goto LABEL_6;
    case 0x11:
    case 0x12:
      uint64_t v5 = "cei_range_exec_gen5";
      goto LABEL_6;
    case 0x13:
    case 0x14:
    case 0x15:
      uint64_t v5 = "cei_range_exec_gen5x";
      goto LABEL_6;
    case 0x16:
      std::string::basic_string[abi:nn180100]<0>(v24, "cei_range_exec_gen6_g15p");
      unsigned int v10 = *(_DWORD *)(*((void *)a2 + 4) + 24);
      LODWORD(v28) = 1;
      std::string::basic_string[abi:nn180100]<0>(&v29, "a0");
      int v31 = 3;
      std::string::basic_string[abi:nn180100]<0>(v32, "b0");
      uint64_t v11 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = &v22;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v21, (uint64_t *)&v22, (int)(&v28)[v11], (uint64_t)&(&v28)[v11]);
        v11 += 4;
      }
      while (v11 != 8);
      getFullBitcodePath(&v26, (const void **)v24, v10, (uint64_t)&v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v26;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v22);
      for (uint64_t i = 0; i != -8; i -= 4)
      {
        if (SHIBYTE(v32[i + 2]) < 0) {
          operator delete((void *)v32[i]);
        }
      }
      goto LABEL_45;
    case 0x18:
      std::string::basic_string[abi:nn180100]<0>(v24, "cei_range_exec_gen6_g15g");
      unsigned int v13 = *(_DWORD *)(*((void *)a2 + 4) + 24);
      LODWORD(v28) = 1;
      std::string::basic_string[abi:nn180100]<0>(&v29, "a0");
      int v31 = 3;
      std::string::basic_string[abi:nn180100]<0>(v32, "b0");
      int v33 = 5;
      std::string::basic_string[abi:nn180100]<0>(v34, "c0");
      uint64_t v14 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = &v22;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v21, (uint64_t *)&v22, (int)(&v28)[v14], (uint64_t)&(&v28)[v14]);
        v14 += 4;
      }
      while (v14 != 12);
      getFullBitcodePath(&v26, (const void **)v24, v13, (uint64_t)&v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v26;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v22);
      for (uint64_t j = 0; j != -12; j -= 4)
      {
        if (SHIBYTE(v34[j + 2]) < 0) {
          operator delete((void *)v34[j]);
        }
      }
      goto LABEL_45;
    case 0x1F:
      std::string::basic_string[abi:nn180100]<0>(v24, "cei_range_exec_gen6_g16p");
      unsigned int v16 = *(_DWORD *)(*((void *)a2 + 4) + 24);
      LODWORD(v28) = 1;
      std::string::basic_string[abi:nn180100]<0>(&v29, "a0");
      int v31 = 3;
      std::string::basic_string[abi:nn180100]<0>(v32, "b0");
      int v33 = 4;
      std::string::basic_string[abi:nn180100]<0>(v34, "b0");
      uint64_t v17 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = &v22;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v21, (uint64_t *)&v22, (int)(&v28)[v17], (uint64_t)&(&v28)[v17]);
        v17 += 4;
      }
      while (v17 != 12);
      getFullBitcodePath(&v26, (const void **)v24, v16, (uint64_t)&v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v26;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v22);
      for (uint64_t k = 0; k != -12; k -= 4)
      {
        if (SHIBYTE(v34[k + 2]) < 0) {
          operator delete((void *)v34[k]);
        }
      }
LABEL_45:
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      goto LABEL_7;
    case 0x20:
    case 0x22:
      uint64_t v5 = "cei_range_exec_gen6_hal200";
LABEL_6:
      MEMORY[0x1CB7A04E0](&__p, v5);
LABEL_7:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)p_p, size, 0);
      {
        {
          AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
          *(void *)algn_1EA613958 = 0;
          qword_1EA613960 = 0;
        }
      }
      operator new();
    default:
      std::string::basic_string[abi:nn180100]<0>(&v28, "");
      int v8 = *(_DWORD *)(*((void *)a2 + 4) + 28);
      if (v8 > 11)
      {
        if (v8 == 12)
        {
          uint64_t v9 = "cei_esl_gen_range_exec_gen3";
          goto LABEL_51;
        }
        if (v8 != 23) {
          goto LABEL_52;
        }
      }
      else if ((v8 - 9) >= 3)
      {
        if (v8 != 8) {
          goto LABEL_52;
        }
        uint64_t v9 = "cei_esl_gen_range_exec_gen1";
        goto LABEL_51;
      }
      uint64_t v9 = "cei_esl_gen_range_exec_gen2";
LABEL_51:
      MEMORY[0x1CB7A04E0](&v28, v9);
LABEL_52:
      if ((v30 & 0x80u) == 0) {
        uint64_t v19 = (const UInt8 *)&v28;
      }
      else {
        uint64_t v19 = v28;
      }
      if ((v30 & 0x80u) == 0) {
        CFIndex v20 = v30;
      }
      else {
        CFIndex v20 = v29;
      }
      AGCLLVMObject::readBitcode((uint64_t)a3, v19, v20, 0);
      {
        AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
        *(void *)algn_1EA613918 = 0;
        qword_1EA613920 = 0;
      }
      operator new();
  }
}

void AGCLLVMGen3TargetConfig::createExecuteIndirectCDMPatchUpShader(AGCLLVMGen3TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
}

void AGCLLVMGen3TargetConfig::createGPUGatherComputeShader(AGCLLVMGen3TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  {
    {
      AGCLLVMDriverGPUGatherComputeShaderGen3::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
      *(void *)algn_1EA613978 = 0;
      qword_1EA613980 = 0;
    }
  }
  operator new();
}

void AGCLLVMGen3TargetConfig::createMetalPostTessellationShader()
{
}

void AGCLLVMGen3TargetConfig::createMetalFragmentShader()
{
}

void AGCLLVMGen3TargetConfig::createMetalTileShader()
{
}

void AGCLLVMGen3TargetConfig::createMetalComputeShader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void AGCLLVMGen3TargetConfig::createTileDispatchVertexShader(AGCLLVMGen3TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  operator new();
}

void AGCLLVMGen3TargetConfig::createPassthroughVertexShader(AGCLLVMGen3TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t AGCLLVMGen3TargetConfig::supportFastISel(AGCLLVMGen3TargetConfig *this)
{
  return 0;
}

void AGCLLVMGen3TargetLowerer::buildUpdateHWColorCovarageMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v28[6] = *MEMORY[0x1E4F143B8];
  std::string v26 = v28;
  long long v27 = xmmword_1CADD6560;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v26, "llvm.agx2.update.hw.coverage.mask.", "");
  if (a5) {
    uint64_t v9 = "coords.i16";
  }
  else {
    uint64_t v9 = "i16";
  }
  uint64_t v10 = 10;
  if (!a5) {
    uint64_t v10 = 3;
  }
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v26, v9, &v9[v10]);
  long long v18 = *(_OWORD *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  if (v19) {
    llvm::MetadataTracking::track();
  }
  int v20 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v18);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  v24[0] = v25;
  v24[1] = (void *)0x500000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(void *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(void *)(a1 + 192));
  if (a5)
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(void *)(a1 + 240));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(void *)(a1 + 192));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(void *)(a1 + 192));
    uint64_t v21 = v23;
    uint64_t v22 = 0x500000000;
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v21, a3);
    uint64_t v11 = llvm::ConstantInt::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v21, v11);
    uint64_t v12 = a5;
  }
  else
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(void *)(a1 + 192));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(void *)(a1 + 192));
    uint64_t v21 = v23;
    uint64_t v22 = 0x500000000;
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v21, a3);
    uint64_t v12 = llvm::ConstantInt::get();
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v21, v12);
  uint64_t v13 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v21, v13);
  uint64_t v14 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v21, v14);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  __int16 v17 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v15 + 24), v15, (uint64_t)v21, v22, (uint64_t)v16);
  if (v21 != v23) {
    free(v21);
  }
  if (v24[0] != v25) {
    free(v24[0]);
  }
  if (v26 != v28) {
    free(v26);
  }
}

uint64_t AGCLLVMGen3TargetLowerer::buildReadHWTileID()
{
  return 0;
}

uint64_t AGCLLVMGen3TargetLowerer::buildReadClusterID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  __int16 v17 = v19;
  long long v18 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.cluster.num", "");
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v7 = a1 + 8;
  __int16 v13 = 257;
  int v8 = llvm::IRBuilderBase::CreateCall(v7, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19) {
    free(v17);
  }
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildAddressInOffChipMRTBuffer(AGCLLVMGen3TargetLowerer *this, int a2, unsigned __int16 a3, unsigned __int16 a4, llvm::Value *a5, llvm::Value *a6)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  switch(a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 22:
      a3 *= 2;
      break;
    case 10:
    case 11:
    case 17:
      a3 *= 4;
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      a3 = 4;
      break;
    default:
      a3 = 0;
      break;
  }
  uint64_t v71 = (llvm::Type *)a3;
  llvm::ArrayType::get(*((llvm::ArrayType **)this + 23), v71);
  uint64_t v70 = llvm::PointerType::get();
  if (!*((void *)this + 307))
  {
    llvm::Type::getInt8PtrTy(*((llvm::Type **)this + 45), (llvm::LLVMContext *)0x41);
    uint64_t v9 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v86[0] = "agc.eMRT_tile_buffer_address";
    __int16 v87 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    uint64_t v10 = *((void *)this + 43);
    uint64_t v11 = AGCLLVMBuilder::buildGlobalMetadata(this, v9);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v10, v11);
    llvm::ValueHandleBase::operator=((AGCLLVMGen3TargetLowerer *)((char *)this + 2440), (uint64_t)v9);
  }
  if (!*((void *)this + 310))
  {
    uint64_t v12 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v86[0] = "agc.eMRT_spilled_partition_size";
    __int16 v87 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    uint64_t v13 = *((void *)this + 43);
    uint64_t v14 = AGCLLVMBuilder::buildGlobalMetadata(this, v12);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v13, v14);
    llvm::ValueHandleBase::operator=((AGCLLVMGen3TargetLowerer *)((char *)this + 2464), (uint64_t)v12);
  }
  if (!*((void *)this + 313))
  {
    uint64_t v15 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v86[0] = "agc.eMRT_max_concurrent_tiles";
    __int16 v87 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    uint64_t v16 = *((void *)this + 43);
    uint64_t v17 = AGCLLVMBuilder::buildGlobalMetadata(this, v15);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v16, v17);
    llvm::ValueHandleBase::operator=((AGCLLVMGen3TargetLowerer *)((char *)this + 2488), (uint64_t)v15);
  }
  long long v18 = (llvm::Type **)*((void *)this + 307);
  __int16 v87 = 257;
  uint64_t v19 = AGCLLVMBuilder::tryDeducePointeeType(v18, v8);
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v19, (uint64_t)v18, 0, (uint64_t)v86);
  int v20 = (llvm::Type **)*((void *)this + 310);
  __int16 v87 = 257;
  uint64_t v22 = AGCLLVMBuilder::tryDeducePointeeType(v20, v21);
  __int16 v67 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v22, (uint64_t)v20, 0, (uint64_t)v86);
  uint64_t v23 = (llvm::Type **)*((void *)this + 313);
  __int16 v87 = 257;
  char v25 = AGCLLVMBuilder::tryDeducePointeeType(v23, v24);
  uint64_t v26 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v25, (uint64_t)v23, 0, (uint64_t)v86);
  uint64_t v27 = *((void *)this + 24);
  __int16 v85 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 38, v26, v27, (uint64_t)v84);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  BOOL v90 = 0;
  __int16 v91 = 0;
  v88 = 0;
  __int16 v89 = 0;
  char v30 = 1;
  do
  {
    char v31 = v30;
    if (a6)
    {
      __int16 v87 = 257;
      uint64_t v32 = (llvm::Value *)llvm::ConstantInt::get();
      *(&v90 + v28) = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), a6, v32, (const llvm::Twine *)v86);
    }
    else
    {
      long long v81 = *(_OWORD *)((char *)this + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v82, (AGCLLVMGen3TargetLowerer *)((char *)this + 8));
      int v83 = *((_DWORD *)this + 26);
      *(&v90 + v28) = (llvm::Value *)(*(uint64_t (**)(AGCLLVMGen3TargetLowerer *, long long *, void, uint64_t))(*(void *)this + 256))(this, &v81, *((void *)this + 24), v29);
      if (v82) {
        llvm::MetadataTracking::untrack();
      }
    }
    long long v78 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v79, (AGCLLVMGen3TargetLowerer *)((char *)this + 8));
    int v80 = *((_DWORD *)this + 26);
    *(&v88 + v28) = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildLocalSize((uint64_t)this, (uint64_t)&v78, *((void *)this + 24), v29);
    if (v79) {
      llvm::MetadataTracking::untrack();
    }
    char v30 = 0;
    uint64_t v28 = 1;
    uint64_t v29 = 1;
  }
  while ((v31 & 1) != 0);
  int v33 = v88;
  __int16 v87 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v88, v89, (const llvm::Twine *)v86);
  __int16 v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  uint64_t v36 = llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), Mul, v35, (const llvm::Twine *)v86);
  uint64_t v37 = *((void *)this + 25);
  __int16 v85 = 257;
  long long v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, v36, v37, (uint64_t)v84);
  long long v75 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v76, (AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  int v77 = *((_DWORD *)this + 26);
  uint64_t v39 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMGen3TargetLowerer *, long long *, void))(*(void *)this
                                                                                                 + 1624))(this, &v75, *((void *)this + 24));
  if (v76) {
    llvm::MetadataTracking::untrack();
  }
  long long v72 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v73, (AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  int v74 = *((_DWORD *)this + 26);
  int v40 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMGen3TargetLowerer *, long long *, void))(*(void *)this
                                                                                                 + 1632))(this, &v72, *((void *)this + 24));
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v87 = 257;
  uint64_t v41 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v39, Cast, (const llvm::Twine *)v86);
  __int16 v87 = 257;
  uint64_t Add = llvm::IRBuilderBase::CreateAdd((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v41, v40, (const llvm::Twine *)v86);
  uint64_t v43 = *((void *)this + 25);
  __int16 v87 = 257;
  std::string v44 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, Add, v43, (uint64_t)v86);
  __int16 v85 = 257;
  uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v44, v67, (const llvm::Twine *)v84);
  uint64_t v46 = *((void *)this + 25);
  __int16 v87 = 257;
  uint64_t v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, (uint64_t)a5, v46, (uint64_t)v86);
  __int16 v85 = 257;
  unsigned int v48 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v47, v38, (const llvm::Twine *)v84);
  __int16 v87 = 257;
  uint64_t v49 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v91, v33, (const llvm::Twine *)v86);
  __int16 v87 = 257;
  __int16 v50 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v49, v90, (const llvm::Twine *)v86);
  std::string v51 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  uint64_t v52 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v50, v51, (const llvm::Twine *)v86);
  uint64_t v53 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  uint64_t v54 = llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v52, v53, (const llvm::Twine *)v86);
  __int16 v87 = 257;
  uint64_t v55 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v45, v48, (const llvm::Twine *)v86);
  uint64_t v56 = *((void *)this + 25);
  __int16 v87 = 257;
  uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, v54, v56, (uint64_t)v86);
  __int16 v85 = 257;
  unsigned int v58 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v55, v57, (const llvm::Twine *)v84);
  int v59 = (llvm::Type *)*((void *)this + 23);
  __int16 v87 = 257;
  uint64_t GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v59, AlignedLoad, v58, (const llvm::Twine *)v86);
  uint64_t v61 = (llvm::Type *)*((void *)this + 23);
  uint64_t v62 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v87 = 257;
  uint64_t v63 = llvm::IRBuilderBase::CreateGEP((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v61, GEP, v62, (const llvm::Twine *)v86);
  __int16 v87 = 257;
  uint64_t v64 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, v63, v70, (uint64_t)v86);
  llvm::ArrayType::get(*((llvm::ArrayType **)this + 23), v71);
  return v64;
}

uint64_t AGCLLVMGen3TargetLowerer::buildLocalSize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  long long v20 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.agx2.threadgroup.", "");
  llvm::SmallVectorTemplateBase<char,true>::push_back(&v19, aXyz[a4]);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, ".size", "");
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v9 = a1 + 8;
  __int16 v15 = 257;
  uint64_t v10 = llvm::IRBuilderBase::CreateCall(v9, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  unsigned char v13[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v9, 38, (uint64_t)v10, a3, (uint64_t)v13);
  if (v19 != v21) {
    free(v19);
  }
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildWriteOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL,llvm::Value *,BOOL,BOOL)::$_1::operator()(void *a1)
{
  v1 = a1;
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  int v2 = (void *)*a1;
  if ((*(uint64_t (**)(void, void, void, uint64_t, uint64_t, void))(*(void *)*a1 + 1592))(*a1, *(unsigned __int16 *)a1[1], *(void *)(a1[1] + 8), 1, 1, *(unsigned __int8 *)a1[2]))
  {
    if ((*(_DWORD *)(*(void *)(v1[1] + 8) + 8) & 0xFE) == 0x12)
    {
      llvm::VectorType::get();
      Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
      if (*(_DWORD *)(*(void *)(v1[1] + 8) + 32))
      {
        unint64_t v4 = 0;
        do
        {
          uint64_t v5 = *(llvm::Value **)v1[3];
          __int16 v86 = 257;
          uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v2 + 1), v5, v6, (const llvm::Twine *)v85);
          int v8 = (llvm::Type *)v2[19];
          __int16 v96 = 257;
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(v2 + 1), Element, v8, (const llvm::Twine *)v94);
          __int16 v86 = 257;
          uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
          Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v2 + 1), InsertElement, FPTrunc, v10, (const llvm::Twine *)v85);
          ++v4;
        }
        while (v4 < *(unsigned int *)(*(void *)(v1[1] + 8) + 32));
      }
      *(void *)v1[3] = InsertElement;
    }
    else
    {
      uint64_t v11 = *(llvm::Value **)v1[3];
      uint64_t v12 = (llvm::Type *)v2[19];
      __int16 v86 = 257;
      *(void *)v1[3] = llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(v2 + 1), v11, v12, (const llvm::Twine *)v85);
    }
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v14 = (llvm::IRBuilderBase *)(v2 + 1);
  __int16 v86 = 257;
  __int16 v15 = llvm::IRBuilderBase::CreateCall((uint64_t)(v2 + 1), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v85);
  uint64_t v16 = v2[24];
  __int16 v96 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v2 + 1), 38, (uint64_t)v15, v16, (uint64_t)v94);
  int v18 = *(llvm::Value **)v1[4];
  if (!v18) {
    int v18 = *(llvm::Value **)v1[5];
  }
  if (!*(unsigned char *)v1[6])
  {
    __int16 v86 = 257;
    int v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v2 + 1), v18, Cast, (const llvm::Twine *)v85);
  }
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v86 = 257;
  long long v20 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v2 + 1), v18, v19, (const llvm::Twine *)v85);
  uint64_t v21 = v1[1];
  uint64_t v22 = *(unsigned __int16 *)(v21 + 2);
  uint64_t v23 = *(unsigned __int16 *)(v21 + 6);
  uint64_t v24 = *(unsigned __int16 *)v1[7];
  char v25 = *(llvm::Value **)v1[8];
  uint64_t v26 = *(llvm::Value **)v1[9];
  __int16 v86 = 257;
  uint64_t Sub = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(v2 + 1), v25, v26, (const llvm::Twine *)v85);
  uint64_t GEP = (uint64_t *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*v2 + 1616))(v2, v22, v23, v24, Sub, *(void *)v1[10]);
  uint64_t v68 = v29;
  char v30 = (llvm::Type **)v2[307];
  __int16 v86 = 257;
  char v31 = AGCLLVMBuilder::tryDeducePointeeType(v30, v29);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v2 + 1, v31, (uint64_t)v30, 0, (uint64_t)v85);
  uint64_t v33 = *GEP;
  __int16 v96 = 257;
  llvm::IRBuilderBase::CreateCast((uint64_t)(v2 + 1), 49, AlignedLoad, v33, (uint64_t)v94);
  long long v78 = *(_OWORD *)(v2 + 7);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v79, (llvm::IRBuilderBase *)(v2 + 1));
  int v80 = *((_DWORD *)v2 + 26);
  uint64_t v34 = *(void *)v1[4];
  if (!v34) {
    uint64_t v34 = *(void *)v1[5];
  }
  uint64_t result = (*(uint64_t (**)(void *, long long *, uint64_t, void, void))(*v2 + 1640))(v2, &v78, v34, *(unsigned __int8 *)v1[6], *(void *)v1[10]);
  if (v79) {
    uint64_t result = llvm::MetadataTracking::untrack();
  }
  if (*(_WORD *)v1[7])
  {
    int v36 = 0;
    uint64_t v65 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v66 = *MEMORY[0x1E4FBA418];
    __int16 v67 = v1;
    uint64_t v69 = v2;
    uint64_t v70 = (llvm::IRBuilderBase *)(v2 + 1);
    do
    {
      int v74 = v36;
      uint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v86 = 257;
      long long v38 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v14, v20, v37, (const llvm::Twine *)v85);
      uint64_t v39 = llvm::ConstantInt::get();
      __int16 v96 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v14, 32, v38, v39, (uint64_t)v94);
      __int16 v86 = 257;
      uint64_t Select = llvm::IRBuilderBase::CreateSelect();
      int v40 = (unsigned __int16 *)v1[1];
      uint64_t v41 = *(llvm::Value **)v1[3];
      (*(uint64_t (**)(void *, void, void, uint64_t, uint64_t, void))(*v2 + 1592))(v2, *v40, *((void *)v40 + 1), 1, 1, 0);
      int8x8_t v42 = (int8x8_t)v40[2];
      int v77 = v41;
      long long v75 = (llvm::Value *)GEP;
      uint64_t v76 = v20;
      uint64_t v72 = llvm::ConstantInt::get();
      int v71 = vaddlv_u8((uint8x8_t)vcnt_s8(v42));
      llvm::FixedVectorType::get();
      uint64_t v43 = (llvm::Value *)llvm::UndefValue::get();
      unsigned int v44 = v40[2];
      if (v40[2])
      {
        int v45 = 0;
        do
        {
          __int16 v86 = 257;
          uint64_t v46 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t v47 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v70, v77, v46, (const llvm::Twine *)v85);
          __int16 v96 = 257;
          unsigned int v48 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v70, v43, v47, v48, (const llvm::Twine *)v94);
          ++v45;
          v44 ^= 1 << __clz(__rbit32(v44));
        }
        while (v44);
      }
      if (v71 == 1)
      {
        __int16 v86 = 257;
        int v2 = v69;
        uint64_t v49 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v14 = v70;
        uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v70, v43, v49, (const llvm::Twine *)v85);
        v1 = v67;
        int v50 = v74;
      }
      else
      {
        v1 = v67;
        int v50 = v74;
        int v2 = v69;
        uint64_t v14 = v70;
      }
      unsigned int v51 = *(_DWORD *)(*(void *)Select + 8);
      if ((v51 & 0xFE) == 0x12) {
        unsigned int v51 = *(_DWORD *)(**(void **)(*(void *)Select + 16) + 8);
      }
      uint64_t Int8PtrTy = llvm::Type::getInt8PtrTy((llvm::Type *)v2[45], (llvm::LLVMContext *)(v51 >> 8));
      __int16 v86 = 257;
      uint64_t v53 = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v14, 49, Select, Int8PtrTy, (uint64_t)v85);
      std::string::basic_string[abi:nn180100]<0>(&v90, (char *)v2[167]);
      v94[0] = v95;
      v94[1] = (void *)0x600000000;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v94, v2[24]);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v94, v2[24]);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v94, *(void *)v43);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v94, *v53);
      __int16 v91 = v93;
      uint64_t v92 = 0x600000000;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v91, v72);
      uint64_t v54 = llvm::ConstantInt::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v91, v54);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v91, (uint64_t)v43);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v91, (uint64_t)v53);
      uint64_t v55 = *(llvm::Type **)v77;
      std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v85);
      uint64_t v56 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)"xsz", 3);
      llvm::Type::getScalarSizeInBits(v55);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)".", 1);
      AGCLLVMGen3TargetLowerer::getWriteSuffix(&__p, v2, *(void *)v43);
      if ((v83 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v83 & 0x80u) == 0) {
        uint64_t v58 = v83;
      }
      else {
        uint64_t v58 = v82;
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)p_p, v58);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)".p", 2);
      int v59 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)"i8", 2);
      if ((char)v83 < 0) {
        operator delete(__p);
      }
      std::stringbuf::str();
      if ((v83 & 0x80u) == 0) {
        uint64_t v60 = (const std::string::value_type *)&__p;
      }
      else {
        uint64_t v60 = (const std::string::value_type *)__p;
      }
      if ((v83 & 0x80u) == 0) {
        std::string::size_type v61 = v83;
      }
      else {
        std::string::size_type v61 = v82;
      }
      std::string::append(&v90, v60, v61);
      if ((char)v83 < 0) {
        operator delete(__p);
      }
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      __int16 v84 = 257;
      llvm::IRBuilderBase::CreateCall((uint64_t)v14, *(void *)(v62 + 24), v62, (uint64_t)v91, v92, (uint64_t)&__p);
      v85[0] = v66;
      *(void *)((char *)v85 + *(void *)(v66 - 24)) = v65;
      v85[1] = MEMORY[0x1E4FBA470] + 16;
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1CB7A0710](&v89);
      if (v91 != v93) {
        free(v91);
      }
      if (v94[0] != v95) {
        free(v94[0]);
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      uint64_t v63 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v86 = 257;
      uint64_t GEP = (uint64_t *)llvm::IRBuilderBase::CreateGEP(v14, v68, v75, v63, (const llvm::Twine *)v85);
      uint64_t v64 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v86 = 257;
      uint64_t result = llvm::IRBuilderBase::CreateLShr(v14, v76, v64, (const llvm::Twine *)v85);
      long long v20 = (llvm::Value *)result;
      int v36 = v50 + 1;
    }
    while (*(unsigned __int16 *)v1[7] > v36);
  }
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::buildReadOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Type *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_1::operator()(uint64_t a1)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  int v2 = *(uint64_t **)a1;
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v31 = 257;
  unint64_t v4 = llvm::IRBuilderBase::CreateCall((uint64_t)(v2 + 1), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v30);
  uint64_t v5 = v2[24];
  __int16 v29 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v2 + 1), 38, (uint64_t)v4, v5, (uint64_t)v28);
  uint64_t v7 = **(llvm::Value ***)(a1 + 8);
  if (!v7) {
    uint64_t v7 = **(llvm::Value ***)(a1 + 16);
  }
  if (!**(unsigned char **)(a1 + 24))
  {
    __int16 v31 = 257;
    uint64_t v7 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v2 + 1), v7, Cast, (const llvm::Twine *)v30);
  }
  int v8 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v31 = 257;
  uint64_t v9 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v2 + 1), v7, v8, (const llvm::Twine *)v30);
  uint64_t v10 = llvm::ConstantInt::get();
  __int16 v31 = 257;
  llvm::IRBuilderBase::CreateICmp(v2 + 1, 32, v9, v10, (uint64_t)v30);
  uint64_t v11 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v2, (uint64_t)"llvm.cttz.i16", 13, v2[24], v2[24], v2[22]);
  llvm::ConstantInt::get();
  v32[0] = v9;
  v32[1] = llvm::ConstantInt::get();
  __int16 v31 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)(v2 + 1), *(void *)(v11 + 24), v11, (uint64_t)v32, 2, (uint64_t)v30);
  __int16 v29 = 257;
  uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(unsigned __int16 *)(v13 + 2);
  uint64_t v15 = *(unsigned __int16 *)(v13 + 6);
  uint64_t v16 = **(unsigned __int16 **)(a1 + 32);
  uint64_t v17 = **(llvm::Value ***)(a1 + 48);
  int v18 = **(llvm::Value ***)(a1 + 56);
  __int16 v31 = 257;
  uint64_t Sub = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(v2 + 1), v17, v18, (const llvm::Twine *)v30);
  long long v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*v2 + 1616))(v2, v14, v15, v16, Sub, **(void **)(a1 + 64));
  uint64_t v21 = *(unsigned __int16 **)(a1 + 40);
  uint64_t v22 = **(void **)(a1 + 72);
  __int16 v31 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v2 + 1), v23, v20, Select, (const llvm::Twine *)v30);
  EMRTTileBuffer = (llvm::Constant **)AGCLLVMGen3TargetLowerer::buildLoadEMRTTileBuffer((AGCLLVMGen3TargetLowerer *)v2, v21, v22, GEP);
  llvm::Constant::getNullValue(*EMRTTileBuffer, v26);
  __int16 v31 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildLoadEMRTTileBuffer(AGCLLVMGen3TargetLowerer *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  v41[3] = *MEMORY[0x1E4F143B8];
  char v7 = (*(uint64_t (**)(AGCLLVMGen3TargetLowerer *, void, void, void, void, void))(*(void *)a1 + 1592))(a1, *a2, *((void *)a2 + 1), 0, 0, 0);
  if (v7)
  {
    int v8 = (uint64_t *)((char *)a1 + 152);
  }
  else
  {
    uint64_t v9 = *((void *)a2 + 1);
    if ((*(_DWORD *)(v9 + 8) & 0xFE) != 0x12) {
      goto LABEL_6;
    }
    int v8 = *(uint64_t **)(v9 + 16);
  }
  uint64_t v9 = *v8;
LABEL_6:
  uint64_t v10 = (llvm::Type *)v9;
  if (a2[3] != 1) {
    uint64_t v10 = (llvm::Type *)llvm::FixedVectorType::get();
  }
  uint64_t v11 = llvm::ConstantInt::get();
  unsigned int v12 = *(_DWORD *)(*(void *)a4 + 8);
  if ((v12 & 0xFE) == 0x12) {
    unsigned int v12 = *(_DWORD *)(**(void **)(*(void *)a4 + 16) + 8);
  }
  uint64_t Int8PtrTy = llvm::Type::getInt8PtrTy(*((llvm::Type **)a1 + 45), (llvm::LLVMContext *)(v12 >> 8));
  __int16 v32 = 257;
  uint64_t Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 49, a4, Int8PtrTy, (uint64_t)v31);
  std::string::basic_string[abi:nn180100]<0>(&v36, *((char **)a1 + 166));
  v40[0] = v41;
  v40[1] = (void *)0x300000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v40, *((void *)a1 + 24));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v40, *((void *)a1 + 24));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v40, *Cast);
  uint64_t v37 = v39;
  uint64_t v38 = 0x300000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, v11);
  uint64_t v15 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, v15);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, (uint64_t)Cast);
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v31);
  uint64_t v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"xsz", 3);
  llvm::Type::getScalarSizeInBits(v10);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)".", 1);
  if (*((void *)a1 + 24) == v9)
  {
    uint64_t v17 = "i16";
  }
  else if (*((void *)a1 + 25) == v9)
  {
    uint64_t v17 = "i32";
  }
  else if (*((void *)a1 + 19) == v9)
  {
    uint64_t v17 = "f16";
  }
  else
  {
    uint64_t v17 = "f32";
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v17);
  if ((v29 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v29 & 0x80u) == 0) {
    uint64_t v19 = v29;
  }
  else {
    uint64_t v19 = v28;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)p_p, v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)".p", 2);
  long long v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"i8", 2);
  if ((char)v29 < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  if ((v29 & 0x80u) == 0) {
    uint64_t v21 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v21 = (const std::string::value_type *)__p;
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v22 = v29;
  }
  else {
    std::string::size_type v22 = v28;
  }
  std::string::append(&v36, v21, v22);
  if ((char)v29 < 0) {
    operator delete(__p);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  __int16 v30 = 257;
  uint64_t v24 = llvm::IRBuilderBase::CreateCall((uint64_t)a1 + 8, *(void *)(v23 + 24), v23, (uint64_t)v37, v38, (uint64_t)&__p);
  char v25 = AGCLLVMGen3TargetLowerer::convertFromF16(a1, v24, v7 & 1);
  v31[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v31[1] = MEMORY[0x1E4FBA470] + 16;
  if (v34 < 0) {
    operator delete(v33);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CB7A0710](&v35);
  if (v37 != v39) {
    free(v37);
  }
  if (v40[0] != v41) {
    free(v40[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  return v25;
}

uint64_t AGCLLVMGen3TargetLowerer::buildSimdShuffleDown(uint64_t a1, long long *a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *((_DWORD *)a2 + 6);
  uint64_t v8 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(a1, (uint64_t)&v10, a3, a4, 2, *(_DWORD *)(a1 + 872));
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(uint64_t a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4, int a5, int a6)
{
  int v26 = a6;
  int v27 = a5;
  long long v23 = *(_OWORD *)a2;
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v23);
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  v22[0] = &v26;
  v22[1] = a1;
  v22[2] = &v27;
  long long v10 = *a3;
  int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a3);
  if ((*((_DWORD *)v10 + 2) & 0xFE) == 0x12) {
    int v12 = *((_DWORD *)v10 + 8);
  }
  else {
    int v12 = 1;
  }
  if ((v12 * ScalarSizeInBits) < 0x21) {
    return AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *,AGCLLVMGen3TargetLowerer::SimdShuffleFunction,unsigned int)::$_0::operator()((uint64_t)v22, a3, a4);
  }
  Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
  if (*((_DWORD *)*a3 + 8))
  {
    unint64_t v14 = 0;
    do
    {
      __int16 v21 = 257;
      uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)a3, v15, (const llvm::Twine *)v20);
      uint64_t v17 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *,AGCLLVMGen3TargetLowerer::SimdShuffleFunction,unsigned int)::$_0::operator()((uint64_t)v22, Element, a4);
      __int16 v21 = 257;
      int v18 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v17, v18, (const llvm::Twine *)v20);
      ++v14;
    }
    while (v14 < *((unsigned int *)*a3 + 8));
  }
  return (uint64_t)InsertElement;
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *,AGCLLVMGen3TargetLowerer::SimdShuffleFunction,unsigned int)::$_0::operator()(uint64_t a1, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = (llvm::IRBuilderBase *)(v6 + 8);
  if (**(_DWORD **)a1 == 4)
  {
    long long v46 = *(_OWORD *)(v6 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v47, (llvm::IRBuilderBase *)(v6 + 8));
    int v48 = *(_DWORD *)(v6 + 104);
    uint64_t v8 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildQuadElement(v6, (uint64_t)&v46, *(void *)(v6 + 192));
    if (!v47) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  long long v43 = *(_OWORD *)(v6 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v44, (llvm::IRBuilderBase *)(v6 + 8));
  int v45 = *(_DWORD *)(v6 + 104);
  uint64_t v8 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, void))(*(void *)v6 + 1536))(v6, &v43, *(void *)(v6 + 192));
  if (v44) {
LABEL_3:
  }
    llvm::MetadataTracking::untrack();
LABEL_4:
  long long v40 = *(_OWORD *)(v6 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v41, (llvm::IRBuilderBase *)(v6 + 8));
  int v42 = *(_DWORD *)(v6 + 104);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildSimdGroupScratchMemoryPtr(v6, (uint64_t)&v40, v8);
  if (v41) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v10 = llvm::PointerType::get();
  __int16 v39 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v6 + 8, 49, v9, v10, (uint64_t)v38);
  int v12 = *a2;
  __int16 v39 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v6 + 8), v12, Cast, v8, (const llvm::Twine *)v38);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(v6 + 8), a2, GEP, 0);
  long long v35 = *(_OWORD *)(v6 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v36, (llvm::IRBuilderBase *)(v6 + 8));
  int v37 = *(_DWORD *)(v6 + 104);
  AGCLLVMGen3TargetLowerer::buildSimdBarrier(v6, (uint64_t)&v35);
  if (v36) {
    llvm::MetadataTracking::untrack();
  }
  switch(**(_DWORD **)(a1 + 16))
  {
    case 0:
      break;
    case 1:
      __int16 v39 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)(v6 + 8), 36, (llvm::CmpInst **)v8, (uint64_t)a3, (uint64_t)v38);
      __int16 v34 = 257;
      llvm::IRBuilderBase::CreateSub(v7, v8, a3, (const llvm::Twine *)v33);
      __int16 v32 = 257;
      goto LABEL_14;
    case 2:
      __int16 v39 = 257;
      uint64_t Add = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v6 + 8), v8, a3, (const llvm::Twine *)v38);
      uint64_t v15 = llvm::ConstantInt::get();
      __int16 v39 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)(v6 + 8), 34, Add, v15, (uint64_t)v38);
      __int16 v34 = 257;
LABEL_14:
      uint64_t Select = llvm::IRBuilderBase::CreateSelect();
      goto LABEL_19;
    case 3:
      __int16 v39 = 257;
      uint64_t Select = llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)(v6 + 8), v8, a3, (const llvm::Twine *)v38);
      goto LABEL_19;
    case 4:
      uint64_t v17 = *(void *)(v6 + 200);
      __int16 v39 = 257;
      int v18 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v6 + 8, 40, (uint64_t)v8, v17, (uint64_t)v38);
      uint64_t v19 = *(void *)(v6 + 200);
      __int16 v34 = 257;
      long long v20 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v6 + 8, 40, (uint64_t)a3, v19, (uint64_t)v33);
      __int16 v32 = 257;
      uint64_t Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(v6 + 8), v18, v20, (const llvm::Twine *)v31);
      std::string::size_type v22 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v30 = 257;
      long long v23 = (const llvm::Twine *)&v29;
      goto LABEL_18;
    case 5:
      __int16 v39 = 257;
      uint64_t Sub = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v6 + 8), v8, a3, (const llvm::Twine *)v38);
      std::string::size_type v22 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v34 = 257;
      long long v23 = (const llvm::Twine *)v33;
LABEL_18:
      uint64_t Select = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v6 + 8), Sub, v22, v23);
LABEL_19:
      a3 = (llvm::Value *)Select;
      break;
    default:
      a3 = 0;
      break;
  }
  uint64_t v24 = *a2;
  __int16 v39 = 257;
  int v25 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v7, v24, Cast, a3, (const llvm::Twine *)v38);
  __int16 v39 = 257;
  int v27 = AGCLLVMBuilder::tryDeducePointeeType(v25, v26);
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v7, v27, (uint64_t)v25, 0, (uint64_t)v38);
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  long long v18 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.quad.element", "");
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v7 = a1 + 8;
  __int16 v13 = 257;
  uint64_t v8 = llvm::IRBuilderBase::CreateCall(v7, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19) {
    free(v17);
  }
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildSimdGroupScratchMemoryPtr(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  long long v21 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  if (v22) {
    llvm::MetadataTracking::track();
  }
  int v23 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v21);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = *(void *)(a1 + 2528);
  if (!v6)
  {
    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 184), (llvm::Type *)0x1000);
    uint64_t v7 = llvm::User::operator new((llvm::User *)0x58);
    llvm::UndefValue::get();
    v24[0] = "agc.simd_permute_emulation_scratchpad";
    __int16 v25 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setAlignment();
    *(_DWORD *)(v7 + 32) = *(_DWORD *)(v7 + 32) & 0xFFFFFF3F | 0x80;
    llvm::GlobalObject::setSection();
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 2512), v7);
    uint64_t v6 = *(void *)(a1 + 2528);
  }
  uint64_t v8 = llvm::PointerType::get();
  __int16 v25 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v6, v8, (uint64_t)v24);
  long long v18 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v19, (llvm::IRBuilderBase *)(a1 + 8));
  int v20 = *(_DWORD *)(a1 + 104);
  uint64_t v10 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildLocalLinearID(a1, (uint64_t)&v18, *(void *)(a1 + 192));
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v25 = 257;
  uint64_t Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v10, a3, (const llvm::Twine *)v24);
  int v12 = *(llvm::Type **)(a1 + 184);
  __int16 v13 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v25 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), Sub, v13, (const llvm::Twine *)v24);
  __int16 v17 = 257;
  return llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v12, Cast, Mul, (const llvm::Twine *)v16);
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildSimdBarrier(uint64_t a1, uint64_t a2)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  v13[0] = llvm::ConstantInt::get();
  v13[1] = llvm::ConstantInt::get();
  uint64_t v4 = *(void *)(a1 + 952);
  if (v4) {
    size_t v5 = strlen(*(const char **)(a1 + 952));
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v4, v5, *(void *)(a1 + 144), *(void *)(a1 + 192), *(void *)(a1 + 192));
  __int16 v9 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v6 + 24), v6, (uint64_t)v13, 2, (uint64_t)v8);
}

uint64_t AGCLLVMGen3TargetLowerer::buildLocalLinearID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  __int16 v17 = v19;
  long long v18 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.linear.id", "");
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v7 = a1 + 8;
  __int16 v13 = 257;
  uint64_t v8 = llvm::IRBuilderBase::CreateCall(v7, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19) {
    free(v17);
  }
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildSimdShuffleUp(uint64_t a1, long long *a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *((_DWORD *)a2 + 6);
  uint64_t v8 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(a1, (uint64_t)&v10, a3, a4, 1, *(_DWORD *)(a1 + 872));
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadShuffleDown(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[295], a3, a4);
}

uint64_t AGCLLVMGen3TargetLowerer::buildPermute(AGCLLVMGen3TargetLowerer *this, char *a2, llvm::Type **a3, llvm::Value *a4)
{
  size_t v5 = (llvm::Value *)a3;
  uint64_t v8 = *a3;
  int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a3);
  switch(ScalarSizeInBits)
  {
    case 32:
      return AGCLLVMGen3TargetLowerer::buildPermute32(this, a2, v5, a4);
    case 16:
      return AGCLLVMGen3TargetLowerer::buildPermute16(this, a2, v5, a4);
    case 8:
      if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x12)
      {
        int v10 = *((_DWORD *)v8 + 8);
        if (v10)
        {
          unsigned int v11 = v10 + 1;
          size_t v5 = AGCLLVMBuilder::extendVector(this, v5, v10 + 1);
        }
        else
        {
          unsigned int v11 = *((_DWORD *)v8 + 8);
        }
        if (v11 < 4) {
          uint64_t v23 = *((void *)this + 24);
        }
        else {
          uint64_t v23 = llvm::FixedVectorType::get();
        }
        __int16 v29 = 257;
        uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v5, v23, (uint64_t)v28);
        uint64_t v25 = AGCLLVMGen3TargetLowerer::buildPermute16(this, a2, Cast, a4);
        uint64_t v26 = llvm::FixedVectorType::get();
        __int16 v29 = 257;
        int v27 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, v25, v26, (uint64_t)v28);
        if ((v10 & 1) == 0) {
          goto LABEL_22;
        }
        uint64_t Element = AGCLLVMBuilder::subrangeVector(this, v27, 0, v11 - 1, 1);
      }
      else
      {
        __int16 v13 = (llvm::Value *)llvm::UndefValue::get();
        __int16 v29 = 257;
        long long v14 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = llvm::IRBuilderBase::CreateInsertElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v13, v5, v14, (const llvm::Twine *)v28);
        uint64_t v16 = *((void *)this + 24);
        __int16 v29 = 257;
        __int16 v17 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, InsertElement, v16, (uint64_t)v28);
        uint64_t v18 = AGCLLVMGen3TargetLowerer::buildPermute16(this, a2, v17, a4);
        uint64_t v19 = *((void *)this + 29);
        __int16 v29 = 257;
        int v20 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, v18, v19, (uint64_t)v28);
        __int16 v29 = 257;
        long long v21 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v20, v21, (const llvm::Twine *)v28);
      }
      int v27 = (llvm::Value *)Element;
LABEL_22:
      __int16 v29 = 257;
      return llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v27, (uint64_t)v8, (uint64_t)v28);
    default:
      return 0;
  }
}

uint64_t AGCLLVMGen3TargetLowerer::buildPermute16(AGCLLVMGen3TargetLowerer *this, char *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)a3;
  std::string::basic_string[abi:nn180100]<0>(&v32, a2);
  long long v9 = std::string::append(&v32, ".u.i16");
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  uint64_t v35 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (v35 >= 0) {
    unsigned int v11 = __p;
  }
  else {
    unsigned int v11 = (void **)__p[0];
  }
  if (v35 >= 0) {
    uint64_t v12 = HIBYTE(v35);
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  uint64_t v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this, (uint64_t)v11, v12, *((void *)this + 24), *((void *)this + 24), *((void *)this + 24));
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
  {
    unsigned int v14 = *(_DWORD *)(v8 + 32);
    if (v14 < 4)
    {
      uint64_t v15 = *((void *)this + 25);
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v15 = llvm::FixedVectorType::get();
      if (v14)
      {
LABEL_12:
        __int16 v33 = 257;
        uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), a3, v16, (const llvm::Twine *)&v32);
        uint64_t v18 = *((void *)this + 24);
        __int16 v33 = 257;
        uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, Element, v18, (uint64_t)&v32);
        int v37 = a4;
        __int16 v33 = 257;
        uint64_t v19 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v13 + 24), v13, (uint64_t)&Cast, 2, (uint64_t)&v32);
        uint64_t v20 = AGCLLVMBuilder::subrangeVector(this, a3, 0, v14 - 1, 1);
        __int16 v33 = 257;
        long long v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, v20, v15, (uint64_t)&v32);
        uint64_t v22 = AGCLLVMGen3TargetLowerer::buildPermute32(this, a2, v21, a4);
        uint64_t v23 = llvm::FixedVectorType::get();
        __int16 v33 = 257;
        uint64_t v24 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, v22, v23, (uint64_t)&v32);
        uint64_t v25 = AGCLLVMBuilder::extendVector(this, v24, v14);
        __int16 v33 = 257;
        uint64_t v26 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = llvm::IRBuilderBase::CreateInsertElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v25, v19, v26, (const llvm::Twine *)&v32);
        goto LABEL_16;
      }
    }
    __int16 v33 = 257;
    __int16 v29 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)a3, v15, (uint64_t)&v32);
    Insertuint64_t Element = AGCLLVMGen3TargetLowerer::buildPermute32(this, a2, v29, a4);
  }
  else
  {
    uint64_t v28 = *((void *)this + 24);
    __int16 v33 = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)a3, v28, (uint64_t)&v32);
    int v37 = a4;
    __int16 v33 = 257;
    Insertuint64_t Element = (uint64_t)llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v13 + 24), v13, (uint64_t)&Cast, 2, (uint64_t)&v32);
  }
LABEL_16:
  __int16 v33 = 257;
  uint64_t v30 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, InsertElement, v8, (uint64_t)&v32);
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  return v30;
}

uint64_t AGCLLVMGen3TargetLowerer::buildPermute32(AGCLLVMGen3TargetLowerer *this, char *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)a3;
  std::string::basic_string[abi:nn180100]<0>(&v24, a2);
  uint64_t v8 = std::string::append(&v24, ".u.i32");
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  uint64_t v27 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v27 >= 0) {
    std::string::size_type v10 = __p;
  }
  else {
    std::string::size_type v10 = (void **)__p[0];
  }
  if (v27 >= 0) {
    uint64_t v11 = HIBYTE(v27);
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  uint64_t v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this, (uint64_t)v10, v11, *((void *)this + 25), *((void *)this + 25), *((void *)this + 24));
  if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
  {
    *(_OWORD *)uint64_t v30 = 0u;
    long long v31 = 0u;
    unsigned int v13 = AGCLLVMBuilder::unboxVector(this, a3, v30);
    llvm::FixedVectorType::get();
    Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
    if (v13)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v13;
      do
      {
        uint64_t Cast = 0;
        __int16 v29 = 0;
        __int16 v17 = v30[v15];
        uint64_t v18 = *((void *)this + 25);
        __int16 v25 = 257;
        uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v17, v18, (uint64_t)&v24);
        __int16 v29 = a4;
        __int16 v25 = 257;
        uint64_t v19 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v12 + 24), v12, (uint64_t)&Cast, 2, (uint64_t)&v24);
        __int16 v25 = 257;
        uint64_t v20 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), InsertElement, v19, v20, (const llvm::Twine *)&v24);
        ++v15;
      }
      while (v16 != v15);
    }
  }
  else
  {
    uint64_t v21 = *((void *)this + 25);
    __int16 v25 = 257;
    v30[0] = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)a3, v21, (uint64_t)&v24);
    v30[1] = a4;
    __int16 v25 = 257;
    Insertuint64_t Element = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(void *)(v12 + 24), v12, (uint64_t)v30, 2, (uint64_t)&v24);
  }
  __int16 v25 = 257;
  uint64_t v22 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)InsertElement, v7, (uint64_t)&v24);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  return v22;
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadShuffleUp(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[294], a3, a4);
}

uint64_t AGCLLVMGen3TargetLowerer::buildMemoryCacheCtlFromCoherenceScope()
{
  return llvm::ConstantInt::get();
}

uint64_t AGCLLVMGen3TargetLowerer::buildSimdGroupIndexInThreadgroup(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = (llvm::IRBuilderBase *)(a1 + 8);
  long long v13 = *a2;
  uint64_t v14 = *((void *)a2 + 2);
  if (v14) {
    llvm::MetadataTracking::track();
  }
  int v15 = *((_DWORD *)a2 + 6);
  uint64_t v7 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildLocalLinearID(a1, (uint64_t)&v13, a3);
  uint64_t v8 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v12 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr(v6, v7, v8, (const llvm::Twine *)v11);
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  return LShr;
}

uint64_t AGCLLVMGen3TargetLowerer::buildThreadIndexInSimdGroup(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = (llvm::IRBuilderBase *)(a1 + 8);
  long long v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *((_DWORD *)a2 + 6);
  uint64_t v7 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildLocalLinearID(a1, (uint64_t)&v15, *(void *)(a1 + 200));
  uint64_t v8 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v14 = 257;
  uint64_t v9 = llvm::IRBuilderBase::CreateAnd(v6, v7, v8, (const llvm::Twine *)v13);
  v12[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v6, 38, v9, a3, (uint64_t)v12);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  return Cast;
}

void AGCLLVMGen3TargetLowerer::buildWriteImageBlockIntrinsic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v49[16] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&v44, *(char **)(a1 + 1920));
  if (a5) {
    std::string::append(&v44, ".subset");
  }
  std::string::append(&v44, ".coords");
  v48[0] = v49;
  v48[1] = (void *)0x1000000000;
  int v45 = v47;
  uint64_t v46 = 0x1000000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(void *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, a3);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(void *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, a4);
  uint64_t v10 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, v10);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = llvm::PointerType::get();
  __int16 v43 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v11, v12, (uint64_t)v42);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, Cast);
  uint64_t v14 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, v14);
  uint64_t v15 = *(void *)(a2 + 32);
  if (!v15)
  {
    uint64_t v16 = llvm::ConstantInt::get();
    __int16 v43 = 257;
    uint64_t v15 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v16, v14, (uint64_t)v42);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, v15);
  switch(*(_DWORD *)(a2 + 4))
  {
    case 0:
      std::string::append(&v44, ".1d");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(void *)(a1 + 200));
      int v17 = *(llvm::Type ***)(a2 + 136);
      uint64_t v18 = *(llvm::Type **)(a1 + 200);
      goto LABEL_11;
    case 1:
      uint64_t v19 = ".2d";
      goto LABEL_9;
    case 2:
      uint64_t v19 = ".cubestf";
LABEL_9:
      std::string::append(&v44, v19);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(void *)(a1 + 248));
      int v17 = *(llvm::Type ***)(a2 + 136);
      uint64_t v18 = *(llvm::Type **)(a1 + 248);
      goto LABEL_11;
    case 3:
      std::string::append(&v44, ".3d");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(void *)(a1 + 312));
      int v17 = *(llvm::Type ***)(a2 + 136);
      uint64_t v18 = *(llvm::Type **)(a1 + 312);
LABEL_11:
      __int16 v43 = 257;
      ZExtOrBituint64_t Cast = llvm::IRBuilderBase::CreateZExtOrBitCast((llvm::IRBuilderBase *)(a1 + 8), v17, v18, (const llvm::Twine *)v42);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, (uint64_t)ZExtOrBitCast);
      break;
    default:
      break;
  }
  if (*(void *)(a2 + 152))
  {
    std::string::append(&v44, ".array");
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(void *)(a1 + 192));
    uint64_t v21 = *(void *)(a2 + 152);
    uint64_t v22 = *(void *)(a1 + 192);
    __int16 v43 = 257;
    uint64_t v23 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v21, v22, (uint64_t)v42);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, v23);
  }
  if (*(void *)(a2 + 232))
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(void *)(a1 + 192));
    uint64_t v24 = *(void *)(a2 + 232);
    uint64_t v25 = *(void *)(a1 + 192);
    __int16 v43 = 257;
    uint64_t v26 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v24, v25, (uint64_t)v42);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, v26);
  }
  if (*(void *)(a2 + 168))
  {
    std::string::append(&v44, ".lod");
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(void *)(a1 + 192));
    uint64_t v27 = *(void *)(a2 + 168);
    uint64_t v28 = *(void *)(a1 + 192);
    __int16 v43 = 257;
    uint64_t v29 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v27, v28, (uint64_t)v42);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, v29);
  }
  if (a5)
  {
    uint64_t v30 = **(void **)(a2 + 120);
    if ((*(_DWORD *)(v30 + 8) & 0xFE) == 0x12)
    {
      unsigned int v31 = *(_DWORD *)(v30 + 32);
      if (!v31) {
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v31 = 1;
    }
    uint64_t v32 = 0;
    uint64_t v33 = v31;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(void *)(a1 + 192));
      __int16 v34 = *(llvm::Value **)(a2 + 120);
      __int16 v43 = 257;
      uint64_t v35 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v34, v35, (const llvm::Twine *)v42);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, Element);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(void *)(a1 + 192));
      int v37 = *(llvm::Value **)(a2 + 128);
      __int16 v43 = 257;
      uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v39 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v37, v38, (const llvm::Twine *)v42);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, v39);
      ++v32;
    }
    while (v33 != v32);
  }
LABEL_25:
  if (*(_DWORD *)(a2 + 16) == 1) {
    std::string::append(&v44, ".rtz");
  }
  llvm::FunctionType::get();
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    long long v40 = &v44;
LABEL_30:
    strlen((const char *)v40);
    goto LABEL_31;
  }
  long long v40 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if (v44.__r_.__value_.__r.__words[0]) {
    goto LABEL_30;
  }
LABEL_31:
  llvm::Module::getOrInsertFunction();
  __int16 v43 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v41 + 24), v41, (uint64_t)v45, v46, (uint64_t)v42);
  if (v45 != v47) {
    free(v45);
  }
  if (v48[0] != v49) {
    free(v48[0]);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

llvm::Value *llvm::IRBuilderBase::CreateZExtOrBitCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  ZExtOrBituint64_t Cast = (llvm::Value *)a2;
  if (*a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      ZExtOrBituint64_t Cast = (llvm::Value *)llvm::CastInst::CreateZExtOrBitCast();
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)ZExtOrBitCast, (uint64_t)a4);
    }
    else
    {
      ZExtOrBituint64_t Cast = (llvm::Value *)(*(uint64_t (**)(void, llvm::Type **, llvm::Type *))(**((void **)this + 9) + 288))(*((void *)this + 9), a2, a3);
      if (ZExtOrBitCast) {
        BOOL v7 = *((unsigned __int8 *)ZExtOrBitCast + 16) >= 0x1Cu;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7) {
        llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)ZExtOrBitCast, (uint64_t)a4);
      }
    }
  }
  return ZExtOrBitCast;
}

uint64_t AGCLLVMGen3TargetLowerer::colorCoverageMaskType(AGCLLVMGen3TargetLowerer *this)
{
  return *((void *)this + 25);
}

void AGCLLVMGen3TargetLowerer::buildWriteImageBlock()
{
}

uint64_t AGCLLVMGen3TargetLowerer::buildWriteImageBlockSwitch(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::BasicBlock *a6, uint64_t a7)
{
  uint64_t v11 = (llvm::IRBuilderBase *)(a1 + 1);
  a1[7] = a4;
  a1[8] = a4 + 40;
  uint64_t v12 = *(void *)(a2 + 104);
  uint64_t v13 = a1[26];
  __int16 v24 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 47, v12, v13, (uint64_t)v23);
  uint64_t v15 = a1[24];
  __int16 v22 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v11, 38, Cast, v15, (uint64_t)v21);
  if (*(void *)(a2 + 248))
  {
    v23[0] = "default";
    __int16 v24 = 259;
    operator new();
  }
  AGCLLVMGen3TargetLowerer::getUSCFormatFromState((AGCLLVMGen3TargetLowerer *)*(unsigned int *)(a2 + 12), 0);
  uint64_t v17 = llvm::ConstantInt::get();
  uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v24 = 257;
  uint64_t Add = llvm::IRBuilderBase::CreateAdd(v11, v18, v16, (const llvm::Twine *)v23);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1528))(a1, a2, v17, Add, a7);
  return llvm::IRBuilderBase::CreateBr(v11, a6);
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildPack9995(AGCLLVMGen3TargetLowerer *this, llvm::Type **a2)
{
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  int v10 = *((_DWORD *)this + 26);
  uint64_t v4 = (void *)*((void *)this + 298);
  if (v4) {
    size_t v5 = strlen(*((const char **)this + 298));
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = AGCLLVMGen3TargetLowerer::buildWriteConversionIntrinsic(this, &v8, v4, v5, (uint64_t)"rgb9e5", 6, *((llvm::Type **)this + 25), a2);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildWriteConversionIntrinsic(AGCLLVMBuilder *a1, long long *a2, void *a3, size_t a4, uint64_t a5, uint64_t a6, llvm::Type *a7, llvm::Type **a8)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  long long v50 = *a2;
  uint64_t v51 = *((void *)a2 + 2);
  if (v51) {
    llvm::MetadataTracking::track();
  }
  int v52 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v50, (uint64_t)a1 + 8);
  if (v51) {
    llvm::MetadataTracking::untrack();
  }
  AGCLLVMGen3TargetLowerer::getMemoryWriteIntrinsicArgsFromIR((uint64_t)a1, *a8, a5, a6);
  uint64_t v17 = v16;
  if (a3) {
    std::string::basic_string[abi:nn180100](&__dst, a3, a4);
  }
  else {
    memset(&__dst, 0, sizeof(__dst));
  }
  AGCLLVMGen3TargetLowerer::getWriteSuffix(&__str, a1, v17);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  uint64_t v19 = std::string::basic_string(&v53, &__str, size - 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
  uint64_t v20 = std::string::insert(v19, 0, "sz");
  std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  __int16 v22 = std::string::append(&v54, ".");
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  uint64_t v44 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0) {
    __int16 v24 = __p;
  }
  else {
    __int16 v24 = (void **)__p[0];
  }
  if (v44 >= 0) {
    std::string::size_type v25 = HIBYTE(v44);
  }
  else {
    std::string::size_type v25 = (std::string::size_type)__p[1];
  }
  std::string::insert(&__str, 0, (const std::string::value_type *)v24, v25);
  if (SHIBYTE(v44) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if ((*((_DWORD *)*a8 + 2) & 0xFE) == 0x12) {
    int v26 = *((_DWORD *)*a8 + 8);
  }
  else {
    int v26 = 1;
  }
  std::string::insert(&__str, 0, off_1E65EC370[v26 - 1]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
  }
  std::string::append(&__dst, (const std::string::value_type *)p_str, v28);
  if (v26 == 3) {
    a8 = (llvm::Type **)AGCLLVMBuilder::extendVector(a1, (llvm::Value *)a8, 4);
  }
  uint64_t v29 = *a8;
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54.__r_.__value_.__r.__words[2];
  v54.__r_.__value_.__l.__size_ = 0x300000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v54, *((void *)a1 + 24));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v54, *((void *)a1 + 24));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v54, (uint64_t)v29);
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53.__r_.__value_.__r.__words[2];
  v53.__r_.__value_.__l.__size_ = 0x300000000;
  uint64_t v30 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v53, v30);
  uint64_t v31 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v53, v31);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v53, (uint64_t)a8);
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)__p);
  if ((*((_DWORD *)a7 + 2) & 0xFE) == 0x12)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)".v", 2);
    uint64_t v32 = (void *)std::ostream::operator<<();
    uint64_t v33 = "i";
    uint64_t v34 = 1;
  }
  else
  {
    uint64_t v33 = ".i";
    uint64_t v32 = __p;
    uint64_t v34 = 2;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
  llvm::Type::getScalarSizeInBits(a7);
  std::ostream::operator<<();
  std::stringbuf::str();
  if ((v41 & 0x80u) == 0) {
    uint64_t v35 = v40;
  }
  else {
    uint64_t v35 = (void **)v40[0];
  }
  if ((v41 & 0x80u) == 0) {
    std::string::size_type v36 = v41;
  }
  else {
    std::string::size_type v36 = (std::string::size_type)v40[1];
  }
  std::string::append(&__dst, (const std::string::value_type *)v35, v36);
  if ((char)v41 < 0) {
    operator delete(v40[0]);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  __int16 v42 = 257;
  uint64_t v38 = llvm::IRBuilderBase::CreateCall((uint64_t)a1 + 8, *(void *)(v37 + 24), v37, (uint64_t)v53.__r_.__value_.__l.__data_, LODWORD(v53.__r_.__value_.__r.__words[1]), (uint64_t)v40);
  __p[0] = *(void **)MEMORY[0x1E4FBA418];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (v46 < 0) {
    operator delete(v45);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CB7A0710](&v47);
  if ((std::string::size_type *)v53.__r_.__value_.__l.__data_ != &v53.__r_.__value_.__r.__words[2]) {
    free(v53.__r_.__value_.__l.__data_);
  }
  if ((std::string::size_type *)v54.__r_.__value_.__l.__data_ != &v54.__r_.__value_.__r.__words[2]) {
    free(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v38;
}

unint64_t AGCLLVMGen3TargetLowerer::getMemoryWriteIntrinsicArgsFromIR(uint64_t a1, llvm::Type *this, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = this;
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    uint64_t v6 = (llvm::Type *)**((void **)this + 2);
  }
  if (a4)
  {
    int Key = llvm::StringMapImpl::FindKey();
    if (Key == -1) {
      uint64_t v8 = *(unsigned int *)(a1 + 2280);
    }
    else {
      uint64_t v8 = Key;
    }
    unint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 2272) + 8 * v8) + 8);
    unint64_t v18 = HIDWORD(v16);
    unint64_t v19 = HIWORD(v16);
  }
  else
  {
    llvm::Type::getPrimitiveSizeInBits(v6);
    unsigned int v9 = llvm::TypeSize::operator unsigned long long();
    uint64_t v11 = *(void *)(a1 + 2256);
    if (!v11) {
      goto LABEL_17;
    }
    uint64_t v12 = a1 + 2256;
    do
    {
      unsigned int v13 = *(_DWORD *)(v11 + 32);
      BOOL v14 = v13 >= v9;
      if (v13 >= v9) {
        uint64_t v15 = (uint64_t *)v11;
      }
      else {
        uint64_t v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        uint64_t v12 = v11;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
    if (v12 == a1 + 2256 || *(_DWORD *)(v12 + 32) > v9) {
LABEL_17:
    }
      uint64_t v12 = a1 + 2256;
    unint64_t v16 = *(void *)(v12 + 40);
    if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
      unsigned int v17 = *((_DWORD *)this + 8);
    }
    else {
      unsigned int v17 = 1;
    }
    if (*((_DWORD *)v6 + 2) >> 8 >= 0x21u && *((_DWORD *)v6 + 2) == 13) {
      v17 /= *(_DWORD *)(*(void *)(a1 + 192) + 8) >> 12;
    }
    int v20 = -1 << v17;
    v10.i32[0] = (unsigned __int16)~(_WORD)v20;
    uint8x8_t v21 = (uint8x8_t)vcnt_s8(v10);
    v21.i16[0] = vaddlv_u8(v21);
    if (WORD2(v16)) {
      unint64_t v19 = HIWORD(v16);
    }
    else {
      unint64_t v19 = v21.u32[0];
    }
    if (WORD2(v16)) {
      LOWORD(v18) = WORD2(*(void *)(v12 + 40));
    }
    else {
      LOWORD(v18) = ~(_WORD)v20;
    }
  }
  llvm::FixedVectorType::get();
  return (v19 << 48) | ((unint64_t)(unsigned __int16)v18 << 32) | v16;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildUnpack9995(AGCLLVMGen3TargetLowerer *this, llvm::Value *a2, llvm::Type *a3)
{
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  size_t v5 = (void *)*((void *)this + 297);
  if (v5) {
    size_t v6 = strlen(*((const char **)this + 297));
  }
  else {
    size_t v6 = 0;
  }
  BOOL v7 = (llvm::Type ***)llvm::FixedVectorType::get();
  uint64_t v8 = AGCLLVMGen3TargetLowerer::buildReadConversionIntrinsic(this, &v10, v5, v6, (uint64_t)"rgb9e5", 6, v7, (uint64_t *)a2);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildReadConversionIntrinsic(AGCLLVMGen3TargetLowerer *a1, long long *a2, void *a3, size_t a4, uint64_t a5, uint64_t a6, llvm::Type ***a7, uint64_t *Cast)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  long long v50 = *a2;
  uint64_t v51 = *((void *)a2 + 2);
  if (v51) {
    llvm::MetadataTracking::track();
  }
  int v52 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v50, (uint64_t)a1 + 8);
  if (v51) {
    llvm::MetadataTracking::untrack();
  }
  unint64_t IntrinsicArgsFromIR = AGCLLVMGen3TargetLowerer::getMemoryReadIntrinsicArgsFromIR((uint64_t)a1, a7, a5, a6);
  unint64_t v18 = v17;
  if (a3) {
    std::string::basic_string[abi:nn180100](&__dst, a3, a4);
  }
  else {
    memset(&__dst, 0, sizeof(__dst));
  }
  AGCLLVMGen3TargetLowerer::getReadSuffix(&__str, a1, (uint64_t)v18, HIWORD(IntrinsicArgsFromIR));
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  int v20 = std::string::basic_string(&v53, &__str, size - 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
  uint8x8_t v21 = std::string::insert(v20, 0, "sz");
  std::string::size_type v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v23 = std::string::append(&v41, ".");
  std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  uint64_t v44 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0) {
    std::string::size_type v25 = __p;
  }
  else {
    std::string::size_type v25 = (void **)__p[0];
  }
  if (v44 >= 0) {
    std::string::size_type v26 = HIBYTE(v44);
  }
  else {
    std::string::size_type v26 = (std::string::size_type)__p[1];
  }
  std::string::insert(&__str, 2uLL, (const std::string::value_type *)v25, v26);
  if (SHIBYTE(v44) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
  }
  std::string::append(&__dst, (const std::string::value_type *)p_str, v28);
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)__p);
  uint64_t v29 = (llvm::Type *)*Cast;
  if (*(_DWORD *)(*Cast + 8) == 15)
  {
    uint64_t v30 = llvm::PointerType::get();
    __int16 v42 = 257;
    uint64_t Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 49, (uint64_t)Cast, v30, (uint64_t)&v41);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)".p", 2);
    uint64_t v31 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"i8", 2);
  }
  else
  {
    if ((*(_DWORD *)(*Cast + 8) & 0xFE) == 0x12)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)".v", 2);
      uint64_t v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"i", 1);
    }
    else
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)".i", 2);
    }
    llvm::Type::getScalarSizeInBits(v29);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v33 = &v41;
  }
  else {
    uint64_t v33 = (std::string *)v41.__r_.__value_.__r.__words[0];
  }
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v34 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = v41.__r_.__value_.__l.__size_;
  }
  std::string::append(&__dst, (const std::string::value_type *)v33, v34);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v36 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v36 = __dst.__r_.__value_.__l.__size_;
  }
  uint64_t v37 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)p_dst, v36, (uint64_t)v18, *((void *)a1 + 24), *((void *)a1 + 24), *Cast);
  v53.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
  v53.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
  v53.__r_.__value_.__r.__words[2] = (std::string::size_type)Cast;
  __int16 v42 = 257;
  uint64_t v38 = llvm::IRBuilderBase::CreateCall((uint64_t)a1 + 8, *(void *)(v37 + 24), v37, (uint64_t)&v53, 3, (uint64_t)&v41);
  uint64_t v39 = AGCLLVMGen3TargetLowerer::reconcileLLVMReadIntrinsicResultWithIR(a1, a7, v18, v38);
  __p[0] = *(void **)MEMORY[0x1E4FBA418];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
  if (v46 < 0) {
    operator delete(v45);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CB7A0710](&v47);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v39;
}

unint64_t AGCLLVMGen3TargetLowerer::getMemoryReadIntrinsicArgsFromIR(uint64_t a1, llvm::Type ***this, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (llvm::Type *)this;
  int v6 = *((unsigned __int8 *)this + 8);
  if (v6 == 15)
  {
    uint64_t v4 = *this[2];
    int v6 = *((_DWORD *)v4 + 2);
  }
  BOOL v7 = v4;
  if ((v6 & 0xFE) == 0x12) {
    BOOL v7 = (llvm::Type *)**((void **)v4 + 2);
  }
  if (a4)
  {
    int Key = llvm::StringMapImpl::FindKey();
    if (Key == -1) {
      uint64_t v9 = *(unsigned int *)(a1 + 2280);
    }
    else {
      uint64_t v9 = Key;
    }
    unint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 2272) + 8 * v9) + 8);
    unint64_t v18 = HIDWORD(v17);
    unint64_t v19 = HIWORD(v17);
  }
  else
  {
    llvm::Type::getPrimitiveSizeInBits(v7);
    unsigned int v10 = llvm::TypeSize::operator unsigned long long();
    uint64_t v12 = *(void *)(a1 + 2256);
    if (!v12) {
      goto LABEL_19;
    }
    uint64_t v13 = a1 + 2256;
    do
    {
      unsigned int v14 = *(_DWORD *)(v12 + 32);
      BOOL v15 = v14 >= v10;
      if (v14 >= v10) {
        unint64_t v16 = (uint64_t *)v12;
      }
      else {
        unint64_t v16 = (uint64_t *)(v12 + 8);
      }
      if (v15) {
        uint64_t v13 = v12;
      }
      uint64_t v12 = *v16;
    }
    while (*v16);
    if (v13 == a1 + 2256 || *(_DWORD *)(v13 + 32) > v10) {
LABEL_19:
    }
      uint64_t v13 = a1 + 2256;
    unint64_t v17 = *(void *)(v13 + 40);
    if (WORD2(v17))
    {
      unint64_t v18 = HIDWORD(v17);
      unint64_t v19 = HIWORD(v17);
    }
    else
    {
      if ((*((_DWORD *)v4 + 2) & 0xFE) == 0x12) {
        int v20 = *((_DWORD *)v4 + 8);
      }
      else {
        LOBYTE(v20) = 1;
      }
      LOWORD(v18) = ~(unsigned __int16)(-1 << v20);
      v11.i32[0] = (unsigned __int16)~(-1 << v20);
      uint8x8_t v21 = (uint8x8_t)vcnt_s8(v11);
      v21.i16[0] = vaddlv_u8(v21);
      unint64_t v19 = v21.u32[0];
    }
  }
  if ((unsigned __int16)(v19 - 2) <= 2u) {
    llvm::FixedVectorType::get();
  }
  return ((unint64_t)(unsigned __int16)v18 << 32) | (v19 << 48) | v17;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildPack111110(AGCLLVMGen3TargetLowerer *this, llvm::Type **a2)
{
  long long v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  int v10 = *((_DWORD *)this + 26);
  uint64_t v4 = (void *)*((void *)this + 298);
  if (v4) {
    size_t v5 = strlen(*((const char **)this + 298));
  }
  else {
    size_t v5 = 0;
  }
  int v6 = AGCLLVMGen3TargetLowerer::buildWriteConversionIntrinsic(this, &v8, v4, v5, (uint64_t)"rg11b10f", 8, *((llvm::Type **)this + 25), a2);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  return v6;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildUnpack111110(AGCLLVMGen3TargetLowerer *this, llvm::Value *a2, llvm::Type *a3)
{
  long long v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  int v12 = *((_DWORD *)this + 26);
  size_t v5 = (void *)*((void *)this + 297);
  if (v5) {
    size_t v6 = strlen(*((const char **)this + 297));
  }
  else {
    size_t v6 = 0;
  }
  BOOL v7 = (llvm::Type ***)llvm::FixedVectorType::get();
  long long v8 = AGCLLVMGen3TargetLowerer::buildReadConversionIntrinsic(this, &v10, v5, v6, (uint64_t)"rg11b10f", 8, v7, (uint64_t *)a2);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  return v8;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildPack1010102(AGCLLVMGen3TargetLowerer *this, llvm::Type **a2, int a3, char a4)
{
  if (!a3 || (a4 & 1) != 0)
  {
    long long v8 = *(uint64_t (**)(void))(*(void *)this + 1456);
    return (llvm::Value *)v8();
  }
  else
  {
    long long v11 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v12, (AGCLLVMGen3TargetLowerer *)((char *)this + 8));
    int v13 = *((_DWORD *)this + 26);
    size_t v6 = (void *)*((void *)this + 298);
    if (v6) {
      size_t v7 = strlen(*((const char **)this + 298));
    }
    else {
      size_t v7 = 0;
    }
    long long v10 = AGCLLVMGen3TargetLowerer::buildWriteConversionIntrinsic(this, &v11, v6, v7, (uint64_t)"rgb10a2", 7, *((llvm::Type **)this + 25), a2);
    if (v12) {
      llvm::MetadataTracking::untrack();
    }
    return v10;
  }
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildUnpack1010102(AGCLLVMGen3TargetLowerer *this, llvm::Value *a2, llvm::Type *a3, unsigned int a4, int a5, char a6)
{
  if (!a5 || (a6 & 1) != 0)
  {
    long long v10 = *(uint64_t (**)(void))(*(void *)this + 1464);
    return (llvm::Value *)v10();
  }
  else
  {
    long long v14 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v15, (AGCLLVMGen3TargetLowerer *)((char *)this + 8));
    int v16 = *((_DWORD *)this + 26);
    long long v8 = (void *)*((void *)this + 297);
    if (v8) {
      size_t v9 = strlen(*((const char **)this + 297));
    }
    else {
      size_t v9 = 0;
    }
    uint64_t v12 = (llvm::Type ***)llvm::FixedVectorType::get();
    int v13 = AGCLLVMGen3TargetLowerer::buildReadConversionIntrinsic(this, &v14, v8, v9, (uint64_t)"rgb10a2", 7, v12, (uint64_t *)a2);
    if (v15) {
      llvm::MetadataTracking::untrack();
    }
    return v13;
  }
}

void AGCLLVMGen3TargetLowerer::exceededResourceLimits(AGCLLVMGen3TargetLowerer *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, unsigned int a5@<W4>, unsigned int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  unsigned int v15 = a7 + a4;
  std::string::basic_string[abi:nn180100]<0>(&v103, "");
  unsigned int v16 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 103) + 24))(*((void *)this + 103), a8);
  unsigned int v17 = (*(uint64_t (**)(void))(**((void **)this + 103) + 16))(*((void *)this + 103));
  unsigned int __val = a5;
  unsigned int v18 = a5 + a2;
  unsigned int v19 = (*(uint64_t (**)(void))(**((void **)this + 103) + 40))(*((void *)this + 103));
  unsigned int v94 = a6;
  unsigned int v20 = a6 + a3;
  unsigned int v21 = (*(uint64_t (**)(void))(**((void **)this + 103) + 32))(*((void *)this + 103));
  if (v15 > 0x10
    || (v16 >= a2 ? (BOOL v22 = v17 >= a3) : (BOOL v22 = 0),
        v22 ? (BOOL v23 = v18 > v19) : (BOOL v23 = 1),
        !v23 ? (BOOL v24 = v20 > v21) : (BOOL v24 = 1),
        v24))
  {
    BOOL v22 = v16 >= a2;
    unsigned int v27 = v21;
    if (!v22)
    {
      std::to_string(&v97, a2);
      std::string::size_type v28 = std::string::insert(&v97, 0, " buffers (");
      std::string::size_type v29 = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v98, "/");
      std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      unsigned int v32 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 103) + 24))(*((void *)this + 103), a8);
      std::to_string(&v96, v32);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v33 = &v96;
      }
      else {
        uint64_t v33 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v96.__r_.__value_.__l.__size_;
      }
      uint64_t v35 = std::string::append(&v99, (const std::string::value_type *)v33, size);
      std::string::size_type v36 = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      uint64_t v37 = std::string::append(&v100, ")");
      std::string::size_type v38 = v37->__r_.__value_.__r.__words[2];
      long long v101 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      uint64_t v102 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (v102 >= 0) {
        uint64_t v39 = (const std::string::value_type *)&v101;
      }
      else {
        uint64_t v39 = (const std::string::value_type *)v101;
      }
      if (v102 >= 0) {
        std::string::size_type v40 = HIBYTE(v102);
      }
      else {
        std::string::size_type v40 = *((void *)&v101 + 1);
      }
      std::string::append(&v103, v39, v40);
      if (SHIBYTE(v102) < 0) {
        operator delete((void *)v101);
      }
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      unsigned int v21 = v27;
    }
    if (v17 < a3)
    {
      std::to_string(&v97, a3);
      std::string v41 = std::string::insert(&v97, 0, " textures (");
      std::string::size_type v42 = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      __int16 v43 = std::string::append(&v98, "/");
      std::string::size_type v44 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      unsigned int v45 = (*(uint64_t (**)(void))(**((void **)this + 103) + 16))(*((void *)this + 103));
      std::to_string(&v96, v45);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v46 = &v96;
      }
      else {
        char v46 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v47 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v47 = v96.__r_.__value_.__l.__size_;
      }
      int v48 = std::string::append(&v99, (const std::string::value_type *)v46, v47);
      std::string::size_type v49 = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      long long v50 = std::string::append(&v100, ")");
      std::string::size_type v51 = v50->__r_.__value_.__r.__words[2];
      long long v101 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      uint64_t v102 = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if (v102 >= 0) {
        int v52 = (const std::string::value_type *)&v101;
      }
      else {
        int v52 = (const std::string::value_type *)v101;
      }
      if (v102 >= 0) {
        std::string::size_type v53 = HIBYTE(v102);
      }
      else {
        std::string::size_type v53 = *((void *)&v101 + 1);
      }
      std::string::append(&v103, v52, v53);
      if (SHIBYTE(v102) < 0) {
        operator delete((void *)v101);
      }
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      unsigned int v21 = v27;
    }
    if (v15 >= 0x11)
    {
      std::to_string(&v97, v15);
      uint64_t v54 = std::string::insert(&v97, 0, " samplers (");
      std::string::size_type v55 = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      uint64_t v56 = std::string::append(&v98, "/");
      std::string::size_type v57 = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v96, 16);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v58 = &v96;
      }
      else {
        uint64_t v58 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v59 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v59 = v96.__r_.__value_.__l.__size_;
      }
      uint64_t v60 = std::string::append(&v99, (const std::string::value_type *)v58, v59);
      std::string::size_type v61 = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      uint64_t v62 = std::string::append(&v100, ")");
      std::string::size_type v63 = v62->__r_.__value_.__r.__words[2];
      long long v101 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      uint64_t v102 = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      if (v102 >= 0) {
        uint64_t v64 = (const std::string::value_type *)&v101;
      }
      else {
        uint64_t v64 = (const std::string::value_type *)v101;
      }
      if (v102 >= 0) {
        std::string::size_type v65 = HIBYTE(v102);
      }
      else {
        std::string::size_type v65 = *((void *)&v101 + 1);
      }
      std::string::append(&v103, v64, v65);
      if (SHIBYTE(v102) < 0) {
        operator delete((void *)v101);
      }
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      unsigned int v21 = v27;
    }
    BOOL v23 = v18 > v19;
    std::string::size_type v26 = a9;
    if (v23)
    {
      std::to_string(&v97, __val);
      uint64_t v66 = std::string::insert(&v97, 0, " indirect buffers (");
      std::string::size_type v67 = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      uint64_t v68 = std::string::append(&v98, "/");
      std::string::size_type v69 = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      unsigned int v70 = (*(uint64_t (**)(void))(**((void **)this + 103) + 40))(*((void *)this + 103));
      std::to_string(&v96, v70);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v71 = &v96;
      }
      else {
        int v71 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v72 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v72 = v96.__r_.__value_.__l.__size_;
      }
      uint64_t v73 = std::string::append(&v99, (const std::string::value_type *)v71, v72);
      std::string::size_type v74 = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      long long v75 = std::string::append(&v100, ")");
      std::string::size_type v76 = v75->__r_.__value_.__r.__words[2];
      long long v101 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      uint64_t v102 = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      if (v102 >= 0) {
        int v77 = (const std::string::value_type *)&v101;
      }
      else {
        int v77 = (const std::string::value_type *)v101;
      }
      if (v102 >= 0) {
        std::string::size_type v78 = HIBYTE(v102);
      }
      else {
        std::string::size_type v78 = *((void *)&v101 + 1);
      }
      std::string::append(&v103, v77, v78);
      if (SHIBYTE(v102) < 0) {
        operator delete((void *)v101);
      }
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      unsigned int v21 = v27;
    }
    if (v20 > v21)
    {
      std::to_string(&v97, v94);
      uint64_t v79 = std::string::insert(&v97, 0, " indirect textures (");
      std::string::size_type v80 = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      long long v81 = std::string::append(&v98, "/");
      std::string::size_type v82 = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      unsigned int v83 = (*(uint64_t (**)(void))(**((void **)this + 103) + 32))(*((void *)this + 103));
      std::to_string(&v96, v83);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v84 = &v96;
      }
      else {
        __int16 v84 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v85 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v85 = v96.__r_.__value_.__l.__size_;
      }
      __int16 v86 = std::string::append(&v99, (const std::string::value_type *)v84, v85);
      std::string::size_type v87 = v86->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v87;
      v86->__r_.__value_.__l.__size_ = 0;
      v86->__r_.__value_.__r.__words[2] = 0;
      v86->__r_.__value_.__r.__words[0] = 0;
      char v88 = std::string::append(&v100, ")");
      std::string::size_type v89 = v88->__r_.__value_.__r.__words[2];
      long long v101 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
      uint64_t v102 = v89;
      v88->__r_.__value_.__l.__size_ = 0;
      v88->__r_.__value_.__r.__words[2] = 0;
      v88->__r_.__value_.__r.__words[0] = 0;
      if (v102 >= 0) {
        std::string v90 = (const std::string::value_type *)&v101;
      }
      else {
        std::string v90 = (const std::string::value_type *)v101;
      }
      if (v102 >= 0) {
        std::string::size_type v91 = HIBYTE(v102);
      }
      else {
        std::string::size_type v91 = *((void *)&v101 + 1);
      }
      std::string::append(&v103, v90, v91);
      if (SHIBYTE(v102) < 0) {
        operator delete((void *)v101);
      }
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
    }
    char v25 = 1;
  }
  else
  {
    char v25 = 0;
    std::string::size_type v26 = a9;
  }
  *std::string::size_type v26 = v25;
  uint64_t v92 = (std::string *)(v26 + 8);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v92, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v103.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *uint64_t v92 = v103;
  }
}

void AGCLLVMGen3TargetLowerer::createBuiltins(AGCLLVMGen3TargetLowerer *this, AGCLLVMUserObject *a2, llvm::Module *a3)
{
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildMovmsk(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  size_t v6 = (llvm::Type *)llvm::IntegerType::get();
  uint64_t v7 = *(void *)(a1 + 1512);
  if (v7) {
    size_t v8 = strlen(*(const char **)(a1 + 1512));
  }
  else {
    size_t v8 = 0;
  }
  size_t v9 = (llvm::IRBuilderBase *)(a1 + 8);
  uint64_t v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v7, v8, *(void *)(a1 + 144), (uint64_t)v6, *(void *)(a1 + 192));
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v15 = 257;
  uint64_t v12 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  __int16 v15 = 257;
  v19[0] = llvm::IRBuilderBase::CreateIntCast(v9, a3, v6, 1, (const llvm::Twine *)v14);
  v19[1] = v12;
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v9, *(void *)(v10 + 24), v10, (uint64_t)v19, 2, (uint64_t)v14);
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildDepthf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = *(void *)(a1 + 1504);
  if (v6) {
    size_t v7 = strlen(*(const char **)(a1 + 1504));
  }
  else {
    size_t v7 = 0;
  }
  uint64_t v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v6, v7, *(void *)(a1 + 144), *(void *)(a1 + 168), *(void *)(a1 + 192));
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v14 = 257;
  uint64_t v10 = a1 + 8;
  long long v11 = llvm::IRBuilderBase::CreateCall(v10, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v13);
  v18[0] = a3;
  v18[1] = v11;
  __int16 v14 = 257;
  return llvm::IRBuilderBase::CreateCall(v10, *(void *)(v8 + 24), v8, (uint64_t)v18, 2, (uint64_t)v13);
}

uint64_t AGCLLVMGen3TargetLowerer::buildGammaSpaceConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8) {
    llvm::MetadataTracking::track();
  }
  int v9 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v7);
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return a3;
}

uint64_t AGCLLVMGen3TargetLowerer::buildGammaExpansion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8) {
    llvm::MetadataTracking::track();
  }
  int v9 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v7);
  if (v8) {
    llvm::MetadataTracking::untrack();
  }
  return a3;
}

BOOL AGCLLVMGen3TargetLowerer::isGammaSpaceConversionNecessary(uint64_t a1, int a2)
{
  return a2 == 3;
}

BOOL AGCLLVMGen3TargetLowerer::isFormatSupported(uint64_t a1, int a2)
{
  return (a2 - 2) < 0x15;
}

uint64_t AGCLLVMGen3TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildCoherentStore(uint64_t a1, long long *a2, uint64_t a3, uint64_t *a4, void *a5, size_t a6, uint64_t a7)
{
  v42[4] = *MEMORY[0x1E4F143B8];
  long long v32 = *a2;
  uint64_t v33 = *((void *)a2 + 2);
  if (v33) {
    llvm::MetadataTracking::track();
  }
  int v34 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v32, a1 + 8);
  if (v33) {
    llvm::MetadataTracking::untrack();
  }
  v41[0] = v42;
  v41[1] = (void *)0x400000000;
  uint64_t v13 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v41, v13);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v41, *a4);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v41, *(void *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v41, *(void *)(a1 + 176));
  std::string::size_type v38 = v40;
  uint64_t v39 = 0x300000000;
  uint64_t v14 = llvm::PointerType::get();
  v37[4] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a3, v14, (uint64_t)&v35);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v38, Cast);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v38, (uint64_t)a4);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 1552))(a1, a7, 0);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v38, v16);
  uint64_t v17 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v38, v17);
  uint64_t v35 = v37;
  long long v36 = xmmword_1CADD62A0;
  int v18 = *(unsigned char **)(a1 + 1352);
  if (v18)
  {
    size_t v19 = strlen(*(const char **)(a1 + 1352));
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v35, v18, &v18[v19]);
  }
  else
  {
    *(void *)&long long v36 = 0;
  }
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v35, ".", "");
  if (a5)
  {
    std::string::basic_string[abi:nn180100](&__p, a5, a6);
    LODWORD(v20) = HIBYTE(v30);
    BOOL v22 = (void **)__p;
    uint64_t v21 = v29;
  }
  else
  {
    uint64_t v21 = 0;
    BOOL v22 = 0;
    LODWORD(v20) = 0;
    std::string __p = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
  }
  if ((v20 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = v22;
  }
  uint64_t v20 = v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = v21;
  }
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v35, p_p, (unsigned char *)p_p + v20);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  __int16 v31 = 257;
  char v25 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v24 + 24), v24, (uint64_t)v38, v39, (uint64_t)&__p);
  if (v35 != v37) {
    free(v35);
  }
  if (v38 != v40) {
    free(v38);
  }
  if (v41[0] != v42) {
    free(v41[0]);
  }
  return v25;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildCoherentLoad(uint64_t a1, long long *a2, llvm::Type **a3, uint64_t a4, void *a5, size_t a6, uint64_t a7)
{
  v41[3] = *MEMORY[0x1E4F143B8];
  long long v31 = *a2;
  uint64_t v32 = *((void *)a2 + 2);
  if (v32) {
    llvm::MetadataTracking::track();
  }
  int v33 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v31, a1 + 8);
  if (v32) {
    llvm::MetadataTracking::untrack();
  }
  v40[0] = v41;
  v40[1] = (void *)0x300000000;
  uint64_t v13 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v40, v13);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v40, *(void *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v40, *(void *)(a1 + 176));
  uint64_t v37 = v39;
  uint64_t v38 = 0x300000000;
  uint64_t v14 = (llvm::Type *)llvm::PointerType::get();
  v36[4] = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v14, (const llvm::Twine *)&v34);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, (uint64_t)PointerCast);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1552))(a1, a7, 1);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, v16);
  uint64_t v17 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, v17);
  int v34 = v36;
  long long v35 = xmmword_1CADD62A0;
  int v18 = *(unsigned char **)(a1 + 1344);
  if (v18)
  {
    size_t v19 = strlen(*(const char **)(a1 + 1344));
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v34, v18, &v18[v19]);
  }
  else
  {
    *(void *)&long long v35 = 0;
  }
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v34, ".", "");
  if (a5)
  {
    std::string::basic_string[abi:nn180100](&__p, a5, a6);
    LODWORD(v20) = HIBYTE(v29);
    BOOL v22 = (void **)__p;
    uint64_t v21 = v28;
  }
  else
  {
    uint64_t v21 = 0;
    BOOL v22 = 0;
    LODWORD(v20) = 0;
    std::string __p = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
  }
  if ((v20 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = v22;
  }
  uint64_t v20 = v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = v21;
  }
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v34, p_p, (unsigned char *)p_p + v20);
  if (SHIBYTE(v29) < 0) {
    operator delete(__p);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  __int16 v30 = 257;
  char v25 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v24 + 24), v24, (uint64_t)v37, v38, (uint64_t)&__p);
  if (v34 != v36) {
    free(v34);
  }
  if (v37 != v39) {
    free(v37);
  }
  if (v40[0] != v41) {
    free(v40[0]);
  }
  return v25;
}

uint64_t AGCLLVMGen3TargetLowerer::buildManualResolve(AGCLLVMBuilder *a1, uint64_t a2, AGCLLVMGen3TargetLowerer *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v38 = *(_OWORD *)a2;
  uint64_t v39 = *(void *)(a2 + 16);
  if (v39) {
    llvm::MetadataTracking::track();
  }
  int v40 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v38);
  if (v39) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v15 = *((void *)a1 + 24);
  __int16 v37 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 38, a8, v15, (uint64_t)v36);
  if (a4 == 3) {
    int v17 = 4;
  }
  else {
    int v17 = a4;
  }
  int v18 = (llvm::Constant *)*((void *)a1 + 21);
  if (v17 != 1) {
    int v18 = (llvm::Constant *)llvm::FixedVectorType::get();
  }
  uint64_t v35 = (uint64_t)v18;
  v34[0] = AGCLLVMGen3TargetLowerer::getUSCFormatFromState(a3, a5);
  v34[1] = (_WORD)a3;
  v34[2] = ~(-1 << a4);
  v34[3] = a4;
  uint64_t NullValue = llvm::Constant::getNullValue(v18, v19);
  if (a6)
  {
    int v21 = 0;
    do
    {
      uint64_t v22 = v35;
      uint64_t v23 = llvm::ConstantInt::get();
      LOBYTE(v31) = 1;
      uint64_t v24 = (*(uint64_t (**)(AGCLLVMBuilder *, _WORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, int))(*(void *)a1 + 1600))(a1, v34, a6, a7, v22, Cast, v23, 0, v31);
      __int16 v37 = 257;
      uint64_t NullValue = llvm::IRBuilderBase::CreateFAdd((uint64_t)a1 + 8, NullValue, v24, (uint64_t)v36);
      ++v21;
    }
    while (a6 != v21);
  }
  char v25 = (llvm::Value *)llvm::ConstantFP::get();
  std::string::size_type v26 = AGCLLVMBuilder::splat(a1, v17, v25);
  __int16 v37 = 257;
  FDiv = (llvm::Value *)llvm::IRBuilderBase::CreateFDiv((uint64_t)a1 + 8, NullValue, (uint64_t)v26, (uint64_t)v36);
  uint64_t v35 = llvm::FixedVectorType::get();
  uint64_t v28 = AGCLLVMBuilder::extendVector(a1, FDiv, 4);
  uint64_t v29 = llvm::ConstantInt::get();
  HIBYTE(v32) = 1;
  LOBYTE(v32) = *((unsigned char *)a1 + 1770);
  return (*(uint64_t (**)(AGCLLVMBuilder *, _WORD *, uint64_t, uint64_t, llvm::Value *, uint64_t, uint64_t, uint64_t, void, __int16))(*(void *)a1 + 1608))(a1, v34, a6, a7, v28, Cast, v29, 1, 0, v32);
}

uint64_t AGCLLVMGen3TargetLowerer::buildLocalID(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  size_t v19 = v21;
  long long v20 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.agx2.local.", "");
  llvm::SmallVectorTemplateBase<char,true>::push_back(&v19, aXyz[a4]);
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v9 = a1 + 8;
  __int16 v15 = 257;
  uint64_t v10 = llvm::IRBuilderBase::CreateCall(v9, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  unsigned char v13[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v9, 38, (uint64_t)v10, a3, (uint64_t)v13);
  if (v19 != v21) {
    free(v19);
  }
  return Cast;
}

uint64_t *AGCLLVMGen3TargetLowerer::buildCopyOffChipMRTPixelData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  v44[2] = *MEMORY[0x1E4F143B8];
  long long v41 = *(_OWORD *)a2;
  uint64_t v42 = *(void *)(a2 + 16);
  if (v42) {
    llvm::MetadataTracking::track();
  }
  int v43 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v41);
  if (v42) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v10 = *(unsigned __int8 *)(a4 + 4 * a3);
  unsigned int v31 = *(unsigned __int16 *)(a4 + 72);
  uint64_t v11 = *(void *)(a1 + 936);
  if (v11) {
    size_t v12 = strlen(*(const char **)(a1 + 936));
  }
  else {
    size_t v12 = 0;
  }
  uint64_t v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v11, v12, *(void *)(a1 + 144), *(void *)(a1 + 192), *(void *)(a1 + 192));
  v44[0] = llvm::ConstantInt::get();
  v44[1] = llvm::ConstantInt::get();
  if (a5)
  {
    __int16 v40 = 257;
    llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v13 + 24), v13, (uint64_t)v44, 2, (uint64_t)v39);
  }
  uint64_t v27 = v13;
  if (a3 <= 7)
  {
    uint64_t v14 = a3;
    uint64_t v29 = (uint64_t *)(a1 + 8);
    do
    {
      if (((v31 >> v14) & 1) != 0 || ((v31 >> v14) & 0x100) != 0)
      {
        if (*(unsigned __int8 *)(a4 + 4 * v14) != v10) {
          break;
        }
        __int16 v15 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        v39[0] = "agc.emit_info";
        unint64_t v32 = v6 & 0xFFFFFFFF00000000 | v14;
        v39[2] = v32;
        __int16 v40 = 2051;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        uint64_t v16 = *(void *)(a1 + 344);
        uint64_t v17 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)a1, v15);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v16, v17);
        __int16 v40 = 257;
        size_t v19 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v15, v18);
        uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v29, v19, (uint64_t)v15, 0, (uint64_t)v39);
        long long v34 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v35, (llvm::IRBuilderBase *)v29);
        int v36 = *(_DWORD *)(a1 + 104);
        unsigned int v21 = *(_DWORD *)(a4 + 4 * v14);
        int v22 = *(_DWORD *)(a4 + 76);
        uint64_t v23 = v10;
        uint64_t v24 = (llvm::Value *)llvm::ConstantInt::get();
        char v25 = (llvm::Value *)llvm::ConstantInt::get();
        AGCLLVMGen3TargetLowerer::buildCopyOffChipMRTPixelDataStateless((uint64_t)v37, (void *)a1, (uint64_t)&v34, (AGCLLVMGen3TargetLowerer *)BYTE1(v21), (v21 >> 26) & 7, v22 & 0xF, HIBYTE(v21) & 1, a5, v24, AlignedLoad, v25);
        if (v38) {
          llvm::MetadataTracking::untrack();
        }
        if (v35) {
          llvm::MetadataTracking::untrack();
        }
        uint64_t v10 = v23;
        unint64_t v6 = v32;
      }
      ++v14;
    }
    while (v14 != 8);
  }
  if (a5)
  {
    __int16 v40 = 257;
    llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v27 + 24), v27, (uint64_t)v44, 2, (uint64_t)v39);
  }
  *(_OWORD *)a6 = *(_OWORD *)(a1 + 56);
  uint64_t result = llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)(a6 + 16), (llvm::IRBuilderBase *)(a1 + 8));
  *(_DWORD *)(a6 + 24) = *(_DWORD *)(a1 + 104);
  return result;
}

uint64_t *AGCLLVMGen3TargetLowerer::buildCopyOffChipMRTPixelDataStateless(uint64_t a1, void *a2, uint64_t a3, AGCLLVMGen3TargetLowerer *a4, __int16 a5, uint64_t a6, uint64_t a7, int a8, llvm::Value *a9, uint64_t a10, llvm::Value *a11)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  long long v53 = *(_OWORD *)a3;
  uint64_t v54 = *(void *)(a3 + 16);
  if (v54) {
    llvm::MetadataTracking::track();
  }
  int v55 = *(_DWORD *)(a3 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a2, &v53);
  if (v54) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v17 = a2[24];
  __int16 v48 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a2 + 1), 38, a10, v17, (uint64_t)v47);
  size_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v48 = 257;
  uint64_t Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a2 + 1), a9, v19, (const llvm::Twine *)v47);
  __int16 v57 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a2 + 1), a11, Sub, (const llvm::Twine *)&v56);
  __int16 v52 = 257;
  uint64_t v42 = Cast;
  uint64_t Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a2 + 1), Cast, Mul, (const llvm::Twine *)v51);
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  (*(void (**)(void *__return_ptr, void *, AGCLLVMGen3TargetLowerer *, uint64_t, void, void))(*a2 + 560))(v47, a2, a4, a7, 0, 0);
  uint64_t v50 = llvm::FixedVectorType::get();
  LOWORD(v49) = AGCLLVMGen3TargetLowerer::getUSCFormatFromState(a4, a7);
  WORD1(v49) = (_WORD)a4;
  WORD2(v49) = (1 << a5) - 1;
  HIWORD(v49) = a5;
  if (!a8)
  {
    *(void *)&long long v56 = "itr_x";
    __int16 v57 = 259;
    operator new();
  }
  Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
  uint64_t v24 = 0;
  char v25 = 1;
  do
  {
    char v26 = v25;
    long long v44 = *(_OWORD *)(a2 + 7);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v45, (llvm::IRBuilderBase *)(a2 + 1));
    int v46 = *((_DWORD *)a2 + 26);
    uint64_t v27 = (llvm::Value *)(*(uint64_t (**)(void *, long long *, void, uint64_t))(*a2 + 256))(a2, &v44, a2[24], v24);
    __int16 v57 = 257;
    uint64_t v28 = (llvm::Value *)llvm::ConstantInt::get();
    Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a2 + 1), InsertElement, v27, v28, (const llvm::Twine *)&v56);
    if (v45) {
      llvm::MetadataTracking::untrack();
    }
    char v25 = 0;
    uint64_t v24 = 1;
  }
  while ((v26 & 1) != 0);
  uint64_t v29 = (*(uint64_t (**)(void *, void, void, uint64_t, uint64_t, llvm::Value *))(*a2 + 1616))(a2, WORD1(v49), HIWORD(v49), a6, Add, InsertElement);
  if (a6)
  {
    uint64_t GEP = (llvm::Value *)v29;
    unint64_t v32 = v30;
    int v33 = 0;
    do
    {
      uint64_t v34 = llvm::ConstantInt::get();
      EMRTTileBuffer = AGCLLVMGen3TargetLowerer::buildLoadEMRTTileBuffer((AGCLLVMGen3TargetLowerer *)a2, (unsigned __int16 *)&v49, v34, (uint64_t)GEP);
      int v36 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v57 = 257;
      uint64_t GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a2 + 1), v32, GEP, v36, (const llvm::Twine *)&v56);
      uint64_t v37 = llvm::ConstantInt::get();
      BYTE1(v39) = 1;
      LOBYTE(v39) = *((unsigned char *)a2 + 1770);
      (*(void (**)(void *__return_ptr, void *, uint64_t *, uint64_t, llvm::Value *, llvm::Value *, llvm::Value *, uint64_t, uint64_t, llvm::Value *, int))(*a2 + 1608))(v43, a2, &v49, a6, a11, EMRTTileBuffer, v42, v37, 1, InsertElement, v39);
      if (v43[2]) {
        llvm::MetadataTracking::untrack();
      }
      ++v33;
    }
    while (a6 > v33);
  }
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 7);
  uint64_t result = llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)(a1 + 16), (llvm::IRBuilderBase *)(a2 + 1));
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 26);
  return result;
}

void AGCLLVMGen3TargetLowerer::buildEmitpix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, AGCLLVMGen3TargetLowerer *a6, int a7, unsigned int a8, uint64_t a9)
{
  _WORD v36[16] = *MEMORY[0x1E4F143B8];
  long long v29 = *(_OWORD *)a2;
  uint64_t v30 = *(void *)(a2 + 16);
  if (v30) {
    llvm::MetadataTracking::track();
  }
  int v31 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v29);
  if (v30) {
    llvm::MetadataTracking::untrack();
  }
  memset(&v28, 0, sizeof(v28));
  v35[0] = v36;
  v35[1] = (void *)0x1000000000;
  unint64_t v32 = v34;
  uint64_t v33 = 0x1000000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v35, *(void *)(a1 + 192));
  AGCLLVMGen3TargetLowerer::getUSCFormatFromState(a6, a7);
  uint64_t v15 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v32, v15);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v35, *(void *)(a1 + 192));
  uint64_t v16 = *(void *)(a1 + 192);
  __int16 v27 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, a9, v16, (uint64_t)v26);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v32, Cast);
  uint64_t v18 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v35, v18);
  uint64_t v19 = llvm::PointerType::get();
  __int16 v27 = 257;
  uint64_t v20 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a3, v19, (uint64_t)v26);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v32, v20);
  MEMORY[0x1CB7A04E0](&v28, *(void *)(a1 + 1920));
  if (a8 <= 7) {
    std::string::append(&v28, off_1E65EC390[a8]);
  }
  uint64_t v21 = llvm::PointerType::get();
  uint64_t v22 = llvm::ConstantInt::get();
  __int16 v27 = 257;
  uint64_t v23 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v22, v21, (uint64_t)v26);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v35, v21);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v32, v23);
  llvm::FunctionType::get();
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v24 = &v28;
LABEL_10:
    strlen((const char *)v24);
    goto LABEL_11;
  }
  uint64_t v24 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if (v28.__r_.__value_.__r.__words[0]) {
    goto LABEL_10;
  }
LABEL_11:
  llvm::Module::getOrInsertFunction();
  __int16 v27 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v25 + 24), v25, (uint64_t)v32, v33, (uint64_t)v26);
  if (v32 != v34) {
    free(v32);
  }
  if (v35[0] != v36) {
    free(v35[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void AGCLLVMGen3TargetLowerer::setupConstantTextureIndexPRIDs(uint64_t a1, uint64_t *a2)
{
  v10[8] = *MEMORY[0x1E4F143B8];
  v9[0] = v10;
  v9[1] = (void *)0x800000000;
  uint64_t v3 = llvm::MDString::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v9, v3);
  uint64_t v4 = *((unsigned int *)a2 + 2);
  if (v4)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = *a2 + 8 * v4;
    do
    {
      unsigned int v7 = *(_DWORD *)(v5 + 4);
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDString::get();
      if (v7 >= 9) {
        abort();
      }
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDString::get();
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      uint64_t Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v9, Impl);
      v5 += 8;
    }
    while (v5 != v6);
  }
  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  if (v9[0] != v10) {
    free(v9[0]);
  }
}

void AGCLLVMGen3TargetLowerer::setupIndirectResourcePRIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[8] = *MEMORY[0x1E4F143B8];
  v10[0] = v11;
  v10[1] = (void *)0x800000000;
  uint64_t v4 = llvm::ValueAsMetadata::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v10, v4);
  uint64_t v5 = *(unsigned int *)(a3 + 8);
  if (v5)
  {
    uint64_t v6 = *(unsigned int **)a3;
    uint64_t v7 = *(void *)a3 + 16 * v5;
    do
    {
      unsigned int v8 = *v6;
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDString::get();
      if (v8 >= 9) {
        abort();
      }
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDString::get();
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      uint64_t Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v10, Impl);
      v6 += 4;
    }
    while (v6 != (unsigned int *)v7);
  }
  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  if (v10[0] != v11) {
    free(v10[0]);
  }
}

uint64_t AGCLLVMGen3TargetLowerer::setupResourcePRIDs(AGCLLVMGen3TargetLowerer *this, llvm::Value *a2, unsigned int a3, int a4)
{
  if (a4)
  {
    llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    llvm::ValueAsMetadata::get();
    llvm::MDString::get();
    if (a3 < 9) {
      goto LABEL_5;
    }
LABEL_6:
    abort();
  }
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  if (a3 >= 9) {
    goto LABEL_6;
  }
LABEL_5:
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  return llvm::NamedMDNode::addOperand();
}

void AGCLLVMGen3TargetLowerer::setupGLFragmentShaderPRIDs(uint64_t a1, uint64_t a2)
{
  v6[12] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 808)) {
    uint64_t v4 = &AGCLLVMGen3TargetLowerer::gl_raster_order_groups_macOS;
  }
  else {
    uint64_t v4 = &AGCLLVMGen3TargetLowerer::gl_raster_order_groups_iOS;
  }
  AGCLLVMGen3TargetLowerer::setupFixedPRIDS(a1, 1);
  v5[0] = v6;
  v5[1] = (void *)0x800000000;
  AGCLLVMGen3TargetLowerer::addLIBSpansFromDrawBufferState(a1, a2, (uint64_t)v4, (uint64_t)v5);
  AGCLLVMGen3TargetLowerer::setupLIBRasterOrderGroupFromSpans(a1, (uint64_t)v5);
  if (v5[0] != v6) {
    free(v5[0]);
  }
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildGExp(const char **a1, uint64_t a2, uint64_t *a3, uint64_t a4, llvm::Type ***a5)
{
  if ((*(_DWORD *)(*a3 + 8) & 0xFE) != 0x12 || (int v9 = *(_DWORD *)(*a3 + 32), v9 == 1))
  {
    BOOL v11 = 0;
    size_t v12 = "sr8unorm";
  }
  else
  {
    uint64_t v10 = "srg8unorm";
    if (v9 != 2) {
      uint64_t v10 = 0;
    }
    BOOL v11 = v9 != 4 && v9 != 2;
    if (v9 == 4) {
      size_t v12 = "srgba8unorm";
    }
    else {
      size_t v12 = v10;
    }
  }
  long long v18 = *(_OWORD *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  if (v19) {
    llvm::MetadataTracking::track();
  }
  int v20 = *(_DWORD *)(a2 + 24);
  uint64_t v13 = (char *)a1[297];
  if (v13)
  {
    size_t v14 = strlen(a1[297]);
    if (v11)
    {
LABEL_16:
      size_t v15 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    size_t v14 = 0;
    if (v11) {
      goto LABEL_16;
    }
  }
  size_t v15 = strlen(v12);
LABEL_19:
  uint64_t v16 = AGCLLVMGen3TargetLowerer::buildReadConversionIntrinsic((AGCLLVMGen3TargetLowerer *)a1, &v18, v13, v14, (uint64_t)v12, v15, a5, a3);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  return v16;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildGCmp(const char **a1, uint64_t a2, llvm::Type **a3, uint64_t a4, llvm::Type *a5)
{
  if ((*((_DWORD *)*a3 + 2) & 0xFE) != 0x12 || (int v9 = *((_DWORD *)*a3 + 8), v9 == 1))
  {
    BOOL v11 = 0;
    size_t v12 = "sr8unorm";
  }
  else
  {
    uint64_t v10 = "srg8unorm";
    if (v9 != 2) {
      uint64_t v10 = 0;
    }
    BOOL v11 = v9 != 4 && v9 != 2;
    if (v9 == 4) {
      size_t v12 = "srgba8unorm";
    }
    else {
      size_t v12 = v10;
    }
  }
  long long v18 = *(_OWORD *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  if (v19) {
    llvm::MetadataTracking::track();
  }
  int v20 = *(_DWORD *)(a2 + 24);
  uint64_t v13 = (char *)a1[298];
  if (v13)
  {
    size_t v14 = strlen(a1[298]);
    if (v11)
    {
LABEL_16:
      size_t v15 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    size_t v14 = 0;
    if (v11) {
      goto LABEL_16;
    }
  }
  size_t v15 = strlen(v12);
LABEL_19:
  uint64_t v16 = AGCLLVMGen3TargetLowerer::buildWriteConversionIntrinsic((AGCLLVMBuilder *)a1, &v18, v13, v14, (uint64_t)v12, v15, a5, a3);
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  return v16;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildUnpackNorm(uint64_t a1, long long *a2, llvm::Type **a3, unsigned int a4, int a5, int a6)
{
  long long v37 = *a2;
  uint64_t v38 = *((void *)a2 + 2);
  if (v38) {
    llvm::MetadataTracking::track();
  }
  int v39 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v37, a1 + 8);
  if (v38) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v12 = 152;
  if (a6 == 32) {
    uint64_t v12 = 168;
  }
  uint64_t v13 = *(llvm::Type ****)(a1 + v12);
  *(void *)&long long v32 = llvm::Type::getPrimitiveSizeInBits(*a3);
  *((void *)&v32 + 1) = v14;
  unsigned int v15 = llvm::TypeSize::operator unsigned long long() / a4;
  if (v15 < 2)
  {
    uint64_t v16 = "r";
  }
  else
  {
    if (v15 == 4) {
      uint64_t v16 = "rgba";
    }
    else {
      uint64_t v16 = "rg";
    }
    uint64_t v13 = (llvm::Type ***)llvm::FixedVectorType::get();
  }
  unint64_t v17 = a4;
  if (*v16)
  {
    *(void *)&long long v29 = v16;
    *(void *)&long long v30 = a4;
    LOWORD(v31) = 2051;
    char v18 = 2;
    unint64_t v17 = (unint64_t)&v29;
  }
  else
  {
    *(void *)&long long v29 = a4;
    LOWORD(v31) = 264;
    char v18 = 8;
  }
  uint64_t v19 = "unorm";
  if (a5) {
    uint64_t v19 = "snorm";
  }
  if (*v19)
  {
    *(void *)&long long v32 = v17;
    *(void *)&long long v33 = v19;
    LOBYTE(v34) = v18;
    BYTE1(v34) = 3;
  }
  else
  {
    long long v32 = v29;
    long long v33 = v30;
    uint64_t v34 = v31;
  }
  llvm::Twine::str((uint64_t *)__p, (llvm::Twine *)&v32);
  long long v26 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v27, (llvm::IRBuilderBase *)(a1 + 8));
  int v28 = *(_DWORD *)(a1 + 104);
  int v20 = *(void **)(a1 + 2376);
  if (v20) {
    size_t v21 = strlen(*(const char **)(a1 + 2376));
  }
  else {
    size_t v21 = 0;
  }
  if ((v36 & 0x80u) == 0) {
    uint64_t v22 = __p;
  }
  else {
    uint64_t v22 = (void **)__p[0];
  }
  if ((v36 & 0x80u) == 0) {
    uint64_t v23 = v36;
  }
  else {
    uint64_t v23 = (uint64_t)__p[1];
  }
  uint64_t v24 = AGCLLVMGen3TargetLowerer::buildReadConversionIntrinsic((AGCLLVMGen3TargetLowerer *)a1, &v26, v20, v21, (uint64_t)v22, v23, v13, (uint64_t *)a3);
  if (v27) {
    llvm::MetadataTracking::untrack();
  }
  if ((char)v36 < 0) {
    operator delete(__p[0]);
  }
  return v24;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildPackNorm(const char **a1, uint64_t a2, llvm::Type **a3, unsigned int a4, int a5)
{
  long long v32 = *(_OWORD *)a2;
  uint64_t v33 = *(void *)(a2 + 16);
  if (v33) {
    llvm::MetadataTracking::track();
  }
  int v34 = *(_DWORD *)(a2 + 24);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v32, (uint64_t)(a1 + 1));
  if (v33) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v10 = (llvm::Type *)llvm::IntegerType::get();
  if ((*((_DWORD *)*a3 + 2) & 0xFE) == 0x12)
  {
    BOOL v11 = "rg";
    if (*((_DWORD *)*a3 + 8) == 4) {
      BOOL v11 = "rgba";
    }
  }
  else
  {
    BOOL v11 = "r";
  }
  unint64_t v12 = a4;
  if (*v11)
  {
    *(void *)&long long v24 = v11;
    *(void *)&long long v25 = a4;
    LOWORD(v26) = 2051;
    char v13 = 2;
    unint64_t v12 = (unint64_t)&v24;
  }
  else
  {
    *(void *)&long long v24 = a4;
    LOWORD(v26) = 264;
    char v13 = 8;
  }
  uint64_t v14 = "unorm";
  if (a5) {
    uint64_t v14 = "snorm";
  }
  if (*v14)
  {
    *(void *)&long long v27 = v12;
    *(void *)&long long v28 = v14;
    LOBYTE(v29) = v13;
    BYTE1(v29) = 3;
  }
  else
  {
    long long v27 = v24;
    long long v28 = v25;
    uint64_t v29 = v26;
  }
  llvm::Twine::str((uint64_t *)__p, (llvm::Twine *)&v27);
  long long v21 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  if (v22) {
    llvm::MetadataTracking::track();
  }
  int v23 = *(_DWORD *)(a2 + 24);
  unsigned int v15 = (char *)a1[298];
  if (v15) {
    size_t v16 = strlen(a1[298]);
  }
  else {
    size_t v16 = 0;
  }
  if ((v31 & 0x80u) == 0) {
    unint64_t v17 = __p;
  }
  else {
    unint64_t v17 = (void **)__p[0];
  }
  if ((v31 & 0x80u) == 0) {
    uint64_t v18 = v31;
  }
  else {
    uint64_t v18 = (uint64_t)__p[1];
  }
  uint64_t v19 = AGCLLVMGen3TargetLowerer::buildWriteConversionIntrinsic((AGCLLVMBuilder *)a1, &v21, v15, v16, (uint64_t)v17, v18, v10, a3);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  if ((char)v31 < 0) {
    operator delete(__p[0]);
  }
  return v19;
}

uint64_t AGCLLVMGen3TargetLowerer::buildAtomicFnAddrSpaceCast(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v17 = *(_OWORD *)a2;
  uint64_t v18 = *(void *)(a2 + 16);
  if (v18) {
    llvm::MetadataTracking::track();
  }
  int v19 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v17);
  if (v18) {
    llvm::MetadataTracking::untrack();
  }
  unsigned int v8 = (void *)(a4 + 24);
  if (*(_DWORD *)(a4 + 32) >= 0x41u) {
    unsigned int v8 = (void *)*v8;
  }
  int v9 = *(_DWORD *)v8;
  unsigned int v10 = *(_DWORD *)(*(void *)a3 + 8);
  if ((v10 & 0xFE) == 0x12) {
    unsigned int v10 = *(_DWORD *)(**(void **)(*(void *)a3 + 16) + 8);
  }
  unsigned int v11 = v10 >> 8;
  if (v11 == 3)
  {
    if (!v9)
    {
      uint64_t v12 = a1 + 8;
      goto LABEL_17;
    }
  }
  else if (v11 == 1)
  {
    if (v9 == 1)
    {
      uint64_t v12 = a1 + 8;
      goto LABEL_17;
    }
    if (!v9)
    {
      uint64_t v12 = a1 + 8;
LABEL_17:
      uint64_t v13 = llvm::PointerType::get();
      __int16 v16 = 257;
      return llvm::IRBuilderBase::CreateCast(v12, 50, a3, v13, (uint64_t)v15);
    }
  }
  return a3;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildCoverageMask(uint64_t a1, long long *a2, llvm::Value *a3, unsigned int a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  long long v26 = *a2;
  uint64_t v27 = *((void *)a2 + 2);
  if (v27) {
    llvm::MetadataTracking::track();
  }
  int v28 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v26, a1 + 8);
  if (v27) {
    llvm::MetadataTracking::untrack();
  }
  unsigned int v8 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, a3, 1);
  if (a4 > 1)
  {
    long long v21 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v22, (llvm::IRBuilderBase *)(a1 + 8));
    int v23 = *(_DWORD *)(a1 + 104);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, long long *, llvm::Value *, void))(*(void *)a1 + 40))(a1, &v21, v8, 0);
    if (v22) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v11 = *(void *)(a1 + 1288);
    if (v11) {
      size_t v12 = strlen(*(const char **)(a1 + 1288));
    }
    else {
      size_t v12 = 0;
    }
    uint64_t v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, v11, v12, *(void *)(a1 + 200), *(void *)(a1 + 168));
    uint64_t v14 = llvm::ConstantFP::get();
    __int16 v25 = 257;
    uint64_t FMul = llvm::IRBuilderBase::CreateFMul(a1 + 8, v10, v14, (uint64_t)v24);
    __int16 v30 = 257;
    unsigned int v15 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)v13 + 16), v13, (uint64_t)&FMul, 1, (uint64_t)v29);
    uint64_t v16 = *(void *)(a1 + 2200);
    if (v16) {
      size_t v17 = strlen(*(const char **)(a1 + 2200));
    }
    else {
      size_t v17 = 0;
    }
    uint64_t v18 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v16, v17, *(void *)(a1 + 200), *(void *)(a1 + 192), *(void *)(a1 + 192));
    v29[0] = llvm::ConstantInt::get();
    uint64_t v19 = *(void *)(a1 + 192);
    __int16 v25 = 257;
    v29[1] = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v15, v19, (uint64_t)v24);
    __int16 v25 = 257;
    return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v18 + 24), v18, (uint64_t)v29, 2, (uint64_t)v24);
  }
  else
  {
    llvm::ConstantFP::get();
    llvm::IRBuilderBase::CreateFCmpHelper();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    __int16 v25 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getPerEncoderIndirectionTableSize()
{
  return 11;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getPerEncoderIndirectionTablePrivateDataIndex()
{
  return 10;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getPerEncoderIndirectionTableFragmentBuiltinEncoderStateIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getPerEncoderIndirectionTablePipelineStateHeapBufferIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getPerEncoderIndirectionTableICBHeapBufferIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getGeometryPipelineEmulationMailboxLookupBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getGeometryPipelineEmulationPerDispatchInfoIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getGeometryPipelineEmulationPerKickInfoIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getObjectIndirectBufferWgSizeIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getObjectIndirectBufferWgCountIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataCount()
{
  return 8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataGotIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataGlobalBindingsTableIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataDoneRayTracingFlagIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataShaderStrideIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataInstanceLevelsIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataShaderUserSizeIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickDoraStateBufferIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickLeafPointersInfoIndex()
{
  return 5;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickGin1122SWWABvhIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickDriverDataStartIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickPayloadStridesIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickUserBoundsIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickIftHeapIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerEncoderIndirectionTableIndex()
{
  return 13;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsDoraStateBufferIndex()
{
  return 12;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsDriverDataStartIndex()
{
  return 10;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsUserDataBoundsIndex()
{
  return 9;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsShaderStridesIndex()
{
  return 32;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsLeafPointersInfoIndex()
{
  return 11;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsIFTHeapIndex()
{
  return 8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsVFTHeapIndex()
{
  return 7;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsBVHHeapIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsSamplerHeapIndex()
{
  return 5;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsWidthTextureHeapIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsWriteTextureHeapIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsReadTextureHeapIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsSizeIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsDriverSizeIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionPerEncoderIndirectionTableIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionVisibleFunctionTableHeapBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionWidthTextureHeapBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionDylibGOTBufferIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionBVHStateHeapBufferIndex()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionWriteTextureGatherBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionReadTextureGatherBufferIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionSamplerGatherBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionSamplerHeapBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionWriteTextureHeapBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionReadTextureHeapBufferIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeDylibGlobalBindingTableIndex()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSCSPerShaderConfigurationTableBufferIndex()
{
  return 62;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSCSPerKickConfigurationTableBufferIndex()
{
  return 61;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeControlFlowPredicateLinkTokenWordsIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeControlFlowPredicateFailLinkAddressIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeControlFlowPredicatePassLinkAddressIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeControlFlowPredicateRightOperandIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeControlFlowPredicateLeftOperandIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeBVHStateHeapBufferIndex()
{
  return 59;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeProgressMarkerBufferIndex()
{
  return 57;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeDylibStageSpecificBindPointIndex(uint64_t a1, int a2)
{
  return (a2 + 64);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeGlobalConstructorsBufferIndex()
{
  return 58;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeDylibGOTBufferIndex()
{
  return 56;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSplitDispatchParameterEnabled()
{
  return 12;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSplitDispatchParameterThreadsPerGrid()
{
  return 9;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSplitDispatchParameterThreadOffset()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSplitDispatchParameterThreadgroupsPerGrid()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSplitDispatchParameterThreadgroupOffset()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSplitDispatchParameters()
{
  return 55;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeExecuteIndirectIndirectCommandBufferBufferIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeExecuteIndirectInputParametersBufferIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeVisibleFunctionTableHeapBufferIndex()
{
  return 51;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeIntersectionFunctionTableHeapBufferIndex()
{
  return 50;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputePerEncoderIndirectionTableIndex()
{
  return 49;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSamplerGatherBufferIndex()
{
  return 48;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSamplerHeapBufferIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeWidthTextureHeapBufferIndex()
{
  return 46;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeWriteTextureGatherBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeReadTextureGatherBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeWriteTextureHeapBufferIndex()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeReadTextureHeapBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeGatherOrPatchUpOffsetsBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeStageInBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeTGOptCountIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeTGOptParamsIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeFastIntegerDivideBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeIndirectBufferWgSizeIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeIndirectBufferWgCountIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeMaxSPIBindPoints()
{
  return 65;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeMaxAPIBindPointsBuffer(uint64_t a1, int a2)
{
  if (a2) {
    return 35;
  }
  else {
    return 31;
  }
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeMaxAPIBindPointsTexture()
{
  return 96;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getMeshLocalMeshDataIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderSCSPerShaderConfigurationTableBufferIndex()
{
  return 64;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderSCSPerKickConfigurationTableBufferIndex()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderDylibGlobalBindingTableIndex()
{
  return 61;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderDylibStageSpecificBindPointIndex(uint64_t a1, int a2)
{
  return (a2 + 62);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderGlobalConstructorsBufferIndex()
{
  return 60;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderDylibGOTBufferIndex()
{
  return 59;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderBVHStateHeapBufferIndex()
{
  return 54;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderFragmentViewportDepthRange()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderVertexAmplificationViewMappingsIndex()
{
  return 58;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderVisibleFunctionTableHeapBufferIndex()
{
  return 57;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderIntersectionFunctionTableHeapBufferIndex()
{
  return 55;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderPerEncoderIndirectionTableIndex()
{
  return 56;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderSamplerGatherBufferIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderSamplerHeapBufferIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderWidthTextureHeapBufferIndex()
{
  return 51;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderWriteTextureGatherBufferIndex()
{
  return 50;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderReadTextureGatherBufferIndex()
{
  return 49;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderWriteTextureHeapBufferIndex()
{
  return 48;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderReadTextureHeapBufferIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderBaseImmediateBufferIndex()
{
  return 46;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderBaseInstanceBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderBaseVertexBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderGLMTLReserved()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationConsumerControlPointIndexBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationConsumerPositionInPatchBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationConsumerPatchIndexBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationProducerInternalInstanceIDsBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationProducerInternalInstanceCountsBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationProducerDrawElemIndirectCmdsInputBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationProducerDrawElemIndirectCmdsOutputBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationInternalDrawIndexOffsetsBufferIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationInternalPerPatchDataBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationInternalPerPatchIDBufferIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationFactorBufferIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderMaxSPIBindPoints()
{
  return 65;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderMaxAPIIndirectBuffer()
{
  return 96;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderMaxAPIIndirectTexture()
{
  return 96;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderMaxAPIBindPointsBuffer(uint64_t a1, int a2)
{
  if (a2) {
    return 35;
  }
  else {
    return 31;
  }
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderMaxAPIBindPointsTexture()
{
  return 96;
}

uint64_t AGCLLVMGen3TargetLowerer::getTempRegistersLimitAcrossTileSizesForTileShader(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    LODWORD(v6) = 1;
    do
    {
      if (a3 / v6 >= 0x20) {
        unsigned int v7 = 32;
      }
      else {
        unsigned int v7 = a3 / v6;
      }
      if (v7)
      {
        int v8 = 1;
        do
        {
          uint64_t v6 = (v6 & 1) + v6;
          unsigned int v9 = (v8 & 1) + v8;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 832))(v5, v6, v9);
          if (result)
          {
            unsigned int v10 = 0;
            unsigned int v11 = *(_DWORD *)(a2 + 440) - 1;
            do
            {
              unsigned int v12 = (v11 + v10) >> 1;
              if (*(_DWORD *)(*(void *)(a2 + 432) + 4 * v12) < v9 * v6) {
                unsigned int v11 = v12 - 1;
              }
              else {
                unsigned int v10 = v12 + 1;
              }
            }
            while (v10 <= v11);
          }
          int v8 = v9 + 1;
        }
        while (v9 + 1 <= v7);
      }
      LODWORD(v6) = v6 + 1;
    }
    while (v6 < 0x21);
  }
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::buildImageBlockMemWriteLoop(void *a1, llvm::BasicBlock *a2, llvm::BasicBlock *a3, uint64_t a4, llvm::Type **a5, llvm::Type **AlignedLoad, llvm::Value *a7, uint64_t a8, llvm::Value *a9, unsigned int a10)
{
  unsigned int v15 = (llvm::IRBuilderBase *)(a1 + 1);
  a1[7] = a3;
  a1[8] = (char *)a3 + 40;
  uint64_t v16 = (llvm::Type *)a1[24];
  __int16 v31 = 257;
  PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(a1 + 1), v16, 2, (const llvm::Twine *)v30);
  llvm::PHINode::addIncoming(PHI, a7, a2);
  __int16 v31 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v15, PHI, a9, (const llvm::Twine *)v30);
  llvm::PHINode::addIncoming(PHI, Add, a3);
  if (*((unsigned char *)*AlignedLoad + 8) == 15)
  {
    __int16 v31 = 257;
    int v20 = AGCLLVMBuilder::tryDeducePointeeType(AlignedLoad, v19);
    uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v15, v20, (llvm::Value *)AlignedLoad, PHI, (const llvm::Twine *)v30);
    __int16 v31 = 257;
    int v23 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v22);
    uint64_t AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v15, v23, (uint64_t)GEP, 0, (uint64_t)v30);
  }
  __int16 v31 = 257;
  long long v24 = AGCLLVMBuilder::tryDeducePointeeType(a5, v19);
  uint64_t v25 = llvm::IRBuilderBase::CreateGEP(v15, v24, (llvm::Value *)a5, PHI, (const llvm::Twine *)v30);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v15, AlignedLoad, v25, 0);
  __int16 v31 = 257;
  uint64_t ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)v15, a10, (llvm::CmpInst **)Add, a8, (uint64_t)v30);
  return llvm::IRBuilderBase::CreateCondBr((uint64_t *)v15, ICmp, (uint64_t)a3, a4);
}

llvm::Value *AGCLLVMGen3TargetLowerer::splitUnalignedLoads(uint64_t a1, long long *a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, llvm::Value *a7, uint64_t a8, uint64_t a9)
{
  long long v40 = *a2;
  uint64_t v41 = *((void *)a2 + 2);
  if (v41) {
    llvm::MetadataTracking::track();
  }
  int v42 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v40, a1 + 8);
  if (v41) {
    llvm::MetadataTracking::untrack();
  }
  if ((*(_DWORD *)(a6 + 8) & 0xFE) == 0x12) {
    unsigned int v13 = *(_DWORD *)(a6 + 32);
  }
  else {
    unsigned int v13 = 1;
  }
  if (*(void *)(a1 + 184) == a6)
  {
    int v23 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v39 = 257;
    uint64_t Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), a7, v23, (const llvm::Twine *)v38);
    long long v35 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v36, (llvm::IRBuilderBase *)(a1 + 8));
    int v37 = *(_DWORD *)(a1 + 104);
    uint64_t Cast = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildReadOutputPartitionFromIR(a1, &v35, (uint64_t)"i8", 2, a4, a5, (llvm::Type ***)a6, Add, a8, a9);
    if (v36) {
      llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    uint64_t v14 = llvm::UndefValue::get();
    unsigned int v15 = (llvm::Value *)v14;
    if (v13)
    {
      uint64_t v16 = 0;
      unsigned int v26 = v13;
      uint64_t v27 = v13;
      do
      {
        size_t v17 = (llvm::Type *)a6;
        if ((*(_DWORD *)(a6 + 8) & 0xFE) == 0x12) {
          size_t v17 = **(llvm::Type ***)(a6 + 16);
        }
        unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v17);
        if (ScalarSizeInBits >= 9)
        {
          llvm::IntegerType::get();
          size_t v17 = (llvm::Type *)llvm::FixedVectorType::get();
        }
        long long v32 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v33, (llvm::IRBuilderBase *)(a1 + 8));
        int v34 = *(_DWORD *)(a1 + 104);
        uint64_t v19 = AGCLLVMGen3TargetLowerer::splitUnalignedLoads(a1, &v32, a3, a4, a5, v17, a7, a8, a9);
        if (v33) {
          llvm::MetadataTracking::untrack();
        }
        uint64_t v20 = a6;
        if ((*(_DWORD *)(a6 + 8) & 0xFE) == 0x12) {
          uint64_t v20 = **(void **)(a6 + 16);
        }
        __int16 v39 = 257;
        uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v19, v20, (uint64_t)v38);
        if (v26 != 1)
        {
          __int16 v39 = 257;
          uint64_t v22 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v15, Cast, v22, (const llvm::Twine *)v38);
        }
        a3 = a3 + (ScalarSizeInBits >> 3);
        ++v16;
        unsigned int v15 = Cast;
      }
      while (v27 != v16);
    }
    else
    {
      return (llvm::Value *)v14;
    }
  }
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildReadOutputPartitionFromIR(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::Type ***a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  long long v22 = *a2;
  uint64_t v23 = *((void *)a2 + 2);
  if (v23) {
    llvm::MetadataTracking::track();
  }
  int v24 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v22, a1 + 8);
  if (v23) {
    llvm::MetadataTracking::untrack();
  }
  v21[0] = AGCLLVMGen3TargetLowerer::getMemoryReadIntrinsicArgsFromIR(a1, a7, a3, a4);
  v21[1] = v16;
  uint64_t v17 = llvm::ConstantInt::get();
  char v19 = 0;
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, llvm::Type ***, uint64_t, uint64_t, uint64_t, char))(*(void *)a1 + 1600))(a1, v21, a5, v17, a7, a8, a9, a10, v19);
}

uint64_t AGCLLVMGen3TargetLowerer::splitUnalignedStore(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, unsigned int a5, unsigned int a6, llvm::Type **a7, llvm::Value *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  long long v38 = *a3;
  uint64_t v39 = *((void *)a3 + 2);
  if (v39) {
    llvm::MetadataTracking::track();
  }
  int v40 = *((_DWORD *)a3 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v38, a2 + 8);
  if (v39) {
    llvm::MetadataTracking::untrack();
  }
  unsigned int v15 = *a7;
  if ((*((_DWORD *)*a7 + 2) & 0xFE) == 0x12) {
    unsigned int v16 = *((_DWORD *)v15 + 8);
  }
  else {
    unsigned int v16 = 1;
  }
  if (v15 == *(llvm::Type **)(a2 + 184))
  {
    uint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v37 = 257;
    uint64_t Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a2 + 8), a8, v23, (const llvm::Twine *)&v34);
    long long v31 = *(_OWORD *)(a2 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v32, (llvm::IRBuilderBase *)(a2 + 8));
    int v33 = *(_DWORD *)(a2 + 104);
    uint64_t result = AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromIR(a1, a2, &v31, (uint64_t)"i8", 2, a5, a6, a7, Add, 0, a9, a10, 0);
    if (v32) {
      return llvm::MetadataTracking::untrack();
    }
  }
  else
  {
    *(_OWORD *)uint64_t v41 = 0u;
    long long v42 = 0u;
    uint64_t result = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a2, (llvm::Value *)a7, v41);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 24) = 0;
    if (v16)
    {
      uint64_t v18 = (llvm::Type ***)v41;
      uint64_t v19 = v16;
      do
      {
        uint64_t Cast = (uint64_t)*v18;
        unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(**v18);
        if (ScalarSizeInBits >= 9)
        {
          llvm::IntegerType::get();
          uint64_t v22 = llvm::FixedVectorType::get();
          __int16 v37 = 257;
          uint64_t Cast = llvm::IRBuilderBase::CreateCast(a2 + 8, 49, Cast, v22, (uint64_t)&v34);
        }
        long long v28 = *(_OWORD *)(a2 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v29, (llvm::IRBuilderBase *)(a2 + 8));
        int v30 = *(_DWORD *)(a2 + 104);
        AGCLLVMGen3TargetLowerer::splitUnalignedStore(&v34, a2, &v28, a4, a5, a6, Cast, a8, a9, a10);
        *(_OWORD *)a1 = v34;
        uint64_t result = (uint64_t)llvm::TrackingMDRef::operator=((void *)(a1 + 16), &v35);
        *(_DWORD *)(a1 + 24) = v36;
        if (v35) {
          uint64_t result = llvm::MetadataTracking::untrack();
        }
        if (v29) {
          uint64_t result = llvm::MetadataTracking::untrack();
        }
        a4 = a4 + (ScalarSizeInBits >> 3);
        ++v18;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromIR(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, llvm::Type **a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  long long v24 = *a3;
  uint64_t v25 = *((void *)a3 + 2);
  if (v25) {
    llvm::MetadataTracking::track();
  }
  int v26 = *((_DWORD *)a3 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v24, a2 + 8);
  if (v25) {
    llvm::MetadataTracking::untrack();
  }
  v23[0] = AGCLLVMGen3TargetLowerer::getMemoryWriteIntrinsicArgsFromIR(a2, *a8, a4, a5);
  v23[1] = v18;
  uint64_t v19 = llvm::ConstantInt::get();
  HIBYTE(v21) = a13 ^ 1;
  LOBYTE(v21) = a10;
  return (*(uint64_t (**)(uint64_t, void *, void, uint64_t, llvm::Type **, uint64_t, uint64_t, BOOL, uint64_t, __int16))(*(void *)a2 + 1608))(a2, v23, a6, v19, a8, a9, a11, a11 != 0, a12, v21);
}

uint64_t AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromFormat(uint64_t a1, uint64_t a2, long long *a3, AGCLLVMGen3TargetLowerer *a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  long long v23 = *a3;
  uint64_t v24 = *((void *)a3 + 2);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *((_DWORD *)a3 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v23, a2 + 8);
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  v16.i32[0] = a5;
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  v22[0] = (a5 << 32) | ((unint64_t)v17.u32[0] << 48) | (a4 << 16) | (unint64_t)AGCLLVMGen3TargetLowerer::getUSCFormatFromState(a4, 0);
  v22[1] = llvm::FixedVectorType::get();
  uint64_t v18 = llvm::ConstantInt::get();
  __int16 v20 = 0;
  return (*(uint64_t (**)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, __int16))(*(void *)a2 + 1608))(a2, v22, a6, v18, a8, a9, a10, a10 != 0, a11, v20);
}

uint64_t AGCLLVMGen3TargetLowerer::buildExtractColorCoverageMask(void *a1, long long *a2, llvm::Value *a3, llvm::Value *a4)
{
  long long v21 = *a2;
  uint64_t v22 = *((void *)a2 + 2);
  if (v22) {
    llvm::MetadataTracking::track();
  }
  int v23 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v21, (uint64_t)(a1 + 1));
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  int v8 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v20 = 257;
  uint64_t Mul = llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 1), a4, v8, (const llvm::Twine *)v19);
  uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 1520))(a1);
  __int16 v18 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 39, Mul, v10, (uint64_t)v17);
  __int16 v20 = 257;
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), a3, Cast, (const llvm::Twine *)v19);
  uint64_t v13 = a1[24];
  __int16 v18 = 257;
  uint64_t v14 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v13, (uint64_t)v17);
  __int16 v20 = 257;
  unsigned int v15 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v14, v15, (const llvm::Twine *)v19);
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildColorCoverageMaskSet(void *a1, long long *a2, uint64_t a3)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a3;
  uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 1520))(a1);
  uint64_t v19 = v21;
  long long v20 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.", "");
  uint64_t v6 = a1[25];
  BOOL v7 = v5 == v6;
  if (v5 == v6) {
    int v8 = "agx2.";
  }
  else {
    int v8 = "agx3.8xmsaa.";
  }
  uint64_t v9 = 12;
  if (v7) {
    uint64_t v9 = 5;
  }
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, v8, &v8[v9]);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "colcvgmsk.coords", "");
  long long v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v15, (uint64_t)(a1 + 1));
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, (uint64_t)v19, v20, v5, a1[30]);
  __int16 v14 = 257;
  unsigned int v11 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v10 + 24), v10, (uint64_t)&v18, 1, (uint64_t)v13);
  if (v19 != v21) {
    free(v19);
  }
  return v11;
}

uint64_t AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  long long v20 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.agx2.threadgroup.", "");
  llvm::SmallVectorTemplateBase<char,true>::push_back(&v19, aXyz[a4]);
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v9 = a1 + 8;
  __int16 v15 = 257;
  uint64_t v10 = llvm::IRBuilderBase::CreateCall(v9, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  unsigned char v13[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v9, 38, (uint64_t)v10, a3, (uint64_t)v13);
  if (v19 != v21) {
    free(v19);
  }
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildLayerId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  long long v18 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.get.layerid", "");
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v7 = a1 + 8;
  __int16 v13 = 257;
  int v8 = llvm::IRBuilderBase::CreateCall(v7, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19) {
    free(v17);
  }
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildThreadgroupDispatchSize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void v21[8] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  long long v20 = xmmword_1CADD6290;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.agx2.dispatch.threadgroup.", "");
  llvm::SmallVectorTemplateBase<char,true>::push_back(&v19, aXyz[a4]);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, ".size", "");
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v9 = a1 + 8;
  __int16 v15 = 257;
  uint64_t v10 = llvm::IRBuilderBase::CreateCall(v9, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  unsigned char v13[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v9, 38, (uint64_t)v10, a3, (uint64_t)v13);
  if (v19 != v21) {
    free(v19);
  }
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildGlobalID(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void v21[8] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = v21;
  long long v20 = xmmword_1CADD6290;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.agx2.thread.position.in.grid.", "");
  llvm::SmallVectorTemplateBase<char,true>::push_back(&v19, aXyz[a4]);
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v9 = a1 + 8;
  __int16 v15 = 257;
  uint64_t v10 = llvm::IRBuilderBase::CreateCall(v9, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  unsigned char v13[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v9, 38, (uint64_t)v10, a3, (uint64_t)v13);
  if (v19 != v21) {
    free(v19);
  }
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  long long v18 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.quad.group", "");
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v7 = a1 + 8;
  __int16 v13 = 257;
  int v8 = llvm::IRBuilderBase::CreateCall(v7, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19) {
    free(v17);
  }
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadBroadcast(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[292], a3, a4);
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadShuffle(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[293], a3, a4);
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadShuffleXor(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[296], a3, a4);
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedReduce(uint64_t result, llvm::Value *a2, llvm::Value *a3, int a4, int a5)
{
  uint64_t v6 = *(void *)a2;
  if ((*(_DWORD *)(*(void *)a2 + 8) & 0xFE) == 0x12) {
    uint64_t v6 = **(void **)(v6 + 16);
  }
  switch(a4)
  {
    case 0:
      __int16 v14 = 257;
      uint64_t result = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(result + 8), a2, a3, (const llvm::Twine *)v13);
      break;
    case 1:
      __int16 v14 = 257;
      uint64_t result = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(result + 8), a2, a3, (const llvm::Twine *)v13);
      break;
    case 2:
      __int16 v14 = 257;
      uint64_t result = llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)(result + 8), a2, a3, (const llvm::Twine *)v13);
      break;
    case 3:
    case 7:
    case 9:
      uint64_t v7 = (llvm::IRBuilderBase *)(result + 8);
      if (*(unsigned __int8 *)(v6 + 8) > 6u)
      {
        __int16 v12 = 257;
        uint64_t result = llvm::IRBuilderBase::CreateMul(v7, a2, a3, (const llvm::Twine *)v11);
      }
      else
      {
        __int16 v14 = 257;
        uint64_t result = llvm::IRBuilderBase::CreateFMul((uint64_t)v7, (uint64_t)a2, (uint64_t)a3, (uint64_t)v13);
      }
      break;
    case 4:
    case 8:
    case 10:
      int v8 = (llvm::IRBuilderBase *)(result + 8);
      if (*(unsigned __int8 *)(v6 + 8) > 6u)
      {
        __int16 v12 = 257;
        uint64_t result = llvm::IRBuilderBase::CreateAdd(v8, a2, a3, (const llvm::Twine *)v11);
      }
      else
      {
        __int16 v14 = 257;
        uint64_t result = llvm::IRBuilderBase::CreateFAdd((uint64_t)v8, (uint64_t)a2, (uint64_t)a3, (uint64_t)v13);
      }
      break;
    case 5:
      if (*(unsigned __int8 *)(v6 + 8) <= 6u)
      {
        __int16 v14 = 257;
        goto LABEL_15;
      }
      __int16 v14 = 257;
      long long v9 = (uint64_t *)(result + 8);
      if (a5) {
        uint64_t v10 = 38;
      }
      else {
        uint64_t v10 = 34;
      }
      goto LABEL_24;
    case 6:
      if (*(unsigned __int8 *)(v6 + 8) > 6u)
      {
        __int16 v14 = 257;
        long long v9 = (uint64_t *)(result + 8);
        if (a5) {
          uint64_t v10 = 40;
        }
        else {
          uint64_t v10 = 36;
        }
LABEL_24:
        llvm::IRBuilderBase::CreateICmp(v9, v10, (llvm::CmpInst **)a2, (uint64_t)a3, (uint64_t)v13);
      }
      else
      {
        __int16 v14 = 257;
LABEL_15:
        llvm::IRBuilderBase::CreateFCmpHelper();
      }
      __int16 v14 = 257;
      uint64_t result = llvm::IRBuilderBase::CreateSelect();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedQuadReduce(uint64_t a1, uint64_t a2, llvm::Type **Cast, unsigned int a4, int a5)
{
  long long v39 = *(_OWORD *)a2;
  uint64_t v40 = *(void *)(a2 + 16);
  if (v40) {
    llvm::MetadataTracking::track();
  }
  int v41 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v39);
  if (v40) {
    llvm::MetadataTracking::untrack();
  }
  long long v36 = *(_OWORD *)a2;
  uint64_t v37 = *(void *)(a2 + 16);
  if (v37) {
    llvm::MetadataTracking::track();
  }
  int v38 = *(_DWORD *)(a2 + 24);
  uint64_t v28 = AGCLLVMGen3TargetLowerer::buildQuadElement(a1, (uint64_t)&v36, *(void *)(a1 + 192));
  if (v37) {
    llvm::MetadataTracking::untrack();
  }
  int v25 = *Cast;
  if (llvm::Type::getScalarSizeInBits(*Cast) <= 7)
  {
    uint64_t v8 = *(void *)(a1 + 184);
    __int16 v48 = 257;
    uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)Cast, v8, (uint64_t)v47);
  }
  uint64_t v9 = 0;
  uint64_t Select = 0;
  getSimdReductionIdentity(a4, (uint64_t *)Cast);
  do
  {
    uint64_t v29 = Select;
    int v11 = (llvm::Value *)llvm::ConstantInt::get();
    long long v33 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v34, (llvm::IRBuilderBase *)(a1 + 8));
    int v12 = *(_DWORD *)(a1 + 104);
    int v35 = v12;
    long long v55 = v33;
    uint64_t v56 = v34;
    if (v34)
    {
      llvm::MetadataTracking::track();
      int v12 = v35;
    }
    int v57 = v12;
    AGCLLVMTargetLowerer::SetIP(a1, &v55);
    if (v56) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v13 = (llvm::Value *)llvm::ConstantInt::get();
    long long v52 = v33;
    uint64_t v53 = v34;
    if (v34) {
      llvm::MetadataTracking::track();
    }
    int v54 = v35;
    __int16 v14 = (llvm::Type **)AGCLLVMGen3TargetLowerer::buildQuadElement(a1, (uint64_t)&v52, *(void *)(a1 + 192));
    if (v53) {
      llvm::MetadataTracking::untrack();
    }
    long long v49 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v50, (llvm::IRBuilderBase *)(a1 + 8));
    int v51 = *(_DWORD *)(a1 + 104);
    uint64_t v15 = (llvm::CmpInst **)AGCLLVMGen3TargetLowerer::buildQuadShuffle((char **)a1, (uint64_t)&v49, v14, v11);
    __int16 v48 = 257;
    uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v15, (uint64_t)v11, (uint64_t)v47);
    __int16 v46 = 257;
    uint64_t v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v13, ICmp, (const llvm::Twine *)v45);
    if (v50) {
      llvm::MetadataTracking::untrack();
    }
    int v18 = 4;
    do
    {
      random();
      uint64_t v19 = (llvm::Type **)llvm::ConstantInt::get();
      long long v42 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v43, (llvm::IRBuilderBase *)(a1 + 8));
      int v44 = *(_DWORD *)(a1 + 104);
      long long v20 = (llvm::CmpInst **)AGCLLVMGen3TargetLowerer::buildQuadShuffle((char **)a1, (uint64_t)&v42, v19, v11);
      __int16 v48 = 257;
      long long v21 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v20, (uint64_t)v19, (uint64_t)v47);
      __int16 v46 = 257;
      uint64_t v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v17, v21, (const llvm::Twine *)v45);
      if (v43) {
        llvm::MetadataTracking::untrack();
      }
      --v18;
    }
    while (v18);
    if (v34) {
      llvm::MetadataTracking::untrack();
    }
    long long v30 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v31, (llvm::IRBuilderBase *)(a1 + 8));
    int v32 = *(_DWORD *)(a1 + 104);
    AGCLLVMGen3TargetLowerer::buildQuadShuffle((char **)a1, (uint64_t)&v30, Cast, v11);
    if (v31) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v48 = 257;
    uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    if (a4 - 7 > 1)
    {
      if (a4 - 9 > 1) {
        goto LABEL_35;
      }
      __int16 v48 = 257;
      uint64_t v22 = (uint64_t *)(a1 + 8);
      uint64_t v23 = 36;
    }
    else
    {
      __int16 v48 = 257;
      uint64_t v22 = (uint64_t *)(a1 + 8);
      uint64_t v23 = 37;
    }
    llvm::IRBuilderBase::CreateICmp(v22, v23, (llvm::CmpInst **)v11, v28, (uint64_t)v47);
    __int16 v46 = 257;
    uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
LABEL_35:
    if (v29) {
      uint64_t Select = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedReduce(a1, v29, Select, a4, a5);
    }
    ++v9;
  }
  while (v9 != 4);
  __int16 v48 = 257;
  return llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)Select, (uint64_t)v25, (uint64_t)v47);
}

uint64_t getSimdReductionIdentity(unsigned int a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12) {
    uint64_t v2 = **(void **)(*a2 + 16);
  }
  if (a1 <= 0xA)
  {
    if (((1 << a1) & 0x516) != 0)
    {
      if (*(unsigned __int8 *)(v2 + 8) <= 6u) {
        return llvm::ConstantFP::get();
      }
      return llvm::ConstantInt::get();
    }
    if (((1 << a1) & 0x288) != 0)
    {
      if (*(unsigned __int8 *)(v2 + 8) <= 6u) {
        return llvm::ConstantFP::get();
      }
      return llvm::ConstantInt::get();
    }
    if (!a1) {
      return llvm::ConstantInt::get();
    }
  }
  return (uint64_t)a2;
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(uint64_t a1, uint64_t a2, llvm::Type **a3, int a4, char a5)
{
  int v54 = a4;
  char v53 = a5;
  __int16 v52 = 32;
  long long v49 = *(_OWORD *)a2;
  uint64_t v50 = *(void *)(a2 + 16);
  if (v50) {
    llvm::MetadataTracking::track();
  }
  int v51 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v49);
  if (v50) {
    llvm::MetadataTracking::untrack();
  }
  long long v46 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v47, (llvm::IRBuilderBase *)(a1 + 8));
  int v48 = *(_DWORD *)(a1 + 104);
  uint64_t v8 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, void))(*(void *)a1 + 1536))(a1, &v46, *(void *)(a1 + 192));
  if (v47) {
    llvm::MetadataTracking::untrack();
  }
  long long v42 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v43, (llvm::IRBuilderBase *)(a1 + 8));
  int v44 = *(_DWORD *)(a1 + 104);
  uint64_t v9 = AGCLLVMGen3TargetLowerer::buildSimdGroupScratchMemoryPtr(a1, (uint64_t)&v42, v8);
  if (v43) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v45 = v9;
  uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v11 = *(void *)(a1 + 200);
  LOWORD(v29) = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)v8, v11, (uint64_t)v28);
  __int16 v41 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v10, Cast, (const llvm::Twine *)v40);
  long long v36 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v37, (llvm::IRBuilderBase *)(a1 + 8));
  int v38 = *(_DWORD *)(a1 + 104);
  active = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedActiveThreadsMask(a1, (uint64_t)&v36, Shl, v9);
  if (v37) {
    llvm::MetadataTracking::untrack();
  }
  long long v39 = active;
  uint64_t v15 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)"llvm.ctpop.i32", 14, *(void *)(a1 + 200), *(void *)(a1 + 200));
  uint64_t v35 = v15;
  int v16 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v29) = 257;
  uint64_t Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)Shl, v16, (const llvm::Twine *)v28);
  __int16 v41 = 257;
  uint64_t v34 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), active, Sub, (const llvm::Twine *)v40);
  LOWORD(v29) = 257;
  int v18 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v15 + 24), v15, (uint64_t)&v34, 1, (uint64_t)v28);
  uint64_t v19 = *(void *)v8;
  __int16 v41 = 257;
  uint64_t v20 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v18, v19, (uint64_t)v40);
  v28[0] = a1;
  v28[1] = &v45;
  void v28[2] = &v33;
  v28[3] = &v52;
  uint64_t v29 = &v54;
  long long v30 = &v53;
  uint64_t v31 = &v35;
  int v32 = &v39;
  uint64_t v33 = v20;
  llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)(a1 + 376), *a3);
  if ((unint64_t)llvm::TypeSize::operator unsigned long long() < 0x21) {
    return AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(AGCLLVMBuilder::InsertPoint,llvm::Value *,SimdReduceFunction,BOOL,unsigned short)::$_0::operator()((uint64_t)v28, a3);
  }
  Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
  if (*((_DWORD *)*a3 + 8))
  {
    unint64_t v22 = 0;
    do
    {
      __int16 v41 = 257;
      uint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)a3, v23, (const llvm::Twine *)v40);
      int v25 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(AGCLLVMBuilder::InsertPoint,llvm::Value *,SimdReduceFunction,BOOL,unsigned short)::$_0::operator()((uint64_t)v28, Element);
      __int16 v41 = 257;
      int v26 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v25, v26, (const llvm::Twine *)v40);
      ++v22;
    }
    while (v22 < *((unsigned int *)*a3 + 8));
  }
  return (uint64_t)InsertElement;
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedActiveThreadsMask(uint64_t a1, uint64_t a2, llvm::Type **a3, uint64_t a4)
{
  long long v21 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  if (v22) {
    llvm::MetadataTracking::track();
  }
  int v23 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v21);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = llvm::PointerType::get();
  __int16 v20 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a4, v8, (uint64_t)v19);
  uint64_t v10 = (llvm::Type **)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v10, Cast, 0);
  long long v16 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v17, (llvm::IRBuilderBase *)(a1 + 8));
  int v18 = *(_DWORD *)(a1 + 104);
  AGCLLVMGen3TargetLowerer::buildSimdBarrier(a1, (uint64_t)&v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  llvm::IRBuilderBase::CreateAtomicRMW((uint64_t *)(a1 + 8), 5, Cast, a3);
  long long v13 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v14, (llvm::IRBuilderBase *)(a1 + 8));
  int v15 = *(_DWORD *)(a1 + 104);
  AGCLLVMGen3TargetLowerer::buildSimdBarrier(a1, (uint64_t)&v13);
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v11 = *(llvm::Type **)(a1 + 200);
  __int16 v20 = 257;
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v11, Cast, 0, (uint64_t)v19);
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(AGCLLVMBuilder::InsertPoint,llvm::Value *,SimdReduceFunction,BOOL,unsigned short)::$_0::operator()(uint64_t a1, llvm::Type **a2)
{
  uint64_t v4 = *(void *)a1;
  llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)(*(void *)a1 + 376), *a2);
  uint64_t v5 = **(void **)(a1 + 8);
  long long v46 = a2;
  uint64_t v6 = llvm::PointerType::get();
  __int16 v54 = 257;
  **(void **)(a1 + 8) = llvm::IRBuilderBase::CreateCast(v4 + 8, 49, v5, v6, (uint64_t)v53);
  uint64_t v7 = *a2;
  uint64_t v8 = **(llvm::Value ***)(a1 + 8);
  uint64_t v9 = **(llvm::Value ***)(a1 + 16);
  __int16 v54 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v4 + 8), v7, v8, v9, (const llvm::Twine *)v53);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(v4 + 8), a2, (uint64_t)GEP, 0);
  if (**(unsigned __int16 **)(a1 + 24) >= 2u)
  {
    int v10 = 1;
    do
    {
      long long v50 = *(_OWORD *)(v4 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)&v51, (llvm::IRBuilderBase *)(v4 + 8));
      int v52 = *(_DWORD *)(v4 + 104);
      AGCLLVMGen3TargetLowerer::buildSimdBarrier(v4, (uint64_t)&v50);
      uint64_t v11 = v51;
      if (v51) {
        llvm::MetadataTracking::untrack();
      }
      __int16 v54 = 257;
      int v12 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v11);
      uint64_t AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v4 + 8), v12, (uint64_t)GEP, 0, (uint64_t)v53);
      getSimdReductionIdentity(**(_DWORD **)(a1 + 32), AlignedLoad);
      long long v13 = **(llvm::Value ***)(a1 + 16);
      uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v54 = 257;
      uint64_t Sub = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(v4 + 8), v13, v14, (const llvm::Twine *)v53);
      uint64_t v16 = llvm::ConstantInt::get();
      __int16 v54 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)(v4 + 8), 39, Sub, v16, (uint64_t)v53);
      uint64_t v17 = *v46;
      int v18 = **(llvm::Value ***)(a1 + 8);
      uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v54 = 257;
      __int16 v20 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v4 + 8), (llvm::Value *)Sub, v19, (const llvm::Twine *)v53);
      __int16 v49 = 257;
      long long v21 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v4 + 8), v17, v18, v20, (const llvm::Twine *)v48);
      __int16 v54 = 257;
      int v23 = AGCLLVMBuilder::tryDeducePointeeType(v21, v22);
      llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v4 + 8), v23, (uint64_t)v21, 0, (uint64_t)v53);
      __int16 v49 = 257;
      uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      int v25 = (llvm::Type **)AGCLLVMGen3TargetLowerer::buildEmulatedReduce(v4, (llvm::Value *)AlignedLoad, Select, **(_DWORD **)(a1 + 32), **(unsigned __int8 **)(a1 + 40));
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(v4 + 8), v25, (uint64_t)GEP, 0);
      v10 *= 2;
    }
    while ((v10 & 0xFFFEu) < **(unsigned __int16 **)(a1 + 24));
  }
  unsigned int v26 = **(_DWORD **)(a1 + 32);
  if (v26 > 0xA)
  {
    uint64_t v34 = 0;
  }
  else
  {
    int v27 = 1 << v26;
    if ((v27 & 0x7F) != 0)
    {
      uint64_t v28 = *(void *)(a1 + 56);
      uint64_t v29 = **(void **)(a1 + 48);
      __int16 v54 = 257;
      long long v30 = llvm::IRBuilderBase::CreateCall(v4 + 8, *(void *)(v29 + 24), v29, v28, 1, (uint64_t)v53);
      uint64_t v31 = *(void *)(v4 + 192);
      __int16 v49 = 257;
      uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v4 + 8, 38, (uint64_t)v30, v31, (uint64_t)v48);
      uint64_t v33 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v54 = 257;
    }
    else
    {
      if ((v27 & 0x180) != 0)
      {
        uint64_t v34 = **(llvm::Value ***)(a1 + 16);
        goto LABEL_13;
      }
      uint64_t Cast = **(llvm::Value ***)(a1 + 16);
      uint64_t v33 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v54 = 257;
    }
    uint64_t v34 = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(v4 + 8), Cast, v33, (const llvm::Twine *)v53);
  }
LABEL_13:
  uint64_t v35 = *v46;
  long long v36 = **(llvm::Value ***)(a1 + 8);
  uint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v54 = 257;
  int v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v4 + 8), v34, v37, (const llvm::Twine *)v53);
  __int16 v49 = 257;
  long long v39 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v4 + 8), v35, v36, v38, (const llvm::Twine *)v48);
  __int16 v54 = 257;
  __int16 v41 = AGCLLVMBuilder::tryDeducePointeeType(v39, v40);
  long long v42 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v4 + 8), v41, (uint64_t)v39, 0, (uint64_t)v53);
  if ((**(_DWORD **)(a1 + 32) - 9) <= 1)
  {
    uint64_t v43 = llvm::ConstantInt::get();
    __int16 v54 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)(v4 + 8), 39, (llvm::CmpInst **)v34, v43, (uint64_t)v53);
    getSimdReductionIdentity(**(_DWORD **)(a1 + 32), v42);
    __int16 v54 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return (uint64_t)v42;
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedFirstActiveThreadIndex(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v22 = *(_OWORD *)a2;
  uint64_t v23 = *(void *)(a2 + 16);
  if (v23) {
    llvm::MetadataTracking::track();
  }
  int v24 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v22);
  if (v23) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v9 = *(void *)(a1 + 200);
  __int16 v21 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)a3, v9, (uint64_t)v20);
  __int16 v26 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v8, Cast, (const llvm::Twine *)v25);
  long long v17 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v18, (llvm::IRBuilderBase *)(a1 + 8));
  int v19 = *(_DWORD *)(a1 + 104);
  uint64_t active = AGCLLVMGen3TargetLowerer::buildEmulatedActiveThreadsMask(a1, (uint64_t)&v17, Shl, a4);
  if (v18) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, (uint64_t)"llvm.cttz.i32", 13, *(void *)(a1 + 200), *(void *)(a1 + 200), *(void *)(a1 + 176));
  v25[0] = active;
  v25[1] = llvm::ConstantInt::get();
  __int16 v21 = 257;
  uint64_t v14 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v13 + 24), v13, (uint64_t)v25, 2, (uint64_t)v20);
  uint64_t v15 = *a3;
  __int16 v21 = 257;
  return llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v14, v15, (uint64_t)v20);
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadBallot(uint64_t a1, long long *a2)
{
  long long v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *((_DWORD *)a2 + 6);
  uint64_t v4 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildQuadElement(a1, (uint64_t)&v15, *(void *)(a1 + 192));
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v14 = 257;
  llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v5, v4, (const llvm::Twine *)v13);
  llvm::ConstantInt::get();
  __int16 v12 = 257;
  uint64_t Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *((_DWORD *)a2 + 6);
  uint64_t v7 = AGCLLVMGen3TargetLowerer::buildEmulatedQuadReduce(a1, (uint64_t)&v9, Select, 1u, 0);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return v7;
}

uint64_t AGCLLVMGen3TargetLowerer::buildSimdBallot(uint64_t a1, long long *a2)
{
  long long v23 = *a2;
  uint64_t v24 = *((void *)a2 + 2);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *((_DWORD *)a2 + 6);
  uint64_t v4 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, void))(*(void *)a1 + 1536))(a1, &v23, *(void *)(a1 + 192));
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  long long v20 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v21, (llvm::IRBuilderBase *)(a1 + 8));
  int v22 = *(_DWORD *)(a1 + 104);
  uint64_t v5 = AGCLLVMGen3TargetLowerer::buildSimdGroupScratchMemoryPtr(a1, (uint64_t)&v20, v4);
  if (v21) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v7 = *(void *)(a1 + 200);
  __int16 v19 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)v4, v7, (uint64_t)v18);
  __int16 v17 = 257;
  llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v6, Cast, (const llvm::Twine *)v16);
  llvm::ConstantInt::get();
  __int16 v15 = 257;
  uint64_t Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
  long long v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v13, (llvm::IRBuilderBase *)(a1 + 8));
  int v14 = *(_DWORD *)(a1 + 104);
  uint64_t active = AGCLLVMGen3TargetLowerer::buildEmulatedActiveThreadsMask(a1, (uint64_t)&v12, Select, v5);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  return active;
}

void AGCLLVMGen4TargetConfig::createMetalVertexShader()
{
}

void AGCLLVMGen4TargetConfig::createMetalFragmentShader()
{
}

std::string *AGCLLVMGen4TargetLowerer::getImageBlockWriteIntrinsicFromDimension@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, void *a4@<X8>)
{
  *a3 = 0;
  uint64_t result = (std::string *)std::string::basic_string[abi:nn180100]<0>(a4, *(char **)(a1 + 1920));
  switch(a2)
  {
    case 0:
      uint64_t v7 = ".1d";
      goto LABEL_10;
    case 1:
      uint64_t v7 = ".1d.array";
      goto LABEL_10;
    case 2:
      uint64_t v7 = ".2d";
      goto LABEL_10;
    case 3:
      uint64_t v8 = ".2d.array";
      goto LABEL_14;
    case 4:
      uint64_t v7 = ".2d.msaa";
      goto LABEL_10;
    case 5:
      uint64_t result = std::string::append(result, ".3d");
      int v9 = 2;
      goto LABEL_15;
    case 6:
      uint64_t v7 = ".cubestf";
      goto LABEL_10;
    case 7:
      uint64_t v7 = ".cubestf.array";
LABEL_10:
      uint64_t result = std::string::append(result, v7);
      break;
    case 8:
      uint64_t v8 = ".2d.msaa.array";
LABEL_14:
      uint64_t result = std::string::append(result, v8);
      int v9 = 1;
LABEL_15:
      *a3 = v9;
      break;
    default:
      return result;
  }
  return result;
}

void AGCLLVMGen4TargetLowerer::buildDepthf(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[16] = *MEMORY[0x1E4F143B8];
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  memset(&v14, 0, sizeof(v14));
  v21[0] = v22;
  v21[1] = (void *)0x1000000000;
  uint64_t v18 = v20;
  uint64_t v19 = 0x1000000000;
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v13 = 257;
  int v9 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  MEMORY[0x1CB7A04E0](&v14, a1[188]);
  if (a3)
  {
    std::string::append(&v14, ".depth");
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, a1[21]);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, a3);
  }
  if (a4)
  {
    std::string::append(&v14, ".stencil");
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, a1[24]);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, a4);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, a1[24]);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, (uint64_t)v9);
  llvm::FunctionType::get();
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v10 = &v14;
LABEL_12:
    strlen((const char *)v10);
    goto LABEL_13;
  }
  uint64_t v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v14.__r_.__value_.__r.__words[0]) {
    goto LABEL_12;
  }
LABEL_13:
  llvm::Module::getOrInsertFunction();
  __int16 v13 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v11 + 24), v11, (uint64_t)v18, v19, (uint64_t)v12);
  if (v18 != v20) {
    free(v18);
  }
  if (v21[0] != v22) {
    free(v21[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

BOOL AGCLLVMGen4TargetLowerer::isImageWriteBlockFromDimensionSupported(uint64_t a1, int a2)
{
  return (a2 - 2) < 4;
}

uint64_t AGCLLVMGen4TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

void AGCLLVMGen4TargetLowerer::buildEmitpix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, AGCLLVMGen3TargetLowerer *a6, int a7, uint64_t a8, uint64_t a9)
{
  v44[16] = *MEMORY[0x1E4F143B8];
  long long v37 = *(_OWORD *)a2;
  uint64_t v38 = *(void *)(a2 + 16);
  if (v38) {
    llvm::MetadataTracking::track();
  }
  int v39 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v37);
  if (v38) {
    llvm::MetadataTracking::untrack();
  }
  v43[0] = v44;
  v43[1] = (void *)0x1000000000;
  uint64_t v40 = v42;
  uint64_t v41 = 0x1000000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v43, *(void *)(a1 + 192));
  AGCLLVMGen3TargetLowerer::getUSCFormatFromState(a6, a7);
  uint64_t v15 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v40, v15);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v43, *(void *)(a1 + 192));
  uint64_t v16 = *(void *)(a1 + 192);
  __int16 v34 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, a9, v16, (uint64_t)v33);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v40, Cast);
  uint64_t v18 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v43, v18);
  uint64_t v19 = llvm::PointerType::get();
  __int16 v34 = 257;
  uint64_t v20 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a3, v19, (uint64_t)v33);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v40, v20);
  int v32 = 0;
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t, int *))(*(void *)a1 + 1648))(__s, a1, a8, &v32);
  uint64_t v21 = llvm::PointerType::get();
  uint64_t v22 = llvm::ConstantInt::get();
  __int16 v34 = 257;
  uint64_t v23 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v22, v21, (uint64_t)v33);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v43, v21);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v40, v23);
  if ((v32 - 1) <= 1)
  {
    if (*(void *)(a1 + 1616)) {
      strlen(*(const char **)(a1 + 1616));
    }
    uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
    uint64_t v25 = 200;
    if (v32 == 1) {
      uint64_t v25 = 192;
    }
    uint64_t v26 = *(void *)(a1 + v25);
    __int16 v34 = 257;
    uint64_t v27 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v33);
    v31[16] = 257;
    uint64_t v28 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v27, v26, (uint64_t)v31);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v43, v26);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v40, v28);
  }
  llvm::FunctionType::get();
  if ((v36 & 0x80000000) == 0)
  {
    uint64_t v29 = __s;
LABEL_14:
    strlen(v29);
    goto LABEL_15;
  }
  uint64_t v29 = *(char **)__s;
  if (*(void *)__s) {
    goto LABEL_14;
  }
LABEL_15:
  llvm::Module::getOrInsertFunction();
  __int16 v34 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v30 + 24), v30, (uint64_t)v40, v41, (uint64_t)v33);
  if (v40 != v42) {
    free(v40);
  }
  if (v43[0] != v44) {
    free(v43[0]);
  }
  if (v36 < 0) {
    operator delete(*(void **)__s);
  }
}

double AGCLLVMGen4TargetConfig::AGCLLVMGen4TargetConfig(uint64_t a1, int a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 8) = "agx2-apple-ios";
  *(void *)(a1 + 16) = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 28) = (unsigned __int16)a2;
  *(void *)(a1 + 32) = "/metal_rt_precise.metallib";
  double result = 7.29290208e-304;
  *(void *)(a1 + 40) = 0x100010000010100;
  *(void *)(a1 + 48) = 124;
  *(void *)a1 = &unk_1F25D8288;
  return result;
}

uint64_t *AGCLLVMGen5TargetConfig::initializeAirBuiltinsMap(AGCLLVMGen5TargetConfig *this, AGCLLVMAirBuiltinsMap *a2)
{
  AGCLLVMGen3TargetConfig::initializeAirBuiltinsMap(this, a2);
  uint64_t v3 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_warped_coordinates", 0x16uLL);
  *(_DWORD *)(v3 + 8) = 1;
  *(void *)(v3 + 16) = AGCLLVMAirBuiltins::buildCoordinateWarp;
  *(void *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 9;
  *(_WORD *)(v3 + 36) = 0;
  uint64_t v4 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_dewarped_coordinates", 0x18uLL);
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)(v4 + 16) = AGCLLVMAirBuiltins::buildCoordinateDewarp;
  *(void *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 9;
  *(_WORD *)(v4 + 36) = 0;
  uint64_t v5 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "map_screen_to_physical_coordinates", 0x22uLL);
  *(_DWORD *)(v5 + 8) = 1;
  *(void *)(v5 + 16) = AGCLLVMAirBuiltins::buildCoordinateWarp;
  *(void *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 32) = 9;
  *(_WORD *)(v5 + 36) = 0;
  uint64_t v6 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "map_physical_to_screen_coordinates", 0x22uLL);
  *(_DWORD *)(v6 + 8) = 1;
  *(void *)(v6 + 16) = AGCLLVMAirBuiltins::buildCoordinateDewarp;
  *(void *)(v6 + 24) = 0;
  *(_DWORD *)(v6 + 32) = 9;
  *(_WORD *)(v6 + 36) = 0;
  uint64_t v7 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_ballot", 0xBuLL);
  *(_DWORD *)(v7 + 8) = 1;
  *(void *)(v7 + 16) = AGCLLVMAirBuiltins::buildQuadBallot;
  *(void *)(v7 + 24) = 0;
  *(_DWORD *)(v7 + 32) = 3;
  *(_WORD *)(v7 + 36) = 0;
  uint64_t v8 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_broadcast", 0xEuLL);
  *(_DWORD *)(v8 + 8) = 1;
  *(void *)(v8 + 16) = AGCLLVMAirBuiltins::buildSimdBroadcast;
  *(void *)(v8 + 24) = 0;
  *(_DWORD *)(v8 + 32) = 5;
  *(_WORD *)(v8 + 36) = 0;
  uint64_t v9 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_ballot", 0xBuLL);
  *(_DWORD *)(v9 + 8) = 1;
  *(void *)(v9 + 16) = AGCLLVMAirBuiltins::buildSimdBallot;
  *(void *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 32) = 9;
  *(_WORD *)(v9 + 36) = 0;
  uint64_t v10 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle", 0xCuLL);
  *(_DWORD *)(v10 + 8) = 1;
  *(void *)(v10 + 16) = AGCLLVMAirBuiltins::buildSimdShuffle;
  *(void *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 32) = 5;
  *(_WORD *)(v10 + 36) = 0;
  uint64_t v11 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_up", 0xFuLL);
  *(_DWORD *)(v11 + 8) = 1;
  *(void *)(v11 + 16) = AGCLLVMAirBuiltins::buildSimdShuffleUp;
  *(void *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 32) = 5;
  *(_WORD *)(v11 + 36) = 0;
  uint64_t v12 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_down", 0x11uLL);
  *(_DWORD *)(v12 + 8) = 1;
  *(void *)(v12 + 16) = AGCLLVMAirBuiltins::buildSimdShuffleDown;
  *(void *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 32) = 5;
  *(_WORD *)(v12 + 36) = 0;
  uint64_t v13 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_xor", 0x10uLL);
  *(_DWORD *)(v13 + 8) = 1;
  *(void *)(v13 + 16) = AGCLLVMAirBuiltins::buildSimdShuffleXor;
  *(void *)(v13 + 24) = 0;
  *(_DWORD *)(v13 + 32) = 5;
  *(_WORD *)(v13 + 36) = 0;
  uint64_t v14 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_rotate_up", 0x16uLL);
  *(_DWORD *)(v14 + 8) = 1;
  *(void *)(v14 + 16) = AGCLLVMAirBuiltins::buildSimdShuffleRotateUp;
  *(void *)(v14 + 24) = 0;
  *(_DWORD *)(v14 + 32) = 5;
  *(_WORD *)(v14 + 36) = 0;
  uint64_t v15 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_rotate_down", 0x18uLL);
  *(_DWORD *)(v15 + 8) = 1;
  *(void *)(v15 + 16) = AGCLLVMAirBuiltins::buildSimdShuffleRotateDown;
  *(void *)(v15 + 24) = 0;
  *(_DWORD *)(v15 + 32) = 5;
  *(_WORD *)(v15 + 36) = 0;
  uint64_t v16 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_threads_per_simdgroup", 0x19uLL);
  *(_DWORD *)(v16 + 8) = 1;
  *(void *)(v16 + 16) = AGCLLVMAirBuiltins::buildThreadsPerSimdgroup;
  *(void *)(v16 + 24) = 0;
  *(_DWORD *)(v16 + 32) = 9;
  *(_WORD *)(v16 + 36) = 0;
  uint64_t v17 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_thread_index_in_simdgroup", 0x1DuLL);
  *(_DWORD *)(v17 + 8) = 1;
  *(void *)(v17 + 16) = AGCLLVMAirBuiltins::buildThreadIndexInSimdGroup;
  *(void *)(v17 + 24) = 0;
  *(_DWORD *)(v17 + 32) = 9;
  *(_WORD *)(v17 + 36) = 0;
  uint64_t v18 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_simdgroup_index_in_threadgroup", 0x22uLL);
  *(_DWORD *)(v18 + 8) = 1;
  *(void *)(v18 + 16) = AGCLLVMAirBuiltins::buildSimdGroupIndexInThreadgroup;
  *(void *)(v18 + 24) = 0;
  *(_DWORD *)(v18 + 32) = 9;
  *(_WORD *)(v18 + 36) = 0;
  uint64_t v19 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_active_threads_mask", 0x18uLL);
  *(_DWORD *)(v19 + 8) = 1;
  *(void *)(v19 + 16) = AGCLLVMAirBuiltins::buildSimdActiveThreadsMask;
  *(void *)(v19 + 24) = 0;
  *(_DWORD *)(v19 + 32) = 9;
  *(_WORD *)(v19 + 36) = 256;
  uint64_t v20 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_active_threads_mask", 0x18uLL);
  *(_DWORD *)(v20 + 8) = 1;
  *(void *)(v20 + 16) = AGCLLVMAirBuiltins::buildQuadActiveThreadsMask;
  *(void *)(v20 + 24) = 0;
  *(_DWORD *)(v20 + 32) = 1;
  *(_WORD *)(v20 + 36) = 0;
  uint64_t v21 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_all", 8uLL);
  *(_DWORD *)(v21 + 8) = 1;
  *(void *)(v21 + 16) = AGCLLVMAirBuiltins::buildSimdAll;
  *(void *)(v21 + 24) = 0;
  *(_DWORD *)(v21 + 32) = 3;
  *(_WORD *)(v21 + 36) = 0;
  uint64_t v22 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_any", 8uLL);
  *(_DWORD *)(v22 + 8) = 1;
  *(void *)(v22 + 16) = AGCLLVMAirBuiltins::buildSimdAny;
  *(void *)(v22 + 24) = 0;
  *(_DWORD *)(v22 + 32) = 3;
  *(_WORD *)(v22 + 36) = 0;
  uint64_t v23 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_all", 8uLL);
  *(_DWORD *)(v23 + 8) = 1;
  *(void *)(v23 + 16) = AGCLLVMAirBuiltins::buildQuadAll;
  *(void *)(v23 + 24) = 0;
  *(_DWORD *)(v23 + 32) = 3;
  *(_WORD *)(v23 + 36) = 0;
  uint64_t v24 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_any", 8uLL);
  *(_DWORD *)(v24 + 8) = 1;
  *(void *)(v24 + 16) = AGCLLVMAirBuiltins::buildQuadAny;
  *(void *)(v24 + 24) = 0;
  *(_DWORD *)(v24 + 32) = 3;
  *(_WORD *)(v24 + 36) = 0;
  uint64_t v25 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_vote_all", 0xDuLL);
  *(_DWORD *)(v25 + 8) = 1;
  *(void *)(v25 + 16) = AGCLLVMAirBuiltins::buildSimdVoteAll;
  *(void *)(v25 + 24) = 0;
  *(_DWORD *)(v25 + 32) = 9;
  *(_WORD *)(v25 + 36) = 0;
  uint64_t v26 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_vote_any", 0xDuLL);
  *(_DWORD *)(v26 + 8) = 1;
  *(void *)(v26 + 16) = AGCLLVMAirBuiltins::buildSimdVoteAny;
  *(void *)(v26 + 24) = 0;
  *(_DWORD *)(v26 + 32) = 9;
  *(_WORD *)(v26 + 36) = 0;
  uint64_t v27 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_vote_all", 0xDuLL);
  *(_DWORD *)(v27 + 8) = 1;
  *(void *)(v27 + 16) = AGCLLVMAirBuiltins::buildQuadVoteAll;
  *(void *)(v27 + 24) = 0;
  *(_DWORD *)(v27 + 32) = 3;
  *(_WORD *)(v27 + 36) = 0;
  uint64_t v28 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_vote_any", 0xDuLL);
  *(_DWORD *)(v28 + 8) = 1;
  *(void *)(v28 + 16) = AGCLLVMAirBuiltins::buildQuadVoteAny;
  *(void *)(v28 + 24) = 0;
  *(_DWORD *)(v28 + 32) = 3;
  *(_WORD *)(v28 + 36) = 0;
  uint64_t v29 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_load", 0x19uLL);
  *(_DWORD *)(v29 + 8) = 1;
  *(void *)(v29 + 16) = AGCLLVMAirBuiltins::buildSimdMatrixLoad;
  *(void *)(v29 + 24) = 0;
  *(_DWORD *)(v29 + 32) = 12;
  *(_WORD *)(v29 + 36) = 0;
  uint64_t v30 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_store", 0x1AuLL);
  *(_DWORD *)(v30 + 8) = 1;
  *(void *)(v30 + 16) = AGCLLVMAirBuiltins::buildSimdMatrixStore;
  *(void *)(v30 + 24) = 0;
  *(_DWORD *)(v30 + 32) = 12;
  *(_WORD *)(v30 + 36) = 0;
  uint64_t v31 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_load_bf16", 0x1EuLL);
  *(_DWORD *)(v31 + 8) = 1;
  *(void *)(v31 + 16) = AGCLLVMAirBuiltins::buildSimdMatrixLoad;
  *(void *)(v31 + 24) = 0;
  *(_DWORD *)(v31 + 32) = 12;
  *(_WORD *)(v31 + 36) = 0;
  uint64_t v32 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_store_bf16", 0x1FuLL);
  *(_DWORD *)(v32 + 8) = 1;
  *(void *)(v32 + 16) = AGCLLVMAirBuiltins::buildSimdMatrixStore;
  *(void *)(v32 + 24) = 0;
  *(_DWORD *)(v32 + 32) = 12;
  *(_WORD *)(v32 + 36) = 0;
  uint64_t v33 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_multiply_accumulate", 0x28uLL);
  *(_DWORD *)(v33 + 8) = 1;
  *(void *)(v33 + 16) = AGCLLVMAirBuiltins::buildSimdMatrixMultiplyAccumulate;
  *(void *)(v33 + 24) = 0;
  *(_DWORD *)(v33 + 32) = 12;
  *(_WORD *)(v33 + 36) = 0;
  uint64_t v34 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_init_diag", 0x1EuLL);
  *(_DWORD *)(v34 + 8) = 1;
  *(void *)(v34 + 16) = AGCLLVMAirBuiltins::buildSimdMatrixThreadElementsInit;
  *(void *)(v34 + 24) = 0;
  *(_DWORD *)(v34 + 32) = 12;
  *(_WORD *)(v34 + 36) = 0;
  uint64_t v35 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_init_filled", 0x20uLL);
  *(_DWORD *)(v35 + 8) = 1;
  *(void *)(v35 + 16) = AGCLLVMAirBuiltins::buildSimdMatrixThreadElementsInit;
  *(void *)(v35 + 24) = 0;
  *(_DWORD *)(v35 + 32) = 12;
  *(_WORD *)(v35 + 36) = 0;
  uint64_t v36 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_and", 8uLL);
  *(_DWORD *)(v36 + 8) = 1;
  *(void *)(v36 + 16) = AGCLLVMAirBuiltins::buildQuadReduce;
  *(void *)(v36 + 24) = 0;
  *(_DWORD *)(v36 + 32) = 12;
  *(_WORD *)(v36 + 36) = 0;
  uint64_t v37 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_or", 7uLL);
  *(_DWORD *)(v37 + 8) = 1;
  *(void *)(v37 + 16) = AGCLLVMAirBuiltins::buildQuadReduce;
  *(void *)(v37 + 24) = 0;
  *(_DWORD *)(v37 + 32) = 12;
  *(_WORD *)(v37 + 36) = 0;
  uint64_t v38 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_xor", 8uLL);
  *(_DWORD *)(v38 + 8) = 1;
  *(void *)(v38 + 16) = AGCLLVMAirBuiltins::buildQuadReduce;
  *(void *)(v38 + 24) = 0;
  *(_DWORD *)(v38 + 32) = 12;
  *(_WORD *)(v38 + 36) = 0;
  uint64_t v39 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_product", 0xCuLL);
  *(_DWORD *)(v39 + 8) = 1;
  *(void *)(v39 + 16) = AGCLLVMAirBuiltins::buildQuadReduce;
  *(void *)(v39 + 24) = 0;
  *(_DWORD *)(v39 + 32) = 12;
  *(_WORD *)(v39 + 36) = 0;
  uint64_t v40 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_sum", 8uLL);
  *(_DWORD *)(v40 + 8) = 1;
  *(void *)(v40 + 16) = AGCLLVMAirBuiltins::buildQuadReduce;
  *(void *)(v40 + 24) = 0;
  *(_DWORD *)(v40 + 32) = 12;
  *(_WORD *)(v40 + 36) = 0;
  uint64_t v41 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_max", 8uLL);
  *(_DWORD *)(v41 + 8) = 1;
  *(void *)(v41 + 16) = AGCLLVMAirBuiltins::buildQuadReduce;
  *(void *)(v41 + 24) = 0;
  *(_DWORD *)(v41 + 32) = 12;
  *(_WORD *)(v41 + 36) = 0;
  uint64_t v42 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_min", 8uLL);
  *(_DWORD *)(v42 + 8) = 1;
  *(void *)(v42 + 16) = AGCLLVMAirBuiltins::buildQuadReduce;
  *(void *)(v42 + 24) = 0;
  *(_DWORD *)(v42 + 32) = 12;
  *(_WORD *)(v42 + 36) = 0;
  uint64_t v43 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_prefix_inclusive_product", 0x1DuLL);
  *(_DWORD *)(v43 + 8) = 1;
  *(void *)(v43 + 16) = AGCLLVMAirBuiltins::buildQuadReduce;
  *(void *)(v43 + 24) = 0;
  *(_DWORD *)(v43 + 32) = 12;
  *(_WORD *)(v43 + 36) = 0;
  uint64_t v44 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_prefix_inclusive_sum", 0x19uLL);
  *(_DWORD *)(v44 + 8) = 1;
  *(void *)(v44 + 16) = AGCLLVMAirBuiltins::buildQuadReduce;
  *(void *)(v44 + 24) = 0;
  *(_DWORD *)(v44 + 32) = 12;
  *(_WORD *)(v44 + 36) = 0;
  uint64_t v45 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_prefix_exclusive_product", 0x1DuLL);
  *(_DWORD *)(v45 + 8) = 1;
  *(void *)(v45 + 16) = AGCLLVMAirBuiltins::buildQuadReduce;
  *(void *)(v45 + 24) = 0;
  *(_DWORD *)(v45 + 32) = 12;
  *(_WORD *)(v45 + 36) = 0;
  uint64_t v46 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_prefix_exclusive_sum", 0x19uLL);
  *(_DWORD *)(v46 + 8) = 1;
  *(void *)(v46 + 16) = AGCLLVMAirBuiltins::buildQuadReduce;
  *(void *)(v46 + 24) = 0;
  *(_DWORD *)(v46 + 32) = 12;
  *(_WORD *)(v46 + 36) = 0;
  uint64_t v47 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_is_helper_thread", 0x15uLL);
  *(_DWORD *)(v47 + 8) = 1;
  *(void *)(v47 + 16) = AGCLLVMAirBuiltins::buildQuadIsHelperThread;
  *(void *)(v47 + 24) = 0;
  *(_DWORD *)(v47 + 32) = 12;
  *(_WORD *)(v47 + 36) = 0;
  uint64_t v48 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_is_first", 0xDuLL);
  *(_DWORD *)(v48 + 8) = 1;
  *(void *)(v48 + 16) = AGCLLVMAirBuiltins::buildQuadIsFirstActiveThread;
  *(void *)(v48 + 24) = 0;
  *(_DWORD *)(v48 + 32) = 12;
  *(_WORD *)(v48 + 36) = 0;
  uint64_t v49 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_broadcast_first", 0x14uLL);
  *(_DWORD *)(v49 + 8) = 1;
  *(void *)(v49 + 16) = AGCLLVMAirBuiltins::buildQuadBroadcastFirstActiveThread;
  *(void *)(v49 + 24) = 0;
  *(_DWORD *)(v49 + 32) = 12;
  *(_WORD *)(v49 + 36) = 0;
  uint64_t v50 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_and", 8uLL);
  *(_DWORD *)(v50 + 8) = 1;
  *(void *)(v50 + 16) = AGCLLVMAirBuiltins::buildSimdReduce;
  *(void *)(v50 + 24) = 0;
  *(_DWORD *)(v50 + 32) = 12;
  *(_WORD *)(v50 + 36) = 0;
  uint64_t v51 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_or", 7uLL);
  *(_DWORD *)(v51 + 8) = 1;
  *(void *)(v51 + 16) = AGCLLVMAirBuiltins::buildSimdReduce;
  *(void *)(v51 + 24) = 0;
  *(_DWORD *)(v51 + 32) = 12;
  *(_WORD *)(v51 + 36) = 0;
  uint64_t v52 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_xor", 8uLL);
  *(_DWORD *)(v52 + 8) = 1;
  *(void *)(v52 + 16) = AGCLLVMAirBuiltins::buildSimdReduce;
  *(void *)(v52 + 24) = 0;
  *(_DWORD *)(v52 + 32) = 12;
  *(_WORD *)(v52 + 36) = 0;
  uint64_t v53 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_product", 0xCuLL);
  *(_DWORD *)(v53 + 8) = 1;
  *(void *)(v53 + 16) = AGCLLVMAirBuiltins::buildSimdReduce;
  *(void *)(v53 + 24) = 0;
  *(_DWORD *)(v53 + 32) = 12;
  *(_WORD *)(v53 + 36) = 0;
  uint64_t v54 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_sum", 8uLL);
  *(_DWORD *)(v54 + 8) = 1;
  *(void *)(v54 + 16) = AGCLLVMAirBuiltins::buildSimdReduce;
  *(void *)(v54 + 24) = 0;
  *(_DWORD *)(v54 + 32) = 12;
  *(_WORD *)(v54 + 36) = 0;
  uint64_t v55 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_max", 8uLL);
  *(_DWORD *)(v55 + 8) = 1;
  *(void *)(v55 + 16) = AGCLLVMAirBuiltins::buildSimdReduce;
  *(void *)(v55 + 24) = 0;
  *(_DWORD *)(v55 + 32) = 12;
  *(_WORD *)(v55 + 36) = 0;
  uint64_t v56 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_min", 8uLL);
  *(_DWORD *)(v56 + 8) = 1;
  *(void *)(v56 + 16) = AGCLLVMAirBuiltins::buildSimdReduce;
  *(void *)(v56 + 24) = 0;
  *(_DWORD *)(v56 + 32) = 12;
  *(_WORD *)(v56 + 36) = 0;
  uint64_t v57 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_prefix_inclusive_product", 0x1DuLL);
  *(_DWORD *)(v57 + 8) = 1;
  *(void *)(v57 + 16) = AGCLLVMAirBuiltins::buildSimdReduce;
  *(void *)(v57 + 24) = 0;
  *(_DWORD *)(v57 + 32) = 12;
  *(_WORD *)(v57 + 36) = 0;
  uint64_t v58 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_prefix_inclusive_sum", 0x19uLL);
  *(_DWORD *)(v58 + 8) = 1;
  *(void *)(v58 + 16) = AGCLLVMAirBuiltins::buildSimdReduce;
  *(void *)(v58 + 24) = 0;
  *(_DWORD *)(v58 + 32) = 12;
  *(_WORD *)(v58 + 36) = 0;
  uint64_t v59 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_prefix_exclusive_product", 0x1DuLL);
  *(_DWORD *)(v59 + 8) = 1;
  *(void *)(v59 + 16) = AGCLLVMAirBuiltins::buildSimdReduce;
  *(void *)(v59 + 24) = 0;
  *(_DWORD *)(v59 + 32) = 12;
  *(_WORD *)(v59 + 36) = 0;
  uint64_t v60 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_prefix_exclusive_sum", 0x19uLL);
  *(_DWORD *)(v60 + 8) = 1;
  *(void *)(v60 + 16) = AGCLLVMAirBuiltins::buildSimdReduce;
  *(void *)(v60 + 24) = 0;
  *(_DWORD *)(v60 + 32) = 12;
  *(_WORD *)(v60 + 36) = 0;
  uint64_t v61 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_is_helper_thread", 0x15uLL);
  *(_DWORD *)(v61 + 8) = 1;
  *(void *)(v61 + 16) = AGCLLVMAirBuiltins::buildSimdIsHelperThread;
  *(void *)(v61 + 24) = 0;
  *(_DWORD *)(v61 + 32) = 12;
  *(_WORD *)(v61 + 36) = 0;
  uint64_t v62 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_is_first", 0xDuLL);
  *(_DWORD *)(v62 + 8) = 1;
  *(void *)(v62 + 16) = AGCLLVMAirBuiltins::buildSimdIsFirstActiveThread;
  *(void *)(v62 + 24) = 0;
  *(_DWORD *)(v62 + 32) = 12;
  *(_WORD *)(v62 + 36) = 0;
  uint64_t v63 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_broadcast_first", 0x14uLL);
  *(_DWORD *)(v63 + 8) = 1;
  *(void *)(v63 + 16) = AGCLLVMAirBuiltins::buildSimdBroadcastFirstActiveThread;
  *(void *)(v63 + 24) = 0;
  *(_DWORD *)(v63 + 32) = 12;
  *(_WORD *)(v63 + 36) = 0;
  uint64_t v64 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_and_fill_up", 0x18uLL);
  *(_DWORD *)(v64 + 8) = 1;
  *(void *)(v64 + 16) = AGCLLVMAirBuiltins::buildShuffleAndFill;
  *(void *)(v64 + 24) = 0;
  *(_DWORD *)(v64 + 32) = 12;
  *(_WORD *)(v64 + 36) = 0;
  uint64_t v65 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_and_fill_down", 0x1AuLL);
  *(_DWORD *)(v65 + 8) = 1;
  *(void *)(v65 + 16) = AGCLLVMAirBuiltins::buildShuffleAndFill;
  *(void *)(v65 + 24) = 0;
  *(_DWORD *)(v65 + 32) = 12;
  *(_WORD *)(v65 + 36) = 0;
  uint64_t v66 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_and_fill_up", 0x18uLL);
  *(_DWORD *)(v66 + 8) = 1;
  *(void *)(v66 + 16) = AGCLLVMAirBuiltins::buildShuffleAndFill;
  *(void *)(v66 + 24) = 0;
  *(_DWORD *)(v66 + 32) = 12;
  *(_WORD *)(v66 + 36) = 0;
  uint64_t v67 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_and_fill_down", 0x1AuLL);
  *(_DWORD *)(v67 + 8) = 1;
  *(void *)(v67 + 16) = AGCLLVMAirBuiltins::buildShuffleAndFill;
  *(void *)(v67 + 24) = 0;
  *(_DWORD *)(v67 + 32) = 12;
  *(_WORD *)(v67 + 36) = 0;
  uint64_t v68 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_thread_position_in_grid", 0x1BuLL);
  *(_DWORD *)(v68 + 8) = 1;
  *(void *)(v68 + 16) = AGCLLVMAirBuiltins::buildGetThreadPositionInGrid;
  *(void *)(v68 + 24) = 0;
  *(_DWORD *)(v68 + 32) = 3;
  *(_WORD *)(v68 + 36) = 0;
  uint64_t v69 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_position", 0xCuLL);
  *(_DWORD *)(v69 + 8) = 1;
  *(void *)(v69 + 16) = AGCLLVMAirBuiltins::buildGetPosition;
  *(void *)(v69 + 24) = 0;
  *(_DWORD *)(v69 + 32) = 3;
  *(_WORD *)(v69 + 36) = 0;
  uint64_t v70 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_sample_id", 0xDuLL);
  *(_DWORD *)(v70 + 8) = 1;
  *(void *)(v70 + 16) = AGCLLVMAirBuiltins::buildGetSampleID;
  *(void *)(v70 + 24) = 0;
  *(_DWORD *)(v70 + 32) = 3;
  *(_WORD *)(v70 + 36) = 0;
  uint64_t v71 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_vertex_id", 0xDuLL);
  *(_DWORD *)(v71 + 8) = 1;
  *(void *)(v71 + 16) = AGCLLVMAirBuiltins::buildGetVertexID;
  *(void *)(v71 + 24) = 0;
  *(_DWORD *)(v71 + 32) = 3;
  *(_WORD *)(v71 + 36) = 0;
  uint64_t v72 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_instance_id", 0xFuLL);
  *(_DWORD *)(v72 + 8) = 1;
  *(void *)(v72 + 16) = AGCLLVMAirBuiltins::buildGetInstanceID;
  *(void *)(v72 + 24) = 0;
  *(_DWORD *)(v72 + 32) = 3;
  *(_WORD *)(v72 + 36) = 0;
  uint64_t v73 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_amplification_id", 0x14uLL);
  *(_DWORD *)(v73 + 8) = 1;
  *(void *)(v73 + 16) = AGCLLVMAirBuiltins::buildGetAmplificationID;
  *(void *)(v73 + 24) = 0;
  *(_DWORD *)(v73 + 32) = 3;
  *(_WORD *)(v73 + 36) = 0;
  uint64_t v74 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_patch_id", 0xCuLL);
  *(_DWORD *)(v74 + 8) = 1;
  *(void *)(v74 + 16) = AGCLLVMAirBuiltins::buildGetPatchID;
  *(void *)(v74 + 24) = 0;
  *(_DWORD *)(v74 + 32) = 3;
  *(_WORD *)(v74 + 36) = 0;
  double result = llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_render_target_array_index", 0x1DuLL);
  uint64_t v76 = *result;
  *(_DWORD *)(v76 + 8) = 1;
  *(void *)(v76 + 16) = AGCLLVMAirBuiltins::buildGetRenderTargetArrayIndex;
  *(void *)(v76 + 24) = 0;
  *(_DWORD *)(v76 + 32) = 3;
  *(_WORD *)(v76 + 36) = 0;
  return result;
}

void AGCLLVMGen5TargetConfig::createGeometryPipelineEmulationFWAllocationPreMeshShader(AGCLLVMGen5TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  {
    {
      AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
      *(void *)algn_1EA6139D8 = 0;
      qword_1EA6139E0 = 0;
    }
  }
  operator new();
}

void AGCLLVMGen5TargetConfig::createGeometryPipelineEmulationFWAllocationPostObjectShader(AGCLLVMGen5TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  {
    {
      AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
      *(void *)algn_1EA6139B8 = 0;
      qword_1EA6139C0 = 0;
    }
  }
  operator new();
}

void AGCLLVMGen5TargetConfig::createGeometryPipelineEmulationFWAllocationSetupShader(AGCLLVMGen5TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  {
    {
      AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
      *(void *)algn_1EA613998 = 0;
      qword_1EA6139A0 = 0;
    }
  }
  operator new();
}

void AGCLLVMGen5TargetConfig::createExecuteIndirectCDMPatchUpShader(AGCLLVMGen5TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  v29[3] = *MEMORY[0x1E4F143B8];
  memset(&__p, 0, sizeof(__p));
  switch(*(_DWORD *)(*((void *)a2 + 4) + 28))
  {
    case 0xE:
    case 0x10:
    case 0x19:
    case 0x1A:
    case 0x1B:
      uint64_t v5 = "cei_patch_exec_gen4";
      goto LABEL_6;
    case 0x11:
    case 0x12:
      uint64_t v5 = "cei_patch_exec_gen5";
      goto LABEL_6;
    case 0x13:
    case 0x14:
    case 0x15:
      uint64_t v5 = "cei_patch_exec_gen5x";
      goto LABEL_6;
    case 0x16:
      std::string::basic_string[abi:nn180100]<0>(v20, "cei_patch_exec_gen6_g15p");
      unsigned int v8 = *(_DWORD *)(*((void *)a2 + 4) + 24);
      v24[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v25, "a0");
      int v26 = 3;
      std::string::basic_string[abi:nn180100]<0>(v27, "b0");
      uint64_t v9 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v17, (uint64_t *)&v18, v24[v9], (uint64_t)&v24[v9]);
        v9 += 8;
      }
      while (v9 != 16);
      getFullBitcodePath(&v22, (const void **)v20, v8, (uint64_t)&v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v22;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v18);
      for (uint64_t i = 0; i != -8; i -= 4)
      {
        if (SHIBYTE(v27[i + 2]) < 0) {
          operator delete((void *)v27[i]);
        }
      }
      goto LABEL_44;
    case 0x18:
      std::string::basic_string[abi:nn180100]<0>(v20, "cei_patch_exec_gen6_g15g");
      unsigned int v11 = *(_DWORD *)(*((void *)a2 + 4) + 24);
      v24[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v25, "a0");
      int v26 = 3;
      std::string::basic_string[abi:nn180100]<0>(v27, "b0");
      int v28 = 5;
      std::string::basic_string[abi:nn180100]<0>(v29, "c0");
      uint64_t v12 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v17, (uint64_t *)&v18, v24[v12], (uint64_t)&v24[v12]);
        v12 += 8;
      }
      while (v12 != 24);
      getFullBitcodePath(&v22, (const void **)v20, v11, (uint64_t)&v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v22;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v18);
      for (uint64_t j = 0; j != -12; j -= 4)
      {
        if (SHIBYTE(v29[j + 2]) < 0) {
          operator delete((void *)v29[j]);
        }
      }
      goto LABEL_44;
    case 0x1F:
      std::string::basic_string[abi:nn180100]<0>(v20, "cei_patch_exec_gen6_g16p");
      unsigned int v14 = *(_DWORD *)(*((void *)a2 + 4) + 24);
      v24[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v25, "a0");
      int v26 = 3;
      std::string::basic_string[abi:nn180100]<0>(v27, "b0");
      int v28 = 4;
      std::string::basic_string[abi:nn180100]<0>(v29, "b0");
      uint64_t v15 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &v18;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v17, (uint64_t *)&v18, v24[v15], (uint64_t)&v24[v15]);
        v15 += 8;
      }
      while (v15 != 24);
      getFullBitcodePath(&v22, (const void **)v20, v14, (uint64_t)&v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v22;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v18);
      for (uint64_t k = 0; k != -12; k -= 4)
      {
        if (SHIBYTE(v29[k + 2]) < 0) {
          operator delete((void *)v29[k]);
        }
      }
LABEL_44:
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      break;
    case 0x20:
    case 0x22:
      uint64_t v5 = "cei_patch_exec_gen6_hal200";
LABEL_6:
      MEMORY[0x1CB7A04E0](&__p, v5);
      break;
    default:
      AGCLLVMDriverExecuteIndirectComputeShaderG10::create(a2, a3, a3);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    CFIndex size = __p.__r_.__value_.__l.__size_;
  }
  AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)p_p, size, 0);
  {
    {
      AGCLLVMDriverExecuteIndirectComputeShaderGen5::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
      *(void *)algn_1EA613938 = 0;
      qword_1EA613940 = 0;
    }
  }
  operator new();
}

void AGCLLVMGen5TargetConfig::createMetalMeshShaderAnalysis()
{
}

void AGCLLVMGen5TargetConfig::createMetalMeshShader()
{
}

void AGCLLVMGen5TargetConfig::createMetalObjectShader()
{
}

void AGCLLVMGen5TargetConfig::createMetalPostTessellationShader()
{
}

void AGCLLVMGen5TargetConfig::createMetalComputeShader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildShuffleAndFill(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  long long v20 = *a2;
  uint64_t v21 = *((void *)a2 + 2);
  if (v21) {
    llvm::MetadataTracking::track();
  }
  int v22 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v20, a1 + 8);
  if (v21) {
    llvm::MetadataTracking::untrack();
  }
  if (*(unsigned char *)(*(void *)(a3 + 24) + 16) != 16)
  {
    if (a6)
    {
      uint64_t v12 = *(llvm::Value **)a3;
    }
    else
    {
      uint64_t v12 = *(llvm::Value **)a3;
      if (*(_DWORD *)(a1 + 872) < 2u) {
        return v12;
      }
    }
    llvm::IRBuilderBase::getCurrentDebugLocation(&v15, (llvm::IRBuilderBase *)(a1 + 8));
    int v16 = *(_DWORD *)(a1 + 104);
    uint64_t v14 = llvm::ConstantInt::get();
    AGCLLVMGen5TargetLowerer::buildShuffleAndFillIfModuloIsAlpha(a1, (uint64_t)v12, a3, a4, v14);
  }
  long long v17 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v18, (llvm::IRBuilderBase *)(a1 + 8));
  int v19 = *(_DWORD *)(a1 + 104);
  uint64_t v12 = AGCLLVMGen5TargetLowerer::buildShuffleAndFillNative((void *)a1, &v17, (llvm::Value **)a3, a4, a5);
  if (v18) {
    llvm::MetadataTracking::untrack();
  }
  return v12;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildShuffleAndFillNative(void *a1, long long *a2, llvm::Value **a3, uint64_t a4, int a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  long long v64 = *a2;
  uint64_t v65 = *((void *)a2 + 2);
  if (v65) {
    llvm::MetadataTracking::track();
  }
  int v66 = *((_DWORD *)a2 + 6);
  uint64_t v8 = (uint64_t)(a1 + 1);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v64, (uint64_t)(a1 + 1));
  if (v65) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v9 = *a3;
  uint64_t v50 = a3[1];
  std::string::size_type v55 = (std::string::size_type)a3[2];
  uint64_t v54 = llvm::ConstantInt::get();
  uint64_t v10 = *(unsigned __int8 **)v9;
  unsigned int v11 = *(unsigned __int8 **)v9;
  if ((*(_DWORD *)(*(void *)v9 + 8) & 0xFE) == 0x12) {
    unsigned int v11 = (unsigned __int8 *)**((void **)v10 + 2);
  }
  uint64_t v52 = v9;
  uint64_t v12 = v11;
  if (v11 == (unsigned __int8 *)a1[23]) {
    uint64_t v12 = (unsigned __int8 *)a1[24];
  }
  if (a5) {
    uint64_t v13 = ".dn";
  }
  else {
    uint64_t v13 = ".up";
  }
  std::string::basic_string[abi:nn180100]<0>(&v62, v13);
  if (v12[8] >= 7u) {
    uint64_t v14 = ".i";
  }
  else {
    uint64_t v14 = ".f";
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v14);
  unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits((llvm::Type *)v12);
  std::to_string(&v58, ScalarSizeInBits);
  std::operator+<char>();
  if ((v61 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v61 & 0x80u) == 0) {
    std::string::size_type v17 = v61;
  }
  else {
    std::string::size_type v17 = v60;
  }
  uint64_t v18 = std::string::append(&v56, p_p, v17);
  std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v61 & 0x80u) == 0) {
    long long v20 = (const std::string::value_type *)&__p;
  }
  else {
    long long v20 = (const std::string::value_type *)__p;
  }
  uint64_t v21 = a1;
  if ((v61 & 0x80u) == 0) {
    std::string::size_type v22 = v61;
  }
  else {
    std::string::size_type v22 = v60;
  }
  uint64_t v23 = std::string::append(&v57, v20, v22);
  std::string::size_type v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v25 = &v58;
  }
  else {
    uint64_t v25 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  uint64_t v27 = std::string::append(&v67, (const std::string::value_type *)v25, size);
  std::string::size_type v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v69 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(void *)&long long v70 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  uint64_t v29 = a1[24];
  *(void *)&long long __src = v12;
  *((void *)&__src + 1) = v29;
  *(void *)&long long v72 = v12;
  *((void *)&v72 + 1) = v29;
  v74[0] = v75;
  v74[1] = (void *)0x400000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)v74, &__src, v73);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v31 = v30;
  if (v74[0] != v75) {
    free(v74[0]);
  }
  if (SBYTE7(v70) < 0) {
    operator delete(v69[0]);
  }
  uint64_t v32 = (llvm::IRBuilderBase *)(a1 + 1);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  long long __src = 0u;
  long long v72 = 0u;
  *(_OWORD *)uint64_t v69 = 0u;
  long long v70 = 0u;
  unsigned int v33 = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, v52, (llvm::Value **)&__src);
  AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, v50, v69);
  int v53 = *((_DWORD *)v10 + 2) & 0xFE;
  if (v53 == 18)
  {
    llvm::FixedVectorType::get();
    uint64_t v34 = (llvm::Value *)llvm::UndefValue::get();
    if (v33) {
      goto LABEL_45;
    }
LABEL_54:
    Insertuint64_t Element = v34;
    goto LABEL_55;
  }
  uint64_t v34 = 0;
  if (!v33) {
    goto LABEL_54;
  }
LABEL_45:
  uint64_t v51 = (llvm::Value *)v11;
  uint64_t v35 = 0;
  uint64_t v36 = v33;
  do
  {
    if (v51 == (llvm::Value *)v21[23])
    {
      uint64_t v38 = *((void *)&__src + v35);
      uint64_t v39 = v21[24];
      __int16 v76 = 257;
      uint64_t Cast = llvm::IRBuilderBase::CreateCast(v8, 40, v38, v39, (uint64_t)v74);
      *((void *)&__src + v35) = Cast;
      uint64_t v32 = (llvm::IRBuilderBase *)(a1 + 1);
      uint64_t v41 = v69[v35];
      uint64_t v42 = a1[24];
      __int16 v76 = 257;
      uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v8, 40, (uint64_t)v41, v42, (uint64_t)v74);
      v69[v35] = v43;
      uint64_t v21 = a1;
      v67.__r_.__value_.__r.__words[0] = Cast;
      v67.__r_.__value_.__l.__size_ = v55;
      v67.__r_.__value_.__r.__words[2] = (std::string::size_type)v43;
      uint64_t v68 = v54;
      __int16 v76 = 257;
      uint64_t v44 = llvm::IRBuilderBase::CreateCall(v8, *(void *)(v31 + 24), v31, (uint64_t)&v67, 4, (uint64_t)v74);
      uint64_t v45 = a1[23];
      __int16 v76 = 257;
      uint64_t v37 = llvm::IRBuilderBase::CreateCast(v8, 38, (uint64_t)v44, v45, (uint64_t)v74);
    }
    else
    {
      v67.__r_.__value_.__r.__words[0] = *((void *)&__src + v35);
      v67.__r_.__value_.__l.__size_ = v55;
      v67.__r_.__value_.__r.__words[2] = (std::string::size_type)v69[v35];
      uint64_t v68 = v54;
      __int16 v76 = 257;
      uint64_t v37 = (uint64_t)llvm::IRBuilderBase::CreateCall((uint64_t)v32, *(void *)(v31 + 24), v31, (uint64_t)&v67, 4, (uint64_t)v74);
    }
    Insertuint64_t Element = (llvm::Value *)v37;
    if (v53 == 18)
    {
      __int16 v76 = 257;
      uint64_t v47 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v32, v34, InsertElement, v47, (const llvm::Twine *)v74);
    }
    ++v35;
    uint64_t v34 = InsertElement;
  }
  while (v36 != v35);
LABEL_55:
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if ((char)v61 < 0) {
    operator delete(__p);
  }
  if (v63 < 0) {
    operator delete(v62);
  }
  return InsertElement;
}

void AGCLLVMGen5TargetLowerer::buildShuffleAndFillIfModuloIsAlpha(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (unint64_t *)(a5 + 24);
  if (*(_DWORD *)(a5 + 32) >= 0x41u) {
    uint64_t v5 = (unint64_t *)*v5;
  }
  std::to_string(&v14, *v5);
  uint64_t v6 = std::string::insert(&v14, 0, "mod");
  std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v17, ".block");
  std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  uint64_t v16 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  int v10 = SHIBYTE(v16);
  if (v16 >= 0) {
    size_t v11 = HIBYTE(v16);
  }
  else {
    size_t v11 = (size_t)__p[1];
  }
  std::string::basic_string[abi:nn180100]((uint64_t)&v14, v11 + 6);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &v14;
  }
  else {
    uint64_t v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if (v10 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, ".merge");
  __int16 v18 = 260;
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  llvm::BasicBlock::splitBasicBlock();
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  __int16 v18 = 260;
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  operator new();
}

uint64_t AGCLLVMGen5TargetLowerer::findPointerAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  uint64_t v3 = *v2;
  uint64_t v4 = (unsigned __int8 *)v2[4];
  uint64_t result = llvm::ConstantInt::get();
  int v6 = v4[16];
  if (v6 == 77 && v4 != 0)
  {
    uint64_t v10 = **((void **)v4 - 4);
    BOOL v9 = *(unsigned char *)(v10 + 8) != 15 || v10 == 0;
    goto LABEL_14;
  }
  if (v6 == 62 && v4 != 0)
  {
    BOOL v9 = *(unsigned char *)(**(void **)(*(void *)v4 + 16) + 8) == 17;
LABEL_14:
    if (!v9) {
      return v3;
    }
  }
  return result;
}

void AGCLLVMGen5TargetLowerer::buildMemCpy1DDMA(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = **a2;
  uint64_t v4 = (*a2)[2];
  uint64_t v5 = (*a2)[3];
  uint64_t v6 = (*a2)[4];
  int v7 = *(_DWORD *)(*(void *)v4 + 8);
  if ((v7 & 0xFE) == 0x12) {
    int v7 = *(_DWORD *)(**(void **)(*(void *)v4 + 16) + 8);
  }
  unsigned int v8 = v7 & 0xFFFFFF00;
  if ((v7 & 0xFFFFFF00) == 0x300) {
    BOOL v9 = v21;
  }
  else {
    BOOL v9 = v20;
  }
  *BOOL v9 = v4;
  v9[1] = v3;
  v9[2] = v6;
  if (v8 == 768) {
    uint64_t v10 = v20;
  }
  else {
    uint64_t v10 = v21;
  }
  v9[3] = llvm::ConstantInt::get();
  v9[4] = v6;
  *uint64_t v10 = v5;
  v10[1] = v3;
  v10[2] = v6;
  v10[3] = llvm::ConstantInt::get();
  v10[4] = v6;
  uint64_t v11 = llvm::ConstantInt::get();
  uint64_t v12 = *(void *)(a1 + 240);
  __int16 v19 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v11, v12, (uint64_t)v18);
  uint64_t v14 = llvm::ConstantInt::get();
  long long v15 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v16, (llvm::IRBuilderBase *)(a1 + 8));
  int v17 = *(_DWORD *)(a1 + 104);
  AGCLLVMGen5TargetLowerer::CreateBufferReadWriteBlock((void *)a1, &v15, v8 == 768, 1, v21, v20, Cast, v14);
}

void AGCLLVMGen5TargetLowerer::CreateBufferReadWriteBlock(void *a1, long long *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, llvm::Value *a7, uint64_t a8)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  long long v55 = *a2;
  uint64_t v56 = *((void *)a2 + 2);
  if (v56) {
    llvm::MetadataTracking::track();
  }
  int v57 = *((_DWORD *)a2 + 6);
  uint64_t v14 = (uint64_t)(a1 + 1);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v55, (uint64_t)(a1 + 1));
  if (v56) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v15 = a5[1];
  uint64_t v16 = a1[24];
  __int16 v59 = 257;
  a5[1] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v15, v16, (uint64_t)&v58);
  uint64_t v17 = a5[2];
  uint64_t v18 = a1[24];
  __int16 v59 = 257;
  a5[2] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v17, v18, (uint64_t)&v58);
  uint64_t v19 = a5[3];
  uint64_t v20 = a1[24];
  __int16 v59 = 257;
  a5[3] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v19, v20, (uint64_t)&v58);
  uint64_t v21 = a5[4];
  uint64_t v22 = a1[24];
  __int16 v59 = 257;
  a5[4] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v21, v22, (uint64_t)&v58);
  uint64_t v23 = a6[1];
  uint64_t v24 = a1[24];
  __int16 v59 = 257;
  a6[1] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v23, v24, (uint64_t)&v58);
  uint64_t v25 = a6[2];
  uint64_t v26 = a1[25];
  __int16 v59 = 257;
  a6[2] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v25, v26, (uint64_t)&v58);
  uint64_t v27 = a6[3];
  uint64_t v28 = a1[25];
  __int16 v59 = 257;
  a6[3] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v27, v28, (uint64_t)&v58);
  uint64_t v29 = a6[4];
  uint64_t v30 = a1[25];
  __int16 v59 = 257;
  a6[4] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v29, v30, (uint64_t)&v58);
  __int16 v59 = 257;
  uint64_t v31 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), a7, v31, (const llvm::Twine *)&v58);
  uint64_t v33 = a1[24];
  __int16 v54 = 257;
  llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, Element, v33, (uint64_t)v53);
  __int16 v59 = 257;
  uint64_t v34 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v35 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), a7, v34, (const llvm::Twine *)&v58);
  uint64_t v36 = a1[24];
  __int16 v54 = 257;
  llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v35, v36, (uint64_t)v53);
  uint64_t v37 = operator new(0x30uLL);
  v37[1] = unk_1CADDF388;
  v37[2] = xmmword_1CADDF398;
  *uint64_t v37 = xmmword_1CADDF378;
  uint64_t v38 = a5[1];
  uint64_t v51 = a1 + 1;
  uint64_t v52 = a1;
  if (v38 && *(unsigned char *)(v38 + 16) == 16)
  {
    uint64_t v50 = a8;
    uint64_t v39 = 0;
    uint64_t v42 = *(void **)(v38 + 24);
    uint64_t v41 = (_DWORD *)(v38 + 24);
    uint64_t v40 = v42;
    unsigned int v43 = v41[2];
    do
    {
      uint64_t v44 = *((unsigned int *)v37 + v39);
      uint64_t v45 = v41;
      if (v43 < 0x41
        || (v46 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v41), uint64_t v45 = v40, v43 - v46 <= 0x40))
      {
        if (*v45 == v44) {
          break;
        }
      }
      ++v39;
    }
    while (v39 != 12);
    uint64_t v14 = (uint64_t)v51;
    a1 = v52;
    a8 = v50;
  }
  uint64_t v47 = llvm::ConstantInt::get();
  uint64_t v48 = a1[24];
  __int16 v59 = 257;
  a5[1] = llvm::IRBuilderBase::CreateCast(v14, 38, v47, v48, (uint64_t)&v58);
  operator delete(v37);
  uint64_t v49 = a1[24];
  __int16 v59 = 257;
  llvm::IRBuilderBase::CreateCast(v14, 38, a8, v49, (uint64_t)&v58);
  std::string v58 = "if.first.active.lane.end";
  __int16 v59 = 259;
  llvm::BasicBlock::splitBasicBlock();
  std::string v58 = "if.first.active.lane.end";
  __int16 v59 = 259;
  operator new();
}

uint64_t AGCLLVMGen5TargetLowerer::buildMemCpy1DEmulation(uint64_t a1, uint64_t a2)
{
  v24[5] = *MEMORY[0x1E4F143B8];
  v23[0] = v24;
  v23[1] = (void *)0x500000000;
  uint64_t v4 = *(uint64_t ***)a2;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    do
    {
      int v7 = *v4++;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v23, *v7);
      v6 -= 8;
    }
    while (v6);
    uint64_t v4 = *(uint64_t ***)a2;
  }
  uint64_t v8 = *v4[2];
  int v9 = *(_DWORD *)(v8 + 8);
  if ((v9 & 0xFE) == 0x12) {
    int v9 = *(_DWORD *)(**(void **)(v8 + 16) + 8);
  }
  unsigned int v10 = v9 & 0xFFFFFF00;
  std::string::basic_string[abi:nn180100]<0>(&v19, *(char **)(a1 + 2536));
  if (v10 == 768) {
    uint64_t v11 = ".read";
  }
  else {
    uint64_t v11 = ".write";
  }
  uint64_t v12 = std::string::append(&v19, v11);
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v22 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v14 = *(void *)a2;
  uint64_t v15 = *(unsigned int *)(a2 + 8);
  __int16 v20 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v16 + 24), v16, v14, v15, (uint64_t)&v19);
  uint64_t v17 = *(void *)(a1 + 2576);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  if (v23[0] != v24) {
    free(v23[0]);
  }
  return v17;
}

void AGCLLVMGen5TargetLowerer::buildMemCpy2DDMA(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = **a2;
  uint64_t v4 = (*a2)[2];
  uint64_t v17 = (*a2)[3];
  uint64_t v5 = (llvm::Value *)(*a2)[4];
  uint64_t v6 = (llvm::Value *)(*a2)[5];
  uint64_t v7 = (*a2)[6];
  uint64_t v18 = (*a2)[7];
  uint64_t v8 = (llvm::Value *)(*a2)[9];
  uint64_t v20 = (*a2)[11];
  uint64_t v21 = (llvm::Value *)(*a2)[10];
  int v9 = *(_DWORD *)(*(void *)v4 + 8);
  if ((v9 & 0xFE) == 0x12) {
    int v9 = *(_DWORD *)(**(void **)(*(void *)v4 + 16) + 8);
  }
  BOOL v19 = (v9 & 0xFFFFFF00) == 768;
  if ((v9 & 0xFFFFFF00) == 0x300) {
    unsigned int v10 = v30;
  }
  else {
    unsigned int v10 = &v27;
  }
  *unsigned int v10 = v4;
  v10[1] = v3;
  __int16 v26 = 257;
  if ((v9 & 0xFFFFFF00) == 0x300) {
    uint64_t v11 = &v27;
  }
  else {
    uint64_t v11 = v30;
  }
  uint64_t v12 = v5;
  std::string::size_type v13 = (llvm::Value *)llvm::ConstantInt::get();
  v10[2] = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v6, v13, (const llvm::Twine *)v25);
  __int16 v26 = 257;
  uint64_t v14 = (llvm::Value *)llvm::ConstantInt::get();
  v10[3] = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v6, v14, (const llvm::Twine *)v25);
  v10[4] = v17;
  *uint64_t v11 = v7;
  v11[1] = v3;
  __int16 v26 = 257;
  uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
  v11[2] = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v8, v15, (const llvm::Twine *)v25);
  __int16 v26 = 257;
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  v11[3] = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v8, v16, (const llvm::Twine *)v25);
  v11[4] = v18;
  __int16 v26 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v12, Mul, (const llvm::Twine *)v25);
  __int16 v26 = 257;
  UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv((llvm::IRBuilderBase *)(a1 + 8), UDiv, v12, (const llvm::Twine *)v25);
  long long v22 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v23, (llvm::IRBuilderBase *)(a1 + 8));
  int v24 = *(_DWORD *)(a1 + 104);
  AGCLLVMGen5TargetLowerer::CreateBufferReadWriteBlock((void *)a1, &v22, v19, 0, v30, &v27, v21, v20);
}

uint64_t AGCLLVMGen5TargetLowerer::buildMemCpy2DEmulation(uint64_t a1, uint64_t a2)
{
  v78[12] = *MEMORY[0x1E4F143B8];
  v77[0] = v78;
  v77[1] = (void *)0xC00000000;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    do
    {
      uint64_t v7 = *(uint64_t **)v4;
      v4 += 8;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v77, *v7);
      v6 -= 8;
    }
    while (v6);
    uint64_t v4 = *(void *)a2;
  }
  uint64_t v8 = *(uint64_t **)(v4 + 16);
  int v9 = *(unsigned __int8 **)(v4 + 40);
  unsigned int v10 = *(unsigned __int8 **)(v4 + 72);
  uint64_t v11 = *(unsigned __int8 **)(v4 + 80);
  uint64_t v12 = *v8;
  int v13 = *(_DWORD *)(*v8 + 8);
  if ((v13 & 0xFE) == 0x12) {
    int v13 = *(_DWORD *)(**(void **)(v12 + 16) + 8);
  }
  unsigned int v14 = v13 & 0xFFFFFF00;
  if ((v13 & 0xFFFFFF00) == 0x300) {
    uint64_t v15 = v9;
  }
  else {
    uint64_t v15 = v10;
  }
  if (v14 == 768) {
    uint64_t v16 = v10;
  }
  else {
    uint64_t v16 = v9;
  }
  if (v15[16] >= 0x15u || v16[16] > 0x14u || v11[16] > 0x14u)
  {
    BOOL v22 = 0;
  }
  else
  {
    __int16 v76 = 257;
    uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v16, v17, (const llvm::Twine *)&v75);
    if (*(unsigned char *)(Element + 16) == 16) {
      uint64_t v19 = Element;
    }
    else {
      uint64_t v19 = 0;
    }
    unsigned int v20 = *(_DWORD *)(v19 + 32);
    if (v20 > 0x40) {
      uint64_t v21 = **(void **)(v19 + 24);
    }
    else {
      uint64_t v21 = (uint64_t)(*(void *)(v19 + 24) << -(char)v20) >> -(char)v20;
    }
    uint64_t v70 = v21;
    __int16 v76 = 257;
    uint64_t v44 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v45 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v16, v44, (const llvm::Twine *)&v75);
    if (*(unsigned char *)(v45 + 16) == 16) {
      uint64_t v46 = v45;
    }
    else {
      uint64_t v46 = 0;
    }
    unsigned int v47 = *(_DWORD *)(v46 + 32);
    if (v47 > 0x40) {
      uint64_t v48 = **(void **)(v46 + 24);
    }
    else {
      uint64_t v48 = (uint64_t)(*(void *)(v46 + 24) << -(char)v47) >> -(char)v47;
    }
    uint64_t v69 = v48;
    __int16 v76 = 257;
    uint64_t v49 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v50 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v11, v49, (const llvm::Twine *)&v75);
    if (*(unsigned char *)(v50 + 16) == 16) {
      uint64_t v51 = v50;
    }
    else {
      uint64_t v51 = 0;
    }
    unsigned int v52 = *(_DWORD *)(v51 + 32);
    if (v52 > 0x40) {
      uint64_t v53 = **(void **)(v51 + 24);
    }
    else {
      uint64_t v53 = (uint64_t)(*(void *)(v51 + 24) << -(char)v52) >> -(char)v52;
    }
    uint64_t v71 = v53;
    __int16 v76 = 257;
    __int16 v54 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v55 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v11, v54, (const llvm::Twine *)&v75);
    if (*(unsigned char *)(v55 + 16) == 16) {
      uint64_t v56 = v55;
    }
    else {
      uint64_t v56 = 0;
    }
    unsigned int v57 = *(_DWORD *)(v56 + 32);
    if (v57 > 0x40) {
      uint64_t v58 = **(void **)(v56 + 24);
    }
    else {
      uint64_t v58 = (uint64_t)(*(void *)(v56 + 24) << -(char)v57) >> -(char)v57;
    }
    __int16 v76 = 257;
    __int16 v59 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v60 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v15, v59, (const llvm::Twine *)&v75);
    if (*(unsigned char *)(v60 + 16) == 16) {
      uint64_t v61 = v60;
    }
    else {
      uint64_t v61 = 0;
    }
    unsigned int v62 = *(_DWORD *)(v61 + 32);
    if (v62 > 0x40) {
      uint64_t v63 = **(void **)(v61 + 24);
    }
    else {
      uint64_t v63 = (uint64_t)(*(void *)(v61 + 24) << -(char)v62) >> -(char)v62;
    }
    __int16 v76 = 257;
    long long v64 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v65 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v15, v64, (const llvm::Twine *)&v75);
    if (*(unsigned char *)(v65 + 16) == 16) {
      uint64_t v66 = v65;
    }
    else {
      uint64_t v66 = 0;
    }
    unsigned int v67 = *(_DWORD *)(v66 + 32);
    if (v67 > 0x40) {
      uint64_t v68 = **(void **)(v66 + 24);
    }
    else {
      uint64_t v68 = (uint64_t)(*(void *)(v66 + 24) << -(char)v67) >> -(char)v67;
    }
    BOOL v22 = 0;
    if ((v71 & 0x8000000000000000) == 0 && (v58 & 0x8000000000000000) == 0 && v71 + v63 - 1 < v70) {
      BOOL v22 = v58 + v68 - 1 < v69;
    }
  }
  if (v11[16] <= 0x14u && v16 == v15)
  {
    __int16 v76 = 257;
    int v24 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v25 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v11, v24, (const llvm::Twine *)&v75);
    if (*(unsigned char *)(v25 + 16) == 16) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    unsigned int v27 = *(_DWORD *)(v26 + 32);
    if (v27 > 0x40)
    {
      if (**(void **)(v26 + 24)) {
        goto LABEL_42;
      }
    }
    else if ((uint64_t)(*(void *)(v26 + 24) << -(char)v27) >> -(char)v27)
    {
      goto LABEL_42;
    }
    __int16 v76 = 257;
    uint64_t v28 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v29 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v11, v28, (const llvm::Twine *)&v75);
    if (*(unsigned char *)(v29 + 16) == 16) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    unsigned int v31 = *(_DWORD *)(v30 + 32);
    if (v31 > 0x40) {
      uint64_t v32 = **(void **)(v30 + 24);
    }
    else {
      uint64_t v32 = (uint64_t)(*(void *)(v30 + 24) << -(char)v31) >> -(char)v31;
    }
    if (!v32) {
      BOOL v22 = 1;
    }
  }
LABEL_42:
  std::string::basic_string[abi:nn180100]<0>(&v72, *(char **)(a1 + 2544));
  if (v14 == 768) {
    uint64_t v33 = ".read";
  }
  else {
    uint64_t v33 = ".write";
  }
  uint64_t v34 = std::string::append(&v72, v33);
  std::string::size_type v35 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (v22) {
    uint64_t v36 = ".unchecked";
  }
  else {
    uint64_t v36 = "";
  }
  uint64_t v37 = std::string::append(&v75, v36);
  std::string::size_type v38 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  std::string::size_type v74 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v39 = *(void *)a2;
  uint64_t v40 = *(unsigned int *)(a2 + 8);
  __int16 v76 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v41 + 24), v41, v39, v40, (uint64_t)&v75);
  uint64_t v42 = *(void *)(a1 + 2576);
  if (SHIBYTE(v74) < 0) {
    operator delete(__p[0]);
  }
  if (v77[0] != v78) {
    free(v77[0]);
  }
  return v42;
}

uint64_t AGCLLVMGen5TargetLowerer::programTypeSpecialRegisterValueForShaderType(uint64_t a1, unsigned int a2)
{
  if (a2 > 9) {
    return 0;
  }
  else {
    return dword_1CADDF3A8[a2];
  }
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdMatrixThreadElementsGetPosition(uint64_t a1, long long *a2, uint64_t a3, llvm::Value *a4, llvm::Value *a5)
{
  long long v42 = *a2;
  uint64_t v43 = *((void *)a2 + 2);
  if (v43) {
    llvm::MetadataTracking::track();
  }
  int v44 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v42, a1 + 8);
  if (v43) {
    llvm::MetadataTracking::untrack();
  }
  int v9 = (llvm::Value *)llvm::ConstantInt::get();
  unsigned int v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v41 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), a4, v10, (const llvm::Twine *)v40);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v39 = 257;
  int v13 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), Shl, v12, (const llvm::Twine *)v38);
  unsigned int v14 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v37 = 257;
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), a4, v14, (const llvm::Twine *)v36);
  __int16 v35 = 257;
  uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), LShr, v9, (const llvm::Twine *)v34);
  __int16 v33 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v13, v16, (const llvm::Twine *)v32);
  uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v41 = 257;
  uint64_t v19 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), a4, v18, (const llvm::Twine *)v40);
  unsigned int v20 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v39 = 257;
  uint64_t v21 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v38);
  BOOL v22 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v37 = 257;
  uint64_t v23 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), a4, v22, (const llvm::Twine *)v36);
  __int16 v35 = 257;
  int v24 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v23, v9, (const llvm::Twine *)v34);
  __int16 v33 = 257;
  uint64_t v25 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v21, v24, (const llvm::Twine *)v32);
  __int16 v41 = 257;
  uint64_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Add, a5, (const llvm::Twine *)v40);
  llvm::FixedVectorType::get();
  unsigned int v27 = (llvm::Value *)llvm::UndefValue::get();
  __int16 v41 = 257;
  uint64_t v28 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v27, v26, v28, (const llvm::Twine *)v40);
  __int16 v41 = 257;
  uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v25, v30, (const llvm::Twine *)v40);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildSimdMatrixThreadElementsInit(uint64_t a1, long long *a2, uint64_t a3, llvm::Constant **a4, uint64_t a5, char a6)
{
  long long v36 = *a2;
  uint64_t v37 = *((void *)a2 + 2);
  if (v37) {
    llvm::MetadataTracking::track();
  }
  int v38 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v36, a1 + 8);
  if (v37) {
    llvm::MetadataTracking::untrack();
  }
  Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
  if (a6)
  {
    long long v33 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v34, (llvm::IRBuilderBase *)(a1 + 8));
    int v35 = *(_DWORD *)(a1 + 104);
    uint64_t v12 = *(void *)(a1 + 200);
    uint64_t v13 = llvm::ConstantInt::get();
    unsigned int v14 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1816))(a1, &v33, v12, a5, v13);
    if (v34) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v32 = 257;
    uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v14, v15, (const llvm::Twine *)v31);
    __int16 v32 = 257;
    char v17 = 1;
    uint64_t v18 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v28 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v14, v18, (const llvm::Twine *)v31);
    llvm::Constant::getNullValue(*a4, v19);
    do
    {
      char v20 = v17;
      uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v32 = 257;
      uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Element, v21, (const llvm::Twine *)v31);
      __int16 v32 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, (llvm::CmpInst **)Element, v28, (uint64_t)v31);
      __int16 v32 = 257;
      uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      __int16 v30 = 257;
      uint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, Select, v23, (const llvm::Twine *)v29);
      char v17 = 0;
    }
    while ((v20 & 1) != 0);
  }
  else
  {
    char v24 = 1;
    do
    {
      char v25 = v24;
      __int16 v32 = 257;
      uint64_t v26 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, (llvm::Value *)a4, v26, (const llvm::Twine *)v31);
      char v24 = 0;
    }
    while ((v25 & 1) != 0);
  }
  return InsertElement;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildSimdMatrixMultiplyAccumulate(void *a1, long long *a2, llvm::Type *a3, llvm::Value *a4, llvm::Value *a5, llvm::Value *a6)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  long long v47 = *a2;
  uint64_t v48 = *((void *)a2 + 2);
  if (v48) {
    llvm::MetadataTracking::track();
  }
  uint64_t v43 = a3;
  int v49 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v47, (uint64_t)(a1 + 1));
  if (v48) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v50 = llvm::ConstantInt::get();
  uint64_t v51 = llvm::ConstantInt::get();
  uint64_t v12 = (llvm::Value *)llvm::ConstantVector::get();
  __int16 v55 = 257;
  uint64_t ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector((llvm::IRBuilderBase *)(a1 + 1), a4, a4, v12, (const llvm::Twine *)v53);
  uint64_t v50 = llvm::ConstantInt::get();
  uint64_t v51 = llvm::ConstantInt::get();
  unsigned int v14 = (llvm::Value *)llvm::ConstantVector::get();
  __int16 v55 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateShuffleVector((llvm::IRBuilderBase *)(a1 + 1), a5, a5, v14, (const llvm::Twine *)v53);
  uint64_t v50 = llvm::ConstantInt::get();
  uint64_t v51 = llvm::ConstantInt::get();
  uint64_t v16 = (llvm::Value *)llvm::ConstantVector::get();
  __int16 v55 = 257;
  uint64_t v17 = llvm::IRBuilderBase::CreateShuffleVector((llvm::IRBuilderBase *)(a1 + 1), a6, a6, v16, (const llvm::Twine *)v53);
  uint64_t v18 = **(void **)(*(void *)ShuffleVector + 16);
  uint64_t v19 = **(void **)(*(void *)v15 + 16);
  uint64_t v20 = **(void **)(*(void *)v17 + 16);
  uint64_t v42 = **((void **)v43 + 2);
  uint64_t v21 = operator new(0x18uLL);
  *uint64_t v21 = ShuffleVector;
  v21[1] = v15;
  void v21[2] = v17;
  memset(&v46, 0, sizeof(v46));
  uint64_t v22 = a1[19];
  if (v18 == v22 && v19 == v22 && v20 == v22 && v42 == v22)
  {
    MEMORY[0x1CB7A04E0](&v46, a1[332]);
    std::string::append(&v46, ".v2f16");
    uint64_t v23 = (llvm::Type *)a1[19];
    char v24 = v43;
  }
  else
  {
    MEMORY[0x1CB7A04E0](&v46, a1[331]);
    std::string::append(&v46, ".v2f32");
    uint64_t v25 = 0;
    uint64_t v23 = (llvm::Type *)a1[21];
    char v24 = v43;
    do
    {
      uint64_t v26 = (llvm::Value *)v21[v25];
      uint64_t v27 = **(void **)(*(void *)v26 + 16);
      if (v27 == a1[19] || v27 == a1[20])
      {
        uint64_t v28 = (llvm::Type *)llvm::FixedVectorType::get();
        __int16 v55 = 257;
        v21[v25] = llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 1), v26, v28, (const llvm::Twine *)v53);
      }
      ++v25;
    }
    while (v25 != 3);
  }
  uint64_t v29 = 0;
  v53[0] = v54;
  v53[1] = (void *)0x300000000;
  do
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v53, *(void *)v21[v29++]);
  while (v29 != 3);
  if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __int16 v30 = &v46;
LABEL_20:
    strlen((const char *)v30);
    goto LABEL_21;
  }
  __int16 v30 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if (v46.__r_.__value_.__r.__words[0]) {
    goto LABEL_20;
  }
LABEL_21:
  llvm::FixedVectorType::get();
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  __int16 v52 = 257;
  FPTrunc = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v31 + 24), v31, (uint64_t)v21, 3, (uint64_t)&v50);
  unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v23);
  if (ScalarSizeInBits > llvm::Type::getScalarSizeInBits(v24))
  {
    uint64_t v34 = (llvm::Type *)llvm::FixedVectorType::get();
    __int16 v52 = 257;
    FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(a1 + 1), FPTrunc, v34, (const llvm::Twine *)&v50);
  }
  Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
  char v36 = 1;
  do
  {
    char v37 = v36;
    __int16 v52 = 257;
    int v38 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), FPTrunc, v38, (const llvm::Twine *)&v50);
    __int16 v45 = 257;
    uint64_t v40 = (llvm::Value *)llvm::ConstantInt::get();
    Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, Element, v40, (const llvm::Twine *)v44);
    char v36 = 0;
  }
  while ((v37 & 1) != 0);
  if (v53[0] != v54) {
    free(v53[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  operator delete(v21);
  return InsertElement;
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdMatrixLoadStore(uint64_t a1, long long *a2, unsigned int a3, llvm::Value *a4, uint64_t a5, int a6)
{
  v120[2] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (_DWORD *)((char *)a4 - 32 * (*((_DWORD *)a4 + 5) & 0x7FFFFFF));
  uint64_t v13 = 8;
  if (a3) {
    uint64_t v13 = 16;
  }
  std::string v103 = *(llvm::Value **)&v12[v13];
  uint64_t v104 = *(void *)&v12[8 * a3];
  long long v106 = *a2;
  uint64_t v107 = *((void *)a2 + 2);
  if (v107) {
    llvm::MetadataTracking::track();
  }
  int v108 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v106, a1 + 8);
  if (v107) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v14 = a3;
  unsigned int v101 = a3;
  if (a3)
  {
    uint64_t v15 = (llvm::Value *)*((void *)a4 - 4 * (*((_DWORD *)a4 + 5) & 0x7FFFFFF));
    uint64_t v16 = 4;
    uint64_t v102 = v15;
  }
  else
  {
    uint64_t v102 = 0;
    uint64_t v16 = 3;
    uint64_t v15 = a4;
  }
  uint64_t v17 = *(llvm::Type ***)(*(void *)v15 + 16);
  int v100 = a6;
  if (a6) {
    uint64_t v17 = (llvm::Type **)(a1 + 192);
  }
  uint64_t v105 = *v17;
  uint64_t v99 = 32 * v16;
  uint64_t v18 = (llvm::Value *)*((void *)a4 + 4 * v16 + -4 * (*((_DWORD *)a4 + 5) & 0x7FFFFFF));
  __int16 v112 = 257;
  Not = (llvm::Value *)llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)(a1 + 8), v18, (const llvm::Twine *)v111);
  long long v113 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v114, (llvm::IRBuilderBase *)(a1 + 8));
  int v115 = *(_DWORD *)(a1 + 104);
  uint64_t v20 = *(void *)(a1 + 200);
  uint64_t v21 = llvm::ConstantInt::get();
  uint64_t v22 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1816))(a1, &v113, v20, a5, v21);
  if (v114) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v112 = 257;
  uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v22, v18, (const llvm::Twine *)v111);
  __int16 v112 = 257;
  uint64_t v24 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v22, Not, (const llvm::Twine *)v111);
  uint64_t v25 = (llvm::Value *)*((void *)a4 + 4 * v14 + -4 * (*((_DWORD *)a4 + 5) & 0x7FFFFFF) + 8);
  __int16 v112 = 257;
  uint64_t v26 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v27 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v25, v26, (const llvm::Twine *)v111);
  uint64_t v28 = *(void *)(a1 + 208);
  __int16 v110 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v27, v28, (uint64_t)v109);
  __int16 v112 = 257;
  __int16 v30 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v31 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v25, v30, (const llvm::Twine *)v111);
  uint64_t v32 = *(void *)(a1 + 208);
  __int16 v110 = 257;
  long long v33 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v31, v32, (uint64_t)v109);
  uint64_t v34 = *(void *)(a1 + 208);
  __int16 v112 = 257;
  int v35 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, Element, v34, (uint64_t)v111);
  __int16 v110 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Cast, v35, (const llvm::Twine *)v109);
  v120[0] = Add;
  uint64_t v37 = *(void *)(a1 + 208);
  __int16 v112 = 257;
  int v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v24, v37, (uint64_t)v111);
  __int16 v110 = 257;
  __int16 v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v33, v38, (const llvm::Twine *)v109);
  v119[0] = v39;
  uint64_t v40 = *(void *)(a1 + 208);
  __int16 v112 = 257;
  __int16 v41 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)Not, v40, (uint64_t)v111);
  __int16 v110 = 257;
  v120[1] = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Add, v41, (const llvm::Twine *)v109);
  uint64_t v42 = *(void *)(a1 + 208);
  __int16 v112 = 257;
  uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)v18, v42, (uint64_t)v111);
  __int16 v110 = 257;
  v119[1] = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v39, v43, (const llvm::Twine *)v109);
  v117 = 0;
  v118 = 0;
  if (v101 && v100)
  {
    llvm::FixedVectorType::get();
    llvm::UndefValue::get();
    __int16 v116 = 257;
    int v44 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v45 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v102, v44, (const llvm::Twine *)&v113);
    uint64_t v46 = *(void *)(a1 + 200);
    __int16 v112 = 257;
    long long v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v45, v46, (uint64_t)v111);
    uint64_t v48 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v112 = 257;
    int v49 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v111);
    uint64_t v50 = llvm::ConstantInt::get();
    __int16 v110 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 34, v49, v50, (uint64_t)v109);
    v111[0] = "is.nan.merge";
    __int16 v112 = 259;
    llvm::BasicBlock::splitBasicBlock();
    v111[0] = "is.nan.true";
    __int16 v112 = 259;
    operator new();
  }
  uint64_t v51 = 0;
  long long v113 = 0uLL;
  char v52 = 1;
  uint64_t v53 = v105;
  do
  {
    char v54 = v52;
    __int16 v55 = (llvm::Value *)v120[v51];
    uint64_t v56 = (llvm::Value *)v119[v51];
    __int16 v112 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v56, v103, (const llvm::Twine *)v111);
    __int16 v110 = 257;
    uint64_t v58 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Mul, v55, (const llvm::Twine *)v109);
    llvm::Type::getScalarSizeInBits(v53);
    __int16 v59 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v112 = 257;
    uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v111);
    uint64_t v61 = *(void *)(a1 + 208);
    __int16 v112 = 257;
    unsigned int v62 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v104, v61, (uint64_t)v111);
    __int16 v110 = 257;
    uint64_t v63 = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v62, v60, (const llvm::Twine *)v109);
    uint64_t v53 = v105;
    uint64_t v64 = llvm::PointerType::get();
    v111[0] = "addr_elem";
    __int16 v112 = 259;
    uint64_t v65 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v63, v64, (uint64_t)v111);
    char v52 = 0;
    *((void *)&v113 + v51) = v65;
    uint64_t v51 = 1;
  }
  while ((v54 & 1) != 0);
  uint64_t v66 = *(void *)((char *)a4 + v99 + -32 * (*((_DWORD *)a4 + 5) & 0x7FFFFFF));
  if (*(unsigned char *)(v66 + 16) != 16) {
    goto LABEL_22;
  }
  unsigned int v67 = (llvm::APInt *)(v66 + 24);
  unsigned int v68 = *(_DWORD *)(v66 + 32);
  if (v68 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v67) == v68) {
      goto LABEL_29;
    }
LABEL_22:
    uint64_t v69 = 0;
    char v70 = 1;
    do
    {
      while (1)
      {
        char v71 = v70;
        if (!v101) {
          break;
        }
        __int16 v112 = 257;
        std::string v72 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v73 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v102, v72, (const llvm::Twine *)v111);
        llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v73, *((void *)&v113 + v69), 0);
        char v70 = 0;
        uint64_t v69 = 1;
        if ((v71 & 1) == 0) {
          return llvm::UndefValue::get();
        }
      }
      uint64_t v74 = *((void *)&v113 + v69);
      __int16 v112 = 257;
      uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v105, v74, 0, (uint64_t)v111);
      char v70 = 0;
      *(&v117 + v69) = AlignedLoad;
      uint64_t v69 = 1;
    }
    while ((v71 & 1) != 0);
    goto LABEL_33;
  }
  if (*(void *)v67) {
    goto LABEL_22;
  }
LABEL_29:
  __int16 v76 = (llvm::Type *)llvm::FixedVectorType::get();
  uint64_t v77 = (llvm::Type **)v113;
  std::string::size_type v78 = (llvm::Type *)llvm::PointerType::get();
  v111[0] = "addr_vectorized";
  __int16 v112 = 259;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v77, v78, (const llvm::Twine *)v111);
  if (!v101)
  {
    __int16 v112 = 257;
    std::string v90 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v76, (uint64_t)PointerCast, 0, (uint64_t)v111);
    __int16 v112 = 257;
    std::string::size_type v91 = (llvm::Value *)llvm::ConstantInt::get();
    v117 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v90, v91, (const llvm::Twine *)v111);
    __int16 v112 = 257;
    uint64_t v92 = (llvm::Value *)llvm::ConstantInt::get();
    v118 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v90, v92, (const llvm::Twine *)v111);
LABEL_33:
    Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
    if (v100)
    {
      v117 = (llvm::Value *)AGCLLVMGen5TargetLowerer::bfloatConvert16RawToF32((AGCLLVMGen5TargetLowerer *)a1, v117);
      v118 = (llvm::Value *)AGCLLVMGen5TargetLowerer::bfloatConvert16RawToF32((AGCLLVMGen5TargetLowerer *)a1, v118);
    }
    uint64_t v93 = 0;
    char v94 = 1;
    do
    {
      char v95 = v94;
      std::string v96 = *(&v117 + v93);
      __int16 v112 = 257;
      std::string v97 = (llvm::Value *)llvm::ConstantInt::get();
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v96, v97, (const llvm::Twine *)v111);
      char v94 = 0;
      uint64_t v93 = 1;
    }
    while ((v95 & 1) != 0);
    return (uint64_t)InsertElement;
  }
  std::string::size_type v80 = (llvm::Value *)llvm::UndefValue::get();
  __int16 v112 = 257;
  long long v81 = (llvm::Value *)llvm::ConstantInt::get();
  std::string::size_type v82 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v102, v81, (const llvm::Twine *)v111);
  __int16 v110 = 257;
  unsigned int v83 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v84 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v80, v82, v83, (const llvm::Twine *)v109);
  __int16 v112 = 257;
  std::string::size_type v85 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v86 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v102, v85, (const llvm::Twine *)v111);
  __int16 v110 = 257;
  std::string::size_type v87 = (llvm::Value *)llvm::ConstantInt::get();
  char v88 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v84, v86, v87, (const llvm::Twine *)v109);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v88, (uint64_t)PointerCast, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMGen5TargetLowerer::bfloatConvert16RawToF32(AGCLLVMGen5TargetLowerer *this, llvm::Value *a2)
{
  uint64_t v3 = (AGCLLVMGen5TargetLowerer *)((char *)this + 8);
  uint64_t v4 = *((void *)this + 25);
  __int16 v11 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, (uint64_t)a2, v4, (uint64_t)v10);
  uint64_t v6 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v11 = 257;
  uint64_t Shl = llvm::IRBuilderBase::CreateShl(v3, Cast, v6, (const llvm::Twine *)v10);
  uint64_t v8 = *((void *)this + 21);
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v3, 49, Shl, v8, (uint64_t)v10);
}

uint64_t AGCLLVMGen5TargetLowerer::buildVoteAny(uint64_t a1, long long *a2, llvm::CmpInst **a3)
{
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v10, a1 + 8);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = llvm::ConstantInt::get();
  __int16 v9 = 257;
  return llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 33, a3, v6, (uint64_t)v8);
}

uint64_t AGCLLVMGen5TargetLowerer::buildVoteAll(uint64_t a1, long long *a2, llvm::CmpInst **a3)
{
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v10, a1 + 8);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = llvm::ConstantInt::get();
  __int16 v9 = 257;
  return llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, a3, v6, (uint64_t)v8);
}

uint64_t AGCLLVMGen5TargetLowerer::buildQuadAny(uint64_t *a1, long long *a2, uint64_t a3)
{
  long long v11 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v13 = *((_DWORD *)a2 + 6);
  uint64_t v6 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t *, long long *, uint64_t))(*a1 + 1680))(a1, &v11, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = llvm::ConstantInt::get();
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateICmp(a1 + 1, 33, v6, v7, (uint64_t)v9);
}

uint64_t AGCLLVMGen5TargetLowerer::buildQuadAll(uint64_t *a1, long long *a2, uint64_t a3)
{
  long long v14 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *((_DWORD *)a2 + 6);
  uint64_t v6 = (*(uint64_t (**)(uint64_t *, long long *))(*a1 + 1736))(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  long long v11 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v13 = *((_DWORD *)a2 + 6);
  uint64_t v7 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t *, long long *, uint64_t))(*a1 + 1680))(a1, &v11, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v7, v6, (uint64_t)v9);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdAny(uint64_t *a1, long long *a2, uint64_t a3)
{
  long long v11 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v13 = *((_DWORD *)a2 + 6);
  uint64_t v6 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t *, long long *, uint64_t))(*a1 + 1720))(a1, &v11, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v7 = llvm::ConstantInt::get();
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateICmp(a1 + 1, 33, v6, v7, (uint64_t)v9);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdAll(uint64_t *a1, long long *a2, uint64_t a3)
{
  long long v14 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *((_DWORD *)a2 + 6);
  uint64_t v6 = (*(uint64_t (**)(uint64_t *, long long *))(*a1 + 1728))(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  long long v11 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v13 = *((_DWORD *)a2 + 6);
  uint64_t v7 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t *, long long *, uint64_t))(*a1 + 1720))(a1, &v11, a3);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v10 = 257;
  return llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v7, v6, (uint64_t)v9);
}

uint64_t AGCLLVMGen5TargetLowerer::buildQuadActiveThreadsMask(uint64_t a1, uint64_t a2)
{
  long long v6 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7) {
    llvm::MetadataTracking::track();
  }
  int v8 = *(_DWORD *)(a2 + 24);
  ActiveThreadsMasuint64_t k = AGCLLVMGen5TargetLowerer::buildGetActiveThreadsMask(a1, &v6, 1);
  if (v7) {
    llvm::MetadataTracking::untrack();
  }
  return ActiveThreadsMask;
}

uint64_t AGCLLVMGen5TargetLowerer::buildGetActiveThreadsMask(uint64_t a1, long long *a2, char a3)
{
  long long v16 = *a2;
  uint64_t v17 = *((void *)a2 + 2);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v16, a1 + 8);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  if ((a3 & 1) == 0)
  {
    long long v10 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (llvm::IRBuilderBase *)(a1 + 8));
    int v12 = *(_DWORD *)(a1 + 104);
    uint64_t v9 = llvm::ConstantInt::get();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 1720))(a1, &v10, v9);
    if (!v11) {
      return v7;
    }
    goto LABEL_7;
  }
  long long v13 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v14, (llvm::IRBuilderBase *)(a1 + 8));
  int v15 = *(_DWORD *)(a1 + 104);
  uint64_t v6 = llvm::ConstantInt::get();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 1680))(a1, &v13, v6);
  if (v14) {
LABEL_7:
  }
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdActiveThreadsMask(uint64_t a1, uint64_t a2)
{
  long long v6 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7) {
    llvm::MetadataTracking::track();
  }
  int v8 = *(_DWORD *)(a2 + 24);
  ActiveThreadsMasuint64_t k = AGCLLVMGen5TargetLowerer::buildGetActiveThreadsMask(a1, &v6, 0);
  if (v7) {
    llvm::MetadataTracking::untrack();
  }
  return ActiveThreadsMask;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildSimdBallot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = a3;
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  std::string::basic_string[abi:nn180100]<0>(&v12, *(char **)(a1 + 2728));
  uint64_t v5 = std::string::append(&v12, ".u.32");
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  uint64_t v15 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v15 >= 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if (v15 >= 0) {
    uint64_t v8 = HIBYTE(v15);
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  uint64_t v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)v7, v8, *(void *)(a1 + 200), *(void *)(a1 + 176));
  __int16 v13 = 257;
  long long v10 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v9 + 24), v9, (uint64_t)&v19, 1, (uint64_t)&v12);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  return v10;
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdShuffleRotateUp(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[339], a3, a4);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdShuffleXor(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[338], a3, a4);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdShuffle(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[335], a3, a4);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdBroadcast(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[334], a3, a4);
}

uint64_t AGCLLVMGen5TargetLowerer::buildQuadBallot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a3;
  long long v19 = *(_OWORD *)a2;
  uint64_t v20 = *(void *)(a2 + 16);
  if (v20) {
    llvm::MetadataTracking::track();
  }
  int v21 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v19);
  if (v20) {
    llvm::MetadataTracking::untrack();
  }
  std::string::basic_string[abi:nn180100]<0>(&v15, *(char **)(a1 + 2736));
  uint64_t v5 = std::string::append(&v15, ".u.32");
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  uint64_t v18 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v18 >= 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if (v18 >= 0) {
    uint64_t v8 = HIBYTE(v18);
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  uint64_t v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)v7, v8, *(void *)(a1 + 200), *(void *)(a1 + 176));
  __int16 v16 = 257;
  uint64_t v10 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v9 + 24), v9, (uint64_t)&v22, 1, (uint64_t)&v15);
  uint64_t v11 = *(void *)(a1 + 192);
  v14[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v10, v11, (uint64_t)v14);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  return Cast;
}

uint64_t AGCLLVMGen5TargetLowerer::buildQuadShuffleRotateUp(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[340], a3, a4);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildCoordinateDewarp(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v72 = *(_OWORD *)a2;
  uint64_t v73 = *(void *)(a2 + 16);
  if (v73)
  {
    llvm::MetadataTracking::track();
    int v74 = *(_DWORD *)(a2 + 24);
    long long v79 = v72;
    uint64_t v80 = v73;
    llvm::MetadataTracking::track();
    int v10 = v74;
  }
  else
  {
    int v10 = *(_DWORD *)(a2 + 24);
    long long v79 = *(_OWORD *)a2;
    uint64_t v80 = 0;
  }
  int v81 = v10;
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v79);
  if (v80) {
    llvm::MetadataTracking::untrack();
  }
  if (a5 == 18)
  {
    if (*(void *)a4 == 0x746E6174736E6F63
      && *(void *)(a4 + 8) == 0x6632762E3233692ELL
      && *(_WORD *)(a4 + 16) == 12851)
    {
      long long v19 = *(llvm::Value **)a3;
      BOOL v18 = 1;
      goto LABEL_51;
    }
    if (*(void *)a4 == 0x746E6174736E6F63
      && *(void *)(a4 + 8) == 0x6932762E3233692ELL
      && *(_WORD *)(a4 + 16) == 12851)
    {
      BOOL v18 = 1;
      goto LABEL_34;
    }
LABEL_33:
    BOOL v18 = 0;
LABEL_34:
    long long v19 = *(llvm::Value **)a3;
    goto LABEL_35;
  }
  if (a5 != 14) {
    goto LABEL_33;
  }
  BOOL v13 = *(void *)a4 == 0x746E6174736E6F63 && *(void *)(a4 + 6) == 0x32336632762E746ELL
     || *(void *)a4 == 0x32702E3233663276 && *(void *)(a4 + 6) == 0x3233692E38693270;
  if (*(void *)a4 != 0x32702E3233663276 || *(void *)(a4 + 6) != 0x3233692E38693270)
  {
    BOOL v18 = *(void *)a4 == 0x32702E3233693276 && *(void *)(a4 + 6) == 0x3233692E38693270;
    long long v19 = *(llvm::Value **)a3;
    if (v13) {
      goto LABEL_51;
    }
LABEL_35:
    __int16 v78 = 257;
    uint64_t v20 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v19, v20, (const llvm::Twine *)v77);
    char v22 = 0;
    goto LABEL_52;
  }
  long long v19 = *(llvm::Value **)a3;
  BOOL v18 = 1;
  if (!v13) {
    goto LABEL_35;
  }
LABEL_51:
  llvm::ConstantFP::get();
  uint64_t Splat = llvm::ConstantDataVector::getSplat();
  __int16 v78 = 257;
  uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), (uint64_t)v19, Splat, (uint64_t)v77);
  uint64_t v27 = (llvm::Type *)a1[31];
  __int16 v78 = 257;
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 1), FMul, v27, (const llvm::Twine *)v77);
  char v22 = 1;
LABEL_52:
  uint64_t v28 = *(void *)(a3 + 8);
  uint64_t v29 = llvm::PointerType::get();
  __int16 v78 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, v28, v29, (uint64_t)v77);
  __int16 v78 = 257;
  uint64_t v31 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), LShr, v31, (const llvm::Twine *)v77);
  long long v33 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v76 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Element, v33, (const llvm::Twine *)v75);
  if (v18)
  {
    int v35 = *(llvm::Value **)(a3 + 16);
    char v36 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v78 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 1), v35, v36, (const llvm::Twine *)v77);
    __int16 v76 = 257;
    uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Add, Mul, (const llvm::Twine *)v75);
  }
  int v38 = (llvm::Type *)a1[28];
  __int16 v78 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v38, Cast, Add, (const llvm::Twine *)v77);
  __int16 v78 = 257;
  uint64_t v40 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v41 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), LShr, v40, (const llvm::Twine *)v77);
  uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v76 = 257;
  uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v41, v42, (const llvm::Twine *)v75);
  int v44 = (llvm::Type *)a1[28];
  __int16 v78 = 257;
  uint64_t v45 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v44, Cast, v43, (const llvm::Twine *)v77);
  uint64_t v46 = (llvm::Type *)a1[28];
  __int16 v78 = 257;
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v46, GEP, 0, (uint64_t)v77);
  uint64_t v48 = (llvm::Type *)a1[28];
  __int16 v78 = 257;
  int v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v48, v45, 0, (uint64_t)v77);
  uint64_t v50 = (llvm::Value *)llvm::UndefValue::get();
  __int16 v78 = 257;
  uint64_t v51 = (llvm::Value *)llvm::ConstantInt::get();
  char v52 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v51, (const llvm::Twine *)v77);
  __int16 v76 = 257;
  uint64_t v53 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v50, v52, v53, (const llvm::Twine *)v75);
  __int16 v78 = 257;
  __int16 v55 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v56 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v49, v55, (const llvm::Twine *)v77);
  __int16 v76 = 257;
  unsigned int v57 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v58 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v56, v57, (const llvm::Twine *)v75);
  __int16 v59 = (llvm::Value *)llvm::UndefValue::get();
  __int16 v78 = 257;
  uint64_t v60 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v61 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v60, (const llvm::Twine *)v77);
  __int16 v76 = 257;
  unsigned int v62 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v63 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v59, v61, v62, (const llvm::Twine *)v75);
  __int16 v78 = 257;
  uint64_t v64 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v65 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v49, v64, (const llvm::Twine *)v77);
  __int16 v76 = 257;
  uint64_t v66 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v67 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v63, v65, v66, (const llvm::Twine *)v75);
  __int16 v78 = 257;
  uint64_t FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)(a1 + 1), (uint64_t)v19, v67, (uint64_t)v77);
  __int16 v76 = 257;
  FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), FSub, v58, (uint64_t)v75);
  if ((v22 & 1) == 0)
  {
    char v70 = (llvm::Type *)a1[31];
    __int16 v78 = 257;
    FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 1), FPToUI, v70, (const llvm::Twine *)v77);
  }
  if (v73) {
    llvm::MetadataTracking::untrack();
  }
  return FPToUI;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildCoordinateWarp(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  long long v123 = *(_OWORD *)a2;
  uint64_t v124 = *(void *)(a2 + 16);
  if (v124)
  {
    llvm::MetadataTracking::track();
    int v125 = *(_DWORD *)(a2 + 24);
    long long v130 = v123;
    uint64_t v131 = v124;
    llvm::MetadataTracking::track();
    int v10 = v125;
  }
  else
  {
    int v10 = *(_DWORD *)(a2 + 24);
    long long v130 = *(_OWORD *)a2;
    uint64_t v131 = 0;
  }
  int v132 = v10;
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v130);
  if (v131) {
    llvm::MetadataTracking::untrack();
  }
  if (a5 == 18)
  {
    if (*(void *)a4 == 0x746E6174736E6F63
      && *(void *)(a4 + 8) == 0x6632762E3233692ELL
      && *(_WORD *)(a4 + 16) == 12851)
    {
      Fuint64_t Add = *(llvm::Value **)a3;
      BOOL v18 = 1;
LABEL_50:
      char v23 = 1;
      goto LABEL_52;
    }
    if (*(void *)a4 == 0x746E6174736E6F63
      && *(void *)(a4 + 8) == 0x6932762E3233692ELL
      && *(_WORD *)(a4 + 16) == 12851)
    {
      BOOL v18 = 1;
      goto LABEL_34;
    }
LABEL_33:
    BOOL v18 = 0;
LABEL_34:
    Fuint64_t Add = *(llvm::Value **)a3;
    goto LABEL_35;
  }
  if (a5 != 14) {
    goto LABEL_33;
  }
  BOOL v13 = *(void *)a4 == 0x746E6174736E6F63 && *(void *)(a4 + 6) == 0x32336632762E746ELL
     || *(void *)a4 == 0x32702E3233663276 && *(void *)(a4 + 6) == 0x3233692E38693270;
  if (*(void *)a4 != 0x32702E3233663276 || *(void *)(a4 + 6) != 0x3233692E38693270)
  {
    BOOL v18 = *(void *)a4 == 0x32702E3233693276 && *(void *)(a4 + 6) == 0x3233692E38693270;
    Fuint64_t Add = *(llvm::Value **)a3;
    if (v13) {
      goto LABEL_50;
    }
LABEL_35:
    uint64_t v20 = (llvm::Type *)a1[28];
    __int16 v129 = 257;
    uint64_t UIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(a1 + 1), FAdd, v20, (const llvm::Twine *)v128);
    llvm::ConstantFP::get();
    uint64_t Splat = llvm::ConstantDataVector::getSplat();
    __int16 v127 = 257;
    Fuint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)(a1 + 1), UIToFP, Splat, (uint64_t)v126);
    char v23 = 0;
    goto LABEL_52;
  }
  Fuint64_t Add = *(llvm::Value **)a3;
  BOOL v18 = 1;
  char v23 = 1;
  if (!v13) {
    goto LABEL_35;
  }
LABEL_52:
  char v121 = v23;
  llvm::ConstantFP::get();
  uint64_t v26 = llvm::ConstantDataVector::getSplat();
  __int16 v129 = 257;
  uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), (uint64_t)FAdd, v26, (uint64_t)v128);
  uint64_t v28 = (llvm::Type *)a1[31];
  __int16 v129 = 257;
  FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 1), FMul, v28, (const llvm::Twine *)v128);
  __int16 v30 = (llvm::Type *)a1[28];
  __int16 v129 = 257;
  uint64_t v31 = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(a1 + 1), FPToUI, v30, (const llvm::Twine *)v128);
  llvm::ConstantFP::get();
  uint64_t v32 = llvm::ConstantDataVector::getSplat();
  __int16 v127 = 257;
  uint64_t v33 = llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), v31, v32, (uint64_t)v126);
  __int16 v137 = 257;
  llvm::IRBuilderBase::CreateFSub((uint64_t)(a1 + 1), (uint64_t)FAdd, v33, (uint64_t)v136);
  uint64_t v34 = *(void *)(a3 + 8);
  uint64_t v35 = llvm::PointerType::get();
  __int16 v129 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, v34, v35, (uint64_t)v128);
  __int16 v129 = 257;
  uint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), FPToUI, v37, (const llvm::Twine *)v128);
  __int16 v39 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v127 = 257;
  uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Element, v39, (const llvm::Twine *)v126);
  if (v18)
  {
    __int16 v41 = *(llvm::Value **)(a3 + 16);
    uint64_t v42 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v129 = 257;
    uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 1), v41, v42, (const llvm::Twine *)v128);
    __int16 v127 = 257;
    uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Add, Mul, (const llvm::Twine *)v126);
  }
  uint64_t v122 = (uint64_t)FAdd;
  int v44 = (llvm::Type *)a1[31];
  __int16 v129 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v44, Cast, Add, (const llvm::Twine *)v128);
  uint64_t v46 = (llvm::Type *)a1[31];
  char v47 = 1;
  uint64_t v48 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v129 = 257;
  int v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Add, v48, (const llvm::Twine *)v128);
  __int16 v127 = 257;
  uint64_t v50 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v46, Cast, v49, (const llvm::Twine *)v126);
  uint64_t v51 = (llvm::Type *)a1[31];
  __int16 v129 = 257;
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v51, GEP, 0, (uint64_t)v128);
  v136[0] = AlignedLoad;
  uint64_t v53 = (llvm::Type *)a1[31];
  __int16 v129 = 257;
  v136[1] = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v53, v50, 0, (uint64_t)v128);
  __int16 v129 = 257;
  char v54 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v55 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), FPToUI, v54, (const llvm::Twine *)v128);
  uint64_t v56 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v127 = 257;
  unsigned int v57 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v55, v56, (const llvm::Twine *)v126);
  uint64_t v58 = (llvm::Type *)a1[31];
  __int16 v129 = 257;
  uint64_t v59 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v58, Cast, v57, (const llvm::Twine *)v128);
  uint64_t v60 = (llvm::Type *)a1[31];
  uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v129 = 257;
  unsigned int v62 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v61, (const llvm::Twine *)v128);
  __int16 v127 = 257;
  uint64_t v63 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v60, Cast, v62, (const llvm::Twine *)v126);
  uint64_t v64 = (llvm::Type *)a1[31];
  __int16 v129 = 257;
  uint64_t v65 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v64, v59, 0, (uint64_t)v128);
  v135[0] = v65;
  uint64_t v66 = (llvm::Type *)a1[31];
  __int16 v129 = 257;
  v135[1] = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v66, v63, 0, (uint64_t)v128);
  uint64_t v67 = (llvm::Value *)llvm::UndefValue::get();
  __int16 v129 = 257;
  unsigned int v68 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v69 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v68, (const llvm::Twine *)v128);
  __int16 v127 = 257;
  char v70 = (llvm::Value *)llvm::ConstantInt::get();
  Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v67, v69, v70, (const llvm::Twine *)v126);
  __int16 v129 = 257;
  long long v72 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v73 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v65, v72, (const llvm::Twine *)v128);
  __int16 v127 = 257;
  int v74 = (llvm::Value *)llvm::ConstantInt::get();
  std::string v75 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v73, v74, (const llvm::Twine *)v126);
  llvm::UndefValue::get();
  llvm::ConstantInt::get();
  __int16 v76 = (llvm::Value *)llvm::ConstantDataVector::getSplat();
  __int16 v129 = 257;
  uint64_t v77 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v75, v76, (const llvm::Twine *)v128);
  __int16 v78 = (llvm::Type *)a1[28];
  __int16 v129 = 257;
  uint64_t v79 = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(a1 + 1), v77, v78, (const llvm::Twine *)v128);
  llvm::ConstantFP::get();
  uint64_t v80 = llvm::ConstantDataVector::getSplat();
  __int16 v129 = 257;
  llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), v79, v80, (uint64_t)v128);
  __int16 v129 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v134[0] = llvm::UndefValue::get();
  uint64_t v81 = 0;
  v134[1] = llvm::UndefValue::get();
  do
  {
    char v82 = v47;
    unsigned int v83 = (llvm::Value *)v134[v81];
    __int16 v84 = (llvm::Value *)v136[v81];
    __int16 v129 = 257;
    std::string::size_type v85 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v86 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v84, v85, (const llvm::Twine *)v128);
    __int16 v127 = 257;
    std::string::size_type v87 = (llvm::Value *)llvm::ConstantInt::get();
    char v88 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v86, v87, (const llvm::Twine *)v126);
    std::string::size_type v89 = (llvm::Value *)v135[v81];
    __int16 v129 = 257;
    std::string v90 = (llvm::Value *)llvm::ConstantInt::get();
    std::string::size_type v91 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v89, v90, (const llvm::Twine *)v128);
    __int16 v127 = 257;
    uint64_t v92 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v93 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v88, v91, v92, (const llvm::Twine *)v126);
    uint64_t v94 = a1[28];
    __int16 v129 = 257;
    char v47 = 0;
    v134[v81] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, v93, v94, (uint64_t)v128);
    uint64_t v81 = 1;
  }
  while ((v82 & 1) != 0);
  v133[0] = llvm::UndefValue::get();
  uint64_t v95 = 0;
  v133[1] = llvm::UndefValue::get();
  char v96 = 1;
  do
  {
    char v97 = v96;
    std::string v98 = (llvm::Value *)v133[v95];
    uint64_t v99 = (llvm::Value *)v136[v95];
    __int16 v129 = 257;
    int v100 = (llvm::Value *)llvm::ConstantInt::get();
    unsigned int v101 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v99, v100, (const llvm::Twine *)v128);
    __int16 v127 = 257;
    uint64_t v102 = (llvm::Value *)llvm::ConstantInt::get();
    std::string v103 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v98, v101, v102, (const llvm::Twine *)v126);
    uint64_t v104 = (llvm::Value *)v135[v95];
    __int16 v129 = 257;
    uint64_t v105 = (llvm::Value *)llvm::ConstantInt::get();
    long long v106 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v104, v105, (const llvm::Twine *)v128);
    __int16 v127 = 257;
    uint64_t v107 = (llvm::Value *)llvm::ConstantInt::get();
    int v108 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v103, v106, v107, (const llvm::Twine *)v126);
    llvm::ConstantInt::get();
    uint64_t v109 = (llvm::Value *)llvm::ConstantDataVector::getSplat();
    __int16 v129 = 257;
    AShr = (llvm::Value *)llvm::IRBuilderBase::CreateAShr((llvm::IRBuilderBase *)(a1 + 1), v108, v109, (const llvm::Twine *)v128);
    v111 = (llvm::Type *)a1[28];
    __int16 v129 = 257;
    uint64_t SIToFP = llvm::IRBuilderBase::CreateSIToFP((llvm::IRBuilderBase *)(a1 + 1), AShr, v111, (const llvm::Twine *)v128);
    llvm::ConstantFP::get();
    uint64_t v113 = llvm::ConstantDataVector::getSplat();
    __int16 v129 = 257;
    uint64_t v114 = llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), SIToFP, v113, (uint64_t)v128);
    char v96 = 0;
    v133[v95] = v114;
    uint64_t v95 = 1;
  }
  while ((v97 & 1) != 0);
  __int16 v129 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v129 = 257;
  uint64_t v116 = llvm::IRBuilderBase::CreateSelect();
  __int16 v129 = 257;
  uint64_t v117 = llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), v122, Select, (uint64_t)v128);
  __int16 v127 = 257;
  v118 = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)(a1 + 1), v117, v116, (uint64_t)v126);
  if ((v121 & 1) == 0)
  {
    v119 = (llvm::Type *)a1[31];
    __int16 v129 = 257;
    v118 = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 1), v118, v119, (const llvm::Twine *)v128);
  }
  if (v124) {
    llvm::MetadataTracking::untrack();
  }
  return v118;
}

uint64_t AGCLLVMGen5TargetLowerer::buildReadHWTileID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  long long v18 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.tile.id", "");
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v7 = a1 + 8;
  __int16 v13 = 257;
  uint64_t v8 = llvm::IRBuilderBase::CreateCall(v7, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19) {
    free(v17);
  }
  return Cast;
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdShuffleDown(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[337], a3, a4);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdShuffleUp(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[336], a3, a4);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdGroupIndexInThreadgroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  long long v18 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.simd.group", "");
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v7 = a1 + 8;
  __int16 v13 = 257;
  uint64_t v8 = llvm::IRBuilderBase::CreateCall(v7, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19) {
    free(v17);
  }
  return Cast;
}

uint64_t AGCLLVMGen5TargetLowerer::buildThreadIndexInSimdGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  long long v18 = xmmword_1CADD62A0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.simd.element", "");
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v7 = a1 + 8;
  __int16 v13 = 257;
  uint64_t v8 = llvm::IRBuilderBase::CreateCall(v7, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19) {
    free(v17);
  }
  return Cast;
}

uint64_t AGCLLVMGen5TargetLowerer::buildGlobalBindingOffsetIntrinsic()
{
  return llvm::Intrinsic::getDeclaration();
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildProgramType(uint64_t a1, uint64_t a2)
{
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9) {
    llvm::MetadataTracking::track();
  }
  int v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  __int16 v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v4 + 24), v4, 0, 0, (uint64_t)v6);
}

uint64_t AGCLLVMGen5TargetLowerer::buildIsNullSimdgroupEvent(void *a1, llvm::Instruction *a2)
{
  uint64_t v4 = a1 + 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 1), a2);
  uint64_t v5 = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  uint64_t v6 = a1[26];
  __int16 v12 = 257;
  uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)v4, 47, v5, v6, (uint64_t)v11);
  uint64_t v8 = a1[319];
  v10[16] = 257;
  llvm::IRBuilderBase::CreateICmp(v4, 32, Cast, v8, (uint64_t)v10);
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMGen5TargetLowerer::buildGetNullSimdgroupEvent(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4 = a1 + 8;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = *(void *)(a1 + 2552);
  uint64_t v6 = *(void *)a2;
  __int16 v9 = 257;
  llvm::IRBuilderBase::CreateCast(v4, 48, v5, v6, (uint64_t)v8);
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

void AGCLLVMGen5TargetLowerer::buildWaitSimdgroupEvents(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v5 = (llvm::Type **)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  __int16 v13 = 257;
  __int16 v7 = AGCLLVMBuilder::tryDeducePointeeType(v5, v6);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v4, v7, (uint64_t)v5, 0, (uint64_t)&v12);
  uint64_t v9 = *(void *)(a1 + 208);
  __int16 v11 = 257;
  llvm::IRBuilderBase::CreateCast((uint64_t)v4, 47, AlignedLoad, v9, (uint64_t)&v10);
  std::string::basic_string[abi:nn180100]<0>(&v10, "async.copy.waiton");
  std::string::append(&v10, "bufrblk");
  __int16 v13 = 260;
  __int16 v12 = &v10;
  operator new();
}

void AGCLLVMGen5TargetLowerer::buildMemCpy2D(uint64_t *a1, llvm::Instruction *a2, char a3)
{
  v82[12] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 1), a2);
  v81[0] = v82;
  v81[1] = (void *)0xC00000000;
  unint64_t v7 = llvm::CallBase::arg_end(a2) - (void)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  if ((int)(v7 >> 5) >= 1)
  {
    uint64_t v8 = (v7 >> 5);
    uint64_t v9 = a2;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v81, *((void *)v9 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
      uint64_t v9 = (llvm::Instruction *)((char *)v9 + 32);
      --v8;
    }
    while (v8);
  }
  if ((a3 & 1) == 0)
  {
    std::string v10 = (char *)v81[0] + 8;
    v79[0] = (*(uint64_t (**)(uint64_t *, llvm::Instruction *, void))(*a1 + 1864))(a1, a2, 0);
    llvm::SmallVectorImpl<llvm::Value *>::insert_one_impl<llvm::Value *>((unsigned int *)v81, (uint64_t)v10, v79);
  }
  __int16 v11 = (unsigned __int8 *)*((void *)v81[0] + 10);
  uint64_t v12 = **((void **)v81[0] + 2);
  int v13 = *(_DWORD *)(v12 + 8);
  if ((v13 & 0xFE) == 0x12) {
    int v13 = *(_DWORD *)(**(void **)(v12 + 16) + 8);
  }
  unsigned int v14 = v13 & 0xFFFFFF00;
  if (v14 == 768) {
    uint64_t v15 = *((void *)v81[0] + 4);
  }
  else {
    uint64_t v15 = *((void *)v81[0] + 8);
  }
  if (v14 == 768) {
    uint64_t v16 = *((void *)v81[0] + 8);
  }
  else {
    uint64_t v16 = *((void *)v81[0] + 4);
  }
  if (v14 == 768) {
    uint64_t v17 = *((void *)v81[0] + 7);
  }
  else {
    uint64_t v17 = *((void *)v81[0] + 3);
  }
  if (*(unsigned char *)(v15 + 16) != 16 || *(unsigned char *)(v16 + 16) != 16 || *(unsigned char *)(v17 + 16) != 16 || v11[16] > 0x14u)
  {
    uint64_t v21 = llvm::ConstantInt::get();
    __int16 v80 = 257;
    uint64_t ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v6, 32, (llvm::CmpInst **)v15, v21, (uint64_t)v79);
    __int16 v80 = 257;
    URem = (llvm::CmpInst **)llvm::IRBuilderBase::CreateURem((llvm::IRBuilderBase *)v6, (llvm::Value *)v17, (llvm::Value *)v16, (const llvm::Twine *)v79);
    uint64_t v24 = llvm::ConstantInt::get();
    __int16 v78 = 257;
    uint64_t v25 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v6, 32, URem, v24, (uint64_t)v77);
    __int16 v80 = 257;
    uint64_t v26 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v6, (llvm::Value *)v11, v26, (const llvm::Twine *)v79);
    uint64_t v28 = a1[25];
    __int16 v78 = 257;
    uint64_t Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)v6, 38, Element, v28, (uint64_t)v77);
    __int16 v80 = 257;
    __int16 v30 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v31 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v6, (llvm::Value *)v11, v30, (const llvm::Twine *)v79);
    uint64_t v32 = a1[25];
    __int16 v78 = 257;
    uint64_t v33 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)v6, 38, v31, v32, (uint64_t)v77);
    uint64_t Signed = llvm::ConstantInt::getSigned();
    __int16 v80 = 257;
    uint64_t v35 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v6, 39, Cast, Signed, (uint64_t)v79);
    uint64_t v36 = llvm::ConstantInt::getSigned();
    __int16 v78 = 257;
    uint64_t v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v6, 41, Cast, v36, (uint64_t)v77);
    __int16 v76 = 257;
    int v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v6, v35, v37, (const llvm::Twine *)v75);
    uint64_t v39 = llvm::ConstantInt::getSigned();
    __int16 v74 = 257;
    uint64_t v40 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v6, 39, v33, v39, (uint64_t)v73);
    uint64_t v41 = llvm::ConstantInt::getSigned();
    __int16 v72 = 257;
    uint64_t v42 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v6, 41, v33, v41, (uint64_t)v71);
    __int16 v70 = 257;
    uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v6, v40, v42, (const llvm::Twine *)v69);
    __int16 v68 = 257;
    int v44 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v6, v38, v43, (const llvm::Twine *)v67);
    __int16 v80 = 257;
    uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v6, ICmp, v25, (const llvm::Twine *)v79);
    __int16 v78 = 257;
    llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v6, v44, v45, (const llvm::Twine *)v77);
    v79[0] = (uint64_t)"async.copy.merge";
    __int16 v80 = 259;
    uint64_t v46 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    FirstInsertionPt = (char *)llvm::BasicBlock::getFirstInsertionPt(v46);
    llvm::IRBuilderBase::SetInsertPoint((char **)v6, (char *)v46, FirstInsertionPt);
    uint64_t v48 = (llvm::Type *)a1[26];
    __int16 v80 = 257;
    llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v6, v48, 2, (const llvm::Twine *)v79);
    v79[0] = (uint64_t)"async.copy.emulation";
    __int16 v80 = 259;
    operator new();
  }
  long long v18 = (llvm::APInt *)(v15 + 24);
  unsigned int v19 = *(_DWORD *)(v15 + 32);
  if (v19 > 0x40) {
    BOOL v20 = llvm::APInt::countLeadingZerosSlowCase(v18) == v19 - 1;
  }
  else {
    BOOL v20 = *(void *)v18 == 1;
  }
  int v50 = v20;
  uint64_t v51 = (unint64_t *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u) {
    uint64_t v51 = (unint64_t *)*v51;
  }
  char v52 = (unint64_t *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u) {
    char v52 = (unint64_t *)*v52;
  }
  unint64_t v53 = *v51;
  unint64_t v54 = *v52;
  __int16 v80 = 257;
  __int16 v55 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v56 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v6, (llvm::Value *)v11, v55, (const llvm::Twine *)v79);
  if (*(unsigned char *)(v56 + 16) == 16) {
    uint64_t v57 = v56;
  }
  else {
    uint64_t v57 = 0;
  }
  unsigned int v58 = *(_DWORD *)(v57 + 32);
  if (v58 > 0x40) {
    uint64_t v59 = **(void **)(v57 + 24);
  }
  else {
    uint64_t v59 = (uint64_t)(*(void *)(v57 + 24) << -(char)v58) >> -(char)v58;
  }
  __int16 v80 = 257;
  uint64_t v60 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v61 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v6, (llvm::Value *)v11, v60, (const llvm::Twine *)v79);
  if (*(unsigned char *)(v61 + 16) == 16) {
    uint64_t v62 = v61;
  }
  else {
    uint64_t v62 = 0;
  }
  unsigned int v63 = *(_DWORD *)(v62 + 32);
  if (v63 > 0x40) {
    uint64_t v64 = **(void **)(v62 + 24);
  }
  else {
    uint64_t v64 = (uint64_t)(*(void *)(v62 + 24) << -(char)v63) >> -(char)v63;
  }
  uint64_t v65 = *a1;
  if (!v50 || v53 % v54 || (v59 - 0x8000) < 0xFFFF0000 || (v64 - 0x8000) < 0xFFFF0000) {
    uint64_t v66 = (*(uint64_t (**)(uint64_t *, void **))(v65 + 1832))(a1, v81);
  }
  else {
    uint64_t v66 = (*(uint64_t (**)(uint64_t *, void **))(v65 + 1840))(a1, v81);
  }
  uint64_t v49 = *(void *)a2;
  __int16 v80 = 257;
  llvm::IRBuilderBase::CreateCast((uint64_t)v6, 48, v66, v49, (uint64_t)v79);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  if (v81[0] != v82) {
    free(v81[0]);
  }
}

unsigned int *llvm::SmallVectorImpl<llvm::Value *>::insert_one_impl<llvm::Value *>(unsigned int *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v6 = result[2];
  if (*(void *)result + 8 * v6 == a2)
  {
    uint64_t v9 = *a3;
    return (unsigned int *)llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)result, v9);
  }
  else
  {
    if (v6 >= result[3]) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v7 = (uint64_t *)(v5 + 8 * ((a2 - v5) >> 3));
    *(void *)(v5 + 8 * v6) = *(void *)(v5 + 8 * v6 - 8);
    uint64_t v8 = *(void *)result + 8 * v6 - 8;
    if ((uint64_t *)v8 != v7)
    {
      uint64_t result = (unsigned int *)memmove(v7 + 1, v7, v8 - (void)v7);
      LODWORD(v6) = v4[2];
    }
    v4[2] = v6 + 1;
    *unint64_t v7 = *a3;
  }
  return result;
}

void AGCLLVMGen5TargetLowerer::buildMemCpy1D(uint64_t a1, llvm::Instruction *a2, int a3)
{
  v16[5] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 8;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v15[0] = v16;
  v15[1] = (void *)0x500000000;
  unint64_t v7 = llvm::CallBase::arg_end(a2) - (void)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  if ((int)(v7 >> 5) >= 1)
  {
    uint64_t v8 = (v7 >> 5);
    uint64_t v9 = a2;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v15, *((void *)v9 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
      uint64_t v9 = (llvm::Instruction *)((char *)v9 + 32);
      --v8;
    }
    while (v8);
  }
  if (!a3)
  {
    std::string v10 = (char *)v15[0] + 8;
    v13[0] = (*(uint64_t (**)(uint64_t, llvm::Instruction *, void))(*(void *)a1 + 1864))(a1, a2, 0);
    llvm::SmallVectorImpl<llvm::Value *>::insert_one_impl<llvm::Value *>((unsigned int *)v15, (uint64_t)v10, v13);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 1856))(a1, v15);
  uint64_t v12 = *(void *)a2;
  __int16 v14 = 257;
  llvm::IRBuilderBase::CreateCast(v6, 48, v11, v12, (uint64_t)v13);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  if (v15[0] != v16) {
    free(v15[0]);
  }
}

BOOL AGCLLVMGen5TargetLowerer::isImageWriteBlockFromDimensionSupported(uint64_t a1, int a2)
{
  return a2 == 8 || (a2 - 2) < 4;
}

uint64_t AGCLLVMGen5TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMGen5TargetLowerer::getExecutionScopedSamplerStateRegisterCount(AGCLLVMGen5TargetLowerer *this)
{
  return 28;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildMeshVaryingWrite(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type **a5)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  std::string v10 = (llvm::Type *)llvm::PointerType::get();
  __int16 v15 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a5, v10, (const llvm::Twine *)v14);
  uint64_t v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx2.mesh.varying.write", 28, a1[18], a1[24], a1[24], (uint64_t)v10);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = PointerCast;
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v12 + 24), v12, (uint64_t)v19, 3, (uint64_t)v14);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildMeshPrimattrWrite(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type **a5)
{
  void v19[3] = *MEMORY[0x1E4F143B8];
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  std::string v10 = (llvm::Type *)llvm::PointerType::get();
  __int16 v15 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a5, v10, (const llvm::Twine *)v14);
  uint64_t v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx2.mesh.primattr.write", 29, a1[18], a1[24], a1[24], (uint64_t)v10);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = PointerCast;
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v12 + 24), v12, (uint64_t)v19, 3, (uint64_t)v14);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildMeshIndexWrite(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::Type **a4)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)llvm::PointerType::get();
  __int16 v13 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a4, v8, (const llvm::Twine *)v12);
  uint64_t v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx2.mesh.index.write", 26, a1[18], a1[24], (uint64_t)v8);
  v17[0] = a3;
  v17[1] = PointerCast;
  __int16 v13 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildWaitFence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)"llvm.agx2.wait.fence", 20, *(void *)(a1 + 144), *(void *)(a1 + 192));
  v13[0] = a3;
  __int16 v9 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v6 + 24), v6, (uint64_t)v13, 1, (uint64_t)v8);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildAllocateUVB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  long long v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v14 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v12);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, (uint64_t)"llvm.agx2.allocate.uvb", 22, *(void *)(a1 + 144), *(void *)(a1 + 192), *(void *)(a1 + 192));
  v15[0] = a3;
  v15[1] = a4;
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v8 + 24), v8, (uint64_t)v15, 2, (uint64_t)v10);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildGetMeshPrimitivePointer(uint64_t a1, uint64_t a2)
{
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9) {
    llvm::MetadataTracking::track();
  }
  int v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  llvm::PointerType::get();
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v6);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildGetPayloadPointer(uint64_t a1, uint64_t a2)
{
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9) {
    llvm::MetadataTracking::track();
  }
  int v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  llvm::PointerType::get();
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v6);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildEnableAllThreads(uint64_t a1, uint64_t a2)
{
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9) {
    llvm::MetadataTracking::track();
  }
  int v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v6);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildWriteChildcount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)"llvm.agx2.object.childcount.write", 33, *(void *)(a1 + 144), *(void *)(a1 + 200));
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  v13[0] = a3;
  __int16 v9 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v6 + 24), v6, (uint64_t)v13, 1, (uint64_t)v8);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildStoreChildcount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(void *)(a1 + 312);
  uint64_t v9 = llvm::PointerType::get();
  uint64_t v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, (uint64_t)"llvm.agx2.object.childcount.store", 33, *(void *)(a1 + 144), v8, v9);
  v17[0] = a4;
  v17[1] = a3;
  __int16 v13 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

double AGCLLVMGen5TargetConfig::AGCLLVMGen5TargetConfig(uint64_t a1, int a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 8) = "agx2-apple-ios";
  *(void *)(a1 + 16) = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 28) = (unsigned __int16)a2;
  *(void *)(a1 + 32) = "/metal_rt_precise.metallib";
  double result = 7.29290208e-304;
  *(void *)(a1 + 40) = 0x100010000010100;
  *(void *)(a1 + 48) = 124;
  *(void *)a1 = &unk_1F25D8A18;
  *(unsigned char *)(a1 + 46) = 1;
  return result;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getPerEncoderIndirectionTableSize()
{
  return 11;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getPerEncoderIndirectionTablePrivateDataIndex()
{
  return 10;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getPerEncoderIndirectionTableFragmentBuiltinEncoderStateIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getPerEncoderIndirectionTablePipelineStateHeapBufferIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getPerEncoderIndirectionTableICBHeapBufferIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getGeometryPipelineEmulationMailboxLookupBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getGeometryPipelineEmulationPerDispatchInfoIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getGeometryPipelineEmulationPerKickInfoIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getObjectIndirectBufferWgSizeIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getObjectIndirectBufferWgCountIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataCount()
{
  return 8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataGotIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataGlobalBindingsTableIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataDoneRayTracingFlagIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataShaderStrideIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataInstanceLevelsIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataShaderUserSizeIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickDoraStateBufferIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickLeafPointersInfoIndex()
{
  return 5;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickGin1122SWWABvhIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickDriverDataStartIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickUserBoundsIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerEncoderIndirectionTableIndex()
{
  return 13;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsDoraStateBufferIndex()
{
  return 12;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsDriverDataStartIndex()
{
  return 10;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsUserDataBoundsIndex()
{
  return 9;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsShaderStridesIndex()
{
  return 32;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsLeafPointersInfoIndex()
{
  return 11;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsIFTHeapIndex()
{
  return 8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsVFTHeapIndex()
{
  return 7;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsBVHHeapIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsSamplerHeapIndex()
{
  return 5;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsWidthTextureHeapIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsWriteTextureHeapIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsReadTextureHeapIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsSizeIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsDriverSizeIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionPerEncoderIndirectionTableIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionVisibleFunctionTableHeapBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionWidthTextureHeapBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionDylibGOTBufferIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionBVHStateHeapBufferIndex()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionWriteTextureGatherBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionReadTextureGatherBufferIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionSamplerGatherBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionSamplerHeapBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionWriteTextureHeapBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionReadTextureHeapBufferIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeDylibGlobalBindingTableIndex()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSCSPerShaderConfigurationTableBufferIndex()
{
  return 62;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSCSPerKickConfigurationTableBufferIndex()
{
  return 61;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeControlFlowPredicateLinkTokenWordsIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeControlFlowPredicateFailLinkAddressIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeControlFlowPredicatePassLinkAddressIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeControlFlowPredicateRightOperandIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeControlFlowPredicateLeftOperandIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeBVHStateHeapBufferIndex()
{
  return 59;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeProgressMarkerBufferIndex()
{
  return 57;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeDylibStageSpecificBindPointIndex(uint64_t a1, int a2)
{
  return (a2 + 64);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeGlobalConstructorsBufferIndex()
{
  return 58;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeDylibGOTBufferIndex()
{
  return 56;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSplitDispatchParameterEnabled()
{
  return 12;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSplitDispatchParameterThreadsPerGrid()
{
  return 9;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSplitDispatchParameterThreadOffset()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSplitDispatchParameterThreadgroupsPerGrid()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSplitDispatchParameterThreadgroupOffset()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSplitDispatchParameters()
{
  return 55;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeExecuteIndirectIndirectCommandBufferBufferIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeExecuteIndirectInputParametersBufferIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeVisibleFunctionTableHeapBufferIndex()
{
  return 51;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeIntersectionFunctionTableHeapBufferIndex()
{
  return 50;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputePerEncoderIndirectionTableIndex()
{
  return 49;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSamplerGatherBufferIndex()
{
  return 48;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSamplerHeapBufferIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeWidthTextureHeapBufferIndex()
{
  return 46;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeWriteTextureGatherBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeReadTextureGatherBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeWriteTextureHeapBufferIndex()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeReadTextureHeapBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeGatherOrPatchUpOffsetsBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeStageInBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeTGOptCountIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeTGOptParamsIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeFastIntegerDivideBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeIndirectBufferWgSizeIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeIndirectBufferWgCountIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeMaxSPIBindPoints()
{
  return 65;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeMaxAPIBindPointsBuffer(uint64_t a1, int a2)
{
  if (a2) {
    return 35;
  }
  else {
    return 31;
  }
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeMaxAPIBindPointsTexture()
{
  return 128;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getMeshLocalMeshDataIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderDylibGlobalBindingTableIndex()
{
  return 61;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderDylibStageSpecificBindPointIndex(uint64_t a1, int a2)
{
  return (a2 + 62);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderGlobalConstructorsBufferIndex()
{
  return 60;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderDylibGOTBufferIndex()
{
  return 59;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderFragmentViewportDepthRange()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderVertexAmplificationViewMappingsIndex()
{
  return 58;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderVisibleFunctionTableHeapBufferIndex()
{
  return 57;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderIntersectionFunctionTableHeapBufferIndex()
{
  return 55;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderPerEncoderIndirectionTableIndex()
{
  return 56;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderSamplerGatherBufferIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderSamplerHeapBufferIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderWidthTextureHeapBufferIndex()
{
  return 51;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderWriteTextureGatherBufferIndex()
{
  return 50;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderReadTextureGatherBufferIndex()
{
  return 49;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderWriteTextureHeapBufferIndex()
{
  return 48;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderReadTextureHeapBufferIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderBaseImmediateBufferIndex()
{
  return 46;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderGLMTLReserved()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationConsumerControlPointIndexBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationConsumerPositionInPatchBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationConsumerPatchIndexBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationProducerInternalInstanceIDsBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationProducerInternalInstanceCountsBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationProducerDrawElemIndirectCmdsInputBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationProducerDrawElemIndirectCmdsOutputBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationInternalDrawIndexOffsetsBufferIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationInternalPerPatchDataBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationInternalPerPatchIDBufferIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationFactorBufferIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderMaxSPIBindPoints()
{
  return 65;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderMaxAPIIndirectBuffer()
{
  return 500000;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderMaxAPIIndirectTexture()
{
  return 500000;
}

uint64_t AGCLLVMGen5TargetLowerer::buildIsFirstActiveThread(uint64_t a1, long long *a2, int a3)
{
  long long v14 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v14, a1 + 8);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = 2768;
  if (a3) {
    uint64_t v6 = 2776;
  }
  if (*(void *)(a1 + v6)) {
    strlen(*(const char **)(a1 + v6));
  }
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v13 = 257;
  uint64_t v8 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  uint64_t v9 = llvm::ConstantInt::get();
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v8, v9, (uint64_t)v11);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildReduce(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, llvm::Value *a5)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v79 = a3;
  *((void *)&v79 + 1) = a4;
  long long v76 = *a2;
  uint64_t v77 = *((void *)a2 + 2);
  if (v77) {
    llvm::MetadataTracking::track();
  }
  int v78 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v76, a1 + 8);
  if (v77) {
    llvm::MetadataTracking::untrack();
  }
  if (llvm::StringRef::find() == -1 && llvm::StringRef::find() == -1 && llvm::StringRef::find() == -1)
  {
    long long v70 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v71, (llvm::IRBuilderBase *)(a1 + 8));
    int v61 = *(_DWORD *)(a1 + 104);
    int v72 = v61;
    long long v86 = v79;
    long long v83 = v70;
    uint64_t v84 = v71;
    if (v71)
    {
      llvm::MetadataTracking::track();
      int v61 = v72;
    }
    int v85 = v61;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v83, a1 + 8);
    if (v84) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v62 = llvm::StringRef::find();
    BOOL v63 = llvm::StringRef::find() == -1 && llvm::StringRef::find() == -1;
    llvm::StringRef::find();
    llvm::StringRef::find();
    llvm::StringRef::find();
    if (v62 != -1 && !v63)
    {
      long long v80 = v70;
      uint64_t v81 = v71;
      if (v71)
      {
        llvm::MetadataTracking::track();
        int v64 = v72;
        int v82 = v72;
        long long v87 = v80;
        uint64_t v88 = v81;
        if (v81)
        {
          llvm::MetadataTracking::track();
          int v64 = v82;
        }
      }
      else
      {
        int v64 = v72;
        int v82 = v72;
        long long v87 = v80;
        uint64_t v88 = 0;
      }
      int v89 = v64;
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v87, a1 + 8);
      if (v88) {
        llvm::MetadataTracking::untrack();
      }
      *(_OWORD *)long long v106 = 0u;
      long long v107 = 0u;
      AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, a5, v106);
      if (*(void *)(a1 + 2784)) {
        strlen(*(const char **)(a1 + 2784));
      }
      uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
      __int16 v105 = 257;
      uint64_t v66 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)&v102);
      uint64_t v67 = llvm::ConstantInt::get();
      __int16 v101 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v66, v67, (uint64_t)v100);
      *(void *)&long long v102 = "reduce.int.prod.merge";
      __int16 v105 = 259;
      llvm::BasicBlock::splitBasicBlock();
      *(void *)&long long v102 = "reduce.int.prod.fast";
      __int16 v105 = 259;
      operator new();
    }
    long long v102 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v103, (llvm::IRBuilderBase *)(a1 + 8));
    int v104 = *(_DWORD *)(a1 + 104);
    Insertuint64_t Element = AGCLLVMGen5TargetLowerer::buildReduceCore((void *)a1, &v102, v86, *((uint64_t *)&v86 + 1), a5);
    if (v103) {
      llvm::MetadataTracking::untrack();
    }
    if (v71) {
      goto LABEL_28;
    }
  }
  else
  {
    long long v73 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v74, (llvm::IRBuilderBase *)(a1 + 8));
    int v8 = *(_DWORD *)(a1 + 104);
    int v75 = v8;
    long long v9 = v79;
    long long v90 = v73;
    uint64_t v91 = v74;
    if (v74)
    {
      llvm::MetadataTracking::track();
      int v8 = v75;
    }
    int v92 = v8;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v90, a1 + 8);
    if (v91) {
      llvm::MetadataTracking::untrack();
    }
    uint64_t v10 = *(void *)a5;
    if ((*(_DWORD *)(*(void *)a5 + 8) & 0xFE) != 0x12 || **(void **)(v10 + 16) == *(void *)(a1 + 200))
    {
      long long v102 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v103, (llvm::IRBuilderBase *)(a1 + 8));
      int v104 = *(_DWORD *)(a1 + 104);
      Insertuint64_t Element = AGCLLVMGen5TargetLowerer::buildReduceCore((void *)a1, &v102, v9, *((uint64_t *)&v9 + 1), a5);
      if (v103) {
        llvm::MetadataTracking::untrack();
      }
    }
    else
    {
      uint64_t v11 = *(unsigned int *)(v10 + 32);
      llvm::FixedVectorType::get();
      Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
      int ScalarSizeInBits = llvm::Type::getScalarSizeInBits((llvm::Type *)v10);
      if (ScalarSizeInBits == 8)
      {
        uint64_t v14 = 200;
        if (v11 == 2) {
          uint64_t v14 = 192;
        }
        uint64_t v15 = *(void *)(a1 + v14);
        __int16 v68 = (llvm::Value *)llvm::FixedVectorType::get();
        if (v11 == 3) {
          a5 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, a5, 4);
        }
        long long v93 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v94, (llvm::IRBuilderBase *)(a1 + 8));
        int v95 = *(_DWORD *)(a1 + 104);
        __int16 v105 = 257;
        uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)a5, v15, (uint64_t)&v102);
        uint64_t v17 = AGCLLVMGen5TargetLowerer::buildReduceCore((void *)a1, &v93, v9, *((uint64_t *)&v9 + 1), Cast);
        if (v94) {
          llvm::MetadataTracking::untrack();
        }
        __int16 v105 = 257;
        uint64_t v18 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v17, (uint64_t)v68, (uint64_t)&v102);
        if (v11)
        {
          unsigned int v19 = (llvm::Value *)v18;
          for (uint64_t i = 0; i != v11; ++i)
          {
            __int16 v105 = 257;
            uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
            uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v19, v21, (const llvm::Twine *)&v102);
            __int16 v101 = 257;
            char v23 = (llvm::Value *)llvm::ConstantInt::get();
            Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, Element, v23, (const llvm::Twine *)v100);
          }
        }
      }
      else if (v11 == 3 || ScalarSizeInBits != 16)
      {
        if (v11 == 3 && ScalarSizeInBits == 16)
        {
          uint64_t v35 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, a5, 4);
          uint64_t v36 = *(void *)(a1 + 248);
          __int16 v105 = 257;
          uint64_t v37 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v35, v36, (uint64_t)&v102);
          __int16 v105 = 257;
          int v38 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v37, v38, (const llvm::Twine *)&v102);
          long long v97 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v98, (llvm::IRBuilderBase *)(a1 + 8));
          int v99 = *(_DWORD *)(a1 + 104);
          uint64_t v40 = AGCLLVMGen5TargetLowerer::buildReduceCore((void *)a1, &v97, v9, *((uint64_t *)&v9 + 1), v39);
          if (v98) {
            llvm::MetadataTracking::untrack();
          }
          __int16 v105 = 257;
          uint64_t v41 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t v42 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v37, v41, (const llvm::Twine *)&v102);
          uint64_t v43 = *(void *)(a1 + 240);
          __int16 v101 = 257;
          int v44 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v42, v43, (uint64_t)v100);
          __int16 v96 = 257;
          uint64_t v45 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t v46 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v44, v45, (const llvm::Twine *)&v93);
          long long v93 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(&v94, (llvm::IRBuilderBase *)(a1 + 8));
          int v95 = *(_DWORD *)(a1 + 104);
          char v47 = AGCLLVMGen5TargetLowerer::buildReduceCore((void *)a1, &v93, v9, *((uint64_t *)&v9 + 1), v46);
          if (v94) {
            llvm::MetadataTracking::untrack();
          }
          uint64_t v48 = *(void *)(a1 + 240);
          __int16 v105 = 257;
          uint64_t v49 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v40, v48, (uint64_t)&v102);
          __int16 v101 = 257;
          int v50 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t v51 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v49, v50, (const llvm::Twine *)v100);
          uint64_t v52 = *(void *)(a1 + 240);
          __int16 v105 = 257;
          unint64_t v53 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v40, v52, (uint64_t)&v102);
          __int16 v101 = 257;
          unint64_t v54 = (llvm::Value *)llvm::ConstantInt::get();
          __int16 v55 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v53, v54, (const llvm::Twine *)v100);
          __int16 v105 = 257;
          uint64_t v56 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v51, v56, (const llvm::Twine *)&v102);
          __int16 v105 = 257;
          unsigned int v58 = (llvm::Value *)llvm::ConstantInt::get();
          uint64_t v59 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v57, v55, v58, (const llvm::Twine *)&v102);
          __int16 v105 = 257;
          uint64_t v60 = (llvm::Value *)llvm::ConstantInt::get();
          Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v59, v47, v60, (const llvm::Twine *)&v102);
        }
      }
      else
      {
        uint64_t v25 = 248;
        if (v11 == 2) {
          uint64_t v25 = 200;
        }
        uint64_t v26 = *(void *)(a1 + v25);
        uint64_t v69 = (llvm::Value *)llvm::FixedVectorType::get();
        long long v93 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v94, (llvm::IRBuilderBase *)(a1 + 8));
        int v95 = *(_DWORD *)(a1 + 104);
        __int16 v105 = 257;
        uint64_t v27 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)a5, v26, (uint64_t)&v102);
        uint64_t v28 = AGCLLVMGen5TargetLowerer::buildReduceCore((void *)a1, &v93, v9, *((uint64_t *)&v9 + 1), v27);
        if (v94) {
          llvm::MetadataTracking::untrack();
        }
        __int16 v105 = 257;
        uint64_t v29 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v28, (uint64_t)v69, (uint64_t)&v102);
        if (v11)
        {
          __int16 v30 = (llvm::Value *)v29;
          for (uint64_t j = 0; j != v11; ++j)
          {
            __int16 v105 = 257;
            uint64_t v32 = (llvm::Value *)llvm::ConstantInt::get();
            uint64_t v33 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v30, v32, (const llvm::Twine *)&v102);
            __int16 v101 = 257;
            uint64_t v34 = (llvm::Value *)llvm::ConstantInt::get();
            Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v33, v34, (const llvm::Twine *)v100);
          }
        }
      }
    }
    if (v74) {
LABEL_28:
    }
      llvm::MetadataTracking::untrack();
  }
  return InsertElement;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildReduceCore(void *a1, long long *a2, uint64_t a3, uint64_t a4, llvm::Value *a5)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  long long v47 = *a2;
  uint64_t v48 = *((void *)a2 + 2);
  if (v48) {
    llvm::MetadataTracking::track();
  }
  int v49 = *((_DWORD *)a2 + 6);
  int v8 = (llvm::IRBuilderBase *)(a1 + 1);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v47, (uint64_t)(a1 + 1));
  if (v48) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v9 = *(void *)a5;
  uint64_t v10 = *(void *)a5;
  if ((*(_DWORD *)(*(void *)a5 + 8) & 0xFE) == 0x12) {
    uint64_t v10 = **(void **)(v9 + 16);
  }
  uint64_t v11 = llvm::StringRef::find();
  llvm::StringRef::find();
  uint64_t v40 = llvm::StringRef::find();
  uint64_t v39 = llvm::StringRef::find();
  uint64_t v36 = llvm::StringRef::find();
  BOOL v12 = llvm::StringRef::find() != -1 && (llvm::StringRef::find() != -1 || llvm::StringRef::find() != -1);
  std::string __p = 0;
  std::string::size_type v45 = 0;
  uint64_t v46 = 0;
  if (llvm::StringRef::find() == -1)
  {
    if (llvm::StringRef::find() == -1)
    {
      if (llvm::StringRef::find() == -1)
      {
        if (llvm::StringRef::find() == -1)
        {
          if (llvm::StringRef::find() == -1)
          {
            if (llvm::StringRef::find() == -1)
            {
              if (llvm::StringRef::find() == -1) {
                goto LABEL_27;
              }
              __int16 v13 = "Xor";
            }
            else
            {
              __int16 v13 = "Or";
            }
          }
          else
          {
            __int16 v13 = "And";
          }
        }
        else
        {
          __int16 v13 = "Min";
        }
      }
      else
      {
        __int16 v13 = "Max";
      }
    }
    else
    {
      __int16 v13 = "Add";
    }
  }
  else
  {
    __int16 v13 = "Mul";
  }
  MEMORY[0x1CB7A04E0](&__p, v13);
LABEL_27:
  uint64_t v14 = v10;
  if (*(unsigned char *)(v10 + 8) == 13) {
    uint64_t v14 = a1[25];
  }
  uint64_t v15 = 343;
  if (v11 == -1) {
    uint64_t v15 = 344;
  }
  std::string::basic_string[abi:nn180100]<0>(&v43, (char *)a1[v15]);
  if (v12)
  {
    int v16 = "u.";
  }
  else if (v14 == a1[21])
  {
    int v16 = "f.";
  }
  else if (v14 == a1[19])
  {
    int v16 = "f16.";
  }
  else
  {
    int v16 = "i.";
  }
  std::string::append(&v43, v16);
  if (v46 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v46 >= 0) {
    std::string::size_type v18 = HIBYTE(v46);
  }
  else {
    std::string::size_type v18 = v45;
  }
  std::string::append(&v43, p_p, v18);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v19 = &v43;
  }
  else {
    unsigned int v19 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v43.__r_.__value_.__l.__size_;
  }
  uint64_t v21 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)v19, size, v14, a1[24], v14);
  *(_OWORD *)unint64_t v54 = 0u;
  long long v55 = 0u;
  unsigned int v22 = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, a5, v54);
  int v38 = *(_DWORD *)(v9 + 8) & 0xFE;
  if (v38 == 18)
  {
    llvm::FixedVectorType::get();
    char v23 = (llvm::Value *)llvm::UndefValue::get();
  }
  else
  {
    char v23 = 0;
  }
  uint64_t v37 = llvm::ConstantInt::get();
  if (v22)
  {
    uint64_t v24 = 0;
    uint64_t v25 = v22;
    do
    {
      if (*(unsigned char *)(v10 + 8) == 13)
      {
        uint64_t v26 = v54[v24];
        uint64_t v27 = a1[25];
        __int16 v42 = 257;
        if (v36 == -1) {
          uint64_t v28 = 39;
        }
        else {
          uint64_t v28 = 40;
        }
        uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), v28, (uint64_t)v26, v27, (uint64_t)v41);
        v54[v24] = Cast;
      }
      else
      {
        uint64_t Cast = v54[v24];
      }
      v52[0] = v37;
      v52[1] = Cast;
      __int16 v42 = 257;
      uint64_t FMul = llvm::IRBuilderBase::CreateCall((uint64_t)v8, *(void *)(v21 + 24), v21, (uint64_t)v52, 2, (uint64_t)v41);
      if (*(unsigned char *)(v10 + 8) == 13)
      {
        __int16 v42 = 257;
        uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v8, 38, (uint64_t)FMul, v10, (uint64_t)v41);
      }
      if (v40 != -1)
      {
        if (*(unsigned __int8 *)(v10 + 8) > 6u)
        {
          __int16 v42 = 257;
          uint64_t v32 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v8, 38, (uint64_t)Cast, v10, (uint64_t)v41);
          __int16 v53 = 257;
          uint64_t Add = llvm::IRBuilderBase::CreateAdd(v8, FMul, v32, (const llvm::Twine *)v52);
        }
        else
        {
          __int16 v42 = 257;
          uint64_t Add = llvm::IRBuilderBase::CreateFAdd((uint64_t)v8, (uint64_t)FMul, (uint64_t)Cast, (uint64_t)v41);
        }
        uint64_t FMul = (llvm::Value *)Add;
      }
      if (v39 != -1)
      {
        uint64_t v33 = v54[v24];
        __int16 v42 = 257;
        uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)v8, (uint64_t)FMul, (uint64_t)v33, (uint64_t)v41);
      }
      if (v38 == 18)
      {
        __int16 v42 = 257;
        uint64_t v34 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t FMul = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v8, v23, FMul, v34, (const llvm::Twine *)v41);
      }
      ++v24;
      char v23 = FMul;
    }
    while (v25 != v24);
  }
  else
  {
    uint64_t FMul = v23;
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(__p);
  }
  return FMul;
}

llvm::APInt *llvm::APInt::APInt(llvm::APInt *this, unsigned int a2)
{
  *((_DWORD *)this + 2) = a2;
  if (a2 > 0x40) {
    llvm::APInt::initSlowCase(this);
  }
  else {
    *(void *)this = a2 != 0;
  }
  return this;
}

uint64_t AGCLLVMGen5TargetLowerer::buildShuffleAndFillEmulation(uint64_t a1, long long *a2, void *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  v77[1] = *MEMORY[0x1E4F143B8];
  long long v70 = *a2;
  uint64_t v71 = *((void *)a2 + 2);
  if (v71) {
    llvm::MetadataTracking::track();
  }
  int v72 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v70, a1 + 8);
  if (v71) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v9 = a3[1];
  uint64_t v10 = (llvm::CmpInst **)a3[2];
  uint64_t v11 = (llvm::Value *)a3[3];
  LOWORD(v74[0]) = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 35, v10, (uint64_t)v11, (uint64_t)v73);
  LOWORD(v74[0]) = 257;
  uint64_t v42 = v9;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  __int16 v13 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v74[0]) = 257;
  uint64_t Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v11, v13, (const llvm::Twine *)v73);
  LOWORD(v74[0]) = 257;
  uint64_t v15 = (llvm::Value *)v10;
  int v16 = Sub;
  uint64_t v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v15, Sub, (const llvm::Twine *)v73);
  v73[0] = &unk_1F25D9288;
  v73[1] = AGCLLVMGen3TargetLowerer::buildSimdShuffleUp;
  v73[2] = 0;
  v73[3] = v73;
  v74[0] = &unk_1F25D9288;
  v74[1] = AGCLLVMGen3TargetLowerer::buildSimdShuffleDown;
  v74[2] = 0;
  v74[3] = v74;
  v75[0] = &unk_1F25D92D0;
  v75[1] = AGCLLVMGen3TargetLowerer::buildQuadShuffleUp;
  v75[2] = 0;
  v75[3] = v75;
  v76[0] = &unk_1F25D92D0;
  v76[1] = AGCLLVMGen3TargetLowerer::buildQuadShuffleDown;
  v76[2] = 0;
  v77[0] = v76;
  __int16 v69 = 257;
  int v44 = v17;
  uint64_t v18 = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v11, v17, (const llvm::Twine *)v68);
  long long v65 = *a2;
  uint64_t v66 = *((void *)a2 + 2);
  if (v66) {
    llvm::MetadataTracking::track();
  }
  int v67 = *((_DWORD *)a2 + 6);
  std::string v43 = (llvm::Constant **)std::function<llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::operator()(v73[8 * (unint64_t)a6 + 3 + 4 * a5], a1, (uint64_t)&v65, Select, (uint64_t)v44);
  if (v66) {
    llvm::MetadataTracking::untrack();
  }
  long long v62 = *a2;
  uint64_t v63 = *((void *)a2 + 2);
  unsigned int v19 = v16;
  if (v63) {
    llvm::MetadataTracking::track();
  }
  int v64 = *((_DWORD *)a2 + 6);
  std::function<llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::operator()(v73[8 * (unint64_t)a6 + 3 + 4 * (a5 ^ 1)], a1, (uint64_t)&v62, v42, v18);
  if (v63) {
    llvm::MetadataTracking::untrack();
  }
  if (a6)
  {
    long long v59 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v60, (llvm::IRBuilderBase *)(a1 + 8));
    int v61 = *(_DWORD *)(a1 + 104);
    BOOL v20 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildQuadElement(a1, (uint64_t)&v59, *(void *)(a1 + 192));
    if (!v60) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  long long v56 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v57, (llvm::IRBuilderBase *)(a1 + 8));
  int v58 = *(_DWORD *)(a1 + 104);
  BOOL v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, void))(*(void *)a1 + 1536))(a1, &v56, *(void *)(a1 + 192));
  if (v57) {
LABEL_15:
  }
    llvm::MetadataTracking::untrack();
LABEL_16:
  __int16 v69 = 257;
  uint64_t v21 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v20, v16, (const llvm::Twine *)v68);
  __int16 v69 = 257;
  if (a5) {
    uint64_t Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v21, v44, (const llvm::Twine *)v68);
  }
  else {
    uint64_t Add = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v21, v44, (const llvm::Twine *)v68);
  }
  char v23 = (llvm::Value *)Add;
  __int16 v69 = 257;
  Not = (llvm::Value *)llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)(a1 + 8), v19, (const llvm::Twine *)v68);
  __int16 v69 = 257;
  uint64_t v25 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v23, Not, (const llvm::Twine *)v68);
  uint64_t v26 = llvm::ConstantInt::get();
  __int16 v55 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 33, v25, v26, (uint64_t)v54);
  __int16 v69 = 257;
  uint64_t v27 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v20, Not, (const llvm::Twine *)v68);
  __int16 v55 = 257;
  uint64_t v28 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v23, v19, (const llvm::Twine *)v54);
  __int16 v53 = 257;
  uint64_t v29 = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v27, v28, (const llvm::Twine *)v52);
  long long v49 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v50, (llvm::IRBuilderBase *)(a1 + 8));
  int v51 = *(_DWORD *)(a1 + 104);
  ActiveThreadsMasuint64_t k = (llvm::Value *)AGCLLVMGen5TargetLowerer::buildGetActiveThreadsMask(a1, &v49, a6);
  if (v50) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v31 = *(void *)ActiveThreadsMask;
  __int16 v69 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v29, v31, (uint64_t)v68);
  __int16 v55 = 257;
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), ActiveThreadsMask, Cast, (const llvm::Twine *)v54);
  uint64_t v34 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v53 = 257;
  uint64_t v35 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), LShr, v34, (const llvm::Twine *)v52);
  uint64_t v36 = *(void *)(a1 + 176);
  __int16 v48 = 257;
  llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v35, v36, (uint64_t)v47);
  __int16 v69 = 257;
  llvm::IRBuilderBase::CreateSelect();
  llvm::Constant::getNullValue(*v43, v37);
  __int16 v55 = 257;
  uint64_t v38 = llvm::IRBuilderBase::CreateSelect();
  for (uint64_t i = 0; i != -16; i -= 4)
  {
    uint64_t v40 = (void *)v77[i];
    if (&v76[i] == v40)
    {
      (*(void (**)(void *))(v76[i] + 32))(&v76[i]);
    }
    else if (v40)
    {
      (*(void (**)(void *))(*v40 + 40))(v40);
    }
  }
  return v38;
}

uint64_t std::function<llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, a2, a3, &v8, &v7);
  }
  uint64_t v6 = ((uint64_t (*)(void, uint64_t))std::__throw_bad_function_call[abi:nn180100])(0, a2);
  return AGCLLVMGen3TargetLowerer::buildQuadShuffleDown(v6);
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadShuffleDown(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1568))();
}

uint64_t std::__function::__func<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::operator()(uint64_t a1, uint64_t a2, long long *a3, void *a4, void *a5)
{
  uint64_t v9 = *(uint64_t (**)(void *, long long *, void, void))(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = (void *)(a2 + (v8 >> 1));
  if (v8) {
    uint64_t v9 = *(uint64_t (**)(void *, long long *, void, void))(*v10 + v9);
  }
  long long v14 = *a3;
  uint64_t v11 = a3 + 1;
  uint64_t v15 = *((void *)a3 + 2);
  if (v15)
  {
    llvm::MetadataTracking::retrack();
    *uint64_t v11 = 0;
  }
  int v16 = *((_DWORD *)a3 + 6);
  uint64_t v12 = v9(v10, &v14, *a4, *a5);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  return v12;
}

__n128 std::__function::__func<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25D92D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25D92D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::~__func()
{
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadShuffleUp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1560))();
}

uint64_t AGCLLVMGen3TargetLowerer::buildSimdShuffleDown(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1584))();
}

uint64_t std::__function::__func<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer&,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::operator()(uint64_t a1, uint64_t a2, long long *a3, void *a4, void *a5)
{
  uint64_t v9 = *(uint64_t (**)(void *, long long *, void, void))(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = (void *)(a2 + (v8 >> 1));
  if (v8) {
    uint64_t v9 = *(uint64_t (**)(void *, long long *, void, void))(*v10 + v9);
  }
  long long v14 = *a3;
  uint64_t v11 = a3 + 1;
  uint64_t v15 = *((void *)a3 + 2);
  if (v15)
  {
    llvm::MetadataTracking::retrack();
    *uint64_t v11 = 0;
  }
  int v16 = *((_DWORD *)a3 + 6);
  uint64_t v12 = v9(v10, &v14, *a4, *a5);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  return v12;
}

__n128 std::__function::__func<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer&,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25D9288;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer&,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25D9288;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer&,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::~__func()
{
}

uint64_t AGCLLVMGen3TargetLowerer::buildSimdShuffleUp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1576))();
}

uint64_t *AGCLLVMGen6TargetConfig::initializeAirBuiltinsMap(AGCLLVMGen6TargetConfig *this, AGCLLVMAirBuiltinsMap *a2)
{
  AGCLLVMGen5TargetConfig::initializeAirBuiltinsMap(this, a2);
  __n128 result = llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "yield_simdgroup", 0xFuLL);
  uint64_t v4 = *result;
  *(_DWORD *)(v4 + 8) = 1;
  *(void *)(v4 + 16) = AGCLLVMAirBuiltins::buildSimdYield;
  *(void *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 3;
  *(_WORD *)(v4 + 36) = 0;
  return result;
}

void AGCLLVMGen6TargetConfig::createMetalIntersectionShader()
{
}

void AGCLLVMObjectArray::addNewMainObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 176) = a2;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v5 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v6 = a2;
  llvm::SmallVectorImpl<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>>::emplace_back<AGCLLVMObjectBase*&,std::string>(a1 + 32, &v6, (__n128 *)__p);
  if (SHIBYTE(v5) < 0)
  {
    uint64_t v3 = __p[0];
    operator delete(v3);
  }
}

__n128 llvm::SmallVectorImpl<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>>::emplace_back<AGCLLVMObjectBase*&,std::string>(uint64_t a1, void *a2, __n128 *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorTemplateBase<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>,false>::growAndEmplaceBack<AGCLLVMObjectBase*&,std::string>();
  }
  uint64_t v4 = *(void *)a1 + 32 * v3;
  *(void *)uint64_t v4 = *a2;
  __n128 result = *a3;
  *(void *)(v4 + 24) = a3[1].n128_u64[0];
  *(__n128 *)(v4 + 8) = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void llvm::SmallVectorTemplateBase<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>,false>::growAndEmplaceBack<AGCLLVMObjectBase*&,std::string>()
{
}

void AGCLLVMUserIntersectionShaderArray<RaytracingConstantsGen1>::~AGCLLVMUserIntersectionShaderArray(AGCLLVMObjectArray *a1)
{
  AGCLLVMObjectArray::~AGCLLVMObjectArray(a1);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMGen6TargetConfig::createMetalMeshShaderAnalysis()
{
}

void AGCLLVMGen6TargetConfig::createMetalMeshShader()
{
}

void AGCLLVMUserShaderWithIntersectionShadersArray::~AGCLLVMUserShaderWithIntersectionShadersArray(AGCLLVMUserShaderWithIntersectionShadersArray *this)
{
  AGCLLVMObjectArray::~AGCLLVMObjectArray(this);
  JUMPOUT(0x1CB7A0780);
}

void AGCLLVMGen6TargetConfig::createPassThroughObjectShader(AGCLLVMGen6TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  operator new();
}

void AGCLLVMGen6TargetConfig::createMetalObjectShader()
{
}

void AGCLLVMGen6TargetConfig::createMetalTileShader()
{
}

void AGCLLVMGen6TargetConfig::createMetalComputeShader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMemCpy2DConditionalLoadStoreExpansion(uint64_t a1, unsigned int *a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(long long **)a2;
  uint64_t v5 = *(void *)(*(void *)a2 + 64);
  uint64_t v6 = *(unsigned __int8 **)(*(void *)a2 + 80);
  std::string::size_type v67 = *(void *)(*(void *)a2 + 16);
  int v7 = *(_DWORD *)(*(void *)v67 + 8);
  if ((v7 & 0xFE) == 0x12) {
    int v7 = *(_DWORD *)(**(void **)(*(void *)v67 + 16) + 8);
  }
  long long v68 = *v4;
  uint64_t v8 = (llvm::Value *)*((void *)v4 + 9);
  uint64_t v9 = *((void *)v4 + 11);
  uint64_t v10 = (llvm::Value *)*((void *)v4 + 5);
  uint64_t v65 = *((void *)v4 + 3);
  uint64_t v66 = *((void *)v4 + 6);
  int v64 = (llvm::Value *)*((void *)v4 + 7);
  if (*(unsigned char *)(v5 + 16) != 16) {
    goto LABEL_11;
  }
  uint64_t v11 = *((void *)v4 + 4);
  uint64_t v12 = (llvm::APInt *)(v5 + 24);
  unsigned int v13 = *(_DWORD *)(v5 + 32);
  if (v13 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v12) != v13 - 1)
    {
LABEL_11:
      int v69 = 0;
      goto LABEL_12;
    }
  }
  else if (*(void *)v12 != 1)
  {
    goto LABEL_11;
  }
  if (*(unsigned char *)(v11 + 16) != 16) {
    goto LABEL_11;
  }
  long long v14 = (llvm::APInt *)(v11 + 24);
  unsigned int v15 = *(_DWORD *)(v11 + 32);
  if (v15 > 0x40) {
    BOOL v16 = llvm::APInt::countLeadingZerosSlowCase(v14) == v15 - 1;
  }
  else {
    BOOL v16 = *(void *)v14 == 1;
  }
  int v63 = v16;
  int v69 = v63;
LABEL_12:
  if (v6[16] > 0x14u)
  {
LABEL_18:
    int v21 = 0;
    goto LABEL_19;
  }
  __int16 v72 = 257;
  uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v6, v17, (const llvm::Twine *)&v71);
  if (*(unsigned char *)(Element + 16) == 16) {
    uint64_t v19 = Element;
  }
  else {
    uint64_t v19 = 0;
  }
  unsigned int v20 = *(_DWORD *)(v19 + 32);
  if (v20 > 0x40)
  {
    if (**(void **)(v19 + 24)) {
      goto LABEL_18;
    }
  }
  else if ((uint64_t)(*(void *)(v19 + 24) << -(char)v20) >> -(char)v20)
  {
    goto LABEL_18;
  }
  __int16 v72 = 257;
  uint64_t v36 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v37 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v6, v36, (const llvm::Twine *)&v71);
  if (*(unsigned char *)(v37 + 16) == 16) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 0;
  }
  unsigned int v39 = *(_DWORD *)(v38 + 32);
  if (v39 > 0x40) {
    uint64_t v40 = **(void **)(v38 + 24);
  }
  else {
    uint64_t v40 = (uint64_t)(*(void *)(v38 + 24) << -(char)v39) >> -(char)v39;
  }
  if (v40) {
    BOOL v62 = 0;
  }
  else {
    BOOL v62 = v10 == v8;
  }
  int v21 = v62;
LABEL_19:
  unsigned int v22 = v7 & 0xFFFFFF00;
  __int16 v72 = 257;
  char v23 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v24 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v10, v23, (const llvm::Twine *)&v71);
  __int16 v72 = 257;
  uint64_t v25 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v8, v25, (const llvm::Twine *)&v71);
  __int16 v72 = 257;
  uint64_t v27 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v28 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v8, v27, (const llvm::Twine *)&v71);
  int v29 = 0;
  if (v21)
  {
    if (v24 == v65 && v26 == v64) {
      int v29 = v69;
    }
    else {
      int v29 = 0;
    }
  }
  std::string::basic_string[abi:nn180100]<0>(&v71, *(char **)(a1 + 2544));
  if (v22 == 768) {
    uint64_t v31 = ".read";
  }
  else {
    uint64_t v31 = ".write";
  }
  uint64_t v32 = std::string::append(&v71, v31);
  std::string::size_type v33 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(v9 + 16) == 16)
  {
    uint64_t v34 = (llvm::APInt *)(v9 + 24);
    unsigned int v35 = *(_DWORD *)(v9 + 32);
    if (v35 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v34) != v35 - 1) {
        goto LABEL_43;
      }
    }
    else if (*(void *)v34 != 1)
    {
      goto LABEL_43;
    }
    std::string::append(&v70, ".edgeclamped");
  }
LABEL_43:
  if (v29)
  {
    __int16 v72 = 257;
    uint64_t Mul = llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v26, v28, (const llvm::Twine *)&v71);
    *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v68;
    __src.__r_.__value_.__r.__words[2] = v67;
    uint64_t v74 = v66;
    uint64_t v75 = Mul;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71.__r_.__value_.__r.__words[2];
    v71.__r_.__value_.__l.__size_ = 0x500000000;
    llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v71, &__src, &v76);
    uint64_t v42 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a1 + 1848))(a1, &v71);
    std::string v43 = (void *)v71.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v71.__r_.__value_.__l.__data_ == &v71.__r_.__value_.__r.__words[2]) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  if (v69)
  {
    std::string::append(&v70, ".noholes");
  }
  else
  {
    std::string::size_type v45 = (void *)(v68 + 24);
    if (*(_DWORD *)(v68 + 32) >= 0x41u) {
      std::string::size_type v45 = (void *)*v45;
    }
    int v46 = *(_DWORD *)v45;
    long long v47 = (void *)(*((void *)&v68 + 1) + 24);
    if (*(_DWORD *)(*((void *)&v68 + 1) + 32) >= 0x41u) {
      long long v47 = (void *)*v47;
    }
    int v48 = *(_DWORD *)v47;
    if (v48 > 4 && v46 == v48) {
      int v50 = v48 >> 2;
    }
    else {
      int v50 = v46 / v48;
    }
    std::to_string(&__src, v50);
    int v51 = std::string::insert(&__src, 0, ".withholes.v");
    std::string::size_type v52 = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v53 = &v71;
    }
    else {
      __int16 v53 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v71.__r_.__value_.__l.__size_;
    }
    std::string::append(&v70, (const std::string::value_type *)v53, size);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__src.__r_.__value_.__l.__data_);
    }
  }
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71.__r_.__value_.__r.__words[2];
  v71.__r_.__value_.__l.__size_ = 0xC00000000;
  uint64_t v55 = a2[2];
  if (v55)
  {
    long long v56 = *(uint64_t ***)a2;
    uint64_t v57 = 8 * v55;
    do
    {
      int v58 = *v56++;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v71, *v58);
      v57 -= 8;
    }
    while (v57);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v59 = *(void *)a2;
  uint64_t v60 = a2[2];
  LOWORD(v75) = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v61 + 24), v61, v59, v60, (uint64_t)&__src);
  uint64_t v42 = *(void *)(a1 + 2576);
  std::string v43 = (void *)v71.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v71.__r_.__value_.__l.__data_ != &v71.__r_.__value_.__r.__words[2]) {
LABEL_45:
  }
    free(v43);
LABEL_46:
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  return v42;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getFreeSpaceInRayCore()
{
  return 0;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::programTypeSpecialRegisterValueForShaderType(uint64_t a1, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
      uint64_t result = 2;
      break;
    case 1:
      uint64_t result = 4;
      break;
    case 2:
      uint64_t result = 5;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
      return result;
    case 7:
      uint64_t result = 3;
      break;
    case 9:
      uint64_t result = 1;
      break;
    default:
      if ((a2 - 29) >= 2) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = 6;
      }
      break;
  }
  return result;
}

std::string *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getImageBlockWriteIntrinsicFromDimension@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, void *a4@<X8>)
{
  *a3 = 0;
  uint64_t result = (std::string *)std::string::basic_string[abi:nn180100]<0>(a4, *(char **)(a1 + 1920));
  switch(a2)
  {
    case 0:
      int v7 = ".coords.1d";
      goto LABEL_10;
    case 1:
      int v7 = ".coords.1d.array";
      goto LABEL_10;
    case 2:
      int v7 = ".coords.2d";
      goto LABEL_10;
    case 3:
      uint64_t v8 = ".coords.2d.array";
      goto LABEL_14;
    case 4:
      int v7 = ".coords.2d.msaa";
      goto LABEL_10;
    case 5:
      uint64_t result = std::string::append(result, ".coords.3d");
      int v9 = 2;
      goto LABEL_15;
    case 6:
      int v7 = ".coords.cubestf";
      goto LABEL_10;
    case 7:
      int v7 = ".coords.cubestf.array";
LABEL_10:
      uint64_t result = std::string::append(result, v7);
      break;
    case 8:
      uint64_t v8 = ".coords.2d.msaa.array";
LABEL_14:
      uint64_t result = std::string::append(result, v8);
      int v9 = 1;
LABEL_15:
      *a3 = v9;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdShuffleDown(uint64_t a1, long long *a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v19 = *a2;
  uint64_t v20 = *((void *)a2 + 2);
  if (v20) {
    llvm::MetadataTracking::track();
  }
  int v21 = *((_DWORD *)a2 + 6);
  uint64_t v8 = AGCLLVMGen5TargetLowerer::buildSimdShuffleDown((char **)a1, (uint64_t)&v19, a3, a4);
  if (v20) {
    llvm::MetadataTracking::untrack();
  }
  if (*(unsigned char *)(a1 + 1792))
  {
    int v9 = (uint64_t *)(a1 + 8);
    uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
    long long v16 = *a2;
    uint64_t v17 = *((void *)a2 + 2);
    if (v17) {
      llvm::MetadataTracking::track();
    }
    int v18 = *((_DWORD *)a2 + 6);
    uint64_t v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, void))(*(void *)a1 + 1536))(a1, &v16, *(void *)(a1 + 192));
    __int16 v15 = 257;
    uint64_t Sub = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v10, v11, (const llvm::Twine *)v14);
    if (v17) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v15 = 257;
    llvm::IRBuilderBase::CreateICmp(v9, 40, Sub, (uint64_t)a4, (uint64_t)v14);
    __int16 v15 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return v8;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdShuffleUp(uint64_t a1, long long *a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v16 = *a2;
  uint64_t v17 = *((void *)a2 + 2);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *((_DWORD *)a2 + 6);
  uint64_t v8 = AGCLLVMGen5TargetLowerer::buildSimdShuffleUp((char **)a1, (uint64_t)&v16, a3, a4);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  if (*(unsigned char *)(a1 + 1792))
  {
    long long v13 = *a2;
    uint64_t v14 = *((void *)a2 + 2);
    if (v14) {
      llvm::MetadataTracking::track();
    }
    int v15 = *((_DWORD *)a2 + 6);
    int v9 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t, long long *, void))(*(void *)a1 + 1536))(a1, &v13, *(void *)(a1 + 192));
    if (v14) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v12 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 40, v9, (uint64_t)a4, (uint64_t)v11);
    __int16 v12 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return v8;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildQuadShuffleDown(uint64_t a1, long long *a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v19 = *a2;
  uint64_t v20 = *((void *)a2 + 2);
  if (v20) {
    llvm::MetadataTracking::track();
  }
  int v21 = *((_DWORD *)a2 + 6);
  uint64_t v8 = AGCLLVMGen3TargetLowerer::buildQuadShuffleDown((char **)a1, (uint64_t)&v19, a3, a4);
  if (v20) {
    llvm::MetadataTracking::untrack();
  }
  if (*(unsigned char *)(a1 + 1792))
  {
    int v9 = (uint64_t *)(a1 + 8);
    uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
    long long v16 = *a2;
    uint64_t v17 = *((void *)a2 + 2);
    if (v17) {
      llvm::MetadataTracking::track();
    }
    int v18 = *((_DWORD *)a2 + 6);
    uint64_t v11 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildQuadElement(a1, (uint64_t)&v16, *(void *)(a1 + 192));
    __int16 v15 = 257;
    uint64_t Sub = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v10, v11, (const llvm::Twine *)v14);
    if (v17) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v15 = 257;
    llvm::IRBuilderBase::CreateICmp(v9, 40, Sub, (uint64_t)a4, (uint64_t)v14);
    __int16 v15 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return v8;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildQuadShuffleUp(uint64_t a1, long long *a2, llvm::Type **a3, llvm::Value *a4)
{
  long long v16 = *a2;
  uint64_t v17 = *((void *)a2 + 2);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *((_DWORD *)a2 + 6);
  uint64_t v8 = AGCLLVMGen3TargetLowerer::buildQuadShuffleUp((char **)a1, (uint64_t)&v16, a3, a4);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  if (*(unsigned char *)(a1 + 1792))
  {
    long long v13 = *a2;
    uint64_t v14 = *((void *)a2 + 2);
    if (v14) {
      llvm::MetadataTracking::track();
    }
    int v15 = *((_DWORD *)a2 + 6);
    int v9 = (llvm::CmpInst **)AGCLLVMGen3TargetLowerer::buildQuadElement(a1, (uint64_t)&v13, *(void *)(a1 + 192));
    if (v14) {
      llvm::MetadataTracking::untrack();
    }
    __int16 v12 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 40, v9, (uint64_t)a4, (uint64_t)v11);
    __int16 v12 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return v8;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMemoryCacheCtlFromCoherenceScope()
{
  return llvm::ConstantInt::get();
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildWriteImageBlockIntrinsic(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4, int a5)
{
  v50[16] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&v45, *(char **)(a1 + 1920));
  if (a5) {
    std::string::append(&v45, ".subset");
  }
  std::string::append(&v45, ".coords");
  v49[0] = v50;
  v49[1] = (void *)0x1000000000;
  int v46 = v48;
  uint64_t v47 = 0x1000000000;
  if (*(unsigned char *)(a1 + 1815) && *(unsigned char *)(a2 + 26))
  {
    uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v44 = 257;
    a3 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), a3, v10, (const llvm::Twine *)v43);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(void *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, (uint64_t)a3);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(void *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, a4);
  uint64_t v11 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, v11);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = llvm::PointerType::get();
  __int16 v44 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v12, v13, (uint64_t)v43);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, Cast);
  uint64_t v15 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, v15);
  uint64_t v16 = *(void *)(a2 + 32);
  if (!v16)
  {
    uint64_t v17 = llvm::ConstantInt::get();
    __int16 v44 = 257;
    uint64_t v16 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v17, v15, (uint64_t)v43);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, v16);
  switch(*(_DWORD *)(a2 + 4))
  {
    case 0:
      std::string::append(&v45, ".1d");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(void *)(a1 + 200));
      int v18 = *(llvm::Type ***)(a2 + 136);
      long long v19 = *(llvm::Type **)(a1 + 200);
      goto LABEL_14;
    case 1:
      uint64_t v20 = ".2d";
      goto LABEL_12;
    case 2:
      uint64_t v20 = ".cubestf";
LABEL_12:
      std::string::append(&v45, v20);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(void *)(a1 + 248));
      int v18 = *(llvm::Type ***)(a2 + 136);
      long long v19 = *(llvm::Type **)(a1 + 248);
      goto LABEL_14;
    case 3:
      std::string::append(&v45, ".3d");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(void *)(a1 + 312));
      int v18 = *(llvm::Type ***)(a2 + 136);
      long long v19 = *(llvm::Type **)(a1 + 312);
LABEL_14:
      __int16 v44 = 257;
      ZExtOrBituint64_t Cast = llvm::IRBuilderBase::CreateZExtOrBitCast((llvm::IRBuilderBase *)(a1 + 8), v18, v19, (const llvm::Twine *)v43);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, (uint64_t)ZExtOrBitCast);
      break;
    default:
      break;
  }
  if (*(void *)(a2 + 152))
  {
    std::string::append(&v45, ".array");
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(void *)(a1 + 192));
    uint64_t v22 = *(void *)(a2 + 152);
    uint64_t v23 = *(void *)(a1 + 192);
    __int16 v44 = 257;
    uint64_t v24 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v22, v23, (uint64_t)v43);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, v24);
  }
  if (*(void *)(a2 + 232))
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(void *)(a1 + 192));
    uint64_t v25 = *(void *)(a2 + 232);
    uint64_t v26 = *(void *)(a1 + 192);
    __int16 v44 = 257;
    uint64_t v27 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v43);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, v27);
  }
  if (*(void *)(a2 + 168))
  {
    std::string::append(&v45, ".lod");
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(void *)(a1 + 192));
    uint64_t v28 = *(void *)(a2 + 168);
    uint64_t v29 = *(void *)(a1 + 192);
    __int16 v44 = 257;
    uint64_t v30 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v28, v29, (uint64_t)v43);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, v30);
  }
  if (a5)
  {
    uint64_t v31 = **(void **)(a2 + 120);
    if ((*(_DWORD *)(v31 + 8) & 0xFE) == 0x12)
    {
      unsigned int v32 = *(_DWORD *)(v31 + 32);
      if (!v32) {
        goto LABEL_28;
      }
    }
    else
    {
      unsigned int v32 = 1;
    }
    uint64_t v33 = 0;
    uint64_t v34 = v32;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(void *)(a1 + 192));
      unsigned int v35 = *(llvm::Value **)(a2 + 120);
      __int16 v44 = 257;
      uint64_t v36 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v35, v36, (const llvm::Twine *)v43);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, Element);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(void *)(a1 + 192));
      uint64_t v38 = *(llvm::Value **)(a2 + 128);
      __int16 v44 = 257;
      unsigned int v39 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v40 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v38, v39, (const llvm::Twine *)v43);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, v40);
      ++v33;
    }
    while (v34 != v33);
  }
LABEL_28:
  if (*(_DWORD *)(a2 + 16) == 1) {
    std::string::append(&v45, ".rtz");
  }
  llvm::FunctionType::get();
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v41 = &v45;
LABEL_33:
    strlen((const char *)v41);
    goto LABEL_34;
  }
  uint64_t v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if (v45.__r_.__value_.__r.__words[0]) {
    goto LABEL_33;
  }
LABEL_34:
  llvm::Module::getOrInsertFunction();
  __int16 v44 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v42 + 24), v42, (uint64_t)v46, v47, (uint64_t)v43);
  if (v46 != v48) {
    free(v46);
  }
  if (v49[0] != v50) {
    free(v49[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::IntersectionQueryAnalysisGen6::intersectionQueryResidencyForQueryAtInstruction(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2 = a1[2];
  if (!*(void *)&v2) {
    goto LABEL_17;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*(void *)&a1[1] + 8 * v7);
  if (!v8) {
    goto LABEL_17;
  }
  int v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_17;
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v5 == v10) {
      break;
    }
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v2) {
        v10 %= *(void *)&v2;
      }
    }
    else
    {
      v10 &= *(void *)&v2 - 1;
    }
    if (v10 != v7) {
      goto LABEL_17;
    }
LABEL_16:
    int v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_17;
    }
  }
  if (v9[2] != a2) {
    goto LABEL_16;
  }
  a2 = v9[3];
LABEL_17:
  if (*(void *)&a1[10] != 1) {
    return 2;
  }
  uint64_t v11 = (void *)a1[9];
  if (!v11) {
    return 2;
  }
  while (2)
  {
    unint64_t v12 = v11[4];
    if (a2 < v12)
    {
LABEL_22:
      uint64_t v11 = (void *)*v11;
      if (!v11) {
        return 2;
      }
      continue;
    }
    break;
  }
  if (v12 < a2)
  {
    ++v11;
    goto LABEL_22;
  }
  if (a1[6].i8[3] || a1[6].i8[0] || a1[6].i8[4]) {
    return 2;
  }
  return 0;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPayloadVariant(uint64_t a1, int a2)
{
  if ((~a2 & 0x44) != 0) {
    unsigned int v2 = 3;
  }
  else {
    unsigned int v2 = 4;
  }
  unsigned int v3 = a2 & 1;
  if ((a2 & 0x40) != 0) {
    unsigned int v3 = 2;
  }
  if ((a2 & 4) != 0) {
    return v2;
  }
  else {
    return v3;
  }
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::replacePayloadSupportFunctions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = llvm::Module::getFunction();
  if (result)
  {
    unint64_t v7 = (llvm::Function *)result;
    uint64_t v8 = *(void *)(result + 8);
    if (v8)
    {
      do
      {
        uint64_t v9 = *(void *)(v8 + 8);
        unint64_t v10 = *(llvm::Instruction **)(v8 + 24);
        llvm::ConstantInt::get();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v10);
        uint64_t v8 = v9;
      }
      while (v9);
    }
    llvm::Function::eraseFromParent(v7);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1368);
    return v11(a1, a2, a3);
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::computeDriverPayloadSize(unsigned __int8 *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unsigned int v4 = a4;
  unsigned int v6 = a2;
  unint64_t v8 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)a1 + 1880))(a1, a2, a4);
  uint64_t v9 = 0;
  int v10 = a1[1810];
  for (int i = 2; i != 22; ++i)
  {
    if (RaytracingConstantsGen1::payloadHasSegment(i, v6, v4, v10 != 0))
    {
      uint64_t v12 = RaytracingConstantsGen1::payloadSegmentSize(i, a1[2800]);
      if ((i - 13) <= 6)
      {
        unint64_t v13 = 0x2010101010101uLL >> (8 * (i - 13));
        if (a3 >= (v13 & 3)) {
          unint64_t v14 = (a3 - (v13 & 3)) / ((((v13 & 3) << 8) | ((v13 & 3) << 16)) >> 16) + 1;
        }
        else {
          unint64_t v14 = 0;
        }
        v12 *= v14;
      }
      if (v12 - 1 >= v8) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = v12;
      }
      if (v12 - 1 >= v8) {
        uint64_t v16 = v12;
      }
      else {
        uint64_t v16 = 0;
      }
      v8 -= v15;
      v9 += v16;
    }
  }
  return v9;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  v16[20] = *MEMORY[0x1E4F143B8];
  unint64_t v14 = v16;
  uint64_t v15 = 0x1400000000;
  if (a6)
  {
    if (a6 >= 0x15) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(v14, 8 * a6);
    uint64_t v9 = 0;
    LODWORD(v15) = a6;
    do
    {
      *((void *)v14 + v9) = **(void **)(a5 + 8 * v9);
      ++v9;
    }
    while (a6 != v9);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  unsigned char v13[16] = 257;
  uint64_t v11 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v10 + 24), v10, a5, a6, (uint64_t)v13);
  if (v14 != v16) {
    free(v14);
  }
  return v11;
}

uint64_t RaytracingConstantsGen1::payloadHasSegment(int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 8:
    case 9:
      BOOL v6 = a2 - 5 >= 3;
      goto LABEL_5;
    case 10:
      BOOL v7 = a2 >= 8;
      unsigned int v8 = 222;
      goto LABEL_10;
    case 11:
      return a4;
    case 12:
      return a4 ^ 1;
    case 13:
    case 16:
      BOOL v7 = a2 >= 8;
      unsigned int v8 = 198;
LABEL_10:
      unsigned int v9 = (v8 >> a2) & 1;
      if (v7) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = v9;
      }
      break;
    case 14:
    case 15:
    case 17:
    case 18:
      BOOL v6 = a2 - 3 >= 2;
LABEL_5:
      uint64_t result = !v6;
      break;
    case 20:
    case 22:
      uint64_t result = 0;
      break;
    case 21:
      if (a2 - 8 < 0xFFFFFFFD) {
        uint64_t result = a3;
      }
      else {
        uint64_t result = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t RaytracingConstantsGen1::payloadSegmentSize(int a1, unsigned int a2)
{
  switch(a1)
  {
    case 1:
      uint64_t result = 512;
      break;
    case 2:
    case 3:
    case 4:
    case 10:
      uint64_t result = 8;
      break;
    case 5:
    case 6:
    case 8:
    case 21:
      uint64_t result = 4;
      break;
    case 7:
    case 13:
    case 14:
    case 16:
    case 17:
      uint64_t result = 6;
      break;
    case 9:
      uint64_t result = 20 * a2;
      break;
    case 11:
    case 12:
      uint64_t result = 12;
      break;
    case 15:
    case 18:
      uint64_t result = 100;
      break;
    case 19:
      uint64_t result = 64;
      break;
    case 20:
    case 22:
      uint64_t result = 0;
      break;
    default:
      uint64_t result = 32;
      break;
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getRaytracingShaderType(uint64_t a1, int a2, int a3)
{
  uint64_t result = 3;
  switch(a2)
  {
    case 7:
      uint64_t result = 7;
      break;
    case 9:
      BOOL v4 = a3 == 0;
      goto LABEL_6;
    case 10:
      BOOL v4 = (a3 & 0xFFFFFFFD) == 0;
LABEL_6:
      uint64_t result = !v4;
      break;
    case 11:
      return result;
    case 12:
      uint64_t result = 6;
      break;
    case 13:
      uint64_t result = 5;
      break;
    default:
      uint64_t result = 4;
      break;
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSCSDoneRayTraceSCSFlagSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v20 = *(_OWORD *)a2;
  uint64_t v21 = *(void *)(a2 + 16);
  if (v21) {
    llvm::MetadataTracking::track();
  }
  int v22 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v20);
  if (v21) {
    llvm::MetadataTracking::untrack();
  }
  BOOL v6 = *(llvm::Type ***)(a3 + 16);
  BOOL v7 = (llvm::Type *)llvm::PointerType::get();
  __int16 v19 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v6, v7, (const llvm::Twine *)v18);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 952))(a1);
  uint64_t v10 = *(void *)(a1 + 200);
  v18[0] = "vrid";
  __int16 v19 = 259;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v9, v10, (uint64_t)v18);
  PerVridSetDataPtr = (llvm::Value *)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(a1, Cast, PointerCast);
  unint64_t v13 = (llvm::Type **)llvm::ConstantInt::get();
  unint64_t v14 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(void))(**(void **)(a1 + 824) + 952))();
  uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v19 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v14, PerVridSetDataPtr, v15, (const llvm::Twine *)v18);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v13, GEP, 0);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  unint64_t v5 = (llvm::IRBuilderBase *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 200);
  v21[0] = "vrid_ext";
  __int16 v22 = 259;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, a2, v6, (uint64_t)v21);
  unsigned int v8 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v5, Cast, v8, (const llvm::Twine *)v21);
  uint64_t v10 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 832))();
  uint64_t v11 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v5, v10, a3, v11, (const llvm::Twine *)v21);
  unint64_t v13 = (llvm::Type *)llvm::PointerType::get();
  __int16 v20 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v5, GEP, v13, (const llvm::Twine *)v19);
  uint64_t v15 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(void))(**(void **)(a1 + 824) + 976))();
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, LShr, v16, (const llvm::Twine *)v21);
  __int16 v20 = 257;
  return llvm::IRBuilderBase::CreateGEP(v5, v15, PointerCast, Mul, (const llvm::Twine *)v19);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSCSDoneRayTraceSCSFlagRead(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v23 = *(_OWORD *)a2;
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24) {
    llvm::MetadataTracking::track();
  }
  int v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v23);
  if (v24) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = *(llvm::Type ***)(a3 + 16);
  BOOL v7 = (uint64_t *)(a1 + 8);
  unsigned int v8 = (llvm::Type *)llvm::PointerType::get();
  __int16 v22 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v6, v8, (const llvm::Twine *)v21);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 952))(a1);
  uint64_t v11 = *(void *)(a1 + 200);
  v21[0] = "vrid";
  __int16 v22 = 259;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v10, v11, (uint64_t)v21);
  PerVridSetDataPtr = (llvm::Value *)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(a1, Cast, PointerCast);
  unint64_t v14 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(void))(**(void **)(a1 + 824) + 952))();
  uint64_t v15 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v14, PerVridSetDataPtr, v15, (const llvm::Twine *)v21);
  v20[16] = 257;
  int v18 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v17);
  return llvm::IRBuilderBase::CreateAlignedLoad(v7, v18, (uint64_t)GEP, 0, (uint64_t)v20);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSetBufferIntersectionFunctionTable(uint64_t *a1, uint64_t a2, llvm::Type **a3, llvm::Type **a4, uint64_t a5, uint64_t a6)
{
  void v29[4] = *MEMORY[0x1E4F143B8];
  long long v26 = *(_OWORD *)a2;
  uint64_t v27 = *(llvm::Value **)(a2 + 16);
  if (v27) {
    llvm::MetadataTracking::track();
  }
  int v28 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v26);
  uint64_t v12 = v27;
  if (v27) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v25 = 257;
  unint64_t v13 = AGCLLVMBuilder::tryDeducePointeeType(a4, v12);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, (uint64_t)a4, 0, (uint64_t)v24);
  uint64_t v15 = a1[18];
  uint64_t v16 = (llvm::Type *)llvm::PointerType::get();
  __int16 v25 = 257;
  v29[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a3, v16, (const llvm::Twine *)v24);
  uint64_t v17 = llvm::PointerType::get();
  __int16 v23 = 257;
  v29[1] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 48, AlignedLoad, v17, (uint64_t)v22);
  uint64_t v18 = a1[26];
  __int16 v21 = 257;
  v29[2] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 47, a5, v18, (uint64_t)v20);
  v29[3] = a6;
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.set_buffer_intersection_function_table", 42, v15, (uint64_t)v29, 4uLL);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildGetBufferIntersectionFunctionTable(uint64_t a1, uint64_t a2, llvm::Type **a3, llvm::Type **a4, uint64_t a5, uint64_t a6)
{
  v29[3] = *MEMORY[0x1E4F143B8];
  long long v26 = *(_OWORD *)a2;
  uint64_t v27 = *(llvm::Value **)(a2 + 16);
  if (v27) {
    llvm::MetadataTracking::track();
  }
  int v28 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v26);
  uint64_t v12 = v27;
  if (v27) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v25 = 257;
  unint64_t v13 = AGCLLVMBuilder::tryDeducePointeeType(a4, v12);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v13, (uint64_t)a4, 0, (uint64_t)v24);
  uint64_t v15 = *(void *)(a1 + 208);
  uint64_t v16 = (llvm::Type *)llvm::PointerType::get();
  __int16 v25 = 257;
  v29[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v16, (const llvm::Twine *)v24);
  uint64_t v17 = llvm::PointerType::get();
  __int16 v23 = 257;
  v29[1] = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, AlignedLoad, v17, (uint64_t)v22);
  v29[2] = a5;
  uint64_t v18 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.get_buffer_intersection_function_table", 42, v15, (uint64_t)v29, 3uLL);
  __int16 v21 = 257;
  return llvm::IRBuilderBase::CreateCast(a1 + 8, 48, (uint64_t)v18, a6, (uint64_t)v20);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildGetSizeIntersectionFunctionTable(uint64_t a1, uint64_t a2, llvm::Type **a3, llvm::Type **a4)
{
  void v21[2] = *MEMORY[0x1E4F143B8];
  long long v18 = *(_OWORD *)a2;
  __int16 v19 = *(llvm::Value **)(a2 + 16);
  if (v19) {
    llvm::MetadataTracking::track();
  }
  int v20 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v18);
  unsigned int v8 = v19;
  if (v19) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v17 = 257;
  uint64_t v9 = AGCLLVMBuilder::tryDeducePointeeType(a4, v8);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v9, (uint64_t)a4, 0, (uint64_t)v16);
  uint64_t v11 = *(void *)(a1 + 200);
  uint64_t v12 = (llvm::Type *)llvm::PointerType::get();
  __int16 v17 = 257;
  v21[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v12, (const llvm::Twine *)v16);
  uint64_t v13 = llvm::PointerType::get();
  v15[16] = 257;
  v21[1] = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, AlignedLoad, v13, (uint64_t)v15);
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.get_size_intersection_function_table", 40, v11, (uint64_t)v21, 2uLL);
}

std::string *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getIntersectionMainFunctionName@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  unsigned int v5 = a4;
  int v7 = a2;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1352))(a1, a2, a4) == 4) {
    uint64_t v9 = "agc.intersection";
  }
  else {
    uint64_t v9 = "agc.cliqueS";
  }
  uint64_t result = (std::string *)std::string::basic_string[abi:nn180100]<0>(a5, v9);
  if (a3 <= 7) {
    uint64_t result = std::string::append(a5, off_1E65EC478[a3]);
  }
  uint64_t v11 = ".miss";
  switch(v7)
  {
    case 0:
      uint64_t v12 = ".triangle";
      goto LABEL_23;
    case 1:
      uint64_t result = std::string::append(a5, ".curve");
      if (v5)
      {
        if (v5 != 1) {
          return result;
        }
        uint64_t v11 = ".curve_motion_leaf";
      }
      else
      {
        uint64_t v11 = ".curve_leaf";
      }
      goto LABEL_26;
    case 7:
      uint64_t v11 = ".gin1122SWWA";
      goto LABEL_26;
    case 8:
      uint64_t result = std::string::append(a5, ".box");
      if (v5)
      {
        if (v5 != 1) {
          return result;
        }
        uint64_t v11 = ".box_motion_leaf";
      }
      else
      {
        uint64_t v11 = ".box_leaf";
      }
      goto LABEL_26;
    case 9:
      if (v5)
      {
        if (v5 != 1) {
          return result;
        }
        uint64_t v11 = ".pop";
      }
      else
      {
        uint64_t v11 = ".push";
      }
LABEL_26:
      return std::string::append(a5, v11);
    case 10:
      if (v5 >= 4) {
        return result;
      }
      uint64_t v13 = off_1E65EC4B8;
      goto LABEL_25;
    case 11:
      if (v5 >= 4) {
        return result;
      }
      uint64_t v13 = off_1E65EC4D8;
      goto LABEL_25;
    case 12:
      uint64_t v12 = ".early_termination";
LABEL_23:
      uint64_t result = std::string::append(a5, v12);
      if (v5 >= 4) {
        return result;
      }
      uint64_t v13 = off_1E65EC4F8;
LABEL_25:
      uint64_t v11 = v13[v5];
      goto LABEL_26;
    case 13:
      goto LABEL_26;
    default:
      return result;
  }
}

unint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::computeDriverPayloadSizeAndUserPayloadSize(unsigned __int8 *a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  unsigned int v6 = a4;
  if (a3)
  {
    if (a4) {
      char v8 = 6;
    }
    else {
      char v8 = 5;
    }
    if ((a4 & 0x40) != 0) {
      unsigned __int8 v9 = 7;
    }
    else {
      unsigned __int8 v9 = v8;
    }
  }
  else
  {
    unsigned __int8 v9 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)a1 + 1384))(a1, a4);
  }
  return (AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::computeDriverPayloadSize(a1, v9, a5, (v6 >> 5) & 1) + 3) & 0xFFFFFFFFFFFFFFFCLL;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCliqueSGeneral(void *a1, long long *a2, uint64_t a3, unsigned int a4, int a5)
{
  void v22[3] = *MEMORY[0x1E4F143B8];
  long long v19 = *a2;
  uint64_t v20 = *((void *)a2 + 2);
  if (v20) {
    llvm::MetadataTracking::track();
  }
  int v21 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v19, (uint64_t)(a1 + 1));
  if (v20) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 944))(a1);
  uint64_t v12 = v11;
  memset(v18, 0, sizeof(v18));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v18, (uint64_t)a1, a3, v10, 0, 0, 0);
  uint64_t v13 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a3, v10, (llvm::Value **)v18, a4, 1u, 1);
  unint64_t v14 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCliqueSGeneral(AGCLLVMBuilder::InsertPoint,std::array<llvm::GlobalVariable *,6ul> const&,unsigned char,unsigned char)::functionNames[a5];
  size_t v15 = strlen(v14);
  uint64_t v16 = a1[18];
  v22[0] = v13;
  v22[1] = v10;
  void v22[2] = v12;
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)v14, v15, v16, (uint64_t)v22, 3uLL);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::Type **a6, char a7)
{
  llvm::PointerType::get();
  uint64_t v13 = (llvm::Type *)llvm::PointerType::get();
  unint64_t v14 = *(llvm::Type ***)(a3 + 16);
  __int16 v42 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a2 + 8), v14, v13, (const llvm::Twine *)v41);
  uint64_t v16 = *(llvm::Type ***)(a3 + 32);
  __int16 v42 = 257;
  long long v18 = AGCLLVMBuilder::tryDeducePointeeType(v16, v17);
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a2 + 8), v18, (uint64_t)v16, 0, (uint64_t)v41);
  v39[0] = "global_ray_stride";
  __int16 v40 = 259;
  uint64_t v20 = (llvm::Value *)llvm::ConstantInt::get();
  *a1 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a2 + 8), AlignedLoad, v20, (const llvm::Twine *)v39);
  PerVridSetDataPtr = (llvm::Value *)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(a2, a4, PointerCast);
  __int16 v22 = *(llvm::Type **)(a2 + 200);
  (*(void (**)(void))(**(void **)(a2 + 824) + 928))();
  __int16 v23 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v42 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a2 + 8), v22, PerVridSetDataPtr, v23, (const llvm::Twine *)v41);
  __int16 v25 = *(llvm::Type **)(a2 + 200);
  (*(void (**)(void))(**(void **)(a2 + 824) + 936))();
  long long v26 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v42 = 257;
  uint64_t v27 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a2 + 8), v25, PerVridSetDataPtr, v26, (const llvm::Twine *)v41);
  int v28 = *(llvm::Type **)(a2 + 200);
  (*(void (**)(void))(**(void **)(a2 + 824) + 944))();
  uint64_t v29 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v42 = 257;
  uint64_t v30 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a2 + 8), v28, PerVridSetDataPtr, v29, (const llvm::Twine *)v41);
  uint64_t v31 = *(llvm::Type **)(a2 + 200);
  __int16 v42 = 257;
  a1[2] = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a2 + 8), v31, v30, 0, (uint64_t)v41);
  unsigned int v32 = *(llvm::Type **)(a2 + 200);
  if ((a5 & 0xFF00000000) != 0)
  {
    uint64_t Cast = (llvm::Type **)llvm::ConstantInt::get();
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a2 + 8), Cast, GEP, 0);
  }
  else
  {
    __int16 v42 = 257;
    uint64_t v34 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a2 + 8), v32, GEP, 0, (uint64_t)v41);
    uint64_t v35 = *(void *)(a2 + 200);
    __int16 v40 = 257;
    uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a2 + 8, 38, v34, v35, (uint64_t)v39);
  }
  a1[1] = Cast;
  if (a7)
  {
    uint64_t result = llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a2 + 8), a6, v27, 0);
  }
  else
  {
    uint64_t v37 = *(llvm::Type **)(a2 + 200);
    __int16 v42 = 257;
    uint64_t result = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a2 + 8), v37, v27, 0, (uint64_t)v41);
    a6 = (llvm::Type **)result;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = a6;
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Value **a4, unsigned int a5, unsigned int a6, int a7)
{
  v92[2] = *(uint64_t **)MEMORY[0x1E4F143B8];
  uint64_t v10 = *(uint64_t **)(a2 + 8);
  int v82 = *(llvm::Type ***)(a2 + 24);
  long long v83 = *(llvm::Type ***)(a2 + 40);
  uint64_t v11 = (llvm::IRBuilderBase *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 200);
  v88[0] = "vrid_ext";
  __int16 v89 = 259;
  uint64_t Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, a3, v12, (uint64_t)v88);
  v92[0] = (uint64_t *)llvm::ConstantInt::get();
  v92[1] = Cast;
  uint64_t v14 = v10[3];
  v88[0] = "ray_core";
  __int16 v89 = 259;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v11, v14, v10, v92, 2, (uint64_t)v88);
  uint64_t v16 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v74 = (llvm::Type *)llvm::PointerType::get();
  __int16 v89 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(v11, GEP, v16, (const llvm::Twine *)v88);
  long long v18 = (llvm::Value *)llvm::ConstantInt::get();
  v88[0] = "vrid_level_1";
  __int16 v89 = 259;
  uint64_t v76 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v11, (llvm::Value *)Cast, v18, (const llvm::Twine *)v88);
  long long v19 = (llvm::Value *)llvm::ConstantInt::get();
  v88[0] = "vrid_level_2";
  __int16 v89 = 259;
  long long v80 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v11, (llvm::Value *)Cast, v19, (const llvm::Twine *)v88);
  llvm::ArrayType::get(v16, (llvm::Type *)0x16);
  uint64_t v20 = llvm::UndefValue::get();
  LODWORD(v90[0]) = 0;
  __int16 v89 = 257;
  uint64_t InsertValue = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v11, v20, (uint64_t)PointerCast, (uint64_t)v90, 1, (uint64_t)v88);
  if (a7)
  {
    __int16 v22 = *(uint64_t **)a2;
    uint64_t v23 = InsertValue;
    uint64_t v24 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"llvm.agx3.ria.token.id", 22, *(void *)(a1 + 192), 0, 0);
    v90[0] = (uint64_t *)llvm::ConstantInt::get();
    uint64_t v25 = *(void *)(a1 + 200);
    __int16 v89 = 257;
    v90[1] = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v11, 39, (uint64_t)v24, v25, (uint64_t)v88);
    uint64_t v26 = v22[3];
    v88[0] = "token_buffer";
    __int16 v89 = 259;
    uint64_t v27 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v11, v26, v22, v90, 2, (uint64_t)v88);
    __int16 v89 = 257;
    int v28 = llvm::IRBuilderBase::CreatePointerCast(v11, v27, v16, (const llvm::Twine *)v88);
    v86[0] = 1;
    __int16 v89 = 257;
    uint64_t InsertValue = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v11, v23, (uint64_t)v28, (uint64_t)v86, 1, (uint64_t)v88);
  }
  uint64_t v85 = InsertValue;
  if (a5 <= 6 && (((1 << a5) & 0x4A) != 0 || ((1 << a5) & 0x21) != 0))
  {
    int v78 = (llvm::CmpInst **)llvm::ConstantInt::get();
    llvm::ConstantInt::get();
  }
  else
  {
    __int16 v72 = a4[3];
    long long v73 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v89 = 257;
    int v78 = (llvm::CmpInst **)v72;
    llvm::IRBuilderBase::CreateAdd(v11, v72, v73, (const llvm::Twine *)v88);
  }
  __int16 v89 = 257;
  uint64_t v29 = llvm::IRBuilderBase::CreatePointerCast(v11, v82, v16, (const llvm::Twine *)v88);
  __int16 v89 = 257;
  uint64_t v75 = llvm::IRBuilderBase::CreatePointerCast(v11, v83, v74, (const llvm::Twine *)v88);
  uint64_t v30 = *a4;
  v88[0] = "global_vrid_size";
  __int16 v89 = 259;
  uint64_t v31 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v11, v30, v31, (const llvm::Twine *)v88);
  unint64_t v33 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 1880))(a1, a5, a6);
  uint64_t v34 = *(llvm::Type **)(a1 + 184);
  __int16 v89 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v76, LShr, (const llvm::Twine *)v88);
  v90[0] = (uint64_t *)"segment_start";
  __int16 v91 = 259;
  uint64_t v36 = v34;
  unsigned int v37 = a6;
  uint64_t v84 = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v11, v36, v29, Mul, (const llvm::Twine *)v90);
  uint64_t v38 = *(llvm::Type **)(a1 + 184);
  unsigned int v39 = a5;
  __int16 v40 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v89 = 257;
  uint64_t v41 = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v11, v38, PointerCast, v40, (const llvm::Twine *)v88);
  for (int i = 2; i != 22; ++i)
  {
    if (RaytracingConstantsGen1::payloadHasSegment(i, v39, v37, *(unsigned __int8 *)(a1 + 1810)))
    {
      unint64_t v43 = RaytracingConstantsGen1::payloadSegmentSize(i, *(unsigned __int8 *)(a1 + 2800));
      if (v43)
      {
        unint64_t v44 = v33 - v43;
        if (v33 >= v43)
        {
          LODWORD(v90[0]) = i;
          __int16 v89 = 257;
          uint64_t v85 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v11, v85, (uint64_t)v41, (uint64_t)v90, 1, (uint64_t)v88);
          uint64_t v60 = *(llvm::Type **)(a1 + 184);
          uint64_t v61 = (llvm::Value *)llvm::ConstantInt::get();
          __int16 v89 = 257;
          uint64_t v41 = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v11, v60, v41, v61, (const llvm::Twine *)v88);
          unint64_t v33 = v44;
        }
        else
        {
          std::string v45 = (llvm::Value *)llvm::ConstantInt::get();
          if ((i - 13) <= 6)
          {
            uint64_t v46 = llvm::ConstantInt::get();
            __int16 v89 = 257;
            llvm::IRBuilderBase::CreateICmp((uint64_t *)v11, 35, v78, v46, (uint64_t)v88);
            uint64_t v47 = (llvm::Value *)llvm::ConstantInt::get();
            __int16 v89 = 257;
            uint64_t Sub = llvm::IRBuilderBase::CreateSub(v11, (llvm::Value *)v78, v47, (const llvm::Twine *)v88);
            long long v49 = (llvm::Value *)llvm::ConstantInt::get();
            __int16 v91 = 257;
            int v50 = (llvm::Value *)Sub;
            unsigned int v37 = a6;
            UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v11, v50, v49, (const llvm::Twine *)v90);
            std::string::size_type v52 = (llvm::Value *)llvm::ConstantInt::get();
            __int16 v87 = 257;
            llvm::IRBuilderBase::CreateAdd(v11, UDiv, v52, (const llvm::Twine *)v86);
            llvm::ConstantInt::get();
            uint64_t Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
            __int16 v89 = 257;
            std::string v45 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v45, Select, (const llvm::Twine *)v88);
          }
          __int16 v89 = 257;
          unint64_t v54 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v80, v45, (const llvm::Twine *)v88);
          uint64_t v55 = *(llvm::Type **)(a1 + 184);
          __int16 v89 = 257;
          uint64_t v56 = llvm::IRBuilderBase::CreateGEP(v11, v55, v84, v54, (const llvm::Twine *)v88);
          v86[0] = i;
          __int16 v91 = 257;
          uint64_t v85 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v11, v85, v56, (uint64_t)v86, 1, (uint64_t)v90);
          uint64_t v57 = *(llvm::Type **)(a1 + 184);
          int v58 = (llvm::Value *)llvm::ConstantInt::get();
          __int16 v89 = 257;
          uint64_t v59 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v45, v58, (const llvm::Twine *)v88);
          __int16 v91 = 257;
          uint64_t v84 = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v11, v57, v84, v59, (const llvm::Twine *)v90);
          unsigned int v39 = a5;
        }
      }
    }
  }
  if (a4[1])
  {
    BOOL v62 = *a4;
    int v63 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v89 = 257;
    int v64 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v11, v62, v63, (const llvm::Twine *)v88);
    __int16 v91 = 257;
    uint64_t v65 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v76, v64, (const llvm::Twine *)v90);
    uint64_t v66 = a4[1];
    __int16 v89 = 257;
    std::string::size_type v67 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v80, v66, (const llvm::Twine *)v88);
    __int16 v89 = 257;
    uint64_t Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v11, v65, v67, (const llvm::Twine *)v88);
    uint64_t v69 = *(void *)v75;
    std::string v70 = *(llvm::Type **)(a1 + 184);
    v88[0] = "ray_user_data_as_i8";
    __int16 v89 = 259;
    v90[0] = (uint64_t *)llvm::IRBuilderBase::CreateGEP(v11, v70, v75, Add, (const llvm::Twine *)v88);
    AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"llvm.agx3.in.user.payload.section.bounds", 40, v69, (uint64_t)v90, 1uLL);
  }
  return v85;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCliqueSPop(void *a1, long long *a2, uint64_t a3, unsigned int a4)
{
  v16[3] = *MEMORY[0x1E4F143B8];
  long long v13 = *a2;
  uint64_t v14 = *((void *)a2 + 2);
  if (v14) {
    llvm::MetadataTracking::track();
  }
  int v15 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v13, (uint64_t)(a1 + 1));
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 944))(a1);
  memset(v12, 0, sizeof(v12));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v12, (uint64_t)a1, a3, v8, 0, 0, 0);
  uint64_t v9 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a3, v8, (llvm::Value **)v12, a4, 1u, 1);
  uint64_t v10 = a1[18];
  v16[0] = v9;
  v16[1] = v8;
  v16[2] = llvm::ConstantInt::get();
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.cliqueS_pop_commit_end", 26, v10, (uint64_t)v16, 3uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCliqueSPush(uint64_t *a1, long long *a2, uint64_t a3, llvm::Type **a4, uint64_t a5, unsigned int a6)
{
  v23[7] = *MEMORY[0x1E4F143B8];
  long long v20 = *a2;
  uint64_t v21 = *((void *)a2 + 2);
  if (v21) {
    llvm::MetadataTracking::track();
  }
  int v22 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v20, (uint64_t)(a1 + 1));
  if (v21) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t *))(*a1 + 944))(a1);
  memset(v19, 0, sizeof(v19));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v19, (uint64_t)a1, a3, v11, 0, 0, 0);
  uint64_t v12 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a3, v11, (llvm::Value **)v19, a6, 1u, 1);
  uint64_t v13 = a1[18];
  v23[0] = v12;
  __int16 v18 = 257;
  int v15 = AGCLLVMBuilder::tryDeducePointeeType(a4, v14);
  v23[1] = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v15, (uint64_t)a4, 0, (uint64_t)v17);
  void v23[2] = v11;
  v23[3] = llvm::ConstantInt::get();
  void v23[4] = llvm::ConstantInt::get();
  v23[5] = llvm::ConstantInt::get();
  v23[6] = llvm::ConstantInt::get();
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.cliqueS_transform_and_commit", 32, v13, (uint64_t)v23, 7uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayDriverTestHit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[2] = *MEMORY[0x1E4F143B8];
  long long v17 = *(_OWORD *)a2;
  uint64_t v18 = *(void *)(a2 + 16);
  if (v18) {
    llvm::MetadataTracking::track();
  }
  int v19 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v17);
  if (v18) {
    llvm::MetadataTracking::untrack();
  }
  std::string::basic_string[abi:nn180100]<0>(v13, "agx.ray_driver_test_hit");
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v13, (_DWORD *)a3);
  if ((v16 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v9 = v16;
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  uint64_t v10 = *(void *)(a1 + 176);
  v20[0] = *(void *)(a3 + 24);
  v20[1] = a4;
  uint64_t v11 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v8, v9, v10, (uint64_t)v20, 2uLL);
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  return v11;
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName(uint64_t a1, const void **a2, _DWORD *a3)
{
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  unsigned int v6 = *a3 - 1;
  if (v6 <= 2) {
    MEMORY[0x1CB7A04E0](__p, off_1E65EC460[v6]);
  }
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a2, (const void **)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayHasMoreResults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  std::string::basic_string[abi:nn180100]<0>(v11, "agx.ray_has_more_results");
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v11, (_DWORD *)a3);
  if ((v14 & 0x80u) == 0) {
    unsigned int v6 = __p;
  }
  else {
    unsigned int v6 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v7 = v14;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = *(void *)(a1 + 176);
  v18[0] = *(void *)(a3 + 24);
  uint64_t v9 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v6, v7, v8, (uint64_t)v18, 1uLL);
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return v9;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayRunThisThread(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  std::string::basic_string[abi:nn180100]<0>(v12, "agx.ray_run_this_thread");
  unsigned int v6 = __p;
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v12, (_DWORD *)a3);
  if ((v15 & 0x80u) == 0)
  {
    uint64_t v7 = v15;
  }
  else
  {
    unsigned int v6 = (void **)__p[0];
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v19 = *(void *)(a1 + 184);
  uint64_t v20 = v19;
  uint64_t v8 = llvm::StructType::get();
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v19 = *(void *)(a3 + 24);
  uint64_t v20 = v9;
  uint64_t v10 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v6, v7, v8, (uint64_t)&v19, 2uLL);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return v10;
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayEndSerial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v19[3] = *MEMORY[0x1E4F143B8];
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  std::string::basic_string[abi:nn180100]<0>(v12, "agx.end_serial");
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v12, (_DWORD *)a3);
  if ((v15 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v9 = v15;
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  uint64_t v10 = *(void *)(a1 + 144);
  uint64_t v11 = *(void *)(a3 + 8);
  v19[0] = *(void *)(a3 + 24);
  v19[1] = v11;
  v19[2] = a4;
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v8, v9, v10, (uint64_t)v19, 3uLL);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayHasTerminated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v20[2] = *MEMORY[0x1E4F143B8];
  long long v17 = *(_OWORD *)a2;
  uint64_t v18 = *(void *)(a2 + 16);
  if (v18) {
    llvm::MetadataTracking::track();
  }
  int v19 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v17);
  if (v18) {
    llvm::MetadataTracking::untrack();
  }
  std::string::basic_string[abi:nn180100]<0>(v13, "agx.ray_has_terminated");
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v13, (_DWORD *)a3);
  if ((v16 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v9 = v16;
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  uint64_t v10 = *(void *)(a1 + 176);
  v20[0] = *(void *)(a3 + 24);
  v20[1] = a4;
  uint64_t v11 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v8, v9, v10, (uint64_t)v20, 2uLL);
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  return v11;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRiaCliqueEnd(uint64_t a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    llvm::MetadataTracking::track();
  }
  int v7 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v5);
  if (v6) {
    llvm::MetadataTracking::untrack();
  }
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.ria_clique_end", 18, *(void *)(a1 + 144), 0, 0);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::commitIntersectionTestSerial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v25[5] = *MEMORY[0x1E4F143B8];
  long long v22 = *(_OWORD *)a2;
  uint64_t v23 = *(void *)(a2 + 16);
  if (v23) {
    llvm::MetadataTracking::track();
  }
  int v24 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v22);
  if (v23) {
    llvm::MetadataTracking::untrack();
  }
  std::string::basic_string[abi:nn180100]<0>(v18, "agx.commit_serial");
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v18, (_DWORD *)a3);
  if ((v21 & 0x80u) == 0) {
    char v12 = __p;
  }
  else {
    char v12 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v13 = v21;
  }
  else {
    uint64_t v13 = (uint64_t)__p[1];
  }
  uint64_t v14 = *(void *)(a1 + 192);
  uint64_t v15 = *(void *)(a3 + 8);
  v25[0] = *(void *)(a3 + 24);
  v25[1] = v15;
  v25[2] = a4;
  void v25[3] = a5;
  void v25[4] = a6;
  unsigned __int8 v16 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v12, v13, v14, (uint64_t)v25, 5uLL);
  if ((char)v21 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  return v16;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::commitIntersectionTestParallel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v24[7] = *MEMORY[0x1E4F143B8];
  long long v21 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  if (v22) {
    llvm::MetadataTracking::track();
  }
  int v23 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v21);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v12 = *(void *)(a3 + 8);
  v24[0] = *(void *)(a3 + 24);
  v24[1] = v12;
  _DWORD v24[2] = a4;
  v24[3] = a5;
  void v24[4] = a6;
  v24[5] = llvm::ConstantInt::get();
  void v24[6] = llvm::ConstantInt::get();
  std::string::basic_string[abi:nn180100]<0>(v17, "agx.commit_parallel");
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v17, (_DWORD *)a3);
  if ((v20 & 0x80u) == 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v14 = v20;
  }
  else {
    uint64_t v14 = (uint64_t)__p[1];
  }
  uint64_t v15 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v13, v14, *(void *)(a1 + 176), (uint64_t)v24, 7uLL);
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  return v15;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildDriverIntersectionGin1122SWWA(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  long long v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v14 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v12);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 944))(a1);
  memset(v11, 0, sizeof(v11));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v11, a1, a3, v6, 0, 0, 0);
  v15[0] = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers(a1, a3, v6, (llvm::Value **)v11, 8u, 1u, 1);
  v15[1] = v6;
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.commit_parallel_gin1122swwa", 31, *(void *)(a1 + 144), (uint64_t)v15, 2uLL);
  long long v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(a1 + 8));
  int v10 = *(_DWORD *)(a1 + 104);
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 1200))(a1, &v8);
  if (v9) {
    return llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildDriverIntersectionEarlyTermination(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 944))(a1);
  memset(v13, 0, sizeof(v13));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v13, a1, a3, v8, 0, 0, 0);
  v17[0] = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers(a1, a3, v8, (llvm::Value **)v13, a4, 1u, 1);
  v17[1] = v8;
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.commit_early_termination", 28, *(void *)(a1 + 144), (uint64_t)v17, 2uLL);
  long long v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (llvm::IRBuilderBase *)(a1 + 8));
  int v12 = *(_DWORD *)(a1 + 104);
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 1200))(a1, &v10);
  if (v11) {
    return llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildDriverIntersectionMiss(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v15[3] = *MEMORY[0x1E4F143B8];
  long long v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v14 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v12);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 944))(a1);
  memset(v11, 0, sizeof(v11));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v11, a1, a3, v6, 0, 0, 0);
  v15[0] = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers(a1, a3, v6, (llvm::Value **)v11, 8u, 1u, 1);
  v15[1] = v6;
  v15[2] = llvm::ConstantInt::get();
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.commit_parallel_miss", 24, *(void *)(a1 + 144), (uint64_t)v15, 3uLL);
  long long v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v9, (llvm::IRBuilderBase *)(a1 + 8));
  int v10 = *(_DWORD *)(a1 + 104);
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 1200))(a1, &v8);
  if (v9) {
    return llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildDriverIntersectionTest(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v37 = *(_OWORD *)a2;
  uint64_t v38 = *(void *)(a2 + 16);
  if (v38) {
    llvm::MetadataTracking::track();
  }
  int v39 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v37);
  if (v38) {
    llvm::MetadataTracking::untrack();
  }
  switch(a4)
  {
    case 0:
      long long v30 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v31, (llvm::IRBuilderBase *)(a1 + 8));
      int v32 = *(_DWORD *)(a1 + 104);
      (*(void (**)(long long *__return_ptr, uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL))(*(void *)a1 + 1128))(&v33, a1, &v30, a3, a5, a6, 1, a7, (a6 - 8) < 0xFDu);
      long long v35 = v33;
      long long v36 = v34;
      if (!v31) {
        break;
      }
      goto LABEL_13;
    case 1:
      long long v27 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v28, (llvm::IRBuilderBase *)(a1 + 8));
      int v29 = *(_DWORD *)(a1 + 104);
      (*(void (**)(long long *__return_ptr, uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1144))(&v33, a1, &v27, a3, a5, a6, 1, a7);
      long long v35 = v33;
      long long v36 = v34;
      if (!v28) {
        break;
      }
      goto LABEL_13;
    case 8:
      long long v24 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v25, (llvm::IRBuilderBase *)(a1 + 8));
      int v26 = *(_DWORD *)(a1 + 104);
      (*(void (**)(long long *__return_ptr, uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1136))(&v33, a1, &v24, a3, a5, a6, 1, a7);
      long long v35 = v33;
      long long v36 = v34;
      if (v25) {
LABEL_13:
      }
        llvm::MetadataTracking::untrack();
      break;
  }
  long long v21 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v22, (llvm::IRBuilderBase *)(a1 + 8));
  int v23 = *(_DWORD *)(a1 + 104);
  uint64_t v14 = llvm::ConstantInt::get();
  uint64_t v15 = llvm::ConstantInt::get();
  uint64_t v16 = llvm::ConstantFP::get();
  (*(void (**)(uint64_t, long long *, long long *, uint64_t, uint64_t, uint64_t, BOOL, void))(*(void *)a1 + 1184))(a1, &v21, &v35, v14, v15, v16, (a6 - 5) < 3, 0);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  long long v18 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v19, (llvm::IRBuilderBase *)(a1 + 8));
  int v20 = *(_DWORD *)(a1 + 104);
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 1200))(a1, &v18);
  if (v19) {
    return llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCurveIntersectionTest@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W4>, unsigned int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v34 = *(_OWORD *)a2;
  uint64_t v35 = *(void *)(a2 + 16);
  if (v35) {
    llvm::MetadataTracking::track();
  }
  int v36 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v34);
  if (v35) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 944))(a1);
  memset(v33, 0, sizeof(v33));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v33, (uint64_t)a1, a3, v12, 0, 0, 0);
  uint64_t v13 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a3, v12, (llvm::Value **)v33, a4, a5, 1);
  uint64_t v15 = v14;
  uint64_t v16 = a1[21];
  uint64_t v17 = a1[25];
  uint64_t v18 = a1[23];
  uint64_t v19 = llvm::PointerType::get();
  uint64_t v20 = a1[24];
  uint64_t v37 = v16;
  uint64_t v38 = v16;
  *(void *)&long long v39 = v17;
  *((void *)&v39 + 1) = v18;
  uint64_t v40 = v17;
  uint64_t v41 = v17;
  uint64_t v42 = v19;
  uint64_t v43 = v20;
  uint64_t v44 = v20;
  uint64_t v21 = llvm::StructType::get();
  long long v32 = *((_OWORD *)a1 + 12);
  uint64_t v22 = llvm::PointerType::get();
  uint64_t v23 = a1[23];
  uint64_t v37 = v21;
  uint64_t v38 = v32;
  long long v39 = v32;
  uint64_t v40 = v22;
  uint64_t v41 = v23;
  long long v24 = (llvm::Type *)llvm::StructType::get();
  AllocaInEntryBlocuint64_t k = AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)a1, v24);
  int v26 = *((unsigned __int8 *)a1 + 1810);
  uint64_t v37 = v13;
  uint64_t v27 = llvm::ConstantInt::get();
  if (v26) {
    uint64_t v28 = 21;
  }
  else {
    uint64_t v28 = 14;
  }
  uint64_t v38 = v27;
  if (v26) {
    int v29 = "agx.curve_test_legacy";
  }
  else {
    int v29 = "agx.curve_test";
  }
  long long v30 = (llvm::Type **)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)v29, v28, (uint64_t)v24, (uint64_t)&v37, 2uLL);
  uint64_t result = llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v30, AllocaInEntryBlock, 0);
  *(_DWORD *)a6 = 3;
  *(void *)(a6 + 8) = v13;
  *(void *)(a6 + 16) = v15;
  *(void *)(a6 + 24) = AllocaInEntryBlock;
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildBoundingBoxIntersectionTest@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W4>, unsigned int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v34 = *(_OWORD *)a2;
  uint64_t v35 = *(void *)(a2 + 16);
  if (v35) {
    llvm::MetadataTracking::track();
  }
  int v36 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v34);
  if (v35) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 944))(a1);
  memset(v33, 0, sizeof(v33));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v33, (uint64_t)a1, a3, v12, 0, 0, 0);
  uint64_t v13 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a3, v12, (llvm::Value **)v33, a4, a5, 1);
  uint64_t v15 = v14;
  uint64_t v16 = a1[21];
  uint64_t v17 = a1[25];
  uint64_t v18 = a1[23];
  uint64_t v19 = llvm::PointerType::get();
  uint64_t v20 = a1[24];
  uint64_t v37 = v16;
  uint64_t v38 = v16;
  *(void *)&long long v39 = v17;
  *((void *)&v39 + 1) = v18;
  uint64_t v40 = v17;
  uint64_t v41 = v17;
  uint64_t v42 = v19;
  uint64_t v43 = v20;
  uint64_t v44 = v20;
  uint64_t v21 = llvm::StructType::get();
  long long v32 = *((_OWORD *)a1 + 12);
  uint64_t v22 = llvm::PointerType::get();
  uint64_t v23 = a1[23];
  uint64_t v37 = v21;
  uint64_t v38 = v32;
  long long v39 = v32;
  uint64_t v40 = v22;
  uint64_t v41 = v23;
  long long v24 = (llvm::Type *)llvm::StructType::get();
  AllocaInEntryBlocuint64_t k = AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)a1, v24);
  int v26 = *((unsigned __int8 *)a1 + 1810);
  uint64_t v37 = v13;
  uint64_t v27 = llvm::ConstantInt::get();
  if (v26) {
    uint64_t v28 = 28;
  }
  else {
    uint64_t v28 = 21;
  }
  uint64_t v38 = v27;
  if (v26) {
    int v29 = "agx.bounding_box_test_legacy";
  }
  else {
    int v29 = "agx.bounding_box_test";
  }
  long long v30 = (llvm::Type **)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)v29, v28, (uint64_t)v24, (uint64_t)&v37, 2uLL);
  uint64_t result = llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v30, AllocaInEntryBlock, 0);
  *(_DWORD *)a6 = 2;
  *(void *)(a6 + 8) = v13;
  *(void *)(a6 + 16) = v15;
  *(void *)(a6 + 24) = AllocaInEntryBlock;
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildTriangleIntersectionTest@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W4>, unsigned int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  long long v39 = *(_OWORD *)a2;
  uint64_t v40 = *(void *)(a2 + 16);
  if (v40) {
    llvm::MetadataTracking::track();
  }
  int v41 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v39);
  if (v40) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 944))(a1);
  memset(v38, 0, sizeof(v38));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v38, (uint64_t)a1, a3, v12, 0, 0, 0);
  uint64_t v13 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a3, v12, (llvm::Value **)v38, a4, a5, 1);
  uint64_t v15 = v14;
  uint64_t v16 = a1[21];
  uint64_t v17 = a1[25];
  uint64_t v18 = llvm::PointerType::get();
  uint64_t v19 = a1[28];
  uint64_t v20 = a1[23];
  uint64_t v42 = v16;
  uint64_t v43 = v17;
  *(void *)&long long v44 = v17;
  *((void *)&v44 + 1) = v18;
  uint64_t v45 = v19;
  uint64_t v46 = v20;
  uint64_t v21 = (llvm::ArrayType *)llvm::StructType::get();
  uint64_t v22 = llvm::ArrayType::get(v21, (llvm::Type *)2);
  uint64_t v24 = a1[24];
  uint64_t v23 = a1[25];
  uint64_t v25 = a1[23];
  uint64_t v42 = v22;
  uint64_t v43 = v23;
  *(void *)&long long v44 = v23;
  *((void *)&v44 + 1) = v24;
  uint64_t v45 = v24;
  uint64_t v46 = v25;
  uint64_t v26 = llvm::StructType::get();
  long long v37 = *((_OWORD *)a1 + 12);
  uint64_t v27 = llvm::PointerType::get();
  uint64_t v28 = a1[23];
  uint64_t v42 = v26;
  uint64_t v43 = v37;
  long long v44 = v37;
  uint64_t v45 = v27;
  uint64_t v46 = v28;
  int v29 = (llvm::Type *)llvm::StructType::get();
  AllocaInEntryBlocuint64_t k = AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)a1, v29);
  int v31 = *((unsigned __int8 *)a1 + 1810);
  uint64_t v42 = v13;
  uint64_t v43 = llvm::ConstantInt::get();
  *(void *)&long long v44 = llvm::ConstantInt::get();
  uint64_t v32 = llvm::ConstantInt::get();
  if (v31) {
    uint64_t v33 = 24;
  }
  else {
    uint64_t v33 = 17;
  }
  *((void *)&v44 + 1) = v32;
  if (v31) {
    long long v34 = "agx.triangle_test_legacy";
  }
  else {
    long long v34 = "agx.triangle_test";
  }
  uint64_t v35 = (llvm::Type **)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)v34, v33, (uint64_t)v29, (uint64_t)&v42, 4uLL);
  uint64_t result = llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v35, AllocaInEntryBlock, 0);
  *(_DWORD *)a6 = 1;
  *(void *)(a6 + 8) = v13;
  *(void *)(a6 + 16) = v15;
  *(void *)(a6 + 24) = AllocaInEntryBlock;
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildIntersectionQueryAccessor(uint64_t a1, uint64_t a2, llvm::Type **a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, std::string::size_type a8)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = a5;
  unint64_t v41 = a6;
  long long v37 = *(_OWORD *)a2;
  uint64_t v38 = *(void *)(a2 + 16);
  if (v38) {
    llvm::MetadataTracking::track();
  }
  int v39 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v37);
  if (v38) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v15 = (llvm::Type *)llvm::PointerType::get();
  if (a5)
  {
    uint64_t v16 = 4;
    if (a6 < 4) {
      uint64_t v16 = a6;
    }
    std::string::basic_string[abi:nn180100](&__str, (void *)(a5 + v16), a6 - v16);
  }
  else
  {
    memset(&__str, 0, sizeof(__str));
  }
  std::string::size_type v17 = std::string::find(&__str, 46, 0);
  if (v17 != -1)
  {
    std::string::basic_string(&v31, &__str, 0, v17, (std::allocator<char> *)&v42);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v31;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 42) {
      goto LABEL_22;
    }
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 42) {
      goto LABEL_22;
    }
    p_str = &__str;
  }
  if (!memcmp(p_str, "get_intersection_params_intersection_query", 0x2AuLL) && llvm::StringRef::find() != -1) {
    std::string::append(&__str, "_instancing");
  }
LABEL_22:
  std::string::basic_string[abi:nn180100]<0>(&v35, "_preCurves");
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 42)
    {
      if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 53)
      {
        uint64_t v19 = &__str;
        goto LABEL_29;
      }
LABEL_35:
      std::operator+<char>();
      goto LABEL_36;
    }
    uint64_t v21 = &__str;
LABEL_34:
    if (!memcmp(v21, "get_intersection_params_intersection_query", 0x2AuLL))
    {
      int v30 = *(_DWORD *)(a7 + 12);
      std::operator+<char>();
      if (v30 == 7) {
        goto LABEL_61;
      }
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (__str.__r_.__value_.__l.__size_ == 42)
  {
    uint64_t v21 = (std::string *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_34;
  }
  if (__str.__r_.__value_.__l.__size_ != 53) {
    goto LABEL_35;
  }
  uint64_t v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_29:
  if (memcmp(v19, "get_intersection_params_intersection_query_instancing", 0x35uLL)) {
    goto LABEL_35;
  }
  int v20 = *(_DWORD *)(a7 + 12);
  std::operator+<char>();
  if (v20 == 8)
  {
LABEL_61:
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v42, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    }
    else {
      std::string v42 = v35;
    }
    goto LABEL_37;
  }
LABEL_36:
  std::string::basic_string[abi:nn180100]<0>(&v42, "");
LABEL_37:
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v22 = &v42;
  }
  else {
    uint64_t v22 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v42.__r_.__value_.__l.__size_;
  }
  uint64_t v24 = std::string::append(&v31, (const std::string::value_type *)v22, size);
  std::string::size_type v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  uint64_t v34 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (v34 >= 0) {
    uint64_t v26 = __p;
  }
  else {
    uint64_t v26 = (void **)__p[0];
  }
  if (v34 >= 0) {
    uint64_t v27 = HIBYTE(v34);
  }
  else {
    uint64_t v27 = (uint64_t)__p[1];
  }
  __int16 v32 = 257;
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v15, (const llvm::Twine *)&v31);
  v42.__r_.__value_.__l.__size_ = a8;
  v42.__r_.__value_.__r.__words[2] = llvm::ConstantInt::get();
  uint64_t v43 = llvm::ConstantInt::get();
  uint64_t v28 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v26, v27, a7, (uint64_t)&v42, 4uLL);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v28;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitCurveIntersectionQuery(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  void v18[4] = *MEMORY[0x1E4F143B8];
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v7 = *(void *)(a1 + 168);
  __int16 v14 = 257;
  v18[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v13);
  v18[1] = llvm::ConstantInt::get();
  void v18[2] = llvm::ConstantInt::get();
  _OWORD v18[3] = llvm::ConstantInt::get();
  long long v8 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.get_candidate_curve_distance_intersection_query", 51, v7, (uint64_t)v18, 4uLL);
  long long v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (llvm::IRBuilderBase *)(a1 + 8));
  int v12 = *(_DWORD *)(a1 + 104);
  uint64_t result = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitIntersectionQuery(a1, (uint64_t)&v10, a3, (uint64_t)v8);
  if (v11) {
    return (llvm::Value *)llvm::MetadataTracking::untrack();
  }
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitIntersectionQuery(uint64_t a1, uint64_t a2, llvm::Type **a3, uint64_t a4)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  long long v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  if (v14) {
    llvm::MetadataTracking::track();
  }
  int v15 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v13);
  if (v14) {
    llvm::MetadataTracking::untrack();
  }
  long long v8 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v9 = *(void *)(a1 + 144);
  __int16 v12 = 257;
  v16[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v8, (const llvm::Twine *)v11);
  v16[1] = a4;
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.intersection_query.commit", 29, v9, (uint64_t)v16, 2uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildDeallocateIntersectionQuery(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  long long v11 = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v13 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v11);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v7 = *(void *)(a1 + 144);
  __int16 v10 = 257;
  v14[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v9);
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.intersection_query.deallocate", 33, v7, (uint64_t)v14, 1uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitBoundingBoxIntersectionQuery(uint64_t a1, long long *a2, llvm::Type **a3, uint64_t a4)
{
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  if (v10) {
    llvm::MetadataTracking::track();
  }
  int v11 = *((_DWORD *)a2 + 6);
  uint64_t result = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitIntersectionQuery(a1, (uint64_t)&v9, a3, a4);
  if (v10) {
    return (llvm::Value *)llvm::MetadataTracking::untrack();
  }
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitTriangleIntersectionQuery(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  void v18[4] = *MEMORY[0x1E4F143B8];
  long long v15 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v16) {
    llvm::MetadataTracking::track();
  }
  int v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v15);
  if (v16) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v7 = *(void *)(a1 + 168);
  __int16 v14 = 257;
  v18[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v13);
  v18[1] = llvm::ConstantInt::get();
  void v18[2] = llvm::ConstantInt::get();
  _OWORD v18[3] = llvm::ConstantInt::get();
  long long v8 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.get_candidate_triangle_distance_intersection_query", 54, v7, (uint64_t)v18, 4uLL);
  long long v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v11, (llvm::IRBuilderBase *)(a1 + 8));
  int v12 = *(_DWORD *)(a1 + 104);
  uint64_t result = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitIntersectionQuery(a1, (uint64_t)&v10, a3, (uint64_t)v8);
  if (v11) {
    return (llvm::Value *)llvm::MetadataTracking::untrack();
  }
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildAbortIntersectionQuery(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  long long v11 = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v13 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v11);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v7 = *(void *)(a1 + 144);
  __int16 v10 = 257;
  v14[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v9);
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.intersection_query.abort", 28, v7, (uint64_t)v14, 1uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildNextIntersectionQuery(void *a1, uint64_t a2, llvm::Type **a3, llvm::Type **a4, uint64_t a5, char a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  long long v28 = *(_OWORD *)a2;
  uint64_t v29 = *(void *)(a2 + 16);
  if (v29) {
    llvm::MetadataTracking::track();
  }
  int v30 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v28);
  if (v29) {
    llvm::MetadataTracking::untrack();
  }
  long long v11 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 952))(a1);
  v31[0] = "vrid";
  LOWORD(v32) = 259;
  llvm::Value::setName();
  uint64_t v13 = a1[25];
  LOWORD(v32) = 257;
  *(void *)&long long v35 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a3, v11, (const llvm::Twine *)v31);
  *((void *)&v35 + 1) = llvm::ConstantInt::get();
  unsigned int v14 = a6 & 1;
  if (a6) {
    unsigned int v15 = 6;
  }
  else {
    unsigned int v15 = 5;
  }
  *(void *)&long long v36 = llvm::ConstantInt::get();
  if ((a6 & 0x40) != 0)
  {
    unsigned int v15 = 7;
    unsigned int v14 = 2;
  }
  *((void *)&v36 + 1) = llvm::ConstantInt::get();
  uint64_t v16 = (llvm::Type **)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.get_instance_levels_intersection_query", 42, v13, (uint64_t)&v35, 4uLL);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v35 = 0u;
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(&v35, (uint64_t)a1, a5, v12, 0x100000000, v16, 1);
  uint64_t v17 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a5, v12, (llvm::Value **)&v35, v15, 0, 0);
  uint64_t v18 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a5, v12, (llvm::Value **)&v35, v14, 0, 0);
  uint64_t v19 = a1[22];
  __int16 v27 = 257;
  v31[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a3, v11, (const llvm::Twine *)v26);
  v31[1] = v17;
  v31[2] = v18;
  __int16 v25 = 257;
  uint64_t v21 = AGCLLVMBuilder::tryDeducePointeeType(a4, v20);
  v31[3] = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v21, (uint64_t)a4, 0, (uint64_t)v24);
  uint64_t v32 = v12;
  uint64_t v33 = llvm::ConstantInt::get();
  uint64_t v34 = llvm::ConstantInt::get();
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.intersection_query.next", 27, v19, (uint64_t)v31, 7uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildResetIntersectionQuery(void *a1, uint64_t a2, uint64_t a3, llvm::Type **a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  long long v25 = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  if (v26) {
    llvm::MetadataTracking::track();
  }
  int v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26) {
    llvm::MetadataTracking::untrack();
  }
  long long v8 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v9 = a1[18];
  __int16 v10 = *(llvm::Type ***)a3;
  __int16 v24 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), v10, v8, (const llvm::Twine *)v23);
  long long v29 = *(_OWORD *)(a3 + 8);
  long long v30 = *(_OWORD *)(a3 + 24);
  uint64_t v11 = *(void *)(a3 + 40);
  uint64_t v12 = a1[25];
  __int16 v22 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 47, v11, v12, (uint64_t)v21);
  long long v14 = *(_OWORD *)(a3 + 64);
  long long v32 = *(_OWORD *)(a3 + 48);
  long long v33 = v14;
  long long v34 = *(_OWORD *)(a3 + 80);
  uint64_t v15 = *(void *)(a3 + 128);
  uint64_t v16 = *(void *)(a3 + 136);
  uint64_t v35 = *(void *)(a3 + 96);
  uint64_t v36 = v16;
  if (!v15) {
    uint64_t v15 = llvm::ConstantInt::get();
  }
  uint64_t v37 = v15;
  __int16 v20 = 257;
  uint64_t v17 = AGCLLVMBuilder::tryDeducePointeeType(a4, v13);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v17, (uint64_t)a4, 0, (uint64_t)v19);
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.intersection_query.reset", 28, v9, (uint64_t)&PointerCast, 0x10uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildAllocateIntersectionQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  long long v11 = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  if (v12) {
    llvm::MetadataTracking::track();
  }
  int v13 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v11);
  if (v12) {
    llvm::MetadataTracking::untrack();
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t, void))(*(void *)a1 + 1272))(a1, 0, 1, a4, a5);
  uint64_t v9 = llvm::PointerType::get();
  v14[0] = llvm::ConstantInt::get();
  v14[1] = llvm::ConstantInt::get();
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.intersection_query.allocate", 31, v9, (uint64_t)v14, 2uLL);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildReleaseIntersectPayload(uint64_t a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    llvm::MetadataTracking::track();
  }
  int v7 = *(_DWORD *)(a2 + 24);
  uint64_t result = AGCLLVMTargetLowerer::SetIP(a1, &v5);
  if (v6) {
    return llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildReleaseIntersectionResult(uint64_t a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    llvm::MetadataTracking::track();
  }
  int v7 = *(_DWORD *)(a2 + 24);
  uint64_t result = AGCLLVMTargetLowerer::SetIP(a1, &v5);
  if (v6) {
    return llvm::MetadataTracking::untrack();
  }
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildIntersectionResultAccessor(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  long long v65 = *(_OWORD *)a2;
  uint64_t v66 = *(void *)(a2 + 16);
  if (v66) {
    llvm::MetadataTracking::track();
  }
  int v67 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v65);
  if (v66) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v14 = a1[26];
  LOWORD(v63) = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 47, a3, v14, (uint64_t)v62);
  uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v63) = 257;
  uint64_t v17 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), Cast, v16, (const llvm::Twine *)v62);
  uint64_t v18 = a1[24];
  LOWORD(v63) = 257;
  uint64_t v19 = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v17, v18, (uint64_t)v62);
  LOWORD(v63) = 257;
  __int16 v20 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), Cast, v20, (const llvm::Twine *)v62);
  __int16 v22 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v72 = 257;
  uint64_t v23 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), LShr, v22, (const llvm::Twine *)&v70);
  uint64_t v24 = a1[25];
  LOWORD(v63) = 257;
  std::string::size_type v25 = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v23, v24, (uint64_t)v62);
  LOWORD(v63) = 257;
  uint64_t v26 = (llvm::Value *)llvm::ConstantInt::get();
  int v27 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), Cast, v26, (const llvm::Twine *)v62);
  long long v28 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v63) = 257;
  long long v29 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v27, v28, (const llvm::Twine *)v62);
  __int16 v72 = 257;
  long long v30 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Shl = llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v29, v30, (const llvm::Twine *)&v70);
  uint64_t v32 = a1[25];
  __int16 v69 = 257;
  v62[0] = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, Shl, v32, (uint64_t)&__str);
  __int16 v72 = 257;
  long long v33 = (llvm::Value *)llvm::ConstantInt::get();
  long long v34 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v27, v33, (const llvm::Twine *)&v70);
  uint64_t v35 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v72 = 257;
  uint64_t v36 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)&v70);
  uint64_t v37 = a1[25];
  __int16 v72 = 257;
  v62[3] = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)&v70);
  __int16 v72 = 257;
  uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v39 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v38, (const llvm::Twine *)&v70);
  uint64_t v40 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v72 = 257;
  uint64_t v41 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v39, v40, (const llvm::Twine *)&v70);
  uint64_t v42 = a1[25];
  __int16 v72 = 257;
  uint64_t v63 = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v41, v42, (uint64_t)&v70);
  __int16 v72 = 257;
  uint64_t v43 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v44 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v39, v43, (const llvm::Twine *)&v70);
  uint64_t v45 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v72 = 257;
  uint64_t v46 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v44, v45, (const llvm::Twine *)&v70);
  uint64_t v47 = a1[25];
  __int16 v72 = 257;
  uint64_t v64 = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v46, v47, (uint64_t)&v70);
  __int16 v72 = 257;
  int v48 = (llvm::Value *)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v44, v48, (const llvm::Twine *)&v70);
  v62[1] = 0;
  v62[2] = 0;
  unsigned int v49 = (*(uint64_t (**)(void *, void))(*a1 + 1384))(a1, a9);
  uint64_t v50 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a8, v19, v62, v49, (a9 >> 5) & 1, 0);
  if (a5)
  {
    uint64_t v51 = 4;
    if (a6 < 4) {
      uint64_t v51 = a6;
    }
    std::string::basic_string[abi:nn180100](&__str, (void *)(a5 + v51), a6 - v51);
  }
  else
  {
    memset(&__str, 0, sizeof(__str));
  }
  std::string::size_type v52 = std::string::find(&__str, 46, 0);
  if (v52 != -1)
  {
    std::string::basic_string(&v70, &__str, 0, v52, (std::allocator<char> *)__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v70;
  }
  __int16 v53 = __p;
  std::operator+<char>();
  if ((v61 & 0x80u) == 0)
  {
    uint64_t v54 = v61;
  }
  else
  {
    __int16 v53 = (void **)__p[0];
    uint64_t v54 = (uint64_t)__p[1];
  }
  v70.__r_.__value_.__r.__words[0] = v50;
  v70.__r_.__value_.__l.__size_ = v25;
  (*(void (**)(void *, void))(*a1 + 1384))(a1, a9);
  v70.__r_.__value_.__r.__words[2] = llvm::ConstantInt::get();
  uint64_t v71 = a4;
  uint64_t v55 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)v53, v54, a7, (uint64_t)&v70, 4uLL);
  if ((char)v61 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v55;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildIntersectRayForDirectAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  long long v63 = *(_OWORD *)a2;
  uint64_t v64 = *(void *)(a2 + 16);
  if (v64) {
    llvm::MetadataTracking::track();
  }
  int v65 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v63);
  if (v64) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 952))(a1);
  *(void *)&long long v60 = "vrid";
  LOWORD(v62) = 259;
  llvm::Value::setName();
  if (*(unsigned char *)(a3 + 112))
  {
    if (*(unsigned char *)(*(void *)(a3 + 128) + 16) == 16) {
      uint64_t v13 = *(void *)(a3 + 128);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (unsigned int *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u) {
      uint64_t v14 = *(unsigned int **)v14;
    }
    uint64_t v15 = *v14;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)a1 + 1272))(a1, v15, 0, a6, *(unsigned int *)(a3 + 140));
  uint64_t v18 = v17;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v60 = 0u;
  uint64_t v19 = (llvm::Type **)llvm::ConstantInt::get();
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(&v60, a1, a5, v12, v18 | 0x100000000, v19, 1);
  unsigned int v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 1384))(a1, a6);
  v59[0] = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers(a1, a5, v12, (llvm::Value **)&v60, v20, (a6 >> 5) & 1, 0);
  v59[1] = v21;
  __int16 v22 = (llvm::IRBuilderBase *)(a1 + 8);
  long long v56 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v57, (llvm::IRBuilderBase *)(a1 + 8));
  int v58 = *(_DWORD *)(a1 + 104);
  (*(void (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, _WORD))(*(void *)a1 + 1008))(a1, &v56, a3, a4, v12, v16, v15, v18, v59, a6);
  if (v57) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v23 = *(void *)(a1 + 184);
  v68[0] = v59[0];
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1384))(a1, a6);
  v68[1] = llvm::ConstantInt::get();
  uint64_t v24 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.intersect.ray.get_core_id", 29, v23, (uint64_t)v68, 2uLL);
  uint64_t v25 = *(void *)(a1 + 208);
  __int16 v69 = 257;
  uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v12, v25, (uint64_t)v68);
  int v27 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v69 = 257;
  uint64_t v28 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v24, v27, (const llvm::Twine *)v68);
  uint64_t v29 = *(void *)(a1 + 208);
  __int16 v67 = 257;
  long long v30 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v28, v29, (uint64_t)v66);
  __int16 v69 = 257;
  std::string v31 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v30, v31, (const llvm::Twine *)v68);
  __int16 v69 = 257;
  long long v33 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, Cast, (const llvm::Twine *)v68);
  long long v34 = (llvm::Value *)v60;
  __int16 v69 = 257;
  uint64_t v35 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v34, v35, (const llvm::Twine *)v68);
  uint64_t v37 = *(void *)(a1 + 208);
  __int16 v67 = 257;
  uint64_t v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, LShr, v37, (uint64_t)v66);
  __int16 v69 = 257;
  uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v40 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v38, v39, (const llvm::Twine *)v68);
  __int16 v69 = 257;
  uint64_t v41 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v40, v33, (const llvm::Twine *)v68);
  uint64_t v42 = *(void *)(a1 + 208);
  __int16 v69 = 257;
  uint64_t v43 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, *((uint64_t *)&v61 + 1), v42, (uint64_t)v68);
  __int16 v69 = 257;
  uint64_t v44 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v45 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v43, v44, (const llvm::Twine *)v68);
  __int16 v69 = 257;
  uint64_t v46 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v45, v41, (const llvm::Twine *)v68);
  if ((void)v62)
  {
    uint64_t v47 = *(void *)(a1 + 208);
    __int16 v69 = 257;
    int v48 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v62, v47, (uint64_t)v68);
    __int16 v69 = 257;
    unsigned int v49 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v50 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v48, v49, (const llvm::Twine *)v68);
    __int16 v69 = 257;
    uint64_t v46 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v50, v46, (const llvm::Twine *)v68);
  }
  if (*((void *)&v62 + 1))
  {
    uint64_t v51 = *(void *)(a1 + 208);
    __int16 v69 = 257;
    std::string::size_type v52 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, *((uint64_t *)&v62 + 1), v51, (uint64_t)v68);
    __int16 v69 = 257;
    __int16 v53 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v54 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v22, v52, v53, (const llvm::Twine *)v68);
    __int16 v69 = 257;
    return llvm::IRBuilderBase::CreateOr(v22, v54, v46, (const llvm::Twine *)v68);
  }
  return (uint64_t)v46;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildIntersectRayWithResults@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  long long v51 = *(_OWORD *)a2;
  uint64_t v52 = *(void *)(a2 + 16);
  if (v52) {
    llvm::MetadataTracking::track();
  }
  int v53 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v51);
  if (v52) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 952))(a1);
  uint64_t v54 = "vrid";
  LOWORD(v58) = 259;
  llvm::Value::setName();
  if (*(unsigned char *)(a3 + 112))
  {
    if (*(unsigned char *)(*(void *)(a3 + 128) + 16) == 16) {
      uint64_t v13 = *(void *)(a3 + 128);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (unsigned int *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u) {
      uint64_t v14 = *(unsigned int **)v14;
    }
    uint64_t v15 = *v14;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)a1 + 1272))(a1, v15, 0, a6, *(unsigned int *)(a3 + 140));
  uint64_t v18 = v17;
  memset(v50, 0, sizeof(v50));
  uint64_t v19 = (llvm::Type **)llvm::ConstantInt::get();
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v50, a1, a5, v12, v18 | 0x100000000, v19, 1);
  unsigned int v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 1384))(a1, a6);
  v49[0] = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers(a1, a5, v12, (llvm::Value **)v50, v20, (a6 >> 5) & 1, 0);
  v49[1] = v21;
  long long v46 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(&v47, (llvm::IRBuilderBase *)(a1 + 8));
  int v48 = *(_DWORD *)(a1 + 104);
  unsigned int v40 = a6;
  uint64_t v41 = a3;
  uint64_t v22 = a4;
  uint64_t v39 = v12;
  uint64_t v37 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, _WORD))(*(void *)a1 + 1008))(a1, &v46, a3, v22, v12, v16, v15, v18, v49, a6);
  if (v47) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v23 = *(const char **)(a1 + 200);
  uint64_t v24 = *(void *)(a1 + 168);
  uint64_t v25 = llvm::PointerType::get();
  uint64_t v26 = *(void *)(a1 + 200);
  uint64_t v27 = *(void *)(a1 + 184);
  uint64_t v28 = *(void *)(a1 + 224);
  uint64_t v29 = *(void *)(a1 + 168);
  uint64_t v30 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 264), (llvm::Type *)4);
  uint64_t v31 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 264), (llvm::Type *)4);
  uint64_t v54 = v23;
  uint64_t v55 = v24;
  uint64_t v56 = (uint64_t)v23;
  uint64_t v57 = (uint64_t)v23;
  uint64_t v58 = v25;
  *(void *)&long long v59 = v26;
  *((void *)&v59 + 1) = v26;
  uint64_t v60 = v27;
  uint64_t v61 = v28;
  uint64_t v62 = v27;
  uint64_t v63 = v29;
  uint64_t v64 = v30;
  uint64_t v65 = v31;
  uint64_t v32 = llvm::StructType::get();
  uint64_t v54 = (const char *)v49[0];
  (*(void (**)(uint64_t, void))(*(void *)a1 + 1384))(a1, v40);
  uint64_t v55 = llvm::ConstantInt::get();
  uint64_t v56 = llvm::ConstantInt::get();
  uint64_t v57 = v39;
  uint64_t v58 = v37;
  long long v59 = *(_OWORD *)(v41 + 144);
  long long v33 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.intersect.ray.result", 24, v32, (uint64_t)&v54, 7uLL);
  a7[10] = 0;
  a7[11] = 0;
  a7[12] = 0;
  v43[0] = 0;
  LOWORD(v58) = 257;
  *a7 = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 1;
  LOWORD(v58) = 257;
  a7[1] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 2;
  LOWORD(v58) = 257;
  a7[2] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 3;
  LOWORD(v58) = 257;
  a7[3] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 4;
  LOWORD(v58) = 257;
  a7[4] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 5;
  LOWORD(v58) = 257;
  a7[5] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 6;
  LOWORD(v58) = 257;
  a7[6] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 7;
  LOWORD(v58) = 257;
  a7[7] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 8;
  LOWORD(v58) = 257;
  a7[8] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  int v45 = 9;
  LOWORD(v58) = 257;
  uint64_t Value = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)&v45, 1, (uint64_t)&v54);
  uint64_t v35 = *(void *)(a1 + 176);
  __int16 v44 = 257;
  a7[9] = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, Value, v35, (uint64_t)v43);
  v43[0] = 10;
  LOWORD(v58) = 257;
  a7[10] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 11;
  LOWORD(v58) = 257;
  a7[11] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 12;
  LOWORD(v58) = 257;
  uint64_t result = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  a7[12] = result;
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildIntersectRay(uint64_t *a1, uint64_t a2, long long *a3, llvm::Type **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  long long v35 = *(_OWORD *)a2;
  uint64_t v36 = *(llvm::Value **)(a2 + 16);
  if (v36) {
    llvm::MetadataTracking::track();
  }
  int v37 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v35);
  uint64_t v15 = v36;
  if (v36) {
    llvm::MetadataTracking::untrack();
  }
  LOWORD(v39) = 257;
  uint64_t v16 = AGCLLVMBuilder::tryDeducePointeeType(a4, v15);
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v16, (uint64_t)a4, 0, (uint64_t)v38);
  v38[0] = "bvh_state_words_heap_base";
  LOWORD(v39) = 259;
  llvm::Value::setName();
  if (*((unsigned char *)a3 + 112)) {
    llvm::IRBuilderBase::CreateMemCpy((uint64_t)(a1 + 1), *(llvm::LLVMContext **)(a9 + 8));
  }
  uint64_t v18 = a1[22];
  v38[0] = *(void *)a9;
  v38[1] = AlignedLoad;
  v38[2] = a5;
  _OWORD v38[3] = llvm::ConstantInt::get();
  uint64_t v39 = llvm::ConstantInt::get();
  uint64_t v40 = llvm::ConstantInt::get();
  (*(void (**)(uint64_t *, void))(*a1 + 1384))(a1, a10);
  uint64_t v19 = llvm::ConstantInt::get();
  long long v20 = a3[1];
  long long v42 = *a3;
  long long v43 = v20;
  uint64_t v21 = *((void *)a3 + 6);
  uint64_t v22 = (llvm::Type **)*((void *)a3 + 7);
  uint64_t v41 = v19;
  uint64_t v44 = v21;
  uint64_t v23 = (llvm::Type *)llvm::PointerType::get();
  __int16 v34 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), v22, v23, (const llvm::Twine *)v33);
  long long v24 = a3[5];
  long long v46 = a3[4];
  long long v47 = v24;
  long long v48 = a3[6];
  uint64_t v25 = *((void *)a3 + 4);
  uint64_t v26 = a1[25];
  __int16 v32 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 47, v25, v26, (uint64_t)v31);
  long long v27 = a3[11];
  long long v50 = a3[10];
  long long v51 = v27;
  uint64_t v28 = *((void *)a3 + 5);
  uint64_t v52 = *((void *)a3 + 24);
  uint64_t v53 = v28;
  long long v54 = a3[15];
  uint64_t v55 = *((void *)a3 + 32);
  uint64_t v56 = llvm::ConstantInt::get();
  uint64_t v57 = llvm::ConstantInt::get();
  uint64_t v29 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.intersect.ray", 17, v18, (uint64_t)v38, 0x1FuLL);
  if (*((unsigned char *)a3 + 112)) {
    llvm::IRBuilderBase::CreateMemCpy((uint64_t)(a1 + 1), *((llvm::LLVMContext **)a3 + 15));
  }
  return v29;
}

uint64_t llvm::IRBuilderBase::CreateMemCpy(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::IRBuilderBase::CreateMemTransferInst();
}

uint64_t *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSCSConfiguration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, llvm::Type **a11, uint64_t a12, llvm::Type **a13, llvm::Type **a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  long long v193 = *(_OWORD *)a2;
  uint64_t v194 = *(void *)(a2 + 16);
  if (v194) {
    llvm::MetadataTracking::track();
  }
  uint64_t v184 = a6;
  int v195 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v193);
  if (v194) {
    llvm::MetadataTracking::untrack();
  }
  long long v20 = (llvm::Type *)llvm::PointerType::get();
  uint64_t v21 = (llvm::Type *)llvm::PointerType::get();
  __int16 v199 = 257;
  uint64_t v23 = AGCLLVMBuilder::tryDeducePointeeType(a11, v22);
  uint64_t AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v23, (uint64_t)a11, 0, (uint64_t)v198);
  __int16 v197 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v20, (const llvm::Twine *)v196);
  uint64_t v26 = *(llvm::Type **)(a1 + 200);
  long long v27 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 888))();
  uint64_t v28 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v199 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v27, PointerCast, v28, (const llvm::Twine *)v198);
  __int16 v197 = 257;
  uint64_t v30 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), GEP, v21, (const llvm::Twine *)v196);
  __int16 v202 = 257;
  uint64_t v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v26, (uint64_t)v30, 0, (uint64_t)v201);
  __int16 v32 = *(llvm::Type **)(a1 + 200);
  __int16 v199 = 257;
  uint64_t v33 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v21, a12, 0, (uint64_t)v198);
  __int16 v197 = 257;
  v191 = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v32, v33, 0, (uint64_t)v196);
  v182 = (llvm::Type **)llvm::ConstantInt::get();
  v183 = (llvm::Type **)llvm::ConstantInt::get();
  v179 = (llvm::Type *)llvm::PointerType::get();
  v190 = (llvm::Type *)llvm::PointerType::get();
  v192 = (llvm::Type *)llvm::PointerType::get();
  uint64_t TypeByName = llvm::StructType::getTypeByName();
  __int16 v34 = (llvm::Type *)llvm::PointerType::get();
  if ((a17 & 1) == 0)
  {
    v198[0] = "entry.continue";
    __int16 v199 = 259;
    llvm::BasicBlock::splitBasicBlock();
    v198[0] = "scs.config";
    __int16 v199 = 259;
    operator new();
  }
  __int16 v199 = 257;
  long long v35 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v35, (const llvm::Twine *)v198);
  int v37 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v199 = 257;
  uint64_t v38 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v31, v37, (const llvm::Twine *)v198);
  uint64_t v39 = *(void *)(a1 + 144);
  v201[0] = LShr;
  uint64_t v40 = (llvm::Type **)a3[3];
  __int16 v199 = 257;
  v201[1] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v40, v179, (const llvm::Twine *)v198);
  v201[2] = v38;
  uint64_t v41 = (llvm::Type **)a3[5];
  __int16 v197 = 257;
  v201[3] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v41, v34, (const llvm::Twine *)v196);
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"llvm.agx3.kick.scoped.ray.data.stride.driver.user.data", 54, v39, (uint64_t)v201, 4uLL);
  long long v42 = (llvm::Type **)a3[2];
  __int16 v199 = 257;
  long long v43 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v42, v192, (const llvm::Twine *)v198);
  uint64_t v44 = (llvm::Type **)llvm::ConstantInt::get();
  int v45 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 752))();
  long long v46 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v199 = 257;
  uint64_t v47 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v45, v43, v46, (const llvm::Twine *)v198);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v44, v47, 0);
  uint64_t v48 = *(void *)(a1 + 208);
  __int16 v199 = 257;
  uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)v31, v48, (uint64_t)v198);
  long long v50 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 760))();
  long long v51 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v197 = 257;
  uint64_t v52 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v50, v43, v51, (const llvm::Twine *)v196);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), Cast, v52, 0);
  __int16 v199 = 257;
  long long v54 = AGCLLVMBuilder::tryDeducePointeeType(a11, v53);
  uint64_t v55 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v54, (uint64_t)a11, 0, (uint64_t)v198);
  v200[0] = (uint64_t *)llvm::ConstantInt::get();
  v200[1] = (uint64_t *)llvm::ConstantInt::get();
  __int16 v197 = 257;
  uint64_t v56 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(a1 + 8, TypeByName, v55, v200, 2, (uint64_t)v196);
  __int16 v202 = 257;
  uint64_t v58 = AGCLLVMBuilder::tryDeducePointeeType(v56, v57);
  uint64_t v59 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v58, (uint64_t)v56, 0, (uint64_t)v201);
  uint64_t v60 = *(void *)(a1 + 208);
  __int16 v199 = 257;
  uint64_t v61 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v59, v60, (uint64_t)v198);
  uint64_t v62 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 816))();
  uint64_t v63 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v197 = 257;
  uint64_t v64 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v62, v43, v63, (const llvm::Twine *)v196);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v61, v64, 0);
  if (a13)
  {
    uint64_t v65 = *(llvm::Type **)(a1 + 208);
    (*(void (**)(void))(**(void **)(a1 + 824) + 840))(*(void *)(a1 + 824));
    uint64_t v66 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v199 = 257;
    __int16 v67 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v65, v43, v66, (const llvm::Twine *)v198);
    __int16 v197 = 257;
    long long v68 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v67, v190, (const llvm::Twine *)v196);
    __int16 v199 = 257;
    uint64_t v70 = AGCLLVMBuilder::tryDeducePointeeType(a13, v69);
    uint64_t v71 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v70, (uint64_t)a13, 0, (uint64_t)v198);
    v196[0] = 0;
    v198[0] = "user_data_start";
    __int16 v199 = 259;
    uint64_t Value = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue(a1 + 8, v71, (uint64_t)v196, 1, (uint64_t)v198);
    v196[0] = 1;
    v198[0] = "user_data_end";
    __int16 v199 = 259;
    uint64_t v73 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue(a1 + 8, v71, (uint64_t)v196, 1, (uint64_t)v198);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), Value, (uint64_t)v68, 0);
    uint64_t v74 = *(llvm::Type **)(a1 + 200);
    uint64_t v75 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v199 = 257;
    uint64_t v76 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v74, v68, v75, (const llvm::Twine *)v198);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v73, v76, 0);
  }
  if (a14)
  {
    uint64_t v77 = *(llvm::Type **)(a1 + 208);
    (*(void (**)(void))(**(void **)(a1 + 824) + 848))(*(void *)(a1 + 824));
    int v78 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v199 = 257;
    long long v79 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v77, v43, v78, (const llvm::Twine *)v198);
    __int16 v197 = 257;
    long long v80 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v79, v190, (const llvm::Twine *)v196);
    __int16 v199 = 257;
    int v82 = AGCLLVMBuilder::tryDeducePointeeType(a14, v81);
    uint64_t v83 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v82, (uint64_t)a14, 0, (uint64_t)v198);
    v196[0] = 0;
    v198[0] = "driver_data_start";
    __int16 v199 = 259;
    uint64_t v84 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue(a1 + 8, v83, (uint64_t)v196, 1, (uint64_t)v198);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v84, (uint64_t)v80, 0);
  }
  uint64_t v85 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 952))(a1);
  uint64_t v86 = *(void *)(a1 + 200);
  v198[0] = "vrid";
  __int16 v199 = 259;
  uint64_t v87 = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v85, v86, (uint64_t)v198);
  PerVridSetDataPtr = (llvm::Value *)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(a1, v87, v43);
  __int16 v89 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(void))(**(void **)(a1 + 824) + 928))();
  long long v90 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v199 = 257;
  uint64_t v91 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v89, PerVridSetDataPtr, v90, (const llvm::Twine *)v198);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v182, v91, 0);
  int v92 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(void))(**(void **)(a1 + 824) + 936))();
  long long v93 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v199 = 257;
  uint64_t v94 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v92, PerVridSetDataPtr, v93, (const llvm::Twine *)v198);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v183, v94, 0);
  int v95 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(void))(**(void **)(a1 + 824) + 944))();
  __int16 v96 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v199 = 257;
  uint64_t v97 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v95, PerVridSetDataPtr, v96, (const llvm::Twine *)v198);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v191, v97, 0);
  uint64_t v98 = (llvm::Type **)llvm::ConstantInt::get();
  int v99 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(void))(**(void **)(a1 + 824) + 952))();
  int v100 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v199 = 257;
  uint64_t v101 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v99, PerVridSetDataPtr, v100, (const llvm::Twine *)v198);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v98, v101, 0);
  if (a15)
  {
    uint64_t v103 = *(llvm::Type **)(a1 + 200);
    (*(void (**)(void))(**(void **)(a1 + 824) + 960))(*(void *)(a1 + 824));
    int v104 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v199 = 257;
    __int16 v105 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v103, PerVridSetDataPtr, v104, (const llvm::Twine *)v198);
    __int16 v199 = 257;
    long long v106 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v105, v192, (const llvm::Twine *)v198);
    uint64_t v107 = *(void *)(a1 + 208);
    __int16 v199 = 257;
    uint64_t v108 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, a15, v107, (uint64_t)v198);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v108, (uint64_t)v106, 0);
  }
  if (v184)
  {
    uint64_t v109 = *(llvm::Type **)(a1 + 200);
    (*(void (**)(void))(**(void **)(a1 + 824) + 968))(*(void *)(a1 + 824));
    __int16 v110 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v199 = 257;
    v111 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v109, PerVridSetDataPtr, v110, (const llvm::Twine *)v198);
    __int16 v197 = 257;
    __int16 v112 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v111, v192, (const llvm::Twine *)v196);
    __int16 v199 = 257;
    uint64_t v113 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)v184 + 16), v184, 0, 0, (uint64_t)v198);
    uint64_t v114 = *(void *)(a1 + 208);
    __int16 v197 = 257;
    int v115 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, (uint64_t)v113, v114, (uint64_t)v196);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v115, (uint64_t)v112, 0);
  }
  uint64_t v116 = (llvm::Type **)a4[2];
  __int16 v199 = 257;
  uint64_t v117 = AGCLLVMBuilder::tryDeducePointeeType(v116, v102);
  uint64_t v118 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v117, (uint64_t)v116, 0, (uint64_t)v198);
  uint64_t v119 = *(void *)(a1 + 208);
  __int16 v197 = 257;
  uint64_t v120 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v118, v119, (uint64_t)v196);
  char v121 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 768))();
  uint64_t v122 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v202 = 257;
  uint64_t v123 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v121, v43, v122, (const llvm::Twine *)v201);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v120, v123, 0);
  uint64_t v124 = (llvm::Type **)a4[5];
  __int16 v199 = 257;
  v126 = AGCLLVMBuilder::tryDeducePointeeType(v124, v125);
  uint64_t v127 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v126, (uint64_t)v124, 0, (uint64_t)v198);
  uint64_t v128 = *(void *)(a1 + 208);
  __int16 v197 = 257;
  __int16 v129 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v127, v128, (uint64_t)v196);
  long long v130 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 776))();
  uint64_t v131 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v202 = 257;
  uint64_t v132 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v130, v43, v131, (const llvm::Twine *)v201);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v129, v132, 0);
  v133 = (llvm::Type **)a4[8];
  __int16 v199 = 257;
  v135 = AGCLLVMBuilder::tryDeducePointeeType(v133, v134);
  uint64_t v136 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v135, (uint64_t)v133, 0, (uint64_t)v198);
  uint64_t v137 = *(void *)(a1 + 208);
  __int16 v197 = 257;
  uint64_t v138 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v136, v137, (uint64_t)v196);
  v139 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 784))();
  __int16 v140 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v202 = 257;
  uint64_t v141 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v139, v43, v140, (const llvm::Twine *)v201);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v138, v141, 0);
  __int16 v142 = *(llvm::Type ***)(a5 + 16);
  __int16 v199 = 257;
  __int16 v144 = AGCLLVMBuilder::tryDeducePointeeType(v142, v143);
  uint64_t v145 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v144, (uint64_t)v142, 0, (uint64_t)v198);
  uint64_t v146 = *(void *)(a1 + 208);
  __int16 v197 = 257;
  v147 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v145, v146, (uint64_t)v196);
  __int16 v148 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 792))();
  uint64_t v149 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v202 = 257;
  uint64_t v150 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v148, v43, v149, (const llvm::Twine *)v201);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v147, v150, 0);
  uint64_t v151 = *(llvm::Type ***)(a7 + 16);
  __int16 v199 = 257;
  v153 = AGCLLVMBuilder::tryDeducePointeeType(v151, v152);
  uint64_t v154 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v153, (uint64_t)v151, 0, (uint64_t)v198);
  uint64_t v155 = *(void *)(a1 + 208);
  __int16 v197 = 257;
  v156 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v154, v155, (uint64_t)v196);
  v157 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 800))();
  v158 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v202 = 257;
  uint64_t v159 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v157, v43, v158, (const llvm::Twine *)v201);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v156, v159, 0);
  v160 = *(llvm::Type ***)(a8 + 16);
  __int16 v199 = 257;
  v162 = AGCLLVMBuilder::tryDeducePointeeType(v160, v161);
  uint64_t v163 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v162, (uint64_t)v160, 0, (uint64_t)v198);
  uint64_t v164 = *(void *)(a1 + 208);
  __int16 v197 = 257;
  v165 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v163, v164, (uint64_t)v196);
  v166 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 808))();
  v167 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v202 = 257;
  uint64_t v168 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v166, v43, v167, (const llvm::Twine *)v201);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v165, v168, 0);
  v169 = *(llvm::Type ***)(a10 + 16);
  __int16 v199 = 257;
  v171 = AGCLLVMBuilder::tryDeducePointeeType(v169, v170);
  uint64_t v172 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v171, (uint64_t)v169, 0, (uint64_t)v198);
  uint64_t v173 = *(void *)(a1 + 208);
  __int16 v197 = 257;
  v174 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v172, v173, (uint64_t)v196);
  v175 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 864))();
  v176 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v202 = 257;
  uint64_t v177 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v175, v43, v176, (const llvm::Twine *)v201);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v174, v177, 0);
  *(_OWORD *)a9 = *(_OWORD *)(a1 + 56);
  uint64_t result = llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)(a9 + 16), (llvm::IRBuilderBase *)(a1 + 8));
  *(_DWORD *)(a9 + 24) = *(_DWORD *)(a1 + 104);
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSCSGOTPointer(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  long long v21 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  if (v22) {
    llvm::MetadataTracking::track();
  }
  int v23 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v21);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
  __int16 v20 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v19);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 952))(a1);
  uint64_t v9 = *(void *)(a1 + 200);
  v19[0] = "vrid";
  __int16 v20 = 259;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v8, v9, (uint64_t)v19);
  PerVridSetDataPtr = (llvm::Type **)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(a1, Cast, PointerCast);
  (*(void (**)(void))(**(void **)(a1 + 824) + 968))();
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v20 = 257;
  uint64_t v14 = AGCLLVMBuilder::tryDeducePointeeType(PerVridSetDataPtr, v13);
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v14, (llvm::Value *)PerVridSetDataPtr, v12, (const llvm::Twine *)v19);
  __int16 v20 = 257;
  uint64_t v16 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), GEP, v6, (const llvm::Twine *)v19);
  uint64_t v17 = *(llvm::Type **)(a1 + 208);
  __int16 v20 = 257;
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v17, (uint64_t)v16, 0, (uint64_t)v19);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSCSPerEncoderIndirectionTablePointer(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
  __int16 v15 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v14);
  uint64_t v8 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 824) + 864))();
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v15 = 257;
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v8, PointerCast, v9, (const llvm::Twine *)v14);
  __int16 v15 = 257;
  long long v11 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), GEP, v6, (const llvm::Twine *)v14);
  uint64_t v12 = *(llvm::Type **)(a1 + 208);
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v12, (uint64_t)v11, 0, (uint64_t)v14);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSCSGlobalBindingTablePointer(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  long long v21 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  if (v22) {
    llvm::MetadataTracking::track();
  }
  int v23 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v21);
  if (v22) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
  __int16 v20 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v19);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 952))(a1);
  uint64_t v9 = *(void *)(a1 + 200);
  v19[0] = "vrid";
  __int16 v20 = 259;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v8, v9, (uint64_t)v19);
  PerVridSetDataPtr = (llvm::Type **)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(a1, Cast, PointerCast);
  (*(void (**)(void))(**(void **)(a1 + 824) + 960))();
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v20 = 257;
  uint64_t v14 = AGCLLVMBuilder::tryDeducePointeeType(PerVridSetDataPtr, v13);
  uint64_t GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v14, (llvm::Value *)PerVridSetDataPtr, v12, (const llvm::Twine *)v19);
  __int16 v20 = 257;
  long long v16 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), GEP, v6, (const llvm::Twine *)v19);
  uint64_t v17 = *(llvm::Type **)(a1 + 208);
  __int16 v20 = 257;
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v17, (uint64_t)v16, 0, (uint64_t)v19);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getRayTraversalDepth(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0x1F) {
    int v2 = 31;
  }
  else {
    int v2 = a2;
  }
  unsigned int v3 = 114 * v2;
  if (v3 >= 0x388) {
    unsigned int v3 = 904;
  }
  return (v3 + 119) & 0x7F8;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getVRIDAllocation(uint64_t a1)
{
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"llvm.agx3.ray.id", 16, *(void *)(a1 + 192), 0, 0);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getVRIDAndCoreID(uint64_t a1)
{
  int v2 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"llvm.agx3.ray.pointer", 21, *(void *)(a1 + 192), 0, 0);
  unsigned int v3 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v11 = 257;
  uint64_t v4 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v2, v3, (const llvm::Twine *)v10);
  long long v5 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v11 = 257;
  AShr = (llvm::Value *)llvm::IRBuilderBase::CreateAShr((llvm::IRBuilderBase *)(a1 + 8), v2, v5, (const llvm::Twine *)v10);
  int v7 = (llvm::Value *)llvm::ConstantInt::get();
  v9[16] = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AShr, v7, (const llvm::Twine *)v9);
  return v4;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildIntersectionShaderArgument(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, unsigned int a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unsigned int v11 = 1;
  uint64_t v12 = llvm::PointerType::get();
  uint64_t v13 = 0;
  uint64_t v14 = (llvm::Type *)llvm::PointerType::get();
  switch(a3)
  {
    case 0:
    case 1:
    case 9:
    case 10:
      uint64_t v13 = *(llvm::Type **)(a1 + 264);
      break;
    case 2:
    case 3:
    case 13:
    case 14:
    case 21:
    case 23:
    case 24:
      uint64_t v13 = *(llvm::Type **)(a1 + 168);
      break;
    case 4:
    case 5:
    case 6:
    case 16:
    case 17:
    case 22:
    case 27:
      goto LABEL_7;
    case 7:
    case 8:
      if ((a5 & 0x40) != 0) {
        unsigned int v11 = a6;
      }
      else {
        unsigned int v11 = 1;
      }
LABEL_7:
      uint64_t v13 = *(llvm::Type **)(a1 + 200);
      break;
    case 11:
      uint64_t v13 = *(llvm::Type **)(a1 + 224);
      break;
    case 12:
    case 15:
      uint64_t v13 = *(llvm::Type **)(a1 + 184);
      break;
    case 19:
    case 20:
      uint64_t v13 = *(llvm::Type **)(a1 + 264);
      unsigned int v11 = 4;
      break;
    case 25:
    case 26:
      uint64_t v13 = (llvm::Type *)v12;
      break;
    default:
      break;
  }
  uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 56) + 56) + 80);
  if (v15) {
    long long v16 = (llvm::BasicBlock *)(v15 - 24);
  }
  else {
    long long v16 = 0;
  }
  uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v16);
  if (FirstInsertionPt) {
    int v18 = (llvm::Instruction *)(FirstInsertionPt - 24);
  }
  else {
    int v18 = 0;
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), v18);
  uint64_t v19 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(PointerCast) = 257;
  Alloca = (llvm::Type **)llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)(a1 + 8), v13, v19, (const llvm::Twine *)v39);
  long long v36 = *(_OWORD *)a2;
  uint64_t v37 = *(void *)(a2 + 16);
  if (v37) {
    llvm::MetadataTracking::track();
  }
  int v38 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v36);
  if (v37) {
    llvm::MetadataTracking::untrack();
  }
  if (*(unsigned char *)(a1 + 1810)) {
    long long v21 = "agx.get_intersection_shader_argument_legacy";
  }
  else {
    long long v21 = "agx.get_intersection_shader_argument";
  }
  std::string::basic_string[abi:nn180100]<0>(v32, v21);
  uint64_t v22 = __p;
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v32, (_DWORD *)a4);
  if ((v35 & 0x80u) == 0)
  {
    uint64_t v23 = v35;
  }
  else
  {
    uint64_t v22 = (void **)__p[0];
    uint64_t v23 = (uint64_t)__p[1];
  }
  uint64_t v24 = *(void *)(a1 + 144);
  uint64_t v25 = *(void *)(a4 + 8);
  v39[0] = *(void *)(a4 + 24);
  v39[1] = v25;
  v39[2] = llvm::ConstantInt::get();
  v39[3] = llvm::ConstantInt::get();
  __int16 v31 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), Alloca, v14, (const llvm::Twine *)v30);
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v22, v23, v24, (uint64_t)v39, 5uLL);
  if ((char)v35 < 0) {
    operator delete(__p[0]);
  }
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (v11 <= 1)
  {
    LOWORD(PointerCast) = 257;
    long long v27 = AGCLLVMBuilder::tryDeducePointeeType(Alloca, v26);
    return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v27, (uint64_t)Alloca, 0, (uint64_t)v39);
  }
  return (uint64_t)Alloca;
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::createGPUVAMasks(void *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::needsShaderDepthClamp()
{
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::supportsHWMeshShading()
{
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::supportsMeshShading()
{
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::supportsBarycentricCoords()
{
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::supportsPrimitiveID()
{
  return 1;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildConvertHFP8_Vector(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  void v85[4] = *MEMORY[0x1E4F143B8];
  long long v77 = *(_OWORD *)a2;
  uint64_t v78 = *(void *)(a2 + 16);
  if (v78) {
    llvm::MetadataTracking::track();
  }
  int v79 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v77);
  if (v78) {
    llvm::MetadataTracking::untrack();
  }
  unsigned int v11 = *(_DWORD *)(*(void *)a3 + 32);
  std::string::basic_string[abi:nn180100]<0>(v80, "f32");
  v80[3] = *(void *)(a1 + 168);
  std::string::basic_string[abi:nn180100]<0>(v81, "f16");
  v81[3] = *(void *)(a1 + 152);
  std::string::basic_string[abi:nn180100]<0>(v82, "bf16");
  v82[3] = *(void *)(a1 + 160);
  std::string::basic_string[abi:nn180100]<0>(v83, "f8e5m2");
  v83[3] = *(void *)(a1 + 184);
  std::string::basic_string[abi:nn180100]<0>(v84, "f8e4m3");
  v84[3] = *(void *)(a1 + 184);
  std::string::basic_string[abi:nn180100]<0>(v85, "f8e4m3fn");
  uint64_t v12 = 0;
  v85[3] = *(void *)(a1 + 184);
  v76[0] = 0;
  v76[1] = 0;
  uint64_t v75 = v76;
  do
  {
    std::__tree<std::__value_type<std::string,llvm::Type *>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::Type *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::Type *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,llvm::Type *> const&>((uint64_t)&v75, v76, &v80[v12], (uint64_t)&v80[v12]);
    v12 += 4;
  }
  while (v12 != 24);
  for (uint64_t i = 0; i != -24; i -= 4)
  {
    if (SHIBYTE(v85[i + 2]) < 0) {
      operator delete((void *)v85[i]);
    }
  }
  unsigned int v14 = v11 >> 1;
  std::map<std::string,llvm::Type *>::at((uint64_t)&v75, (void *)a5);
  uint64_t v15 = llvm::FixedVectorType::get();
  unsigned int v53 = a6;
  if (a6)
  {
    uint64_t v51 = v15;
    llvm::FixedVectorType::get();
    long long v16 = (llvm::Value *)llvm::UndefValue::get();
    char v52 = v11;
    if (v11 >= 2)
    {
      uint64_t v17 = 0;
      if (v14 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v14;
      }
      uint64_t v54 = a5;
      uint64_t v55 = v18;
      uint64_t v19 = 1;
      do
      {
        std::map<std::string,llvm::Type *>::at((uint64_t)&v75, (void *)a4);
        llvm::FixedVectorType::get();
        __int16 v20 = (llvm::Value *)llvm::UndefValue::get();
        LOWORD(v81[0]) = 257;
        long long v21 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v21, (const llvm::Twine *)v80);
        __int16 v74 = 257;
        uint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
        Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v20, Element, v23, (const llvm::Twine *)v73);
        LOWORD(v81[0]) = 257;
        uint64_t v25 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v26 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v25, (const llvm::Twine *)v80);
        __int16 v74 = 257;
        long long v27 = (llvm::Value *)llvm::ConstantInt::get();
        uint64_t v28 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v26, v27, (const llvm::Twine *)v73);
        long long v70 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(&v71, (llvm::IRBuilderBase *)(a1 + 8));
        int v72 = *(_DWORD *)(a1 + 104);
        if (*(char *)(a4 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
        }
        else {
          std::string v69 = *(std::string *)a4;
        }
        a5 = v54;
        if (*(char *)(v54 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v54, *(void *)(v54 + 8));
        }
        else {
          std::string v68 = *(std::string *)v54;
        }
        uint64_t v29 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, std::string *, std::string *, uint64_t, uint64_t))(*(void *)a1 + 800))(a1, &v70, v28, &v69, &v68, 1, 1);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v69.__r_.__value_.__l.__data_);
        }
        if (v71) {
          llvm::MetadataTracking::untrack();
        }
        LOWORD(v81[0]) = 257;
        uint64_t v30 = (llvm::Value *)llvm::ConstantInt::get();
        long long v16 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v16, v29, v30, (const llvm::Twine *)v80);
        ++v17;
        v19 += 2;
      }
      while (v55 != v17);
    }
    LOWORD(v81[0]) = 257;
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v16, v51, (uint64_t)v80);
  }
  else
  {
    uint64_t v32 = llvm::FixedVectorType::get();
    LOWORD(v81[0]) = 257;
    a3 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)a3, v32, (uint64_t)v80);
    uint64_t Cast = (llvm::Value *)llvm::UndefValue::get();
    if (v11 < 2) {
      goto LABEL_50;
    }
    char v52 = v11;
    uint64_t v33 = 0;
    if (v14 <= 1) {
      uint64_t v34 = 1;
    }
    else {
      uint64_t v34 = v14;
    }
    uint64_t v56 = v34;
    uint64_t v35 = 1;
    do
    {
      LOWORD(v81[0]) = 257;
      long long v36 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v37 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v36, (const llvm::Twine *)v80);
      long long v65 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(&v66, (llvm::IRBuilderBase *)(a1 + 8));
      int v67 = *(_DWORD *)(a1 + 104);
      if (*(char *)(a4 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
      }
      else {
        std::string v64 = *(std::string *)a4;
      }
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string v63 = *(std::string *)a5;
      }
      int v38 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, std::string *, std::string *, void, uint64_t))(*(void *)a1 + 800))(a1, &v65, v37, &v64, &v63, 0, 1);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (v66) {
        llvm::MetadataTracking::untrack();
      }
      LOWORD(v81[0]) = 257;
      uint64_t v39 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v40 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v38, v39, (const llvm::Twine *)v80);
      __int16 v74 = 257;
      uint64_t v41 = (llvm::Value *)llvm::ConstantInt::get();
      long long v42 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), Cast, v40, v41, (const llvm::Twine *)v73);
      LOWORD(v81[0]) = 257;
      long long v43 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v44 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v38, v43, (const llvm::Twine *)v80);
      __int16 v74 = 257;
      int v45 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v42, v44, v45, (const llvm::Twine *)v73);
      ++v33;
      v35 += 2;
    }
    while (v56 != v33);
  }
  LOBYTE(v11) = v52;
LABEL_50:
  if (v11)
  {
    LOWORD(v81[0]) = 257;
    long long v46 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v47 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v46, (const llvm::Twine *)v80);
    long long v60 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v61, (llvm::IRBuilderBase *)(a1 + 8));
    int v62 = *(_DWORD *)(a1 + 104);
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v59 = *(std::string *)a4;
    }
    if (*(char *)(a5 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    }
    else {
      std::string v58 = *(std::string *)a5;
    }
    uint64_t v48 = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, uint64_t, std::string *, std::string *, void, void))(*(void *)a1 + 800))(a1, &v60, v47, &v59, &v58, v53, 0);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (v61) {
      llvm::MetadataTracking::untrack();
    }
    LOWORD(v81[0]) = 257;
    unsigned int v49 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), Cast, v48, v49, (const llvm::Twine *)v80);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(v76[0]);
  return Cast;
}

uint64_t std::__tree<std::__value_type<std::string,llvm::Type *>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::Type *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::Type *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,llvm::Type *> const&>(uint64_t result, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = (uint64_t **)(result + 8);
  if ((void *)(result + 8) != a2)
  {
    uint64_t result = std::less<std::string>::operator()[abi:nn180100](a3, a2 + 4);
    if (!result)
    {
      uint64_t result = std::less<std::string>::operator()[abi:nn180100](a2 + 4, a3);
      if (!result)
      {
        uint64_t v22 = a2;
        uint64_t v23 = (uint64_t **)a2;
        unsigned int v14 = &v22;
        if (a2) {
          return result;
        }
        goto LABEL_31;
      }
      uint64_t v12 = a2[1];
      if (v12)
      {
        uint64_t v13 = (uint64_t *)a2[1];
        do
        {
          unsigned int v14 = (uint64_t **)v13;
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        uint64_t v17 = (uint64_t **)a2;
        do
        {
          unsigned int v14 = (uint64_t **)v17[2];
          BOOL v16 = *v14 == (uint64_t *)v17;
          uint64_t v17 = v14;
        }
        while (!v16);
      }
      if (v14 == v8 || (uint64_t result = std::less<std::string>::operator()[abi:nn180100](a3, v14 + 4), result))
      {
        if (v12)
        {
          uint64_t v23 = v14;
        }
        else
        {
          uint64_t v23 = (uint64_t **)a2;
          unsigned int v14 = (uint64_t **)(a2 + 1);
        }
LABEL_30:
        if (*v14) {
          return result;
        }
        goto LABEL_31;
      }
LABEL_29:
      uint64_t result = (uint64_t)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v7, &v23, a3);
      unsigned int v14 = (uint64_t **)result;
      goto LABEL_30;
    }
  }
  uint64_t v9 = *a2;
  if (*(void **)v7 != a2)
  {
    if (v9)
    {
      __int16 v10 = (void *)*a2;
      do
      {
        unsigned int v11 = v10;
        __int16 v10 = (void *)v10[1];
      }
      while (v10);
    }
    else
    {
      uint64_t v15 = a2;
      do
      {
        unsigned int v11 = (void *)v15[2];
        BOOL v16 = *v11 == (void)v15;
        uint64_t v15 = v11;
      }
      while (v16);
    }
    uint64_t result = std::less<std::string>::operator()[abi:nn180100](v11 + 4, a3);
    if (result) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
  unsigned int v11 = a2;
LABEL_17:
  if (v9)
  {
    uint64_t v23 = (uint64_t **)v11;
    unsigned int v14 = (uint64_t **)(v11 + 1);
    goto LABEL_30;
  }
  uint64_t v23 = (uint64_t **)a2;
  unsigned int v14 = (uint64_t **)a2;
LABEL_31:
  uint64_t v18 = (uint64_t *)operator new(0x40uLL);
  uint64_t v19 = (std::string *)(v18 + 4);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v18[6] = *(void *)(a4 + 16);
  }
  v18[7] = *(void *)(a4 + 24);
  uint64_t v20 = (uint64_t)v23;
  uint64_t *v18 = 0;
  v18[1] = 0;
  void v18[2] = v20;
  *unsigned int v14 = v18;
  uint64_t v21 = **(void **)v7;
  if (v21)
  {
    *(void *)uint64_t v7 = v21;
    uint64_t v18 = *v14;
  }
  uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v18);
  ++*(void *)(v7 + 16);
  return result;
}

uint64_t std::map<std::string,llvm::Type *>::at(uint64_t a1, void *a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    abort();
  }
  return v2 + 56;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildConvertHFP8_F2F(void *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5, int a6, int a7)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&v86, "f8e4m3");
  LOWORD(v89) = 0;
  std::string::basic_string[abi:nn180100]<0>(v90, "f8e4m3fn");
  LOWORD(v91) = 1;
  std::string::basic_string[abi:nn180100]<0>(v92, "f8e5m2");
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  LOWORD(v93) = 2;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  long long v80 = &v81;
  while (1)
  {
    uint64_t v13 = &v86 + 4 * v12;
    unsigned int v14 = &v81;
    if (v80 != &v81)
    {
      uint64_t v15 = v11;
      BOOL v16 = &v81;
      if (v11)
      {
        do
        {
          unsigned int v14 = (uint64_t **)v15;
          uint64_t v15 = (uint64_t *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          unsigned int v14 = (uint64_t **)v16[2];
          BOOL v37 = *v14 == (uint64_t *)v16;
          BOOL v16 = v14;
        }
        while (v37);
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v14 + 4, &v86 + 4 * v12))
      {
        uint64_t v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v80, &v78, &v86 + 4 * v12);
LABEL_11:
        if (*v17) {
          goto LABEL_20;
        }
        goto LABEL_14;
      }
    }
    if (v11)
    {
      uint64_t v78 = v14;
      uint64_t v17 = v14 + 1;
      goto LABEL_11;
    }
    uint64_t v78 = &v81;
    uint64_t v17 = &v81;
LABEL_14:
    uint64_t v18 = (char *)operator new(0x40uLL);
    uint64_t v19 = (std::string *)(v18 + 32);
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)*v13, (std::string::size_type)v13[1]);
    }
    else
    {
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)v13;
      *((void *)v18 + 6) = v13[2];
    }
    *((_WORD *)v18 + 28) = v90[4 * v12 - 1];
    uint64_t v20 = v78;
    *(void *)uint64_t v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = v20;
    llvm::Type *v17 = (uint64_t *)v18;
    if (*v80)
    {
      long long v80 = (uint64_t **)*v80;
      uint64_t v18 = (char *)*v17;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v81, (uint64_t *)v18);
    ++v82;
LABEL_20:
    if (++v12 == 3) {
      break;
    }
    unsigned int v11 = v81;
  }
  for (uint64_t i = 0; i != -12; i -= 4)
  {
    if (SHIBYTE(v92[i + 2]) < 0) {
      operator delete((void *)v92[i]);
    }
  }
  std::string::basic_string[abi:nn180100]<0>(&v86, "f32");
  uint64_t v22 = (llvm::Type **)(a1 + 21);
  uint64_t v89 = a1[21];
  std::string::basic_string[abi:nn180100]<0>(v90, "f16");
  uint64_t v91 = a1[19];
  std::string::basic_string[abi:nn180100]<0>(v92, "bf16");
  uint64_t v23 = 0;
  uint64_t v93 = a1[20];
  v79[0] = 0;
  v79[1] = 0;
  uint64_t v78 = (uint64_t **)v79;
  do
  {
    std::__tree<std::__value_type<std::string,llvm::Type *>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::Type *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::Type *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,llvm::Type *> const&>((uint64_t)&v78, v79, (void **)((char *)&v86 + v23), (uint64_t)&v86 + v23);
    v23 += 32;
  }
  while (v23 != 96);
  for (uint64_t j = 0; j != -12; j -= 4)
  {
    if (SHIBYTE(v92[j + 2]) < 0) {
      operator delete((void *)v92[j]);
    }
  }
  long long v75 = *(_OWORD *)a2;
  uint64_t v76 = *(void *)(a2 + 16);
  if (v76) {
    llvm::MetadataTracking::track();
  }
  int v77 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v75);
  if (v76) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v25 = (llvm::Value *)llvm::ConstantInt::get();
  uint64_t v26 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v90[0]) = 257;
  long long v27 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 1), v26, v25, (const llvm::Twine *)&v86);
  if (a6)
  {
    if (MGGetBoolAnswer())
    {
      uint64_t Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_HFP8_ENABLE_SATURATE", v28);
      FPExt = (llvm::Value *)a3;
      if (Value && *Value != 48) {
        atoi(Value);
      }
    }
    else
    {
      FPExt = (llvm::Value *)a3;
    }
    long long v50 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v90[0]) = 257;
    uint64_t v51 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 1), v50, v27, (const llvm::Twine *)&v86);
    std::map<std::string,llvm::Type *>::at((uint64_t)&v80, a5);
    char v52 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v90[0]) = 257;
    uint64_t v53 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 1), v52, v51, (const llvm::Twine *)&v86);
    if (a7)
    {
      LOWORD(v90[0]) = 257;
      uint64_t v54 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), FPExt, v54, (const llvm::Twine *)&v86);
      LOWORD(v90[0]) = 257;
      uint64_t v56 = (llvm::Value *)llvm::ConstantInt::get();
      uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), FPExt, v56, (const llvm::Twine *)&v86);
      FPExt = (llvm::Value *)Element;
    }
    else
    {
      uint64_t v57 = (llvm::Value *)llvm::ConstantFP::get();
    }
    std::string v58 = a4;
    int v59 = *((char *)a4 + 23);
    if (v59 < 0)
    {
      if (*((void *)a4 + 1) != 3) {
        goto LABEL_88;
      }
      std::string v58 = *(unsigned __int16 **)a4;
    }
    else if (v59 != 3)
    {
      goto LABEL_88;
    }
    int v60 = *v58;
    int v61 = *((unsigned __int8 *)v58 + 2);
    if (v60 != 13158 || v61 != 50)
    {
LABEL_88:
      std::string v63 = *v22;
      LOWORD(v90[0]) = 257;
      FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 1), FPExt, v63, (const llvm::Twine *)&v86);
      std::string v64 = *v22;
      LOWORD(v90[0]) = 257;
      uint64_t v57 = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 1), v57, v64, (const llvm::Twine *)&v86);
    }
    long long v65 = &v74;
    std::string::basic_string[abi:nn180100]<0>(&v74, "llvm.agx3.pack.hfp8");
    uint64_t v66 = (llvm::Value *)a1[21];
    uint64_t __src = a1[24];
    uint64_t v84 = (uint64_t)v66;
    uint64_t v85 = v66;
    uint64_t v86 = &v88;
    uint64_t v87 = 0x200000000;
    llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v86, &__src, &v86);
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0
      || (long long v65 = (std::string *)v74.__r_.__value_.__r.__words[0]) != 0)
    {
      strlen((const char *)v65);
    }
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    uint64_t v68 = v67;
    if (v86 != &v88) {
      free(v86);
    }
    uint64_t __src = v53;
    uint64_t v84 = (uint64_t)FPExt;
    uint64_t v85 = v57;
    LOWORD(v90[0]) = 257;
    uint64_t v44 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v68 + 24), v68, (uint64_t)&__src, 3, (uint64_t)&v86);
    if ((a7 & 1) == 0)
    {
      uint64_t v69 = a1[23];
      LOWORD(v90[0]) = 257;
      uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, (uint64_t)v44, v69, (uint64_t)&v86);
LABEL_96:
      uint64_t v44 = (llvm::Value *)Cast;
    }
    goto LABEL_97;
  }
  std::map<std::string,llvm::Type *>::at((uint64_t)&v80, a4);
  __int16 v31 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v90[0]) = 257;
  uint64_t v32 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 1), v31, v27, (const llvm::Twine *)&v86);
  int v33 = *((char *)a5 + 23);
  if (v33 < 0)
  {
    if (*((void *)a5 + 1) != 3) {
      goto LABEL_51;
    }
    uint64_t v34 = *(unsigned __int16 **)a5;
  }
  else
  {
    uint64_t v34 = a5;
    if (v33 != 3) {
      goto LABEL_51;
    }
  }
  int v35 = *v34;
  int v36 = *((unsigned __int8 *)v34 + 2);
  BOOL v37 = v35 == 12646 && v36 == 54;
  if (!v37) {
LABEL_51:
  }
    uint64_t v22 = (llvm::Type **)std::map<std::string,llvm::Type *>::at((uint64_t)&v78, a5);
  int v38 = *v22;
  if ((a7 & 1) == 0)
  {
    uint64_t v39 = a1[24];
    LOWORD(v90[0]) = 257;
    a3 = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 39, a3, v39, (uint64_t)&v86);
  }
  uint64_t v40 = &v74;
  std::string::basic_string[abi:nn180100]<0>(&v74, "llvm.agx3.unpack.hfp8.");
  if (v38 == (llvm::Type *)a1[21]) {
    uint64_t v41 = "f32";
  }
  else {
    uint64_t v41 = "bf16";
  }
  std::string::append(&v74, v41);
  llvm::FixedVectorType::get();
  uint64_t __src = a1[24];
  uint64_t v84 = __src;
  uint64_t v86 = &v88;
  uint64_t v87 = 0x200000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v86, &__src, &v85);
  if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0
    || (uint64_t v40 = (std::string *)v74.__r_.__value_.__r.__words[0]) != 0)
  {
    strlen((const char *)v40);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v43 = v42;
  if (v86 != &v88) {
    free(v86);
  }
  uint64_t __src = v32;
  uint64_t v84 = a3;
  LOWORD(v90[0]) = 257;
  uint64_t v44 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v43 + 24), v43, (uint64_t)&__src, 2, (uint64_t)&v86);
  if (!a7)
  {
    LOWORD(v90[0]) = 257;
    int v45 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v44 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v44, v45, (const llvm::Twine *)&v86);
  }
  int v46 = *((char *)a5 + 23);
  if (v46 < 0)
  {
    if (*((void *)a5 + 1) != 3) {
      goto LABEL_97;
    }
    a5 = *(unsigned __int16 **)a5;
  }
  else if (v46 != 3)
  {
    goto LABEL_97;
  }
  if (*a5 == 12646 && *((unsigned char *)a5 + 2) == 54)
  {
    uint64_t v48 = (llvm::Type *)a1[19];
    LOWORD(v90[0]) = 257;
    uint64_t Cast = llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(a1 + 1), v44, v48, (const llvm::Twine *)&v86);
    goto LABEL_96;
  }
LABEL_97:
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(v79[0]);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((char *)v81);
  return v44;
}

unint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildConvertHFP8_ParseArgTypes@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(result + 1814))
  {
    long long v5 = operator new(0x40uLL);
    a3[1] = v5 + 4;
    a3[2] = v5 + 4;
    *long long v5 = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    *a3 = v5;
    uint64_t v6 = *(void *)(a2 - 32);
    if (!v6 || *(unsigned char *)(v6 + 16) || *(void *)(v6 + 24) != *(void *)(a2 + 72)) {
      uint64_t v6 = 0;
    }
    llvm::Value::getName((llvm::Value *)v6);
    if (llvm::StringRef::find() == -1)
    {
      uint64_t result = llvm::StringRef::find();
      if (result != -1)
      {
        uint64_t v17 = *(void *)(a2 - 32);
        if (!v17 || *(unsigned char *)(v17 + 16) || *(void *)(v17 + 24) != *(void *)(a2 + 72)) {
          uint64_t v17 = 0;
        }
        uint64_t v18 = 0;
        uint64_t Name = llvm::Value::getName((llvm::Value *)v17);
        unint64_t v30 = v19;
        do
        {
          uint64_t v20 = llvm::StringRef::find();
          uint64_t result = llvm::StringRef::find();
          unint64_t v21 = v30;
          unint64_t v22 = v20 + 4;
          if (v30 < v20 + 4) {
            unint64_t v22 = v30;
          }
          unint64_t v23 = Name + v22;
          if (v22 <= result) {
            unint64_t v24 = result;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v30 >= v24) {
            unint64_t v21 = v24;
          }
          unint64_t v25 = v21 - v22;
          uint64_t v26 = (unint64_t *)&v5[v18];
          *uint64_t v26 = v23;
          v26[1] = v25;
          ++v18;
        }
        while (v18 != 4);
      }
    }
    else
    {
      uint64_t v7 = *(void *)(a2 - 32);
      if (!v7 || *(unsigned char *)(v7 + 16) || *(void *)(v7 + 24) != *(void *)(a2 + 72)) {
        uint64_t v7 = 0;
      }
      uint64_t v8 = 0;
      uint64_t v27 = llvm::Value::getName((llvm::Value *)v7);
      unint64_t v29 = v9;
      do
      {
        uint64_t v10 = llvm::StringRef::find();
        uint64_t result = llvm::StringRef::find();
        unint64_t v11 = v29;
        unint64_t v12 = v10 + 5;
        if (v29 < v10 + 5) {
          unint64_t v12 = v29;
        }
        unint64_t v13 = v27 + v12;
        if (v12 <= result) {
          unint64_t v14 = result;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v29 >= v14) {
          unint64_t v11 = v14;
        }
        unint64_t v15 = v11 - v12;
        BOOL v16 = (unint64_t *)&v5[v8];
        unint64_t *v16 = v13;
        v16[1] = v15;
        ++v8;
      }
      while (v8 != 4);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrixInit(uint64_t *a1, llvm::Instruction *a2, int a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  long long v5 = a1 + 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 1), a2);
  uint64_t v6 = *(llvm::Type **)a2;
  uint64_t v7 = *((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  int v28 = *(_DWORD *)(*(void *)a2 + 32);
  uint64_t v8 = **(llvm::Type ***)(*(void *)a2 + 16);
  AllocaInEntryBlocuint64_t k = AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)a1, *(llvm::Type **)a2);
  uint64_t __src = (void *)llvm::Type::getPrimitiveSizeInBits(v8);
  uint64_t v38 = v10;
  unsigned int v11 = llvm::TypeSize::operator unsigned long long();
  uint64_t v12 = llvm::IntegerType::get();
  uint64_t v13 = llvm::PointerType::get();
  __int16 v40 = 257;
  uint64_t Cast = (void *)llvm::IRBuilderBase::CreateCast((uint64_t)v5, 49, AllocaInEntryBlock, v13, (uint64_t)&__src);
  __int16 v40 = 257;
  uint64_t v15 = llvm::IRBuilderBase::CreateCast((uint64_t)v5, 49, v7, v12, (uint64_t)&__src);
  uint64_t __src = Cast;
  uint64_t v38 = v15;
  uint64_t v34 = v36;
  uint64_t v35 = 0x200000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&v34, &__src, v39);
  uint64_t __src = v39;
  uint64_t v38 = 0x200000000;
  if (v35)
  {
    BOOL v16 = (uint64_t **)v34;
    uint64_t v17 = 8 * v35;
    do
    {
      uint64_t v18 = *v16++;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, *v18);
      v17 -= 8;
    }
    while (v17);
  }
  std::string::basic_string[abi:nn180100]<0>(&v33, "agx.simd_matrix_");
  if (v28 == 256) {
    unint64_t v19 = "16x16_";
  }
  else {
    unint64_t v19 = "8x8_";
  }
  std::string::append(&v33, v19);
  std::to_string(&v30, v11);
  uint64_t v20 = std::string::insert(&v30, 0, "sz");
  std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  uint64_t v32 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (v32 >= 0) {
    unint64_t v22 = __p;
  }
  else {
    unint64_t v22 = (void **)__p[0];
  }
  if (v32 >= 0) {
    std::string::size_type v23 = HIBYTE(v32);
  }
  else {
    std::string::size_type v23 = (std::string::size_type)__p[1];
  }
  std::string::append(&v33, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  std::string::append(&v33, "_init");
  if (a3) {
    unint64_t v24 = "_diag";
  }
  else {
    unint64_t v24 = "_filled";
  }
  std::string::append(&v33, v24);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v26 = v25;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (__src != v39) {
    free(__src);
  }
  __int16 v40 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)v5, *(void *)(v26 + 24), v26, (uint64_t)v34, v35, (uint64_t)&__src);
  __int16 v40 = 257;
  llvm::IRBuilderBase::CreateAlignedLoad(v5, v6, AllocaInEntryBlock, 0, (uint64_t)&__src);
  if (v34 != v36) {
    free(v34);
  }
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrixStore(uint64_t *a1, llvm::Instruction *a2)
{
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 1), a2);
  uint64_t v4 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrixLoadStoreImpl(a1, 1, **(void **)v4, *(llvm::Type ***)v4, *((llvm::Type ***)v4 + 4), *((void *)v4 + 8), *((void *)v4 + 12), *((void *)v4 + 16));
  llvm::Instruction::eraseFromParent(a2);
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrixLoadStoreImpl(uint64_t *a1, int a2, uint64_t a3, llvm::Type **a4, llvm::Type **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = a1 + 1;
  uint64_t v15 = a1[25];
  __int16 v57 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, a6, v15, (uint64_t)&PrimitiveSizeInBits);
  uint64_t v17 = a1[31];
  __int16 v57 = 257;
  uint64_t v18 = llvm::IRBuilderBase::CreateCast((uint64_t)v14, 38, a7, v17, (uint64_t)&PrimitiveSizeInBits);
  int v42 = *(_DWORD *)(a3 + 32);
  unint64_t v19 = **(llvm::Type ***)(a3 + 16);
  AllocaInEntryBlocuint64_t k = (llvm::Type **)AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)a1, (llvm::Type *)a3);
  int v43 = a2;
  if (a2) {
    llvm::IRBuilderBase::CreateAlignedStore(v14, a4, (uint64_t)AllocaInEntryBlock, 0);
  }
  PrimitiveSizeInBits = (uint64_t **)llvm::Type::getPrimitiveSizeInBits(v19);
  uint64_t v55 = v21;
  unsigned int v22 = llvm::TypeSize::operator unsigned long long();
  llvm::IntegerType::get();
  uint64_t v44 = (llvm::Value *)AllocaInEntryBlock;
  std::string::size_type v23 = (llvm::Type *)llvm::PointerType::get();
  __int16 v57 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)v14, AllocaInEntryBlock, v23, (const llvm::Twine *)&PrimitiveSizeInBits);
  uint64_t v25 = (llvm::Type *)llvm::PointerType::get();
  __int16 v57 = 257;
  uint64_t __src = PointerCast;
  uint64_t v51 = (uint64_t)llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)v14, a5, v25, (const llvm::Twine *)&PrimitiveSizeInBits);
  v52[0] = Cast;
  v52[1] = v18;
  v52[2] = a8;
  PrimitiveSizeInBits = (uint64_t **)v56;
  uint64_t v55 = 0x500000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)&PrimitiveSizeInBits, &__src, v53);
  uint64_t __src = v52;
  uint64_t v51 = 0x500000000;
  if (v55)
  {
    uint64_t v26 = PrimitiveSizeInBits;
    uint64_t v27 = 8 * v55;
    do
    {
      int v28 = *v26++;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, *v28);
      v27 -= 8;
    }
    while (v27);
  }
  std::string::basic_string[abi:nn180100]<0>(&v49, "agx.simd_matrix_");
  int v29 = *((_DWORD *)*a5 + 2);
  if ((v29 & 0xFE) == 0x12) {
    int v29 = *(_DWORD *)(**((void **)*a5 + 2) + 8);
  }
  if (v42 == 256) {
    std::string v30 = "16x16_";
  }
  else {
    std::string v30 = "8x8_";
  }
  std::string::append(&v49, v30);
  std::to_string(&v48, v22);
  __int16 v31 = std::string::insert(&v48, 0, "sz");
  std::string::size_type v32 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  uint64_t v46 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v46 >= 0) {
    std::string v33 = __p;
  }
  else {
    std::string v33 = (void **)__p[0];
  }
  if (v46 >= 0) {
    std::string::size_type v34 = HIBYTE(v46);
  }
  else {
    std::string::size_type v34 = (std::string::size_type)__p[1];
  }
  std::string::append(&v49, (const std::string::value_type *)v33, v34);
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  unsigned int v35 = v29 & 0xFFFFFF00;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v35 == 768) {
    int v36 = "_threadgroup";
  }
  else {
    int v36 = "_device";
  }
  std::string::append(&v49, v36);
  if (v43) {
    BOOL v37 = "_store";
  }
  else {
    BOOL v37 = "_load";
  }
  std::string::append(&v49, v37);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  __int16 v47 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)v14, *(void *)(v38 + 24), v38, (uint64_t)PrimitiveSizeInBits, v55, (uint64_t)__p);
  if (v43)
  {
    uint64_t AlignedLoad = 0;
  }
  else
  {
    __int16 v47 = 257;
    uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v14, (llvm::Type *)a3, (uint64_t)v44, 0, (uint64_t)__p);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (__src != v52) {
    free(__src);
  }
  if (PrimitiveSizeInBits != (uint64_t **)v56) {
    free(PrimitiveSizeInBits);
  }
  return AlignedLoad;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrixLoad(uint64_t *a1, llvm::Instruction *a2)
{
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 1), a2);
  uint64_t v4 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrixLoadStoreImpl(a1, 0, *(void *)a2, 0, *(llvm::Type ***)v4, *((void *)v4 + 4), *((void *)v4 + 8), *((void *)v4 + 12));
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulate(uint64_t a1, llvm::Instruction *a2, int a3, char a4, char a5, char a6)
{
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = (llvm::Value **)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  std::string::size_type v23 = *v13;
  unint64_t v24 = v13[4];
  unint64_t v14 = v13[8];
  uint64_t v22 = llvm::ConstantInt::get();
  uint64_t v21 = llvm::ConstantInt::get();
  (*(void (**)(void **__return_ptr, uint64_t, llvm::Instruction *))(*(void *)a1 + 792))(&__p, a1, a2);
  uint64_t v25 = 0;
  std::string __dst = 0;
  uint64_t v27 = 0;
  uint64_t v15 = __p;
  int64_t v16 = v29 - (unsigned char *)__p;
  if (v29 == __p)
  {
    AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulateImpl(a1, v12, v23, v22, v24, v21, v14, a3, a4, a5, a6, (uint64_t *)&v25);
  }
  else
  {
    std::vector<llvm::StringRef>::__vallocate[abi:nn180100](&v25, v16 >> 4);
    int v20 = a3;
    uint64_t v17 = (char *)__dst;
    memmove(__dst, v15, v16);
    std::string __dst = &v17[v16];
    uint64_t v18 = v25;
    AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulateImpl(a1, v12, v23, v22, v24, v21, v14, v20, a4, a5, a6, (uint64_t *)&v25);
    if (v18) {
      operator delete(v18);
    }
  }
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  if (__p)
  {
    int v29 = __p;
    operator delete(__p);
  }
  return 1;
}

char *std::vector<llvm::StringRef>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    abort();
  }
  uint64_t result = (char *)operator new(16 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulateImpl(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4, llvm::Value *a5, uint64_t a6, llvm::Value *a7, int a8, char a9, char a10, char a11, uint64_t *a12)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = (llvm::IRBuilderBase *)(a1 + 8);
  uint64_t v19 = *(void *)(a1 + 200);
  LOWORD(v117) = 257;
  uint64_t Cast = (unsigned char *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, a4, v19, (uint64_t)v115);
  uint64_t v20 = *(void *)(a1 + 200);
  LOWORD(v117) = 257;
  uint64_t v84 = v18;
  int v79 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v18, 39, a6, v20, (uint64_t)v115);
  uint64_t v21 = llvm::FixedVectorType::get();
  uint64_t v81 = llvm::FixedVectorType::get();
  uint64_t v80 = llvm::FixedVectorType::get();
  llvm::FixedVectorType::get();
  uint64_t v22 = 0;
  long long v117 = 0u;
  long long v118 = 0u;
  *(_OWORD *)int v115 = 0u;
  long long v116 = 0u;
  do
    v115[v22++] = (void *)llvm::ConstantInt::get();
  while (v22 != 8);
  std::string::size_type v23 = (llvm::Value *)llvm::ConstantVector::get();
  LOWORD(v155) = 257;
  uint64_t ShuffleVector = (unint64_t *)llvm::IRBuilderBase::CreateShuffleVector(v18, a3, a3, v23, (const llvm::Twine *)&__src);
  LOWORD(v155) = 257;
  unint64_t v24 = (unint64_t *)llvm::IRBuilderBase::CreateShuffleVector(v18, a5, a5, v23, (const llvm::Twine *)&__src);
  LOWORD(v155) = 257;
  FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector(v18, a7, a7, v23, (const llvm::Twine *)&__src);
  if (*a12 == a12[1])
  {
    uint64_t v26 = (llvm::Type *)v21;
  }
  else
  {
    *(_OWORD *)int v115 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((uint64_t *)&v116, v18);
    DWORD2(v116) = *(_DWORD *)(a1 + 104);
    if ((unint64_t)(a12[1] - *a12) <= 0x10) {
      goto LABEL_133;
    }
    uint64_t v26 = (llvm::Type *)v21;
    if (llvm::StringRef::find() != -1)
    {
      long long v112 = *(_OWORD *)v115;
      uint64_t v113 = v116;
      if ((void)v116) {
        llvm::MetadataTracking::track();
      }
      int v114 = DWORD2(v116);
      uint64_t v27 = *a12;
      if ((unint64_t)(a12[1] - *a12) <= 0x10) {
        goto LABEL_133;
      }
      int v28 = *(void **)(v27 + 16);
      if (v28)
      {
        std::string::basic_string[abi:nn180100](__dst, v28, *(void *)(v27 + 24));
      }
      else
      {
        __dst[0] = 0;
        __dst[1] = 0;
        uint64_t v111 = 0;
      }
      std::string::basic_string[abi:nn180100]<0>(__p, "bf16");
      uint64_t ShuffleVector = (unint64_t *)(*(uint64_t (**)(uint64_t, long long *, unint64_t *, void **, void **, void))(*(void *)a1 + 808))(a1, &v112, ShuffleVector, __dst, __p, 0);
      if (v109 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v111) < 0) {
        operator delete(__dst[0]);
      }
      if (v113) {
        llvm::MetadataTracking::untrack();
      }
    }
    if ((unint64_t)(a12[1] - *a12) <= 0x20) {
      goto LABEL_133;
    }
    if (llvm::StringRef::find() != -1)
    {
      long long v105 = *(_OWORD *)v115;
      uint64_t v106 = v116;
      if ((void)v116) {
        llvm::MetadataTracking::track();
      }
      int v107 = DWORD2(v116);
      uint64_t v29 = *a12;
      if ((unint64_t)(a12[1] - *a12) <= 0x20) {
        goto LABEL_133;
      }
      std::string v30 = *(void **)(v29 + 32);
      if (v30)
      {
        std::string::basic_string[abi:nn180100](v103, v30, *(void *)(v29 + 40));
      }
      else
      {
        v103[0] = 0;
        v103[1] = 0;
        uint64_t v104 = 0;
      }
      std::string::basic_string[abi:nn180100]<0>(v101, "bf16");
      unint64_t v24 = (unint64_t *)(*(uint64_t (**)(uint64_t, long long *, unint64_t *, void **, void **, void))(*(void *)a1 + 808))(a1, &v105, v24, v103, v101, 0);
      if (v102 < 0) {
        operator delete(v101[0]);
      }
      if (SHIBYTE(v104) < 0) {
        operator delete(v103[0]);
      }
      if (v106) {
        llvm::MetadataTracking::untrack();
      }
    }
    if ((unint64_t)(a12[1] - *a12) <= 0x30) {
      goto LABEL_133;
    }
    if (llvm::StringRef::find() != -1)
    {
      long long v98 = *(_OWORD *)v115;
      uint64_t v99 = v116;
      if ((void)v116) {
        llvm::MetadataTracking::track();
      }
      int v100 = DWORD2(v116);
      uint64_t v31 = *a12;
      if ((unint64_t)(a12[1] - *a12) <= 0x30) {
        goto LABEL_133;
      }
      std::string::size_type v32 = *(void **)(v31 + 48);
      if (v32)
      {
        std::string::basic_string[abi:nn180100](v96, v32, *(void *)(v31 + 56));
      }
      else
      {
        v96[0] = 0;
        v96[1] = 0;
        uint64_t v97 = 0;
      }
      std::string::basic_string[abi:nn180100]<0>(v94, "f32");
      FPExt = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *, void **, void **, void))(*(void *)a1 + 808))(a1, &v98, FPExt, v96, v94, 0);
      if (v95 < 0) {
        operator delete(v94[0]);
      }
      if (SHIBYTE(v97) < 0) {
        operator delete(v96[0]);
      }
      if (v99) {
        llvm::MetadataTracking::untrack();
      }
    }
    if ((void)v116) {
      llvm::MetadataTracking::untrack();
    }
  }
  if (a8)
  {
    uint64_t v33 = *(void *)(a1 + 208);
    LOWORD(v117) = 257;
    uint64_t ShuffleVector = (unint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v84, 49, (uint64_t)ShuffleVector, v33, (uint64_t)v115);
    uint64_t v34 = *(void *)(a1 + 208);
    LOWORD(v117) = 257;
    unint64_t v24 = (unint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v84, 49, (uint64_t)v24, v34, (uint64_t)v115);
  }
  else if (*(llvm::Type **)FPExt != v26)
  {
    LOWORD(v117) = 257;
    FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v84, FPExt, v26, (const llvm::Twine *)v115);
  }
  unsigned int v35 = (void *)v81;
  uint64_t v82 = FPExt;
  int v36 = 0;
  uint64_t v37 = 0;
  memset(&v93, 0, sizeof(v93));
  v115[0] = v35;
  v115[1] = ".v8f16";
  *(void *)&long long v116 = v26;
  *((void *)&v116 + 1) = ".v8f32";
  *(void *)&long long v117 = v80;
  *((void *)&v117 + 1) = ".v8bf16";
  v152 = 0;
  unint64_t v153 = 0;
  uint64_t v38 = &v152;
  uint64_t __src = &v152;
  while (1)
  {
    uint64_t v39 = &v115[2 * v37];
    __int16 v40 = &v152;
    if (v38 == &v152) {
      goto LABEL_60;
    }
    uint64_t v41 = v36;
    int v42 = &v152;
    if (v36)
    {
      do
      {
        __int16 v40 = (uint64_t **)v41;
        uint64_t v41 = (uint64_t *)v41[1];
      }
      while (v41);
    }
    else
    {
      do
      {
        __int16 v40 = (uint64_t **)v42[2];
        BOOL v43 = *v40 == (uint64_t *)v42;
        int v42 = v40;
      }
      while (v43);
    }
    uint64_t v44 = *v39;
    if (v40[4] < *v39)
    {
LABEL_60:
      int v45 = v36 ? v40 : &v152;
      uint64_t v46 = v36 ? v40 + 1 : &v152;
    }
    else
    {
      int v45 = &v152;
      uint64_t v46 = &v152;
      if (v36)
      {
        uint64_t v46 = &v152;
        while (1)
        {
          while (1)
          {
            int v45 = (uint64_t **)v36;
            unint64_t v49 = v36[4];
            if ((unint64_t)v44 >= v49) {
              break;
            }
            int v36 = *v45;
            uint64_t v46 = v45;
            if (!*v45) {
              goto LABEL_67;
            }
          }
          if (v49 >= (unint64_t)v44) {
            break;
          }
          uint64_t v46 = v45 + 1;
          int v36 = v45[1];
          if (!v36) {
            goto LABEL_67;
          }
        }
      }
    }
    if (!*v46)
    {
LABEL_67:
      __int16 v47 = operator new(0x30uLL);
      v47[2] = *(_OWORD *)v39;
      *(void *)__int16 v47 = 0;
      *((void *)v47 + 1) = 0;
      *((void *)v47 + 2) = v45;
      llvm::Value *v46 = (uint64_t *)v47;
      if (*__src)
      {
        uint64_t __src = (uint64_t **)*__src;
        std::string v48 = *v46;
      }
      else
      {
        std::string v48 = (uint64_t *)v47;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v152, v48);
      ++v153;
    }
    if (++v37 == 3) {
      break;
    }
    uint64_t v38 = __src;
    int v36 = v152;
  }
  if (a8)
  {
    MEMORY[0x1CB7A04E0](&v93, "llvm.agx3.igemm16x16x16");
    if (a11) {
      long long v50 = ".sat";
    }
    else {
      long long v50 = "";
    }
    std::string::append(&v93, v50);
  }
  else
  {
    MEMORY[0x1CB7A04E0](&v93, "llvm.agx3.fgemm16x16x16");
    uint64_t v51 = (const std::string::value_type **)std::map<llvm::Type * const,char const*>::at(v152, *ShuffleVector);
    std::string::append(&v93, *v51);
    char v52 = (const std::string::value_type **)std::map<llvm::Type * const,char const*>::at(v152, *v24);
    std::string::append(&v93, *v52);
  }
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v152);
  uint64_t v53 = *(uint64_t **)(a1 + 200);
  uint64_t __src = (uint64_t **)*ShuffleVector;
  v152 = v53;
  unint64_t v153 = *v24;
  uint64_t v154 = v53;
  uint64_t v155 = *(void *)v82;
  v115[0] = &v116;
  v115[1] = (void *)0x500000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)v115, &__src, &v156);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v54 = &v93;
LABEL_90:
    strlen((const char *)v54);
    goto LABEL_91;
  }
  uint64_t v54 = (std::string *)v93.__r_.__value_.__r.__words[0];
  if (v93.__r_.__value_.__r.__words[0]) {
    goto LABEL_90;
  }
LABEL_91:
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  uint64_t v56 = v55;
  if (v115[0] != &v116) {
    free(v115[0]);
  }
  __int16 v57 = Cast;
  if (Cast[16] != 16 || *((unsigned char *)v79 + 16) != 16)
  {
    uint64_t v61 = *(void *)(a1 + 56);
    v115[0] = "gemm.switch.merge";
    LOWORD(v117) = 259;
    uint64_t v62 = llvm::BasicBlock::splitBasicBlock();
    uint64_t v63 = *(void *)(v61 + 40);
    if (v63 == v61 + 40)
    {
      uint64_t v66 = 0;
    }
    else
    {
      std::string v64 = (llvm::Instruction *)(v63 - 24);
      if (v63) {
        uint64_t v65 = v63 - 24;
      }
      else {
        uint64_t v65 = 0;
      }
      if (*(unsigned __int8 *)(v65 + 16) - 29 >= 0xB) {
        uint64_t v66 = 0;
      }
      else {
        uint64_t v66 = v64;
      }
    }
    llvm::Instruction::eraseFromParent(v66);
    *(void *)(a1 + 56) = v61;
    *(void *)(a1 + 64) = v61 + 40;
    LOWORD(v117) = 257;
    uint64_t v67 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v84, (llvm::Value *)Cast, v67, (const llvm::Twine *)v115);
    LOWORD(v155) = 257;
    uint64_t v69 = llvm::IRBuilderBase::CreateOr(v84, v79, Shl, (const llvm::Twine *)&__src);
    llvm::IRBuilderBase::CreateSwitch((uint64_t *)v84, v69, v62, 4);
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    v115[0] = "gemm.switch";
    *(void *)&long long v116 = 0;
    LOWORD(v117) = 2307;
    operator new();
  }
  if (a8)
  {
    if (a9)
    {
      uint64_t v58 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v117) = 257;
      __int16 v57 = (void *)llvm::IRBuilderBase::CreateOr(v84, (llvm::Value *)Cast, v58, (const llvm::Twine *)v115);
    }
    if (a10)
    {
      int v59 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v117) = 257;
      int v79 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v84, v79, v59, (const llvm::Twine *)v115);
    }
  }
  v115[0] = ShuffleVector;
  v115[1] = v57;
  *(void *)&long long v116 = v24;
  *((void *)&v116 + 1) = v79;
  *(void *)&long long v117 = v82;
  LOWORD(v155) = 257;
  FPTrunc = llvm::IRBuilderBase::CreateCall((uint64_t)v84, *(void *)(v56 + 24), v56, (uint64_t)v115, 5, (uint64_t)&__src);
  if ((a8 & 1) == 0 && **(void **)(a2 + 16) != *(void *)(a1 + 168))
  {
    if (*a12 == a12[1] || llvm::StringRef::find() == -1)
    {
      uint64_t v71 = (llvm::Type *)llvm::FixedVectorType::get();
      LOWORD(v117) = 257;
      FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v84, FPTrunc, v71, (const llvm::Twine *)v115);
      goto LABEL_126;
    }
    long long v90 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(&v91, v84);
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::basic_string[abi:nn180100]<0>(v88, "f32");
    uint64_t v70 = *a12;
    if (a12[1] != *a12)
    {
      if (*(void *)v70)
      {
        std::string::basic_string[abi:nn180100](v86, *(void **)v70, *(void *)(v70 + 8));
      }
      else
      {
        v86[0] = 0;
        v86[1] = 0;
        uint64_t v87 = 0;
      }
      FPTrunc = (llvm::Value *)(*(uint64_t (**)(uint64_t, long long *, llvm::Value *, void **, void **, uint64_t))(*(void *)a1 + 808))(a1, &v90, FPTrunc, v88, v86, 1);
      if (SHIBYTE(v87) < 0) {
        operator delete(v86[0]);
      }
      if (v89 < 0) {
        operator delete(v88[0]);
      }
      if (v91) {
        llvm::MetadataTracking::untrack();
      }
      goto LABEL_126;
    }
LABEL_133:
    abort();
  }
LABEL_126:
  uint64_t v72 = 0;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  long long v141 = 0u;
  long long v142 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  *(_OWORD *)int v115 = 0u;
  long long v116 = 0u;
  do
    v115[v72++] = (void *)llvm::ConstantInt::get();
  while (v72 != 8);
  for (uint64_t i = 8; i != 256; ++i)
    v115[i] = (void *)llvm::UndefValue::get();
  std::string v74 = (llvm::Value *)llvm::ConstantVector::get();
  LOWORD(v155) = 257;
  uint64_t v75 = llvm::IRBuilderBase::CreateShuffleVector(v84, FPTrunc, FPTrunc, v74, (const llvm::Twine *)&__src);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  return v75;
}

void *std::map<llvm::Type * const,char const*>::at(void *a1, unint64_t a2)
{
  if (!a1) {
LABEL_7:
  }
    abort();
  while (1)
  {
    while (1)
    {
      unint64_t v2 = a1[4];
      if (v2 <= a2) {
        break;
      }
      a1 = (void *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (void *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands(uint64_t a1, llvm::Instruction *a2, int a3, char a4, char a5, char a6)
{
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  unint64_t v14 = *(llvm::Value **)v13;
  std::string::size_type v23 = (llvm::Value *)*((void *)v13 + 8);
  uint64_t v24 = *((void *)v13 + 4);
  uint64_t v21 = (llvm::Value *)*((void *)v13 + 16);
  uint64_t v22 = *((void *)v13 + 12);
  (*(void (**)(void **__return_ptr, uint64_t, llvm::Instruction *))(*(void *)a1 + 792))(&__p, a1, a2);
  uint64_t v25 = 0;
  std::string __dst = 0;
  uint64_t v27 = 0;
  uint64_t v15 = __p;
  int64_t v16 = v29 - (unsigned char *)__p;
  if (v29 == __p)
  {
    AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulateImpl(a1, v12, v14, v24, v23, v22, v21, a3, a4, a5, a6, (uint64_t *)&v25);
  }
  else
  {
    std::vector<llvm::StringRef>::__vallocate[abi:nn180100](&v25, v16 >> 4);
    int v20 = a3;
    uint64_t v17 = (char *)__dst;
    memmove(__dst, v15, v16);
    std::string __dst = &v17[v16];
    uint64_t v18 = v25;
    AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulateImpl(a1, v12, v14, v24, v23, v22, v21, v20, a4, a5, a6, (uint64_t *)&v25);
    if (v18) {
      operator delete(v18);
    }
  }
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
  return 1;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdYield(uint64_t *a1, uint64_t a2, llvm::CmpInst **a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = llvm::ConstantInt::get();
  __int16 v13 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 37, a3, v6, (uint64_t)v12);
  llvm::ConstantInt::get();
  __int16 v18 = 257;
  uint64_t Select = llvm::IRBuilderBase::CreateSelect();
  uint64_t v8 = a1[24];
  __int16 v13 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, Select, v8, (uint64_t)v12);
  uint64_t v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx3.yield", 15, a1[18], a1[24]);
  v17[0] = Cast;
  __int16 v13 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v10 + 24), v10, (uint64_t)v17, 1, (uint64_t)v12);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(uint64_t a1, uint64_t a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 - 32);
  if (!v4 || *(unsigned char *)(v4 + 16) || *(void *)(v4 + 24) != *(void *)(a2 + 72)) {
    uint64_t v4 = 0;
  }
  uint64_t Name = llvm::Value::getName((llvm::Value *)v4);
  uint64_t v68 = v5;
  if (llvm::StringRef::find() == -1)
  {
    if (llvm::StringRef::find() == -1)
    {
      return 0;
    }
    else
    {
      uint64_t v6 = 0;
      if (((llvm::CallBase::arg_end((llvm::CallBase *)a2) - (a2 + 32 * -(*(_DWORD *)(a2 + 20) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0xA0)
      {
        {
          uint64_t v52 = 0;
          AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::order_map = 0u;
          *(_OWORD *)&qword_1EA614DF0 = 0u;
          dword_1EA614E00 = 1065353216;
          do
          {
            std::__hash_table<std::__hash_value_type<AIR::MemoryOrder,char const*>,std::__unordered_map_hasher<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::hash<AIR::MemoryOrder>,std::equal_to<AIR::MemoryOrder>,true>,std::__unordered_map_equal<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::equal_to<AIR::MemoryOrder>,std::hash<AIR::MemoryOrder>,true>,std::allocator<std::__hash_value_type<AIR::MemoryOrder,char const*>>>::__emplace_unique_key_args<AIR::MemoryOrder,std::pair<AIR::MemoryOrder const,char const*> const&>((uint64_t)&AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::order_map, *(_DWORD *)((char *)&unk_1E65EC3F0 + v52), (char *)&unk_1E65EC3F0 + v52);
            v52 += 16;
          }
          while (v52 != 48);
          __cxa_atexit((void (*)(void *))std::unordered_map<AIR::MemoryOrder,char const*>::~unordered_map[abi:nn180100], &AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::order_map, &dword_1CAC02000);
        }
        {
          uint64_t v53 = 0;
          AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::scope_map = 0u;
          *(_OWORD *)&qword_1EA614E20 = 0u;
          dword_1EA614E30 = 1065353216;
          do
          {
            std::__hash_table<std::__hash_value_type<AIR::MemoryOrder,char const*>,std::__unordered_map_hasher<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::hash<AIR::MemoryOrder>,std::equal_to<AIR::MemoryOrder>,true>,std::__unordered_map_equal<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::equal_to<AIR::MemoryOrder>,std::hash<AIR::MemoryOrder>,true>,std::allocator<std::__hash_value_type<AIR::MemoryOrder,char const*>>>::__emplace_unique_key_args<AIR::MemoryOrder,std::pair<AIR::MemoryOrder const,char const*> const&>((uint64_t)&AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::scope_map, *(_DWORD *)((char *)&unk_1E65EC420 + v53), (char *)&unk_1E65EC420 + v53);
            v53 += 16;
          }
          while (v53 != 32);
          __cxa_atexit((void (*)(void *))std::unordered_map<AIR::MemoryScope,char const*>::~unordered_map[abi:nn180100], &AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::scope_map, &dword_1CAC02000);
        }
        {
          uint64_t v54 = 0;
          AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::volat_map = 0u;
          *(_OWORD *)&qword_1EA614E50 = 0u;
          dword_1EA614E60 = 1065353216;
          do
          {
            std::__hash_table<std::__hash_value_type<BOOL,char const*>,std::__unordered_map_hasher<BOOL,std::__hash_value_type<BOOL,char const*>,std::hash<BOOL>,std::equal_to<BOOL>,true>,std::__unordered_map_equal<BOOL,std::__hash_value_type<BOOL,char const*>,std::equal_to<BOOL>,std::hash<BOOL>,true>,std::allocator<std::__hash_value_type<BOOL,char const*>>>::__emplace_unique_key_args<BOOL,std::pair<BOOL const,char const*> const&>((uint64_t)&AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::volat_map, byte_1E65EC440[v54], &byte_1E65EC440[v54]);
            v54 += 16;
          }
          while (v54 != 32);
          __cxa_atexit((void (*)(void *))std::unordered_map<BOOL,char const*>::~unordered_map[abi:nn180100], &AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::volat_map, &dword_1CAC02000);
        }
        uint64_t v8 = (std::string::size_type **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        unint64_t v9 = *v8;
        uint64_t v10 = v8[16];
        std::string::size_type v11 = **v8;
        int v12 = *(_DWORD *)(v11 + 8);
        if ((v12 & 0xFE) == 0x12) {
          int v12 = *(_DWORD *)(**(void **)(v11 + 16) + 8);
        }
        __int16 v13 = v8[4];
        long long v14 = v8[8];
        unsigned int v15 = v12 & 0xFFFFFF00;
        int v16 = v8[12];
        std::string::basic_string[abi:nn180100]<0>(&v61, "air.simdgroup_atomic.wait.i32.");
        if (v15 == 256) {
          uint64_t v17 = "device.";
        }
        else {
          uint64_t v17 = "threadgroup.";
        }
        __int16 v18 = std::string::append(&v61, v17);
        std::string::size_type v19 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        memset(v59, 0, sizeof(v59));
        int v60 = dword_1EA614E60;
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>((uint64_t)v59, qword_1EA614E48);
        for (uint64_t i = qword_1EA614E50; i; uint64_t i = *(void *)i)
          std::__hash_table<std::__hash_value_type<BOOL,char const*>,std::__unordered_map_hasher<BOOL,std::__hash_value_type<BOOL,char const*>,std::hash<BOOL>,std::equal_to<BOOL>,true>,std::__unordered_map_equal<BOOL,std::__hash_value_type<BOOL,char const*>,std::equal_to<BOOL>,std::hash<BOOL>,true>,std::allocator<std::__hash_value_type<BOOL,char const*>>>::__emplace_unique_key_args<BOOL,std::pair<BOOL const,char const*> const&>((uint64_t)v59, *(unsigned char *)(i + 16), (_OWORD *)(i + 16));
        unsigned int v21 = *((_DWORD *)v10 + 8);
        if (v21 > 0x40) {
          uint64_t v22 = *(void *)v10[3];
        }
        else {
          uint64_t v22 = (uint64_t)(v10[3] << -(char)v21) >> -(char)v21;
        }
        unint64_t v23 = v22 != 0;
        if (*((void *)&v59[0] + 1) <= v23) {
          uint64_t v24 = *((void *)&v59[0] + 1);
        }
        else {
          uint64_t v24 = 0;
        }
        uint8x8_t v25 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v59 + 8));
        v25.i16[0] = vaddlv_u8(v25);
        uint64_t v26 = v23 - v24;
        if (v25.u32[0] <= 1uLL) {
          uint64_t v26 = (DWORD2(v59[0]) + 1) & v23;
        }
        uint64_t v27 = *(uint64_t ***)(*(void *)&v59[0] + 8 * v26);
        do
        {
          do
            uint64_t v27 = (uint64_t **)*v27;
          while (v27[1] != (uint64_t *)v23);
        }
        while (*((unsigned __int8 *)v27 + 16) != v23);
        int v28 = std::string::append(&v62, (const std::string::value_type *)v27[3]);
        std::string::size_type v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        std::string v30 = std::string::append(&v63, ".");
        std::string::size_type v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        memset(v57, 0, sizeof(v57));
        int v58 = dword_1EA614E00;
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>((uint64_t)v57, qword_1EA614DE8);
        for (uint64_t j = qword_1EA614DF0; j; uint64_t j = *(void *)j)
          std::__hash_table<std::__hash_value_type<AIR::MemoryOrder,char const*>,std::__unordered_map_hasher<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::hash<AIR::MemoryOrder>,std::equal_to<AIR::MemoryOrder>,true>,std::__unordered_map_equal<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::equal_to<AIR::MemoryOrder>,std::hash<AIR::MemoryOrder>,true>,std::allocator<std::__hash_value_type<AIR::MemoryOrder,char const*>>>::__emplace_unique_key_args<AIR::MemoryOrder,std::pair<AIR::MemoryOrder const,char const*> const&>((uint64_t)v57, *(_DWORD *)(j + 16), (_OWORD *)(j + 16));
        unsigned int v33 = *((_DWORD *)v14 + 8);
        if (v33 > 0x40) {
          uint64_t v34 = *(void *)v14[3];
        }
        else {
          uint64_t v34 = (uint64_t)(v14[3] << -(char)v33) >> -(char)v33;
        }
        uint8x8_t v35 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v57 + 8));
        v35.i16[0] = vaddlv_u8(v35);
        if (v35.u32[0] > 1uLL)
        {
          unint64_t v36 = (int)v34;
          if (*((void *)&v57[0] + 1) <= (unint64_t)(int)v34) {
            unint64_t v36 = (unint64_t)(int)v34 % *((void *)&v57[0] + 1);
          }
        }
        else
        {
          unint64_t v36 = (*((void *)&v57[0] + 1) - 1) & (int)v34;
        }
        uint64_t v37 = *(uint64_t **)(*(void *)&v57[0] + 8 * v36);
        do
        {
          do
            uint64_t v37 = (uint64_t *)*v37;
          while (v37[1] != (int)v34);
        }
        while (*((_DWORD *)v37 + 4) != v34);
        uint64_t v38 = std::string::append(&v64, (const std::string::value_type *)v37[3]);
        std::string::size_type v39 = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v71.__r_.__value_.__r.__words[2] = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        __int16 v40 = std::string::append(&v71, ".");
        std::string::size_type v41 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        memset(v55, 0, sizeof(v55));
        int v56 = dword_1EA614E30;
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>((uint64_t)v55, qword_1EA614E18);
        for (uint64_t k = qword_1EA614E20; k; uint64_t k = *(void *)k)
          std::__hash_table<std::__hash_value_type<AIR::MemoryOrder,char const*>,std::__unordered_map_hasher<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::hash<AIR::MemoryOrder>,std::equal_to<AIR::MemoryOrder>,true>,std::__unordered_map_equal<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::equal_to<AIR::MemoryOrder>,std::hash<AIR::MemoryOrder>,true>,std::allocator<std::__hash_value_type<AIR::MemoryOrder,char const*>>>::__emplace_unique_key_args<AIR::MemoryOrder,std::pair<AIR::MemoryOrder const,char const*> const&>((uint64_t)v55, *(_DWORD *)(k + 16), (_OWORD *)(k + 16));
        unsigned int v43 = *((_DWORD *)v16 + 8);
        if (v43 > 0x40) {
          uint64_t v44 = *(void *)v16[3];
        }
        else {
          uint64_t v44 = (uint64_t)(v16[3] << -(char)v43) >> -(char)v43;
        }
        uint8x8_t v45 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v55 + 8));
        v45.i16[0] = vaddlv_u8(v45);
        if (v45.u32[0] > 1uLL)
        {
          unint64_t v46 = (int)v44;
          if (*((void *)&v55[0] + 1) <= (unint64_t)(int)v44) {
            unint64_t v46 = (unint64_t)(int)v44 % *((void *)&v55[0] + 1);
          }
        }
        else
        {
          unint64_t v46 = (*((void *)&v55[0] + 1) - 1) & (int)v44;
        }
        __int16 v47 = *(uint64_t **)(*(void *)&v55[0] + 8 * v46);
        do
        {
          do
            __int16 v47 = (uint64_t *)*v47;
          while (v47[1] != (int)v44);
        }
        while (*((_DWORD *)v47 + 4) != v44);
        std::string v48 = std::string::append(&v69, (const std::string::value_type *)v47[3]);
        std::string::size_type v49 = v48->__r_.__value_.__r.__words[2];
        long long v65 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        std::string::size_type v66 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::~__hash_table((uint64_t)v55);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v69.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::~__hash_table((uint64_t)v57);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::~__hash_table((uint64_t)v59);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), (llvm::Instruction *)a2);
        std::string::size_type v50 = *v13;
        v69.__r_.__value_.__r.__words[0] = *v9;
        v69.__r_.__value_.__l.__size_ = v50;
        llvm::FunctionType::get();
        llvm::Module::getOrInsertFunction();
        v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
        v71.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
        __int16 v70 = 257;
        llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v51 + 24), v51, (uint64_t)&v71, 2, (uint64_t)&v69);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
        AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(a1, "spin_limit");
      }
    }
  }
  else
  {
    llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
    return 1;
  }
  return v6;
}

void std::__hash_table<std::__hash_value_type<AIR::MemoryOrder,char const*>,std::__unordered_map_hasher<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::hash<AIR::MemoryOrder>,std::equal_to<AIR::MemoryOrder>,true>,std::__unordered_map_equal<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::equal_to<AIR::MemoryOrder>,std::hash<AIR::MemoryOrder>,true>,std::allocator<std::__hash_value_type<AIR::MemoryOrder,char const*>>>::__emplace_unique_key_args<AIR::MemoryOrder,std::pair<AIR::MemoryOrder const,char const*> const&>(uint64_t a1, int a2, _OWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  int v12 = operator new(0x20uLL);
  v12[1] = v6;
  *((_OWORD *)v12 + 1) = *a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *int v12 = *v20;
LABEL_38:
    void *v20 = v12;
    goto LABEL_39;
  }
  uint64_t v21 = *(void *)(a1 + 16);
  *int v12 = v21;
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (v21)
  {
    unint64_t v22 = *(void *)(v21 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }
    else
    {
      v22 &= v7 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void std::__hash_table<std::__hash_value_type<BOOL,char const*>,std::__unordered_map_hasher<BOOL,std::__hash_value_type<BOOL,char const*>,std::hash<BOOL>,std::equal_to<BOOL>,true>,std::__unordered_map_equal<BOOL,std::__hash_value_type<BOOL,char const*>,std::equal_to<BOOL>,std::hash<BOOL>,true>,std::allocator<std::__hash_value_type<BOOL,char const*>>>::__emplace_unique_key_args<BOOL,std::pair<BOOL const,char const*> const&>(uint64_t a1, unsigned __int8 a2, _OWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    uint64_t v9 = v7 <= a2 ? *(void *)(a1 + 8) : 0;
    uint64_t v10 = a2 - v9;
    uint64_t v3 = v8.u32[0] <= 1uLL ? (v7 + 1) & a2 : v10;
    unint64_t v11 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v13 = (unint64_t)i[1];
        if (v13 == a2)
        {
          if (*((unsigned __int8 *)i + 16) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v13 >= v7) {
              v13 %= v7;
            }
          }
          else
          {
            v13 &= v7 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  float v14 = operator new(0x20uLL);
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(a1, v20);
    unint64_t v7 = *(void *)(a1 + 8);
    if (v7 <= v6) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v6;
    }
    if ((v7 & (v7 - 1)) != 0) {
      uint64_t v3 = v21;
    }
    else {
      uint64_t v3 = (v7 + 1) & v6;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *float v14 = *v23;
LABEL_40:
    void *v23 = v14;
    goto LABEL_41;
  }
  uint64_t v24 = *(void *)(a1 + 16);
  *float v14 = v24;
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (v24)
  {
    unint64_t v25 = *(void *)(v24 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7) {
        v25 %= v7;
      }
    }
    else
    {
      v25 &= v7 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(int a1, char *__s)
{
  {
    std::string::basic_string[abi:nn180100]<0>(&AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix, "translator.agx3.simdgroup_atomic_wait.get_");
    __cxa_atexit(MEMORY[0x1E4FBA210], &AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix, &dword_1CAC02000);
  }
  {
    uint64_t v9 = byte_1EA614E87;
    if (byte_1EA614E87 < 0) {
      uint64_t v9 = qword_1EA614E78;
    }
    AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix_length = v9;
  }
  if (byte_1EA614E87 >= 0) {
    size_t v3 = byte_1EA614E87;
  }
  else {
    size_t v3 = qword_1EA614E78;
  }
  size_t v4 = strlen(__s);
  uint64_t v5 = &v10;
  std::string::basic_string[abi:nn180100]((uint64_t)&v10, v3 + v4);
  if (v11 < 0) {
    uint64_t v5 = v10;
  }
  if (v3)
  {
    if (byte_1EA614E87 >= 0) {
      unint64_t v6 = &AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix;
    }
    else {
      unint64_t v6 = (uint64_t *)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix;
    }
    memmove(v5, v6, v3);
  }
  unint64_t v7 = (char *)v5 + v3;
  if (v4) {
    memmove(v7, __s, v4);
  }
  v7[v4] = 0;
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  *(_WORD *)(inserted + 18) &= 0xC00Fu;
  operator new();
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMemCpy2D()
{
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  *(_WORD *)(inserted + 18) &= 0xC00Fu;
  operator new();
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMemCpy1D(uint64_t a1, llvm::Instruction *a2)
{
  v13[5] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 8;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v12[0] = v13;
  v12[1] = (void *)0x500000000;
  unint64_t v5 = llvm::CallBase::arg_end(a2) - (void)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  if ((int)(v5 >> 5) >= 1)
  {
    uint64_t v6 = (v5 >> 5);
    unint64_t v7 = a2;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v12, *((void *)v7 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
      unint64_t v7 = (llvm::Instruction *)((char *)v7 + 32);
      --v6;
    }
    while (v6);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 1848))(a1, v12);
  uint64_t v9 = *(void *)a2;
  __int16 v11 = 257;
  llvm::IRBuilderBase::CreateCast(v4, 48, v8, v9, (uint64_t)v10);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  if (v12[0] != v13) {
    free(v12[0]);
  }
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildImageBaseLevelExtract(void *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v17 = *(_OWORD *)a2;
  uint64_t v18 = *(void *)(a2 + 16);
  if (v18) {
    llvm::MetadataTracking::track();
  }
  int v19 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v17);
  if (v18) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v16 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v15);
  v14[16] = 257;
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, GEP, 0, (uint64_t)v14);
  int v12 = (llvm::Type **)(*(uint64_t (**)(void *, uint64_t))(*a1 + 1904))(a1, AlignedLoad);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v12, a4, 0);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildImageMipCountExtract(void *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  long long v22 = *(_OWORD *)a2;
  uint64_t v23 = *(void *)(a2 + 16);
  if (v23) {
    llvm::MetadataTracking::track();
  }
  int v24 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v22);
  if (v23) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)a1[26];
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v21 = 257;
  uint64_t GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v20);
  __int16 v19 = 257;
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, GEP, 0, (uint64_t)v18);
  int v12 = (llvm::Value *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 1904))(a1, AlignedLoad);
  unint64_t v13 = (llvm::Value *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 1912))(a1, AlignedLoad);
  __int16 v21 = 257;
  uint64_t Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 1), v13, v12, (const llvm::Twine *)v20);
  float v15 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v19 = 257;
  uint64_t Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Sub, v15, (const llvm::Twine *)v18);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Add, a4, 0);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getExecutionScopedSamplerStateRegisterCount()
{
  return 0;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getVertexInputRegister()
{
  return 0;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMeshVaryingWrite(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type **a5)
{
  _OWORD v19[3] = *MEMORY[0x1E4F143B8];
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v10 = (llvm::Type *)llvm::PointerType::get();
  __int16 v15 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a5, v10, (const llvm::Twine *)v14);
  uint64_t v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx3.mesh.varying.write", 28, a1[18], a1[24], a1[24], (uint64_t)v10);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = PointerCast;
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v12 + 24), v12, (uint64_t)v19, 3, (uint64_t)v14);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMeshPrimattrWrite(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type **a5)
{
  _OWORD v19[3] = *MEMORY[0x1E4F143B8];
  long long v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17) {
    llvm::MetadataTracking::track();
  }
  int v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v16);
  if (v17) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v10 = (llvm::Type *)llvm::PointerType::get();
  __int16 v15 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a5, v10, (const llvm::Twine *)v14);
  uint64_t v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx3.mesh.primattr.write", 29, a1[18], a1[24], a1[24], (uint64_t)v10);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = PointerCast;
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v12 + 24), v12, (uint64_t)v19, 3, (uint64_t)v14);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMeshIndexWrite(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::Type **a4)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = (llvm::Type *)llvm::PointerType::get();
  __int16 v13 = 257;
  Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a4, v8, (const llvm::Twine *)v12);
  uint64_t v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx3.mesh.index.write", 26, a1[18], a1[24], (uint64_t)v8);
  v17[0] = a3;
  v17[1] = PointerCast;
  __int16 v13 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(void *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildWaitFence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v6 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)"llvm.agx3.wait.fence", 20, *(void *)(a1 + 144), *(void *)(a1 + 192));
  v13[0] = a3;
  __int16 v9 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v6 + 24), v6, (uint64_t)v13, 1, (uint64_t)v8);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildAllocateUVB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  long long v12 = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  if (v13) {
    llvm::MetadataTracking::track();
  }
  int v14 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v12);
  if (v13) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, (uint64_t)"llvm.agx3.allocate.uvb", 22, *(void *)(a1 + 144), *(void *)(a1 + 192), *(void *)(a1 + 192));
  v15[0] = a3;
  v15[1] = a4;
  __int16 v11 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v8 + 24), v8, (uint64_t)v15, 2, (uint64_t)v10);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildGetMeshPrimitivePointer(uint64_t a1, uint64_t a2)
{
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9) {
    llvm::MetadataTracking::track();
  }
  int v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  llvm::PointerType::get();
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v6);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildGetPayloadPointer(uint64_t a1, uint64_t a2)
{
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9) {
    llvm::MetadataTracking::track();
  }
  int v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  llvm::PointerType::get();
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v6);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildEnableAllThreads(uint64_t a1, uint64_t a2)
{
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9) {
    llvm::MetadataTracking::track();
  }
  int v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9) {
    llvm::MetadataTracking::untrack();
  }
  __int16 v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v6);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildWriteChildcount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)"llvm.agx3.object.childcount.write", 33, *(void *)(a1 + 144), *(void *)(a1 + 200));
  long long v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (v11) {
    llvm::MetadataTracking::track();
  }
  int v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11) {
    llvm::MetadataTracking::untrack();
  }
  v13[0] = a3;
  __int16 v9 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v6 + 24), v6, (uint64_t)v13, 1, (uint64_t)v8);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildStoreChildcount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)a2;
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15) {
    llvm::MetadataTracking::track();
  }
  int v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15) {
    llvm::MetadataTracking::untrack();
  }
  uint64_t v8 = *(void *)(a1 + 312);
  uint64_t v9 = llvm::PointerType::get();
  uint64_t v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, (uint64_t)"llvm.agx3.object.childcount.store", 33, *(void *)(a1 + 144), v8, v9);
  v17[0] = a4;
  v17[1] = a3;
  __int16 v13 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildEmitpix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, AGCLLVMGen3TargetLowerer *a6, int a7, uint64_t a8, uint64_t a9)
{
  v68[16] = *MEMORY[0x1E4F143B8];
  long long v61 = *(_OWORD *)a2;
  uint64_t v62 = *(void *)(a2 + 16);
  if (v62) {
    llvm::MetadataTracking::track();
  }
  int v63 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v61);
  if (v62) {
    llvm::MetadataTracking::untrack();
  }
  v67[0] = v68;
  v67[1] = (void *)0x1000000000;
  std::string v64 = v66;
  uint64_t v65 = 0x1000000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, *(void *)(a1 + 192));
  AGCLLVMGen3TargetLowerer::getUSCFormatFromState(a6, a7);
  uint64_t v16 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, v16);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, *(void *)(a1 + 192));
  uint64_t v17 = *(void *)(a1 + 192);
  __int16 v58 = 257;
  uint64_t Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, a9, v17, (uint64_t)v57);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, Cast);
  uint64_t v19 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, v19);
  uint64_t v20 = llvm::PointerType::get();
  __int16 v58 = 257;
  uint64_t v21 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a3, v20, (uint64_t)v57);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, v21);
  int v56 = 0;
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t, int *))(*(void *)a1 + 1648))(__s, a1, a8, &v56);
  uint64_t v22 = llvm::PointerType::get();
  __int16 v58 = 257;
  uint64_t v23 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, a4, v22, (uint64_t)v57);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, v22);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, v23);
  uint64_t inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v25 = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v26 = AGCLLVMBuilder::getOrInsertFunction<>();
  uint64_t v27 = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v58 = 257;
  int v28 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)v25 + 16), v25, 0, 0, (uint64_t)v57);
  __int16 v55 = 257;
  std::string::size_type v29 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)inserted + 16), inserted, 0, 0, (uint64_t)v54);
  __int16 v53 = 257;
  uint64_t Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v28, v29, (const llvm::Twine *)v52);
  __int16 v58 = 257;
  std::string::size_type v31 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)v27 + 16), v27, 0, 0, (uint64_t)v57);
  __int16 v55 = 257;
  std::string::size_type v32 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)v26 + 16), v26, 0, 0, (uint64_t)v54);
  __int16 v53 = 257;
  unsigned int v33 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v52);
  uint64_t v34 = 0;
  if ((v56 - 1) > 1) {
    goto LABEL_10;
  }
  if (*(void *)(a1 + 1616)) {
    strlen(*(const char **)(a1 + 1616));
  }
  uint64_t v35 = AGCLLVMBuilder::getOrInsertFunction<>();
  __int16 v58 = 257;
  uint64_t v34 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(void **)(*(void *)v35 + 16), v35, 0, 0, (uint64_t)v57);
  if (v56 == 2)
  {
    unint64_t v36 = (llvm::Value *)llvm::UndefValue::get();
    __int16 v58 = 257;
    uint64_t v37 = (llvm::Value *)llvm::ConstantInt::get();
    Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v36, Mul, v37, (const llvm::Twine *)v57);
    __int16 v58 = 257;
    std::string::size_type v39 = (llvm::Value *)llvm::ConstantInt::get();
    __int16 v40 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v33, v39, (const llvm::Twine *)v57);
    __int16 v58 = 257;
    std::string::size_type v41 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v42 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v40, v34, v41, (const llvm::Twine *)v57);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, *(void *)(a1 + 312));
    uint64_t v43 = v42;
  }
  else
  {
LABEL_10:
    uint64_t v44 = (llvm::Value *)llvm::UndefValue::get();
    __int16 v58 = 257;
    uint8x8_t v45 = (llvm::Value *)llvm::ConstantInt::get();
    unint64_t v46 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v44, Mul, v45, (const llvm::Twine *)v57);
    __int16 v58 = 257;
    __int16 v47 = (llvm::Value *)llvm::ConstantInt::get();
    uint64_t v48 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v46, v33, v47, (const llvm::Twine *)v57);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, *(void *)(a1 + 248));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, v48);
    if (!v34) {
      goto LABEL_13;
    }
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, *(void *)(a1 + 192));
    uint64_t v49 = *(void *)(a1 + 192);
    __int16 v58 = 257;
    uint64_t v43 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v34, v49, (uint64_t)v57);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, v43);
LABEL_13:
  llvm::FunctionType::get();
  if ((v60 & 0x80000000) == 0)
  {
    std::string::size_type v50 = __s;
LABEL_16:
    strlen(v50);
    goto LABEL_17;
  }
  std::string::size_type v50 = *(char **)__s;
  if (*(void *)__s) {
    goto LABEL_16;
  }
LABEL_17:
  llvm::Module::getOrInsertFunction();
  __int16 v58 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(void *)(v51 + 24), v51, (uint64_t)v64, v65, (uint64_t)v57);
  if (v64 != v66) {
    free(v64);
  }
  if (v67[0] != v68) {
    free(v67[0]);
  }
  if (v60 < 0) {
    operator delete(*(void **)__s);
  }
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getCount()
{
  return 16;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getStageSpecificBindpoint1()
{
  return 15;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getStageSpecificBindpoint0()
{
  return 14;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getRayDriverDataStartIndex()
{
  return 13;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getRayStridesIndex()
{
  return 12;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getRayUserDataBoundsIndex()
{
  return 11;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getIFTHeapAddressIndex()
{
  return 10;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getAccelerationStructureHeapIndex()
{
  return 8;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getGlobalBindingTableIndex()
{
  return 9;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getVisibleFunctionTableHeapIndex()
{
  return 7;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getIntersectionFunctionTableHeapIndex()
{
  return 6;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getPerEncoderIndirectionTableIndex()
{
  return 5;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getSamplerHeapIndex()
{
  return 4;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getTextureHeapLengthIndex()
{
  return 3;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getTextureHeapWriteIndex()
{
  return 2;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getTextureHeapReadIndex()
{
  return 1;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getGOTIndex()
{
  return 0;
}

void AGCLLVMHAL200TargetLowerer::AGCLLVMHAL200TargetLowerer(AGCLLVMHAL200TargetLowerer *this, llvm::LLVMContext *a2, const char **a3)
{
}

uint64_t AddCandidate(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(result + 8);
  if (!v4) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v56 = **(void **)(*(void *)result + 16);
  if ((*(_DWORD *)(v56 + 8) & 0xFE) != 0x10)
  {
    char v28 = 0;
    uint64_t v29 = 0;
    int v30 = 0;
    std::string::size_type v31 = a3 + 1;
    char v32 = 1;
    do
    {
      unint64_t v33 = *(void *)(v4 + 24);
      unsigned int v34 = *(unsigned __int8 *)(v33 + 16);
      if (v33) {
        BOOL v35 = v34 >= 0x1C;
      }
      else {
        BOOL v35 = 0;
      }
      if (!v35) {
        return result;
      }
      if (v34 == 84)
      {
        unint64_t v36 = *v31;
        uint64_t v37 = a3 + 1;
        uint64_t v38 = a3 + 1;
        if (*v31)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v38 = (uint64_t **)v36;
              unint64_t v39 = v36[4];
              if (v33 >= v39) {
                break;
              }
              unint64_t v36 = *v38;
              uint64_t v37 = v38;
              if (!*v38) {
                goto LABEL_62;
              }
            }
            if (v39 >= v33) {
              break;
            }
            unint64_t v36 = v38[1];
            if (!v36)
            {
              uint64_t v37 = v38 + 1;
              goto LABEL_62;
            }
          }
        }
        else
        {
LABEL_62:
          __int16 v40 = (uint64_t *)operator new(0x28uLL);
          v40[4] = v33;
          *__int16 v40 = 0;
          v40[1] = 0;
          v40[2] = (uint64_t)v38;
          *uint64_t v37 = v40;
          std::string::size_type v41 = (uint64_t *)**a3;
          if (v41)
          {
            *a3 = v41;
            uint64_t v42 = *v37;
          }
          else
          {
            uint64_t v42 = v40;
          }
          uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a3[1], v42);
          a3[2] = (uint64_t *)((char *)a3[2] + 1);
        }
        char v28 = 1;
      }
      else if (v34 == 61)
      {
        if (*(void *)(v33 - 32) != v6 || (*(_WORD *)(v33 + 18) & 1) != 0) {
          return result;
        }
      }
      else
      {
        if (v34 != 60 || *(void *)(v33 - 32) != v6 || (*(_WORD *)(v33 + 18) & 1) != 0) {
          return result;
        }
        ++v30;
      }
      BOOL v43 = v29 == 0;
      if (v29) {
        uint64_t v44 = v29;
      }
      else {
        uint64_t v44 = *(void *)(v33 + 40);
      }
      if (v29 == *(void *)(v33 + 40)) {
        BOOL v43 = 1;
      }
      v32 &= v43;
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t v29 = v44;
    }
    while (v4);
    int v45 = *(unsigned __int8 *)(v6 + 16);
    if (v45 == 62) {
      int v45 = *(unsigned __int8 *)(*(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)) + 16);
    }
    if (v45 == 59)
    {
      uint64_t v46 = llvm::UndefValue::get();
      BOOL v47 = (v28 & 1) == 0;
    }
    else
    {
      uint64_t v46 = 0;
      BOOL v47 = 0;
      char v32 = 0;
    }
    *(void *)&v57[0] = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>(*(void *)a2, *(_DWORD *)(a2 + 16), v6, v57);
    uint64_t v48 = *(void *)&v57[0];
    if (result)
    {
LABEL_87:
      *(void *)(v48 + 8) = v46;
      *(_DWORD *)(v48 + 16) = 0;
      *(unsigned char *)(v48 + 20) = v47;
      *(unsigned char *)(v48 + 21) = v32;
      *(_DWORD *)(v48 + 24) = v30;
      return result;
    }
    int v49 = *(_DWORD *)(a2 + 8);
    unsigned int v50 = *(_DWORD *)(a2 + 16);
    if (4 * v49 + 4 >= 3 * v50)
    {
      v50 *= 2;
    }
    else if (v50 + ~v49 - *(_DWORD *)(a2 + 12) > v50 >> 3)
    {
LABEL_84:
      ++*(_DWORD *)(a2 + 8);
      if (*(void *)v48 != -4096) {
        --*(_DWORD *)(a2 + 12);
      }
      *(_DWORD *)(v48 + 24) = 0;
      *(void *)uint64_t v48 = v6;
      *(void *)(v48 + 8) = 0;
      *(void *)(v48 + 14) = 0;
      goto LABEL_87;
    }
    llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::grow(a2, v50);
    *(void *)&v57[0] = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>(*(void *)a2, *(_DWORD *)(a2 + 16), v6, v57);
    uint64_t v48 = *(void *)&v57[0];
    goto LABEL_84;
  }
  if (*(_DWORD *)(v56 + 8) == 17
    && (*(_DWORD *)(**(void **)(v56 + 16) + 8) & 0xFE) != 0x10
    && *(void *)(v56 + 32) <= 4uLL)
  {
    memset(v57, 0, sizeof(v57));
    while (1)
    {
      uint64_t v8 = *(void *)(v4 + 24);
      if (!v8) {
        return result;
      }
      if (*(unsigned char *)(v8 + 16) != 62) {
        return result;
      }
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t result = llvm::GetElementPtrInst::hasAllConstantIndices((llvm::GetElementPtrInst *)v8);
      if (!result || (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 3) {
        return result;
      }
      uint64_t v9 = *(void *)(v8 - 64);
      uint64_t result = v9 + 24;
      unsigned int v10 = *(_DWORD *)(v9 + 32);
      if (v10 > 0x40)
      {
        uint64_t result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
        if (result != v10) {
          return result;
        }
      }
      else if (*(void *)result)
      {
        return result;
      }
      uint64_t v11 = *(void *)(v8 - 32);
      int v12 = (void *)(v11 + 24);
      if (*(_DWORD *)(v11 + 32) >= 0x41u) {
        int v12 = (void *)*v12;
      }
      __int16 v13 = (void *)*v12;
      if (v13 >= *(_DWORD *)(v56 + 32)) {
        return result;
      }
      if (!*((void *)v57 + v13))
      {
        *((void *)v57 + v13) = llvm::Instruction::clone((llvm::Instruction *)v8);
        --*(_DWORD *)(a4 + 16);
        int v14 = *(unsigned __int8 *)(v6 + 16);
        if (v14 == 21)
        {
          uint64_t v20 = *(void *)(*(void *)(v6 + 24) + 80);
          if (v20) {
            uint64_t v21 = (llvm::BasicBlock *)(v20 - 24);
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v21);
          uint64_t v23 = FirstInsertionPt - 24;
          BOOL v24 = FirstInsertionPt == 0;
          while (1)
          {
            uint64_t v25 = v24 ? 0 : v23;
            if (*(unsigned char *)(v25 + 16) != 59) {
              break;
            }
            uint64_t v26 = *(void *)(v23 + 32);
            uint64_t v27 = *(void *)(v23 + 40) + 40;
            uint64_t v23 = v26 - 24;
            if (v26) {
              BOOL v24 = v26 == v27;
            }
            else {
              BOOL v24 = 1;
            }
          }
          goto LABEL_29;
        }
        if (v14 == 59)
        {
          uint64_t v15 = v6;
          do
          {
            uint64_t v16 = *(void *)(v15 + 32);
            uint64_t v17 = *(void *)(v15 + 40) + 40;
            uint64_t v15 = v16 - 24;
            if (v16) {
              BOOL v18 = v16 == v17;
            }
            else {
              BOOL v18 = 1;
            }
            if (v18) {
              uint64_t v19 = 0;
            }
            else {
              uint64_t v19 = v16 - 24;
            }
          }
          while (*(unsigned char *)(v19 + 16) == 59);
LABEL_29:
          llvm::Instruction::insertBefore();
        }
      }
      ++*(_DWORD *)(a4 + 16);
      llvm::Value::replaceAllUsesWith();
      uint64_t result = llvm::Instruction::eraseFromParent((llvm::Instruction *)v8);
      if (!v4)
      {
        unint64_t v51 = *(void *)(v56 + 32);
        if (v51)
        {
          uint64_t v52 = 0;
          unsigned int v53 = 1;
          do
          {
            uint64_t result = *((void *)v57 + v52);
            if (result)
            {
              uint64_t result = AddCandidate(result, a2, a3, a4);
              unint64_t v51 = *(void *)(v56 + 32);
            }
            uint64_t v52 = v53;
          }
          while (v51 > v53++);
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v5 = (void *)(a1 + 32 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      int v10 = 1;
      while (v6 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v6 == -8192;
        }
        if (v11) {
          uint64_t v9 = v5;
        }
        int v12 = v4 + v10++;
        uint64_t v4 = v12 & (a2 - 1);
        unint64_t v5 = (void *)(a1 + 32 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = 1;
        if (*v5 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v7 = 0;
      if (v9) {
        unint64_t v5 = v9;
      }
    }
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

void *llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (void *)MEMORY[0x1CB79F270](32 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    int v12 = (void *)(32 * v3);
    if (v3)
    {
      uint64_t v13 = 32 * v3;
      int v14 = v4;
      do
      {
        uint64_t v15 = *(void *)v14;
        if ((*(void *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>(*(void *)a1, *(_DWORD *)(a1 + 16), v15, &v20);
          uint64_t v16 = v20;
          void *v20 = *(void *)v14;
          long long v17 = *(_OWORD *)((char *)v14 + 8);
          void v16[3] = *((void *)v14 + 3);
          *(_OWORD *)(v16 + 1) = v17;
          ++*(_DWORD *)(a1 + 8);
        }
        int v14 = (llvm *)((char *)v14 + 32);
        v13 -= 32;
      }
      while (v13);
    }
    return (void *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v18 = *(unsigned int *)(a1 + 16);
    if (v18)
    {
      uint64_t v19 = 32 * v18;
      do
      {
        *uint64_t result = -4096;
        result += 4;
        v19 -= 32;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t *std::__tree<llvm::Instruction *>::__emplace_unique_key_args<llvm::Instruction *,llvm::Instruction * const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  unint64_t v6 = (uint64_t **)(result + 1);
  unint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t *MarkInvariants::addSeed(uint64_t *this, llvm::Value *a2, int a3)
{
  if (*((unsigned __int8 *)a2 + 16) >= 0x1Cu && a2 != 0)
  {
    unint64_t v6 = this;
    unint64_t v8 = this + 4;
    int v7 = (void *)this[4];
    if (!v7) {
      goto LABEL_18;
    }
    uint64_t v9 = this + 4;
    do
    {
      unint64_t v10 = v7[4];
      BOOL v11 = v10 >= (unint64_t)a2;
      if (v10 >= (unint64_t)a2) {
        int v12 = v7;
      }
      else {
        int v12 = v7 + 1;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      int v7 = (void *)*v12;
    }
    while (*v12);
    if (v9 == v8 || v9[4] > (unint64_t)a2)
    {
LABEL_18:
      int v14 = (_DWORD *)this[1];
      unint64_t v13 = this[2];
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = (_DWORD *)*this;
        uint64_t v17 = ((uint64_t)v14 - *this) >> 4;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60) {
          abort();
        }
        uint64_t v19 = v13 - (void)v16;
        if (v19 >> 3 > v18) {
          unint64_t v18 = v19 >> 3;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          if (v20 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v21 = (char *)operator new(16 * v20);
        }
        else
        {
          uint64_t v21 = 0;
        }
        uint64_t v22 = &v21[16 * v17];
        *(void *)uint64_t v22 = a2;
        *((_DWORD *)v22 + 2) = a3;
        uint64_t v15 = v22 + 16;
        if (v14 != v16)
        {
          do
          {
            uint64_t v23 = *((void *)v14 - 2);
            v14 -= 4;
            int v24 = v14[2];
            *((void *)v22 - 2) = v23;
            v22 -= 16;
            *((_DWORD *)v22 + 2) = v24;
          }
          while (v14 != v16);
          int v14 = (_DWORD *)*v6;
        }
        *unint64_t v6 = (uint64_t)v22;
        v6[1] = (uint64_t)v15;
        v6[2] = (uint64_t)&v21[16 * v20];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)int v14 = a2;
        void v14[2] = a3;
        uint64_t v15 = v14 + 4;
      }
      v6[1] = (uint64_t)v15;
      return std::__tree<llvm::Instruction *>::__emplace_unique_key_args<llvm::Instruction *,llvm::Instruction * const&>(v8 - 1, (unint64_t)a2, (uint64_t)a2);
    }
  }
  return this;
}

uint64_t MarkInvariants::markInvariant(MarkInvariants *this, llvm::Type **a2)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  v143[0] = 0;
  v143[1] = 0;
  uint64_t v141 = 0;
  long long v142 = v143;
  long long v139 = &v140;
  long long v140 = 0;
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)this != v2)
  {
    long long v137 = (llvm::IRBuilderBase *)(a2 + 1);
    uint64_t v4 = (void *)((char *)this + 32);
    do
    {
      uint64_t v7 = *(void *)(v2 - 16);
      uint64_t v5 = v2 - 16;
      uint64_t v6 = v7;
      int v8 = *(_DWORD *)(v5 + 8);
      *((void *)this + 1) = v5;
      if (llvm::FPMathOperator::classof(v7)) {
        llvm::Instruction::setFast((llvm::Instruction *)v6);
      }
      if (!*((unsigned char *)this + 56) || *(unsigned char *)(v6 + 16) != 42)
      {
LABEL_58:
        int v24 = (llvm::Value *)v6;
        goto LABEL_59;
      }
      int v9 = *(_DWORD *)(v6 + 20);
      if ((v9 & 0x40000000) != 0) {
        unint64_t v10 = *(uint64_t **)(v6 - 8);
      }
      else {
        unint64_t v10 = (uint64_t *)(v6 - 32 * (v9 & 0x7FFFFFF));
      }
      uint64_t v11 = *v10;
      uint64_t v12 = v10[4];
      int v13 = *(unsigned __int8 *)(v11 + 16);
      if (v11 && v13 == 46)
      {
        int v14 = *(_DWORD *)(v11 + 20);
        if ((v14 & 0x40000000) != 0) {
          uint64_t v15 = *(llvm::Value ***)(v11 - 8);
        }
        else {
          uint64_t v15 = (llvm::Value **)(v11 - 32 * (v14 & 0x7FFFFFF));
        }
        Insertuint64_t Element = *v15;
        unint64_t v20 = v15[4];
        uint64_t v11 = v12;
        if (!*v15) {
          goto LABEL_58;
        }
      }
      else
      {
        int v16 = *(unsigned __int8 *)(v12 + 16);
        if (v16 != 46 || v12 == 0)
        {
          if (v11 && v13 == 90)
          {
            unint64_t v18 = (llvm::Value *)v11;
            uint64_t v11 = v12;
          }
          else
          {
            BOOL v23 = v16 != 90 || v12 == 0;
            unint64_t v18 = (llvm::Value *)v12;
            if (v23)
            {
              int v24 = (llvm::Value *)v6;
              goto LABEL_59;
            }
          }
          *(_OWORD *)unint64_t v153 = 0u;
          long long v154 = 0u;
          llvm::IRBuilderBase::SetInsertPoint(v137, (llvm::Instruction *)v6);
          unsigned int v25 = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a2, v18, v153);
          unsigned int v26 = v25;
          uint64_t v135 = v11;
          if (!v25) {
            goto LABEL_39;
          }
          uint64_t v27 = v25;
          char v28 = 1;
          uint64_t v29 = v153;
          do
          {
            int v30 = *v29;
            if (*v29) {
              LOBYTE(v30) = *((unsigned char *)v30 + 16) == 46;
            }
            v28 &= v30;
            ++v29;
            --v27;
          }
          while (v27);
          if ((v28 & 1) == 0)
          {
            unint64_t v20 = 0;
            Insertuint64_t Element = 0;
          }
          else
          {
LABEL_39:
            Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
            unint64_t v20 = (llvm::Value *)llvm::UndefValue::get();
            if (v26)
            {
              uint64_t v32 = 0;
              uint64_t v33 = v26;
              do
              {
                unsigned int v34 = v153[v32];
                int v35 = *((_DWORD *)v34 + 5);
                if ((v35 & 0x40000000) != 0) {
                  unint64_t v36 = (llvm::Value **)*((void *)v34 - 1);
                }
                else {
                  unint64_t v36 = (llvm::Value **)((char *)v34 - 32 * (v35 & 0x7FFFFFF));
                }
                uint64_t v37 = *v36;
                llvm::Type::getInt32Ty(a2[9], v31);
                uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
                __int16 v147 = 257;
                Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v137, InsertElement, v37, v38, (const llvm::Twine *)v144);
                int v40 = *((_DWORD *)v34 + 5);
                if ((v40 & 0x40000000) != 0) {
                  std::string::size_type v41 = (char *)*((void *)v34 - 1);
                }
                else {
                  std::string::size_type v41 = (char *)v34 - 32 * (v40 & 0x7FFFFFF);
                }
                uint64_t v42 = (llvm::Value *)*((void *)v41 + 4);
                llvm::Type::getInt32Ty(a2[9], v39);
                BOOL v43 = (llvm::Value *)llvm::ConstantInt::get();
                __int16 v147 = 257;
                unint64_t v20 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v137, v20, v42, v43, (const llvm::Twine *)v144);
                ++v32;
              }
              while (v33 != v32);
            }
          }
          uint64_t v11 = v135;
          if (!InsertElement) {
            goto LABEL_58;
          }
        }
        else
        {
          int v21 = *(_DWORD *)(v12 + 20);
          if ((v21 & 0x40000000) != 0) {
            uint64_t v22 = *(llvm::Value ***)(v12 - 8);
          }
          else {
            uint64_t v22 = (llvm::Value **)(v12 - 32 * (v21 & 0x7FFFFFF));
          }
          Insertuint64_t Element = *v22;
          unint64_t v20 = v22[4];
          if (!*v22) {
            goto LABEL_58;
          }
        }
      }
      if (!v20 || !v11) {
        goto LABEL_58;
      }
      uint64_t v44 = *(void *)v6;
      if ((*(_DWORD *)(*(void *)v6 + 8) & 0xFE) == 0x12) {
        int v45 = *(_DWORD *)(v44 + 32);
      }
      else {
        int v45 = 1;
      }
      std::string::basic_string[abi:nn180100]<0>(v144, ".");
      std::string::basic_string[abi:nn180100]<0>(&v146, ".v2");
      std::string::basic_string[abi:nn180100]<0>(v148, ".v3");
      std::string::basic_string[abi:nn180100]<0>(v149, ".v4");
      std::string::basic_string[abi:nn180100]<0>(&v138, "air.fma");
      uint64_t v85 = &v144[3 * (v45 - 1)];
      int v86 = *((char *)v85 + 23);
      if (v86 >= 0) {
        uint64_t v87 = (const std::string::value_type *)&v144[3 * (v45 - 1)];
      }
      else {
        uint64_t v87 = (const std::string::value_type *)*v85;
      }
      if (v86 >= 0) {
        std::string::size_type v88 = *((unsigned __int8 *)v85 + 23);
      }
      else {
        std::string::size_type v88 = (std::string::size_type)v85[1];
      }
      std::string::append(&v138, v87, v88);
      if ((*(_DWORD *)(v44 + 8) & 0xFE) == 0x12) {
        int v89 = *(unsigned __int8 *)(**(void **)(v44 + 16) + 8);
      }
      else {
        int v89 = *(_DWORD *)(v44 + 8);
      }
      if (v89 == 2) {
        long long v90 = ".f32";
      }
      else {
        long long v90 = ".f16";
      }
      std::string::append(&v138, v90);
      uint64_t __src = (llvm::Value *)v44;
      uint64_t v151 = (llvm::Value *)v44;
      uint64_t v152 = v44;
      v153[0] = (llvm::Value *)&v154;
      v153[1] = (llvm::Value *)0x300000000;
      llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((unsigned int *)v153, &__src, v153);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      uint64_t v92 = v91;
      if ((long long *)v153[0] != &v154) {
        free(v153[0]);
      }
      llvm::IRBuilderBase::SetInsertPoint(v137, (llvm::Instruction *)v6);
      uint64_t __src = InsertElement;
      uint64_t v151 = v20;
      uint64_t v152 = v11;
      __int16 v155 = 257;
      int v24 = llvm::IRBuilderBase::CreateCall((uint64_t)v137, *(void *)(v92 + 24), v92, (uint64_t)&__src, 3, (uint64_t)v153);
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent((llvm::Instruction *)v6);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v138.__r_.__value_.__l.__data_);
      }
      for (uint64_t i = 0; i != -12; i -= 3)
      {
        if (SHIBYTE(v149[i + 2]) < 0) {
          operator delete((void *)v149[i]);
        }
      }
LABEL_59:
      int v46 = *((unsigned __int8 *)v24 + 16);
      if (v24 && v46 == 60)
      {
        uint64_t v47 = **((void **)v24 - 4);
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if ((v48 & 0xFE) == 0x12) {
          unsigned int v48 = *(_DWORD *)(**(void **)(v47 + 16) + 8);
        }
        unsigned int v49 = v48 >> 8;
        unsigned int v50 = v143[0];
        if (!v143[0]) {
          goto LABEL_72;
        }
        unint64_t v51 = v143;
        do
        {
          uint64_t v52 = v50;
          unsigned int v53 = v51;
          unsigned int v54 = *((_DWORD *)v50 + 7);
          __int16 v55 = v50 + 1;
          if (v54 >= v49)
          {
            __int16 v55 = v52;
            unint64_t v51 = (void **)v52;
          }
          unsigned int v50 = (void *)*v55;
        }
        while (v50);
        if (v51 == v143) {
          goto LABEL_72;
        }
        if (v54 < v49) {
          uint64_t v52 = v53;
        }
        if (v49 < *((_DWORD *)v52 + 7))
        {
LABEL_72:
          uint64_t v56 = *((void *)this + 6);
          uint64_t v57 = v56 + 24;
          for (uint64_t j = *(void *)(v56 + 32); j != v57; uint64_t j = *(void *)(j + 8))
          {
            uint64_t v59 = j - 56;
            if (!j) {
              uint64_t v59 = 0;
            }
            uint64_t v60 = v59 + 72;
            for (uint64_t k = *(void *)(v59 + 80); k != v60; uint64_t k = *(void *)(k + 8))
            {
              uint64_t v62 = k - 24;
              if (!k) {
                uint64_t v62 = 0;
              }
              uint64_t v63 = *(void *)(v62 + 48);
              if (v63 != v62 + 40)
              {
LABEL_99:
                while (k != v60)
                {
                  uint64_t v64 = v63 - 24;
                  if (!v63) {
                    uint64_t v64 = 0;
                  }
                  int v65 = *(unsigned __int8 *)(v64 + 16);
                  if (v65 != 61) {
                    uint64_t v64 = 0;
                  }
                  if (v63 && v65 == 61)
                  {
                    uint64_t v66 = **(void **)(v64 - 32);
                    unsigned int v67 = *(_DWORD *)(v66 + 8);
                    if ((v67 & 0xFE) == 0x12) {
                      unsigned int v67 = *(_DWORD *)(**(void **)(v66 + 16) + 8);
                    }
                    if (v49 == v67 >> 8) {
                      MarkInvariants::addSeed((uint64_t *)this, *(llvm::Value **)(v64 - 64), 0);
                    }
                  }
                  uint64_t v63 = *(void *)(v63 + 8);
                  uint64_t v68 = k - 24;
                  if (!k) {
                    uint64_t v68 = 0;
                  }
                  if (v63 == v68 + 40)
                  {
                    while (1)
                    {
                      uint64_t k = *(void *)(k + 8);
                      if (k == v60) {
                        goto LABEL_100;
                      }
                      uint64_t v69 = k - 24;
                      if (!k) {
                        uint64_t v69 = 0;
                      }
                      uint64_t v63 = *(void *)(v69 + 48);
                      if (v63 != v69 + 40) {
                        goto LABEL_99;
                      }
                    }
                  }
                }
                break;
              }
            }
LABEL_100:
            ;
          }
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v142, v49, v49);
        }
        goto LABEL_107;
      }
      if (v24 && v46 == 92)
      {
        if (*((_DWORD *)v24 + 18) != 1) {
          goto LABEL_231;
        }
        int v70 = **((_DWORD **)v24 + 8);
        std::string v71 = (llvm::Value *)*((void *)v24 - 4);
        uint64_t v72 = (uint64_t *)this;
LABEL_105:
        MarkInvariants::addSeed(v72, v71, v70);
        goto LABEL_107;
      }
      if (!v24 || v46 != 93)
      {
        if (!v24 || v46 != 84)
        {
          int v94 = *((_DWORD *)v24 + 5);
          if ((v94 & 0x40000000) != 0)
          {
            __int16 v96 = (llvm::Value **)*((void *)v24 - 1);
            uint64_t v95 = v94 & 0x7FFFFFF;
            if (!v95) {
              goto LABEL_107;
            }
          }
          else
          {
            uint64_t v95 = v94 & 0x7FFFFFF;
            __int16 v96 = (llvm::Value **)((char *)v24 - 32 * v95);
            if (!v95) {
              goto LABEL_107;
            }
          }
          uint64_t v114 = 32 * v95;
          do
          {
            int v115 = *v96;
            v96 += 4;
            MarkInvariants::addSeed((uint64_t *)this, v115, v8);
            v114 -= 32;
          }
          while (v114);
          goto LABEL_107;
        }
        unint64_t v81 = *((void *)v24 - 4);
        if (!v81 || *(unsigned char *)(v81 + 16) || *(void *)(v81 + 24) != *((void *)v24 + 9))
        {
LABEL_231:
          uint64_t v133 = 0;
          goto LABEL_232;
        }
        if (llvm::GlobalValue::isDeclaration(*((llvm::GlobalValue **)v24 - 4)))
        {
          uint64_t v82 = *((_DWORD *)v24 + 5) & 0x7FFFFFF;
          if (v82)
          {
            uint64_t v83 = -32 * v82;
            do
            {
              MarkInvariants::addSeed((uint64_t *)this, *(llvm::Value **)((char *)v24 + v83), v8);
              v83 += 32;
            }
            while (v83);
          }
        }
        else
        {
          long long v116 = v140;
          for (m = &v140; ; long long v116 = *m)
          {
            long long v118 = m;
            if (!v116) {
              break;
            }
            while (1)
            {
              m = (uint64_t **)v116;
              unint64_t v119 = v116[4];
              if (v81 < v119) {
                break;
              }
              if (v119 >= v81) {
                goto LABEL_208;
              }
              long long v116 = m[1];
              if (!v116)
              {
                long long v118 = m + 1;
                goto LABEL_204;
              }
            }
          }
LABEL_204:
          long long v120 = (uint64_t *)operator new(0x28uLL);
          void v120[4] = v81;
          *long long v120 = 0;
          v120[1] = 0;
          v120[2] = (uint64_t)m;
          llvm::Value *v118 = v120;
          if (*v139)
          {
            long long v139 = (uint64_t **)*v139;
            long long v121 = *v118;
          }
          else
          {
            long long v121 = v120;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v140, v121);
          ++v141;
LABEL_208:
          for (uint64_t n = *(void *)(v81 + 80); n != v81 + 72; uint64_t n = *(void *)(n + 8))
          {
            if (n) {
              uint64_t v123 = n - 24;
            }
            else {
              uint64_t v123 = 0;
            }
            uint64_t v124 = *(void *)(v123 + 40);
            if (v124 != v123 + 40)
            {
              uint64_t v125 = v124 - 24;
              uint64_t v126 = v124 ? v124 - 24 : 0;
              unsigned int v127 = *(unsigned __int8 *)(v126 + 16) - 40;
              BOOL v128 = __CFADD__(v127, 11);
              uint64_t v129 = v127 >= 0xFFFFFFF5 ? v125 : 0;
              if (v128 && *(unsigned char *)(v129 + 16) == 29)
              {
                uint64_t v131 = *(_DWORD *)(v129 + 20) & 0x7FFFFFF;
                if (v131) {
                  long long v132 = *(llvm::Value **)(v129 - 32 * v131);
                }
                else {
                  long long v132 = 0;
                }
                MarkInvariants::addSeed((uint64_t *)this, v132, v8);
              }
            }
          }
        }
LABEL_107:
        uint64_t v73 = v140;
        if (!v140) {
          goto LABEL_191;
        }
        unint64_t v74 = *(void *)(*((void *)v24 + 5) + 56);
        uint64_t v75 = &v140;
        do
        {
          uint64_t v76 = v73;
          int v77 = v75;
          unint64_t v78 = v73[4];
          int v79 = (uint64_t **)(v73 + 1);
          if (v78 >= v74)
          {
            int v79 = (uint64_t **)v76;
            uint64_t v75 = (uint64_t **)v76;
          }
          uint64_t v73 = *v79;
        }
        while (v73);
        if (v75 == &v140) {
          goto LABEL_191;
        }
        if (v78 < v74) {
          uint64_t v76 = (uint64_t *)v77;
        }
        if (v74 < v76[4]) {
          goto LABEL_191;
        }
        unsigned int v145 = 128;
        v144[0] = (llvm *)MEMORY[0x1CB79F270](6144, 8);
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty((uint64_t)v144);
        LOBYTE(v146) = 0;
        LOBYTE(v148[0]) = 0;
        if ((*(_WORD *)(v74 + 18) & 1) == 0)
        {
          uint64_t v80 = *(llvm::Value **)(v74 + 88);
          goto LABEL_134;
        }
        llvm::Function::BuildLazyArguments((llvm::Function *)v74);
        uint64_t v80 = *(llvm::Value **)(v74 + 88);
        if (*(_WORD *)(v74 + 18))
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v74);
          uint64_t v84 = *(llvm::Value **)(v74 + 88);
        }
        else
        {
LABEL_134:
          uint64_t v84 = v80;
        }
        uint64_t v97 = (llvm::Value *)((char *)v84 + 40 * *(void *)(v74 + 96));
        if (v80 != v97)
        {
          int v98 = 0;
          do
          {
            *(_DWORD *)llvm::ValueMap<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v144, v80) = v98;
            uint64_t v80 = (llvm::Value *)((char *)v80 + 40);
            ++v98;
          }
          while (v80 != v97);
        }
        int v99 = *((_DWORD *)v24 + 5);
        if ((v99 & 0x40000000) != 0)
        {
          uint64_t v101 = (uint64_t *)*((void *)v24 - 1);
          uint64_t v100 = v99 & 0x7FFFFFF;
        }
        else
        {
          uint64_t v100 = v99 & 0x7FFFFFF;
          uint64_t v101 = (uint64_t *)((char *)v24 - 32 * v100);
        }
        char v102 = &v101[4 * v100];
        if (v100)
        {
          do
          {
            uint64_t v103 = *v101;
            v153[0] = 0;
            int v104 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)v144[0], v145, v103, v153);
            long long v105 = v153[0];
            if (v104) {
              BOOL v106 = v153[0] == (llvm *)((char *)v144[0] + 48 * v145);
            }
            else {
              BOOL v106 = 1;
            }
            if (!v106)
            {
              for (iuint64_t i = *(void *)(v74 + 8); ii; iuint64_t i = *(void *)(ii + 8))
              {
                unint64_t v108 = *(void *)(ii + 24);
                if (*(unsigned char *)(v108 + 16) != 84) {
                  unint64_t v108 = 0;
                }
                char v109 = (void *)*v4;
                if (*v4)
                {
                  __int16 v110 = v4;
                  do
                  {
                    unint64_t v111 = v109[4];
                    BOOL v112 = v111 >= v108;
                    if (v111 >= v108) {
                      uint64_t v113 = v109;
                    }
                    else {
                      uint64_t v113 = v109 + 1;
                    }
                    if (v112) {
                      __int16 v110 = v109;
                    }
                    char v109 = (void *)*v113;
                  }
                  while (*v113);
                  if (v110 != v4 && v108 >= v110[4]) {
                    MarkInvariants::addSeed((uint64_t *)this, *(llvm::Value **)(v108- 32 * (*(_DWORD *)(v108 + 20) & 0x7FFFFFF)+ 32 * *((unsigned int *)v105 + 10)), v8);
                  }
                }
              }
            }
            v101 += 4;
          }
          while (v101 != v102);
        }
        llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)&v146);
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::destroyAll((uint64_t)v144);
        llvm::deallocate_buffer(v144[0], (void *)(48 * v145));
        goto LABEL_191;
      }
      if (*((_DWORD *)v24 + 18) != 1) {
        goto LABEL_231;
      }
      if (**((_DWORD **)v24 + 8) == v8)
      {
        std::string v71 = (llvm::Value *)*((void *)v24 - 4);
        uint64_t v72 = (uint64_t *)this;
        int v70 = 0;
        goto LABEL_105;
      }
      MarkInvariants::addSeed((uint64_t *)this, *((llvm::Value **)v24 - 8), v8);
LABEL_191:
      uint64_t v2 = *((void *)this + 1);
    }
    while (*(void *)this != v2);
  }
  uint64_t v133 = 1;
LABEL_232:
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v140);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v143[0]);
  return v133;
}

uint64_t *std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    int v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t AIRNTGetLLVMVersion()
{
  return 0;
}

void AIRNTInit(AGCEnv *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  AGCEnv::load(a1);
  memset(&v22, 0, sizeof(v22));
  v1 = (AGCEnv *)MGGetBoolAnswer();
  if (v1)
  {
    OSLog = AGCEnv::getOSLog(v1);
    BOOL v3 = os_log_type_enabled(OSLog, OS_LOG_TYPE_DEBUG);
    if (v3)
    {
      *(_DWORD *)buffer = 136315138;
      *(void *)&buffer[4] = "serialize";
      _os_log_debug_impl(&dword_1CAC02000, OSLog, OS_LOG_TYPE_DEBUG, "%s(){\n", buffer, 0xCu);
    }
    AGCEnv::getStatusVariables((AGCEnv *)v3);
    uint64_t v4 = (AGCEnv *)std::string::basic_string[abi:nn180100]<0>(&v24, "AGC_ENABLE_STATUS_FILE");
    uint64_t v6 = AGCEnv::getStatusVariables(void)::status_vars;
    uint64_t v5 = qword_1EBD0EB40;
    if (qword_1EBD0EB40 != AGCEnv::getStatusVariables(void)::status_vars)
    {
      uint64_t v7 = 0;
      unsigned int v8 = 0;
      uint64_t v9 = MEMORY[0x1E4F14390];
      do
      {
        uint64_t v4 = (AGCEnv *)getenv(*(const char **)(v6 + 8 * v7));
        if (v4)
        {
          unint64_t v10 = (const std::string::value_type *)v4;
          uint64_t v11 = AGCEnv::getOSLog(v4);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v19 = *(void *)(AGCEnv::getStatusVariables(void)::status_vars + 8 * v7);
            *(_DWORD *)buffer = 136315394;
            *(void *)&buffer[4] = v19;
            *(_WORD *)&buffer[12] = 2080;
            *(void *)&buffer[14] = v10;
            _os_log_debug_impl(&dword_1CAC02000, v11, OS_LOG_TYPE_DEBUG, "%s = %s\n", buffer, 0x16u);
          }
          if (!std::string::compare(&v24, *(const std::string::value_type **)(AGCEnv::getStatusVariables(void)::status_vars + 8 * v7)))
          {
            std::string::append(&v22, "AGC_CLIENT_PROCESS_NAME");
            std::string::push_back(&v22, 10);
            std::string::basic_string[abi:nn180100]<0>(&v23, "agc_status_");
            pid_t v12 = getpid();
            long long v30 = 0u;
            long long v31 = 0u;
            long long v28 = 0u;
            long long v29 = 0u;
            long long v26 = 0u;
            long long v27 = 0u;
            memset(buffer, 0, sizeof(buffer));
            int v13 = proc_name(v12, buffer, 0x80u);
            if (v13)
            {
              uint64_t v14 = v13;
              uint64_t v15 = buffer;
              while (1)
              {
                unsigned int v16 = (char)*v15;
                if ((v16 & 0x80000000) != 0) {
                  break;
                }
                if ((*(_DWORD *)(v9 + 4 * v16 + 60) & 0x500) == 0) {
                  goto LABEL_14;
                }
LABEL_15:
                ++v15;
                if (!--v14) {
                  goto LABEL_19;
                }
              }
              if (__maskrune(v16, 0x500uLL)) {
                goto LABEL_15;
              }
LABEL_14:
              unsigned char *v15 = 95;
              goto LABEL_15;
            }
LABEL_19:
            std::string::append(&v23, buffer);
            *(std::string *)buffer = v23;
            memset(&v23, 0, sizeof(v23));
            if (buffer[23] >= 0) {
              uint64_t v17 = buffer;
            }
            else {
              uint64_t v17 = *(const std::string::value_type **)buffer;
            }
            if (buffer[23] >= 0) {
              std::string::size_type v18 = HIBYTE(*(void *)&buffer[16]);
            }
            else {
              std::string::size_type v18 = *(void *)&buffer[8];
            }
            std::string::append(&v22, v17, v18);
            if ((buffer[23] & 0x80000000) != 0) {
              operator delete(*(void **)buffer);
            }
            if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v23.__r_.__value_.__l.__data_);
            }
            std::string::push_back(&v22, 10);
          }
          std::string::append(&v22, *(const std::string::value_type **)(AGCEnv::getStatusVariables(void)::status_vars + 8 * v7));
          std::string::push_back(&v22, 10);
          std::string::append(&v22, v10);
          std::string::push_back(&v22, 10);
          uint64_t v6 = AGCEnv::getStatusVariables(void)::status_vars;
          uint64_t v5 = qword_1EBD0EB40;
        }
        uint64_t v7 = ++v8;
      }
      while (v8 < (unint64_t)((v5 - v6) >> 3));
    }
    unint64_t v20 = AGCEnv::getOSLog(v4);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buffer = 0;
      _os_log_debug_impl(&dword_1CAC02000, v20, OS_LOG_TYPE_DEBUG, "}\n", buffer, 2u);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  AGCEnv::deserialize((uint64_t)&v22);
  AGCLLVMCtx::initialize(v21);
  operator new();
}

uint64_t *AGCNativeTranslator::init(AGCNativeTranslator *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = (uint64_t *)((char *)this + 16);
  BOOL v3 = (uint64_t *)((char *)this + 40);
  do
  {
    unint64_t v4 = AGCTarget::TargetArchToCPUSubtypeImpl(AGCActiveTargets[v1]);
    unsigned int v5 = v4;
    unint64_t v6 = HIDWORD(v4);
    int v9 = v4;
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v2, v5, v5);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, v5, &v9);
    uint64_t result = std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v7 + 3, v6, v6);
    ++v1;
  }
  while (v1 != 25);
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  pid_t v12 = a1 + 2;
  unint64_t v10 = operator new(0x30uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[5] = 0;
  v10[4] = 0;
  v10[3] = v10 + 4;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = a1[1];
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v19 = operator new(8 * *(void *)&prime);
          unint64_t v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          std::string v22 = (void *)*v12;
          if (*v12)
          {
            unint64_t v23 = v22[1];
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v23) = v12;
            long long v28 = (void *)*v22;
            if (*v22)
            {
              do
              {
                unint64_t v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(void *)(*a1 + 8 * v29))
                  {
                    *(void *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  void *v22 = *v28;
                  *long long v28 = **(void **)(*a1 + 8 * v29);
                  **(void **)(*a1 + 8 * v29) = v28;
                  long long v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_55:
                std::string v22 = v28;
                long long v28 = (void *)*v28;
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        unsigned int v34 = (void *)*a1;
        *a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v30 = *a1;
  long long v31 = *(void **)(*a1 + 8 * v3);
  if (v31)
  {
    *unint64_t v10 = *v31;
LABEL_72:
    *long long v31 = v10;
    goto LABEL_73;
  }
  *unint64_t v10 = *v12;
  *pid_t v12 = v10;
  *(void *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v32 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    long long v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void std::__shared_ptr_emplace<std::unordered_map<AGCTargetArch,std::unique_ptr<AGCTargetContext>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      unint64_t v4 = (uint64_t **)v2[3];
      v2[3] = 0;
      if (v4) {
        std::default_delete<AGCTargetContext>::operator()[abi:nn180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unsigned int v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5)
  {
    operator delete(v5);
  }
}

void std::default_delete<AGCTargetContext>::operator()[abi:nn180100](uint64_t **a1)
{
  std::__tree<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::__map_value_compare<std::array<unsigned char,32ul>,std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::less<std::array<unsigned char,32ul>>,true>,std::allocator<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>>>::destroy((char *)a1[4]);
  uint64_t v2 = (AGCLLVMCtx *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    AGCLLVMCtx::~AGCLLVMCtx(v2);
    MEMORY[0x1CB7A0780]();
  }
  std::unique_ptr<AGCTargetPrinter>::reset[abi:nn180100](a1 + 1, 0);
  unint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t *))(*v3 + 8))(v3);
  }
  JUMPOUT(0x1CB7A0780);
}

void std::__tree<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::__map_value_compare<std::array<unsigned char,32ul>,std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::less<std::array<unsigned char,32ul>>,true>,std::allocator<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::__map_value_compare<std::array<unsigned char,32ul>,std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::less<std::array<unsigned char,32ul>>,true>,std::allocator<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::__map_value_compare<std::array<unsigned char,32ul>,std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::less<std::array<unsigned char,32ul>>,true>,std::allocator<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void *)*((void *)a1 + 8);
    if (v2) {
      free(v2);
    }
    if (a1[183] < 0) {
      operator delete(*((void **)a1 + 20));
    }
    if (a1[159] < 0) {
      operator delete(*((void **)a1 + 17));
    }
    if (a1[127] < 0) {
      operator delete(*((void **)a1 + 13));
    }
    if (a1[103] < 0) {
      operator delete(*((void **)a1 + 10));
    }
    operator delete(a1);
  }
}

uint64_t **std::unique_ptr<AGCTargetPrinter>::reset[abi:nn180100](uint64_t **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2) {
      BOOL v4 = v3 == MEMORY[0x1E4FBA240];
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      *uint64_t v2 = 0;
      {
        getFilePath(void)::file_path = 0;
        qword_1EA614FC0 = 0;
        unk_1EA614FC8 = 0;
        __cxa_atexit(MEMORY[0x1E4FBA210], &getFilePath(void)::file_path, &dword_1CAC02000);
      }
      if (byte_1EA614FCF < 0)
      {
        *(unsigned char *)getFilePath(void)::file_path = 0;
        qword_1EA614FC0 = 0;
      }
      else
      {
        LOBYTE(getFilePath(void)::file_path) = 0;
        byte_1EA614FCF = 0;
      }
    }
    JUMPOUT(0x1CB7A0780);
  }
  return result;
}

void std::__shared_ptr_emplace<std::unordered_map<AGCTargetArch,std::unique_ptr<AGCTargetContext>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F25DA868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CB7A0780);
}

void std::__shared_ptr_emplace<std::unordered_map<AGCTargetArch,std::unique_ptr<AGCTargetContext>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F25DA868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AIRNTDispose(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(char *)(result + 103) < 0) {
      operator delete(*(void **)(result + 80));
    }
    uint64_t v2 = *(void ***)(v1 + 56);
    if (v2)
    {
      do
      {
        uint64_t v3 = *v2;
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v2[4]);
        operator delete(v2);
        uint64_t v2 = (void **)v3;
      }
      while (v3);
    }
    BOOL v4 = *(void **)(v1 + 40);
    *(void *)(v1 + 40) = 0;
    if (v4) {
      operator delete(v4);
    }
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*(void **)(v1 + 24));
    unsigned int v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    JUMPOUT(0x1CB7A0780);
  }
  return result;
}

void AIRNTClone()
{
}

void AIRNTInitCompilationContext()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t AIRNTDisposeCompilationContext(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(char *)(result + 47) < 0) {
      operator delete(*(void **)(result + 24));
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x1CB7A0780);
  }
  return result;
}

void AIRNTGetVersion(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  *a2 = 2;
  *a3 = 0;
  *a4 = 0;
}

const char *AIRNTGetVendorName()
{
  return "Apple";
}

void AIRNTGetDefaultArch(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = 16777235;
  *a3 = 65;
}

void AIRNTGetSupportedArchs(uint64_t a1, void **a2, void *a3, void *a4)
{
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  BOOL v15 = &v16;
  std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v15, *(void **)(a1 + 16), (void *)(a1 + 24));
  *a2 = malloc_type_malloc(4 * v17, 0x100004052888210uLL);
  unint64_t v7 = malloc_type_malloc(4 * v17, 0x100004052888210uLL);
  *a3 = v7;
  uint64_t v8 = (uint64_t)v15;
  if (v15 == &v16)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = *a2;
    do
    {
      int v11 = *(_DWORD *)(v8 + 28);
      v10[v9] = 16777235;
      v7[v9] = v11;
      pid_t v12 = *(void **)(v8 + 8);
      if (v12)
      {
        do
        {
          float v13 = (void **)v12;
          pid_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          float v13 = *(void ***)(v8 + 16);
          BOOL v14 = *v13 == (void *)v8;
          uint64_t v8 = (uint64_t)v13;
        }
        while (!v14);
      }
      ++v9;
      uint64_t v8 = (uint64_t)v13;
    }
    while (v13 != &v16);
    uint64_t v9 = v9;
  }
  *a4 = v9;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v16);
}

uint64_t *std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    BOOL v4 = a2;
    unsigned int v5 = result;
    unint64_t v6 = result + 1;
    do
    {
      unint64_t v7 = (uint64_t *)v5[1];
      uint64_t v8 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_9;
      }
      uint64_t v9 = v5[1];
      unint64_t v10 = v6;
      if (v7)
      {
        do
        {
          uint64_t v8 = (uint64_t *)v9;
          uint64_t v9 = *(void *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v8 = (uint64_t *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          unint64_t v10 = v8;
        }
        while (v11);
      }
      unsigned int v12 = *((_DWORD *)v4 + 7);
      if (*((_DWORD *)v8 + 7) < v12)
      {
LABEL_9:
        if (v7) {
          float v13 = (uint64_t **)v8;
        }
        else {
          float v13 = (uint64_t **)v6;
        }
        if (v7) {
          BOOL v14 = (uint64_t **)(v8 + 1);
        }
        else {
          BOOL v14 = (uint64_t **)v6;
        }
      }
      else
      {
        float v13 = (uint64_t **)v6;
        BOOL v14 = (uint64_t **)v6;
        if (v7)
        {
          BOOL v14 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              float v13 = (uint64_t **)v7;
              unsigned int v18 = *((_DWORD *)v7 + 7);
              if (v12 >= v18) {
                break;
              }
              unint64_t v7 = *v13;
              BOOL v14 = v13;
              if (!*v13) {
                goto LABEL_16;
              }
            }
            if (v18 >= v12) {
              break;
            }
            BOOL v14 = v13 + 1;
            unint64_t v7 = v13[1];
            if (!v7) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_16:
        BOOL v15 = (uint64_t *)operator new(0x20uLL);
        *((_DWORD *)v15 + 7) = *((_DWORD *)v4 + 7);
        uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v13, v14, v15);
      }
      unint64_t v16 = (void *)v4[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          unint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v4[2];
          BOOL v11 = *v17 == (void)v4;
          BOOL v4 = v17;
        }
        while (!v11);
      }
      BOOL v4 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void AIRNTGetSupportedImpls(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, void *a5)
{
  LODWORD(v14) = a3;
  unint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)(a1 + 40), a3, &v14);
  BOOL v15 = 0;
  uint64_t v16 = 0;
  BOOL v14 = &v15;
  std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v14, (void *)v7[3], v7 + 4);
  uint64_t v8 = malloc_type_malloc(4 * v16, 0x100004052888210uLL);
  *a4 = v8;
  uint64_t v9 = (uint64_t)v14;
  if (v14 == &v15)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      v8[v10] = *(_DWORD *)(v9 + 28);
      BOOL v11 = *(void **)(v9 + 8);
      if (v11)
      {
        do
        {
          unsigned int v12 = (void **)v11;
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unsigned int v12 = *(void ***)(v9 + 16);
          BOOL v13 = *v12 == (void *)v9;
          uint64_t v9 = (uint64_t)v12;
        }
        while (!v13);
      }
      ++v10;
      uint64_t v9 = (uint64_t)v12;
    }
    while (v12 != &v15);
    uint64_t v10 = v10;
  }
  *a5 = v10;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v15);
}

uint64_t AIRNTSupportsArch(uint64_t a1, int a2, unsigned int a3)
{
  if (a2 != 16777235) {
    return 0;
  }
  v21[0] = 0;
  v21[1] = 0;
  unint64_t v20 = v21;
  std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v20, *(void **)(a1 + 16), (void *)(a1 + 24));
  uint64_t v5 = (uint64_t)v20;
  if (v20 == v21)
  {
LABEL_20:
    uint64_t v16 = 0;
  }
  else
  {
    unint64_t v6 = (uint64_t *)(a1 + 40);
    while (1)
    {
      unsigned int v22 = *(_DWORD *)(v5 + 28);
      unint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, v22, &v22);
      v19[0] = 0;
      v19[1] = 0;
      unsigned int v18 = v19;
      std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v18, (void *)v7[3], v7 + 4);
      if (v19[0])
      {
        uint64_t v8 = v19;
        uint64_t v9 = v19[0];
        do
        {
          uint64_t v10 = v9;
          BOOL v11 = v8;
          unsigned int v12 = *((_DWORD *)v9 + 7);
          if (v12 >= a3) {
            uint64_t v8 = (void **)v9;
          }
          else {
            ++v9;
          }
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
        if (v8 != v19)
        {
          if (v12 < a3) {
            uint64_t v10 = v11;
          }
          if (*((_DWORD *)v10 + 7) <= a3) {
            break;
          }
        }
      }
      std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v19[0]);
      BOOL v13 = *(void **)(v5 + 8);
      if (v13)
      {
        do
        {
          BOOL v14 = (void **)v13;
          BOOL v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          BOOL v14 = *(void ***)(v5 + 16);
          BOOL v15 = *v14 == (void *)v5;
          uint64_t v5 = (uint64_t)v14;
        }
        while (!v15);
      }
      uint64_t v5 = (uint64_t)v14;
      if (v14 == v21) {
        goto LABEL_20;
      }
    }
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v19[0]);
    uint64_t v16 = 1;
  }
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v21[0]);
  return v16;
}

uint64_t AIRNTSupportsTarget(uint64_t a1, int a2, AGCTarget *a3, unsigned int a4, __int16 a5, __int16 a6, __int16 a7)
{
  if (a2 != 16777235) {
    return 0;
  }
  uint64_t v9 = (unsigned __int16)((16 * a6) | (a5 << 8) | a7);
  uint64_t result = pluginSupportsOSVersion(a4 | (unint64_t)(v9 << 32));
  if (!result) {
    return result;
  }
  unsigned __int16 v13 = AGCTarget::CPUSubtypeToTargetArch(a3, v11, v12);
  uint64_t result = 0;
  switch(a4)
  {
    case 1u:
      uint64_t result = 0;
      switch(v13)
      {
        case 0x10u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
          return v9 > 0xCFF;
        case 0x15u:
          return v9 > 0xD3F;
        case 0x18u:
          return v9 > 0xD4F;
        case 0x20u:
          goto LABEL_9;
        default:
          return result;
      }
      return result;
    case 2u:
      uint64_t result = 0;
      switch(v13)
      {
        case 4u:
        case 8u:
          return (v9 & 0xFF00) == 4096;
        case 6u:
        case 9u:
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0x10u:
        case 0x11u:
        case 0x16u:
          return v9 > 0xFFF;
        case 0x12u:
          return v9 >> 4 > 0x100;
        case 0x13u:
        case 0x15u:
        case 0x20u:
        case 0x22u:
LABEL_9:
          uint64_t result = v9 != 0;
          break;
        case 0x1Fu:
          return v9 >> 8 > 0x10;
        default:
          return result;
      }
      return result;
    case 3u:
      if (v13 > 9u)
      {
        if (v13 != 10 && v13 != 17)
        {
          BOOL v15 = v9 != 0;
          BOOL v16 = v13 == 34;
          return v16 && v15;
        }
        return v9 > 0xFFF;
      }
      if (v13 == 7) {
        return v9 > 0xFFF;
      }
      BOOL v15 = v9 > 0xFFF;
      BOOL v16 = v13 == 9;
      return v16 && v15;
    case 4u:
      if (v13 == 22) {
        return v9 > 0x9FF;
      }
      else {
        return v13 == 10 && v9 > 0x8FF;
      }
    case 0xBu:
      return v9 > 0xFF && v13 == 18;
    default:
      return result;
  }
}

uint64_t pluginSupportsOSVersion(uint64_t a1)
{
  uint64_t result = 0;
  switch((int)a1)
  {
    case 1:
      BOOL v3 = WORD2(a1) > 0xEFFu;
      goto LABEL_6;
    case 2:
    case 3:
      BOOL v3 = WORD2(a1) >> 9 > 8u;
      goto LABEL_6;
    case 4:
      BOOL v3 = WORD2(a1) > 0xAFFu;
      goto LABEL_6;
    case 11:
      BOOL v3 = WORD2(a1) > 0x1FFu;
LABEL_6:
      uint64_t result = v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AIRNTGetSupportedBitcodeVersion()
{
  return 32023;
}

BOOL AIRNTParseCommandLineOptions(uint64_t a1, uint64_t a2, unint64_t a3, AGCError *a4)
{
  if (a3 >= 2)
  {
    BOOL v4 = 0;
    uint64_t v8 = a1 + 80;
    uint64_t v9 = 1;
    while (1)
    {
      unint64_t v10 = *(void *)(a2 + 8 * v9);
      v26.n128_u64[0] = v10;
      if (!v10) {
        break;
      }
      size_t v11 = strlen((const char *)v10);
      v26.n128_u64[1] = v11;
      if (v11 < 6) {
        goto LABEL_14;
      }
      if (*(_DWORD *)v10 != 1885564205 || *(_WORD *)(v10 + 4) != 15733) {
        goto LABEL_14;
      }
      LOBYTE(__p[0]) = 61;
      __n128 v13 = llvm::StringRef::split(&v22, &v26, (uint64_t)__p, 1);
      MEMORY[0x1CB7A04F0](v8, v23, v24, v13);
      BOOL v4 = ++v9 >= a3;
      if (a3 == v9) {
        return 1;
      }
    }
    size_t v11 = 0;
    v26.n128_u64[1] = 0;
LABEL_14:
    __int16 v25 = 1283;
    v22.n128_u64[0] = (unint64_t)"Unsupported translator option: ";
    unint64_t v23 = v10;
    size_t v24 = v11;
    llvm::Twine::str((uint64_t *)__p, (llvm::Twine *)&v22);
    if (v28 >= 0) {
      unint64_t v20 = __p;
    }
    else {
      unint64_t v20 = (void **)__p[0];
    }
    AGCError::logError(a4, (char **)v20, v14, v15, v16, v17, v18, v19);
    if (v28 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    return 1;
  }
  return v4;
}

void AGCError::logError(AGCError *this, char **a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 && *(unsigned char *)a2)
  {
    printMessage((char **)&AGCPrinter, "** Compilation failed with error: %s **", (uint64_t)a3, a4, a5, a6, a7, a8, (char)a2);
    if (!this) {
      return;
    }
    unint64_t v10 = (const char *)a2;
  }
  else
  {
    if (!this) {
      return;
    }
    unint64_t v10 = "Internal compiler error.";
  }
  *(void *)this = strdup(v10);
}

uint64_t AIRNTSupportsEmitExecutableImage()
{
  return 1;
}

uint64_t AIRNTSupportsEmitBuiltinExecutableImage()
{
  return 1;
}

uint64_t AIRNTSupportsThreads()
{
  return 0;
}

uint64_t AIRNTEmitAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, AGCError *a11)
{
  std::string::basic_string[abi:nn180100]<0>(&v21, "[AGX] Plugin interface not implemented: ");
  size_t v11 = std::string::append(&v21, "AIRNTEmitAssembly");
  std::string::size_type v18 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  uint64_t v23 = v18;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v23 >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  AGCError::logError(a11, (char **)v19, v12, v13, v14, v15, v16, v17);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  return 0;
}

uint64_t AIRNTEmitObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, AGCError *a11)
{
  std::string::basic_string[abi:nn180100]<0>(&v21, "[AGX] Plugin interface not implemented: ");
  size_t v11 = std::string::append(&v21, "AIRNTEmitObject");
  std::string::size_type v18 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  uint64_t v23 = v18;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v23 >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  AGCError::logError(a11, (char **)v19, v12, v13, v14, v15, v16, v17);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  return 0;
}

uint64_t AIRNTEmitDylibImage(uint64_t *a1, uint64_t a2, const char *a3, int a4, int a5, AGCTarget *this, int a7, int a8, void *a9, char **a10, AGCError *a11)
{
  unsigned int v11 = this;
  unsigned int v15 = AGCTarget::CPUSubtypeToTargetArch(this, a2, a3);
  if (v15)
  {
    uint64_t TargetContext = AGCNativeTranslator::getTargetContext(a1, v15);
    LODWORD(v29) = 8;
    long long v31 = 0;
    uint64_t v32 = 0;
    std::string __p = 0;
    v28[1] = &unk_1F25DA900;
    int v33 = 512;
    uint64_t v34 = a2;
    int v35 = a3;
    unint64_t v36 = "";
    v28[0] = &unk_1F25DA8A0;
    uint64_t v17 = AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject((uint64_t)v28, TargetContext, a9, a10, a11);
    v28[0] = &unk_1F25DA8D0;
    v28[1] = &unk_1F25DA940;
    if (__p)
    {
      long long v31 = __p;
      operator delete(__p);
    }
  }
  else
  {
    std::to_string(&v37, v11);
    std::string::size_type v18 = std::string::insert(&v37, 0, "Unknown AGC target for CPU subtype: ");
    std::string::size_type v25 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)char v28 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    uint64_t v29 = v25;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (v29 >= 0) {
      __n128 v26 = v28;
    }
    else {
      __n128 v26 = (void **)v28[0];
    }
    AGCError::logError(a11, (char **)v26, v19, v20, v21, v22, v23, v24);
    if (SHIBYTE(v29) < 0) {
      operator delete(v28[0]);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  return v17;
}

uint64_t AGCNativeTranslator::getTargetContext(uint64_t *a1, unsigned int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  unint64_t v4 = a2;
  unint64_t v5 = *(void *)(*a1 + 8);
  if (!v5) {
    goto LABEL_17;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = a2;
    if (v5 <= a2) {
      unint64_t v7 = a2 % v5;
    }
  }
  else
  {
    unint64_t v7 = (v5 - 1) & a2;
  }
  uint64_t v8 = *(uint64_t ***)(*(void *)v3 + 8 * v7);
  if (!v8 || (uint64_t v9 = *v8) == 0) {
LABEL_17:
  }
    operator new();
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == a2) {
      break;
    }
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= v5) {
        v10 %= v5;
      }
    }
    else
    {
      v10 &= v5 - 1;
    }
    if (v10 != v7) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v9 = (uint64_t *)*v9;
    if (!v9) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v9 + 4) != a2) {
    goto LABEL_16;
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    unint64_t v12 = a2;
    if (v5 <= a2) {
      unint64_t v12 = a2 % v5;
    }
  }
  else
  {
    unint64_t v12 = (v5 - 1) & a2;
  }
  uint64_t v13 = *(void **)(*(void *)v3 + 8 * v12);
  if (v13)
  {
    uint64_t v14 = (void *)*v13;
    if (*v13)
    {
      do
      {
        unint64_t v15 = v14[1];
        if (v15 == a2)
        {
          if (*((_DWORD *)v14 + 4) == a2) {
            return v14[3];
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v5) {
              v15 %= v5;
            }
          }
          else
          {
            v15 &= v5 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
  }
  uint64_t v14 = operator new(0x20uLL);
  v14[1] = v4;
  *((_DWORD *)v14 + 4) = a2;
  void v14[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(v3 + 24) + 1);
  float v17 = *(float *)(v3 + 32);
  if ((float)(v17 * (float)v5) < v16)
  {
    BOOL v18 = 1;
    if (v5 >= 3) {
      BOOL v18 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v5);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(v3, v21);
    unint64_t v5 = *(void *)(v3 + 8);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v5 <= v4) {
        unint64_t v12 = v4 % v5;
      }
      else {
        unint64_t v12 = v4;
      }
    }
    else
    {
      unint64_t v12 = (v5 - 1) & v4;
    }
  }
  uint64_t v22 = *(void *)v3;
  uint64_t v23 = *(void **)(*(void *)v3 + 8 * v12);
  if (v23)
  {
    *uint64_t v14 = *v23;
    goto LABEL_52;
  }
  uint64_t v24 = *(void *)(v3 + 16);
  *uint64_t v14 = v24;
  *(void *)(v3 + 16) = v14;
  *(void *)(v22 + 8 * v12) = v3 + 16;
  if (v24)
  {
    unint64_t v25 = *(void *)(v24 + 8);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v25 >= v5) {
        v25 %= v5;
      }
    }
    else
    {
      v25 &= v5 - 1;
    }
    uint64_t v23 = (void *)(*(void *)v3 + 8 * v25);
LABEL_52:
    void *v23 = v14;
  }
  ++*(void *)(v3 + 24);
  return v14[3];
}

uint64_t AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(uint64_t a1, uint64_t a2, void *a3, char **a4, AGCError *a5)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  mach_absolute_time();
  float v16 = *(AGCLLVMCtx **)(a2 + 16);
  if (v16)
  {
    *((unsigned char *)v16 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses(v16);
    MEMORY[0x1CB79EDB0](v67);
    uint64_t v17 = *(void *)(a1 + 56);
    if (!v17) {
      goto LABEL_22;
    }
    if (*(void *)(a1 + 72)) {
      strlen(*(const char **)(a1 + 72));
    }
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v19) {
      (*(void (**)(std::string::size_type))(*(void *)v19 + 8))(v19);
    }
    if (v70)
    {
      unsigned int v49 = v69;
      uint64_t v69 = 0;
      uint64_t v66 = v49;
      llvm::toString(&__p, &v66);
      unsigned int v50 = std::string::insert(&__p, 0, "Error parsing bitcode file: ");
      std::string::size_type v57 = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v63 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      *(void *)&long long v64 = v57;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v64) & 0x80u) == 0) {
        uint64_t v58 = v63;
      }
      else {
        uint64_t v58 = (void **)v63[0];
      }
      AGCError::logError(a5, (char **)v58, v51, v52, v53, v54, v55, v56);
      if (SBYTE7(v64) < 0) {
        operator delete(v63[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v66) {
        (*(void (**)(char *))(*(void *)v66 + 8))(v66);
      }
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v69);
      goto LABEL_37;
    }
    uint64_t v17 = (uint64_t)v69;
    uint64_t v69 = 0;
    __int16 v62 = 260;
    __p.__r_.__value_.__r.__words[0] = v17 + 216;
    MEMORY[0x1CB79FA50](v63, &__p);
    if (DWORD2(v64) == 49
      && v65 == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&__p, (const llvm::Triple *)v63),
          pluginSupportsOSVersion((uint64_t)__p.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v63), !v20))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&__p, (const llvm::Triple *)v63);
      int v28 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      AGCError::logError(a5, &p_p->__r_.__value_.__l.__data_, v21, v22, v23, v24, v25, v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v28 = 0;
    }
    if (SBYTE7(v64) < 0) {
      operator delete(v63[0]);
    }
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v69);
    if (v28)
    {
LABEL_22:
      uint64_t v29 = (uint64_t (***)(void))(**(uint64_t (***)(uint64_t, AGCLLVMCtx *, unsigned char *, uint64_t))a1)(a1, v16, v67, v17);
      if (v29)
      {
        unint64_t v36 = v29;
        if ((**v29)(v29))
        {
          __p.__r_.__value_.__r.__words[0] = 0;
          uint64_t v69 = 0;
          *(_OWORD *)uint64_t v63 = 0u;
          long long v64 = 0u;
          v68[0] = &unk_1F25DB188;
          v68[1] = a1;
          v68[3] = v68;
          uint64_t v18 = ((uint64_t (*)(uint64_t (***)(void), std::string *, char **, void **, void *))(*v36)[1])(v36, &__p, &v69, v63, v68);
          std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](v68);
          if (v18)
          {
            *a3 = __p.__r_.__value_.__r.__words[0];
            *a4 = v69;
          }
          else
          {
            AGCError::logError(a5, (char **)"Error occurred composing compiler reply.", v43, v44, v45, v46, v47, v48);
          }
        }
        else
        {
          if (*((char *)v36 + 31) >= 0) {
            uint64_t v59 = (char **)(v36 + 1);
          }
          else {
            uint64_t v59 = (char **)v36[1];
          }
          AGCError::logError(a5, v59, v37, v38, v39, v40, v41, v42);
          uint64_t v18 = 0;
        }
        (*v36)[4](v36);
        goto LABEL_44;
      }
      AGCError::logError(a5, (char **)"Cannot create AGC LLVM object.", v30, v31, v32, v33, v34, v35);
    }
LABEL_37:
    uint64_t v18 = 0;
LABEL_44:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v67);
    return v18;
  }
  AGCError::logError(a5, (char **)"Failed to initialize AGX backend for target architecture.", v10, v11, v12, v13, v14, v15);
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::serialize(void *a1, void *a2, void *a3)
{
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

void ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v2;
  int v3 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v4 = *(void *)(a1 + 32);
  if ((unint64_t)v2 >= v4)
  {
    uint64_t v6 = v4 - (void)v2;
    uint64_t v7 = v6 >> 1;
    if ((unint64_t)(v6 >> 1) <= 1) {
      uint64_t v7 = 1;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v8 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v8 = v7;
    }
    uint64_t v9 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v8);
    unint64_t v10 = *(char **)(a1 + 16);
    uint64_t v11 = *(char **)(a1 + 24);
    uint64_t v13 = &v9[v12];
    *uint64_t v9 = v3;
    unint64_t v5 = v9 + 1;
    while (v11 != v10)
    {
      int v14 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *--uint64_t v9 = v14;
    }
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v13;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *uint64_t v2 = v3;
    unint64_t v5 = v2 + 1;
  }
  *(void *)(a1 + 24) = v5;
}

void ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(void *a1)
{
  int v3 = (char *)a1[3];
  unint64_t v2 = a1[4];
  if ((unint64_t)v3 >= v2)
  {
    unint64_t v5 = (char *)a1[2];
    uint64_t v6 = (v3 - v5) >> 2;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 62) {
      abort();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 1 > v7) {
      unint64_t v7 = v8 >> 1;
    }
    BOOL v9 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v9) {
      unint64_t v10 = v7;
    }
    if (v10)
    {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v10);
      unint64_t v5 = (char *)a1[2];
      int v3 = (char *)a1[3];
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = (_DWORD *)(v10 + 4 * v6);
    unint64_t v13 = v10 + 4 * v11;
    *uint64_t v12 = 96;
    unint64_t v4 = v12 + 1;
    while (v3 != v5)
    {
      int v14 = *((_DWORD *)v3 - 1);
      v3 -= 4;
      *--uint64_t v12 = v14;
    }
    a1[2] = v12;
    a1[3] = v4;
    a1[4] = v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_DWORD *)int v3 = 96;
    unint64_t v4 = v3 + 4;
  }
  a1[3] = v4;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void llvm::toString(std::string *this, char **a2)
{
  v115[6] = *MEMORY[0x1E4F143B8];
  uint64_t v113 = v115;
  uint64_t v114 = 0x200000000;
  int v3 = *a2;
  *a2 = 0;
  uint64_t v101 = &v113;
  if (!v3)
  {
    char v102 = 0;
    goto LABEL_99;
  }
  if (!(*(unsigned int (**)(char *, void))(*(void *)v3 + 48))(v3, MEMORY[0x1E4FB9FD0]))
  {
    char v109 = v3;
    llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v102, &v109, (uint64_t *)&v101);
    if (v109) {
      (*(void (**)(char *))(*(void *)v109 + 8))(v109);
    }
    goto LABEL_99;
  }
  char v102 = 0;
  unint64_t v4 = (uint64_t *)*((void *)v3 + 1);
  unint64_t v5 = (uint64_t *)*((void *)v3 + 2);
  if (v4 == v5) {
    goto LABEL_95;
  }
  uint64_t v100 = v3;
  uint64_t v6 = 0;
  unint64_t v7 = v102;
  uint64_t v8 = MEMORY[0x1E4FB9FD0];
  do
  {
    uint64_t v9 = *v4;
    *unint64_t v4 = 0;
    uint64_t v103 = v9;
    llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v104, &v103, (uint64_t *)&v101);
    unint64_t v10 = v104;
    if (v6)
    {
      if (!v104) {
        goto LABEL_73;
      }
      int v11 = (*(uint64_t (**)(void *, uint64_t))(*v6 + 48))(v6, v8);
      unint64_t v10 = v104;
      if (v11)
      {
        if (v104 && (*(unsigned int (**)(void *, uint64_t))(*v104 + 48))(v104, v8))
        {
          int v104 = 0;
          uint64_t v12 = (uint64_t *)v10[1];
          unint64_t v13 = (uint64_t *)v10[2];
          if (v12 != v13)
          {
            int v14 = v6 + 3;
            uint64_t v15 = (void *)v6[2];
            do
            {
              if ((unint64_t)v15 >= *v14)
              {
                uint64_t v17 = v6[1];
                uint64_t v18 = ((uint64_t)v15 - v17) >> 3;
                if ((unint64_t)(v18 + 1) >> 61) {
                  goto LABEL_129;
                }
                uint64_t v19 = *v14 - v17;
                uint64_t v20 = v19 >> 2;
                if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
                  uint64_t v20 = v18 + 1;
                }
                if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v21 = v20;
                }
                BOOL v112 = v6 + 3;
                if (v21) {
                  unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v21);
                }
                else {
                  uint64_t v22 = 0;
                }
                uint64_t v23 = (void *)(v21 + 8 * v18);
                unint64_t v24 = v21 + 8 * v22;
                unint64_t v111 = v24;
                uint64_t v25 = *v12;
                *uint64_t v12 = 0;
                void *v23 = v25;
                uint64_t v15 = v23 + 1;
                v110.i64[1] = (uint64_t)(v23 + 1);
                uint64_t v27 = (void *)v6[1];
                uint64_t v26 = (void *)v6[2];
                if (v26 == v27)
                {
                  int64x2_t v29 = vdupq_n_s64((unint64_t)v26);
                }
                else
                {
                  do
                  {
                    uint64_t v28 = *--v26;
                    *uint64_t v26 = 0;
                    *--uint64_t v23 = v28;
                  }
                  while (v26 != v27);
                  int64x2_t v29 = *(int64x2_t *)(v6 + 1);
                  uint64_t v15 = (void *)v110.i64[1];
                  unint64_t v24 = v111;
                }
                v6[1] = v23;
                v6[2] = v15;
                int64x2_t v110 = v29;
                unint64_t v30 = v6[3];
                void v6[3] = v24;
                unint64_t v111 = v30;
                char v109 = (char *)v29.i64[0];
                std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v109);
              }
              else
              {
                uint64_t v16 = *v12;
                *uint64_t v12 = 0;
                *v15++ = v16;
              }
              v6[2] = v15;
              ++v12;
            }
            while (v12 != v13);
          }
          (*(void (**)(void *))(*v10 + 8))(v10);
          uint64_t v8 = MEMORY[0x1E4FB9FD0];
        }
        else
        {
          int v104 = 0;
          unint64_t v43 = v6[3];
          uint64_t v44 = (void *)v6[2];
          if ((unint64_t)v44 >= v43)
          {
            uint64_t v46 = v6[1];
            uint64_t v47 = ((uint64_t)v44 - v46) >> 3;
            if ((unint64_t)(v47 + 1) >> 61) {
              goto LABEL_129;
            }
            uint64_t v48 = v43 - v46;
            uint64_t v49 = v48 >> 2;
            if (v48 >> 2 <= (unint64_t)(v47 + 1)) {
              uint64_t v49 = v47 + 1;
            }
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v49;
            }
            BOOL v112 = v6 + 3;
            if (v50) {
              unint64_t v50 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v50);
            }
            else {
              uint64_t v51 = 0;
            }
            uint64_t v58 = (void *)(v50 + 8 * v47);
            unint64_t v59 = v50 + 8 * v51;
            unint64_t v111 = v59;
            *uint64_t v58 = v10;
            uint64_t v45 = v58 + 1;
            v110.i64[1] = (uint64_t)(v58 + 1);
            long long v61 = (void *)v6[1];
            uint64_t v60 = (void *)v6[2];
            if (v60 == v61)
            {
              int64x2_t v63 = vdupq_n_s64((unint64_t)v60);
            }
            else
            {
              do
              {
                uint64_t v62 = *--v60;
                void *v60 = 0;
                *--uint64_t v58 = v62;
              }
              while (v60 != v61);
              int64x2_t v63 = *(int64x2_t *)(v6 + 1);
              uint64_t v45 = (void *)v110.i64[1];
              unint64_t v59 = v111;
            }
            v6[1] = v58;
            v6[2] = v45;
            int64x2_t v110 = v63;
            unint64_t v64 = v6[3];
            void v6[3] = v59;
            unint64_t v111 = v64;
            char v109 = (char *)v63.i64[0];
            std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v109);
          }
          else
          {
            void *v44 = v10;
            uint64_t v45 = v44 + 1;
          }
          v6[2] = v45;
        }
        if (v104) {
          (*(void (**)(void *))(*v104 + 8))(v104);
        }
LABEL_73:
        unint64_t v7 = v6;
        goto LABEL_91;
      }
      if (!v104 || !(*(unsigned int (**)(void *, uint64_t))(*v104 + 48))(v104, v8)) {
        operator new();
      }
      unint64_t v31 = v10[3];
      uint64_t v33 = (void *)v10[1];
      unint64_t v32 = v10[2];
      if (v32 >= v31)
      {
        unint64_t v52 = ((uint64_t)(v32 - (void)v33) >> 3) + 1;
        if (v52 >> 61)
        {
LABEL_129:
          char v102 = v7;
          abort();
        }
        uint64_t v53 = v31 - (void)v33;
        if (v53 >> 2 > v52) {
          unint64_t v52 = v53 >> 2;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v52;
        }
        unint64_t v108 = v10 + 3;
        if (v54)
        {
          uint64_t v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v54);
          long long v105 = v55;
          *(void *)&long long v106 = v55;
          *((void *)&v106 + 1) = v55;
          int v107 = &v55[8 * v56];
          std::string::size_type v57 = v55;
          if (!v56)
          {
LABEL_76:
            BOOL v112 = v108;
            int v65 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(1uLL);
            unsigned int v67 = (uint64_t *)v106;
            uint64_t v68 = *((void *)&v106 + 1) - v106;
            if (*((void *)&v106 + 1) == (void)v106)
            {
              int64x2_t v74 = vdupq_n_s64(v106);
              char v70 = v65;
            }
            else
            {
              uint64_t v69 = v68 >> 3;
              char v70 = &v65[v68 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v71 = 8 * v69;
              uint64_t v72 = v65;
              do
              {
                uint64_t v73 = *v67;
                *v67++ = 0;
                *(void *)uint64_t v72 = v73;
                v72 += 8;
                v71 -= 8;
              }
              while (v71);
              int64x2_t v74 = (int64x2_t)v106;
            }
            uint64_t v75 = v107;
            char v109 = v105;
            long long v105 = v65;
            *(void *)&long long v106 = v65;
            int64x2_t v110 = v74;
            *((void *)&v106 + 1) = v70;
            int v107 = &v65[8 * v66];
            unint64_t v111 = (unint64_t)v75;
            std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v109);
            std::string::size_type v57 = (void *)*((void *)&v106 + 1);
            uint64_t v55 = (char *)v106;
          }
          *std::string::size_type v57 = v6;
          uint64_t v76 = v57 + 1;
          *((void *)&v106 + 1) = v76;
          int v77 = (void *)v10[1];
          if (v77 != v33)
          {
            unint64_t v78 = v33;
            do
            {
              uint64_t v79 = *--v78;
              *unint64_t v78 = 0;
              *((void *)v55 - 1) = v79;
              v55 -= 8;
            }
            while (v78 != v77);
            uint64_t v76 = (void *)*((void *)&v106 + 1);
          }
          *(void *)&long long v106 = v55;
          uint64_t v80 = (void *)v10[2];
          if (v80 != v33)
          {
            do
            {
              uint64_t v81 = *v33;
              *v33++ = 0;
              *v76++ = v81;
            }
            while (v33 != v80);
            uint64_t v55 = (char *)v106;
          }
          *((void *)&v106 + 1) = v76;
          long long v82 = *(_OWORD *)(v10 + 1);
          v10[1] = v55;
          v10[2] = *((void *)&v106 + 1);
          long long v106 = v82;
          uint64_t v83 = (char *)v10[3];
          v10[3] = v107;
          int v107 = v83;
          long long v105 = (char *)v82;
          std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v105);
          goto LABEL_90;
        }
        long long v105 = 0;
        long long v106 = 0uLL;
        int v107 = 0;
        goto LABEL_76;
      }
      if (v33 == (void *)v32)
      {
        *uint64_t v33 = v6;
        v10[2] = v33 + 1;
      }
      else
      {
        uint64_t v34 = (uint64_t *)(v32 - 8);
        uint64_t v35 = (void *)v10[2];
        unint64_t v36 = (uint64_t *)(v32 - 8);
        if (v32 >= 8)
        {
          do
          {
            uint64_t v37 = *v36;
            *v36++ = 0;
            *v35++ = v37;
          }
          while ((unint64_t)v36 < v32);
        }
        v10[2] = v35;
        if ((void *)v32 != v33 + 1)
        {
          uint64_t v38 = (uint64_t)(v32 - (void)(v33 + 1)) >> 3;
          uint64_t v39 = v33 - 1;
          do
          {
            uint64_t v40 = v39[v38];
            v39[v38] = 0;
            uint64_t v41 = *v34;
            *uint64_t v34 = v40;
            if (v41) {
              (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
            }
            --v34;
            --v38;
          }
          while (v38 * 8);
        }
        uint64_t v42 = *v33;
        *uint64_t v33 = v6;
        if (v42) {
          (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
        }
        uint64_t v8 = MEMORY[0x1E4FB9FD0];
      }
    }
LABEL_90:
    int v104 = 0;
    unint64_t v7 = v10;
LABEL_91:
    uint64_t v84 = v103;
    uint64_t v103 = 0;
    if (v84) {
      (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
    }
    ++v4;
    uint64_t v6 = v7;
  }
  while (v4 != v5);
  char v102 = v7;
  int v3 = v100;
LABEL_95:
  (*(void (**)(char *))(*(void *)v3 + 8))(v3);
LABEL_99:
  uint64_t v85 = v113;
  uint64_t v86 = v114;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  if (v86)
  {
    uint64_t v87 = 0;
    std::string::size_type v88 = v86 - 1;
    do
    {
      if (SHIBYTE(v85[v87 + 2]) < 0) {
        uint64_t v89 = v85[v87 + 1];
      }
      else {
        uint64_t v89 = HIBYTE(v85[v87 + 2]);
      }
      v88 += v89;
      v87 += 3;
    }
    while (3 * v86 != v87);
    std::string::reserve(this, v88);
    int v90 = *((char *)v85 + 23);
    uint64_t v91 = v90 >= 0 ? (const std::string::value_type *)v85 : (const std::string::value_type *)*v85;
    std::string::size_type v92 = v90 >= 0 ? *((unsigned __int8 *)v85 + 23) : v85[1];
    std::string::append(this, v91, v92);
    if (v86 != 1)
    {
      std::string v93 = (char *)(v85 + 3);
      uint64_t v94 = 24 * v86 - 24;
      do
      {
        std::string::append(this, "\n", 1uLL);
        int v95 = v93[23];
        if (v95 >= 0) {
          __int16 v96 = v93;
        }
        else {
          __int16 v96 = *(const std::string::value_type **)v93;
        }
        if (v95 >= 0) {
          std::string::size_type v97 = v93[23];
        }
        else {
          std::string::size_type v97 = *((void *)v93 + 1);
        }
        std::string::append(this, v96, v97);
        v93 += 24;
        v94 -= 24;
      }
      while (v94);
    }
  }
  int v98 = (char *)v113;
  if (v114)
  {
    uint64_t v99 = 24 * v114;
    do
    {
      if (v98[v99 - 1] < 0) {
        operator delete(*(void **)&v98[v99 - 24]);
      }
      v99 -= 24;
    }
    while (v99);
    int v98 = (char *)v113;
  }
  if (v98 != (char *)v115) {
    free(v98);
  }
}

uint64_t std::__function::__func<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t std::__function::__func<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25DB188;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25DB188;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
}

void AGCOSVersion::AGCOSVersion(AGCOSVersion *this, const llvm::Triple *a2)
{
  *(_DWORD *)this = 0;
  OSVersiouint64_t n = llvm::Triple::getOSVersion(a2);
  uint64_t v6 = ((unint64_t)OSVersion >> 28) & 0xFFF0;
  if (v5 < 0) {
    __int16 v7 = v5;
  }
  else {
    __int16 v7 = 0;
  }
  if (OSVersion >= 0) {
    LOWORD(v6) = 0;
  }
  *((_WORD *)this + 2) = v7 | ((_WORD)OSVersion << 8) | v6;
  int v8 = *((_DWORD *)a2 + 9);
  if (v8 <= 27)
  {
    if (v8 == 7)
    {
      int v9 = 2;
    }
    else
    {
      if (v8 != 11) {
        return;
      }
      int v9 = 1;
    }
  }
  else
  {
    switch(v8)
    {
      case 33:
        int v9 = 11;
        break;
      case 29:
        int v9 = 4;
        break;
      case 28:
        int v9 = 3;
        break;
      default:
        return;
    }
  }
  *(_DWORD *)this = v9;
}

uint64_t llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(void *a1, void *a2, uint64_t *a3)
{
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a2 + 48))(*a2, MEMORY[0x1E4FB9E98]);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (result)
  {
    uint64_t v8 = *a3;
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v7 + 24))(&__p, v7);
    unsigned int v9 = *(_DWORD *)(v8 + 8);
    unint64_t v10 = *(void *)v8;
    if (v9 >= *(_DWORD *)(v8 + 12))
    {
      BOOL v13 = v10 + 24 * v9 > (unint64_t)&__p;
      if (v10 > (unint64_t)&__p || !v13) {
        llvm::SmallVectorTemplateBase<std::string,false>::grow();
      }
      llvm::SmallVectorTemplateBase<std::string,false>::grow();
    }
    uint64_t v11 = v10 + 24 * *(unsigned int *)(v8 + 8);
    long long v12 = __p;
    *(void *)(v11 + 16) = v15;
    *(_OWORD *)uint64_t v11 = v12;
    uint64_t v15 = 0;
    long long __p = 0uLL;
    ++*(_DWORD *)(v8 + 8);
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)__p);
    }
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void AGCDylib::createLLVMObject(AGCDylib *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, llvm::Module *a4)
{
}

void AGX::DynamicLibraryKey::serialize(AGX::DynamicLibraryKey *this, const void **a2, unint64_t *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  uint64_t v6 = *((void *)this + 3) - *((void *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 2);
  uint64_t v7 = (unsigned int *)(*((void *)this + 2) + v6);
  *uint64_t v7 = ((*((_DWORD *)this + 6) - *((void *)this + 2)) >> 2 << 8) | 0x4F;
  v7[1] = *((_DWORD *)this + 10);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((void *)this + 2);
  *a3 = *((void *)this + 3) - *((void *)this + 2);
}

uint64_t AIRNTEmitExecutableImage(uint64_t *a1, void *a2, const char *a3, int a4, int a5, AGCTarget *this, int *a7, int a8, char **a9, char **a10, AGCError *a11)
{
  unsigned int v12 = this;
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  unsigned int v16 = AGCTarget::CPUSubtypeToTargetArch(this, a2, a3);
  if (!v16)
  {
    std::to_string((std::string *)&v102, v12);
    int64x2_t v29 = std::string::insert((std::string *)&v102, 0, "Unknown AGC target for CPU subtype: ");
    std::string::size_type v36 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    uint64_t v91 = v36;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (v91 >= 0) {
      uint64_t v37 = __p;
    }
    else {
      uint64_t v37 = (void **)__p[0];
    }
    AGCError::logError(a11, (char **)v37, v30, v31, v32, v33, v34, v35);
    if (SHIBYTE(v91) < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v103) < 0) {
      operator delete((void *)v102);
    }
    return 0;
  }
  unsigned __int16 v17 = v16;
  uint64_t TargetContext = AGCNativeTranslator::getTargetContext(a1, v16);
  uint64_t v25 = (unsigned __int16 *)((char *)a7 - *a7);
  if (*v25 < 9u || (uint64_t v26 = v25[4]) == 0)
  {
LABEL_6:
    AGCError::logError(a11, (char **)"Unsupported function script.", v19, v20, v21, v22, v23, v24);
    return 0;
  }
  uint64_t v27 = TargetContext;
  int v28 = *((unsigned __int8 *)a7 + v26);
  if (v28 != 6)
  {
    if (v28 != 5) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
  uint64_t v40 = AGCTarget::Get(v17);
  if (!((unsigned int (*)(uint64_t (***)()))(*v40)[3])(v40))
  {
    LODWORD(v91) = 7;
    std::string v93 = 0;
    uint64_t v94 = 0;
    std::string::size_type v92 = 0;
    __p[1] = &unk_1F25DA9E0;
    int v95 = 0;
    __int16 v96 = 0;
    std::string::size_type v97 = 0;
    int v98 = 0;
    uint64_t v99 = (uint64_t)a2;
    uint64_t v100 = a3;
    uint64_t v101 = "";
    __p[0] = &unk_1F25DA980;
    mach_absolute_time();
    uint64_t v38 = *(void *)(v27 + 16);
    if (!v38)
    {
      AGCError::logError(a11, (char **)"Failed to initialize AGX backend for target architecture.", v42, v43, v44, v45, v46, v47);
LABEL_62:
      __p[0] = &unk_1F25DA9B0;
      __p[1] = &unk_1F25DA9E0;
      if (v96)
      {
        std::string::size_type v97 = v96;
        operator delete(v96);
      }
      uint64_t v41 = &unk_1F25DAA20;
      goto LABEL_65;
    }
    *(unsigned char *)(v38 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses((AGCLLVMCtx *)v38);
    MEMORY[0x1CB79EDB0](v106);
    uint64_t v48 = v99;
    if (!v99) {
      goto LABEL_39;
    }
    if (v101) {
      strlen(v101);
    }
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    std::string::size_type v49 = v107.__r_.__value_.__r.__words[0];
    v107.__r_.__value_.__r.__words[0] = 0;
    if (v49) {
      (*(void (**)(std::string::size_type))(*(void *)v49 + 8))(v49);
    }
    if (v111)
    {
      uint64_t v79 = v110;
      int64x2_t v110 = 0;
      long long v105 = v79;
      llvm::toString(&v107, &v105);
      uint64_t v80 = std::string::insert(&v107, 0, "Error parsing bitcode file: ");
      std::string::size_type v87 = v80->__r_.__value_.__r.__words[2];
      long long v102 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      *(void *)&long long v103 = v87;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v103) & 0x80u) == 0) {
        std::string::size_type v88 = (char **)&v102;
      }
      else {
        std::string::size_type v88 = (char **)v102;
      }
      AGCError::logError(a11, v88, v81, v82, v83, v84, v85, v86);
      if (SBYTE7(v103) < 0) {
        operator delete((void *)v102);
      }
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v107.__r_.__value_.__l.__data_);
      }
      if (v105) {
        (*(void (**)(char *))(*(void *)v105 + 8))(v105);
      }
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v110);
      goto LABEL_54;
    }
    uint64_t v48 = (uint64_t)v110;
    int64x2_t v110 = 0;
    __int16 v109 = 260;
    v107.__r_.__value_.__r.__words[0] = v48 + 216;
    MEMORY[0x1CB79FA50](&v102, &v107);
    if (DWORD2(v103) == 49
      && v104 == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&v107, (const llvm::Triple *)&v102),
          pluginSupportsOSVersion((uint64_t)v107.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)&v102), !v50))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v107, (const llvm::Triple *)&v102);
      int v58 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v57 = &v107;
      }
      else {
        std::string::size_type v57 = (std::string *)v107.__r_.__value_.__r.__words[0];
      }
      AGCError::logError(a11, &v57->__r_.__value_.__l.__data_, v51, v52, v53, v54, v55, v56);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v107.__r_.__value_.__l.__data_);
      }
      int v58 = 0;
    }
    if (SBYTE7(v103) < 0) {
      operator delete((void *)v102);
    }
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v110);
    if (v58)
    {
LABEL_39:
      unint64_t v59 = (uint64_t (***)(void))(*(uint64_t (**)(void **, uint64_t, char *, uint64_t))__p[0])(__p, v38, v106, v48);
      if (v59)
      {
        uint64_t v66 = v59;
        if ((**v59)(v59))
        {
          int64x2_t v110 = 0;
          long long v105 = 0;
          long long v102 = 0u;
          long long v103 = 0u;
          v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DB1D0;
          v107.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
          unint64_t v108 = &v107;
          uint64_t v38 = ((uint64_t (*)(uint64_t (***)(void), char **, char **, long long *, std::string *))(*v66)[1])(v66, &v110, &v105, &v102, &v107);
          std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](&v107);
          if (v38)
          {
            *a9 = v110;
            *a10 = v105;
          }
          else
          {
            AGCError::logError(a11, (char **)"Error occurred composing compiler reply.", v73, v74, v75, v76, v77, v78);
          }
        }
        else
        {
          if (*((char *)v66 + 31) >= 0) {
            uint64_t v89 = (char **)(v66 + 1);
          }
          else {
            uint64_t v89 = (char **)v66[1];
          }
          AGCError::logError(a11, v89, v67, v68, v69, v70, v71, v72);
          uint64_t v38 = 0;
        }
        (*v66)[4](v66);
        goto LABEL_61;
      }
      AGCError::logError(a11, (char **)"Cannot create AGC LLVM object.", v60, v61, v62, v63, v64, v65);
    }
LABEL_54:
    uint64_t v38 = 0;
LABEL_61:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v106);
    goto LABEL_62;
  }
LABEL_17:
  LODWORD(v91) = 8;
  std::string v93 = 0;
  uint64_t v94 = 0;
  std::string::size_type v92 = 0;
  __p[1] = &unk_1F25DA900;
  int v95 = 512;
  __int16 v96 = a2;
  std::string::size_type v97 = (void *)a3;
  int v98 = "";
  __p[0] = &unk_1F25DA8A0;
  uint64_t v38 = AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject((uint64_t)__p, v27, a9, a10, a11);
  __p[0] = &unk_1F25DA8D0;
  uint64_t v41 = &unk_1F25DA940;
LABEL_65:
  __p[1] = v41;
  if (v92)
  {
    std::string v93 = v92;
    operator delete(v92);
  }
  return v38;
}

uint64_t ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::serialize(void *a1, void *a2, void *a3)
{
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25DB1D0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25DB1D0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
}

uint64_t AGCIntersectionFunction::createLLVMObject(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 32) + 208))(*(void *)(a2 + 32));
}

void AGX::Impl::UserIntersectionProgramKey::serialize(AGX::Impl::UserIntersectionProgramKey *this, const void **a2, unint64_t *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  uint64_t v6 = *((void *)this + 3) - *((void *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 2);
  uint64_t v7 = (unsigned int *)(*((void *)this + 2) + v6);
  *uint64_t v7 = ((*((_DWORD *)this + 6) - *((void *)this + 2)) >> 2 << 8) | 0x54;
  v7[1] = *((_DWORD *)this + 10);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((void *)this + 2);
  *a3 = *((void *)this + 3) - *((void *)this + 2);
}

uint64_t AIRNTEmitBuiltinExecutableImage(uint64_t *a1, unsigned int a2, AGCTarget *this, int *a4, uint64_t a5, char **a6, void *a7, AGCError *a8)
{
  unsigned int v12 = this;
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  unsigned int v14 = AGCTarget::CPUSubtypeToTargetArch(this, a2, (const char *)this);
  if (!v14)
  {
    std::to_string((std::string *)&v207, v12);
    uint64_t v27 = std::string::insert((std::string *)&v207, 0, "Unknown AGC target for CPU subtype: ");
    std::string::size_type v34 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    uint64_t v197 = v34;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (v197 >= 0) {
      uint64_t v35 = __p;
    }
    else {
      uint64_t v35 = (void **)__p[0];
    }
    AGCError::logError(a8, (char **)v35, v28, v29, v30, v31, v32, v33);
    if (SHIBYTE(v197) < 0) {
      operator delete(__p[0]);
    }
    if (v208.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v207);
    }
    return 0;
  }
  unsigned int v15 = v14;
  uint64_t TargetContext = AGCNativeTranslator::getTargetContext(a1, v14);
  uint64_t v17 = *(void *)AGCNativeTranslator::getTargetContext(a1, v15);
  if (!v17)
  {
    std::string::size_type v36 = "AGX key factory does not exist for target architecture.";
LABEL_38:
    AGCError::logError(a8, (char **)v36, v18, v19, v20, v21, v22, v23);
    return 0;
  }
  uint64_t v24 = (unsigned __int16 *)((char *)a4 - *a4);
  unsigned int v25 = *v24;
  if (v25 < 9 || !v24[4]) {
    goto LABEL_37;
  }
  BOOL v26 = v25 >= 0xB && *((unsigned char *)a4 + v24[4]) == 1;
  if (v26 && v24[5])
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v17 + 64))(&v207);
    int v215 = DWORD2(v207);
    std::string v216 = v208;
    memset(&v208, 0, sizeof(v208));
    v214 = &unk_1F25DBBF8;
    long long v217 = v209;
    long long v218 = v210;
    long long v219 = v211;
    LODWORD(v197) = DWORD2(v207);
    std::vector<unsigned int>::vector(&v198, (const std::vector<unsigned int> *)&v216);
    __p[1] = &unk_1F25DBBF8;
    long long v199 = v217;
    long long v200 = v218;
    long long v201 = v219;
    long long v202 = 0uLL;
    *(void *)uint64_t v203 = "";
    __p[0] = &unk_1F25DAAA0;
    v214 = &unk_1F25DAA60;
    if (v216.__r_.__value_.__r.__words[0])
    {
      v216.__r_.__value_.__l.__size_ = v216.__r_.__value_.__r.__words[0];
      operator delete(v216.__r_.__value_.__l.__data_);
    }
    mach_absolute_time();
    uint64_t v44 = *(void *)(TargetContext + 16);
    if (!v44)
    {
      AGCError::logError(a8, (char **)"Failed to initialize AGX backend for target architecture.", v47, v48, v49, v50, v51, v52);
LABEL_127:
      __p[0] = &unk_1F25DAAD0;
      __p[1] = &unk_1F25DAA60;
      if (v198.__begin_)
      {
        v198.__end_ = v198.__begin_;
        operator delete(v198.__begin_);
      }
      long long v142 = &unk_1F25DAA60;
      goto LABEL_172;
    }
    *(unsigned char *)(v44 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses((AGCLLVMCtx *)v44);
    MEMORY[0x1CB79EDB0](v223);
    uint64_t v53 = v202;
    if (!(void)v202) {
      goto LABEL_71;
    }
    if (*(void *)v203) {
      strlen(*(const char **)v203);
    }
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    std::string::size_type v61 = v224.__r_.__value_.__r.__words[0];
    v224.__r_.__value_.__r.__words[0] = 0;
    if (v61) {
      (*(void (**)(std::string::size_type))(*(void *)v61 + 8))(v61);
    }
    if (v228)
    {
      uint64_t v91 = v227;
      v227 = 0;
      v222 = v91;
      llvm::toString(&v224, &v222);
      std::string::size_type v92 = std::string::insert(&v224, 0, "Error parsing bitcode file: ");
      std::string::size_type v99 = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)v220 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      *(void *)&v220[16] = v99;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      if (v220[23] >= 0) {
        uint64_t v100 = (char **)v220;
      }
      else {
        uint64_t v100 = *(char ***)v220;
      }
      AGCError::logError(a8, v100, v93, v94, v95, v96, v97, v98);
      if ((v220[23] & 0x80000000) != 0) {
        operator delete(*(void **)v220);
      }
      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v224.__r_.__value_.__l.__data_);
      }
      if (v222) {
        (*(void (**)(char *))(*(void *)v222 + 8))(v222);
      }
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v227);
      goto LABEL_86;
    }
    uint64_t v53 = (uint64_t)v227;
    v227 = 0;
    __int16 v226 = 260;
    v224.__r_.__value_.__r.__words[0] = v53 + 216;
    MEMORY[0x1CB79FA50](v220, &v224);
    if (*(_DWORD *)&v220[24] == 49
      && *(_DWORD *)&v220[32] == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&v224, (const llvm::Triple *)v220),
          pluginSupportsOSVersion((uint64_t)v224.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v220), !v62))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v224, (const llvm::Triple *)v220);
      int v70 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v69 = &v224;
      }
      else {
        uint64_t v69 = (std::string *)v224.__r_.__value_.__r.__words[0];
      }
      AGCError::logError(a8, &v69->__r_.__value_.__l.__data_, v63, v64, v65, v66, v67, v68);
      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v224.__r_.__value_.__l.__data_);
      }
      int v70 = 0;
    }
    if ((v220[23] & 0x80000000) != 0) {
      operator delete(*(void **)v220);
    }
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v227);
    if (v70)
    {
LABEL_71:
      uint64_t v71 = (uint64_t (***)(void))(*(uint64_t (**)(void **, uint64_t, char *, uint64_t))__p[0])(__p, v44, v223, v53);
      if (v71)
      {
        uint64_t v78 = v71;
        if ((**v71)(v71))
        {
          v227 = 0;
          v222 = 0;
          memset(v220, 0, 32);
          v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DB218;
          v224.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
          v225 = &v224;
          uint64_t v44 = ((uint64_t (*)(uint64_t (***)(void), char **, char **, unsigned char *, std::string *))(*v78)[1])(v78, &v227, &v222, v220, &v224);
          std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](&v224);
          if (v44)
          {
            *a6 = v227;
            *a7 = v222;
          }
          else
          {
            AGCError::logError(a8, (char **)"Error occurred composing compiler reply.", v85, v86, v87, v88, v89, v90);
          }
        }
        else
        {
          if (*((char *)v78 + 31) >= 0) {
            uint64_t v101 = (char **)(v78 + 1);
          }
          else {
            uint64_t v101 = (char **)v78[1];
          }
          AGCError::logError(a8, v101, v79, v80, v81, v82, v83, v84);
          uint64_t v44 = 0;
        }
        (*v78)[4](v78);
        goto LABEL_126;
      }
      AGCError::logError(a8, (char **)"Cannot create AGC LLVM object.", v72, v73, v74, v75, v76, v77);
    }
LABEL_86:
    uint64_t v44 = 0;
LABEL_126:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v223);
    goto LABEL_127;
  }
  if (!v24[4])
  {
LABEL_37:
    std::string::size_type v36 = "Unsupported driver shader script.";
    goto LABEL_38;
  }
  BOOL v37 = v25 >= 0xB && *((unsigned char *)a4 + v24[4]) == 2;
  if (v37 && v24[5])
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v17 + 72))(&v207);
    int v189 = DWORD2(v207);
    std::string v190 = v208;
    memset(&v208, 0, sizeof(v208));
    long long v193 = v211;
    long long v194 = v212;
    *(_OWORD *)int v195 = v213[0];
    *(void *)&v195[14] = *(void *)((char *)v213 + 14);
    long long v191 = v209;
    long long v192 = v210;
    __p[0] = &unk_1F25DAB30;
    __p[1] = &unk_1F25DBC78;
    LODWORD(v197) = DWORD2(v207);
    std::vector<unsigned int>::vector(&v198, (const std::vector<unsigned int> *)&v190);
    __p[1] = &unk_1F25DBC38;
    long long v201 = v193;
    long long v202 = v194;
    *(_OWORD *)uint64_t v203 = *(_OWORD *)v195;
    *(void *)&v203[14] = *(void *)&v195[14];
    long long v199 = v191;
    long long v200 = v192;
    uint64_t v204 = 0;
    uint64_t v205 = 0;
    v206 = "";
    __p[0] = &unk_1F25DAB00;
    v188 = &unk_1F25DBC78;
    if (v190.__r_.__value_.__r.__words[0])
    {
      v190.__r_.__value_.__l.__size_ = v190.__r_.__value_.__r.__words[0];
      operator delete(v190.__r_.__value_.__l.__data_);
    }
    mach_absolute_time();
    uint64_t v44 = *(void *)(TargetContext + 16);
    if (!v44)
    {
      AGCError::logError(a8, (char **)"Failed to initialize AGX backend for target architecture.", v54, v55, v56, v57, v58, v59);
LABEL_169:
      __p[0] = &unk_1F25DAB30;
      __p[1] = &unk_1F25DBC78;
      if (v198.__begin_)
      {
        v198.__end_ = v198.__begin_;
        operator delete(v198.__begin_);
      }
      long long v142 = &unk_1F25DBC78;
LABEL_172:
      *(void *)&long long v207 = v142;
      std::vector<unsigned int>::pointer v184 = (std::vector<unsigned int>::pointer)v208.__r_.__value_.__r.__words[0];
      if (v208.__r_.__value_.__r.__words[0])
      {
        v208.__r_.__value_.__l.__size_ = v208.__r_.__value_.__r.__words[0];
LABEL_174:
        operator delete(v184);
        return v44;
      }
      return v44;
    }
    *(unsigned char *)(v44 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses((AGCLLVMCtx *)v44);
    MEMORY[0x1CB79EDB0](v223);
    uint64_t v60 = v204;
    if (!v204) {
      goto LABEL_108;
    }
    if (v206) {
      strlen(v206);
    }
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    std::string::size_type v102 = v224.__r_.__value_.__r.__words[0];
    v224.__r_.__value_.__r.__words[0] = 0;
    if (v102) {
      (*(void (**)(std::string::size_type))(*(void *)v102 + 8))(v102);
    }
    if (v228)
    {
      long long v132 = v227;
      v227 = 0;
      v222 = v132;
      llvm::toString(&v224, &v222);
      uint64_t v133 = std::string::insert(&v224, 0, "Error parsing bitcode file: ");
      std::string::size_type v140 = v133->__r_.__value_.__r.__words[2];
      *(_OWORD *)v220 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
      *(void *)&v220[16] = v140;
      v133->__r_.__value_.__l.__size_ = 0;
      v133->__r_.__value_.__r.__words[2] = 0;
      v133->__r_.__value_.__r.__words[0] = 0;
      if (v220[23] >= 0) {
        uint64_t v141 = (char **)v220;
      }
      else {
        uint64_t v141 = *(char ***)v220;
      }
      AGCError::logError(a8, v141, v134, v135, v136, v137, v138, v139);
      if ((v220[23] & 0x80000000) != 0) {
        operator delete(*(void **)v220);
      }
      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v224.__r_.__value_.__l.__data_);
      }
      if (v222) {
        (*(void (**)(char *))(*(void *)v222 + 8))(v222);
      }
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v227);
      goto LABEL_123;
    }
    uint64_t v60 = (uint64_t)v227;
    v227 = 0;
    __int16 v226 = 260;
    v224.__r_.__value_.__r.__words[0] = v60 + 216;
    MEMORY[0x1CB79FA50](v220, &v224);
    if (*(_DWORD *)&v220[24] == 49
      && *(_DWORD *)&v220[32] == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&v224, (const llvm::Triple *)v220),
          pluginSupportsOSVersion((uint64_t)v224.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v220), !v103))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v224, (const llvm::Triple *)v220);
      int v111 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64x2_t v110 = &v224;
      }
      else {
        int64x2_t v110 = (std::string *)v224.__r_.__value_.__r.__words[0];
      }
      AGCError::logError(a8, &v110->__r_.__value_.__l.__data_, v104, v105, v106, v107, v108, v109);
      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v224.__r_.__value_.__l.__data_);
      }
      int v111 = 0;
    }
    if ((v220[23] & 0x80000000) != 0) {
      operator delete(*(void **)v220);
    }
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v227);
    if (v111)
    {
LABEL_108:
      uint64_t v112 = (uint64_t (***)(void))(*(uint64_t (**)(void **, uint64_t, char *, uint64_t))__p[0])(__p, v44, v223, v60);
      if (v112)
      {
        unint64_t v119 = v112;
        if ((**v112)(v112))
        {
          v227 = 0;
          v222 = 0;
          memset(v220, 0, 32);
          v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DB260;
          v224.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
          v225 = &v224;
          uint64_t v44 = ((uint64_t (*)(uint64_t (***)(void), char **, char **, unsigned char *, std::string *))(*v119)[1])(v119, &v227, &v222, v220, &v224);
          std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](&v224);
          if (v44)
          {
            *a6 = v227;
            *a7 = v222;
          }
          else
          {
            AGCError::logError(a8, (char **)"Error occurred composing compiler reply.", v126, v127, v128, v129, v130, v131);
          }
        }
        else
        {
          if (*((char *)v119 + 31) >= 0) {
            long long v143 = (char **)(v119 + 1);
          }
          else {
            long long v143 = (char **)v119[1];
          }
          AGCError::logError(a8, v143, v120, v121, v122, v123, v124, v125);
          uint64_t v44 = 0;
        }
        (*v119)[4](v119);
        goto LABEL_168;
      }
      AGCError::logError(a8, (char **)"Cannot create AGC LLVM object.", v113, v114, v115, v116, v117, v118);
    }
LABEL_123:
    uint64_t v44 = 0;
LABEL_168:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v223);
    goto LABEL_169;
  }
  if (!v24[4] || v25 < 0xB || *((unsigned char *)a4 + v24[4]) != 3 || !v24[5]) {
    goto LABEL_37;
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v17 + 80))(v220);
  std::vector<unsigned int> v186 = *(std::vector<unsigned int> *)&v220[16];
  memset(&v220[16], 0, 24);
  int v187 = v221;
  __p[0] = &unk_1F25DABD0;
  __p[1] = &unk_1F25DAB60;
  LODWORD(v197) = *(_DWORD *)&v220[8];
  std::vector<unsigned int>::vector(&v198, &v186);
  __p[1] = &unk_1F25DBCB8;
  LODWORD(v199) = v187;
  *((void *)&v199 + 1) = 0;
  *(void *)&long long v200 = 0;
  *((void *)&v200 + 1) = "";
  __p[0] = &unk_1F25DABA0;
  if (v186.__begin_)
  {
    v186.__end_ = v186.__begin_;
    operator delete(v186.__begin_);
  }
  mach_absolute_time();
  uint64_t v44 = *(void *)(TargetContext + 16);
  if (!v44)
  {
    AGCError::logError(a8, (char **)"Failed to initialize AGX backend for target architecture.", v38, v39, v40, v41, v42, v43);
    goto LABEL_183;
  }
  *(unsigned char *)(v44 + 377) = 0;
  AGCLLVMCtx::createGraphicsPasses((AGCLLVMCtx *)v44);
  MEMORY[0x1CB79EDB0](v223);
  uint64_t v45 = *((void *)&v199 + 1);
  if (!*((void *)&v199 + 1)) {
    goto LABEL_150;
  }
  if (*((void *)&v200 + 1)) {
    strlen(*((const char **)&v200 + 1));
  }
  llvm::MemoryBuffer::getMemBuffer();
  llvm::MemoryBufferRef::MemoryBufferRef();
  llvm::parseBitcodeFile();
  std::string::size_type v144 = v224.__r_.__value_.__r.__words[0];
  v224.__r_.__value_.__r.__words[0] = 0;
  if (v144) {
    (*(void (**)(std::string::size_type))(*(void *)v144 + 8))(v144);
  }
  if (v228)
  {
    v174 = v227;
    v227 = 0;
    v222 = v174;
    llvm::toString(&v224, &v222);
    v175 = std::string::insert(&v224, 0, "Error parsing bitcode file: ");
    v182 = (unsigned int *)v175->__r_.__value_.__r.__words[2];
    long long v207 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
    v208.__r_.__value_.__r.__words[0] = (std::string::size_type)v182;
    v175->__r_.__value_.__l.__size_ = 0;
    v175->__r_.__value_.__r.__words[2] = 0;
    v175->__r_.__value_.__r.__words[0] = 0;
    if (v208.__r_.__value_.__s.__data_[7] >= 0) {
      v183 = (char **)&v207;
    }
    else {
      v183 = (char **)v207;
    }
    AGCError::logError(a8, v183, v176, v177, v178, v179, v180, v181);
    if (v208.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v207);
    }
    if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v224.__r_.__value_.__l.__data_);
    }
    if (v222) {
      (*(void (**)(char *))(*(void *)v222 + 8))(v222);
    }
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v227);
    goto LABEL_165;
  }
  uint64_t v45 = (uint64_t)v227;
  v227 = 0;
  __int16 v226 = 260;
  v224.__r_.__value_.__r.__words[0] = v45 + 216;
  MEMORY[0x1CB79FA50](&v207, &v224);
  if (LODWORD(v208.__r_.__value_.__r.__words[1]) == 49
    && LODWORD(v208.__r_.__value_.__r.__words[2]) == 1
    && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&v224, (const llvm::Triple *)&v207),
        pluginSupportsOSVersion((uint64_t)v224.__r_.__value_.__l.__data_))
    && (llvm::Triple::getEnvironmentName((llvm::Triple *)&v207), !v145))
  {
    AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v224, (const llvm::Triple *)&v207);
    int v153 = 1;
  }
  else
  {
    std::operator+<char>();
    if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v152 = &v224;
    }
    else {
      uint64_t v152 = (std::string *)v224.__r_.__value_.__r.__words[0];
    }
    AGCError::logError(a8, &v152->__r_.__value_.__l.__data_, v146, v147, v148, v149, v150, v151);
    if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v224.__r_.__value_.__l.__data_);
    }
    int v153 = 0;
  }
  if (v208.__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)v207);
  }
  llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v227);
  if (v153)
  {
LABEL_150:
    long long v154 = (uint64_t (***)(void))(*(uint64_t (**)(void **, uint64_t, char *, uint64_t))__p[0])(__p, v44, v223, v45);
    if (v154)
    {
      v161 = v154;
      if ((**v154)(v154))
      {
        v227 = 0;
        v222 = 0;
        long long v207 = 0u;
        *(_OWORD *)&v208.__r_.__value_.__l.__data_ = 0u;
        v224.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DB2A8;
        v224.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
        v225 = &v224;
        uint64_t v44 = ((uint64_t (*)(uint64_t (***)(void), char **, char **, long long *, std::string *))(*v161)[1])(v161, &v227, &v222, &v207, &v224);
        std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](&v224);
        if (v44)
        {
          *a6 = v227;
          *a7 = v222;
        }
        else
        {
          AGCError::logError(a8, (char **)"Error occurred composing compiler reply.", v168, v169, v170, v171, v172, v173);
        }
      }
      else
      {
        if (*((char *)v161 + 31) >= 0) {
          v185 = (char **)(v161 + 1);
        }
        else {
          v185 = (char **)v161[1];
        }
        AGCError::logError(a8, v185, v162, v163, v164, v165, v166, v167);
        uint64_t v44 = 0;
      }
      (*v161)[4](v161);
      goto LABEL_182;
    }
    AGCError::logError(a8, (char **)"Cannot create AGC LLVM object.", v155, v156, v157, v158, v159, v160);
  }
LABEL_165:
  uint64_t v44 = 0;
LABEL_182:
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v223);
LABEL_183:
  __p[0] = &unk_1F25DABD0;
  __p[1] = &unk_1F25DAB60;
  if (v198.__begin_)
  {
    v198.__end_ = v198.__begin_;
    operator delete(v198.__begin_);
  }
  *(void *)v220 = &unk_1F25DAB60;
  std::vector<unsigned int>::pointer v184 = *(std::vector<unsigned int>::pointer *)&v220[16];
  if (*(void *)&v220[16])
  {
    *(void *)&v220[24] = *(void *)&v220[16];
    goto LABEL_174;
  }
  return v44;
}

uint64_t std::__function::__func<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t std::__function::__func<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25DB2A8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25DB2A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::serialize(void *a1, void *a2, void *a3)
{
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, const std::vector<unsigned int> *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  begiuint64_t n = __x->__begin_;
  end = __x->__end_;
  int64_t v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    if ((char *)end - (char *)__x->__begin_ < 0) {
      abort();
    }
    uint64_t v6 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v5 >> 2);
    this->__begin_ = v6;
    this->__end_ = v6;
    this->__end_cap_.__value_ = &v6[v7];
    memmove(v6, begin, v5);
    this->__end_ = (unsigned int *)((char *)v6 + v5);
  }
  return this;
}

uint64_t AGCBVHBuilderDriverShader::createLLVMObject(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 32) + 176))(*(void *)(a2 + 32));
}

uint64_t AGX::BVHBuilderProgramKey::isPrecompiledToBinaryArchive(AGX::BVHBuilderProgramKey *this)
{
  return 0;
}

BOOL AGX::BVHBuilderProgramKey::isPrecompiledToPipelineCache(AGX::BVHBuilderProgramKey *this)
{
  return (*((unsigned char *)this + 43) & 0x40) == 0;
}

void AGX::BVHBuilderProgramKey::serialize(AGX::BVHBuilderProgramKey *this, const void **a2, unint64_t *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  uint64_t v6 = *((void *)this + 3) - *((void *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 2);
  uint64_t v7 = (unsigned int *)(*((void *)this + 2) + v6);
  *uint64_t v7 = ((*((_DWORD *)this + 6) - *((void *)this + 2)) >> 2 << 8) | 0x55;
  v7[1] = *((_DWORD *)this + 10);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((void *)this + 2);
  *a3 = *((void *)this + 3) - *((void *)this + 2);
}

uint64_t std::__function::__func<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t std::__function::__func<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25DB260;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25DB260;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::serialize(void *a1, void *a2, void *a3)
{
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void AGCEndOfTileDriverShader::createLLVMObject(AGCEndOfTileDriverShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, llvm::Module *a4)
{
}

BOOL AGX::EndOfTileProgramKey::isPrecompiledToPipelineCache(AGX::EndOfTileProgramKey *this)
{
  int v8 = 19;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = &unk_1F25DBC38;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  memset(v16, 0, sizeof(v16));
  if (AGX::EndOfTileProgramKey::operator==((uint64_t)this, (uint64_t)&v7)) {
    return 1;
  }
  char v3 = 0;
  for (uint64_t i = 40; i != 108; i += 4)
    v3 |= *((unsigned char *)this + i) != 0;
  LOBYTE(v5) = 0;
  for (uint64_t j = 40; j != 108; j += 4)
    int v5 = v5 & 1 | ((*(_DWORD *)((unsigned char *)this + j) & 0x2000000) != 0);
  int v18 = 19;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = &unk_1F25DBC38;
  uint64_t v26 = 0;
  *(void *)((char *)v27 + 6) = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  v27[0] = 0x200000000000000;
  LODWORD(v22) = v3 & 1 | (v5 << 25);
  return AGX::EndOfTileProgramKey::operator==((uint64_t)&v17, (uint64_t)this);
}

BOOL AGX::EndOfTileProgramKey::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  for (uint64_t i = 40; i != 108; i += 4)
    v2 |= (*(_DWORD *)(a2 + i) ^ *(_DWORD *)(a1 + i));
  return (*(void *)(a2 + 112) ^ *(void *)(a1 + 112) | (unsigned __int16)(*(_WORD *)(a2 + 120) ^ *(_WORD *)(a1 + 120)) | (unsigned __int16)(*(_WORD *)(a2 + 122) ^ *(_WORD *)(a1 + 122)) | (unint64_t)(unsigned __int16)(*(_WORD *)(a2 + 124) ^ *(_WORD *)(a1 + 124)) | v2) == 0;
}

void AGX::EndOfTileProgramKey::serialize(AGX::EndOfTileProgramKey *this, const void **a2, unint64_t *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  uint64_t v6 = *((void *)this + 3) - *((void *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 22);
  uint64_t v7 = *((void *)this + 2) + v6;
  *(_DWORD *)uint64_t v7 = ((*((_DWORD *)this + 6) - *((void *)this + 2)) >> 2 << 8) | 0x45;
  *(_OWORD *)(v7 + 4) = *(_OWORD *)((char *)this + 40);
  long long v8 = *(_OWORD *)((char *)this + 56);
  long long v9 = *(_OWORD *)((char *)this + 72);
  long long v10 = *(_OWORD *)((char *)this + 88);
  *(_OWORD *)(v7 + 68) = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)(v7 + 52) = v10;
  *(_OWORD *)(v7 + 36) = v9;
  *(_OWORD *)(v7 + 20) = v8;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((void *)this + 2);
  *a3 = *((void *)this + 3) - *((void *)this + 2);
}

uint64_t std::__function::__func<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t std::__function::__func<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25DB218;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25DB218;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::serialize(void *a1, void *a2, void *a3)
{
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void AGCBackgroundObjectDriverShader::createLLVMObject(AGCBackgroundObjectDriverShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, llvm::Module *a4)
{
}

uint64_t AGX::BackgroundObjectProgramKey::isPrecompiledToPipelineCache(AGX::BackgroundObjectProgramKey *this)
{
  int v1 = *((_DWORD *)this + 18);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  WORD6(v14) = 256;
  DWORD2(v14) = 0;
  LODWORD(v14) = v1 & 0xF000;
  char v2 = 1;
  for (uint64_t i = 40; i != 72; i += 4)
    v2 &= *(_DWORD *)&v11[i] == *(_DWORD *)((char *)this + i);
  uint64_t v4 = *((void *)this + 10);
  if ((v1 & 0xF000) == v1 && *((void *)&v14 + 1) == v4) {
    char v6 = v2;
  }
  else {
    char v6 = 0;
  }
  if (v6) {
    return 1;
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  LOBYTE(v8) = 1;
  for (uint64_t j = 40; j != 72; j += 4)
    unsigned int v8 = v8 & (*(_DWORD *)((char *)this + j) == *(_DWORD *)&v11[j]);
  if (v1) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v4 == 0;
  }
  if (v10) {
    return v8;
  }
  else {
    return 0;
  }
}

void AGX::BackgroundObjectProgramKey::serialize(AGX::BackgroundObjectProgramKey *this, const void **a2, unint64_t *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  uint64_t v6 = *((void *)this + 3) - *((void *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 4);
  uint64_t v7 = *((void *)this + 2) + v6;
  *(_DWORD *)uint64_t v7 = ((*((_DWORD *)this + 6) - *((void *)this + 2)) >> 2 << 8) | 0x44;
  *(void *)(v7 + 4) = *((void *)this + 10);
  uint64_t v8 = *((void *)this + 3) - *((void *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v8 >> 2) + 12);
  uint64_t v9 = *((void *)this + 2) + v8;
  *(_DWORD *)uint64_t v9 = ((*((_DWORD *)this + 6) - *((void *)this + 2)) >> 2 << 8) | 0x42;
  long long v10 = *(_OWORD *)((char *)this + 40);
  long long v11 = *(_OWORD *)((char *)this + 56);
  *(void *)(v9 + 36) = *((void *)this + 9);
  *(_OWORD *)(v9 + 20) = v11;
  *(_OWORD *)(v9 + 4) = v10;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((void *)this + 2);
  *a3 = *((void *)this + 3) - *((void *)this + 2);
}

uint64_t AIRNTEmitPipelineImage(uint64_t *a1, uint64_t a2, const char *a3, const char *a4, uint64_t a5, int a6, int a7, AGCTarget *this, int *a9, uint64_t a10, void *a11, char **a12, void **a13, void *a14, AGCError *a15)
{
  unsigned int v15 = this;
  unsigned int v20 = AGCTarget::CPUSubtypeToTargetArch(this, a2, a3);
  if (!v20)
  {
    std::to_string(&v94, v15);
    std::string::size_type v34 = std::string::insert(&v94, 0, "Unknown AGC target for CPU subtype: ");
    std::string::size_type v41 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    uint64_t v69 = v41;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (v69 >= 0) {
      uint64_t v42 = __p;
    }
    else {
      uint64_t v42 = (void **)__p[0];
    }
    AGCError::logError(a15, (char **)v42, v35, v36, v37, v38, v39, v40);
    if (SHIBYTE(v69) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  unsigned int v21 = v20;
  uint64_t TargetContext = AGCNativeTranslator::getTargetContext(a1, v20);
  uint64_t v29 = *(void *)AGCNativeTranslator::getTargetContext(a1, v21);
  if (!v29)
  {
    uint64_t v43 = "AGX key factory does not exist for target architecture.";
LABEL_88:
    AGCError::logError(a15, (char **)v43, v23, v24, v25, v26, v27, v28);
    return 0;
  }
  uint64_t v30 = (unsigned __int16 *)((char *)a9 - *a9);
  unsigned int v31 = *v30;
  if (v31 < 9 || !v30[4]) {
    goto LABEL_87;
  }
  BOOL v32 = v31 >= 0xB && *((unsigned char *)a9 + v30[4]) == 1;
  if (v32 && v30[5])
  {
    uint64_t v33 = (uint64_t)a9 + v30[5] + *(unsigned int *)((char *)a9 + v30[5]);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v120 = *(std::string *)a2;
    }
    if (*(char *)(a2 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
    }
    else {
      std::string v121 = *(std::string *)(a2 + 24);
    }
    char v122 = *(unsigned char *)(a2 + 48);
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, void, void **, void **, void))(*(void *)v29 + 16))(&v94, v29, v33, &v120, 0, &v117, &v114, 0);
    if (v114)
    {
      uint64_t v115 = v114;
      operator delete(v114);
    }
    if (v117)
    {
      uint64_t v118 = v117;
      operator delete(v117);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
    AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions((uint64_t)&v94, (unsigned __int8 *)(a2 + 56));
    unsigned int v96 = v96 & 0xFFFFFFF4 | *(unsigned __int8 *)(a2 + 70) | (2 * *(unsigned __int8 *)(a2 + 71)) | (8
                                                                                                  * *(unsigned __int8 *)(a2 + 72));
    unint64_t v97 = v97 & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a2 + 73) << 26);
    AGX::Impl::VertexProgramKey::VertexProgramKey((AGX::Impl::VertexProgramKey *)&__p[1], (const AGX::Impl::VertexProgramKey *)&v94);
    uint64_t v78 = a4;
    uint64_t v79 = a5;
    uint64_t v80 = "";
    __p[0] = &unk_1F25DAC00;
    uint64_t v47 = AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject((uint64_t)__p, TargetContext, a11, a12, a15, a13, a14);
    __p[0] = &unk_1F25DAC30;
    AGX::Impl::VertexProgramKey::~VertexProgramKey(&__p[1]);
    AGX::Impl::VertexProgramKey::~VertexProgramKey((void **)&v94.__r_.__value_.__l.__data_);
    return v47;
  }
  if (!v30[4]) {
    goto LABEL_87;
  }
  BOOL v44 = v31 >= 0xB && *((unsigned char *)a9 + v30[4]) == 2;
  if (v44 && v30[5])
  {
    uint64_t v45 = (uint64_t)a9 + v30[5] + *(unsigned int *)((char *)a9 + v30[5]);
    uint64_t v93 = 0;
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    std::string::size_type v92 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void, void, void **, void **))(*(void *)v29 + 40))(&v94, v29, v45, 0, 0, &v91, &v88);
    if (v88)
    {
      uint64_t v89 = v88;
      operator delete(v88);
    }
    if (v91)
    {
      std::string::size_type v92 = v91;
      operator delete(v91);
    }
    AGX::Impl::FragmentProgramKey::setDeviceOptions((uint64_t)&v94, (unsigned __int8 *)(a2 + 56));
    unsigned int v46 = v101 & 0xFFFFFF7F | (*(unsigned __int8 *)(a2 + 73) << 7);
    HIDWORD(v100) = HIDWORD(v100) & 0xFFFFFFF4 | *(unsigned __int8 *)(a2 + 70) | (2 * *(unsigned __int8 *)(a2 + 71)) | (8 * *(unsigned __int8 *)(a2 + 72));
    LODWORD(v101) = v46;
    AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&__p[1], (const AGX::Impl::FragmentProgramKey *)&v94);
    uint64_t v81 = a4;
    uint64_t v82 = a5;
    uint64_t v83 = "";
    __p[0] = &unk_1F25DACE8;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    char v87 = 0;
    uint64_t v47 = AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject((uint64_t)__p, TargetContext, a11, a12, a15, a13, a14);
    __p[0] = &unk_1F25DACE8;
    if (SHIBYTE(v86) < 0) {
      operator delete(*((void **)&v85 + 1));
    }
    if (SBYTE7(v85) < 0) {
      operator delete((void *)v84);
    }
    AGCModule<AGX::Impl::FragmentProgramKey>::~AGCModule((uint64_t)__p);
    v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DBDD0;
    if (v112)
    {
      uint64_t v113 = v112;
      operator delete(v112);
    }
    if (v110)
    {
      int v111 = v110;
      operator delete(v110);
    }
    if (v109 < 0) {
      operator delete(v108);
    }
    if (v107 < 0) {
      operator delete(v106);
    }
    if (v105 < 0) {
      operator delete(v104);
    }
    uint64_t v48 = &unk_1F25DAD48;
LABEL_73:
    v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
    if (v94.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v95 = v94.__r_.__value_.__r.__words[2];
      operator delete((void *)v94.__r_.__value_.__r.__words[2]);
    }
    return v47;
  }
  if (!v30[4]) {
    goto LABEL_87;
  }
  BOOL v49 = v31 >= 0xB && *((unsigned char *)a9 + v30[4]) == 3;
  if (v49 && v30[5])
  {
    uint64_t v50 = (uint64_t)a9 + v30[5] + *(unsigned int *)((char *)a9 + v30[5]);
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void, void **, void **))(*(void *)v29 + 48))(&v94, v29, v50, 0, &v65, &v62);
    if (v62)
    {
      uint64_t v63 = v62;
      operator delete(v62);
    }
    if (v65)
    {
      uint64_t v66 = v65;
      operator delete(v65);
    }
    AGX::Impl::ComputeProgramKey::setDeviceOptions((uint64_t)&v94, (unsigned __int8 *)(a2 + 56));
    int v51 = v97 & 0xFFFFFEFF | (*(unsigned __int8 *)(a2 + 73) << 8);
    unsigned int v96 = v96 & 0xFFFFFFF4 | *(unsigned __int8 *)(a2 + 70) | (2 * *(unsigned __int8 *)(a2 + 71)) | (8
                                                                                                  * *(unsigned __int8 *)(a2 + 72));
    LODWORD(v97) = v51;
    AGCModule<AGX::Impl::ComputeProgramKey>::AGCModule((uint64_t)__p, (uint64_t)a4, a5, (uint64_t)&v94);
    __p[0] = &unk_1F25DADA0;
    uint64_t v47 = AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject((uint64_t)__p, TargetContext, a11, a12, a15, a13, a14);
    __p[0] = &unk_1F25DADD0;
    __p[1] = &unk_1F25DBE50;
    if (v76)
    {
      uint64_t v77 = v76;
      operator delete(v76);
    }
    if (v74)
    {
      uint64_t v75 = v74;
      operator delete(v74);
    }
    if (v73 < 0) {
      operator delete(v72);
    }
    __p[1] = &unk_1F25DAE00;
    if (v70)
    {
      uint64_t v71 = v70;
      operator delete(v70);
    }
    v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DBE50;
    if (v102)
    {
      uint64_t v103 = v102;
      operator delete(v102);
    }
    if (v100)
    {
      uint64_t v101 = v100;
      operator delete(v100);
    }
    if (v99 < 0) {
      operator delete(v98);
    }
    uint64_t v48 = &unk_1F25DAE00;
    goto LABEL_73;
  }
  if (!v30[4] || (v31 >= 0xB ? (BOOL v52 = *((unsigned char *)a9 + v30[4]) == 4) : (BOOL v52 = 0), !v52 || (v53 = v30[5]) == 0))
  {
LABEL_87:
    uint64_t v43 = "Unsupported function script.";
    goto LABEL_88;
  }
  uint64_t v54 = (uint64_t)a9 + v53 + *(unsigned int *)((char *)a9 + v53);
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void **, void **))(*(void *)v29 + 56))(&v94, v29, v54, &v59, &v56);
  if (v56)
  {
    uint64_t v57 = v56;
    operator delete(v56);
  }
  if (v59)
  {
    uint64_t v60 = v59;
    operator delete(v59);
  }
  AGX::Impl::FragmentProgramKey::setDeviceOptions((uint64_t)&v94, (unsigned __int8 *)(a2 + 56));
  AGX::Impl::TileProgramKey::setCompileOptions((uint64_t)&v94, (unsigned __int8 *)(a2 + 70));
  AGCTileFunction::AGCTileFunction((AGCTileFunction *)__p, a4, a5, (const AGX::Impl::TileProgramKey *)&v94);
  uint64_t v47 = AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject((uint64_t)__p, TargetContext, a11, a12, a15, a13, a14);
  AGCTileFunction::~AGCTileFunction((AGCTileFunction *)__p);
  AGX::Impl::TileProgramKey::~TileProgramKey((AGX::Impl::TileProgramKey *)&v94);
  return v47;
}

uint64_t AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(uint64_t result, unsigned __int8 *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 52) & 0xFBFFFFFF | (*a2 << 26);
  *(_DWORD *)(result + 52) = v2;
  unsigned int v3 = v2 & 0xFFFFFEFF | (a2[1] << 8);
  *(_DWORD *)(result + 52) = v3;
  unsigned int v4 = v3 & 0xEFFFFFFF | (a2[2] << 28);
  *(_DWORD *)(result + 52) = v4;
  unsigned int v5 = v4 & 0xDFFFFFFF | (a2[4] << 29);
  *(_DWORD *)(result + 52) = v5;
  *(_DWORD *)(result + 52) = v5 & 0xBFFFFFFF | (a2[6] << 30);
  unint64_t v6 = *(void *)(result + 56) & 0xFFFFFFFFFF7FFFFFLL | ((unint64_t)a2[7] << 23);
  *(void *)(result + 56) = v6;
  unint64_t v7 = v6 & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)a2[8] << 24);
  *(void *)(result + 56) = v7;
  unint64_t v8 = v7 & 0xFFFFFFFFF7FFFFFFLL | ((unint64_t)a2[9] << 27);
  *(void *)(result + 56) = v8;
  *(void *)(result + 56) = v8 & 0xFFFFFDFFFFFFFFFFLL | ((unint64_t)a2[3] << 41);
  return result;
}

AGX::Impl::VertexProgramKey *AGX::Impl::VertexProgramKey::VertexProgramKey(AGX::Impl::VertexProgramKey *this, const AGX::Impl::VertexProgramKey *a2)
{
  *(void *)this = &unk_1F25DACA8;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)((char *)this + 16), (const std::vector<unsigned int> *)((char *)a2 + 16));
  *(void *)this = &unk_1F25DAC60;
  long long v4 = *(_OWORD *)((char *)a2 + 40);
  *((void *)this + 7) = *((void *)a2 + 7);
  *(_OWORD *)((char *)this + 40) = v4;
  unsigned int v5 = (std::string *)((char *)this + 64);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 4);
    *((void *)this + 10) = *((void *)a2 + 10);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  std::vector<MTLUINT256_t>::vector((void *)this + 12, (uint64_t)a2 + 96);
  std::vector<MTLUINT256_t>::vector((void *)this + 15, (uint64_t)a2 + 120);
  *(void *)this = &unk_1F25DBCF8;
  unint64_t v7 = (std::string *)((char *)this + 144);
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 9);
    *((void *)this + 20) = *((void *)a2 + 20);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = (std::string *)((char *)this + 168);
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 168);
    *((void *)this + 23) = *((void *)a2 + 23);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *((unsigned char *)this + 192) = *((unsigned char *)a2 + 192);
  return this;
}

uint64_t AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(uint64_t a1, uint64_t a2, void *a3, char **a4, AGCError *a5, void **a6, void *a7)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (a6) {
    BOOL v14 = a7 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  int v15 = !v14;
  uint64_t v16 = mach_absolute_time();
  long long v23 = *(AGCLLVMCtx **)(a2 + 16);
  if (v23)
  {
    uint64_t v24 = v16;
    uint64_t v72 = a4;
    *((unsigned char *)v23 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses(v23);
    MEMORY[0x1CB79EDB0](v79);
    uint64_t v25 = *(void *)(a1 + 208);
    if (!v25) {
      goto LABEL_28;
    }
    if (*(void *)(a1 + 224)) {
      strlen(*(const char **)(a1 + 224));
    }
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    std::string::size_type v27 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v27) {
      (*(void (**)(std::string::size_type))(*(void *)v27 + 8))(v27);
    }
    if (v82)
    {
      uint64_t v60 = v81;
      uint64_t v81 = 0;
      uint64_t v78 = v60;
      llvm::toString(&__p, &v78);
      uint64_t v61 = std::string::insert(&__p, 0, "Error parsing bitcode file: ");
      std::string::size_type v68 = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v75 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      *(void *)&long long v76 = v68;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v76) & 0x80u) == 0) {
        uint64_t v69 = v75;
      }
      else {
        uint64_t v69 = (void **)v75[0];
      }
      AGCError::logError(a5, (char **)v69, v62, v63, v64, v65, v66, v67);
      if (SBYTE7(v76) < 0) {
        operator delete(v75[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v78) {
        (*(void (**)(char *))(*(void *)v78 + 8))(v78);
      }
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v81);
      goto LABEL_47;
    }
    uint64_t v25 = (uint64_t)v81;
    uint64_t v81 = 0;
    __int16 v74 = 260;
    __p.__r_.__value_.__r.__words[0] = v25 + 216;
    MEMORY[0x1CB79FA50](v75, &__p);
    if (DWORD2(v76) == 49
      && v77 == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&__p, (const llvm::Triple *)v75),
          pluginSupportsOSVersion((uint64_t)__p.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v75), !v28))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&__p, (const llvm::Triple *)v75);
      int v36 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      AGCError::logError(a5, &p_p->__r_.__value_.__l.__data_, v29, v30, v31, v32, v33, v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v36 = 0;
    }
    if (SBYTE7(v76) < 0) {
      operator delete(v75[0]);
    }
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v81);
    if (v36)
    {
LABEL_28:
      uint64_t v37 = (uint64_t (***)(void))(**(uint64_t (***)(uint64_t, AGCLLVMCtx *, unsigned char *, uint64_t))a1)(a1, v23, v79, v25);
      if (v37)
      {
        BOOL v44 = v37;
        if ((**v37)(v37))
        {
          __p.__r_.__value_.__r.__words[0] = 0;
          uint64_t v81 = 0;
          *(_OWORD *)uint64_t v75 = 0u;
          long long v76 = 0u;
          v80[0] = &unk_1F25DB2F0;
          v80[1] = a1;
          v80[3] = v80;
          uint64_t v26 = ((uint64_t (*)(uint64_t (***)(void), std::string *, char **, void **, void *))(*v44)[1])(v44, &__p, &v81, v75, v80);
          std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](v80);
          if (v15)
          {
            *a6 = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
            *a7 = 32;
            uint64_t v57 = mach_absolute_time() - v24;
            if (getTimebaseInfo(void)::once != -1) {
              dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_15686);
            }
            v75[1] = (void *)(v57 * getTimebaseInfo(void)::sTimebaseInfo / *(unsigned int *)algn_1EBD0EA4C);
            *(void *)&long long v76 = (char *)v75[1] - *((void *)&v76 + 1);
            uint64_t v58 = *a6;
            long long v59 = v76;
            *uint64_t v58 = *(_OWORD *)v75;
            v58[1] = v59;
          }
          if (v26)
          {
            *a3 = __p.__r_.__value_.__r.__words[0];
            *uint64_t v72 = v81;
          }
          else
          {
            AGCError::logError(a5, (char **)"Error occurred composing compiler reply.", v51, v52, v53, v54, v55, v56);
          }
        }
        else
        {
          if (*((char *)v44 + 31) >= 0) {
            int v70 = (char **)(v44 + 1);
          }
          else {
            int v70 = (char **)v44[1];
          }
          AGCError::logError(a5, v70, v45, v46, v47, v48, v49, v50);
          uint64_t v26 = 0;
        }
        (*v44)[4](v44);
        goto LABEL_54;
      }
      AGCError::logError(a5, (char **)"Cannot create AGC LLVM object.", v38, v39, v40, v41, v42, v43);
    }
LABEL_47:
    uint64_t v26 = 0;
LABEL_54:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v79);
    return v26;
  }
  AGCError::logError(a5, (char **)"Failed to initialize AGX backend for target architecture.", v17, v18, v19, v20, v21, v22);
  return 0;
}

void AGX::Impl::VertexProgramKey::~VertexProgramKey(void **this)
{
  *this = &unk_1F25DBCF8;
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  *this = &unk_1F25DAC60;
  unsigned int v2 = this[15];
  if (v2)
  {
    this[16] = v2;
    operator delete(v2);
  }
  unsigned int v3 = this[12];
  if (v3)
  {
    this[13] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  *this = &unk_1F25DACA8;
  long long v4 = this[2];
  if (v4)
  {
    this[3] = v4;
    operator delete(v4);
  }
}

uint64_t AGX::Impl::FragmentProgramKey::setDeviceOptions(uint64_t result, unsigned __int8 *a2)
{
  int v2 = *(_DWORD *)(result + 104);
  unsigned int v3 = *(_DWORD *)(result + 100) & 0xFBFFFFFF | (*a2 << 26);
  *(_DWORD *)(result + 100) = v3;
  unsigned int v4 = v3 & 0xFFFFFEFF | (a2[1] << 8);
  *(_DWORD *)(result + 100) = v4;
  unsigned int v5 = v4 & 0xEFFFFFFF | (a2[2] << 28);
  *(_DWORD *)(result + 100) = v5;
  unsigned int v6 = v5 & 0xDFFFFFFF | (a2[4] << 29);
  *(_DWORD *)(result + 100) = v6;
  *(_DWORD *)(result + 100) = v6 & 0xBFFFFFFF | (a2[6] << 30);
  unsigned int v7 = v2 & 0xFFFFFFF7 | (8 * a2[10]);
  *(_DWORD *)(result + 104) = v7;
  *(_DWORD *)(result + 104) = v7 & 0xFFFFF7FF | (a2[3] << 11);
  return result;
}

AGX::Impl::FragmentProgramKey *AGX::Impl::FragmentProgramKey::FragmentProgramKey(AGX::Impl::FragmentProgramKey *this, const AGX::Impl::FragmentProgramKey *a2)
{
  *(void *)this = &unk_1F25DAD48;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)((char *)this + 16), (const std::vector<unsigned int> *)((char *)a2 + 16));
  *(void *)this = &unk_1F25DBDD0;
  long long v4 = *(_OWORD *)((char *)a2 + 40);
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_OWORD *)((char *)this + 40) = v4;
  long long v6 = *(_OWORD *)((char *)a2 + 88);
  long long v7 = *(_OWORD *)((char *)a2 + 104);
  long long v8 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)this + 120) = v8;
  *(_OWORD *)((char *)this + 104) = v7;
  *(_OWORD *)((char *)this + 88) = v6;
  uint64_t v9 = (std::string *)((char *)this + 152);
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 19), *((void *)a2 + 20));
  }
  else
  {
    long long v10 = *(_OWORD *)((char *)a2 + 152);
    *((void *)this + 21) = *((void *)a2 + 21);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  long long v11 = (std::string *)((char *)this + 176);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v12 = *((_OWORD *)a2 + 11);
    *((void *)this + 24) = *((void *)a2 + 24);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  long long v13 = (std::string *)((char *)this + 200);
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)a2 + 25), *((void *)a2 + 26));
  }
  else
  {
    long long v14 = *(_OWORD *)((char *)a2 + 200);
    *((void *)this + 27) = *((void *)a2 + 27);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  *((unsigned char *)this + 224) = *((unsigned char *)a2 + 224);
  std::vector<MTLUINT256_t>::vector((void *)this + 29, (uint64_t)a2 + 232);
  std::vector<MTLUINT256_t>::vector((void *)this + 32, (uint64_t)a2 + 256);
  return this;
}

uint64_t AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(uint64_t a1, uint64_t a2, void *a3, char **a4, AGCError *a5, void **a6, void *a7)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (a6) {
    BOOL v14 = a7 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  int v15 = !v14;
  uint64_t v16 = mach_absolute_time();
  long long v23 = *(AGCLLVMCtx **)(a2 + 16);
  if (v23)
  {
    uint64_t v24 = v16;
    uint64_t v75 = a4;
    *((unsigned char *)v23 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses(v23);
    MEMORY[0x1CB79EDB0](v82);
    uint64_t v25 = *(void *)(a1 + 288);
    if (!v25) {
      goto LABEL_28;
    }
    if (*(void *)(a1 + 304)) {
      strlen(*(const char **)(a1 + 304));
    }
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    std::string::size_type v27 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v27) {
      (*(void (**)(std::string::size_type))(*(void *)v27 + 8))(v27);
    }
    if (v85)
    {
      uint64_t v60 = v84;
      long long v84 = 0;
      uint64_t v81 = v60;
      llvm::toString(&__p, &v81);
      uint64_t v61 = std::string::insert(&__p, 0, "Error parsing bitcode file: ");
      std::string::size_type v68 = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v78 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      *(void *)&long long v79 = v68;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v79) & 0x80u) == 0) {
        uint64_t v69 = v78;
      }
      else {
        uint64_t v69 = (void **)v78[0];
      }
      AGCError::logError(a5, (char **)v69, v62, v63, v64, v65, v66, v67);
      if (SBYTE7(v79) < 0) {
        operator delete(v78[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v81) {
        (*(void (**)(char *))(*(void *)v81 + 8))(v81);
      }
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v84);
      goto LABEL_47;
    }
    uint64_t v25 = (uint64_t)v84;
    long long v84 = 0;
    __int16 v77 = 260;
    __p.__r_.__value_.__r.__words[0] = v25 + 216;
    MEMORY[0x1CB79FA50](v78, &__p);
    if (DWORD2(v79) == 49
      && v80 == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&__p, (const llvm::Triple *)v78),
          pluginSupportsOSVersion((uint64_t)__p.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v78), !v28))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&__p, (const llvm::Triple *)v78);
      if ((__p.__r_.__value_.__l.__size_ & 0x1000A0011000E00) != 0
        && (__p.__r_.__value_.__r.__words[0] & __p.__r_.__value_.__l.__size_) < (__p.__r_.__value_.__l.__size_ & 0x1000A0011000E00))
      {
        for (uint64_t i = 0; i != 32; i += 8)
        {
          int8x8_t v73 = *(int8x8_t *)(a1 + i + 120);
          int32x2_t v74 = vceq_s32((int32x2_t)vand_s8(v73, (int8x8_t)0x1F0000001FLL), (int32x2_t)0x1600000016);
          if (v74.i8[0]) {
            *(_DWORD *)(a1 + i + 120) = v73.i32[0] & 0xFFFFFFE0 | 0xF;
          }
          if (v74.i8[4]) {
            *(_DWORD *)(a1 + i + 124) = v73.i32[1] & 0xFFFFFFE0 | 0xF;
          }
        }
      }
      int v36 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      AGCError::logError(a5, &p_p->__r_.__value_.__l.__data_, v29, v30, v31, v32, v33, v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v36 = 0;
    }
    if (SBYTE7(v79) < 0) {
      operator delete(v78[0]);
    }
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v84);
    if (v36)
    {
LABEL_28:
      uint64_t v37 = (uint64_t (***)(void))(**(uint64_t (***)(uint64_t, AGCLLVMCtx *, unsigned char *, uint64_t))a1)(a1, v23, v82, v25);
      if (v37)
      {
        BOOL v44 = v37;
        if ((**v37)(v37))
        {
          __p.__r_.__value_.__r.__words[0] = 0;
          long long v84 = 0;
          *(_OWORD *)uint64_t v78 = 0u;
          long long v79 = 0u;
          v83[0] = &unk_1F25DB140;
          v83[1] = a1;
          v83[3] = v83;
          uint64_t v26 = ((uint64_t (*)(uint64_t (***)(void), std::string *, char **, void **, void *))(*v44)[1])(v44, &__p, &v84, v78, v83);
          std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](v83);
          if (v15)
          {
            *a6 = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
            *a7 = 32;
            uint64_t v57 = mach_absolute_time() - v24;
            if (getTimebaseInfo(void)::once != -1) {
              dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_15686);
            }
            v78[1] = (void *)(v57 * getTimebaseInfo(void)::sTimebaseInfo / *(unsigned int *)algn_1EBD0EA4C);
            *(void *)&long long v79 = (char *)v78[1] - *((void *)&v79 + 1);
            uint64_t v58 = *a6;
            long long v59 = v79;
            *uint64_t v58 = *(_OWORD *)v78;
            v58[1] = v59;
          }
          if (v26)
          {
            *a3 = __p.__r_.__value_.__r.__words[0];
            *uint64_t v75 = v84;
          }
          else
          {
            AGCError::logError(a5, (char **)"Error occurred composing compiler reply.", v51, v52, v53, v54, v55, v56);
          }
        }
        else
        {
          if (*((char *)v44 + 31) >= 0) {
            int v70 = (char **)(v44 + 1);
          }
          else {
            int v70 = (char **)v44[1];
          }
          AGCError::logError(a5, v70, v45, v46, v47, v48, v49, v50);
          uint64_t v26 = 0;
        }
        (*v44)[4](v44);
        goto LABEL_54;
      }
      AGCError::logError(a5, (char **)"Cannot create AGC LLVM object.", v38, v39, v40, v41, v42, v43);
    }
LABEL_47:
    uint64_t v26 = 0;
LABEL_54:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v82);
    return v26;
  }
  AGCError::logError(a5, (char **)"Failed to initialize AGX backend for target architecture.", v17, v18, v19, v20, v21, v22);
  return 0;
}

uint64_t AGCModule<AGX::Impl::FragmentProgramKey>::~AGCModule(uint64_t a1)
{
  *(void *)a1 = &unk_1F25DAD18;
  *(void *)(a1 + 8) = &unk_1F25DBDD0;
  int v2 = *(void **)(a1 + 264);
  if (v2)
  {
    *(void *)(a1 + 272) = v2;
    operator delete(v2);
  }
  unsigned int v3 = *(void **)(a1 + 240);
  if (v3)
  {
    *(void *)(a1 + 248) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  *(void *)(a1 + 8) = &unk_1F25DAD48;
  long long v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t AGX::Impl::ComputeProgramKey::setDeviceOptions(uint64_t result, unsigned __int8 *a2)
{
  int v2 = *(_DWORD *)(result + 56);
  unsigned int v3 = *(_DWORD *)(result + 52) & 0xFBFFFFFF | (*a2 << 26);
  *(_DWORD *)(result + 52) = v3;
  unsigned int v4 = v3 & 0xFFFFFEFF | (a2[1] << 8);
  *(_DWORD *)(result + 52) = v4;
  unsigned int v5 = v4 & 0xEFFFFFFF | (a2[2] << 28);
  *(_DWORD *)(result + 52) = v5;
  unsigned int v6 = v5 & 0xDFFFFFFF | (a2[4] << 29);
  *(_DWORD *)(result + 52) = v6;
  *(_DWORD *)(result + 52) = v6 & 0xBFFFFFFF | (a2[6] << 30);
  unsigned int v7 = v2 & 0xFFFFFFFB | (4 * a2[11]);
  *(_DWORD *)(result + 56) = v7;
  unsigned int v8 = v7 & 0xFFFFFFBF | (a2[12] << 6);
  *(_DWORD *)(result + 56) = v8;
  unsigned int v9 = v8 & 0xFFFFFF7F | (a2[13] << 7);
  *(_DWORD *)(result + 56) = v9;
  *(_DWORD *)(result + 56) = v9 & 0xFFFFF7FF | (a2[3] << 11);
  return result;
}

uint64_t AGCModule<AGX::Impl::ComputeProgramKey>::AGCModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F25DADD0;
  *(void *)(a1 + 8) = &unk_1F25DAE00;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a4 + 8);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)(a1 + 24), (const std::vector<unsigned int> *)(a4 + 16));
  *(void *)(a1 + 8) = &unk_1F25DBE50;
  long long v8 = *(_OWORD *)(a4 + 40);
  *(void *)(a1 + 64) = *(void *)(a4 + 56);
  *(_OWORD *)(a1 + 48) = v8;
  unsigned int v9 = (std::string *)(a1 + 72);
  if (*(char *)(a4 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a4 + 64), *(void *)(a4 + 72));
  }
  else
  {
    long long v10 = *(_OWORD *)(a4 + 64);
    *(void *)(a1 + 88) = *(void *)(a4 + 80);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a4 + 88);
  std::vector<MTLUINT256_t>::vector((void *)(a1 + 104), a4 + 96);
  std::vector<MTLUINT256_t>::vector((void *)(a1 + 128), a4 + 120);
  *(void *)(a1 + 152) = a2;
  *(void *)(a1 + 160) = a3;
  *(void *)(a1 + 168) = "";
  return a1;
}

uint64_t AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(uint64_t a1, uint64_t a2, void *a3, char **a4, AGCError *a5, void **a6, void *a7)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (a6) {
    BOOL v14 = a7 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  int v15 = !v14;
  uint64_t v16 = mach_absolute_time();
  long long v23 = *(AGCLLVMCtx **)(a2 + 16);
  if (v23)
  {
    uint64_t v24 = v16;
    uint64_t v72 = a4;
    *((unsigned char *)v23 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses(v23);
    MEMORY[0x1CB79EDB0](v79);
    uint64_t v25 = *(void *)(a1 + 152);
    if (!v25) {
      goto LABEL_28;
    }
    if (*(void *)(a1 + 168)) {
      strlen(*(const char **)(a1 + 168));
    }
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    std::string::size_type v27 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v27) {
      (*(void (**)(std::string::size_type))(*(void *)v27 + 8))(v27);
    }
    if (v82)
    {
      uint64_t v60 = v81;
      uint64_t v81 = 0;
      uint64_t v78 = v60;
      llvm::toString(&__p, &v78);
      uint64_t v61 = std::string::insert(&__p, 0, "Error parsing bitcode file: ");
      std::string::size_type v68 = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v75 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      *(void *)&long long v76 = v68;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v76) & 0x80u) == 0) {
        uint64_t v69 = v75;
      }
      else {
        uint64_t v69 = (void **)v75[0];
      }
      AGCError::logError(a5, (char **)v69, v62, v63, v64, v65, v66, v67);
      if (SBYTE7(v76) < 0) {
        operator delete(v75[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v78) {
        (*(void (**)(char *))(*(void *)v78 + 8))(v78);
      }
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v81);
      goto LABEL_47;
    }
    uint64_t v25 = (uint64_t)v81;
    uint64_t v81 = 0;
    __int16 v74 = 260;
    __p.__r_.__value_.__r.__words[0] = v25 + 216;
    MEMORY[0x1CB79FA50](v75, &__p);
    if (DWORD2(v76) == 49
      && v77 == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&__p, (const llvm::Triple *)v75),
          pluginSupportsOSVersion((uint64_t)__p.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v75), !v28))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&__p, (const llvm::Triple *)v75);
      int v36 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      AGCError::logError(a5, &p_p->__r_.__value_.__l.__data_, v29, v30, v31, v32, v33, v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v36 = 0;
    }
    if (SBYTE7(v76) < 0) {
      operator delete(v75[0]);
    }
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v81);
    if (v36)
    {
LABEL_28:
      uint64_t v37 = (uint64_t (***)(void))(**(uint64_t (***)(uint64_t, AGCLLVMCtx *, unsigned char *, uint64_t))a1)(a1, v23, v79, v25);
      if (v37)
      {
        BOOL v44 = v37;
        if ((**v37)(v37))
        {
          __p.__r_.__value_.__r.__words[0] = 0;
          uint64_t v81 = 0;
          *(_OWORD *)uint64_t v75 = 0u;
          long long v76 = 0u;
          v80[0] = &unk_1F25DB338;
          v80[1] = a1;
          v80[3] = v80;
          uint64_t v26 = ((uint64_t (*)(uint64_t (***)(void), std::string *, char **, void **, void *))(*v44)[1])(v44, &__p, &v81, v75, v80);
          std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](v80);
          if (v15)
          {
            *a6 = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
            *a7 = 32;
            uint64_t v57 = mach_absolute_time() - v24;
            if (getTimebaseInfo(void)::once != -1) {
              dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_15686);
            }
            v75[1] = (void *)(v57 * getTimebaseInfo(void)::sTimebaseInfo / *(unsigned int *)algn_1EBD0EA4C);
            *(void *)&long long v76 = (char *)v75[1] - *((void *)&v76 + 1);
            uint64_t v58 = *a6;
            long long v59 = v76;
            *uint64_t v58 = *(_OWORD *)v75;
            v58[1] = v59;
          }
          if (v26)
          {
            *a3 = __p.__r_.__value_.__r.__words[0];
            *uint64_t v72 = v81;
          }
          else
          {
            AGCError::logError(a5, (char **)"Error occurred composing compiler reply.", v51, v52, v53, v54, v55, v56);
          }
        }
        else
        {
          if (*((char *)v44 + 31) >= 0) {
            int v70 = (char **)(v44 + 1);
          }
          else {
            int v70 = (char **)v44[1];
          }
          AGCError::logError(a5, v70, v45, v46, v47, v48, v49, v50);
          uint64_t v26 = 0;
        }
        (*v44)[4](v44);
        goto LABEL_54;
      }
      AGCError::logError(a5, (char **)"Cannot create AGC LLVM object.", v38, v39, v40, v41, v42, v43);
    }
LABEL_47:
    uint64_t v26 = 0;
LABEL_54:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v79);
    return v26;
  }
  AGCError::logError(a5, (char **)"Failed to initialize AGX backend for target architecture.", v17, v18, v19, v20, v21, v22);
  return 0;
}

uint64_t AGX::Impl::TileProgramKey::setCompileOptions(uint64_t result, unsigned __int8 *a2)
{
  int v2 = *(_DWORD *)(result + 104);
  unsigned int v3 = *(_DWORD *)(result + 100) & 0xFFFFFFFE | *a2;
  *(_DWORD *)(result + 100) = v3;
  unsigned int v4 = v3 & 0xFFFFFFFD | (2 * a2[1]);
  *(_DWORD *)(result + 100) = v4;
  *(_DWORD *)(result + 100) = v4 & 0xFFFFFFF7 | (8 * a2[2]);
  *(_DWORD *)(result + 104) = v2 & 0xFFFFFF7F | (a2[3] << 7);
  return result;
}

void AGCTileFunction::AGCTileFunction(AGCTileFunction *this, const char *a2, uint64_t a3, const AGX::Impl::TileProgramKey *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F25DAE70;
  *((void *)this + 1) = &unk_1F25DAEA0;
  *((_DWORD *)this + 4) = *((_DWORD *)a4 + 2);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)this + 1, (const std::vector<unsigned int> *)((char *)a4 + 16));
  *((void *)this + 1) = &unk_1F25DBE10;
  long long v8 = *(_OWORD *)((char *)a4 + 40);
  long long v9 = *(_OWORD *)((char *)a4 + 56);
  long long v10 = *(_OWORD *)((char *)a4 + 88);
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a4 + 72);
  *((_OWORD *)this + 6) = v10;
  *((_OWORD *)this + 3) = v8;
  *((_OWORD *)this + 4) = v9;
  long long v11 = *(_OWORD *)((char *)a4 + 104);
  long long v12 = *(_OWORD *)((char *)a4 + 120);
  long long v13 = *(_OWORD *)((char *)a4 + 136);
  *((void *)this + 20) = *((void *)a4 + 19);
  *((_OWORD *)this + 8) = v12;
  *((_OWORD *)this + 9) = v13;
  *((_OWORD *)this + 7) = v11;
  std::vector<MTLUINT256_t>::vector((void *)this + 21, (uint64_t)a4 + 160);
  std::vector<MTLUINT256_t>::vector((void *)this + 24, (uint64_t)a4 + 184);
  *((void *)this + 27) = a2;
  *((void *)this + 28) = a3;
  *((void *)this + 29) = "";
  *(void *)this = &unk_1F25DAE40;
  MEMORY[0x1CB79EDB0](v16);
  AGCModule<AGX::Impl::TileProgramKey>::getLLVMModule((uint64_t)&v17, (uint64_t)this);
  if ((v18 & 1) == 0)
  {
    BOOL v14 = "air.kernel";
    __int16 v15 = 259;
    if (llvm::Module::getNamedMetadata(v17, (const llvm::Twine *)&v14)) {
      *((_DWORD *)this + 38) = *((_DWORD *)this + 38) & 0xFFFFF0FF | ((unsigned __int16)*((_DWORD *)this + 38) >> 12 << 8);
    }
  }
  llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v17);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v16);
}

uint64_t AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(uint64_t a1, uint64_t a2, void *a3, char **a4, AGCError *a5, void **a6, void *a7)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  if (a6) {
    BOOL v14 = a7 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  int v15 = !v14;
  uint64_t v16 = mach_absolute_time();
  long long v23 = *(AGCLLVMCtx **)(a2 + 16);
  if (v23)
  {
    uint64_t v24 = v16;
    *((unsigned char *)v23 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses(v23);
    MEMORY[0x1CB79EDB0](v78);
    if (*(void *)(a1 + 216))
    {
      AGCModule<AGX::Impl::TileProgramKey>::getLLVMModule((uint64_t)&v80, a1);
      if (v81)
      {
        long long v59 = v80;
        int v80 = 0;
        int v77 = v59;
        llvm::toString(&__p, &v77);
        uint64_t v60 = std::string::insert(&__p, 0, "Error parsing bitcode file: ");
        std::string::size_type v67 = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)__int16 v74 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        *(void *)&long long v75 = v67;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        if ((SBYTE7(v75) & 0x80u) == 0) {
          std::string::size_type v68 = v74;
        }
        else {
          std::string::size_type v68 = (void **)v74[0];
        }
        AGCError::logError(a5, (char **)v68, v61, v62, v63, v64, v65, v66);
        if (SBYTE7(v75) < 0) {
          operator delete(v74[0]);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v77) {
          (*(void (**)(char *))(*(void *)v77 + 8))(v77);
        }
        llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v80);
        goto LABEL_45;
      }
      uint64_t v25 = (uint64_t)v80;
      int v80 = 0;
      __int16 v73 = 260;
      __p.__r_.__value_.__r.__words[0] = v25 + 216;
      MEMORY[0x1CB79FA50](v74, &__p);
      uint64_t v71 = a4;
      if (DWORD2(v75) == 49
        && v76 == 1
        && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&__p, (const llvm::Triple *)v74),
            pluginSupportsOSVersion((uint64_t)__p.__r_.__value_.__l.__data_))
        && (llvm::Triple::getEnvironmentName((llvm::Triple *)v74), !v26))
      {
        AGCTargetOS::AGCTargetOS((AGCTargetOS *)&__p, (const llvm::Triple *)v74);
        int v34 = 1;
      }
      else
      {
        std::operator+<char>();
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        AGCError::logError(a5, &p_p->__r_.__value_.__l.__data_, v27, v28, v29, v30, v31, v32);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        int v34 = 0;
      }
      if (SBYTE7(v75) < 0) {
        operator delete(v74[0]);
      }
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v80);
      if (!v34)
      {
LABEL_45:
        uint64_t v35 = 0;
LABEL_52:
        llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v78);
        return v35;
      }
    }
    else
    {
      uint64_t v71 = a4;
      uint64_t v25 = 0;
    }
    int v36 = (uint64_t (***)(void))(**(uint64_t (***)(uint64_t, AGCLLVMCtx *, char *, uint64_t))a1)(a1, v23, v78, v25);
    if (v36)
    {
      uint64_t v43 = v36;
      if ((**v36)(v36))
      {
        __p.__r_.__value_.__r.__words[0] = 0;
        int v80 = 0;
        *(_OWORD *)__int16 v74 = 0u;
        long long v75 = 0u;
        v79[0] = &unk_1F25DB380;
        v79[1] = a1;
        v79[3] = v79;
        uint64_t v35 = ((uint64_t (*)(uint64_t (***)(void), std::string *, char **, void **, void *))(*v43)[1])(v43, &__p, &v80, v74, v79);
        std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](v79);
        if (v15)
        {
          *a6 = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
          *a7 = 32;
          uint64_t v56 = mach_absolute_time() - v24;
          if (getTimebaseInfo(void)::once != -1) {
            dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_15686);
          }
          v74[1] = (void *)(v56 * getTimebaseInfo(void)::sTimebaseInfo / *(unsigned int *)algn_1EBD0EA4C);
          *(void *)&long long v75 = (char *)v74[1] - *((void *)&v75 + 1);
          uint64_t v57 = *a6;
          long long v58 = v75;
          *uint64_t v57 = *(_OWORD *)v74;
          v57[1] = v58;
        }
        if (v35)
        {
          *a3 = __p.__r_.__value_.__r.__words[0];
          *uint64_t v71 = v80;
        }
        else
        {
          AGCError::logError(a5, (char **)"Error occurred composing compiler reply.", v50, v51, v52, v53, v54, v55);
        }
      }
      else
      {
        if (*((char *)v43 + 31) >= 0) {
          uint64_t v69 = (char **)(v43 + 1);
        }
        else {
          uint64_t v69 = (char **)v43[1];
        }
        AGCError::logError(a5, v69, v44, v45, v46, v47, v48, v49);
        uint64_t v35 = 0;
      }
      (*v43)[4](v43);
      goto LABEL_52;
    }
    AGCError::logError(a5, (char **)"Cannot create AGC LLVM object.", v37, v38, v39, v40, v41, v42);
    goto LABEL_45;
  }
  AGCError::logError(a5, (char **)"Failed to initialize AGX backend for target architecture.", v17, v18, v19, v20, v21, v22);
  return 0;
}

void AGCTileFunction::~AGCTileFunction(AGCTileFunction *this)
{
  *(void *)this = &unk_1F25DAE70;
  *((void *)this + 1) = &unk_1F25DBE10;
  int v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 22) = v3;
    operator delete(v3);
  }
  *((void *)this + 1) = &unk_1F25DAEA0;
  unsigned int v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

void AGX::Impl::TileProgramKey::~TileProgramKey(AGX::Impl::TileProgramKey *this)
{
  *(void *)this = &unk_1F25DBE10;
  int v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
  *(void *)this = &unk_1F25DAEA0;
  unsigned int v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }
}

uint64_t ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::serialize(void *a1, void *a2, void *a3)
{
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t AGCModule<AGX::Impl::TileProgramKey>::getLLVMModule(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 232)) {
    strlen(*(const char **)(a2 + 232));
  }
  llvm::MemoryBuffer::getMemBuffer();
  llvm::MemoryBufferRef::MemoryBufferRef();
  llvm::parseBitcodeFile();
  uint64_t result = v3;
  if (v3) {
    return (*(uint64_t (**)())(*(void *)v3 + 8))();
  }
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25DB380;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25DB380;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
}

uint64_t AGCTileFunction::createLLVMObject(AGCTileFunction *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, llvm::Module *a4)
{
  long long v11 = &unk_1F25DAD88;
  long long v12 = (char *)this + 48;
  long long v13 = (char *)this + 48;
  uint64_t v14 = 0;
  long long v9 = "air.kernel";
  __int16 v10 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(a4, (const llvm::Twine *)&v9);
  unsigned int v6 = (uint64_t *)*((void *)a2 + 4);
  uint64_t v7 = *v6;
  if (NamedMetadata) {
    return (*(uint64_t (**)(void))(v7 + 56))();
  }
  else {
    return (*(uint64_t (**)(uint64_t *))(v7 + 64))(v6);
  }
}

void *std::vector<MTLUINT256_t>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unsigned int v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<MTLUINT256_t>::__vallocate[abi:nn180100](a1, v5 >> 5);
    unsigned int v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<MTLUINT256_t>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    abort();
  }
  uint64_t result = (char *)operator new(32 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * a2];
  return result;
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::serialize(void *a1, void *a2, void *a3)
{
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25DB338;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25DB338;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
}

uint64_t AGCComputeFunction::createLLVMObject(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 32) + 48))(*(void *)(a2 + 32));
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::serialize(void *a1, void *a2, void *a3)
{
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25DB140;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25DB140;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
}

std::string *AGCFragmentFunction::cacheMetadata(const std::string *a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a2 + 16), a1 + 13);
  uint64_t result = std::string::operator=((std::string *)(a2 + 40), a1 + 14);
  *(unsigned char *)(a2 + 64) = a1[15].__r_.__value_.__s.__data_[0];
  return result;
}

std::string *AGCFragmentFunction::extractMetadata(std::string *a1, uint64_t a2)
{
  std::string::operator=(a1 + 13, (const std::string *)(a2 + 16));
  uint64_t result = std::string::operator=(a1 + 14, (const std::string *)(a2 + 40));
  a1[15].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a2 + 64);
  return result;
}

void AGCFragmentFunction::extractMetadata(uint64_t a1, uint64_t a2)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  v30[0] = 0;
  *(void *)((char *)v30 + 7) = 0;
  v29[0] = 0;
  *(void *)((char *)v29 + 7) = 0;
  if (*(void *)(a2 + 464))
  {
    uint64_t v3 = (unsigned int **)(a2 + 464);
    if (!*(void *)(a2 + 472)) {
      uint64_t v3 = (unsigned int **)(a2 + 1024);
    }
  }
  else
  {
    uint64_t v3 = (unsigned int **)(a2 + 1024);
  }
  int64_t v5 = *v3;
  unsigned int v4 = v3[1];
  if (v5) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (int *)((char *)v5 + *v5);
  }
  long long v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0xFu && (uint64_t v9 = v8[7]) != 0) {
    __int16 v10 = (int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    __int16 v10 = 0;
  }
  long long v11 = (unsigned __int16 *)((char *)v10 - *v10);
  unsigned int v12 = *v11;
  if (v12 < 5) {
    goto LABEL_23;
  }
  if (v11[2]) {
    long long v13 = (unsigned int *)((char *)v10 + v11[2] + *(unsigned int *)((char *)v10 + v11[2]));
  }
  else {
    long long v13 = 0;
  }
  if (v12 >= 7 && (uint64_t v14 = v11[3]) != 0)
  {
    int v15 = (unsigned int *)((char *)v10 + v14 + *(unsigned int *)((char *)v10 + v14));
    if (!v13)
    {
LABEL_23:
      char v16 = 0;
      uint64_t v17 = 0;
      char v18 = 0;
      uint64_t v19 = 0;
LABEL_24:
      BOOL v20 = 0;
      goto LABEL_25;
    }
  }
  else
  {
    int v15 = 0;
    if (!v13) {
      goto LABEL_23;
    }
  }
  std::string::basic_string[abi:nn180100](&v26, v13 + 1, *v13);
  char v16 = v28;
  uint64_t v19 = v26;
  v30[0] = *(void *)v27;
  *(void *)((char *)v30 + 7) = *(void *)&v27[7];
  std::string::basic_string[abi:nn180100](&v26, v15 + 1, *v15);
  char v18 = v28;
  uint64_t v23 = *v10;
  uint64_t v17 = v26;
  v29[0] = *(void *)v27;
  *(void *)((char *)v29 + 7) = *(void *)&v27[7];
  uint64_t v24 = (unsigned __int16 *)((char *)v10 - v23);
  if (*v24 < 0x17u) {
    goto LABEL_24;
  }
  uint64_t v25 = v24[11];
  if (!v25) {
    goto LABEL_24;
  }
  BOOL v20 = *((unsigned char *)v10 + v25) != 0;
LABEL_25:
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  uint64_t v21 = v30[0];
  *(void *)(a1 + 312) = v19;
  *(void *)(a1 + 320) = v21;
  *(void *)(a1 + 327) = *(void *)((char *)v30 + 7);
  *(unsigned char *)(a1 + 335) = v16;
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  uint64_t v22 = v29[0];
  *(void *)(a1 + 336) = v17;
  *(void *)(a1 + 344) = v22;
  *(void *)(a1 + 351) = *(void *)((char *)v29 + 7);
  *(unsigned char *)(a1 + 359) = v18;
  *(unsigned char *)(a1 + 360) = v20;
}

uint64_t AGCFragmentFunction::createLLVMObject(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 32) + 64))(*(void *)(a2 + 32));
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::serialize(void *a1, void *a2, void *a3)
{
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::getSupportIndirectCommandBuffers(uint64_t a1)
{
  return *(_DWORD *)(a1 + 88) & 1;
}

void AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::serialize(void *a1, void *a2, void *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  uint64_t v6 = a1[3] - a1[2];
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 2), (v6 >> 2) + 8);
  uint64_t v7 = a1[2] + v6;
  *(_DWORD *)uint64_t v7 = ((*((_DWORD *)a1 + 6) - a1[2]) >> 2 << 8) | 0x3C;
  long long v8 = *(_OWORD *)(a1 + 5);
  *(void *)(v7 + 20) = a1[7];
  *(_OWORD *)(v7 + 4) = v8;
  (*(void (**)(void *))(*a1 + 48))(a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25DB2F0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25DB2F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
}

void *AGCVertexFunction::createLLVMObject(AGCVertexFunction *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, llvm::Module *a4)
{
  if (*((char *)this + 175) < 0)
  {
    if (*((void *)this + 20)) {
      int64_t v5 = (char *)*((void *)this + 19);
    }
    else {
      int64_t v5 = 0;
    }
  }
  else if (*((unsigned char *)this + 175))
  {
    int64_t v5 = (char *)this + 152;
  }
  else
  {
    int64_t v5 = 0;
  }
  if (*((char *)this + 199) < 0)
  {
    if (*((void *)this + 23)) {
      uint64_t v6 = (char *)*((void *)this + 22);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else if (*((unsigned char *)this + 199))
  {
    uint64_t v6 = (char *)this + 176;
  }
  else
  {
    uint64_t v6 = 0;
  }
  return AGCLLVMAGPVertexShader::createAGPVertexShaderObject((uint64_t)a2, a4, (uint64_t)this + 48, (uint64_t)v5, (uint64_t)v6);
}

uint64_t AIRNTEmitPipelineImages(uint64_t *a1, uint64_t *a2, const char *a3, int a4, int a5, AGCTarget *this, Air::PipelineScript *a7, int a8, void *a9, char **a10, AGCError *a11)
{
  unsigned int v12 = this;
  unsigned int v16 = AGCTarget::CPUSubtypeToTargetArch(this, a2, a3);
  if (!v16)
  {
    std::to_string(&v124, v12);
    uint64_t v35 = std::string::insert(&v124, 0, "Unknown AGC target for CPU subtype: ");
    uint64_t v42 = (int *)v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    std::string::size_type v92 = v42;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v92) >= 0) {
      uint64_t v43 = __p;
    }
    else {
      uint64_t v43 = (void **)__p[0];
    }
    AGCError::logError(a11, (char **)v43, v36, v37, v38, v39, v40, v41);
    if (SHIBYTE(v92) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v124.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  unsigned int v17 = v16;
  uint64_t TargetContext = (uint64_t *)AGCNativeTranslator::getTargetContext(a1, v16);
  uint64_t v25 = *(void *)AGCNativeTranslator::getTargetContext(a1, v17);
  if (!v25)
  {
    BOOL v44 = "AGX key factory does not exist for target architecture.";
LABEL_45:
    AGCError::logError(a11, (char **)v44, v19, v20, v21, v22, v23, v24);
    return 0;
  }
  uint64_t v26 = (unsigned __int16 *)((char *)a7 - *(int *)a7);
  unsigned int v27 = *v26;
  if (v27 < 9 || !v26[4]) {
    goto LABEL_41;
  }
  BOOL v28 = v27 >= 0xB && *((unsigned char *)a7 + v26[4]) == 1;
  if (v28 && v26[5])
  {
    uint64_t v29 = (int *)((char *)a7 + v26[5] + *(unsigned int *)((char *)a7 + v26[5]));
    char v145 = 0;
    memset(v144, 0, sizeof(v144));
    uint64_t v30 = *v29;
    uint64_t v31 = -v30;
    uint64_t v32 = (char *)v29 - v30;
    unsigned int v33 = *(unsigned __int16 *)((char *)v29 - v30);
    if (v33 >= 7)
    {
      if (!*((_WORD *)v32 + 3))
      {
LABEL_94:
        uint64_t v64 = (char *)v29 + v31;
        if (!*((_WORD *)v64 + 2)) {
          goto LABEL_149;
        }
        if (v33 >= 9 && *((_WORD *)v64 + 4)) {
          uint64_t v65 = (char *)v29
        }
              + *((unsigned __int16 *)v64 + 4)
              + *(unsigned int *)((char *)v29 + *((unsigned __int16 *)v64 + 4));
        else {
          uint64_t v65 = 0;
        }
        if (SHIBYTE(v144[0].__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v88, v144[0].__r_.__value_.__l.__data_, v144[0].__r_.__value_.__l.__size_);
        }
        else {
          std::string v88 = v144[0];
        }
        if (SHIBYTE(v144[1].__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v89, v144[1].__r_.__value_.__l.__data_, v144[1].__r_.__value_.__l.__size_);
        }
        else {
          std::string v89 = v144[1];
        }
        char v90 = v145;
        uint64_t v86 = 0;
        uint64_t v87 = 0;
        uint64_t v84 = 0;
        char v85 = 0;
        uint64_t v82 = 0;
        uint64_t v83 = 0;
        (*(void (**)(std::string *__return_ptr, uint64_t, char *, std::string *, void, void **, void **, void))(*(void *)v25 + 16))(&v124, v25, v65, &v88, 0, &v85, &v82, 0);
        if (v82)
        {
          uint64_t v83 = v82;
          operator delete(v82);
        }
        if (v85)
        {
          uint64_t v86 = v85;
          operator delete(v85);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        uint64_t v67 = *a2;
        uint64_t v68 = *(void *)a3;
        __p[0] = &unk_1F25DAC30;
        AGX::Impl::VertexProgramKey::VertexProgramKey((AGX::Impl::VertexProgramKey *)&__p[1], (const AGX::Impl::VertexProgramKey *)&v124);
        uint64_t v108 = v67;
        uint64_t v109 = v68;
        int64x2_t v110 = "";
        __p[0] = &unk_1F25DAC00;
        uint64_t v58 = AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject((uint64_t)__p, (uint64_t)TargetContext, a9, a10, a11, 0, 0);
        __p[0] = &unk_1F25DAC30;
        AGX::Impl::VertexProgramKey::~VertexProgramKey(&__p[1]);
        AGX::Impl::VertexProgramKey::~VertexProgramKey((void **)&v124.__r_.__value_.__l.__data_);
        if (v58) {
          goto LABEL_149;
        }
LABEL_150:
        if (SHIBYTE(v144[1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v144[1].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v144[0].__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v66 = (void *)v144[0].__r_.__value_.__r.__words[0];
          goto LABEL_154;
        }
        return v58;
      }
      uint64_t v69 = v29;
      if (v33 >= 0xB && *((_WORD *)v32 + 5)) {
        int v34 = (char *)v29
      }
            + *((unsigned __int16 *)v32 + 5)
            + *(unsigned int *)((char *)v29 + *((unsigned __int16 *)v32 + 5));
      else {
        int v34 = 0;
      }
      char v122 = 0;
      std::string v121 = 0;
      uint64_t v123 = 0;
      uint64_t v120 = 0;
      uint64_t v118 = 0;
      uint64_t v119 = 0;
      (*(void (**)(std::string *__return_ptr, uint64_t, char *, void, void, void **, void **))(*(void *)v25 + 40))(&v124, v25, v34, 0, 0, &v121, &v118);
      if (v118)
      {
        uint64_t v119 = v118;
        operator delete(v118);
      }
      if (v121)
      {
        char v122 = v121;
        operator delete(v121);
      }
      uint64_t v61 = a2[1];
      uint64_t v62 = *((void *)a3 + 1);
      AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&__p[1], (const AGX::Impl::FragmentProgramKey *)&v124);
      uint64_t v111 = v61;
      uint64_t v112 = v62;
      uint64_t v113 = "";
      __p[0] = &unk_1F25DACE8;
      long long v114 = 0u;
      long long v115 = 0u;
      long long v116 = 0u;
      char v117 = 0;
      if (!AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject((uint64_t)__p, (uint64_t)TargetContext, a9 + 1, a10 + 1, a11, 0, 0))
      {
        __p[0] = &unk_1F25DACE8;
        if (SHIBYTE(v116) < 0) {
          operator delete(*((void **)&v115 + 1));
        }
        if (SBYTE7(v115) < 0) {
          operator delete((void *)v114);
        }
        AGCModule<AGX::Impl::FragmentProgramKey>::~AGCModule((uint64_t)__p);
        v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DBDD0;
        if (v142)
        {
          long long v143 = v142;
          operator delete(v142);
        }
        if (v140)
        {
          uint64_t v141 = v140;
          operator delete(v140);
        }
        if (v139 < 0) {
          operator delete(v138);
        }
        if (SHIBYTE(v137) < 0) {
          operator delete(v135);
        }
        if (SHIBYTE(v134) < 0) {
          operator delete(v132);
        }
        v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DAD48;
        if (v124.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v125 = v124.__r_.__value_.__r.__words[2];
          operator delete((void *)v124.__r_.__value_.__r.__words[2]);
        }
        uint64_t v58 = 0;
        goto LABEL_150;
      }
      std::string::operator=(v144, (const std::string *)&v114);
      std::string::operator=(&v144[1], (const std::string *)((char *)&v115 + 8));
      char v145 = v117;
      __p[0] = &unk_1F25DACE8;
      if (SHIBYTE(v116) < 0) {
        operator delete(*((void **)&v115 + 1));
      }
      if (SBYTE7(v115) < 0) {
        operator delete((void *)v114);
      }
      AGCModule<AGX::Impl::FragmentProgramKey>::~AGCModule((uint64_t)__p);
      v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DBDD0;
      if (v142)
      {
        long long v143 = v142;
        operator delete(v142);
      }
      if (v140)
      {
        uint64_t v141 = v140;
        operator delete(v140);
      }
      if (v139 < 0) {
        operator delete(v138);
      }
      if (SHIBYTE(v137) < 0) {
        operator delete(v135);
      }
      if (SHIBYTE(v134) < 0) {
        operator delete(v132);
      }
      v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DAD48;
      if (v124.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v125 = v124.__r_.__value_.__r.__words[2];
        operator delete((void *)v124.__r_.__value_.__r.__words[2]);
      }
      uint64_t v29 = v69;
      uint64_t v63 = *v69;
      uint64_t v31 = -v63;
      unsigned int v33 = *(unsigned __int16 *)((char *)v69 - v63);
    }
    if (v33 < 5)
    {
LABEL_149:
      uint64_t v58 = 1;
      goto LABEL_150;
    }
    goto LABEL_94;
  }
  if (!v26[4]) {
    goto LABEL_41;
  }
  BOOL v45 = v27 >= 0xB && *((unsigned char *)a7 + v26[4]) == 2;
  if (v45 && v26[5])
  {
    uint64_t v46 = (int *)((char *)a7 + v26[5] + *(unsigned int *)((char *)a7 + v26[5]));
    uint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
    if (*v47 >= 7u && (uint64_t v48 = v47[3]) != 0) {
      uint64_t v49 = (char *)v46 + v48 + *(unsigned int *)((char *)v46 + v48);
    }
    else {
      uint64_t v49 = 0;
    }
    long long v79 = 0;
    int v80 = 0;
    uint64_t v81 = 0;
    int v77 = 0;
    uint64_t v78 = 0;
    int v76 = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t, char *, void, void **, void **))(*(void *)v25 + 48))(&v124, v25, v49, 0, &v79, &v76);
    if (v76)
    {
      int v77 = v76;
      operator delete(v76);
    }
    if (v79)
    {
      int v80 = v79;
      operator delete(v79);
    }
    AGCModule<AGX::Impl::ComputeProgramKey>::AGCModule((uint64_t)__p, *a2, *(void *)a3, (uint64_t)&v124);
    __p[0] = &unk_1F25DADA0;
    uint64_t v58 = AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject((uint64_t)__p, (uint64_t)TargetContext, a9, a10, a11, 0, 0);
    __p[0] = &unk_1F25DADD0;
    __p[1] = &unk_1F25DBE50;
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    if (v101[1])
    {
      *(void **)&long long v102 = v101[1];
      operator delete(v101[1]);
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(v99);
    }
    __p[1] = &unk_1F25DAE00;
    if (v93)
    {
      std::string v94 = v93;
      operator delete(v93);
    }
    v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DBE50;
    if (v130)
    {
      uint64_t v131 = v130;
      operator delete(v130);
    }
    if (v128)
    {
      uint64_t v129 = v128;
      operator delete(v128);
    }
    if (v127 < 0) {
      operator delete(v126);
    }
    uint64_t v60 = &unk_1F25DAE00;
    goto LABEL_134;
  }
  if (!v26[4] || v27 < 0xB || *((unsigned char *)a7 + v26[4]) != 3 || (uint64_t v50 = v26[5]) == 0)
  {
LABEL_41:
    uint64_t v55 = (int *)Air::PipelineScript::pipeline_as_mesh_render(a7);
    if (v55)
    {
      __p[0] = TargetContext;
      __p[1] = a7;
      std::string::size_type v92 = v55;
      uint64_t v93 = a2;
      std::string v94 = (void *)a3;
      std::string::size_type v95 = a11;
      unsigned int v96 = a9;
      unint64_t v97 = a10;
      long long v100 = 0u;
      *(_OWORD *)uint64_t v101 = 0u;
      long long v102 = 0u;
      *(_OWORD *)uint64_t v103 = 0u;
      long long v104 = 0u;
      memset(v105, 0, 26);
      uint64_t v98 = *TargetContext;
      uint64_t v56 = (unsigned __int16 *)((char *)v55 - *v55);
      BOOL v57 = *v56 < 5u || v56[2] == 0;
      LOBYTE(v99) = v57;
      uint64_t v58 = AGCMeshPipeline::compile((AGCMeshPipeline *)__p);
      AGCMeshPipeline::~AGCMeshPipeline(__p);
      return v58;
    }
    BOOL v44 = "Unsupported pipeline script.";
    goto LABEL_45;
  }
  uint64_t v51 = (int *)((char *)a7 + v50 + *(unsigned int *)((char *)a7 + v50));
  uint64_t v52 = (unsigned __int16 *)((char *)v51 - *v51);
  if (*v52 >= 7u && (uint64_t v53 = v52[3]) != 0) {
    uint64_t v54 = (char *)v51 + v53 + *(unsigned int *)((char *)v51 + v53);
  }
  else {
    uint64_t v54 = 0;
  }
  __int16 v73 = 0;
  __int16 v74 = 0;
  uint64_t v75 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  int v70 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, char *, void **, void **))(*(void *)v25 + 56))(&v124, v25, v54, &v73, &v70);
  if (v70)
  {
    uint64_t v71 = v70;
    operator delete(v70);
  }
  if (v73)
  {
    __int16 v74 = v73;
    operator delete(v73);
  }
  AGCTileFunction::AGCTileFunction((AGCTileFunction *)__p, (const char *)*a2, *(void *)a3, (const AGX::Impl::TileProgramKey *)&v124);
  uint64_t v58 = AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject((uint64_t)__p, (uint64_t)TargetContext, a9, a10, a11, 0, 0);
  __p[0] = &unk_1F25DAE70;
  __p[1] = &unk_1F25DBE10;
  if (v106)
  {
    char v107 = v106;
    operator delete(v106);
  }
  if (v105[1])
  {
    v105[2] = v105[1];
    operator delete(v105[1]);
  }
  __p[1] = &unk_1F25DAEA0;
  if (v93)
  {
    std::string v94 = v93;
    operator delete(v93);
  }
  v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DBE10;
  if (v136)
  {
    uint64_t v137 = v136;
    operator delete(v136);
  }
  if (v133)
  {
    long long v134 = v133;
    operator delete(v133);
  }
  uint64_t v60 = &unk_1F25DAEA0;
LABEL_134:
  v124.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
  uint64_t v66 = (void *)v124.__r_.__value_.__r.__words[2];
  if (v124.__r_.__value_.__r.__words[2])
  {
    std::string::size_type v125 = v124.__r_.__value_.__r.__words[2];
LABEL_154:
    operator delete(v66);
  }
  return v58;
}

uint64_t Air::PipelineScript::pipeline_as_mesh_render(Air::PipelineScript *this)
{
  int v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 4) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t AGCMeshPipeline::compile(AGCMeshPipeline *this)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (unsigned __int16 *)(*((void *)this + 2) - **((int **)this + 2));
  if (*v2 >= 5u && v2[2])
  {
    uint64_t v3 = **((void **)this + 3);
    uint64_t v4 = **((void **)this + 4);
    AGCMeshPipeline::compileMeshStage(this);
    uint64_t v5 = *((void *)this + 8);
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    std::string __p = 0;
    memset(&v96, 0, sizeof(v96));
    (*(void (**)(void **__return_ptr))(*(void *)v5 + 24))(v67);
    if (v96.__r_.__value_.__r.__words[0])
    {
      v96.__r_.__value_.__l.__size_ = v96.__r_.__value_.__r.__words[0];
      operator delete(v96.__r_.__value_.__l.__data_);
    }
    if (__p)
    {
      uint64_t v78 = __p;
      operator delete(__p);
    }
    std::string __p = &unk_1F25DB040;
    uint64_t v78 = &unk_1F25DB0B8;
    LODWORD(v79) = v67[1];
    std::vector<unsigned int>::vector(&v80, &v68);
    uint64_t v78 = &unk_1F25DB070;
    long long v81 = v69;
    long long v82 = v70;
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v83, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
    }
    else {
      std::string v83 = v71;
    }
    int v84 = v72;
    std::string __dst = 0;
    uint64_t v87 = 0;
    char v85 = 0;
    long long v8 = v73;
    int64_t v9 = v74 - (unsigned char *)v73;
    if (v74 != v73)
    {
      std::vector<MTLUINT256_t>::__vallocate[abi:nn180100](&v85, v9 >> 5);
      __int16 v10 = (char *)__dst;
      memmove(__dst, v8, v9);
      std::string __dst = &v10[v9];
    }
    std::string v88 = 0;
    std::string v89 = 0;
    uint64_t v90 = 0;
    long long v11 = v75;
    int64_t v12 = v76 - v75;
    if (v76 != v75)
    {
      std::vector<MTLUINT256_t>::__vallocate[abi:nn180100](&v88, v12 >> 5);
      long long v13 = (char *)v89;
      memmove(v89, v11, v12);
      std::string v89 = &v13[v12];
      long long v11 = v75;
    }
    uint64_t v78 = &unk_1F25DBD88;
    uint64_t v91 = v3;
    uint64_t v92 = v4;
    uint64_t v93 = "";
    std::string __p = &unk_1F25DB010;
    v67[0] = &unk_1F25DB070;
    if (v11)
    {
      int v76 = v11;
      operator delete(v11);
    }
    if (v73)
    {
      __int16 v74 = v73;
      operator delete(v73);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    v67[0] = &unk_1F25DB0B8;
    if (v68.__begin_)
    {
      v68.__end_ = v68.__begin_;
      operator delete(v68.__begin_);
    }
    uint64_t v14 = *(int **)this;
    unsigned int v16 = (char **)*((void *)this + 6);
    int v15 = (void *)*((void *)this + 7);
    unsigned int v17 = (AGCError *)*((void *)this + 5);
    mach_absolute_time();
    uint64_t v24 = *((void *)v14 + 2);
    if (!v24)
    {
      AGCError::logError(v17, (char **)"Failed to initialize AGX backend for target architecture.", v18, v19, v20, v21, v22, v23);
LABEL_73:
      std::string __p = &unk_1F25DB040;
      uint64_t v78 = &unk_1F25DB070;
      if (v88)
      {
        std::string v89 = v88;
        operator delete(v88);
      }
      if (v85)
      {
        std::string __dst = v85;
        operator delete(v85);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      uint64_t v78 = &unk_1F25DB0B8;
      if (v80.__begin_)
      {
        v80.__end_ = v80.__begin_;
        operator delete(v80.__begin_);
      }
      return v24;
    }
    *(unsigned char *)(v24 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses((AGCLLVMCtx *)v24);
    MEMORY[0x1CB79EDB0](v95);
    uint64_t v25 = v91;
    if (!v91) {
      goto LABEL_50;
    }
    if (v93) {
      strlen(v93);
    }
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    std::string::size_type v26 = v96.__r_.__value_.__r.__words[0];
    v96.__r_.__value_.__r.__words[0] = 0;
    if (v26) {
      (*(void (**)(std::string::size_type))(*(void *)v26 + 8))(v26);
    }
    if (v100)
    {
      uint64_t v56 = v99;
      char v99 = 0;
      std::string v94 = v56;
      llvm::toString(&v96, &v94);
      BOOL v57 = std::string::insert(&v96, 0, "Error parsing bitcode file: ");
      uint64_t v64 = (unsigned int *)v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v67 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v68.__begin_ = v64;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v68.__begin_) >= 0) {
        uint64_t v65 = v67;
      }
      else {
        uint64_t v65 = (void **)v67[0];
      }
      AGCError::logError(v17, (char **)v65, v58, v59, v60, v61, v62, v63);
      if (SHIBYTE(v68.__begin_) < 0) {
        operator delete(v67[0]);
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (v94) {
        (*(void (**)(char *))(*(void *)v94 + 8))(v94);
      }
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v99);
      uint64_t v24 = 0;
      goto LABEL_72;
    }
    uint64_t v25 = (uint64_t)v99;
    char v99 = 0;
    __int16 v98 = 260;
    v96.__r_.__value_.__r.__words[0] = v25 + 216;
    MEMORY[0x1CB79FA50](v67, &v96);
    if (LODWORD(v68.__end_) == 49
      && LODWORD(v68.__end_cap_.__value_) == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&v96, (const llvm::Triple *)v67),
          pluginSupportsOSVersion((uint64_t)v96.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v67), !v27))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v96, (const llvm::Triple *)v67);
      int v35 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v34 = &v96;
      }
      else {
        int v34 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      AGCError::logError(v17, &v34->__r_.__value_.__l.__data_, v28, v29, v30, v31, v32, v33);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      int v35 = 0;
    }
    if (SHIBYTE(v68.__begin_) < 0) {
      operator delete(v67[0]);
    }
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v99);
    if (v35)
    {
LABEL_50:
      int v36 = (uint64_t (***)(void))(*(uint64_t (**)(void **, uint64_t, char *, uint64_t))__p)(&__p, v24, v95, v25);
      if (v36)
      {
        uint64_t v43 = v36;
        if ((**v36)(v36))
        {
          char v99 = 0;
          std::string v94 = 0;
          *(_OWORD *)uint64_t v67 = 0u;
          *(_OWORD *)&v68.__begin_ = 0u;
          v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DB0F8;
          v96.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
          unint64_t v97 = &v96;
          uint64_t v24 = ((uint64_t (*)(uint64_t (***)(void), char **, char **, void **, std::string *))(*v43)[1])(v43, &v99, &v94, v67, &v96);
          std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](&v96);
          if (v24)
          {
            AGCLLVMCtx *v16 = v99;
            void *v15 = v94;
          }
          else
          {
            AGCError::logError(v17, (char **)"Error occurred composing compiler reply.", v50, v51, v52, v53, v54, v55);
          }
        }
        else
        {
          if (*((char *)v43 + 31) >= 0) {
            uint64_t v66 = (char **)(v43 + 1);
          }
          else {
            uint64_t v66 = (char **)v43[1];
          }
          AGCError::logError(v17, v66, v44, v45, v46, v47, v48, v49);
          uint64_t v24 = 0;
        }
        (*v43)[4](v43);
        goto LABEL_72;
      }
      AGCError::logError(v17, (char **)"Cannot create AGC LLVM object.", v37, v38, v39, v40, v41, v42);
    }
    uint64_t v24 = 0;
LABEL_72:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v95);
    goto LABEL_73;
  }
  uint64_t v6 = (void *)*((void *)this + 6);
  if (v6 && *((void *)this + 7))
  {
    *uint64_t v6 = 0;
    **((void **)this + 7) = 0;
  }
  return AGCMeshPipeline::compileMeshStage(this);
}

void AGCMeshPipeline::~AGCMeshPipeline(void **this)
{
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
}

uint64_t AGCMeshPipeline::compileMeshStage(AGCMeshPipeline *this)
{
  int v1 = (unsigned __int16 *)(*((void *)this + 2) - **((int **)this + 2));
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v7 = *(void *)(v5 + 8);
  if (v2 >= 9 && v1[4])
  {
    uint64_t v8 = *((void *)this + 8);
    uint64_t v29 = *(void *)(v5 + 16);
    uint64_t v30 = *(void *)(v4 + 16);
    uint64_t v67 = 0;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v64 = 0u;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    (*(void (**)(void **__return_ptr))(*(void *)v8 + 32))(v31);
    if (v58)
    {
      uint64_t v59 = v58;
      operator delete(v58);
    }
    if (v61)
    {
      uint64_t v62 = v61;
      operator delete(v61);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(*((void **)&v65 + 1));
    }
    if (SBYTE7(v65) < 0) {
      operator delete((void *)v64);
    }
    uint64_t v11 = *(void *)(*((void *)this + 3) + 8);
    uint64_t v12 = *(void *)(*((void *)this + 4) + 8);
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DAF10;
    AGX::Impl::MeshProgramKey::MeshProgramKey((AGX::Impl::MeshProgramKey *)&v42.__r_.__value_.__r.__words[1], (const AGX::Impl::MeshProgramKey *)v31);
    uint64_t v45 = v11;
    uint64_t v46 = v12;
    uint64_t v47 = "";
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DAEE0;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    LOWORD(v51) = 0;
    if (AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject((uint64_t)&v42, *(void *)this, 0, 0, *((AGCError **)this + 5)))
    {
      std::string::operator=((std::string *)((char *)this + 80), (const std::string *)&v48);
      std::string::operator=((std::string *)((char *)this + 104), (const std::string *)((char *)&v49 + 8));
    }
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DAEE0;
    if (SHIBYTE(v50) < 0) {
      operator delete(*((void **)&v49 + 1));
    }
    if (SBYTE7(v49) < 0) {
      operator delete((void *)v48);
    }
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DAF10;
    AGX::Impl::MeshProgramKey::~MeshProgramKey((void **)&v42.__r_.__value_.__l.__size_);
    AGX::Impl::MeshProgramKey::~MeshProgramKey(v31);
    uint64_t v13 = *((void *)this + 8);
    long long v64 = 0uLL;
    *(void *)&long long v65 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v61 = 0;
    (*(void (**)(void **__return_ptr))(*(void *)v13 + 40))(v31);
    if (v61)
    {
      uint64_t v62 = v61;
      operator delete(v61);
    }
    if ((void)v64)
    {
      *((void *)&v64 + 1) = v64;
      operator delete((void *)v64);
    }
    if (*((char *)this + 103) < 0) {
      std::string::__init_copy_ctor_external(&v42, *((const std::string::value_type **)this + 10), *((void *)this + 11));
    }
    else {
      std::string v42 = *(std::string *)((char *)this + 80);
    }
    if (*((char *)this + 127) < 0) {
      std::string::__init_copy_ctor_external(&v43, *((const std::string::value_type **)this + 13), *((void *)this + 14));
    }
    else {
      std::string v43 = *(std::string *)((char *)this + 104);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    std::string v34 = v42;
    *((unsigned char *)&v42.__r_.__value_.__s + 23) = 0;
    v42.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    std::string v35 = v43;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DAD18;
    AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&v42.__r_.__value_.__r.__words[1], (const AGX::Impl::FragmentProgramKey *)v31);
    uint64_t v51 = v30;
    uint64_t v52 = v29;
    uint64_t v53 = "";
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DACE8;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    char v57 = 0;
    v31[0] = &unk_1F25DBDD0;
    if (v40)
    {
      uint64_t v41 = v40;
      operator delete(v40);
    }
    if (v38)
    {
      uint64_t v39 = v38;
      operator delete(v38);
    }
    if (v37 < 0) {
      operator delete(v36);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    v31[0] = &unk_1F25DAD48;
    if (v32)
    {
      uint64_t v33 = v32;
      operator delete(v32);
    }
    uint64_t v14 = *((void *)this + 6);
    if (v14) {
      int v15 = (void *)(v14 + 16);
    }
    else {
      int v15 = 0;
    }
    uint64_t v16 = *((void *)this + 7);
    if (v16) {
      unsigned int v17 = (char **)(v16 + 16);
    }
    else {
      unsigned int v17 = 0;
    }
    if (AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject((uint64_t)&v42, *(void *)this, v15, v17, *((AGCError **)this + 5), 0, 0))
    {
      std::string::operator=((std::string *)((char *)this + 128), (const std::string *)&v54);
      std::string::operator=((std::string *)((char *)this + 152), (const std::string *)((char *)&v55 + 8));
      *((unsigned char *)this + 176) = v57;
    }
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DACE8;
    if (SHIBYTE(v56) < 0) {
      operator delete(*((void **)&v55 + 1));
    }
    if (SBYTE7(v55) < 0) {
      operator delete((void *)v54);
    }
    AGCModule<AGX::Impl::FragmentProgramKey>::~AGCModule((uint64_t)&v42);
  }
  else
  {
    uint64_t v10 = *((void *)this + 6);
    if (v10 && *((void *)this + 7))
    {
      *(void *)(v10 + 16) = 0;
      *(void *)(*((void *)this + 7) + 16) = 0;
    }
  }
  char v18 = (int *)*((void *)this + 2);
  uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0) {
    uint64_t v21 = (char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20);
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *((void *)this + 8);
  if (*((char *)this + 151) < 0) {
    std::string::__init_copy_ctor_external(&v42, *((const std::string::value_type **)this + 16), *((void *)this + 17));
  }
  else {
    std::string v42 = *(std::string *)((char *)this + 128);
  }
  if (*((char *)this + 175) < 0) {
    std::string::__init_copy_ctor_external(&v43, *((const std::string::value_type **)this + 19), *((void *)this + 20));
  }
  else {
    std::string v43 = *(std::string *)((char *)this + 152);
  }
  char v44 = *((unsigned char *)this + 176);
  uint64_t v23 = *((unsigned __int8 *)this + 72);
  *(void *)&long long v65 = 0;
  uint64_t v63 = 0;
  long long v64 = 0uLL;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, char *, std::string *, void, uint64_t, void, long long *, void **, _BYTE))(*(void *)v22 + 32))(v31, v22, v21, &v42, 0, v23, 0, &v64, &v61, 0);
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
  if ((void)v64)
  {
    *((void *)&v64 + 1) = v64;
    operator delete((void *)v64);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DAF10;
  AGX::Impl::MeshProgramKey::MeshProgramKey((AGX::Impl::MeshProgramKey *)&v42.__r_.__value_.__r.__words[1], (const AGX::Impl::MeshProgramKey *)v31);
  uint64_t v45 = v6;
  uint64_t v46 = v7;
  uint64_t v47 = "";
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DAEE0;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  LOWORD(v51) = 0;
  AGX::Impl::MeshProgramKey::~MeshProgramKey(v31);
  uint64_t v24 = *((void *)this + 6);
  if (v24) {
    uint64_t v25 = (void *)(v24 + 8);
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = *((void *)this + 7);
  if (v26) {
    uint64_t v27 = (char **)(v26 + 8);
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v9 = AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject((uint64_t)&v42, *(void *)this, v25, v27, *((AGCError **)this + 5));
  if (v9) {
    *((_WORD *)this + 92) = v51;
  }
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DAEE0;
  if (SHIBYTE(v50) < 0) {
    operator delete(*((void **)&v49 + 1));
  }
  if (SBYTE7(v49) < 0) {
    operator delete((void *)v48);
  }
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F25DAF10;
  AGX::Impl::MeshProgramKey::~MeshProgramKey((void **)&v42.__r_.__value_.__l.__size_);
  return v9;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25DB0F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25DB0F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::serialize(void *a1, void *a2, void *a3)
{
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::getSupportIndirectCommandBuffers(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) & 1;
}

void AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::serialize(void *a1, void *a2, void *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  uint64_t v6 = a1[3] - a1[2];
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 2), (v6 >> 2) + 10);
  uint64_t v7 = a1[2] + v6;
  *(_DWORD *)uint64_t v7 = ((*((_DWORD *)a1 + 6) - a1[2]) >> 2 << 8) | 0x3D;
  long long v8 = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(v7 + 20) = *(_OWORD *)(a1 + 7);
  *(_OWORD *)(v7 + 4) = v8;
  (*(void (**)(void *))(*a1 + 48))(a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t AGCObjectFunction::createLLVMObject(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 32) + 96))(*(void *)(a2 + 32));
}

AGX::Impl::MeshProgramKey *AGX::Impl::MeshProgramKey::MeshProgramKey(AGX::Impl::MeshProgramKey *this, const AGX::Impl::MeshProgramKey *a2)
{
  *(void *)this = &unk_1F25DAF88;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)((char *)this + 16), (const std::vector<unsigned int> *)((char *)a2 + 16));
  *(void *)this = &unk_1F25DAF40;
  long long v4 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 40) = v4;
  uint64_t v5 = (std::string *)((char *)this + 72);
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 72);
    *((void *)this + 11) = *((void *)a2 + 11);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  std::vector<MTLUINT256_t>::vector((void *)this + 13, (uint64_t)a2 + 104);
  std::vector<MTLUINT256_t>::vector((void *)this + 16, (uint64_t)a2 + 128);
  *(void *)this = &unk_1F25DBD40;
  uint64_t v7 = (std::string *)((char *)this + 152);
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 19), *((void *)a2 + 20));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 152);
    *((void *)this + 21) = *((void *)a2 + 21);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = (std::string *)((char *)this + 176);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 11);
    *((void *)this + 24) = *((void *)a2 + 24);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *((unsigned char *)this + 200) = *((unsigned char *)a2 + 200);
  return this;
}

void AGX::Impl::MeshProgramKey::~MeshProgramKey(void **this)
{
  *this = &unk_1F25DBD40;
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  *this = &unk_1F25DAF40;
  uint64_t v2 = this[16];
  if (v2)
  {
    this[17] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[13];
  if (v3)
  {
    this[14] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  *this = &unk_1F25DAF88;
  long long v4 = this[2];
  if (v4)
  {
    this[3] = v4;
    operator delete(v4);
  }
}

uint64_t AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(uint64_t a1, uint64_t a2, void *a3, char **a4, AGCError *a5)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  mach_absolute_time();
  uint64_t v16 = *(AGCLLVMCtx **)(a2 + 16);
  if (v16)
  {
    *((unsigned char *)v16 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses(v16);
    MEMORY[0x1CB79EDB0](v67);
    uint64_t v17 = *(void *)(a1 + 216);
    if (!v17) {
      goto LABEL_22;
    }
    if (*(void *)(a1 + 232)) {
      strlen(*(const char **)(a1 + 232));
    }
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    std::string::size_type v19 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v19) {
      (*(void (**)(std::string::size_type))(*(void *)v19 + 8))(v19);
    }
    if (v70)
    {
      long long v49 = v69;
      long long v69 = 0;
      long long v66 = v49;
      llvm::toString(&__p, &v66);
      long long v50 = std::string::insert(&__p, 0, "Error parsing bitcode file: ");
      std::string::size_type v57 = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v63 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      *(void *)&long long v64 = v57;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v64) & 0x80u) == 0) {
        uint64_t v58 = v63;
      }
      else {
        uint64_t v58 = (void **)v63[0];
      }
      AGCError::logError(a5, (char **)v58, v51, v52, v53, v54, v55, v56);
      if (SBYTE7(v64) < 0) {
        operator delete(v63[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v66) {
        (*(void (**)(char *))(*(void *)v66 + 8))(v66);
      }
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v69);
      goto LABEL_37;
    }
    uint64_t v17 = (uint64_t)v69;
    long long v69 = 0;
    __int16 v62 = 260;
    __p.__r_.__value_.__r.__words[0] = v17 + 216;
    MEMORY[0x1CB79FA50](v63, &__p);
    if (DWORD2(v64) == 49
      && v65 == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&__p, (const llvm::Triple *)v63),
          pluginSupportsOSVersion((uint64_t)__p.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v63), !v20))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&__p, (const llvm::Triple *)v63);
      int v28 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      AGCError::logError(a5, &p_p->__r_.__value_.__l.__data_, v21, v22, v23, v24, v25, v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v28 = 0;
    }
    if (SBYTE7(v64) < 0) {
      operator delete(v63[0]);
    }
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v69);
    if (v28)
    {
LABEL_22:
      uint64_t v29 = (uint64_t (***)(void))(**(uint64_t (***)(uint64_t, AGCLLVMCtx *, unsigned char *, uint64_t))a1)(a1, v16, v67, v17);
      if (v29)
      {
        int v36 = v29;
        if ((**v29)(v29))
        {
          __p.__r_.__value_.__r.__words[0] = 0;
          long long v69 = 0;
          *(_OWORD *)uint64_t v63 = 0u;
          long long v64 = 0u;
          v68[0] = &unk_1F25DAFC8;
          v68[1] = a1;
          v68[3] = v68;
          uint64_t v18 = ((uint64_t (*)(uint64_t (***)(void), std::string *, char **, void **, void *))(*v36)[1])(v36, &__p, &v69, v63, v68);
          std::__function::__value_func<void ()(AGCDeserializedReply const&)>::~__value_func[abi:nn180100](v68);
          if (v18)
          {
            *a3 = __p.__r_.__value_.__r.__words[0];
            *a4 = v69;
          }
          else
          {
            AGCError::logError(a5, (char **)"Error occurred composing compiler reply.", v43, v44, v45, v46, v47, v48);
          }
        }
        else
        {
          if (*((char *)v36 + 31) >= 0) {
            uint64_t v59 = (char **)(v36 + 1);
          }
          else {
            uint64_t v59 = (char **)v36[1];
          }
          AGCError::logError(a5, v59, v37, v38, v39, v40, v41, v42);
          uint64_t v18 = 0;
        }
        (*v36)[4](v36);
        goto LABEL_44;
      }
      AGCError::logError(a5, (char **)"Cannot create AGC LLVM object.", v30, v31, v32, v33, v34, v35);
    }
LABEL_37:
    uint64_t v18 = 0;
LABEL_44:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v67);
    return v18;
  }
  AGCError::logError(a5, (char **)"Failed to initialize AGX backend for target architecture.", v10, v11, v12, v13, v14, v15);
  return 0;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 8))();
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25DAFC8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25DAFC8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::serialize(void *a1, void *a2, void *a3)
{
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::getSupportIndirectCommandBuffers(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) & 1;
}

void AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::serialize(void *a1, void *a2, void *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  uint64_t v6 = a1[3] - a1[2];
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 2), (v6 >> 2) + 10);
  uint64_t v7 = a1[2] + v6;
  *(_DWORD *)uint64_t v7 = ((*((_DWORD *)a1 + 6) - a1[2]) >> 2 << 8) | 0x3E;
  long long v8 = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(v7 + 20) = *(_OWORD *)(a1 + 7);
  *(_OWORD *)(v7 + 4) = v8;
  (*(void (**)(void *))(*a1 + 48))(a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

std::string *AGCMeshFunction::cacheMetadata(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 240));
  uint64_t result = std::string::operator=((std::string *)(a2 + 96), (const std::string *)(a1 + 264));
  *(_WORD *)(a2 + 120) = *(_WORD *)(a1 + 288);
  return result;
}

std::string *AGCMeshFunction::extractMetadata(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a2 + 72));
  uint64_t result = std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a2 + 96));
  *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 120);
  return result;
}

void AGCMeshFunction::extractMetadata(uint64_t a1, uint64_t a2)
{
  v40[2] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 64) & 0x80) == 0) {
    goto LABEL_32;
  }
  v40[0] = 0;
  *(void *)((char *)v40 + 7) = 0;
  v39[0] = 0;
  *(void *)((char *)v39 + 7) = 0;
  if (*(void *)(a2 + 464))
  {
    long long v4 = (unsigned int **)(a2 + 464);
    if (!*(void *)(a2 + 472)) {
      long long v4 = (unsigned int **)(a2 + 1024);
    }
  }
  else
  {
    long long v4 = (unsigned int **)(a2 + 1024);
  }
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    long long v8 = 0;
  }
  else {
    long long v8 = (int *)((char *)v6 + *v6);
  }
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 0xDu && (uint64_t v10 = v9[6]) != 0) {
    uint64_t v11 = (int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  unsigned int v13 = *v12;
  if (v13 < 0xB) {
    goto LABEL_24;
  }
  if (v12[5]) {
    uint64_t v14 = (unsigned int *)((char *)v11 + v12[5] + *(unsigned int *)((char *)v11 + v12[5]));
  }
  else {
    uint64_t v14 = 0;
  }
  if (v13 < 0xD || (uint64_t v15 = v12[6]) == 0)
  {
    uint64_t v16 = 0;
    if (!v14) {
      goto LABEL_24;
    }
LABEL_26:
    std::string::basic_string[abi:nn180100](&v36, v14 + 1, *v14);
    char v18 = v38;
    uint64_t v17 = v36;
    v40[0] = *(void *)v37;
    *(void *)((char *)v40 + 7) = *(void *)&v37[7];
    std::string::basic_string[abi:nn180100](&v36, v16 + 1, *v16);
    char v20 = v38;
    uint64_t v19 = v36;
    v39[0] = *(void *)v37;
    *(void *)((char *)v39 + 7) = *(void *)&v37[7];
    goto LABEL_27;
  }
  uint64_t v16 = (unsigned int *)((char *)v11 + v15 + *(unsigned int *)((char *)v11 + v15));
  if (v14) {
    goto LABEL_26;
  }
LABEL_24:
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
LABEL_27:
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  uint64_t v21 = v40[0];
  *(void *)(a1 + 240) = v17;
  *(void *)(a1 + 248) = v21;
  *(void *)(a1 + 255) = *(void *)((char *)v40 + 7);
  *(unsigned char *)(a1 + 263) = v18;
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  uint64_t v22 = v39[0];
  *(void *)(a1 + 264) = v19;
  *(void *)(a1 + 272) = v22;
  *(void *)(a1 + 279) = *(void *)((char *)v39 + 7);
  *(unsigned char *)(a1 + 287) = v20;
LABEL_32:
  if (*(void *)(a2 + 464))
  {
    uint64_t v23 = (unsigned int **)(a2 + 464);
    if (!*(void *)(a2 + 472)) {
      uint64_t v23 = (unsigned int **)(a2 + 1024);
    }
  }
  else
  {
    uint64_t v23 = (unsigned int **)(a2 + 1024);
  }
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  if (v25) {
    BOOL v26 = v24 == 0;
  }
  else {
    BOOL v26 = 1;
  }
  if (v26) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = (int *)((char *)v25 + *v25);
  }
  int v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 0x17u && (uint64_t v29 = v28[11]) != 0) {
    uint64_t v30 = (int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29));
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30);
  unsigned int v32 = *v31;
  if (v32 <= 0x32)
  {
    BOOL v35 = 0;
    *(unsigned char *)(a1 + 288) = 0;
  }
  else
  {
    uint64_t v33 = v31[25];
    if (v31[25]) {
      LOBYTE(v33) = *((unsigned char *)v30 + v33) != 0;
    }
    *(unsigned char *)(a1 + 288) = v33;
    v35 = v32 >= 0x3B && (uint64_t v34 = v31[29]) != 0 && *((unsigned char *)v30 + v34) != 0;
  }
  *(unsigned char *)(a1 + 289) = v35;
}

uint64_t AGCMeshFunction::createLLVMObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  if ((*(unsigned char *)(a1 + 64) & 0x80) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v3 + 120))();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)v3 + 112))();
  }
}

void *AIRNTGetLegalizationPasses(int a1, unsigned int a2, AGCTarget *this, void *a4, void *a5)
{
  unsigned __int16 v7 = AGCTarget::CPUSubtypeToTargetArch(this, a2, (const char *)this);
  unsigned int v11 = 0;
  long long v8 = AGCTarget::Get(v7);
  uint64_t result = ((void *(*)(uint64_t *__return_ptr))(*v8)[2])(&v10);
  *a4 = v10;
  *a5 = v11;
  return result;
}

uint64_t (***AGCTarget::Get(unsigned __int16 a1))()
{
  int v2 = a1;
  uint64_t result = (uint64_t (***)())&AGCTarget::Get(AGCTargetArch)::target;
  switch(v2)
  {
    case 4:
      uint64_t result = &AGCTargetG5::Get(void)::target;
      break;
    case 6:
    case 7:
      uint64_t result = &AGCTargetG9::Get(void)::target;
      break;
    case 8:
      uint64_t result = &AGCTargetG10::Get(void)::target;
      break;
    case 9:
    case 10:
    case 11:
    case 23:
      uint64_t result = &AGCTargetG11::Get(void)::target;
      break;
    case 12:
      uint64_t result = &AGCTargetG12::Get(void)::target;
      break;
    case 14:
    case 16:
    case 25:
    case 26:
    case 27:
      uint64_t result = &AGCTargetG13::Get(void)::target;
      break;
    case 17:
    case 18:
      uint64_t result = &AGCTargetG14::Get(void)::target;
      break;
    case 19:
    case 20:
    case 21:
      uint64_t result = &AGCTargetG14X::Get(void)::target;
      break;
    case 22:
      uint64_t result = &AGCTargetG15_AGX2::Get(void)::target;
      break;
    case 24:
      if (a1 == 22) {
        uint64_t result = &AGCTargetG15::Get(AGCTargetArch)::target;
      }
      else {
        uint64_t result = &AGCTargetG15::Get(AGCTargetArch)::target;
      }
      break;
    case 31:
      uint64_t result = &AGCTargetG16::Get(void)::target;
      break;
    case 32:
    case 34:
      uint64_t result = &AGCTargetHAL200::Get(void)::target;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AGCNullTarget::maxMSAASampleCount(AGCNullTarget *this)
{
  return 0;
}

uint64_t AGCTarget::requiresRayTracingEmulation(AGCTarget *this)
{
  return 0;
}

void AGCTarget::GetLegalizationPasses(void *a1@<X8>)
{
  *a1 = 0;
}

void AGCNullTarget::CreateTGSizeToTempTable(unsigned int *a1@<X1>, void *a2@<X8>)
{
  *a1 = 0;
  *a2 = 0;
}

void AGCNullTarget::CreateProgramKeyFactory(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AGCTarget::TargetArchToCPUSubtypeImpl(int a1)
{
  if (unsigned __int16)(a1 - 4) < 0x18u && ((0xEBF5FDu >> (a1 - 4)))
  {
    uint64_t v3 = (unsigned __int16)(a1 - 4);
    uint64_t v2 = qword_1CADDF440[v3];
    uint64_t v1 = qword_1CADDF500[v3];
    return v1 | v2;
  }
  if (a1 > 196631)
  {
    if (a1 <= 196639)
    {
      if (a1 != 196632)
      {
        if (a1 != 196639) {
          goto LABEL_30;
        }
        uint64_t v1 = 0xF300000000;
        goto LABEL_26;
      }
      uint64_t v1 = 0x5300000000;
    }
    else
    {
      if (a1 == 196640)
      {
        uint64_t v1 = 0x19300000000;
        goto LABEL_24;
      }
      if (a1 == 262175)
      {
        uint64_t v1 = 0x1B300000000;
        goto LABEL_26;
      }
      if (a1 != 327704) {
        goto LABEL_30;
      }
      uint64_t v1 = 0x11300000000;
    }
LABEL_29:
    uint64_t v2 = 275;
    return v1 | v2;
  }
  if (a1 <= 65567)
  {
    if (a1 != 65560)
    {
      if (a1 != 65567) {
        goto LABEL_30;
      }
      uint64_t v1 = 0xE300000000;
LABEL_26:
      uint64_t v2 = 435;
      return v1 | v2;
    }
    uint64_t v1 = 0x4300000000;
    goto LABEL_29;
  }
  if (a1 == 65568)
  {
    uint64_t v1 = 0x10300000000;
LABEL_24:
    uint64_t v2 = 403;
    return v1 | v2;
  }
  if (a1 == 65570)
  {
    uint64_t v1 = 0x14300000000;
    uint64_t v2 = 323;
    return v1 | v2;
  }
  if (a1 != 196630)
  {
LABEL_30:
    uint64_t v2 = 0;
    uint64_t v1 = 0;
    return v1 | v2;
  }
  uint64_t v1 = 0x26200000000;
  uint64_t v2 = 610;
  return v1 | v2;
}

uint64_t AGCTarget::CPUSubtypeToTargetArch(AGCTarget *this, unsigned int a2, const char *a3)
{
  int v3 = (int)this;
  if ((int)this > 289)
  {
    if ((int)this <= 433)
    {
      if ((int)this > 369)
      {
        switch(this)
        {
          case 0x172:
            return 196625;
          case 0x192:
            return 196626;
          case 0x193:
            return 196640;
        }
      }
      else
      {
        switch(this)
        {
          case 0x122:
            return 196622;
          case 0x142:
            return 196624;
          case 0x143:
            return 65570;
        }
      }
    }
    else if ((int)this <= 529)
    {
      switch(this)
      {
        case 0x1B2:
          return 196627;
        case 0x1B3:
          return 262175;
        case 0x1F2:
          return 196629;
      }
    }
    else if ((int)this > 593)
    {
      if (this == 594)
      {
        int v5 = 19;
        goto LABEL_62;
      }
      if (this == 610) {
        return 196630;
      }
    }
    else
    {
      if (this == 530)
      {
        int v5 = 17;
        goto LABEL_62;
      }
      if (this == 562)
      {
        int v5 = 18;
        goto LABEL_62;
      }
    }
  }
  else
  {
    uint64_t result = 327684;
    if (v3 <= 96)
    {
      if (v3 > 80)
      {
        switch(v3)
        {
          case 'Q':
            return 65542;
          case 'R':
            return 196618;
          case 'S':
            return 196632;
        }
      }
      else
      {
        switch(v3)
        {
          case '""':
            return 196616;
          case 'A':
            return result;
          case 'C':
            return 65560;
        }
      }
      return 0;
    }
    if (v3 <= 226)
    {
      switch(v3)
      {
        case 97:
          int v7 = 65542;
          break;
        case 114:
          int v7 = 196616;
          break;
        case 210:
          return 196620;
        default:
          return 0;
      }
      return v7 | 1u;
    }
    if (v3 > 258)
    {
      if (v3 == 259) {
        return 65568;
      }
      if (v3 == 275) {
        return 327704;
      }
    }
    else
    {
      if (v3 == 227)
      {
        int v5 = 25;
        int v6 = 65542;
        return v6 | v5;
      }
      if (v3 == 243)
      {
        int v5 = 23;
LABEL_62:
        int v6 = 196616;
        return v6 | v5;
      }
    }
  }
  return 0;
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G10::Encoders,AGX::G10::Classes,AGX::G10::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v5 = *a2;
    int v6 = (char *)a2 - v5;
    unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v5);
    if (v7 < 5) {
      goto LABEL_71;
    }
    uint64_t v8 = -v5;
    uint64_t v9 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2))
    {
      uint64_t v10 = (char *)a2 + v9;
      uint64_t v11 = *(unsigned int *)((char *)a2 + v9);
      unint64_t v12 = *(unsigned int *)((char *)a2 + v9 + v11);
      if (v12)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = v9 + v11;
        while (1)
        {
          uint64_t v16 = *(unsigned int *)((char *)a2 + v15 + 4);
          uint64_t v17 = (char *)a2 + v15 + v16;
          char v18 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v18 + 2) >= 5u)
          {
            uint64_t v19 = *((unsigned __int16 *)v18 + 4);
            if (v19)
            {
              char v20 = (char *)a2 + v15 + v16 + v19;
              if (*((_WORD *)v20 + 2)) {
                break;
              }
            }
          }
LABEL_46:
          if (v14 <= 6)
          {
            ++v14;
            v13 += 2;
            v15 += 4;
            if (v14 < v12) {
              continue;
            }
          }
          uint64_t v47 = *a2;
          uint64_t v8 = -v47;
          unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v47);
          goto LABEL_66;
        }
        *(void *)(a1 + 8 * v14 + 96) = AGX::G10::TextureFormatTable::chooseTextureFormatCPP((AGX::G10::TextureFormatTable *)*((unsigned __int16 *)v20 + 2), v4);
        unsigned int v21 = 1 << v14;
        *(_DWORD *)(a1 + 40) |= 1 << v14;
        uint64_t v22 = v16 - *((int *)v17 + 1);
        unsigned int v23 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 4);
        if (v23 < 0x19)
        {
          int v25 = 0;
          __int32 v24 = 0;
          if (v23 < 0xF)
          {
LABEL_34:
            int v25 = 0;
            int v34 = 1 << v14;
LABEL_35:
            *(_DWORD *)(a1 + 52) |= v34;
            v36.i32[0] = v24;
            v36.i32[1] = v25 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v36, (int32x2_t)0x100000001)));
            if (v25 == 4) {
              int v37 = 1 << v14;
            }
            else {
              int v37 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v37;
            char v38 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
            if (*((unsigned __int16 *)v38 + 2) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 5)) != 0)
            {
              char v40 = 0;
              int v41 = *((unsigned __int8 *)a2 + v15 + v16 + v39 + 4);
              uint64_t v42 = (char *)(a1 + v13 + 160);
              char v43 = 2;
              char v44 = 1;
              switch(v41)
              {
                case 0:
                case 1:
                  char v43 = 1;
                  char v40 = v41;
                  goto LABEL_52;
                case 3:
                  goto LABEL_57;
                case 4:
                  char v45 = 2;
                  goto LABEL_43;
                case 5:
                  goto LABEL_51;
                case 6:
                  char v40 = 1;
LABEL_51:
                  char v43 = 4;
                  goto LABEL_52;
                case 7:
                  char *v42 = 3;
                  *(unsigned char *)(a1 + v13 + 161) = 0;
LABEL_55:
                  int v46 = 3;
                  break;
                case 8:
                  char v44 = 3;
LABEL_57:
                  char *v42 = 2;
                  *(unsigned char *)(a1 + v13 + 161) = v44;
LABEL_58:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_44;
                default:
LABEL_52:
                  char *v42 = v43;
                  *(unsigned char *)(a1 + v13 + 161) = v40;
                  int v46 = 1;
                  switch(v41)
                  {
                    case 0:
                      goto LABEL_45;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_58;
                    case 7:
                      goto LABEL_55;
                    default:
                      goto LABEL_44;
                  }
                  break;
              }
            }
            else
            {
              char v45 = 0;
              uint64_t v42 = (char *)(a1 + 2 * v14 + 160);
LABEL_43:
              char *v42 = 2;
              *(unsigned char *)(a1 + v13 + 161) = v45;
LABEL_44:
              int v46 = 2;
            }
LABEL_45:
            *(_WORD *)(a1 + 76) |= v46 << v13;
            unint64_t v12 = *(unsigned int *)&v10[v11];
            goto LABEL_46;
          }
        }
        else
        {
          if (*(_WORD *)((char *)a2 + v15 + v22 + 28)) {
            __int32 v24 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 28) + 4);
          }
          else {
            __int32 v24 = 0;
          }
          if (v23 >= 0x1B && *(_WORD *)((char *)a2 + v15 + v22 + 30)) {
            int v25 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 30) + 4);
          }
          else {
            int v25 = 0;
          }
        }
        uint64_t v26 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 18);
        if (v26 && *(_WORD *)((char *)a2 + v15 + v16 + v26 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v25 & 0xFE) == 2) {
            int v27 = 1 << v14;
          }
          else {
            int v27 = 0;
          }
          *(_DWORD *)(a1 + 68) |= v27;
          int v28 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v28 + 2) >= 0x11u && (uint64_t v29 = *((unsigned __int16 *)v28 + 10)) != 0)
          {
            char v30 = 0;
            int v31 = *((unsigned __int8 *)a2 + v15 + v16 + v29 + 4);
            char v32 = 2;
            switch(v31)
            {
              case 0:
              case 1:
                char v32 = 1;
                char v30 = v31;
                break;
              case 3:
                char v30 = 1;
                break;
              case 4:
                char v30 = 2;
                break;
              case 5:
                goto LABEL_61;
              case 6:
                char v30 = 1;
LABEL_61:
                char v32 = 4;
                break;
              case 7:
                char v30 = 0;
                char v32 = 3;
                break;
              case 8:
                char v30 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            char v30 = 0;
            char v32 = 2;
          }
          uint64_t v33 = a1 + v13;
          *(unsigned char *)(v33 + 176) = v32;
          *(unsigned char *)(v33 + 177) = v30;
        }
        int v34 = 0;
        if (v24 == 2) {
          int v35 = 1 << v14;
        }
        else {
          int v35 = 0;
        }
        *(_DWORD *)(a1 + 56) |= v35;
        if (v25) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
LABEL_66:
    if (v7 >= 7
      && *(_WORD *)((char *)a2 + v8 + 6)
      && (uint64_t v48 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v8 + 6)), (v48 & 0xFFFFFFFE) != 0))
    {
      if (v48 > 0x7FF) {
        LODWORD(v48) = 2048;
      }
    }
    else
    {
LABEL_71:
      LODWORD(v48) = 1;
    }
    *(_DWORD *)(a1 + 80) = v48;
    long long v49 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v50 = *v49;
    if (v50 < 0xB)
    {
      char v52 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v50 < 9)
      {
LABEL_82:
        *(unsigned char *)(a1 + 85) = v52;
        return a1;
      }
    }
    else
    {
      if (v49[5]) {
        char v51 = *((unsigned char *)a2 + v49[5]);
      }
      else {
        char v51 = 1;
      }
      *(unsigned char *)(a1 + 84) = v51;
    }
    uint64_t v53 = v49[4];
    if (v53) {
      char v52 = *((unsigned char *)a2 + v53);
    }
    else {
      char v52 = 1;
    }
    goto LABEL_82;
  }
  return a1;
}

uint64_t AGX::FramebufferCompilerConfigGen3<AGX::G10::Encoders,AGX::G10::Classes,AGX::G10::ObjClasses>::buildDrawBufferState(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (*(unsigned char *)(result + 40))
  {
    LODWORD(v2) = 0;
    int v3 = 0;
    char v4 = 0;
    while (2)
    {
      uint64_t v5 = __clz(__rbit32(v1));
      int v6 = *(_DWORD **)(result + 8 * v5 + 96);
      if (v6[8] == 18) {
        int v7 = 9;
      }
      else {
        int v7 = v6[8];
      }
      int v8 = v6[7];
      switch(v7)
      {
        case 2:
        case 4:
        case 5:
          goto LABEL_11;
        case 3:
          int v9 = (v6[21] != 0) << 8;
          int v10 = 1;
          goto LABEL_14;
        case 6:
        case 7:
        case 8:
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 22:
          v8 *= 2;
          goto LABEL_11;
        case 10:
        case 11:
        case 17:
          v8 *= 4;
          goto LABEL_11;
        case 18:
        case 19:
        case 20:
        case 21:
          int v8 = 4;
          goto LABEL_11;
        default:
          int v8 = 0;
LABEL_11:
          int v9 = 0;
          int v10 = 1;
          switch(v7)
          {
            case 2:
            case 4:
            case 5:
              break;
            case 6:
            case 7:
            case 8:
            case 9:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 22:
              int v9 = 0;
              int v10 = 2;
              break;
            case 10:
            case 11:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
              int v9 = 0;
              int v10 = 4;
              break;
            default:
              int v9 = 0;
              int v10 = 0;
              break;
          }
LABEL_14:
          int v11 = v10 - 1;
          int v12 = -v10;
          int v13 = (v11 + v2) & v12;
          unsigned int v14 = v13 + v8;
          v4 |= (v13 + v8) > 0x40;
          int v15 = (v11 + v3) & v12;
          char v16 = v15 + 64;
          int v17 = v15 + v8;
          if (v4)
          {
            int v3 = v17;
            LOBYTE(v13) = v16;
          }
          unsigned int v18 = v9 & 0xFFF00FFF | *(_DWORD *)(result + 4 * v5) & 0xFFF00EE0 | v7 & 0x1F | (v13 << 12);
          *(_DWORD *)(result + 4 * v5) = v18;
          unsigned int v19 = v18 & 0xFFFFF1FF | ((v6[19] & 7) << 9);
          *(_DWORD *)(result + 4 * v5) = v19;
          if (v4) {
            uint64_t v2 = v2;
          }
          else {
            uint64_t v2 = v14;
          }
          *(_DWORD *)(result + 4 * v5) = v19 & 0xFFFFFF1F | (32 * (v6[7] & 7));
          v1 ^= 1 << v5;
          if (v1) {
            continue;
          }
          uint64_t v20 = v2 + 7;
          uint64_t v21 = (v2 + 7) & 0x1FFFFFFF8;
          BOOL v22 = (v20 & 0x1FFFFFFC0) == 0;
          unint64_t v23 = 64;
          if (v22) {
            unint64_t v23 = v21;
          }
          if (v23 <= 8) {
            LODWORD(v23) = 8;
          }
          int v24 = v23 << 16;
          if (v4)
          {
            int v24 = 0x400000;
            int v25 = 0x2000000;
          }
          else
          {
            int v25 = 0;
          }
          int v26 = *(unsigned __int8 *)(result + 40) | v25;
          break;
      }
      break;
    }
  }
  else
  {
    int v3 = 0;
    int v26 = 0;
    int v24 = 0x80000;
  }
  *(_DWORD *)(result + 32) = v26 | ((*(unsigned char *)(result + 84) & 0xF) << 8) | *(_DWORD *)(result + 32) & 0xFC000000 | v24 | ((*(unsigned char *)(result + 85) & 0xF) << 12);
  *(_DWORD *)(result + 88) = v3;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

uint64_t AGCTargetImpl<AGX::G10::Classes,AGX::G10::Encoders>::maxMSAASampleCount()
{
  return 4;
}

uint64_t AGCTargetImpl<AGX::G10::Classes,AGX::G10::Encoders>::requiresRayTracingEmulation()
{
  return 1;
}

void *AGCTargetImpl<AGX::G10::Classes,AGX::G10::Encoders>::GetLegalizationPasses@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v8 = "air-degenerate-vertex-amplification-emulation";
  char v9 = 1;
  int v10 = "air-raytracing-emulation,indirect-acceleration-structures";
  char v11 = 0;
  int v12 = "mtl-fetch-all";
  char v13 = 1;
  unsigned int v14 = "air-bfloat-emulation";
  char v15 = 1;
  uint64_t result = malloc_type_malloc(0x20uLL, 0x10040436913F5uLL);
  uint64_t v5 = 0;
  int v6 = 0;
  *a1 = 0;
  do
  {
    if (LOBYTE((&v8)[v5 + 1]))
    {
      int v7 = (&v8)[v5];
      *a1 = v6 + 1;
      result[v6++] = v7;
    }
    v5 += 2;
  }
  while (v5 != 8);
  *a2 = result;
  return result;
}

void AGCTargetImpl<AGX::G10::Classes,AGX::G10::Encoders>::CreateTGSizeToTempTable(uint64_t a1, _DWORD *a2)
{
  *a2 = 16;
  operator new[]();
}

void AGCTargetImpl<AGX::G10::Classes,AGX::G10::Encoders>::CreateProgramKeyFactory()
{
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G10::Classes,AGX::G10::Encoders>::CreateBVHBuilderProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBCB8;
  *(_DWORD *)(a2 + 40) = 0;
  return AGX::BVHBuilderProgramKey::initializeWithDescriptor(a2, a1);
}

_OWORD *AGX::ProgramKeyFactoryImpl<AGX::G10::Classes,AGX::G10::Encoders>::CreateEndOfTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_1F25DBC38;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 118) = 0;
  AGX::FramebufferCompilerConfig<AGX::G10::Encoders,AGX::G10::Classes,AGX::G10::ObjClasses>::FramebufferCompilerConfig((uint64_t)v37, a1);
  uint64_t result = (_OWORD *)AGX::FramebufferCompilerConfigGen3<AGX::G10::Encoders,AGX::G10::Classes,AGX::G10::ObjClasses>::buildDrawBufferState((uint64_t)v37);
  v35[0] = v37[0];
  v35[1] = v37[1];
  unsigned int v5 = v38;
  uint64_t v36 = v38;
  unsigned int v6 = v39;
  int v7 = v40;
  unint64_t v8 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v38 >> 12) << 32) | ((unint64_t)BYTE2(v38) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v8;
  if (v6)
  {
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    unsigned int v12 = (unsigned __int16)v5 >> 12;
    unsigned int v13 = HIWORD(v5) & 0x1FF;
    int v14 = v43 & ~v42 | v41;
    int v15 = v44;
    unsigned int v16 = v42 & ~v43 | v41;
    uint64_t result = v35;
    do
    {
      uint64_t v17 = __clz(__rbit32(v6));
      unsigned int v18 = (char *)v37 + 2 * v17;
      if (v18[161])
      {
        int v20 = 0x20000;
      }
      else
      {
        int v19 = v18[160];
        if ((v18[161] & 2) != 0) {
          int v20 = 0x40000;
        }
        else {
          int v20 = 0x20000;
        }
        if (v19 != 2) {
          int v20 = 16711680;
        }
        if ((v19 - 3) < 2 || v19 == 1) {
          int v20 = 0x20000;
        }
      }
      unsigned int v22 = *((_DWORD *)v35 + v17);
      unsigned int v23 = (v22 >> 12) / v13;
      int v24 = (v22 & 0x1F) << 8;
      int v25 = (v22 << 21) & 0x1C000000;
      *(_DWORD *)(v3 + 4 * v17) = *(_DWORD *)(v3 + 4 * v17) & 0xE3000000 | v20 | v24 | v25 | v23;
      v9 |= 1 << v17;
      v10 |= (1 << v17) & v14;
      int v26 = v15 & (1 << v17);
      v11 |= v26;
      if ((v7 & (1 << v17)) != 0)
      {
        if (v12 <= 1) {
          int v27 = 0;
        }
        else {
          int v27 = (v22 << 16) & 0x1000000;
        }
        int v28 = (char *)v37 + 2 * v17;
        char v29 = v28[177];
        if (v29)
        {
          int v34 = 0x20000;
        }
        else
        {
          int v30 = v28[176];
          unsigned int v31 = v30 - 3;
          if ((v29 & 2) != 0) {
            int v32 = 0x40000;
          }
          else {
            int v32 = 0x20000;
          }
          if (v30 != 2) {
            int v32 = 16711680;
          }
          if (v30 == 1) {
            int v33 = 0x20000;
          }
          else {
            int v33 = v32;
          }
          if (v31 >= 2) {
            int v34 = v33;
          }
          else {
            int v34 = 0x20000;
          }
        }
        *(_DWORD *)(v3 + 4 * (v17 + 8)) = *(_DWORD *)(v3 + 4 * (v17 + 8)) & 0xE2000000 | v27 | v34 | v24 | v25 | v23;
        v9 |= 256 << v17;
        v10 |= ((v16 >> v17) & 1) << (v17 + 8);
        v11 |= (v26 != 0) << (v17 + 8);
      }
      v6 ^= 1 << v17;
    }
    while (v6);
    unint64_t v8 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v11) = 0;
    LOWORD(v10) = 0;
    LOWORD(v9) = 0;
  }
  *(_WORD *)(a2 + 120) = v9;
  *(_WORD *)(a2 + 122) = v10;
  *(_WORD *)(a2 + 124) = v11;
  *(void *)(a2 + 112) = v8 & 0xFFFFFFFF00000000 | (unsigned __int16)(v9 & ~(_WORD)v10) | ((unint64_t)(unsigned __int16)(v9 & v11) << 16);
  return result;
}

double AGX::ProgramKeyFactoryImpl<AGX::G10::Classes,AGX::G10::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBBF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfig<AGX::G10::Encoders,AGX::G10::Classes,AGX::G10::ObjClasses>::FramebufferCompilerConfig((uint64_t)v6, a1);
  AGX::FramebufferCompilerConfigGen3<AGX::G10::Encoders,AGX::G10::Classes,AGX::G10::ObjClasses>::buildDrawBufferState((uint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G10::Classes,AGX::G10::Encoders>::CreateTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 8) = 5;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F25DBE10;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(void *)(a4 + 200) = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  int v32 = 1;
  __int16 v33 = 0;
  int v34 = 0;
  memset(v35, 0, 96);
  bzero(&v28, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  unsigned __int8 v9 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v10 = *v9;
  if (v10 < 0xF) {
    goto LABEL_13;
  }
  uint64_t v11 = v9[7];
  if (v9[7])
  {
    uint64_t v12 = *(unsigned int *)((char *)a1 + v11);
    unsigned int v13 = (unsigned int *)((char *)a1 + v11 + v12);
    unint64_t v14 = *v13;
    if (v14)
    {
      unint64_t v15 = 0;
      int v16 = DWORD2(v30);
      uint64_t v27 = a3;
      uint64_t v17 = (char *)a1 + v11 + v12;
      do
      {
        unsigned int v18 = &v17[4 * v15];
        uint64_t v19 = *((unsigned int *)v18 + 1);
        int v20 = (char *)v13 + v19 - *(int *)&v18[v19 + 4];
        if (*((unsigned __int16 *)v20 + 2) >= 5u)
        {
          uint64_t v21 = *((unsigned __int16 *)v20 + 4);
          if (v21)
          {
            unsigned int v22 = (char *)v13 + v19 + v21;
            if (*((_WORD *)v22 + 2))
            {
              *((void *)v35 + v15) = AGX::G10::TextureFormatTable::chooseTextureFormatCPP((AGX::G10::TextureFormatTable *)*((unsigned __int16 *)v22 + 2), v8);
              v16 |= 1 << v15;
            }
          }
        }
        if (v15 > 6) {
          break;
        }
        ++v15;
        ++v13;
      }
      while (v15 < v14);
      DWORD2(v30) = v16;
      a3 = v27;
LABEL_13:
      if (v10 <= 0xA)
      {
        char v24 = 1;
        LOBYTE(v33) = 1;
LABEL_21:
        HIBYTE(v33) = v24;
        goto LABEL_22;
      }
    }
  }
  if (v9[5]) {
    char v23 = *((unsigned char *)a1 + v9[5]);
  }
  else {
    char v23 = 1;
  }
  LOBYTE(v33) = v23;
  HIBYTE(v33) = v23;
  if (v10 >= 0xD)
  {
    if (v9[6])
    {
      char v24 = *((unsigned char *)a1 + v9[6]);
      if (v24) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G10::Encoders,AGX::G10::Classes,AGX::G10::ObjClasses>::buildDrawBufferState((uint64_t)&v28);
  long long v25 = v29;
  *(_OWORD *)(a4 + 112) = v28;
  *(_OWORD *)(a4 + 128) = v25;
  *(void *)(a4 + 144) = v30;
  AGX::Impl::TileProgramKey::initCommon(a4, a1);
  *(_DWORD *)(a4 + 100) &= ~0x80u;
  if (a4 + 160 != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 160), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a4 + 184 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 184), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  LOWORD(v28) = 256;
  *(void *)((char *)&v28 + 2) = 0;
  *(_DWORD *)((char *)&v28 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a4, (unsigned __int8 *)&v28);
}

char *std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unsigned __int8 v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59) {
      abort();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<MTLUINT256_t>::__vallocate[abi:nn180100](v7, v11);
    unsigned int v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unsigned __int8 v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unsigned int v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unsigned __int8 v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unsigned int v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G10::Classes,AGX::G10::Encoders>::CreateComputeProgramKey@<X0>(AGX *a1@<X1>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 8) = 6;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)a5 = &unk_1F25DBE50;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 64), "");
  *(unsigned char *)(a5 + 88) = 0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  AGX::Impl::ComputeProgramKey::initCommon((AGX *)a5, a1);
  *(int8x8_t *)(a5 + 52) = vand_s8(*(int8x8_t *)(a5 + 52), (int8x8_t)0xFFFFFFFEFFFFFF7FLL);
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a5, a2);
  if (a5 + 96 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a5 + 120 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  __int16 v11 = 256;
  uint64_t v12 = 0;
  int v13 = 0;
  return AGX::Impl::ComputeProgramKey::setDeviceOptions(a5, (unsigned __int8 *)&v11);
}

void AGX::Impl::ComputeProgramKey::setStageInDescriptor(AGX::Impl::ComputeProgramKey *this, dispatch_data_t data)
{
  if (data)
  {
    size_t v4 = 0;
    buffer_ptr = 0;
    uint64_t v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &v4);
    std::string::append((std::string *)((char *)this + 64), (const std::string::value_type *)buffer_ptr, v4);
    dispatch_release(v3);
  }
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G10::Classes,AGX::G10::Encoders>::CreateFragmentProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 8) = 4;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 232) = 0u;
  uint64_t v12 = (char *)(a6 + 232);
  *(void *)a6 = &unk_1F25DBDD0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_OWORD *)(a6 + 120) = 0u;
  *(_OWORD *)(a6 + 136) = 0u;
  *(_OWORD *)(a6 + 152) = 0u;
  *(_OWORD *)(a6 + 168) = 0u;
  *(_OWORD *)(a6 + 184) = 0u;
  *(_OWORD *)(a6 + 200) = 0u;
  *(_OWORD *)(a6 + 209) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 264) = 0u;
  long long v41 = 0u;
  memset(v42, 0, sizeof(v42));
  long long v39 = 0u;
  long long v40 = 0u;
  int v43 = 1;
  __int16 v44 = 0;
  int v45 = 0;
  memset(v46, 0, 96);
  bzero(&v39, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  int v38 = a2;
  unint64_t v14 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  unsigned int v15 = *v14;
  if (v15 >= 0x17)
  {
    uint64_t v16 = v14[11];
    if (!v14[11]) {
      goto LABEL_14;
    }
    uint64_t v17 = *(unsigned int *)((char *)a1 + v16);
    unsigned int v18 = (unsigned int *)((char *)a1 + v16 + v17);
    unint64_t v19 = *v18;
    if (!v19) {
      goto LABEL_14;
    }
    int v35 = a3;
    uint64_t v36 = a4;
    uint64_t v37 = a5;
    unint64_t v20 = 0;
    int v21 = DWORD2(v41);
    unsigned int v22 = (char *)a1 + v16 + v17;
    do
    {
      char v23 = &v22[4 * v20];
      uint64_t v24 = *((unsigned int *)v23 + 1);
      long long v25 = (char *)v18 + v24 - *(int *)&v23[v24 + 4];
      if (*((unsigned __int16 *)v25 + 2) >= 5u)
      {
        uint64_t v26 = *((unsigned __int16 *)v25 + 4);
        if (v26)
        {
          uint64_t v27 = (char *)v18 + v24 + v26;
          if (*((_WORD *)v27 + 2))
          {
            *((void *)v46 + v20) = AGX::G10::TextureFormatTable::chooseTextureFormatCPP((AGX::G10::TextureFormatTable *)*((unsigned __int16 *)v27 + 2), v13);
            v21 |= 1 << v20;
          }
        }
      }
      if (v20 > 6) {
        break;
      }
      ++v20;
      ++v18;
    }
    while (v20 < v19);
    DWORD2(v41) = v21;
    a4 = v36;
    a5 = v37;
    a3 = v35;
  }
  if (v15 <= 0xC)
  {
    char v29 = 1;
    LOBYTE(v44) = 1;
    a2 = v38;
LABEL_21:
    HIBYTE(v44) = v29;
    goto LABEL_22;
  }
LABEL_14:
  if (v14[6]) {
    char v28 = *((unsigned char *)a1 + v14[6]);
  }
  else {
    char v28 = 1;
  }
  a2 = v38;
  LOBYTE(v44) = v28;
  HIBYTE(v44) = v28;
  if (v15 >= 0xF)
  {
    if (v14[7])
    {
      char v29 = *((unsigned char *)a1 + v14[7]);
      if (v29) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G10::Encoders,AGX::G10::Classes,AGX::G10::ObjClasses>::buildDrawBufferState((uint64_t)&v39);
  long long v30 = v40;
  *(_OWORD *)(a6 + 112) = v39;
  *(_OWORD *)(a6 + 128) = v30;
  *(void *)(a6 + 144) = v41;
  AGX::Impl::FragmentProgramKey::initCommon((AGX *)a6, a1);
  int v31 = *(_DWORD *)(a6 + 104);
  unsigned int v32 = *(_DWORD *)(a6 + 100) & 0xFFFFFF7F;
  *(_DWORD *)(a6 + 40) &= ~0x10u;
  if (a2) {
    int v33 = 256;
  }
  else {
    int v33 = 0;
  }
  *(_DWORD *)(a6 + 100) = v32;
  *(_DWORD *)(a6 + 104) = v31 & 0xFFFFFEFF | v33;
  AGX::Impl::FragmentProgramKey::setSerializedDescriptor((AGX::Impl::FragmentProgramKey *)a6, a3);
  if (v12 != (char *)a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a6 + 256 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a6 + 256), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  LOWORD(v39) = 256;
  *(void *)((char *)&v39 + 2) = 0;
  *(_DWORD *)((char *)&v39 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a6, (unsigned __int8 *)&v39);
}

void AGX::Impl::FragmentProgramKey::setSerializedDescriptor(AGX::Impl::FragmentProgramKey *this, dispatch_data_t data)
{
  if (data)
  {
    size_t v4 = 0;
    buffer_ptr = 0;
    uint64_t v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &v4);
    std::string::append((std::string *)((char *)this + 200), (const std::string::value_type *)buffer_ptr, v4);
    dispatch_release(v3);
  }
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G10::Classes,AGX::G10::Encoders>::CreateMeshProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v26 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v27 = *(std::string *)(a2 + 24);
  }
  int v17 = *(unsigned __int8 *)(a2 + 48);
  *(_OWORD *)(a8 + 104) = 0u;
  *(_DWORD *)(a8 + 8) = 10;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_DWORD *)(a8 + 96) = 0;
  *(void *)a8 = &unk_1F25DBD40;
  *(std::string *)(a8 + 152) = v26;
  long long v18 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(void *)(a8 + 192) = *((void *)&v27.__r_.__value_.__l + 2);
  if (a3) {
    int v19 = 128;
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  *(_OWORD *)(a8 + 176) = v18;
  *(unsigned char *)(a8 + 200) = v17;
  *(_DWORD *)(a8 + 56) = v20 | v19 | (16 * v17);
  AGX::Impl::MeshProgramKey::initCommon((AGX *)a8, a1);
  *(_DWORD *)(a8 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a8, a5);
  if (a8 + 104 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 104), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  if (a8 + 128 != a7) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 128), *(char **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5);
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v21;
  __int16 v23 = 256;
  uint64_t v24 = 0;
  int v25 = 0;
  return AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(a8, (unsigned __int8 *)&v23);
}

void AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor(std::string *a1, dispatch_data_t data)
{
  if (data)
  {
    size_t v4 = 0;
    buffer_ptr = 0;
    uint64_t v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &v4);
    std::string::append(a1 + 3, (const std::string::value_type *)buffer_ptr, v4);
    dispatch_release(v3);
  }
}

uint64_t AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(uint64_t result, unsigned __int8 *a2)
{
  int v2 = *(_DWORD *)(result + 56);
  unsigned int v3 = *(_DWORD *)(result + 52) & 0xFBFFFFFF | (*a2 << 26);
  *(_DWORD *)(result + 52) = v3;
  unsigned int v4 = v3 & 0xFFFFFEFF | (a2[1] << 8);
  *(_DWORD *)(result + 52) = v4;
  unsigned int v5 = v4 & 0xEFFFFFFF | (a2[2] << 28);
  *(_DWORD *)(result + 52) = v5;
  unsigned int v6 = v5 & 0xDFFFFFFF | (a2[4] << 29);
  *(_DWORD *)(result + 52) = v6;
  *(_DWORD *)(result + 52) = v6 & 0xBFFFFFFF | (a2[6] << 30);
  *(_DWORD *)(result + 56) = v2 & 0xFFFFFDFF | (a2[3] << 9);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G10::Classes,AGX::G10::Encoders>::CreateObjectProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)(a7 + 8) = 9;
  *(_OWORD *)(a7 + 104) = 0u;
  __int16 v11 = (char *)(a7 + 104);
  *(_OWORD *)(a7 + 120) = 0u;
  *(_OWORD *)(a7 + 136) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_DWORD *)(a7 + 96) = 0;
  *(void *)a7 = &unk_1F25DBD88;
  if (a2) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  if (a3) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a7 + 56) = v13 | v12;
  AGX::Impl::ObjectProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a7, a4);
  if (v11 != (char *)a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v11, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a7 + 128 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 128), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  __int16 v15 = 256;
  uint64_t v16 = 0;
  int v17 = 0;
  return AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(a7, (unsigned __int8 *)&v15);
}

uint64_t AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(uint64_t result, unsigned __int8 *a2)
{
  int v2 = *(_DWORD *)(result + 56);
  unsigned int v3 = *(_DWORD *)(result + 52) & 0xFBFFFFFF | (*a2 << 26);
  *(_DWORD *)(result + 52) = v3;
  unsigned int v4 = v3 & 0xFFFFFEFF | (a2[1] << 8);
  *(_DWORD *)(result + 52) = v4;
  unsigned int v5 = v4 & 0xEFFFFFFF | (a2[2] << 28);
  *(_DWORD *)(result + 52) = v5;
  unsigned int v6 = v5 & 0xDFFFFFFF | (a2[4] << 29);
  *(_DWORD *)(result + 52) = v6;
  *(_DWORD *)(result + 52) = v6 & 0xBFFFFFFF | (a2[6] << 30);
  *(_DWORD *)(result + 56) = v2 & 0xFFFFFF7F | (a2[3] << 7);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G10::Classes,AGX::G10::Encoders>::CreateVertexProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v21 = *(std::string *)(a2 + 24);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)(a7 + 8) = 3;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 76) = 0u;
  *(void *)a7 = &unk_1F25DBCF8;
  *(std::string *)(a7 + 144) = v20;
  *(std::string *)(a7 + 168) = v21;
  *(unsigned char *)(a7 + 192) = v14;
  *(void *)(a7 + 56) = v14 << 18;
  AGX::Impl::VertexProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a7, a3);
  if (a7 + 96 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a7 + 120 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a6) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a7 + 88) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v15;
  __int16 v17 = 256;
  uint64_t v18 = 0;
  int v19 = 0;
  return AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(a7, (unsigned __int8 *)&v17);
}

void AGX::ProgramKeyFactoryImpl<AGX::G10::Classes,AGX::G10::Encoders>::~ProgramKeyFactoryImpl()
{
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G11::Encoders,AGX::G11::Classes,AGX::G11::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = (char *)a2 - v5;
    unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v5);
    if (v7 < 5) {
      goto LABEL_71;
    }
    uint64_t v8 = -v5;
    uint64_t v9 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2))
    {
      uint64_t v10 = (char *)a2 + v9;
      uint64_t v11 = *(unsigned int *)((char *)a2 + v9);
      unint64_t v12 = *(unsigned int *)((char *)a2 + v9 + v11);
      if (v12)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = v9 + v11;
        while (1)
        {
          uint64_t v16 = *(unsigned int *)((char *)a2 + v15 + 4);
          __int16 v17 = (char *)a2 + v15 + v16;
          uint64_t v18 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v18 + 2) >= 5u)
          {
            uint64_t v19 = *((unsigned __int16 *)v18 + 4);
            if (v19)
            {
              std::string v20 = (char *)a2 + v15 + v16 + v19;
              if (*((_WORD *)v20 + 2)) {
                break;
              }
            }
          }
LABEL_46:
          if (v14 <= 6)
          {
            ++v14;
            v13 += 2;
            v15 += 4;
            if (v14 < v12) {
              continue;
            }
          }
          uint64_t v47 = *a2;
          uint64_t v8 = -v47;
          unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v47);
          goto LABEL_66;
        }
        *(void *)(a1 + 8 * v14 + 96) = AGX::G11::TextureFormatTable::chooseTextureFormatCPP((AGX::G11::TextureFormatTable *)*((unsigned __int16 *)v20 + 2), v4);
        unsigned int v21 = 1 << v14;
        *(_DWORD *)(a1 + 40) |= 1 << v14;
        uint64_t v22 = v16 - *((int *)v17 + 1);
        unsigned int v23 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 4);
        if (v23 < 0x19)
        {
          int v25 = 0;
          __int32 v24 = 0;
          if (v23 < 0xF)
          {
LABEL_34:
            int v25 = 0;
            int v34 = 1 << v14;
LABEL_35:
            *(_DWORD *)(a1 + 52) |= v34;
            v36.i32[0] = v24;
            v36.i32[1] = v25 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v36, (int32x2_t)0x100000001)));
            if (v25 == 4) {
              int v37 = 1 << v14;
            }
            else {
              int v37 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v37;
            int v38 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
            if (*((unsigned __int16 *)v38 + 2) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 5)) != 0)
            {
              char v40 = 0;
              int v41 = *((unsigned __int8 *)a2 + v15 + v16 + v39 + 4);
              unsigned __int8 v42 = (char *)(a1 + v13 + 160);
              char v43 = 2;
              char v44 = 1;
              switch(v41)
              {
                case 0:
                case 1:
                  char v43 = 1;
                  char v40 = v41;
                  goto LABEL_52;
                case 3:
                  goto LABEL_57;
                case 4:
                  char v45 = 2;
                  goto LABEL_43;
                case 5:
                  goto LABEL_51;
                case 6:
                  char v40 = 1;
LABEL_51:
                  char v43 = 4;
                  goto LABEL_52;
                case 7:
                  char *v42 = 3;
                  *(unsigned char *)(a1 + v13 + 161) = 0;
LABEL_55:
                  int v46 = 3;
                  break;
                case 8:
                  char v44 = 3;
LABEL_57:
                  char *v42 = 2;
                  *(unsigned char *)(a1 + v13 + 161) = v44;
LABEL_58:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_44;
                default:
LABEL_52:
                  char *v42 = v43;
                  *(unsigned char *)(a1 + v13 + 161) = v40;
                  int v46 = 1;
                  switch(v41)
                  {
                    case 0:
                      goto LABEL_45;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_58;
                    case 7:
                      goto LABEL_55;
                    default:
                      goto LABEL_44;
                  }
                  break;
              }
            }
            else
            {
              char v45 = 0;
              unsigned __int8 v42 = (char *)(a1 + 2 * v14 + 160);
LABEL_43:
              char *v42 = 2;
              *(unsigned char *)(a1 + v13 + 161) = v45;
LABEL_44:
              int v46 = 2;
            }
LABEL_45:
            *(_WORD *)(a1 + 76) |= v46 << v13;
            unint64_t v12 = *(unsigned int *)&v10[v11];
            goto LABEL_46;
          }
        }
        else
        {
          if (*(_WORD *)((char *)a2 + v15 + v22 + 28)) {
            __int32 v24 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 28) + 4);
          }
          else {
            __int32 v24 = 0;
          }
          if (v23 >= 0x1B && *(_WORD *)((char *)a2 + v15 + v22 + 30)) {
            int v25 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 30) + 4);
          }
          else {
            int v25 = 0;
          }
        }
        uint64_t v26 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 18);
        if (v26 && *(_WORD *)((char *)a2 + v15 + v16 + v26 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v25 & 0xFE) == 2) {
            int v27 = 1 << v14;
          }
          else {
            int v27 = 0;
          }
          *(_DWORD *)(a1 + 68) |= v27;
          char v28 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v28 + 2) >= 0x11u && (uint64_t v29 = *((unsigned __int16 *)v28 + 10)) != 0)
          {
            char v30 = 0;
            int v31 = *((unsigned __int8 *)a2 + v15 + v16 + v29 + 4);
            char v32 = 2;
            switch(v31)
            {
              case 0:
              case 1:
                char v32 = 1;
                char v30 = v31;
                break;
              case 3:
                char v30 = 1;
                break;
              case 4:
                char v30 = 2;
                break;
              case 5:
                goto LABEL_61;
              case 6:
                char v30 = 1;
LABEL_61:
                char v32 = 4;
                break;
              case 7:
                char v30 = 0;
                char v32 = 3;
                break;
              case 8:
                char v30 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            char v30 = 0;
            char v32 = 2;
          }
          uint64_t v33 = a1 + v13;
          *(unsigned char *)(v33 + 176) = v32;
          *(unsigned char *)(v33 + 177) = v30;
        }
        int v34 = 0;
        if (v24 == 2) {
          int v35 = 1 << v14;
        }
        else {
          int v35 = 0;
        }
        *(_DWORD *)(a1 + 56) |= v35;
        if (v25) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
LABEL_66:
    if (v7 >= 7
      && *(_WORD *)((char *)a2 + v8 + 6)
      && (uint64_t v48 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v8 + 6)), (v48 & 0xFFFFFFFE) != 0))
    {
      if (v48 > 0x7FF) {
        LODWORD(v48) = 2048;
      }
    }
    else
    {
LABEL_71:
      LODWORD(v48) = 1;
    }
    *(_DWORD *)(a1 + 80) = v48;
    long long v49 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v50 = *v49;
    if (v50 < 0xB)
    {
      char v52 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v50 < 9)
      {
LABEL_82:
        *(unsigned char *)(a1 + 85) = v52;
        return a1;
      }
    }
    else
    {
      if (v49[5]) {
        char v51 = *((unsigned char *)a2 + v49[5]);
      }
      else {
        char v51 = 1;
      }
      *(unsigned char *)(a1 + 84) = v51;
    }
    uint64_t v53 = v49[4];
    if (v53) {
      char v52 = *((unsigned char *)a2 + v53);
    }
    else {
      char v52 = 1;
    }
    goto LABEL_82;
  }
  return a1;
}

void AGX::FramebufferCompilerConfigGen3<AGX::G11::Encoders,AGX::G11::Classes,AGX::G11::ObjClasses>::buildDrawBufferState(uint64_t a1)
{
  if (AGX::G11::FramebufferCompilerConfig::isLargeMRTEmulationEnabled(void)::onceToken != -1) {
    dispatch_once(&AGX::G11::FramebufferCompilerConfig::isLargeMRTEmulationEnabled(void)::onceToken, &__block_literal_global_11419);
  }
  unsigned int v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40))
  {
    int v3 = 0;
    int v4 = 0;
    char v5 = 0;
    while (2)
    {
      uint64_t v6 = __clz(__rbit32(v2));
      unsigned int v7 = *(_DWORD **)(a1 + 8 * v6 + 96);
      if (v7[8] == 18) {
        int v8 = 9;
      }
      else {
        int v8 = v7[8];
      }
      int v9 = v7[7];
      switch(v8)
      {
        case 2:
        case 4:
        case 5:
          goto LABEL_13;
        case 3:
          int v10 = (v7[21] != 0) << 8;
          int v11 = 1;
          goto LABEL_16;
        case 6:
        case 7:
        case 8:
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 22:
          v9 *= 2;
          goto LABEL_13;
        case 10:
        case 11:
        case 17:
          v9 *= 4;
          goto LABEL_13;
        case 18:
        case 19:
        case 20:
        case 21:
          int v9 = 4;
          goto LABEL_13;
        default:
          int v9 = 0;
LABEL_13:
          int v10 = 0;
          int v11 = 1;
          switch(v8)
          {
            case 2:
            case 4:
            case 5:
              break;
            case 6:
            case 7:
            case 8:
            case 9:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 22:
              int v10 = 0;
              int v11 = 2;
              break;
            case 10:
            case 11:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
              int v10 = 0;
              int v11 = 4;
              break;
            default:
              int v10 = 0;
              int v11 = 0;
              break;
          }
LABEL_16:
          int v12 = v11 - 1;
          int v13 = -v11;
          int v14 = (v12 + v3) & v13;
          uint64_t v15 = (v14 + v9);
          v5 |= v15 > 0x40;
          int v16 = (v12 + v4) & v13;
          unsigned __int8 v17 = v16 + 64;
          int v18 = v16 + v9;
          if (v5)
          {
            int v4 = v18;
            unsigned __int8 v19 = v17;
          }
          else
          {
            unsigned __int8 v19 = v14;
          }
          unsigned int v20 = v10 & 0xFFF00FFF | *(_DWORD *)(a1 + 4 * v6) & 0xFFF00EE0 | v8 & 0x1F | (v19 << 12);
          *(_DWORD *)(a1 + 4 * v6) = v20;
          unsigned int v21 = v20 & 0xFFFFF1FF | ((v7[19] & 7) << 9);
          *(_DWORD *)(a1 + 4 * v6) = v21;
          if ((v5 & 1) == 0) {
            int v3 = v15;
          }
          *(_DWORD *)(a1 + 4 * v6) = v21 & 0xFFFFFF1F | (32 * (v7[7] & 7));
          v2 ^= 1 << v6;
          if (v2) {
            continue;
          }
          BOOL v22 = (v5 & 1) == 0;
          if (v5) {
            int v23 = 0x2000000;
          }
          else {
            int v23 = 0;
          }
          unsigned int v2 = *(unsigned __int8 *)(a1 + 40) | v23;
          unint64_t v24 = (v15 + 7) & 0x1FFFFFFF8;
          if (!v22) {
            unint64_t v24 = 64;
          }
          break;
      }
      break;
    }
  }
  else
  {
    int v4 = 0;
    unint64_t v24 = 0;
  }
  if (v24 >= 0x40) {
    unint64_t v24 = 64;
  }
  if (v24 <= 8) {
    LODWORD(v24) = 8;
  }
  *(_DWORD *)(a1 + 32) = v2 | *(_DWORD *)(a1 + 32) & 0xFC000000 | (v24 << 16) | ((*(unsigned char *)(a1 + 84) & 0xF) << 8) & 0xFFF | ((*(unsigned char *)(a1 + 85) & 0xF) << 12);
  *(_DWORD *)(a1 + 88) = v4;
  *(_DWORD *)(a1 + 44) = 0;
}

uint64_t AGCTargetImpl<AGX::G11::Classes,AGX::G11::Encoders>::maxMSAASampleCount()
{
  return 4;
}

uint64_t AGCTargetImpl<AGX::G11::Classes,AGX::G11::Encoders>::requiresRayTracingEmulation()
{
  return 1;
}

void *AGCTargetImpl<AGX::G11::Classes,AGX::G11::Encoders>::GetLegalizationPasses@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v8 = "air-degenerate-vertex-amplification-emulation";
  char v9 = 1;
  int v10 = "air-raytracing-emulation,indirect-acceleration-structures";
  char v11 = 0;
  int v12 = "mtl-fetch-all-unaligned";
  char v13 = 1;
  int v14 = "air-bfloat-emulation";
  char v15 = 1;
  double result = malloc_type_malloc(0x20uLL, 0x10040436913F5uLL);
  uint64_t v5 = 0;
  int v6 = 0;
  *a1 = 0;
  do
  {
    if (LOBYTE((&v8)[v5 + 1]))
    {
      unsigned int v7 = (&v8)[v5];
      *a1 = v6 + 1;
      result[v6++] = v7;
    }
    v5 += 2;
  }
  while (v5 != 8);
  *a2 = result;
  return result;
}

void AGCTargetImpl<AGX::G11::Classes,AGX::G11::Encoders>::CreateTGSizeToTempTable(uint64_t a1, _DWORD *a2)
{
  *a2 = 16;
  operator new[]();
}

void AGCTargetImpl<AGX::G11::Classes,AGX::G11::Encoders>::CreateProgramKeyFactory()
{
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G11::Classes,AGX::G11::Encoders>::CreateBVHBuilderProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBCB8;
  *(_DWORD *)(a2 + 40) = 0;
  return AGX::BVHBuilderProgramKey::initializeWithDescriptor(a2, a1);
}

void AGX::ProgramKeyFactoryImpl<AGX::G11::Classes,AGX::G11::Encoders>::CreateEndOfTileProgramKey(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_1F25DBC38;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 118) = 0;
  AGX::FramebufferCompilerConfig<AGX::G11::Encoders,AGX::G11::Classes,AGX::G11::ObjClasses>::FramebufferCompilerConfig((uint64_t)v31, a1);
  AGX::FramebufferCompilerConfigGen3<AGX::G11::Encoders,AGX::G11::Classes,AGX::G11::ObjClasses>::buildDrawBufferState((uint64_t)v31);
  v29[0] = v31[0];
  v29[1] = v31[1];
  unsigned int v4 = v32;
  uint64_t v30 = v32;
  unsigned int v5 = v39;
  unsigned int v6 = v33;
  int v7 = v34;
  unint64_t v8 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v32 >> 12) << 32) | ((unint64_t)BYTE2(v32) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v8;
  if (v6)
  {
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    unsigned int v12 = (unsigned __int16)v4 >> 12;
    int v13 = v38;
    unsigned int v14 = HIWORD(v4) & 0x1FF;
    if (v5 < 2) {
      char v15 = 2;
    }
    else {
      char v15 = 3;
    }
    int v16 = v37 & ~v36 | v35;
    unsigned int v17 = v36 & ~v37 | v35;
    do
    {
      uint64_t v18 = __clz(__rbit32(v6));
      unsigned int v19 = *((_DWORD *)v29 + v18);
      unsigned int v20 = (char *)v31 + 2 * v18;
      unsigned __int8 v21 = v15;
      if ((v20[161] & 1) == 0)
      {
        unsigned __int8 v21 = 5;
        switch(v20[160])
        {
          case 1:
            unsigned __int8 v21 = 2;
            break;
          case 2:
            if ((v20[161] & 2) != 0) {
              unsigned __int8 v21 = 4;
            }
            else {
              unsigned __int8 v21 = 2;
            }
            break;
          case 3:
            break;
          case 4:
            unsigned __int8 v21 = v15;
            break;
          default:
            unsigned __int8 v21 = -1;
            break;
        }
      }
      unsigned int v22 = (v19 >> 12) / v14;
      int v23 = (*((_DWORD *)v29 + v18) & 0x1F) << 8;
      int v24 = (v19 << 21) & 0x1C000000;
      *(_DWORD *)(v3 + 4 * v18) = *(_DWORD *)(v3 + 4 * v18) & 0xE3000000 | (v21 << 16) | v23 | v24 | v22;
      v9 |= 1 << v18;
      v10 |= (1 << v18) & v16;
      int v25 = v13 & (1 << v18);
      v11 |= v25;
      if ((v7 & (1 << v18)) != 0)
      {
        if (v12 <= 1) {
          int v26 = 0;
        }
        else {
          int v26 = (v19 << 16) & 0x1000000;
        }
        int v27 = (char *)v31 + 2 * v18;
        unsigned __int8 v28 = v15;
        if ((v27[177] & 1) == 0)
        {
          unsigned __int8 v28 = 5;
          switch(v27[176])
          {
            case 1:
              unsigned __int8 v28 = 2;
              break;
            case 2:
              if ((v27[177] & 2) != 0) {
                unsigned __int8 v28 = 4;
              }
              else {
                unsigned __int8 v28 = 2;
              }
              break;
            case 3:
              break;
            case 4:
              unsigned __int8 v28 = v15;
              break;
            default:
              unsigned __int8 v28 = -1;
              break;
          }
        }
        *(_DWORD *)(v3 + 4 * (v18 + 8)) = *(_DWORD *)(v3 + 4 * (v18 + 8)) & 0xE2000000 | v26 | (v28 << 16) | v23 | v24 | v22;
        v9 |= 256 << v18;
        v10 |= ((v17 >> v18) & 1) << (v18 + 8);
        v11 |= (v25 != 0) << (v18 + 8);
      }
      v6 ^= 1 << v18;
    }
    while (v6);
    unint64_t v8 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v11) = 0;
    LOWORD(v10) = 0;
    LOWORD(v9) = 0;
  }
  *(_WORD *)(a2 + 120) = v9;
  *(_WORD *)(a2 + 122) = v10;
  *(_WORD *)(a2 + 124) = v11;
  *(void *)(a2 + 112) = v8 & 0xFFFFFFFF00000000 | (unsigned __int16)(v9 & ~(_WORD)v10) | ((unint64_t)(unsigned __int16)(v9 & v11) << 16);
}

double AGX::ProgramKeyFactoryImpl<AGX::G11::Classes,AGX::G11::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBBF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfig<AGX::G11::Encoders,AGX::G11::Classes,AGX::G11::ObjClasses>::FramebufferCompilerConfig((uint64_t)v6, a1);
  AGX::FramebufferCompilerConfigGen3<AGX::G11::Encoders,AGX::G11::Classes,AGX::G11::ObjClasses>::buildDrawBufferState((uint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G11::Classes,AGX::G11::Encoders>::CreateTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 8) = 5;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F25DBE10;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(void *)(a4 + 200) = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  int v32 = 1;
  __int16 v33 = 0;
  int v34 = 0;
  memset(v35, 0, 96);
  bzero(&v28, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  unsigned __int8 v9 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v10 = *v9;
  if (v10 < 0xF) {
    goto LABEL_13;
  }
  uint64_t v11 = v9[7];
  if (v9[7])
  {
    uint64_t v12 = *(unsigned int *)((char *)a1 + v11);
    int v13 = (unsigned int *)((char *)a1 + v11 + v12);
    unint64_t v14 = *v13;
    if (v14)
    {
      unint64_t v15 = 0;
      int v16 = DWORD2(v30);
      uint64_t v27 = a3;
      unsigned int v17 = (char *)a1 + v11 + v12;
      do
      {
        uint64_t v18 = &v17[4 * v15];
        uint64_t v19 = *((unsigned int *)v18 + 1);
        unsigned int v20 = (char *)v13 + v19 - *(int *)&v18[v19 + 4];
        if (*((unsigned __int16 *)v20 + 2) >= 5u)
        {
          uint64_t v21 = *((unsigned __int16 *)v20 + 4);
          if (v21)
          {
            unsigned int v22 = (char *)v13 + v19 + v21;
            if (*((_WORD *)v22 + 2))
            {
              *((void *)v35 + v15) = AGX::G11::TextureFormatTable::chooseTextureFormatCPP((AGX::G11::TextureFormatTable *)*((unsigned __int16 *)v22 + 2), v8);
              v16 |= 1 << v15;
            }
          }
        }
        if (v15 > 6) {
          break;
        }
        ++v15;
        ++v13;
      }
      while (v15 < v14);
      DWORD2(v30) = v16;
      a3 = v27;
LABEL_13:
      if (v10 <= 0xA)
      {
        char v24 = 1;
        LOBYTE(v33) = 1;
LABEL_21:
        HIBYTE(v33) = v24;
        goto LABEL_22;
      }
    }
  }
  if (v9[5]) {
    char v23 = *((unsigned char *)a1 + v9[5]);
  }
  else {
    char v23 = 1;
  }
  LOBYTE(v33) = v23;
  HIBYTE(v33) = v23;
  if (v10 >= 0xD)
  {
    if (v9[6])
    {
      char v24 = *((unsigned char *)a1 + v9[6]);
      if (v24) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G11::Encoders,AGX::G11::Classes,AGX::G11::ObjClasses>::buildDrawBufferState((uint64_t)&v28);
  long long v25 = v29;
  *(_OWORD *)(a4 + 112) = v28;
  *(_OWORD *)(a4 + 128) = v25;
  *(void *)(a4 + 144) = v30;
  AGX::Impl::TileProgramKey::initCommon(a4, a1);
  *(_DWORD *)(a4 + 100) &= ~0x80u;
  if (a4 + 160 != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 160), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a4 + 184 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 184), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  LOWORD(v28) = 256;
  *(void *)((char *)&v28 + 2) = 0;
  *(_DWORD *)((char *)&v28 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a4, (unsigned __int8 *)&v28);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G11::Classes,AGX::G11::Encoders>::CreateComputeProgramKey@<X0>(AGX *a1@<X1>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 8) = 6;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)a5 = &unk_1F25DBE50;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 64), "");
  *(unsigned char *)(a5 + 88) = 0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  AGX::Impl::ComputeProgramKey::initCommon((AGX *)a5, a1);
  *(int8x8_t *)(a5 + 52) = vand_s8(*(int8x8_t *)(a5 + 52), (int8x8_t)0xFFFFFFFEFFFFFF7FLL);
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a5, a2);
  if (a5 + 96 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a5 + 120 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  __int16 v11 = 256;
  uint64_t v12 = 0;
  int v13 = 0;
  return AGX::Impl::ComputeProgramKey::setDeviceOptions(a5, (unsigned __int8 *)&v11);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G11::Classes,AGX::G11::Encoders>::CreateFragmentProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 8) = 4;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 232) = 0u;
  uint64_t v12 = (char *)(a6 + 232);
  *(void *)a6 = &unk_1F25DBDD0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_OWORD *)(a6 + 120) = 0u;
  *(_OWORD *)(a6 + 136) = 0u;
  *(_OWORD *)(a6 + 152) = 0u;
  *(_OWORD *)(a6 + 168) = 0u;
  *(_OWORD *)(a6 + 184) = 0u;
  *(_OWORD *)(a6 + 200) = 0u;
  *(_OWORD *)(a6 + 209) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 264) = 0u;
  long long v41 = 0u;
  memset(v42, 0, sizeof(v42));
  long long v39 = 0u;
  long long v40 = 0u;
  int v43 = 1;
  __int16 v44 = 0;
  int v45 = 0;
  memset(v46, 0, 96);
  bzero(&v39, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  int v38 = a2;
  unint64_t v14 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  unsigned int v15 = *v14;
  if (v15 >= 0x17)
  {
    uint64_t v16 = v14[11];
    if (!v14[11]) {
      goto LABEL_14;
    }
    uint64_t v17 = *(unsigned int *)((char *)a1 + v16);
    uint64_t v18 = (unsigned int *)((char *)a1 + v16 + v17);
    unint64_t v19 = *v18;
    if (!v19) {
      goto LABEL_14;
    }
    unsigned __int8 v35 = a3;
    uint64_t v36 = a4;
    uint64_t v37 = a5;
    unint64_t v20 = 0;
    int v21 = DWORD2(v41);
    unsigned int v22 = (char *)a1 + v16 + v17;
    do
    {
      char v23 = &v22[4 * v20];
      uint64_t v24 = *((unsigned int *)v23 + 1);
      long long v25 = (char *)v18 + v24 - *(int *)&v23[v24 + 4];
      if (*((unsigned __int16 *)v25 + 2) >= 5u)
      {
        uint64_t v26 = *((unsigned __int16 *)v25 + 4);
        if (v26)
        {
          uint64_t v27 = (char *)v18 + v24 + v26;
          if (*((_WORD *)v27 + 2))
          {
            *((void *)v46 + v20) = AGX::G11::TextureFormatTable::chooseTextureFormatCPP((AGX::G11::TextureFormatTable *)*((unsigned __int16 *)v27 + 2), v13);
            v21 |= 1 << v20;
          }
        }
      }
      if (v20 > 6) {
        break;
      }
      ++v20;
      ++v18;
    }
    while (v20 < v19);
    DWORD2(v41) = v21;
    a4 = v36;
    a5 = v37;
    a3 = v35;
  }
  if (v15 <= 0xC)
  {
    char v29 = 1;
    LOBYTE(v44) = 1;
    a2 = v38;
LABEL_21:
    HIBYTE(v44) = v29;
    goto LABEL_22;
  }
LABEL_14:
  if (v14[6]) {
    char v28 = *((unsigned char *)a1 + v14[6]);
  }
  else {
    char v28 = 1;
  }
  a2 = v38;
  LOBYTE(v44) = v28;
  HIBYTE(v44) = v28;
  if (v15 >= 0xF)
  {
    if (v14[7])
    {
      char v29 = *((unsigned char *)a1 + v14[7]);
      if (v29) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G11::Encoders,AGX::G11::Classes,AGX::G11::ObjClasses>::buildDrawBufferState((uint64_t)&v39);
  long long v30 = v40;
  *(_OWORD *)(a6 + 112) = v39;
  *(_OWORD *)(a6 + 128) = v30;
  *(void *)(a6 + 144) = v41;
  AGX::Impl::FragmentProgramKey::initCommon((AGX *)a6, a1);
  int v31 = *(_DWORD *)(a6 + 104);
  unsigned int v32 = *(_DWORD *)(a6 + 100) & 0xFFFFFF7F;
  *(_DWORD *)(a6 + 40) &= ~0x10u;
  if (a2) {
    int v33 = 256;
  }
  else {
    int v33 = 0;
  }
  *(_DWORD *)(a6 + 100) = v32;
  *(_DWORD *)(a6 + 104) = v31 & 0xFFFFFEFF | v33;
  AGX::Impl::FragmentProgramKey::setSerializedDescriptor((AGX::Impl::FragmentProgramKey *)a6, a3);
  if (v12 != (char *)a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a6 + 256 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a6 + 256), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  LOWORD(v39) = 256;
  *(void *)((char *)&v39 + 2) = 0;
  *(_DWORD *)((char *)&v39 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a6, (unsigned __int8 *)&v39);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G11::Classes,AGX::G11::Encoders>::CreateMeshProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v26 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v27 = *(std::string *)(a2 + 24);
  }
  int v17 = *(unsigned __int8 *)(a2 + 48);
  *(_OWORD *)(a8 + 104) = 0u;
  *(_DWORD *)(a8 + 8) = 10;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_DWORD *)(a8 + 96) = 0;
  *(void *)a8 = &unk_1F25DBD40;
  *(std::string *)(a8 + 152) = v26;
  long long v18 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(void *)(a8 + 192) = *((void *)&v27.__r_.__value_.__l + 2);
  if (a3) {
    int v19 = 128;
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  *(_OWORD *)(a8 + 176) = v18;
  *(unsigned char *)(a8 + 200) = v17;
  *(_DWORD *)(a8 + 56) = v20 | v19 | (16 * v17);
  AGX::Impl::MeshProgramKey::initCommon((AGX *)a8, a1);
  *(_DWORD *)(a8 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a8, a5);
  if (a8 + 104 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 104), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  if (a8 + 128 != a7) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 128), *(char **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5);
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v21;
  __int16 v23 = 256;
  uint64_t v24 = 0;
  int v25 = 0;
  return AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(a8, (unsigned __int8 *)&v23);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G11::Classes,AGX::G11::Encoders>::CreateObjectProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)(a7 + 8) = 9;
  *(_OWORD *)(a7 + 104) = 0u;
  __int16 v11 = (char *)(a7 + 104);
  *(_OWORD *)(a7 + 120) = 0u;
  *(_OWORD *)(a7 + 136) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_DWORD *)(a7 + 96) = 0;
  *(void *)a7 = &unk_1F25DBD88;
  if (a2) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  if (a3) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a7 + 56) = v13 | v12;
  AGX::Impl::ObjectProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a7, a4);
  if (v11 != (char *)a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v11, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a7 + 128 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 128), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  __int16 v15 = 256;
  uint64_t v16 = 0;
  int v17 = 0;
  return AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(a7, (unsigned __int8 *)&v15);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G11::Classes,AGX::G11::Encoders>::CreateVertexProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v21 = *(std::string *)(a2 + 24);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)(a7 + 8) = 3;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 76) = 0u;
  *(void *)a7 = &unk_1F25DBCF8;
  *(std::string *)(a7 + 144) = v20;
  *(std::string *)(a7 + 168) = v21;
  *(unsigned char *)(a7 + 192) = v14;
  *(void *)(a7 + 56) = v14 << 18;
  AGX::Impl::VertexProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a7, a3);
  if (a7 + 96 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a7 + 120 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a6) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a7 + 88) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v15;
  __int16 v17 = 256;
  uint64_t v18 = 0;
  int v19 = 0;
  return AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(a7, (unsigned __int8 *)&v17);
}

void AGX::ProgramKeyFactoryImpl<AGX::G11::Classes,AGX::G11::Encoders>::~ProgramKeyFactoryImpl()
{
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G12::Encoders,AGX::G12::Classes,AGX::G12::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = (char *)a2 - v5;
    unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v5);
    if (v7 < 5) {
      goto LABEL_71;
    }
    uint64_t v8 = -v5;
    uint64_t v9 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2))
    {
      unsigned int v10 = (char *)a2 + v9;
      uint64_t v11 = *(unsigned int *)((char *)a2 + v9);
      unint64_t v12 = *(unsigned int *)((char *)a2 + v9 + v11);
      if (v12)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = v9 + v11;
        while (1)
        {
          uint64_t v16 = *(unsigned int *)((char *)a2 + v15 + 4);
          __int16 v17 = (char *)a2 + v15 + v16;
          uint64_t v18 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v18 + 2) >= 5u)
          {
            uint64_t v19 = *((unsigned __int16 *)v18 + 4);
            if (v19)
            {
              std::string v20 = (char *)a2 + v15 + v16 + v19;
              if (*((_WORD *)v20 + 2)) {
                break;
              }
            }
          }
LABEL_46:
          if (v14 <= 6)
          {
            ++v14;
            v13 += 2;
            v15 += 4;
            if (v14 < v12) {
              continue;
            }
          }
          uint64_t v47 = *a2;
          uint64_t v8 = -v47;
          unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v47);
          goto LABEL_66;
        }
        *(void *)(a1 + 8 * v14 + 96) = AGX::G12::TextureFormatTable::chooseTextureFormatCPP((AGX::G12::TextureFormatTable *)*((unsigned __int16 *)v20 + 2), v4);
        unsigned int v21 = 1 << v14;
        *(_DWORD *)(a1 + 40) |= 1 << v14;
        uint64_t v22 = v16 - *((int *)v17 + 1);
        unsigned int v23 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 4);
        if (v23 < 0x19)
        {
          int v25 = 0;
          __int32 v24 = 0;
          if (v23 < 0xF)
          {
LABEL_34:
            int v25 = 0;
            int v34 = 1 << v14;
LABEL_35:
            *(_DWORD *)(a1 + 52) |= v34;
            v36.i32[0] = v24;
            v36.i32[1] = v25 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v36, (int32x2_t)0x100000001)));
            if (v25 == 4) {
              int v37 = 1 << v14;
            }
            else {
              int v37 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v37;
            int v38 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
            if (*((unsigned __int16 *)v38 + 2) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 5)) != 0)
            {
              char v40 = 0;
              int v41 = *((unsigned __int8 *)a2 + v15 + v16 + v39 + 4);
              unsigned __int8 v42 = (char *)(a1 + v13 + 160);
              char v43 = 2;
              char v44 = 1;
              switch(v41)
              {
                case 0:
                case 1:
                  char v43 = 1;
                  char v40 = v41;
                  goto LABEL_52;
                case 3:
                  goto LABEL_57;
                case 4:
                  char v45 = 2;
                  goto LABEL_43;
                case 5:
                  goto LABEL_51;
                case 6:
                  char v40 = 1;
LABEL_51:
                  char v43 = 4;
                  goto LABEL_52;
                case 7:
                  char *v42 = 3;
                  *(unsigned char *)(a1 + v13 + 161) = 0;
LABEL_55:
                  int v46 = 3;
                  break;
                case 8:
                  char v44 = 3;
LABEL_57:
                  char *v42 = 2;
                  *(unsigned char *)(a1 + v13 + 161) = v44;
LABEL_58:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_44;
                default:
LABEL_52:
                  char *v42 = v43;
                  *(unsigned char *)(a1 + v13 + 161) = v40;
                  int v46 = 1;
                  switch(v41)
                  {
                    case 0:
                      goto LABEL_45;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_58;
                    case 7:
                      goto LABEL_55;
                    default:
                      goto LABEL_44;
                  }
                  break;
              }
            }
            else
            {
              char v45 = 0;
              unsigned __int8 v42 = (char *)(a1 + 2 * v14 + 160);
LABEL_43:
              char *v42 = 2;
              *(unsigned char *)(a1 + v13 + 161) = v45;
LABEL_44:
              int v46 = 2;
            }
LABEL_45:
            *(_WORD *)(a1 + 76) |= v46 << v13;
            unint64_t v12 = *(unsigned int *)&v10[v11];
            goto LABEL_46;
          }
        }
        else
        {
          if (*(_WORD *)((char *)a2 + v15 + v22 + 28)) {
            __int32 v24 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 28) + 4);
          }
          else {
            __int32 v24 = 0;
          }
          if (v23 >= 0x1B && *(_WORD *)((char *)a2 + v15 + v22 + 30)) {
            int v25 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 30) + 4);
          }
          else {
            int v25 = 0;
          }
        }
        uint64_t v26 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 18);
        if (v26 && *(_WORD *)((char *)a2 + v15 + v16 + v26 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v25 & 0xFE) == 2) {
            int v27 = 1 << v14;
          }
          else {
            int v27 = 0;
          }
          *(_DWORD *)(a1 + 68) |= v27;
          char v28 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v28 + 2) >= 0x11u && (uint64_t v29 = *((unsigned __int16 *)v28 + 10)) != 0)
          {
            char v30 = 0;
            int v31 = *((unsigned __int8 *)a2 + v15 + v16 + v29 + 4);
            char v32 = 2;
            switch(v31)
            {
              case 0:
              case 1:
                char v32 = 1;
                char v30 = v31;
                break;
              case 3:
                char v30 = 1;
                break;
              case 4:
                char v30 = 2;
                break;
              case 5:
                goto LABEL_61;
              case 6:
                char v30 = 1;
LABEL_61:
                char v32 = 4;
                break;
              case 7:
                char v30 = 0;
                char v32 = 3;
                break;
              case 8:
                char v30 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            char v30 = 0;
            char v32 = 2;
          }
          uint64_t v33 = a1 + v13;
          *(unsigned char *)(v33 + 176) = v32;
          *(unsigned char *)(v33 + 177) = v30;
        }
        int v34 = 0;
        if (v24 == 2) {
          int v35 = 1 << v14;
        }
        else {
          int v35 = 0;
        }
        *(_DWORD *)(a1 + 56) |= v35;
        if (v25) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
LABEL_66:
    if (v7 >= 7
      && *(_WORD *)((char *)a2 + v8 + 6)
      && (uint64_t v48 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v8 + 6)), (v48 & 0xFFFFFFFE) != 0))
    {
      if (v48 > 0x7FF) {
        LODWORD(v48) = 2048;
      }
    }
    else
    {
LABEL_71:
      LODWORD(v48) = 1;
    }
    *(_DWORD *)(a1 + 80) = v48;
    long long v49 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v50 = *v49;
    if (v50 < 0xB)
    {
      char v52 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v50 < 9)
      {
LABEL_82:
        *(unsigned char *)(a1 + 85) = v52;
        return a1;
      }
    }
    else
    {
      if (v49[5]) {
        char v51 = *((unsigned char *)a2 + v49[5]);
      }
      else {
        char v51 = 1;
      }
      *(unsigned char *)(a1 + 84) = v51;
    }
    uint64_t v53 = v49[4];
    if (v53) {
      char v52 = *((unsigned char *)a2 + v53);
    }
    else {
      char v52 = 1;
    }
    goto LABEL_82;
  }
  return a1;
}

void AGX::FramebufferCompilerConfigGen3<AGX::G12::Encoders,AGX::G12::Classes,AGX::G12::ObjClasses>::buildDrawBufferState(uint64_t a1)
{
  if (AGX::G12::FramebufferCompilerConfig::isLargeMRTEmulationEnabled(void)::onceToken != -1) {
    dispatch_once(&AGX::G12::FramebufferCompilerConfig::isLargeMRTEmulationEnabled(void)::onceToken, &__block_literal_global_11430);
  }
  unsigned int v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned char *)(a1 + 40))
  {
    int v3 = 0;
    int v4 = 0;
    char v5 = 0;
    while (2)
    {
      uint64_t v6 = __clz(__rbit32(v2));
      unsigned int v7 = *(_DWORD **)(a1 + 8 * v6 + 96);
      if (v7[8] == 18) {
        int v8 = 9;
      }
      else {
        int v8 = v7[8];
      }
      int v9 = v7[7];
      switch(v8)
      {
        case 2:
        case 4:
        case 5:
          goto LABEL_13;
        case 3:
          int v10 = (v7[21] != 0) << 8;
          int v11 = 1;
          goto LABEL_16;
        case 6:
        case 7:
        case 8:
        case 9:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 22:
          v9 *= 2;
          goto LABEL_13;
        case 10:
        case 11:
        case 17:
          v9 *= 4;
          goto LABEL_13;
        case 18:
        case 19:
        case 20:
        case 21:
          int v9 = 4;
          goto LABEL_13;
        default:
          int v9 = 0;
LABEL_13:
          int v10 = 0;
          int v11 = 1;
          switch(v8)
          {
            case 2:
            case 4:
            case 5:
              break;
            case 6:
            case 7:
            case 8:
            case 9:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 22:
              int v10 = 0;
              int v11 = 2;
              break;
            case 10:
            case 11:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
              int v10 = 0;
              int v11 = 4;
              break;
            default:
              int v10 = 0;
              int v11 = 0;
              break;
          }
LABEL_16:
          int v12 = v11 - 1;
          int v13 = -v11;
          int v14 = (v12 + v3) & v13;
          uint64_t v15 = (v14 + v9);
          v5 |= v15 > 0x40;
          int v16 = (v12 + v4) & v13;
          unsigned __int8 v17 = v16 + 64;
          int v18 = v16 + v9;
          if (v5)
          {
            int v4 = v18;
            unsigned __int8 v19 = v17;
          }
          else
          {
            unsigned __int8 v19 = v14;
          }
          unsigned int v20 = v10 & 0xFFF00FFF | *(_DWORD *)(a1 + 4 * v6) & 0xFFF00EE0 | v8 & 0x1F | (v19 << 12);
          *(_DWORD *)(a1 + 4 * v6) = v20;
          unsigned int v21 = v20 & 0xFFFFF1FF | ((v7[19] & 7) << 9);
          *(_DWORD *)(a1 + 4 * v6) = v21;
          if ((v5 & 1) == 0) {
            int v3 = v15;
          }
          *(_DWORD *)(a1 + 4 * v6) = v21 & 0xFFFFFF1F | (32 * (v7[7] & 7));
          v2 ^= 1 << v6;
          if (v2) {
            continue;
          }
          BOOL v22 = (v5 & 1) == 0;
          if (v5) {
            int v23 = 0x2000000;
          }
          else {
            int v23 = 0;
          }
          unsigned int v2 = *(unsigned __int8 *)(a1 + 40) | v23;
          unint64_t v24 = (v15 + 7) & 0x1FFFFFFF8;
          if (!v22) {
            unint64_t v24 = 64;
          }
          break;
      }
      break;
    }
  }
  else
  {
    int v4 = 0;
    unint64_t v24 = 0;
  }
  if (v24 >= 0x40) {
    unint64_t v24 = 64;
  }
  if (v24 <= 8) {
    LODWORD(v24) = 8;
  }
  *(_DWORD *)(a1 + 32) = v2 | *(_DWORD *)(a1 + 32) & 0xFC000000 | (v24 << 16) | ((*(unsigned char *)(a1 + 84) & 0xF) << 8) & 0xFFF | ((*(unsigned char *)(a1 + 85) & 0xF) << 12);
  *(_DWORD *)(a1 + 88) = v4;
  *(_DWORD *)(a1 + 44) = 0;
}

uint64_t AGCTargetImpl<AGX::G12::Classes,AGX::G12::Encoders>::maxMSAASampleCount()
{
  return 4;
}

uint64_t AGCTargetImpl<AGX::G12::Classes,AGX::G12::Encoders>::requiresRayTracingEmulation()
{
  return 1;
}

void *AGCTargetImpl<AGX::G12::Classes,AGX::G12::Encoders>::GetLegalizationPasses@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v9 = "air-degenerate-vertex-amplification-emulation";
  char v10 = 0;
  int v11 = "air-raytracing-emulation,indirect-acceleration-structures";
  char v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int v13 = "mtl-fetch-all-unaligned";
  char v14 = 1;
  uint64_t v15 = "air-bfloat-emulation";
  char v16 = 1;
  double result = malloc_type_malloc(0x20uLL, 0x10040436913F5uLL);
  uint64_t v6 = 0;
  int v7 = 0;
  *a2 = 0;
  do
  {
    if (LOBYTE((&v9)[v6 + 1]))
    {
      int v8 = (&v9)[v6];
      *a2 = v7 + 1;
      result[v7++] = v8;
    }
    v6 += 2;
  }
  while (v6 != 8);
  *a3 = result;
  return result;
}

void AGCTargetImpl<AGX::G12::Classes,AGX::G12::Encoders>::CreateTGSizeToTempTable(uint64_t a1, _DWORD *a2)
{
  *a2 = 32;
  operator new[]();
}

void AGCTargetImpl<AGX::G12::Classes,AGX::G12::Encoders>::CreateProgramKeyFactory()
{
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G12::Classes,AGX::G12::Encoders>::CreateBVHBuilderProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBCB8;
  *(_DWORD *)(a2 + 40) = 0;
  return AGX::BVHBuilderProgramKey::initializeWithDescriptor(a2, a1);
}

void AGX::ProgramKeyFactoryImpl<AGX::G12::Classes,AGX::G12::Encoders>::CreateEndOfTileProgramKey(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_1F25DBC38;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 118) = 0;
  AGX::FramebufferCompilerConfig<AGX::G12::Encoders,AGX::G12::Classes,AGX::G12::ObjClasses>::FramebufferCompilerConfig((uint64_t)v31, a1);
  AGX::FramebufferCompilerConfigGen3<AGX::G12::Encoders,AGX::G12::Classes,AGX::G12::ObjClasses>::buildDrawBufferState((uint64_t)v31);
  v29[0] = v31[0];
  v29[1] = v31[1];
  unsigned int v4 = v32;
  uint64_t v30 = v32;
  unsigned int v5 = v39;
  unsigned int v6 = v33;
  int v7 = v34;
  unint64_t v8 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v32 >> 12) << 32) | ((unint64_t)BYTE2(v32) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v8;
  if (v6)
  {
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    unsigned int v12 = (unsigned __int16)v4 >> 12;
    int v13 = v38;
    unsigned int v14 = HIWORD(v4) & 0x1FF;
    if (v5 < 2) {
      char v15 = 2;
    }
    else {
      char v15 = 3;
    }
    int v16 = v37 & ~v36 | v35;
    unsigned int v17 = v36 & ~v37 | v35;
    do
    {
      uint64_t v18 = __clz(__rbit32(v6));
      unsigned int v19 = *((_DWORD *)v29 + v18);
      unsigned int v20 = (char *)v31 + 2 * v18;
      unsigned __int8 v21 = v15;
      if ((v20[161] & 1) == 0)
      {
        unsigned __int8 v21 = 5;
        switch(v20[160])
        {
          case 1:
            unsigned __int8 v21 = 2;
            break;
          case 2:
            if ((v20[161] & 2) != 0) {
              unsigned __int8 v21 = 4;
            }
            else {
              unsigned __int8 v21 = 2;
            }
            break;
          case 3:
            break;
          case 4:
            unsigned __int8 v21 = v15;
            break;
          default:
            unsigned __int8 v21 = -1;
            break;
        }
      }
      unsigned int v22 = (v19 >> 12) / v14;
      int v23 = (*((_DWORD *)v29 + v18) & 0x1F) << 8;
      int v24 = (v19 << 21) & 0x1C000000;
      *(_DWORD *)(v3 + 4 * v18) = *(_DWORD *)(v3 + 4 * v18) & 0xE3000000 | (v21 << 16) | v23 | v24 | v22;
      v9 |= 1 << v18;
      v10 |= (1 << v18) & v16;
      int v25 = v13 & (1 << v18);
      v11 |= v25;
      if ((v7 & (1 << v18)) != 0)
      {
        if (v12 <= 1) {
          int v26 = 0;
        }
        else {
          int v26 = (v19 << 16) & 0x1000000;
        }
        int v27 = (char *)v31 + 2 * v18;
        unsigned __int8 v28 = v15;
        if ((v27[177] & 1) == 0)
        {
          unsigned __int8 v28 = 5;
          switch(v27[176])
          {
            case 1:
              unsigned __int8 v28 = 2;
              break;
            case 2:
              if ((v27[177] & 2) != 0) {
                unsigned __int8 v28 = 4;
              }
              else {
                unsigned __int8 v28 = 2;
              }
              break;
            case 3:
              break;
            case 4:
              unsigned __int8 v28 = v15;
              break;
            default:
              unsigned __int8 v28 = -1;
              break;
          }
        }
        *(_DWORD *)(v3 + 4 * (v18 + 8)) = *(_DWORD *)(v3 + 4 * (v18 + 8)) & 0xE2000000 | v26 | (v28 << 16) | v23 | v24 | v22;
        v9 |= 256 << v18;
        v10 |= ((v17 >> v18) & 1) << (v18 + 8);
        v11 |= (v25 != 0) << (v18 + 8);
      }
      v6 ^= 1 << v18;
    }
    while (v6);
    unint64_t v8 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v11) = 0;
    LOWORD(v10) = 0;
    LOWORD(v9) = 0;
  }
  *(_WORD *)(a2 + 120) = v9;
  *(_WORD *)(a2 + 122) = v10;
  *(_WORD *)(a2 + 124) = v11;
  *(void *)(a2 + 112) = v8 & 0xFFFFFFFF00000000 | (unsigned __int16)(v9 & ~(_WORD)v10) | ((unint64_t)(unsigned __int16)(v9 & v11) << 16);
}

double AGX::ProgramKeyFactoryImpl<AGX::G12::Classes,AGX::G12::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBBF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfig<AGX::G12::Encoders,AGX::G12::Classes,AGX::G12::ObjClasses>::FramebufferCompilerConfig((uint64_t)v6, a1);
  AGX::FramebufferCompilerConfigGen3<AGX::G12::Encoders,AGX::G12::Classes,AGX::G12::ObjClasses>::buildDrawBufferState((uint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G12::Classes,AGX::G12::Encoders>::CreateTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 8) = 5;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F25DBE10;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(void *)(a4 + 200) = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  int v32 = 1;
  __int16 v33 = 0;
  int v34 = 0;
  memset(v35, 0, 96);
  bzero(&v28, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  unsigned __int8 v9 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v10 = *v9;
  if (v10 < 0xF) {
    goto LABEL_13;
  }
  uint64_t v11 = v9[7];
  if (v9[7])
  {
    uint64_t v12 = *(unsigned int *)((char *)a1 + v11);
    int v13 = (unsigned int *)((char *)a1 + v11 + v12);
    unint64_t v14 = *v13;
    if (v14)
    {
      unint64_t v15 = 0;
      int v16 = DWORD2(v30);
      uint64_t v27 = a3;
      unsigned int v17 = (char *)a1 + v11 + v12;
      do
      {
        uint64_t v18 = &v17[4 * v15];
        uint64_t v19 = *((unsigned int *)v18 + 1);
        unsigned int v20 = (char *)v13 + v19 - *(int *)&v18[v19 + 4];
        if (*((unsigned __int16 *)v20 + 2) >= 5u)
        {
          uint64_t v21 = *((unsigned __int16 *)v20 + 4);
          if (v21)
          {
            unsigned int v22 = (char *)v13 + v19 + v21;
            if (*((_WORD *)v22 + 2))
            {
              *((void *)v35 + v15) = AGX::G12::TextureFormatTable::chooseTextureFormatCPP((AGX::G12::TextureFormatTable *)*((unsigned __int16 *)v22 + 2), v8);
              v16 |= 1 << v15;
            }
          }
        }
        if (v15 > 6) {
          break;
        }
        ++v15;
        ++v13;
      }
      while (v15 < v14);
      DWORD2(v30) = v16;
      a3 = v27;
LABEL_13:
      if (v10 <= 0xA)
      {
        char v24 = 1;
        LOBYTE(v33) = 1;
LABEL_21:
        HIBYTE(v33) = v24;
        goto LABEL_22;
      }
    }
  }
  if (v9[5]) {
    char v23 = *((unsigned char *)a1 + v9[5]);
  }
  else {
    char v23 = 1;
  }
  LOBYTE(v33) = v23;
  HIBYTE(v33) = v23;
  if (v10 >= 0xD)
  {
    if (v9[6])
    {
      char v24 = *((unsigned char *)a1 + v9[6]);
      if (v24) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G12::Encoders,AGX::G12::Classes,AGX::G12::ObjClasses>::buildDrawBufferState((uint64_t)&v28);
  long long v25 = v29;
  *(_OWORD *)(a4 + 112) = v28;
  *(_OWORD *)(a4 + 128) = v25;
  *(void *)(a4 + 144) = v30;
  AGX::Impl::TileProgramKey::initCommon(a4, a1);
  *(_DWORD *)(a4 + 100) &= ~0x80u;
  if (a4 + 160 != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 160), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a4 + 184 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 184), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  LOWORD(v28) = 256;
  *(void *)((char *)&v28 + 2) = 0;
  *(_DWORD *)((char *)&v28 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a4, (unsigned __int8 *)&v28);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G12::Classes,AGX::G12::Encoders>::CreateComputeProgramKey@<X0>(AGX *a1@<X1>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 8) = 6;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)a5 = &unk_1F25DBE50;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 64), "");
  *(unsigned char *)(a5 + 88) = 0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  AGX::Impl::ComputeProgramKey::initCommon((AGX *)a5, a1);
  *(int8x8_t *)(a5 + 52) = vand_s8(*(int8x8_t *)(a5 + 52), (int8x8_t)0xFFFFFFFEFFFFFF7FLL);
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a5, a2);
  if (a5 + 96 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a5 + 120 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  __int16 v11 = 256;
  uint64_t v12 = 0;
  int v13 = 0;
  return AGX::Impl::ComputeProgramKey::setDeviceOptions(a5, (unsigned __int8 *)&v11);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G12::Classes,AGX::G12::Encoders>::CreateFragmentProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 8) = 4;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 232) = 0u;
  uint64_t v12 = (char *)(a6 + 232);
  *(void *)a6 = &unk_1F25DBDD0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_OWORD *)(a6 + 120) = 0u;
  *(_OWORD *)(a6 + 136) = 0u;
  *(_OWORD *)(a6 + 152) = 0u;
  *(_OWORD *)(a6 + 168) = 0u;
  *(_OWORD *)(a6 + 184) = 0u;
  *(_OWORD *)(a6 + 200) = 0u;
  *(_OWORD *)(a6 + 209) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 264) = 0u;
  long long v41 = 0u;
  memset(v42, 0, sizeof(v42));
  long long v39 = 0u;
  long long v40 = 0u;
  int v43 = 1;
  __int16 v44 = 0;
  int v45 = 0;
  memset(v46, 0, 96);
  bzero(&v39, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  int v38 = a2;
  unint64_t v14 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  unsigned int v15 = *v14;
  if (v15 >= 0x17)
  {
    uint64_t v16 = v14[11];
    if (!v14[11]) {
      goto LABEL_14;
    }
    uint64_t v17 = *(unsigned int *)((char *)a1 + v16);
    uint64_t v18 = (unsigned int *)((char *)a1 + v16 + v17);
    unint64_t v19 = *v18;
    if (!v19) {
      goto LABEL_14;
    }
    unsigned __int8 v35 = a3;
    uint64_t v36 = a4;
    uint64_t v37 = a5;
    unint64_t v20 = 0;
    int v21 = DWORD2(v41);
    unsigned int v22 = (char *)a1 + v16 + v17;
    do
    {
      char v23 = &v22[4 * v20];
      uint64_t v24 = *((unsigned int *)v23 + 1);
      long long v25 = (char *)v18 + v24 - *(int *)&v23[v24 + 4];
      if (*((unsigned __int16 *)v25 + 2) >= 5u)
      {
        uint64_t v26 = *((unsigned __int16 *)v25 + 4);
        if (v26)
        {
          uint64_t v27 = (char *)v18 + v24 + v26;
          if (*((_WORD *)v27 + 2))
          {
            *((void *)v46 + v20) = AGX::G12::TextureFormatTable::chooseTextureFormatCPP((AGX::G12::TextureFormatTable *)*((unsigned __int16 *)v27 + 2), v13);
            v21 |= 1 << v20;
          }
        }
      }
      if (v20 > 6) {
        break;
      }
      ++v20;
      ++v18;
    }
    while (v20 < v19);
    DWORD2(v41) = v21;
    a4 = v36;
    a5 = v37;
    a3 = v35;
  }
  if (v15 <= 0xC)
  {
    char v29 = 1;
    LOBYTE(v44) = 1;
    a2 = v38;
LABEL_21:
    HIBYTE(v44) = v29;
    goto LABEL_22;
  }
LABEL_14:
  if (v14[6]) {
    char v28 = *((unsigned char *)a1 + v14[6]);
  }
  else {
    char v28 = 1;
  }
  a2 = v38;
  LOBYTE(v44) = v28;
  HIBYTE(v44) = v28;
  if (v15 >= 0xF)
  {
    if (v14[7])
    {
      char v29 = *((unsigned char *)a1 + v14[7]);
      if (v29) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G12::Encoders,AGX::G12::Classes,AGX::G12::ObjClasses>::buildDrawBufferState((uint64_t)&v39);
  long long v30 = v40;
  *(_OWORD *)(a6 + 112) = v39;
  *(_OWORD *)(a6 + 128) = v30;
  *(void *)(a6 + 144) = v41;
  AGX::Impl::FragmentProgramKey::initCommon((AGX *)a6, a1);
  int v31 = *(_DWORD *)(a6 + 104);
  unsigned int v32 = *(_DWORD *)(a6 + 100) & 0xFFFFFF7F;
  *(_DWORD *)(a6 + 40) &= ~0x10u;
  if (a2) {
    int v33 = 256;
  }
  else {
    int v33 = 0;
  }
  *(_DWORD *)(a6 + 100) = v32;
  *(_DWORD *)(a6 + 104) = v31 & 0xFFFFFEFF | v33;
  AGX::Impl::FragmentProgramKey::setSerializedDescriptor((AGX::Impl::FragmentProgramKey *)a6, a3);
  if (v12 != (char *)a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a6 + 256 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a6 + 256), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  LOWORD(v39) = 256;
  *(void *)((char *)&v39 + 2) = 0;
  *(_DWORD *)((char *)&v39 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a6, (unsigned __int8 *)&v39);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G12::Classes,AGX::G12::Encoders>::CreateMeshProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v26 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v27 = *(std::string *)(a2 + 24);
  }
  int v17 = *(unsigned __int8 *)(a2 + 48);
  *(_OWORD *)(a8 + 104) = 0u;
  *(_DWORD *)(a8 + 8) = 10;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_DWORD *)(a8 + 96) = 0;
  *(void *)a8 = &unk_1F25DBD40;
  *(std::string *)(a8 + 152) = v26;
  long long v18 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(void *)(a8 + 192) = *((void *)&v27.__r_.__value_.__l + 2);
  if (a3) {
    int v19 = 128;
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  *(_OWORD *)(a8 + 176) = v18;
  *(unsigned char *)(a8 + 200) = v17;
  *(_DWORD *)(a8 + 56) = v20 | v19 | (16 * v17);
  AGX::Impl::MeshProgramKey::initCommon((AGX *)a8, a1);
  *(_DWORD *)(a8 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a8, a5);
  if (a8 + 104 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 104), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  if (a8 + 128 != a7) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 128), *(char **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5);
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v21;
  __int16 v23 = 256;
  uint64_t v24 = 0;
  int v25 = 0;
  return AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(a8, (unsigned __int8 *)&v23);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G12::Classes,AGX::G12::Encoders>::CreateObjectProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)(a7 + 8) = 9;
  *(_OWORD *)(a7 + 104) = 0u;
  __int16 v11 = (char *)(a7 + 104);
  *(_OWORD *)(a7 + 120) = 0u;
  *(_OWORD *)(a7 + 136) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_DWORD *)(a7 + 96) = 0;
  *(void *)a7 = &unk_1F25DBD88;
  if (a2) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  if (a3) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a7 + 56) = v13 | v12;
  AGX::Impl::ObjectProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a7, a4);
  if (v11 != (char *)a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v11, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a7 + 128 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 128), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  __int16 v15 = 256;
  uint64_t v16 = 0;
  int v17 = 0;
  return AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(a7, (unsigned __int8 *)&v15);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G12::Classes,AGX::G12::Encoders>::CreateVertexProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v21 = *(std::string *)(a2 + 24);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)(a7 + 8) = 3;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 76) = 0u;
  *(void *)a7 = &unk_1F25DBCF8;
  *(std::string *)(a7 + 144) = v20;
  *(std::string *)(a7 + 168) = v21;
  *(unsigned char *)(a7 + 192) = v14;
  *(void *)(a7 + 56) = v14 << 18;
  AGX::Impl::VertexProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a7, a3);
  if (a7 + 96 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a7 + 120 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a6) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a7 + 88) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v15;
  __int16 v17 = 256;
  uint64_t v18 = 0;
  int v19 = 0;
  return AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(a7, (unsigned __int8 *)&v17);
}

void AGX::ProgramKeyFactoryImpl<AGX::G12::Classes,AGX::G12::Encoders>::~ProgramKeyFactoryImpl()
{
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G13::Encoders,AGX::G13::Classes,AGX::G13::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = (char *)a2 - v5;
    unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v5);
    if (v7 < 5) {
      goto LABEL_71;
    }
    uint64_t v8 = -v5;
    uint64_t v9 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2))
    {
      unsigned int v10 = (char *)a2 + v9;
      uint64_t v11 = *(unsigned int *)((char *)a2 + v9);
      unint64_t v12 = *(unsigned int *)((char *)a2 + v9 + v11);
      if (v12)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = v9 + v11;
        while (1)
        {
          uint64_t v16 = *(unsigned int *)((char *)a2 + v15 + 4);
          __int16 v17 = (char *)a2 + v15 + v16;
          uint64_t v18 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v18 + 2) >= 5u)
          {
            uint64_t v19 = *((unsigned __int16 *)v18 + 4);
            if (v19)
            {
              std::string v20 = (char *)a2 + v15 + v16 + v19;
              if (*((_WORD *)v20 + 2)) {
                break;
              }
            }
          }
LABEL_46:
          if (v14 <= 6)
          {
            ++v14;
            v13 += 2;
            v15 += 4;
            if (v14 < v12) {
              continue;
            }
          }
          uint64_t v47 = *a2;
          uint64_t v8 = -v47;
          unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v47);
          goto LABEL_66;
        }
        *(void *)(a1 + 8 * v14 + 96) = AGX::G13::TextureFormatTable::chooseTextureFormatCPP((AGX::G13::TextureFormatTable *)*((unsigned __int16 *)v20 + 2), v4);
        unsigned int v21 = 1 << v14;
        *(_DWORD *)(a1 + 40) |= 1 << v14;
        uint64_t v22 = v16 - *((int *)v17 + 1);
        unsigned int v23 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 4);
        if (v23 < 0x19)
        {
          int v25 = 0;
          __int32 v24 = 0;
          if (v23 < 0xF)
          {
LABEL_34:
            int v25 = 0;
            int v34 = 1 << v14;
LABEL_35:
            *(_DWORD *)(a1 + 52) |= v34;
            v36.i32[0] = v24;
            v36.i32[1] = v25 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v36, (int32x2_t)0x100000001)));
            if (v25 == 4) {
              int v37 = 1 << v14;
            }
            else {
              int v37 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v37;
            int v38 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
            if (*((unsigned __int16 *)v38 + 2) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 5)) != 0)
            {
              char v40 = 0;
              int v41 = *((unsigned __int8 *)a2 + v15 + v16 + v39 + 4);
              unsigned __int8 v42 = (char *)(a1 + v13 + 160);
              char v43 = 2;
              char v44 = 1;
              switch(v41)
              {
                case 0:
                case 1:
                  char v43 = 1;
                  char v40 = v41;
                  goto LABEL_52;
                case 3:
                  goto LABEL_57;
                case 4:
                  char v45 = 2;
                  goto LABEL_43;
                case 5:
                  goto LABEL_51;
                case 6:
                  char v40 = 1;
LABEL_51:
                  char v43 = 4;
                  goto LABEL_52;
                case 7:
                  char *v42 = 3;
                  *(unsigned char *)(a1 + v13 + 161) = 0;
LABEL_55:
                  int v46 = 3;
                  break;
                case 8:
                  char v44 = 3;
LABEL_57:
                  char *v42 = 2;
                  *(unsigned char *)(a1 + v13 + 161) = v44;
LABEL_58:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_44;
                default:
LABEL_52:
                  char *v42 = v43;
                  *(unsigned char *)(a1 + v13 + 161) = v40;
                  int v46 = 1;
                  switch(v41)
                  {
                    case 0:
                      goto LABEL_45;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_58;
                    case 7:
                      goto LABEL_55;
                    default:
                      goto LABEL_44;
                  }
                  break;
              }
            }
            else
            {
              char v45 = 0;
              unsigned __int8 v42 = (char *)(a1 + 2 * v14 + 160);
LABEL_43:
              char *v42 = 2;
              *(unsigned char *)(a1 + v13 + 161) = v45;
LABEL_44:
              int v46 = 2;
            }
LABEL_45:
            *(_WORD *)(a1 + 76) |= v46 << v13;
            unint64_t v12 = *(unsigned int *)&v10[v11];
            goto LABEL_46;
          }
        }
        else
        {
          if (*(_WORD *)((char *)a2 + v15 + v22 + 28)) {
            __int32 v24 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 28) + 4);
          }
          else {
            __int32 v24 = 0;
          }
          if (v23 >= 0x1B && *(_WORD *)((char *)a2 + v15 + v22 + 30)) {
            int v25 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 30) + 4);
          }
          else {
            int v25 = 0;
          }
        }
        uint64_t v26 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 18);
        if (v26 && *(_WORD *)((char *)a2 + v15 + v16 + v26 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v25 & 0xFE) == 2) {
            int v27 = 1 << v14;
          }
          else {
            int v27 = 0;
          }
          *(_DWORD *)(a1 + 68) |= v27;
          char v28 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v28 + 2) >= 0x11u && (uint64_t v29 = *((unsigned __int16 *)v28 + 10)) != 0)
          {
            char v30 = 0;
            int v31 = *((unsigned __int8 *)a2 + v15 + v16 + v29 + 4);
            char v32 = 2;
            switch(v31)
            {
              case 0:
              case 1:
                char v32 = 1;
                char v30 = v31;
                break;
              case 3:
                char v30 = 1;
                break;
              case 4:
                char v30 = 2;
                break;
              case 5:
                goto LABEL_61;
              case 6:
                char v30 = 1;
LABEL_61:
                char v32 = 4;
                break;
              case 7:
                char v30 = 0;
                char v32 = 3;
                break;
              case 8:
                char v30 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            char v30 = 0;
            char v32 = 2;
          }
          uint64_t v33 = a1 + v13;
          *(unsigned char *)(v33 + 176) = v32;
          *(unsigned char *)(v33 + 177) = v30;
        }
        int v34 = 0;
        if (v24 == 2) {
          int v35 = 1 << v14;
        }
        else {
          int v35 = 0;
        }
        *(_DWORD *)(a1 + 56) |= v35;
        if (v25) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
LABEL_66:
    if (v7 >= 7
      && *(_WORD *)((char *)a2 + v8 + 6)
      && (uint64_t v48 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v8 + 6)), (v48 & 0xFFFFFFFE) != 0))
    {
      if (v48 > 0x7FF) {
        LODWORD(v48) = 2048;
      }
    }
    else
    {
LABEL_71:
      LODWORD(v48) = 1;
    }
    *(_DWORD *)(a1 + 80) = v48;
    long long v49 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v50 = *v49;
    if (v50 < 0xB)
    {
      char v52 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v50 < 9)
      {
LABEL_82:
        *(unsigned char *)(a1 + 85) = v52;
        return a1;
      }
    }
    else
    {
      if (v49[5]) {
        char v51 = *((unsigned char *)a2 + v49[5]);
      }
      else {
        char v51 = 1;
      }
      *(unsigned char *)(a1 + 84) = v51;
    }
    uint64_t v53 = v49[4];
    if (v53) {
      char v52 = *((unsigned char *)a2 + v53);
    }
    else {
      char v52 = 1;
    }
    goto LABEL_82;
  }
  return a1;
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G13::Encoders,AGX::G13::Classes,AGX::G13::ObjClasses>::partitionSizeFromFormatAndCompCount(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      return a2;
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 22:
      a2 = (2 * a2);
      break;
    case 10:
    case 11:
    case 17:
      a2 = (4 * a2);
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      a2 = 4;
      break;
    default:
      a2 = 0;
      break;
  }
  return a2;
}

uint64_t AGX::FramebufferCompilerConfigGen3<AGX::G13::Encoders,AGX::G13::Classes,AGX::G13::ObjClasses>::buildDrawBufferState(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(result + 40);
  unsigned int v4 = v3;
  do
  {
    unsigned int v5 = v4;
    if (!v4) {
      break;
    }
    unsigned int v6 = __clz(__rbit32(v4));
    uint64_t v7 = *(void *)(v1 + 8 * v6 + 96);
    if (*(_DWORD *)(v7 + 32) == 18) {
      int v8 = 9;
    }
    else {
      int v8 = *(_DWORD *)(v7 + 32);
    }
    double result = AGX::FramebufferCompilerConfig<AGX::G13::Encoders,AGX::G13::Classes,AGX::G13::ObjClasses>::partitionSizeFromFormatAndCompCount(v8, *(unsigned int *)(v7 + 28));
    v2 += result;
    int v9 = 1 << v6;
    if (v2 > 0x40) {
      int v9 = 0;
    }
    unsigned int v4 = v9 ^ v5;
  }
  while (v2 < 0x41);
  if (v3)
  {
    LODWORD(v10) = 0;
    int v11 = 0;
    char v12 = 0;
    int v13 = 0;
    double result = 4293922528;
    unsigned int v38 = v5;
    uint64_t v37 = v1;
    do
    {
      uint64_t v14 = __clz(__rbit32(v3));
      uint64_t v15 = *(unsigned int **)(v1 + 8 * v14 + 96);
      uint64_t v16 = v15[7];
      if (v15[8] == 18 && v5 == 0) {
        int v18 = 9;
      }
      else {
        int v18 = v15[8];
      }
      int v19 = 1 << v14;
      if (v18 == 18) {
        int v20 = 1 << v14;
      }
      else {
        int v20 = 0;
      }
      if (v18 == 3)
      {
        int v21 = (v15[21] != 0) << 8;
        int v22 = 1;
      }
      else
      {
        int v23 = v13;
        int v24 = AGX::FramebufferCompilerConfig<AGX::G13::Encoders,AGX::G13::Classes,AGX::G13::ObjClasses>::partitionSizeFromFormatAndCompCount(v18, v16);
        int v13 = v23;
        unsigned int v5 = v38;
        int v19 = 1 << v14;
        uint64_t v1 = v37;
        LODWORD(v16) = v24;
        double result = 4293922528;
        int v21 = 0;
        int v22 = 1;
        switch(v18)
        {
          case 2:
          case 4:
          case 5:
            break;
          case 6:
          case 7:
          case 8:
          case 9:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 22:
            int v21 = 0;
            int v22 = 2;
            break;
          case 10:
          case 11:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
            int v21 = 0;
            int v22 = 4;
            break;
          default:
            int v21 = 0;
            int v22 = 0;
            break;
        }
      }
      v13 |= v20;
      int v25 = v22 - 1;
      int v26 = -v22;
      int v27 = (v25 + v10) & v26;
      v12 |= (v27 + v16) > 0x40;
      int v28 = (v25 + v11) & v26;
      unsigned __int8 v29 = v28 + 64;
      int v30 = v28 + v16;
      if (v12) {
        int v11 = v30;
      }
      else {
        unsigned __int8 v29 = v27;
      }
      unsigned int v31 = v21 & 0xFFF00FFF | *(_DWORD *)(v1 + 4 * v14) & 0xFFF00EE0 | v18 & 0x1F | (v29 << 12);
      *(_DWORD *)(v1 + 4 * v14) = v31;
      unsigned int v32 = v31 & 0xFFFFF1FF | ((v15[19] & 7) << 9);
      *(_DWORD *)(v1 + 4 * v14) = v32;
      if (v12) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = (v27 + v16);
      }
      *(_DWORD *)(v1 + 4 * v14) = v32 & 0xFFFFFF1F | (32 * (v15[7] & 7));
      v3 ^= v19;
    }
    while (v3);
    unint64_t v33 = 64;
    if (((v10 + 7) & 0x1FFFFFFC0) == 0) {
      unint64_t v33 = (v10 + 7) & 0x1FFFFFFF8;
    }
    if (v33 <= 8) {
      LODWORD(v33) = 8;
    }
    int v34 = v33 << 16;
    if (v12)
    {
      int v34 = 0x400000;
      int v35 = 0x2000000;
    }
    else
    {
      int v35 = 0;
    }
    int v36 = *(unsigned __int8 *)(v1 + 40) | v35;
  }
  else
  {
    int v11 = 0;
    int v13 = 0;
    int v36 = 0;
    int v34 = 0x80000;
  }
  *(_DWORD *)(v1 + 32) = v36 | ((*(unsigned char *)(v1 + 84) & 0xF) << 8) | *(_DWORD *)(v1 + 32) & 0xFC000000 | v34 | ((*(unsigned char *)(v1 + 85) & 0xF) << 12);
  *(_DWORD *)(v1 + 88) = v11;
  *(_DWORD *)(v1 + 44) = v13;
  return result;
}

uint64_t AGX::PBEStateEncoderGen7<kAGXRevG13>::StateFields::getDimensionality(int a1, char a2, unsigned int a3)
{
  if (a3 < 2) {
    unsigned __int8 v3 = 2;
  }
  else {
    unsigned __int8 v3 = 3;
  }
  if (a2)
  {
    if ((a2 & 2) != 0) {
      unsigned __int8 v4 = 8;
    }
    else {
      unsigned __int8 v4 = v3;
    }
    BOOL v5 = a1 == 4;
LABEL_11:
    if (v5) {
      return v3;
    }
  }
  else
  {
    unsigned __int8 v4 = 5;
    switch(a1)
    {
      case 1:
        unsigned __int8 v4 = 2;
        break;
      case 2:
        BOOL v5 = (a2 & 2) == 0;
        unsigned __int8 v4 = 4;
        unsigned __int8 v3 = 2;
        goto LABEL_11;
      case 3:
        return v4;
      case 4:
        unsigned __int8 v4 = v3;
        break;
      default:
        unsigned __int8 v4 = -1;
        break;
    }
  }
  return v4;
}

uint64_t AGCTargetImpl<AGX::G13::Classes,AGX::G13::Encoders>::maxMSAASampleCount()
{
  return 4;
}

uint64_t AGCTargetImpl<AGX::G13::Classes,AGX::G13::Encoders>::requiresRayTracingEmulation()
{
  return 1;
}

void *AGCTargetImpl<AGX::G13::Classes,AGX::G13::Encoders>::GetLegalizationPasses@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v9 = "air-degenerate-vertex-amplification-emulation";
  char v10 = 0;
  int v11 = "air-raytracing-emulation,indirect-acceleration-structures";
  char v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int v13 = "mtl-fetch-all-unaligned";
  char v14 = 1;
  uint64_t v15 = "air-bfloat-emulation";
  char v16 = 1;
  double result = malloc_type_malloc(0x20uLL, 0x10040436913F5uLL);
  uint64_t v6 = 0;
  int v7 = 0;
  *a2 = 0;
  do
  {
    if (LOBYTE((&v9)[v6 + 1]))
    {
      int v8 = (&v9)[v6];
      *a2 = v7 + 1;
      result[v7++] = v8;
    }
    v6 += 2;
  }
  while (v6 != 8);
  *a3 = result;
  return result;
}

void AGCTargetImpl<AGX::G13::Classes,AGX::G13::Encoders>::CreateTGSizeToTempTable(uint64_t a1, _DWORD *a2)
{
  *a2 = 32;
  operator new[]();
}

void AGCTargetImpl<AGX::G13::Classes,AGX::G13::Encoders>::CreateProgramKeyFactory()
{
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G13::Classes,AGX::G13::Encoders>::CreateBVHBuilderProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBCB8;
  *(_DWORD *)(a2 + 40) = 0;
  return AGX::BVHBuilderProgramKey::initializeWithDescriptor(a2, a1);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G13::Classes,AGX::G13::Encoders>::CreateEndOfTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_1F25DBC38;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 118) = 0;
  AGX::FramebufferCompilerConfig<AGX::G13::Encoders,AGX::G13::Classes,AGX::G13::ObjClasses>::FramebufferCompilerConfig((uint64_t)v31, a1);
  uint64_t result = AGX::FramebufferCompilerConfigGen3<AGX::G13::Encoders,AGX::G13::Classes,AGX::G13::ObjClasses>::buildDrawBufferState((uint64_t)v31);
  v29[0] = v31[0];
  v29[1] = v31[1];
  unsigned int v5 = v32;
  uint64_t v30 = v32;
  unsigned int v6 = v39;
  unsigned int v7 = v33;
  int v24 = v34;
  unint64_t v8 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v32 >> 12) << 32) | ((unint64_t)BYTE2(v32) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v8;
  if (v7)
  {
    int v9 = 0;
    int v28 = 0;
    int v10 = 0;
    unsigned int v20 = (unsigned __int16)v5 >> 12;
    int v23 = v38;
    unsigned int v22 = HIWORD(v5) & 0x1FF;
    int v21 = v37 & ~v36 | v35;
    unsigned int v19 = v36 & ~v37 | v35;
    do
    {
      uint64_t v11 = __clz(__rbit32(v7));
      unsigned int v12 = *((_DWORD *)v29 + v11);
      unsigned int v13 = *(_DWORD *)(v3 + 4 * v11) & 0xE3000000;
      uint64_t result = AGX::PBEStateEncoderGen7<kAGXRevG13>::StateFields::getDimensionality(v40[2 * v11], v40[2 * v11 + 1], v6);
      *(_DWORD *)(v3 + 4 * v11) = v13 & 0xE3FFE0FF | (result << 16) & 0xE3FFFFFF | ((v12 & 0x1F) << 8) | (v12 >> 5 << 26) | ((v12 >> 12) / v22);
      v9 |= 1 << v11;
      unsigned int v27 = (v12 >> 12) / v22;
      v28 |= (1 << v11) & v21;
      int v14 = v23 & (1 << v11);
      v10 |= v14;
      if ((v24 & (1 << v11)) != 0)
      {
        int v26 = v10;
        int v15 = (v12 & 0x1F) << 8;
        int v25 = (v12 << 21) & 0x1C000000;
        unsigned int v16 = v11 + 8;
        int v17 = (v12 << 16) & 0x1000000;
        if (v20 <= 1) {
          int v17 = 0;
        }
        unsigned int v18 = *(_DWORD *)(v3 + 4 * (v11 + 8)) & 0xE2000000 | v17;
        uint64_t result = AGX::PBEStateEncoderGen7<kAGXRevG13>::StateFields::getDimensionality(v40[2 * v11 + 16], v40[2 * v11 + 17], v6);
        *(_DWORD *)(v3 + 4 * v16) = v18 | (result << 16) | v15 | v25 | v27;
        v9 |= 256 << v11;
        v28 |= ((v19 >> v11) & 1) << v16;
        int v10 = ((v14 != 0) << v16) | v26;
      }
      v7 ^= 1 << v11;
    }
    while (v7);
    unint64_t v8 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v10) = 0;
    LOWORD(v28) = 0;
    LOWORD(v9) = 0;
  }
  *(_WORD *)(a2 + 120) = v9;
  *(_WORD *)(a2 + 122) = v28;
  *(_WORD *)(a2 + 124) = v10;
  *(void *)(a2 + 112) = v8 & 0xFFFFFFFF00000000 | (unsigned __int16)(v9 & ~(_WORD)v28) | ((unint64_t)(unsigned __int16)(v9 & v10) << 16);
  return result;
}

double AGX::ProgramKeyFactoryImpl<AGX::G13::Classes,AGX::G13::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBBF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfig<AGX::G13::Encoders,AGX::G13::Classes,AGX::G13::ObjClasses>::FramebufferCompilerConfig((uint64_t)v6, a1);
  AGX::FramebufferCompilerConfigGen3<AGX::G13::Encoders,AGX::G13::Classes,AGX::G13::ObjClasses>::buildDrawBufferState((uint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G13::Classes,AGX::G13::Encoders>::CreateTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 8) = 5;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F25DBE10;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(void *)(a4 + 200) = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  int v32 = 1;
  __int16 v33 = 0;
  int v34 = 0;
  memset(v35, 0, 96);
  bzero(&v28, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  unsigned __int8 v9 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v10 = *v9;
  if (v10 < 0xF) {
    goto LABEL_13;
  }
  uint64_t v11 = v9[7];
  if (v9[7])
  {
    uint64_t v12 = *(unsigned int *)((char *)a1 + v11);
    unsigned int v13 = (unsigned int *)((char *)a1 + v11 + v12);
    unint64_t v14 = *v13;
    if (v14)
    {
      unint64_t v15 = 0;
      int v16 = DWORD2(v30);
      uint64_t v27 = a3;
      int v17 = (char *)a1 + v11 + v12;
      do
      {
        unsigned int v18 = &v17[4 * v15];
        uint64_t v19 = *((unsigned int *)v18 + 1);
        unsigned int v20 = (char *)v13 + v19 - *(int *)&v18[v19 + 4];
        if (*((unsigned __int16 *)v20 + 2) >= 5u)
        {
          uint64_t v21 = *((unsigned __int16 *)v20 + 4);
          if (v21)
          {
            unsigned int v22 = (char *)v13 + v19 + v21;
            if (*((_WORD *)v22 + 2))
            {
              *((void *)v35 + v15) = AGX::G13::TextureFormatTable::chooseTextureFormatCPP((AGX::G13::TextureFormatTable *)*((unsigned __int16 *)v22 + 2), v8);
              v16 |= 1 << v15;
            }
          }
        }
        if (v15 > 6) {
          break;
        }
        ++v15;
        ++v13;
      }
      while (v15 < v14);
      DWORD2(v30) = v16;
      a3 = v27;
LABEL_13:
      if (v10 <= 0xA)
      {
        char v24 = 1;
        LOBYTE(v33) = 1;
LABEL_21:
        HIBYTE(v33) = v24;
        goto LABEL_22;
      }
    }
  }
  if (v9[5]) {
    char v23 = *((unsigned char *)a1 + v9[5]);
  }
  else {
    char v23 = 1;
  }
  LOBYTE(v33) = v23;
  HIBYTE(v33) = v23;
  if (v10 >= 0xD)
  {
    if (v9[6])
    {
      char v24 = *((unsigned char *)a1 + v9[6]);
      if (v24) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G13::Encoders,AGX::G13::Classes,AGX::G13::ObjClasses>::buildDrawBufferState((uint64_t)&v28);
  long long v25 = v29;
  *(_OWORD *)(a4 + 112) = v28;
  *(_OWORD *)(a4 + 128) = v25;
  *(void *)(a4 + 144) = v30;
  AGX::Impl::TileProgramKey::initCommon(a4, a1);
  *(_DWORD *)(a4 + 100) &= ~0x80u;
  if (a4 + 160 != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 160), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a4 + 184 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 184), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  LOWORD(v28) = 256;
  *(void *)((char *)&v28 + 2) = 0;
  *(_DWORD *)((char *)&v28 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a4, (unsigned __int8 *)&v28);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G13::Classes,AGX::G13::Encoders>::CreateComputeProgramKey@<X0>(AGX *a1@<X1>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 8) = 6;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)a5 = &unk_1F25DBE50;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 64), "");
  *(unsigned char *)(a5 + 88) = 0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  AGX::Impl::ComputeProgramKey::initCommon((AGX *)a5, a1);
  *(int8x8_t *)(a5 + 52) = vand_s8(*(int8x8_t *)(a5 + 52), (int8x8_t)0xFFFFFFFEFFFFFF7FLL);
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a5, a2);
  if (a5 + 96 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a5 + 120 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  __int16 v11 = 256;
  uint64_t v12 = 0;
  int v13 = 0;
  return AGX::Impl::ComputeProgramKey::setDeviceOptions(a5, (unsigned __int8 *)&v11);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G13::Classes,AGX::G13::Encoders>::CreateFragmentProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 8) = 4;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 232) = 0u;
  uint64_t v12 = (char *)(a6 + 232);
  *(void *)a6 = &unk_1F25DBDD0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_OWORD *)(a6 + 120) = 0u;
  *(_OWORD *)(a6 + 136) = 0u;
  *(_OWORD *)(a6 + 152) = 0u;
  *(_OWORD *)(a6 + 168) = 0u;
  *(_OWORD *)(a6 + 184) = 0u;
  *(_OWORD *)(a6 + 200) = 0u;
  *(_OWORD *)(a6 + 209) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 264) = 0u;
  long long v41 = 0u;
  memset(v42, 0, sizeof(v42));
  long long v39 = 0u;
  long long v40 = 0u;
  int v43 = 1;
  __int16 v44 = 0;
  int v45 = 0;
  memset(v46, 0, 96);
  bzero(&v39, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  int v38 = a2;
  unint64_t v14 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  unsigned int v15 = *v14;
  if (v15 >= 0x17)
  {
    uint64_t v16 = v14[11];
    if (!v14[11]) {
      goto LABEL_14;
    }
    uint64_t v17 = *(unsigned int *)((char *)a1 + v16);
    unsigned int v18 = (unsigned int *)((char *)a1 + v16 + v17);
    unint64_t v19 = *v18;
    if (!v19) {
      goto LABEL_14;
    }
    unsigned __int8 v35 = a3;
    uint64_t v36 = a4;
    uint64_t v37 = a5;
    unint64_t v20 = 0;
    int v21 = DWORD2(v41);
    unsigned int v22 = (char *)a1 + v16 + v17;
    do
    {
      char v23 = &v22[4 * v20];
      uint64_t v24 = *((unsigned int *)v23 + 1);
      long long v25 = (char *)v18 + v24 - *(int *)&v23[v24 + 4];
      if (*((unsigned __int16 *)v25 + 2) >= 5u)
      {
        uint64_t v26 = *((unsigned __int16 *)v25 + 4);
        if (v26)
        {
          uint64_t v27 = (char *)v18 + v24 + v26;
          if (*((_WORD *)v27 + 2))
          {
            *((void *)v46 + v20) = AGX::G13::TextureFormatTable::chooseTextureFormatCPP((AGX::G13::TextureFormatTable *)*((unsigned __int16 *)v27 + 2), v13);
            v21 |= 1 << v20;
          }
        }
      }
      if (v20 > 6) {
        break;
      }
      ++v20;
      ++v18;
    }
    while (v20 < v19);
    DWORD2(v41) = v21;
    a4 = v36;
    a5 = v37;
    a3 = v35;
  }
  if (v15 <= 0xC)
  {
    char v29 = 1;
    LOBYTE(v44) = 1;
    a2 = v38;
LABEL_21:
    HIBYTE(v44) = v29;
    goto LABEL_22;
  }
LABEL_14:
  if (v14[6]) {
    char v28 = *((unsigned char *)a1 + v14[6]);
  }
  else {
    char v28 = 1;
  }
  a2 = v38;
  LOBYTE(v44) = v28;
  HIBYTE(v44) = v28;
  if (v15 >= 0xF)
  {
    if (v14[7])
    {
      char v29 = *((unsigned char *)a1 + v14[7]);
      if (v29) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G13::Encoders,AGX::G13::Classes,AGX::G13::ObjClasses>::buildDrawBufferState((uint64_t)&v39);
  long long v30 = v40;
  *(_OWORD *)(a6 + 112) = v39;
  *(_OWORD *)(a6 + 128) = v30;
  *(void *)(a6 + 144) = v41;
  AGX::Impl::FragmentProgramKey::initCommon((AGX *)a6, a1);
  int v31 = *(_DWORD *)(a6 + 104);
  unsigned int v32 = *(_DWORD *)(a6 + 100) & 0xFFFFFF7F;
  *(_DWORD *)(a6 + 40) &= ~0x10u;
  if (a2) {
    int v33 = 256;
  }
  else {
    int v33 = 0;
  }
  *(_DWORD *)(a6 + 100) = v32;
  *(_DWORD *)(a6 + 104) = v31 & 0xFFFFFEFF | v33;
  AGX::Impl::FragmentProgramKey::setSerializedDescriptor((AGX::Impl::FragmentProgramKey *)a6, a3);
  if (v12 != (char *)a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a6 + 256 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a6 + 256), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  LOWORD(v39) = 256;
  *(void *)((char *)&v39 + 2) = 0;
  *(_DWORD *)((char *)&v39 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a6, (unsigned __int8 *)&v39);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G13::Classes,AGX::G13::Encoders>::CreateMeshProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v26 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v27 = *(std::string *)(a2 + 24);
  }
  int v17 = *(unsigned __int8 *)(a2 + 48);
  *(_OWORD *)(a8 + 104) = 0u;
  *(_DWORD *)(a8 + 8) = 10;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_DWORD *)(a8 + 96) = 0;
  *(void *)a8 = &unk_1F25DBD40;
  *(std::string *)(a8 + 152) = v26;
  long long v18 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(void *)(a8 + 192) = *((void *)&v27.__r_.__value_.__l + 2);
  if (a3) {
    int v19 = 128;
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  *(_OWORD *)(a8 + 176) = v18;
  *(unsigned char *)(a8 + 200) = v17;
  *(_DWORD *)(a8 + 56) = v20 | v19 | (16 * v17);
  AGX::Impl::MeshProgramKey::initCommon((AGX *)a8, a1);
  *(_DWORD *)(a8 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a8, a5);
  if (a8 + 104 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 104), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  if (a8 + 128 != a7) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 128), *(char **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5);
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v21;
  __int16 v23 = 256;
  uint64_t v24 = 0;
  int v25 = 0;
  return AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(a8, (unsigned __int8 *)&v23);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G13::Classes,AGX::G13::Encoders>::CreateObjectProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)(a7 + 8) = 9;
  *(_OWORD *)(a7 + 104) = 0u;
  __int16 v11 = (char *)(a7 + 104);
  *(_OWORD *)(a7 + 120) = 0u;
  *(_OWORD *)(a7 + 136) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_DWORD *)(a7 + 96) = 0;
  *(void *)a7 = &unk_1F25DBD88;
  if (a2) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  if (a3) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a7 + 56) = v13 | v12;
  AGX::Impl::ObjectProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a7, a4);
  if (v11 != (char *)a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v11, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a7 + 128 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 128), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  __int16 v15 = 256;
  uint64_t v16 = 0;
  int v17 = 0;
  return AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(a7, (unsigned __int8 *)&v15);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G13::Classes,AGX::G13::Encoders>::CreateVertexProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v21 = *(std::string *)(a2 + 24);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)(a7 + 8) = 3;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 76) = 0u;
  *(void *)a7 = &unk_1F25DBCF8;
  *(std::string *)(a7 + 144) = v20;
  *(std::string *)(a7 + 168) = v21;
  *(unsigned char *)(a7 + 192) = v14;
  *(void *)(a7 + 56) = v14 << 18;
  AGX::Impl::VertexProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a7, a3);
  if (a7 + 96 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a7 + 120 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a6) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a7 + 88) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v15;
  __int16 v17 = 256;
  uint64_t v18 = 0;
  int v19 = 0;
  return AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(a7, (unsigned __int8 *)&v17);
}

void AGX::ProgramKeyFactoryImpl<AGX::G13::Classes,AGX::G13::Encoders>::~ProgramKeyFactoryImpl()
{
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G14::Encoders,AGX::G14::Classes,AGX::G14::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = (char *)a2 - v5;
    unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v5);
    if (v7 < 5) {
      goto LABEL_71;
    }
    uint64_t v8 = -v5;
    uint64_t v9 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2))
    {
      unsigned int v10 = (char *)a2 + v9;
      uint64_t v11 = *(unsigned int *)((char *)a2 + v9);
      unint64_t v12 = *(unsigned int *)((char *)a2 + v9 + v11);
      if (v12)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = v9 + v11;
        while (1)
        {
          uint64_t v16 = *(unsigned int *)((char *)a2 + v15 + 4);
          __int16 v17 = (char *)a2 + v15 + v16;
          uint64_t v18 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v18 + 2) >= 5u)
          {
            uint64_t v19 = *((unsigned __int16 *)v18 + 4);
            if (v19)
            {
              std::string v20 = (char *)a2 + v15 + v16 + v19;
              if (*((_WORD *)v20 + 2)) {
                break;
              }
            }
          }
LABEL_46:
          if (v14 <= 6)
          {
            ++v14;
            v13 += 2;
            v15 += 4;
            if (v14 < v12) {
              continue;
            }
          }
          uint64_t v47 = *a2;
          uint64_t v8 = -v47;
          unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v47);
          goto LABEL_66;
        }
        *(void *)(a1 + 8 * v14 + 96) = AGX::G14::TextureFormatTable::chooseTextureFormatCPP((AGX::G14::TextureFormatTable *)*((unsigned __int16 *)v20 + 2), v4);
        unsigned int v21 = 1 << v14;
        *(_DWORD *)(a1 + 40) |= 1 << v14;
        uint64_t v22 = v16 - *((int *)v17 + 1);
        unsigned int v23 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 4);
        if (v23 < 0x19)
        {
          int v25 = 0;
          __int32 v24 = 0;
          if (v23 < 0xF)
          {
LABEL_34:
            int v25 = 0;
            int v34 = 1 << v14;
LABEL_35:
            *(_DWORD *)(a1 + 52) |= v34;
            v36.i32[0] = v24;
            v36.i32[1] = v25 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v36, (int32x2_t)0x100000001)));
            if (v25 == 4) {
              int v37 = 1 << v14;
            }
            else {
              int v37 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v37;
            int v38 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
            if (*((unsigned __int16 *)v38 + 2) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 5)) != 0)
            {
              char v40 = 0;
              int v41 = *((unsigned __int8 *)a2 + v15 + v16 + v39 + 4);
              unsigned __int8 v42 = (char *)(a1 + v13 + 160);
              char v43 = 2;
              char v44 = 1;
              switch(v41)
              {
                case 0:
                case 1:
                  char v43 = 1;
                  char v40 = v41;
                  goto LABEL_52;
                case 3:
                  goto LABEL_57;
                case 4:
                  char v45 = 2;
                  goto LABEL_43;
                case 5:
                  goto LABEL_51;
                case 6:
                  char v40 = 1;
LABEL_51:
                  char v43 = 4;
                  goto LABEL_52;
                case 7:
                  char *v42 = 3;
                  *(unsigned char *)(a1 + v13 + 161) = 0;
LABEL_55:
                  int v46 = 3;
                  break;
                case 8:
                  char v44 = 3;
LABEL_57:
                  char *v42 = 2;
                  *(unsigned char *)(a1 + v13 + 161) = v44;
LABEL_58:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_44;
                default:
LABEL_52:
                  char *v42 = v43;
                  *(unsigned char *)(a1 + v13 + 161) = v40;
                  int v46 = 1;
                  switch(v41)
                  {
                    case 0:
                      goto LABEL_45;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_58;
                    case 7:
                      goto LABEL_55;
                    default:
                      goto LABEL_44;
                  }
                  break;
              }
            }
            else
            {
              char v45 = 0;
              unsigned __int8 v42 = (char *)(a1 + 2 * v14 + 160);
LABEL_43:
              char *v42 = 2;
              *(unsigned char *)(a1 + v13 + 161) = v45;
LABEL_44:
              int v46 = 2;
            }
LABEL_45:
            *(_WORD *)(a1 + 76) |= v46 << v13;
            unint64_t v12 = *(unsigned int *)&v10[v11];
            goto LABEL_46;
          }
        }
        else
        {
          if (*(_WORD *)((char *)a2 + v15 + v22 + 28)) {
            __int32 v24 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 28) + 4);
          }
          else {
            __int32 v24 = 0;
          }
          if (v23 >= 0x1B && *(_WORD *)((char *)a2 + v15 + v22 + 30)) {
            int v25 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 30) + 4);
          }
          else {
            int v25 = 0;
          }
        }
        uint64_t v26 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 18);
        if (v26 && *(_WORD *)((char *)a2 + v15 + v16 + v26 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v25 & 0xFE) == 2) {
            int v27 = 1 << v14;
          }
          else {
            int v27 = 0;
          }
          *(_DWORD *)(a1 + 68) |= v27;
          char v28 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v28 + 2) >= 0x11u && (uint64_t v29 = *((unsigned __int16 *)v28 + 10)) != 0)
          {
            char v30 = 0;
            int v31 = *((unsigned __int8 *)a2 + v15 + v16 + v29 + 4);
            char v32 = 2;
            switch(v31)
            {
              case 0:
              case 1:
                char v32 = 1;
                char v30 = v31;
                break;
              case 3:
                char v30 = 1;
                break;
              case 4:
                char v30 = 2;
                break;
              case 5:
                goto LABEL_61;
              case 6:
                char v30 = 1;
LABEL_61:
                char v32 = 4;
                break;
              case 7:
                char v30 = 0;
                char v32 = 3;
                break;
              case 8:
                char v30 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            char v30 = 0;
            char v32 = 2;
          }
          uint64_t v33 = a1 + v13;
          *(unsigned char *)(v33 + 176) = v32;
          *(unsigned char *)(v33 + 177) = v30;
        }
        int v34 = 0;
        if (v24 == 2) {
          int v35 = 1 << v14;
        }
        else {
          int v35 = 0;
        }
        *(_DWORD *)(a1 + 56) |= v35;
        if (v25) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
LABEL_66:
    if (v7 >= 7
      && *(_WORD *)((char *)a2 + v8 + 6)
      && (uint64_t v48 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v8 + 6)), (v48 & 0xFFFFFFFE) != 0))
    {
      if (v48 > 0x7FF) {
        LODWORD(v48) = 2048;
      }
    }
    else
    {
LABEL_71:
      LODWORD(v48) = 1;
    }
    *(_DWORD *)(a1 + 80) = v48;
    long long v49 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v50 = *v49;
    if (v50 < 0xB)
    {
      char v52 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v50 < 9)
      {
LABEL_82:
        *(unsigned char *)(a1 + 85) = v52;
        return a1;
      }
    }
    else
    {
      if (v49[5]) {
        char v51 = *((unsigned char *)a2 + v49[5]);
      }
      else {
        char v51 = 1;
      }
      *(unsigned char *)(a1 + 84) = v51;
    }
    uint64_t v53 = v49[4];
    if (v53) {
      char v52 = *((unsigned char *)a2 + v53);
    }
    else {
      char v52 = 1;
    }
    goto LABEL_82;
  }
  return a1;
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G14::Encoders,AGX::G14::Classes,AGX::G14::ObjClasses>::partitionSizeFromFormatAndCompCount(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      return a2;
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 22:
      a2 = (2 * a2);
      break;
    case 10:
    case 11:
    case 17:
      a2 = (4 * a2);
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      a2 = 4;
      break;
    default:
      a2 = 0;
      break;
  }
  return a2;
}

uint64_t AGX::FramebufferCompilerConfigGen3<AGX::G14::Encoders,AGX::G14::Classes,AGX::G14::ObjClasses>::buildDrawBufferState(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(result + 40);
  unsigned int v4 = v3;
  do
  {
    unsigned int v5 = v4;
    if (!v4) {
      break;
    }
    unsigned int v6 = __clz(__rbit32(v4));
    uint64_t v7 = *(void *)(v1 + 8 * v6 + 96);
    if (*(_DWORD *)(v7 + 32) == 18) {
      int v8 = 9;
    }
    else {
      int v8 = *(_DWORD *)(v7 + 32);
    }
    double result = AGX::FramebufferCompilerConfig<AGX::G14::Encoders,AGX::G14::Classes,AGX::G14::ObjClasses>::partitionSizeFromFormatAndCompCount(v8, *(unsigned int *)(v7 + 28));
    v2 += result;
    int v9 = 1 << v6;
    if (v2 > 0x40) {
      int v9 = 0;
    }
    unsigned int v4 = v9 ^ v5;
  }
  while (v2 < 0x41);
  if (v3)
  {
    LODWORD(v10) = 0;
    int v11 = 0;
    char v12 = 0;
    int v13 = 0;
    double result = 4293922528;
    unsigned int v38 = v5;
    uint64_t v37 = v1;
    do
    {
      uint64_t v14 = __clz(__rbit32(v3));
      uint64_t v15 = *(unsigned int **)(v1 + 8 * v14 + 96);
      uint64_t v16 = v15[7];
      if (v15[8] == 18 && v5 == 0) {
        int v18 = 9;
      }
      else {
        int v18 = v15[8];
      }
      int v19 = 1 << v14;
      if (v18 == 18) {
        int v20 = 1 << v14;
      }
      else {
        int v20 = 0;
      }
      if (v18 == 3)
      {
        int v21 = (v15[21] != 0) << 8;
        int v22 = 1;
      }
      else
      {
        int v23 = v13;
        int v24 = AGX::FramebufferCompilerConfig<AGX::G14::Encoders,AGX::G14::Classes,AGX::G14::ObjClasses>::partitionSizeFromFormatAndCompCount(v18, v16);
        int v13 = v23;
        unsigned int v5 = v38;
        int v19 = 1 << v14;
        uint64_t v1 = v37;
        LODWORD(v16) = v24;
        double result = 4293922528;
        int v21 = 0;
        int v22 = 1;
        switch(v18)
        {
          case 2:
          case 4:
          case 5:
            break;
          case 6:
          case 7:
          case 8:
          case 9:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 22:
            int v21 = 0;
            int v22 = 2;
            break;
          case 10:
          case 11:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
            int v21 = 0;
            int v22 = 4;
            break;
          default:
            int v21 = 0;
            int v22 = 0;
            break;
        }
      }
      v13 |= v20;
      int v25 = v22 - 1;
      int v26 = -v22;
      int v27 = (v25 + v10) & v26;
      v12 |= (v27 + v16) > 0x40;
      int v28 = (v25 + v11) & v26;
      unsigned __int8 v29 = v28 + 64;
      int v30 = v28 + v16;
      if (v12) {
        int v11 = v30;
      }
      else {
        unsigned __int8 v29 = v27;
      }
      unsigned int v31 = v21 & 0xFFF00FFF | *(_DWORD *)(v1 + 4 * v14) & 0xFFF00EE0 | v18 & 0x1F | (v29 << 12);
      *(_DWORD *)(v1 + 4 * v14) = v31;
      unsigned int v32 = v31 & 0xFFFFF1FF | ((v15[19] & 7) << 9);
      *(_DWORD *)(v1 + 4 * v14) = v32;
      if (v12) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = (v27 + v16);
      }
      *(_DWORD *)(v1 + 4 * v14) = v32 & 0xFFFFFF1F | (32 * (v15[7] & 7));
      v3 ^= v19;
    }
    while (v3);
    unint64_t v33 = 64;
    if (((v10 + 7) & 0x1FFFFFFC0) == 0) {
      unint64_t v33 = (v10 + 7) & 0x1FFFFFFF8;
    }
    if (v33 <= 8) {
      LODWORD(v33) = 8;
    }
    int v34 = v33 << 16;
    if (v12)
    {
      int v34 = 0x400000;
      int v35 = 0x2000000;
    }
    else
    {
      int v35 = 0;
    }
    int v36 = *(unsigned __int8 *)(v1 + 40) | v35;
  }
  else
  {
    int v11 = 0;
    int v13 = 0;
    int v36 = 0;
    int v34 = 0x80000;
  }
  *(_DWORD *)(v1 + 32) = v36 | ((*(unsigned char *)(v1 + 84) & 0xF) << 8) | *(_DWORD *)(v1 + 32) & 0xFC000000 | v34 | ((*(unsigned char *)(v1 + 85) & 0xF) << 12);
  *(_DWORD *)(v1 + 88) = v11;
  *(_DWORD *)(v1 + 44) = v13;
  return result;
}

uint64_t AGX::PBEStateEncoderGen8<kAGXRevG14>::StateFields::getDimensionality(int a1, char a2, unsigned int a3)
{
  if (a3 < 2) {
    unsigned __int8 v3 = 2;
  }
  else {
    unsigned __int8 v3 = 3;
  }
  if (a2)
  {
    if ((a2 & 2) != 0) {
      unsigned __int8 v4 = 8;
    }
    else {
      unsigned __int8 v4 = v3;
    }
    BOOL v5 = a1 == 4;
LABEL_11:
    if (v5) {
      return v3;
    }
  }
  else
  {
    unsigned __int8 v4 = 5;
    switch(a1)
    {
      case 1:
        unsigned __int8 v4 = 2;
        break;
      case 2:
        BOOL v5 = (a2 & 2) == 0;
        unsigned __int8 v4 = 4;
        unsigned __int8 v3 = 2;
        goto LABEL_11;
      case 3:
        return v4;
      case 4:
        unsigned __int8 v4 = v3;
        break;
      default:
        unsigned __int8 v4 = -1;
        break;
    }
  }
  return v4;
}

uint64_t AGCTargetImpl<AGX::G14::Classes,AGX::G14::Encoders>::maxMSAASampleCount()
{
  return 4;
}

uint64_t AGCTargetImpl<AGX::G14::Classes,AGX::G14::Encoders>::requiresRayTracingEmulation()
{
  return 1;
}

void *AGCTargetImpl<AGX::G14::Classes,AGX::G14::Encoders>::GetLegalizationPasses@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v9 = "air-degenerate-vertex-amplification-emulation";
  char v10 = 0;
  int v11 = "air-raytracing-emulation,indirect-acceleration-structures";
  char v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int v13 = "mtl-fetch-all-unaligned";
  char v14 = 1;
  uint64_t v15 = "air-bfloat-emulation";
  char v16 = 1;
  double result = malloc_type_malloc(0x20uLL, 0x10040436913F5uLL);
  uint64_t v6 = 0;
  int v7 = 0;
  *a2 = 0;
  do
  {
    if (LOBYTE((&v9)[v6 + 1]))
    {
      int v8 = (&v9)[v6];
      *a2 = v7 + 1;
      result[v7++] = v8;
    }
    v6 += 2;
  }
  while (v6 != 8);
  *a3 = result;
  return result;
}

void AGCTargetImpl<AGX::G14::Classes,AGX::G14::Encoders>::CreateTGSizeToTempTable(uint64_t a1, _DWORD *a2)
{
  *a2 = 32;
  operator new[]();
}

void AGCTargetImpl<AGX::G14::Classes,AGX::G14::Encoders>::CreateProgramKeyFactory()
{
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14::Classes,AGX::G14::Encoders>::CreateBVHBuilderProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBCB8;
  *(_DWORD *)(a2 + 40) = 0;
  return AGX::BVHBuilderProgramKey::initializeWithDescriptor(a2, a1);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14::Classes,AGX::G14::Encoders>::CreateEndOfTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_1F25DBC38;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 118) = 0;
  AGX::FramebufferCompilerConfig<AGX::G14::Encoders,AGX::G14::Classes,AGX::G14::ObjClasses>::FramebufferCompilerConfig((uint64_t)v31, a1);
  uint64_t result = AGX::FramebufferCompilerConfigGen3<AGX::G14::Encoders,AGX::G14::Classes,AGX::G14::ObjClasses>::buildDrawBufferState((uint64_t)v31);
  v29[0] = v31[0];
  v29[1] = v31[1];
  unsigned int v5 = v32;
  uint64_t v30 = v32;
  unsigned int v6 = v39;
  unsigned int v7 = v33;
  int v24 = v34;
  unint64_t v8 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v32 >> 12) << 32) | ((unint64_t)BYTE2(v32) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v8;
  if (v7)
  {
    int v9 = 0;
    int v28 = 0;
    int v10 = 0;
    unsigned int v20 = (unsigned __int16)v5 >> 12;
    int v23 = v38;
    unsigned int v22 = HIWORD(v5) & 0x1FF;
    int v21 = v37 & ~v36 | v35;
    unsigned int v19 = v36 & ~v37 | v35;
    do
    {
      uint64_t v11 = __clz(__rbit32(v7));
      unsigned int v12 = *((_DWORD *)v29 + v11);
      unsigned int v13 = *(_DWORD *)(v3 + 4 * v11) & 0xE3000000;
      uint64_t result = AGX::PBEStateEncoderGen8<kAGXRevG14>::StateFields::getDimensionality(v40[2 * v11], v40[2 * v11 + 1], v6);
      *(_DWORD *)(v3 + 4 * v11) = v13 & 0xE3FFE0FF | (result << 16) & 0xE3FFFFFF | ((v12 & 0x1F) << 8) | (v12 >> 5 << 26) | ((v12 >> 12) / v22);
      v9 |= 1 << v11;
      unsigned int v27 = (v12 >> 12) / v22;
      v28 |= (1 << v11) & v21;
      int v14 = v23 & (1 << v11);
      v10 |= v14;
      if ((v24 & (1 << v11)) != 0)
      {
        int v26 = v10;
        int v15 = (v12 & 0x1F) << 8;
        int v25 = (v12 << 21) & 0x1C000000;
        unsigned int v16 = v11 + 8;
        int v17 = (v12 << 16) & 0x1000000;
        if (v20 <= 1) {
          int v17 = 0;
        }
        unsigned int v18 = *(_DWORD *)(v3 + 4 * (v11 + 8)) & 0xE2000000 | v17;
        uint64_t result = AGX::PBEStateEncoderGen8<kAGXRevG14>::StateFields::getDimensionality(v40[2 * v11 + 16], v40[2 * v11 + 17], v6);
        *(_DWORD *)(v3 + 4 * v16) = v18 | (result << 16) | v15 | v25 | v27;
        v9 |= 256 << v11;
        v28 |= ((v19 >> v11) & 1) << v16;
        int v10 = ((v14 != 0) << v16) | v26;
      }
      v7 ^= 1 << v11;
    }
    while (v7);
    unint64_t v8 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v10) = 0;
    LOWORD(v28) = 0;
    LOWORD(v9) = 0;
  }
  *(_WORD *)(a2 + 120) = v9;
  *(_WORD *)(a2 + 122) = v28;
  *(_WORD *)(a2 + 124) = v10;
  *(void *)(a2 + 112) = v8 & 0xFFFFFFFF00000000 | (unsigned __int16)(v9 & ~(_WORD)v28) | ((unint64_t)(unsigned __int16)(v9 & v10) << 16);
  return result;
}

double AGX::ProgramKeyFactoryImpl<AGX::G14::Classes,AGX::G14::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBBF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfig<AGX::G14::Encoders,AGX::G14::Classes,AGX::G14::ObjClasses>::FramebufferCompilerConfig((uint64_t)v6, a1);
  AGX::FramebufferCompilerConfigGen3<AGX::G14::Encoders,AGX::G14::Classes,AGX::G14::ObjClasses>::buildDrawBufferState((uint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14::Classes,AGX::G14::Encoders>::CreateTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 8) = 5;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F25DBE10;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(void *)(a4 + 200) = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  int v32 = 1;
  __int16 v33 = 0;
  int v34 = 0;
  memset(v35, 0, 96);
  bzero(&v28, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  unsigned __int8 v9 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v10 = *v9;
  if (v10 < 0xF) {
    goto LABEL_13;
  }
  uint64_t v11 = v9[7];
  if (v9[7])
  {
    uint64_t v12 = *(unsigned int *)((char *)a1 + v11);
    unsigned int v13 = (unsigned int *)((char *)a1 + v11 + v12);
    unint64_t v14 = *v13;
    if (v14)
    {
      unint64_t v15 = 0;
      int v16 = DWORD2(v30);
      uint64_t v27 = a3;
      int v17 = (char *)a1 + v11 + v12;
      do
      {
        unsigned int v18 = &v17[4 * v15];
        uint64_t v19 = *((unsigned int *)v18 + 1);
        unsigned int v20 = (char *)v13 + v19 - *(int *)&v18[v19 + 4];
        if (*((unsigned __int16 *)v20 + 2) >= 5u)
        {
          uint64_t v21 = *((unsigned __int16 *)v20 + 4);
          if (v21)
          {
            unsigned int v22 = (char *)v13 + v19 + v21;
            if (*((_WORD *)v22 + 2))
            {
              *((void *)v35 + v15) = AGX::G14::TextureFormatTable::chooseTextureFormatCPP((AGX::G14::TextureFormatTable *)*((unsigned __int16 *)v22 + 2), v8);
              v16 |= 1 << v15;
            }
          }
        }
        if (v15 > 6) {
          break;
        }
        ++v15;
        ++v13;
      }
      while (v15 < v14);
      DWORD2(v30) = v16;
      a3 = v27;
LABEL_13:
      if (v10 <= 0xA)
      {
        char v24 = 1;
        LOBYTE(v33) = 1;
LABEL_21:
        HIBYTE(v33) = v24;
        goto LABEL_22;
      }
    }
  }
  if (v9[5]) {
    char v23 = *((unsigned char *)a1 + v9[5]);
  }
  else {
    char v23 = 1;
  }
  LOBYTE(v33) = v23;
  HIBYTE(v33) = v23;
  if (v10 >= 0xD)
  {
    if (v9[6])
    {
      char v24 = *((unsigned char *)a1 + v9[6]);
      if (v24) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G14::Encoders,AGX::G14::Classes,AGX::G14::ObjClasses>::buildDrawBufferState((uint64_t)&v28);
  long long v25 = v29;
  *(_OWORD *)(a4 + 112) = v28;
  *(_OWORD *)(a4 + 128) = v25;
  *(void *)(a4 + 144) = v30;
  AGX::Impl::TileProgramKey::initCommon(a4, a1);
  *(_DWORD *)(a4 + 100) &= ~0x80u;
  if (a4 + 160 != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 160), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a4 + 184 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 184), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  LOWORD(v28) = 256;
  *(void *)((char *)&v28 + 2) = 0;
  *(_DWORD *)((char *)&v28 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a4, (unsigned __int8 *)&v28);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14::Classes,AGX::G14::Encoders>::CreateComputeProgramKey@<X0>(AGX *a1@<X1>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 8) = 6;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)a5 = &unk_1F25DBE50;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 64), "");
  *(unsigned char *)(a5 + 88) = 0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  AGX::Impl::ComputeProgramKey::initCommon((AGX *)a5, a1);
  *(int8x8_t *)(a5 + 52) = vand_s8(*(int8x8_t *)(a5 + 52), (int8x8_t)0xFFFFFFFEFFFFFF7FLL);
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a5, a2);
  if (a5 + 96 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a5 + 120 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  __int16 v11 = 256;
  uint64_t v12 = 0;
  int v13 = 0;
  return AGX::Impl::ComputeProgramKey::setDeviceOptions(a5, (unsigned __int8 *)&v11);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14::Classes,AGX::G14::Encoders>::CreateFragmentProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 8) = 4;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 232) = 0u;
  uint64_t v12 = (char *)(a6 + 232);
  *(void *)a6 = &unk_1F25DBDD0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_OWORD *)(a6 + 120) = 0u;
  *(_OWORD *)(a6 + 136) = 0u;
  *(_OWORD *)(a6 + 152) = 0u;
  *(_OWORD *)(a6 + 168) = 0u;
  *(_OWORD *)(a6 + 184) = 0u;
  *(_OWORD *)(a6 + 200) = 0u;
  *(_OWORD *)(a6 + 209) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 264) = 0u;
  long long v41 = 0u;
  memset(v42, 0, sizeof(v42));
  long long v39 = 0u;
  long long v40 = 0u;
  int v43 = 1;
  __int16 v44 = 0;
  int v45 = 0;
  memset(v46, 0, 96);
  bzero(&v39, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  int v38 = a2;
  unint64_t v14 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  unsigned int v15 = *v14;
  if (v15 >= 0x17)
  {
    uint64_t v16 = v14[11];
    if (!v14[11]) {
      goto LABEL_14;
    }
    uint64_t v17 = *(unsigned int *)((char *)a1 + v16);
    unsigned int v18 = (unsigned int *)((char *)a1 + v16 + v17);
    unint64_t v19 = *v18;
    if (!v19) {
      goto LABEL_14;
    }
    unsigned __int8 v35 = a3;
    uint64_t v36 = a4;
    uint64_t v37 = a5;
    unint64_t v20 = 0;
    int v21 = DWORD2(v41);
    unsigned int v22 = (char *)a1 + v16 + v17;
    do
    {
      char v23 = &v22[4 * v20];
      uint64_t v24 = *((unsigned int *)v23 + 1);
      long long v25 = (char *)v18 + v24 - *(int *)&v23[v24 + 4];
      if (*((unsigned __int16 *)v25 + 2) >= 5u)
      {
        uint64_t v26 = *((unsigned __int16 *)v25 + 4);
        if (v26)
        {
          uint64_t v27 = (char *)v18 + v24 + v26;
          if (*((_WORD *)v27 + 2))
          {
            *((void *)v46 + v20) = AGX::G14::TextureFormatTable::chooseTextureFormatCPP((AGX::G14::TextureFormatTable *)*((unsigned __int16 *)v27 + 2), v13);
            v21 |= 1 << v20;
          }
        }
      }
      if (v20 > 6) {
        break;
      }
      ++v20;
      ++v18;
    }
    while (v20 < v19);
    DWORD2(v41) = v21;
    a4 = v36;
    a5 = v37;
    a3 = v35;
  }
  if (v15 <= 0xC)
  {
    char v29 = 1;
    LOBYTE(v44) = 1;
    a2 = v38;
LABEL_21:
    HIBYTE(v44) = v29;
    goto LABEL_22;
  }
LABEL_14:
  if (v14[6]) {
    char v28 = *((unsigned char *)a1 + v14[6]);
  }
  else {
    char v28 = 1;
  }
  a2 = v38;
  LOBYTE(v44) = v28;
  HIBYTE(v44) = v28;
  if (v15 >= 0xF)
  {
    if (v14[7])
    {
      char v29 = *((unsigned char *)a1 + v14[7]);
      if (v29) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G14::Encoders,AGX::G14::Classes,AGX::G14::ObjClasses>::buildDrawBufferState((uint64_t)&v39);
  long long v30 = v40;
  *(_OWORD *)(a6 + 112) = v39;
  *(_OWORD *)(a6 + 128) = v30;
  *(void *)(a6 + 144) = v41;
  AGX::Impl::FragmentProgramKey::initCommon((AGX *)a6, a1);
  int v31 = *(_DWORD *)(a6 + 104);
  unsigned int v32 = *(_DWORD *)(a6 + 100) & 0xFFFFFF7F;
  *(_DWORD *)(a6 + 40) &= ~0x10u;
  if (a2) {
    int v33 = 256;
  }
  else {
    int v33 = 0;
  }
  *(_DWORD *)(a6 + 100) = v32;
  *(_DWORD *)(a6 + 104) = v31 & 0xFFFFFEFF | v33;
  AGX::Impl::FragmentProgramKey::setSerializedDescriptor((AGX::Impl::FragmentProgramKey *)a6, a3);
  if (v12 != (char *)a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a6 + 256 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a6 + 256), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  LOWORD(v39) = 256;
  *(void *)((char *)&v39 + 2) = 0;
  *(_DWORD *)((char *)&v39 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a6, (unsigned __int8 *)&v39);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14::Classes,AGX::G14::Encoders>::CreateMeshProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v26 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v27 = *(std::string *)(a2 + 24);
  }
  int v17 = *(unsigned __int8 *)(a2 + 48);
  *(_OWORD *)(a8 + 104) = 0u;
  *(_DWORD *)(a8 + 8) = 10;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_DWORD *)(a8 + 96) = 0;
  *(void *)a8 = &unk_1F25DBD40;
  *(std::string *)(a8 + 152) = v26;
  long long v18 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(void *)(a8 + 192) = *((void *)&v27.__r_.__value_.__l + 2);
  if (a3) {
    int v19 = 128;
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  *(_OWORD *)(a8 + 176) = v18;
  *(unsigned char *)(a8 + 200) = v17;
  *(_DWORD *)(a8 + 56) = v20 | v19 | (16 * v17);
  AGX::Impl::MeshProgramKey::initCommon((AGX *)a8, a1);
  *(_DWORD *)(a8 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a8, a5);
  if (a8 + 104 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 104), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  if (a8 + 128 != a7) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 128), *(char **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5);
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v21;
  __int16 v23 = 256;
  uint64_t v24 = 0;
  int v25 = 0;
  return AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(a8, (unsigned __int8 *)&v23);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14::Classes,AGX::G14::Encoders>::CreateObjectProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)(a7 + 8) = 9;
  *(_OWORD *)(a7 + 104) = 0u;
  __int16 v11 = (char *)(a7 + 104);
  *(_OWORD *)(a7 + 120) = 0u;
  *(_OWORD *)(a7 + 136) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_DWORD *)(a7 + 96) = 0;
  *(void *)a7 = &unk_1F25DBD88;
  if (a2) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  if (a3) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a7 + 56) = v13 | v12;
  AGX::Impl::ObjectProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a7, a4);
  if (v11 != (char *)a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v11, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a7 + 128 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 128), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  __int16 v15 = 256;
  uint64_t v16 = 0;
  int v17 = 0;
  return AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(a7, (unsigned __int8 *)&v15);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14::Classes,AGX::G14::Encoders>::CreateVertexProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v21 = *(std::string *)(a2 + 24);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)(a7 + 8) = 3;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 76) = 0u;
  *(void *)a7 = &unk_1F25DBCF8;
  *(std::string *)(a7 + 144) = v20;
  *(std::string *)(a7 + 168) = v21;
  *(unsigned char *)(a7 + 192) = v14;
  *(void *)(a7 + 56) = v14 << 18;
  AGX::Impl::VertexProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a7, a3);
  if (a7 + 96 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a7 + 120 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a6) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a7 + 88) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v15;
  __int16 v17 = 256;
  uint64_t v18 = 0;
  int v19 = 0;
  return AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(a7, (unsigned __int8 *)&v17);
}

void AGX::ProgramKeyFactoryImpl<AGX::G14::Classes,AGX::G14::Encoders>::~ProgramKeyFactoryImpl()
{
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G14X::Encoders,AGX::G14X::Classes,AGX::G14X::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = (char *)a2 - v5;
    unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v5);
    if (v7 < 5) {
      goto LABEL_71;
    }
    uint64_t v8 = -v5;
    uint64_t v9 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2))
    {
      unsigned int v10 = (char *)a2 + v9;
      uint64_t v11 = *(unsigned int *)((char *)a2 + v9);
      unint64_t v12 = *(unsigned int *)((char *)a2 + v9 + v11);
      if (v12)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = v9 + v11;
        while (1)
        {
          uint64_t v16 = *(unsigned int *)((char *)a2 + v15 + 4);
          __int16 v17 = (char *)a2 + v15 + v16;
          uint64_t v18 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v18 + 2) >= 5u)
          {
            uint64_t v19 = *((unsigned __int16 *)v18 + 4);
            if (v19)
            {
              std::string v20 = (char *)a2 + v15 + v16 + v19;
              if (*((_WORD *)v20 + 2)) {
                break;
              }
            }
          }
LABEL_46:
          if (v14 <= 6)
          {
            ++v14;
            v13 += 2;
            v15 += 4;
            if (v14 < v12) {
              continue;
            }
          }
          uint64_t v47 = *a2;
          uint64_t v8 = -v47;
          unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v47);
          goto LABEL_66;
        }
        *(void *)(a1 + 8 * v14 + 96) = AGX::G14X::TextureFormatTable::chooseTextureFormatCPP((AGX::G14X::TextureFormatTable *)*((unsigned __int16 *)v20 + 2), v4);
        unsigned int v21 = 1 << v14;
        *(_DWORD *)(a1 + 40) |= 1 << v14;
        uint64_t v22 = v16 - *((int *)v17 + 1);
        unsigned int v23 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 4);
        if (v23 < 0x19)
        {
          int v25 = 0;
          __int32 v24 = 0;
          if (v23 < 0xF)
          {
LABEL_34:
            int v25 = 0;
            int v34 = 1 << v14;
LABEL_35:
            *(_DWORD *)(a1 + 52) |= v34;
            v36.i32[0] = v24;
            v36.i32[1] = v25 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v36, (int32x2_t)0x100000001)));
            if (v25 == 4) {
              int v37 = 1 << v14;
            }
            else {
              int v37 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v37;
            int v38 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
            if (*((unsigned __int16 *)v38 + 2) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 5)) != 0)
            {
              char v40 = 0;
              int v41 = *((unsigned __int8 *)a2 + v15 + v16 + v39 + 4);
              unsigned __int8 v42 = (char *)(a1 + v13 + 160);
              char v43 = 2;
              char v44 = 1;
              switch(v41)
              {
                case 0:
                case 1:
                  char v43 = 1;
                  char v40 = v41;
                  goto LABEL_52;
                case 3:
                  goto LABEL_57;
                case 4:
                  char v45 = 2;
                  goto LABEL_43;
                case 5:
                  goto LABEL_51;
                case 6:
                  char v40 = 1;
LABEL_51:
                  char v43 = 4;
                  goto LABEL_52;
                case 7:
                  char *v42 = 3;
                  *(unsigned char *)(a1 + v13 + 161) = 0;
LABEL_55:
                  int v46 = 3;
                  break;
                case 8:
                  char v44 = 3;
LABEL_57:
                  char *v42 = 2;
                  *(unsigned char *)(a1 + v13 + 161) = v44;
LABEL_58:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_44;
                default:
LABEL_52:
                  char *v42 = v43;
                  *(unsigned char *)(a1 + v13 + 161) = v40;
                  int v46 = 1;
                  switch(v41)
                  {
                    case 0:
                      goto LABEL_45;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_58;
                    case 7:
                      goto LABEL_55;
                    default:
                      goto LABEL_44;
                  }
                  break;
              }
            }
            else
            {
              char v45 = 0;
              unsigned __int8 v42 = (char *)(a1 + 2 * v14 + 160);
LABEL_43:
              char *v42 = 2;
              *(unsigned char *)(a1 + v13 + 161) = v45;
LABEL_44:
              int v46 = 2;
            }
LABEL_45:
            *(_WORD *)(a1 + 76) |= v46 << v13;
            unint64_t v12 = *(unsigned int *)&v10[v11];
            goto LABEL_46;
          }
        }
        else
        {
          if (*(_WORD *)((char *)a2 + v15 + v22 + 28)) {
            __int32 v24 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 28) + 4);
          }
          else {
            __int32 v24 = 0;
          }
          if (v23 >= 0x1B && *(_WORD *)((char *)a2 + v15 + v22 + 30)) {
            int v25 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 30) + 4);
          }
          else {
            int v25 = 0;
          }
        }
        uint64_t v26 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 18);
        if (v26 && *(_WORD *)((char *)a2 + v15 + v16 + v26 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v25 & 0xFE) == 2) {
            int v27 = 1 << v14;
          }
          else {
            int v27 = 0;
          }
          *(_DWORD *)(a1 + 68) |= v27;
          char v28 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v28 + 2) >= 0x11u && (uint64_t v29 = *((unsigned __int16 *)v28 + 10)) != 0)
          {
            char v30 = 0;
            int v31 = *((unsigned __int8 *)a2 + v15 + v16 + v29 + 4);
            char v32 = 2;
            switch(v31)
            {
              case 0:
              case 1:
                char v32 = 1;
                char v30 = v31;
                break;
              case 3:
                char v30 = 1;
                break;
              case 4:
                char v30 = 2;
                break;
              case 5:
                goto LABEL_61;
              case 6:
                char v30 = 1;
LABEL_61:
                char v32 = 4;
                break;
              case 7:
                char v30 = 0;
                char v32 = 3;
                break;
              case 8:
                char v30 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            char v30 = 0;
            char v32 = 2;
          }
          uint64_t v33 = a1 + v13;
          *(unsigned char *)(v33 + 176) = v32;
          *(unsigned char *)(v33 + 177) = v30;
        }
        int v34 = 0;
        if (v24 == 2) {
          int v35 = 1 << v14;
        }
        else {
          int v35 = 0;
        }
        *(_DWORD *)(a1 + 56) |= v35;
        if (v25) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
LABEL_66:
    if (v7 >= 7
      && *(_WORD *)((char *)a2 + v8 + 6)
      && (uint64_t v48 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v8 + 6)), (v48 & 0xFFFFFFFE) != 0))
    {
      if (v48 > 0x7FF) {
        LODWORD(v48) = 2048;
      }
    }
    else
    {
LABEL_71:
      LODWORD(v48) = 1;
    }
    *(_DWORD *)(a1 + 80) = v48;
    long long v49 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v50 = *v49;
    if (v50 < 0xB)
    {
      char v52 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v50 < 9)
      {
LABEL_82:
        *(unsigned char *)(a1 + 85) = v52;
        return a1;
      }
    }
    else
    {
      if (v49[5]) {
        char v51 = *((unsigned char *)a2 + v49[5]);
      }
      else {
        char v51 = 1;
      }
      *(unsigned char *)(a1 + 84) = v51;
    }
    uint64_t v53 = v49[4];
    if (v53) {
      char v52 = *((unsigned char *)a2 + v53);
    }
    else {
      char v52 = 1;
    }
    goto LABEL_82;
  }
  return a1;
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G14X::Encoders,AGX::G14X::Classes,AGX::G14X::ObjClasses>::partitionSizeFromFormatAndCompCount(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      return a2;
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 22:
      a2 = (2 * a2);
      break;
    case 10:
    case 11:
    case 17:
      a2 = (4 * a2);
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      a2 = 4;
      break;
    default:
      a2 = 0;
      break;
  }
  return a2;
}

uint64_t AGX::FramebufferCompilerConfigGen3<AGX::G14X::Encoders,AGX::G14X::Classes,AGX::G14X::ObjClasses>::buildDrawBufferState(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(result + 40);
  unsigned int v4 = v3;
  do
  {
    unsigned int v5 = v4;
    if (!v4) {
      break;
    }
    unsigned int v6 = __clz(__rbit32(v4));
    uint64_t v7 = *(void *)(v1 + 8 * v6 + 96);
    if (*(_DWORD *)(v7 + 32) == 18) {
      int v8 = 9;
    }
    else {
      int v8 = *(_DWORD *)(v7 + 32);
    }
    double result = AGX::FramebufferCompilerConfig<AGX::G14X::Encoders,AGX::G14X::Classes,AGX::G14X::ObjClasses>::partitionSizeFromFormatAndCompCount(v8, *(unsigned int *)(v7 + 28));
    v2 += result;
    int v9 = 1 << v6;
    if (v2 > 0x40) {
      int v9 = 0;
    }
    unsigned int v4 = v9 ^ v5;
  }
  while (v2 < 0x41);
  if (v3)
  {
    LODWORD(v10) = 0;
    int v11 = 0;
    char v12 = 0;
    int v13 = 0;
    double result = 4293922528;
    unsigned int v38 = v5;
    uint64_t v37 = v1;
    do
    {
      uint64_t v14 = __clz(__rbit32(v3));
      uint64_t v15 = *(unsigned int **)(v1 + 8 * v14 + 96);
      uint64_t v16 = v15[7];
      if (v15[8] == 18 && v5 == 0) {
        int v18 = 9;
      }
      else {
        int v18 = v15[8];
      }
      int v19 = 1 << v14;
      if (v18 == 18) {
        int v20 = 1 << v14;
      }
      else {
        int v20 = 0;
      }
      if (v18 == 3)
      {
        int v21 = (v15[21] != 0) << 8;
        int v22 = 1;
      }
      else
      {
        int v23 = v13;
        int v24 = AGX::FramebufferCompilerConfig<AGX::G14X::Encoders,AGX::G14X::Classes,AGX::G14X::ObjClasses>::partitionSizeFromFormatAndCompCount(v18, v16);
        int v13 = v23;
        unsigned int v5 = v38;
        int v19 = 1 << v14;
        uint64_t v1 = v37;
        LODWORD(v16) = v24;
        double result = 4293922528;
        int v21 = 0;
        int v22 = 1;
        switch(v18)
        {
          case 2:
          case 4:
          case 5:
            break;
          case 6:
          case 7:
          case 8:
          case 9:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 22:
            int v21 = 0;
            int v22 = 2;
            break;
          case 10:
          case 11:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
            int v21 = 0;
            int v22 = 4;
            break;
          default:
            int v21 = 0;
            int v22 = 0;
            break;
        }
      }
      v13 |= v20;
      int v25 = v22 - 1;
      int v26 = -v22;
      int v27 = (v25 + v10) & v26;
      v12 |= (v27 + v16) > 0x40;
      int v28 = (v25 + v11) & v26;
      unsigned __int8 v29 = v28 + 64;
      int v30 = v28 + v16;
      if (v12) {
        int v11 = v30;
      }
      else {
        unsigned __int8 v29 = v27;
      }
      unsigned int v31 = v21 & 0xFFF00FFF | *(_DWORD *)(v1 + 4 * v14) & 0xFFF00EE0 | v18 & 0x1F | (v29 << 12);
      *(_DWORD *)(v1 + 4 * v14) = v31;
      unsigned int v32 = v31 & 0xFFFFF1FF | ((v15[19] & 7) << 9);
      *(_DWORD *)(v1 + 4 * v14) = v32;
      if (v12) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = (v27 + v16);
      }
      *(_DWORD *)(v1 + 4 * v14) = v32 & 0xFFFFFF1F | (32 * (v15[7] & 7));
      v3 ^= v19;
    }
    while (v3);
    unint64_t v33 = 64;
    if (((v10 + 7) & 0x1FFFFFFC0) == 0) {
      unint64_t v33 = (v10 + 7) & 0x1FFFFFFF8;
    }
    if (v33 <= 8) {
      LODWORD(v33) = 8;
    }
    int v34 = v33 << 16;
    if (v12)
    {
      int v34 = 0x400000;
      int v35 = 0x2000000;
    }
    else
    {
      int v35 = 0;
    }
    int v36 = *(unsigned __int8 *)(v1 + 40) | v35;
  }
  else
  {
    int v11 = 0;
    int v13 = 0;
    int v36 = 0;
    int v34 = 0x80000;
  }
  *(_DWORD *)(v1 + 32) = v36 | ((*(unsigned char *)(v1 + 84) & 0xF) << 8) | *(_DWORD *)(v1 + 32) & 0xFC000000 | v34 | ((*(unsigned char *)(v1 + 85) & 0xF) << 12);
  *(_DWORD *)(v1 + 88) = v11;
  *(_DWORD *)(v1 + 44) = v13;
  return result;
}

uint64_t AGX::PBEStateEncoderGen8<kAGXRevG14X>::StateFields::getDimensionality(int a1, char a2, unsigned int a3)
{
  if (a3 < 2) {
    unsigned __int8 v3 = 2;
  }
  else {
    unsigned __int8 v3 = 3;
  }
  if (a2)
  {
    if ((a2 & 2) != 0) {
      unsigned __int8 v4 = 8;
    }
    else {
      unsigned __int8 v4 = v3;
    }
    BOOL v5 = a1 == 4;
LABEL_11:
    if (v5) {
      return v3;
    }
  }
  else
  {
    unsigned __int8 v4 = 5;
    switch(a1)
    {
      case 1:
        unsigned __int8 v4 = 2;
        break;
      case 2:
        BOOL v5 = (a2 & 2) == 0;
        unsigned __int8 v4 = 4;
        unsigned __int8 v3 = 2;
        goto LABEL_11;
      case 3:
        return v4;
      case 4:
        unsigned __int8 v4 = v3;
        break;
      default:
        unsigned __int8 v4 = -1;
        break;
    }
  }
  return v4;
}

uint64_t AGCTargetImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::maxMSAASampleCount()
{
  return 4;
}

uint64_t AGCTargetImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::requiresRayTracingEmulation()
{
  return 1;
}

void *AGCTargetImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::GetLegalizationPasses@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v9 = "air-degenerate-vertex-amplification-emulation";
  char v10 = 0;
  int v11 = "air-raytracing-emulation,indirect-acceleration-structures";
  char v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int v13 = "mtl-fetch-all-unaligned";
  char v14 = 1;
  uint64_t v15 = "air-bfloat-emulation";
  char v16 = 1;
  double result = malloc_type_malloc(0x20uLL, 0x10040436913F5uLL);
  uint64_t v6 = 0;
  int v7 = 0;
  *a2 = 0;
  do
  {
    if (LOBYTE((&v9)[v6 + 1]))
    {
      int v8 = (&v9)[v6];
      *a2 = v7 + 1;
      result[v7++] = v8;
    }
    v6 += 2;
  }
  while (v6 != 8);
  *a3 = result;
  return result;
}

void AGCTargetImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::CreateTGSizeToTempTable(uint64_t a1, _DWORD *a2)
{
  *a2 = 32;
  operator new[]();
}

void AGCTargetImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::CreateProgramKeyFactory()
{
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::CreateBVHBuilderProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBCB8;
  *(_DWORD *)(a2 + 40) = 0;
  return AGX::BVHBuilderProgramKey::initializeWithDescriptor(a2, a1);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::CreateEndOfTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_1F25DBC38;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 118) = 0;
  AGX::FramebufferCompilerConfig<AGX::G14X::Encoders,AGX::G14X::Classes,AGX::G14X::ObjClasses>::FramebufferCompilerConfig((uint64_t)v31, a1);
  uint64_t result = AGX::FramebufferCompilerConfigGen3<AGX::G14X::Encoders,AGX::G14X::Classes,AGX::G14X::ObjClasses>::buildDrawBufferState((uint64_t)v31);
  v29[0] = v31[0];
  v29[1] = v31[1];
  unsigned int v5 = v32;
  uint64_t v30 = v32;
  unsigned int v6 = v39;
  unsigned int v7 = v33;
  int v24 = v34;
  unint64_t v8 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v32 >> 12) << 32) | ((unint64_t)BYTE2(v32) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v8;
  if (v7)
  {
    int v9 = 0;
    int v28 = 0;
    int v10 = 0;
    unsigned int v20 = (unsigned __int16)v5 >> 12;
    int v23 = v38;
    unsigned int v22 = HIWORD(v5) & 0x1FF;
    int v21 = v37 & ~v36 | v35;
    unsigned int v19 = v36 & ~v37 | v35;
    do
    {
      uint64_t v11 = __clz(__rbit32(v7));
      unsigned int v12 = *((_DWORD *)v29 + v11);
      unsigned int v13 = *(_DWORD *)(v3 + 4 * v11) & 0xE3000000;
      uint64_t result = AGX::PBEStateEncoderGen8<kAGXRevG14X>::StateFields::getDimensionality(v40[2 * v11], v40[2 * v11 + 1], v6);
      *(_DWORD *)(v3 + 4 * v11) = v13 & 0xE3FFE0FF | (result << 16) & 0xE3FFFFFF | ((v12 & 0x1F) << 8) | (v12 >> 5 << 26) | ((v12 >> 12) / v22);
      v9 |= 1 << v11;
      unsigned int v27 = (v12 >> 12) / v22;
      v28 |= (1 << v11) & v21;
      int v14 = v23 & (1 << v11);
      v10 |= v14;
      if ((v24 & (1 << v11)) != 0)
      {
        int v26 = v10;
        int v15 = (v12 & 0x1F) << 8;
        int v25 = (v12 << 21) & 0x1C000000;
        unsigned int v16 = v11 + 8;
        int v17 = (v12 << 16) & 0x1000000;
        if (v20 <= 1) {
          int v17 = 0;
        }
        unsigned int v18 = *(_DWORD *)(v3 + 4 * (v11 + 8)) & 0xE2000000 | v17;
        uint64_t result = AGX::PBEStateEncoderGen8<kAGXRevG14X>::StateFields::getDimensionality(v40[2 * v11 + 16], v40[2 * v11 + 17], v6);
        *(_DWORD *)(v3 + 4 * v16) = v18 | (result << 16) | v15 | v25 | v27;
        v9 |= 256 << v11;
        v28 |= ((v19 >> v11) & 1) << v16;
        int v10 = ((v14 != 0) << v16) | v26;
      }
      v7 ^= 1 << v11;
    }
    while (v7);
    unint64_t v8 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v10) = 0;
    LOWORD(v28) = 0;
    LOWORD(v9) = 0;
  }
  *(_WORD *)(a2 + 120) = v9;
  *(_WORD *)(a2 + 122) = v28;
  *(_WORD *)(a2 + 124) = v10;
  *(void *)(a2 + 112) = v8 & 0xFFFFFFFF00000000 | (unsigned __int16)(v9 & ~(_WORD)v28) | ((unint64_t)(unsigned __int16)(v9 & v10) << 16);
  return result;
}

double AGX::ProgramKeyFactoryImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBBF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfig<AGX::G14X::Encoders,AGX::G14X::Classes,AGX::G14X::ObjClasses>::FramebufferCompilerConfig((uint64_t)v6, a1);
  AGX::FramebufferCompilerConfigGen3<AGX::G14X::Encoders,AGX::G14X::Classes,AGX::G14X::ObjClasses>::buildDrawBufferState((uint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::CreateTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 8) = 5;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F25DBE10;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(void *)(a4 + 200) = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  int v32 = 1;
  __int16 v33 = 0;
  int v34 = 0;
  memset(v35, 0, 96);
  bzero(&v28, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  unsigned __int8 v9 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v10 = *v9;
  if (v10 < 0xF) {
    goto LABEL_13;
  }
  uint64_t v11 = v9[7];
  if (v9[7])
  {
    uint64_t v12 = *(unsigned int *)((char *)a1 + v11);
    unsigned int v13 = (unsigned int *)((char *)a1 + v11 + v12);
    unint64_t v14 = *v13;
    if (v14)
    {
      unint64_t v15 = 0;
      int v16 = DWORD2(v30);
      uint64_t v27 = a3;
      int v17 = (char *)a1 + v11 + v12;
      do
      {
        unsigned int v18 = &v17[4 * v15];
        uint64_t v19 = *((unsigned int *)v18 + 1);
        unsigned int v20 = (char *)v13 + v19 - *(int *)&v18[v19 + 4];
        if (*((unsigned __int16 *)v20 + 2) >= 5u)
        {
          uint64_t v21 = *((unsigned __int16 *)v20 + 4);
          if (v21)
          {
            unsigned int v22 = (char *)v13 + v19 + v21;
            if (*((_WORD *)v22 + 2))
            {
              *((void *)v35 + v15) = AGX::G14X::TextureFormatTable::chooseTextureFormatCPP((AGX::G14X::TextureFormatTable *)*((unsigned __int16 *)v22 + 2), v8);
              v16 |= 1 << v15;
            }
          }
        }
        if (v15 > 6) {
          break;
        }
        ++v15;
        ++v13;
      }
      while (v15 < v14);
      DWORD2(v30) = v16;
      a3 = v27;
LABEL_13:
      if (v10 <= 0xA)
      {
        char v24 = 1;
        LOBYTE(v33) = 1;
LABEL_21:
        HIBYTE(v33) = v24;
        goto LABEL_22;
      }
    }
  }
  if (v9[5]) {
    char v23 = *((unsigned char *)a1 + v9[5]);
  }
  else {
    char v23 = 1;
  }
  LOBYTE(v33) = v23;
  HIBYTE(v33) = v23;
  if (v10 >= 0xD)
  {
    if (v9[6])
    {
      char v24 = *((unsigned char *)a1 + v9[6]);
      if (v24) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G14X::Encoders,AGX::G14X::Classes,AGX::G14X::ObjClasses>::buildDrawBufferState((uint64_t)&v28);
  long long v25 = v29;
  *(_OWORD *)(a4 + 112) = v28;
  *(_OWORD *)(a4 + 128) = v25;
  *(void *)(a4 + 144) = v30;
  AGX::Impl::TileProgramKey::initCommon(a4, a1);
  *(_DWORD *)(a4 + 100) &= ~0x80u;
  if (a4 + 160 != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 160), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a4 + 184 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 184), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  LOWORD(v28) = 256;
  *(void *)((char *)&v28 + 2) = 0;
  *(_DWORD *)((char *)&v28 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a4, (unsigned __int8 *)&v28);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::CreateComputeProgramKey@<X0>(AGX *a1@<X1>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 8) = 6;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)a5 = &unk_1F25DBE50;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 64), "");
  *(unsigned char *)(a5 + 88) = 0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  AGX::Impl::ComputeProgramKey::initCommon((AGX *)a5, a1);
  *(int8x8_t *)(a5 + 52) = vand_s8(*(int8x8_t *)(a5 + 52), (int8x8_t)0xFFFFFFFEFFFFFF7FLL);
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a5, a2);
  if (a5 + 96 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a5 + 120 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  __int16 v11 = 256;
  uint64_t v12 = 0;
  int v13 = 0;
  return AGX::Impl::ComputeProgramKey::setDeviceOptions(a5, (unsigned __int8 *)&v11);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::CreateFragmentProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 8) = 4;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 232) = 0u;
  uint64_t v12 = (char *)(a6 + 232);
  *(void *)a6 = &unk_1F25DBDD0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_OWORD *)(a6 + 120) = 0u;
  *(_OWORD *)(a6 + 136) = 0u;
  *(_OWORD *)(a6 + 152) = 0u;
  *(_OWORD *)(a6 + 168) = 0u;
  *(_OWORD *)(a6 + 184) = 0u;
  *(_OWORD *)(a6 + 200) = 0u;
  *(_OWORD *)(a6 + 209) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 264) = 0u;
  long long v41 = 0u;
  memset(v42, 0, sizeof(v42));
  long long v39 = 0u;
  long long v40 = 0u;
  int v43 = 1;
  __int16 v44 = 0;
  int v45 = 0;
  memset(v46, 0, 96);
  bzero(&v39, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  int v38 = a2;
  unint64_t v14 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  unsigned int v15 = *v14;
  if (v15 >= 0x17)
  {
    uint64_t v16 = v14[11];
    if (!v14[11]) {
      goto LABEL_14;
    }
    uint64_t v17 = *(unsigned int *)((char *)a1 + v16);
    unsigned int v18 = (unsigned int *)((char *)a1 + v16 + v17);
    unint64_t v19 = *v18;
    if (!v19) {
      goto LABEL_14;
    }
    unsigned __int8 v35 = a3;
    uint64_t v36 = a4;
    uint64_t v37 = a5;
    unint64_t v20 = 0;
    int v21 = DWORD2(v41);
    unsigned int v22 = (char *)a1 + v16 + v17;
    do
    {
      char v23 = &v22[4 * v20];
      uint64_t v24 = *((unsigned int *)v23 + 1);
      long long v25 = (char *)v18 + v24 - *(int *)&v23[v24 + 4];
      if (*((unsigned __int16 *)v25 + 2) >= 5u)
      {
        uint64_t v26 = *((unsigned __int16 *)v25 + 4);
        if (v26)
        {
          uint64_t v27 = (char *)v18 + v24 + v26;
          if (*((_WORD *)v27 + 2))
          {
            *((void *)v46 + v20) = AGX::G14X::TextureFormatTable::chooseTextureFormatCPP((AGX::G14X::TextureFormatTable *)*((unsigned __int16 *)v27 + 2), v13);
            v21 |= 1 << v20;
          }
        }
      }
      if (v20 > 6) {
        break;
      }
      ++v20;
      ++v18;
    }
    while (v20 < v19);
    DWORD2(v41) = v21;
    a4 = v36;
    a5 = v37;
    a3 = v35;
  }
  if (v15 <= 0xC)
  {
    char v29 = 1;
    LOBYTE(v44) = 1;
    a2 = v38;
LABEL_21:
    HIBYTE(v44) = v29;
    goto LABEL_22;
  }
LABEL_14:
  if (v14[6]) {
    char v28 = *((unsigned char *)a1 + v14[6]);
  }
  else {
    char v28 = 1;
  }
  a2 = v38;
  LOBYTE(v44) = v28;
  HIBYTE(v44) = v28;
  if (v15 >= 0xF)
  {
    if (v14[7])
    {
      char v29 = *((unsigned char *)a1 + v14[7]);
      if (v29) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G14X::Encoders,AGX::G14X::Classes,AGX::G14X::ObjClasses>::buildDrawBufferState((uint64_t)&v39);
  long long v30 = v40;
  *(_OWORD *)(a6 + 112) = v39;
  *(_OWORD *)(a6 + 128) = v30;
  *(void *)(a6 + 144) = v41;
  AGX::Impl::FragmentProgramKey::initCommon((AGX *)a6, a1);
  int v31 = *(_DWORD *)(a6 + 104);
  unsigned int v32 = *(_DWORD *)(a6 + 100) & 0xFFFFFF7F;
  *(_DWORD *)(a6 + 40) &= ~0x10u;
  if (a2) {
    int v33 = 256;
  }
  else {
    int v33 = 0;
  }
  *(_DWORD *)(a6 + 100) = v32;
  *(_DWORD *)(a6 + 104) = v31 & 0xFFFFFEFF | v33;
  AGX::Impl::FragmentProgramKey::setSerializedDescriptor((AGX::Impl::FragmentProgramKey *)a6, a3);
  if (v12 != (char *)a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a6 + 256 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a6 + 256), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  LOWORD(v39) = 256;
  *(void *)((char *)&v39 + 2) = 0;
  *(_DWORD *)((char *)&v39 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a6, (unsigned __int8 *)&v39);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::CreateMeshProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v26 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v27 = *(std::string *)(a2 + 24);
  }
  int v17 = *(unsigned __int8 *)(a2 + 48);
  *(_OWORD *)(a8 + 104) = 0u;
  *(_DWORD *)(a8 + 8) = 10;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_DWORD *)(a8 + 96) = 0;
  *(void *)a8 = &unk_1F25DBD40;
  *(std::string *)(a8 + 152) = v26;
  long long v18 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(void *)(a8 + 192) = *((void *)&v27.__r_.__value_.__l + 2);
  if (a3) {
    int v19 = 128;
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  *(_OWORD *)(a8 + 176) = v18;
  *(unsigned char *)(a8 + 200) = v17;
  *(_DWORD *)(a8 + 56) = v20 | v19 | (16 * v17);
  AGX::Impl::MeshProgramKey::initCommon((AGX *)a8, a1);
  *(_DWORD *)(a8 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a8, a5);
  if (a8 + 104 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 104), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  if (a8 + 128 != a7) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 128), *(char **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5);
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v21;
  __int16 v23 = 256;
  uint64_t v24 = 0;
  int v25 = 0;
  return AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(a8, (unsigned __int8 *)&v23);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::CreateObjectProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)(a7 + 8) = 9;
  *(_OWORD *)(a7 + 104) = 0u;
  __int16 v11 = (char *)(a7 + 104);
  *(_OWORD *)(a7 + 120) = 0u;
  *(_OWORD *)(a7 + 136) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_DWORD *)(a7 + 96) = 0;
  *(void *)a7 = &unk_1F25DBD88;
  if (a2) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  if (a3) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a7 + 56) = v13 | v12;
  AGX::Impl::ObjectProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a7, a4);
  if (v11 != (char *)a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v11, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a7 + 128 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 128), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  __int16 v15 = 256;
  uint64_t v16 = 0;
  int v17 = 0;
  return AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(a7, (unsigned __int8 *)&v15);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::CreateVertexProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v21 = *(std::string *)(a2 + 24);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)(a7 + 8) = 3;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 76) = 0u;
  *(void *)a7 = &unk_1F25DBCF8;
  *(std::string *)(a7 + 144) = v20;
  *(std::string *)(a7 + 168) = v21;
  *(unsigned char *)(a7 + 192) = v14;
  *(void *)(a7 + 56) = v14 << 18;
  AGX::Impl::VertexProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a7, a3);
  if (a7 + 96 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a7 + 120 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a6) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a7 + 88) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v15;
  __int16 v17 = 256;
  uint64_t v18 = 0;
  int v19 = 0;
  return AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(a7, (unsigned __int8 *)&v17);
}

void AGX::ProgramKeyFactoryImpl<AGX::G14X::Classes,AGX::G14X::Encoders>::~ProgramKeyFactoryImpl()
{
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G15::Encoders,AGX::G15::Classes,AGX::G15::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v4 = *a2;
    unint64_t v5 = (char *)a2 - v4;
    unsigned int v6 = *(unsigned __int16 *)((char *)a2 - v4);
    if (v6 < 5) {
      goto LABEL_73;
    }
    uint64_t v7 = -v4;
    uint64_t v8 = *((unsigned __int16 *)v5 + 2);
    if (*((_WORD *)v5 + 2))
    {
      unsigned __int8 v9 = (char *)a2 + v8;
      uint64_t v10 = *(unsigned int *)((char *)a2 + v8);
      unint64_t v11 = *(unsigned int *)((char *)a2 + v8 + v10);
      if (v11)
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        uint64_t v14 = v8 + v10;
        while (1)
        {
          uint64_t v15 = *(unsigned int *)((char *)a2 + v14 + 4);
          uint64_t v16 = (char *)a2 + v14 + v15;
          __int16 v17 = (char *)a2 + v14 + v15 - *((int *)v16 + 1);
          if (*((unsigned __int16 *)v17 + 2) >= 5u)
          {
            uint64_t v18 = *((unsigned __int16 *)v17 + 4);
            if (v18)
            {
              unsigned int v19 = *(unsigned __int16 *)((char *)a2 + v14 + v15 + v18 + 4);
              if (v19) {
                break;
              }
            }
          }
LABEL_48:
          if (v13 <= 6)
          {
            ++v13;
            v12 += 2;
            v14 += 4;
            if (v13 < v11) {
              continue;
            }
          }
          uint64_t v49 = *a2;
          uint64_t v7 = -v49;
          unsigned int v6 = *(unsigned __int16 *)((char *)a2 - v49);
          goto LABEL_68;
        }
        std::string v20 = &texFormatUnsupported;
        if (v19 <= 0x275) {
          std::string v20 = *(&off_1E65EC558 + v19 - 1);
        }
        *(void *)(a1 + 8 * v13 + 96) = v20;
        unsigned int v21 = 1 << v13;
        *(_DWORD *)(a1 + 40) |= 1 << v13;
        uint64_t v22 = v15 - *((int *)v16 + 1);
        __int16 v23 = (char *)a2 + v14 + v22;
        unsigned int v24 = *((unsigned __int16 *)v23 + 2);
        if (v24 < 0x19)
        {
          int v27 = 0;
          __int32 v26 = 0;
          if (v24 < 0xF)
          {
LABEL_36:
            int v27 = 0;
            int v36 = 1 << v13;
LABEL_37:
            *(_DWORD *)(a1 + 52) |= v36;
            v38.i32[0] = v26;
            v38.i32[1] = v27 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v38, (int32x2_t)0x100000001)));
            if (v27 == 4) {
              int v39 = 1 << v13;
            }
            else {
              int v39 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v39;
            long long v40 = (char *)a2 + v14 + v15 - *((int *)v16 + 1);
            if (*((unsigned __int16 *)v40 + 2) >= 7u && (uint64_t v41 = *((unsigned __int16 *)v40 + 5)) != 0)
            {
              char v42 = 0;
              int v43 = *((unsigned __int8 *)a2 + v14 + v15 + v41 + 4);
              __int16 v44 = (char *)(a1 + v12 + 160);
              char v45 = 2;
              char v46 = 1;
              switch(v43)
              {
                case 0:
                case 1:
                  char v45 = 1;
                  char v42 = v43;
                  goto LABEL_54;
                case 3:
                  goto LABEL_59;
                case 4:
                  char v47 = 2;
                  goto LABEL_45;
                case 5:
                  goto LABEL_53;
                case 6:
                  char v42 = 1;
LABEL_53:
                  char v45 = 4;
                  goto LABEL_54;
                case 7:
                  char *v44 = 3;
                  *(unsigned char *)(a1 + v12 + 161) = 0;
LABEL_57:
                  int v48 = 3;
                  break;
                case 8:
                  char v46 = 3;
LABEL_59:
                  char *v44 = 2;
                  *(unsigned char *)(a1 + v12 + 161) = v46;
LABEL_60:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_46;
                default:
LABEL_54:
                  char *v44 = v45;
                  *(unsigned char *)(a1 + v12 + 161) = v42;
                  int v48 = 1;
                  switch(v43)
                  {
                    case 0:
                      goto LABEL_47;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_60;
                    case 7:
                      goto LABEL_57;
                    default:
                      goto LABEL_46;
                  }
                  break;
              }
            }
            else
            {
              char v47 = 0;
              __int16 v44 = (char *)(a1 + 2 * v13 + 160);
LABEL_45:
              char *v44 = 2;
              *(unsigned char *)(a1 + v12 + 161) = v47;
LABEL_46:
              int v48 = 2;
            }
LABEL_47:
            *(_WORD *)(a1 + 76) |= v48 << v12;
            unint64_t v11 = *(unsigned int *)&v9[v10];
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v25 = *((unsigned __int16 *)v23 + 14);
          if (v25) {
            __int32 v26 = *((unsigned __int8 *)a2 + v14 + v15 + v25 + 4);
          }
          else {
            __int32 v26 = 0;
          }
          if (v24 >= 0x1B && *(_WORD *)((char *)a2 + v14 + v22 + 30)) {
            int v27 = *((unsigned __int8 *)a2 + v14 + v15 + *(unsigned __int16 *)((char *)a2 + v14 + v22 + 30) + 4);
          }
          else {
            int v27 = 0;
          }
        }
        uint64_t v28 = *(unsigned __int16 *)((char *)a2 + v14 + v22 + 18);
        if (v28 && *(_WORD *)((char *)a2 + v14 + v15 + v28 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v27 & 0xFE) == 2) {
            int v29 = 1 << v13;
          }
          else {
            int v29 = 0;
          }
          *(_DWORD *)(a1 + 68) |= v29;
          long long v30 = (char *)a2 + v14 + v15 - *((int *)v16 + 1);
          if (*((unsigned __int16 *)v30 + 2) >= 0x11u && (uint64_t v31 = *((unsigned __int16 *)v30 + 10)) != 0)
          {
            char v32 = 0;
            int v33 = *((unsigned __int8 *)a2 + v14 + v15 + v31 + 4);
            char v34 = 2;
            switch(v33)
            {
              case 0:
              case 1:
                char v34 = 1;
                char v32 = v33;
                break;
              case 3:
                char v32 = 1;
                break;
              case 4:
                char v32 = 2;
                break;
              case 5:
                goto LABEL_63;
              case 6:
                char v32 = 1;
LABEL_63:
                char v34 = 4;
                break;
              case 7:
                char v32 = 0;
                char v34 = 3;
                break;
              case 8:
                char v32 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            char v32 = 0;
            char v34 = 2;
          }
          uint64_t v35 = a1 + v12;
          *(unsigned char *)(v35 + 176) = v34;
          *(unsigned char *)(v35 + 177) = v32;
        }
        int v36 = 0;
        if (v26 == 2) {
          int v37 = 1 << v13;
        }
        else {
          int v37 = 0;
        }
        *(_DWORD *)(a1 + 56) |= v37;
        if (v27) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
    }
LABEL_68:
    if (v6 >= 7
      && *(_WORD *)((char *)a2 + v7 + 6)
      && (uint64_t v50 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v7 + 6)), (v50 & 0xFFFFFFFE) != 0))
    {
      if (v50 > 0x7FF) {
        LODWORD(v50) = 2048;
      }
    }
    else
    {
LABEL_73:
      LODWORD(v50) = 1;
    }
    *(_DWORD *)(a1 + 80) = v50;
    char v51 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v52 = *v51;
    if (v52 < 0xB)
    {
      char v54 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v52 < 9)
      {
LABEL_84:
        *(unsigned char *)(a1 + 85) = v54;
        return a1;
      }
    }
    else
    {
      if (v51[5]) {
        char v53 = *((unsigned char *)a2 + v51[5]);
      }
      else {
        char v53 = 1;
      }
      *(unsigned char *)(a1 + 84) = v53;
    }
    uint64_t v55 = v51[4];
    if (v55) {
      char v54 = *((unsigned char *)a2 + v55);
    }
    else {
      char v54 = 1;
    }
    goto LABEL_84;
  }
  return a1;
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G15::Encoders,AGX::G15::Classes,AGX::G15::ObjClasses>::partitionSizeFromFormatAndCompCount(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      return a2;
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 22:
      a2 = (2 * a2);
      break;
    case 10:
    case 11:
    case 17:
      a2 = (4 * a2);
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      a2 = 4;
      break;
    default:
      a2 = 0;
      break;
  }
  return a2;
}

uint64_t AGX::FramebufferCompilerConfigGen3<AGX::G15::Encoders,AGX::G15::Classes,AGX::G15::ObjClasses>::buildDrawBufferState(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(result + 40);
  unsigned int v4 = v3;
  do
  {
    unsigned int v5 = v4;
    if (!v4) {
      break;
    }
    unsigned int v6 = __clz(__rbit32(v4));
    uint64_t v7 = *(void *)(v1 + 8 * v6 + 96);
    if (*(_DWORD *)(v7 + 32) == 18) {
      int v8 = 9;
    }
    else {
      int v8 = *(_DWORD *)(v7 + 32);
    }
    double result = AGX::FramebufferCompilerConfig<AGX::G15::Encoders,AGX::G15::Classes,AGX::G15::ObjClasses>::partitionSizeFromFormatAndCompCount(v8, *(unsigned int *)(v7 + 28));
    v2 += result;
    int v9 = 1 << v6;
    if (v2 > 0x100) {
      int v9 = 0;
    }
    unsigned int v4 = v9 ^ v5;
  }
  while (v2 < 0x101);
  if (v3)
  {
    LODWORD(v10) = 0;
    int v11 = 0;
    char v12 = 0;
    int v13 = 0;
    double result = 4293922528;
    unsigned int v36 = v5;
    uint64_t v35 = v1;
    do
    {
      uint64_t v14 = __clz(__rbit32(v3));
      uint64_t v15 = *(unsigned int **)(v1 + 8 * v14 + 96);
      uint64_t v16 = v15[7];
      if (v15[8] == 18 && v5 == 0) {
        int v18 = 9;
      }
      else {
        int v18 = v15[8];
      }
      int v19 = 1 << v14;
      if (v18 == 18) {
        int v20 = 1 << v14;
      }
      else {
        int v20 = 0;
      }
      if (v18 == 3)
      {
        int v21 = (v15[21] != 0) << 8;
        int v22 = 1;
      }
      else
      {
        int v23 = v13;
        int v24 = AGX::FramebufferCompilerConfig<AGX::G15::Encoders,AGX::G15::Classes,AGX::G15::ObjClasses>::partitionSizeFromFormatAndCompCount(v18, v16);
        int v13 = v23;
        unsigned int v5 = v36;
        int v19 = 1 << v14;
        uint64_t v1 = v35;
        LODWORD(v16) = v24;
        double result = 4293922528;
        int v21 = 0;
        int v22 = 1;
        switch(v18)
        {
          case 2:
          case 4:
          case 5:
            break;
          case 6:
          case 7:
          case 8:
          case 9:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 22:
            int v21 = 0;
            int v22 = 2;
            break;
          case 10:
          case 11:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
            int v21 = 0;
            int v22 = 4;
            break;
          default:
            int v21 = 0;
            int v22 = 0;
            break;
        }
      }
      v13 |= v20;
      int v25 = v22 - 1;
      int v26 = -v22;
      int v27 = (v25 + v10) & v26;
      v12 |= (v27 + v16) > 0x100;
      int v28 = (v25 + v11) & v26;
      if (v12) {
        int v11 = v28 + v16;
      }
      else {
        LOBYTE(v28) = v27;
      }
      unsigned int v29 = v21 & 0xFFF00FFF | *(_DWORD *)(v1 + 4 * v14) & 0xFFF00EE0 | v18 & 0x1F | (v28 << 12);
      *(_DWORD *)(v1 + 4 * v14) = v29;
      unsigned int v30 = v29 & 0xFFFFF1FF | ((v15[19] & 7) << 9);
      *(_DWORD *)(v1 + 4 * v14) = v30;
      if (v12) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = (v27 + v16);
      }
      *(_DWORD *)(v1 + 4 * v14) = v30 & 0xFFFFFF1F | (32 * (v15[7] & 7));
      v3 ^= v19;
    }
    while (v3);
    unint64_t v31 = 256;
    if (((v10 + 7) & 0x1FFFFFF00) == 0) {
      unint64_t v31 = (v10 + 7) & 0x1FFFFFFF8;
    }
    if (v31 <= 8) {
      LODWORD(v31) = 8;
    }
    int v32 = v31 << 16;
    if (v12)
    {
      int v32 = 0x1000000;
      int v33 = 0x2000000;
    }
    else
    {
      int v33 = 0;
    }
    int v34 = *(unsigned __int8 *)(v1 + 40) | v33;
  }
  else
  {
    int v11 = 0;
    int v13 = 0;
    int v34 = 0;
    int v32 = 0x80000;
  }
  *(_DWORD *)(v1 + 32) = v34 | ((*(unsigned char *)(v1 + 84) & 0xF) << 8) | *(_DWORD *)(v1 + 32) & 0xFC000000 | v32 | ((*(unsigned char *)(v1 + 85) & 0xF) << 12);
  *(_DWORD *)(v1 + 88) = v11;
  *(_DWORD *)(v1 + 44) = v13;
  return result;
}

uint64_t AGX::PBEStateEncoderGen9<kAGXRevG15>::StateFields::getDimensionality(int a1, char a2, unsigned int a3)
{
  if (a3 < 2) {
    unsigned __int8 v3 = 2;
  }
  else {
    unsigned __int8 v3 = 3;
  }
  if (a2)
  {
    if ((a2 & 2) != 0) {
      unsigned __int8 v4 = 8;
    }
    else {
      unsigned __int8 v4 = v3;
    }
    BOOL v5 = a1 == 4;
LABEL_11:
    if (v5) {
      return v3;
    }
  }
  else
  {
    unsigned __int8 v4 = 5;
    switch(a1)
    {
      case 1:
        unsigned __int8 v4 = 2;
        break;
      case 2:
        BOOL v5 = (a2 & 2) == 0;
        unsigned __int8 v4 = 4;
        unsigned __int8 v3 = 2;
        goto LABEL_11;
      case 3:
        return v4;
      case 4:
        unsigned __int8 v4 = v3;
        break;
      default:
        unsigned __int8 v4 = -1;
        break;
    }
  }
  return v4;
}

uint64_t AGCTargetImpl<AGX::G15::Classes,AGX::G15::Encoders>::maxMSAASampleCount()
{
  return 4;
}

uint64_t AGCTargetImpl<AGX::G15::Classes,AGX::G15::Encoders>::requiresRayTracingEmulation()
{
  return 0;
}

void *AGCTargetImpl<AGX::G15::Classes,AGX::G15::Encoders>::GetLegalizationPasses@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v9 = "air-degenerate-vertex-amplification-emulation";
  char v10 = 0;
  int v11 = "air-raytracing-emulation,indirect-acceleration-structures";
  char v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int v13 = "mtl-fetch-all-unaligned";
  char v14 = 1;
  uint64_t v15 = "air-bfloat-emulation";
  char v16 = 0;
  double result = malloc_type_malloc(0x20uLL, 0x10040436913F5uLL);
  uint64_t v6 = 0;
  int v7 = 0;
  *a2 = 0;
  do
  {
    if (LOBYTE((&v9)[v6 + 1]))
    {
      int v8 = (&v9)[v6];
      *a2 = v7 + 1;
      result[v7++] = v8;
    }
    v6 += 2;
  }
  while (v6 != 8);
  *a3 = result;
  return result;
}

void AGCTargetImpl<AGX::G15::Classes,AGX::G15::Encoders>::CreateTGSizeToTempTable(uint64_t a1, _DWORD *a2)
{
  *a2 = 15;
  operator new[]();
}

void AGCTargetImpl<AGX::G15::Classes,AGX::G15::Encoders>::CreateProgramKeyFactory()
{
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15::Classes,AGX::G15::Encoders>::CreateBVHBuilderProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBCB8;
  *(_DWORD *)(a2 + 40) = 0;
  return AGX::BVHBuilderProgramKey::initializeWithDescriptor(a2, a1);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15::Classes,AGX::G15::Encoders>::CreateEndOfTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_1F25DBC38;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 118) = 0;
  AGX::FramebufferCompilerConfig<AGX::G15::Encoders,AGX::G15::Classes,AGX::G15::ObjClasses>::FramebufferCompilerConfig((uint64_t)v31, a1);
  uint64_t result = AGX::FramebufferCompilerConfigGen3<AGX::G15::Encoders,AGX::G15::Classes,AGX::G15::ObjClasses>::buildDrawBufferState((uint64_t)v31);
  v29[0] = v31[0];
  v29[1] = v31[1];
  unsigned int v5 = v32;
  uint64_t v30 = v32;
  unsigned int v6 = v39;
  unsigned int v7 = v33;
  int v24 = v34;
  unint64_t v8 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v32 >> 12) << 32) | ((unint64_t)BYTE2(v32) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v8;
  if (v7)
  {
    int v9 = 0;
    int v28 = 0;
    int v10 = 0;
    unsigned int v20 = (unsigned __int16)v5 >> 12;
    int v23 = v38;
    unsigned int v22 = HIWORD(v5) & 0x1FF;
    int v21 = v37 & ~v36 | v35;
    unsigned int v19 = v36 & ~v37 | v35;
    do
    {
      uint64_t v11 = __clz(__rbit32(v7));
      unsigned int v12 = *((_DWORD *)v29 + v11);
      unsigned int v13 = *(_DWORD *)(v3 + 4 * v11) & 0xE3000000;
      uint64_t result = AGX::PBEStateEncoderGen9<kAGXRevG15>::StateFields::getDimensionality(v40[2 * v11], v40[2 * v11 + 1], v6);
      *(_DWORD *)(v3 + 4 * v11) = v13 & 0xE3FFE0FF | (result << 16) & 0xE3FFFFFF | ((v12 & 0x1F) << 8) | (v12 >> 5 << 26) | ((v12 >> 12) / v22);
      v9 |= 1 << v11;
      unsigned int v27 = (v12 >> 12) / v22;
      v28 |= (1 << v11) & v21;
      int v14 = v23 & (1 << v11);
      v10 |= v14;
      if ((v24 & (1 << v11)) != 0)
      {
        int v26 = v10;
        int v15 = (v12 & 0x1F) << 8;
        int v25 = (v12 << 21) & 0x1C000000;
        unsigned int v16 = v11 + 8;
        int v17 = (v12 << 16) & 0x1000000;
        if (v20 <= 1) {
          int v17 = 0;
        }
        unsigned int v18 = *(_DWORD *)(v3 + 4 * (v11 + 8)) & 0xE2000000 | v17;
        uint64_t result = AGX::PBEStateEncoderGen9<kAGXRevG15>::StateFields::getDimensionality(v40[2 * v11 + 16], v40[2 * v11 + 17], v6);
        *(_DWORD *)(v3 + 4 * v16) = v18 | (result << 16) | v15 | v25 | v27;
        v9 |= 256 << v11;
        v28 |= ((v19 >> v11) & 1) << v16;
        int v10 = ((v14 != 0) << v16) | v26;
      }
      v7 ^= 1 << v11;
    }
    while (v7);
    unint64_t v8 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v10) = 0;
    LOWORD(v28) = 0;
    LOWORD(v9) = 0;
  }
  *(_WORD *)(a2 + 120) = v9;
  *(_WORD *)(a2 + 122) = v28;
  *(_WORD *)(a2 + 124) = v10;
  *(void *)(a2 + 112) = v8 & 0xFFFFFFFF00000000 | (unsigned __int16)(v9 & ~(_WORD)v28) | ((unint64_t)(unsigned __int16)(v9 & v10) << 16);
  return result;
}

double AGX::ProgramKeyFactoryImpl<AGX::G15::Classes,AGX::G15::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBBF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfig<AGX::G15::Encoders,AGX::G15::Classes,AGX::G15::ObjClasses>::FramebufferCompilerConfig((uint64_t)v6, a1);
  AGX::FramebufferCompilerConfigGen3<AGX::G15::Encoders,AGX::G15::Classes,AGX::G15::ObjClasses>::buildDrawBufferState((uint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15::Classes,AGX::G15::Encoders>::CreateTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 8) = 5;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F25DBE10;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(void *)(a4 + 200) = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  int v32 = 1;
  __int16 v33 = 0;
  int v34 = 0;
  memset(v35, 0, sizeof(v35));
  bzero(&v28, 0x28uLL);
  if (!a1) {
    goto LABEL_24;
  }
  int v8 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v9 = *v8;
  if (v9 < 0xF) {
    goto LABEL_15;
  }
  uint64_t v10 = v8[7];
  if (v8[7])
  {
    uint64_t v11 = *(unsigned int *)((char *)a1 + v10);
    unsigned int v12 = (unsigned int *)((char *)a1 + v10 + v11);
    unint64_t v13 = *v12;
    if (v13)
    {
      unint64_t v14 = 0;
      int v15 = DWORD2(v30);
      unsigned int v16 = (char *)a1 + v10 + v11;
      do
      {
        int v17 = &v16[4 * v14];
        uint64_t v18 = *((unsigned int *)v17 + 1);
        unsigned int v19 = (char *)v12 + v18 - *(int *)&v17[v18 + 4];
        if (*((unsigned __int16 *)v19 + 2) >= 5u)
        {
          uint64_t v20 = *((unsigned __int16 *)v19 + 4);
          if (v20)
          {
            unsigned int v21 = *(unsigned __int16 *)((char *)v12 + v18 + v20 + 4);
            if (v21)
            {
              unsigned int v22 = &texFormatUnsupported;
              if (v21 <= 0x275) {
                unsigned int v22 = *(&off_1E65EC558 + v21 - 1);
              }
              *((void *)v35 + v14) = v22;
              v15 |= 1 << v14;
            }
          }
        }
        if (v14 > 6) {
          break;
        }
        ++v14;
        ++v12;
      }
      while (v14 < v13);
      DWORD2(v30) = v15;
LABEL_15:
      if (v9 <= 0xA)
      {
        LOBYTE(v24) = 1;
        LOBYTE(v33) = 1;
LABEL_23:
        HIBYTE(v33) = v24;
        goto LABEL_24;
      }
    }
  }
  if (v8[5]) {
    char v23 = *((unsigned char *)a1 + v8[5]);
  }
  else {
    char v23 = 1;
  }
  LOBYTE(v33) = v23;
  HIBYTE(v33) = v23;
  if (v9 >= 0xD)
  {
    uint64_t v25 = v8[6];
    if (v25)
    {
      int v24 = *((unsigned __int8 *)a1 + v25);
      if (v24) {
        goto LABEL_23;
      }
    }
  }
LABEL_24:
  AGX::FramebufferCompilerConfigGen3<AGX::G15::Encoders,AGX::G15::Classes,AGX::G15::ObjClasses>::buildDrawBufferState((uint64_t)&v28);
  long long v26 = v29;
  *(_OWORD *)(a4 + 112) = v28;
  *(_OWORD *)(a4 + 128) = v26;
  *(void *)(a4 + 144) = v30;
  AGX::Impl::TileProgramKey::initCommon(a4, a1);
  *(_DWORD *)(a4 + 100) &= ~0x80u;
  if (a4 + 160 != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 160), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a4 + 184 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 184), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  *(void *)((char *)&v28 + 6) = 0;
  *(void *)&long long v28 = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a4, (unsigned __int8 *)&v28);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15::Classes,AGX::G15::Encoders>::CreateComputeProgramKey@<X0>(AGX *a1@<X1>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 8) = 6;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)a5 = &unk_1F25DBE50;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 64), "");
  *(unsigned char *)(a5 + 88) = 0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  AGX::Impl::ComputeProgramKey::initCommon((AGX *)a5, a1);
  *(int8x8_t *)(a5 + 52) = vand_s8(*(int8x8_t *)(a5 + 52), (int8x8_t)0xFFFFFFFEFFFFFF7FLL);
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a5, a2);
  if (a5 + 96 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a5 + 120 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  memset(v11, 0, 14);
  return AGX::Impl::ComputeProgramKey::setDeviceOptions(a5, (unsigned __int8 *)v11);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15::Classes,AGX::G15::Encoders>::CreateFragmentProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 8) = 4;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 232) = 0u;
  unsigned int v12 = (char *)(a6 + 232);
  *(void *)a6 = &unk_1F25DBDD0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_OWORD *)(a6 + 120) = 0u;
  *(_OWORD *)(a6 + 136) = 0u;
  *(_OWORD *)(a6 + 152) = 0u;
  *(_OWORD *)(a6 + 168) = 0u;
  *(_OWORD *)(a6 + 184) = 0u;
  *(_OWORD *)(a6 + 200) = 0u;
  *(_OWORD *)(a6 + 209) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 264) = 0u;
  long long v38 = 0u;
  memset(v39, 0, sizeof(v39));
  long long v36 = 0u;
  long long v37 = 0u;
  int v40 = 1;
  __int16 v41 = 0;
  int v42 = 0;
  memset(v43, 0, sizeof(v43));
  bzero(&v36, 0x28uLL);
  if (!a1) {
    goto LABEL_24;
  }
  unint64_t v13 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  unsigned int v14 = *v13;
  if (v14 >= 0x17)
  {
    uint64_t v15 = v13[11];
    if (!v13[11]) {
      goto LABEL_16;
    }
    uint64_t v16 = *(unsigned int *)((char *)a1 + v15);
    int v17 = (unsigned int *)((char *)a1 + v15 + v16);
    unint64_t v18 = *v17;
    if (!v18) {
      goto LABEL_16;
    }
    unint64_t v19 = 0;
    int v20 = DWORD2(v38);
    unsigned int v21 = (char *)a1 + v15 + v16;
    do
    {
      unsigned int v22 = &v21[4 * v19];
      uint64_t v23 = *((unsigned int *)v22 + 1);
      int v24 = (char *)v17 + v23 - *(int *)&v22[v23 + 4];
      if (*((unsigned __int16 *)v24 + 2) >= 5u)
      {
        uint64_t v25 = *((unsigned __int16 *)v24 + 4);
        if (v25)
        {
          unsigned int v26 = *(unsigned __int16 *)((char *)v17 + v23 + v25 + 4);
          if (v26)
          {
            unsigned int v27 = &texFormatUnsupported;
            if (v26 <= 0x275) {
              unsigned int v27 = *(&off_1E65EC558 + v26 - 1);
            }
            *((void *)v43 + v19) = v27;
            v20 |= 1 << v19;
          }
        }
      }
      if (v19 > 6) {
        break;
      }
      ++v19;
      ++v17;
    }
    while (v19 < v18);
    DWORD2(v38) = v20;
  }
  if (v14 <= 0xC)
  {
    LOBYTE(v29) = 1;
    LOBYTE(v41) = 1;
LABEL_23:
    HIBYTE(v41) = v29;
    goto LABEL_24;
  }
LABEL_16:
  if (v13[6]) {
    char v28 = *((unsigned char *)a1 + v13[6]);
  }
  else {
    char v28 = 1;
  }
  LOBYTE(v41) = v28;
  HIBYTE(v41) = v28;
  if (v14 >= 0xF)
  {
    uint64_t v30 = v13[7];
    if (v30)
    {
      int v29 = *((unsigned __int8 *)a1 + v30);
      if (v29) {
        goto LABEL_23;
      }
    }
  }
LABEL_24:
  AGX::FramebufferCompilerConfigGen3<AGX::G15::Encoders,AGX::G15::Classes,AGX::G15::ObjClasses>::buildDrawBufferState((uint64_t)&v36);
  long long v31 = v37;
  *(_OWORD *)(a6 + 112) = v36;
  *(_OWORD *)(a6 + 128) = v31;
  *(void *)(a6 + 144) = v38;
  AGX::Impl::FragmentProgramKey::initCommon((AGX *)a6, a1);
  int v32 = *(_DWORD *)(a6 + 104);
  unsigned int v33 = *(_DWORD *)(a6 + 100) & 0xFFFFFF7F;
  *(_DWORD *)(a6 + 40) &= ~0x10u;
  if (a2) {
    int v34 = 256;
  }
  else {
    int v34 = 0;
  }
  *(_DWORD *)(a6 + 100) = v33;
  *(_DWORD *)(a6 + 104) = v32 & 0xFFFFFEFF | v34;
  AGX::Impl::FragmentProgramKey::setSerializedDescriptor((AGX::Impl::FragmentProgramKey *)a6, a3);
  if (v12 != (char *)a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a6 + 256 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a6 + 256), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  *(void *)((char *)&v36 + 6) = 0;
  *(void *)&long long v36 = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a6, (unsigned __int8 *)&v36);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15::Classes,AGX::G15::Encoders>::CreateMeshProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v24 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v25 = *(std::string *)(a2 + 24);
  }
  int v17 = *(unsigned __int8 *)(a2 + 48);
  *(_OWORD *)(a8 + 104) = 0u;
  *(_DWORD *)(a8 + 8) = 10;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_DWORD *)(a8 + 96) = 0;
  *(void *)a8 = &unk_1F25DBD40;
  *(std::string *)(a8 + 152) = v24;
  long long v18 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
  *(void *)(a8 + 192) = *((void *)&v25.__r_.__value_.__l + 2);
  if (a3) {
    int v19 = 128;
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  *(_OWORD *)(a8 + 176) = v18;
  *(unsigned char *)(a8 + 200) = v17;
  *(_DWORD *)(a8 + 56) = v20 | v19 | (16 * v17);
  AGX::Impl::MeshProgramKey::initCommon((AGX *)a8, a1);
  *(_DWORD *)(a8 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a8, a5);
  if (a8 + 104 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 104), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  if (a8 + 128 != a7) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 128), *(char **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5);
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v21;
  memset(v23, 0, 14);
  return AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(a8, (unsigned __int8 *)v23);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15::Classes,AGX::G15::Encoders>::CreateObjectProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)(a7 + 8) = 9;
  *(_OWORD *)(a7 + 104) = 0u;
  uint64_t v11 = (char *)(a7 + 104);
  *(_OWORD *)(a7 + 120) = 0u;
  *(_OWORD *)(a7 + 136) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_DWORD *)(a7 + 96) = 0;
  *(void *)a7 = &unk_1F25DBD88;
  if (a2) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  if (a3) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a7 + 56) = v13 | v12;
  AGX::Impl::ObjectProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a7, a4);
  if (v11 != (char *)a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v11, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a7 + 128 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 128), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  memset(v15, 0, 14);
  return AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(a7, (unsigned __int8 *)v15);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15::Classes,AGX::G15::Encoders>::CreateVertexProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v19 = *(std::string *)(a2 + 24);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)(a7 + 8) = 3;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 76) = 0u;
  *(void *)a7 = &unk_1F25DBCF8;
  *(std::string *)(a7 + 144) = v18;
  *(std::string *)(a7 + 168) = v19;
  *(unsigned char *)(a7 + 192) = v14;
  *(void *)(a7 + 56) = v14 << 18;
  AGX::Impl::VertexProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a7, a3);
  if (a7 + 96 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a7 + 120 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a6) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a7 + 88) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v15;
  memset(v17, 0, 14);
  return AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(a7, (unsigned __int8 *)v17);
}

void AGX::ProgramKeyFactoryImpl<AGX::G15::Classes,AGX::G15::Encoders>::~ProgramKeyFactoryImpl()
{
}

uint64_t AGCTargetImplG15P::requiresRayTracingEmulation(AGCTargetImplG15P *this)
{
  return 1;
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G15_AGX2::Encoders,AGX::G15_AGX2::Classes,AGX::G15_AGX2::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = (char *)a2 - v5;
    unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v5);
    if (v7 < 5) {
      goto LABEL_71;
    }
    uint64_t v8 = -v5;
    uint64_t v9 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2))
    {
      uint64_t v10 = (char *)a2 + v9;
      uint64_t v11 = *(unsigned int *)((char *)a2 + v9);
      unint64_t v12 = *(unsigned int *)((char *)a2 + v9 + v11);
      if (v12)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = v9 + v11;
        while (1)
        {
          uint64_t v16 = *(unsigned int *)((char *)a2 + v15 + 4);
          int v17 = (char *)a2 + v15 + v16;
          std::string v18 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v18 + 2) >= 5u)
          {
            uint64_t v19 = *((unsigned __int16 *)v18 + 4);
            if (v19)
            {
              int v20 = (char *)a2 + v15 + v16 + v19;
              if (*((_WORD *)v20 + 2)) {
                break;
              }
            }
          }
LABEL_46:
          if (v14 <= 6)
          {
            ++v14;
            v13 += 2;
            v15 += 4;
            if (v14 < v12) {
              continue;
            }
          }
          uint64_t v47 = *a2;
          uint64_t v8 = -v47;
          unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v47);
          goto LABEL_66;
        }
        *(void *)(a1 + 8 * v14 + 96) = AGX::G15_AGX2::TextureFormatTable::chooseTextureFormatCPP((AGX::G15_AGX2::TextureFormatTable *)*((unsigned __int16 *)v20 + 2), v4);
        unsigned int v21 = 1 << v14;
        *(_DWORD *)(a1 + 40) |= 1 << v14;
        uint64_t v22 = v16 - *((int *)v17 + 1);
        unsigned int v23 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 4);
        if (v23 < 0x19)
        {
          int v25 = 0;
          __int32 v24 = 0;
          if (v23 < 0xF)
          {
LABEL_34:
            int v25 = 0;
            int v34 = 1 << v14;
LABEL_35:
            *(_DWORD *)(a1 + 52) |= v34;
            v36.i32[0] = v24;
            v36.i32[1] = v25 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v36, (int32x2_t)0x100000001)));
            if (v25 == 4) {
              int v37 = 1 << v14;
            }
            else {
              int v37 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v37;
            long long v38 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
            if (*((unsigned __int16 *)v38 + 2) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 5)) != 0)
            {
              char v40 = 0;
              int v41 = *((unsigned __int8 *)a2 + v15 + v16 + v39 + 4);
              int v42 = (char *)(a1 + v13 + 160);
              char v43 = 2;
              char v44 = 1;
              switch(v41)
              {
                case 0:
                case 1:
                  char v43 = 1;
                  char v40 = v41;
                  goto LABEL_52;
                case 3:
                  goto LABEL_57;
                case 4:
                  char v45 = 2;
                  goto LABEL_43;
                case 5:
                  goto LABEL_51;
                case 6:
                  char v40 = 1;
LABEL_51:
                  char v43 = 4;
                  goto LABEL_52;
                case 7:
                  char *v42 = 3;
                  *(unsigned char *)(a1 + v13 + 161) = 0;
LABEL_55:
                  int v46 = 3;
                  break;
                case 8:
                  char v44 = 3;
LABEL_57:
                  char *v42 = 2;
                  *(unsigned char *)(a1 + v13 + 161) = v44;
LABEL_58:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_44;
                default:
LABEL_52:
                  char *v42 = v43;
                  *(unsigned char *)(a1 + v13 + 161) = v40;
                  int v46 = 1;
                  switch(v41)
                  {
                    case 0:
                      goto LABEL_45;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_58;
                    case 7:
                      goto LABEL_55;
                    default:
                      goto LABEL_44;
                  }
                  break;
              }
            }
            else
            {
              char v45 = 0;
              int v42 = (char *)(a1 + 2 * v14 + 160);
LABEL_43:
              char *v42 = 2;
              *(unsigned char *)(a1 + v13 + 161) = v45;
LABEL_44:
              int v46 = 2;
            }
LABEL_45:
            *(_WORD *)(a1 + 76) |= v46 << v13;
            unint64_t v12 = *(unsigned int *)&v10[v11];
            goto LABEL_46;
          }
        }
        else
        {
          if (*(_WORD *)((char *)a2 + v15 + v22 + 28)) {
            __int32 v24 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 28) + 4);
          }
          else {
            __int32 v24 = 0;
          }
          if (v23 >= 0x1B && *(_WORD *)((char *)a2 + v15 + v22 + 30)) {
            int v25 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 30) + 4);
          }
          else {
            int v25 = 0;
          }
        }
        uint64_t v26 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 18);
        if (v26 && *(_WORD *)((char *)a2 + v15 + v16 + v26 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v25 & 0xFE) == 2) {
            int v27 = 1 << v14;
          }
          else {
            int v27 = 0;
          }
          *(_DWORD *)(a1 + 68) |= v27;
          char v28 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v28 + 2) >= 0x11u && (uint64_t v29 = *((unsigned __int16 *)v28 + 10)) != 0)
          {
            char v30 = 0;
            int v31 = *((unsigned __int8 *)a2 + v15 + v16 + v29 + 4);
            char v32 = 2;
            switch(v31)
            {
              case 0:
              case 1:
                char v32 = 1;
                char v30 = v31;
                break;
              case 3:
                char v30 = 1;
                break;
              case 4:
                char v30 = 2;
                break;
              case 5:
                goto LABEL_61;
              case 6:
                char v30 = 1;
LABEL_61:
                char v32 = 4;
                break;
              case 7:
                char v30 = 0;
                char v32 = 3;
                break;
              case 8:
                char v30 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            char v30 = 0;
            char v32 = 2;
          }
          uint64_t v33 = a1 + v13;
          *(unsigned char *)(v33 + 176) = v32;
          *(unsigned char *)(v33 + 177) = v30;
        }
        int v34 = 0;
        if (v24 == 2) {
          int v35 = 1 << v14;
        }
        else {
          int v35 = 0;
        }
        *(_DWORD *)(a1 + 56) |= v35;
        if (v25) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
LABEL_66:
    if (v7 >= 7
      && *(_WORD *)((char *)a2 + v8 + 6)
      && (uint64_t v48 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v8 + 6)), (v48 & 0xFFFFFFFE) != 0))
    {
      if (v48 > 0x7FF) {
        LODWORD(v48) = 2048;
      }
    }
    else
    {
LABEL_71:
      LODWORD(v48) = 1;
    }
    *(_DWORD *)(a1 + 80) = v48;
    uint64_t v49 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v50 = *v49;
    if (v50 < 0xB)
    {
      char v52 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v50 < 9)
      {
LABEL_82:
        *(unsigned char *)(a1 + 85) = v52;
        return a1;
      }
    }
    else
    {
      if (v49[5]) {
        char v51 = *((unsigned char *)a2 + v49[5]);
      }
      else {
        char v51 = 1;
      }
      *(unsigned char *)(a1 + 84) = v51;
    }
    uint64_t v53 = v49[4];
    if (v53) {
      char v52 = *((unsigned char *)a2 + v53);
    }
    else {
      char v52 = 1;
    }
    goto LABEL_82;
  }
  return a1;
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G15_AGX2::Encoders,AGX::G15_AGX2::Classes,AGX::G15_AGX2::ObjClasses>::partitionSizeFromFormatAndCompCount(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      return a2;
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 22:
      a2 = (2 * a2);
      break;
    case 10:
    case 11:
    case 17:
      a2 = (4 * a2);
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      a2 = 4;
      break;
    default:
      a2 = 0;
      break;
  }
  return a2;
}

uint64_t AGX::FramebufferCompilerConfigGen3<AGX::G15_AGX2::Encoders,AGX::G15_AGX2::Classes,AGX::G15_AGX2::ObjClasses>::buildDrawBufferState(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(result + 40);
  unsigned int v4 = v3;
  do
  {
    unsigned int v5 = v4;
    if (!v4) {
      break;
    }
    unsigned int v6 = __clz(__rbit32(v4));
    uint64_t v7 = *(void *)(v1 + 8 * v6 + 96);
    if (*(_DWORD *)(v7 + 32) == 18) {
      int v8 = 9;
    }
    else {
      int v8 = *(_DWORD *)(v7 + 32);
    }
    double result = AGX::FramebufferCompilerConfig<AGX::G15_AGX2::Encoders,AGX::G15_AGX2::Classes,AGX::G15_AGX2::ObjClasses>::partitionSizeFromFormatAndCompCount(v8, *(unsigned int *)(v7 + 28));
    v2 += result;
    int v9 = 1 << v6;
    if (v2 > 0x40) {
      int v9 = 0;
    }
    unsigned int v4 = v9 ^ v5;
  }
  while (v2 < 0x41);
  if (v3)
  {
    LODWORD(v10) = 0;
    int v11 = 0;
    char v12 = 0;
    int v13 = 0;
    double result = 4293922528;
    unsigned int v38 = v5;
    uint64_t v37 = v1;
    do
    {
      uint64_t v14 = __clz(__rbit32(v3));
      uint64_t v15 = *(unsigned int **)(v1 + 8 * v14 + 96);
      uint64_t v16 = v15[7];
      if (v15[8] == 18 && v5 == 0) {
        int v18 = 9;
      }
      else {
        int v18 = v15[8];
      }
      int v19 = 1 << v14;
      if (v18 == 18) {
        int v20 = 1 << v14;
      }
      else {
        int v20 = 0;
      }
      if (v18 == 3)
      {
        int v21 = (v15[21] != 0) << 8;
        int v22 = 1;
      }
      else
      {
        int v23 = v13;
        int v24 = AGX::FramebufferCompilerConfig<AGX::G15_AGX2::Encoders,AGX::G15_AGX2::Classes,AGX::G15_AGX2::ObjClasses>::partitionSizeFromFormatAndCompCount(v18, v16);
        int v13 = v23;
        unsigned int v5 = v38;
        int v19 = 1 << v14;
        uint64_t v1 = v37;
        LODWORD(v16) = v24;
        double result = 4293922528;
        int v21 = 0;
        int v22 = 1;
        switch(v18)
        {
          case 2:
          case 4:
          case 5:
            break;
          case 6:
          case 7:
          case 8:
          case 9:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 22:
            int v21 = 0;
            int v22 = 2;
            break;
          case 10:
          case 11:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
            int v21 = 0;
            int v22 = 4;
            break;
          default:
            int v21 = 0;
            int v22 = 0;
            break;
        }
      }
      v13 |= v20;
      int v25 = v22 - 1;
      int v26 = -v22;
      int v27 = (v25 + v10) & v26;
      v12 |= (v27 + v16) > 0x40;
      int v28 = (v25 + v11) & v26;
      unsigned __int8 v29 = v28 + 64;
      int v30 = v28 + v16;
      if (v12) {
        int v11 = v30;
      }
      else {
        unsigned __int8 v29 = v27;
      }
      unsigned int v31 = v21 & 0xFFF00FFF | *(_DWORD *)(v1 + 4 * v14) & 0xFFF00EE0 | v18 & 0x1F | (v29 << 12);
      *(_DWORD *)(v1 + 4 * v14) = v31;
      unsigned int v32 = v31 & 0xFFFFF1FF | ((v15[19] & 7) << 9);
      *(_DWORD *)(v1 + 4 * v14) = v32;
      if (v12) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = (v27 + v16);
      }
      *(_DWORD *)(v1 + 4 * v14) = v32 & 0xFFFFFF1F | (32 * (v15[7] & 7));
      v3 ^= v19;
    }
    while (v3);
    unint64_t v33 = 64;
    if (((v10 + 7) & 0x1FFFFFFC0) == 0) {
      unint64_t v33 = (v10 + 7) & 0x1FFFFFFF8;
    }
    if (v33 <= 8) {
      LODWORD(v33) = 8;
    }
    int v34 = v33 << 16;
    if (v12)
    {
      int v34 = 0x400000;
      int v35 = 0x2000000;
    }
    else
    {
      int v35 = 0;
    }
    int v36 = *(unsigned __int8 *)(v1 + 40) | v35;
  }
  else
  {
    int v11 = 0;
    int v13 = 0;
    int v36 = 0;
    int v34 = 0x80000;
  }
  *(_DWORD *)(v1 + 32) = v36 | ((*(unsigned char *)(v1 + 84) & 0xF) << 8) | *(_DWORD *)(v1 + 32) & 0xFC000000 | v34 | ((*(unsigned char *)(v1 + 85) & 0xF) << 12);
  *(_DWORD *)(v1 + 88) = v11;
  *(_DWORD *)(v1 + 44) = v13;
  return result;
}

uint64_t AGX::PBEStateEncoderGen8<kAGXRevG15_AGX2>::StateFields::getDimensionality(int a1, char a2, unsigned int a3)
{
  if (a3 < 2) {
    unsigned __int8 v3 = 2;
  }
  else {
    unsigned __int8 v3 = 3;
  }
  if (a2)
  {
    if ((a2 & 2) != 0) {
      unsigned __int8 v4 = 8;
    }
    else {
      unsigned __int8 v4 = v3;
    }
    BOOL v5 = a1 == 4;
LABEL_11:
    if (v5) {
      return v3;
    }
  }
  else
  {
    unsigned __int8 v4 = 5;
    switch(a1)
    {
      case 1:
        unsigned __int8 v4 = 2;
        break;
      case 2:
        BOOL v5 = (a2 & 2) == 0;
        unsigned __int8 v4 = 4;
        unsigned __int8 v3 = 2;
        goto LABEL_11;
      case 3:
        return v4;
      case 4:
        unsigned __int8 v4 = v3;
        break;
      default:
        unsigned __int8 v4 = -1;
        break;
    }
  }
  return v4;
}

uint64_t AGCTargetImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::maxMSAASampleCount()
{
  return 4;
}

uint64_t AGCTargetImplG15_AGX2::requiresRayTracingEmulation(AGCTargetImplG15_AGX2 *this)
{
  return 1;
}

void *AGCTargetImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::GetLegalizationPasses@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v9 = "air-degenerate-vertex-amplification-emulation";
  char v10 = 0;
  int v11 = "air-raytracing-emulation,indirect-acceleration-structures";
  char v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int v13 = "mtl-fetch-all-unaligned";
  char v14 = 1;
  uint64_t v15 = "air-bfloat-emulation";
  char v16 = 1;
  double result = malloc_type_malloc(0x20uLL, 0x10040436913F5uLL);
  uint64_t v6 = 0;
  int v7 = 0;
  *a2 = 0;
  do
  {
    if (LOBYTE((&v9)[v6 + 1]))
    {
      int v8 = (&v9)[v6];
      *a2 = v7 + 1;
      result[v7++] = v8;
    }
    v6 += 2;
  }
  while (v6 != 8);
  *a3 = result;
  return result;
}

void AGCTargetImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::CreateTGSizeToTempTable(uint64_t a1, _DWORD *a2)
{
  *a2 = 32;
  operator new[]();
}

void AGCTargetImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::CreateProgramKeyFactory()
{
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::CreateBVHBuilderProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBCB8;
  *(_DWORD *)(a2 + 40) = 0;
  return AGX::BVHBuilderProgramKey::initializeWithDescriptor(a2, a1);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::CreateEndOfTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_1F25DBC38;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 118) = 0;
  AGX::FramebufferCompilerConfig<AGX::G15_AGX2::Encoders,AGX::G15_AGX2::Classes,AGX::G15_AGX2::ObjClasses>::FramebufferCompilerConfig((uint64_t)v31, a1);
  uint64_t result = AGX::FramebufferCompilerConfigGen3<AGX::G15_AGX2::Encoders,AGX::G15_AGX2::Classes,AGX::G15_AGX2::ObjClasses>::buildDrawBufferState((uint64_t)v31);
  v29[0] = v31[0];
  v29[1] = v31[1];
  unsigned int v5 = v32;
  uint64_t v30 = v32;
  unsigned int v6 = v39;
  unsigned int v7 = v33;
  int v24 = v34;
  unint64_t v8 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v32 >> 12) << 32) | ((unint64_t)BYTE2(v32) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v8;
  if (v7)
  {
    int v9 = 0;
    int v28 = 0;
    int v10 = 0;
    unsigned int v20 = (unsigned __int16)v5 >> 12;
    int v23 = v38;
    unsigned int v22 = HIWORD(v5) & 0x1FF;
    int v21 = v37 & ~v36 | v35;
    unsigned int v19 = v36 & ~v37 | v35;
    do
    {
      uint64_t v11 = __clz(__rbit32(v7));
      unsigned int v12 = *((_DWORD *)v29 + v11);
      unsigned int v13 = *(_DWORD *)(v3 + 4 * v11) & 0xE3000000;
      uint64_t result = AGX::PBEStateEncoderGen8<kAGXRevG15_AGX2>::StateFields::getDimensionality(v40[2 * v11], v40[2 * v11 + 1], v6);
      *(_DWORD *)(v3 + 4 * v11) = v13 & 0xE3FFE0FF | (result << 16) & 0xE3FFFFFF | ((v12 & 0x1F) << 8) | (v12 >> 5 << 26) | ((v12 >> 12) / v22);
      v9 |= 1 << v11;
      unsigned int v27 = (v12 >> 12) / v22;
      v28 |= (1 << v11) & v21;
      int v14 = v23 & (1 << v11);
      v10 |= v14;
      if ((v24 & (1 << v11)) != 0)
      {
        int v26 = v10;
        int v15 = (v12 & 0x1F) << 8;
        int v25 = (v12 << 21) & 0x1C000000;
        unsigned int v16 = v11 + 8;
        int v17 = (v12 << 16) & 0x1000000;
        if (v20 <= 1) {
          int v17 = 0;
        }
        unsigned int v18 = *(_DWORD *)(v3 + 4 * (v11 + 8)) & 0xE2000000 | v17;
        uint64_t result = AGX::PBEStateEncoderGen8<kAGXRevG15_AGX2>::StateFields::getDimensionality(v40[2 * v11 + 16], v40[2 * v11 + 17], v6);
        *(_DWORD *)(v3 + 4 * v16) = v18 | (result << 16) | v15 | v25 | v27;
        v9 |= 256 << v11;
        v28 |= ((v19 >> v11) & 1) << v16;
        int v10 = ((v14 != 0) << v16) | v26;
      }
      v7 ^= 1 << v11;
    }
    while (v7);
    unint64_t v8 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v10) = 0;
    LOWORD(v28) = 0;
    LOWORD(v9) = 0;
  }
  *(_WORD *)(a2 + 120) = v9;
  *(_WORD *)(a2 + 122) = v28;
  *(_WORD *)(a2 + 124) = v10;
  *(void *)(a2 + 112) = v8 & 0xFFFFFFFF00000000 | (unsigned __int16)(v9 & ~(_WORD)v28) | ((unint64_t)(unsigned __int16)(v9 & v10) << 16);
  return result;
}

double AGX::ProgramKeyFactoryImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBBF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfig<AGX::G15_AGX2::Encoders,AGX::G15_AGX2::Classes,AGX::G15_AGX2::ObjClasses>::FramebufferCompilerConfig((uint64_t)v6, a1);
  AGX::FramebufferCompilerConfigGen3<AGX::G15_AGX2::Encoders,AGX::G15_AGX2::Classes,AGX::G15_AGX2::ObjClasses>::buildDrawBufferState((uint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::CreateTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 8) = 5;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F25DBE10;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(void *)(a4 + 200) = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  int v32 = 1;
  __int16 v33 = 0;
  int v34 = 0;
  memset(v35, 0, 96);
  bzero(&v28, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  unsigned __int8 v9 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v10 = *v9;
  if (v10 < 0xF) {
    goto LABEL_13;
  }
  uint64_t v11 = v9[7];
  if (v9[7])
  {
    uint64_t v12 = *(unsigned int *)((char *)a1 + v11);
    unsigned int v13 = (unsigned int *)((char *)a1 + v11 + v12);
    unint64_t v14 = *v13;
    if (v14)
    {
      unint64_t v15 = 0;
      int v16 = DWORD2(v30);
      uint64_t v27 = a3;
      int v17 = (char *)a1 + v11 + v12;
      do
      {
        unsigned int v18 = &v17[4 * v15];
        uint64_t v19 = *((unsigned int *)v18 + 1);
        unsigned int v20 = (char *)v13 + v19 - *(int *)&v18[v19 + 4];
        if (*((unsigned __int16 *)v20 + 2) >= 5u)
        {
          uint64_t v21 = *((unsigned __int16 *)v20 + 4);
          if (v21)
          {
            unsigned int v22 = (char *)v13 + v19 + v21;
            if (*((_WORD *)v22 + 2))
            {
              *((void *)v35 + v15) = AGX::G15_AGX2::TextureFormatTable::chooseTextureFormatCPP((AGX::G15_AGX2::TextureFormatTable *)*((unsigned __int16 *)v22 + 2), v8);
              v16 |= 1 << v15;
            }
          }
        }
        if (v15 > 6) {
          break;
        }
        ++v15;
        ++v13;
      }
      while (v15 < v14);
      DWORD2(v30) = v16;
      a3 = v27;
LABEL_13:
      if (v10 <= 0xA)
      {
        char v24 = 1;
        LOBYTE(v33) = 1;
LABEL_21:
        HIBYTE(v33) = v24;
        goto LABEL_22;
      }
    }
  }
  if (v9[5]) {
    char v23 = *((unsigned char *)a1 + v9[5]);
  }
  else {
    char v23 = 1;
  }
  LOBYTE(v33) = v23;
  HIBYTE(v33) = v23;
  if (v10 >= 0xD)
  {
    if (v9[6])
    {
      char v24 = *((unsigned char *)a1 + v9[6]);
      if (v24) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G15_AGX2::Encoders,AGX::G15_AGX2::Classes,AGX::G15_AGX2::ObjClasses>::buildDrawBufferState((uint64_t)&v28);
  long long v25 = v29;
  *(_OWORD *)(a4 + 112) = v28;
  *(_OWORD *)(a4 + 128) = v25;
  *(void *)(a4 + 144) = v30;
  AGX::Impl::TileProgramKey::initCommon(a4, a1);
  *(_DWORD *)(a4 + 100) &= ~0x80u;
  if (a4 + 160 != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 160), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a4 + 184 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 184), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  LOWORD(v28) = 256;
  *(void *)((char *)&v28 + 2) = 0;
  *(_DWORD *)((char *)&v28 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a4, (unsigned __int8 *)&v28);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::CreateComputeProgramKey@<X0>(AGX *a1@<X1>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 8) = 6;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)a5 = &unk_1F25DBE50;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 64), "");
  *(unsigned char *)(a5 + 88) = 0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  AGX::Impl::ComputeProgramKey::initCommon((AGX *)a5, a1);
  *(int8x8_t *)(a5 + 52) = vand_s8(*(int8x8_t *)(a5 + 52), (int8x8_t)0xFFFFFFFEFFFFFF7FLL);
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a5, a2);
  if (a5 + 96 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a5 + 120 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  __int16 v11 = 256;
  uint64_t v12 = 0;
  int v13 = 0;
  return AGX::Impl::ComputeProgramKey::setDeviceOptions(a5, (unsigned __int8 *)&v11);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::CreateFragmentProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 8) = 4;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 232) = 0u;
  uint64_t v12 = (char *)(a6 + 232);
  *(void *)a6 = &unk_1F25DBDD0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_OWORD *)(a6 + 120) = 0u;
  *(_OWORD *)(a6 + 136) = 0u;
  *(_OWORD *)(a6 + 152) = 0u;
  *(_OWORD *)(a6 + 168) = 0u;
  *(_OWORD *)(a6 + 184) = 0u;
  *(_OWORD *)(a6 + 200) = 0u;
  *(_OWORD *)(a6 + 209) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 264) = 0u;
  long long v41 = 0u;
  memset(v42, 0, sizeof(v42));
  long long v39 = 0u;
  long long v40 = 0u;
  int v43 = 1;
  __int16 v44 = 0;
  int v45 = 0;
  memset(v46, 0, 96);
  bzero(&v39, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  int v38 = a2;
  unint64_t v14 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  unsigned int v15 = *v14;
  if (v15 >= 0x17)
  {
    uint64_t v16 = v14[11];
    if (!v14[11]) {
      goto LABEL_14;
    }
    uint64_t v17 = *(unsigned int *)((char *)a1 + v16);
    unsigned int v18 = (unsigned int *)((char *)a1 + v16 + v17);
    unint64_t v19 = *v18;
    if (!v19) {
      goto LABEL_14;
    }
    unsigned __int8 v35 = a3;
    uint64_t v36 = a4;
    uint64_t v37 = a5;
    unint64_t v20 = 0;
    int v21 = DWORD2(v41);
    unsigned int v22 = (char *)a1 + v16 + v17;
    do
    {
      char v23 = &v22[4 * v20];
      uint64_t v24 = *((unsigned int *)v23 + 1);
      long long v25 = (char *)v18 + v24 - *(int *)&v23[v24 + 4];
      if (*((unsigned __int16 *)v25 + 2) >= 5u)
      {
        uint64_t v26 = *((unsigned __int16 *)v25 + 4);
        if (v26)
        {
          uint64_t v27 = (char *)v18 + v24 + v26;
          if (*((_WORD *)v27 + 2))
          {
            *((void *)v46 + v20) = AGX::G15_AGX2::TextureFormatTable::chooseTextureFormatCPP((AGX::G15_AGX2::TextureFormatTable *)*((unsigned __int16 *)v27 + 2), v13);
            v21 |= 1 << v20;
          }
        }
      }
      if (v20 > 6) {
        break;
      }
      ++v20;
      ++v18;
    }
    while (v20 < v19);
    DWORD2(v41) = v21;
    a4 = v36;
    a5 = v37;
    a3 = v35;
  }
  if (v15 <= 0xC)
  {
    char v29 = 1;
    LOBYTE(v44) = 1;
    a2 = v38;
LABEL_21:
    HIBYTE(v44) = v29;
    goto LABEL_22;
  }
LABEL_14:
  if (v14[6]) {
    char v28 = *((unsigned char *)a1 + v14[6]);
  }
  else {
    char v28 = 1;
  }
  a2 = v38;
  LOBYTE(v44) = v28;
  HIBYTE(v44) = v28;
  if (v15 >= 0xF)
  {
    if (v14[7])
    {
      char v29 = *((unsigned char *)a1 + v14[7]);
      if (v29) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen3<AGX::G15_AGX2::Encoders,AGX::G15_AGX2::Classes,AGX::G15_AGX2::ObjClasses>::buildDrawBufferState((uint64_t)&v39);
  long long v30 = v40;
  *(_OWORD *)(a6 + 112) = v39;
  *(_OWORD *)(a6 + 128) = v30;
  *(void *)(a6 + 144) = v41;
  AGX::Impl::FragmentProgramKey::initCommon((AGX *)a6, a1);
  int v31 = *(_DWORD *)(a6 + 104);
  unsigned int v32 = *(_DWORD *)(a6 + 100) & 0xFFFFFF7F;
  *(_DWORD *)(a6 + 40) &= ~0x10u;
  if (a2) {
    int v33 = 256;
  }
  else {
    int v33 = 0;
  }
  *(_DWORD *)(a6 + 100) = v32;
  *(_DWORD *)(a6 + 104) = v31 & 0xFFFFFEFF | v33;
  AGX::Impl::FragmentProgramKey::setSerializedDescriptor((AGX::Impl::FragmentProgramKey *)a6, a3);
  if (v12 != (char *)a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a6 + 256 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a6 + 256), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  LOWORD(v39) = 256;
  *(void *)((char *)&v39 + 2) = 0;
  *(_DWORD *)((char *)&v39 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a6, (unsigned __int8 *)&v39);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::CreateMeshProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v26 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v27 = *(std::string *)(a2 + 24);
  }
  int v17 = *(unsigned __int8 *)(a2 + 48);
  *(_OWORD *)(a8 + 104) = 0u;
  *(_DWORD *)(a8 + 8) = 10;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_DWORD *)(a8 + 96) = 0;
  *(void *)a8 = &unk_1F25DBD40;
  *(std::string *)(a8 + 152) = v26;
  long long v18 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(void *)(a8 + 192) = *((void *)&v27.__r_.__value_.__l + 2);
  if (a3) {
    int v19 = 128;
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  *(_OWORD *)(a8 + 176) = v18;
  *(unsigned char *)(a8 + 200) = v17;
  *(_DWORD *)(a8 + 56) = v20 | v19 | (16 * v17);
  AGX::Impl::MeshProgramKey::initCommon((AGX *)a8, a1);
  *(_DWORD *)(a8 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a8, a5);
  if (a8 + 104 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 104), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  if (a8 + 128 != a7) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 128), *(char **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5);
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v21;
  __int16 v23 = 256;
  uint64_t v24 = 0;
  int v25 = 0;
  return AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(a8, (unsigned __int8 *)&v23);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::CreateObjectProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)(a7 + 8) = 9;
  *(_OWORD *)(a7 + 104) = 0u;
  __int16 v11 = (char *)(a7 + 104);
  *(_OWORD *)(a7 + 120) = 0u;
  *(_OWORD *)(a7 + 136) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_DWORD *)(a7 + 96) = 0;
  *(void *)a7 = &unk_1F25DBD88;
  if (a2) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  if (a3) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a7 + 56) = v13 | v12;
  AGX::Impl::ObjectProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a7, a4);
  if (v11 != (char *)a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v11, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a7 + 128 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 128), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  __int16 v15 = 256;
  uint64_t v16 = 0;
  int v17 = 0;
  return AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(a7, (unsigned __int8 *)&v15);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::CreateVertexProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v21 = *(std::string *)(a2 + 24);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)(a7 + 8) = 3;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 76) = 0u;
  *(void *)a7 = &unk_1F25DBCF8;
  *(std::string *)(a7 + 144) = v20;
  *(std::string *)(a7 + 168) = v21;
  *(unsigned char *)(a7 + 192) = v14;
  *(void *)(a7 + 56) = v14 << 18;
  AGX::Impl::VertexProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a7, a3);
  if (a7 + 96 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a7 + 120 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a6) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a7 + 88) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v15;
  __int16 v17 = 256;
  uint64_t v18 = 0;
  int v19 = 0;
  return AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(a7, (unsigned __int8 *)&v17);
}

void AGX::ProgramKeyFactoryImpl<AGX::G15_AGX2::Classes,AGX::G15_AGX2::Encoders>::~ProgramKeyFactoryImpl()
{
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G16::Encoders,AGX::G16::Classes,AGX::G16::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v4 = *a2;
    unint64_t v5 = (char *)a2 - v4;
    unsigned int v6 = *(unsigned __int16 *)((char *)a2 - v4);
    if (v6 < 5) {
      goto LABEL_73;
    }
    uint64_t v7 = -v4;
    uint64_t v8 = *((unsigned __int16 *)v5 + 2);
    if (*((_WORD *)v5 + 2))
    {
      unsigned __int8 v9 = (char *)a2 + v8;
      uint64_t v10 = *(unsigned int *)((char *)a2 + v8);
      unint64_t v11 = *(unsigned int *)((char *)a2 + v8 + v10);
      if (v11)
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        uint64_t v14 = v8 + v10;
        while (1)
        {
          uint64_t v15 = *(unsigned int *)((char *)a2 + v14 + 4);
          uint64_t v16 = (char *)a2 + v14 + v15;
          __int16 v17 = (char *)a2 + v14 + v15 - *((int *)v16 + 1);
          if (*((unsigned __int16 *)v17 + 2) >= 5u)
          {
            uint64_t v18 = *((unsigned __int16 *)v17 + 4);
            if (v18)
            {
              unsigned int v19 = *(unsigned __int16 *)((char *)a2 + v14 + v15 + v18 + 4);
              if (v19) {
                break;
              }
            }
          }
LABEL_48:
          if (v13 <= 6)
          {
            ++v13;
            v12 += 2;
            v14 += 4;
            if (v13 < v11) {
              continue;
            }
          }
          uint64_t v49 = *a2;
          uint64_t v7 = -v49;
          unsigned int v6 = *(unsigned __int16 *)((char *)a2 - v49);
          goto LABEL_68;
        }
        std::string v20 = &texFormatUnsupported;
        if (v19 <= 0x275) {
          std::string v20 = *(&off_1E65ED900 + v19 - 1);
        }
        *(void *)(a1 + 8 * v13 + 96) = v20;
        unsigned int v21 = 1 << v13;
        *(_DWORD *)(a1 + 40) |= 1 << v13;
        uint64_t v22 = v15 - *((int *)v16 + 1);
        __int16 v23 = (char *)a2 + v14 + v22;
        unsigned int v24 = *((unsigned __int16 *)v23 + 2);
        if (v24 < 0x19)
        {
          int v27 = 0;
          __int32 v26 = 0;
          if (v24 < 0xF)
          {
LABEL_36:
            int v27 = 0;
            int v36 = 1 << v13;
LABEL_37:
            *(_DWORD *)(a1 + 52) |= v36;
            v38.i32[0] = v26;
            v38.i32[1] = v27 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v38, (int32x2_t)0x100000001)));
            if (v27 == 4) {
              int v39 = 1 << v13;
            }
            else {
              int v39 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v39;
            long long v40 = (char *)a2 + v14 + v15 - *((int *)v16 + 1);
            if (*((unsigned __int16 *)v40 + 2) >= 7u && (uint64_t v41 = *((unsigned __int16 *)v40 + 5)) != 0)
            {
              char v42 = 0;
              int v43 = *((unsigned __int8 *)a2 + v14 + v15 + v41 + 4);
              __int16 v44 = (char *)(a1 + v12 + 160);
              char v45 = 2;
              char v46 = 1;
              switch(v43)
              {
                case 0:
                case 1:
                  char v45 = 1;
                  char v42 = v43;
                  goto LABEL_54;
                case 3:
                  goto LABEL_59;
                case 4:
                  char v47 = 2;
                  goto LABEL_45;
                case 5:
                  goto LABEL_53;
                case 6:
                  char v42 = 1;
LABEL_53:
                  char v45 = 4;
                  goto LABEL_54;
                case 7:
                  char *v44 = 3;
                  *(unsigned char *)(a1 + v12 + 161) = 0;
LABEL_57:
                  int v48 = 3;
                  break;
                case 8:
                  char v46 = 3;
LABEL_59:
                  char *v44 = 2;
                  *(unsigned char *)(a1 + v12 + 161) = v46;
LABEL_60:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_46;
                default:
LABEL_54:
                  char *v44 = v45;
                  *(unsigned char *)(a1 + v12 + 161) = v42;
                  int v48 = 1;
                  switch(v43)
                  {
                    case 0:
                      goto LABEL_47;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_60;
                    case 7:
                      goto LABEL_57;
                    default:
                      goto LABEL_46;
                  }
                  break;
              }
            }
            else
            {
              char v47 = 0;
              __int16 v44 = (char *)(a1 + 2 * v13 + 160);
LABEL_45:
              char *v44 = 2;
              *(unsigned char *)(a1 + v12 + 161) = v47;
LABEL_46:
              int v48 = 2;
            }
LABEL_47:
            *(_WORD *)(a1 + 76) |= v48 << v12;
            unint64_t v11 = *(unsigned int *)&v9[v10];
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v25 = *((unsigned __int16 *)v23 + 14);
          if (v25) {
            __int32 v26 = *((unsigned __int8 *)a2 + v14 + v15 + v25 + 4);
          }
          else {
            __int32 v26 = 0;
          }
          if (v24 >= 0x1B && *(_WORD *)((char *)a2 + v14 + v22 + 30)) {
            int v27 = *((unsigned __int8 *)a2 + v14 + v15 + *(unsigned __int16 *)((char *)a2 + v14 + v22 + 30) + 4);
          }
          else {
            int v27 = 0;
          }
        }
        uint64_t v28 = *(unsigned __int16 *)((char *)a2 + v14 + v22 + 18);
        if (v28 && *(_WORD *)((char *)a2 + v14 + v15 + v28 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v27 & 0xFE) == 2) {
            int v29 = 1 << v13;
          }
          else {
            int v29 = 0;
          }
          *(_DWORD *)(a1 + 68) |= v29;
          long long v30 = (char *)a2 + v14 + v15 - *((int *)v16 + 1);
          if (*((unsigned __int16 *)v30 + 2) >= 0x11u && (uint64_t v31 = *((unsigned __int16 *)v30 + 10)) != 0)
          {
            char v32 = 0;
            int v33 = *((unsigned __int8 *)a2 + v14 + v15 + v31 + 4);
            char v34 = 2;
            switch(v33)
            {
              case 0:
              case 1:
                char v34 = 1;
                char v32 = v33;
                break;
              case 3:
                char v32 = 1;
                break;
              case 4:
                char v32 = 2;
                break;
              case 5:
                goto LABEL_63;
              case 6:
                char v32 = 1;
LABEL_63:
                char v34 = 4;
                break;
              case 7:
                char v32 = 0;
                char v34 = 3;
                break;
              case 8:
                char v32 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            char v32 = 0;
            char v34 = 2;
          }
          uint64_t v35 = a1 + v12;
          *(unsigned char *)(v35 + 176) = v34;
          *(unsigned char *)(v35 + 177) = v32;
        }
        int v36 = 0;
        if (v26 == 2) {
          int v37 = 1 << v13;
        }
        else {
          int v37 = 0;
        }
        *(_DWORD *)(a1 + 56) |= v37;
        if (v27) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
    }
LABEL_68:
    if (v6 >= 7
      && *(_WORD *)((char *)a2 + v7 + 6)
      && (uint64_t v50 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v7 + 6)), (v50 & 0xFFFFFFFE) != 0))
    {
      if (v50 > 0x7FF) {
        LODWORD(v50) = 2048;
      }
    }
    else
    {
LABEL_73:
      LODWORD(v50) = 1;
    }
    *(_DWORD *)(a1 + 80) = v50;
    char v51 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v52 = *v51;
    if (v52 < 0xB)
    {
      char v54 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v52 < 9)
      {
LABEL_84:
        *(unsigned char *)(a1 + 85) = v54;
        return a1;
      }
    }
    else
    {
      if (v51[5]) {
        char v53 = *((unsigned char *)a2 + v51[5]);
      }
      else {
        char v53 = 1;
      }
      *(unsigned char *)(a1 + 84) = v53;
    }
    uint64_t v55 = v51[4];
    if (v55) {
      char v54 = *((unsigned char *)a2 + v55);
    }
    else {
      char v54 = 1;
    }
    goto LABEL_84;
  }
  return a1;
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G16::Encoders,AGX::G16::Classes,AGX::G16::ObjClasses>::partitionSizeFromFormatAndCompCount(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      return a2;
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 22:
      a2 = (2 * a2);
      break;
    case 10:
    case 11:
    case 17:
      a2 = (4 * a2);
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      a2 = 4;
      break;
    default:
      a2 = 0;
      break;
  }
  return a2;
}

uint64_t AGX::FramebufferCompilerConfigGen3<AGX::G16::Encoders,AGX::G16::Classes,AGX::G16::ObjClasses>::buildDrawBufferState(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(result + 40);
  unsigned int v4 = v3;
  do
  {
    unsigned int v5 = v4;
    if (!v4) {
      break;
    }
    unsigned int v6 = __clz(__rbit32(v4));
    uint64_t v7 = *(void *)(v1 + 8 * v6 + 96);
    if (*(_DWORD *)(v7 + 32) == 18) {
      int v8 = 9;
    }
    else {
      int v8 = *(_DWORD *)(v7 + 32);
    }
    double result = AGX::FramebufferCompilerConfig<AGX::G16::Encoders,AGX::G16::Classes,AGX::G16::ObjClasses>::partitionSizeFromFormatAndCompCount(v8, *(unsigned int *)(v7 + 28));
    v2 += result;
    int v9 = 1 << v6;
    if (v2 > 0x100) {
      int v9 = 0;
    }
    unsigned int v4 = v9 ^ v5;
  }
  while (v2 < 0x101);
  if (v3)
  {
    LODWORD(v10) = 0;
    int v11 = 0;
    char v12 = 0;
    int v13 = 0;
    double result = 4293922528;
    unsigned int v36 = v5;
    uint64_t v35 = v1;
    do
    {
      uint64_t v14 = __clz(__rbit32(v3));
      uint64_t v15 = *(unsigned int **)(v1 + 8 * v14 + 96);
      uint64_t v16 = v15[7];
      if (v15[8] == 18 && v5 == 0) {
        int v18 = 9;
      }
      else {
        int v18 = v15[8];
      }
      int v19 = 1 << v14;
      if (v18 == 18) {
        int v20 = 1 << v14;
      }
      else {
        int v20 = 0;
      }
      if (v18 == 3)
      {
        int v21 = (v15[21] != 0) << 8;
        int v22 = 1;
      }
      else
      {
        int v23 = v13;
        int v24 = AGX::FramebufferCompilerConfig<AGX::G16::Encoders,AGX::G16::Classes,AGX::G16::ObjClasses>::partitionSizeFromFormatAndCompCount(v18, v16);
        int v13 = v23;
        unsigned int v5 = v36;
        int v19 = 1 << v14;
        uint64_t v1 = v35;
        LODWORD(v16) = v24;
        double result = 4293922528;
        int v21 = 0;
        int v22 = 1;
        switch(v18)
        {
          case 2:
          case 4:
          case 5:
            break;
          case 6:
          case 7:
          case 8:
          case 9:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 22:
            int v21 = 0;
            int v22 = 2;
            break;
          case 10:
          case 11:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
            int v21 = 0;
            int v22 = 4;
            break;
          default:
            int v21 = 0;
            int v22 = 0;
            break;
        }
      }
      v13 |= v20;
      int v25 = v22 - 1;
      int v26 = -v22;
      int v27 = (v25 + v10) & v26;
      v12 |= (v27 + v16) > 0x100;
      int v28 = (v25 + v11) & v26;
      if (v12) {
        int v11 = v28 + v16;
      }
      else {
        LOBYTE(v28) = v27;
      }
      unsigned int v29 = v21 & 0xFFF00FFF | *(_DWORD *)(v1 + 4 * v14) & 0xFFF00EE0 | v18 & 0x1F | (v28 << 12);
      *(_DWORD *)(v1 + 4 * v14) = v29;
      unsigned int v30 = v29 & 0xFFFFF1FF | ((v15[19] & 7) << 9);
      *(_DWORD *)(v1 + 4 * v14) = v30;
      if (v12) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = (v27 + v16);
      }
      *(_DWORD *)(v1 + 4 * v14) = v30 & 0xFFFFFF1F | (32 * (v15[7] & 7));
      v3 ^= v19;
    }
    while (v3);
    unint64_t v31 = 256;
    if (((v10 + 7) & 0x1FFFFFF00) == 0) {
      unint64_t v31 = (v10 + 7) & 0x1FFFFFFF8;
    }
    if (v31 <= 8) {
      LODWORD(v31) = 8;
    }
    int v32 = v31 << 16;
    if (v12)
    {
      int v32 = 0x1000000;
      int v33 = 0x2000000;
    }
    else
    {
      int v33 = 0;
    }
    int v34 = *(unsigned __int8 *)(v1 + 40) | v33;
  }
  else
  {
    int v11 = 0;
    int v13 = 0;
    int v34 = 0;
    int v32 = 0x80000;
  }
  *(_DWORD *)(v1 + 32) = v34 | ((*(unsigned char *)(v1 + 84) & 0xF) << 8) | *(_DWORD *)(v1 + 32) & 0xFC000000 | v32 | ((*(unsigned char *)(v1 + 85) & 0xF) << 12);
  *(_DWORD *)(v1 + 88) = v11;
  *(_DWORD *)(v1 + 44) = v13;
  return result;
}

uint64_t AGX::PBEStateEncoderGen9<kAGXRevG16>::StateFields::getDimensionality(int a1, char a2, unsigned int a3)
{
  if (a3 < 2) {
    unsigned __int8 v3 = 2;
  }
  else {
    unsigned __int8 v3 = 3;
  }
  if (a2)
  {
    if ((a2 & 2) != 0) {
      unsigned __int8 v4 = 8;
    }
    else {
      unsigned __int8 v4 = v3;
    }
    BOOL v5 = a1 == 4;
LABEL_11:
    if (v5) {
      return v3;
    }
  }
  else
  {
    unsigned __int8 v4 = 5;
    switch(a1)
    {
      case 1:
        unsigned __int8 v4 = 2;
        break;
      case 2:
        BOOL v5 = (a2 & 2) == 0;
        unsigned __int8 v4 = 4;
        unsigned __int8 v3 = 2;
        goto LABEL_11;
      case 3:
        return v4;
      case 4:
        unsigned __int8 v4 = v3;
        break;
      default:
        unsigned __int8 v4 = -1;
        break;
    }
  }
  return v4;
}

uint64_t AGCTargetImpl<AGX::G16::Classes,AGX::G16::Encoders>::maxMSAASampleCount()
{
  return 4;
}

uint64_t AGCTargetImpl<AGX::G16::Classes,AGX::G16::Encoders>::requiresRayTracingEmulation()
{
  return 0;
}

void *AGCTargetImpl<AGX::G16::Classes,AGX::G16::Encoders>::GetLegalizationPasses@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v9 = "air-degenerate-vertex-amplification-emulation";
  char v10 = 0;
  int v11 = "air-raytracing-emulation,indirect-acceleration-structures";
  char v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int v13 = "mtl-fetch-all-unaligned";
  char v14 = 1;
  uint64_t v15 = "air-bfloat-emulation";
  char v16 = 0;
  double result = malloc_type_malloc(0x20uLL, 0x10040436913F5uLL);
  uint64_t v6 = 0;
  int v7 = 0;
  *a2 = 0;
  do
  {
    if (LOBYTE((&v9)[v6 + 1]))
    {
      int v8 = (&v9)[v6];
      *a2 = v7 + 1;
      result[v7++] = v8;
    }
    v6 += 2;
  }
  while (v6 != 8);
  *a3 = result;
  return result;
}

void AGCTargetImpl<AGX::G16::Classes,AGX::G16::Encoders>::CreateTGSizeToTempTable(uint64_t a1, _DWORD *a2)
{
  *a2 = 24;
  operator new[]();
}

void AGCTargetImpl<AGX::G16::Classes,AGX::G16::Encoders>::CreateProgramKeyFactory()
{
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G16::Classes,AGX::G16::Encoders>::CreateBVHBuilderProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBCB8;
  *(_DWORD *)(a2 + 40) = 0;
  return AGX::BVHBuilderProgramKey::initializeWithDescriptor(a2, a1);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G16::Classes,AGX::G16::Encoders>::CreateEndOfTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_1F25DBC38;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 118) = 0;
  AGX::FramebufferCompilerConfig<AGX::G16::Encoders,AGX::G16::Classes,AGX::G16::ObjClasses>::FramebufferCompilerConfig((uint64_t)v31, a1);
  uint64_t result = AGX::FramebufferCompilerConfigGen3<AGX::G16::Encoders,AGX::G16::Classes,AGX::G16::ObjClasses>::buildDrawBufferState((uint64_t)v31);
  v29[0] = v31[0];
  v29[1] = v31[1];
  unsigned int v5 = v32;
  uint64_t v30 = v32;
  unsigned int v6 = v39;
  unsigned int v7 = v33;
  int v24 = v34;
  unint64_t v8 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v32 >> 12) << 32) | ((unint64_t)BYTE2(v32) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v8;
  if (v7)
  {
    int v9 = 0;
    int v28 = 0;
    int v10 = 0;
    unsigned int v20 = (unsigned __int16)v5 >> 12;
    int v23 = v38;
    unsigned int v22 = HIWORD(v5) & 0x1FF;
    int v21 = v37 & ~v36 | v35;
    unsigned int v19 = v36 & ~v37 | v35;
    do
    {
      uint64_t v11 = __clz(__rbit32(v7));
      unsigned int v12 = *((_DWORD *)v29 + v11);
      unsigned int v13 = *(_DWORD *)(v3 + 4 * v11) & 0xE3000000;
      uint64_t result = AGX::PBEStateEncoderGen9<kAGXRevG16>::StateFields::getDimensionality(v40[2 * v11], v40[2 * v11 + 1], v6);
      *(_DWORD *)(v3 + 4 * v11) = v13 & 0xE3FFE0FF | (result << 16) & 0xE3FFFFFF | ((v12 & 0x1F) << 8) | (v12 >> 5 << 26) | ((v12 >> 12) / v22);
      v9 |= 1 << v11;
      unsigned int v27 = (v12 >> 12) / v22;
      v28 |= (1 << v11) & v21;
      int v14 = v23 & (1 << v11);
      v10 |= v14;
      if ((v24 & (1 << v11)) != 0)
      {
        int v26 = v10;
        int v15 = (v12 & 0x1F) << 8;
        int v25 = (v12 << 21) & 0x1C000000;
        unsigned int v16 = v11 + 8;
        int v17 = (v12 << 16) & 0x1000000;
        if (v20 <= 1) {
          int v17 = 0;
        }
        unsigned int v18 = *(_DWORD *)(v3 + 4 * (v11 + 8)) & 0xE2000000 | v17;
        uint64_t result = AGX::PBEStateEncoderGen9<kAGXRevG16>::StateFields::getDimensionality(v40[2 * v11 + 16], v40[2 * v11 + 17], v6);
        *(_DWORD *)(v3 + 4 * v16) = v18 | (result << 16) | v15 | v25 | v27;
        v9 |= 256 << v11;
        v28 |= ((v19 >> v11) & 1) << v16;
        int v10 = ((v14 != 0) << v16) | v26;
      }
      v7 ^= 1 << v11;
    }
    while (v7);
    unint64_t v8 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v10) = 0;
    LOWORD(v28) = 0;
    LOWORD(v9) = 0;
  }
  *(_WORD *)(a2 + 120) = v9;
  *(_WORD *)(a2 + 122) = v28;
  *(_WORD *)(a2 + 124) = v10;
  *(void *)(a2 + 112) = v8 & 0xFFFFFFFF00000000 | (unsigned __int16)(v9 & ~(_WORD)v28) | ((unint64_t)(unsigned __int16)(v9 & v10) << 16);
  return result;
}

double AGX::ProgramKeyFactoryImpl<AGX::G16::Classes,AGX::G16::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBBF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfig<AGX::G16::Encoders,AGX::G16::Classes,AGX::G16::ObjClasses>::FramebufferCompilerConfig((uint64_t)v6, a1);
  AGX::FramebufferCompilerConfigGen3<AGX::G16::Encoders,AGX::G16::Classes,AGX::G16::ObjClasses>::buildDrawBufferState((uint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G16::Classes,AGX::G16::Encoders>::CreateTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 8) = 5;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F25DBE10;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(void *)(a4 + 200) = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  int v32 = 1;
  __int16 v33 = 0;
  int v34 = 0;
  memset(v35, 0, sizeof(v35));
  bzero(&v28, 0x28uLL);
  if (!a1) {
    goto LABEL_24;
  }
  int v8 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v9 = *v8;
  if (v9 < 0xF) {
    goto LABEL_15;
  }
  uint64_t v10 = v8[7];
  if (v8[7])
  {
    uint64_t v11 = *(unsigned int *)((char *)a1 + v10);
    unsigned int v12 = (unsigned int *)((char *)a1 + v10 + v11);
    unint64_t v13 = *v12;
    if (v13)
    {
      unint64_t v14 = 0;
      int v15 = DWORD2(v30);
      unsigned int v16 = (char *)a1 + v10 + v11;
      do
      {
        int v17 = &v16[4 * v14];
        uint64_t v18 = *((unsigned int *)v17 + 1);
        unsigned int v19 = (char *)v12 + v18 - *(int *)&v17[v18 + 4];
        if (*((unsigned __int16 *)v19 + 2) >= 5u)
        {
          uint64_t v20 = *((unsigned __int16 *)v19 + 4);
          if (v20)
          {
            unsigned int v21 = *(unsigned __int16 *)((char *)v12 + v18 + v20 + 4);
            if (v21)
            {
              unsigned int v22 = &texFormatUnsupported;
              if (v21 <= 0x275) {
                unsigned int v22 = *(&off_1E65ED900 + v21 - 1);
              }
              *((void *)v35 + v14) = v22;
              v15 |= 1 << v14;
            }
          }
        }
        if (v14 > 6) {
          break;
        }
        ++v14;
        ++v12;
      }
      while (v14 < v13);
      DWORD2(v30) = v15;
LABEL_15:
      if (v9 <= 0xA)
      {
        LOBYTE(v24) = 1;
        LOBYTE(v33) = 1;
LABEL_23:
        HIBYTE(v33) = v24;
        goto LABEL_24;
      }
    }
  }
  if (v8[5]) {
    char v23 = *((unsigned char *)a1 + v8[5]);
  }
  else {
    char v23 = 1;
  }
  LOBYTE(v33) = v23;
  HIBYTE(v33) = v23;
  if (v9 >= 0xD)
  {
    uint64_t v25 = v8[6];
    if (v25)
    {
      int v24 = *((unsigned __int8 *)a1 + v25);
      if (v24) {
        goto LABEL_23;
      }
    }
  }
LABEL_24:
  AGX::FramebufferCompilerConfigGen3<AGX::G16::Encoders,AGX::G16::Classes,AGX::G16::ObjClasses>::buildDrawBufferState((uint64_t)&v28);
  long long v26 = v29;
  *(_OWORD *)(a4 + 112) = v28;
  *(_OWORD *)(a4 + 128) = v26;
  *(void *)(a4 + 144) = v30;
  AGX::Impl::TileProgramKey::initCommon(a4, a1);
  *(_DWORD *)(a4 + 100) &= ~0x80u;
  if (a4 + 160 != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 160), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a4 + 184 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 184), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  *(void *)((char *)&v28 + 6) = 0;
  *(void *)&long long v28 = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a4, (unsigned __int8 *)&v28);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G16::Classes,AGX::G16::Encoders>::CreateComputeProgramKey@<X0>(AGX *a1@<X1>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 8) = 6;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)a5 = &unk_1F25DBE50;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 64), "");
  *(unsigned char *)(a5 + 88) = 0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  AGX::Impl::ComputeProgramKey::initCommon((AGX *)a5, a1);
  *(int8x8_t *)(a5 + 52) = vand_s8(*(int8x8_t *)(a5 + 52), (int8x8_t)0xFFFFFFFEFFFFFF7FLL);
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a5, a2);
  if (a5 + 96 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a5 + 120 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  memset(v11, 0, 14);
  return AGX::Impl::ComputeProgramKey::setDeviceOptions(a5, (unsigned __int8 *)v11);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G16::Classes,AGX::G16::Encoders>::CreateFragmentProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 8) = 4;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 232) = 0u;
  unsigned int v12 = (char *)(a6 + 232);
  *(void *)a6 = &unk_1F25DBDD0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_OWORD *)(a6 + 120) = 0u;
  *(_OWORD *)(a6 + 136) = 0u;
  *(_OWORD *)(a6 + 152) = 0u;
  *(_OWORD *)(a6 + 168) = 0u;
  *(_OWORD *)(a6 + 184) = 0u;
  *(_OWORD *)(a6 + 200) = 0u;
  *(_OWORD *)(a6 + 209) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 264) = 0u;
  long long v38 = 0u;
  memset(v39, 0, sizeof(v39));
  long long v36 = 0u;
  long long v37 = 0u;
  int v40 = 1;
  __int16 v41 = 0;
  int v42 = 0;
  memset(v43, 0, sizeof(v43));
  bzero(&v36, 0x28uLL);
  if (!a1) {
    goto LABEL_24;
  }
  unint64_t v13 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  unsigned int v14 = *v13;
  if (v14 >= 0x17)
  {
    uint64_t v15 = v13[11];
    if (!v13[11]) {
      goto LABEL_16;
    }
    uint64_t v16 = *(unsigned int *)((char *)a1 + v15);
    int v17 = (unsigned int *)((char *)a1 + v15 + v16);
    unint64_t v18 = *v17;
    if (!v18) {
      goto LABEL_16;
    }
    unint64_t v19 = 0;
    int v20 = DWORD2(v38);
    unsigned int v21 = (char *)a1 + v15 + v16;
    do
    {
      unsigned int v22 = &v21[4 * v19];
      uint64_t v23 = *((unsigned int *)v22 + 1);
      int v24 = (char *)v17 + v23 - *(int *)&v22[v23 + 4];
      if (*((unsigned __int16 *)v24 + 2) >= 5u)
      {
        uint64_t v25 = *((unsigned __int16 *)v24 + 4);
        if (v25)
        {
          unsigned int v26 = *(unsigned __int16 *)((char *)v17 + v23 + v25 + 4);
          if (v26)
          {
            unsigned int v27 = &texFormatUnsupported;
            if (v26 <= 0x275) {
              unsigned int v27 = *(&off_1E65ED900 + v26 - 1);
            }
            *((void *)v43 + v19) = v27;
            v20 |= 1 << v19;
          }
        }
      }
      if (v19 > 6) {
        break;
      }
      ++v19;
      ++v17;
    }
    while (v19 < v18);
    DWORD2(v38) = v20;
  }
  if (v14 <= 0xC)
  {
    LOBYTE(v29) = 1;
    LOBYTE(v41) = 1;
LABEL_23:
    HIBYTE(v41) = v29;
    goto LABEL_24;
  }
LABEL_16:
  if (v13[6]) {
    char v28 = *((unsigned char *)a1 + v13[6]);
  }
  else {
    char v28 = 1;
  }
  LOBYTE(v41) = v28;
  HIBYTE(v41) = v28;
  if (v14 >= 0xF)
  {
    uint64_t v30 = v13[7];
    if (v30)
    {
      int v29 = *((unsigned __int8 *)a1 + v30);
      if (v29) {
        goto LABEL_23;
      }
    }
  }
LABEL_24:
  AGX::FramebufferCompilerConfigGen3<AGX::G16::Encoders,AGX::G16::Classes,AGX::G16::ObjClasses>::buildDrawBufferState((uint64_t)&v36);
  long long v31 = v37;
  *(_OWORD *)(a6 + 112) = v36;
  *(_OWORD *)(a6 + 128) = v31;
  *(void *)(a6 + 144) = v38;
  AGX::Impl::FragmentProgramKey::initCommon((AGX *)a6, a1);
  int v32 = *(_DWORD *)(a6 + 104);
  unsigned int v33 = *(_DWORD *)(a6 + 100) & 0xFFFFFF7F;
  *(_DWORD *)(a6 + 40) &= ~0x10u;
  if (a2) {
    int v34 = 256;
  }
  else {
    int v34 = 0;
  }
  *(_DWORD *)(a6 + 100) = v33;
  *(_DWORD *)(a6 + 104) = v32 & 0xFFFFFEFF | v34;
  AGX::Impl::FragmentProgramKey::setSerializedDescriptor((AGX::Impl::FragmentProgramKey *)a6, a3);
  if (v12 != (char *)a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a6 + 256 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a6 + 256), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  *(void *)((char *)&v36 + 6) = 0;
  *(void *)&long long v36 = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a6, (unsigned __int8 *)&v36);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G16::Classes,AGX::G16::Encoders>::CreateMeshProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v24 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v25 = *(std::string *)(a2 + 24);
  }
  int v17 = *(unsigned __int8 *)(a2 + 48);
  *(_OWORD *)(a8 + 104) = 0u;
  *(_DWORD *)(a8 + 8) = 10;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_DWORD *)(a8 + 96) = 0;
  *(void *)a8 = &unk_1F25DBD40;
  *(std::string *)(a8 + 152) = v24;
  long long v18 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
  *(void *)(a8 + 192) = *((void *)&v25.__r_.__value_.__l + 2);
  if (a3) {
    int v19 = 128;
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  *(_OWORD *)(a8 + 176) = v18;
  *(unsigned char *)(a8 + 200) = v17;
  *(_DWORD *)(a8 + 56) = v20 | v19 | (16 * v17);
  AGX::Impl::MeshProgramKey::initCommon((AGX *)a8, a1);
  *(_DWORD *)(a8 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a8, a5);
  if (a8 + 104 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 104), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  if (a8 + 128 != a7) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 128), *(char **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5);
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v21;
  memset(v23, 0, 14);
  return AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(a8, (unsigned __int8 *)v23);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G16::Classes,AGX::G16::Encoders>::CreateObjectProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)(a7 + 8) = 9;
  *(_OWORD *)(a7 + 104) = 0u;
  uint64_t v11 = (char *)(a7 + 104);
  *(_OWORD *)(a7 + 120) = 0u;
  *(_OWORD *)(a7 + 136) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_DWORD *)(a7 + 96) = 0;
  *(void *)a7 = &unk_1F25DBD88;
  if (a2) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  if (a3) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a7 + 56) = v13 | v12;
  AGX::Impl::ObjectProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a7, a4);
  if (v11 != (char *)a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v11, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a7 + 128 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 128), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  memset(v15, 0, 14);
  return AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(a7, (unsigned __int8 *)v15);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G16::Classes,AGX::G16::Encoders>::CreateVertexProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v19 = *(std::string *)(a2 + 24);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)(a7 + 8) = 3;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 76) = 0u;
  *(void *)a7 = &unk_1F25DBCF8;
  *(std::string *)(a7 + 144) = v18;
  *(std::string *)(a7 + 168) = v19;
  *(unsigned char *)(a7 + 192) = v14;
  *(void *)(a7 + 56) = v14 << 18;
  AGX::Impl::VertexProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a7, a3);
  if (a7 + 96 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a7 + 120 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a6) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a7 + 88) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v15;
  memset(v17, 0, 14);
  return AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(a7, (unsigned __int8 *)v17);
}

void AGX::ProgramKeyFactoryImpl<AGX::G16::Classes,AGX::G16::Encoders>::~ProgramKeyFactoryImpl()
{
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = (char *)a2 - v5;
    unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v5);
    if (v7 < 5) {
      goto LABEL_71;
    }
    uint64_t v8 = -v5;
    uint64_t v9 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2))
    {
      uint64_t v10 = (char *)a2 + v9;
      uint64_t v11 = *(unsigned int *)((char *)a2 + v9);
      unint64_t v12 = *(unsigned int *)((char *)a2 + v9 + v11);
      if (v12)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = v9 + v11;
        while (1)
        {
          uint64_t v16 = *(unsigned int *)((char *)a2 + v15 + 4);
          int v17 = (char *)a2 + v15 + v16;
          std::string v18 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v18 + 2) >= 5u)
          {
            uint64_t v19 = *((unsigned __int16 *)v18 + 4);
            if (v19)
            {
              int v20 = (char *)a2 + v15 + v16 + v19;
              if (*((_WORD *)v20 + 2)) {
                break;
              }
            }
          }
LABEL_46:
          if (v14 <= 6)
          {
            ++v14;
            v13 += 2;
            v15 += 4;
            if (v14 < v12) {
              continue;
            }
          }
          uint64_t v47 = *a2;
          uint64_t v8 = -v47;
          unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v47);
          goto LABEL_66;
        }
        *(void *)(a1 + 8 * v14 + 96) = AGX::G5::TextureFormatTable::chooseTextureFormatCPP((AGX::G5::TextureFormatTable *)*((unsigned __int16 *)v20 + 2), v4);
        unsigned int v21 = 1 << v14;
        *(_DWORD *)(a1 + 40) |= 1 << v14;
        uint64_t v22 = v16 - *((int *)v17 + 1);
        unsigned int v23 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 4);
        if (v23 < 0x19)
        {
          int v25 = 0;
          __int32 v24 = 0;
          if (v23 < 0xF)
          {
LABEL_34:
            int v25 = 0;
            int v34 = 1 << v14;
LABEL_35:
            *(_DWORD *)(a1 + 52) |= v34;
            v36.i32[0] = v24;
            v36.i32[1] = v25 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v36, (int32x2_t)0x100000001)));
            if (v25 == 4) {
              int v37 = 1 << v14;
            }
            else {
              int v37 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v37;
            long long v38 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
            if (*((unsigned __int16 *)v38 + 2) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 5)) != 0)
            {
              char v40 = 0;
              int v41 = *((unsigned __int8 *)a2 + v15 + v16 + v39 + 4);
              int v42 = (char *)(a1 + v13 + 160);
              char v43 = 2;
              char v44 = 1;
              switch(v41)
              {
                case 0:
                case 1:
                  char v43 = 1;
                  char v40 = v41;
                  goto LABEL_52;
                case 3:
                  goto LABEL_57;
                case 4:
                  char v45 = 2;
                  goto LABEL_43;
                case 5:
                  goto LABEL_51;
                case 6:
                  char v40 = 1;
LABEL_51:
                  char v43 = 4;
                  goto LABEL_52;
                case 7:
                  char *v42 = 3;
                  *(unsigned char *)(a1 + v13 + 161) = 0;
LABEL_55:
                  int v46 = 3;
                  break;
                case 8:
                  char v44 = 3;
LABEL_57:
                  char *v42 = 2;
                  *(unsigned char *)(a1 + v13 + 161) = v44;
LABEL_58:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_44;
                default:
LABEL_52:
                  char *v42 = v43;
                  *(unsigned char *)(a1 + v13 + 161) = v40;
                  int v46 = 1;
                  switch(v41)
                  {
                    case 0:
                      goto LABEL_45;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_58;
                    case 7:
                      goto LABEL_55;
                    default:
                      goto LABEL_44;
                  }
                  break;
              }
            }
            else
            {
              char v45 = 0;
              int v42 = (char *)(a1 + 2 * v14 + 160);
LABEL_43:
              char *v42 = 2;
              *(unsigned char *)(a1 + v13 + 161) = v45;
LABEL_44:
              int v46 = 2;
            }
LABEL_45:
            *(_WORD *)(a1 + 76) |= v46 << v13;
            unint64_t v12 = *(unsigned int *)&v10[v11];
            goto LABEL_46;
          }
        }
        else
        {
          if (*(_WORD *)((char *)a2 + v15 + v22 + 28)) {
            __int32 v24 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 28) + 4);
          }
          else {
            __int32 v24 = 0;
          }
          if (v23 >= 0x1B && *(_WORD *)((char *)a2 + v15 + v22 + 30)) {
            int v25 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 30) + 4);
          }
          else {
            int v25 = 0;
          }
        }
        uint64_t v26 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 18);
        if (v26 && *(_WORD *)((char *)a2 + v15 + v16 + v26 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v25 & 0xFE) == 2) {
            int v27 = 1 << v14;
          }
          else {
            int v27 = 0;
          }
          *(_DWORD *)(a1 + 68) |= v27;
          char v28 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v28 + 2) >= 0x11u && (uint64_t v29 = *((unsigned __int16 *)v28 + 10)) != 0)
          {
            char v30 = 0;
            int v31 = *((unsigned __int8 *)a2 + v15 + v16 + v29 + 4);
            char v32 = 2;
            switch(v31)
            {
              case 0:
              case 1:
                char v32 = 1;
                char v30 = v31;
                break;
              case 3:
                char v30 = 1;
                break;
              case 4:
                char v30 = 2;
                break;
              case 5:
                goto LABEL_61;
              case 6:
                char v30 = 1;
LABEL_61:
                char v32 = 4;
                break;
              case 7:
                char v30 = 0;
                char v32 = 3;
                break;
              case 8:
                char v30 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            char v30 = 0;
            char v32 = 2;
          }
          uint64_t v33 = a1 + v13;
          *(unsigned char *)(v33 + 176) = v32;
          *(unsigned char *)(v33 + 177) = v30;
        }
        int v34 = 0;
        if (v24 == 2) {
          int v35 = 1 << v14;
        }
        else {
          int v35 = 0;
        }
        *(_DWORD *)(a1 + 56) |= v35;
        if (v25) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
LABEL_66:
    if (v7 >= 7
      && *(_WORD *)((char *)a2 + v8 + 6)
      && (uint64_t v48 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v8 + 6)), (v48 & 0xFFFFFFFE) != 0))
    {
      if (v48 > 0x7FF) {
        LODWORD(v48) = 2048;
      }
    }
    else
    {
LABEL_71:
      LODWORD(v48) = 1;
    }
    *(_DWORD *)(a1 + 80) = v48;
    uint64_t v49 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v50 = *v49;
    if (v50 < 0xB)
    {
      char v52 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v50 < 9)
      {
LABEL_82:
        *(unsigned char *)(a1 + 85) = v52;
        return a1;
      }
    }
    else
    {
      if (v49[5]) {
        char v51 = *((unsigned char *)a2 + v49[5]);
      }
      else {
        char v51 = 1;
      }
      *(unsigned char *)(a1 + 84) = v51;
    }
    uint64_t v53 = v49[4];
    if (v53) {
      char v52 = *((unsigned char *)a2 + v53);
    }
    else {
      char v52 = 1;
    }
    goto LABEL_82;
  }
  return a1;
}

unint64_t AGX::FramebufferCompilerConfig<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::partitionSizeFromFormatAndCompCount(int a1, unsigned int a2)
{
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      return ((unint64_t)a2 + 3) >> 2;
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 22:
      a2 *= 2;
      break;
    case 10:
    case 11:
    case 17:
      a2 *= 4;
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      a2 = 4;
      break;
    default:
      a2 = 0;
      break;
  }
  return ((unint64_t)a2 + 3) >> 2;
}

uint64_t AGX::FramebufferCompilerConfigGen2<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::promotedPBESourceFormat(_DWORD *a1, unsigned int a2, char a3)
{
  uint64_t result = a1[8];
  BOOL v6 = a2 > 1 && result == 2;
  if (a2 < 2)
  {
    BOOL v7 = 0;
  }
  else
  {
    BOOL v7 = a1[21] != 0;
    if (result == 3) {
      return 14;
    }
  }
  unsigned int v8 = a1[7];
  BOOL v9 = !v6 && !v7 && v8 >= 3;
  if (!v9 || (a3 & 1) == 0)
  {
    switch((int)result)
    {
      case 18:
        return 9;
      case 19:
        return 14;
      case 20:
      case 21:
        return 12;
      default:
        if (result == 2)
        {
          uint64_t result = 13;
        }
        else if (result == 3)
        {
          return 14;
        }
        break;
    }
  }
  return result;
}

unint64_t AGX::FramebufferCompilerConfigGen2<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::buildDrawBufferState(unint64_t result)
{
  unint64_t v1 = result;
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(result + 40);
  unsigned int v4 = v3;
  do
  {
    unsigned int v5 = v4;
    if (!v4) {
      break;
    }
    unsigned int v6 = __clz(__rbit32(v4));
    BOOL v7 = *(_DWORD **)(v1 + 8 * v6 + 96);
    int v8 = AGX::FramebufferCompilerConfigGen2<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::promotedPBESourceFormat(v7, *(unsigned __int8 *)(v1 + 84), 0);
    uint64_t result = AGX::FramebufferCompilerConfig<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::partitionSizeFromFormatAndCompCount(v8, v7[7]);
    v2 += result;
    unsigned int v4 = (1 << v6) ^ v5;
  }
  while (v2 < 9);
  unsigned int v9 = 1;
  if (v3)
  {
    unsigned int v10 = 0;
    int v11 = 0;
    do
    {
      uint64_t v12 = __clz(__rbit32(v3));
      uint64_t v13 = *(_DWORD **)(v1 + 8 * v12 + 96);
      unsigned int v23 = v13[7];
      unsigned int v14 = AGX::FramebufferCompilerConfigGen2<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::promotedPBESourceFormat(v13, *(unsigned __int8 *)(v1 + 84), v5 != 0);
      char v15 = v14;
      if (v14 > 0x12 || ((1 << v14) & 0x4000C) == 0)
      {
        int v18 = 0;
        int v17 = 1 << v12;
      }
      else
      {
        int v17 = 1 << v12;
        v11 |= 1 << v12;
        int v18 = (v13[21] != 0) << 8;
      }
      uint64_t result = AGX::FramebufferCompilerConfig<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::partitionSizeFromFormatAndCompCount(v14, v23);
      unsigned int v19 = v15 & 0x1F | (v10 << 12) | v18 | *(_DWORD *)(v1 + 4 * v12) & 0xFFF00EE0;
      *(_DWORD *)(v1 + 4 * v12) = v19;
      unsigned int v20 = v19 & 0xFFFFF1FF | ((v13[19] & 7) << 9);
      *(_DWORD *)(v1 + 4 * v12) = v20;
      unsigned int v21 = v20 & 0xFFFFFF1F | (32 * (v13[7] & 7));
      *(_DWORD *)(v1 + 4 * v12) = v21;
      if ((v11 & v17) != 0) {
        *(_DWORD *)(v1 + 4 * v12) = v21 & 0xFFFFF1FF | ((v13[17] == 173824) << 9);
      }
      v10 += result;
      v3 ^= v17;
      unsigned int v9 = 1;
    }
    while (v3);
    if (v10 >= 2)
    {
      if (v10 >= 5) {
        unsigned int v9 = 8;
      }
      else {
        unsigned int v9 = 1 << -__clz(v10 - 1);
      }
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v9 <= 2) {
    __int16 v22 = 2;
  }
  else {
    __int16 v22 = v9;
  }
  *(_DWORD *)(v1 + 32) = *(_DWORD *)(v1 + 32) & 0xFE000000 | ((v22 & 0x1FF) << 16) | ((*(unsigned char *)(v1 + 84) & 0xF) << 8) & 0xFFF | ((*(unsigned char *)(v1 + 85) & 0xF) << 12) | *(unsigned __int8 *)(v1 + 40);
  *(_DWORD *)(v1 + 44) = v11;
  return result;
}

uint64_t AGCTargetImpl<AGX::G5::Classes,AGX::G5::Encoders>::maxMSAASampleCount()
{
  return 4;
}

uint64_t AGCTargetImpl<AGX::G5::Classes,AGX::G5::Encoders>::requiresRayTracingEmulation()
{
  return 1;
}

void *AGCTargetImpl<AGX::G5::Classes,AGX::G5::Encoders>::GetLegalizationPasses@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v8 = "air-degenerate-vertex-amplification-emulation";
  char v9 = 1;
  unsigned int v10 = "air-raytracing-emulation,indirect-acceleration-structures";
  char v11 = 0;
  uint64_t v12 = "mtl-fetch-all";
  char v13 = 1;
  unsigned int v14 = "air-bfloat-emulation";
  char v15 = 1;
  uint64_t result = malloc_type_malloc(0x20uLL, 0x10040436913F5uLL);
  uint64_t v5 = 0;
  int v6 = 0;
  *a1 = 0;
  do
  {
    if (LOBYTE((&v8)[v5 + 1]))
    {
      BOOL v7 = (&v8)[v5];
      *a1 = v6 + 1;
      result[v6++] = v7;
    }
    v5 += 2;
  }
  while (v5 != 8);
  *a2 = result;
  return result;
}

void AGCTargetImpl<AGX::G5::Classes,AGX::G5::Encoders>::CreateTGSizeToTempTable(uint64_t a1, _DWORD *a2)
{
  *a2 = 31;
  operator new[]();
}

void AGCTargetImpl<AGX::G5::Classes,AGX::G5::Encoders>::CreateProgramKeyFactory()
{
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G5::Classes,AGX::G5::Encoders>::CreateBVHBuilderProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBCB8;
  *(_DWORD *)(a2 + 40) = 0;
  return AGX::BVHBuilderProgramKey::initializeWithDescriptor(a2, a1);
}

_OWORD *AGX::ProgramKeyFactoryImpl<AGX::G5::Classes,AGX::G5::Encoders>::CreateEndOfTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_1F25DBC38;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 118) = 0;
  AGX::FramebufferCompilerConfig<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::FramebufferCompilerConfig((uint64_t)v37, a1);
  uint64_t result = (_OWORD *)AGX::FramebufferCompilerConfigGen2<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::buildDrawBufferState((unint64_t)v37);
  v35[0] = v37[0];
  v35[1] = v37[1];
  unsigned int v5 = v38;
  uint64_t v36 = v38;
  unsigned int v6 = v39;
  int v7 = v40;
  unint64_t v8 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v38 >> 12) << 32) | ((unint64_t)BYTE2(v38) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v8;
  if (v6)
  {
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    unsigned int v12 = (unsigned __int16)v5 >> 12;
    unsigned int v13 = HIWORD(v5) & 0x1FF;
    int v14 = v43 & ~v42 | v41;
    int v15 = v44;
    unsigned int v16 = v42 & ~v43 | v41;
    uint64_t result = v35;
    do
    {
      uint64_t v17 = __clz(__rbit32(v6));
      int v18 = (char *)v37 + 2 * v17;
      if (v18[161])
      {
        int v20 = 0x20000;
      }
      else
      {
        int v19 = v18[160];
        if ((v18[161] & 2) != 0) {
          int v20 = 0x40000;
        }
        else {
          int v20 = 0x20000;
        }
        if (v19 != 2) {
          int v20 = 16711680;
        }
        if ((v19 - 3) < 2 || v19 == 1) {
          int v20 = 0x20000;
        }
      }
      unsigned int v22 = *((_DWORD *)v35 + v17);
      unsigned int v23 = (v22 >> 12) / v13;
      int v24 = (v22 & 0x1F) << 8;
      int v25 = (v22 << 21) & 0x1C000000;
      *(_DWORD *)(v3 + 4 * v17) = *(_DWORD *)(v3 + 4 * v17) & 0xE3000000 | v20 | v24 | v25 | v23;
      v9 |= 1 << v17;
      v10 |= (1 << v17) & v14;
      int v26 = v15 & (1 << v17);
      v11 |= v26;
      if ((v7 & (1 << v17)) != 0)
      {
        if (v12 <= 1) {
          int v27 = 0;
        }
        else {
          int v27 = (v22 << 16) & 0x1000000;
        }
        char v28 = (char *)v37 + 2 * v17;
        char v29 = v28[177];
        if (v29)
        {
          int v34 = 0x20000;
        }
        else
        {
          int v30 = v28[176];
          unsigned int v31 = v30 - 3;
          if ((v29 & 2) != 0) {
            int v32 = 0x40000;
          }
          else {
            int v32 = 0x20000;
          }
          if (v30 != 2) {
            int v32 = 16711680;
          }
          if (v30 == 1) {
            int v33 = 0x20000;
          }
          else {
            int v33 = v32;
          }
          if (v31 >= 2) {
            int v34 = v33;
          }
          else {
            int v34 = 0x20000;
          }
        }
        *(_DWORD *)(v3 + 4 * (v17 + 8)) = *(_DWORD *)(v3 + 4 * (v17 + 8)) & 0xE2000000 | v27 | v34 | v24 | v25 | v23;
        v9 |= 256 << v17;
        v10 |= ((v16 >> v17) & 1) << (v17 + 8);
        v11 |= (v26 != 0) << (v17 + 8);
      }
      v6 ^= 1 << v17;
    }
    while (v6);
    unint64_t v8 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v11) = 0;
    LOWORD(v10) = 0;
    LOWORD(v9) = 0;
  }
  *(_WORD *)(a2 + 120) = v9;
  *(_WORD *)(a2 + 122) = v10;
  *(_WORD *)(a2 + 124) = v11;
  *(void *)(a2 + 112) = v8 & 0xFFFFFFFF00000000 | (unsigned __int16)(v9 & ~(_WORD)v10) | ((unint64_t)(unsigned __int16)(v9 & v11) << 16);
  return result;
}

double AGX::ProgramKeyFactoryImpl<AGX::G5::Classes,AGX::G5::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBBF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfig<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::FramebufferCompilerConfig((uint64_t)v6, a1);
  AGX::FramebufferCompilerConfigGen2<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::buildDrawBufferState((unint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G5::Classes,AGX::G5::Encoders>::CreateTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 8) = 5;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F25DBE10;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(void *)(a4 + 200) = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  int v32 = 1;
  __int16 v33 = 0;
  int v34 = 0;
  memset(v35, 0, 96);
  bzero(&v28, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  unsigned __int8 v9 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v10 = *v9;
  if (v10 < 0xF) {
    goto LABEL_13;
  }
  uint64_t v11 = v9[7];
  if (v9[7])
  {
    uint64_t v12 = *(unsigned int *)((char *)a1 + v11);
    unsigned int v13 = (unsigned int *)((char *)a1 + v11 + v12);
    unint64_t v14 = *v13;
    if (v14)
    {
      unint64_t v15 = 0;
      int v16 = DWORD2(v30);
      uint64_t v27 = a3;
      uint64_t v17 = (char *)a1 + v11 + v12;
      do
      {
        int v18 = &v17[4 * v15];
        uint64_t v19 = *((unsigned int *)v18 + 1);
        int v20 = (char *)v13 + v19 - *(int *)&v18[v19 + 4];
        if (*((unsigned __int16 *)v20 + 2) >= 5u)
        {
          uint64_t v21 = *((unsigned __int16 *)v20 + 4);
          if (v21)
          {
            unsigned int v22 = (char *)v13 + v19 + v21;
            if (*((_WORD *)v22 + 2))
            {
              *((void *)v35 + v15) = AGX::G5::TextureFormatTable::chooseTextureFormatCPP((AGX::G5::TextureFormatTable *)*((unsigned __int16 *)v22 + 2), v8);
              v16 |= 1 << v15;
            }
          }
        }
        if (v15 > 6) {
          break;
        }
        ++v15;
        ++v13;
      }
      while (v15 < v14);
      DWORD2(v30) = v16;
      a3 = v27;
LABEL_13:
      if (v10 <= 0xA)
      {
        char v24 = 1;
        LOBYTE(v33) = 1;
LABEL_21:
        HIBYTE(v33) = v24;
        goto LABEL_22;
      }
    }
  }
  if (v9[5]) {
    char v23 = *((unsigned char *)a1 + v9[5]);
  }
  else {
    char v23 = 1;
  }
  LOBYTE(v33) = v23;
  HIBYTE(v33) = v23;
  if (v10 >= 0xD)
  {
    if (v9[6])
    {
      char v24 = *((unsigned char *)a1 + v9[6]);
      if (v24) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen2<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::buildDrawBufferState((unint64_t)&v28);
  long long v25 = v29;
  *(_OWORD *)(a4 + 112) = v28;
  *(_OWORD *)(a4 + 128) = v25;
  *(void *)(a4 + 144) = v30;
  AGX::Impl::TileProgramKey::initCommon(a4, a1);
  *(_DWORD *)(a4 + 100) &= ~0x80u;
  if (a4 + 160 != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 160), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a4 + 184 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 184), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  LOWORD(v28) = 256;
  *(void *)((char *)&v28 + 2) = 0;
  *(_DWORD *)((char *)&v28 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a4, (unsigned __int8 *)&v28);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G5::Classes,AGX::G5::Encoders>::CreateComputeProgramKey@<X0>(AGX *a1@<X1>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 8) = 6;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)a5 = &unk_1F25DBE50;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 64), "");
  *(unsigned char *)(a5 + 88) = 0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  AGX::Impl::ComputeProgramKey::initCommon((AGX *)a5, a1);
  *(_DWORD *)(a5 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a5, a2);
  if (a5 + 96 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a5 + 120 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  __int16 v11 = 256;
  uint64_t v12 = 0;
  int v13 = 0;
  return AGX::Impl::ComputeProgramKey::setDeviceOptions(a5, (unsigned __int8 *)&v11);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G5::Classes,AGX::G5::Encoders>::CreateFragmentProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 8) = 4;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 232) = 0u;
  uint64_t v12 = (char *)(a6 + 232);
  *(void *)a6 = &unk_1F25DBDD0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_OWORD *)(a6 + 120) = 0u;
  *(_OWORD *)(a6 + 136) = 0u;
  *(_OWORD *)(a6 + 152) = 0u;
  *(_OWORD *)(a6 + 168) = 0u;
  *(_OWORD *)(a6 + 184) = 0u;
  *(_OWORD *)(a6 + 200) = 0u;
  *(_OWORD *)(a6 + 209) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 264) = 0u;
  long long v40 = 0u;
  memset(v41, 0, sizeof(v41));
  long long v38 = 0u;
  long long v39 = 0u;
  int v42 = 1;
  __int16 v43 = 0;
  int v44 = 0;
  memset(v45, 0, 96);
  bzero(&v38, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  int v37 = a2;
  unint64_t v14 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  unsigned int v15 = *v14;
  if (v15 >= 0x17)
  {
    uint64_t v16 = v14[11];
    if (!v14[11]) {
      goto LABEL_14;
    }
    uint64_t v17 = *(unsigned int *)((char *)a1 + v16);
    int v18 = (unsigned int *)((char *)a1 + v16 + v17);
    unint64_t v19 = *v18;
    if (!v19) {
      goto LABEL_14;
    }
    int v34 = a3;
    uint64_t v35 = a4;
    uint64_t v36 = a5;
    unint64_t v20 = 0;
    int v21 = DWORD2(v40);
    unsigned int v22 = (char *)a1 + v16 + v17;
    do
    {
      char v23 = &v22[4 * v20];
      uint64_t v24 = *((unsigned int *)v23 + 1);
      long long v25 = (char *)v18 + v24 - *(int *)&v23[v24 + 4];
      if (*((unsigned __int16 *)v25 + 2) >= 5u)
      {
        uint64_t v26 = *((unsigned __int16 *)v25 + 4);
        if (v26)
        {
          uint64_t v27 = (char *)v18 + v24 + v26;
          if (*((_WORD *)v27 + 2))
          {
            *((void *)v45 + v20) = AGX::G5::TextureFormatTable::chooseTextureFormatCPP((AGX::G5::TextureFormatTable *)*((unsigned __int16 *)v27 + 2), v13);
            v21 |= 1 << v20;
          }
        }
      }
      if (v20 > 6) {
        break;
      }
      ++v20;
      ++v18;
    }
    while (v20 < v19);
    DWORD2(v40) = v21;
    a4 = v35;
    a5 = v36;
    a3 = v34;
  }
  if (v15 <= 0xC)
  {
    char v29 = 1;
    LOBYTE(v43) = 1;
    a2 = v37;
LABEL_21:
    HIBYTE(v43) = v29;
    goto LABEL_22;
  }
LABEL_14:
  if (v14[6]) {
    char v28 = *((unsigned char *)a1 + v14[6]);
  }
  else {
    char v28 = 1;
  }
  a2 = v37;
  LOBYTE(v43) = v28;
  HIBYTE(v43) = v28;
  if (v15 >= 0xF)
  {
    if (v14[7])
    {
      char v29 = *((unsigned char *)a1 + v14[7]);
      if (v29) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen2<AGX::G5::Encoders,AGX::G5::Classes,AGX::G5::ObjClasses>::buildDrawBufferState((unint64_t)&v38);
  long long v30 = v39;
  *(_OWORD *)(a6 + 112) = v38;
  *(_OWORD *)(a6 + 128) = v30;
  *(void *)(a6 + 144) = v40;
  AGX::Impl::FragmentProgramKey::initCommon((AGX *)a6, a1);
  int v31 = *(_DWORD *)(a6 + 104);
  if (a2) {
    int v32 = 256;
  }
  else {
    int v32 = 0;
  }
  *(_DWORD *)(a6 + 100) &= ~0x80u;
  *(_DWORD *)(a6 + 104) = v31 & 0xFFFFFEFF | v32;
  AGX::Impl::FragmentProgramKey::setSerializedDescriptor((AGX::Impl::FragmentProgramKey *)a6, a3);
  if (v12 != (char *)a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a6 + 256 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a6 + 256), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  LOWORD(v38) = 256;
  *(void *)((char *)&v38 + 2) = 0;
  *(_DWORD *)((char *)&v38 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a6, (unsigned __int8 *)&v38);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G5::Classes,AGX::G5::Encoders>::CreateMeshProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v26 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v27 = *(std::string *)(a2 + 24);
  }
  int v17 = *(unsigned __int8 *)(a2 + 48);
  *(_OWORD *)(a8 + 104) = 0u;
  *(_DWORD *)(a8 + 8) = 10;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_DWORD *)(a8 + 96) = 0;
  *(void *)a8 = &unk_1F25DBD40;
  *(std::string *)(a8 + 152) = v26;
  long long v18 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(void *)(a8 + 192) = *((void *)&v27.__r_.__value_.__l + 2);
  if (a3) {
    int v19 = 128;
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  *(_OWORD *)(a8 + 176) = v18;
  *(unsigned char *)(a8 + 200) = v17;
  *(_DWORD *)(a8 + 56) = v20 | v19 | (16 * v17);
  AGX::Impl::MeshProgramKey::initCommon((AGX *)a8, a1);
  *(_DWORD *)(a8 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a8, a5);
  if (a8 + 104 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 104), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  if (a8 + 128 != a7) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 128), *(char **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5);
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v21;
  __int16 v23 = 256;
  uint64_t v24 = 0;
  int v25 = 0;
  return AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(a8, (unsigned __int8 *)&v23);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G5::Classes,AGX::G5::Encoders>::CreateObjectProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)(a7 + 8) = 9;
  *(_OWORD *)(a7 + 104) = 0u;
  __int16 v11 = (char *)(a7 + 104);
  *(_OWORD *)(a7 + 120) = 0u;
  *(_OWORD *)(a7 + 136) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_DWORD *)(a7 + 96) = 0;
  *(void *)a7 = &unk_1F25DBD88;
  if (a2) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  if (a3) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a7 + 56) = v13 | v12;
  AGX::Impl::ObjectProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a7, a4);
  if (v11 != (char *)a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v11, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a7 + 128 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 128), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  __int16 v15 = 256;
  uint64_t v16 = 0;
  int v17 = 0;
  return AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(a7, (unsigned __int8 *)&v15);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G5::Classes,AGX::G5::Encoders>::CreateVertexProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v21 = *(std::string *)(a2 + 24);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)(a7 + 8) = 3;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 76) = 0u;
  *(void *)a7 = &unk_1F25DBCF8;
  *(std::string *)(a7 + 144) = v20;
  *(std::string *)(a7 + 168) = v21;
  *(unsigned char *)(a7 + 192) = v14;
  *(void *)(a7 + 56) = v14 << 18;
  AGX::Impl::VertexProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a7, a3);
  if (a7 + 96 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a7 + 120 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a6) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a7 + 88) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v15;
  __int16 v17 = 256;
  uint64_t v18 = 0;
  int v19 = 0;
  return AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(a7, (unsigned __int8 *)&v17);
}

void AGX::ProgramKeyFactoryImpl<AGX::G5::Classes,AGX::G5::Encoders>::~ProgramKeyFactoryImpl()
{
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v5 = *a2;
    unsigned int v6 = (char *)a2 - v5;
    unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v5);
    if (v7 < 5) {
      goto LABEL_71;
    }
    uint64_t v8 = -v5;
    uint64_t v9 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2))
    {
      unsigned int v10 = (char *)a2 + v9;
      uint64_t v11 = *(unsigned int *)((char *)a2 + v9);
      unint64_t v12 = *(unsigned int *)((char *)a2 + v9 + v11);
      if (v12)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        uint64_t v15 = v9 + v11;
        while (1)
        {
          uint64_t v16 = *(unsigned int *)((char *)a2 + v15 + 4);
          __int16 v17 = (char *)a2 + v15 + v16;
          uint64_t v18 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v18 + 2) >= 5u)
          {
            uint64_t v19 = *((unsigned __int16 *)v18 + 4);
            if (v19)
            {
              std::string v20 = (char *)a2 + v15 + v16 + v19;
              if (*((_WORD *)v20 + 2)) {
                break;
              }
            }
          }
LABEL_46:
          if (v14 <= 6)
          {
            ++v14;
            v13 += 2;
            v15 += 4;
            if (v14 < v12) {
              continue;
            }
          }
          uint64_t v47 = *a2;
          uint64_t v8 = -v47;
          unsigned int v7 = *(unsigned __int16 *)((char *)a2 - v47);
          goto LABEL_66;
        }
        *(void *)(a1 + 8 * v14 + 96) = AGX::G9::TextureFormatTable::chooseTextureFormatCPP((AGX::G9::TextureFormatTable *)*((unsigned __int16 *)v20 + 2), v4);
        unsigned int v21 = 1 << v14;
        *(_DWORD *)(a1 + 40) |= 1 << v14;
        uint64_t v22 = v16 - *((int *)v17 + 1);
        unsigned int v23 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 4);
        if (v23 < 0x19)
        {
          int v25 = 0;
          __int32 v24 = 0;
          if (v23 < 0xF)
          {
LABEL_34:
            int v25 = 0;
            int v34 = 1 << v14;
LABEL_35:
            *(_DWORD *)(a1 + 52) |= v34;
            v36.i32[0] = v24;
            v36.i32[1] = v25 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v36, (int32x2_t)0x100000001)));
            if (v25 == 4) {
              int v37 = 1 << v14;
            }
            else {
              int v37 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v37;
            long long v38 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
            if (*((unsigned __int16 *)v38 + 2) >= 7u && (uint64_t v39 = *((unsigned __int16 *)v38 + 5)) != 0)
            {
              char v40 = 0;
              int v41 = *((unsigned __int8 *)a2 + v15 + v16 + v39 + 4);
              int v42 = (char *)(a1 + v13 + 160);
              char v43 = 2;
              char v44 = 1;
              switch(v41)
              {
                case 0:
                case 1:
                  char v43 = 1;
                  char v40 = v41;
                  goto LABEL_52;
                case 3:
                  goto LABEL_57;
                case 4:
                  char v45 = 2;
                  goto LABEL_43;
                case 5:
                  goto LABEL_51;
                case 6:
                  char v40 = 1;
LABEL_51:
                  char v43 = 4;
                  goto LABEL_52;
                case 7:
                  char *v42 = 3;
                  *(unsigned char *)(a1 + v13 + 161) = 0;
LABEL_55:
                  int v46 = 3;
                  break;
                case 8:
                  char v44 = 3;
LABEL_57:
                  char *v42 = 2;
                  *(unsigned char *)(a1 + v13 + 161) = v44;
LABEL_58:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_44;
                default:
LABEL_52:
                  char *v42 = v43;
                  *(unsigned char *)(a1 + v13 + 161) = v40;
                  int v46 = 1;
                  switch(v41)
                  {
                    case 0:
                      goto LABEL_45;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_58;
                    case 7:
                      goto LABEL_55;
                    default:
                      goto LABEL_44;
                  }
                  break;
              }
            }
            else
            {
              char v45 = 0;
              int v42 = (char *)(a1 + 2 * v14 + 160);
LABEL_43:
              char *v42 = 2;
              *(unsigned char *)(a1 + v13 + 161) = v45;
LABEL_44:
              int v46 = 2;
            }
LABEL_45:
            *(_WORD *)(a1 + 76) |= v46 << v13;
            unint64_t v12 = *(unsigned int *)&v10[v11];
            goto LABEL_46;
          }
        }
        else
        {
          if (*(_WORD *)((char *)a2 + v15 + v22 + 28)) {
            __int32 v24 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 28) + 4);
          }
          else {
            __int32 v24 = 0;
          }
          if (v23 >= 0x1B && *(_WORD *)((char *)a2 + v15 + v22 + 30)) {
            int v25 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 30) + 4);
          }
          else {
            int v25 = 0;
          }
        }
        uint64_t v26 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 18);
        if (v26 && *(_WORD *)((char *)a2 + v15 + v16 + v26 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v25 & 0xFE) == 2) {
            int v27 = 1 << v14;
          }
          else {
            int v27 = 0;
          }
          *(_DWORD *)(a1 + 68) |= v27;
          char v28 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v28 + 2) >= 0x11u && (uint64_t v29 = *((unsigned __int16 *)v28 + 10)) != 0)
          {
            char v30 = 0;
            int v31 = *((unsigned __int8 *)a2 + v15 + v16 + v29 + 4);
            char v32 = 2;
            switch(v31)
            {
              case 0:
              case 1:
                char v32 = 1;
                char v30 = v31;
                break;
              case 3:
                char v30 = 1;
                break;
              case 4:
                char v30 = 2;
                break;
              case 5:
                goto LABEL_61;
              case 6:
                char v30 = 1;
LABEL_61:
                char v32 = 4;
                break;
              case 7:
                char v30 = 0;
                char v32 = 3;
                break;
              case 8:
                char v30 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            char v30 = 0;
            char v32 = 2;
          }
          uint64_t v33 = a1 + v13;
          *(unsigned char *)(v33 + 176) = v32;
          *(unsigned char *)(v33 + 177) = v30;
        }
        int v34 = 0;
        if (v24 == 2) {
          int v35 = 1 << v14;
        }
        else {
          int v35 = 0;
        }
        *(_DWORD *)(a1 + 56) |= v35;
        if (v25) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
LABEL_66:
    if (v7 >= 7
      && *(_WORD *)((char *)a2 + v8 + 6)
      && (uint64_t v48 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v8 + 6)), (v48 & 0xFFFFFFFE) != 0))
    {
      if (v48 > 0x7FF) {
        LODWORD(v48) = 2048;
      }
    }
    else
    {
LABEL_71:
      LODWORD(v48) = 1;
    }
    *(_DWORD *)(a1 + 80) = v48;
    uint64_t v49 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v50 = *v49;
    if (v50 < 0xB)
    {
      char v52 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v50 < 9)
      {
LABEL_82:
        *(unsigned char *)(a1 + 85) = v52;
        return a1;
      }
    }
    else
    {
      if (v49[5]) {
        char v51 = *((unsigned char *)a2 + v49[5]);
      }
      else {
        char v51 = 1;
      }
      *(unsigned char *)(a1 + 84) = v51;
    }
    uint64_t v53 = v49[4];
    if (v53) {
      char v52 = *((unsigned char *)a2 + v53);
    }
    else {
      char v52 = 1;
    }
    goto LABEL_82;
  }
  return a1;
}

unint64_t AGX::FramebufferCompilerConfig<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::partitionSizeFromFormatAndCompCount(int a1, unsigned int a2)
{
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      return ((unint64_t)a2 + 3) >> 2;
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 22:
      a2 *= 2;
      break;
    case 10:
    case 11:
    case 17:
      a2 *= 4;
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      a2 = 4;
      break;
    default:
      a2 = 0;
      break;
  }
  return ((unint64_t)a2 + 3) >> 2;
}

uint64_t AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::promotedPBESourceFormat(_DWORD *a1, unsigned int a2, char a3)
{
  uint64_t result = a1[8];
  BOOL v6 = a2 > 1 && result == 2;
  if (a2 < 2)
  {
    BOOL v7 = 0;
  }
  else
  {
    BOOL v7 = a1[21] != 0;
    if (result == 3) {
      return 14;
    }
  }
  unsigned int v8 = a1[7];
  BOOL v9 = !v6 && !v7 && v8 >= 3;
  if (!v9 || (a3 & 1) == 0)
  {
    switch((int)result)
    {
      case 18:
        return 9;
      case 19:
        return 14;
      case 20:
      case 21:
        return 12;
      default:
        if (result == 2)
        {
          uint64_t result = 13;
        }
        else if (result == 3)
        {
          return 14;
        }
        break;
    }
  }
  return result;
}

unint64_t AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildDrawBufferState(unint64_t result)
{
  unint64_t v1 = result;
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(result + 40);
  unsigned int v4 = v3;
  do
  {
    unsigned int v5 = v4;
    if (!v4) {
      break;
    }
    unsigned int v6 = __clz(__rbit32(v4));
    BOOL v7 = *(_DWORD **)(v1 + 8 * v6 + 96);
    int v8 = AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::promotedPBESourceFormat(v7, *(unsigned __int8 *)(v1 + 84), 0);
    uint64_t result = AGX::FramebufferCompilerConfig<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::partitionSizeFromFormatAndCompCount(v8, v7[7]);
    v2 += result;
    unsigned int v4 = (1 << v6) ^ v5;
  }
  while (v2 < 9);
  unsigned int v9 = 1;
  if (v3)
  {
    unsigned int v10 = 0;
    int v11 = 0;
    do
    {
      uint64_t v12 = __clz(__rbit32(v3));
      uint64_t v13 = *(_DWORD **)(v1 + 8 * v12 + 96);
      unsigned int v23 = v13[7];
      unsigned int v14 = AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::promotedPBESourceFormat(v13, *(unsigned __int8 *)(v1 + 84), v5 != 0);
      char v15 = v14;
      if (v14 > 0x12 || ((1 << v14) & 0x4000C) == 0)
      {
        int v18 = 0;
        int v17 = 1 << v12;
      }
      else
      {
        int v17 = 1 << v12;
        v11 |= 1 << v12;
        int v18 = (v13[21] != 0) << 8;
      }
      uint64_t result = AGX::FramebufferCompilerConfig<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::partitionSizeFromFormatAndCompCount(v14, v23);
      unsigned int v19 = v15 & 0x1F | (v10 << 12) | v18 | *(_DWORD *)(v1 + 4 * v12) & 0xFFF00EE0;
      *(_DWORD *)(v1 + 4 * v12) = v19;
      unsigned int v20 = v19 & 0xFFFFF1FF | ((v13[19] & 7) << 9);
      *(_DWORD *)(v1 + 4 * v12) = v20;
      unsigned int v21 = v20 & 0xFFFFFF1F | (32 * (v13[7] & 7));
      *(_DWORD *)(v1 + 4 * v12) = v21;
      if ((v11 & v17) != 0) {
        *(_DWORD *)(v1 + 4 * v12) = v21 & 0xFFFFF1FF | ((v13[17] == 173824) << 9);
      }
      v10 += result;
      v3 ^= v17;
      unsigned int v9 = 1;
    }
    while (v3);
    if (v10 >= 2)
    {
      if (v10 >= 5) {
        unsigned int v9 = 8;
      }
      else {
        unsigned int v9 = 1 << -__clz(v10 - 1);
      }
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v9 <= 2) {
    __int16 v22 = 2;
  }
  else {
    __int16 v22 = v9;
  }
  *(_DWORD *)(v1 + 32) = *(_DWORD *)(v1 + 32) & 0xFE000000 | ((v22 & 0x1FF) << 16) | ((*(unsigned char *)(v1 + 84) & 0xF) << 8) & 0xFFF | ((*(unsigned char *)(v1 + 85) & 0xF) << 12) | *(unsigned __int8 *)(v1 + 40);
  *(_DWORD *)(v1 + 44) = v11;
  return result;
}

uint64_t AGCTargetImpl<AGX::G9::Classes,AGX::G9::Encoders>::maxMSAASampleCount()
{
  return 4;
}

uint64_t AGCTargetImpl<AGX::G9::Classes,AGX::G9::Encoders>::requiresRayTracingEmulation()
{
  return 1;
}

void *AGCTargetImpl<AGX::G9::Classes,AGX::G9::Encoders>::GetLegalizationPasses@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v8 = "air-degenerate-vertex-amplification-emulation";
  char v9 = 1;
  unsigned int v10 = "air-raytracing-emulation,indirect-acceleration-structures";
  char v11 = 0;
  uint64_t v12 = "mtl-fetch-all";
  char v13 = 1;
  unsigned int v14 = "air-bfloat-emulation";
  char v15 = 1;
  uint64_t result = malloc_type_malloc(0x20uLL, 0x10040436913F5uLL);
  uint64_t v5 = 0;
  int v6 = 0;
  *a1 = 0;
  do
  {
    if (LOBYTE((&v8)[v5 + 1]))
    {
      BOOL v7 = (&v8)[v5];
      *a1 = v6 + 1;
      result[v6++] = v7;
    }
    v5 += 2;
  }
  while (v5 != 8);
  *a2 = result;
  return result;
}

void AGCTargetImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateTGSizeToTempTable(uint64_t a1, _DWORD *a2)
{
  *a2 = 31;
  operator new[]();
}

void AGCTargetImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateProgramKeyFactory()
{
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateBVHBuilderProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBCB8;
  *(_DWORD *)(a2 + 40) = 0;
  return AGX::BVHBuilderProgramKey::initializeWithDescriptor(a2, a1);
}

_OWORD *AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateEndOfTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_1F25DBC38;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 118) = 0;
  AGX::FramebufferCompilerConfig<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::FramebufferCompilerConfig((uint64_t)v37, a1);
  uint64_t result = (_OWORD *)AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildDrawBufferState((unint64_t)v37);
  v35[0] = v37[0];
  v35[1] = v37[1];
  unsigned int v5 = v38;
  uint64_t v36 = v38;
  unsigned int v6 = v39;
  int v7 = v40;
  unint64_t v8 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v38 >> 12) << 32) | ((unint64_t)BYTE2(v38) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v8;
  if (v6)
  {
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    unsigned int v12 = (unsigned __int16)v5 >> 12;
    unsigned int v13 = HIWORD(v5) & 0x1FF;
    int v14 = v43 & ~v42 | v41;
    int v15 = v44;
    unsigned int v16 = v42 & ~v43 | v41;
    uint64_t result = v35;
    do
    {
      uint64_t v17 = __clz(__rbit32(v6));
      int v18 = (char *)v37 + 2 * v17;
      if (v18[161])
      {
        int v20 = 0x20000;
      }
      else
      {
        int v19 = v18[160];
        if ((v18[161] & 2) != 0) {
          int v20 = 0x40000;
        }
        else {
          int v20 = 0x20000;
        }
        if (v19 != 2) {
          int v20 = 16711680;
        }
        if ((v19 - 3) < 2 || v19 == 1) {
          int v20 = 0x20000;
        }
      }
      unsigned int v22 = *((_DWORD *)v35 + v17);
      unsigned int v23 = (v22 >> 12) / v13;
      int v24 = (v22 & 0x1F) << 8;
      int v25 = (v22 << 21) & 0x1C000000;
      *(_DWORD *)(v3 + 4 * v17) = *(_DWORD *)(v3 + 4 * v17) & 0xE3000000 | v20 | v24 | v25 | v23;
      v9 |= 1 << v17;
      v10 |= (1 << v17) & v14;
      int v26 = v15 & (1 << v17);
      v11 |= v26;
      if ((v7 & (1 << v17)) != 0)
      {
        if (v12 <= 1) {
          int v27 = 0;
        }
        else {
          int v27 = (v22 << 16) & 0x1000000;
        }
        char v28 = (char *)v37 + 2 * v17;
        char v29 = v28[177];
        if (v29)
        {
          int v34 = 0x20000;
        }
        else
        {
          int v30 = v28[176];
          unsigned int v31 = v30 - 3;
          if ((v29 & 2) != 0) {
            int v32 = 0x40000;
          }
          else {
            int v32 = 0x20000;
          }
          if (v30 != 2) {
            int v32 = 16711680;
          }
          if (v30 == 1) {
            int v33 = 0x20000;
          }
          else {
            int v33 = v32;
          }
          if (v31 >= 2) {
            int v34 = v33;
          }
          else {
            int v34 = 0x20000;
          }
        }
        *(_DWORD *)(v3 + 4 * (v17 + 8)) = *(_DWORD *)(v3 + 4 * (v17 + 8)) & 0xE2000000 | v27 | v34 | v24 | v25 | v23;
        v9 |= 256 << v17;
        v10 |= ((v16 >> v17) & 1) << (v17 + 8);
        v11 |= (v26 != 0) << (v17 + 8);
      }
      v6 ^= 1 << v17;
    }
    while (v6);
    unint64_t v8 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v11) = 0;
    LOWORD(v10) = 0;
    LOWORD(v9) = 0;
  }
  *(_WORD *)(a2 + 120) = v9;
  *(_WORD *)(a2 + 122) = v10;
  *(_WORD *)(a2 + 124) = v11;
  *(void *)(a2 + 112) = v8 & 0xFFFFFFFF00000000 | (unsigned __int16)(v9 & ~(_WORD)v10) | ((unint64_t)(unsigned __int16)(v9 & v11) << 16);
  return result;
}

double AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBBF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfig<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::FramebufferCompilerConfig((uint64_t)v6, a1);
  AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildDrawBufferState((unint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 8) = 5;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F25DBE10;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(void *)(a4 + 200) = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  int v32 = 1;
  __int16 v33 = 0;
  int v34 = 0;
  memset(v35, 0, 96);
  bzero(&v28, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  unsigned __int8 v9 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v10 = *v9;
  if (v10 < 0xF) {
    goto LABEL_13;
  }
  uint64_t v11 = v9[7];
  if (v9[7])
  {
    uint64_t v12 = *(unsigned int *)((char *)a1 + v11);
    unsigned int v13 = (unsigned int *)((char *)a1 + v11 + v12);
    unint64_t v14 = *v13;
    if (v14)
    {
      unint64_t v15 = 0;
      int v16 = DWORD2(v30);
      uint64_t v27 = a3;
      uint64_t v17 = (char *)a1 + v11 + v12;
      do
      {
        int v18 = &v17[4 * v15];
        uint64_t v19 = *((unsigned int *)v18 + 1);
        int v20 = (char *)v13 + v19 - *(int *)&v18[v19 + 4];
        if (*((unsigned __int16 *)v20 + 2) >= 5u)
        {
          uint64_t v21 = *((unsigned __int16 *)v20 + 4);
          if (v21)
          {
            unsigned int v22 = (char *)v13 + v19 + v21;
            if (*((_WORD *)v22 + 2))
            {
              *((void *)v35 + v15) = AGX::G9::TextureFormatTable::chooseTextureFormatCPP((AGX::G9::TextureFormatTable *)*((unsigned __int16 *)v22 + 2), v8);
              v16 |= 1 << v15;
            }
          }
        }
        if (v15 > 6) {
          break;
        }
        ++v15;
        ++v13;
      }
      while (v15 < v14);
      DWORD2(v30) = v16;
      a3 = v27;
LABEL_13:
      if (v10 <= 0xA)
      {
        char v24 = 1;
        LOBYTE(v33) = 1;
LABEL_21:
        HIBYTE(v33) = v24;
        goto LABEL_22;
      }
    }
  }
  if (v9[5]) {
    char v23 = *((unsigned char *)a1 + v9[5]);
  }
  else {
    char v23 = 1;
  }
  LOBYTE(v33) = v23;
  HIBYTE(v33) = v23;
  if (v10 >= 0xD)
  {
    if (v9[6])
    {
      char v24 = *((unsigned char *)a1 + v9[6]);
      if (v24) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildDrawBufferState((unint64_t)&v28);
  long long v25 = v29;
  *(_OWORD *)(a4 + 112) = v28;
  *(_OWORD *)(a4 + 128) = v25;
  *(void *)(a4 + 144) = v30;
  AGX::Impl::TileProgramKey::initCommon(a4, a1);
  *(_DWORD *)(a4 + 100) &= ~0x80u;
  if (a4 + 160 != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 160), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a4 + 184 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 184), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  LOWORD(v28) = 256;
  *(void *)((char *)&v28 + 2) = 0;
  *(_DWORD *)((char *)&v28 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a4, (unsigned __int8 *)&v28);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateComputeProgramKey@<X0>(AGX *a1@<X1>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 8) = 6;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)a5 = &unk_1F25DBE50;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 64), "");
  *(unsigned char *)(a5 + 88) = 0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  AGX::Impl::ComputeProgramKey::initCommon((AGX *)a5, a1);
  *(_DWORD *)(a5 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a5, a2);
  if (a5 + 96 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a5 + 120 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  __int16 v11 = 256;
  uint64_t v12 = 0;
  int v13 = 0;
  return AGX::Impl::ComputeProgramKey::setDeviceOptions(a5, (unsigned __int8 *)&v11);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateFragmentProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 8) = 4;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 232) = 0u;
  uint64_t v12 = (char *)(a6 + 232);
  *(void *)a6 = &unk_1F25DBDD0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_OWORD *)(a6 + 120) = 0u;
  *(_OWORD *)(a6 + 136) = 0u;
  *(_OWORD *)(a6 + 152) = 0u;
  *(_OWORD *)(a6 + 168) = 0u;
  *(_OWORD *)(a6 + 184) = 0u;
  *(_OWORD *)(a6 + 200) = 0u;
  *(_OWORD *)(a6 + 209) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 264) = 0u;
  long long v40 = 0u;
  memset(v41, 0, sizeof(v41));
  long long v38 = 0u;
  long long v39 = 0u;
  int v42 = 1;
  __int16 v43 = 0;
  int v44 = 0;
  memset(v45, 0, 96);
  bzero(&v38, 0x28uLL);
  if (!a1) {
    goto LABEL_22;
  }
  int v37 = a2;
  unint64_t v14 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  unsigned int v15 = *v14;
  if (v15 >= 0x17)
  {
    uint64_t v16 = v14[11];
    if (!v14[11]) {
      goto LABEL_14;
    }
    uint64_t v17 = *(unsigned int *)((char *)a1 + v16);
    int v18 = (unsigned int *)((char *)a1 + v16 + v17);
    unint64_t v19 = *v18;
    if (!v19) {
      goto LABEL_14;
    }
    int v34 = a3;
    uint64_t v35 = a4;
    uint64_t v36 = a5;
    unint64_t v20 = 0;
    int v21 = DWORD2(v40);
    unsigned int v22 = (char *)a1 + v16 + v17;
    do
    {
      char v23 = &v22[4 * v20];
      uint64_t v24 = *((unsigned int *)v23 + 1);
      long long v25 = (char *)v18 + v24 - *(int *)&v23[v24 + 4];
      if (*((unsigned __int16 *)v25 + 2) >= 5u)
      {
        uint64_t v26 = *((unsigned __int16 *)v25 + 4);
        if (v26)
        {
          uint64_t v27 = (char *)v18 + v24 + v26;
          if (*((_WORD *)v27 + 2))
          {
            *((void *)v45 + v20) = AGX::G9::TextureFormatTable::chooseTextureFormatCPP((AGX::G9::TextureFormatTable *)*((unsigned __int16 *)v27 + 2), v13);
            v21 |= 1 << v20;
          }
        }
      }
      if (v20 > 6) {
        break;
      }
      ++v20;
      ++v18;
    }
    while (v20 < v19);
    DWORD2(v40) = v21;
    a4 = v35;
    a5 = v36;
    a3 = v34;
  }
  if (v15 <= 0xC)
  {
    char v29 = 1;
    LOBYTE(v43) = 1;
    a2 = v37;
LABEL_21:
    HIBYTE(v43) = v29;
    goto LABEL_22;
  }
LABEL_14:
  if (v14[6]) {
    char v28 = *((unsigned char *)a1 + v14[6]);
  }
  else {
    char v28 = 1;
  }
  a2 = v37;
  LOBYTE(v43) = v28;
  HIBYTE(v43) = v28;
  if (v15 >= 0xF)
  {
    if (v14[7])
    {
      char v29 = *((unsigned char *)a1 + v14[7]);
      if (v29) {
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  AGX::FramebufferCompilerConfigGen2<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::buildDrawBufferState((unint64_t)&v38);
  long long v30 = v39;
  *(_OWORD *)(a6 + 112) = v38;
  *(_OWORD *)(a6 + 128) = v30;
  *(void *)(a6 + 144) = v40;
  AGX::Impl::FragmentProgramKey::initCommon((AGX *)a6, a1);
  int v31 = *(_DWORD *)(a6 + 104);
  if (a2) {
    int v32 = 256;
  }
  else {
    int v32 = 0;
  }
  *(_DWORD *)(a6 + 100) &= ~0x80u;
  *(_DWORD *)(a6 + 104) = v31 & 0xFFFFFEFF | v32;
  AGX::Impl::FragmentProgramKey::setSerializedDescriptor((AGX::Impl::FragmentProgramKey *)a6, a3);
  if (v12 != (char *)a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a6 + 256 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a6 + 256), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  LOWORD(v38) = 256;
  *(void *)((char *)&v38 + 2) = 0;
  *(_DWORD *)((char *)&v38 + 10) = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a6, (unsigned __int8 *)&v38);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateMeshProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v26 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v27 = *(std::string *)(a2 + 24);
  }
  int v17 = *(unsigned __int8 *)(a2 + 48);
  *(_OWORD *)(a8 + 104) = 0u;
  *(_DWORD *)(a8 + 8) = 10;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_DWORD *)(a8 + 96) = 0;
  *(void *)a8 = &unk_1F25DBD40;
  *(std::string *)(a8 + 152) = v26;
  long long v18 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  *(void *)(a8 + 192) = *((void *)&v27.__r_.__value_.__l + 2);
  if (a3) {
    int v19 = 128;
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  *(_OWORD *)(a8 + 176) = v18;
  *(unsigned char *)(a8 + 200) = v17;
  *(_DWORD *)(a8 + 56) = v20 | v19 | (16 * v17);
  AGX::Impl::MeshProgramKey::initCommon((AGX *)a8, a1);
  *(_DWORD *)(a8 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a8, a5);
  if (a8 + 104 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 104), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  if (a8 + 128 != a7) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 128), *(char **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5);
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v21;
  __int16 v23 = 256;
  uint64_t v24 = 0;
  int v25 = 0;
  return AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(a8, (unsigned __int8 *)&v23);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateObjectProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)(a7 + 8) = 9;
  *(_OWORD *)(a7 + 104) = 0u;
  __int16 v11 = (char *)(a7 + 104);
  *(_OWORD *)(a7 + 120) = 0u;
  *(_OWORD *)(a7 + 136) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_DWORD *)(a7 + 96) = 0;
  *(void *)a7 = &unk_1F25DBD88;
  if (a2) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  if (a3) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a7 + 56) = v13 | v12;
  AGX::Impl::ObjectProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a7, a4);
  if (v11 != (char *)a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v11, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a7 + 128 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 128), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  __int16 v15 = 256;
  uint64_t v16 = 0;
  int v17 = 0;
  return AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(a7, (unsigned __int8 *)&v15);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::CreateVertexProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v21 = *(std::string *)(a2 + 24);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)(a7 + 8) = 3;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 76) = 0u;
  *(void *)a7 = &unk_1F25DBCF8;
  *(std::string *)(a7 + 144) = v20;
  *(std::string *)(a7 + 168) = v21;
  *(unsigned char *)(a7 + 192) = v14;
  *(void *)(a7 + 56) = v14 << 18;
  AGX::Impl::VertexProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a7, a3);
  if (a7 + 96 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a7 + 120 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a6) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a7 + 88) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v15;
  __int16 v17 = 256;
  uint64_t v18 = 0;
  int v19 = 0;
  return AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(a7, (unsigned __int8 *)&v17);
}

void AGX::ProgramKeyFactoryImpl<AGX::G9::Classes,AGX::G9::Encoders>::~ProgramKeyFactoryImpl()
{
}

uint64_t AGX::FramebufferCompilerConfig<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    uint64_t v4 = *a2;
    unint64_t v5 = (char *)a2 - v4;
    unsigned int v6 = *(unsigned __int16 *)((char *)a2 - v4);
    if (v6 < 5) {
      goto LABEL_73;
    }
    uint64_t v7 = -v4;
    uint64_t v8 = *((unsigned __int16 *)v5 + 2);
    if (*((_WORD *)v5 + 2))
    {
      unsigned __int8 v9 = (char *)a2 + v8;
      uint64_t v10 = *(unsigned int *)((char *)a2 + v8);
      unint64_t v11 = *(unsigned int *)((char *)a2 + v8 + v10);
      if (v11)
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        uint64_t v14 = v8 + v10;
        while (1)
        {
          uint64_t v15 = *(unsigned int *)((char *)a2 + v14 + 4);
          uint64_t v16 = (char *)a2 + v14 + v15;
          __int16 v17 = (char *)a2 + v14 + v15 - *((int *)v16 + 1);
          if (*((unsigned __int16 *)v17 + 2) >= 5u)
          {
            uint64_t v18 = *((unsigned __int16 *)v17 + 4);
            if (v18)
            {
              unsigned int v19 = *(unsigned __int16 *)((char *)a2 + v14 + v15 + v18 + 4);
              if (v19) {
                break;
              }
            }
          }
LABEL_48:
          if (v13 <= 6)
          {
            ++v13;
            v12 += 2;
            v14 += 4;
            if (v13 < v11) {
              continue;
            }
          }
          uint64_t v49 = *a2;
          uint64_t v7 = -v49;
          unsigned int v6 = *(unsigned __int16 *)((char *)a2 - v49);
          goto LABEL_68;
        }
        std::string v20 = &texFormatUnsupported;
        if (v19 <= 0x285) {
          std::string v20 = *(&off_1E65EECA8 + v19 - 1);
        }
        *(void *)(a1 + 8 * v13 + 96) = v20;
        unsigned int v21 = 1 << v13;
        *(_DWORD *)(a1 + 40) |= 1 << v13;
        uint64_t v22 = v15 - *((int *)v16 + 1);
        __int16 v23 = (char *)a2 + v14 + v22;
        unsigned int v24 = *((unsigned __int16 *)v23 + 2);
        if (v24 < 0x19)
        {
          int v27 = 0;
          __int32 v26 = 0;
          if (v24 < 0xF)
          {
LABEL_36:
            int v27 = 0;
            int v36 = 1 << v13;
LABEL_37:
            *(_DWORD *)(a1 + 52) |= v36;
            v38.i32[0] = v26;
            v38.i32[1] = v27 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v38, (int32x2_t)0x100000001)));
            if (v27 == 4) {
              int v39 = 1 << v13;
            }
            else {
              int v39 = 0;
            }
            *(_DWORD *)(a1 + 72) |= v39;
            long long v40 = (char *)a2 + v14 + v15 - *((int *)v16 + 1);
            if (*((unsigned __int16 *)v40 + 2) >= 7u && (uint64_t v41 = *((unsigned __int16 *)v40 + 5)) != 0)
            {
              char v42 = 0;
              int v43 = *((unsigned __int8 *)a2 + v14 + v15 + v41 + 4);
              int v44 = (char *)(a1 + v12 + 160);
              char v45 = 2;
              char v46 = 1;
              switch(v43)
              {
                case 0:
                case 1:
                  char v45 = 1;
                  char v42 = v43;
                  goto LABEL_54;
                case 3:
                  goto LABEL_59;
                case 4:
                  char v47 = 2;
                  goto LABEL_45;
                case 5:
                  goto LABEL_53;
                case 6:
                  char v42 = 1;
LABEL_53:
                  char v45 = 4;
                  goto LABEL_54;
                case 7:
                  char *v44 = 3;
                  *(unsigned char *)(a1 + v12 + 161) = 0;
LABEL_57:
                  int v48 = 3;
                  break;
                case 8:
                  char v46 = 3;
LABEL_59:
                  char *v44 = 2;
                  *(unsigned char *)(a1 + v12 + 161) = v46;
LABEL_60:
                  *(unsigned char *)(a1 + 78) |= v21;
                  goto LABEL_46;
                default:
LABEL_54:
                  char *v44 = v45;
                  *(unsigned char *)(a1 + v12 + 161) = v42;
                  int v48 = 1;
                  switch(v43)
                  {
                    case 0:
                      goto LABEL_47;
                    case 1:
                      *(unsigned char *)(a1 + 78) |= v21;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_60;
                    case 7:
                      goto LABEL_57;
                    default:
                      goto LABEL_46;
                  }
                  break;
              }
            }
            else
            {
              char v47 = 0;
              int v44 = (char *)(a1 + 2 * v13 + 160);
LABEL_45:
              char *v44 = 2;
              *(unsigned char *)(a1 + v12 + 161) = v47;
LABEL_46:
              int v48 = 2;
            }
LABEL_47:
            *(_WORD *)(a1 + 76) |= v48 << v12;
            unint64_t v11 = *(unsigned int *)&v9[v10];
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v25 = *((unsigned __int16 *)v23 + 14);
          if (v25) {
            __int32 v26 = *((unsigned __int8 *)a2 + v14 + v15 + v25 + 4);
          }
          else {
            __int32 v26 = 0;
          }
          if (v24 >= 0x1B && *(_WORD *)((char *)a2 + v14 + v22 + 30)) {
            int v27 = *((unsigned __int8 *)a2 + v14 + v15 + *(unsigned __int16 *)((char *)a2 + v14 + v22 + 30) + 4);
          }
          else {
            int v27 = 0;
          }
        }
        uint64_t v28 = *(unsigned __int16 *)((char *)a2 + v14 + v22 + 18);
        if (v28 && *(_WORD *)((char *)a2 + v14 + v15 + v28 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v27 & 0xFE) == 2) {
            int v29 = 1 << v13;
          }
          else {
            int v29 = 0;
          }
          *(_DWORD *)(a1 + 68) |= v29;
          long long v30 = (char *)a2 + v14 + v15 - *((int *)v16 + 1);
          if (*((unsigned __int16 *)v30 + 2) >= 0x11u && (uint64_t v31 = *((unsigned __int16 *)v30 + 10)) != 0)
          {
            char v32 = 0;
            int v33 = *((unsigned __int8 *)a2 + v14 + v15 + v31 + 4);
            char v34 = 2;
            switch(v33)
            {
              case 0:
              case 1:
                char v34 = 1;
                char v32 = v33;
                break;
              case 3:
                char v32 = 1;
                break;
              case 4:
                char v32 = 2;
                break;
              case 5:
                goto LABEL_63;
              case 6:
                char v32 = 1;
LABEL_63:
                char v34 = 4;
                break;
              case 7:
                char v32 = 0;
                char v34 = 3;
                break;
              case 8:
                char v32 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            char v32 = 0;
            char v34 = 2;
          }
          uint64_t v35 = a1 + v12;
          *(unsigned char *)(v35 + 176) = v34;
          *(unsigned char *)(v35 + 177) = v32;
        }
        int v36 = 0;
        if (v26 == 2) {
          int v37 = 1 << v13;
        }
        else {
          int v37 = 0;
        }
        *(_DWORD *)(a1 + 56) |= v37;
        if (v27) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
    }
LABEL_68:
    if (v6 >= 7
      && *(_WORD *)((char *)a2 + v7 + 6)
      && (uint64_t v50 = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v7 + 6)), (v50 & 0xFFFFFFFE) != 0))
    {
      if (v50 > 0x7FF) {
        LODWORD(v50) = 2048;
      }
    }
    else
    {
LABEL_73:
      LODWORD(v50) = 1;
    }
    *(_DWORD *)(a1 + 80) = v50;
    char v51 = (unsigned __int16 *)((char *)a2 - *a2);
    unsigned int v52 = *v51;
    if (v52 < 0xB)
    {
      char v54 = 1;
      *(unsigned char *)(a1 + 84) = 1;
      if (v52 < 9)
      {
LABEL_84:
        *(unsigned char *)(a1 + 85) = v54;
        return a1;
      }
    }
    else
    {
      if (v51[5]) {
        char v53 = *((unsigned char *)a2 + v51[5]);
      }
      else {
        char v53 = 1;
      }
      *(unsigned char *)(a1 + 84) = v53;
    }
    uint64_t v55 = v51[4];
    if (v55) {
      char v54 = *((unsigned char *)a2 + v55);
    }
    else {
      char v54 = 1;
    }
    goto LABEL_84;
  }
  return a1;
}

uint64_t AGX::FramebufferCompilerConfig<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::partitionSizeFromFormatAndCompCount(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      return a2;
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 22:
      a2 = (2 * a2);
      break;
    case 10:
    case 11:
    case 17:
      a2 = (4 * a2);
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      a2 = 4;
      break;
    default:
      a2 = 0;
      break;
  }
  return a2;
}

uint64_t AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(result + 40);
  unsigned int v4 = v3;
  do
  {
    unsigned int v5 = v4;
    if (!v4) {
      break;
    }
    unsigned int v6 = __clz(__rbit32(v4));
    uint64_t v7 = *(void *)(v1 + 8 * v6 + 96);
    if (*(_DWORD *)(v7 + 32) == 18) {
      int v8 = 9;
    }
    else {
      int v8 = *(_DWORD *)(v7 + 32);
    }
    double result = AGX::FramebufferCompilerConfig<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::partitionSizeFromFormatAndCompCount(v8, *(unsigned int *)(v7 + 28));
    v2 += result;
    int v9 = 1 << v6;
    if (v2 > 0x100) {
      int v9 = 0;
    }
    unsigned int v4 = v9 ^ v5;
  }
  while (v2 < 0x101);
  if (v3)
  {
    LODWORD(v10) = 0;
    int v11 = 0;
    char v12 = 0;
    int v13 = 0;
    double result = 4293922528;
    unsigned int v36 = v5;
    uint64_t v35 = v1;
    do
    {
      uint64_t v14 = __clz(__rbit32(v3));
      uint64_t v15 = *(unsigned int **)(v1 + 8 * v14 + 96);
      uint64_t v16 = v15[7];
      if (v15[8] == 18 && v5 == 0) {
        int v18 = 9;
      }
      else {
        int v18 = v15[8];
      }
      int v19 = 1 << v14;
      if (v18 == 18) {
        int v20 = 1 << v14;
      }
      else {
        int v20 = 0;
      }
      if (v18 == 3)
      {
        int v21 = (v15[21] != 0) << 8;
        int v22 = 1;
      }
      else
      {
        int v23 = v13;
        int v24 = AGX::FramebufferCompilerConfig<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::partitionSizeFromFormatAndCompCount(v18, v16);
        int v13 = v23;
        unsigned int v5 = v36;
        int v19 = 1 << v14;
        uint64_t v1 = v35;
        LODWORD(v16) = v24;
        double result = 4293922528;
        int v21 = 0;
        int v22 = 1;
        switch(v18)
        {
          case 2:
          case 4:
          case 5:
            break;
          case 6:
          case 7:
          case 8:
          case 9:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 22:
            int v21 = 0;
            int v22 = 2;
            break;
          case 10:
          case 11:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
            int v21 = 0;
            int v22 = 4;
            break;
          default:
            int v21 = 0;
            int v22 = 0;
            break;
        }
      }
      v13 |= v20;
      int v25 = v22 - 1;
      int v26 = -v22;
      int v27 = (v25 + v10) & v26;
      v12 |= (v27 + v16) > 0x100;
      int v28 = (v25 + v11) & v26;
      if (v12) {
        int v11 = v28 + v16;
      }
      else {
        LOBYTE(v28) = v27;
      }
      unsigned int v29 = v21 & 0xFFF00FFF | *(_DWORD *)(v1 + 4 * v14) & 0xFFF00EE0 | v18 & 0x1F | (v28 << 12);
      *(_DWORD *)(v1 + 4 * v14) = v29;
      unsigned int v30 = v29 & 0xFFFFF1FF | ((v15[19] & 7) << 9);
      *(_DWORD *)(v1 + 4 * v14) = v30;
      if (v12) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = (v27 + v16);
      }
      *(_DWORD *)(v1 + 4 * v14) = v30 & 0xFFFFFF1F | (32 * (v15[7] & 7));
      v3 ^= v19;
    }
    while (v3);
    unint64_t v31 = 256;
    if (((v10 + 7) & 0x1FFFFFF00) == 0) {
      unint64_t v31 = (v10 + 7) & 0x1FFFFFFF8;
    }
    if (v31 <= 8) {
      LODWORD(v31) = 8;
    }
    int v32 = v31 << 16;
    if (v12)
    {
      int v32 = 0x1000000;
      int v33 = 0x2000000;
    }
    else
    {
      int v33 = 0;
    }
    int v34 = *(unsigned __int8 *)(v1 + 40) | v33;
  }
  else
  {
    int v11 = 0;
    int v13 = 0;
    int v34 = 0;
    int v32 = 0x80000;
  }
  *(_DWORD *)(v1 + 32) = v34 | ((*(unsigned char *)(v1 + 84) & 0xF) << 8) | *(_DWORD *)(v1 + 32) & 0xFC000000 | v32 | ((*(unsigned char *)(v1 + 85) & 0xF) << 12);
  *(_DWORD *)(v1 + 88) = v11;
  *(_DWORD *)(v1 + 44) = v13;
  return result;
}

uint64_t AGX::PBEStateEncoderGen9<kAGXRevHAL200>::StateFields::getDimensionality(int a1, char a2, unsigned int a3)
{
  if (a3 < 2) {
    unsigned __int8 v3 = 2;
  }
  else {
    unsigned __int8 v3 = 3;
  }
  if (a2)
  {
    if ((a2 & 2) != 0) {
      unsigned __int8 v4 = 8;
    }
    else {
      unsigned __int8 v4 = v3;
    }
    BOOL v5 = a1 == 4;
LABEL_11:
    if (v5) {
      return v3;
    }
  }
  else
  {
    unsigned __int8 v4 = 5;
    switch(a1)
    {
      case 1:
        unsigned __int8 v4 = 2;
        break;
      case 2:
        BOOL v5 = (a2 & 2) == 0;
        unsigned __int8 v4 = 4;
        unsigned __int8 v3 = 2;
        goto LABEL_11;
      case 3:
        return v4;
      case 4:
        unsigned __int8 v4 = v3;
        break;
      default:
        unsigned __int8 v4 = -1;
        break;
    }
  }
  return v4;
}

uint64_t AGCTargetImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::maxMSAASampleCount()
{
  return 4;
}

uint64_t AGCTargetImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::requiresRayTracingEmulation()
{
  return 0;
}

void *AGCTargetImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::GetLegalizationPasses@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v9 = "air-degenerate-vertex-amplification-emulation";
  char v10 = 0;
  int v11 = "air-raytracing-emulation,indirect-acceleration-structures";
  char v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int v13 = "mtl-fetch-all-unaligned";
  char v14 = 1;
  uint64_t v15 = "air-bfloat-emulation";
  char v16 = 0;
  double result = malloc_type_malloc(0x20uLL, 0x10040436913F5uLL);
  uint64_t v6 = 0;
  int v7 = 0;
  *a2 = 0;
  do
  {
    if (LOBYTE((&v9)[v6 + 1]))
    {
      int v8 = (&v9)[v6];
      *a2 = v7 + 1;
      result[v7++] = v8;
    }
    v6 += 2;
  }
  while (v6 != 8);
  *a3 = result;
  return result;
}

void AGCTargetImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateTGSizeToTempTable(uint64_t a1, _DWORD *a2)
{
  *a2 = 24;
  operator new[]();
}

void AGCTargetImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateProgramKeyFactory()
{
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateBVHBuilderProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBCB8;
  *(_DWORD *)(a2 + 40) = 0;
  return AGX::BVHBuilderProgramKey::initializeWithDescriptor(a2, a1);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateEndOfTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_1F25DBC38;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 118) = 0;
  AGX::FramebufferCompilerConfig<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferCompilerConfig((uint64_t)v31, a1);
  uint64_t result = AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)v31);
  v29[0] = v31[0];
  v29[1] = v31[1];
  unsigned int v5 = v32;
  uint64_t v30 = v32;
  unsigned int v6 = v39;
  unsigned int v7 = v33;
  int v24 = v34;
  unint64_t v8 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v32 >> 12) << 32) | ((unint64_t)BYTE2(v32) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v8;
  if (v7)
  {
    int v9 = 0;
    int v28 = 0;
    int v10 = 0;
    unsigned int v20 = (unsigned __int16)v5 >> 12;
    int v23 = v38;
    unsigned int v22 = HIWORD(v5) & 0x1FF;
    int v21 = v37 & ~v36 | v35;
    unsigned int v19 = v36 & ~v37 | v35;
    do
    {
      uint64_t v11 = __clz(__rbit32(v7));
      unsigned int v12 = *((_DWORD *)v29 + v11);
      unsigned int v13 = *(_DWORD *)(v3 + 4 * v11) & 0xE3000000;
      uint64_t result = AGX::PBEStateEncoderGen9<kAGXRevHAL200>::StateFields::getDimensionality(v40[2 * v11], v40[2 * v11 + 1], v6);
      *(_DWORD *)(v3 + 4 * v11) = v13 & 0xE3FFE0FF | (result << 16) & 0xE3FFFFFF | ((v12 & 0x1F) << 8) | (v12 >> 5 << 26) | ((v12 >> 12) / v22);
      v9 |= 1 << v11;
      unsigned int v27 = (v12 >> 12) / v22;
      v28 |= (1 << v11) & v21;
      int v14 = v23 & (1 << v11);
      v10 |= v14;
      if ((v24 & (1 << v11)) != 0)
      {
        int v26 = v10;
        int v15 = (v12 & 0x1F) << 8;
        int v25 = (v12 << 21) & 0x1C000000;
        unsigned int v16 = v11 + 8;
        int v17 = (v12 << 16) & 0x1000000;
        if (v20 <= 1) {
          int v17 = 0;
        }
        unsigned int v18 = *(_DWORD *)(v3 + 4 * (v11 + 8)) & 0xE2000000 | v17;
        uint64_t result = AGX::PBEStateEncoderGen9<kAGXRevHAL200>::StateFields::getDimensionality(v40[2 * v11 + 16], v40[2 * v11 + 17], v6);
        *(_DWORD *)(v3 + 4 * v16) = v18 | (result << 16) | v15 | v25 | v27;
        v9 |= 256 << v11;
        v28 |= ((v19 >> v11) & 1) << v16;
        int v10 = ((v14 != 0) << v16) | v26;
      }
      v7 ^= 1 << v11;
    }
    while (v7);
    unint64_t v8 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v10) = 0;
    LOWORD(v28) = 0;
    LOWORD(v9) = 0;
  }
  *(_WORD *)(a2 + 120) = v9;
  *(_WORD *)(a2 + 122) = v28;
  *(_WORD *)(a2 + 124) = v10;
  *(void *)(a2 + 112) = v8 & 0xFFFFFFFF00000000 | (unsigned __int16)(v9 & ~(_WORD)v28) | ((unint64_t)(unsigned __int16)(v9 & v10) << 16);
  return result;
}

double AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_1F25DBBF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfig<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferCompilerConfig((uint64_t)v6, a1);
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)v6);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 8) = 5;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = &unk_1F25DBE10;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(void *)(a4 + 200) = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  int v32 = 1;
  __int16 v33 = 0;
  int v34 = 0;
  memset(v35, 0, sizeof(v35));
  bzero(&v28, 0x28uLL);
  if (!a1) {
    goto LABEL_24;
  }
  int v8 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v9 = *v8;
  if (v9 < 0xF) {
    goto LABEL_15;
  }
  uint64_t v10 = v8[7];
  if (v8[7])
  {
    uint64_t v11 = *(unsigned int *)((char *)a1 + v10);
    unsigned int v12 = (unsigned int *)((char *)a1 + v10 + v11);
    unint64_t v13 = *v12;
    if (v13)
    {
      unint64_t v14 = 0;
      int v15 = DWORD2(v30);
      unsigned int v16 = (char *)a1 + v10 + v11;
      do
      {
        int v17 = &v16[4 * v14];
        uint64_t v18 = *((unsigned int *)v17 + 1);
        unsigned int v19 = (char *)v12 + v18 - *(int *)&v17[v18 + 4];
        if (*((unsigned __int16 *)v19 + 2) >= 5u)
        {
          uint64_t v20 = *((unsigned __int16 *)v19 + 4);
          if (v20)
          {
            unsigned int v21 = *(unsigned __int16 *)((char *)v12 + v18 + v20 + 4);
            if (v21)
            {
              unsigned int v22 = &texFormatUnsupported;
              if (v21 <= 0x285) {
                unsigned int v22 = *(&off_1E65EECA8 + v21 - 1);
              }
              *((void *)v35 + v14) = v22;
              v15 |= 1 << v14;
            }
          }
        }
        if (v14 > 6) {
          break;
        }
        ++v14;
        ++v12;
      }
      while (v14 < v13);
      DWORD2(v30) = v15;
LABEL_15:
      if (v9 <= 0xA)
      {
        LOBYTE(v24) = 1;
        LOBYTE(v33) = 1;
LABEL_23:
        HIBYTE(v33) = v24;
        goto LABEL_24;
      }
    }
  }
  if (v8[5]) {
    char v23 = *((unsigned char *)a1 + v8[5]);
  }
  else {
    char v23 = 1;
  }
  LOBYTE(v33) = v23;
  HIBYTE(v33) = v23;
  if (v9 >= 0xD)
  {
    uint64_t v25 = v8[6];
    if (v25)
    {
      int v24 = *((unsigned __int8 *)a1 + v25);
      if (v24) {
        goto LABEL_23;
      }
    }
  }
LABEL_24:
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)&v28);
  long long v26 = v29;
  *(_OWORD *)(a4 + 112) = v28;
  *(_OWORD *)(a4 + 128) = v26;
  *(void *)(a4 + 144) = v30;
  AGX::Impl::TileProgramKey::initCommon(a4, a1);
  *(_DWORD *)(a4 + 100) &= ~0x80u;
  if (a4 + 160 != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 160), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a4 + 184 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a4 + 184), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  *(void *)((char *)&v28 + 6) = 0;
  *(void *)&long long v28 = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a4, (unsigned __int8 *)&v28);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateComputeProgramKey@<X0>(AGX *a1@<X1>, NSObject *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 8) = 6;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)a5 = &unk_1F25DBE50;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  std::string::basic_string[abi:nn180100]<0>((void *)(a5 + 64), "");
  *(unsigned char *)(a5 + 88) = 0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  AGX::Impl::ComputeProgramKey::initCommon((AGX *)a5, a1);
  *(int8x8_t *)(a5 + 52) = vand_s8(*(int8x8_t *)(a5 + 52), (int8x8_t)0xFFFFFFFEFFFFFF7FLL);
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a5, a2);
  if (a5 + 96 != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 96), *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  }
  if (a5 + 120 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a5 + 120), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  memset(v11, 0, 14);
  return AGX::Impl::ComputeProgramKey::setDeviceOptions(a5, (unsigned __int8 *)v11);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateFragmentProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  *(_DWORD *)(a6 + 8) = 4;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a6 + 232) = 0u;
  unsigned int v12 = (char *)(a6 + 232);
  *(void *)a6 = &unk_1F25DBDD0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_OWORD *)(a6 + 120) = 0u;
  *(_OWORD *)(a6 + 136) = 0u;
  *(_OWORD *)(a6 + 152) = 0u;
  *(_OWORD *)(a6 + 168) = 0u;
  *(_OWORD *)(a6 + 184) = 0u;
  *(_OWORD *)(a6 + 200) = 0u;
  *(_OWORD *)(a6 + 209) = 0u;
  *(_OWORD *)(a6 + 248) = 0u;
  *(_OWORD *)(a6 + 264) = 0u;
  long long v38 = 0u;
  memset(v39, 0, sizeof(v39));
  long long v36 = 0u;
  long long v37 = 0u;
  int v40 = 1;
  __int16 v41 = 0;
  int v42 = 0;
  memset(v43, 0, sizeof(v43));
  bzero(&v36, 0x28uLL);
  if (!a1) {
    goto LABEL_24;
  }
  unint64_t v13 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  unsigned int v14 = *v13;
  if (v14 >= 0x17)
  {
    uint64_t v15 = v13[11];
    if (!v13[11]) {
      goto LABEL_16;
    }
    uint64_t v16 = *(unsigned int *)((char *)a1 + v15);
    int v17 = (unsigned int *)((char *)a1 + v15 + v16);
    unint64_t v18 = *v17;
    if (!v18) {
      goto LABEL_16;
    }
    unint64_t v19 = 0;
    int v20 = DWORD2(v38);
    unsigned int v21 = (char *)a1 + v15 + v16;
    do
    {
      unsigned int v22 = &v21[4 * v19];
      uint64_t v23 = *((unsigned int *)v22 + 1);
      int v24 = (char *)v17 + v23 - *(int *)&v22[v23 + 4];
      if (*((unsigned __int16 *)v24 + 2) >= 5u)
      {
        uint64_t v25 = *((unsigned __int16 *)v24 + 4);
        if (v25)
        {
          unsigned int v26 = *(unsigned __int16 *)((char *)v17 + v23 + v25 + 4);
          if (v26)
          {
            unsigned int v27 = &texFormatUnsupported;
            if (v26 <= 0x285) {
              unsigned int v27 = *(&off_1E65EECA8 + v26 - 1);
            }
            *((void *)v43 + v19) = v27;
            v20 |= 1 << v19;
          }
        }
      }
      if (v19 > 6) {
        break;
      }
      ++v19;
      ++v17;
    }
    while (v19 < v18);
    DWORD2(v38) = v20;
  }
  if (v14 <= 0xC)
  {
    LOBYTE(v29) = 1;
    LOBYTE(v41) = 1;
LABEL_23:
    HIBYTE(v41) = v29;
    goto LABEL_24;
  }
LABEL_16:
  if (v13[6]) {
    char v28 = *((unsigned char *)a1 + v13[6]);
  }
  else {
    char v28 = 1;
  }
  LOBYTE(v41) = v28;
  HIBYTE(v41) = v28;
  if (v14 >= 0xF)
  {
    uint64_t v30 = v13[7];
    if (v30)
    {
      int v29 = *((unsigned __int8 *)a1 + v30);
      if (v29) {
        goto LABEL_23;
      }
    }
  }
LABEL_24:
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)&v36);
  long long v31 = v37;
  *(_OWORD *)(a6 + 112) = v36;
  *(_OWORD *)(a6 + 128) = v31;
  *(void *)(a6 + 144) = v38;
  AGX::Impl::FragmentProgramKey::initCommon((AGX *)a6, a1);
  int v32 = *(_DWORD *)(a6 + 104);
  unsigned int v33 = *(_DWORD *)(a6 + 100) & 0xFFFFFF7F;
  *(_DWORD *)(a6 + 40) &= ~0x10u;
  if (a2) {
    int v34 = 256;
  }
  else {
    int v34 = 0;
  }
  *(_DWORD *)(a6 + 100) = v33;
  *(_DWORD *)(a6 + 104) = v32 & 0xFFFFFEFF | v34;
  AGX::Impl::FragmentProgramKey::setSerializedDescriptor((AGX::Impl::FragmentProgramKey *)a6, a3);
  if (v12 != (char *)a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a6 + 256 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a6 + 256), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  *(void *)((char *)&v36 + 6) = 0;
  *(void *)&long long v36 = 0;
  return AGX::Impl::FragmentProgramKey::setDeviceOptions(a6, (unsigned __int8 *)&v36);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateMeshProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v24 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v25 = *(std::string *)(a2 + 24);
  }
  int v17 = *(unsigned __int8 *)(a2 + 48);
  *(_OWORD *)(a8 + 104) = 0u;
  *(_DWORD *)(a8 + 8) = 10;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 136) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_DWORD *)(a8 + 96) = 0;
  *(void *)a8 = &unk_1F25DBD40;
  *(std::string *)(a8 + 152) = v24;
  long long v18 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
  *(void *)(a8 + 192) = *((void *)&v25.__r_.__value_.__l + 2);
  if (a3) {
    int v19 = 128;
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  *(_OWORD *)(a8 + 176) = v18;
  *(unsigned char *)(a8 + 200) = v17;
  *(_DWORD *)(a8 + 56) = v20 | v19 | (16 * v17);
  AGX::Impl::MeshProgramKey::initCommon((AGX *)a8, a1);
  *(_DWORD *)(a8 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a8, a5);
  if (a8 + 104 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 104), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  if (a8 + 128 != a7) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a8 + 128), *(char **)a7, *(void *)(a7 + 8), (uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5);
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v21;
  memset(v23, 0, 14);
  return AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setDeviceOptions(a8, (unsigned __int8 *)v23);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateObjectProgramKey@<X0>(AGX *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  *(_DWORD *)(a7 + 8) = 9;
  *(_OWORD *)(a7 + 104) = 0u;
  uint64_t v11 = (char *)(a7 + 104);
  *(_OWORD *)(a7 + 120) = 0u;
  *(_OWORD *)(a7 + 136) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_DWORD *)(a7 + 96) = 0;
  *(void *)a7 = &unk_1F25DBD88;
  if (a2) {
    int v12 = 2;
  }
  else {
    int v12 = 0;
  }
  if (a3) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a7 + 56) = v13 | v12;
  AGX::Impl::ObjectProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::setSerializedDescriptor((std::string *)a7, a4);
  if (v11 != (char *)a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v11, *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a7 + 128 != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 128), *(char **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 5);
  }
  memset(v15, 0, 14);
  return AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::setDeviceOptions(a7, (unsigned __int8 *)v15);
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateVertexProgramKey@<X0>(AGX *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v18 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v19 = *(std::string *)(a2 + 24);
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)(a7 + 8) = 3;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 76) = 0u;
  *(void *)a7 = &unk_1F25DBCF8;
  *(std::string *)(a7 + 144) = v18;
  *(std::string *)(a7 + 168) = v19;
  *(unsigned char *)(a7 + 192) = v14;
  *(void *)(a7 + 56) = v14 << 18;
  AGX::Impl::VertexProgramKey::initCommon((AGX *)a7, a1);
  *(_DWORD *)(a7 + 52) &= ~0x80u;
  AGX::Impl::ComputeProgramKey::setStageInDescriptor((AGX::Impl::ComputeProgramKey *)a7, a3);
  if (a7 + 96 != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 96), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 5);
  }
  if (a7 + 120 != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(a7 + 120), *(char **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 5);
  }
  if (a6) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a7 + 88) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v15;
  memset(v17, 0, 14);
  return AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(a7, (unsigned __int8 *)v17);
}

void AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::~ProgramKeyFactoryImpl()
{
}

void *AGX::G10::TextureFormatTable::chooseTextureFormatCPP(AGX::G10::TextureFormatTable *this, MTLPixelFormat a2)
{
  int v2 = this - 1;
  double result = &texFormatA8;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 25:
    case 26:
    case 27:
    case 28:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 65:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 105:
    case 106:
    case 107:
    case 108:
    case 110:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 167:
    case 168:
    case 170:
    case 172:
    case 174:
    case 176:
    case 183:
    case 200:
    case 201:
    case 218:
    case 219:
    case 236:
    case 237:
    case 238:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 250:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
LABEL_150:
      double result = &texFormatUnsupported;
      break;
    case 9:
      double result = &texFormatR8;
      break;
    case 10:
      double result = &texFormatsR8;
      break;
    case 11:
      double result = &texFormatR8_SNORM;
      break;
    case 12:
      double result = &texFormatR8UI;
      break;
    case 13:
      double result = &texFormatR8I;
      break;
    case 19:
      double result = &texFormatR16;
      break;
    case 21:
      double result = &texFormatR16_SNORM;
      break;
    case 22:
      double result = &texFormatR16UI;
      break;
    case 23:
      double result = &texFormatR16I;
      break;
    case 24:
      double result = &texFormatR16F;
      break;
    case 29:
      double result = &texFormatRG8;
      break;
    case 30:
      double result = &texFormatsRG8;
      break;
    case 31:
      double result = &texFormatRG8_SNORM;
      break;
    case 32:
      double result = &texFormatRG8UI;
      break;
    case 33:
      double result = &texFormatRG8I;
      break;
    case 39:
      double result = &texFormatRGB565;
      break;
    case 40:
      double result = &texFormatRGB5A1;
      break;
    case 41:
      double result = &texFormatRGBA4;
      break;
    case 42:
      double result = &texFormatA1RGB5;
      break;
    case 43:
      double result = &texFormatBGRA4;
      break;
    case 52:
      double result = &texFormatR32UI;
      break;
    case 53:
      double result = &texFormatR32I;
      break;
    case 54:
      double result = &texFormatR32F;
      break;
    case 59:
      double result = &texFormatRG16;
      break;
    case 61:
      double result = &texFormatRG16_SNORM;
      break;
    case 62:
      double result = &texFormatRG16UI;
      break;
    case 63:
      double result = &texFormatRG16I;
      break;
    case 64:
      double result = &texFormatRG16F;
      break;
    case 69:
      double result = &texFormatRGBA8;
      break;
    case 70:
      double result = &texFormatsRGBA8;
      break;
    case 71:
      double result = &texFormatRGBA8_SNORM;
      break;
    case 72:
      double result = &texFormatRGBA8UI;
      break;
    case 73:
      double result = &texFormatRGBA8I;
      break;
    case 79:
      double result = &texFormatBGRA8;
      break;
    case 80:
      double result = &texFormatsBGRA8;
      break;
    case 83:
      double result = &texFormatARGB8;
      break;
    case 84:
      double result = &texFormatsARGB8;
      break;
    case 89:
      double result = &texFormatRGB10_A2;
      break;
    case 90:
      double result = &texFormatRGB10_A2UI;
      break;
    case 91:
      double result = &texFormatR11FG11FB10F;
      break;
    case 92:
      double result = &texFormatRGB9_E5;
      break;
    case 93:
      double result = &texFormatBGR10_A2;
      break;
    case 102:
      double result = &texFormatRG32UI;
      break;
    case 103:
      double result = &texFormatRG32I;
      break;
    case 104:
      double result = &texFormatRG32F;
      break;
    case 109:
      double result = &texFormatRGBA16;
      break;
    case 111:
      double result = &texFormatRGBA16_SNORM;
      break;
    case 112:
      double result = &texFormatRGBA16UI;
      break;
    case 113:
      double result = &texFormatRGBA16I;
      break;
    case 114:
      double result = &texFormatRGBA16F;
      break;
    case 122:
      double result = &texFormatRGBA32UI;
      break;
    case 123:
      double result = &texFormatRGBA32I;
      break;
    case 124:
      double result = &texFormatRGBA32F;
      break;
    case 159:
      double result = &texFormatPVRTC2RGB;
      break;
    case 160:
      double result = &texFormatPVRTC2sRGB;
      break;
    case 161:
      double result = &texFormatPVRTC4RGB;
      break;
    case 162:
      double result = &texFormatPVRTC4sRGB;
      break;
    case 163:
      double result = &texFormatPVRTC2RGBA;
      break;
    case 164:
      double result = &texFormatPVRTC2sRGBA;
      break;
    case 165:
      double result = &texFormatPVRTC4RGBA;
      break;
    case 166:
      double result = &texFormatPVRTC4sRGBA;
      break;
    case 169:
      double result = &texFormatR11EAC;
      break;
    case 171:
      double result = &texFormatR11EAC_SNORM;
      break;
    case 173:
      double result = &texFormatRG11EAC;
      break;
    case 175:
      double result = &texFormatRG11EAC_SNORM;
      break;
    case 177:
      double result = &texFormatETC2RGBA8;
      break;
    case 178:
      double result = &texFormatETC2sRGBA8;
      break;
    case 179:
      double result = &texFormatETC2RGB8;
      break;
    case 180:
      double result = &texFormatETC2sRGB8;
      break;
    case 181:
      double result = &texFormatETC2RGB8A1;
      break;
    case 182:
      double result = &texFormatETC2sRGB8A1;
      break;
    case 184:
      double result = &texFormatASTC4x2sRGBA_UNORM;
      break;
    case 185:
      double result = &texFormatASTC4x4sRGBA_UNORM;
      break;
    case 186:
      double result = &texFormatASTC5x4sRGBA_UNORM;
      break;
    case 187:
      double result = &texFormatASTC5x5sRGBA_UNORM;
      break;
    case 188:
      double result = &texFormatASTC6x5sRGBA_UNORM;
      break;
    case 189:
      double result = &texFormatASTC6x6sRGBA_UNORM;
      break;
    case 190:
      double result = &texFormatASTC8x4sRGBA_UNORM;
      break;
    case 191:
      double result = &texFormatASTC8x5sRGBA_UNORM;
      break;
    case 192:
      double result = &texFormatASTC8x6sRGBA_UNORM;
      break;
    case 193:
      double result = &texFormatASTC8x8sRGBA_UNORM;
      break;
    case 194:
      double result = &texFormatASTC10x5sRGBA_UNORM;
      break;
    case 195:
      double result = &texFormatASTC10x6sRGBA_UNORM;
      break;
    case 196:
      double result = &texFormatASTC10x8sRGBA_UNORM;
      break;
    case 197:
      double result = &texFormatASTC10x10sRGBA_UNORM;
      break;
    case 198:
      double result = &texFormatASTC12x10sRGBA_UNORM;
      break;
    case 199:
      double result = &texFormatASTC12x12sRGBA_UNORM;
      break;
    case 202:
      double result = &texFormatASTC4x2RGBA_LP;
      break;
    case 203:
      double result = &texFormatASTC4x4RGBA_LP;
      break;
    case 204:
      double result = &texFormatASTC5x4RGBA_LP;
      break;
    case 205:
      double result = &texFormatASTC5x5RGBA_LP;
      break;
    case 206:
      double result = &texFormatASTC6x5RGBA_LP;
      break;
    case 207:
      double result = &texFormatASTC6x6RGBA_LP;
      break;
    case 208:
      double result = &texFormatASTC8x4RGBA_LP;
      break;
    case 209:
      double result = &texFormatASTC8x5RGBA_LP;
      break;
    case 210:
      double result = &texFormatASTC8x6RGBA_LP;
      break;
    case 211:
      double result = &texFormatASTC8x8RGBA_LP;
      break;
    case 212:
      double result = &texFormatASTC10x5RGBA_LP;
      break;
    case 213:
      double result = &texFormatASTC10x6RGBA_LP;
      break;
    case 214:
      double result = &texFormatASTC10x8RGBA_LP;
      break;
    case 215:
      double result = &texFormatASTC10x10RGBA_LP;
      break;
    case 216:
      double result = &texFormatASTC12x10RGBA_LP;
      break;
    case 217:
      double result = &texFormatASTC12x12RGBA_LP;
      break;
    case 220:
      double result = &texFormatASTC4x2RGBA;
      break;
    case 221:
      double result = &texFormatASTC4x4RGBA;
      break;
    case 222:
      double result = &texFormatASTC5x4RGBA;
      break;
    case 223:
      double result = &texFormatASTC5x5RGBA;
      break;
    case 224:
      double result = &texFormatASTC6x5RGBA;
      break;
    case 225:
      double result = &texFormatASTC6x6RGBA;
      break;
    case 226:
      double result = &texFormatASTC8x4RGBA;
      break;
    case 227:
      double result = &texFormatASTC8x5RGBA;
      break;
    case 228:
      double result = &texFormatASTC8x6RGBA;
      break;
    case 229:
      double result = &texFormatASTC8x8RGBA;
      break;
    case 230:
      double result = &texFormatASTC10x5RGBA;
      break;
    case 231:
      double result = &texFormatASTC10x6RGBA;
      break;
    case 232:
      double result = &texFormatASTC10x8RGBA;
      break;
    case 233:
      double result = &texFormatASTC10x10RGBA;
      break;
    case 234:
      double result = &texFormatASTC12x10RGBA;
      break;
    case 235:
      double result = &texFormatASTC12x12RGBA;
      break;
    case 239:
      double result = &texFormatYUY2_RGB;
      break;
    case 240:
      double result = &texFormatUYVY_RGB;
      break;
    case 249:
      double result = &texFormatD16;
      break;
    case 251:
      double result = &texFormatD32;
      break;
    case 252:
    case 260:
      double result = &texFormatS8;
      break;
    case 259:
      double result = &texFormatD32FS8_2PLANE;
      break;
    case 299:
      double result = &texFormatRGB8;
      break;
    case 300:
      double result = &texFormatsRGB8;
      break;
    case 301:
      double result = &texFormatRGB8_SNORM;
      break;
    case 302:
      double result = &texFormatRGB8UI;
      break;
    case 303:
      double result = &texFormatRGB8I;
      break;
    case 312:
      double result = &texFormatRGBX16UI;
      break;
    case 313:
      double result = &texFormatRGBX16I;
      break;
    case 314:
      double result = &texFormatRGBX16F;
      break;
    case 322:
      double result = &texFormatRGBX32UI;
      break;
    case 323:
      double result = &texFormatRGBX32I;
      break;
    case 324:
      double result = &texFormatRGBX32F;
      break;
    default:
      switch(&texFormatA8)
      {
        case 0x1F4u:
          double result = &texFormatYCBCR8_420_2PLANE;
          break;
        case 0x1F5u:
          double result = &texFormatYCBCR8_422_1PLANE;
          break;
        case 0x1F6u:
          double result = &texFormatYCBCR8_422_2PLANE;
          break;
        case 0x1F7u:
          double result = &texFormatYCBCR8_444_2PLANE;
          break;
        case 0x1F8u:
          double result = &texFormatYCBCR10_444_1PLANE;
          break;
        case 0x1F9u:
          double result = &texFormatYCBCR10_420_2PLANE;
          break;
        case 0x1FAu:
          double result = &texFormatYCBCR10_422_2PLANE;
          break;
        case 0x1FBu:
          double result = &texFormatYCBCR10_444_2PLANE;
          break;
        case 0x1FCu:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x1FDu:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x1FEu:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x208u:
          double result = &texFormatsYCBCR8_420_2PLANE;
          break;
        case 0x209u:
          double result = &texFormatsYCBCR8_422_1PLANE;
          break;
        case 0x20Au:
          double result = &texFormatsYCBCR8_422_2PLANE;
          break;
        case 0x20Bu:
          double result = &texFormatsYCBCR8_444_2PLANE;
          break;
        case 0x20Cu:
          double result = &texFormatsYCBCR10_444_1PLANE;
          break;
        case 0x20Du:
          double result = &texFormatsYCBCR10_420_2PLANE;
          break;
        case 0x20Eu:
          double result = &texFormatsYCBCR10_422_2PLANE;
          break;
        case 0x20Fu:
          double result = &texFormatsYCBCR10_444_2PLANE;
          break;
        case 0x210u:
          double result = &texFormatsYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x211u:
          double result = &texFormatsYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x212u:
          double result = &texFormatsYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x21Cu:
          double result = &texFormatRGB8_420_2PLANE;
          break;
        case 0x21Du:
          double result = &texFormatRGB8_422_2PLANE;
          break;
        case 0x21Eu:
          double result = &texFormatRGB8_444_2PLANE;
          break;
        case 0x21Fu:
          double result = &texFormatRGB10_420_2PLANE;
          break;
        case 0x220u:
          double result = &texFormatRGB10_422_2PLANE;
          break;
        case 0x221u:
          double result = &texFormatRGB10_444_2PLANE;
          break;
        case 0x222u:
          double result = &texFormatRGB10_420_2PLANE_PACKED;
          break;
        case 0x223u:
          double result = &texFormatRGB10_422_2PLANE_PACKED;
          break;
        case 0x224u:
          double result = &texFormatRGB10_444_2PLANE_PACKED;
          break;
        case 0x226u:
          double result = &texFormatXRRGB10_PLANE_A8_PLANE;
          break;
        case 0x227u:
          double result = &texFormatXRSRGB10_PLANE_A8_PLANE;
          break;
        case 0x228u:
          double result = &texFormatARGBV16_XR10;
          break;
        case 0x229u:
          double result = &texFormatsARGBV16_XR10;
          break;
        case 0x22Au:
          double result = &texFormatXRRGB10;
          break;
        case 0x22Bu:
          double result = &texFormatXRSRGB10;
          break;
        case 0x230u:
          double result = &texFormatYCBCR8A8_444_1PLANE;
          break;
        case 0x232u:
          double result = &texFormatYCBCR8_422_1PLANE_REV;
          break;
        case 0x24Cu:
          double result = &texFormatR10_1PLANE_PACKED;
          break;
        case 0x24Du:
          double result = &texFormatRG10_1PLANE_PACKED;
          break;
        default:
          goto LABEL_150;
      }
      break;
  }
  return result;
}

void *AGX::G11::TextureFormatTable::chooseTextureFormatCPP(AGX::G11::TextureFormatTable *this, MTLPixelFormat a2)
{
  int v2 = this - 1;
  double result = &texFormatA8;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 25:
    case 26:
    case 27:
    case 28:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 65:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 105:
    case 106:
    case 107:
    case 108:
    case 110:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 167:
    case 168:
    case 170:
    case 172:
    case 174:
    case 176:
    case 183:
    case 200:
    case 201:
    case 218:
    case 219:
    case 236:
    case 237:
    case 238:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 250:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
LABEL_150:
      double result = &texFormatUnsupported;
      break;
    case 9:
      double result = &texFormatR8;
      break;
    case 10:
      double result = &texFormatsR8;
      break;
    case 11:
      double result = &texFormatR8_SNORM;
      break;
    case 12:
      double result = &texFormatR8UI;
      break;
    case 13:
      double result = &texFormatR8I;
      break;
    case 19:
      double result = &texFormatR16;
      break;
    case 21:
      double result = &texFormatR16_SNORM;
      break;
    case 22:
      double result = &texFormatR16UI;
      break;
    case 23:
      double result = &texFormatR16I;
      break;
    case 24:
      double result = &texFormatR16F;
      break;
    case 29:
      double result = &texFormatRG8;
      break;
    case 30:
      double result = &texFormatsRG8;
      break;
    case 31:
      double result = &texFormatRG8_SNORM;
      break;
    case 32:
      double result = &texFormatRG8UI;
      break;
    case 33:
      double result = &texFormatRG8I;
      break;
    case 39:
      double result = &texFormatRGB565;
      break;
    case 40:
      double result = &texFormatRGB5A1;
      break;
    case 41:
      double result = &texFormatRGBA4;
      break;
    case 42:
      double result = &texFormatA1RGB5;
      break;
    case 43:
      double result = &texFormatBGRA4;
      break;
    case 52:
      double result = &texFormatR32UI;
      break;
    case 53:
      double result = &texFormatR32I;
      break;
    case 54:
      double result = &texFormatR32F;
      break;
    case 59:
      double result = &texFormatRG16;
      break;
    case 61:
      double result = &texFormatRG16_SNORM;
      break;
    case 62:
      double result = &texFormatRG16UI;
      break;
    case 63:
      double result = &texFormatRG16I;
      break;
    case 64:
      double result = &texFormatRG16F;
      break;
    case 69:
      double result = &texFormatRGBA8;
      break;
    case 70:
      double result = &texFormatsRGBA8;
      break;
    case 71:
      double result = &texFormatRGBA8_SNORM;
      break;
    case 72:
      double result = &texFormatRGBA8UI;
      break;
    case 73:
      double result = &texFormatRGBA8I;
      break;
    case 79:
      double result = &texFormatBGRA8;
      break;
    case 80:
      double result = &texFormatsBGRA8;
      break;
    case 83:
      double result = &texFormatARGB8;
      break;
    case 84:
      double result = &texFormatsARGB8;
      break;
    case 89:
      double result = &texFormatRGB10_A2;
      break;
    case 90:
      double result = &texFormatRGB10_A2UI;
      break;
    case 91:
      double result = &texFormatR11FG11FB10F;
      break;
    case 92:
      double result = &texFormatRGB9_E5;
      break;
    case 93:
      double result = &texFormatBGR10_A2;
      break;
    case 102:
      double result = &texFormatRG32UI;
      break;
    case 103:
      double result = &texFormatRG32I;
      break;
    case 104:
      double result = &texFormatRG32F;
      break;
    case 109:
      double result = &texFormatRGBA16;
      break;
    case 111:
      double result = &texFormatRGBA16_SNORM;
      break;
    case 112:
      double result = &texFormatRGBA16UI;
      break;
    case 113:
      double result = &texFormatRGBA16I;
      break;
    case 114:
      double result = &texFormatRGBA16F;
      break;
    case 122:
      double result = &texFormatRGBA32UI;
      break;
    case 123:
      double result = &texFormatRGBA32I;
      break;
    case 124:
      double result = &texFormatRGBA32F;
      break;
    case 159:
      double result = &texFormatPVRTC2RGB;
      break;
    case 160:
      double result = &texFormatPVRTC2sRGB;
      break;
    case 161:
      double result = &texFormatPVRTC4RGB;
      break;
    case 162:
      double result = &texFormatPVRTC4sRGB;
      break;
    case 163:
      double result = &texFormatPVRTC2RGBA;
      break;
    case 164:
      double result = &texFormatPVRTC2sRGBA;
      break;
    case 165:
      double result = &texFormatPVRTC4RGBA;
      break;
    case 166:
      double result = &texFormatPVRTC4sRGBA;
      break;
    case 169:
      double result = &texFormatR11EAC;
      break;
    case 171:
      double result = &texFormatR11EAC_SNORM;
      break;
    case 173:
      double result = &texFormatRG11EAC;
      break;
    case 175:
      double result = &texFormatRG11EAC_SNORM;
      break;
    case 177:
      double result = &texFormatETC2RGBA8;
      break;
    case 178:
      double result = &texFormatETC2sRGBA8;
      break;
    case 179:
      double result = &texFormatETC2RGB8;
      break;
    case 180:
      double result = &texFormatETC2sRGB8;
      break;
    case 181:
      double result = &texFormatETC2RGB8A1;
      break;
    case 182:
      double result = &texFormatETC2sRGB8A1;
      break;
    case 184:
      double result = &texFormatASTC4x2sRGBA_UNORM;
      break;
    case 185:
      double result = &texFormatASTC4x4sRGBA_UNORM;
      break;
    case 186:
      double result = &texFormatASTC5x4sRGBA_UNORM;
      break;
    case 187:
      double result = &texFormatASTC5x5sRGBA_UNORM;
      break;
    case 188:
      double result = &texFormatASTC6x5sRGBA_UNORM;
      break;
    case 189:
      double result = &texFormatASTC6x6sRGBA_UNORM;
      break;
    case 190:
      double result = &texFormatASTC8x4sRGBA_UNORM;
      break;
    case 191:
      double result = &texFormatASTC8x5sRGBA_UNORM;
      break;
    case 192:
      double result = &texFormatASTC8x6sRGBA_UNORM;
      break;
    case 193:
      double result = &texFormatASTC8x8sRGBA_UNORM;
      break;
    case 194:
      double result = &texFormatASTC10x5sRGBA_UNORM;
      break;
    case 195:
      double result = &texFormatASTC10x6sRGBA_UNORM;
      break;
    case 196:
      double result = &texFormatASTC10x8sRGBA_UNORM;
      break;
    case 197:
      double result = &texFormatASTC10x10sRGBA_UNORM;
      break;
    case 198:
      double result = &texFormatASTC12x10sRGBA_UNORM;
      break;
    case 199:
      double result = &texFormatASTC12x12sRGBA_UNORM;
      break;
    case 202:
      double result = &texFormatASTC4x2RGBA_LP;
      break;
    case 203:
      double result = &texFormatASTC4x4RGBA_LP;
      break;
    case 204:
      double result = &texFormatASTC5x4RGBA_LP;
      break;
    case 205:
      double result = &texFormatASTC5x5RGBA_LP;
      break;
    case 206:
      double result = &texFormatASTC6x5RGBA_LP;
      break;
    case 207:
      double result = &texFormatASTC6x6RGBA_LP;
      break;
    case 208:
      double result = &texFormatASTC8x4RGBA_LP;
      break;
    case 209:
      double result = &texFormatASTC8x5RGBA_LP;
      break;
    case 210:
      double result = &texFormatASTC8x6RGBA_LP;
      break;
    case 211:
      double result = &texFormatASTC8x8RGBA_LP;
      break;
    case 212:
      double result = &texFormatASTC10x5RGBA_LP;
      break;
    case 213:
      double result = &texFormatASTC10x6RGBA_LP;
      break;
    case 214:
      double result = &texFormatASTC10x8RGBA_LP;
      break;
    case 215:
      double result = &texFormatASTC10x10RGBA_LP;
      break;
    case 216:
      double result = &texFormatASTC12x10RGBA_LP;
      break;
    case 217:
      double result = &texFormatASTC12x12RGBA_LP;
      break;
    case 220:
      double result = &texFormatASTC4x2RGBA;
      break;
    case 221:
      double result = &texFormatASTC4x4RGBA;
      break;
    case 222:
      double result = &texFormatASTC5x4RGBA;
      break;
    case 223:
      double result = &texFormatASTC5x5RGBA;
      break;
    case 224:
      double result = &texFormatASTC6x5RGBA;
      break;
    case 225:
      double result = &texFormatASTC6x6RGBA;
      break;
    case 226:
      double result = &texFormatASTC8x4RGBA;
      break;
    case 227:
      double result = &texFormatASTC8x5RGBA;
      break;
    case 228:
      double result = &texFormatASTC8x6RGBA;
      break;
    case 229:
      double result = &texFormatASTC8x8RGBA;
      break;
    case 230:
      double result = &texFormatASTC10x5RGBA;
      break;
    case 231:
      double result = &texFormatASTC10x6RGBA;
      break;
    case 232:
      double result = &texFormatASTC10x8RGBA;
      break;
    case 233:
      double result = &texFormatASTC10x10RGBA;
      break;
    case 234:
      double result = &texFormatASTC12x10RGBA;
      break;
    case 235:
      double result = &texFormatASTC12x12RGBA;
      break;
    case 239:
      double result = &texFormatYUY2_RGB;
      break;
    case 240:
      double result = &texFormatUYVY_RGB;
      break;
    case 249:
      double result = &texFormatD16;
      break;
    case 251:
      double result = &texFormatD32;
      break;
    case 252:
    case 260:
      double result = &texFormatS8;
      break;
    case 259:
      double result = &texFormatD32FS8_2PLANE;
      break;
    case 299:
      double result = &texFormatRGB8;
      break;
    case 300:
      double result = &texFormatsRGB8;
      break;
    case 301:
      double result = &texFormatRGB8_SNORM;
      break;
    case 302:
      double result = &texFormatRGB8UI;
      break;
    case 303:
      double result = &texFormatRGB8I;
      break;
    case 312:
      double result = &texFormatRGBX16UI;
      break;
    case 313:
      double result = &texFormatRGBX16I;
      break;
    case 314:
      double result = &texFormatRGBX16F;
      break;
    case 322:
      double result = &texFormatRGBX32UI;
      break;
    case 323:
      double result = &texFormatRGBX32I;
      break;
    case 324:
      double result = &texFormatRGBX32F;
      break;
    default:
      switch(&texFormatA8)
      {
        case 0x1F4u:
          double result = &texFormatYCBCR8_420_2PLANE;
          break;
        case 0x1F5u:
          double result = &texFormatYCBCR8_422_1PLANE;
          break;
        case 0x1F6u:
          double result = &texFormatYCBCR8_422_2PLANE;
          break;
        case 0x1F7u:
          double result = &texFormatYCBCR8_444_2PLANE;
          break;
        case 0x1F8u:
          double result = &texFormatYCBCR10_444_1PLANE;
          break;
        case 0x1F9u:
          double result = &texFormatYCBCR10_420_2PLANE;
          break;
        case 0x1FAu:
          double result = &texFormatYCBCR10_422_2PLANE;
          break;
        case 0x1FBu:
          double result = &texFormatYCBCR10_444_2PLANE;
          break;
        case 0x1FCu:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x1FDu:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x1FEu:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x208u:
          double result = &texFormatsYCBCR8_420_2PLANE;
          break;
        case 0x209u:
          double result = &texFormatsYCBCR8_422_1PLANE;
          break;
        case 0x20Au:
          double result = &texFormatsYCBCR8_422_2PLANE;
          break;
        case 0x20Bu:
          double result = &texFormatsYCBCR8_444_2PLANE;
          break;
        case 0x20Cu:
          double result = &texFormatsYCBCR10_444_1PLANE;
          break;
        case 0x20Du:
          double result = &texFormatsYCBCR10_420_2PLANE;
          break;
        case 0x20Eu:
          double result = &texFormatsYCBCR10_422_2PLANE;
          break;
        case 0x20Fu:
          double result = &texFormatsYCBCR10_444_2PLANE;
          break;
        case 0x210u:
          double result = &texFormatsYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x211u:
          double result = &texFormatsYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x212u:
          double result = &texFormatsYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x21Cu:
          double result = &texFormatRGB8_420_2PLANE;
          break;
        case 0x21Du:
          double result = &texFormatRGB8_422_2PLANE;
          break;
        case 0x21Eu:
          double result = &texFormatRGB8_444_2PLANE;
          break;
        case 0x21Fu:
          double result = &texFormatRGB10_420_2PLANE;
          break;
        case 0x220u:
          double result = &texFormatRGB10_422_2PLANE;
          break;
        case 0x221u:
          double result = &texFormatRGB10_444_2PLANE;
          break;
        case 0x222u:
          double result = &texFormatRGB10_420_2PLANE_PACKED;
          break;
        case 0x223u:
          double result = &texFormatRGB10_422_2PLANE_PACKED;
          break;
        case 0x224u:
          double result = &texFormatRGB10_444_2PLANE_PACKED;
          break;
        case 0x226u:
          double result = &texFormatXRRGB10_PLANE_A8_PLANE;
          break;
        case 0x227u:
          double result = &texFormatXRSRGB10_PLANE_A8_PLANE;
          break;
        case 0x228u:
          double result = &texFormatARGBV16_XR10;
          break;
        case 0x229u:
          double result = &texFormatsARGBV16_XR10;
          break;
        case 0x22Au:
          double result = &texFormatXRRGB10;
          break;
        case 0x22Bu:
          double result = &texFormatXRSRGB10;
          break;
        case 0x22Cu:
          double result = &texFormatRGBA16F_XR;
          break;
        case 0x230u:
          double result = &texFormatYCBCR8A8_444_1PLANE;
          break;
        case 0x232u:
          double result = &texFormatYCBCR8_422_1PLANE_REV;
          break;
        case 0x240u:
          double result = &texFormatR10X6F;
          break;
        case 0x241u:
          double result = &texFormatsR10X6F;
          break;
        case 0x242u:
          double result = &texFormatRG10X12F;
          break;
        case 0x243u:
          double result = &texFormatsRG10X12F;
          break;
        case 0x24Cu:
          double result = &texFormatR10_1PLANE_PACKED;
          break;
        case 0x24Du:
          double result = &texFormatRG10_1PLANE_PACKED;
          break;
        default:
          goto LABEL_150;
      }
      break;
  }
  return result;
}

void *AGX::G12::TextureFormatTable::chooseTextureFormatCPP(AGX::G12::TextureFormatTable *this, MTLPixelFormat a2)
{
  int v2 = this - 1;
  double result = &texFormatA8;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 25:
    case 26:
    case 27:
    case 28:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 65:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 105:
    case 106:
    case 107:
    case 108:
    case 110:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 167:
    case 168:
    case 170:
    case 172:
    case 174:
    case 176:
    case 183:
    case 200:
    case 201:
    case 218:
    case 219:
    case 236:
    case 237:
    case 238:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 250:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
LABEL_150:
      double result = &texFormatUnsupported;
      break;
    case 9:
      double result = &texFormatR8;
      break;
    case 10:
      double result = &texFormatsR8;
      break;
    case 11:
      double result = &texFormatR8_SNORM;
      break;
    case 12:
      double result = &texFormatR8UI;
      break;
    case 13:
      double result = &texFormatR8I;
      break;
    case 19:
      double result = &texFormatR16;
      break;
    case 21:
      double result = &texFormatR16_SNORM;
      break;
    case 22:
      double result = &texFormatR16UI;
      break;
    case 23:
      double result = &texFormatR16I;
      break;
    case 24:
      double result = &texFormatR16F;
      break;
    case 29:
      double result = &texFormatRG8;
      break;
    case 30:
      double result = &texFormatsRG8;
      break;
    case 31:
      double result = &texFormatRG8_SNORM;
      break;
    case 32:
      double result = &texFormatRG8UI;
      break;
    case 33:
      double result = &texFormatRG8I;
      break;
    case 39:
      double result = &texFormatRGB565;
      break;
    case 40:
      double result = &texFormatRGB5A1;
      break;
    case 41:
      double result = &texFormatRGBA4;
      break;
    case 42:
      double result = &texFormatA1RGB5;
      break;
    case 43:
      double result = &texFormatBGRA4;
      break;
    case 52:
      double result = &texFormatR32UI;
      break;
    case 53:
      double result = &texFormatR32I;
      break;
    case 54:
      double result = &texFormatR32F;
      break;
    case 59:
      double result = &texFormatRG16;
      break;
    case 61:
      double result = &texFormatRG16_SNORM;
      break;
    case 62:
      double result = &texFormatRG16UI;
      break;
    case 63:
      double result = &texFormatRG16I;
      break;
    case 64:
      double result = &texFormatRG16F;
      break;
    case 69:
      double result = &texFormatRGBA8;
      break;
    case 70:
      double result = &texFormatsRGBA8;
      break;
    case 71:
      double result = &texFormatRGBA8_SNORM;
      break;
    case 72:
      double result = &texFormatRGBA8UI;
      break;
    case 73:
      double result = &texFormatRGBA8I;
      break;
    case 79:
      double result = &texFormatBGRA8;
      break;
    case 80:
      double result = &texFormatsBGRA8;
      break;
    case 83:
      double result = &texFormatARGB8;
      break;
    case 84:
      double result = &texFormatsARGB8;
      break;
    case 89:
      double result = &texFormatRGB10_A2;
      break;
    case 90:
      double result = &texFormatRGB10_A2UI;
      break;
    case 91:
      double result = &texFormatR11FG11FB10F;
      break;
    case 92:
      double result = &texFormatRGB9_E5;
      break;
    case 93:
      double result = &texFormatBGR10_A2;
      break;
    case 102:
      double result = &texFormatRG32UI;
      break;
    case 103:
      double result = &texFormatRG32I;
      break;
    case 104:
      double result = &texFormatRG32F;
      break;
    case 109:
      double result = &texFormatRGBA16;
      break;
    case 111:
      double result = &texFormatRGBA16_SNORM;
      break;
    case 112:
      double result = &texFormatRGBA16UI;
      break;
    case 113:
      double result = &texFormatRGBA16I;
      break;
    case 114:
      double result = &texFormatRGBA16F;
      break;
    case 122:
      double result = &texFormatRGBA32UI;
      break;
    case 123:
      double result = &texFormatRGBA32I;
      break;
    case 124:
      double result = &texFormatRGBA32F;
      break;
    case 159:
      double result = &texFormatPVRTC2RGB;
      break;
    case 160:
      double result = &texFormatPVRTC2sRGB;
      break;
    case 161:
      double result = &texFormatPVRTC4RGB;
      break;
    case 162:
      double result = &texFormatPVRTC4sRGB;
      break;
    case 163:
      double result = &texFormatPVRTC2RGBA;
      break;
    case 164:
      double result = &texFormatPVRTC2sRGBA;
      break;
    case 165:
      double result = &texFormatPVRTC4RGBA;
      break;
    case 166:
      double result = &texFormatPVRTC4sRGBA;
      break;
    case 169:
      double result = &texFormatR11EAC;
      break;
    case 171:
      double result = &texFormatR11EAC_SNORM;
      break;
    case 173:
      double result = &texFormatRG11EAC;
      break;
    case 175:
      double result = &texFormatRG11EAC_SNORM;
      break;
    case 177:
      double result = &texFormatETC2RGBA8;
      break;
    case 178:
      double result = &texFormatETC2sRGBA8;
      break;
    case 179:
      double result = &texFormatETC2RGB8;
      break;
    case 180:
      double result = &texFormatETC2sRGB8;
      break;
    case 181:
      double result = &texFormatETC2RGB8A1;
      break;
    case 182:
      double result = &texFormatETC2sRGB8A1;
      break;
    case 184:
      double result = &texFormatASTC4x2sRGBA_UNORM;
      break;
    case 185:
      double result = &texFormatASTC4x4sRGBA_UNORM;
      break;
    case 186:
      double result = &texFormatASTC5x4sRGBA_UNORM;
      break;
    case 187:
      double result = &texFormatASTC5x5sRGBA_UNORM;
      break;
    case 188:
      double result = &texFormatASTC6x5sRGBA_UNORM;
      break;
    case 189:
      double result = &texFormatASTC6x6sRGBA_UNORM;
      break;
    case 190:
      double result = &texFormatASTC8x4sRGBA_UNORM;
      break;
    case 191:
      double result = &texFormatASTC8x5sRGBA_UNORM;
      break;
    case 192:
      double result = &texFormatASTC8x6sRGBA_UNORM;
      break;
    case 193:
      double result = &texFormatASTC8x8sRGBA_UNORM;
      break;
    case 194:
      double result = &texFormatASTC10x5sRGBA_UNORM;
      break;
    case 195:
      double result = &texFormatASTC10x6sRGBA_UNORM;
      break;
    case 196:
      double result = &texFormatASTC10x8sRGBA_UNORM;
      break;
    case 197:
      double result = &texFormatASTC10x10sRGBA_UNORM;
      break;
    case 198:
      double result = &texFormatASTC12x10sRGBA_UNORM;
      break;
    case 199:
      double result = &texFormatASTC12x12sRGBA_UNORM;
      break;
    case 202:
      double result = &texFormatASTC4x2RGBA_LP;
      break;
    case 203:
      double result = &texFormatASTC4x4RGBA_LP;
      break;
    case 204:
      double result = &texFormatASTC5x4RGBA_LP;
      break;
    case 205:
      double result = &texFormatASTC5x5RGBA_LP;
      break;
    case 206:
      double result = &texFormatASTC6x5RGBA_LP;
      break;
    case 207:
      double result = &texFormatASTC6x6RGBA_LP;
      break;
    case 208:
      double result = &texFormatASTC8x4RGBA_LP;
      break;
    case 209:
      double result = &texFormatASTC8x5RGBA_LP;
      break;
    case 210:
      double result = &texFormatASTC8x6RGBA_LP;
      break;
    case 211:
      double result = &texFormatASTC8x8RGBA_LP;
      break;
    case 212:
      double result = &texFormatASTC10x5RGBA_LP;
      break;
    case 213:
      double result = &texFormatASTC10x6RGBA_LP;
      break;
    case 214:
      double result = &texFormatASTC10x8RGBA_LP;
      break;
    case 215:
      double result = &texFormatASTC10x10RGBA_LP;
      break;
    case 216:
      double result = &texFormatASTC12x10RGBA_LP;
      break;
    case 217:
      double result = &texFormatASTC12x12RGBA_LP;
      break;
    case 220:
      double result = &texFormatASTC4x2RGBA;
      break;
    case 221:
      double result = &texFormatASTC4x4RGBA;
      break;
    case 222:
      double result = &texFormatASTC5x4RGBA;
      break;
    case 223:
      double result = &texFormatASTC5x5RGBA;
      break;
    case 224:
      double result = &texFormatASTC6x5RGBA;
      break;
    case 225:
      double result = &texFormatASTC6x6RGBA;
      break;
    case 226:
      double result = &texFormatASTC8x4RGBA;
      break;
    case 227:
      double result = &texFormatASTC8x5RGBA;
      break;
    case 228:
      double result = &texFormatASTC8x6RGBA;
      break;
    case 229:
      double result = &texFormatASTC8x8RGBA;
      break;
    case 230:
      double result = &texFormatASTC10x5RGBA;
      break;
    case 231:
      double result = &texFormatASTC10x6RGBA;
      break;
    case 232:
      double result = &texFormatASTC10x8RGBA;
      break;
    case 233:
      double result = &texFormatASTC10x10RGBA;
      break;
    case 234:
      double result = &texFormatASTC12x10RGBA;
      break;
    case 235:
      double result = &texFormatASTC12x12RGBA;
      break;
    case 239:
      double result = &texFormatYUY2_RGB;
      break;
    case 240:
      double result = &texFormatUYVY_RGB;
      break;
    case 249:
      double result = &texFormatD16;
      break;
    case 251:
      double result = &texFormatD32;
      break;
    case 252:
    case 260:
      double result = &texFormatS8;
      break;
    case 259:
      double result = &texFormatD32FS8_2PLANE;
      break;
    case 299:
      double result = &texFormatRGB8;
      break;
    case 300:
      double result = &texFormatsRGB8;
      break;
    case 301:
      double result = &texFormatRGB8_SNORM;
      break;
    case 302:
      double result = &texFormatRGB8UI;
      break;
    case 303:
      double result = &texFormatRGB8I;
      break;
    case 312:
      double result = &texFormatRGBX16UI;
      break;
    case 313:
      double result = &texFormatRGBX16I;
      break;
    case 314:
      double result = &texFormatRGBX16F;
      break;
    case 322:
      double result = &texFormatRGBX32UI;
      break;
    case 323:
      double result = &texFormatRGBX32I;
      break;
    case 324:
      double result = &texFormatRGBX32F;
      break;
    default:
      switch(&texFormatA8)
      {
        case 0x1F4u:
          double result = &texFormatYCBCR8_420_2PLANE;
          break;
        case 0x1F5u:
          double result = &texFormatYCBCR8_422_1PLANE;
          break;
        case 0x1F6u:
          double result = &texFormatYCBCR8_422_2PLANE;
          break;
        case 0x1F7u:
          double result = &texFormatYCBCR8_444_2PLANE;
          break;
        case 0x1F8u:
          double result = &texFormatYCBCR10_444_1PLANE;
          break;
        case 0x1F9u:
          double result = &texFormatYCBCR10_420_2PLANE;
          break;
        case 0x1FAu:
          double result = &texFormatYCBCR10_422_2PLANE;
          break;
        case 0x1FBu:
          double result = &texFormatYCBCR10_444_2PLANE;
          break;
        case 0x1FCu:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x1FDu:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x1FEu:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x208u:
          double result = &texFormatsYCBCR8_420_2PLANE;
          break;
        case 0x209u:
          double result = &texFormatsYCBCR8_422_1PLANE;
          break;
        case 0x20Au:
          double result = &texFormatsYCBCR8_422_2PLANE;
          break;
        case 0x20Bu:
          double result = &texFormatsYCBCR8_444_2PLANE;
          break;
        case 0x20Cu:
          double result = &texFormatsYCBCR10_444_1PLANE;
          break;
        case 0x20Du:
          double result = &texFormatsYCBCR10_420_2PLANE;
          break;
        case 0x20Eu:
          double result = &texFormatsYCBCR10_422_2PLANE;
          break;
        case 0x20Fu:
          double result = &texFormatsYCBCR10_444_2PLANE;
          break;
        case 0x210u:
          double result = &texFormatsYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x211u:
          double result = &texFormatsYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x212u:
          double result = &texFormatsYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x21Cu:
          double result = &texFormatRGB8_420_2PLANE;
          break;
        case 0x21Du:
          double result = &texFormatRGB8_422_2PLANE;
          break;
        case 0x21Eu:
          double result = &texFormatRGB8_444_2PLANE;
          break;
        case 0x21Fu:
          double result = &texFormatRGB10_420_2PLANE;
          break;
        case 0x220u:
          double result = &texFormatRGB10_422_2PLANE;
          break;
        case 0x221u:
          double result = &texFormatRGB10_444_2PLANE;
          break;
        case 0x222u:
          double result = &texFormatRGB10_420_2PLANE_PACKED;
          break;
        case 0x223u:
          double result = &texFormatRGB10_422_2PLANE_PACKED;
          break;
        case 0x224u:
          double result = &texFormatRGB10_444_2PLANE_PACKED;
          break;
        case 0x226u:
          double result = &texFormatXRRGB10_PLANE_A8_PLANE;
          break;
        case 0x227u:
          double result = &texFormatXRSRGB10_PLANE_A8_PLANE;
          break;
        case 0x228u:
          double result = &texFormatARGBV16_XR10;
          break;
        case 0x229u:
          double result = &texFormatsARGBV16_XR10;
          break;
        case 0x22Au:
          double result = &texFormatXRRGB10;
          break;
        case 0x22Bu:
          double result = &texFormatXRSRGB10;
          break;
        case 0x230u:
          double result = &texFormatYCBCR8A8_444_1PLANE;
          break;
        case 0x232u:
          double result = &texFormatYCBCR8_422_1PLANE_REV;
          break;
        case 0x233u:
          double result = &texFormatpqYCBCR10_444_1PLANE;
          break;
        case 0x234u:
          double result = &texFormatpqYCBCR10_420_2PLANE;
          break;
        case 0x235u:
          double result = &texFormatpqYCBCR10_422_2PLANE;
          break;
        case 0x236u:
          double result = &texFormatpqYCBCR10_444_2PLANE;
          break;
        case 0x237u:
          double result = &texFormatpqYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x238u:
          double result = &texFormatpqYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x239u:
          double result = &texFormatpqYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x23Au:
          double result = &texFormatYCBCR12_420_2PLANE;
          break;
        case 0x23Bu:
          double result = &texFormatYCBCR12_422_2PLANE;
          break;
        case 0x23Cu:
          double result = &texFormatYCBCR12_444_2PLANE;
          break;
        case 0x23Du:
          double result = &texFormatpqYCBCR12_420_2PLANE;
          break;
        case 0x23Eu:
          double result = &texFormatpqYCBCR12_422_2PLANE;
          break;
        case 0x23Fu:
          double result = &texFormatpqYCBCR12_444_2PLANE;
          break;
        case 0x240u:
          double result = &texFormatR10X6F;
          break;
        case 0x241u:
          double result = &texFormatsR10X6F;
          break;
        case 0x242u:
          double result = &texFormatRG10X12F;
          break;
        case 0x243u:
          double result = &texFormatsRG10X12F;
          break;
        case 0x24Cu:
          double result = &texFormatR10_1PLANE_PACKED;
          break;
        case 0x24Du:
          double result = &texFormatRG10_1PLANE_PACKED;
          break;
        case 0x24Eu:
          double result = &texFormatYCBCR10_444_1PLANE_XR;
          break;
        case 0x24Fu:
          double result = &texFormatYCBCR10_420_2PLANE_XR;
          break;
        case 0x250u:
          double result = &texFormatYCBCR10_422_2PLANE_XR;
          break;
        case 0x251u:
          double result = &texFormatYCBCR10_444_2PLANE_XR;
          break;
        case 0x252u:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED_XR;
          break;
        case 0x253u:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED_XR;
          break;
        case 0x254u:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED_XR;
          break;
        case 0x255u:
          double result = &texFormatYCBCR12_420_2PLANE_XR;
          break;
        case 0x256u:
          double result = &texFormatYCBCR12_422_2PLANE_XR;
          break;
        case 0x257u:
          double result = &texFormatYCBCR12_444_2PLANE_XR;
          break;
        case 0x25Bu:
          double result = &texFormatR12X4U;
          break;
        case 0x25Cu:
          double result = &texFormatpqR12X4U;
          break;
        case 0x25Du:
          double result = &texFormatRG12X8U;
          break;
        case 0x25Eu:
          double result = &texFormatpqR10X6U;
          break;
        default:
          goto LABEL_150;
      }
      break;
  }
  return result;
}

void *AGX::G13::TextureFormatTable::chooseTextureFormatCPP(AGX::G13::TextureFormatTable *this, MTLPixelFormat a2)
{
  int v2 = this - 1;
  double result = &texFormatA8;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 25:
    case 26:
    case 27:
    case 28:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 65:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 105:
    case 106:
    case 107:
    case 108:
    case 110:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 125:
    case 126:
    case 127:
    case 128:
    case 135:
    case 136:
    case 137:
    case 138:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 167:
    case 168:
    case 170:
    case 172:
    case 174:
    case 176:
    case 183:
    case 200:
    case 201:
    case 218:
    case 219:
    case 236:
    case 237:
    case 238:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 250:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
LABEL_164:
      double result = &texFormatUnsupported;
      break;
    case 9:
      double result = &texFormatR8;
      break;
    case 10:
      double result = &texFormatsR8;
      break;
    case 11:
      double result = &texFormatR8_SNORM;
      break;
    case 12:
      double result = &texFormatR8UI;
      break;
    case 13:
      double result = &texFormatR8I;
      break;
    case 19:
      double result = &texFormatR16;
      break;
    case 21:
      double result = &texFormatR16_SNORM;
      break;
    case 22:
      double result = &texFormatR16UI;
      break;
    case 23:
      double result = &texFormatR16I;
      break;
    case 24:
      double result = &texFormatR16F;
      break;
    case 29:
      double result = &texFormatRG8;
      break;
    case 30:
      double result = &texFormatsRG8;
      break;
    case 31:
      double result = &texFormatRG8_SNORM;
      break;
    case 32:
      double result = &texFormatRG8UI;
      break;
    case 33:
      double result = &texFormatRG8I;
      break;
    case 39:
      double result = &texFormatRGB565;
      break;
    case 40:
      double result = &texFormatRGB5A1;
      break;
    case 41:
      double result = &texFormatRGBA4;
      break;
    case 42:
      double result = &texFormatA1RGB5;
      break;
    case 43:
      double result = &texFormatBGRA4;
      break;
    case 52:
      double result = &texFormatR32UI;
      break;
    case 53:
      double result = &texFormatR32I;
      break;
    case 54:
      double result = &texFormatR32F;
      break;
    case 59:
      double result = &texFormatRG16;
      break;
    case 61:
      double result = &texFormatRG16_SNORM;
      break;
    case 62:
      double result = &texFormatRG16UI;
      break;
    case 63:
      double result = &texFormatRG16I;
      break;
    case 64:
      double result = &texFormatRG16F;
      break;
    case 69:
      double result = &texFormatRGBA8;
      break;
    case 70:
      double result = &texFormatsRGBA8;
      break;
    case 71:
      double result = &texFormatRGBA8_SNORM;
      break;
    case 72:
      double result = &texFormatRGBA8UI;
      break;
    case 73:
      double result = &texFormatRGBA8I;
      break;
    case 79:
      double result = &texFormatBGRA8;
      break;
    case 80:
      double result = &texFormatsBGRA8;
      break;
    case 83:
      double result = &texFormatARGB8;
      break;
    case 84:
      double result = &texFormatsARGB8;
      break;
    case 89:
      double result = &texFormatRGB10_A2;
      break;
    case 90:
      double result = &texFormatRGB10_A2UI;
      break;
    case 91:
      double result = &texFormatR11FG11FB10F;
      break;
    case 92:
      double result = &texFormatRGB9_E5;
      break;
    case 93:
      double result = &texFormatBGR10_A2;
      break;
    case 102:
      double result = &texFormatRG32UI;
      break;
    case 103:
      double result = &texFormatRG32I;
      break;
    case 104:
      double result = &texFormatRG32F;
      break;
    case 109:
      double result = &texFormatRGBA16;
      break;
    case 111:
      double result = &texFormatRGBA16_SNORM;
      break;
    case 112:
      double result = &texFormatRGBA16UI;
      break;
    case 113:
      double result = &texFormatRGBA16I;
      break;
    case 114:
      double result = &texFormatRGBA16F;
      break;
    case 122:
      double result = &texFormatRGBA32UI;
      break;
    case 123:
      double result = &texFormatRGBA32I;
      break;
    case 124:
      double result = &texFormatRGBA32F;
      break;
    case 129:
      double result = &texFormatBC1_RGBA_UNORM;
      break;
    case 130:
      double result = &texFormatBC1_sRGBA_UNORM;
      break;
    case 131:
      double result = &texFormatBC2_RGBA_UNORM;
      break;
    case 132:
      double result = &texFormatBC2_sRGBA_UNORM;
      break;
    case 133:
      double result = &texFormatBC3_RGBA_UNORM;
      break;
    case 134:
      double result = &texFormatBC3_sRGBA_UNORM;
      break;
    case 139:
      double result = &texFormatBC4_R_UNORM;
      break;
    case 140:
      double result = &texFormatBC4_R_SNORM;
      break;
    case 141:
      double result = &texFormatBC5_RG_UNORM;
      break;
    case 142:
      double result = &texFormatBC5_RG_SNORM;
      break;
    case 149:
      double result = &texFormatBC6H_RGB_FLOAT;
      break;
    case 150:
      double result = &texFormatBC6H_RGB_UFLOAT;
      break;
    case 151:
      double result = &texFormatBC7_RGBA_UNORM;
      break;
    case 152:
      double result = &texFormatBC7_sRGBA_UNORM;
      break;
    case 159:
      double result = &texFormatPVRTC2RGB;
      break;
    case 160:
      double result = &texFormatPVRTC2sRGB;
      break;
    case 161:
      double result = &texFormatPVRTC4RGB;
      break;
    case 162:
      double result = &texFormatPVRTC4sRGB;
      break;
    case 163:
      double result = &texFormatPVRTC2RGBA;
      break;
    case 164:
      double result = &texFormatPVRTC2sRGBA;
      break;
    case 165:
      double result = &texFormatPVRTC4RGBA;
      break;
    case 166:
      double result = &texFormatPVRTC4sRGBA;
      break;
    case 169:
      double result = &texFormatR11EAC;
      break;
    case 171:
      double result = &texFormatR11EAC_SNORM;
      break;
    case 173:
      double result = &texFormatRG11EAC;
      break;
    case 175:
      double result = &texFormatRG11EAC_SNORM;
      break;
    case 177:
      double result = &texFormatETC2RGBA8;
      break;
    case 178:
      double result = &texFormatETC2sRGBA8;
      break;
    case 179:
      double result = &texFormatETC2RGB8;
      break;
    case 180:
      double result = &texFormatETC2sRGB8;
      break;
    case 181:
      double result = &texFormatETC2RGB8A1;
      break;
    case 182:
      double result = &texFormatETC2sRGB8A1;
      break;
    case 184:
      double result = &texFormatASTC4x2sRGBA_UNORM;
      break;
    case 185:
      double result = &texFormatASTC4x4sRGBA_UNORM;
      break;
    case 186:
      double result = &texFormatASTC5x4sRGBA_UNORM;
      break;
    case 187:
      double result = &texFormatASTC5x5sRGBA_UNORM;
      break;
    case 188:
      double result = &texFormatASTC6x5sRGBA_UNORM;
      break;
    case 189:
      double result = &texFormatASTC6x6sRGBA_UNORM;
      break;
    case 190:
      double result = &texFormatASTC8x4sRGBA_UNORM;
      break;
    case 191:
      double result = &texFormatASTC8x5sRGBA_UNORM;
      break;
    case 192:
      double result = &texFormatASTC8x6sRGBA_UNORM;
      break;
    case 193:
      double result = &texFormatASTC8x8sRGBA_UNORM;
      break;
    case 194:
      double result = &texFormatASTC10x5sRGBA_UNORM;
      break;
    case 195:
      double result = &texFormatASTC10x6sRGBA_UNORM;
      break;
    case 196:
      double result = &texFormatASTC10x8sRGBA_UNORM;
      break;
    case 197:
      double result = &texFormatASTC10x10sRGBA_UNORM;
      break;
    case 198:
      double result = &texFormatASTC12x10sRGBA_UNORM;
      break;
    case 199:
      double result = &texFormatASTC12x12sRGBA_UNORM;
      break;
    case 202:
      double result = &texFormatASTC4x2RGBA_LP;
      break;
    case 203:
      double result = &texFormatASTC4x4RGBA_LP;
      break;
    case 204:
      double result = &texFormatASTC5x4RGBA_LP;
      break;
    case 205:
      double result = &texFormatASTC5x5RGBA_LP;
      break;
    case 206:
      double result = &texFormatASTC6x5RGBA_LP;
      break;
    case 207:
      double result = &texFormatASTC6x6RGBA_LP;
      break;
    case 208:
      double result = &texFormatASTC8x4RGBA_LP;
      break;
    case 209:
      double result = &texFormatASTC8x5RGBA_LP;
      break;
    case 210:
      double result = &texFormatASTC8x6RGBA_LP;
      break;
    case 211:
      double result = &texFormatASTC8x8RGBA_LP;
      break;
    case 212:
      double result = &texFormatASTC10x5RGBA_LP;
      break;
    case 213:
      double result = &texFormatASTC10x6RGBA_LP;
      break;
    case 214:
      double result = &texFormatASTC10x8RGBA_LP;
      break;
    case 215:
      double result = &texFormatASTC10x10RGBA_LP;
      break;
    case 216:
      double result = &texFormatASTC12x10RGBA_LP;
      break;
    case 217:
      double result = &texFormatASTC12x12RGBA_LP;
      break;
    case 220:
      double result = &texFormatASTC4x2RGBA;
      break;
    case 221:
      double result = &texFormatASTC4x4RGBA;
      break;
    case 222:
      double result = &texFormatASTC5x4RGBA;
      break;
    case 223:
      double result = &texFormatASTC5x5RGBA;
      break;
    case 224:
      double result = &texFormatASTC6x5RGBA;
      break;
    case 225:
      double result = &texFormatASTC6x6RGBA;
      break;
    case 226:
      double result = &texFormatASTC8x4RGBA;
      break;
    case 227:
      double result = &texFormatASTC8x5RGBA;
      break;
    case 228:
      double result = &texFormatASTC8x6RGBA;
      break;
    case 229:
      double result = &texFormatASTC8x8RGBA;
      break;
    case 230:
      double result = &texFormatASTC10x5RGBA;
      break;
    case 231:
      double result = &texFormatASTC10x6RGBA;
      break;
    case 232:
      double result = &texFormatASTC10x8RGBA;
      break;
    case 233:
      double result = &texFormatASTC10x10RGBA;
      break;
    case 234:
      double result = &texFormatASTC12x10RGBA;
      break;
    case 235:
      double result = &texFormatASTC12x12RGBA;
      break;
    case 239:
      double result = &texFormatYUY2_RGB;
      break;
    case 240:
      double result = &texFormatUYVY_RGB;
      break;
    case 249:
      double result = &texFormatD16;
      break;
    case 251:
      double result = &texFormatD32;
      break;
    case 252:
    case 260:
      double result = &texFormatS8;
      break;
    case 259:
      double result = &texFormatD32FS8_2PLANE;
      break;
    case 299:
      double result = &texFormatRGB8;
      break;
    case 300:
      double result = &texFormatsRGB8;
      break;
    case 301:
      double result = &texFormatRGB8_SNORM;
      break;
    case 302:
      double result = &texFormatRGB8UI;
      break;
    case 303:
      double result = &texFormatRGB8I;
      break;
    case 312:
      double result = &texFormatRGBX16UI;
      break;
    case 313:
      double result = &texFormatRGBX16I;
      break;
    case 314:
      double result = &texFormatRGBX16F;
      break;
    case 322:
      double result = &texFormatRGBX32UI;
      break;
    case 323:
      double result = &texFormatRGBX32I;
      break;
    case 324:
      double result = &texFormatRGBX32F;
      break;
    default:
      switch(&texFormatA8)
      {
        case 0x1F4u:
          double result = &texFormatYCBCR8_420_2PLANE;
          break;
        case 0x1F5u:
          double result = &texFormatYCBCR8_422_1PLANE;
          break;
        case 0x1F6u:
          double result = &texFormatYCBCR8_422_2PLANE;
          break;
        case 0x1F7u:
          double result = &texFormatYCBCR8_444_2PLANE;
          break;
        case 0x1F8u:
          double result = &texFormatYCBCR10_444_1PLANE;
          break;
        case 0x1F9u:
          double result = &texFormatYCBCR10_420_2PLANE;
          break;
        case 0x1FAu:
          double result = &texFormatYCBCR10_422_2PLANE;
          break;
        case 0x1FBu:
          double result = &texFormatYCBCR10_444_2PLANE;
          break;
        case 0x1FCu:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x1FDu:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x1FEu:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x208u:
          double result = &texFormatsYCBCR8_420_2PLANE;
          break;
        case 0x209u:
          double result = &texFormatsYCBCR8_422_1PLANE;
          break;
        case 0x20Au:
          double result = &texFormatsYCBCR8_422_2PLANE;
          break;
        case 0x20Bu:
          double result = &texFormatsYCBCR8_444_2PLANE;
          break;
        case 0x20Cu:
          double result = &texFormatsYCBCR10_444_1PLANE;
          break;
        case 0x20Du:
          double result = &texFormatsYCBCR10_420_2PLANE;
          break;
        case 0x20Eu:
          double result = &texFormatsYCBCR10_422_2PLANE;
          break;
        case 0x20Fu:
          double result = &texFormatsYCBCR10_444_2PLANE;
          break;
        case 0x210u:
          double result = &texFormatsYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x211u:
          double result = &texFormatsYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x212u:
          double result = &texFormatsYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x21Cu:
          double result = &texFormatRGB8_420_2PLANE;
          break;
        case 0x21Du:
          double result = &texFormatRGB8_422_2PLANE;
          break;
        case 0x21Eu:
          double result = &texFormatRGB8_444_2PLANE;
          break;
        case 0x21Fu:
          double result = &texFormatRGB10_420_2PLANE;
          break;
        case 0x220u:
          double result = &texFormatRGB10_422_2PLANE;
          break;
        case 0x221u:
          double result = &texFormatRGB10_444_2PLANE;
          break;
        case 0x222u:
          double result = &texFormatRGB10_420_2PLANE_PACKED;
          break;
        case 0x223u:
          double result = &texFormatRGB10_422_2PLANE_PACKED;
          break;
        case 0x224u:
          double result = &texFormatRGB10_444_2PLANE_PACKED;
          break;
        case 0x226u:
          double result = &texFormatXRRGB10_PLANE_A8_PLANE;
          break;
        case 0x227u:
          double result = &texFormatXRSRGB10_PLANE_A8_PLANE;
          break;
        case 0x228u:
          double result = &texFormatARGBV16_XR10;
          break;
        case 0x229u:
          double result = &texFormatsARGBV16_XR10;
          break;
        case 0x22Au:
          double result = &texFormatXRRGB10;
          break;
        case 0x22Bu:
          double result = &texFormatXRSRGB10;
          break;
        case 0x230u:
          double result = &texFormatYCBCR8A8_444_1PLANE;
          break;
        case 0x232u:
          double result = &texFormatYCBCR8_422_1PLANE_REV;
          break;
        case 0x233u:
          double result = &texFormatpqYCBCR10_444_1PLANE;
          break;
        case 0x234u:
          double result = &texFormatpqYCBCR10_420_2PLANE;
          break;
        case 0x235u:
          double result = &texFormatpqYCBCR10_422_2PLANE;
          break;
        case 0x236u:
          double result = &texFormatpqYCBCR10_444_2PLANE;
          break;
        case 0x237u:
          double result = &texFormatpqYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x238u:
          double result = &texFormatpqYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x239u:
          double result = &texFormatpqYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x23Au:
          double result = &texFormatYCBCR12_420_2PLANE;
          break;
        case 0x23Bu:
          double result = &texFormatYCBCR12_422_2PLANE;
          break;
        case 0x23Cu:
          double result = &texFormatYCBCR12_444_2PLANE;
          break;
        case 0x23Du:
          double result = &texFormatpqYCBCR12_420_2PLANE;
          break;
        case 0x23Eu:
          double result = &texFormatpqYCBCR12_422_2PLANE;
          break;
        case 0x23Fu:
          double result = &texFormatpqYCBCR12_444_2PLANE;
          break;
        case 0x240u:
          double result = &texFormatR10X6F;
          break;
        case 0x241u:
          double result = &texFormatsR10X6F;
          break;
        case 0x242u:
          double result = &texFormatRG10X12F;
          break;
        case 0x243u:
          double result = &texFormatsRG10X12F;
          break;
        case 0x244u:
          double result = &texFormatYCBCR12_420_2PLANE_PACKED;
          break;
        case 0x245u:
          double result = &texFormatYCBCR12_422_2PLANE_PACKED;
          break;
        case 0x246u:
          double result = &texFormatYCBCR12_444_2PLANE_PACKED;
          break;
        case 0x247u:
          double result = &texFormatpqYCBCR12_420_2PLANE_PACKED;
          break;
        case 0x248u:
          double result = &texFormatpqYCBCR12_422_2PLANE_PACKED;
          break;
        case 0x249u:
          double result = &texFormatpqYCBCR12_444_2PLANE_PACKED;
          break;
        case 0x24Au:
          double result = &texFormatsRGB10_A2;
          break;
        case 0x24Bu:
          double result = &texFormatpqRGB10_A2;
          break;
        case 0x24Cu:
          double result = &texFormatR10_1PLANE_PACKED;
          break;
        case 0x24Du:
          double result = &texFormatRG10_1PLANE_PACKED;
          break;
        case 0x24Eu:
          double result = &texFormatYCBCR10_444_1PLANE_XR;
          break;
        case 0x24Fu:
          double result = &texFormatYCBCR10_420_2PLANE_XR;
          break;
        case 0x250u:
          double result = &texFormatYCBCR10_422_2PLANE_XR;
          break;
        case 0x251u:
          double result = &texFormatYCBCR10_444_2PLANE_XR;
          break;
        case 0x252u:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED_XR;
          break;
        case 0x253u:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED_XR;
          break;
        case 0x254u:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED_XR;
          break;
        case 0x255u:
          double result = &texFormatYCBCR12_420_2PLANE_XR;
          break;
        case 0x256u:
          double result = &texFormatYCBCR12_422_2PLANE_XR;
          break;
        case 0x257u:
          double result = &texFormatYCBCR12_444_2PLANE_XR;
          break;
        case 0x258u:
          double result = &texFormatYCBCR12_420_2PLANE_PACKED_XR;
          break;
        case 0x259u:
          double result = &texFormatYCBCR12_422_2PLANE_PACKED_XR;
          break;
        case 0x25Au:
          double result = &texFormatYCBCR12_444_2PLANE_PACKED_XR;
          break;
        case 0x25Bu:
          double result = &texFormatR12X4U;
          break;
        case 0x25Cu:
          double result = &texFormatpqR12X4U;
          break;
        case 0x25Du:
          double result = &texFormatRG12X8U;
          break;
        case 0x25Eu:
          double result = &texFormatpqR10X6U;
          break;
        case 0x274u:
          double result = &texFormatsBGR10_A2;
          break;
        case 0x275u:
          double result = &texFormatpqBGR10_A2;
          break;
        default:
          goto LABEL_164;
      }
      break;
  }
  return result;
}

void *AGX::G14::TextureFormatTable::chooseTextureFormatCPP(AGX::G14::TextureFormatTable *this, MTLPixelFormat a2)
{
  int v2 = this - 1;
  double result = &texFormatA8;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 26:
    case 27:
    case 28:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 105:
    case 106:
    case 107:
    case 108:
    case 110:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 125:
    case 126:
    case 127:
    case 128:
    case 135:
    case 136:
    case 137:
    case 138:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 167:
    case 168:
    case 170:
    case 172:
    case 174:
    case 176:
    case 183:
    case 200:
    case 201:
    case 218:
    case 219:
    case 236:
    case 237:
    case 238:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 250:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
LABEL_167:
      double result = &texFormatUnsupported;
      break;
    case 9:
      double result = &texFormatR8;
      break;
    case 10:
      double result = &texFormatsR8;
      break;
    case 11:
      double result = &texFormatR8_SNORM;
      break;
    case 12:
      double result = &texFormatR8UI;
      break;
    case 13:
      double result = &texFormatR8I;
      break;
    case 19:
      double result = &texFormatR16;
      break;
    case 21:
      double result = &texFormatR16_SNORM;
      break;
    case 22:
      double result = &texFormatR16UI;
      break;
    case 23:
      double result = &texFormatR16I;
      break;
    case 24:
      double result = &texFormatR16F;
      break;
    case 25:
      double result = &texFormatR16BF;
      break;
    case 29:
      double result = &texFormatRG8;
      break;
    case 30:
      double result = &texFormatsRG8;
      break;
    case 31:
      double result = &texFormatRG8_SNORM;
      break;
    case 32:
      double result = &texFormatRG8UI;
      break;
    case 33:
      double result = &texFormatRG8I;
      break;
    case 39:
      double result = &texFormatRGB565;
      break;
    case 40:
      double result = &texFormatRGB5A1;
      break;
    case 41:
      double result = &texFormatRGBA4;
      break;
    case 42:
      double result = &texFormatA1RGB5;
      break;
    case 43:
      double result = &texFormatBGRA4;
      break;
    case 52:
      double result = &texFormatR32UI;
      break;
    case 53:
      double result = &texFormatR32I;
      break;
    case 54:
      double result = &texFormatR32F;
      break;
    case 59:
      double result = &texFormatRG16;
      break;
    case 61:
      double result = &texFormatRG16_SNORM;
      break;
    case 62:
      double result = &texFormatRG16UI;
      break;
    case 63:
      double result = &texFormatRG16I;
      break;
    case 64:
      double result = &texFormatRG16F;
      break;
    case 65:
      double result = &texFormatRG16BF;
      break;
    case 69:
      double result = &texFormatRGBA8;
      break;
    case 70:
      double result = &texFormatsRGBA8;
      break;
    case 71:
      double result = &texFormatRGBA8_SNORM;
      break;
    case 72:
      double result = &texFormatRGBA8UI;
      break;
    case 73:
      double result = &texFormatRGBA8I;
      break;
    case 79:
      double result = &texFormatBGRA8;
      break;
    case 80:
      double result = &texFormatsBGRA8;
      break;
    case 83:
      double result = &texFormatARGB8;
      break;
    case 84:
      double result = &texFormatsARGB8;
      break;
    case 89:
      double result = &texFormatRGB10_A2;
      break;
    case 90:
      double result = &texFormatRGB10_A2UI;
      break;
    case 91:
      double result = &texFormatR11FG11FB10F;
      break;
    case 92:
      double result = &texFormatRGB9_E5;
      break;
    case 93:
      double result = &texFormatBGR10_A2;
      break;
    case 102:
      double result = &texFormatRG32UI;
      break;
    case 103:
      double result = &texFormatRG32I;
      break;
    case 104:
      double result = &texFormatRG32F;
      break;
    case 109:
      double result = &texFormatRGBA16;
      break;
    case 111:
      double result = &texFormatRGBA16_SNORM;
      break;
    case 112:
      double result = &texFormatRGBA16UI;
      break;
    case 113:
      double result = &texFormatRGBA16I;
      break;
    case 114:
      double result = &texFormatRGBA16F;
      break;
    case 115:
      double result = &texFormatRGBA16BF;
      break;
    case 122:
      double result = &texFormatRGBA32UI;
      break;
    case 123:
      double result = &texFormatRGBA32I;
      break;
    case 124:
      double result = &texFormatRGBA32F;
      break;
    case 129:
      double result = &texFormatBC1_RGBA_UNORM;
      break;
    case 130:
      double result = &texFormatBC1_sRGBA_UNORM;
      break;
    case 131:
      double result = &texFormatBC2_RGBA_UNORM;
      break;
    case 132:
      double result = &texFormatBC2_sRGBA_UNORM;
      break;
    case 133:
      double result = &texFormatBC3_RGBA_UNORM;
      break;
    case 134:
      double result = &texFormatBC3_sRGBA_UNORM;
      break;
    case 139:
      double result = &texFormatBC4_R_UNORM;
      break;
    case 140:
      double result = &texFormatBC4_R_SNORM;
      break;
    case 141:
      double result = &texFormatBC5_RG_UNORM;
      break;
    case 142:
      double result = &texFormatBC5_RG_SNORM;
      break;
    case 149:
      double result = &texFormatBC6H_RGB_FLOAT;
      break;
    case 150:
      double result = &texFormatBC6H_RGB_UFLOAT;
      break;
    case 151:
      double result = &texFormatBC7_RGBA_UNORM;
      break;
    case 152:
      double result = &texFormatBC7_sRGBA_UNORM;
      break;
    case 159:
      double result = &texFormatPVRTC2RGB;
      break;
    case 160:
      double result = &texFormatPVRTC2sRGB;
      break;
    case 161:
      double result = &texFormatPVRTC4RGB;
      break;
    case 162:
      double result = &texFormatPVRTC4sRGB;
      break;
    case 163:
      double result = &texFormatPVRTC2RGBA;
      break;
    case 164:
      double result = &texFormatPVRTC2sRGBA;
      break;
    case 165:
      double result = &texFormatPVRTC4RGBA;
      break;
    case 166:
      double result = &texFormatPVRTC4sRGBA;
      break;
    case 169:
      double result = &texFormatR11EAC;
      break;
    case 171:
      double result = &texFormatR11EAC_SNORM;
      break;
    case 173:
      double result = &texFormatRG11EAC;
      break;
    case 175:
      double result = &texFormatRG11EAC_SNORM;
      break;
    case 177:
      double result = &texFormatETC2RGBA8;
      break;
    case 178:
      double result = &texFormatETC2sRGBA8;
      break;
    case 179:
      double result = &texFormatETC2RGB8;
      break;
    case 180:
      double result = &texFormatETC2sRGB8;
      break;
    case 181:
      double result = &texFormatETC2RGB8A1;
      break;
    case 182:
      double result = &texFormatETC2sRGB8A1;
      break;
    case 184:
      double result = &texFormatASTC4x2sRGBA_UNORM;
      break;
    case 185:
      double result = &texFormatASTC4x4sRGBA_UNORM;
      break;
    case 186:
      double result = &texFormatASTC5x4sRGBA_UNORM;
      break;
    case 187:
      double result = &texFormatASTC5x5sRGBA_UNORM;
      break;
    case 188:
      double result = &texFormatASTC6x5sRGBA_UNORM;
      break;
    case 189:
      double result = &texFormatASTC6x6sRGBA_UNORM;
      break;
    case 190:
      double result = &texFormatASTC8x4sRGBA_UNORM;
      break;
    case 191:
      double result = &texFormatASTC8x5sRGBA_UNORM;
      break;
    case 192:
      double result = &texFormatASTC8x6sRGBA_UNORM;
      break;
    case 193:
      double result = &texFormatASTC8x8sRGBA_UNORM;
      break;
    case 194:
      double result = &texFormatASTC10x5sRGBA_UNORM;
      break;
    case 195:
      double result = &texFormatASTC10x6sRGBA_UNORM;
      break;
    case 196:
      double result = &texFormatASTC10x8sRGBA_UNORM;
      break;
    case 197:
      double result = &texFormatASTC10x10sRGBA_UNORM;
      break;
    case 198:
      double result = &texFormatASTC12x10sRGBA_UNORM;
      break;
    case 199:
      double result = &texFormatASTC12x12sRGBA_UNORM;
      break;
    case 202:
      double result = &texFormatASTC4x2RGBA_LP;
      break;
    case 203:
      double result = &texFormatASTC4x4RGBA_LP;
      break;
    case 204:
      double result = &texFormatASTC5x4RGBA_LP;
      break;
    case 205:
      double result = &texFormatASTC5x5RGBA_LP;
      break;
    case 206:
      double result = &texFormatASTC6x5RGBA_LP;
      break;
    case 207:
      double result = &texFormatASTC6x6RGBA_LP;
      break;
    case 208:
      double result = &texFormatASTC8x4RGBA_LP;
      break;
    case 209:
      double result = &texFormatASTC8x5RGBA_LP;
      break;
    case 210:
      double result = &texFormatASTC8x6RGBA_LP;
      break;
    case 211:
      double result = &texFormatASTC8x8RGBA_LP;
      break;
    case 212:
      double result = &texFormatASTC10x5RGBA_LP;
      break;
    case 213:
      double result = &texFormatASTC10x6RGBA_LP;
      break;
    case 214:
      double result = &texFormatASTC10x8RGBA_LP;
      break;
    case 215:
      double result = &texFormatASTC10x10RGBA_LP;
      break;
    case 216:
      double result = &texFormatASTC12x10RGBA_LP;
      break;
    case 217:
      double result = &texFormatASTC12x12RGBA_LP;
      break;
    case 220:
      double result = &texFormatASTC4x2RGBA;
      break;
    case 221:
      double result = &texFormatASTC4x4RGBA;
      break;
    case 222:
      double result = &texFormatASTC5x4RGBA;
      break;
    case 223:
      double result = &texFormatASTC5x5RGBA;
      break;
    case 224:
      double result = &texFormatASTC6x5RGBA;
      break;
    case 225:
      double result = &texFormatASTC6x6RGBA;
      break;
    case 226:
      double result = &texFormatASTC8x4RGBA;
      break;
    case 227:
      double result = &texFormatASTC8x5RGBA;
      break;
    case 228:
      double result = &texFormatASTC8x6RGBA;
      break;
    case 229:
      double result = &texFormatASTC8x8RGBA;
      break;
    case 230:
      double result = &texFormatASTC10x5RGBA;
      break;
    case 231:
      double result = &texFormatASTC10x6RGBA;
      break;
    case 232:
      double result = &texFormatASTC10x8RGBA;
      break;
    case 233:
      double result = &texFormatASTC10x10RGBA;
      break;
    case 234:
      double result = &texFormatASTC12x10RGBA;
      break;
    case 235:
      double result = &texFormatASTC12x12RGBA;
      break;
    case 239:
      double result = &texFormatYUY2_RGB;
      break;
    case 240:
      double result = &texFormatUYVY_RGB;
      break;
    case 249:
      double result = &texFormatD16;
      break;
    case 251:
      double result = &texFormatD32;
      break;
    case 252:
    case 260:
      double result = &texFormatS8;
      break;
    case 259:
      double result = &texFormatD32FS8_2PLANE;
      break;
    case 299:
      double result = &texFormatRGB8;
      break;
    case 300:
      double result = &texFormatsRGB8;
      break;
    case 301:
      double result = &texFormatRGB8_SNORM;
      break;
    case 302:
      double result = &texFormatRGB8UI;
      break;
    case 303:
      double result = &texFormatRGB8I;
      break;
    case 312:
      double result = &texFormatRGBX16UI;
      break;
    case 313:
      double result = &texFormatRGBX16I;
      break;
    case 314:
      double result = &texFormatRGBX16F;
      break;
    case 322:
      double result = &texFormatRGBX32UI;
      break;
    case 323:
      double result = &texFormatRGBX32I;
      break;
    case 324:
      double result = &texFormatRGBX32F;
      break;
    default:
      switch(&texFormatA8)
      {
        case 0x1F4u:
          double result = &texFormatYCBCR8_420_2PLANE;
          break;
        case 0x1F5u:
          double result = &texFormatYCBCR8_422_1PLANE;
          break;
        case 0x1F6u:
          double result = &texFormatYCBCR8_422_2PLANE;
          break;
        case 0x1F7u:
          double result = &texFormatYCBCR8_444_2PLANE;
          break;
        case 0x1F8u:
          double result = &texFormatYCBCR10_444_1PLANE;
          break;
        case 0x1F9u:
          double result = &texFormatYCBCR10_420_2PLANE;
          break;
        case 0x1FAu:
          double result = &texFormatYCBCR10_422_2PLANE;
          break;
        case 0x1FBu:
          double result = &texFormatYCBCR10_444_2PLANE;
          break;
        case 0x1FCu:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x1FDu:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x1FEu:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x208u:
          double result = &texFormatsYCBCR8_420_2PLANE;
          break;
        case 0x209u:
          double result = &texFormatsYCBCR8_422_1PLANE;
          break;
        case 0x20Au:
          double result = &texFormatsYCBCR8_422_2PLANE;
          break;
        case 0x20Bu:
          double result = &texFormatsYCBCR8_444_2PLANE;
          break;
        case 0x20Cu:
          double result = &texFormatsYCBCR10_444_1PLANE;
          break;
        case 0x20Du:
          double result = &texFormatsYCBCR10_420_2PLANE;
          break;
        case 0x20Eu:
          double result = &texFormatsYCBCR10_422_2PLANE;
          break;
        case 0x20Fu:
          double result = &texFormatsYCBCR10_444_2PLANE;
          break;
        case 0x210u:
          double result = &texFormatsYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x211u:
          double result = &texFormatsYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x212u:
          double result = &texFormatsYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x21Cu:
          double result = &texFormatRGB8_420_2PLANE;
          break;
        case 0x21Du:
          double result = &texFormatRGB8_422_2PLANE;
          break;
        case 0x21Eu:
          double result = &texFormatRGB8_444_2PLANE;
          break;
        case 0x21Fu:
          double result = &texFormatRGB10_420_2PLANE;
          break;
        case 0x220u:
          double result = &texFormatRGB10_422_2PLANE;
          break;
        case 0x221u:
          double result = &texFormatRGB10_444_2PLANE;
          break;
        case 0x222u:
          double result = &texFormatRGB10_420_2PLANE_PACKED;
          break;
        case 0x223u:
          double result = &texFormatRGB10_422_2PLANE_PACKED;
          break;
        case 0x224u:
          double result = &texFormatRGB10_444_2PLANE_PACKED;
          break;
        case 0x226u:
          double result = &texFormatXRRGB10_PLANE_A8_PLANE;
          break;
        case 0x227u:
          double result = &texFormatXRSRGB10_PLANE_A8_PLANE;
          break;
        case 0x228u:
          double result = &texFormatARGBV16_XR10;
          break;
        case 0x229u:
          double result = &texFormatsARGBV16_XR10;
          break;
        case 0x22Au:
          double result = &texFormatXRRGB10;
          break;
        case 0x22Bu:
          double result = &texFormatXRSRGB10;
          break;
        case 0x22Cu:
          double result = &texFormatRGBA16F_XR;
          break;
        case 0x230u:
          double result = &texFormatYCBCR8A8_444_1PLANE;
          break;
        case 0x232u:
          double result = &texFormatYCBCR8_422_1PLANE_REV;
          break;
        case 0x233u:
          double result = &texFormatpqYCBCR10_444_1PLANE;
          break;
        case 0x234u:
          double result = &texFormatpqYCBCR10_420_2PLANE;
          break;
        case 0x235u:
          double result = &texFormatpqYCBCR10_422_2PLANE;
          break;
        case 0x236u:
          double result = &texFormatpqYCBCR10_444_2PLANE;
          break;
        case 0x237u:
          double result = &texFormatpqYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x238u:
          double result = &texFormatpqYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x239u:
          double result = &texFormatpqYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x23Au:
          double result = &texFormatYCBCR12_420_2PLANE;
          break;
        case 0x23Bu:
          double result = &texFormatYCBCR12_422_2PLANE;
          break;
        case 0x23Cu:
          double result = &texFormatYCBCR12_444_2PLANE;
          break;
        case 0x23Du:
          double result = &texFormatpqYCBCR12_420_2PLANE;
          break;
        case 0x23Eu:
          double result = &texFormatpqYCBCR12_422_2PLANE;
          break;
        case 0x23Fu:
          double result = &texFormatpqYCBCR12_444_2PLANE;
          break;
        case 0x240u:
          double result = &texFormatR10X6F;
          break;
        case 0x241u:
          double result = &texFormatsR10X6F;
          break;
        case 0x242u:
          double result = &texFormatRG10X12F;
          break;
        case 0x243u:
          double result = &texFormatsRG10X12F;
          break;
        case 0x244u:
          double result = &texFormatYCBCR12_420_2PLANE_PACKED;
          break;
        case 0x245u:
          double result = &texFormatYCBCR12_422_2PLANE_PACKED;
          break;
        case 0x246u:
          double result = &texFormatYCBCR12_444_2PLANE_PACKED;
          break;
        case 0x247u:
          double result = &texFormatpqYCBCR12_420_2PLANE_PACKED;
          break;
        case 0x248u:
          double result = &texFormatpqYCBCR12_422_2PLANE_PACKED;
          break;
        case 0x249u:
          double result = &texFormatpqYCBCR12_444_2PLANE_PACKED;
          break;
        case 0x24Au:
          double result = &texFormatsRGB10_A2;
          break;
        case 0x24Bu:
          double result = &texFormatpqRGB10_A2;
          break;
        case 0x24Cu:
          double result = &texFormatR10_1PLANE_PACKED;
          break;
        case 0x24Du:
          double result = &texFormatRG10_1PLANE_PACKED;
          break;
        case 0x24Eu:
          double result = &texFormatYCBCR10_444_1PLANE_XR;
          break;
        case 0x24Fu:
          double result = &texFormatYCBCR10_420_2PLANE_XR;
          break;
        case 0x250u:
          double result = &texFormatYCBCR10_422_2PLANE_XR;
          break;
        case 0x251u:
          double result = &texFormatYCBCR10_444_2PLANE_XR;
          break;
        case 0x252u:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED_XR;
          break;
        case 0x253u:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED_XR;
          break;
        case 0x254u:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED_XR;
          break;
        case 0x255u:
          double result = &texFormatYCBCR12_420_2PLANE_XR;
          break;
        case 0x256u:
          double result = &texFormatYCBCR12_422_2PLANE_XR;
          break;
        case 0x257u:
          double result = &texFormatYCBCR12_444_2PLANE_XR;
          break;
        case 0x258u:
          double result = &texFormatYCBCR12_420_2PLANE_PACKED_XR;
          break;
        case 0x259u:
          double result = &texFormatYCBCR12_422_2PLANE_PACKED_XR;
          break;
        case 0x25Au:
          double result = &texFormatYCBCR12_444_2PLANE_PACKED_XR;
          break;
        case 0x25Bu:
          double result = &texFormatR12X4U;
          break;
        case 0x25Cu:
          double result = &texFormatpqR12X4U;
          break;
        case 0x25Du:
          double result = &texFormatRG12X8U;
          break;
        case 0x25Eu:
          double result = &texFormatpqR10X6U;
          break;
        case 0x274u:
          double result = &texFormatsBGR10_A2;
          break;
        case 0x275u:
          double result = &texFormatpqBGR10_A2;
          break;
        default:
          goto LABEL_167;
      }
      break;
  }
  return result;
}

void *AGX::G14X::TextureFormatTable::chooseTextureFormatCPP(AGX::G14X::TextureFormatTable *this, MTLPixelFormat a2)
{
  int v2 = this - 1;
  double result = &texFormatA8;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 26:
    case 27:
    case 28:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 105:
    case 106:
    case 107:
    case 108:
    case 110:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 125:
    case 126:
    case 127:
    case 128:
    case 135:
    case 136:
    case 137:
    case 138:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 167:
    case 168:
    case 170:
    case 172:
    case 174:
    case 176:
    case 183:
    case 200:
    case 201:
    case 218:
    case 219:
    case 236:
    case 237:
    case 238:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 250:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
LABEL_167:
      double result = &texFormatUnsupported;
      break;
    case 9:
      double result = &texFormatR8;
      break;
    case 10:
      double result = &texFormatsR8;
      break;
    case 11:
      double result = &texFormatR8_SNORM;
      break;
    case 12:
      double result = &texFormatR8UI;
      break;
    case 13:
      double result = &texFormatR8I;
      break;
    case 19:
      double result = &texFormatR16;
      break;
    case 21:
      double result = &texFormatR16_SNORM;
      break;
    case 22:
      double result = &texFormatR16UI;
      break;
    case 23:
      double result = &texFormatR16I;
      break;
    case 24:
      double result = &texFormatR16F;
      break;
    case 25:
      double result = &texFormatR16BF;
      break;
    case 29:
      double result = &texFormatRG8;
      break;
    case 30:
      double result = &texFormatsRG8;
      break;
    case 31:
      double result = &texFormatRG8_SNORM;
      break;
    case 32:
      double result = &texFormatRG8UI;
      break;
    case 33:
      double result = &texFormatRG8I;
      break;
    case 39:
      double result = &texFormatRGB565;
      break;
    case 40:
      double result = &texFormatRGB5A1;
      break;
    case 41:
      double result = &texFormatRGBA4;
      break;
    case 42:
      double result = &texFormatA1RGB5;
      break;
    case 43:
      double result = &texFormatBGRA4;
      break;
    case 52:
      double result = &texFormatR32UI;
      break;
    case 53:
      double result = &texFormatR32I;
      break;
    case 54:
      double result = &texFormatR32F;
      break;
    case 59:
      double result = &texFormatRG16;
      break;
    case 61:
      double result = &texFormatRG16_SNORM;
      break;
    case 62:
      double result = &texFormatRG16UI;
      break;
    case 63:
      double result = &texFormatRG16I;
      break;
    case 64:
      double result = &texFormatRG16F;
      break;
    case 65:
      double result = &texFormatRG16BF;
      break;
    case 69:
      double result = &texFormatRGBA8;
      break;
    case 70:
      double result = &texFormatsRGBA8;
      break;
    case 71:
      double result = &texFormatRGBA8_SNORM;
      break;
    case 72:
      double result = &texFormatRGBA8UI;
      break;
    case 73:
      double result = &texFormatRGBA8I;
      break;
    case 79:
      double result = &texFormatBGRA8;
      break;
    case 80:
      double result = &texFormatsBGRA8;
      break;
    case 83:
      double result = &texFormatARGB8;
      break;
    case 84:
      double result = &texFormatsARGB8;
      break;
    case 89:
      double result = &texFormatRGB10_A2;
      break;
    case 90:
      double result = &texFormatRGB10_A2UI;
      break;
    case 91:
      double result = &texFormatR11FG11FB10F;
      break;
    case 92:
      double result = &texFormatRGB9_E5;
      break;
    case 93:
      double result = &texFormatBGR10_A2;
      break;
    case 102:
      double result = &texFormatRG32UI;
      break;
    case 103:
      double result = &texFormatRG32I;
      break;
    case 104:
      double result = &texFormatRG32F;
      break;
    case 109:
      double result = &texFormatRGBA16;
      break;
    case 111:
      double result = &texFormatRGBA16_SNORM;
      break;
    case 112:
      double result = &texFormatRGBA16UI;
      break;
    case 113:
      double result = &texFormatRGBA16I;
      break;
    case 114:
      double result = &texFormatRGBA16F;
      break;
    case 115:
      double result = &texFormatRGBA16BF;
      break;
    case 122:
      double result = &texFormatRGBA32UI;
      break;
    case 123:
      double result = &texFormatRGBA32I;
      break;
    case 124:
      double result = &texFormatRGBA32F;
      break;
    case 129:
      double result = &texFormatBC1_RGBA_UNORM;
      break;
    case 130:
      double result = &texFormatBC1_sRGBA_UNORM;
      break;
    case 131:
      double result = &texFormatBC2_RGBA_UNORM;
      break;
    case 132:
      double result = &texFormatBC2_sRGBA_UNORM;
      break;
    case 133:
      double result = &texFormatBC3_RGBA_UNORM;
      break;
    case 134:
      double result = &texFormatBC3_sRGBA_UNORM;
      break;
    case 139:
      double result = &texFormatBC4_R_UNORM;
      break;
    case 140:
      double result = &texFormatBC4_R_SNORM;
      break;
    case 141:
      double result = &texFormatBC5_RG_UNORM;
      break;
    case 142:
      double result = &texFormatBC5_RG_SNORM;
      break;
    case 149:
      double result = &texFormatBC6H_RGB_FLOAT;
      break;
    case 150:
      double result = &texFormatBC6H_RGB_UFLOAT;
      break;
    case 151:
      double result = &texFormatBC7_RGBA_UNORM;
      break;
    case 152:
      double result = &texFormatBC7_sRGBA_UNORM;
      break;
    case 159:
      double result = &texFormatPVRTC2RGB;
      break;
    case 160:
      double result = &texFormatPVRTC2sRGB;
      break;
    case 161:
      double result = &texFormatPVRTC4RGB;
      break;
    case 162:
      double result = &texFormatPVRTC4sRGB;
      break;
    case 163:
      double result = &texFormatPVRTC2RGBA;
      break;
    case 164:
      double result = &texFormatPVRTC2sRGBA;
      break;
    case 165:
      double result = &texFormatPVRTC4RGBA;
      break;
    case 166:
      double result = &texFormatPVRTC4sRGBA;
      break;
    case 169:
      double result = &texFormatR11EAC;
      break;
    case 171:
      double result = &texFormatR11EAC_SNORM;
      break;
    case 173:
      double result = &texFormatRG11EAC;
      break;
    case 175:
      double result = &texFormatRG11EAC_SNORM;
      break;
    case 177:
      double result = &texFormatETC2RGBA8;
      break;
    case 178:
      double result = &texFormatETC2sRGBA8;
      break;
    case 179:
      double result = &texFormatETC2RGB8;
      break;
    case 180:
      double result = &texFormatETC2sRGB8;
      break;
    case 181:
      double result = &texFormatETC2RGB8A1;
      break;
    case 182:
      double result = &texFormatETC2sRGB8A1;
      break;
    case 184:
      double result = &texFormatASTC4x2sRGBA_UNORM;
      break;
    case 185:
      double result = &texFormatASTC4x4sRGBA_UNORM;
      break;
    case 186:
      double result = &texFormatASTC5x4sRGBA_UNORM;
      break;
    case 187:
      double result = &texFormatASTC5x5sRGBA_UNORM;
      break;
    case 188:
      double result = &texFormatASTC6x5sRGBA_UNORM;
      break;
    case 189:
      double result = &texFormatASTC6x6sRGBA_UNORM;
      break;
    case 190:
      double result = &texFormatASTC8x4sRGBA_UNORM;
      break;
    case 191:
      double result = &texFormatASTC8x5sRGBA_UNORM;
      break;
    case 192:
      double result = &texFormatASTC8x6sRGBA_UNORM;
      break;
    case 193:
      double result = &texFormatASTC8x8sRGBA_UNORM;
      break;
    case 194:
      double result = &texFormatASTC10x5sRGBA_UNORM;
      break;
    case 195:
      double result = &texFormatASTC10x6sRGBA_UNORM;
      break;
    case 196:
      double result = &texFormatASTC10x8sRGBA_UNORM;
      break;
    case 197:
      double result = &texFormatASTC10x10sRGBA_UNORM;
      break;
    case 198:
      double result = &texFormatASTC12x10sRGBA_UNORM;
      break;
    case 199:
      double result = &texFormatASTC12x12sRGBA_UNORM;
      break;
    case 202:
      double result = &texFormatASTC4x2RGBA_LP;
      break;
    case 203:
      double result = &texFormatASTC4x4RGBA_LP;
      break;
    case 204:
      double result = &texFormatASTC5x4RGBA_LP;
      break;
    case 205:
      double result = &texFormatASTC5x5RGBA_LP;
      break;
    case 206:
      double result = &texFormatASTC6x5RGBA_LP;
      break;
    case 207:
      double result = &texFormatASTC6x6RGBA_LP;
      break;
    case 208:
      double result = &texFormatASTC8x4RGBA_LP;
      break;
    case 209:
      double result = &texFormatASTC8x5RGBA_LP;
      break;
    case 210:
      double result = &texFormatASTC8x6RGBA_LP;
      break;
    case 211:
      double result = &texFormatASTC8x8RGBA_LP;
      break;
    case 212:
      double result = &texFormatASTC10x5RGBA_LP;
      break;
    case 213:
      double result = &texFormatASTC10x6RGBA_LP;
      break;
    case 214:
      double result = &texFormatASTC10x8RGBA_LP;
      break;
    case 215:
      double result = &texFormatASTC10x10RGBA_LP;
      break;
    case 216:
      double result = &texFormatASTC12x10RGBA_LP;
      break;
    case 217:
      double result = &texFormatASTC12x12RGBA_LP;
      break;
    case 220:
      double result = &texFormatASTC4x2RGBA;
      break;
    case 221:
      double result = &texFormatASTC4x4RGBA;
      break;
    case 222:
      double result = &texFormatASTC5x4RGBA;
      break;
    case 223:
      double result = &texFormatASTC5x5RGBA;
      break;
    case 224:
      double result = &texFormatASTC6x5RGBA;
      break;
    case 225:
      double result = &texFormatASTC6x6RGBA;
      break;
    case 226:
      double result = &texFormatASTC8x4RGBA;
      break;
    case 227:
      double result = &texFormatASTC8x5RGBA;
      break;
    case 228:
      double result = &texFormatASTC8x6RGBA;
      break;
    case 229:
      double result = &texFormatASTC8x8RGBA;
      break;
    case 230:
      double result = &texFormatASTC10x5RGBA;
      break;
    case 231:
      double result = &texFormatASTC10x6RGBA;
      break;
    case 232:
      double result = &texFormatASTC10x8RGBA;
      break;
    case 233:
      double result = &texFormatASTC10x10RGBA;
      break;
    case 234:
      double result = &texFormatASTC12x10RGBA;
      break;
    case 235:
      double result = &texFormatASTC12x12RGBA;
      break;
    case 239:
      double result = &texFormatYUY2_RGB;
      break;
    case 240:
      double result = &texFormatUYVY_RGB;
      break;
    case 249:
      double result = &texFormatD16;
      break;
    case 251:
      double result = &texFormatD32;
      break;
    case 252:
    case 260:
      double result = &texFormatS8;
      break;
    case 259:
      double result = &texFormatD32FS8_2PLANE;
      break;
    case 299:
      double result = &texFormatRGB8;
      break;
    case 300:
      double result = &texFormatsRGB8;
      break;
    case 301:
      double result = &texFormatRGB8_SNORM;
      break;
    case 302:
      double result = &texFormatRGB8UI;
      break;
    case 303:
      double result = &texFormatRGB8I;
      break;
    case 312:
      double result = &texFormatRGBX16UI;
      break;
    case 313:
      double result = &texFormatRGBX16I;
      break;
    case 314:
      double result = &texFormatRGBX16F;
      break;
    case 322:
      double result = &texFormatRGBX32UI;
      break;
    case 323:
      double result = &texFormatRGBX32I;
      break;
    case 324:
      double result = &texFormatRGBX32F;
      break;
    default:
      switch(&texFormatA8)
      {
        case 0x1F4u:
          double result = &texFormatYCBCR8_420_2PLANE;
          break;
        case 0x1F5u:
          double result = &texFormatYCBCR8_422_1PLANE;
          break;
        case 0x1F6u:
          double result = &texFormatYCBCR8_422_2PLANE;
          break;
        case 0x1F7u:
          double result = &texFormatYCBCR8_444_2PLANE;
          break;
        case 0x1F8u:
          double result = &texFormatYCBCR10_444_1PLANE;
          break;
        case 0x1F9u:
          double result = &texFormatYCBCR10_420_2PLANE;
          break;
        case 0x1FAu:
          double result = &texFormatYCBCR10_422_2PLANE;
          break;
        case 0x1FBu:
          double result = &texFormatYCBCR10_444_2PLANE;
          break;
        case 0x1FCu:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x1FDu:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x1FEu:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x208u:
          double result = &texFormatsYCBCR8_420_2PLANE;
          break;
        case 0x209u:
          double result = &texFormatsYCBCR8_422_1PLANE;
          break;
        case 0x20Au:
          double result = &texFormatsYCBCR8_422_2PLANE;
          break;
        case 0x20Bu:
          double result = &texFormatsYCBCR8_444_2PLANE;
          break;
        case 0x20Cu:
          double result = &texFormatsYCBCR10_444_1PLANE;
          break;
        case 0x20Du:
          double result = &texFormatsYCBCR10_420_2PLANE;
          break;
        case 0x20Eu:
          double result = &texFormatsYCBCR10_422_2PLANE;
          break;
        case 0x20Fu:
          double result = &texFormatsYCBCR10_444_2PLANE;
          break;
        case 0x210u:
          double result = &texFormatsYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x211u:
          double result = &texFormatsYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x212u:
          double result = &texFormatsYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x21Cu:
          double result = &texFormatRGB8_420_2PLANE;
          break;
        case 0x21Du:
          double result = &texFormatRGB8_422_2PLANE;
          break;
        case 0x21Eu:
          double result = &texFormatRGB8_444_2PLANE;
          break;
        case 0x21Fu:
          double result = &texFormatRGB10_420_2PLANE;
          break;
        case 0x220u:
          double result = &texFormatRGB10_422_2PLANE;
          break;
        case 0x221u:
          double result = &texFormatRGB10_444_2PLANE;
          break;
        case 0x222u:
          double result = &texFormatRGB10_420_2PLANE_PACKED;
          break;
        case 0x223u:
          double result = &texFormatRGB10_422_2PLANE_PACKED;
          break;
        case 0x224u:
          double result = &texFormatRGB10_444_2PLANE_PACKED;
          break;
        case 0x226u:
          double result = &texFormatXRRGB10_PLANE_A8_PLANE;
          break;
        case 0x227u:
          double result = &texFormatXRSRGB10_PLANE_A8_PLANE;
          break;
        case 0x228u:
          double result = &texFormatARGBV16_XR10;
          break;
        case 0x229u:
          double result = &texFormatsARGBV16_XR10;
          break;
        case 0x22Au:
          double result = &texFormatXRRGB10;
          break;
        case 0x22Bu:
          double result = &texFormatXRSRGB10;
          break;
        case 0x230u:
          double result = &texFormatYCBCR8A8_444_1PLANE;
          break;
        case 0x232u:
          double result = &texFormatYCBCR8_422_1PLANE_REV;
          break;
        case 0x233u:
          double result = &texFormatpqYCBCR10_444_1PLANE;
          break;
        case 0x234u:
          double result = &texFormatpqYCBCR10_420_2PLANE;
          break;
        case 0x235u:
          double result = &texFormatpqYCBCR10_422_2PLANE;
          break;
        case 0x236u:
          double result = &texFormatpqYCBCR10_444_2PLANE;
          break;
        case 0x237u:
          double result = &texFormatpqYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x238u:
          double result = &texFormatpqYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x239u:
          double result = &texFormatpqYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x23Au:
          double result = &texFormatYCBCR12_420_2PLANE;
          break;
        case 0x23Bu:
          double result = &texFormatYCBCR12_422_2PLANE;
          break;
        case 0x23Cu:
          double result = &texFormatYCBCR12_444_2PLANE;
          break;
        case 0x23Du:
          double result = &texFormatpqYCBCR12_420_2PLANE;
          break;
        case 0x23Eu:
          double result = &texFormatpqYCBCR12_422_2PLANE;
          break;
        case 0x23Fu:
          double result = &texFormatpqYCBCR12_444_2PLANE;
          break;
        case 0x240u:
          double result = &texFormatR10X6F;
          break;
        case 0x241u:
          double result = &texFormatsR10X6F;
          break;
        case 0x242u:
          double result = &texFormatRG10X12F;
          break;
        case 0x243u:
          double result = &texFormatsRG10X12F;
          break;
        case 0x244u:
          double result = &texFormatYCBCR12_420_2PLANE_PACKED;
          break;
        case 0x245u:
          double result = &texFormatYCBCR12_422_2PLANE_PACKED;
          break;
        case 0x246u:
          double result = &texFormatYCBCR12_444_2PLANE_PACKED;
          break;
        case 0x247u:
          double result = &texFormatpqYCBCR12_420_2PLANE_PACKED;
          break;
        case 0x248u:
          double result = &texFormatpqYCBCR12_422_2PLANE_PACKED;
          break;
        case 0x249u:
          double result = &texFormatpqYCBCR12_444_2PLANE_PACKED;
          break;
        case 0x24Au:
          double result = &texFormatsRGB10_A2;
          break;
        case 0x24Bu:
          double result = &texFormatpqRGB10_A2;
          break;
        case 0x24Cu:
          double result = &texFormatR10_1PLANE_PACKED;
          break;
        case 0x24Du:
          double result = &texFormatRG10_1PLANE_PACKED;
          break;
        case 0x24Eu:
          double result = &texFormatYCBCR10_444_1PLANE_XR;
          break;
        case 0x24Fu:
          double result = &texFormatYCBCR10_420_2PLANE_XR;
          break;
        case 0x250u:
          double result = &texFormatYCBCR10_422_2PLANE_XR;
          break;
        case 0x251u:
          double result = &texFormatYCBCR10_444_2PLANE_XR;
          break;
        case 0x252u:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED_XR;
          break;
        case 0x253u:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED_XR;
          break;
        case 0x254u:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED_XR;
          break;
        case 0x255u:
          double result = &texFormatYCBCR12_420_2PLANE_XR;
          break;
        case 0x256u:
          double result = &texFormatYCBCR12_422_2PLANE_XR;
          break;
        case 0x257u:
          double result = &texFormatYCBCR12_444_2PLANE_XR;
          break;
        case 0x258u:
          double result = &texFormatYCBCR12_420_2PLANE_PACKED_XR;
          break;
        case 0x259u:
          double result = &texFormatYCBCR12_422_2PLANE_PACKED_XR;
          break;
        case 0x25Au:
          double result = &texFormatYCBCR12_444_2PLANE_PACKED_XR;
          break;
        case 0x25Bu:
          double result = &texFormatR12X4U;
          break;
        case 0x25Cu:
          double result = &texFormatpqR12X4U;
          break;
        case 0x25Du:
          double result = &texFormatRG12X8U;
          break;
        case 0x25Eu:
          double result = &texFormatpqR10X6U;
          break;
        case 0x274u:
          double result = &texFormatsBGR10_A2;
          break;
        case 0x275u:
          double result = &texFormatpqBGR10_A2;
          break;
        default:
          goto LABEL_167;
      }
      break;
  }
  return result;
}

void *AGX::G15_AGX2::TextureFormatTable::chooseTextureFormatCPP(AGX::G15_AGX2::TextureFormatTable *this, MTLPixelFormat a2)
{
  int v2 = this - 1;
  double result = &texFormatA8;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 26:
    case 27:
    case 28:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 105:
    case 106:
    case 107:
    case 108:
    case 110:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 125:
    case 126:
    case 127:
    case 128:
    case 135:
    case 136:
    case 137:
    case 138:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 167:
    case 168:
    case 170:
    case 172:
    case 174:
    case 176:
    case 183:
    case 200:
    case 201:
    case 218:
    case 219:
    case 236:
    case 237:
    case 238:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 250:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
LABEL_167:
      double result = &texFormatUnsupported;
      break;
    case 9:
      double result = &texFormatR8;
      break;
    case 10:
      double result = &texFormatsR8;
      break;
    case 11:
      double result = &texFormatR8_SNORM;
      break;
    case 12:
      double result = &texFormatR8UI;
      break;
    case 13:
      double result = &texFormatR8I;
      break;
    case 19:
      double result = &texFormatR16;
      break;
    case 21:
      double result = &texFormatR16_SNORM;
      break;
    case 22:
      double result = &texFormatR16UI;
      break;
    case 23:
      double result = &texFormatR16I;
      break;
    case 24:
      double result = &texFormatR16F;
      break;
    case 25:
      double result = &texFormatR16BF;
      break;
    case 29:
      double result = &texFormatRG8;
      break;
    case 30:
      double result = &texFormatsRG8;
      break;
    case 31:
      double result = &texFormatRG8_SNORM;
      break;
    case 32:
      double result = &texFormatRG8UI;
      break;
    case 33:
      double result = &texFormatRG8I;
      break;
    case 39:
      double result = &texFormatRGB565;
      break;
    case 40:
      double result = &texFormatRGB5A1;
      break;
    case 41:
      double result = &texFormatRGBA4;
      break;
    case 42:
      double result = &texFormatA1RGB5;
      break;
    case 43:
      double result = &texFormatBGRA4;
      break;
    case 52:
      double result = &texFormatR32UI;
      break;
    case 53:
      double result = &texFormatR32I;
      break;
    case 54:
      double result = &texFormatR32F;
      break;
    case 59:
      double result = &texFormatRG16;
      break;
    case 61:
      double result = &texFormatRG16_SNORM;
      break;
    case 62:
      double result = &texFormatRG16UI;
      break;
    case 63:
      double result = &texFormatRG16I;
      break;
    case 64:
      double result = &texFormatRG16F;
      break;
    case 65:
      double result = &texFormatRG16BF;
      break;
    case 69:
      double result = &texFormatRGBA8;
      break;
    case 70:
      double result = &texFormatsRGBA8;
      break;
    case 71:
      double result = &texFormatRGBA8_SNORM;
      break;
    case 72:
      double result = &texFormatRGBA8UI;
      break;
    case 73:
      double result = &texFormatRGBA8I;
      break;
    case 79:
      double result = &texFormatBGRA8;
      break;
    case 80:
      double result = &texFormatsBGRA8;
      break;
    case 83:
      double result = &texFormatARGB8;
      break;
    case 84:
      double result = &texFormatsARGB8;
      break;
    case 89:
      double result = &texFormatRGB10_A2;
      break;
    case 90:
      double result = &texFormatRGB10_A2UI;
      break;
    case 91:
      double result = &texFormatR11FG11FB10F;
      break;
    case 92:
      double result = &texFormatRGB9_E5;
      break;
    case 93:
      double result = &texFormatBGR10_A2;
      break;
    case 102:
      double result = &texFormatRG32UI;
      break;
    case 103:
      double result = &texFormatRG32I;
      break;
    case 104:
      double result = &texFormatRG32F;
      break;
    case 109:
      double result = &texFormatRGBA16;
      break;
    case 111:
      double result = &texFormatRGBA16_SNORM;
      break;
    case 112:
      double result = &texFormatRGBA16UI;
      break;
    case 113:
      double result = &texFormatRGBA16I;
      break;
    case 114:
      double result = &texFormatRGBA16F;
      break;
    case 115:
      double result = &texFormatRGBA16BF;
      break;
    case 122:
      double result = &texFormatRGBA32UI;
      break;
    case 123:
      double result = &texFormatRGBA32I;
      break;
    case 124:
      double result = &texFormatRGBA32F;
      break;
    case 129:
      double result = &texFormatBC1_RGBA_UNORM;
      break;
    case 130:
      double result = &texFormatBC1_sRGBA_UNORM;
      break;
    case 131:
      double result = &texFormatBC2_RGBA_UNORM;
      break;
    case 132:
      double result = &texFormatBC2_sRGBA_UNORM;
      break;
    case 133:
      double result = &texFormatBC3_RGBA_UNORM;
      break;
    case 134:
      double result = &texFormatBC3_sRGBA_UNORM;
      break;
    case 139:
      double result = &texFormatBC4_R_UNORM;
      break;
    case 140:
      double result = &texFormatBC4_R_SNORM;
      break;
    case 141:
      double result = &texFormatBC5_RG_UNORM;
      break;
    case 142:
      double result = &texFormatBC5_RG_SNORM;
      break;
    case 149:
      double result = &texFormatBC6H_RGB_FLOAT;
      break;
    case 150:
      double result = &texFormatBC6H_RGB_UFLOAT;
      break;
    case 151:
      double result = &texFormatBC7_RGBA_UNORM;
      break;
    case 152:
      double result = &texFormatBC7_sRGBA_UNORM;
      break;
    case 159:
      double result = &texFormatPVRTC2RGB;
      break;
    case 160:
      double result = &texFormatPVRTC2sRGB;
      break;
    case 161:
      double result = &texFormatPVRTC4RGB;
      break;
    case 162:
      double result = &texFormatPVRTC4sRGB;
      break;
    case 163:
      double result = &texFormatPVRTC2RGBA;
      break;
    case 164:
      double result = &texFormatPVRTC2sRGBA;
      break;
    case 165:
      double result = &texFormatPVRTC4RGBA;
      break;
    case 166:
      double result = &texFormatPVRTC4sRGBA;
      break;
    case 169:
      double result = &texFormatR11EAC;
      break;
    case 171:
      double result = &texFormatR11EAC_SNORM;
      break;
    case 173:
      double result = &texFormatRG11EAC;
      break;
    case 175:
      double result = &texFormatRG11EAC_SNORM;
      break;
    case 177:
      double result = &texFormatETC2RGBA8;
      break;
    case 178:
      double result = &texFormatETC2sRGBA8;
      break;
    case 179:
      double result = &texFormatETC2RGB8;
      break;
    case 180:
      double result = &texFormatETC2sRGB8;
      break;
    case 181:
      double result = &texFormatETC2RGB8A1;
      break;
    case 182:
      double result = &texFormatETC2sRGB8A1;
      break;
    case 184:
      double result = &texFormatASTC4x2sRGBA_UNORM;
      break;
    case 185:
      double result = &texFormatASTC4x4sRGBA_UNORM;
      break;
    case 186:
      double result = &texFormatASTC5x4sRGBA_UNORM;
      break;
    case 187:
      double result = &texFormatASTC5x5sRGBA_UNORM;
      break;
    case 188:
      double result = &texFormatASTC6x5sRGBA_UNORM;
      break;
    case 189:
      double result = &texFormatASTC6x6sRGBA_UNORM;
      break;
    case 190:
      double result = &texFormatASTC8x4sRGBA_UNORM;
      break;
    case 191:
      double result = &texFormatASTC8x5sRGBA_UNORM;
      break;
    case 192:
      double result = &texFormatASTC8x6sRGBA_UNORM;
      break;
    case 193:
      double result = &texFormatASTC8x8sRGBA_UNORM;
      break;
    case 194:
      double result = &texFormatASTC10x5sRGBA_UNORM;
      break;
    case 195:
      double result = &texFormatASTC10x6sRGBA_UNORM;
      break;
    case 196:
      double result = &texFormatASTC10x8sRGBA_UNORM;
      break;
    case 197:
      double result = &texFormatASTC10x10sRGBA_UNORM;
      break;
    case 198:
      double result = &texFormatASTC12x10sRGBA_UNORM;
      break;
    case 199:
      double result = &texFormatASTC12x12sRGBA_UNORM;
      break;
    case 202:
      double result = &texFormatASTC4x2RGBA_LP;
      break;
    case 203:
      double result = &texFormatASTC4x4RGBA_LP;
      break;
    case 204:
      double result = &texFormatASTC5x4RGBA_LP;
      break;
    case 205:
      double result = &texFormatASTC5x5RGBA_LP;
      break;
    case 206:
      double result = &texFormatASTC6x5RGBA_LP;
      break;
    case 207:
      double result = &texFormatASTC6x6RGBA_LP;
      break;
    case 208:
      double result = &texFormatASTC8x4RGBA_LP;
      break;
    case 209:
      double result = &texFormatASTC8x5RGBA_LP;
      break;
    case 210:
      double result = &texFormatASTC8x6RGBA_LP;
      break;
    case 211:
      double result = &texFormatASTC8x8RGBA_LP;
      break;
    case 212:
      double result = &texFormatASTC10x5RGBA_LP;
      break;
    case 213:
      double result = &texFormatASTC10x6RGBA_LP;
      break;
    case 214:
      double result = &texFormatASTC10x8RGBA_LP;
      break;
    case 215:
      double result = &texFormatASTC10x10RGBA_LP;
      break;
    case 216:
      double result = &texFormatASTC12x10RGBA_LP;
      break;
    case 217:
      double result = &texFormatASTC12x12RGBA_LP;
      break;
    case 220:
      double result = &texFormatASTC4x2RGBA;
      break;
    case 221:
      double result = &texFormatASTC4x4RGBA;
      break;
    case 222:
      double result = &texFormatASTC5x4RGBA;
      break;
    case 223:
      double result = &texFormatASTC5x5RGBA;
      break;
    case 224:
      double result = &texFormatASTC6x5RGBA;
      break;
    case 225:
      double result = &texFormatASTC6x6RGBA;
      break;
    case 226:
      double result = &texFormatASTC8x4RGBA;
      break;
    case 227:
      double result = &texFormatASTC8x5RGBA;
      break;
    case 228:
      double result = &texFormatASTC8x6RGBA;
      break;
    case 229:
      double result = &texFormatASTC8x8RGBA;
      break;
    case 230:
      double result = &texFormatASTC10x5RGBA;
      break;
    case 231:
      double result = &texFormatASTC10x6RGBA;
      break;
    case 232:
      double result = &texFormatASTC10x8RGBA;
      break;
    case 233:
      double result = &texFormatASTC10x10RGBA;
      break;
    case 234:
      double result = &texFormatASTC12x10RGBA;
      break;
    case 235:
      double result = &texFormatASTC12x12RGBA;
      break;
    case 239:
      double result = &texFormatYUY2_RGB;
      break;
    case 240:
      double result = &texFormatUYVY_RGB;
      break;
    case 249:
      double result = &texFormatD16;
      break;
    case 251:
      double result = &texFormatD32;
      break;
    case 252:
    case 260:
      double result = &texFormatS8;
      break;
    case 259:
      double result = &texFormatD32FS8_2PLANE;
      break;
    case 299:
      double result = &texFormatRGB8;
      break;
    case 300:
      double result = &texFormatsRGB8;
      break;
    case 301:
      double result = &texFormatRGB8_SNORM;
      break;
    case 302:
      double result = &texFormatRGB8UI;
      break;
    case 303:
      double result = &texFormatRGB8I;
      break;
    case 312:
      double result = &texFormatRGBX16UI;
      break;
    case 313:
      double result = &texFormatRGBX16I;
      break;
    case 314:
      double result = &texFormatRGBX16F;
      break;
    case 322:
      double result = &texFormatRGBX32UI;
      break;
    case 323:
      double result = &texFormatRGBX32I;
      break;
    case 324:
      double result = &texFormatRGBX32F;
      break;
    default:
      switch(&texFormatA8)
      {
        case 0x1F4u:
          double result = &texFormatYCBCR8_420_2PLANE;
          break;
        case 0x1F5u:
          double result = &texFormatYCBCR8_422_1PLANE;
          break;
        case 0x1F6u:
          double result = &texFormatYCBCR8_422_2PLANE;
          break;
        case 0x1F7u:
          double result = &texFormatYCBCR8_444_2PLANE;
          break;
        case 0x1F8u:
          double result = &texFormatYCBCR10_444_1PLANE;
          break;
        case 0x1F9u:
          double result = &texFormatYCBCR10_420_2PLANE;
          break;
        case 0x1FAu:
          double result = &texFormatYCBCR10_422_2PLANE;
          break;
        case 0x1FBu:
          double result = &texFormatYCBCR10_444_2PLANE;
          break;
        case 0x1FCu:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x1FDu:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x1FEu:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x208u:
          double result = &texFormatsYCBCR8_420_2PLANE;
          break;
        case 0x209u:
          double result = &texFormatsYCBCR8_422_1PLANE;
          break;
        case 0x20Au:
          double result = &texFormatsYCBCR8_422_2PLANE;
          break;
        case 0x20Bu:
          double result = &texFormatsYCBCR8_444_2PLANE;
          break;
        case 0x20Cu:
          double result = &texFormatsYCBCR10_444_1PLANE;
          break;
        case 0x20Du:
          double result = &texFormatsYCBCR10_420_2PLANE;
          break;
        case 0x20Eu:
          double result = &texFormatsYCBCR10_422_2PLANE;
          break;
        case 0x20Fu:
          double result = &texFormatsYCBCR10_444_2PLANE;
          break;
        case 0x210u:
          double result = &texFormatsYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x211u:
          double result = &texFormatsYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x212u:
          double result = &texFormatsYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x21Cu:
          double result = &texFormatRGB8_420_2PLANE;
          break;
        case 0x21Du:
          double result = &texFormatRGB8_422_2PLANE;
          break;
        case 0x21Eu:
          double result = &texFormatRGB8_444_2PLANE;
          break;
        case 0x21Fu:
          double result = &texFormatRGB10_420_2PLANE;
          break;
        case 0x220u:
          double result = &texFormatRGB10_422_2PLANE;
          break;
        case 0x221u:
          double result = &texFormatRGB10_444_2PLANE;
          break;
        case 0x222u:
          double result = &texFormatRGB10_420_2PLANE_PACKED;
          break;
        case 0x223u:
          double result = &texFormatRGB10_422_2PLANE_PACKED;
          break;
        case 0x224u:
          double result = &texFormatRGB10_444_2PLANE_PACKED;
          break;
        case 0x226u:
          double result = &texFormatXRRGB10_PLANE_A8_PLANE;
          break;
        case 0x227u:
          double result = &texFormatXRSRGB10_PLANE_A8_PLANE;
          break;
        case 0x228u:
          double result = &texFormatARGBV16_XR10;
          break;
        case 0x229u:
          double result = &texFormatsARGBV16_XR10;
          break;
        case 0x22Au:
          double result = &texFormatXRRGB10;
          break;
        case 0x22Bu:
          double result = &texFormatXRSRGB10;
          break;
        case 0x22Cu:
          double result = &texFormatRGBA16F_XR;
          break;
        case 0x230u:
          double result = &texFormatYCBCR8A8_444_1PLANE;
          break;
        case 0x232u:
          double result = &texFormatYCBCR8_422_1PLANE_REV;
          break;
        case 0x233u:
          double result = &texFormatpqYCBCR10_444_1PLANE;
          break;
        case 0x234u:
          double result = &texFormatpqYCBCR10_420_2PLANE;
          break;
        case 0x235u:
          double result = &texFormatpqYCBCR10_422_2PLANE;
          break;
        case 0x236u:
          double result = &texFormatpqYCBCR10_444_2PLANE;
          break;
        case 0x237u:
          double result = &texFormatpqYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x238u:
          double result = &texFormatpqYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x239u:
          double result = &texFormatpqYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x23Au:
          double result = &texFormatYCBCR12_420_2PLANE;
          break;
        case 0x23Bu:
          double result = &texFormatYCBCR12_422_2PLANE;
          break;
        case 0x23Cu:
          double result = &texFormatYCBCR12_444_2PLANE;
          break;
        case 0x23Du:
          double result = &texFormatpqYCBCR12_420_2PLANE;
          break;
        case 0x23Eu:
          double result = &texFormatpqYCBCR12_422_2PLANE;
          break;
        case 0x23Fu:
          double result = &texFormatpqYCBCR12_444_2PLANE;
          break;
        case 0x240u:
          double result = &texFormatR10X6F;
          break;
        case 0x241u:
          double result = &texFormatsR10X6F;
          break;
        case 0x242u:
          double result = &texFormatRG10X12F;
          break;
        case 0x243u:
          double result = &texFormatsRG10X12F;
          break;
        case 0x244u:
          double result = &texFormatYCBCR12_420_2PLANE_PACKED;
          break;
        case 0x245u:
          double result = &texFormatYCBCR12_422_2PLANE_PACKED;
          break;
        case 0x246u:
          double result = &texFormatYCBCR12_444_2PLANE_PACKED;
          break;
        case 0x247u:
          double result = &texFormatpqYCBCR12_420_2PLANE_PACKED;
          break;
        case 0x248u:
          double result = &texFormatpqYCBCR12_422_2PLANE_PACKED;
          break;
        case 0x249u:
          double result = &texFormatpqYCBCR12_444_2PLANE_PACKED;
          break;
        case 0x24Au:
          double result = &texFormatsRGB10_A2;
          break;
        case 0x24Bu:
          double result = &texFormatpqRGB10_A2;
          break;
        case 0x24Cu:
          double result = &texFormatR10_1PLANE_PACKED;
          break;
        case 0x24Du:
          double result = &texFormatRG10_1PLANE_PACKED;
          break;
        case 0x24Eu:
          double result = &texFormatYCBCR10_444_1PLANE_XR;
          break;
        case 0x24Fu:
          double result = &texFormatYCBCR10_420_2PLANE_XR;
          break;
        case 0x250u:
          double result = &texFormatYCBCR10_422_2PLANE_XR;
          break;
        case 0x251u:
          double result = &texFormatYCBCR10_444_2PLANE_XR;
          break;
        case 0x252u:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED_XR;
          break;
        case 0x253u:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED_XR;
          break;
        case 0x254u:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED_XR;
          break;
        case 0x255u:
          double result = &texFormatYCBCR12_420_2PLANE_XR;
          break;
        case 0x256u:
          double result = &texFormatYCBCR12_422_2PLANE_XR;
          break;
        case 0x257u:
          double result = &texFormatYCBCR12_444_2PLANE_XR;
          break;
        case 0x258u:
          double result = &texFormatYCBCR12_420_2PLANE_PACKED_XR;
          break;
        case 0x259u:
          double result = &texFormatYCBCR12_422_2PLANE_PACKED_XR;
          break;
        case 0x25Au:
          double result = &texFormatYCBCR12_444_2PLANE_PACKED_XR;
          break;
        case 0x25Bu:
          double result = &texFormatR12X4U;
          break;
        case 0x25Cu:
          double result = &texFormatpqR12X4U;
          break;
        case 0x25Du:
          double result = &texFormatRG12X8U;
          break;
        case 0x25Eu:
          double result = &texFormatpqR10X6U;
          break;
        default:
          goto LABEL_167;
      }
      break;
  }
  return result;
}

void *AGX::G5::TextureFormatTable::chooseTextureFormatCPP(AGX::G5::TextureFormatTable *this, MTLPixelFormat a2)
{
  int v2 = this - 1;
  double result = &texFormatA8;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 25:
    case 26:
    case 27:
    case 28:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 65:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 105:
    case 106:
    case 107:
    case 108:
    case 110:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 167:
    case 168:
    case 170:
    case 172:
    case 174:
    case 176:
    case 183:
    case 200:
    case 201:
    case 218:
    case 219:
    case 236:
    case 237:
    case 238:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 250:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
LABEL_150:
      double result = &texFormatUnsupported;
      break;
    case 9:
      double result = &texFormatR8;
      break;
    case 10:
      double result = &texFormatsR8;
      break;
    case 11:
      double result = &texFormatR8_SNORM;
      break;
    case 12:
      double result = &texFormatR8UI;
      break;
    case 13:
      double result = &texFormatR8I;
      break;
    case 19:
      double result = &texFormatR16;
      break;
    case 21:
      double result = &texFormatR16_SNORM;
      break;
    case 22:
      double result = &texFormatR16UI;
      break;
    case 23:
      double result = &texFormatR16I;
      break;
    case 24:
      double result = &texFormatR16F;
      break;
    case 29:
      double result = &texFormatRG8;
      break;
    case 30:
      double result = &texFormatsRG8;
      break;
    case 31:
      double result = &texFormatRG8_SNORM;
      break;
    case 32:
      double result = &texFormatRG8UI;
      break;
    case 33:
      double result = &texFormatRG8I;
      break;
    case 39:
      double result = &texFormatRGB565;
      break;
    case 40:
      double result = &texFormatRGB5A1;
      break;
    case 41:
      double result = &texFormatRGBA4;
      break;
    case 42:
      double result = &texFormatA1RGB5;
      break;
    case 43:
      double result = &texFormatBGRA4;
      break;
    case 52:
      double result = &texFormatR32UI;
      break;
    case 53:
      double result = &texFormatR32I;
      break;
    case 54:
      double result = &texFormatR32F;
      break;
    case 59:
      double result = &texFormatRG16;
      break;
    case 61:
      double result = &texFormatRG16_SNORM;
      break;
    case 62:
      double result = &texFormatRG16UI;
      break;
    case 63:
      double result = &texFormatRG16I;
      break;
    case 64:
      double result = &texFormatRG16F;
      break;
    case 69:
      double result = &texFormatRGBA8;
      break;
    case 70:
      double result = &texFormatsRGBA8;
      break;
    case 71:
      double result = &texFormatRGBA8_SNORM;
      break;
    case 72:
      double result = &texFormatRGBA8UI;
      break;
    case 73:
      double result = &texFormatRGBA8I;
      break;
    case 79:
      double result = &texFormatBGRA8;
      break;
    case 80:
      double result = &texFormatsBGRA8;
      break;
    case 83:
      double result = &texFormatARGB8;
      break;
    case 84:
      double result = &texFormatsARGB8;
      break;
    case 89:
      double result = &texFormatRGB10_A2;
      break;
    case 90:
      double result = &texFormatRGB10_A2UI;
      break;
    case 91:
      double result = &texFormatR11FG11FB10F;
      break;
    case 92:
      double result = &texFormatRGB9_E5;
      break;
    case 93:
      double result = &texFormatBGR10_A2;
      break;
    case 102:
      double result = &texFormatRG32UI;
      break;
    case 103:
      double result = &texFormatRG32I;
      break;
    case 104:
      double result = &texFormatRG32F;
      break;
    case 109:
      double result = &texFormatRGBA16;
      break;
    case 111:
      double result = &texFormatRGBA16_SNORM;
      break;
    case 112:
      double result = &texFormatRGBA16UI;
      break;
    case 113:
      double result = &texFormatRGBA16I;
      break;
    case 114:
      double result = &texFormatRGBA16F;
      break;
    case 122:
      double result = &texFormatRGBA32UI;
      break;
    case 123:
      double result = &texFormatRGBA32I;
      break;
    case 124:
      double result = &texFormatRGBA32F;
      break;
    case 159:
      double result = &texFormatPVRTC2RGB;
      break;
    case 160:
      double result = &texFormatPVRTC2sRGB;
      break;
    case 161:
      double result = &texFormatPVRTC4RGB;
      break;
    case 162:
      double result = &texFormatPVRTC4sRGB;
      break;
    case 163:
      double result = &texFormatPVRTC2RGBA;
      break;
    case 164:
      double result = &texFormatPVRTC2sRGBA;
      break;
    case 165:
      double result = &texFormatPVRTC4RGBA;
      break;
    case 166:
      double result = &texFormatPVRTC4sRGBA;
      break;
    case 169:
      double result = &texFormatR11EAC;
      break;
    case 171:
      double result = &texFormatR11EAC_SNORM;
      break;
    case 173:
      double result = &texFormatRG11EAC;
      break;
    case 175:
      double result = &texFormatRG11EAC_SNORM;
      break;
    case 177:
      double result = &texFormatETC2RGBA8;
      break;
    case 178:
      double result = &texFormatETC2sRGBA8;
      break;
    case 179:
      double result = &texFormatETC2RGB8;
      break;
    case 180:
      double result = &texFormatETC2sRGB8;
      break;
    case 181:
      double result = &texFormatETC2RGB8A1;
      break;
    case 182:
      double result = &texFormatETC2sRGB8A1;
      break;
    case 184:
      double result = &texFormatASTC4x2sRGBA_UNORM;
      break;
    case 185:
      double result = &texFormatASTC4x4sRGBA_UNORM;
      break;
    case 186:
      double result = &texFormatASTC5x4sRGBA_UNORM;
      break;
    case 187:
      double result = &texFormatASTC5x5sRGBA_UNORM;
      break;
    case 188:
      double result = &texFormatASTC6x5sRGBA_UNORM;
      break;
    case 189:
      double result = &texFormatASTC6x6sRGBA_UNORM;
      break;
    case 190:
      double result = &texFormatASTC8x4sRGBA_UNORM;
      break;
    case 191:
      double result = &texFormatASTC8x5sRGBA_UNORM;
      break;
    case 192:
      double result = &texFormatASTC8x6sRGBA_UNORM;
      break;
    case 193:
      double result = &texFormatASTC8x8sRGBA_UNORM;
      break;
    case 194:
      double result = &texFormatASTC10x5sRGBA_UNORM;
      break;
    case 195:
      double result = &texFormatASTC10x6sRGBA_UNORM;
      break;
    case 196:
      double result = &texFormatASTC10x8sRGBA_UNORM;
      break;
    case 197:
      double result = &texFormatASTC10x10sRGBA_UNORM;
      break;
    case 198:
      double result = &texFormatASTC12x10sRGBA_UNORM;
      break;
    case 199:
      double result = &texFormatASTC12x12sRGBA_UNORM;
      break;
    case 202:
      double result = &texFormatASTC4x2RGBA_LP;
      break;
    case 203:
      double result = &texFormatASTC4x4RGBA_LP;
      break;
    case 204:
      double result = &texFormatASTC5x4RGBA_LP;
      break;
    case 205:
      double result = &texFormatASTC5x5RGBA_LP;
      break;
    case 206:
      double result = &texFormatASTC6x5RGBA_LP;
      break;
    case 207:
      double result = &texFormatASTC6x6RGBA_LP;
      break;
    case 208:
      double result = &texFormatASTC8x4RGBA_LP;
      break;
    case 209:
      double result = &texFormatASTC8x5RGBA_LP;
      break;
    case 210:
      double result = &texFormatASTC8x6RGBA_LP;
      break;
    case 211:
      double result = &texFormatASTC8x8RGBA_LP;
      break;
    case 212:
      double result = &texFormatASTC10x5RGBA_LP;
      break;
    case 213:
      double result = &texFormatASTC10x6RGBA_LP;
      break;
    case 214:
      double result = &texFormatASTC10x8RGBA_LP;
      break;
    case 215:
      double result = &texFormatASTC10x10RGBA_LP;
      break;
    case 216:
      double result = &texFormatASTC12x10RGBA_LP;
      break;
    case 217:
      double result = &texFormatASTC12x12RGBA_LP;
      break;
    case 220:
      double result = &texFormatASTC4x2RGBA;
      break;
    case 221:
      double result = &texFormatASTC4x4RGBA;
      break;
    case 222:
      double result = &texFormatASTC5x4RGBA;
      break;
    case 223:
      double result = &texFormatASTC5x5RGBA;
      break;
    case 224:
      double result = &texFormatASTC6x5RGBA;
      break;
    case 225:
      double result = &texFormatASTC6x6RGBA;
      break;
    case 226:
      double result = &texFormatASTC8x4RGBA;
      break;
    case 227:
      double result = &texFormatASTC8x5RGBA;
      break;
    case 228:
      double result = &texFormatASTC8x6RGBA;
      break;
    case 229:
      double result = &texFormatASTC8x8RGBA;
      break;
    case 230:
      double result = &texFormatASTC10x5RGBA;
      break;
    case 231:
      double result = &texFormatASTC10x6RGBA;
      break;
    case 232:
      double result = &texFormatASTC10x8RGBA;
      break;
    case 233:
      double result = &texFormatASTC10x10RGBA;
      break;
    case 234:
      double result = &texFormatASTC12x10RGBA;
      break;
    case 235:
      double result = &texFormatASTC12x12RGBA;
      break;
    case 239:
      double result = &texFormatYUY2_RGB;
      break;
    case 240:
      double result = &texFormatUYVY_RGB;
      break;
    case 249:
      double result = &texFormatD16;
      break;
    case 251:
      double result = &texFormatD32;
      break;
    case 252:
    case 260:
      double result = &texFormatS8;
      break;
    case 259:
      double result = &texFormatD32FS8_2PLANE;
      break;
    case 299:
      double result = &texFormatRGB8;
      break;
    case 300:
      double result = &texFormatsRGB8;
      break;
    case 301:
      double result = &texFormatRGB8_SNORM;
      break;
    case 302:
      double result = &texFormatRGB8UI;
      break;
    case 303:
      double result = &texFormatRGB8I;
      break;
    case 312:
      double result = &texFormatRGBX16UI;
      break;
    case 313:
      double result = &texFormatRGBX16I;
      break;
    case 314:
      double result = &texFormatRGBX16F;
      break;
    case 322:
      double result = &texFormatRGBX32UI;
      break;
    case 323:
      double result = &texFormatRGBX32I;
      break;
    case 324:
      double result = &texFormatRGBX32F;
      break;
    default:
      switch(&texFormatA8)
      {
        case 0x1F4u:
          double result = &texFormatYCBCR8_420_2PLANE;
          break;
        case 0x1F5u:
          double result = &texFormatYCBCR8_422_1PLANE;
          break;
        case 0x1F6u:
          double result = &texFormatYCBCR8_422_2PLANE;
          break;
        case 0x1F7u:
          double result = &texFormatYCBCR8_444_2PLANE;
          break;
        case 0x1F8u:
          double result = &texFormatYCBCR10_444_1PLANE;
          break;
        case 0x1F9u:
          double result = &texFormatYCBCR10_420_2PLANE;
          break;
        case 0x1FAu:
          double result = &texFormatYCBCR10_422_2PLANE;
          break;
        case 0x1FBu:
          double result = &texFormatYCBCR10_444_2PLANE;
          break;
        case 0x1FCu:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x1FDu:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x1FEu:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x208u:
          double result = &texFormatsYCBCR8_420_2PLANE;
          break;
        case 0x209u:
          double result = &texFormatsYCBCR8_422_1PLANE;
          break;
        case 0x20Au:
          double result = &texFormatsYCBCR8_422_2PLANE;
          break;
        case 0x20Bu:
          double result = &texFormatsYCBCR8_444_2PLANE;
          break;
        case 0x20Cu:
          double result = &texFormatsYCBCR10_444_1PLANE;
          break;
        case 0x20Du:
          double result = &texFormatsYCBCR10_420_2PLANE;
          break;
        case 0x20Eu:
          double result = &texFormatsYCBCR10_422_2PLANE;
          break;
        case 0x20Fu:
          double result = &texFormatsYCBCR10_444_2PLANE;
          break;
        case 0x210u:
          double result = &texFormatsYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x211u:
          double result = &texFormatsYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x212u:
          double result = &texFormatsYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x21Cu:
          double result = &texFormatRGB8_420_2PLANE;
          break;
        case 0x21Du:
          double result = &texFormatRGB8_422_2PLANE;
          break;
        case 0x21Eu:
          double result = &texFormatRGB8_444_2PLANE;
          break;
        case 0x21Fu:
          double result = &texFormatRGB10_420_2PLANE;
          break;
        case 0x220u:
          double result = &texFormatRGB10_422_2PLANE;
          break;
        case 0x221u:
          double result = &texFormatRGB10_444_2PLANE;
          break;
        case 0x222u:
          double result = &texFormatRGB10_420_2PLANE_PACKED;
          break;
        case 0x223u:
          double result = &texFormatRGB10_422_2PLANE_PACKED;
          break;
        case 0x224u:
          double result = &texFormatRGB10_444_2PLANE_PACKED;
          break;
        case 0x226u:
          double result = &texFormatXRRGB10_PLANE_A8_PLANE;
          break;
        case 0x227u:
          double result = &texFormatXRSRGB10_PLANE_A8_PLANE;
          break;
        case 0x228u:
          double result = &texFormatARGBV16_XR10;
          break;
        case 0x229u:
          double result = &texFormatsARGBV16_XR10;
          break;
        case 0x22Au:
          double result = &texFormatXRRGB10;
          break;
        case 0x22Bu:
          double result = &texFormatXRSRGB10;
          break;
        case 0x232u:
          double result = &texFormatYCBCR8_422_1PLANE_REV;
          break;
        case 0x24Cu:
          double result = &texFormatR10_1PLANE_PACKED;
          break;
        case 0x24Du:
          double result = &texFormatRG10_1PLANE_PACKED;
          break;
        default:
          goto LABEL_150;
      }
      break;
  }
  return result;
}

void *AGX::G9::TextureFormatTable::chooseTextureFormatCPP(AGX::G9::TextureFormatTable *this, MTLPixelFormat a2)
{
  int v2 = this - 1;
  double result = &texFormatA8;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 25:
    case 26:
    case 27:
    case 28:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 65:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 105:
    case 106:
    case 107:
    case 108:
    case 110:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 167:
    case 168:
    case 170:
    case 172:
    case 174:
    case 176:
    case 183:
    case 200:
    case 201:
    case 218:
    case 219:
    case 236:
    case 237:
    case 238:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 250:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
LABEL_150:
      double result = &texFormatUnsupported;
      break;
    case 9:
      double result = &texFormatR8;
      break;
    case 10:
      double result = &texFormatsR8;
      break;
    case 11:
      double result = &texFormatR8_SNORM;
      break;
    case 12:
      double result = &texFormatR8UI;
      break;
    case 13:
      double result = &texFormatR8I;
      break;
    case 19:
      double result = &texFormatR16;
      break;
    case 21:
      double result = &texFormatR16_SNORM;
      break;
    case 22:
      double result = &texFormatR16UI;
      break;
    case 23:
      double result = &texFormatR16I;
      break;
    case 24:
      double result = &texFormatR16F;
      break;
    case 29:
      double result = &texFormatRG8;
      break;
    case 30:
      double result = &texFormatsRG8;
      break;
    case 31:
      double result = &texFormatRG8_SNORM;
      break;
    case 32:
      double result = &texFormatRG8UI;
      break;
    case 33:
      double result = &texFormatRG8I;
      break;
    case 39:
      double result = &texFormatRGB565;
      break;
    case 40:
      double result = &texFormatRGB5A1;
      break;
    case 41:
      double result = &texFormatRGBA4;
      break;
    case 42:
      double result = &texFormatA1RGB5;
      break;
    case 43:
      double result = &texFormatBGRA4;
      break;
    case 52:
      double result = &texFormatR32UI;
      break;
    case 53:
      double result = &texFormatR32I;
      break;
    case 54:
      double result = &texFormatR32F;
      break;
    case 59:
      double result = &texFormatRG16;
      break;
    case 61:
      double result = &texFormatRG16_SNORM;
      break;
    case 62:
      double result = &texFormatRG16UI;
      break;
    case 63:
      double result = &texFormatRG16I;
      break;
    case 64:
      double result = &texFormatRG16F;
      break;
    case 69:
      double result = &texFormatRGBA8;
      break;
    case 70:
      double result = &texFormatsRGBA8;
      break;
    case 71:
      double result = &texFormatRGBA8_SNORM;
      break;
    case 72:
      double result = &texFormatRGBA8UI;
      break;
    case 73:
      double result = &texFormatRGBA8I;
      break;
    case 79:
      double result = &texFormatBGRA8;
      break;
    case 80:
      double result = &texFormatsBGRA8;
      break;
    case 83:
      double result = &texFormatARGB8;
      break;
    case 84:
      double result = &texFormatsARGB8;
      break;
    case 89:
      double result = &texFormatRGB10_A2;
      break;
    case 90:
      double result = &texFormatRGB10_A2UI;
      break;
    case 91:
      double result = &texFormatR11FG11FB10F;
      break;
    case 92:
      double result = &texFormatRGB9_E5;
      break;
    case 93:
      double result = &texFormatBGR10_A2;
      break;
    case 102:
      double result = &texFormatRG32UI;
      break;
    case 103:
      double result = &texFormatRG32I;
      break;
    case 104:
      double result = &texFormatRG32F;
      break;
    case 109:
      double result = &texFormatRGBA16;
      break;
    case 111:
      double result = &texFormatRGBA16_SNORM;
      break;
    case 112:
      double result = &texFormatRGBA16UI;
      break;
    case 113:
      double result = &texFormatRGBA16I;
      break;
    case 114:
      double result = &texFormatRGBA16F;
      break;
    case 122:
      double result = &texFormatRGBA32UI;
      break;
    case 123:
      double result = &texFormatRGBA32I;
      break;
    case 124:
      double result = &texFormatRGBA32F;
      break;
    case 159:
      double result = &texFormatPVRTC2RGB;
      break;
    case 160:
      double result = &texFormatPVRTC2sRGB;
      break;
    case 161:
      double result = &texFormatPVRTC4RGB;
      break;
    case 162:
      double result = &texFormatPVRTC4sRGB;
      break;
    case 163:
      double result = &texFormatPVRTC2RGBA;
      break;
    case 164:
      double result = &texFormatPVRTC2sRGBA;
      break;
    case 165:
      double result = &texFormatPVRTC4RGBA;
      break;
    case 166:
      double result = &texFormatPVRTC4sRGBA;
      break;
    case 169:
      double result = &texFormatR11EAC;
      break;
    case 171:
      double result = &texFormatR11EAC_SNORM;
      break;
    case 173:
      double result = &texFormatRG11EAC;
      break;
    case 175:
      double result = &texFormatRG11EAC_SNORM;
      break;
    case 177:
      double result = &texFormatETC2RGBA8;
      break;
    case 178:
      double result = &texFormatETC2sRGBA8;
      break;
    case 179:
      double result = &texFormatETC2RGB8;
      break;
    case 180:
      double result = &texFormatETC2sRGB8;
      break;
    case 181:
      double result = &texFormatETC2RGB8A1;
      break;
    case 182:
      double result = &texFormatETC2sRGB8A1;
      break;
    case 184:
      double result = &texFormatASTC4x2sRGBA_UNORM;
      break;
    case 185:
      double result = &texFormatASTC4x4sRGBA_UNORM;
      break;
    case 186:
      double result = &texFormatASTC5x4sRGBA_UNORM;
      break;
    case 187:
      double result = &texFormatASTC5x5sRGBA_UNORM;
      break;
    case 188:
      double result = &texFormatASTC6x5sRGBA_UNORM;
      break;
    case 189:
      double result = &texFormatASTC6x6sRGBA_UNORM;
      break;
    case 190:
      double result = &texFormatASTC8x4sRGBA_UNORM;
      break;
    case 191:
      double result = &texFormatASTC8x5sRGBA_UNORM;
      break;
    case 192:
      double result = &texFormatASTC8x6sRGBA_UNORM;
      break;
    case 193:
      double result = &texFormatASTC8x8sRGBA_UNORM;
      break;
    case 194:
      double result = &texFormatASTC10x5sRGBA_UNORM;
      break;
    case 195:
      double result = &texFormatASTC10x6sRGBA_UNORM;
      break;
    case 196:
      double result = &texFormatASTC10x8sRGBA_UNORM;
      break;
    case 197:
      double result = &texFormatASTC10x10sRGBA_UNORM;
      break;
    case 198:
      double result = &texFormatASTC12x10sRGBA_UNORM;
      break;
    case 199:
      double result = &texFormatASTC12x12sRGBA_UNORM;
      break;
    case 202:
      double result = &texFormatASTC4x2RGBA_LP;
      break;
    case 203:
      double result = &texFormatASTC4x4RGBA_LP;
      break;
    case 204:
      double result = &texFormatASTC5x4RGBA_LP;
      break;
    case 205:
      double result = &texFormatASTC5x5RGBA_LP;
      break;
    case 206:
      double result = &texFormatASTC6x5RGBA_LP;
      break;
    case 207:
      double result = &texFormatASTC6x6RGBA_LP;
      break;
    case 208:
      double result = &texFormatASTC8x4RGBA_LP;
      break;
    case 209:
      double result = &texFormatASTC8x5RGBA_LP;
      break;
    case 210:
      double result = &texFormatASTC8x6RGBA_LP;
      break;
    case 211:
      double result = &texFormatASTC8x8RGBA_LP;
      break;
    case 212:
      double result = &texFormatASTC10x5RGBA_LP;
      break;
    case 213:
      double result = &texFormatASTC10x6RGBA_LP;
      break;
    case 214:
      double result = &texFormatASTC10x8RGBA_LP;
      break;
    case 215:
      double result = &texFormatASTC10x10RGBA_LP;
      break;
    case 216:
      double result = &texFormatASTC12x10RGBA_LP;
      break;
    case 217:
      double result = &texFormatASTC12x12RGBA_LP;
      break;
    case 220:
      double result = &texFormatASTC4x2RGBA;
      break;
    case 221:
      double result = &texFormatASTC4x4RGBA;
      break;
    case 222:
      double result = &texFormatASTC5x4RGBA;
      break;
    case 223:
      double result = &texFormatASTC5x5RGBA;
      break;
    case 224:
      double result = &texFormatASTC6x5RGBA;
      break;
    case 225:
      double result = &texFormatASTC6x6RGBA;
      break;
    case 226:
      double result = &texFormatASTC8x4RGBA;
      break;
    case 227:
      double result = &texFormatASTC8x5RGBA;
      break;
    case 228:
      double result = &texFormatASTC8x6RGBA;
      break;
    case 229:
      double result = &texFormatASTC8x8RGBA;
      break;
    case 230:
      double result = &texFormatASTC10x5RGBA;
      break;
    case 231:
      double result = &texFormatASTC10x6RGBA;
      break;
    case 232:
      double result = &texFormatASTC10x8RGBA;
      break;
    case 233:
      double result = &texFormatASTC10x10RGBA;
      break;
    case 234:
      double result = &texFormatASTC12x10RGBA;
      break;
    case 235:
      double result = &texFormatASTC12x12RGBA;
      break;
    case 239:
      double result = &texFormatYUY2_RGB;
      break;
    case 240:
      double result = &texFormatUYVY_RGB;
      break;
    case 249:
      double result = &texFormatD16;
      break;
    case 251:
      double result = &texFormatD32;
      break;
    case 252:
    case 260:
      double result = &texFormatS8;
      break;
    case 259:
      double result = &texFormatD32FS8_2PLANE;
      break;
    case 299:
      double result = &texFormatRGB8;
      break;
    case 300:
      double result = &texFormatsRGB8;
      break;
    case 301:
      double result = &texFormatRGB8_SNORM;
      break;
    case 302:
      double result = &texFormatRGB8UI;
      break;
    case 303:
      double result = &texFormatRGB8I;
      break;
    case 312:
      double result = &texFormatRGBX16UI;
      break;
    case 313:
      double result = &texFormatRGBX16I;
      break;
    case 314:
      double result = &texFormatRGBX16F;
      break;
    case 322:
      double result = &texFormatRGBX32UI;
      break;
    case 323:
      double result = &texFormatRGBX32I;
      break;
    case 324:
      double result = &texFormatRGBX32F;
      break;
    default:
      switch(&texFormatA8)
      {
        case 0x1F4u:
          double result = &texFormatYCBCR8_420_2PLANE;
          break;
        case 0x1F5u:
          double result = &texFormatYCBCR8_422_1PLANE;
          break;
        case 0x1F6u:
          double result = &texFormatYCBCR8_422_2PLANE;
          break;
        case 0x1F7u:
          double result = &texFormatYCBCR8_444_2PLANE;
          break;
        case 0x1F8u:
          double result = &texFormatYCBCR10_444_1PLANE;
          break;
        case 0x1F9u:
          double result = &texFormatYCBCR10_420_2PLANE;
          break;
        case 0x1FAu:
          double result = &texFormatYCBCR10_422_2PLANE;
          break;
        case 0x1FBu:
          double result = &texFormatYCBCR10_444_2PLANE;
          break;
        case 0x1FCu:
          double result = &texFormatYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x1FDu:
          double result = &texFormatYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x1FEu:
          double result = &texFormatYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x208u:
          double result = &texFormatsYCBCR8_420_2PLANE;
          break;
        case 0x209u:
          double result = &texFormatsYCBCR8_422_1PLANE;
          break;
        case 0x20Au:
          double result = &texFormatsYCBCR8_422_2PLANE;
          break;
        case 0x20Bu:
          double result = &texFormatsYCBCR8_444_2PLANE;
          break;
        case 0x20Cu:
          double result = &texFormatsYCBCR10_444_1PLANE;
          break;
        case 0x20Du:
          double result = &texFormatsYCBCR10_420_2PLANE;
          break;
        case 0x20Eu:
          double result = &texFormatsYCBCR10_422_2PLANE;
          break;
        case 0x20Fu:
          double result = &texFormatsYCBCR10_444_2PLANE;
          break;
        case 0x210u:
          double result = &texFormatsYCBCR10_420_2PLANE_PACKED;
          break;
        case 0x211u:
          double result = &texFormatsYCBCR10_422_2PLANE_PACKED;
          break;
        case 0x212u:
          double result = &texFormatsYCBCR10_444_2PLANE_PACKED;
          break;
        case 0x21Cu:
          double result = &texFormatRGB8_420_2PLANE;
          break;
        case 0x21Du:
          double result = &texFormatRGB8_422_2PLANE;
          break;
        case 0x21Eu:
          double result = &texFormatRGB8_444_2PLANE;
          break;
        case 0x21Fu:
          double result = &texFormatRGB10_420_2PLANE;
          break;
        case 0x220u:
          double result = &texFormatRGB10_422_2PLANE;
          break;
        case 0x221u:
          double result = &texFormatRGB10_444_2PLANE;
          break;
        case 0x222u:
          double result = &texFormatRGB10_420_2PLANE_PACKED;
          break;
        case 0x223u:
          double result = &texFormatRGB10_422_2PLANE_PACKED;
          break;
        case 0x224u:
          double result = &texFormatRGB10_444_2PLANE_PACKED;
          break;
        case 0x226u:
          double result = &texFormatXRRGB10_PLANE_A8_PLANE;
          break;
        case 0x227u:
          double result = &texFormatXRSRGB10_PLANE_A8_PLANE;
          break;
        case 0x228u:
          double result = &texFormatARGBV16_XR10;
          break;
        case 0x229u:
          double result = &texFormatsARGBV16_XR10;
          break;
        case 0x22Au:
          double result = &texFormatXRRGB10;
          break;
        case 0x22Bu:
          double result = &texFormatXRSRGB10;
          break;
        case 0x232u:
          double result = &texFormatYCBCR8_422_1PLANE_REV;
          break;
        case 0x24Cu:
          double result = &texFormatR10_1PLANE_PACKED;
          break;
        case 0x24Du:
          double result = &texFormatRG10_1PLANE_PACKED;
          break;
        default:
          goto LABEL_150;
      }
      break;
  }
  return result;
}

void *AGX::Impl::VertexProgramKey::addToSerializeStream(void *this)
{
  uint64_t v1 = this;
  int v2 = this + 18;
  if (*((char *)this + 167) < 0)
  {
    size_t v3 = this[19];
    if (!v3) {
      goto LABEL_7;
    }
    int v2 = (void *)*v2;
    goto LABEL_6;
  }
  size_t v3 = *((unsigned __int8 *)this + 167);
  if (*((unsigned char *)this + 167)) {
LABEL_6:
  }
    this = ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::addTokenToStream((uint64_t)this, 0x4Bu, v2, v3);
LABEL_7:
  long long v4 = v1 + 21;
  if (*((char *)v1 + 191) < 0)
  {
    size_t v5 = v1[22];
    if (!v5) {
      return this;
    }
    long long v4 = (void *)*v4;
  }
  else
  {
    size_t v5 = *((unsigned __int8 *)v1 + 191);
    if (!*((unsigned char *)v1 + 191)) {
      return this;
    }
  }
  return ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::addTokenToStream((uint64_t)v1, 0x4Cu, v4, v5);
}

void *ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::addTokenToStream(uint64_t a1, unsigned __int8 a2, const void *a3, size_t a4)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 16), ((((a4 + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL) + (v8 >> 2));
  unsigned int v9 = (unsigned int *)(*(void *)v7 + v8);
  *unsigned int v9 = a2 | ((*(_DWORD *)(v7 + 8) - *(void *)v7) >> 2 << 8);
  uint64_t v10 = v9 + 1;
  return memcpy(v10, a3, a4);
}

uint64_t AGX::Impl::VertexProgramKey::addToDigest(AGX::Impl::VertexProgramKey *this, CC_SHA256state_st *a2)
{
  uint64_t result = AGX::defaultVertexDescriptor(this);
  size_t v5 = (int *)result;
  unint64_t v6 = *((void *)this + 7);
  uint64_t v7 = *(int *)result;
  unsigned int v8 = *(unsigned __int16 *)(result - v7);
  if (v8 < 0x15)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v9 = *(unsigned __int16 *)(result - v7 + 20);
    if (*(_WORD *)(result - v7 + 20)) {
      LODWORD(v9) = *(unsigned __int8 *)(result + v9);
    }
  }
  if (((v6 >> 10) & 3) == v9)
  {
    uint64_t v10 = -v7;
  }
  else
  {
    uint64_t v38 = (v6 >> 10) & 3;
    __int16 data = 20;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v38, 8u);
    unint64_t v6 = *((void *)this + 7);
    uint64_t v11 = *v5;
    uint64_t v10 = -v11;
    unsigned int v8 = *(unsigned __int16 *)((char *)v5 - v11);
  }
  if (v8 < 0x19)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v12 = *(unsigned __int16 *)((char *)v5 + v10 + 24);
    if (*(_WORD *)((char *)v5 + v10 + 24)) {
      LODWORD(v12) = *((unsigned __int8 *)v5 + v12);
    }
  }
  if (((v6 >> 8) & 3) != v12)
  {
    uint64_t v38 = (v6 >> 8) & 3;
    __int16 data = 24;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v38, 8u);
  }
  if (*((void *)this + 5))
  {
    LOWORD(v38) = 30;
    CC_SHA256_Update(a2, &v38, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 40, 8u);
  }
  uint64_t v13 = *v5;
  uint64_t v14 = -v13;
  int v15 = (char *)v5 - v13;
  unsigned int v16 = *(unsigned __int16 *)((char *)v5 - v13);
  if (v16 >= 0x21 && (uint64_t v17 = *((unsigned __int16 *)v15 + 16)) != 0)
  {
    int v18 = *((_DWORD *)this + 22) & 1;
    if ((v18 == 0) != (*((unsigned char *)v5 + v17) != 0))
    {
      unint64_t v19 = *((void *)this + 7);
      unsigned int v20 = (v19 >> 12) & 3;
      goto LABEL_24;
    }
  }
  else
  {
    if ((*((_DWORD *)this + 22) & 1) == 0) {
      goto LABEL_23;
    }
    int v18 = 1;
  }
  LODWORD(v38) = v18;
  __int16 data = 32;
  CC_SHA256_Update(a2, &data, 2u);
  uint64_t result = CC_SHA256_Update(a2, &v38, 4u);
  uint64_t v21 = *v5;
  uint64_t v14 = -v21;
  unsigned int v16 = *(unsigned __int16 *)((char *)v5 - v21);
LABEL_23:
  unint64_t v19 = *((void *)this + 7);
  unsigned int v20 = (v19 >> 12) & 3;
  if (v16 < 0x1D)
  {
    LODWORD(v22) = 0;
    goto LABEL_27;
  }
LABEL_24:
  uint64_t v22 = *(unsigned __int16 *)((char *)v5 + v14 + 28);
  if (*(_WORD *)((char *)v5 + v14 + 28)) {
    LODWORD(v22) = *((unsigned __int8 *)v5 + v22);
  }
LABEL_27:
  if (v20 != v22)
  {
    uint64_t v38 = (v19 >> 12) & 3;
    __int16 data = 28;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v38, 8u);
    unint64_t v19 = *((void *)this + 7);
    uint64_t v23 = *v5;
    uint64_t v14 = -v23;
    unsigned int v16 = *(unsigned __int16 *)((char *)v5 - v23);
  }
  if (v16 >= 0x1B && *(_WORD *)((char *)v5 + v14 + 26)) {
    uint64_t v24 = *(void *)((char *)v5 + *(unsigned __int16 *)((char *)v5 + v14 + 26));
  }
  else {
    uint64_t v24 = 1;
  }
  if (((v19 >> 14) & 0xF) != v24)
  {
    uint64_t v38 = (v19 >> 14) & 0xF;
    __int16 data = 26;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v38, 8u);
    unint64_t v19 = *((void *)this + 7);
    uint64_t v25 = *v5;
    uint64_t v14 = -v25;
    unsigned int v16 = *(unsigned __int16 *)((char *)v5 - v25);
  }
  if (v16 >= 0x2B && *(_WORD *)((char *)v5 + v14 + 42))
  {
    if (((v19 & 0x80000) == 0) != (*((unsigned char *)v5 + *(unsigned __int16 *)((char *)v5 + v14 + 42)) != 0))
    {
      unsigned int v26 = (v19 >> 20) & 1;
      goto LABEL_42;
    }
  }
  else if ((v19 & 0x80000) == 0)
  {
    goto LABEL_41;
  }
  uint64_t v38 = (v19 >> 19) & 1;
  __int16 data = 42;
  CC_SHA256_Update(a2, &data, 2u);
  uint64_t result = CC_SHA256_Update(a2, &v38, 8u);
  unint64_t v19 = *((void *)this + 7);
  uint64_t v27 = *v5;
  uint64_t v14 = -v27;
  unsigned int v16 = *(unsigned __int16 *)((char *)v5 - v27);
LABEL_41:
  unsigned int v26 = (v19 >> 20) & 1;
  if (v16 < 9) {
    goto LABEL_49;
  }
LABEL_42:
  char v28 = (char *)v5 + v14;
  if (*(_WORD *)((char *)v5 + v14 + 8))
  {
    LODWORD(v29) = 0;
    if (v16 < 0xB || !*((unsigned char *)v5 + *(unsigned __int16 *)((char *)v5 + v14 + 8))) {
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  if (v16 < 0xB)
  {
LABEL_49:
    LODWORD(v29) = 0;
    goto LABEL_50;
  }
LABEL_47:
  uint64_t v29 = *((unsigned __int16 *)v28 + 5);
  if (*((_WORD *)v28 + 5)) {
    LODWORD(v29) = *((unsigned __int8 *)v5 + v29) == 1;
  }
LABEL_50:
  if (v26 != v29)
  {
    uint64_t v38 = (v19 >> 20) & 1;
    __int16 data = 8;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v38, 8u);
    unint64_t v19 = *((void *)this + 7);
    uint64_t v30 = *v5;
    uint64_t v14 = -v30;
    unsigned int v16 = *(unsigned __int16 *)((char *)v5 - v30);
  }
  if (v16 < 0x11)
  {
    LODWORD(v31) = 0;
  }
  else
  {
    uint64_t v31 = *(unsigned __int16 *)((char *)v5 + v14 + 16);
    if (*(_WORD *)((char *)v5 + v14 + 16)) {
      LODWORD(v31) = *((unsigned __int8 *)v5 + v31);
    }
  }
  if (((v19 >> 22) & 1) != v31)
  {
    uint64_t v38 = (v19 >> 22) & 1;
    __int16 data = 16;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v38, 8u);
    unint64_t v19 = *((void *)this + 7);
    uint64_t v32 = *v5;
    uint64_t v14 = -v32;
    unsigned int v16 = *(unsigned __int16 *)((char *)v5 - v32);
  }
  if (v16 < 0x23 || (uint64_t v33 = *(unsigned __int16 *)((char *)v5 + v14 + 34)) == 0)
  {
    if ((v19 & 0x2000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (((v19 & 0x2000000) == 0) == (*((unsigned char *)v5 + v33) != 0))
  {
LABEL_63:
    uint64_t v38 = (v19 >> 25) & 1;
    __int16 data = 34;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v38, 8u);
  }
LABEL_64:
  int v34 = (void *)((char *)this + 144);
  if (*((char *)this + 167) < 0)
  {
    uint64_t v35 = *((void *)this + 19);
    if (!v35) {
      goto LABEL_70;
    }
    int v34 = (void *)*v34;
    goto LABEL_69;
  }
  LODWORD(v35) = *((unsigned __int8 *)this + 167);
  if (*((unsigned char *)this + 167)) {
LABEL_69:
  }
    uint64_t result = CC_SHA256_Update(a2, v34, v35);
LABEL_70:
  long long v36 = (void *)((char *)this + 168);
  if (*((char *)this + 191) < 0)
  {
    uint64_t v37 = *((void *)this + 22);
    if (!v37) {
      return result;
    }
    long long v36 = (void *)*v36;
    return CC_SHA256_Update(a2, v36, v37);
  }
  LODWORD(v37) = *((unsigned __int8 *)this + 191);
  if (*((unsigned char *)this + 191)) {
    return CC_SHA256_Update(a2, v36, v37);
  }
  return result;
}

uint64_t AGX::defaultVertexDescriptor(AGX *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&AGX::defaultVertexDescriptor(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    size_t v3 = &v4;
    std::__call_once(&AGX::defaultVertexDescriptor(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultVertexDescriptor(void)::$_0 &&>>);
  }
  return AGX::defaultVertexDescriptor(void)::_desc;
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultVertexDescriptor(void)::$_0 &&>>()
{
}

void *AGX::Impl::MeshProgramKey::addToSerializeStream(void *this)
{
  uint64_t v1 = this;
  char v2 = this + 19;
  if (*((char *)this + 175) < 0)
  {
    size_t v3 = this[20];
    if (!v3) {
      goto LABEL_7;
    }
    char v2 = (void *)*v2;
    goto LABEL_6;
  }
  size_t v3 = *((unsigned __int8 *)this + 175);
  if (*((unsigned char *)this + 175)) {
LABEL_6:
  }
    this = ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::addTokenToStream((uint64_t)this, 0x4Bu, v2, v3);
LABEL_7:
  long long v4 = v1 + 22;
  if (*((char *)v1 + 199) < 0)
  {
    size_t v5 = v1[23];
    if (!v5) {
      return this;
    }
    long long v4 = (void *)*v4;
  }
  else
  {
    size_t v5 = *((unsigned __int8 *)v1 + 199);
    if (!*((unsigned char *)v1 + 199)) {
      return this;
    }
  }
  return ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::addTokenToStream((uint64_t)v1, 0x4Cu, v4, v5);
}

uint64_t AGX::Impl::MeshProgramKey::addToDigest(AGX::Impl::MeshProgramKey *this, CC_SHA256state_st *a2)
{
  long long v4 = (int *)AGX::defaultMeshDescriptor(this);
  uint64_t result = (*(uint64_t (**)(AGX::Impl::MeshProgramKey *))(*(void *)this + 40))(this);
  uint64_t v6 = *v4;
  uint64_t v7 = -v6;
  unsigned int v8 = (char *)v4 - v6;
  unsigned int v9 = *(unsigned __int16 *)((char *)v4 - v6);
  if (v9 >= 0x15)
  {
    uint64_t v10 = *((unsigned __int16 *)v8 + 10);
    if (v10)
    {
      if (result == (*((unsigned char *)v4 + v10) != 0)) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  if (result)
  {
LABEL_6:
    LOBYTE(v33) = (*(uint64_t (**)(AGX::Impl::MeshProgramKey *))(*(void *)this + 40))(this);
    LOWORD(data) = 20;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v33, 1u);
    uint64_t v11 = *v4;
    uint64_t v7 = -v11;
    unsigned int v9 = *(unsigned __int16 *)((char *)v4 - v11);
  }
LABEL_7:
  unsigned int v12 = *((_DWORD *)this + 13);
  if (v9 < 0x17 || (uint64_t v13 = *(unsigned __int16 *)((char *)v4 + v7 + 22)) == 0)
  {
    if ((v12 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (((*((_DWORD *)this + 13) & 0x200) == 0) == (*((unsigned char *)v4 + v13) != 0))
  {
LABEL_12:
    int data = (v12 >> 9) & 1;
    __int16 v33 = 22;
    CC_SHA256_Update(a2, &v33, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
  }
LABEL_13:
  if (*((void *)this + 5))
  {
    LOWORD(data) = 18;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 40, 8u);
  }
  unsigned int v14 = *((_DWORD *)this + 14);
  uint64_t v15 = *v4;
  uint64_t v16 = -v15;
  uint64_t v17 = (char *)v4 - v15;
  unsigned int v18 = *(unsigned __int16 *)((char *)v4 - v15);
  if (v18 < 0x1D || (uint64_t v19 = *((unsigned __int16 *)v17 + 14)) == 0)
  {
    if ((v14 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (((*((_DWORD *)this + 14) & 0x20) == 0) == (*((unsigned char *)v4 + v19) != 0))
  {
LABEL_20:
    int data = (v14 >> 5) & 1;
    __int16 v33 = 28;
    CC_SHA256_Update(a2, &v33, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
    unsigned int v14 = *((_DWORD *)this + 14);
    uint64_t v21 = *v4;
    uint64_t v16 = -v21;
    unsigned int v18 = *(unsigned __int16 *)((char *)v4 - v21);
LABEL_21:
    uint64_t v20 = v14 & 0xF;
    if (v18 < 0xF) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  uint64_t v20 = v14 & 0xF;
LABEL_22:
  if (*(_WORD *)((char *)v4 + v16 + 14))
  {
    uint64_t v22 = *(void *)((char *)v4 + *(unsigned __int16 *)((char *)v4 + v16 + 14));
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v22 = 1;
LABEL_25:
  if (v22 != v20)
  {
    int data = v20;
    __int16 v33 = 14;
    CC_SHA256_Update(a2, &v33, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
    uint64_t v23 = *v4;
    uint64_t v16 = -v23;
    unsigned int v18 = *(unsigned __int16 *)((char *)v4 - v23);
  }
  if (v18 < 7)
  {
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = *(unsigned __int16 *)((char *)v4 + v16 + 6);
    if (*(_WORD *)((char *)v4 + v16 + 6)) {
      uint64_t v24 = *(void *)((char *)v4 + v24);
    }
  }
  if (v24 != *((_DWORD *)this + 15))
  {
    LOWORD(data) = 6;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 60, 4u);
    uint64_t v25 = *v4;
    uint64_t v16 = -v25;
    unsigned int v18 = *(unsigned __int16 *)((char *)v4 - v25);
  }
  if (v18 < 9)
  {
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = *(unsigned __int16 *)((char *)v4 + v16 + 8);
    if (v26) {
      uint64_t v26 = *(void *)((char *)v4 + v26);
    }
  }
  if (v26 != *((_DWORD *)this + 16))
  {
    LOWORD(data) = 8;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 64, 4u);
  }
  unsigned int v27 = *((_DWORD *)this + 14);
  if ((v27 & 0x80) != 0)
  {
    int data = (v27 >> 7) & 1;
    __int16 v33 = 0x8000;
    CC_SHA256_Update(a2, &v33, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
    unsigned int v27 = *((_DWORD *)this + 14);
  }
  if ((v27 & 0x100) != 0)
  {
    int data = (v27 >> 8) & 1;
    __int16 v33 = -32767;
    CC_SHA256_Update(a2, &v33, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
  }
  char v28 = (void *)((char *)this + 152);
  if (*((char *)this + 175) < 0)
  {
    uint64_t v29 = *((void *)this + 20);
    if (!v29) {
      goto LABEL_49;
    }
    char v28 = (void *)*v28;
    goto LABEL_48;
  }
  LODWORD(v29) = *((unsigned __int8 *)this + 175);
  if (*((unsigned char *)this + 175)) {
LABEL_48:
  }
    uint64_t result = CC_SHA256_Update(a2, v28, v29);
LABEL_49:
  uint64_t v30 = (void *)((char *)this + 176);
  if (*((char *)this + 199) < 0)
  {
    uint64_t v31 = *((void *)this + 23);
    if (!v31) {
      return result;
    }
    uint64_t v30 = (void *)*v30;
    return CC_SHA256_Update(a2, v30, v31);
  }
  LODWORD(v31) = *((unsigned __int8 *)this + 199);
  if (*((unsigned char *)this + 199)) {
    return CC_SHA256_Update(a2, v30, v31);
  }
  return result;
}

uint64_t AGX::defaultMeshDescriptor(AGX *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&AGX::defaultMeshDescriptor(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    size_t v3 = &v4;
    std::__call_once(&AGX::defaultMeshDescriptor(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultMeshDescriptor(void)::$_0 &&>>);
  }
  return AGX::defaultMeshDescriptor(void)::_desc;
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultMeshDescriptor(void)::$_0 &&>>()
{
}

uint64_t AGX::Impl::ObjectProgramKey::addToDigest(AGX::Impl::ObjectProgramKey *this, CC_SHA256state_st *a2)
{
  long long v4 = (int *)AGX::defaultObjectDescriptor(this);
  uint64_t result = (*(uint64_t (**)(AGX::Impl::ObjectProgramKey *))(*(void *)this + 40))(this);
  uint64_t v6 = *v4;
  uint64_t v7 = -v6;
  unsigned int v8 = (char *)v4 - v6;
  unsigned int v9 = *(unsigned __int16 *)((char *)v4 - v6);
  if (v9 >= 0x15)
  {
    uint64_t v10 = *((unsigned __int16 *)v8 + 10);
    if (v10)
    {
      if (result == (*((unsigned char *)v4 + v10) != 0)) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  if (result)
  {
LABEL_6:
    LOBYTE(v32) = (*(uint64_t (**)(AGX::Impl::ObjectProgramKey *))(*(void *)this + 40))(this);
    LOWORD(data) = 20;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v32, 1u);
    uint64_t v11 = *v4;
    uint64_t v7 = -v11;
    unsigned int v9 = *(unsigned __int16 *)((char *)v4 - v11);
  }
LABEL_7:
  unsigned int v12 = *((_DWORD *)this + 13);
  if (v9 < 0x17 || (uint64_t v13 = *(unsigned __int16 *)((char *)v4 + v7 + 22)) == 0)
  {
    if ((v12 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (((*((_DWORD *)this + 13) & 0x200) == 0) == (*((unsigned char *)v4 + v13) != 0))
  {
LABEL_12:
    int data = (v12 >> 9) & 1;
    __int16 v32 = 22;
    CC_SHA256_Update(a2, &v32, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
  }
LABEL_13:
  if (*((void *)this + 5))
  {
    LOWORD(data) = 18;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 40, 8u);
  }
  unint64_t v14 = *((unsigned int *)this + 14);
  uint64_t v15 = *v4;
  uint64_t v16 = -v15;
  uint64_t v17 = (char *)v4 - v15;
  unsigned int v18 = *(unsigned __int16 *)((char *)v4 - v15);
  if (v18 < 0x1B || (uint64_t v19 = *((unsigned __int16 *)v17 + 13)) == 0)
  {
    if ((v14 & 1) == 0) {
      goto LABEL_22;
    }
    int v21 = 1;
LABEL_21:
    int data = v21;
    __int16 v32 = 26;
    CC_SHA256_Update(a2, &v32, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
    LODWORD(v14) = *((_DWORD *)this + 14);
    uint64_t v23 = *v4;
    uint64_t v16 = -v23;
    unsigned int v18 = *(unsigned __int16 *)((char *)v4 - v23);
LABEL_22:
    uint64_t v22 = (v14 >> 3) & 0xF;
    if (v18 < 0xF) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  BOOL v20 = *((unsigned __int8 *)v4 + v19) != 0;
  int v21 = *((_DWORD *)this + 14) & 1;
  if ((v21 == 0) == v20) {
    goto LABEL_21;
  }
  uint64_t v22 = (v14 >> 3) & 0xF;
LABEL_23:
  if (*(_WORD *)((char *)v4 + v16 + 14))
  {
    uint64_t v24 = *(void *)((char *)v4 + *(unsigned __int16 *)((char *)v4 + v16 + 14));
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v24 = 1;
LABEL_26:
  if (v24 != v22)
  {
    int data = v22;
    __int16 v32 = 14;
    CC_SHA256_Update(a2, &v32, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
    uint64_t v25 = *v4;
    uint64_t v16 = -v25;
    unsigned int v18 = *(unsigned __int16 *)((char *)v4 - v25);
  }
  if (v18 < 7)
  {
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = *(unsigned __int16 *)((char *)v4 + v16 + 6);
    if (*(_WORD *)((char *)v4 + v16 + 6)) {
      uint64_t v26 = *(void *)((char *)v4 + v26);
    }
  }
  if (v26 != *((_DWORD *)this + 15))
  {
    LOWORD(data) = 6;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 60, 4u);
    uint64_t v27 = *v4;
    uint64_t v16 = -v27;
    unsigned int v18 = *(unsigned __int16 *)((char *)v4 - v27);
  }
  if (v18 < 9)
  {
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = *(unsigned __int16 *)((char *)v4 + v16 + 8);
    if (v28) {
      uint64_t v28 = *(void *)((char *)v4 + v28);
    }
  }
  if (v28 != *((_DWORD *)this + 16))
  {
    LOWORD(data) = 8;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 64, 4u);
  }
  unsigned int v29 = *((_DWORD *)this + 14);
  if ((v29 & 4) != 0)
  {
    int data = (v29 >> 1) & 1;
    __int16 v32 = 0x8000;
    CC_SHA256_Update(a2, &v32, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
    unsigned int v30 = *((_DWORD *)this + 14);
    if ((v30 & 4) != 0)
    {
      int data = (v30 >> 2) & 1;
      __int16 v32 = -32767;
      CC_SHA256_Update(a2, &v32, 2u);
      return CC_SHA256_Update(a2, &data, 4u);
    }
  }
  return result;
}

uint64_t AGX::defaultObjectDescriptor(AGX *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&AGX::defaultObjectDescriptor(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    size_t v3 = &v4;
    std::__call_once(&AGX::defaultObjectDescriptor(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultObjectDescriptor(void)::$_0 &&>>);
  }
  return AGX::defaultObjectDescriptor(void)::_desc;
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultObjectDescriptor(void)::$_0 &&>>()
{
}

uint64_t AGX::Impl::FragmentProgramKey::getSupportIndirectCommandBuffers(AGX::Impl::FragmentProgramKey *this)
{
  return *((unsigned __int8 *)this + 224);
}

void AGX::Impl::FragmentProgramKey::serialize(AGX::Impl::FragmentProgramKey *this, const void **a2, unint64_t *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  uint64_t v6 = *((void *)this + 3) - *((void *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 20);
  uint64_t v7 = *((void *)this + 2) + v6;
  *(_DWORD *)uint64_t v7 = ((*((_DWORD *)this + 6) - *((void *)this + 2)) >> 2 << 8) | 0x3F;
  *(_OWORD *)(v7 + 4) = *(_OWORD *)((char *)this + 40);
  long long v8 = *(_OWORD *)((char *)this + 56);
  long long v9 = *(_OWORD *)((char *)this + 72);
  long long v10 = *(_OWORD *)((char *)this + 88);
  *(void *)(v7 + 68) = *((void *)this + 13);
  *(_OWORD *)(v7 + 52) = v10;
  *(_OWORD *)(v7 + 36) = v9;
  *(_OWORD *)(v7 + 20) = v8;
  uint64_t v11 = *((void *)this + 3) - *((void *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v11 >> 2) + 12);
  uint64_t v12 = *((void *)this + 2) + v11;
  *(_DWORD *)uint64_t v12 = ((*((_DWORD *)this + 6) - *((void *)this + 2)) >> 2 << 8) | 0x42;
  long long v13 = *((_OWORD *)this + 7);
  long long v14 = *((_OWORD *)this + 8);
  *(void *)(v12 + 36) = *((void *)this + 18);
  *(_OWORD *)(v12 + 20) = v14;
  *(_OWORD *)(v12 + 4) = v13;
  uint64_t v15 = (void *)((char *)this + 152);
  if (*((char *)this + 175) < 0)
  {
    size_t v16 = *((void *)this + 20);
    if (!v16) {
      goto LABEL_7;
    }
    uint64_t v15 = (void *)*v15;
    goto LABEL_6;
  }
  size_t v16 = *((unsigned __int8 *)this + 175);
  if (*((unsigned char *)this + 175)) {
LABEL_6:
  }
    ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::addTokenToStream((uint64_t)this, 0x4Bu, v15, v16);
LABEL_7:
  uint64_t v17 = (void *)((char *)this + 176);
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    size_t v18 = *((unsigned __int8 *)this + 199);
    if (!*((unsigned char *)this + 199)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  size_t v18 = *((void *)this + 23);
  if (v18)
  {
    uint64_t v17 = (void *)*v17;
LABEL_12:
    ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::addTokenToStream((uint64_t)this, 0x4Cu, v17, v18);
  }
LABEL_13:
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((void *)this + 2);
  *a3 = *((void *)this + 3) - *((void *)this + 2);
}

uint64_t AGX::Impl::FragmentProgramKey::legalizeStateForTargetOS(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[1];
  if ((v2 & 0x1000A0011000E00) != 0 && (*a2 & v2) < (v2 & 0x1000A0011000E00))
  {
    for (uint64_t i = 0; i != 32; i += 8)
    {
      int8x8_t v4 = *(int8x8_t *)(a1 + i + 112);
      int32x2_t v5 = vceq_s32((int32x2_t)vand_s8(v4, (int8x8_t)0x1F0000001FLL), (int32x2_t)0x1600000016);
      if (v5.i8[0]) {
        *(_DWORD *)(a1 + i + 112) = v4.i32[0] & 0xFFFFFFE0 | 0xF;
      }
      if (v5.i8[4]) {
        *(_DWORD *)(a1 + i + 116) = v4.i32[1] & 0xFFFFFFE0 | 0xF;
      }
    }
  }
  return 1;
}

uint64_t AGX::Impl::FragmentProgramKey::addToDigest(AGX::Impl::FragmentProgramKey *this, CC_SHA256state_st *a2)
{
  uint64_t result = AGX::defaultFragmentDescriptor(this);
  int32x2_t v5 = (int *)result;
  unsigned int v6 = 0;
  unsigned int v42 = 0;
  do
  {
    if (*((_DWORD *)this + v6 + 16))
    {
      __int16 data = 22;
      CC_SHA256_Update(a2, &data, 2u);
      CC_SHA256_Update(a2, &v42, 4u);
      uint64_t v7 = (char *)this + 4 * v42 + 64;
      __int16 data = 22;
      CC_SHA256_Update(a2, &data, 2u);
      uint64_t result = CC_SHA256_Update(a2, v7, 4u);
      unsigned int v6 = v42;
    }
    unsigned int v42 = ++v6;
  }
  while (v6 < 8);
  if (*((_DWORD *)this + 12))
  {
    LOWORD(v42) = 22;
    CC_SHA256_Update(a2, &v42, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 48, 4u);
  }
  unint64_t v8 = 0;
  unsigned int v9 = *((_DWORD *)this + 10);
  uint64_t v10 = *v5;
  uint64_t v11 = (char *)v5 - v10;
  unsigned int v12 = *(unsigned __int16 *)((char *)v5 - v10);
  if (v12 >= 0x27
    && (unint64_t v8 = *((unsigned __int16 *)v11 + 19), *((_WORD *)v11 + 19))
    && (unint64_t v8 = *((unsigned __int8 *)v5 + v8), v8 > 0xF))
  {
    int v13 = 0;
  }
  else
  {
    int v13 = dword_1CAE1DF48[v8];
  }
  if (((v9 >> 6) & 0x1F) == v13)
  {
    uint64_t v14 = -v10;
  }
  else
  {
    unsigned int v42 = (v9 >> 6) & 0x1F;
    __int16 data = 38;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v42, 4u);
    unsigned int v9 = *((_DWORD *)this + 10);
    uint64_t v15 = *v5;
    uint64_t v14 = -v15;
    unsigned int v12 = *(unsigned __int16 *)((char *)v5 - v15);
  }
  if (v12 >= 0x2B && *(_WORD *)((char *)v5 + v14 + 42))
  {
    unint64_t v16 = *((unsigned __int8 *)v5 + *(unsigned __int16 *)((char *)v5 + v14 + 42));
    if (v16 > 7) {
      int v17 = 0;
    }
    else {
      int v17 = dword_1CAE1DF88[v16];
    }
  }
  else
  {
    int v17 = 1;
  }
  if ((unsigned __int16)v9 >> 12 != v17)
  {
    unsigned int v42 = (unsigned __int16)v9 >> 12;
    __int16 data = 42;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v42, 4u);
    unsigned int v9 = *((_DWORD *)this + 10);
    uint64_t v18 = *v5;
    uint64_t v14 = -v18;
    unsigned int v12 = *(unsigned __int16 *)((char *)v5 - v18);
  }
  if (v12 >= 9 && *(_WORD *)((char *)v5 + v14 + 8))
  {
    int v19 = v9 & 1;
    if ((v19 == 0) != (*((unsigned char *)v5 + *(unsigned __int16 *)((char *)v5 + v14 + 8)) != 0)) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v9)
  {
    int v19 = 1;
LABEL_27:
    unsigned int v42 = v19;
    __int16 data = 8;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v42, 4u);
    unsigned int v9 = *((_DWORD *)this + 10);
    uint64_t v20 = *v5;
    uint64_t v14 = -v20;
    unsigned int v12 = *(unsigned __int16 *)((char *)v5 - v20);
  }
LABEL_28:
  if (v12 < 0xB || !*(_WORD *)((char *)v5 + v14 + 10))
  {
    if ((v9 & 2) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (((v9 & 2) == 0) == (*((unsigned char *)v5 + *(unsigned __int16 *)((char *)v5 + v14 + 10)) != 0))
  {
LABEL_33:
    unsigned int v42 = (v9 >> 1) & 1;
    __int16 data = 10;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v42, 4u);
    unsigned int v9 = *((_DWORD *)this + 10);
    uint64_t v21 = *v5;
    uint64_t v14 = -v21;
    unsigned int v12 = *(unsigned __int16 *)((char *)v5 - v21);
  }
LABEL_34:
  int v22 = (v9 >> 2) & 1;
  uint64_t v23 = (char *)v5 + v14;
  if (v12 < 0x13)
  {
    if (v12 < 0x11)
    {
LABEL_41:
      uint64_t v25 = -1;
      goto LABEL_42;
    }
  }
  else if (*((_WORD *)v23 + 9) && *(float *)((char *)v5 + *((unsigned __int16 *)v23 + 9)) != 1.0)
  {
    int v24 = 1;
    goto LABEL_43;
  }
  if (!*((_WORD *)v23 + 8)) {
    goto LABEL_41;
  }
  uint64_t v25 = *(void *)((char *)v5 + *((unsigned __int16 *)v23 + 8));
LABEL_42:
  int v24 = v25 != 0xFFFFFFFFLL;
LABEL_43:
  if (v22 != v24)
  {
    unsigned int v42 = v22;
    __int16 data = 18;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v42, 4u);
  }
  if (*((void *)this + 7))
  {
    LOWORD(v42) = 28;
    CC_SHA256_Update(a2, &v42, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 56, 8u);
  }
  uint64_t v26 = *v5;
  unsigned int v27 = *(unsigned __int16 *)((char *)v5 - v26);
  if (v27 < 0x1F)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = *(unsigned __int16 *)((char *)v5 - v26 + 30);
    if (*(_WORD *)((char *)v5 - v26 + 30)) {
      LODWORD(v28) = *((unsigned __int8 *)v5 + v28) != 0;
    }
  }
  if (*((unsigned __int8 *)this + 224) == v28)
  {
    uint64_t v29 = -v26;
  }
  else
  {
    LOWORD(v42) = 30;
    CC_SHA256_Update(a2, &v42, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 224, 1u);
    uint64_t v30 = *v5;
    uint64_t v29 = -v30;
    unsigned int v27 = *(unsigned __int16 *)((char *)v5 - v30);
  }
  unsigned int v31 = *((_DWORD *)this + 26);
  if (v27 >= 0x33 && *(_WORD *)((char *)v5 + v29 + 50))
  {
    if (((*((_DWORD *)this + 26) & 4) == 0) != (*((unsigned char *)v5 + *(unsigned __int16 *)((char *)v5 + v29 + 50)) != 0)) {
      goto LABEL_61;
    }
  }
  else if ((v31 & 4) == 0)
  {
    goto LABEL_60;
  }
  unsigned int v42 = (v31 >> 2) & 1;
  __int16 data = 50;
  CC_SHA256_Update(a2, &data, 2u);
  uint64_t result = CC_SHA256_Update(a2, &v42, 4u);
  unsigned int v31 = *((_DWORD *)this + 26);
  uint64_t v32 = *v5;
  uint64_t v29 = -v32;
  unsigned int v27 = *(unsigned __int16 *)((char *)v5 - v32);
LABEL_60:
  if (v27 < 0x21) {
    goto LABEL_64;
  }
LABEL_61:
  if (!*(_WORD *)((char *)v5 + v29 + 32))
  {
LABEL_64:
    if ((v31 & 0x40) == 0) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if (((v31 & 0x40) == 0) == (*((unsigned char *)v5 + *(unsigned __int16 *)((char *)v5 + v29 + 32)) != 0))
  {
LABEL_65:
    unsigned int v42 = (v31 >> 6) & 1;
    __int16 data = 32;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v42, 4u);
  }
LABEL_66:
  unsigned int v33 = *((_DWORD *)this + 36);
  if ((_BYTE)v33)
  {
    LOWORD(v42) = 22;
    CC_SHA256_Update(a2, &v42, 2u);
    CC_SHA256_Update(a2, (char *)this + 112, 0x20u);
    unsigned int v42 = *((unsigned __int8 *)this + 144);
    __int16 data = 22;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v42, 4u);
    unsigned int v33 = *((_DWORD *)this + 36);
  }
  uint64_t v34 = *v5;
  unsigned int v35 = *(unsigned __int16 *)((char *)v5 - v34);
  if (v35 >= 0xD && *(_WORD *)((char *)v5 - v34 + 12)) {
    uint64_t v36 = *(void *)((char *)v5 + *(unsigned __int16 *)((char *)v5 - v34 + 12));
  }
  else {
    uint64_t v36 = 1;
  }
  if (v36 == ((v33 >> 8) & 0xF))
  {
    uint64_t v37 = -v34;
  }
  else
  {
    unsigned int v42 = (v33 >> 8) & 0xF;
    __int16 data = 12;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v42, 4u);
    unsigned int v33 = *((_DWORD *)this + 36);
    uint64_t v38 = *v5;
    uint64_t v37 = -v38;
    unsigned int v35 = *(unsigned __int16 *)((char *)v5 - v38);
  }
  uint64_t v39 = (unsigned __int16)v33 >> 12;
  if (v35 < 0xF)
  {
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = *(unsigned __int16 *)((char *)v5 + v37 + 14);
    if (*(_WORD *)((char *)v5 + v37 + 14)) {
      uint64_t v40 = *(void *)((char *)v5 + v40);
    }
  }
  if (v40 != v39)
  {
    unsigned int v42 = v39;
    __int16 data = 14;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, &v42, 4u);
  }
  unsigned int v41 = *((_DWORD *)this + 26);
  if ((v41 & 0x100) != 0)
  {
    unsigned int v42 = (v41 >> 8) & 1;
    __int16 data = 0x8000;
    CC_SHA256_Update(a2, &data, 2u);
    return CC_SHA256_Update(a2, &v42, 4u);
  }
  return result;
}

uint64_t AGX::defaultFragmentDescriptor(AGX *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&AGX::defaultFragmentDescriptor(void)::once, memory_order_acquire) != -1)
  {
    int8x8_t v4 = &v2;
    size_t v3 = &v4;
    std::__call_once(&AGX::defaultFragmentDescriptor(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultFragmentDescriptor(void)::$_0 &&>>);
  }
  return AGX::defaultFragmentDescriptor(void)::_desc;
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultFragmentDescriptor(void)::$_0 &&>>()
{
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(flatbuffers::FlatBufferBuilder *result, uint64_t a2)
{
  if (*((unsigned char *)result + 80))
  {
    size_t v3 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 2uLL);
    uint64_t v4 = *((void *)v3 + 6);
    if ((unint64_t)(v4 - *((void *)v3 + 7)) <= 1)
    {
      flatbuffers::vector_downward::reallocate(v3, 2uLL);
      uint64_t v4 = *((void *)v3 + 6);
    }
    *(_WORD *)(v4 - 2) = 0;
    uint64_t v5 = v4 - 2;
    *((void *)v3 + 6) = v5;
    unsigned int v6 = *((_DWORD *)v3 + 8) - v5 + *((_DWORD *)v3 + 10);
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::TrackField(v3, a2, v6);
  }
  return result;
}

void AGX::Impl::TileProgramKey::serialize(AGX::Impl::TileProgramKey *this, const void **a2, unint64_t *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  uint64_t v6 = *((void *)this + 3) - *((void *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 20);
  uint64_t v7 = *((void *)this + 2) + v6;
  *(_DWORD *)uint64_t v7 = ((*((_DWORD *)this + 6) - *((void *)this + 2)) >> 2 << 8) | 0x3F;
  *(_OWORD *)(v7 + 4) = *(_OWORD *)((char *)this + 40);
  long long v8 = *(_OWORD *)((char *)this + 56);
  long long v9 = *(_OWORD *)((char *)this + 72);
  long long v10 = *(_OWORD *)((char *)this + 88);
  *(void *)(v7 + 68) = *((void *)this + 13);
  *(_OWORD *)(v7 + 52) = v10;
  *(_OWORD *)(v7 + 36) = v9;
  *(_OWORD *)(v7 + 20) = v8;
  uint64_t v11 = *((void *)this + 3) - *((void *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v11 >> 2) + 12);
  uint64_t v12 = *((void *)this + 2) + v11;
  *(_DWORD *)uint64_t v12 = ((*((_DWORD *)this + 6) - *((void *)this + 2)) >> 2 << 8) | 0x42;
  long long v13 = *((_OWORD *)this + 7);
  long long v14 = *((_OWORD *)this + 8);
  *(void *)(v12 + 36) = *((void *)this + 18);
  *(_OWORD *)(v12 + 20) = v14;
  *(_OWORD *)(v12 + 4) = v13;
  uint64_t v15 = *((void *)this + 3) - *((void *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v15 >> 2) + 4);
  uint64_t v16 = *((void *)this + 2) + v15;
  *(_DWORD *)uint64_t v16 = ((*((_DWORD *)this + 6) - *((void *)this + 2)) >> 2 << 8) | 0x43;
  *(void *)(v16 + 4) = *((void *)this + 19);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((void *)this + 2);
  *a3 = *((void *)this + 3) - *((void *)this + 2);
}

uint64_t AGX::Impl::TileProgramKey::addToDigest(AGX::Impl::TileProgramKey *this, CC_SHA256state_st *a2)
{
  uint64_t result = AGX::defaultTileDescriptor(this);
  uint64_t v5 = (int *)result;
  if (*((_DWORD *)this + 12))
  {
    LOWORD(data) = 14;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 48, 4u);
  }
  uint64_t v6 = *v5;
  uint64_t v7 = -v6;
  long long v8 = (char *)v5 - v6;
  unsigned int v9 = *(unsigned __int16 *)((char *)v5 - v6);
  if (v9 < 5 || (uint64_t v10 = *((unsigned __int16 *)v8 + 2)) == 0)
  {
    if ((*((_DWORD *)this + 39) & 1) == 0) {
      goto LABEL_10;
    }
    int v11 = 1;
    goto LABEL_9;
  }
  int v11 = *((_DWORD *)this + 39) & 1;
  if ((v11 == 0) == (*((unsigned char *)v5 + v10) != 0))
  {
LABEL_9:
    int data = v11;
    __int16 v26 = 4;
    CC_SHA256_Update(a2, &v26, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
    uint64_t v12 = *v5;
    uint64_t v7 = -v12;
    unsigned int v9 = *(unsigned __int16 *)((char *)v5 - v12);
  }
LABEL_10:
  if (v9 < 7)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = *(unsigned __int16 *)((char *)v5 + v7 + 6);
    if (v13) {
      uint64_t v13 = *(void *)((char *)v5 + v13);
    }
  }
  if (v13 != *((_DWORD *)this + 38))
  {
    LOWORD(data) = 6;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 152, 4u);
  }
  if (*((void *)this + 7))
  {
    LOWORD(data) = 16;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 56, 8u);
  }
  unsigned int v14 = *((_DWORD *)this + 26);
  uint64_t v15 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v15 < 0x13u || (uint64_t v16 = v15[9]) == 0)
  {
    if ((v14 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (((*((_DWORD *)this + 26) & 0x40) == 0) == (*((unsigned char *)v5 + v16) != 0))
  {
LABEL_23:
    int data = (v14 >> 6) & 1;
    __int16 v26 = 18;
    CC_SHA256_Update(a2, &v26, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
  }
LABEL_24:
  unsigned int v17 = *((_DWORD *)this + 36);
  if ((_BYTE)v17)
  {
    LOWORD(data) = 14;
    CC_SHA256_Update(a2, &data, 2u);
    CC_SHA256_Update(a2, (char *)this + 112, 0x20u);
    int data = *((unsigned __int8 *)this + 144);
    __int16 v26 = 14;
    CC_SHA256_Update(a2, &v26, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
    unsigned int v17 = *((_DWORD *)this + 36);
  }
  uint64_t v18 = *v5;
  unsigned int v19 = *(unsigned __int16 *)((char *)v5 - v18);
  if (v19 >= 0xB && *(_WORD *)((char *)v5 - v18 + 10)) {
    uint64_t v20 = *(void *)((char *)v5 + *(unsigned __int16 *)((char *)v5 - v18 + 10));
  }
  else {
    uint64_t v20 = 1;
  }
  if (v20 == ((v17 >> 8) & 0xF))
  {
    uint64_t v21 = -v18;
  }
  else
  {
    int data = (v17 >> 8) & 0xF;
    __int16 v26 = 10;
    CC_SHA256_Update(a2, &v26, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
    unsigned int v17 = *((_DWORD *)this + 36);
    uint64_t v22 = *v5;
    uint64_t v21 = -v22;
    unsigned int v19 = *(unsigned __int16 *)((char *)v5 - v22);
  }
  uint64_t v23 = (unsigned __int16)v17 >> 12;
  if (v19 < 0xD)
  {
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = *(unsigned __int16 *)((char *)v5 + v21 + 12);
    if (*(_WORD *)((char *)v5 + v21 + 12)) {
      uint64_t v24 = *(void *)((char *)v5 + v24);
    }
  }
  if (v24 != v23)
  {
    int data = v23;
    __int16 v26 = 12;
    CC_SHA256_Update(a2, &v26, 2u);
    return CC_SHA256_Update(a2, &data, 4u);
  }
  return result;
}

uint64_t AGX::defaultTileDescriptor(AGX *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&AGX::defaultTileDescriptor(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    size_t v3 = &v4;
    std::__call_once(&AGX::defaultTileDescriptor(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultTileDescriptor(void)::$_0 &&>>);
  }
  return AGX::defaultTileDescriptor(void)::_desc;
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultTileDescriptor(void)::$_0 &&>>()
{
}

uint64_t AGX::Impl::ComputeProgramKey::getSupportIndirectCommandBuffers(AGX::Impl::ComputeProgramKey *this)
{
  return *((unsigned __int8 *)this + 88);
}

void AGX::Impl::ComputeProgramKey::serialize(AGX::Impl::ComputeProgramKey *this, const void **a2, unint64_t *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  uint64_t v6 = *((void *)this + 3) - *((void *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 8);
  uint64_t v7 = *((void *)this + 2) + v6;
  *(_DWORD *)uint64_t v7 = ((*((_DWORD *)this + 6) - *((void *)this + 2)) >> 2 << 8) | 0x4E;
  long long v8 = *(_OWORD *)((char *)this + 40);
  *(void *)(v7 + 20) = *((void *)this + 7);
  *(_OWORD *)(v7 + 4) = v8;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((void *)this + 2);
  *a3 = *((void *)this + 3) - *((void *)this + 2);
}

uint64_t AGX::Impl::ComputeProgramKey::addToDigest(AGX::Impl::ComputeProgramKey *this, CC_SHA256state_st *a2)
{
  uint64_t result = AGX::defaultComputeDescriptor(this);
  uint64_t v5 = (int *)result;
  if (*((void *)this + 5))
  {
    LOWORD(data) = 12;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 40, 8u);
  }
  uint64_t v6 = 0;
  uint64_t v7 = *v5;
  long long v8 = (char *)v5 - v7;
  unsigned int v9 = *(unsigned __int16 *)((char *)v5 - v7);
  if (v9 >= 7)
  {
    uint64_t v6 = *((unsigned __int16 *)v8 + 3);
    if (*((_WORD *)v8 + 3)) {
      uint64_t v6 = *(void *)((char *)v5 + v6);
    }
  }
  if (v6 == *((_DWORD *)this + 12))
  {
    uint64_t v10 = -v7;
  }
  else
  {
    LOWORD(data) = 6;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, (char *)this + 48, 4u);
    uint64_t v11 = *v5;
    uint64_t v10 = -v11;
    unsigned int v9 = *(unsigned __int16 *)((char *)v5 - v11);
  }
  unsigned int v12 = *((_DWORD *)this + 14);
  if (v9 >= 5 && *(_WORD *)((char *)v5 + v10 + 4))
  {
    int v13 = *((_DWORD *)this + 14) & 1;
    if ((v13 == 0) != (*((unsigned char *)v5 + *(unsigned __int16 *)((char *)v5 + v10 + 4)) != 0)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (v12)
  {
    int v13 = 1;
LABEL_15:
    int data = v13;
    __int16 v22 = 4;
    CC_SHA256_Update(a2, &v22, 2u);
    uint64_t result = CC_SHA256_Update(a2, &data, 4u);
    unsigned int v12 = *((_DWORD *)this + 14);
    uint64_t v14 = *v5;
    uint64_t v10 = -v14;
    unsigned int v9 = *(unsigned __int16 *)((char *)v5 - v14);
  }
LABEL_16:
  if (v9 >= 0x15 && *(_WORD *)((char *)v5 + v10 + 20))
  {
    if (((v12 & 2) == 0) != (*((unsigned char *)v5 + *(unsigned __int16 *)((char *)v5 + v10 + 20)) != 0))
    {
      uint64_t v16 = (char *)this + 88;
      int v15 = *((unsigned __int8 *)this + 88);
      goto LABEL_23;
    }
  }
  else if ((v12 & 2) == 0)
  {
    goto LABEL_22;
  }
  int data = (v12 >> 1) & 1;
  __int16 v22 = 20;
  CC_SHA256_Update(a2, &v22, 2u);
  uint64_t result = CC_SHA256_Update(a2, &data, 4u);
  uint64_t v17 = *v5;
  uint64_t v10 = -v17;
  unsigned int v9 = *(unsigned __int16 *)((char *)v5 - v17);
LABEL_22:
  uint64_t v16 = (char *)this + 88;
  int v15 = *((unsigned __int8 *)this + 88);
  if (v9 < 0xF)
  {
    LODWORD(v18) = 0;
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v18 = *(unsigned __int16 *)((char *)v5 + v10 + 14);
  if (*(_WORD *)((char *)v5 + v10 + 14)) {
    LODWORD(v18) = *((unsigned __int8 *)v5 + v18) != 0;
  }
LABEL_26:
  if (v15 != v18)
  {
    LOWORD(data) = 14;
    CC_SHA256_Update(a2, &data, 2u);
    uint64_t result = CC_SHA256_Update(a2, v16, 1u);
    uint64_t v19 = *v5;
    uint64_t v10 = -v19;
    unsigned int v9 = *(unsigned __int16 *)((char *)v5 - v19);
  }
  unsigned int v20 = *((_DWORD *)this + 14);
  if (v9 < 0x11 || !*(_WORD *)((char *)v5 + v10 + 16))
  {
    if ((v20 & 0x20) == 0) {
      return result;
    }
    goto LABEL_33;
  }
  if (((*((_DWORD *)this + 14) & 0x20) == 0) == (*((unsigned char *)v5 + *(unsigned __int16 *)((char *)v5 + v10 + 16)) != 0))
  {
LABEL_33:
    int data = (v20 >> 5) & 1;
    __int16 v22 = 16;
    CC_SHA256_Update(a2, &v22, 2u);
    return CC_SHA256_Update(a2, &data, 4u);
  }
  return result;
}

uint64_t AGX::defaultComputeDescriptor(AGX *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&AGX::defaultComputeDescriptor(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    size_t v3 = &v4;
    std::__call_once(&AGX::defaultComputeDescriptor(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultComputeDescriptor(void)::$_0 &&>>);
  }
  return AGX::defaultComputeDescriptor(void)::_desc;
}

void std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultComputeDescriptor(void)::$_0 &&>>()
{
}

AGX *AGX::Impl::VertexProgramKey::initCommon(AGX *result, AGX *a2)
{
  char v2 = a2;
  size_t v3 = result;
  if (!a2)
  {
    uint64_t result = (AGX *)AGX::defaultVertexDescriptor(result);
    char v2 = result;
  }
  uint64_t v4 = *((void *)v3 + 7) | 0xFFLL;
  *((void *)v3 + 7) = v4;
  *((_DWORD *)v3 + 12) = 0;
  uint64_t v5 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v5 < 0x15u)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    uint64_t v6 = v5[10];
    if (v6) {
      LOBYTE(v6) = *((unsigned char *)v2 + v6);
    }
  }
  unint64_t v7 = v4 & 0xFFFFFFFFFFFFF3FFLL | ((unint64_t)(v6 & 3) << 10);
  *((void *)v3 + 7) = v7;
  long long v8 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v8 < 0x19u)
  {
    LOBYTE(v9) = 0;
  }
  else
  {
    uint64_t v9 = v8[12];
    if (v9) {
      LOBYTE(v9) = *((unsigned char *)v2 + v9);
    }
  }
  unint64_t v10 = v7 & 0xFFFFFFFFFFFFFCFFLL | ((unint64_t)(v9 & 3) << 8);
  *((void *)v3 + 7) = v10;
  uint64_t v11 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  unsigned int v12 = *v11;
  if (v12 <= 0x1E)
  {
    LODWORD(v14) = 0;
    *((void *)v3 + 5) = 0;
  }
  else
  {
    if (v11[15]) {
      unint64_t v13 = (unint64_t)v2 + v11[15] + *(unsigned int *)((char *)v2 + v11[15]);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t result = (AGX *)AGX::mutableBufferMaskFromBufferDescriptorArray<flatbuffers::Vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(v13);
    *((void *)v3 + 5) = result;
    if (v12 < 0x21)
    {
      LODWORD(v14) = 0;
    }
    else
    {
      uint64_t v14 = v11[16];
      if (v11[16]) {
        LODWORD(v14) = *((unsigned __int8 *)v2 + v14) != 0;
      }
    }
  }
  *((_DWORD *)v3 + 22) = *((_DWORD *)v3 + 22) & 0xFFFFFFFE | v14;
  int v15 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v15 < 0x1Du)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = v15[14];
    if (v16) {
      unint64_t v16 = (unint64_t)(*((unsigned char *)v2 + v16) & 3) << 12;
    }
  }
  unint64_t v17 = v16 | v10 & 0xFFFFFFFFFFFFCFFFLL;
  *((void *)v3 + 7) = v17;
  uint64_t v18 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v18 >= 0x1Bu && (uint64_t v19 = v18[13]) != 0) {
    unint64_t v20 = (unint64_t)(*(_DWORD *)((unsigned char *)v2 + v19) & 0xF) << 14;
  }
  else {
    unint64_t v20 = 0x4000;
  }
  unint64_t v21 = v20 | v17 & 0xFFFFFFFFFFFC3FFFLL;
  *((void *)v3 + 7) = v21;
  __int16 v22 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v22 < 0x2Bu)
  {
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = v22[21];
    if (v23) {
      unint64_t v23 = (unint64_t)(*((unsigned char *)v2 + v23) != 0) << 19;
    }
  }
  unint64_t v24 = v23 | v21 & 0xFFFFFFFFFFF7FFFFLL;
  *((void *)v3 + 7) = v24;
  uint64_t v25 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  unsigned int v26 = *v25;
  if (v26 < 9) {
    goto LABEL_40;
  }
  if (!v25[4])
  {
    if (v26 >= 0xB) {
      goto LABEL_38;
    }
LABEL_40:
    unint64_t v27 = 0;
    goto LABEL_41;
  }
  unint64_t v27 = 0;
  if (v26 >= 0xB && *((unsigned char *)v2 + v25[4]))
  {
LABEL_38:
    uint64_t v28 = v25[5];
    if (v28)
    {
      unint64_t v27 = (unint64_t)(*((unsigned char *)v2 + v28) == 1) << 20;
      goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_41:
  unint64_t v29 = v27 | v24 & 0xFFFFFFFFFFEFFFFFLL;
  *((void *)v3 + 7) = v29;
  uint64_t v30 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v30 < 0x11u)
  {
    unint64_t v31 = 0;
  }
  else
  {
    unint64_t v31 = v30[8];
    if (v31) {
      unint64_t v31 = (unint64_t)(*((unsigned char *)v2 + v31) & 1) << 22;
    }
  }
  unint64_t v32 = v31 | v29 & 0xFFFFFFFFFFBFFFFFLL;
  *((void *)v3 + 7) = v32;
  unsigned int v33 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v33 < 0x23u)
  {
    unint64_t v34 = 0;
  }
  else
  {
    unint64_t v34 = v33[17];
    if (v34) {
      unint64_t v34 = (unint64_t)(*((unsigned char *)v2 + v34) != 0) << 25;
    }
  }
  *((void *)v3 + 7) = v34 | v32 & 0xFFFFFFFFFDFFFFFFLL;
  unsigned int v35 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v35 < 0x23u)
  {
    LODWORD(v36) = 0;
  }
  else
  {
    uint64_t v36 = v35[17];
    if (v36) {
      LODWORD(v36) = (*((unsigned char *)v2 + v36) != 0) << 9;
    }
  }
  *((_DWORD *)v3 + 13) = *((_DWORD *)v3 + 13) & 0xFFFFFDFF | v36;
  return result;
}

unint64_t AGX::mutableBufferMaskFromBufferDescriptorArray<flatbuffers::Vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    LODWORD(v2) = *(_DWORD *)result;
    if (*(_DWORD *)result >= 0x1Fu) {
      uint64_t v2 = 31;
    }
    else {
      uint64_t v2 = v2;
    }
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t result = 0;
      unint64_t v4 = v1 + 4;
      do
      {
        uint64_t v5 = (int *)(v4 + 4 * v3 + *(unsigned int *)(v4 + 4 * v3));
        uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
        if (*v6 >= 5u)
        {
          uint64_t v7 = v6[2];
          if (v7)
          {
            if (*((unsigned char *)v5 + v7) == 1) {
              uint64_t v8 = 1 << v3;
            }
            else {
              uint64_t v8 = 0;
            }
            result |= v8;
          }
        }
        ++v3;
      }
      while (v3 != v2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

AGX *AGX::Impl::FragmentProgramKey::initCommon(AGX *result, AGX *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  if (!a2)
  {
    uint64_t result = (AGX *)AGX::defaultFragmentDescriptor(result);
    uint64_t v2 = result;
  }
  unint64_t v4 = 0;
  uint64_t v5 = *(int *)v2;
  uint64_t v6 = (char *)v2 - v5;
  unsigned int v7 = *(unsigned __int16 *)((char *)v2 - v5);
  if (v7 < 0x17) {
    goto LABEL_64;
  }
  uint64_t v8 = -v5;
  uint64_t v9 = *((unsigned __int16 *)v6 + 11);
  if (*((_WORD *)v6 + 11))
  {
    unint64_t v10 = (char *)v2 + v9;
    uint64_t v11 = *(unsigned int *)((char *)v2 + v9);
    unint64_t v12 = *(unsigned int *)((char *)v2 + v9 + v11);
    if (v12)
    {
      unint64_t v13 = 0;
      uint64_t v14 = (char *)v3 + 64;
      uint64_t v15 = v9 + v11;
      uint64_t result = (AGX *)dword_1CAE1DF14;
      while (1)
      {
        uint64_t v16 = *(unsigned int *)((char *)v2 + v15 + 4);
        unint64_t v17 = (char *)v2 + v15 + v16;
        uint64_t v18 = *((int *)v17 + 1);
        uint64_t v19 = (char *)v2 + v15 + v16 - v18;
        unsigned int v20 = *((unsigned __int16 *)v19 + 2);
        if (v20 < 5) {
          goto LABEL_49;
        }
        uint64_t v21 = *((unsigned __int16 *)v19 + 4);
        if (!v21 || !*(_WORD *)((char *)v2 + v15 + v16 + v21 + 4)) {
          goto LABEL_49;
        }
        uint64_t v22 = -v18;
        if (v20 >= 9)
        {
          if (!*(_WORD *)((char *)v2 + v15 + v16 - v18 + 12)
            || !*((unsigned char *)v2 + v15 + v16 + *(unsigned __int16 *)((char *)v2 + v15 + v16 - v18 + 12) + 4))
          {
            goto LABEL_45;
          }
          int v23 = *(_DWORD *)&v14[4 * v13] | 1;
          *(_DWORD *)&v14[4 * v13] = v23;
          unint64_t v24 = (char *)v2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v24 + 2) >= 0x15u && (uint64_t v25 = *((unsigned __int16 *)v24 + 12)) != 0)
          {
            unsigned int v26 = *((unsigned __int8 *)v2 + v15 + v16 + v25 + 4);
            if (v26 > 0x12) {
              int v27 = 0;
            }
            else {
              int v27 = 2 * v26 + 2;
            }
          }
          else
          {
            int v27 = 4;
          }
          unsigned int v28 = v27 | v23 & 0xFFFFFFC1;
          *(_DWORD *)&v14[4 * v13] = v28;
          unint64_t v29 = (char *)v2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v29 + 2) >= 0x11u && (uint64_t v30 = *((unsigned __int16 *)v29 + 10)) != 0)
          {
            unsigned int v31 = *((unsigned __int8 *)v2 + v15 + v16 + v30 + 4);
            if (v31 > 0x12) {
              int v32 = 0;
            }
            else {
              int v32 = (v31 << 6) + 64;
            }
          }
          else
          {
            int v32 = 64;
          }
          unsigned int v33 = v32 | v28 & 0xFFFFF83F;
          *(_DWORD *)&v14[4 * v13] = v33;
          unint64_t v34 = (char *)v2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v34 + 2) >= 0x13u && (uint64_t v35 = *((unsigned __int16 *)v34 + 11)) != 0)
          {
            unsigned int v36 = *((unsigned __int8 *)v2 + v15 + v16 + v35 + 4);
            if (v36 > 0x12) {
              int v37 = 0;
            }
            else {
              int v37 = (v36 << 11) + 2048;
            }
          }
          else
          {
            int v37 = 4096;
          }
          unsigned int v38 = v37 | v33 & 0xFFFF07FF;
          *(_DWORD *)&v14[4 * v13] = v38;
          uint64_t v39 = (char *)v2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v39 + 2) >= 0xFu && (uint64_t v40 = *((unsigned __int16 *)v39 + 9)) != 0)
          {
            unsigned int v41 = *((unsigned __int8 *)v2 + v15 + v16 + v40 + 4);
            if (v41 > 0x12) {
              int v42 = 0;
            }
            else {
              int v42 = (v41 << 16) + 0x10000;
            }
          }
          else
          {
            int v42 = 0x10000;
          }
          unsigned int v43 = v42 | v38 & 0xFFE0FFFF;
          *(_DWORD *)&v14[4 * v13] = v43;
          int v44 = (char *)v2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v44 + 2) >= 0xDu && (uint64_t v45 = *((unsigned __int16 *)v44 + 8)) != 0)
          {
            unint64_t v46 = *((unsigned __int8 *)v2 + v15 + v16 + v45 + 4);
            if (v46 > 4) {
              int v47 = 0;
            }
            else {
              int v47 = dword_1CAE1DF00[v46];
            }
          }
          else
          {
            int v47 = 6291456;
          }
          unsigned int v48 = v47 | v43 & 0xFF1FFFFF;
          *(_DWORD *)&v14[4 * v13] = v48;
          uint64_t v49 = v16 - *((int *)v17 + 1);
          if (*(unsigned __int16 *)((char *)v2 + v15 + v49 + 4) >= 0xBu
            && (uint64_t v50 = *(unsigned __int16 *)((char *)v2 + v15 + v49 + 14)) != 0)
          {
            unint64_t v51 = *((unsigned __int8 *)v2 + v15 + v16 + v50 + 4);
            if (v51 > 4) {
              int v52 = 0;
            }
            else {
              int v52 = dword_1CAE1DF14[v51];
            }
          }
          else
          {
            int v52 = 50331648;
          }
          *(_DWORD *)&v14[4 * v13] = v52 | v48 & 0xF8FFFFFF;
          uint64_t v53 = *((int *)v17 + 1);
          uint64_t v22 = -v53;
          unsigned int v20 = *(unsigned __int16 *)((char *)v2 + v15 + v16 - v53 + 4);
        }
        if (v20 < 7) {
          goto LABEL_47;
        }
LABEL_45:
        uint64_t v54 = v22 + v15;
        if (!*(_WORD *)((char *)v2 + v16 + v54 + 10))
        {
LABEL_47:
          int v55 = 15;
          goto LABEL_48;
        }
        int v55 = *((unsigned __int8 *)v2 + v15 + v16 + *(unsigned __int16 *)((char *)v2 + v16 + v54 + 10) + 4);
LABEL_48:
        *((_DWORD *)v3 + 12) = *((_DWORD *)v3 + 12) & 0xFF0000FF | (v55 << 31 >> 31) & (0x1000000 << v13) | (1 << v13) & (v55 << 28 >> 31) | ((unsigned __int16)((256 << v13) & ((__int16)((_WORD)v55 << 13) >> 15)) | (unsigned __int16)*((_DWORD *)v3 + 12)) & 0xFF00 | ((0x10000 << v13) & (v55 << 30 >> 31) | *((_DWORD *)v3 + 12)) & 0xFF0000;
        unint64_t v12 = *(unsigned int *)&v10[v11];
LABEL_49:
        if (v13 <= 6)
        {
          ++v13;
          v15 += 4;
          if (v13 < v12) {
            continue;
          }
        }
        uint64_t v56 = *(int *)v2;
        uint64_t v8 = -v56;
        unsigned int v7 = *(unsigned __int16 *)((char *)v2 - v56);
        break;
      }
    }
  }
  if (v7 < 0x27)
  {
    unint64_t v4 = 0;
LABEL_64:
    int v57 = dword_1CAE1DF48[v4];
    goto LABEL_65;
  }
  unint64_t v4 = *(unsigned __int16 *)((char *)v2 + v8 + 38);
  if (!*(_WORD *)((char *)v2 + v8 + 38)) {
    goto LABEL_64;
  }
  unint64_t v4 = *((unsigned __int8 *)v2 + v4);
  if (v4 <= 0xF) {
    goto LABEL_64;
  }
  int v57 = 0;
LABEL_65:
  unsigned int v58 = *((_DWORD *)v3 + 10) & 0xFFFFF83F | (v57 << 6);
  *((_DWORD *)v3 + 10) = v58;
  uint64_t v59 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v59 >= 0x2Bu && (uint64_t v60 = v59[21]) != 0)
  {
    unint64_t v61 = *((unsigned __int8 *)v2 + v60);
    if (v61 > 7) {
      int v62 = 0;
    }
    else {
      int v62 = dword_1CAE1DF28[v61];
    }
  }
  else
  {
    int v62 = 4096;
  }
  unsigned int v63 = v62 | v58 & 0xFFFF0FFF;
  *((_DWORD *)v3 + 10) = v63;
  long long v64 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v64 < 9u)
  {
    LODWORD(v65) = 0;
  }
  else
  {
    uint64_t v65 = v64[4];
    if (v65) {
      LODWORD(v65) = *((unsigned __int8 *)v2 + v65) != 0;
    }
  }
  int v66 = v65 | v63 & 0xFFFFFFFE;
  *((_DWORD *)v3 + 10) = v66;
  uint64_t v67 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v67 < 0xBu)
  {
    LODWORD(v68) = 0;
  }
  else
  {
    uint64_t v68 = v67[5];
    if (v68) {
      LODWORD(v68) = 2 * (*((unsigned char *)v2 + v68) != 0);
    }
  }
  int v69 = v68 | v66 & 0xFFFFFFFD;
  *((_DWORD *)v3 + 10) = v69;
  char v70 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  unsigned int v71 = *v70;
  if (v71 < 0x11)
  {
    LODWORD(v73) = 0;
    int v72 = -1;
  }
  else
  {
    if (v70[8]) {
      int v72 = *(_DWORD *)((char *)v2 + v70[8]);
    }
    else {
      int v72 = -1;
    }
    if (v71 < 0x13)
    {
      LODWORD(v73) = 0;
    }
    else
    {
      uint64_t v73 = v70[9];
      if (v73) {
        LODWORD(v73) = *(float *)((char *)v2 + v73) != 1.0;
      }
    }
  }
  if (v72 == -1) {
    int v74 = v73;
  }
  else {
    int v74 = 1;
  }
  if (v74) {
    int v75 = 4;
  }
  else {
    int v75 = 0;
  }
  *((_DWORD *)v3 + 10) = v75 | v69 & 0xFFFFFFFB;
  int v76 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  unsigned int v77 = *v76;
  if (v77 <= 0x1C)
  {
    *((void *)v3 + 7) = 0;
LABEL_104:
    LODWORD(v80) = 0;
    *((unsigned char *)v3 + 224) = 0;
    goto LABEL_105;
  }
  if (v76[14]) {
    unint64_t v78 = (unint64_t)v2 + v76[14] + *(unsigned int *)((char *)v2 + v76[14]);
  }
  else {
    unint64_t v78 = 0;
  }
  uint64_t result = (AGX *)AGX::mutableBufferMaskFromBufferDescriptorArray<flatbuffers::Vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(v78);
  *((void *)v3 + 7) = result;
  if (v77 < 0x1F) {
    goto LABEL_104;
  }
  uint64_t v79 = v76[15];
  if (v76[15]) {
    LOBYTE(v79) = *((unsigned char *)v2 + v79) != 0;
  }
  *((unsigned char *)v3 + 224) = v79;
  if (v77 < 0x33)
  {
    LODWORD(v80) = 0;
  }
  else
  {
    uint64_t v80 = v76[25];
    if (v76[25]) {
      LODWORD(v80) = 4 * (*((unsigned char *)v2 + v80) != 0);
    }
  }
LABEL_105:
  int v81 = *((_DWORD *)v3 + 26) & 0xFFFFFFFB | v80;
  *((_DWORD *)v3 + 26) = v81;
  long long v82 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v82 < 0x21u)
  {
    LODWORD(v83) = 0;
  }
  else
  {
    uint64_t v83 = v82[16];
    if (v83) {
      LODWORD(v83) = (*((unsigned char *)v2 + v83) != 0) << 6;
    }
  }
  *((_DWORD *)v3 + 26) = v83 | v81 & 0xFFFFFFBF;
  int v84 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v84 < 0x21u)
  {
    LODWORD(v85) = 0;
  }
  else
  {
    uint64_t v85 = v84[16];
    if (v85) {
      LODWORD(v85) = (*((unsigned char *)v2 + v85) != 0) << 9;
    }
  }
  *((_DWORD *)v3 + 25) = *((_DWORD *)v3 + 25) & 0xFFFFFDFF | v85;
  return result;
}

unint64_t AGX::Impl::TileProgramKey::initCommon(unint64_t result, int *a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = result;
  if (!a2)
  {
    uint64_t result = AGX::defaultTileDescriptor((AGX *)result);
    uint64_t v2 = (int *)result;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = -v4;
  uint64_t v6 = (char *)v2 - v4;
  unsigned int v7 = *(unsigned __int16 *)((char *)v2 - v4);
  if (v7 >= 0xF)
  {
    uint64_t v8 = *((unsigned __int16 *)v6 + 7);
    if (!*((_WORD *)v6 + 7)) {
      goto LABEL_15;
    }
    uint64_t v9 = (char *)v2 + v8;
    uint64_t v10 = *(unsigned int *)((char *)v2 + v8);
    unint64_t v11 = *(unsigned int *)((char *)v2 + v8 + v10);
    if (!v11) {
      goto LABEL_15;
    }
    unint64_t v12 = 0;
    uint64_t v13 = v8 + v10;
    do
    {
      uint64_t v14 = *(unsigned int *)((char *)v2 + v13 + 4);
      uint64_t v15 = (char *)v2 + v13 + v14 - *(int *)((char *)v2 + v13 + v14 + 4);
      uint64_t result = *((unsigned __int16 *)v15 + 2);
      if (result >= 5)
      {
        uint64_t v16 = *((unsigned __int16 *)v15 + 4);
        if (v16)
        {
          if (*(_WORD *)((char *)v2 + v13 + v14 + v16 + 4))
          {
            uint64_t result = (16777217 << v12);
            *(_DWORD *)(v3 + 48) = result | *(_DWORD *)(v3 + 48) & 0xFF0000FF | ((unsigned __int16)*(_DWORD *)(v3 + 48) | (unsigned __int16)(256 << v12)) & 0xFF00 | (*(_DWORD *)(v3 + 48) | (0x10000 << v12)) & 0xFF0000;
            unint64_t v11 = *(unsigned int *)&v9[v10];
          }
        }
      }
      if (v12 > 6) {
        break;
      }
      ++v12;
      v13 += 4;
    }
    while (v12 < v11);
    uint64_t v17 = *v2;
    uint64_t v5 = -v17;
    unsigned int v7 = *(unsigned __int16 *)((char *)v2 - v17);
  }
  if (v7 < 5)
  {
    LODWORD(v18) = 0;
    goto LABEL_18;
  }
LABEL_15:
  uint64_t v18 = *(unsigned __int16 *)((char *)v2 + v5 + 4);
  if (*(_WORD *)((char *)v2 + v5 + 4)) {
    LODWORD(v18) = *((unsigned __int8 *)v2 + v18) != 0;
  }
LABEL_18:
  *(_DWORD *)(v3 + 156) = *(_DWORD *)(v3 + 156) & 0xFFFFFFFE | v18;
  uint64_t v19 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v19 < 7u)
  {
    LODWORD(v20) = 0;
  }
  else
  {
    uint64_t v20 = v19[3];
    if (v20) {
      LODWORD(v20) = *(int *)((char *)v2 + v20);
    }
  }
  *(_DWORD *)(v3 + 152) = v20;
  uint64_t v21 = (unsigned __int16 *)((char *)v2 - *v2);
  unsigned int v22 = *v21;
  if (v22 <= 0x10)
  {
    LODWORD(v24) = 0;
    *(void *)(v3 + 56) = 0;
  }
  else
  {
    if (v21[8]) {
      unint64_t v23 = (unint64_t)v2 + v21[8] + *(unsigned int *)((char *)v2 + v21[8]);
    }
    else {
      unint64_t v23 = 0;
    }
    uint64_t result = AGX::mutableBufferMaskFromBufferDescriptorArray<flatbuffers::Vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(v23);
    *(void *)(v3 + 56) = result;
    if (v22 < 0x13)
    {
      LODWORD(v24) = 0;
    }
    else
    {
      uint64_t v24 = v21[9];
      if (v21[9]) {
        LODWORD(v24) = (*((unsigned char *)v2 + v24) != 0) << 6;
      }
    }
  }
  *(_DWORD *)(v3 + 104) = *(_DWORD *)(v3 + 104) & 0xFFFFFFBF | v24;
  uint64_t v25 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v25 < 0x13u)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    uint64_t v26 = v25[9];
    if (v26) {
      LODWORD(v26) = (*((unsigned char *)v2 + v26) != 0) << 9;
    }
  }
  *(_DWORD *)(v3 + 100) = *(_DWORD *)(v3 + 100) & 0xFFFFFDFF | v26;
  return result;
}

AGX *AGX::Impl::ComputeProgramKey::initCommon(AGX *result, AGX *a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = result;
  if (!a2)
  {
    uint64_t result = (AGX *)AGX::defaultComputeDescriptor(result);
    uint64_t v2 = result;
  }
  uint64_t v4 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  unsigned int v5 = *v4;
  if (v5 < 0xD)
  {
    *((void *)v3 + 5) = 0;
    if (v5 < 7)
    {
      LODWORD(v7) = 0;
      goto LABEL_12;
    }
  }
  else
  {
    if (v4[6]) {
      unint64_t v6 = (unint64_t)v2 + v4[6] + *(unsigned int *)((char *)v2 + v4[6]);
    }
    else {
      unint64_t v6 = 0;
    }
    uint64_t result = (AGX *)AGX::mutableBufferMaskFromBufferDescriptorArray<flatbuffers::Vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(v6);
    *((void *)v3 + 5) = result;
  }
  uint64_t v7 = v4[3];
  if (v4[3]) {
    LODWORD(v7) = *(_DWORD *)((char *)v2 + v7);
  }
LABEL_12:
  *((_DWORD *)v3 + 12) = v7;
  uint64_t v8 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v8 < 5u)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v9 = v8[2];
    if (v9) {
      LODWORD(v9) = *((unsigned __int8 *)v2 + v9) != 0;
    }
  }
  int v10 = *((_DWORD *)v3 + 14) & 0xFFFFFFFE | v9;
  *((_DWORD *)v3 + 14) = v10;
  unint64_t v11 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v11 < 0x15u)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v12 = v11[10];
    if (v12) {
      LODWORD(v12) = 2 * (*((unsigned char *)v2 + v12) != 0);
    }
  }
  int v13 = v12 | v10 & 0xFFFFFFFD;
  *((_DWORD *)v3 + 14) = v13;
  uint64_t v14 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  unsigned int v15 = *v14;
  if (v15 <= 0xE)
  {
    LODWORD(v17) = 0;
    *((unsigned char *)v3 + 88) = 0;
  }
  else
  {
    uint64_t v16 = v14[7];
    if (v14[7]) {
      LOBYTE(v16) = *((unsigned char *)v2 + v16) != 0;
    }
    *((unsigned char *)v3 + 88) = v16;
    if (v15 < 0x11)
    {
      LODWORD(v17) = 0;
    }
    else
    {
      uint64_t v17 = v14[8];
      if (v17) {
        LODWORD(v17) = 32 * (*((unsigned char *)v2 + v17) != 0);
      }
    }
  }
  *((_DWORD *)v3 + 14) = v17 | v13 & 0xFFFFFFDF;
  uint64_t v18 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v18 < 0x11u)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = v18[8];
    if (v19) {
      LODWORD(v19) = (*((unsigned char *)v2 + v19) != 0) << 9;
    }
  }
  *((_DWORD *)v3 + 13) = *((_DWORD *)v3 + 13) & 0xFFFFFDFF | v19;
  return result;
}

AGX *AGX::Impl::MeshProgramKey::initCommon(AGX *result, AGX *a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = result;
  if (!a2)
  {
    uint64_t result = (AGX *)AGX::defaultMeshDescriptor(result);
    uint64_t v2 = result;
  }
  uint64_t v4 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  unsigned int v5 = *v4;
  if (v5 <= 0x12)
  {
    LODWORD(v7) = 0;
    *((void *)v3 + 5) = 0;
  }
  else
  {
    if (v4[9]) {
      unint64_t v6 = (unint64_t)v2 + v4[9] + *(unsigned int *)((char *)v2 + v4[9]);
    }
    else {
      unint64_t v6 = 0;
    }
    uint64_t result = (AGX *)AGX::mutableBufferMaskFromBufferDescriptorArray<flatbuffers::Vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(v6);
    *((void *)v3 + 5) = result;
    if (v5 < 0x15)
    {
      LODWORD(v7) = 0;
    }
    else
    {
      uint64_t v7 = v4[10];
      if (v4[10]) {
        LODWORD(v7) = *((unsigned __int8 *)v2 + v7) != 0;
      }
    }
  }
  *((_DWORD *)v3 + 24) = *((_DWORD *)v3 + 24) & 0xFFFFFFFE | v7;
  uint64_t v8 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v8 >= 0xFu && (uint64_t v9 = v8[7]) != 0) {
    int v10 = *(_DWORD *)((unsigned char *)v2 + v9) & 0xF;
  }
  else {
    int v10 = 1;
  }
  unsigned int v11 = *((_DWORD *)v3 + 14) & 0xFFFFFFF0 | v10;
  *((_DWORD *)v3 + 14) = v11;
  uint64_t v12 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v12 < 0x1Du)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v13 = v12[14];
    if (v13) {
      LODWORD(v13) = 32 * (*((unsigned char *)v2 + v13) != 0);
    }
  }
  *((_DWORD *)v3 + 14) = v13 | v11 & 0xFFFFFFDF;
  uint64_t v14 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v14 < 0x17u)
  {
    LODWORD(v15) = 0;
  }
  else
  {
    uint64_t v15 = v14[11];
    if (v15) {
      LODWORD(v15) = (*((unsigned char *)v2 + v15) != 0) << 9;
    }
  }
  *((_DWORD *)v3 + 13) = *((_DWORD *)v3 + 13) & 0xFFFFFDFF | v15;
  uint64_t v16 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v16 < 7u)
  {
    LODWORD(v17) = 0;
  }
  else
  {
    uint64_t v17 = v16[3];
    if (v17) {
      LODWORD(v17) = *(_DWORD *)((char *)v2 + v17);
    }
  }
  *((_DWORD *)v3 + 15) = v17;
  uint64_t v18 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v18 < 9u)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = v18[4];
    if (v19) {
      LODWORD(v19) = *(_DWORD *)((char *)v2 + v19);
    }
  }
  *((_DWORD *)v3 + 16) = v19;
  return result;
}

AGX *AGX::Impl::ObjectProgramKey::initCommon(AGX *result, AGX *a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = result;
  if (!a2)
  {
    uint64_t result = (AGX *)AGX::defaultObjectDescriptor(result);
    uint64_t v2 = result;
  }
  uint64_t v4 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  unsigned int v5 = *v4;
  if (v5 <= 0x12)
  {
    LODWORD(v7) = 0;
    *((void *)v3 + 5) = 0;
  }
  else
  {
    if (v4[9]) {
      unint64_t v6 = (unint64_t)v2 + v4[9] + *(unsigned int *)((char *)v2 + v4[9]);
    }
    else {
      unint64_t v6 = 0;
    }
    uint64_t result = (AGX *)AGX::mutableBufferMaskFromBufferDescriptorArray<flatbuffers::Vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(v6);
    *((void *)v3 + 5) = result;
    if (v5 < 0x15)
    {
      LODWORD(v7) = 0;
    }
    else
    {
      uint64_t v7 = v4[10];
      if (v4[10]) {
        LODWORD(v7) = *((unsigned __int8 *)v2 + v7) != 0;
      }
    }
  }
  *((_DWORD *)v3 + 24) = *((_DWORD *)v3 + 24) & 0xFFFFFFFE | v7;
  uint64_t v8 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v8 >= 0xFu && (uint64_t v9 = v8[7]) != 0) {
    int v10 = 8 * (*(_DWORD *)((unsigned char *)v2 + v9) & 0xF);
  }
  else {
    int v10 = 8;
  }
  unsigned int v11 = *((_DWORD *)v3 + 14) & 0xFFFFFF87 | v10;
  *((_DWORD *)v3 + 14) = v11;
  uint64_t v12 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v12 < 0x1Bu)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v13 = v12[13];
    if (v13) {
      LODWORD(v13) = *((unsigned __int8 *)v2 + v13) != 0;
    }
  }
  *((_DWORD *)v3 + 14) = v13 | v11 & 0xFFFFFFFE;
  uint64_t v14 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v14 < 0x17u)
  {
    LODWORD(v15) = 0;
  }
  else
  {
    uint64_t v15 = v14[11];
    if (v15) {
      LODWORD(v15) = (*((unsigned char *)v2 + v15) != 0) << 9;
    }
  }
  *((_DWORD *)v3 + 13) = *((_DWORD *)v3 + 13) & 0xFFFFFDFF | v15;
  uint64_t v16 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v16 < 7u)
  {
    LODWORD(v17) = 0;
  }
  else
  {
    uint64_t v17 = v16[3];
    if (v17) {
      LODWORD(v17) = *(_DWORD *)((char *)v2 + v17);
    }
  }
  *((_DWORD *)v3 + 15) = v17;
  uint64_t v18 = (unsigned __int16 *)((char *)v2 - *(int *)v2);
  if (*v18 < 9u)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = v18[4];
    if (v19) {
      LODWORD(v19) = *(_DWORD *)((char *)v2 + v19);
    }
  }
  *((_DWORD *)v3 + 16) = v19;
  return result;
}

uint64_t AGX::BVHBuilderProgramKey::initializeWithDescriptor(uint64_t result, int *a2)
{
  uint64_t v2 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v2 < 5u)
  {
    LODWORD(v3) = 0;
  }
  else
  {
    uint64_t v3 = v2[2];
    if (v3) {
      LODWORD(v3) = *(int *)((char *)a2 + v3) & 0x3FFFFFFF;
    }
  }
  int v4 = *(_DWORD *)(result + 40) & 0xC0000000 | v3;
  *(_DWORD *)(result + 40) = v4;
  unsigned int v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 < 7u)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    uint64_t v6 = v5[3];
    if (v6) {
      LODWORD(v6) = (*((unsigned char *)a2 + v6) != 0) << 31;
    }
  }
  int v7 = v6 | v4 & 0x7FFFFFFF;
  *(_DWORD *)(result + 40) = v7;
  uint64_t v8 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v8 < 9u)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v9 = v8[4];
    if (v9) {
      LODWORD(v9) = (*((unsigned char *)a2 + v9) != 0) << 30;
    }
  }
  *(_DWORD *)(result + 40) = v9 | v7 & 0xBFFFFFFF;
  return result;
}

uint64_t ___ZL15getTimebaseInfov_block_invoke()
{
  return mach_timebase_info((mach_timebase_info_t)&getTimebaseInfo(void)::sTimebaseInfo);
}

void __cxx_global_array_dtor()
{
  uint64_t v0 = 0x380u;
  do
  {
    if (AGCLLVMUserMeshShader::replaceBuiltins(void)::workitem_functions[v0 - 41] < 0) {
      operator delete(*(void **)&AGCLLVMUserMeshShader::replaceBuiltins(void)::workitem_functions[v0 - 64]);
    }
    v0 -= 64;
  }
  while (v0);
}

void __cxx_global_array_dtor_421()
{
  uint64_t v0 = 0x4C0u;
  do
  {
    if (AGCLLVMUserMeshShaderSW::replacePreRuntimeLinkBuiltins(void)::workitem_functions[v0 - 41] < 0) {
      operator delete(*(void **)&AGCLLVMUserMeshShaderSW::replacePreRuntimeLinkBuiltins(void)::workitem_functions[v0 - 64]);
    }
    v0 -= 64;
  }
  while (v0);
}

void __cxx_global_array_dtor_512()
{
  uint64_t v0 = 0x3F0u;
  do
  {
    if (AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[v0 - 33] < 0) {
      operator delete(*(void **)&AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[v0 - 56]);
    }
    v0 -= 56;
  }
  while (v0);
}

void __cxx_global_array_dtor_1538()
{
  uint64_t v0 = 0x460u;
  do
  {
    if (AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[v0 - 33] < 0) {
      operator delete(*(void **)&AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[v0 - 56]);
    }
    v0 -= 56;
  }
  while (v0);
}

void __cxx_global_array_dtor_43()
{
  for (uint64_t i = 0; i != -96; i -= 24)
  {
    if (AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(llvm::Type *,std::array<std::function<llvm::Value * ()(void)>,4ul> const&,std::array<int,4ul> const&)::stage_name[i + 95] < 0) {
      operator delete(*(void **)&AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(llvm::Type *,std::array<std::function<llvm::Value * ()(void)>,4ul> const&,std::array<int,4ul> const&)::stage_name[i + 72]);
    }
  }
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74D0](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1F40D7538](bundleID);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

uint64_t LLVMAGXRuntimeMajorVersion()
{
  return MEMORY[0x1F417A8A8]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E7110]();
}

uint64_t flatbuffers::GenerateText()
{
  return MEMORY[0x1F4180850]();
}

uint64_t flatbuffers::Parser::Deserialize(flatbuffers::Parser *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4180858](this, a2);
}

uint64_t llvm::AllocaInst::AllocaInst()
{
  return MEMORY[0x1F417A8B0]();
}

uint64_t llvm::BasicBlock::eraseFromParent(llvm::BasicBlock *this)
{
  return MEMORY[0x1F417A8C0](this);
}

uint64_t llvm::BasicBlock::splitBasicBlock()
{
  return MEMORY[0x1F417A8C8]();
}

uint64_t llvm::BasicBlock::dropAllReferences(llvm::BasicBlock *this)
{
  return MEMORY[0x1F417A8D0](this);
}

uint64_t llvm::BasicBlock::removePredecessor(llvm::BasicBlock *this, llvm::BasicBlock *a2)
{
  return MEMORY[0x1F417A8D8](this, a2);
}

uint64_t llvm::BasicBlock::phis(llvm::BasicBlock *this)
{
  return MEMORY[0x1F417A8E0](this);
}

uint64_t llvm::BasicBlock::BasicBlock()
{
  return MEMORY[0x1F417A8E8]();
}

uint64_t llvm::BranchInst::BranchInst()
{
  return MEMORY[0x1F417A8F0]();
}

{
  return MEMORY[0x1F417A8F8]();
}

uint64_t llvm::ConstantFP::get()
{
  return MEMORY[0x1F417A900]();
}

uint64_t llvm::ConstantFP::getNaN()
{
  return MEMORY[0x1F417A910]();
}

uint64_t llvm::DILocation::getImpl()
{
  return MEMORY[0x1F417A920]();
}

uint64_t llvm::DataLayout::clear(llvm::DataLayout *this)
{
  return MEMORY[0x1F417A928](this);
}

uint64_t llvm::DataLayout::reset()
{
  return MEMORY[0x1F417A930]();
}

void llvm::DataLayout::~DataLayout(llvm::DataLayout *this)
{
}

void llvm::ModulePass::~ModulePass(llvm::ModulePass *this)
{
}

uint64_t llvm::ReturnInst::ReturnInst()
{
  return MEMORY[0x1F417A968]();
}

{
  return MEMORY[0x1F417A978]();
}

uint64_t llvm::StructType::getTypeByName()
{
  return MEMORY[0x1F417A980]();
}

uint64_t llvm::StructType::get()
{
  return MEMORY[0x1F417A988]();
}

{
  return MEMORY[0x1F417A990]();
}

uint64_t llvm::StructType::create()
{
  return MEMORY[0x1F417A9A0]();
}

{
  return MEMORY[0x1F417A9A8]();
}

{
  return MEMORY[0x1F417A9B0]();
}

uint64_t llvm::StructType::setBody()
{
  return MEMORY[0x1F417A9B8]();
}

uint64_t llvm::StructType::setName()
{
  return MEMORY[0x1F417A9C0]();
}

uint64_t llvm::SwitchInst::removeCase()
{
  return MEMORY[0x1F417A9C8]();
}

uint64_t llvm::SwitchInst::addCase()
{
  return MEMORY[0x1F417A9D0]();
}

uint64_t llvm::SwitchInst::SwitchInst()
{
  return MEMORY[0x1F417A9D8]();
}

uint64_t llvm::UndefValue::get()
{
  return MEMORY[0x1F417AA08]();
}

uint64_t llvm::VectorType::get()
{
  return MEMORY[0x1F417AA10]();
}

uint64_t llvm::APFloatBase::IEEEdouble(llvm::APFloatBase *this)
{
  return MEMORY[0x1F417AA18](this);
}

uint64_t llvm::APFloatBase::PPCDoubleDouble(llvm::APFloatBase *this)
{
  return MEMORY[0x1F417AA28](this);
}

uint64_t llvm::BitCastInst::BitCastInst()
{
  return MEMORY[0x1F417AA70]();
}

uint64_t llvm::CloneModule()
{
  return MEMORY[0x1F417AA78]();
}

{
  return MEMORY[0x1F417AA80]();
}

uint64_t llvm::ConstantInt::get()
{
  return MEMORY[0x1F417AA88]();
}

{
  return MEMORY[0x1F417AA98]();
}

uint64_t llvm::ConstantInt::getSigned()
{
  return MEMORY[0x1F417AAC0]();
}

uint64_t llvm::Instruction::moveBefore()
{
  return MEMORY[0x1F417AAF0]();
}

uint64_t llvm::Instruction::insertAfter()
{
  return MEMORY[0x1F417AB08]();
}

uint64_t llvm::Instruction::setMetadata()
{
  return MEMORY[0x1F417AB10]();
}

{
  return MEMORY[0x1F417AB18]();
}

uint64_t llvm::Instruction::insertBefore()
{
  return MEMORY[0x1F417AB28]();
}

uint64_t llvm::Instruction::eraseFromParent(llvm::Instruction *this)
{
  return MEMORY[0x1F417AB40](this);
}

uint64_t llvm::Instruction::setFastMathFlags()
{
  return MEMORY[0x1F417AB50]();
}

uint64_t llvm::Instruction::setHasApproxFunc(llvm::Instruction *this)
{
  return MEMORY[0x1F417AB58](this);
}

uint64_t llvm::Instruction::copyFastMathFlags()
{
  return MEMORY[0x1F417AB60]();
}

uint64_t llvm::Instruction::setHasAllowReassoc(llvm::Instruction *this)
{
  return MEMORY[0x1F417AB70](this);
}

uint64_t llvm::Instruction::setFast(llvm::Instruction *this)
{
  return MEMORY[0x1F417AB88](this);
}

uint64_t llvm::Instruction::moveAfter(llvm::Instruction *this, llvm::Instruction *a2)
{
  return MEMORY[0x1F417AB90](this, a2);
}

uint64_t llvm::Instruction::Instruction()
{
  return MEMORY[0x1F417ABA0]();
}

uint64_t llvm::IntegerType::get()
{
  return MEMORY[0x1F417ABA8]();
}

uint64_t llvm::LLVMContext::setLLVMRemarkStreamer()
{
  return MEMORY[0x1F417ABC0]();
}

uint64_t llvm::LLVMContext::LLVMContext(llvm::LLVMContext *this)
{
  return MEMORY[0x1F417ABD0](this);
}

void llvm::LLVMContext::~LLVMContext(llvm::LLVMContext *this)
{
}

uint64_t llvm::NamedMDNode::addOperand()
{
  return MEMORY[0x1F417ABE0]();
}

uint64_t llvm::NamedMDNode::clearOperands(llvm::NamedMDNode *this)
{
  return MEMORY[0x1F417ABF0](this);
}

uint64_t llvm::NamedMDNode::eraseFromParent(llvm::NamedMDNode *this)
{
  return MEMORY[0x1F417ABF8](this);
}

uint64_t llvm::PointerType::get()
{
  return MEMORY[0x1F417AC98]();
}

uint64_t llvm::PointerType::get(llvm::PointerType *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417ACA0](this, a2);
}

uint64_t llvm::ValueMapper::remapInstruction(llvm::ValueMapper *this, llvm::Instruction *a2)
{
  return MEMORY[0x1F417ACE0](this, a2);
}

uint64_t llvm::ValueMapper::ValueMapper()
{
  return MEMORY[0x1F417ACF0]();
}

void llvm::ValueMapper::~ValueMapper(llvm::ValueMapper *this)
{
}

uint64_t llvm::raw_ostream::flush_nonempty(llvm::raw_ostream *this)
{
  return MEMORY[0x1F417AD08](this);
}

uint64_t llvm::raw_ostream::write(llvm::raw_ostream *this, const char *a2)
{
  return MEMORY[0x1F417AD18](this, a2);
}

void llvm::raw_ostream::~raw_ostream(llvm::raw_ostream *this)
{
}

uint64_t llvm::ConstantExpr::getBitCast()
{
  return MEMORY[0x1F417AD98]();
}

uint64_t llvm::ConstantExpr::getIntToPtr()
{
  return MEMORY[0x1F417ADA8]();
}

uint64_t llvm::ConstantExpr::getPtrToInt()
{
  return MEMORY[0x1F417ADB0]();
}

uint64_t llvm::ConstantExpr::getPointerCast()
{
  return MEMORY[0x1F417ADB8]();
}

uint64_t llvm::FunctionType::get()
{
  return MEMORY[0x1F417ADE8]();
}

{
  return MEMORY[0x1F417ADF0]();
}

uint64_t llvm::GlobalObject::setSection()
{
  return MEMORY[0x1F417AE00]();
}

uint64_t llvm::GlobalObject::setAlignment()
{
  return MEMORY[0x1F417AE10]();
}

uint64_t llvm::IntEqClasses::uncompress(llvm::IntEqClasses *this)
{
  return MEMORY[0x1F417AE38](this);
}

uint64_t llvm::IntEqClasses::grow(llvm::IntEqClasses *this)
{
  return MEMORY[0x1F417AE40](this);
}

uint64_t llvm::IntEqClasses::join(llvm::IntEqClasses *this)
{
  return MEMORY[0x1F417AE48](this);
}

uint64_t llvm::IntEqClasses::compress(llvm::IntEqClasses *this)
{
  return MEMORY[0x1F417AE50](this);
}

uint64_t llvm::MemoryBuffer::getMemBuffer()
{
  return MEMORY[0x1F417AE88]();
}

uint64_t llvm::MemoryBuffer::getFile()
{
  return MEMORY[0x1F417AE98]();
}

uint64_t llvm::PassRegistry::getPassRegistry(llvm::PassRegistry *this)
{
  return MEMORY[0x1F417AEA8](this);
}

uint64_t llvm::verifyModule()
{
  return MEMORY[0x1F417AEC8]();
}

uint64_t llvm::AnalysisUsage::addRequiredID(llvm::AnalysisUsage *this, char *a2)
{
  return MEMORY[0x1F417AED0](this, a2);
}

uint64_t llvm::AtomicRMWInst::AtomicRMWInst()
{
  return MEMORY[0x1F417AEE0]();
}

uint64_t llvm::AttributeList::get()
{
  return MEMORY[0x1F417AEF0]();
}

uint64_t llvm::ConstantArray::get()
{
  return MEMORY[0x1F417AF18]();
}

uint64_t llvm::IRBuilderBase::CreateMemSet()
{
  return MEMORY[0x1F417AF30]();
}

uint64_t llvm::IRBuilderBase::CreateSelect()
{
  return MEMORY[0x1F417AF38]();
}

uint64_t llvm::IRBuilderBase::CreateFCmpHelper()
{
  return MEMORY[0x1F417AF40]();
}

uint64_t llvm::IRBuilderBase::CreateLifetimeEnd()
{
  return MEMORY[0x1F417AF48]();
}

uint64_t llvm::IRBuilderBase::CreateLifetimeStart()
{
  return MEMORY[0x1F417AF50]();
}

uint64_t llvm::IRBuilderBase::CreateMemTransferInst()
{
  return MEMORY[0x1F417AF58]();
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPCast()
{
  return MEMORY[0x1F417AF60]();
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPBinOp()
{
  return MEMORY[0x1F417AF68]();
}

uint64_t llvm::StringMapImpl::RehashTable(llvm::StringMapImpl *this)
{
  return MEMORY[0x1F417AF80](this);
}

uint64_t llvm::StringMapImpl::LookupBucketFor()
{
  return MEMORY[0x1F417AF88]();
}

uint64_t llvm::StringMapImpl::RemoveKey()
{
  return MEMORY[0x1F417AF90]();
}

uint64_t llvm::StringMapImpl::StringMapImpl(llvm::StringMapImpl *this)
{
  return MEMORY[0x1F417AF98](this);
}

uint64_t llvm::UnaryOperator::Create()
{
  return MEMORY[0x1F417AFA0]();
}

uint64_t llvm::initializeIPO(llvm *this, llvm::PassRegistry *a2)
{
  return MEMORY[0x1F417AFB8](this, a2);
}

uint64_t llvm::BinaryOperator::Create()
{
  return MEMORY[0x1F417AFD0]();
}

uint64_t llvm::BinaryOperator::CreateNeg()
{
  return MEMORY[0x1F417AFD8]();
}

uint64_t llvm::BinaryOperator::CreateNot()
{
  return MEMORY[0x1F417AFE0]();
}

uint64_t llvm::ConstantStruct::get()
{
  return MEMORY[0x1F417AFF0]();
}

uint64_t llvm::ConstantVector::get()
{
  return MEMORY[0x1F417AFF8]();
}

void llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>()
{
  while (1)
    ;
}

void llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,true>>()
{
  while (1)
    ;
}

uint64_t llvm::GlobalVariable::setInitializer()
{
  return MEMORY[0x1F417B008]();
}

uint64_t llvm::GlobalVariable::eraseFromParent(llvm::GlobalVariable *this)
{
  return MEMORY[0x1F417B010](this);
}

uint64_t llvm::GlobalVariable::GlobalVariable()
{
  return MEMORY[0x1F417B030]();
}

uint64_t llvm::InlineFunction()
{
  return MEMORY[0x1F417B040]();
}

uint64_t llvm::createLICMPass(llvm *this)
{
  return MEMORY[0x1F417B088](this);
}

uint64_t llvm::createSROAPass(llvm *this)
{
  return MEMORY[0x1F417B098](this);
}

uint64_t llvm::initializeCore(llvm *this, llvm::PassRegistry *a2)
{
  return MEMORY[0x1F417B0A8](this, a2);
}

uint64_t llvm::CloneBasicBlock()
{
  return MEMORY[0x1F417B0D0]();
}

uint64_t llvm::FixedVectorType::get()
{
  return MEMORY[0x1F417B0D8]();
}

void llvm::IRBuilderFolder::~IRBuilderFolder(llvm::IRBuilderFolder *this)
{
}

uint64_t llvm::InsertValueInst::init()
{
  return MEMORY[0x1F417B0E8]();
}

uint64_t llvm::MemoryBufferRef::MemoryBufferRef()
{
  return MEMORY[0x1F417B138]();
}

void llvm::SmallVectorBase<unsigned int>::mallocForGrow()
{
  while (1)
    ;
}

void llvm::SmallVectorBase<unsigned int>::grow_pod()
{
  while (1)
    ;
}

void llvm::SmallVectorBase<unsigned long long>::grow_pod()
{
  while (1)
    ;
}

uint64_t llvm::ValueAsMetadata::get()
{
  return MEMORY[0x1F417B168]();
}

uint64_t llvm::ValueHandleBase::AddToUseList(llvm::ValueHandleBase *this)
{
  return MEMORY[0x1F417B170](this);
}

uint64_t llvm::ValueHandleBase::RemoveFromUseList(llvm::ValueHandleBase *this)
{
  return MEMORY[0x1F417B178](this);
}

uint64_t llvm::ValueHandleBase::AddToExistingUseList(llvm::ValueHandleBase *this, llvm::ValueHandleBase **a2)
{
  return MEMORY[0x1F417B180](this, a2);
}

uint64_t llvm::allocate_buffer(llvm *this)
{
  return MEMORY[0x1F417B188](this);
}

uint64_t llvm::ExtractValueInst::getIndexedType()
{
  return MEMORY[0x1F417B1A8]();
}

uint64_t llvm::ExtractValueInst::init()
{
  return MEMORY[0x1F417B1B0]();
}

uint64_t llvm::MetadataTracking::track()
{
  return MEMORY[0x1F417B228]();
}

uint64_t llvm::MetadataTracking::retrack()
{
  return MEMORY[0x1F417B230]();
}

uint64_t llvm::MetadataTracking::untrack()
{
  return MEMORY[0x1F417B238]();
}

uint64_t llvm::createNewGVNPass(llvm *this)
{
  return MEMORY[0x1F417B268](this);
}

uint64_t llvm::parseBitcodeFile()
{
  return MEMORY[0x1F417B288]();
}

uint64_t llvm::AtomicCmpXchgInst::AtomicCmpXchgInst()
{
  return MEMORY[0x1F417B298]();
}

uint64_t llvm::CloneFunctionInto()
{
  return MEMORY[0x1F417B2A8]();
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::DominatorTreeBase()
{
  while (1)
    ;
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::operator=()
{
  while (1)
    ;
}

uint64_t llvm::GetElementPtrInst::setIsInBounds(llvm::GetElementPtrInst *this)
{
  return MEMORY[0x1F417B2B8](this);
}

uint64_t llvm::GetElementPtrInst::getIndexedType()
{
  return MEMORY[0x1F417B2C0]();
}

uint64_t llvm::GetElementPtrInst::init()
{
  return MEMORY[0x1F417B2C8]();
}

uint64_t llvm::InsertElementInst::InsertElementInst()
{
  return MEMORY[0x1F417B2D0]();
}

uint64_t llvm::ShuffleVectorInst::getShuffleMask()
{
  return MEMORY[0x1F417B2E8]();
}

uint64_t llvm::ShuffleVectorInst::ShuffleVectorInst()
{
  return MEMORY[0x1F417B320]();
}

uint64_t llvm::deallocate_buffer(llvm *this, void *a2)
{
  return MEMORY[0x1F417B348](this, a2);
}

uint64_t llvm::ConstantDataVector::getSplat()
{
  return MEMORY[0x1F417B360]();
}

uint64_t llvm::ExtractElementInst::ExtractElementInst()
{
  return MEMORY[0x1F417B368]();
}

uint64_t llvm::initializeAnalysis(llvm *this, llvm::PassRegistry *a2)
{
  return MEMORY[0x1F417B3E8](this, a2);
}

uint64_t llvm::ConstantPointerNull::get(llvm::ConstantPointerNull *this, llvm::PointerType *a2)
{
  return MEMORY[0x1F417B408](this, a2);
}

uint64_t llvm::ReplaceInstWithInst(llvm *this, llvm::Instruction *a2, llvm::Instruction *a3)
{
  return MEMORY[0x1F417B420](this, a2, a3);
}

uint64_t llvm::SmallPtrSetImplBase::insert_imp_big(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  return MEMORY[0x1F417B428](this, a2);
}

uint64_t llvm::SmallPtrSetImplBase::CopyFrom(llvm::SmallPtrSetImplBase *this, const llvm::SmallPtrSetImplBase *a2)
{
  return MEMORY[0x1F417B438](this, a2);
}

uint64_t llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(llvm::SmallPtrSetImplBase *this, const void **a2, const llvm::SmallPtrSetImplBase *a3)
{
  return MEMORY[0x1F417B440](this, a2, a3);
}

uint64_t llvm::SmallPtrSetImplBase::SmallPtrSetImplBase()
{
  return MEMORY[0x1F417B448]();
}

uint64_t llvm::createGlobalDCEPass(llvm *this)
{
  return MEMORY[0x1F417B488](this);
}

uint64_t llvm::parseAssemblyString()
{
  return MEMORY[0x1F417B4B0]();
}

uint64_t llvm::appendToCompilerUsed()
{
  return MEMORY[0x1F417B4E0]();
}

uint64_t llvm::getAsUnsignedInteger()
{
  return MEMORY[0x1F417B508]();
}

uint64_t llvm::initializeScalarOpts(llvm *this, llvm::PassRegistry *a2)
{
  return MEMORY[0x1F417B528](this, a2);
}

uint64_t llvm::ConstantAggregateZero::get()
{
  return MEMORY[0x1F417B548]();
}

void llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList()
{
  while (1)
    ;
}

void llvm::SymbolTableListTraits<llvm::Function>::addNodeToList()
{
  while (1)
    ;
}

void llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList()
{
  while (1)
    ;
}

uint64_t llvm::initializeInstCombine(llvm *this, llvm::PassRegistry *a2)
{
  return MEMORY[0x1F417B5A8](this, a2);
}

uint64_t llvm::ConstantFoldTerminator()
{
  return MEMORY[0x1F417B5B8]();
}

uint64_t llvm::createGPUAAWrapperPass(llvm *this)
{
  return MEMORY[0x1F417B600](this);
}

uint64_t llvm::createAggressiveDCEPass(llvm *this)
{
  return MEMORY[0x1F417B650](this);
}

uint64_t llvm::initializeVectorization(llvm *this, llvm::PassRegistry *a2)
{
  return MEMORY[0x1F417B658](this, a2);
}

void llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter(llvm::IRBuilderDefaultInserter *this)
{
}

uint64_t llvm::createBasicAAWrapperPass(llvm *this)
{
  return MEMORY[0x1F417B6D0](this);
}

uint64_t llvm::createIndVarSimplifyPass(llvm *this)
{
  return MEMORY[0x1F417B6E0](this);
}

uint64_t llvm::initializeTransformUtils(llvm *this, llvm::PassRegistry *a2)
{
  return MEMORY[0x1F417B6F0](this, a2);
}

uint64_t llvm::MergeBlockIntoPredecessor()
{
  return MEMORY[0x1F417B720]();
}

uint64_t llvm::createGlobalOptimizerPass(llvm *this)
{
  return MEMORY[0x1F417B740](this);
}

uint64_t llvm::remapInstructionsInBlocks()
{
  return MEMORY[0x1F417B768]();
}

uint64_t llvm::createSimpleLoopUnrollPass(llvm *this)
{
  return MEMORY[0x1F417B7A8](this);
}

uint64_t llvm::createCFGSimplificationPass()
{
  return MEMORY[0x1F417B7E0]();
}

uint64_t llvm::TargetLibraryInfoWrapperPass::TargetLibraryInfoWrapperPass()
{
  return MEMORY[0x1F417B800]();
}

uint64_t llvm::createTypeBasedAAWrapperPass(llvm *this)
{
  return MEMORY[0x1F417B818](this);
}

uint64_t llvm::createAlwaysInlinerLegacyPass(llvm *this)
{
  return MEMORY[0x1F417B820](this);
}

uint64_t llvm::createDeadCodeEliminationPass(llvm *this)
{
  return MEMORY[0x1F417B828](this);
}

uint64_t llvm::errorToErrorCodeAndEmitErrors()
{
  return MEMORY[0x1F417B848]();
}

uint64_t llvm::createDeadStoreEliminationPass(llvm *this)
{
  return MEMORY[0x1F417B898](this);
}

uint64_t llvm::createInstructionCombiningPass(llvm *this)
{
  return MEMORY[0x1F417B8A0](this);
}

uint64_t llvm::createScopedNoAliasAAWrapperPass(llvm *this)
{
  return MEMORY[0x1F417B8C8](this);
}

uint64_t llvm::createUnifyFunctionExitNodesPass(llvm *this)
{
  return MEMORY[0x1F417B8D0](this);
}

uint64_t llvm::createPostOrderFunctionAttrsLegacyPass(llvm *this)
{
  return MEMORY[0x1F417B958](this);
}

uint64_t llvm::AGX::AGXCompiler::createCompilePlan()
{
  return MEMORY[0x1F417B970]();
}

uint64_t llvm::AGX::AGXCompiler::getLastDiagnostics(llvm::AGX::AGXCompiler *this)
{
  return MEMORY[0x1F417B978](this);
}

uint64_t llvm::AGX::AGXCompiler::create()
{
  return MEMORY[0x1F417B980]();
}

uint64_t llvm::AGX::AGXCompiler::AGXCompiler()
{
  return MEMORY[0x1F417B988]();
}

void llvm::AGX::AGXCompiler::~AGXCompiler(llvm::AGX::AGXCompiler *this)
{
}

uint64_t llvm::AGX::CompileReply::getDiagnostics(llvm::AGX::CompileReply *this)
{
  return MEMORY[0x1F417B998](this);
}

uint64_t llvm::AGX::CompileReply::getBinary(llvm::AGX::CompileReply *this)
{
  return MEMORY[0x1F417B9A0](this);
}

uint64_t llvm::AGX::CompileReply::CompileReply()
{
  return MEMORY[0x1F417B9A8]();
}

void llvm::AGX::CompileReply::~CompileReply(llvm::AGX::CompileReply *this)
{
}

uint64_t llvm::AGX::AGXCompilePlan::collectConfiguration()
{
  return MEMORY[0x1F417B9B8]();
}

uint64_t llvm::AGX::AGXCompilePlan::execute()
{
  return MEMORY[0x1F417B9C0]();
}

uint64_t llvm::AGX::AGXCompilePlan::AGXCompilePlan()
{
  return MEMORY[0x1F417B9C8]();
}

void llvm::AGX::AGXCompilePlan::~AGXCompilePlan(llvm::AGX::AGXCompilePlan *this)
{
}

uint64_t llvm::AGX::CompileRequest::addSegments()
{
  return MEMORY[0x1F417B9D8]();
}

uint64_t llvm::AGX::CompileRequest::addDMAListEntry(llvm::AGX::CompileRequest *this)
{
  return MEMORY[0x1F417B9E0](this);
}

uint64_t llvm::AGX::CompileRequest::setLoggingStream()
{
  return MEMORY[0x1F417B9E8]();
}

uint64_t llvm::AGX::CompileRequest::CompileRequest()
{
  return MEMORY[0x1F417B9F0]();
}

void llvm::AGX::CompileRequest::~CompileRequest(llvm::AGX::CompileRequest *this)
{
}

uint64_t llvm::AGX::TelemetryCollector::startCollection(llvm::AGX::TelemetryCollector *this)
{
  return MEMORY[0x1F417BA00](this);
}

uint64_t llvm::AGX::TelemetryCollector::finishCollection(llvm::AGX::TelemetryCollector *this)
{
  return MEMORY[0x1F417BA08](this);
}

uint64_t llvm::AGX::TelemetryCollector::enable(llvm::AGX::TelemetryCollector *this)
{
  return MEMORY[0x1F417BA10](this);
}

uint64_t llvm::AGX::TelemetryCollector::TelemetryCollector(llvm::AGX::TelemetryCollector *this)
{
  return MEMORY[0x1F417BA18](this);
}

void llvm::AGX::TelemetryCollector::~TelemetryCollector(llvm::AGX::TelemetryCollector *this)
{
}

uint64_t llvm::AGX::operator<<()
{
  return MEMORY[0x1F417BA28]();
}

{
  return MEMORY[0x1F417BA30]();
}

uint64_t llvm::RecursivelyDeleteTriviallyDeadInstructions()
{
  return MEMORY[0x1F417BBB0]();
}

void llvm::Pass::~Pass(llvm::Pass *this)
{
}

uint64_t llvm::Type::getFloatTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BBD8](this, a2);
}

uint64_t llvm::Type::getInt16Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BBE0](this, a2);
}

uint64_t llvm::Type::getInt32Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BBE8](this, a2);
}

uint64_t llvm::Type::getInt64Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BBF0](this, a2);
}

uint64_t llvm::Type::getBFloatTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BBF8](this, a2);
}

uint64_t llvm::Type::getInt8PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BC08](this, a2);
}

uint64_t llvm::Type::getFloatPtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BC18](this, a2);
}

uint64_t llvm::Type::getInt32PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BC20](this, a2);
}

uint64_t llvm::Type::getHalfTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BC30](this, a2);
}

uint64_t llvm::Type::getInt1Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BC38](this, a2);
}

uint64_t llvm::Type::getInt8Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BC40](this, a2);
}

uint64_t llvm::Type::getIntNTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BC48](this, a2);
}

uint64_t llvm::Type::getVoidTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return MEMORY[0x1F417BC50](this, a2);
}

uint64_t llvm::User::getDescriptor(llvm::User *this)
{
  return MEMORY[0x1F417BC58](this);
}

uint64_t llvm::User::allocHungoffUses(llvm::User *this)
{
  return MEMORY[0x1F417BC60](this);
}

uint64_t llvm::User::replaceUsesOfWith()
{
  return MEMORY[0x1F417BC68]();
}

uint64_t llvm::User::operator new(llvm::User *this)
{
  return MEMORY[0x1F417BC78](this);
}

{
  return MEMORY[0x1F417BC80](this);
}

{
  return MEMORY[0x1F417BC88](this);
}

uint64_t llvm::dbgs(llvm *this)
{
  return MEMORY[0x1F417BC90](this);
}

uint64_t llvm::errs(llvm *this)
{
  return MEMORY[0x1F417BC98](this);
}

uint64_t llvm::APInt::initSlowCase(llvm::APInt *this)
{
  return MEMORY[0x1F417BCE8](this);
}

void llvm::Regex::~Regex(llvm::Regex *this)
{
}

uint64_t llvm::Value::replaceAllUsesWith()
{
  return MEMORY[0x1F417BDB0]();
}

uint64_t llvm::Value::setName()
{
  return MEMORY[0x1F417BDC0]();
}

uint64_t llvm::Value::takeName()
{
  return MEMORY[0x1F417BDC8]();
}

uint64_t llvm::Linker::linkModules()
{
  return MEMORY[0x1F417BDD8]();
}

uint64_t llvm::MDNode::replaceOperandWith()
{
  return MEMORY[0x1F417BE08]();
}

uint64_t llvm::Module::materialize()
{
  return MEMORY[0x1F417BE20]();
}

uint64_t llvm::Module::addModuleFlag()
{
  return MEMORY[0x1F417BE30]();
}

uint64_t llvm::Module::setDataLayout()
{
  return MEMORY[0x1F417BE40]();
}

uint64_t llvm::Module::eraseNamedMetadata(llvm::Module *this, llvm::NamedMDNode *a2)
{
  return MEMORY[0x1F417BE68](this, a2);
}

uint64_t llvm::Module::getOrInsertFunction()
{
  return MEMORY[0x1F417BE70]();
}

{
  return MEMORY[0x1F417BE78]();
}

uint64_t llvm::Module::getOrInsertNamedMetadata()
{
  return MEMORY[0x1F417BE90]();
}

uint64_t llvm::Module::Module()
{
  return MEMORY[0x1F417BE98]();
}

void llvm::Module::~Module(llvm::Module *this)
{
}

uint64_t llvm::Triple::Triple()
{
  return MEMORY[0x1F417BF40]();
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, double a2)
{
  return MEMORY[0x1F417BFC0](this, a2);
}

void llvm::detail::IEEEFloat::~IEEEFloat(llvm::detail::IEEEFloat *this)
{
}

uint64_t llvm::legacy::PassManager::run(llvm::legacy::PassManager *this, llvm::Module *a2)
{
  return MEMORY[0x1F417BFE8](this, a2);
}

uint64_t llvm::legacy::PassManager::PassManager(llvm::legacy::PassManager *this)
{
  return MEMORY[0x1F417BFF0](this);
}

uint64_t llvm::APFloat::Storage::Storage()
{
  return MEMORY[0x1F417C058]();
}

uint64_t llvm::APFloat::convert()
{
  return MEMORY[0x1F417C060]();
}

uint64_t llvm::CmpInst::CmpInst()
{
  return MEMORY[0x1F417C068]();
}

uint64_t llvm::MDTuple::getImpl()
{
  return MEMORY[0x1F417C0D0]();
}

uint64_t llvm::PHINode::growOperands(llvm::PHINode *this)
{
  return MEMORY[0x1F417C0D8](this);
}

uint64_t llvm::parseIR()
{
  return MEMORY[0x1F417C0E0]();
}

uint64_t llvm::remarks::RemarkStreamer::RemarkStreamer()
{
  return MEMORY[0x1F417C0E8]();
}

uint64_t llvm::remarks::YAMLRemarkSerializer::YAMLRemarkSerializer()
{
  return MEMORY[0x1F417C0F0]();
}

uint64_t llvm::CallInst::init()
{
  return MEMORY[0x1F417C120]();
}

uint64_t llvm::CastInst::CreateFPCast()
{
  return MEMORY[0x1F417C138]();
}

uint64_t llvm::CastInst::CreateIntegerCast()
{
  return MEMORY[0x1F417C140]();
}

uint64_t llvm::CastInst::CreatePointerCast()
{
  return MEMORY[0x1F417C148]();
}

uint64_t llvm::CastInst::CreateZExtOrBitCast()
{
  return MEMORY[0x1F417C150]();
}

uint64_t llvm::CastInst::CreateTruncOrBitCast()
{
  return MEMORY[0x1F417C158]();
}

uint64_t llvm::CastInst::Create()
{
  return MEMORY[0x1F417C160]();
}

uint64_t llvm::Constant::getNullValue(llvm::Constant *this, llvm::Type *a2)
{
  return MEMORY[0x1F417C168](this, a2);
}

uint64_t llvm::Constant::destroyConstant(llvm::Constant *this)
{
  return MEMORY[0x1F417C170](this);
}

uint64_t llvm::Constant::getAllOnesValue(llvm::Constant *this, llvm::Type *a2)
{
  return MEMORY[0x1F417C178](this, a2);
}

uint64_t llvm::Constant::getIntegerValue(llvm::Constant *this, llvm::Type *a2, const llvm::APInt *a3)
{
  return MEMORY[0x1F417C180](this, a2, a3);
}

uint64_t llvm::DebugLoc::DebugLoc()
{
  return MEMORY[0x1F417C190]();
}

uint64_t llvm::Function::addRetAttr()
{
  return MEMORY[0x1F417C198]();
}

uint64_t llvm::Function::addParamAttr()
{
  return MEMORY[0x1F417C1A0]();
}

uint64_t llvm::Function::removeFnAttr()
{
  return MEMORY[0x1F417C1B0]();
}

{
  return MEMORY[0x1F417C1B8]();
}

uint64_t llvm::Function::setPrefixData(llvm::Function *this, llvm::Constant *a2)
{
  return MEMORY[0x1F417C1D8](this, a2);
}

uint64_t llvm::Function::setSubprogram()
{
  return MEMORY[0x1F417C1E0]();
}

uint64_t llvm::Function::eraseFromParent(llvm::Function *this)
{
  return MEMORY[0x1F417C1E8](this);
}

uint64_t llvm::Function::dropAllReferences(llvm::Function *this)
{
  return MEMORY[0x1F417C200](this);
}

uint64_t llvm::Function::stealArgumentListFrom(llvm::Function *this, llvm::Function *a2)
{
  return MEMORY[0x1F417C210](this, a2);
}

uint64_t llvm::Function::addFnAttr()
{
  return MEMORY[0x1F417C220]();
}

{
  return MEMORY[0x1F417C228]();
}

uint64_t llvm::Function::Function()
{
  return MEMORY[0x1F417C230]();
}

uint64_t llvm::LoadInst::LoadInst()
{
  return MEMORY[0x1F417C258]();
}

uint64_t llvm::MDString::get()
{
  return MEMORY[0x1F417C260]();
}

uint64_t llvm::ArrayType::get(llvm::ArrayType *this, llvm::Type *a2)
{
  return MEMORY[0x1F417C290](this, a2);
}

uint64_t llvm::Attribute::get()
{
  return MEMORY[0x1F417C2B0]();
}

uint64_t llvm::CallGraph::CallGraph(llvm::CallGraph *this, llvm::Module *a2)
{
  return MEMORY[0x1F417C2C8](this, a2);
}

void llvm::CallGraph::~CallGraph(llvm::CallGraph *this)
{
}

uint64_t llvm::Intrinsic::getDeclaration()
{
  return MEMORY[0x1F417C2F0]();
}

uint64_t llvm::Intrinsic::matchIntrinsicSignature()
{
  return MEMORY[0x1F417C300]();
}

uint64_t llvm::Intrinsic::getIntrinsicInfoTableEntries()
{
  return MEMORY[0x1F417C310]();
}

uint64_t llvm::StoreInst::StoreInst()
{
  return MEMORY[0x1F417C368]();
}

uint64_t llvm::BasicBlock::getFirstNonPHI(llvm::BasicBlock *this)
{
  return MEMORY[0x1F417C390](this);
}

uint64_t llvm::BasicBlock::getFirstInsertionPt(llvm::BasicBlock *this)
{
  return MEMORY[0x1F417C398](this);
}

uint64_t llvm::BasicBlock::getSinglePredecessor(llvm::BasicBlock *this)
{
  return MEMORY[0x1F417C3A0](this);
}

uint64_t llvm::BasicBlock::getModule(llvm::BasicBlock *this)
{
  return MEMORY[0x1F417C3A8](this);
}

uint64_t llvm::ConstantFP::isExactlyValue()
{
  return MEMORY[0x1F417C3B0]();
}

uint64_t llvm::DataLayout::getABITypeAlign(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x1F417C3D8](this, a2);
}

uint64_t llvm::DataLayout::getStructLayout()
{
  return MEMORY[0x1F417C3E0]();
}

uint64_t llvm::DataLayout::getPrefTypeAlign(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x1F417C3E8](this, a2);
}

uint64_t llvm::DataLayout::getABITypeAlignment(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x1F417C3F0](this, a2);
}

uint64_t llvm::DataLayout::getPointerAlignElem(llvm::DataLayout *this)
{
  return MEMORY[0x1F417C3F8](this);
}

uint64_t llvm::DataLayout::getPrefTypeAlignment(llvm::DataLayout *this, llvm::Type *a2)
{
  return MEMORY[0x1F417C400](this, a2);
}

uint64_t llvm::DataLayout::getIndexedOffsetInType()
{
  return MEMORY[0x1F417C410]();
}

uint64_t llvm::StructType::getTypeAtIndex()
{
  return MEMORY[0x1F417C428]();
}

uint64_t llvm::StructType::getName(llvm::StructType *this)
{
  return MEMORY[0x1F417C430](this);
}

uint64_t llvm::GEPOperator::getSourceElementType(llvm::GEPOperator *this)
{
  return MEMORY[0x1F417C448](this);
}

uint64_t llvm::GlobalValue::isDeclaration(llvm::GlobalValue *this)
{
  return MEMORY[0x1F417C460](this);
}

uint64_t llvm::GlobalValue::hasExternalWeakLinkage(llvm::GlobalValue *this)
{
  return MEMORY[0x1F417C470](this);
}

uint64_t llvm::Instruction::comesBefore(llvm::Instruction *this, const llvm::Instruction *a2)
{
  return MEMORY[0x1F417C478](this, a2);
}

uint64_t llvm::Instruction::getFunction(llvm::Instruction *this)
{
  return MEMORY[0x1F417C480](this);
}

uint64_t llvm::Instruction::getSuccessor(llvm::Instruction *this)
{
  return MEMORY[0x1F417C488](this);
}

uint64_t llvm::Instruction::isIdenticalTo(llvm::Instruction *this, const llvm::Instruction *a2)
{
  return MEMORY[0x1F417C498](this, a2);
}

uint64_t llvm::Instruction::getMetadataImpl()
{
  return MEMORY[0x1F417C4A0]();
}

uint64_t llvm::Instruction::getFastMathFlags(llvm::Instruction *this)
{
  return MEMORY[0x1F417C4B0](this);
}

uint64_t llvm::Instruction::getNumSuccessors(llvm::Instruction *this)
{
  return MEMORY[0x1F417C4B8](this);
}

uint64_t llvm::Instruction::getNextNonDebugInstruction(llvm::Instruction *this)
{
  return MEMORY[0x1F417C4F0](this);
}

uint64_t llvm::Instruction::clone(llvm::Instruction *this)
{
  return MEMORY[0x1F417C4F8](this);
}

uint64_t llvm::NamedMDNode::getOperand(llvm::NamedMDNode *this)
{
  return MEMORY[0x1F417C568](this);
}

uint64_t llvm::NamedMDNode::getNumOperands(llvm::NamedMDNode *this)
{
  return MEMORY[0x1F417C570](this);
}

uint64_t llvm::AttributeSet::addAttribute()
{
  return MEMORY[0x1F417C588]();
}

uint64_t llvm::AttributeSet::removeAttribute()
{
  return MEMORY[0x1F417C5A8]();
}

uint64_t llvm::ConstantExpr::getPredicate(llvm::ConstantExpr *this)
{
  return MEMORY[0x1F417C5C0](this);
}

uint64_t llvm::ConstantExpr::getWithOperands()
{
  return MEMORY[0x1F417C5C8]();
}

uint64_t llvm::ConstantExpr::getAsInstruction(llvm::ConstantExpr *this, llvm::Instruction *a2)
{
  return MEMORY[0x1F417C5D0](this, a2);
}

uint64_t llvm::DILocalScope::getNonLexicalBlockFileScope(llvm::DILocalScope *this)
{
  return MEMORY[0x1F417C5E8](this);
}

uint64_t llvm::GlobalObject::getSectionImpl(llvm::GlobalObject *this)
{
  return MEMORY[0x1F417C5F0](this);
}

uint64_t llvm::MemoryBuffer::getMemBufferRef(llvm::MemoryBuffer *this)
{
  return MEMORY[0x1F417C5F8](this);
}

uint64_t llvm::SMDiagnostic::print(llvm::SMDiagnostic *this, const char *a2, llvm::raw_ostream *a3)
{
  return MEMORY[0x1F417C608](this, a2, a3);
}

uint64_t llvm::AttributeList::getFnAttrs(llvm::AttributeList *this)
{
  return MEMORY[0x1F417C620](this);
}

uint64_t llvm::AttributeList::getParamAlignment(llvm::AttributeList *this)
{
  return MEMORY[0x1F417C648](this);
}

uint64_t llvm::AttributeList::addAttributeAtIndex()
{
  return MEMORY[0x1F417C650]();
}

{
  return MEMORY[0x1F417C658]();
}

uint64_t llvm::AttributeList::getAttributeAtIndex()
{
  return MEMORY[0x1F417C668]();
}

uint64_t llvm::AttributeList::hasFnAttr()
{
  return MEMORY[0x1F417C698]();
}

{
  return MEMORY[0x1F417C6A0]();
}

uint64_t llvm::DominatorTree::dominates()
{
  return MEMORY[0x1F417C6A8]();
}

uint64_t llvm::IRBuilderBase::getCurrentDebugLocation(llvm::IRBuilderBase *this)
{
  return MEMORY[0x1F417C6B0](this);
}

uint64_t llvm::StringMapImpl::FindKey()
{
  return MEMORY[0x1F417C6B8]();
}

uint64_t llvm::TargetExtType::getLayoutType(llvm::TargetExtType *this)
{
  return MEMORY[0x1F417C6C0](this);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator()
{
  while (1)
    ;
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator()
{
  while (1)
    ;
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::print()
{
  while (1)
    ;
}

uint64_t llvm::GetElementPtrInst::isInBounds(llvm::GetElementPtrInst *this)
{
  return MEMORY[0x1F417C6E8](this);
}

uint64_t llvm::GetElementPtrInst::hasAllConstantIndices(llvm::GetElementPtrInst *this)
{
  return MEMORY[0x1F417C6F0](this);
}

uint64_t llvm::SmallPtrSetImplBase::FindBucketFor(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  return MEMORY[0x1F417C728](this, a2);
}

uint64_t llvm::ConstantDataSequential::getElementAsInteger(llvm::ConstantDataSequential *this)
{
  return MEMORY[0x1F417C770](this);
}

uint64_t llvm::AGX::Diagnostic::getMessage(llvm::AGX::Diagnostic *this)
{
  return MEMORY[0x1F417C7C8](this);
}

uint64_t llvm::AGX::AGXCompiler::isValid(llvm::AGX::AGXCompiler *this)
{
  return MEMORY[0x1F417C7D0](this);
}

uint64_t llvm::AGX::CompileReply::isValid(llvm::AGX::CompileReply *this)
{
  return MEMORY[0x1F417C7D8](this);
}

uint64_t llvm::AGX::AGXCompilePlan::isValid(llvm::AGX::AGXCompilePlan *this)
{
  return MEMORY[0x1F417C7E0](this);
}

uint64_t llvm::AGX::CompileRequest::getTelemetryCollector(llvm::AGX::CompileRequest *this)
{
  return MEMORY[0x1F417C7E8](this);
}

uint64_t llvm::AGX::TelemetryCollector::fetchData(llvm::AGX::TelemetryCollector *this)
{
  return MEMORY[0x1F417C7F0](this);
}

uint64_t llvm::LLT::print(llvm::LLT *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x1F417C7F8](this, a2);
}

uint64_t llvm::Use::getOperandNo(llvm::Use *this)
{
  return MEMORY[0x1F417C800](this);
}

uint64_t llvm::Type::isIntegerTy(llvm::Type *this)
{
  return MEMORY[0x1F417C810](this);
}

uint64_t llvm::Type::getPointerTo(llvm::Type *this)
{
  return MEMORY[0x1F417C818](this);
}

uint64_t llvm::Type::isOpaquePointerTy(llvm::Type *this)
{
  return MEMORY[0x1F417C828](this);
}

uint64_t llvm::Type::getFPMantissaWidth(llvm::Type *this)
{
  return MEMORY[0x1F417C830](this);
}

uint64_t llvm::Type::getScalarSizeInBits(llvm::Type *this)
{
  return MEMORY[0x1F417C840](this);
}

uint64_t llvm::Type::getPrimitiveSizeInBits(llvm::Type *this)
{
  return MEMORY[0x1F417C848](this);
}

uint64_t llvm::Type::print(llvm::Type *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x1F417C850](this, a2);
}

uint64_t llvm::APInt::countLeadingZerosSlowCase(llvm::APInt *this)
{
  return MEMORY[0x1F417C870](this);
}

uint64_t llvm::Twine::str(llvm::Twine *this)
{
  return MEMORY[0x1F417C8A0](this);
}

uint64_t llvm::Value::getContext(llvm::Value *this)
{
  return MEMORY[0x1F417C8B8](this);
}

uint64_t llvm::Value::getNumUses(llvm::Value *this)
{
  return MEMORY[0x1F417C8C0](this);
}

uint64_t llvm::Value::getMetadata()
{
  return MEMORY[0x1F417C8C8]();
}

uint64_t llvm::Value::hasNUsesOrMore(llvm::Value *this)
{
  return MEMORY[0x1F417C8D8](this);
}

uint64_t llvm::Value::stripPointerCasts(llvm::Value *this)
{
  return MEMORY[0x1F417C8E0](this);
}

uint64_t llvm::Value::print(llvm::Value *this, llvm::raw_ostream *a2)
{
  return MEMORY[0x1F417C8F0](this, a2);
}

uint64_t llvm::Value::getName(llvm::Value *this)
{
  return MEMORY[0x1F417C8F8](this);
}

uint64_t llvm::Module::getFunction()
{
  return MEMORY[0x1F417C920]();
}

uint64_t llvm::Module::getDataLayout(llvm::Module *this)
{
  return MEMORY[0x1F417C928](this);
}

uint64_t llvm::Module::getNamedMetadata(llvm::Module *this, const llvm::Twine *a2)
{
  return MEMORY[0x1F417C960](this, a2);
}

uint64_t llvm::Module::getGlobalVariable()
{
  return MEMORY[0x1F417C968]();
}

uint64_t llvm::Module::print()
{
  return MEMORY[0x1F417C988]();
}

uint64_t llvm::Triple::getOSVersion(llvm::Triple *this)
{
  return MEMORY[0x1F417C9A8](this);
}

uint64_t llvm::Triple::getEnvironmentName(llvm::Triple *this)
{
  return MEMORY[0x1F417C9C0](this);
}

uint64_t llvm::Argument::hasAttribute()
{
  return MEMORY[0x1F417CBF0]();
}

uint64_t llvm::Argument::hasNoAliasAttr(llvm::Argument *this)
{
  return MEMORY[0x1F417CC08](this);
}

uint64_t llvm::CallBase::paramHasAttr()
{
  return MEMORY[0x1F417CC28]();
}

uint64_t llvm::CallBase::hasReadingOperandBundles(llvm::CallBase *this)
{
  return MEMORY[0x1F417CC40](this);
}

uint64_t llvm::CallBase::hasFnAttrOnCalledFunction()
{
  return MEMORY[0x1F417CC48]();
}

{
  return MEMORY[0x1F417CC50]();
}

uint64_t llvm::CallBase::getNumSubclassExtraOperandsDynamic(llvm::CallBase *this)
{
  return MEMORY[0x1F417CC58](this);
}

uint64_t llvm::Constant::isNullValue(llvm::Constant *this)
{
  return MEMORY[0x1F417CC68](this);
}

uint64_t llvm::Constant::isZeroValue(llvm::Constant *this)
{
  return MEMORY[0x1F417CC70](this);
}

uint64_t llvm::Constant::getAggregateElement(llvm::Constant *this)
{
  return MEMORY[0x1F417CC80](this);
}

uint64_t llvm::Constant::removeDeadConstantUsers(llvm::Constant *this)
{
  return MEMORY[0x1F417CC88](this);
}

uint64_t llvm::Function::getContext(llvm::Function *this)
{
  return MEMORY[0x1F417CC98](this);
}

uint64_t llvm::Function::getSubprogram(llvm::Function *this)
{
  return MEMORY[0x1F417CCA8](this);
}

uint64_t llvm::Function::getFnAttribute()
{
  return MEMORY[0x1F417CCB0]();
}

uint64_t llvm::Function::hasFnAttribute()
{
  return MEMORY[0x1F417CCB8]();
}

{
  return MEMORY[0x1F417CCC0]();
}

uint64_t llvm::Function::BuildLazyArguments(llvm::Function *this)
{
  return MEMORY[0x1F417CCD8](this);
}

uint64_t llvm::MDString::getString(llvm::MDString *this)
{
  return MEMORY[0x1F417CCF0](this);
}

uint64_t llvm::TypeSize::operator unsigned long long()
{
  return MEMORY[0x1F417CD00]();
}

uint64_t llvm::Attribute::getValueAsString(llvm::Attribute *this)
{
  return MEMORY[0x1F417CD48](this);
}

uint64_t llvm::Attribute::isStringAttribute(llvm::Attribute *this)
{
  return MEMORY[0x1F417CD50](this);
}

uint64_t llvm::StringRef::find()
{
  return MEMORY[0x1F417CD90]();
}

uint64_t llvm::StringRef::split()
{
  return MEMORY[0x1F417CDB0]();
}

std::string::size_type std::string::find(const std::string *this, const std::string::value_type *__s, std::string::size_type __pos, std::string::size_type __n)
{
  return MEMORY[0x1F417E378](this, __s, __pos, __n);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E380](this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5E0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1F417E7D8]();
}

{
  return MEMORY[0x1F417E7E8]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8D0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x1F417E950]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1F417E9E0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EBE0](__str, __idx, *(void *)&__base);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE98](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

uint64_t _os_crash_msg()
{
  return MEMORY[0x1F40C9FA8]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1F40C9FF8]();
}

void abort(void)
{
}

uint64_t analytics_send_event()
{
  return MEMORY[0x1F41138D0]();
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void bzero(void *a1, size_t a2)
{
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1F40CB3A8](a1, *(void *)&a2, *(void *)&a3);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA30](data, buffer_ptr, size_ptr);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_release(dispatch_object_t object)
{
}

int dlclose(void *__handle)
{
  return MEMORY[0x1F40CBDA8](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
}

int mkpath_np(const char *path, mode_t omode)
{
  return MEMORY[0x1F40CCE00](path, omode);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

uint64_t os_parse_boot_arg_int()
{
  return MEMORY[0x1F40CD528]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD888](*(void *)&pid, buffer, *(void *)&buffersize);
}

uint64_t random(void)
{
  return MEMORY[0x1F40CDC18]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

void syslog(int a1, const char *a2, ...)
{
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE680](a1, a2, a3);
}

xpc_object_t xpc_copy(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1F40CED00](object);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_release(xpc_object_t object)
{
}