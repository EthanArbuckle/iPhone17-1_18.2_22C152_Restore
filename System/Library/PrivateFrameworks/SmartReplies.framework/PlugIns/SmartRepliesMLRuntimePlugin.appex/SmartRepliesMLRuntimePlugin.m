uint64_t sub_10000458C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  void *v12;
  uint64_t i;
  uint64_t v14;
  BOOL v15;

  if (*a3 != -1) {
    swift_once();
  }
  v7 = *(void **)a4;
  v8 = *(void *)(*(void *)a4 + 16);
  if (!v8) {
    return 0;
  }
  v9 = v7[4] == a1 && v7[5] == a2;
  if (v9 || (sub_1000097D8() & 1) != 0) {
    return 1;
  }
  if (v8 == 1) {
    return 0;
  }
  if (v7[6] == a1 && v7[7] == a2) {
    return 1;
  }
  result = sub_1000097D8();
  if (result) {
    return 1;
  }
  if (v8 == 2) {
    return 0;
  }
  v12 = v7 + 9;
  for (i = 2; ; ++i)
  {
    v14 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    v15 = *(v12 - 1) == a1 && *v12 == a2;
    if (v15 || (sub_1000097D8() & 1) != 0) {
      return 1;
    }
    result = 0;
    v12 += 2;
    if (v14 == v8) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000046A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7 = sub_100010A60();
  char v9 = sub_10000458C(v7, v8, a4, a5);
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1000046FC()
{
  uint64_t result = sub_10000471C();
  qword_100018BE8 = result;
  return result;
}

uint64_t sub_10000471C()
{
  sub_100009794(&qword_100018D70);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100011800;
  *(void *)(v0 + 32) = 1685024614;
  *(void *)(v0 + 40) = 0xE400000000000000;
  strcpy((char *)(v0 + 48), "wood_processed");
  *(unsigned char *)(v0 + 63) = -18;
  *(void *)(v0 + 64) = 0x6C6169726574616DLL;
  *(void *)(v0 + 72) = 0xE800000000000000;
  *(void *)(v0 + 80) = 0x656E696863616DLL;
  *(void *)(v0 + 88) = 0xE700000000000000;
  *(void *)(v0 + 96) = 0x6C616D6D616DLL;
  *(void *)(v0 + 104) = 0xE600000000000000;
  *(void *)(v0 + 112) = 7631457;
  *(void *)(v0 + 120) = 0xE300000000000000;
  *(void *)(v0 + 128) = 0x7275746375727473;
  *(void *)(v0 + 136) = 0xE900000000000065;
  *(void *)(v0 + 144) = 0xD000000000000011;
  *(void *)(v0 + 152) = 0x8000000100011D10;
  *(void *)(v0 + 160) = 0x6E617965766E6F63;
  *(void *)(v0 + 168) = 0xEA00000000006563;
  *(void *)(v0 + 176) = 0x6C6174726F70;
  *(void *)(v0 + 184) = 0xE600000000000000;
  *(void *)(v0 + 192) = 0x746E656D75636F64;
  *(void *)(v0 + 200) = 0xE800000000000000;
  *(void *)(v0 + 208) = 0x6E6163696C707061;
  *(void *)(v0 + 216) = 0xEA00000000006563;
  *(void *)(v0 + 224) = 1818323300;
  *(void *)(v0 + 232) = 0xE400000000000000;
  *(void *)(v0 + 240) = 1819242356;
  *(void *)(v0 + 248) = 0xE400000000000000;
  *(void *)(v0 + 256) = 0x616964656DLL;
  *(void *)(v0 + 264) = 0xE500000000000000;
  *(void *)(v0 + 272) = 0x656E69636964656DLL;
  *(void *)(v0 + 280) = 0xE800000000000000;
  *(void *)(v0 + 288) = 0x7261776573756F68;
  *(void *)(v0 + 296) = 0xEA00000000007365;
  *(void *)(v0 + 304) = 0x727574696E727566;
  *(void *)(v0 + 312) = 0xE900000000000065;
  *(void *)(v0 + 320) = 0x656D6974796164;
  *(void *)(v0 + 328) = 0xE700000000000000;
  strcpy((char *)(v0 + 336), "wood_natural");
  *(unsigned char *)(v0 + 349) = 0;
  *(_WORD *)(v0 + 350) = -5120;
  *(void *)(v0 + 352) = 0x6C69736E657475;
  *(void *)(v0 + 360) = 0xE700000000000000;
  *(void *)(v0 + 368) = 0x726177656C626174;
  *(void *)(v0 + 376) = 0xE900000000000065;
  *(void *)(v0 + 384) = 0x6574616C70;
  *(void *)(v0 + 392) = 0xE500000000000000;
  *(void *)(v0 + 400) = 0x6E6F6F7073;
  *(void *)(v0 + 408) = 0xE500000000000000;
  *(void *)(v0 + 416) = 0x6566696E6BLL;
  *(void *)(v0 + 424) = 0xE500000000000000;
  *(void *)(v0 + 432) = 1802661734;
  *(void *)(v0 + 440) = 0xE400000000000000;
  *(void *)(v0 + 448) = 0x656C626174;
  *(void *)(v0 + 456) = 0xE500000000000000;
  *(void *)(v0 + 464) = 1819766626;
  *(void *)(v0 + 472) = 0xE400000000000000;
  *(void *)(v0 + 480) = 0x746E616C70;
  *(void *)(v0 + 488) = 0xE500000000000000;
  *(void *)(v0 + 496) = 0x656C6974786574;
  *(void *)(v0 + 504) = 0xE700000000000000;
  *(void *)(v0 + 512) = 0x746C756461;
  *(void *)(v0 + 520) = 0xE500000000000000;
  *(void *)(v0 + 528) = 0x656C6369686576;
  *(void *)(v0 + 536) = 0xE700000000000000;
  *(void *)(v0 + 544) = 7958388;
  *(void *)(v0 + 552) = 0xE300000000000000;
  strcpy((char *)(v0 + 560), "interior_room");
  *(_WORD *)(v0 + 574) = -4864;
  *(void *)(v0 + 576) = 0x64697571696CLL;
  *(void *)(v0 + 584) = 0xE600000000000000;
  *(void *)(v0 + 592) = 1684955500;
  *(void *)(v0 + 600) = 0xE400000000000000;
  *(void *)(v0 + 608) = 0x6C616D696E61;
  *(void *)(v0 + 616) = 0xE600000000000000;
  *(void *)(v0 + 624) = 0x736B636F72;
  *(void *)(v0 + 632) = 0xE500000000000000;
  *(void *)(v0 + 640) = 0x6574616C75676E75;
  *(void *)(v0 + 648) = 0xE900000000000073;
  *(void *)(v0 + 656) = 0x726F6F6474756FLL;
  *(void *)(v0 + 664) = 0xE700000000000000;
  *(void *)(v0 + 672) = 0x796B735F65756C62;
  *(void *)(v0 + 680) = 0xE800000000000000;
  *(void *)(v0 + 688) = 7957363;
  *(void *)(v0 + 696) = 0xE300000000000000;
  *(void *)(v0 + 704) = 0x676E6968746F6C63;
  *(void *)(v0 + 712) = 0xE800000000000000;
  *(void *)(v0 + 720) = 0x676E69646C697562;
  *(void *)(v0 + 728) = 0xE800000000000000;
  *(void *)(v0 + 736) = 0x676E6968746F6C63;
  *(void *)(v0 + 744) = 0xE800000000000000;
  strcpy((char *)(v0 + 752), "interior_shop");
  *(_WORD *)(v0 + 766) = -4864;
  *(void *)(v0 + 768) = 0x697461726F636564;
  *(void *)(v0 + 776) = 0xEA00000000006E6FLL;
  *(void *)(v0 + 784) = 0x73616C675F776172;
  *(void *)(v0 + 792) = 0xE900000000000073;
  *(void *)(v0 + 800) = 0x656E6961746E6F63;
  *(void *)(v0 + 808) = 0xE900000000000072;
  *(void *)(v0 + 816) = 0x6E6F74726163;
  *(void *)(v0 + 824) = 0xE600000000000000;
  *(void *)(v0 + 832) = 0x7964756F6C63;
  *(void *)(v0 + 840) = 0xE600000000000000;
  return nullsub_1();
}

uint64_t sub_100004B8C()
{
  uint64_t result = sub_100004BAC();
  qword_100018BF8 = result;
  return result;
}

uint64_t sub_100004BAC()
{
  sub_100009794(&qword_100018D70);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 80) = 0x746C756461;
  *(void *)(v0 + 112) = 0x7466617263726961;
  *(void *)(v0 + 144) = 0x646E6F6D6C61;
  *(void *)(v0 + 176) = 0x6974696E756D6D61;
  *(void *)(v0 + 208) = 0x7369666C65676E61;
  *(void *)(v0 + 240) = 0x7473617069746E61;
  *(void *)(v0 + 272) = 0x656C707061;
  *(void *)(v0 + 304) = 0x746F6369727061;
  *(void *)(v0 + 336) = 0x72696168636D7261;
  *(void *)(v0 + 368) = 0x616C7567757261;
  *(void *)(v0 + 416) = 0xD000000000000013;
  *(void *)(v0 + 424) = 0x8000000100011C10;
  *(void *)(v0 + 448) = 0x6F6461636F7661;
  *(void *)(v0 + 480) = 2036490594;
  *(void *)(v0 + 496) = 0x6D6D61676B636162;
  *(void *)(v0 + 512) = 0x6E6F636162;
  *(void *)(v0 + 528) = 0x6C65676162;
  *(void *)(v0 + 544) = 0x6F675F64656B6162;
  *(void *)(v0 + 560) = 0x6176616C6B6162;
  *(void *)(v0 + 576) = 1819042146;
  *(void *)(v0 + 584) = 0xE400000000000000;
  strcpy((char *)(v0 + 592), "ballet_dancer");
  *(_WORD *)(v0 + 606) = -4864;
  strcpy((char *)(v0 + 608), "balloon_hotair");
  *(unsigned char *)(v0 + 623) = -18;
  *(void *)(v0 + 624) = 0x616E616E6162;
  *(void *)(v0 + 632) = 0xE600000000000000;
  *(void *)(v0 + 640) = 0x72656E6E6162;
  *(void *)(v0 + 648) = 0xE600000000000000;
  *(void *)(v0 + 656) = 0x6C6C6562726162;
  *(void *)(v0 + 664) = 0xE700000000000000;
  *(void *)(v0 + 672) = 0x6567726162;
  *(void *)(v0 + 680) = 0xE500000000000000;
  *(void *)(v0 + 688) = 0x6475636172726162;
  *(void *)(v0 + 696) = 0xE900000000000061;
  strcpy((char *)(v0 + 704), "baseball_bat");
  *(unsigned char *)(v0 + 717) = 0;
  *(_WORD *)(v0 + 718) = -5120;
  strcpy((char *)(v0 + 720), "baseball_hat");
  *(unsigned char *)(v0 + 733) = 0;
  *(_WORD *)(v0 + 734) = -5120;
  *(void *)(v0 + 736) = 0x696A6E65736162;
  *(void *)(v0 + 744) = 0xE700000000000000;
  *(void *)(v0 + 752) = 0x746573736162;
  *(void *)(v0 + 760) = 0xE600000000000000;
  *(void *)(v0 + 768) = 0x656C67616562;
  *(void *)(v0 + 776) = 0xE600000000000000;
  *(void *)(v0 + 784) = 1851876706;
  *(void *)(v0 + 792) = 0xE400000000000000;
  *(void *)(v0 + 800) = 0x65696E616562;
  *(void *)(v0 + 808) = 0xE600000000000000;
  *(void *)(v0 + 816) = 6579554;
  *(void *)(v0 + 824) = 0xE300000000000000;
  *(void *)(v0 + 832) = 0x676E6964646562;
  *(void *)(v0 + 840) = 0xE700000000000000;
  *(void *)(v0 + 848) = 1717921122;
  *(void *)(v0 + 856) = 0xE400000000000000;
  *(void *)(v0 + 864) = 1952802146;
  *(void *)(v0 + 872) = 0xE400000000000000;
  *(void *)(v0 + 880) = 0x61696E6F676562;
  *(void *)(v0 + 888) = 0xE700000000000000;
  *(void *)(v0 + 896) = 1819043170;
  *(void *)(v0 + 904) = 0xE400000000000000;
  *(void *)(v0 + 912) = 0x7065705F6C6C6562;
  *(void *)(v0 + 920) = 0xEB00000000726570;
  *(void *)(v0 + 928) = 0x68636E6562;
  *(void *)(v0 + 936) = 0xE500000000000000;
  *(void *)(v0 + 944) = 0xD000000000000010;
  *(void *)(v0 + 952) = 0x8000000100011C30;
  *(void *)(v0 + 960) = 0x7972726562;
  *(void *)(v0 + 968) = 0xE500000000000000;
  *(void *)(v0 + 976) = 0x6E6F68636962;
  *(void *)(v0 + 984) = 0xE600000000000000;
  *(void *)(v0 + 992) = 0x656C6379636962;
  *(void *)(v0 + 1000) = 0xE700000000000000;
  *(void *)(v0 + 1008) = 0x72616F626C6C6962;
  *(void *)(v0 + 1016) = 0xEA00000000007364;
  *(void *)(v0 + 1024) = 1685219682;
  strcpy((char *)(v0 + 1040), "birthday_cake");
  *(_WORD *)(v0 + 1054) = -4864;
  *(void *)(v0 + 1056) = 0x696E6179726962;
  *(void *)(v0 + 1072) = 0x6974746F63736962;
  *(void *)(v0 + 1088) = 0x74697563736962;
  *(void *)(v0 + 1104) = 0x6E6F736962;
  *(void *)(v0 + 1120) = 0x7265626B63616C62;
  *(void *)(v0 + 1136) = 0x63616A6B63616C62;
  *(void *)(v0 + 1152) = 0x6564616C62;
  *(void *)(v0 + 1168) = 0x7265646E656C62;
  *(void *)(v0 + 1184) = 0x6D6F73736F6C62;
  *(void *)(v0 + 1200) = 0x7272656265756C62;
  *(void *)(v0 + 1216) = 1918988130;
  *(void *)(v0 + 1232) = 0x61675F6472616F62;
  *(void *)(v0 + 1240) = 0xEA0000000000656DLL;
  *(void *)(v0 + 1248) = 1952542562;
  *(void *)(v0 + 1264) = 0x746163626F62;
  *(void *)(v0 + 1296) = 0x72616F6279646F62;
  *(void *)(v0 + 1312) = 0x72645F6F676E6F62;
  *(void *)(v0 + 1320) = 0xEA00000000006D75;
  *(void *)(v0 + 1344) = 0x656C74746F62;
  *(void *)(v0 + 1360) = 0x756D5F7373617262;
  *(void *)(v0 + 1368) = 0xEB00000000636973;
  *(void *)(v0 + 1376) = 0x6461657262;
  *(void *)(v0 + 1392) = 0x766F5F6B63697262;
  *(void *)(v0 + 1408) = 0x696C6F63636F7262;
  *(void *)(v0 + 1424) = 0x6D6F6F7262;
  *(void *)(v0 + 1440) = 0x65696E776F7262;
  *(void *)(v0 + 1456) = 0x7465686373757262;
  *(void *)(v0 + 1464) = 0xEA00000000006174;
  *(void *)(v0 + 1472) = 0x676F646C6C7562;
  *(void *)(v0 + 1488) = 0x657A6F646C6C7562;
  *(void *)(v0 + 1504) = 0x6F746972727562;
  *(void *)(v0 + 1520) = 7566690;
  *(void *)(v0 + 1536) = 0x726574747562;
  *(void *)(v0 + 1552) = 0x74656E69626163;
  strcpy((char *)(v0 + 1584), "cake_regular");
  *(unsigned char *)(v0 + 1597) = 0;
  *(_WORD *)(v0 + 1598) = -5120;
  *(void *)(v0 + 1600) = 0x7261646E656C6163;
  *(void *)(v0 + 1616) = 0x726570696C6163;
  *(void *)(v0 + 1632) = 0x6C656D6163;
  *(void *)(v0 + 1648) = 0x6172656D6163;
  *(void *)(v0 + 1664) = 0x79646E6163;
  *(void *)(v0 + 1680) = 0x746F5F79646E6163;
  *(void *)(v0 + 1696) = 0x656E696E6163;
  *(void *)(v0 + 1712) = 0x656F6E6163;
  *(void *)(v0 + 1728) = 0x756F6C61746E6163;
  *(void *)(v0 + 1744) = 0x65736572706163;
  *(void *)(v0 + 1776) = 0x746165735F726163;
  *(void *)(v0 + 1792) = 0x6C656D61726163;
  *(void *)(v0 + 1808) = 0x6F6974616E726163;
  *(void *)(v0 + 1840) = 0x776568736163;
  *(void *)(v0 + 1856) = 0x6C6F726573736163;
  *(void *)(v0 + 1888) = 0x6F6C66696C756163;
  *(void *)(v0 + 1896) = 0xEB00000000726577;
  *(void *)(v0 + 1904) = 0x7972656C6563;
  *(void *)(v0 + 1936) = 0x6C6165726563;
  *(void *)(v0 + 1952) = 0x6E61656361746563;
  *(void *)(v0 + 1968) = 0x7761736E69616863;
  *(void *)(v0 + 1984) = 0x7269616863;
  *(void *)(v0 + 2000) = 0x746F5F7269616863;
  *(void *)(v0 + 2016) = 0x657369616863;
  *(void *)(v0 + 2032) = 0x7472616863;
  *(void *)(v0 + 2048) = 0x6F6F626B63656863;
  *(void *)(v0 + 2064) = 0x657365656863;
  *(void *)(v0 + 2080) = 0x6163657365656863;
  *(void *)(v0 + 2088) = 0xEA0000000000656BLL;
  *(void *)(v0 + 2096) = 0x68617465656863;
  *(void *)(v0 + 2112) = 0x797272656863;
  *(void *)(v0 + 2128) = 0x7373656863;
  *(void *)(v0 + 2144) = 0x74756E7473656863;
  *(void *)(v0 + 2160) = 0x5F676E6977656863;
  *(void *)(v0 + 2168) = 0xEB000000006D7567;
  *(void *)(v0 + 2176) = 0x7568617568696863;
  *(void *)(v0 + 2192) = 0x646C696863;
  *(void *)(v0 + 2208) = 0x736576696863;
  *(void *)(v0 + 2224) = 0x74616C6F636F6863;
  strcpy((char *)(v0 + 2240), "chocolate_chip");
  *(unsigned char *)(v0 + 2255) = -18;
  strcpy((char *)(v0 + 2256), "chrysanthemum");
  *(_WORD *)(v0 + 2270) = -4864;
  *(void *)(v0 + 2272) = 0x7261676963;
  *(void *)(v0 + 2288) = 0x7474657261676963;
  *(void *)(v0 + 2304) = 0x6F72746E616C6963;
  strcpy((char *)(v0 + 2320), "citrus_fruit");
  *(void *)(v0 + 2336) = 1835101283;
  *(void *)(v0 + 2352) = 0x74656E6972616C63;
  *(void *)(v0 + 2368) = 0x70736568746F6C63;
  *(void *)(v0 + 2376) = 0xEA00000000006E69;
  *(void *)(v0 + 2384) = 0x676E6968746F6C63;
  *(void *)(v0 + 2400) = 0x7265766F6C63;
  *(void *)(v0 + 2432) = 0x7369666E776F6C63;
  *(void *)(v0 + 2448) = 0x6F6F74616B636F63;
  *(void *)(v0 + 2464) = 0x74756E6F636F63;
  *(void *)(v0 + 2480) = 0x625F656566666F63;
  *(void *)(v0 + 2496) = 0x77616C73656C6F63;
  *(void *)(v0 + 2512) = 0x65696C6C6F63;
  *(void *)(v0 + 2528) = 0x72657475706D6F63;
  *(void *)(v0 + 2552) = 0x8000000100011C50;
  *(void *)(v0 + 2568) = 0x8000000100011C70;
  strcpy((char *)(v0 + 2576), "computer_mouse");
  *(unsigned char *)(v0 + 2591) = -18;
  strcpy((char *)(v0 + 2592), "computer_tower");
  *(unsigned char *)(v0 + 2607) = -18;
  *(void *)(v0 + 2608) = 0x6E656D69646E6F63;
  *(void *)(v0 + 2632) = 0x8000000100011C90;
  *(void *)(v0 + 2640) = 0x656E6961746E6F63;
  *(void *)(v0 + 2656) = 0x69747265766E6F63;
  *(void *)(v0 + 2664) = 0xEB00000000656C62;
  *(void *)(v0 + 2672) = 0x65696B6F6F63;
  *(void *)(v0 + 2688) = 0x657261776B6F6F63;
  *(void *)(v0 + 2704) = 0x6967726F63;
  *(void *)(v0 + 2720) = 0x657263736B726F63;
  *(void *)(v0 + 2736) = 1852993379;
  *(void *)(v0 + 2752) = 0x776F6C666E726F63;
  strcpy((char *)(v0 + 2768), "cosmetic_tool");
  *(_WORD *)(v0 + 2782) = -4864;
  *(void *)(v0 + 2784) = 0x726167756F63;
  *(void *)(v0 + 2800) = 0x6E6F70756F63;
  *(void *)(v0 + 2816) = 7827299;
  *(void *)(v0 + 2832) = 0x685F796F62776F63;
  *(void *)(v0 + 2840) = 0xEA00000000007461;
  *(void *)(v0 + 2848) = 0x775F65746F796F63;
  *(void *)(v0 + 2856) = 0xEB00000000666C6FLL;
  *(void *)(v0 + 2864) = 1650553443;
  *(void *)(v0 + 2880) = 0x727265626E617263;
  *(void *)(v0 + 2896) = 0x635F746964657263;
  *(void *)(v0 + 2912) = 0x6570657263;
  *(void *)(v0 + 2928) = 1651077731;
  *(void *)(v0 + 2944) = 0x6E617373696F7263;
  *(void *)(v0 + 2960) = 0x64776F7263;
  *(void *)(v0 + 2976) = 0x735F657369757263;
  *(void *)(v0 + 2984) = 0xEB00000000706968;
  *(void *)(v0 + 2992) = 0x7265626D75637563;
  *(void *)(v0 + 3008) = 0x656B6163707563;
  *(void *)(v0 + 3024) = 0x7972727563;
  *(void *)(v0 + 3040) = 0x6E75687368636164;
  *(void *)(v0 + 3056) = 0x6C69646F66666164;
  *(void *)(v0 + 3072) = 0x61696C686164;
  *(void *)(v0 + 3088) = 0x6E6F6B696164;
  *(void *)(v0 + 3104) = 0x7973696164;
  *(void *)(v0 + 3120) = 0x616974616D6C6164;
  *(void *)(v0 + 3136) = 0x6F696C65646E6164;
  *(void *)(v0 + 3152) = 0x72616F6274726164;
  *(void *)(v0 + 3168) = 0x7265746E61636564;
  *(void *)(v0 + 3184) = 0x79616A656564;
  *(void *)(v0 + 3200) = 1919247716;
  *(void *)(v0 + 3216) = 1802724708;
  *(void *)(v0 + 3232) = 0x74726573736564;
  *(void *)(v0 + 3248) = 0x6D617267616964;
  *(void *)(v0 + 3280) = 1819044196;
  *(void *)(v0 + 3296) = 0x6873617768736964;
  *(void *)(v0 + 3312) = 0x6E616D7265626F64;
  *(void *)(v0 + 3328) = 0x746E656D75636F64;
  *(void *)(v0 + 3344) = 6778724;
  *(void *)(v0 + 3360) = 0x6E6968706C6F64;
  *(void *)(v0 + 3376) = 0x6F6E696D6F64;
  *(void *)(v0 + 3392) = 0x79656B6E6F64;
  *(void *)(v0 + 3408) = 0x74756E6F64;
  *(void *)(v0 + 3424) = 1702260580;
  strcpy((char *)(v0 + 3440), "drinking_glass");
  *(unsigned char *)(v0 + 3455) = -18;
  strcpy((char *)(v0 + 3456), "drone_machine");
  *(_WORD *)(v0 + 3470) = -4864;
  *(void *)(v0 + 3472) = 1836413540;
  *(void *)(v0 + 3488) = 0x6C6C6562626D7564;
  *(void *)(v0 + 3504) = 0x676E696C706D7564;
  *(void *)(v0 + 3520) = 0x6E6169727564;
  *(void *)(v0 + 3536) = 0x656C676165;
  *(void *)(v0 + 3552) = 0x736666756D726165;
  *(void *)(v0 + 3568) = 0x656D616D616465;
  *(void *)(v0 + 4888) = 0xE500000000000000;
  *(void *)(v0 + 4896) = 0x77656479656E6F68;
  *(void *)(v0 + 4904) = 0xE800000000000000;
  *(void *)(v0 + 3600) = 0x746E616C70676765;
  *(void *)(v0 + 4872) = 0xE500000000000000;
  *(void *)(v0 + 4880) = 0x79656E6F68;
  strcpy((char *)(v0 + 4848), "hippopotamus");
  *(unsigned char *)(v0 + 4861) = 0;
  *(_WORD *)(v0 + 4862) = -5120;
  *(void *)(v0 + 4864) = 0x796C6C6F68;
  *(void *)(v0 + 4816) = 0x6E6F726568;
  *(void *)(v0 + 4824) = 0xE500000000000000;
  *(void *)(v0 + 4832) = 0x6168635F68676968;
  *(void *)(v0 + 4840) = 0xEA00000000007269;
  *(void *)(v0 + 4784) = 0x74656D6C6568;
  *(void *)(v0 + 4792) = 0xE600000000000000;
  *(void *)(v0 + 4800) = 1651664232;
  *(void *)(v0 + 4808) = 0xE400000000000000;
  *(void *)(v0 + 4760) = 0xEA00000000007365;
  *(void *)(v0 + 4768) = 0x74706F63696C6568;
  *(void *)(v0 + 4776) = 0xEA00000000007265;
  strcpy((char *)(v0 + 3616), "electric_fan");
  *(void *)(v0 + 4736) = 0x7261656764616568;
  *(void *)(v0 + 4744) = 0xE800000000000000;
  *(void *)(v0 + 4752) = 0x6E6F687064616568;
  *(void *)(v0 + 4704) = 1886544232;
  *(void *)(v0 + 4712) = 0xE400000000000000;
  *(void *)(v0 + 4720) = 7627112;
  *(void *)(v0 + 4728) = 0xE300000000000000;
  *(void *)(v0 + 4672) = 0x64696C67676E6168;
  *(void *)(v0 + 4680) = 0xEA00000000007265;
  *(void *)(v0 + 4688) = 0x74616864726168;
  *(void *)(v0 + 4696) = 0xE700000000000000;
  *(void *)(v0 + 4648) = 0xE700000000000000;
  *(void *)(v0 + 4656) = 0x74697277646E6168;
  *(void *)(v0 + 4664) = 0xEB00000000676E69;
  *(unsigned char *)(v0 + 3629) = 0;
  *(_WORD *)(v0 + 3630) = -5120;
  *(void *)(v0 + 4624) = 0x72656D6D6168;
  *(void *)(v0 + 4632) = 0xE600000000000000;
  *(void *)(v0 + 4640) = 0x6B636F6D6D6168;
  *(void *)(v0 + 3632) = 7040101;
  *(void *)(v0 + 4600) = 0xE300000000000000;
  *(void *)(v0 + 4608) = 0x65677275626D6168;
  *(void *)(v0 + 4616) = 0xE900000000000072;
  *(void *)(v0 + 3648) = 0x6961747265746E65;
  *(void *)(v0 + 3656) = 0xEB0000000072656ELL;
  *(void *)(v0 + 4592) = 7168360;
  *(void *)(v0 + 3664) = 0x65706F6C65766E65;
  *(void *)(v0 + 3680) = 0x6E656D7069757165;
  strcpy((char *)(v0 + 3696), "extinguisher");
  *(void *)(v0 + 3712) = 0x6C6566616C6166;
  *(void *)(v0 + 3728) = 0x61726F646566;
  *(void *)(v0 + 3744) = 0x656E696C6566;
  *(void *)(v0 + 3760) = 6777190;
  *(void *)(v0 + 3776) = 0x6D726165726966;
  *(void *)(v0 + 3792) = 0x6375727465726966;
  *(void *)(v0 + 3808) = 1752394086;
  *(void *)(v0 + 3824) = 0x6F676E696D616C66;
  *(void *)(v0 + 3840) = 1851878502;
  *(void *)(v0 + 3856) = 0x7265776F6C66;
  *(void *)(v0 + 3880) = 0x8000000100011CB0;
  *(void *)(v0 + 3888) = 0x6574756C66;
  strcpy((char *)(v0 + 3904), "folding_chair");
  *(_WORD *)(v0 + 3918) = -4864;
  *(void *)(v0 + 3920) = 0x6575646E6F66;
  *(void *)(v0 + 3936) = 1685024614;
  *(void *)(v0 + 3952) = 0x6C6C6162736F6F66;
  *(void *)(v0 + 3984) = 0x5F616C756D726F66;
  *(void *)(v0 + 3992) = 0xEF7261635F656E6FLL;
  *(void *)(v0 + 4000) = 7892838;
  strcpy((char *)(v0 + 4016), "fried_chicken");
  *(_WORD *)(v0 + 4030) = -4864;
  *(void *)(v0 + 4032) = 0x67655F6465697266;
  *(void *)(v0 + 4040) = 0xE900000000000067;
  *(void *)(v0 + 4048) = 0x7365697266;
  *(void *)(v0 + 4064) = 0x65656273697266;
  strcpy((char *)(v0 + 4080), "frozen_dessert");
  *(unsigned char *)(v0 + 4095) = -18;
  *(void *)(v0 + 4096) = 0x7469757266;
  *(void *)(v0 + 4112) = 0x6B61637469757266;
  *(void *)(v0 + 4128) = 0x727574696E727566;
  *(void *)(v0 + 4144) = 0x646170656D6167;
  *(void *)(v0 + 4160) = 0x73656D6167;
  *(void *)(v0 + 4176) = 0x63696C726167;
  *(void *)(v0 + 4192) = 0x6B73616D5F736167;
  *(void *)(v0 + 4208) = 0x735F6E616D726567;
  *(void *)(v0 + 4216) = 0xEF64726568706568;
  *(void *)(v0 + 4224) = 0x7261635F74666967;
  *(void *)(v0 + 4240) = 0x72627265676E6967;
  *(void *)(v0 + 4256) = 0x65666661726967;
  *(void *)(v0 + 4272) = 0x7472616B5F6F67;
  *(void *)(v0 + 4288) = 1952542567;
  *(void *)(v0 + 4304) = 0x68736966646C6F67;
  *(void *)(v0 + 4320) = 1718382439;
  *(void *)(v0 + 4336) = 0x6C61625F666C6F67;
  *(void *)(v0 + 4352) = 0x756C635F666C6F67;
  *(void *)(v0 + 4360) = 0xE900000000000062;
  *(void *)(v0 + 4384) = 0x6570617267;
  *(void *)(v0 + 4400) = 0x7572666570617267;
  *(void *)(v0 + 4408) = 0xEA00000000007469;
  *(void *)(v0 + 4416) = 0x65625F6E65657267;
  *(void *)(v0 + 552) = 0xEB0000000073646FLL;
  *(void *)(v0 + 568) = 0xE700000000000000;
  *(void *)(v0 + 464) = 6649953;
  *(void *)(v0 + 472) = 0xE300000000000000;
  *(void *)(v0 + 488) = 0xE400000000000000;
  *(void *)(v0 + 520) = 0xE500000000000000;
  *(void *)(v0 + 536) = 0xE500000000000000;
  *(void *)(v0 + 504) = 0xEA00000000006E6FLL;
  *(void *)(v0 + 4424) = 0xEB00000000736E61;
  *(void *)(v0 + 4432) = 0x6E756F6879657267;
  *(void *)(v0 + 4448) = 0x6C6C697267;
  *(void *)(v0 + 4464) = 0x5F64656C6C697267;
  *(void *)(v0 + 4472) = 0xEF6E656B63696863;
  *(void *)(v0 + 4480) = 0x6C6F6D6163617567;
  *(void *)(v0 + 432) = 0x69626F6D6F747561;
  *(void *)(v0 + 440) = 0xEA0000000000656CLL;
  *(void *)(v0 + 456) = 0xE700000000000000;
  *(void *)(v0 + 4496) = 0x6176617567;
  *(void *)(v0 + 4512) = 0x726174697567;
  *(void *)(v0 + 384) = 0x7567617261707361;
  *(void *)(v0 + 392) = 0xE900000000000073;
  *(void *)(v0 + 400) = 7763041;
  *(void *)(v0 + 408) = 0xE300000000000000;
  *(void *)(v0 + 4528) = 1819047271;
  *(void *)(v0 + 352) = 0x6B6F686369747261;
  *(void *)(v0 + 360) = 0xE900000000000065;
  *(void *)(v0 + 376) = 0xE700000000000000;
  *(void *)(v0 + 4544) = 0x7970707567;
  *(void *)(v0 + 320) = 0x6D75697261757161;
  *(void *)(v0 + 328) = 0xE800000000000000;
  *(void *)(v0 + 344) = 0xE800000000000000;
  *(void *)(v0 + 4560) = 0x617A6F7967;
  *(void *)(v0 + 288) = 0x636E61696C707061;
  *(void *)(v0 + 296) = 0xE900000000000065;
  *(void *)(v0 + 312) = 0xE700000000000000;
  *(void *)(v0 + 4576) = 0x6F72656E61626168;
  *(void *)(v0 + 256) = 0x6C69766E61;
  *(void *)(v0 + 264) = 0xE500000000000000;
  *(void *)(v0 + 280) = 0xE500000000000000;
  *(void *)(v0 + 4912) = 0x68616B6F6F68;
  *(void *)(v0 + 224) = 0x6C616D696E61;
  *(void *)(v0 + 232) = 0xE600000000000000;
  *(void *)(v0 + 248) = 0xE900000000000069;
  *(void *)(v0 + 4928) = 0x6573726F68;
  *(void *)(v0 + 192) = 0x79766F68636E61;
  *(void *)(v0 + 200) = 0xE700000000000000;
  *(void *)(v0 + 216) = 0xE900000000000068;
  *(void *)(v0 + 4944) = 0x676F64746F68;
  *(void *)(v0 + 160) = 0x636E616C75626D61;
  *(void *)(v0 + 168) = 0xE900000000000065;
  *(void *)(v0 + 184) = 0xEA00000000006E6FLL;
  *(void *)(v0 + 4960) = 0x646E756F68;
  *(void *)(v0 + 128) = 0x656E616C70726961;
  *(void *)(v0 + 136) = 0xE800000000000000;
  *(void *)(v0 + 152) = 0xE600000000000000;
  *(void *)(v0 + 4976) = 0x616F626573756F68;
  *(void *)(v0 + 96) = 0x61635F746C756461;
  *(void *)(v0 + 104) = 0xE900000000000074;
  *(void *)(v0 + 120) = 0xE800000000000000;
  *(void *)(v0 + 4992) = 0x62676E696D6D7568;
  *(void *)(v0 + 64) = 0x7461626F726361;
  *(void *)(v0 + 72) = 0xE700000000000000;
  *(void *)(v0 + 88) = 0xE500000000000000;
  *(void *)(v0 + 48) = 0x6E726F6361;
  *(void *)(v0 + 56) = 0xE500000000000000;
  *(void *)(v0 + 2904) = 0xEB00000000647261;
  *(void *)(v0 + 5000) = 0xEB00000000647269;
  *(void *)(v0 + 32) = 0x6F6964726F636361;
  *(void *)(v0 + 40) = 0xE90000000000006ELL;
  *(_OWORD *)(v0 + 16) = xmmword_100011810;
  *(void *)(v0 + 5008) = 0x73756D6D7568;
  *(void *)(v0 + 5024) = 0x796B737568;
  *(void *)(v0 + 1032) = 0xE400000000000000;
  *(void *)(v0 + 4584) = 0xE800000000000000;
  *(void *)(v0 + 5040) = 0x616E657968;
  *(void *)(v0 + 5056) = 0x616572635F656369;
  *(void *)(v0 + 4552) = 0xE500000000000000;
  *(void *)(v0 + 4568) = 0xE500000000000000;
  *(void *)(v0 + 5064) = 0xE90000000000006DLL;
  *(void *)(v0 + 5072) = 0x74616B735F656369;
  *(void *)(v0 + 4520) = 0xE600000000000000;
  *(void *)(v0 + 4536) = 0xE400000000000000;
  *(void *)(v0 + 5080) = 0xEA00000000007365;
  *(void *)(v0 + 5088) = 0x6F775F6873697269;
  *(void *)(v0 + 4488) = 0xE900000000000065;
  *(void *)(v0 + 4504) = 0xE500000000000000;
  *(void *)(v0 + 5096) = 0xEF646E756F68666CLL;
  *(void *)(v0 + 2624) = 0xD000000000000014;
  *(void *)(v0 + 5104) = 0xD000000000000014;
  *(void *)(v0 + 5112) = 0x8000000100011CD0;
  *(void *)(v0 + 5120) = 0x6F6E6570616C616ALL;
  *(void *)(v0 + 4456) = 0xE500000000000000;
  *(void *)(v0 + 1760) = 7496035;
  *(void *)(v0 + 5136) = 7496042;
  *(void *)(v0 + 4440) = 0xE900000000000064;
  *(void *)(v0 + 5152) = 1885693290;
  *(void *)(v0 + 1920) = 0x6F6C6C6563;
  *(void *)(v0 + 4392) = 0xE500000000000000;
  *(void *)(v0 + 5168) = 0x6F6C6C656ALL;
  *(void *)(v0 + 5184) = 0x796C6C656ALL;
  *(void *)(v0 + 4368) = 0x6E69617267;
  *(void *)(v0 + 4376) = 0xE500000000000000;
  *(void *)(v0 + 5200) = 0x736966796C6C656ALL;
  *(void *)(v0 + 5216) = 0x696B7374656ALL;
  *(void *)(v0 + 4328) = 0xE400000000000000;
  *(void *)(v0 + 4344) = 0xE90000000000006CLL;
  *(void *)(v0 + 5232) = 0x72656369756ALL;
  *(void *)(v0 + 5248) = 0x6F6F7261676E616BLL;
  *(void *)(v0 + 4296) = 0xE400000000000000;
  *(void *)(v0 + 4312) = 0xE800000000000000;
  *(void *)(v0 + 5264) = 0x6B6179616BLL;
  *(void *)(v0 + 5280) = 0x626162656BLL;
  *(void *)(v0 + 4280) = 0xE700000000000000;
  strcpy((char *)(v0 + 5296), "kitchen_oven");
  *(void *)(v0 + 5312) = 1702127979;
  *(void *)(v0 + 4248) = 0xEB00000000646165;
  *(void *)(v0 + 4264) = 0xE700000000000000;
  strcpy((char *)(v0 + 5328), "kiteboarding");
  *(void *)(v0 + 5344) = 0x6E657474696BLL;
  *(void *)(v0 + 4232) = 0xE900000000000064;
  *(void *)(v0 + 5360) = 1769433451;
  *(void *)(v0 + 5376) = 0x6566696E6BLL;
  *(void *)(v0 + 4184) = 0xE600000000000000;
  *(void *)(v0 + 4200) = 0xE800000000000000;
  *(void *)(v0 + 5392) = 0x696261726C686F6BLL;
  *(void *)(v0 + 5408) = 6909803;
  *(void *)(v0 + 4152) = 0xE700000000000000;
  *(void *)(v0 + 4168) = 0xE500000000000000;
  *(void *)(v0 + 5424) = 0x706F7470616CLL;
  *(void *)(v0 + 5440) = 0x5F7972646E75616CLL;
  *(void *)(v0 + 4120) = 0xE900000000000065;
  *(void *)(v0 + 4136) = 0xE900000000000065;
  *(void *)(v0 + 5448) = 0xEF656E696863616DLL;
  *(void *)(v0 + 5456) = 1801807212;
  *(void *)(v0 + 5472) = 0x6E6F6D656CLL;
  *(void *)(v0 + 4104) = 0xE500000000000000;
  *(void *)(v0 + 5488) = 0x6172676E6F6D656CLL;
  *(void *)(v0 + 5504) = 0x647261706F656CLL;
  *(void *)(v0 + 4072) = 0xE700000000000000;
  *(void *)(v0 + 5520) = 0x6563757474656CLL;
  strcpy((char *)(v0 + 5536), "license_plate");
  *(_WORD *)(v0 + 5550) = -4864;
  *(void *)(v0 + 4056) = 0xE500000000000000;
  *(void *)(v0 + 5552) = 0x6B63616A6566696CLL;
  *(void *)(v0 + 5560) = 0xEA00000000007465;
  *(void *)(v0 + 4008) = 0xE300000000000000;
  *(void *)(v0 + 5568) = 0x746867696CLL;
  *(void *)(v0 + 5584) = 0x7265746867696CLL;
  *(void *)(v0 + 5600) = 2037148012;
  *(void *)(v0 + 3976) = 0xE400000000000000;
  *(void *)(v0 + 5616) = 1701669228;
  *(void *)(v0 + 3944) = 0xE400000000000000;
  *(void *)(v0 + 3960) = 0xE800000000000000;
  *(void *)(v0 + 3968) = 1802661734;
  *(void *)(v0 + 5632) = 0x6E6973756F6D696CLL;
  *(void *)(v0 + 5648) = 1852795244;
  *(void *)(v0 + 3928) = 0xE600000000000000;
  *(void *)(v0 + 5664) = 0x687369666E6F696CLL;
  *(void *)(v0 + 5680) = 0x616D616C6CLL;
  *(void *)(v0 + 5696) = 0x72657473626F6CLL;
  *(void *)(v0 + 3896) = 0xE500000000000000;
  *(void *)(v0 + 5712) = 1869049708;
  *(void *)(v0 + 3864) = 0xE600000000000000;
  *(void *)(v0 + 3872) = 0xD000000000000012;
  *(void *)(v0 + 5728) = 0x68746F5F6F676F6CLL;
  *(void *)(v0 + 5744) = 0x706F70696C6C6F6CLL;
  *(void *)(v0 + 3832) = 0xE800000000000000;
  *(void *)(v0 + 3848) = 0xE400000000000000;
  *(void *)(v0 + 5760) = 0x65656863796CLL;
  *(void *)(v0 + 5776) = 2020505964;
  *(void *)(v0 + 3800) = 0xE90000000000006BLL;
  *(void *)(v0 + 3816) = 0xE400000000000000;
  *(void *)(v0 + 5792) = 0x696D61646163616DLL;
  *(void *)(v0 + 2184) = 0xE900000000000061;
  *(void *)(v0 + 5800) = 0xE900000000000061;
  *(void *)(v0 + 3768) = 0xE300000000000000;
  *(void *)(v0 + 3784) = 0xE700000000000000;
  *(void *)(v0 + 5808) = 0x656E696863616DLL;
  *(void *)(v0 + 5824) = 0x6C6572656B63616DLL;
  *(void *)(v0 + 3736) = 0xE600000000000000;
  *(void *)(v0 + 3752) = 0xE600000000000000;
  *(void *)(v0 + 5840) = 0x656E697A6167616DLL;
  *(unsigned char *)(v0 + 3709) = 0;
  *(_WORD *)(v0 + 3710) = -5120;
  *(void *)(v0 + 3720) = 0xE700000000000000;
  *(void *)(v0 + 5856) = 0x6574756D616C616DLL;
  *(void *)(v0 + 5872) = 0x73696F6E696C616DLL;
  *(void *)(v0 + 3672) = 0xE800000000000000;
  *(void *)(v0 + 3688) = 0xE900000000000074;
  *(void *)(v0 + 5888) = 0x74656C6C616DLL;
  *(void *)(v0 + 5904) = 0x6C616D6D616DLL;
  *(void *)(v0 + 5920) = 0x6E697261646E616DLL;
  *(void *)(v0 + 3640) = 0xE300000000000000;
  *(void *)(v0 + 5952) = 0x6574736F676E616DLL;
  *(void *)(v0 + 1400) = 0xEA00000000006E65;
  *(void *)(v0 + 5960) = 0xEA00000000006E65;
  *(void *)(v0 + 3608) = 0xE800000000000000;
  *(void *)(v0 + 5968) = 7364973;
  *(void *)(v0 + 3576) = 0xE700000000000000;
  *(void *)(v0 + 3584) = 6776677;
  *(void *)(v0 + 3592) = 0xE300000000000000;
  *(void *)(v0 + 5984) = 0x646C6F676972616DLL;
  *(void *)(v0 + 6000) = 0x6C616D687372616DLL;
  *(void *)(v0 + 3544) = 0xE500000000000000;
  *(void *)(v0 + 3560) = 0xE800000000000000;
  *(void *)(v0 + 6008) = 0xEB00000000776F6CLL;
  *(void *)(v0 + 6016) = 0x616970757372616DLL;
  *(void *)(v0 + 6024) = 0xE90000000000006CLL;
  *(void *)(v0 + 3512) = 0xE800000000000000;
  *(void *)(v0 + 3528) = 0xE600000000000000;
  *(void *)(v0 + 6032) = 0x6666697473616DLL;
  *(void *)(v0 + 6048) = 0x7365686374616DLL;
  *(void *)(v0 + 3480) = 0xE400000000000000;
  *(void *)(v0 + 3496) = 0xE800000000000000;
  *(void *)(v0 + 6064) = 0x6F7A74616DLL;
  strcpy((char *)(v0 + 6080), "measuring_tape");
  *(unsigned char *)(v0 + 6095) = -18;
  *(void *)(v0 + 6112) = 0x6C6C61627461656DLL;
  *(void *)(v0 + 6128) = 0x6E6F68706167656DLL;
  *(void *)(v0 + 3416) = 0xE500000000000000;
  *(void *)(v0 + 3432) = 0xE400000000000000;
  *(void *)(v0 + 6144) = 0x6E6F6C656DLL;
  *(void *)(v0 + 6160) = 0x6F68706F7263696DLL;
  *(void *)(v0 + 3384) = 0xE600000000000000;
  *(void *)(v0 + 3400) = 0xE600000000000000;
  *(void *)(v0 + 6176) = 0x6F63736F7263696DLL;
  *(void *)(v0 + 1736) = 0xEA00000000006570;
  *(void *)(v0 + 3352) = 0xE300000000000000;
  *(void *)(v0 + 3368) = 0xE700000000000000;
  *(void *)(v0 + 6184) = 0xEA00000000006570;
  *(void *)(v0 + 6192) = 0x7661776F7263696DLL;
  *(void *)(v0 + 3320) = 0xE800000000000000;
  *(void *)(v0 + 3336) = 0xE800000000000000;
  *(void *)(v0 + 6208) = 0x656C697373696DLL;
  *(void *)(v0 + 6224) = 0x6C6961726F6E6F6DLL;
  *(void *)(v0 + 3288) = 0xE400000000000000;
  *(void *)(v0 + 3304) = 0xEA00000000007265;
  *(void *)(v0 + 6240) = 0x65736F6F6DLL;
  *(void *)(v0 + 3256) = 0xE700000000000000;
  *(void *)(v0 + 3264) = 1701013860;
  *(void *)(v0 + 3272) = 0xE400000000000000;
  *(void *)(v0 + 6256) = 0x637963726F746F6DLL;
  *(void *)(v0 + 6272) = 0x6D6F68726F746F6DLL;
  *(void *)(v0 + 3224) = 0xE400000000000000;
  *(void *)(v0 + 3240) = 0xE700000000000000;
  *(void *)(v0 + 6288) = 0x6F7073726F746F6DLL;
  *(void *)(v0 + 6304) = 0x6172746573756F6DLL;
  *(void *)(v0 + 3192) = 0xE600000000000000;
  *(void *)(v0 + 3208) = 0xE400000000000000;
  *(void *)(v0 + 6312) = 0xE900000000000070;
  *(void *)(v0 + 6320) = 0x7265776F6DLL;
  *(void *)(v0 + 3160) = 0xE900000000000064;
  *(void *)(v0 + 3176) = 0xE800000000000000;
  *(void *)(v0 + 6352) = 0x6D6F6F726873756DLL;
  *(void *)(v0 + 6368) = 0x636973756DLL;
  *(void *)(v0 + 3144) = 0xE90000000000006ELL;
  *(void *)(v0 + 6392) = 0x8000000100011CF0;
  *(void *)(v0 + 3112) = 0xE500000000000000;
  *(void *)(v0 + 3128) = 0xE90000000000006ELL;
  *(void *)(v0 + 6400) = 0x6C657373756DLL;
  *(void *)(v0 + 6416) = 0x6472617473756DLL;
  *(void *)(v0 + 3080) = 0xE600000000000000;
  *(void *)(v0 + 3096) = 0xE600000000000000;
  *(void *)(v0 + 6432) = 1851875694;
  *(void *)(v0 + 6448) = 0x736F6863616ELL;
  *(void *)(v0 + 3048) = 0xE900000000000064;
  *(void *)(v0 + 3064) = 0xE800000000000000;
  *(void *)(v0 + 6464) = 0x72616373616ELL;
  *(void *)(v0 + 6480) = 0x6E6972617463656ELL;
  *(void *)(v0 + 3016) = 0xE700000000000000;
  *(void *)(v0 + 3032) = 0xE500000000000000;
  strcpy((char *)(v0 + 6496), "newfoundland");
  *(unsigned char *)(v0 + 6509) = 0;
  *(_WORD *)(v0 + 6510) = -5120;
  *(void *)(v0 + 6512) = 0x657061707377656ELL;
  *(void *)(v0 + 3000) = 0xE800000000000000;
  *(void *)(v0 + 6528) = 7632238;
  *(void *)(v0 + 6544) = 0x6C61656D74616FLL;
  *(void *)(v0 + 2952) = 0xE900000000000074;
  *(void *)(v0 + 2968) = 0xE500000000000000;
  *(void *)(v0 + 6560) = 0x74656C656D6FLL;
  *(void *)(v0 + 2936) = 0xE400000000000000;
  *(void *)(v0 + 6576) = 0x6E6F696E6FLL;
  *(void *)(v0 + 6600) = 0x8000000100011D10;
  *(void *)(v0 + 2920) = 0xE500000000000000;
  *(void *)(v0 + 6608) = 0x7365676E61726FLL;
  *(void *)(v0 + 6624) = 0x64696863726FLL;
  *(void *)(v0 + 6648) = 0x8000000100011D30;
  *(void *)(v0 + 2872) = 0xE400000000000000;
  *(void *)(v0 + 2888) = 0xE900000000000079;
  *(void *)(v0 + 6656) = 0x6863697274736FLL;
  *(void *)(v0 + 6672) = 1852143215;
  *(void *)(v0 + 6688) = 7108463;
  *(void *)(v0 + 6704) = 0x72657473796FLL;
  *(void *)(v0 + 6720) = 0x616C6C656170;
  *(void *)(v0 + 2824) = 0xE300000000000000;
  *(void *)(v0 + 6736) = 0x757262746E696170;
  *(void *)(v0 + 6744) = 0xEA00000000006873;
  *(void *)(v0 + 2792) = 0xE600000000000000;
  *(void *)(v0 + 2808) = 0xE600000000000000;
  *(void *)(v0 + 6768) = 0x656B61636E6170;
  *(void *)(v0 + 6784) = 0x617961706170;
  *(void *)(v0 + 6800) = 0x7475686361726170;
  *(void *)(v0 + 2760) = 0xEA00000000007265;
  *(void *)(v0 + 6816) = 0x7465656B61726170;
  *(void *)(v0 + 6832) = 0x6C69617361726170;
  *(void *)(v0 + 2744) = 0xE400000000000000;
  *(void *)(v0 + 1824) = 0x746F72726163;
  *(void *)(v0 + 2712) = 0xE500000000000000;
  *(void *)(v0 + 2728) = 0xE900000000000077;
  *(void *)(v0 + 6848) = 0x746F72726170;
  strcpy((char *)(v0 + 6864), "passionfruit");
  *(void *)(v0 + 2680) = 0xE600000000000000;
  *(void *)(v0 + 2696) = 0xE800000000000000;
  *(unsigned char *)(v0 + 2333) = 0;
  *(_WORD *)(v0 + 2334) = -5120;
  *(unsigned char *)(v0 + 6877) = 0;
  *(_WORD *)(v0 + 6878) = -5120;
  *(void *)(v0 + 6880) = 0x74726F7073736170;
  *(void *)(v0 + 2648) = 0xE900000000000072;
  *(void *)(v0 + 6896) = 0x6174736170;
  *(void *)(v0 + 6912) = 0x797274736170;
  *(void *)(v0 + 6928) = 6382960;
  *(void *)(v0 + 6944) = 0x6863616570;
  *(void *)(v0 + 6960) = 0x6B636F63616570;
  *(void *)(v0 + 6976) = 0x74756E616570;
  *(void *)(v0 + 2616) = 0xE900000000000074;
  *(void *)(v0 + 6992) = 1918985584;
  *(void *)(v0 + 7008) = 0x6E61636570;
  *(void *)(v0 + 7024) = 0x6E6163696C6570;
  *(void *)(v0 + 7040) = 7234928;
  *(void *)(v0 + 2536) = 0xE800000000000000;
  *(void *)(v0 + 2544) = 0xD000000000000011;
  *(void *)(v0 + 2560) = 0xD000000000000010;
  *(void *)(v0 + 7056) = 0x6E6975676E6570;
  *(void *)(v0 + 7072) = 0x656C706F6570;
  *(void *)(v0 + 2520) = 0xE600000000000000;
  strcpy((char *)(v0 + 7088), "pepper_veggie");
  *(_WORD *)(v0 + 7102) = -4864;
  *(void *)(v0 + 2488) = 0xEB000000006E6165;
  *(void *)(v0 + 2504) = 0xE800000000000000;
  *(void *)(v0 + 7104) = 0x6E6F726570706570;
  *(void *)(v0 + 7120) = 0x6E69726765726570;
  *(void *)(v0 + 2456) = 0xE800000000000000;
  *(void *)(v0 + 2472) = 0xE700000000000000;
  *(void *)(v0 + 7136) = 0x6F6D6D6973726570;
  *(void *)(v0 + 2416) = 0x6E776F6C63;
  *(void *)(v0 + 2424) = 0xE500000000000000;
  *(void *)(v0 + 2440) = 0xE900000000000068;
  *(void *)(v0 + 7152) = 0x61696E75746570;
  *(void *)(v0 + 7168) = 0x6F6E616970;
  *(void *)(v0 + 2392) = 0xE800000000000000;
  *(void *)(v0 + 2408) = 0xE600000000000000;
  *(void *)(v0 + 7184) = 0x656C6B636970;
  *(void *)(v0 + 7216) = 0x69676F72656970;
  *(void *)(v0 + 2360) = 0xE800000000000000;
  *(void *)(v0 + 7232) = 6777200;
  *(void *)(v0 + 7248) = 0x6E6F65676970;
  *(void *)(v0 + 7264) = 0x776F6C6C6970;
  *(void *)(v0 + 2344) = 0xE400000000000000;
  *(void *)(v0 + 7280) = 0x6C707061656E6970;
  *(void *)(v0 + 7296) = 1701865840;
  *(void *)(v0 + 2296) = 0xE900000000000065;
  *(void *)(v0 + 2312) = 0xE800000000000000;
  *(void *)(v0 + 7312) = 0x6968636174736970;
  *(void *)(v0 + 7328) = 0x6C6F74736970;
  *(void *)(v0 + 2280) = 0xE500000000000000;
  *(void *)(v0 + 7344) = 1635019120;
  *(void *)(v0 + 7360) = 0x6C6C7562746970;
  *(void *)(v0 + 7376) = 0x617A7A6970;
  *(void *)(v0 + 7392) = 0x746E616C70;
  *(void *)(v0 + 7408) = 0x737265696C70;
  *(void *)(v0 + 7424) = 1836412016;
  *(void *)(v0 + 2216) = 0xE600000000000000;
  *(void *)(v0 + 2232) = 0xE900000000000065;
  *(void *)(v0 + 7440) = 0x747465736E696F70;
  *(void *)(v0 + 7448) = 0xEA00000000006169;
  *(void *)(v0 + 2200) = 0xE500000000000000;
  *(void *)(v0 + 7456) = 0x635F6563696C6F70;
  *(void *)(v0 + 7464) = 0xEA00000000007261;
  *(void *)(v0 + 7472) = 0x6E617267656D6F70;
  *(void *)(v0 + 2152) = 0xE800000000000000;
  *(void *)(v0 + 7480) = 0xEB00000000657461;
  *(void *)(v0 + 7488) = 0x696E6172656D6F70;
  *(void *)(v0 + 2120) = 0xE600000000000000;
  *(void *)(v0 + 2136) = 0xE500000000000000;
  *(void *)(v0 + 7496) = 0xEA00000000006E61;
  *(void *)(v0 + 7504) = 0x656C646F6F70;
  *(void *)(v0 + 2104) = 0xE700000000000000;
  *(void *)(v0 + 7520) = 0x6E726F63706F70;
  *(void *)(v0 + 7536) = 0x656C636973706F70;
  *(void *)(v0 + 2056) = 0xE90000000000006BLL;
  *(void *)(v0 + 2072) = 0xE600000000000000;
  *(void *)(v0 + 7552) = 0x6B6F6F635F746F70;
  *(void *)(v0 + 7568) = 0x6F7461746F70;
  *(void *)(v0 + 2024) = 0xE600000000000000;
  *(void *)(v0 + 2040) = 0xE500000000000000;
  *(void *)(v0 + 7584) = 0x7972746C756F70;
  *(void *)(v0 + 7600) = 0x61735F7265776F70;
  *(void *)(v0 + 7608) = 0xE900000000000077;
  *(void *)(v0 + 1992) = 0xE500000000000000;
  *(void *)(v0 + 2008) = 0xEB00000000726568;
  *(void *)(v0 + 7616) = 0x6C657A74657270;
  strcpy((char *)(v0 + 7632), "printed_page");
  *(void *)(v0 + 1960) = 0xE800000000000000;
  *(void *)(v0 + 1976) = 0xE800000000000000;
  *(unsigned char *)(v0 + 7645) = 0;
  *(_WORD *)(v0 + 7646) = -5120;
  *(void *)(v0 + 7648) = 0x697463656A6F7270;
  *(void *)(v0 + 1928) = 0xE500000000000000;
  *(void *)(v0 + 1944) = 0xE600000000000000;
  *(void *)(v0 + 6264) = 0xEA0000000000656CLL;
  *(void *)(v0 + 7656) = 0xEA0000000000656CLL;
  *(void *)(v0 + 7664) = 0x656C6C65706F7270;
  *(void *)(v0 + 1912) = 0xE600000000000000;
  *(void *)(v0 + 7680) = 1801680240;
  *(void *)(v0 + 7696) = 0x676E6964647570;
  *(void *)(v0 + 1864) = 0xE900000000000065;
  *(void *)(v0 + 1872) = 7627107;
  *(void *)(v0 + 1880) = 0xE300000000000000;
  *(void *)(v0 + 7712) = 0x665F726566667570;
  *(void *)(v0 + 1832) = 0xE600000000000000;
  *(void *)(v0 + 1848) = 0xE600000000000000;
  *(void *)(v0 + 6336) = 0x6E696666756DLL;
  *(void *)(v0 + 7728) = 0x6E6966667570;
  *(void *)(v0 + 7744) = 6780272;
  *(void *)(v0 + 1800) = 0xE700000000000000;
  *(void *)(v0 + 1816) = 0xE90000000000006ELL;
  *(void *)(v0 + 7760) = 0x6E696B706D7570;
  *(void *)(v0 + 7776) = 0x6C69646173657571;
  *(void *)(v0 + 1768) = 0xE300000000000000;
  *(void *)(v0 + 1784) = 0xE800000000000000;
  *(void *)(v0 + 7784) = 0xEA0000000000616CLL;
  *(void *)(v0 + 7792) = 0x616F6E697571;
  *(void *)(v0 + 1752) = 0xE700000000000000;
  *(void *)(v0 + 7808) = 0x74657571636172;
  *(void *)(v0 + 7824) = 0x687369646172;
  *(void *)(v0 + 1704) = 0xE600000000000000;
  *(void *)(v0 + 1720) = 0xE500000000000000;
  *(void *)(v0 + 7840) = 0x676E6974666172;
  *(void *)(v0 + 1568) = 1701536099;
  *(void *)(v0 + 1672) = 0xE500000000000000;
  *(void *)(v0 + 1688) = 0xEB00000000726568;
  *(void *)(v0 + 7856) = 1701536114;
  *(void *)(v0 + 7872) = 0x6E617475626D6172;
  *(void *)(v0 + 1640) = 0xE500000000000000;
  *(void *)(v0 + 1656) = 0xE600000000000000;
  *(void *)(v0 + 7904) = 0x726F74706172;
  *(void *)(v0 + 7920) = 0x7272656270736172;
  *(void *)(v0 + 1608) = 0xE800000000000000;
  *(void *)(v0 + 1624) = 0xE700000000000000;
  *(void *)(v0 + 7936) = 0x74656863746172;
  *(void *)(v0 + 7888) = 0x6E656D6172;
  *(void *)(v0 + 7952) = 0x6E65766172;
  *(void *)(v0 + 1576) = 0xE400000000000000;
  *(void *)(v0 + 7968) = 0x74706965636572;
  *(void *)(v0 + 7984) = 0x6974616572636572;
  *(void *)(v0 + 1544) = 0xE600000000000000;
  *(void *)(v0 + 1560) = 0xE700000000000000;
  strcpy((char *)(v0 + 8000), "refrigerator");
  *(void *)(v0 + 8032) = 0x7265766C6F766572;
  *(void *)(v0 + 1528) = 0xE300000000000000;
  *(void *)(v0 + 8048) = 0x7265636F6E696872;
  *(void *)(v0 + 8056) = 0xEA0000000000736FLL;
  *(void *)(v0 + 1496) = 0xE900000000000072;
  *(void *)(v0 + 1512) = 0xE700000000000000;
  *(void *)(v0 + 8064) = 0x62726162756872;
  *(void *)(v0 + 8080) = 1701013874;
  *(void *)(v0 + 1480) = 0xE700000000000000;
  *(void *)(v0 + 8096) = 0x776168736B636972;
  *(void *)(v0 + 8112) = 0x6361626567646972;
  *(void *)(v0 + 1432) = 0xE500000000000000;
  *(void *)(v0 + 1448) = 0xE700000000000000;
  *(void *)(v0 + 8128) = 0x656C666972;
  *(void *)(v0 + 8144) = 0x6F74746F736972;
  *(void *)(v0 + 1416) = 0xE800000000000000;
  *(void *)(v0 + 7200) = 6646128;
  *(void *)(v0 + 8160) = 6647666;
  strcpy((char *)(v0 + 8176), "rollerskates");
  *(void *)(v0 + 1384) = 0xE500000000000000;
  *(unsigned char *)(v0 + 8013) = 0;
  *(_WORD *)(v0 + 8014) = -5120;
  *(unsigned char *)(v0 + 8189) = 0;
  *(_WORD *)(v0 + 8190) = -5120;
  *(void *)(v0 + 0x2000) = 1702063986;
  *(void *)(v0 + 1352) = 0xE600000000000000;
  *(void *)(v0 + 8208) = 0x7972616D65736F72;
  *(void *)(v0 + 1328) = 1802465122;
  *(void *)(v0 + 1336) = 0xE400000000000000;
  *(void *)(v0 + 8224) = 0x7265737369746F72;
  *(void *)(v0 + 1280) = 0x7261705F79646F62;
  *(void *)(v0 + 1288) = 0xE900000000000074;
  *(void *)(v0 + 1304) = 0xE900000000000064;
  *(void *)(v0 + 8232) = 0xEA00000000006569;
  *(void *)(v0 + 8240) = 0x6C69657774746F72;
  *(void *)(v0 + 1256) = 0xE400000000000000;
  *(void *)(v0 + 1272) = 0xE600000000000000;
  *(void *)(v0 + 8256) = 0x657474656C756F72;
  *(void *)(v0 + 8272) = 0x74616F62776F72;
  *(void *)(v0 + 8288) = 0x74616F626C696173;
  strcpy((char *)(v0 + 8304), "saint_bernard");
  *(_WORD *)(v0 + 8318) = -4864;
  *(void *)(v0 + 1208) = 0xE900000000000079;
  *(void *)(v0 + 1224) = 0xE400000000000000;
  *(void *)(v0 + 8320) = 0x64616C6173;
  *(void *)(v0 + 8336) = 0x696D616C6173;
  *(void *)(v0 + 1176) = 0xE700000000000000;
  *(void *)(v0 + 1192) = 0xE700000000000000;
  *(void *)(v0 + 8352) = 0x6E6F6D6C6173;
  *(void *)(v0 + 8368) = 0x61736F6D6173;
  *(void *)(v0 + 1144) = 0xE90000000000006BLL;
  *(void *)(v0 + 1160) = 0xE500000000000000;
  *(void *)(v0 + 8384) = 0x65706970646E6173;
  *(void *)(v0 + 1112) = 0xE500000000000000;
  *(void *)(v0 + 1128) = 0xEA00000000007972;
  *(void *)(v0 + 8400) = 0x68636977646E6173;
  *(void *)(v0 + 8416) = 0x656E6964726173;
  *(void *)(v0 + 1080) = 0xE800000000000000;
  *(void *)(v0 + 1096) = 0xE700000000000000;
  *(void *)(v0 + 8432) = 0x7961746173;
  *(void *)(v0 + 8672) = 0x6573726F68616573;
  *(void *)(v0 + 1064) = 0xE700000000000000;
  *(void *)(v0 + 4920) = 0xE600000000000000;
  *(void *)(v0 + 4936) = 0xE500000000000000;
  *(void *)(v0 + 4952) = 0xE600000000000000;
  *(void *)(v0 + 4968) = 0xE500000000000000;
  *(void *)(v0 + 4984) = 0xE900000000000074;
  *(void *)(v0 + 5016) = 0xE600000000000000;
  *(void *)(v0 + 5032) = 0xE500000000000000;
  *(void *)(v0 + 9048) = 0xE700000000000000;
  *(void *)(v0 + 9104) = 0x61705F72616C6F73;
  *(void *)(v0 + 9120) = 0x6F726572626D6F73;
  *(void *)(v0 + 9416) = 0x8000000100011D90;
  *(void *)(v0 + 9744) = 0x676E6966727573;
  *(void *)(v0 + 10064) = 0x706F6373656C6574;
  *(void *)(v0 + 10144) = 0x656D6F6D72656874;
  *(void *)(v0 + 10656) = 0x6D7575636176;
  *(void *)(v0 + 10688) = 0x6C62617465676576;
  strcpy((char *)(v0 + 10800), "wakeboarding");
  *(void *)(v0 + 7320) = 0xE90000000000006FLL;
  *(void *)(v0 + 10888) = 0xE90000000000006FLL;
  strcpy((char *)(v0 + 10944), "weight_scale");
  *(void *)(v0 + 10976) = 0x74697573746577;
  *(void *)(v0 + 10984) = 0xE700000000000000;
  *(unsigned char *)(v0 + 10957) = 0;
  *(_WORD *)(v0 + 10958) = -5120;
  *(void *)(v0 + 10960) = 0x6E6172616D696577;
  *(void *)(v0 + 10968) = 0xEA00000000007265;
  *(void *)(v0 + 10912) = 0x6E6F70616577;
  strcpy((char *)(v0 + 10928), "wedding_cake");
  *(unsigned char *)(v0 + 10941) = 0;
  *(_WORD *)(v0 + 10942) = -5120;
  *(void *)(v0 + 10920) = 0xE600000000000000;
  *(void *)(v0 + 10896) = 0x6F70737265746177;
  *(void *)(v0 + 6296) = 0xEA00000000007472;
  *(void *)(v0 + 10904) = 0xEA00000000007472;
  *(void *)(v0 + 10856) = 0xEA00000000007466;
  *(void *)(v0 + 10864) = 0x6C656D7265746177;
  *(void *)(v0 + 10880) = 0x6C6F707265746177;
  *(void *)(v0 + 10872) = 0xEA00000000006E6FLL;
  *(void *)(v0 + 10832) = 0x696261736177;
  *(void *)(v0 + 10848) = 0x6172637265746177;
  *(void *)(v0 + 10824) = 0xE700000000000000;
  *(void *)(v0 + 10840) = 0xE600000000000000;
  *(unsigned char *)(v0 + 5341) = 0;
  *(_WORD *)(v0 + 5342) = -5120;
  *(unsigned char *)(v0 + 10813) = 0;
  *(_WORD *)(v0 + 10814) = -5120;
  *(void *)(v0 + 10816) = 0x70696873726177;
  *(void *)(v0 + 10792) = 0xE600000000000000;
  *(void *)(v0 + 10768) = 0x657275746C7576;
  *(void *)(v0 + 10784) = 0x656C66666177;
  *(void *)(v0 + 10760) = 0xE600000000000000;
  *(void *)(v0 + 10776) = 0xE700000000000000;
  *(void *)(v0 + 10736) = 0x6E696C6F6976;
  *(void *)(v0 + 10752) = 0x616C737A6976;
  *(void *)(v0 + 10728) = 0xE900000000000065;
  *(void *)(v0 + 10744) = 0xE600000000000000;
  *(void *)(v0 + 10704) = 0x656C6369686576;
  *(void *)(v0 + 10720) = 0x6D61676F65646976;
  *(void *)(v0 + 10696) = 0xE900000000000065;
  *(void *)(v0 + 10712) = 0xE700000000000000;
  *(void *)(v0 + 6752) = 7233904;
  *(void *)(v0 + 10672) = 7233910;
  *(void *)(v0 + 10664) = 0xE600000000000000;
  *(void *)(v0 + 10680) = 0xE300000000000000;
  *(void *)(v0 + 10624) = 0x6574616C75676E75;
  *(void *)(v0 + 10640) = 0x6C69736E657475;
  *(void *)(v0 + 10632) = 0xE900000000000073;
  *(void *)(v0 + 10648) = 0xE700000000000000;
  *(void *)(v0 + 10592) = 0x6C6261746E727574;
  *(void *)(v0 + 10608) = 0x656C656C756B75;
  *(void *)(v0 + 10600) = 0xE900000000000065;
  *(void *)(v0 + 10616) = 0xE700000000000000;
  *(void *)(v0 + 10560) = 1634628980;
  *(void *)(v0 + 10576) = 0x636972656D727574;
  *(void *)(v0 + 10568) = 0xE400000000000000;
  *(void *)(v0 + 10584) = 0xE800000000000000;
  *(void *)(v0 + 10528) = 1633842548;
  *(void *)(v0 + 10544) = 0x70696C7574;
  *(void *)(v0 + 10536) = 0xE400000000000000;
  *(void *)(v0 + 10552) = 0xE500000000000000;
  *(void *)(v0 + 10496) = 0x6B63757274;
  *(void *)(v0 + 10512) = 0x7465706D757274;
  *(void *)(v0 + 10504) = 0xE500000000000000;
  *(void *)(v0 + 10520) = 0xE700000000000000;
  strcpy((char *)(v0 + 10352), "toy_organizer");
  *(void *)(v0 + 10480) = 0x74756F7274;
  *(void *)(v0 + 10472) = 0xE800000000000000;
  *(void *)(v0 + 10488) = 0xE500000000000000;
  *(void *)(v0 + 10448) = 0x656C637963697274;
  *(void *)(v0 + 10464) = 0x656E6F626D6F7274;
  *(void *)(v0 + 10440) = 0xEA0000000000656ELL;
  *(void *)(v0 + 10456) = 0xE800000000000000;
  *(void *)(v0 + 10416) = 0x6F745F6E69617274;
  *(void *)(v0 + 10432) = 0x696C6F706D617274;
  *(void *)(v0 + 10424) = 0xE900000000000079;
  *(void *)(v0 + 10384) = 0x6E69617274;
  *(void *)(v0 + 10400) = 0x65725F6E69617274;
  *(void *)(v0 + 10408) = 0xEA00000000006C61;
  *(void *)(v0 + 10392) = 0xE500000000000000;
  *(_WORD *)(v0 + 10366) = -4864;
  *(void *)(v0 + 10368) = 0x726F7463617274;
  *(void *)(v0 + 10376) = 0xE700000000000000;
  *(void *)(v0 + 10320) = 0x6E6163756F74;
  *(void *)(v0 + 10336) = 7958388;
  *(void *)(v0 + 10328) = 0xE600000000000000;
  *(void *)(v0 + 10344) = 0xE300000000000000;
  strcpy((char *)(v0 + 10240), "toaster_oven");
  *(void *)(v0 + 10304) = 0x616C6C6974726F74;
  *(void *)(v0 + 10296) = 0xE400000000000000;
  *(void *)(v0 + 10312) = 0xE800000000000000;
  *(void *)(v0 + 10264) = 0xEB00000000746165;
  *(void *)(v0 + 10272) = 0x6F74616D6F74;
  *(void *)(v0 + 10288) = 1819242356;
  *(void *)(v0 + 10280) = 0xE600000000000000;
  *(unsigned char *)(v0 + 5309) = 0;
  *(_WORD *)(v0 + 5310) = -5120;
  *(unsigned char *)(v0 + 10253) = 0;
  *(_WORD *)(v0 + 10254) = -5120;
  *(void *)(v0 + 10256) = 0x735F74656C696F74;
  *(void *)(v0 + 10232) = 0xE700000000000000;
  *(void *)(v0 + 10208) = 0x7573696D61726974;
  *(void *)(v0 + 10224) = 0x72657473616F74;
  *(void *)(v0 + 10200) = 0xE500000000000000;
  *(void *)(v0 + 10216) = 0xE800000000000000;
  *(void *)(v0 + 10176) = 0x74656B636974;
  *(void *)(v0 + 10192) = 0x7265676974;
  *(void *)(v0 + 10168) = 0xE500000000000000;
  *(void *)(v0 + 10184) = 0xE600000000000000;
  *(void *)(v0 + 10152) = 0xEB00000000726574;
  *(void *)(v0 + 10160) = 0x6172616974;
  *(void *)(v0 + 10136) = 0xE700000000000000;
  *(void *)(v0 + 10112) = 0x696B617969726574;
  *(void *)(v0 + 10128) = 0x72656972726574;
  *(void *)(v0 + 10104) = 0xE700000000000000;
  *(void *)(v0 + 10120) = 0xE800000000000000;
  *(void *)(v0 + 10080) = 0x69736976656C6574;
  *(void *)(v0 + 10096) = 0x617275706D6574;
  *(void *)(v0 + 6168) = 0xEA0000000000656ELL;
  *(void *)(v0 + 10072) = 0xE900000000000065;
  *(void *)(v0 + 10088) = 0xEA00000000006E6FLL;
  *(void *)(v0 + 9976) = 0xEA0000000000656ELL;
  *(void *)(v0 + 10048) = 1852138868;
  *(void *)(v0 + 10040) = 0xE400000000000000;
  *(void *)(v0 + 10056) = 0xE400000000000000;
  strcpy((char *)(v0 + 10016), "tapioca_pearls");
  *(unsigned char *)(v0 + 10031) = -18;
  *(void *)(v0 + 10032) = 1869767028;
  *(void *)(v0 + 10008) = 0xE500000000000000;
  *(void *)(v0 + 9984) = 0x6D72615F6B6E6174;
  *(void *)(v0 + 7928) = 0xE900000000000079;
  *(void *)(v0 + 9992) = 0xE900000000000079;
  *(void *)(v0 + 10000) = 0x7361706174;
  *(void *)(v0 + 9952) = 0x7966666174;
  *(void *)(v0 + 9968) = 0x6972756F626D6174;
  *(void *)(v0 + 9944) = 0xE400000000000000;
  *(void *)(v0 + 9960) = 0xE500000000000000;
  *(void *)(v0 + 9920) = 0x74656C626174;
  *(void *)(v0 + 9936) = 1868783988;
  *(void *)(v0 + 9912) = 0xE500000000000000;
  *(void *)(v0 + 9928) = 0xE600000000000000;
  *(void *)(v0 + 9888) = 0x656C756F62626174;
  *(void *)(v0 + 9904) = 0x656C626174;
  *(void *)(v0 + 9880) = 0xE700000000000000;
  *(void *)(v0 + 9896) = 0xE900000000000068;
  *(void *)(v0 + 9856) = 0x73696664726F7773;
  *(void *)(v0 + 9872) = 0x65676E69727973;
  *(void *)(v0 + 9864) = 0xE900000000000068;
  strcpy((char *)(v0 + 9824), "swivel_chair");
  *(unsigned char *)(v0 + 9837) = 0;
  *(_WORD *)(v0 + 9838) = -5120;
  *(void *)(v0 + 9840) = 0x64726F7773;
  *(void *)(v0 + 9848) = 0xE500000000000000;
  *(void *)(v0 + 9760) = 0x6968737573;
  *(void *)(v0 + 9808) = 0x676E696D6D697773;
  *(void *)(v0 + 9800) = 0xE400000000000000;
  *(void *)(v0 + 9816) = 0xE800000000000000;
  *(void *)(v0 + 9776) = 7763315;
  *(void *)(v0 + 9792) = 1851881331;
  *(void *)(v0 + 9784) = 0xE300000000000000;
  *(void *)(v0 + 9752) = 0xE700000000000000;
  *(void *)(v0 + 9768) = 0xE500000000000000;
  *(void *)(v0 + 9592) = 0x8000000100011DB0;
  *(void *)(v0 + 9728) = 0x72616F6266727573;
  *(void *)(v0 + 9720) = 0xE600000000000000;
  *(void *)(v0 + 9736) = 0xE900000000000064;
  *(void *)(v0 + 9704) = 0xEF73646565735F72;
  *(void *)(v0 + 9712) = 0x7461686E7573;
  *(void *)(v0 + 9688) = 0xE900000000000072;
  *(void *)(v0 + 9696) = 0x65776F6C666E7573;
  *(void *)(v0 + 9632) = 0x6E6972616D627573;
  *(void *)(v0 + 9664) = 0x687369666E7573;
  *(void *)(v0 + 9680) = 0x65776F6C666E7573;
  *(void *)(v0 + 9672) = 0xE700000000000000;
  *(void *)(v0 + 9640) = 0xEF72657461775F65;
  *(void *)(v0 + 9648) = 0x75635F7261677573;
  *(void *)(v0 + 9656) = 0xEA00000000006562;
  *(void *)(v0 + 9600) = 0x7275746375727473;
  *(void *)(v0 + 9616) = 0x6C656475727473;
  *(void *)(v0 + 9608) = 0xE900000000000065;
  *(void *)(v0 + 9624) = 0xE700000000000000;
  *(void *)(v0 + 9568) = 0x6163746565727473;
  *(void *)(v0 + 6592) = 0xD000000000000011;
  *(void *)(v0 + 9584) = 0xD000000000000011;
  *(void *)(v0 + 9576) = 0xE900000000000072;
  *(void *)(v0 + 9536) = 0x7265627761727473;
  *(void *)(v0 + 9544) = 0xEA00000000007972;
  *(void *)(v0 + 9552) = 0x735F746565727473;
  *(void *)(v0 + 9560) = 0xEB000000006E6769;
  *(void *)(v0 + 9504) = 0x6B726F7473;
  *(void *)(v0 + 9520) = 0x65766F7473;
  *(void *)(v0 + 9512) = 0xE500000000000000;
  *(void *)(v0 + 9528) = 0xE500000000000000;
  *(void *)(v0 + 9472) = 0x7972665F72697473;
  *(void *)(v0 + 9488) = 0x6C6F6F7473;
  *(void *)(v0 + 9480) = 0xE800000000000000;
  *(void *)(v0 + 9496) = 0xE500000000000000;
  *(void *)(v0 + 9448) = 0xEB0000000065746FLL;
  *(void *)(v0 + 9456) = 0x796172676E697473;
  *(void *)(v0 + 9464) = 0xE800000000000000;
  *(void *)(v0 + 9424) = 0x63736F6874657473;
  *(void *)(v0 + 9432) = 0xEB0000000065706FLL;
  *(void *)(v0 + 9440) = 0x6E5F796B63697473;
  *(void *)(v0 + 9344) = 0x6F72676E69727073;
  *(void *)(v0 + 9392) = 0x6B61657473;
  *(void *)(v0 + 9384) = 0xE900000000000074;
  *(void *)(v0 + 9400) = 0xE500000000000000;
  *(void *)(v0 + 9408) = 0xD000000000000010;
  *(void *)(v0 + 9352) = 0xEA00000000006C6CLL;
  *(void *)(v0 + 9376) = 0x6975726672617473;
  *(void *)(v0 + 9368) = 0xE800000000000000;
  *(void *)(v0 + 9360) = 0x6873696672617473;
  *(void *)(v0 + 9336) = 0xE900000000000072;
  *(void *)(v0 + 9320) = 0x8000000100011D70;
  *(void *)(v0 + 9328) = 0x61637374726F7073;
  *(void *)(v0 + 9304) = 0xE500000000000000;
  *(void *)(v0 + 9312) = 0xD000000000000010;
  *(void *)(v0 + 9280) = 0x6863616E697073;
  *(void *)(v0 + 9296) = 0x74726F7073;
  *(void *)(v0 + 9272) = 0xE500000000000000;
  *(void *)(v0 + 9288) = 0xE700000000000000;
  *(void *)(v0 + 9248) = 0x616F626465657073;
  *(void *)(v0 + 9264) = 0x6563697073;
  *(void *)(v0 + 9240) = 0xE700000000000000;
  *(void *)(v0 + 9256) = 0xE900000000000074;
  *(void *)(v0 + 9216) = 0x6269726572617073;
  *(void *)(v0 + 9232) = 0x776F7272617073;
  *(void *)(v0 + 9208) = 0xE700000000000000;
  *(void *)(v0 + 9224) = 0xE900000000000073;
  *(void *)(v0 + 9184) = 0x7474656867617073;
  *(void *)(v0 + 7112) = 0xE900000000000069;
  *(void *)(v0 + 9192) = 0xE900000000000069;
  *(void *)(v0 + 9200) = 0x6C65696E617073;
  *(void *)(v0 + 9176) = 0xE800000000000000;
  *(void *)(v0 + 9152) = 1886744435;
  *(void *)(v0 + 9168) = 0x696B616C76756F73;
  *(void *)(v0 + 9144) = 0xE700000000000000;
  *(void *)(v0 + 9160) = 0xE400000000000000;
  *(void *)(v0 + 9136) = 0x656C6666756F73;
  *(void *)(v0 + 6384) = 0xD000000000000012;
  *(void *)(v0 + 9112) = 0xEB000000006C656ELL;
  *(void *)(v0 + 9128) = 0xE800000000000000;
  *(void *)(v0 + 8864) = 0xD000000000000012;
  *(void *)(v0 + 9088) = 1634103155;
  *(void *)(v0 + 9080) = 0xE900000000000064;
  *(void *)(v0 + 9096) = 0xE400000000000000;
  *(void *)(v0 + 9056) = 0x696C656B726F6E73;
  *(void *)(v0 + 9064) = 0xEA0000000000676ELL;
  *(void *)(v0 + 9072) = 0x72616F62776F6E73;
  *(unsigned char *)(v0 + 9021) = 0;
  *(_WORD *)(v0 + 9022) = -5120;
  *(void *)(v0 + 9024) = 0x6761726470616E73;
  *(void *)(v0 + 9040) = 0x72657070616E73;
  *(void *)(v0 + 9032) = 0xEA00000000006E6FLL;
  *(void *)(v0 + 8992) = 0x6C6C756B73;
  *(void *)(v0 + 9000) = 0xE500000000000000;
  strcpy((char *)(v0 + 9008), "smoking_item");
  *(void *)(v0 + 8960) = 0x746F6F625F696B73;
  strcpy((char *)(v0 + 8976), "ski_equipment");
  *(_WORD *)(v0 + 8990) = -4864;
  *(void *)(v0 + 8968) = 0xE800000000000000;
  *(void *)(v0 + 8944) = 0x6E6F74656C656B73;
  *(void *)(v0 + 8936) = 0xEA00000000006472;
  *(void *)(v0 + 8952) = 0xE800000000000000;
  *(void *)(v0 + 8912) = 0x7265676E6973;
  *(void *)(v0 + 8928) = 0x616F626574616B73;
  *(void *)(v0 + 8920) = 0xE600000000000000;
  *(void *)(v0 + 8896) = 1852270963;
  *(void *)(v0 + 8888) = 0xE700000000000000;
  *(void *)(v0 + 8904) = 0xE400000000000000;
  *(void *)(v0 + 8872) = 0x8000000100011D50;
  *(void *)(v0 + 8880) = 0x6E7567746F6873;
  *(void *)(v0 + 8856) = 0xE900000000000068;
  *(void *)(v0 + 8832) = 0x676F647065656873;
  *(void *)(v0 + 8848) = 0x7369666C6C656873;
  *(void *)(v0 + 8824) = 0xE500000000000000;
  *(void *)(v0 + 8840) = 0xE800000000000000;
  *(void *)(v0 + 8800) = 0x616D726177616873;
  *(void *)(v0 + 8816) = 0x7065656873;
  *(void *)(v0 + 8792) = 0xE500000000000000;
  *(void *)(v0 + 8808) = 0xE800000000000000;
  *(void *)(v0 + 8736) = 0x7572745F696D6573;
  *(void *)(v0 + 8768) = 0x726574746573;
  *(void *)(v0 + 8784) = 0x6B72616873;
  *(void *)(v0 + 8760) = 0xE600000000000000;
  *(void *)(v0 + 8776) = 0xE600000000000000;
  *(void *)(v0 + 8744) = 0xEA00000000006B63;
  *(void *)(v0 + 8752) = 0x656D61736573;
  *(void *)(v0 + 6096) = 1952540013;
  *(void *)(v0 + 8728) = 0xE400000000000000;
  *(void *)(v0 + 8704) = 1952540019;
  *(void *)(v0 + 8720) = 1684366707;
  *(void *)(v0 + 8712) = 0xE400000000000000;
  *(void *)(v0 + 8688) = 0x6E696E6F73616573;
  *(void *)(v0 + 8696) = 0xEA00000000007367;
  *(void *)(v0 + 8680) = 0xE800000000000000;
  *(void *)(v0 + 8560) = 0x616F6265726F6373;
  *(void *)(v0 + 8656) = 0x646F6F66616573;
  *(void *)(v0 + 8648) = 0xE700000000000000;
  *(void *)(v0 + 8664) = 0xE700000000000000;
  *(void *)(v0 + 8592) = 0x68736E6565726373;
  *(void *)(v0 + 8624) = 0x6162756373;
  *(void *)(v0 + 8640) = 0x73736162616573;
  *(void *)(v0 + 8632) = 0xE500000000000000;
  *(void *)(v0 + 8600) = 0xEA0000000000746FLL;
  *(void *)(v0 + 8608) = 0x6972647765726373;
  *(void *)(v0 + 8616) = 0xEB00000000726576;
  *(void *)(v0 + 8568) = 0xEA00000000006472;
  strcpy((char *)(v0 + 8576), "scrambled_eggs");
  *(unsigned char *)(v0 + 8591) = -18;
  *(void *)(v0 + 8528) = 0x73726F7373696373;
  *(void *)(v0 + 8544) = 0x656E6F6373;
  *(void *)(v0 + 8536) = 0xE800000000000000;
  *(void *)(v0 + 8552) = 0xE500000000000000;
  *(void *)(v0 + 8496) = 0x706F6C6C616373;
  *(void *)(v0 + 8512) = 0x657A75616E686373;
  *(void *)(v0 + 8504) = 0xE700000000000000;
  *(void *)(v0 + 8520) = 0xE900000000000072;
  *(void *)(v0 + 8448) = 0x61726B7265756173;
  *(void *)(v0 + 8480) = 0x6E6F68706F786173;
  *(void *)(v0 + 8472) = 0xE700000000000000;
  *(void *)(v0 + 8488) = 0xE900000000000065;
  *(void *)(v0 + 8456) = 0xEA00000000007475;
  *(void *)(v0 + 8464) = 0x65676173756173;
  *(void *)(v0 + 10992) = 0x656C616877;
  *(void *)(v0 + 8440) = 0xE500000000000000;
  *(void *)(v0 + 11008) = 0x7461656877;
  *(void *)(v0 + 11024) = 0x6168636C65656877;
  *(void *)(v0 + 8408) = 0xE800000000000000;
  *(void *)(v0 + 8424) = 0xE700000000000000;
  *(void *)(v0 + 11032) = 0xEA00000000007269;
  *(void *)(v0 + 11040) = 0x72625F6574696877;
  *(void *)(v0 + 8360) = 0xE600000000000000;
  *(void *)(v0 + 8376) = 0xE600000000000000;
  *(void *)(v0 + 8392) = 0xE900000000000072;
  *(void *)(v0 + 11048) = 0xEB00000000646165;
  *(void *)(v0 + 11056) = 0x68636E6977;
  *(void *)(v0 + 8328) = 0xE500000000000000;
  *(void *)(v0 + 8344) = 0xE600000000000000;
  *(void *)(v0 + 11072) = 0x66727573646E6977;
  *(void *)(v0 + 6840) = 0xEB00000000676E69;
  *(void *)(v0 + 7560) = 0xEB00000000676E69;
  *(void *)(v0 + 11080) = 0xEB00000000676E69;
  *(void *)(v0 + 8296) = 0xE800000000000000;
  *(void *)(v0 + 11088) = 0x746F625F656E6977;
  *(void *)(v0 + 11096) = 0xEB00000000656C74;
  *(void *)(v0 + 8264) = 0xE800000000000000;
  *(void *)(v0 + 8280) = 0xE700000000000000;
  *(void *)(v0 + 11104) = 0x6E6F746E6F77;
  *(void *)(v0 + 11120) = 0x6B636570646F6F77;
  *(void *)(v0 + 11136) = 0x646E6977646F6F77;
  *(void *)(v0 + 8248) = 0xEA00000000007265;
  *(void *)(v0 + 11152) = 0x68636E657277;
  *(void *)(v0 + 11168) = 0x6E6F68706F6C7978;
  *(void *)(v0 + 8200) = 0xE400000000000000;
  *(void *)(v0 + 8216) = 0xE800000000000000;
  *(void *)(v0 + 11184) = 0x7468636179;
  *(void *)(v0 + 11200) = 0x747275676F79;
  *(void *)(v0 + 8168) = 0xE300000000000000;
  *(void *)(v0 + 11216) = 1802268537;
  *(void *)(v0 + 11232) = 0x617262657ALL;
  *(void *)(v0 + 8136) = 0xE500000000000000;
  *(void *)(v0 + 8152) = 0xE700000000000000;
  *(void *)(v0 + 11248) = 0x696E69686363757ALL;
  *(void *)(v0 + 11264) = 0x756173656C707061;
  *(void *)(v0 + 8104) = 0xE800000000000000;
  *(void *)(v0 + 8120) = 0xE90000000000006BLL;
  *(void *)(v0 + 11272) = 0xEA00000000006563;
  *(void *)(v0 + 11280) = 0x7261705F79646F62;
  *(void *)(v0 + 11288) = 0xEF726568746F5F74;
  *(void *)(v0 + 8088) = 0xE400000000000000;
  strcpy((char *)(v0 + 11296), "breast_female");
  *(_WORD *)(v0 + 11310) = -4864;
  *(void *)(v0 + 8072) = 0xE700000000000000;
  *(void *)(v0 + 11312) = 0x6D5F747361657262;
  *(void *)(v0 + 11320) = 0xEB00000000656C61;
  *(void *)(v0 + 11328) = 0x736B636F74747562;
  *(void *)(v0 + 8024) = 0xE900000000000072;
  *(void *)(v0 + 8040) = 0xE800000000000000;
  *(void *)(v0 + 11352) = 0xEF656C616D65665FLL;
  *(void *)(v0 + 7976) = 0xE700000000000000;
  *(void *)(v0 + 7992) = 0xEA00000000006E6FLL;
  *(void *)(v0 + 11344) = 0x736C6174696E6567;
  strcpy((char *)(v0 + 11360), "genitals_male");
  *(_WORD *)(v0 + 11374) = -4864;
  *(void *)(v0 + 11376) = 0x79656C726162;
  *(void *)(v0 + 7944) = 0xE700000000000000;
  *(void *)(v0 + 7960) = 0xE500000000000000;
  *(void *)(v0 + 11392) = 0x6574656D6F726162;
  *(void *)(v0 + 11408) = 0x79726574746162;
  *(void *)(v0 + 7912) = 0xE600000000000000;
  *(void *)(v0 + 11424) = 0x7465726562;
  *(void *)(v0 + 5936) = 0x6F676E616DLL;
  *(void *)(v0 + 7880) = 0xE800000000000000;
  *(void *)(v0 + 7896) = 0xE500000000000000;
  *(void *)(v0 + 11440) = 0x6F676E6962;
  *(void *)(v0 + 11456) = 0x6C6F66646E696C62;
  *(void *)(v0 + 7832) = 0xE600000000000000;
  *(void *)(v0 + 7848) = 0xE700000000000000;
  *(void *)(v0 + 7864) = 0xE400000000000000;
  *(void *)(v0 + 11472) = 0x63726F74776F6C62;
  *(void *)(v0 + 5208) = 0xE900000000000068;
  *(void *)(v0 + 7624) = 0xE700000000000000;
  *(void *)(v0 + 7800) = 0xE600000000000000;
  *(void *)(v0 + 7816) = 0xE700000000000000;
  *(void *)(v0 + 7672) = 0xE900000000000072;
  *(void *)(v0 + 7688) = 0xE400000000000000;
  *(void *)(v0 + 7704) = 0xE700000000000000;
  *(void *)(v0 + 7736) = 0xE600000000000000;
  *(void *)(v0 + 7752) = 0xE300000000000000;
  *(void *)(v0 + 7768) = 0xE700000000000000;
  *(void *)(v0 + 11480) = 0xE900000000000068;
  *(void *)(v0 + 11488) = 0x65676162626163;
  *(void *)(v0 + 11504) = 0x656E6F7A6C6163;
  *(void *)(v0 + 11520) = 0x737265706163;
  strcpy((char *)(v0 + 11536), "greeting_card");
  *(void *)(v0 + 7720) = 0xEB00000000687369;
  *(_WORD *)(v0 + 11550) = -4864;
  *(void *)(v0 + 11552) = 0x756F6269726163;
  *(void *)(v0 + 11568) = 0x68736966746163;
  *(void *)(v0 + 11584) = 0x6E6F68706C6C6563;
  *(void *)(v0 + 11600) = 0x7372656B63656863;
  *(void *)(v0 + 11616) = 0x73656D696863;
  *(void *)(v0 + 11632) = 0x6C6573696863;
  *(void *)(v0 + 11648) = 0x79656E74756863;
  *(void *)(v0 + 11664) = 0x6E6F6D616E6E6963;
  *(void *)(v0 + 11680) = 0x706D616C63;
  strcpy((char *)(v0 + 11696), "coffee_grinder");
  *(unsigned char *)(v0 + 11711) = -18;
  strcpy((char *)(v0 + 11712), "coffee_table");
  *(unsigned char *)(v0 + 11725) = 0;
  *(_WORD *)(v0 + 11726) = -5120;
  *(void *)(v0 + 11728) = 0x616D656566666F63;
  *(void *)(v0 + 7576) = 0xE600000000000000;
  *(void *)(v0 + 7592) = 0xE700000000000000;
  *(void *)(v0 + 11736) = 0xEB0000000072656BLL;
  *(void *)(v0 + 11744) = 0x7475635F646C6F63;
  *(void *)(v0 + 7544) = 0xE800000000000000;
  *(void *)(v0 + 11760) = 0x5F676E696B6F6F63;
  *(void *)(v0 + 7512) = 0xE600000000000000;
  *(void *)(v0 + 7528) = 0xE700000000000000;
  *(void *)(v0 + 11768) = 0xEB000000006C696FLL;
  *(void *)(v0 + 11776) = 0x7461656D62617263;
  *(void *)(v0 + 11792) = 0x7370617263;
  *(void *)(v0 + 11808) = 0x726162776F7263;
  *(void *)(v0 + 11824) = 0x6E776F7263;
  *(void *)(v0 + 11840) = 0x656C626963757263;
  *(void *)(v0 + 7432) = 0xE400000000000000;
  *(void *)(v0 + 11856) = 0x64726174737563;
  *(void *)(v0 + 11872) = 0x6E617074737564;
  *(void *)(v0 + 11888) = 0x6174696A6166;
  *(void *)(v0 + 11904) = 0x73706563726F66;
  strcpy((char *)(v0 + 11920), "frozen_yogurt");
  *(_WORD *)(v0 + 11934) = -4864;
  *(void *)(v0 + 7384) = 0xE500000000000000;
  *(void *)(v0 + 7400) = 0xE500000000000000;
  *(void *)(v0 + 7416) = 0xE600000000000000;
  *(void *)(v0 + 7352) = 0xE400000000000000;
  *(void *)(v0 + 7368) = 0xE700000000000000;
  *(void *)(v0 + 11936) = 0x7265676E6967;
  *(void *)(v0 + 11952) = 0x676E65736E6967;
  *(void *)(v0 + 11968) = 0x6E6F5F6E65657267;
  *(void *)(v0 + 7272) = 0xE600000000000000;
  *(void *)(v0 + 7288) = 0xE900000000000065;
  *(void *)(v0 + 7304) = 0xE400000000000000;
  *(void *)(v0 + 7336) = 0xE600000000000000;
  *(void *)(v0 + 11976) = 0xEB000000006E6F69;
  *(void *)(v0 + 11984) = 0x7761736B636168;
  *(void *)(v0 + 12000) = 0x747562696C6168;
  *(void *)(v0 + 12016) = 0x66667563646E6168;
  *(void *)(v0 + 12032) = 0x7261637364616568;
  *(void *)(v0 + 12040) = 0xE900000000000066;
  *(void *)(v0 + 12048) = 0x676E6972726568;
  *(void *)(v0 + 12064) = 0x62616A6968;
  *(void *)(v0 + 7240) = 0xE300000000000000;
  *(void *)(v0 + 7256) = 0xE600000000000000;
  *(void *)(v0 + 12080) = 1802465128;
  *(void *)(v0 + 12096) = 0x6461726573726F68;
  *(void *)(v0 + 7192) = 0xE600000000000000;
  *(void *)(v0 + 7208) = 0xE300000000000000;
  *(void *)(v0 + 7224) = 0xE700000000000000;
  *(void *)(v0 + 12104) = 0xEB00000000687369;
  *(void *)(v0 + 12112) = 0x616562796C6C656ALL;
  *(void *)(v0 + 7144) = 0xE90000000000006ELL;
  *(void *)(v0 + 7160) = 0xE700000000000000;
  *(void *)(v0 + 7176) = 0xE500000000000000;
  *(void *)(v0 + 12120) = 0xE90000000000006ELL;
  *(void *)(v0 + 12128) = 1701601643;
  *(void *)(v0 + 12144) = 0x7075686374656BLL;
  *(void *)(v0 + 12160) = 1937335659;
  *(void *)(v0 + 12176) = 0x6968636D696BLL;
  *(void *)(v0 + 12192) = 0x656874616CLL;
  *(void *)(v0 + 7128) = 0xE900000000000065;
  *(void *)(v0 + 6640) = 0xD000000000000010;
  *(void *)(v0 + 6984) = 0xE600000000000000;
  *(void *)(v0 + 7000) = 0xE400000000000000;
  *(void *)(v0 + 7016) = 0xE500000000000000;
  *(void *)(v0 + 7064) = 0xE700000000000000;
  *(void *)(v0 + 7080) = 0xE600000000000000;
  *(void *)(v0 + 7032) = 0xE700000000000000;
  *(void *)(v0 + 7048) = 0xE300000000000000;
  *(void *)(v0 + 12208) = 0xD000000000000010;
  *(void *)(v0 + 12216) = 0x8000000100011DD0;
  *(void *)(v0 + 12224) = 0x737365727474616DLL;
  *(void *)(v0 + 12240) = 0x69616E6E6F79616DLL;
  *(void *)(v0 + 12248) = 0xEA00000000006573;
  *(void *)(v0 + 12256) = 0x66616F6C7461656DLL;
  *(void *)(v0 + 12272) = 0x776F6E6E696DLL;
  *(void *)(v0 + 12288) = 0x74656B73756DLL;
  *(void *)(v0 + 6936) = 0xE300000000000000;
  *(void *)(v0 + 6952) = 0xE500000000000000;
  *(void *)(v0 + 6968) = 0xE700000000000000;
  *(void *)(v0 + 12304) = 7627119;
  *(void *)(v0 + 5144) = 0xE300000000000000;
  *(void *)(v0 + 5416) = 0xE300000000000000;
  *(void *)(v0 + 6888) = 0xE800000000000000;
  *(void *)(v0 + 6904) = 0xE500000000000000;
  *(void *)(v0 + 6920) = 0xE600000000000000;
  *(void *)(v0 + 5976) = 0xE300000000000000;
  *(void *)(v0 + 6536) = 0xE300000000000000;
  *(void *)(v0 + 6696) = 0xE300000000000000;
  *(void *)(v0 + 6728) = 0xE600000000000000;
  *(void *)(v0 + 6760) = 0xE300000000000000;
  *(void *)(v0 + 6856) = 0xE600000000000000;
  *(void *)(v0 + 6776) = 0xE700000000000000;
  *(void *)(v0 + 6792) = 0xE600000000000000;
  *(void *)(v0 + 6808) = 0xE900000000000065;
  *(void *)(v0 + 6824) = 0xE800000000000000;
  *(void *)(v0 + 12312) = 0xE300000000000000;
  *(void *)(v0 + 12320) = 0x6F6E616765726FLL;
  *(void *)(v0 + 12336) = 0x79656C73726170;
  *(void *)(v0 + 12352) = 0x6F6C5F656C707061;
  *(void *)(v0 + 12360) = 0xEA00000000006F67;
  strcpy((char *)(v0 + 12368), "peanut_butter");
  *(_WORD *)(v0 + 12382) = -4864;
  strcpy((char *)(v0 + 12384), "pepper_spice");
  *(unsigned char *)(v0 + 12397) = 0;
  *(_WORD *)(v0 + 12398) = -5120;
  *(void *)(v0 + 12400) = 0x726168635F656970;
  *(void *)(v0 + 12416) = 0x74756E5F656E6970;
  *(void *)(v0 + 6664) = 0xE700000000000000;
  *(void *)(v0 + 6680) = 0xE400000000000000;
  *(void *)(v0 + 6712) = 0xE600000000000000;
  *(void *)(v0 + 11752) = 0xE900000000000073;
  *(void *)(v0 + 12024) = 0xE900000000000073;
  *(void *)(v0 + 12424) = 0xE900000000000073;
  *(void *)(v0 + 12432) = 0x726F666863746970;
  *(void *)(v0 + 12448) = 0x6E657079616C70;
  *(void *)(v0 + 12464) = 0x7265676E756C70;
  *(void *)(v0 + 12480) = 0x6565737970706F70;
  *(void *)(v0 + 11464) = 0xE900000000000064;
  *(void *)(v0 + 12488) = 0xE900000000000064;
  *(void *)(v0 + 6632) = 0xE600000000000000;
  *(void *)(v0 + 12496) = 1802661744;
  *(void *)(v0 + 6552) = 0xE700000000000000;
  *(void *)(v0 + 6568) = 0xE600000000000000;
  *(void *)(v0 + 6584) = 0xE500000000000000;
  *(void *)(v0 + 6616) = 0xE700000000000000;
  *(void *)(v0 + 12512) = 0x726574736F70;
  strcpy((char *)(v0 + 12528), "potato_chips");
  *(unsigned char *)(v0 + 12541) = 0;
  *(_WORD *)(v0 + 12542) = -5120;
  *(void *)(v0 + 12544) = 0x6F7463656A6F7270;
  *(void *)(v0 + 6472) = 0xE600000000000000;
  *(void *)(v0 + 6488) = 0xE900000000000065;
  *(void *)(v0 + 6520) = 0xE900000000000072;
  *(void *)(v0 + 11400) = 0xE900000000000072;
  *(void *)(v0 + 12552) = 0xE900000000000072;
  *(void *)(v0 + 12560) = 0x6E6973696172;
  strcpy((char *)(v0 + 12576), "remote_control");
  *(unsigned char *)(v0 + 12591) = -18;
  strcpy((char *)(v0 + 12592), "rubber_stamp");
  *(unsigned char *)(v0 + 12605) = 0;
  *(_WORD *)(v0 + 12606) = -5120;
  *(void *)(v0 + 12608) = 1953259891;
  *(void *)(v0 + 12624) = 0x6563756173;
  *(void *)(v0 + 12640) = 0x6F6F627061726373;
  *(void *)(v0 + 6440) = 0xE400000000000000;
  *(void *)(v0 + 6456) = 0xE600000000000000;
  *(void *)(v0 + 6408) = 0xE600000000000000;
  *(void *)(v0 + 6424) = 0xE700000000000000;
  *(void *)(v0 + 12440) = 0xE90000000000006BLL;
  *(void *)(v0 + 12648) = 0xE90000000000006BLL;
  *(void *)(v0 + 12656) = 0x737261656873;
  *(void *)(v0 + 12672) = 0x6C65766F6873;
  strcpy((char *)(v0 + 12688), "sledgehammer");
  *(void *)(v0 + 6376) = 0xE500000000000000;
  *(unsigned char *)(v0 + 12701) = 0;
  *(_WORD *)(v0 + 12702) = -5120;
  *(void *)(v0 + 12704) = 0x6572635F72756F73;
  *(void *)(v0 + 6344) = 0xE600000000000000;
  *(void *)(v0 + 6360) = 0xE800000000000000;
  *(void *)(v0 + 12712) = 0xEA00000000006D61;
  *(void *)(v0 + 12720) = 0x637561735F796F73;
  *(void *)(v0 + 5640) = 0xE900000000000065;
  *(void *)(v0 + 5928) = 0xE900000000000065;
  *(void *)(v0 + 6328) = 0xE500000000000000;
  *(void *)(v0 + 6136) = 0xE900000000000065;
  *(void *)(v0 + 6200) = 0xE900000000000065;
  *(void *)(v0 + 6216) = 0xE700000000000000;
  *(void *)(v0 + 6232) = 0xE800000000000000;
  *(void *)(v0 + 6248) = 0xE500000000000000;
  *(void *)(v0 + 6280) = 0xE900000000000065;
  *(void *)(v0 + 11176) = 0xE900000000000065;
  *(void *)(v0 + 11592) = 0xE900000000000065;
  *(void *)(v0 + 12728) = 0xE900000000000065;
  *(void *)(v0 + 12736) = 0x74756F727073;
  *(void *)(v0 + 12752) = 0x61685F7761727473;
  *(void *)(v0 + 6152) = 0xE500000000000000;
  *(void *)(v0 + 12408) = 0xE900000000000074;
  *(void *)(v0 + 12760) = 0xE900000000000074;
  *(void *)(v0 + 12768) = 0x696B6179696B7573;
  *(void *)(v0 + 12784) = 0x7075727973;
  *(void *)(v0 + 12800) = 0x69726F6F646E6174;
  *(void *)(v0 + 12816) = 0x6E6F676172726174;
  *(void *)(v0 + 12832) = 0x7265646C65;
  *(void *)(v0 + 12848) = 0x656E6F726874;
  *(void *)(v0 + 12864) = 0x656D796874;
  *(void *)(v0 + 12880) = 1969647476;
  *(void *)(v0 + 5160) = 0xE400000000000000;
  *(void *)(v0 + 5320) = 0xE400000000000000;
  *(void *)(v0 + 6104) = 0xE400000000000000;
  *(void *)(v0 + 6120) = 0xE800000000000000;
  *(void *)(v0 + 5368) = 0xE400000000000000;
  *(void *)(v0 + 5464) = 0xE400000000000000;
  *(void *)(v0 + 5608) = 0xE400000000000000;
  *(void *)(v0 + 6040) = 0xE700000000000000;
  *(void *)(v0 + 6056) = 0xE700000000000000;
  *(void *)(v0 + 6072) = 0xE500000000000000;
  *(void *)(v0 + 5624) = 0xE400000000000000;
  *(void *)(v0 + 5656) = 0xE400000000000000;
  *(void *)(v0 + 5720) = 0xE400000000000000;
  *(void *)(v0 + 5784) = 0xE400000000000000;
  *(void *)(v0 + 5944) = 0xE500000000000000;
  *(void *)(v0 + 5992) = 0xE800000000000000;
  *(void *)(v0 + 11224) = 0xE400000000000000;
  *(void *)(v0 + 12088) = 0xE400000000000000;
  *(void *)(v0 + 12136) = 0xE400000000000000;
  *(void *)(v0 + 12168) = 0xE400000000000000;
  *(void *)(v0 + 12504) = 0xE400000000000000;
  *(void *)(v0 + 12616) = 0xE400000000000000;
  *(void *)(v0 + 12888) = 0xE400000000000000;
  *(void *)(v0 + 12896) = 0x746C65626C6F6F74;
  *(void *)(v0 + 5128) = 0xE800000000000000;
  *(void *)(v0 + 5896) = 0xE600000000000000;
  *(void *)(v0 + 5912) = 0xE600000000000000;
  *(void *)(v0 + 5256) = 0xE800000000000000;
  *(void *)(v0 + 5400) = 0xE800000000000000;
  *(void *)(v0 + 5672) = 0xE800000000000000;
  *(void *)(v0 + 5848) = 0xE800000000000000;
  *(void *)(v0 + 5864) = 0xE800000000000000;
  *(void *)(v0 + 5880) = 0xE800000000000000;
  *(void *)(v0 + 5736) = 0xEA00000000007265;
  *(void *)(v0 + 5752) = 0xE800000000000000;
  *(void *)(v0 + 5768) = 0xE600000000000000;
  *(void *)(v0 + 5816) = 0xE700000000000000;
  *(void *)(v0 + 5832) = 0xE800000000000000;
  *(void *)(v0 + 11144) = 0xE800000000000000;
  *(void *)(v0 + 11256) = 0xE800000000000000;
  *(void *)(v0 + 11336) = 0xE800000000000000;
  *(void *)(v0 + 11608) = 0xE800000000000000;
  *(void *)(v0 + 11672) = 0xE800000000000000;
  *(void *)(v0 + 11784) = 0xE800000000000000;
  *(void *)(v0 + 11848) = 0xE800000000000000;
  *(void *)(v0 + 12232) = 0xE800000000000000;
  *(void *)(v0 + 12264) = 0xE800000000000000;
  *(void *)(v0 + 12776) = 0xE800000000000000;
  *(void *)(v0 + 12808) = 0xE800000000000000;
  *(void *)(v0 + 12824) = 0xE800000000000000;
  *(void *)(v0 + 12904) = 0xE800000000000000;
  *(void *)(v0 + 12912) = 0x746168706F74;
  *(void *)(v0 + 12928) = 0x6863726F74;
  *(void *)(v0 + 5688) = 0xE500000000000000;
  *(void *)(v0 + 5704) = 0xE700000000000000;
  *(void *)(v0 + 5048) = 0xE500000000000000;
  *(void *)(v0 + 5176) = 0xE500000000000000;
  *(void *)(v0 + 5192) = 0xE500000000000000;
  *(void *)(v0 + 5272) = 0xE500000000000000;
  *(void *)(v0 + 5288) = 0xE500000000000000;
  *(void *)(v0 + 5384) = 0xE500000000000000;
  *(void *)(v0 + 5480) = 0xE500000000000000;
  *(void *)(v0 + 11128) = 0xEA00000000007265;
  *(void *)(v0 + 5496) = 0xEA00000000007373;
  *(void *)(v0 + 5512) = 0xE700000000000000;
  *(void *)(v0 + 5592) = 0xE700000000000000;
  *(void *)(v0 + 5528) = 0xE700000000000000;
  *(void *)(v0 + 5576) = 0xE500000000000000;
  *(void *)(v0 + 11000) = 0xE500000000000000;
  *(void *)(v0 + 11016) = 0xE500000000000000;
  *(void *)(v0 + 11064) = 0xE500000000000000;
  *(void *)(v0 + 11192) = 0xE500000000000000;
  *(void *)(v0 + 11240) = 0xE500000000000000;
  *(void *)(v0 + 11432) = 0xE500000000000000;
  *(void *)(v0 + 11448) = 0xE500000000000000;
  *(void *)(v0 + 11688) = 0xE500000000000000;
  *(void *)(v0 + 11800) = 0xE500000000000000;
  *(void *)(v0 + 11832) = 0xE500000000000000;
  *(void *)(v0 + 12072) = 0xE500000000000000;
  *(void *)(v0 + 12200) = 0xE500000000000000;
  *(void *)(v0 + 12632) = 0xE500000000000000;
  *(void *)(v0 + 12792) = 0xE500000000000000;
  *(void *)(v0 + 12840) = 0xE500000000000000;
  *(void *)(v0 + 12872) = 0xE500000000000000;
  *(void *)(v0 + 12936) = 0xE500000000000000;
  *(void *)(v0 + 12944) = 0x6E6162727574;
  *(void *)(v0 + 12960) = 0x70696E727574;
  *(void *)(v0 + 5432) = 0xE600000000000000;
  *(void *)(v0 + 5224) = 0xE600000000000000;
  *(void *)(v0 + 5240) = 0xE600000000000000;
  *(void *)(v0 + 5352) = 0xE600000000000000;
  *(void *)(v0 + 11112) = 0xE600000000000000;
  *(void *)(v0 + 11160) = 0xE600000000000000;
  *(void *)(v0 + 11208) = 0xE600000000000000;
  *(void *)(v0 + 11384) = 0xE600000000000000;
  *(void *)(v0 + 11528) = 0xE600000000000000;
  *(void *)(v0 + 11624) = 0xE600000000000000;
  *(void *)(v0 + 11640) = 0xE600000000000000;
  *(void *)(v0 + 11896) = 0xE600000000000000;
  *(void *)(v0 + 11944) = 0xE600000000000000;
  *(void *)(v0 + 12184) = 0xE600000000000000;
  *(void *)(v0 + 12280) = 0xE600000000000000;
  *(void *)(v0 + 12296) = 0xE600000000000000;
  *(void *)(v0 + 12520) = 0xE600000000000000;
  *(void *)(v0 + 12568) = 0xE600000000000000;
  *(void *)(v0 + 12664) = 0xE600000000000000;
  *(void *)(v0 + 12680) = 0xE600000000000000;
  *(void *)(v0 + 12744) = 0xE600000000000000;
  *(void *)(v0 + 12856) = 0xE600000000000000;
  *(void *)(v0 + 12920) = 0xE600000000000000;
  *(void *)(v0 + 12952) = 0xE600000000000000;
  *(void *)(v0 + 12968) = 0xE600000000000000;
  *(void *)(v0 + 12976) = 0x726167656E6976;
  *(void *)(v0 + 11416) = 0xE700000000000000;
  *(void *)(v0 + 11496) = 0xE700000000000000;
  *(void *)(v0 + 11512) = 0xE700000000000000;
  *(void *)(v0 + 11560) = 0xE700000000000000;
  *(void *)(v0 + 11576) = 0xE700000000000000;
  *(void *)(v0 + 11656) = 0xE700000000000000;
  *(void *)(v0 + 11816) = 0xE700000000000000;
  *(void *)(v0 + 11864) = 0xE700000000000000;
  *(void *)(v0 + 11880) = 0xE700000000000000;
  *(void *)(v0 + 11912) = 0xE700000000000000;
  *(void *)(v0 + 11960) = 0xE700000000000000;
  *(void *)(v0 + 11992) = 0xE700000000000000;
  *(void *)(v0 + 12008) = 0xE700000000000000;
  *(void *)(v0 + 12056) = 0xE700000000000000;
  *(void *)(v0 + 12152) = 0xE700000000000000;
  *(void *)(v0 + 12328) = 0xE700000000000000;
  *(void *)(v0 + 12344) = 0xE700000000000000;
  *(void *)(v0 + 12456) = 0xE700000000000000;
  *(void *)(v0 + 12472) = 0xE700000000000000;
  *(void *)(v0 + 12984) = 0xE700000000000000;
  strcpy((char *)(v0 + 12992), "warning_sign");
  *(unsigned char *)(v0 + 13005) = 0;
  *(_WORD *)(v0 + 13006) = -5120;
  *(void *)(v0 + 13008) = 0x6572637265746177;
  *(void *)(v0 + 13016) = 0xEA00000000007373;
  strcpy((char *)(v0 + 13024), "whipped_cream");
  *(_WORD *)(v0 + 13038) = -4864;
  *(void *)(v0 + 8016) = 0x6576656972746572;
  return nullsub_1();
}

id sub_100009684()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VisionTagArbiter();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1000096DC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VisionTagArbiter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t variable initialization expression of SmartRepliesMLRuntimeTaskPerformer.$__lazy_storage_$_uninterestingPhraseResolver()
{
  return 1;
}

uint64_t type metadata accessor for VisionTagArbiter()
{
  return self;
}

void type metadata accessor for CGImage()
{
  if (!qword_100018C68)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_100018C68);
    }
  }
}

uint64_t sub_100009794(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000097D8()
{
  return sub_100010C20();
}

uint64_t _s27SmartRepliesMLRuntimePlugin0abC13TaskPerformerC34___lazy_storage___imageAssetLoader33_A206DF9CC5A481B1EF3DDC6994936F4ELLAA015ImageCaptioningjK0CSgvpfi_0()
{
  return 0;
}

void sub_100009800()
{
  qword_100018C70 = 0x656C797473;
  *(void *)algn_100018C78 = 0xE500000000000000;
}

void sub_100009820()
{
  qword_100018C80 = 0x6E6F6974706163;
  *(void *)algn_100018C88 = 0xE700000000000000;
}

void sub_100009844()
{
  qword_100018C90 = 0x73746C75736572;
  *(void *)algn_100018C98 = 0xE700000000000000;
}

void sub_100009868()
{
  qword_100018CA0 = 0x7461446567616D69;
  *(void *)algn_100018CA8 = 0xEF676E6972745361;
}

void sub_100009898()
{
  *(_WORD *)&algn_100018CB8[6] = -4864;
}

id sub_1000098C8()
{
  uint64_t v0 = sub_100010990();
  if (v1 >> 60 == 15) {
    return 0;
  }
  uint64_t v3 = v0;
  unint64_t v4 = v1;
  sub_10000C04C();
  sub_10000C08C(v3, v4);
  id v5 = sub_100009964(v3, v4);
  id v2 = [v5 CGImage];
  sub_10000BA3C(v3, v4);

  return v2;
}

id sub_100009964(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = sub_1000109A0().super.isa;
  id v6 = [v4 initWithData:isa];
  sub_10000BA50(a1, a2);

  return v6;
}

id sub_1000099DC()
{
  uint64_t v1 = OBJC_IVAR____TtC27SmartRepliesMLRuntimePlugin34SmartRepliesMLRuntimeTaskPerformer____lazy_storage___imageCaptioner;
  id v2 = *(void **)(v0
                + OBJC_IVAR____TtC27SmartRepliesMLRuntimePlugin34SmartRepliesMLRuntimeTaskPerformer____lazy_storage___imageCaptioner);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC27SmartRepliesMLRuntimePlugin34SmartRepliesMLRuntimeTaskPerformer____lazy_storage___imageCaptioner);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)ImageCaptioner) init];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t sub_100009A50()
{
  uint64_t v1 = OBJC_IVAR____TtC27SmartRepliesMLRuntimePlugin34SmartRepliesMLRuntimeTaskPerformer____lazy_storage___imageAssetLoader;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC27SmartRepliesMLRuntimePlugin34SmartRepliesMLRuntimeTaskPerformer____lazy_storage___imageAssetLoader))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC27SmartRepliesMLRuntimePlugin34SmartRepliesMLRuntimeTaskPerformer____lazy_storage___imageAssetLoader);
  }
  else
  {
    if (qword_100018C30 != -1) {
      swift_once();
    }
    uint64_t v2 = qword_1000190A8;
    *(void *)(v0 + v1) = qword_1000190A8;
    swift_retain_n();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_100009AF0()
{
  uint64_t v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC27SmartRepliesMLRuntimePlugin34SmartRepliesMLRuntimeTaskPerformer____lazy_storage___uninterestingPhraseResolver);
  uint64_t v2 = *(void *)(v0
                 + OBJC_IVAR____TtC27SmartRepliesMLRuntimePlugin34SmartRepliesMLRuntimeTaskPerformer____lazy_storage___uninterestingPhraseResolver);
  uint64_t v3 = v2;
  if (v2 == 1)
  {
    uint64_t v3 = sub_1000109D0();
    uint64_t v4 = *v1;
    *uint64_t v1 = v3;
    v1[1] = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10000B9B0(v4);
  }
  sub_10000B9F4(v2);
  return v3;
}

id sub_100009B88()
{
  *(void *)&v0[OBJC_IVAR____TtC27SmartRepliesMLRuntimePlugin34SmartRepliesMLRuntimeTaskPerformer____lazy_storage___imageCaptioner] = 0;
  *(void *)&v0[OBJC_IVAR____TtC27SmartRepliesMLRuntimePlugin34SmartRepliesMLRuntimeTaskPerformer____lazy_storage___imageAssetLoader] = 0;
  *(_OWORD *)&v0[OBJC_IVAR____TtC27SmartRepliesMLRuntimePlugin34SmartRepliesMLRuntimeTaskPerformer____lazy_storage___uninterestingPhraseResolver] = xmmword_100011880;
  *(void *)&v0[OBJC_IVAR____TtC27SmartRepliesMLRuntimePlugin34SmartRepliesMLRuntimeTaskPerformer_latestImage] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SmartRepliesMLRuntimeTaskPerformer();
  return objc_msgSendSuper2(&v2, "init");
}

id SmartRepliesMLRuntimeTaskPerformer.perform(_:)(void *a1)
{
  uint64_t v2 = sub_100010A20();
  sub_10000C158();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010A10();
  uint64_t v8 = sub_1000109F0();
  os_log_type_t v9 = sub_100010B10();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Trying to make a remote captioning request", v10, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  id v11 = [a1 parameters];
  id v12 = [v11 dictionaryRepresentation];
  sub_100010A40();

  if (qword_100018C00 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_100018C70;
  uint64_t v24 = *(void *)algn_100018C78;
  swift_bridgeObjectRetain();
  sub_100010B80();
  sub_10000C208();
  sub_10000A148((uint64_t)v25);
  if (v28)
  {
    if ((sub_10000C1A4() & 1) != 0 && v23 == 0xD000000000000014 && v24 == 0x8000000100011DF0)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      if (qword_100018C20 != -1) {
        swift_once();
      }
      uint64_t v26 = qword_100018CB0;
      uint64_t v27 = *(void *)algn_100018CB8;
      swift_bridgeObjectRetain();
      sub_100010B80();
      sub_10000C208();
      swift_bridgeObjectRelease();
      sub_10000A148((uint64_t)v25);
      if (v28) {
        sub_10000C1A4();
      }
      else {
        sub_10000BEA0((uint64_t)&v26, &qword_100018CC0);
      }
      id v18 = objc_allocWithZone((Class)MLRTaskResult);
      id v19 = sub_10000B724(0, 0, 0xF000000000000000);
      goto LABEL_29;
    }
  }
  else
  {
    sub_10000BEA0((uint64_t)&v26, &qword_100018CC0);
  }
  char v13 = sub_100010C20();
  swift_bridgeObjectRelease();
  if (v13) {
    goto LABEL_12;
  }
  if (qword_100018C18 != -1) {
    swift_once();
  }
  uint64_t v26 = qword_100018CA0;
  uint64_t v27 = *(void *)algn_100018CA8;
  swift_bridgeObjectRetain();
  sub_100010B80();
  sub_10000C208();
  swift_bridgeObjectRelease();
  sub_10000A148((uint64_t)v25);
  if (v28)
  {
    int v14 = sub_10000C1A4();
    BOOL v15 = v14 == 0;
    if (v14) {
      uint64_t v16 = v23;
    }
    else {
      uint64_t v16 = 0;
    }
    if (v15) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v24;
    }
  }
  else
  {
    sub_10000BEA0((uint64_t)&v26, &qword_100018CC0);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  id v19 = sub_10000A204(v16, v17);
LABEL_29:
  id v20 = v19;

  swift_bridgeObjectRelease();
  return v20;
}

double sub_10000A048@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_10000E344(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    sub_10000C0E4(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10000A0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = sub_10000E2CC(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_10000A104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_10000E2CC(a1, a2), (v3 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t sub_10000A148(uint64_t a1)
{
  return a1;
}

id sub_10000A204(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for TrialImageCaptioningFactors();
  sub_10000C1E8();
  ((void (*)(void))__chkstk_darwin)();
  sub_10000C25C();
  uint64_t v106 = v4;
  uint64_t v108 = sub_100009794(&qword_100018D78);
  sub_10000C1E8();
  ((void (*)(void))__chkstk_darwin)();
  sub_10000C1F8();
  uint64_t v7 = v5 - v6;
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v105 = (uint64_t)v99 - v8;
  sub_100009794(&qword_100018D80);
  ((void (*)(void))__chkstk_darwin)();
  sub_10000C25C();
  uint64_t v107 = v9;
  uint64_t v10 = sub_100010A20();
  sub_10000C158();
  uint64_t v12 = v11;
  ((void (*)(void))__chkstk_darwin)();
  sub_10000C1F8();
  BOOL v15 = (char *)(v13 - v14);
  uint64_t v16 = ((uint64_t (*)(void))__chkstk_darwin)();
  *(void *)&long long v109 = (char *)v99 - v17;
  __chkstk_darwin(v16);
  id v19 = (char *)v99 - v18;
  if (!a2 || (id v20 = sub_1000098C8()) == 0)
  {
    id v35 = objc_allocWithZone((Class)MLRTaskResult);
    return sub_10000C174();
  }
  v21 = v20;
  sub_100010A10();
  uint64_t v22 = sub_1000109F0();
  os_log_type_t v23 = sub_100010B10();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)sub_10000C244();
    uint64_t v103 = v10;
    uint64_t v104 = v7;
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "De-serialized image for image request", v24, 2u);
    uint64_t v10 = v103;
    uint64_t v7 = v104;
    sub_10000C1C4();
  }

  v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v104 = v12 + 8;
  v25(v19, v10);
  uint64_t v26 = (void *)v110;
  id v27 = sub_1000099DC();
  unsigned __int8 v28 = [v27 imageContainsPotentiallyUnsafeContent:v21];

  if (v28)
  {
    sub_100010A10();
    v29 = sub_1000109F0();
    os_log_type_t v30 = sub_100010B10();
    if (os_log_type_enabled(v29, v30))
    {
      *(_WORD *)sub_10000C244() = 0;
      sub_10000C2BC((void *)&_mh_execute_header, v31, v32, "Refusing to caption this image because it might be unsafe.");
      sub_10000C1C4();
    }

    v25(v15, v10);
    id v33 = objc_allocWithZone((Class)MLRTaskResult);
    id v34 = sub_10000C174();

    return v34;
  }
  id v37 = sub_1000099DC();
  id v38 = [v37 topMemeCaptionForImage:v21];

  if (v38)
  {
    v39 = v21;
    uint64_t v40 = sub_100010A60();
    uint64_t v42 = v41;

    sub_100009794(&qword_100018D98);
    uint64_t inited = swift_initStackObject();
    long long v110 = xmmword_100011890;
    *(_OWORD *)(inited + 16) = xmmword_100011890;
    if (qword_100018C10 != -1) {
      swift_once();
    }
    uint64_t v44 = *(void *)algn_100018C98;
    *(void *)(inited + 32) = qword_100018C90;
    *(void *)(inited + 40) = v44;
    sub_100009794(&qword_100018DA0);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = v110;
    sub_100009794(&qword_100018DA8);
    uint64_t v46 = swift_initStackObject();
    *(_OWORD *)(v46 + 16) = v110;
    uint64_t v47 = qword_100018C08;
    swift_bridgeObjectRetain();
    if (v47 != -1) {
      swift_once();
    }
    uint64_t v48 = *(void *)algn_100018C88;
    *(void *)(v46 + 32) = qword_100018C80;
    *(void *)(v46 + 40) = v48;
    *(void *)(v46 + 48) = v40;
    *(void *)(v46 + 56) = v42;
    swift_bridgeObjectRetain();
    *(void *)(v45 + 32) = sub_10000C224();
    *(void *)(inited + 48) = v45;
    sub_100009794(&qword_100018DB0);
    uint64_t v49 = sub_10000C290();
    sub_10000AC34(v49);
    swift_bridgeObjectRelease();
    id v50 = objc_allocWithZone((Class)MLRTaskResult);
    id v34 = sub_10000C270();

    return v34;
  }
  id v101 = v21;
  uint64_t v51 = swift_allocBox();
  uint64_t v52 = v3;
  uint64_t v53 = v51;
  uint64_t v102 = v54;
  uint64_t v100 = v52;
  sub_10000BAA8(v54, 1, 1, v52);
  dispatch_semaphore_t v55 = dispatch_semaphore_create(0);
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = v53;
  *(void *)(v56 + 24) = v55;
  uint64_t v57 = sub_100010AD0();
  uint64_t v58 = v107;
  sub_10000BAA8(v107, 1, 1, v57);
  v59 = (void *)swift_allocObject();
  v59[2] = 0;
  v59[3] = 0;
  v59[4] = v26;
  v59[5] = sub_10000BB10;
  v59[6] = v56;
  swift_retain();
  v60 = v55;
  v99[2] = v26;
  swift_retain();
  sub_10000B29C(v58, (uint64_t)&unk_100018D90, (uint64_t)v59);
  swift_release();
  *(void *)&long long v110 = v60;
  sub_100010B20();
  v61 = (char *)v109;
  sub_100010A10();
  swift_retain_n();
  v62 = sub_1000109F0();
  os_log_type_t v63 = sub_100010B10();
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v64 = swift_slowAlloc();
    uint64_t v103 = v10;
    v65 = (uint8_t *)v64;
    uint64_t v66 = swift_slowAlloc();
    uint64_t v107 = v56;
    v112[0] = v66;
    *(_DWORD *)v65 = 136315138;
    v99[1] = v65 + 4;
    uint64_t v67 = v102;
    swift_beginAccess();
    sub_10000BCE8(v67, v105);
    uint64_t v68 = sub_100010A70();
    uint64_t v111 = sub_10000DAB8(v68, v69, v112);
    sub_100010B40();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Found Trial CVNLP assets %s", v65, 0xCu);
    swift_arrayDestroy();
    sub_10000C1C4();
    sub_10000C1C4();

    v70 = (char *)v109;
    uint64_t v71 = v103;
  }
  else
  {

    swift_release_n();
    v70 = v61;
    uint64_t v71 = v10;
  }
  v25(v70, v71);
  uint64_t v72 = v102;
  swift_beginAccess();
  sub_10000BCE8(v72, v7);
  uint64_t v73 = v100;
  int v74 = sub_10000BD50(v7, 1, v100);
  id v75 = v101;
  if (v74 == 1)
  {
    sub_10000BEA0(v7, &qword_100018D78);
  }
  else
  {
    uint64_t v76 = v106;
    sub_10000BD78(v7, v106);
    id v77 = sub_1000099DC();
    sub_100010970(v78);
    v80 = v79;
    id v81 = [v77 CVNLPCaptionForImage:v75 modelURL:v79 minimumConfidenceForCVNLPCaption:*(double *)(v76 + *(int *)(v73 + 20))];

    if (v81)
    {
      uint64_t v82 = sub_100010A60();
      unint64_t v84 = v83;

      uint64_t v85 = sub_10000B40C(v82, v84);
      uint64_t v87 = v86;
      swift_bridgeObjectRelease();
      if (v87)
      {
        uint64_t v108 = v53;
        sub_100009794(&qword_100018D98);
        uint64_t v88 = swift_initStackObject();
        long long v109 = xmmword_100011890;
        *(_OWORD *)(v88 + 16) = xmmword_100011890;
        if (qword_100018C10 != -1) {
          swift_once();
        }
        uint64_t v89 = *(void *)algn_100018C98;
        *(void *)(v88 + 32) = qword_100018C90;
        *(void *)(v88 + 40) = v89;
        sub_100009794(&qword_100018DA0);
        uint64_t v90 = swift_allocObject();
        *(_OWORD *)(v90 + 16) = v109;
        sub_100009794(&qword_100018DA8);
        uint64_t v91 = swift_initStackObject();
        *(_OWORD *)(v91 + 16) = v109;
        uint64_t v92 = qword_100018C08;
        swift_bridgeObjectRetain();
        if (v92 != -1) {
          swift_once();
        }
        uint64_t v93 = *(void *)algn_100018C88;
        *(void *)(v91 + 32) = qword_100018C80;
        *(void *)(v91 + 40) = v93;
        *(void *)(v91 + 48) = v85;
        *(void *)(v91 + 56) = v87;
        swift_bridgeObjectRetain();
        *(void *)(v90 + 32) = sub_10000C224();
        *(void *)(v88 + 48) = v90;
        sub_100009794(&qword_100018DB0);
        uint64_t v94 = sub_10000C290();
        sub_10000AC34(v94);
        swift_bridgeObjectRelease();
        id v95 = objc_allocWithZone((Class)MLRTaskResult);
        id v34 = sub_10000C270();

        swift_release();
        sub_10000BDDC(v106);
      }
      else
      {
        id v98 = objc_allocWithZone((Class)MLRTaskResult);
        id v34 = sub_10000C174();

        swift_release();
        sub_10000BDDC(v106);
      }
      goto LABEL_30;
    }
    sub_10000BDDC(v106);
  }
  v96 = (void *)v110;
  id v97 = objc_allocWithZone((Class)MLRTaskResult);
  id v34 = sub_10000C174();

  swift_release();
LABEL_30:
  swift_release();
  return v34;
}

unint64_t sub_10000AC34(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100009794(&qword_100018DB8);
    uint64_t v2 = (void *)sub_100010BD0();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v10 = (uint64_t *)&unk_100018DB0;
  uint64_t v11 = (char *)&type metadata for Any + 8;
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        uint64_t v34 = (v5 - 1) & v5;
        unint64_t v12 = __clz(__rbit64(v5)) | (v9 << 6);
      }
      else
      {
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_34;
        }
        if (v13 >= v31)
        {
LABEL_31:
          sub_10000BE98();
          return (unint64_t)v2;
        }
        unint64_t v14 = *(void *)(v32 + 8 * v13);
        int64_t v15 = v9 + 1;
        if (!v14)
        {
          int64_t v15 = v9 + 2;
          if (v9 + 2 >= v31) {
            goto LABEL_31;
          }
          unint64_t v14 = *(void *)(v32 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v9 + 3;
            if (v9 + 3 >= v31) {
              goto LABEL_31;
            }
            unint64_t v14 = *(void *)(v32 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v9 + 4;
              if (v9 + 4 >= v31) {
                goto LABEL_31;
              }
              unint64_t v14 = *(void *)(v32 + 8 * v15);
              if (!v14)
              {
                int64_t v16 = v9 + 5;
                if (v9 + 5 >= v31) {
                  goto LABEL_31;
                }
                unint64_t v14 = *(void *)(v32 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v15 = v16 + 1;
                    if (__OFADD__(v16, 1)) {
                      goto LABEL_35;
                    }
                    if (v15 >= v31) {
                      goto LABEL_31;
                    }
                    unint64_t v14 = *(void *)(v32 + 8 * v15);
                    ++v16;
                    if (v14) {
                      goto LABEL_25;
                    }
                  }
                }
                int64_t v15 = v9 + 5;
              }
            }
          }
        }
LABEL_25:
        uint64_t v34 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
        int64_t v9 = v15;
      }
      uint64_t v17 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v12);
      uint64_t v35 = *v17;
      uint64_t v36 = v17[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100009794(v10);
      swift_dynamicCast();
      sub_10000BE38(v6, v7);
      sub_10000BE38(v7, v40);
      sub_10000BE38(v40, &v38);
      unint64_t result = sub_10000E2CC(v35, v36);
      unint64_t v18 = result;
      if ((v19 & 1) == 0) {
        break;
      }
      int64_t v33 = v9;
      id v20 = v7;
      v21 = v6;
      uint64_t v22 = v1;
      os_log_type_t v23 = v11;
      uint64_t v24 = v10;
      v25 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v25 = v35;
      v25[1] = v36;
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v1 = v22;
      uint64_t v6 = v21;
      uint64_t v7 = v20;
      int64_t v9 = v33;
      uint64_t v26 = (_OWORD *)(v2[7] + 32 * v18);
      sub_10000BE48((uint64_t)v26);
      unint64_t result = (unint64_t)sub_10000BE38(&v38, v26);
      unint64_t v5 = v34;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v27 = (uint64_t *)(v2[6] + 16 * result);
    *id v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_10000BE38(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_33;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

Swift::Int sub_10000AF98(uint64_t a1)
{
  uint64_t v2 = swift_projectBox();
  swift_beginAccess();
  sub_10000BFE4(a1, v2);
  return sub_100010B30();
}

uint64_t sub_10000AFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  sub_100009794(&qword_100018D78);
  v6[5] = swift_task_alloc();
  return _swift_task_switch(sub_10000B090, 0, 0);
}

uint64_t sub_10000B090()
{
  sub_10000C1DC();
  v0[6] = sub_100009A50();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000B138;
  uint64_t v2 = v0[5];
  return sub_10000C9D0(v2, 0, 0);
}

uint64_t sub_10000B138()
{
  sub_10000C1DC();
  sub_10000C140();
  uint64_t v1 = *v0;
  sub_10000C194();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10000B220, 0, 0);
}

uint64_t sub_10000B220()
{
  sub_10000C1DC();
  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t))(v0 + 24))(v1);
  sub_10000BEA0(v1, &qword_100018D78);
  swift_task_dealloc();
  sub_10000C2B0();
  return v2();
}

uint64_t sub_10000B29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100010AD0();
  if (sub_10000BD50(a1, 1, v6) == 1)
  {
    sub_10000BEA0(a1, &qword_100018D80);
  }
  else
  {
    sub_100010AC0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_100010AB0();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10000B40C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_100010A20();
  sub_10000C158();
  uint64_t v6 = v5;
  __chkstk_darwin();
  sub_10000C1F8();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    sub_100010A80();
    sub_100009794(&qword_100018D70);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_100011890;
    *(void *)(v13 + 32) = a1;
    *(void *)(v13 + 40) = a2;
    swift_bridgeObjectRetain();
    char v14 = sub_1000109B0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14)
    {
      sub_100010A10();
      int64_t v15 = sub_1000109F0();
      os_log_type_t v16 = sub_100010B10();
      if (os_log_type_enabled(v15, v16))
      {
        *(_WORD *)sub_10000C244() = 0;
        sub_10000C2BC((void *)&_mh_execute_header, v17, v18, "CVNLP caption is disallowed because Lexicon deemed it to be OVS");
        sub_10000C1C4();
      }

      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v4);
    }
    else
    {
      sub_100009AF0();
      v25.value._countAndFlagsBits = a1;
      v25.value._object = (void *)a2;
      v26.value._countAndFlagsBits = 28261;
      v26.value._object = (void *)0xE200000000000000;
      BOOL v19 = sub_1000109C0(v25, v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v19)
      {
        swift_bridgeObjectRetain();
        return a1;
      }
      sub_100010A10();
      id v20 = sub_1000109F0();
      os_log_type_t v21 = sub_100010B10();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)sub_10000C244();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "CVNLP caption is disallowed due to being potentially OVS", v22, 2u);
        sub_10000C1C4();
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v4);
    }
  }
  return 0;
}

id SmartRepliesMLRuntimeTaskPerformer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SmartRepliesMLRuntimeTaskPerformer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_10000B724(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1)
  {
    v6.super.Class isa = sub_100010A30().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.Class isa = 0;
  }
  if (a3 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = sub_1000109A0().super.isa;
    sub_10000BA3C(a2, a3);
  }
  id v8 = [v3 initWithJSONResult:v6.super.isa unprivatizedVector:isa];

  return v8;
}

uint64_t type metadata accessor for SmartRepliesMLRuntimeTaskPerformer()
{
  return self;
}

uint64_t sub_10000B810(uint64_t a1, int *a2)
{
  NSDictionary v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10000B8EC;
  return v6(a1);
}

uint64_t sub_10000B8EC()
{
  sub_10000C1DC();
  sub_10000C140();
  uint64_t v1 = *v0;
  sub_10000C194();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000C2B0();
  return v3();
}

uint64_t sub_10000B9B0(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10000B9F4(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10000BA3C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000BA50(a1, a2);
  }
  return a1;
}

uint64_t sub_10000BA50(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_10000BAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_10000BAD0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_10000BB10(uint64_t a1)
{
  return sub_10000AF98(a1);
}

uint64_t sub_10000BB18()
{
  swift_unknownObjectRelease();

  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10000BB60(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000BC28;
  return sub_10000AFF8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10000BC28()
{
  sub_10000C1DC();
  sub_10000C140();
  uint64_t v1 = *v0;
  sub_10000C194();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10000C2B0();
  return v3();
}

uint64_t sub_10000BCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009794(&qword_100018D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000BD50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_10000BD78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrialImageCaptioningFactors();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000BDDC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TrialImageCaptioningFactors();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_10000BE38(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10000BE48(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10000BE98()
{
  return swift_release();
}

uint64_t sub_10000BEA0(uint64_t a1, uint64_t *a2)
{
  sub_100009794(a2);
  sub_10000C1E8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_10000BEF4()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000BF2C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000BC28;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100018DC0 + dword_100018DC0);
  return v6(a1, v4);
}

uint64_t sub_10000BFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009794(&qword_100018D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000C04C()
{
  unint64_t result = qword_100018DD0;
  if (!qword_100018DD0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100018DD0);
  }
  return result;
}

uint64_t sub_10000C08C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_10000C0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_10000C174()
{
  return sub_10000B724(0, 0, 0xF000000000000000);
}

uint64_t sub_10000C1A4()
{
  return swift_dynamicCast();
}

uint64_t sub_10000C1C4()
{
  return swift_slowDealloc();
}

double sub_10000C208()
{
  return sub_10000A048(v1 - 152, v0, (_OWORD *)(v1 - 112));
}

uint64_t sub_10000C224()
{
  return sub_100010A50();
}

uint64_t sub_10000C244()
{
  return swift_slowAlloc();
}

id sub_10000C270()
{
  return sub_10000B724(v0, 0, 0xF000000000000000);
}

uint64_t sub_10000C290()
{
  return sub_100010A50();
}

uint64_t sub_10000C2B0()
{
  return v0 + 8;
}

void sub_10000C2BC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void sub_10000C2DC()
{
  qword_100018E40 = 28261;
  *(void *)algn_100018E48 = 0xE200000000000000;
}

uint64_t sub_10000C2F4(uint64_t a1, void *a2)
{
  v7._countAndFlagsBits = a1;
  v3._rawValue = &off_100014830;
  v7._object = a2;
  Swift::Int v4 = sub_100010BF0(v3, v7);
  swift_bridgeObjectRelease();
  if (v4 == 1) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = 2;
  }
  if (v4) {
    return v5;
  }
  else {
    return 0;
  }
}

unint64_t sub_10000C34C(char a1)
{
  if (a1) {
    return 0xD000000000000020;
  }
  else {
    return 0xD000000000000019;
  }
}

uint64_t sub_10000C388(char *a1, char *a2)
{
  return sub_10000C394(*a1, *a2);
}

uint64_t sub_10000C394(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000020;
  }
  else {
    unint64_t v3 = 0xD000000000000019;
  }
  if (v2) {
    unint64_t v4 = 0x8000000100011B70;
  }
  else {
    unint64_t v4 = 0x8000000100011B90;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000020;
  }
  else {
    unint64_t v5 = 0xD000000000000019;
  }
  if (a2) {
    unint64_t v6 = 0x8000000100011B90;
  }
  else {
    unint64_t v6 = 0x8000000100011B70;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_100010C20();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10000C43C()
{
  return sub_10000C444();
}

Swift::Int sub_10000C444()
{
  return sub_10000C4D0();
}

uint64_t sub_10000C450()
{
  return sub_10000C458();
}

uint64_t sub_10000C458()
{
  sub_100010A90();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000C4C8()
{
  return sub_10000C4D0();
}

Swift::Int sub_10000C4D0()
{
  return sub_100010C50();
}

uint64_t sub_10000C554@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10000C2F4(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t sub_10000C584@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10000C34C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10000C5B0()
{
  return sub_10000C34C(*v0);
}

uint64_t sub_10000C5B8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10000C348();
  *a1 = result;
  return result;
}

uint64_t sub_10000C5E0()
{
  return 0;
}

void sub_10000C5EC(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10000C5F8(uint64_t a1)
{
  unint64_t v2 = sub_10000D930();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000C634(uint64_t a1)
{
  unint64_t v2 = sub_10000D930();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000C670@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100010980();
  sub_10000C158();
  uint64_t v20 = v5;
  uint64_t v21 = v4;
  __chkstk_darwin(v4);
  sub_10000EA34();
  uint64_t v8 = v7 - v6;
  sub_100009794(&qword_100018FB8);
  sub_10000C158();
  __chkstk_darwin(v9);
  sub_10000EA34();
  uint64_t v10 = type metadata accessor for TrialImageCaptioningFactors();
  __chkstk_darwin(v10);
  sub_10000EA34();
  uint64_t v13 = v12 - v11;
  sub_10000D8EC(a1, a1[3]);
  sub_10000D930();
  sub_100010C60();
  if (v2) {
    return sub_10000BE48((uint64_t)a1);
  }
  sub_10000D97C();
  sub_100010C10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v13, v8, v21);
  sub_100010C00();
  uint64_t v15 = v14;
  uint64_t v16 = sub_10000EA44();
  v17(v16);
  *(void *)(v13 + *(int *)(v10 + 20)) = v15;
  sub_10000D9CC(v13, a2);
  sub_10000BE48((uint64_t)a1);
  return sub_10000BDDC(v13);
}

uint64_t sub_10000C8E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000C670(a1, a2);
}

uint64_t sub_10000C900()
{
  type metadata accessor for ImageCaptioningAssetLoader();
  swift_allocObject();
  uint64_t result = sub_10000C93C();
  qword_1000190A8 = result;
  return result;
}

uint64_t sub_10000C93C()
{
  swift_defaultActor_initialize();
  sub_100009794(&qword_100018DA8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100011890;
  *(void *)(inited + 32) = 28261;
  *(void *)(inited + 40) = 0xE200000000000000;
  *(void *)(inited + 48) = 0xD000000000000016;
  *(void *)(inited + 56) = 0x80000001000122B0;
  *(void *)(v0 + 112) = sub_100010A50();
  *(void *)(v0 + 120) = &_swiftEmptyDictionarySingleton;
  return v0;
}

uint64_t sub_10000C9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  sub_100009794(&qword_100018FD0);
  v4[16] = swift_task_alloc();
  return _swift_task_switch(sub_10000CA68, v3, 0);
}

uint64_t sub_10000CA68()
{
  uint64_t v44 = v0;
  if (v0[14])
  {
    uint64_t v1 = v0[13];
    unint64_t v2 = v0[14];
  }
  else
  {
    sub_10000EA78();
    if (!v3) {
      swift_once();
    }
    uint64_t v4 = sub_100010A20();
    sub_10000DA30(v4, (uint64_t)qword_1000190B0);
    uint64_t v5 = sub_1000109F0();
    os_log_type_t v6 = sub_100010AE0();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)sub_10000EA9C();
      uint64_t v43 = sub_10000EA84();
      *(_DWORD *)uint64_t v7 = 136315138;
      if (qword_100018C28 != -1) {
        swift_once();
      }
      uint64_t v8 = qword_100018E40;
      unint64_t v9 = *(void *)algn_100018E48;
      swift_bridgeObjectRetain();
      v0[11] = sub_10000DAB8(v8, v9, &v43);
      sub_100010B40();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No language specified for image captioning assets, using default language %s", v7, 0xCu);
      swift_arrayDestroy();
      sub_10000C1C4();
      sub_10000C1C4();
    }
    else
    {
    }
    if (qword_100018C28 != -1) {
      swift_once();
    }
    uint64_t v1 = qword_100018E40;
    unint64_t v2 = *(void *)algn_100018E48;
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = v0 + 9;
  uint64_t v11 = *(void *)(v0[15] + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_10000A0AC(v1, v2, v11);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  if (v14)
  {
    uint64_t v42 = v1;
    uint64_t v15 = (uint64_t *)(v0[15] + 120);
    swift_beginAccess();
    uint64_t v16 = *v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_10000A104(v12, v14, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (!v17)
    {
      sub_10000EA78();
      if (!v3) {
        swift_once();
      }
      uint64_t v18 = sub_100010A20();
      sub_10000DA30(v18, (uint64_t)qword_1000190B0);
      swift_bridgeObjectRetain_n();
      BOOL v19 = sub_1000109F0();
      os_log_type_t v20 = sub_100010AE0();
      if (sub_10000EA5C(v20))
      {
        uint64_t v21 = (uint8_t *)sub_10000EA9C();
        uint64_t v43 = sub_10000EA84();
        *(_DWORD *)uint64_t v21 = 136315138;
        swift_bridgeObjectRetain();
        v0[10] = sub_10000DAB8(v42, v2, &v43);
        sub_100010B40();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Initializing namespace manager for SmartReplies for language %s", v21, 0xCu);
        swift_arrayDestroy();
        uint64_t v10 = v0 + 9;
        sub_10000C1C4();
        sub_10000C1C4();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_100009794(&qword_100018FE0);
      id v28 = objc_allocWithZone((Class)TRIDownloadOptions);
      swift_bridgeObjectRetain();
      [v28 initWithAllowsCellular:0 discretionaryBehavior:2];
      uint64_t v29 = sub_1000109E0();
      swift_beginAccess();
      sub_10000E534(v29, v12, v14);
      swift_endAccess();
    }
    uint64_t v30 = *v15;
    swift_bridgeObjectRetain();
    int64_t v31 = (void *)sub_10000A104(v12, v14, v30);
    v0[17] = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_bridgeObjectRelease();
      uint64_t v32 = *v31 + 264;
      v0[18] = *(void *)v32;
      v0[19] = v32 & 0xFFFFFFFFFFFFLL | 0xA774000000000000;
      return _swift_task_switch(sub_10000D22C, v31, 0);
    }
    sub_10000EA78();
    if (!v3) {
      swift_once();
    }
    uint64_t v33 = sub_100010A20();
    sub_10000DA30(v33, (uint64_t)qword_1000190B0);
    swift_bridgeObjectRetain();
    os_log_type_t v23 = (void *)sub_1000109F0();
    os_log_type_t v34 = sub_100010B00();
    if (sub_10000EA5C(v34))
    {
      uint64_t v35 = (_DWORD *)sub_10000EA9C();
      uint64_t v43 = sub_10000EA84();
      *uint64_t v35 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t *v10 = sub_10000DAB8(v42, v2, &v43);
      sub_100010B40();
      swift_bridgeObjectRelease_n();
      sub_10000EAB4((void *)&_mh_execute_header, v36, v37, "There is no namespace manager for language %s despite expecting one");
      swift_arrayDestroy();
      goto LABEL_33;
    }
LABEL_34:
    swift_bridgeObjectRelease_n();
    goto LABEL_35;
  }
  sub_10000EA78();
  if (!v3) {
    swift_once();
  }
  uint64_t v22 = sub_100010A20();
  sub_10000DA30(v22, (uint64_t)qword_1000190B0);
  swift_bridgeObjectRetain();
  os_log_type_t v23 = (void *)sub_1000109F0();
  os_log_type_t v24 = sub_100010AF0();
  if (!sub_10000EA5C(v24)) {
    goto LABEL_34;
  }
  Swift::String_optional v25 = (_DWORD *)sub_10000EA9C();
  uint64_t v43 = sub_10000EA84();
  _DWORD *v25 = 136315138;
  swift_bridgeObjectRetain();
  v0[8] = sub_10000DAB8(v1, v2, &v43);
  sub_100010B40();
  swift_bridgeObjectRelease_n();
  sub_10000EAB4((void *)&_mh_execute_header, v26, v27, "Unable to get a image captioning namespace for language %s");
  swift_arrayDestroy();
LABEL_33:
  sub_10000C1C4();
  sub_10000C1C4();
LABEL_35:

  uint64_t v38 = v0[12];
  uint64_t v39 = type metadata accessor for TrialImageCaptioningFactors();
  sub_10000BAA8(v38, 1, 1, v39);
  swift_task_dealloc();
  uint64_t v40 = (uint64_t (*)(void))v0[1];
  return v40();
}

uint64_t sub_10000D22C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  (*(void (**)(void))(v0 + 144))();
  return _swift_task_switch(sub_10000D29C, v1, 0);
}

uint64_t sub_10000D29C()
{
  uint64_t v1 = v0[16];
  swift_release();
  uint64_t v2 = sub_100009794(&qword_100018FD8);
  uint64_t v3 = 1;
  int v4 = sub_10000BD50(v1, 1, v2);
  uint64_t v5 = v0[16];
  if (v4 == 1)
  {
    os_log_type_t v6 = (uint64_t *)&unk_100018FD0;
  }
  else
  {
    sub_10000D9CC(v0[16], v0[12]);
    uint64_t v3 = 0;
    os_log_type_t v6 = &qword_100018FD8;
  }
  sub_10000E270(v5, v6);
  uint64_t v7 = v0[12];
  uint64_t v8 = type metadata accessor for TrialImageCaptioningFactors();
  sub_10000BAA8(v7, v3, 1, v8);
  swift_task_dealloc();
  unint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10000D388()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10000D3B8()
{
  sub_10000D388();
  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ImageCaptioningAssetLoader()
{
  return self;
}

uint64_t *sub_10000D408(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_100010980();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_10000D4D4(uint64_t a1)
{
  uint64_t v2 = sub_100010980();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t sub_10000D538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100010980();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10000D5B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100010980();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10000D630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100010980();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10000D6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100010980();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10000D728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000D73C);
}

uint64_t sub_10000D73C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010980();
  return sub_10000BD50(a1, a2, v4);
}

uint64_t sub_10000D784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000D798);
}

uint64_t sub_10000D798(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010980();
  return sub_10000BAA8(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TrialImageCaptioningFactors()
{
  uint64_t result = qword_100018F80;
  if (!qword_100018F80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000D82C()
{
  uint64_t result = sub_100010980();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10000D8C4()
{
  return v0;
}

uint64_t sub_10000D8D0()
{
  return sub_10000D8C4();
}

void *sub_10000D8EC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10000D930()
{
  unint64_t result = qword_100018FC0;
  if (!qword_100018FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100018FC0);
  }
  return result;
}

unint64_t sub_10000D97C()
{
  unint64_t result = qword_100018FC8;
  if (!qword_100018FC8)
  {
    sub_100010980();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100018FC8);
  }
  return result;
}

uint64_t sub_10000D9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TrialImageCaptioningFactors();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000DA30(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10000DA68()
{
  return 1;
}

uint64_t sub_10000DA70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TrialImageCaptioningFactors();
  return sub_10000BAA8(a1, 1, 1, v2);
}

uint64_t sub_10000DAB8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10000DB8C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10000C0E4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10000C0E4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000BE48((uint64_t)v12);
  return v7;
}

uint64_t sub_10000DB8C(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_10000DCE4((char *)__src, HIBYTE(a6) & 0xF, __dst);
      sub_100010B50();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_10000DDBC(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = sub_100010BA0();
    if (!v8)
    {
      uint64_t result = sub_100010BC0();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_10000DCE4(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)sub_100010BE0();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *sub_10000DDBC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_10000DE54(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10000E030(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10000E030((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_10000DE54(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = sub_100010AA0();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_10000DFC8(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = sub_100010B90();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  sub_100010BE0();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)sub_100010BC0();
  __break(1u);
  return result;
}

void *sub_10000DFC8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100009794(&qword_100018FF0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_10000E030(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100009794(&qword_100018FF0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_10000E1E0(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10000E108(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_10000E108(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)sub_100010BE0();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_10000E1E0(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)sub_100010BE0();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_10000E270(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100009794(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10000E2CC(uint64_t a1, uint64_t a2)
{
  sub_100010C40();
  sub_100010A90();
  Swift::Int v4 = sub_100010C50();
  return sub_10000E388(a1, a2, v4);
}

unint64_t sub_10000E344(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = sub_100010B60(*(void *)(v2 + 40));
  return sub_10000E46C(a1, v4);
}

unint64_t sub_10000E388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_100010C20() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_100010C20() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10000E46C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10000E738(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = sub_100010B70();
      sub_10000A148((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_10000E534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_10000E5C4(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000E5C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_10000E2CC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_100009794(&qword_100018FE8);
  if (!sub_100010BB0(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10000E2CC(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = sub_100010C30();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  os_log_type_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7];
    uint64_t result = swift_release();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_10000E6EC(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_10000E6EC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_10000E738(uint64_t a1, uint64_t a2)
{
  return a2;
}

unsigned char *initializeBufferWithCopyOfBuffer for TrialImageCaptioningFactors.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TrialImageCaptioningFactors.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for TrialImageCaptioningFactors.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000E8F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_10000E920(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10000E928(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TrialImageCaptioningFactors.CodingKeys()
{
  return &type metadata for TrialImageCaptioningFactors.CodingKeys;
}

unint64_t sub_10000E948()
{
  unint64_t result = qword_100018FF8;
  if (!qword_100018FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100018FF8);
  }
  return result;
}

unint64_t sub_10000E998()
{
  unint64_t result = qword_100019000;
  if (!qword_100019000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100019000);
  }
  return result;
}

unint64_t sub_10000E9E8()
{
  unint64_t result = qword_100019008;
  if (!qword_100019008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100019008);
  }
  return result;
}

uint64_t sub_10000EA44()
{
  return v0;
}

BOOL sub_10000EA5C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10000EA84()
{
  return swift_slowAlloc();
}

uint64_t sub_10000EA9C()
{
  return swift_slowAlloc();
}

void sub_10000EAB4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10000EAD4()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t _s8SentinelCMa()
{
  return self;
}

uint64_t sub_10000EB08()
{
  uint64_t v0 = sub_100010A20();
  sub_10000EB80(v0, qword_1000190B0);
  sub_10000DA30(v0, (uint64_t)qword_1000190B0);
  return sub_100010A00();
}

uint64_t *sub_10000EB80(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void sub_10000ED8C(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  AnalyticsSendEventLazy();
}

id sub_10000EE30(uint64_t a1)
{
  v9[0] = *(void *)(a1 + 32);
  v8[0] = @"clientIdentifier";
  v8[1] = @"success";
  uint64_t v2 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 52)];
  v9[1] = v2;
  v8[2] = @"failureType";
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 40)];
  v9[2] = v3;
  v8[3] = @"captionConfidence";
  LODWORD(v4) = *(_DWORD *)(a1 + 48);
  uint64_t v5 = +[NSNumber numberWithFloat:v4];
  v9[3] = v5;
  os_log_type_t v6 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:4];

  return v6;
}

void sub_100010970(NSURL *retstr@<X8>)
{
}

uint64_t sub_100010980()
{
  return type metadata accessor for URL();
}

uint64_t sub_100010990()
{
  return Data.init(base64Encoded:options:)();
}

NSData sub_1000109A0()
{
  return Data._bridgeToObjectiveC()();
}

uint64_t sub_1000109B0()
{
  return static OVSResolver.containsOVS(in:localeIdentifier:)();
}

BOOL sub_1000109C0(Swift::String_optional with, Swift::String_optional languageCode)
{
  return CaptionPhraseResolver.hasDisallowedCaption(with:languageCode:)(with, languageCode);
}

uint64_t sub_1000109D0()
{
  return CaptionPhraseResolver.init()();
}

uint64_t sub_1000109E0()
{
  return TUSTrialNamespaceManager.__allocating_init(namespaceName:trialProjectID:isInSpectatorMode:shouldEagerlyGetAssets:downloadOptions:factorsValidator:defaultFactorsLoader:)();
}

uint64_t sub_1000109F0()
{
  return Logger.logObject.getter();
}

uint64_t sub_100010A00()
{
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100010A10()
{
  return Logger.init()();
}

uint64_t sub_100010A20()
{
  return type metadata accessor for Logger();
}

NSDictionary sub_100010A30()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_100010A40()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100010A50()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_100010A60()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100010A70()
{
  return String.init<A>(reflecting:)();
}

uint64_t sub_100010A80()
{
  return String.primaryLanguageTag()().value._countAndFlagsBits;
}

uint64_t sub_100010A90()
{
  return String.hash(into:)();
}

Swift::Int sub_100010AA0()
{
  return String.UTF8View._foreignCount()();
}

uint64_t sub_100010AB0()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t sub_100010AC0()
{
  return TaskPriority.rawValue.getter();
}

uint64_t sub_100010AD0()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_100010AE0()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_100010AF0()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_100010B00()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_100010B10()
{
  return static os_log_type_t.default.getter();
}

void sub_100010B20()
{
}

Swift::Int sub_100010B30()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_100010B40()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100010B50()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

Swift::Int sub_100010B60(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t sub_100010B70()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t sub_100010B80()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_100010B90()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t sub_100010BA0()
{
  return _StringObject.sharedUTF8.getter();
}

BOOL sub_100010BB0(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

uint64_t sub_100010BC0()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_100010BD0()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_100010BE0()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int sub_100010BF0(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases, string);
}

uint64_t sub_100010C00()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_100010C10()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_100010C20()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100010C30()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_100010C40()
{
  return Hasher.init(_seed:)();
}

Swift::Int sub_100010C50()
{
  return Hasher._finalize()();
}

uint64_t sub_100010C60()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t CVNLPCaptionCopyForImage()
{
  return _CVNLPCaptionCopyForImage();
}

uint64_t CVNLPCaptionHandlerCreate()
{
  return _CVNLPCaptionHandlerCreate();
}

uint64_t NSExtensionMain()
{
  return _NSExtensionMain();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_storeStrong(id *location, id obj)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

id objc_msgSend__createCaptionHandlerIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _createCaptionHandlerIfNeeded];
}

id objc_msgSend__friendlyStringForResultFailureType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_friendlyStringForResultFailureType:");
}

id objc_msgSend__memeStringForTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_memeStringForTag:");
}

id objc_msgSend__metricsClientIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 _metricsClientIdentifier];
}

id objc_msgSend__newJunkRequest(void *a1, const char *a2, ...)
{
  return _[a1 _newJunkRequest];
}

id objc_msgSend__newMemeRequest(void *a1, const char *a2, ...)
{
  return _[a1 _newMemeRequest];
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_classifyImage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classifyImage:error:");
}

id objc_msgSend_confidence(void *a1, const char *a2, ...)
{
  return _[a1 confidence];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_initWithCGImage_orientation_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCGImage:orientation:options:");
}

id objc_msgSend_initWithOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:error:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_performRequests_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRequests:error:");
}

id objc_msgSend_recordImageCaptioningResultWithClientIdentifier_success_failureType_confidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordImageCaptioningResultWithClientIdentifier:success:failureType:confidence:");
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return _[a1 results];
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setRevision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRevision:");
}

id objc_msgSend_setRevision_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRevision:error:");
}