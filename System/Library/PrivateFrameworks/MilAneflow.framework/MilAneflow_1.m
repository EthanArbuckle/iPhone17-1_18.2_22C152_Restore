void sub_210BDDFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v19;

  v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, float **a10, char a11, int a12, __int16 a13, uint64_t a14)
{
  v97[2] = *MEMORY[0x263EF8340];
  v14 = *a3;
  uint64_t v15 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v15 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v19 = v15 >> 3;
  }
  if (v19 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v14 + 1), __src.i8, (char *)v97, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v14 + 1), __src.i8, &__src.i8[8], 1);
  }
  v20 = *a4;
  uint64_t v21 = (a4[1] - *a4) >> 3;
  if (v21 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, (char *)v97, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, &__src.i8[8], 1);
  }
  v22 = *a5;
  uint64_t v23 = a5[1] - *a5;
  if (v23 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, (char *)v97, 2);
  }
  else if (v23 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  unint64_t v78 = (*a3)[1];
  unint64_t v79 = **a3;
  unint64_t v91 = (*a3)[4];
  unint64_t v87 = *((void *)*a4 + 1);
  unint64_t v88 = *(void *)*a4;
  unint64_t v86 = *((void *)*a4 + 2);
  uint64_t v24 = **a5;
  uint64_t v74 = (*a5)[1];
  uint64_t v75 = (*a5)[2];
  unint64_t v25 = (*a5)[4];
  uint64_t v76 = (*a5)[3];
  unint64_t v77 = (*a3)[2];
  double v26 = ldexp(1.0, a7 + 10);
  double v27 = exp2(-(double)(a7 + 10 + a8));
  int64x2_t __src = 0uLL;
  v97[0] = 0;
  unint64_t v82 = v25;
  std::vector<float>::reserve((void **)&__src, v25);
  float v29 = v27;
  v30 = *a10;
  v31 = a10[1];
  if ((char *)v31 - (char *)*a10 == 4)
  {
    __int16 v94 = MIL::Fp16::FromFloat(Float, *v30);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v94);
    *(float *)&int __e = v32 * v29;
    std::vector<float>::assign((char **)&__src, v82, &__e);
  }
  else
  {
    for (; v30 != v31; ++v30)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v30);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v34 = v33 * v29;
      v35 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v97[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v37 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v97[0] - __src.i64[0];
        if ((v97[0] - __src.i64[0]) >> 1 > v38) {
          unint64_t v38 = v39 >> 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v97, v40);
          v35 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v41 = 0;
        }
        v42 = (float *)&v41[4 * v37];
        float *v42 = v34;
        v36 = v42 + 1;
        while (v35 != Float)
        {
          int v43 = *((_DWORD *)v35 - 1);
          v35 = (MIL::Fp16 *)((char *)v35 - 4);
          *((_DWORD *)v42-- - 1) = v43;
        }
        __src.i64[0] = (uint64_t)v42;
        __src.i64[1] = (uint64_t)v36;
        v97[0] = &v41[4 * v40];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v34;
        v36 = (float *)((char *)v35 + 4);
      }
      __src.i64[1] = (uint64_t)v36;
    }
  }
  if (v24)
  {
    unint64_t v44 = 0;
    int v83 = -20 - a7;
    float v45 = v26;
    uint64_t v73 = v24;
    while (!v74)
    {
LABEL_78:
      if (++v44 == v73) {
        goto LABEL_79;
      }
    }
    unint64_t v46 = 0;
    while (!v75)
    {
LABEL_77:
      if (++v46 == v74) {
        goto LABEL_78;
      }
    }
    unint64_t v47 = 0;
    while (!v76)
    {
LABEL_76:
      if (++v47 == v75) {
        goto LABEL_77;
      }
    }
    uint64_t v92 = 0;
    while (!v82)
    {
LABEL_75:
      if (++v92 == v76) {
        goto LABEL_76;
      }
    }
    uint64_t v48 = 0;
    while (1)
    {
      if (v91)
      {
        uint64_t v49 = 0;
        int v50 = 0;
        int v84 = 0;
        do
        {
          char v51 = *(unsigned char *)(a1
          if (!a11 || (__int16 v52 = a13, v49 != *((void *)a4[1] - 2))) {
            __int16 v52 = *(_WORD *)(a2
          }
                           + 2
          if (!v50)
          {
            LOWORD(__e) = v52;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v54 = v53;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v56 = v54 - v55;
            int v57 = ilogbf(v56);
            if (v57 <= -14) {
              int v58 = -14;
            }
            else {
              int v58 = v57;
            }
            if (v58 >= v83)
            {
              uint64_t v59 = (int)llroundf((float)(v56 * (float)v51) * v45) + (uint64_t)v84;
              if (v59 <= 0x7FFFFFFF)
              {
                BOOL v60 = v59 < (uint64_t)0xFFFFFFFF80000000;
                if (v59 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v59) = -8388608;
                }
                int v84 = v59;
                int v50 = 2 * v60;
              }
              else
              {
                int v50 = 1;
                int v84 = 2139095040;
              }
            }
            else
            {
              int v50 = 0;
            }
          }
          ++v49;
        }
        while (v91 != v49);
        float v61 = *(float *)(__src.i64[0] + 4 * v48);
        if (v50)
        {
          double v62 = INFINITY;
          if (v50 == 2) {
            double v62 = -INFINITY;
          }
          goto LABEL_71;
        }
        if (v84)
        {
          double v62 = (double)v84;
LABEL_71:
          *(float *)&int __e = 0.0;
          long double v64 = frexp(v62, &__e);
          double v65 = ldexp(v64, 11);
          float v63 = ldexp(round(v65), __e - 11);
          goto LABEL_72;
        }
      }
      else
      {
        float v61 = *(float *)(__src.i64[0] + 4 * v48);
      }
      float v63 = 0.0;
LABEL_72:
      float v66 = v61 * v63;
      float v67 = 0.0;
      if (v66 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v68 = frexp(v66, &__e);
        double v69 = ldexp(v68, 11);
        float v67 = ldexp(round(v69), __e - 11);
      }
      v70 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a14, v67);
      __int16 v72 = MIL::Fp16::FromFloat(v70, v71);
      *(_WORD *)(*a9
               + 2
      if (v48 == v82) {
        goto LABEL_75;
      }
    }
  }
LABEL_79:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BDE728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19 = *(void **)(v17 - 160);
  if (v19)
  {
    *(void *)(v17 - 152) = v19;
    operator delete(v19);
  }
  v20 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,MIL::Fp16,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, int a12, __int16 a13, __int16 a14, uint64_t a15)
{
  v98[2] = *MEMORY[0x263EF8340];
  uint64_t v15 = *a3;
  uint64_t v16 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v16 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v20 = v16 >> 3;
  }
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, (char *)v98, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a4;
  uint64_t v22 = (a4[1] - *a4) >> 3;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, (char *)v98, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v23 = *a5;
  uint64_t v24 = a5[1] - *a5;
  if (v24 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, (char *)v98, 2);
  }
  else if (v24 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v79 = (*a3)[1];
  unint64_t v80 = **a3;
  unint64_t v92 = (*a3)[4];
  unint64_t v88 = *((void *)*a4 + 1);
  unint64_t v89 = *(void *)*a4;
  unint64_t v87 = *((void *)*a4 + 2);
  uint64_t v25 = **a5;
  uint64_t v75 = (*a5)[1];
  uint64_t v76 = (*a5)[2];
  unint64_t v26 = (*a5)[4];
  uint64_t v77 = (*a5)[3];
  unint64_t v78 = (*a3)[2];
  double v27 = ldexp(1.0, a7 + 10);
  double v28 = exp2(-(double)(a7 + 10 + a8));
  int64x2_t __src = 0uLL;
  v98[0] = 0;
  unint64_t v83 = v26;
  std::vector<float>::reserve((void **)&__src, v26);
  float v30 = v28;
  v31 = *a10;
  float v32 = a10[1];
  if ((char *)v32 - (char *)*a10 == 4)
  {
    __int16 v95 = MIL::Fp16::FromFloat(Float, *v31);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v95);
    *(float *)&int __e = v33 * v30;
    std::vector<float>::assign((char **)&__src, v83, &__e);
  }
  else
  {
    for (; v31 != v32; ++v31)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v31);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v35 = v34 * v30;
      v36 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v98[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v38 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v98[0] - __src.i64[0];
        if ((v98[0] - __src.i64[0]) >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v98, v41);
          v36 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v42 = 0;
        }
        int v43 = (float *)&v42[4 * v38];
        *int v43 = v35;
        uint64_t v37 = v43 + 1;
        while (v36 != Float)
        {
          int v44 = *((_DWORD *)v36 - 1);
          v36 = (MIL::Fp16 *)((char *)v36 - 4);
          *((_DWORD *)v43-- - 1) = v44;
        }
        __src.i64[0] = (uint64_t)v43;
        __src.i64[1] = (uint64_t)v37;
        v98[0] = &v42[4 * v41];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v35;
        uint64_t v37 = (float *)((char *)v36 + 4);
      }
      __src.i64[1] = (uint64_t)v37;
    }
  }
  if (v25)
  {
    unint64_t v45 = 0;
    int v84 = -20 - a7;
    float v46 = v27;
    uint64_t v74 = v25;
    while (!v75)
    {
LABEL_87:
      if (++v45 == v74) {
        goto LABEL_88;
      }
    }
    unint64_t v47 = 0;
    while (!v76)
    {
LABEL_86:
      if (++v47 == v75) {
        goto LABEL_87;
      }
    }
    unint64_t v48 = 0;
    while (!v77)
    {
LABEL_85:
      if (++v48 == v76) {
        goto LABEL_86;
      }
    }
    uint64_t v93 = 0;
    while (!v83)
    {
LABEL_84:
      if (++v93 == v77) {
        goto LABEL_85;
      }
    }
    uint64_t v49 = 0;
    while (1)
    {
      if (v92)
      {
        uint64_t v50 = 0;
        int v51 = 0;
        int v85 = 0;
        do
        {
          char v52 = *(unsigned char *)(a1
          if (!a11 || (__int16 v53 = a13, v50 != *((void *)a4[1] - 2))) {
            __int16 v53 = *(_WORD *)(a2
          }
                           + 2
          if (!v51)
          {
            LOWORD(__e) = v53;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v55 = v54;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v57 = v55 - v56;
            int v58 = ilogbf(v57);
            if (v58 <= -14) {
              int v59 = -14;
            }
            else {
              int v59 = v58;
            }
            if (v59 >= v84)
            {
              uint64_t v60 = (int)llroundf((float)(v57 * (float)v52) * v46) + (uint64_t)v85;
              if (v60 <= 0x7FFFFFFF)
              {
                BOOL v61 = v60 < (uint64_t)0xFFFFFFFF80000000;
                if (v60 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v60) = -8388608;
                }
                int v85 = v60;
                int v51 = 2 * v61;
              }
              else
              {
                int v51 = 1;
                int v85 = 2139095040;
              }
            }
            else
            {
              int v51 = 0;
            }
          }
          ++v50;
        }
        while (v92 != v50);
        float v62 = *(float *)(__src.i64[0] + 4 * v49);
        if (v51)
        {
          double v63 = INFINITY;
          if (v51 == 2) {
            double v63 = -INFINITY;
          }
          goto LABEL_73;
        }
        if (v85)
        {
          double v63 = (double)v85;
LABEL_73:
          *(float *)&int __e = 0.0;
          long double v65 = frexp(v63, &__e);
          double v66 = ldexp(v65, 11);
          float v64 = ldexp(round(v66), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        float v62 = *(float *)(__src.i64[0] + 4 * v49);
      }
      float v64 = 0.0;
LABEL_74:
      float v67 = v62 * v64;
      float v68 = 0.0;
      if (v67 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v69 = frexp(v67, &__e);
        double v70 = ldexp(v69, 11);
        float v68 = ldexp(round(v70), __e - 11);
      }
      std::function<float ()(float)>::operator()(a15, v68);
      if (v71 == INFINITY)
      {
        LOBYTE(v72) = -1;
      }
      else if (v71 == -INFINITY)
      {
        LOBYTE(v72) = 0;
      }
      else
      {
        int v73 = llroundf(v71);
        if (v73 >= 255) {
          int v73 = 255;
        }
        int v72 = v73 & ~(v73 >> 31);
      }
      *(unsigned char *)(*a9
      if (v49 == v83) {
        goto LABEL_84;
      }
    }
  }
LABEL_88:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BDEEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  v18 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,MIL::Fp16,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, int a12, __int16 a13, __int16 a14, uint64_t a15)
{
  v98[2] = *MEMORY[0x263EF8340];
  uint64_t v15 = *a3;
  uint64_t v16 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v16 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v20 = v16 >> 3;
  }
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, (char *)v98, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a4;
  uint64_t v22 = (a4[1] - *a4) >> 3;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, (char *)v98, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v23 = *a5;
  uint64_t v24 = a5[1] - *a5;
  if (v24 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, (char *)v98, 2);
  }
  else if (v24 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v79 = (*a3)[1];
  unint64_t v80 = **a3;
  unint64_t v92 = (*a3)[4];
  unint64_t v88 = *((void *)*a4 + 1);
  unint64_t v89 = *(void *)*a4;
  unint64_t v87 = *((void *)*a4 + 2);
  uint64_t v25 = **a5;
  uint64_t v75 = (*a5)[1];
  uint64_t v76 = (*a5)[2];
  unint64_t v26 = (*a5)[4];
  uint64_t v77 = (*a5)[3];
  unint64_t v78 = (*a3)[2];
  double v27 = ldexp(1.0, a7 + 10);
  double v28 = exp2(-(double)(a7 + 10 + a8));
  int64x2_t __src = 0uLL;
  v98[0] = 0;
  unint64_t v83 = v26;
  std::vector<float>::reserve((void **)&__src, v26);
  float v30 = v28;
  v31 = *a10;
  float v32 = a10[1];
  if ((char *)v32 - (char *)*a10 == 4)
  {
    __int16 v95 = MIL::Fp16::FromFloat(Float, *v31);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v95);
    *(float *)&int __e = v33 * v30;
    std::vector<float>::assign((char **)&__src, v83, &__e);
  }
  else
  {
    for (; v31 != v32; ++v31)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v31);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v35 = v34 * v30;
      v36 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v98[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v38 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v98[0] - __src.i64[0];
        if ((v98[0] - __src.i64[0]) >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v98, v41);
          v36 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          v42 = 0;
        }
        int v43 = (float *)&v42[4 * v38];
        *int v43 = v35;
        uint64_t v37 = v43 + 1;
        while (v36 != Float)
        {
          int v44 = *((_DWORD *)v36 - 1);
          v36 = (MIL::Fp16 *)((char *)v36 - 4);
          *((_DWORD *)v43-- - 1) = v44;
        }
        __src.i64[0] = (uint64_t)v43;
        __src.i64[1] = (uint64_t)v37;
        v98[0] = &v42[4 * v41];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v35;
        uint64_t v37 = (float *)((char *)v36 + 4);
      }
      __src.i64[1] = (uint64_t)v37;
    }
  }
  if (v25)
  {
    unint64_t v45 = 0;
    int v84 = -20 - a7;
    float v46 = v27;
    uint64_t v74 = v25;
    while (!v75)
    {
LABEL_89:
      if (++v45 == v74) {
        goto LABEL_90;
      }
    }
    unint64_t v47 = 0;
    while (!v76)
    {
LABEL_88:
      if (++v47 == v75) {
        goto LABEL_89;
      }
    }
    unint64_t v48 = 0;
    while (!v77)
    {
LABEL_87:
      if (++v48 == v76) {
        goto LABEL_88;
      }
    }
    uint64_t v93 = 0;
    while (!v83)
    {
LABEL_86:
      if (++v93 == v77) {
        goto LABEL_87;
      }
    }
    uint64_t v49 = 0;
    while (1)
    {
      if (v92)
      {
        uint64_t v50 = 0;
        int v51 = 0;
        int v85 = 0;
        do
        {
          char v52 = *(unsigned char *)(a1
          if (!a11 || (__int16 v53 = a13, v50 != *((void *)a4[1] - 2))) {
            __int16 v53 = *(_WORD *)(a2
          }
                           + 2
          if (!v51)
          {
            LOWORD(__e) = v53;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v55 = v54;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v57 = v55 - v56;
            int v58 = ilogbf(v57);
            if (v58 <= -14) {
              int v59 = -14;
            }
            else {
              int v59 = v58;
            }
            if (v59 >= v84)
            {
              uint64_t v60 = (int)llroundf((float)(v57 * (float)v52) * v46) + (uint64_t)v85;
              if (v60 <= 0x7FFFFFFF)
              {
                BOOL v61 = v60 < (uint64_t)0xFFFFFFFF80000000;
                if (v60 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v60) = -8388608;
                }
                int v85 = v60;
                int v51 = 2 * v61;
              }
              else
              {
                int v51 = 1;
                int v85 = 2139095040;
              }
            }
            else
            {
              int v51 = 0;
            }
          }
          ++v50;
        }
        while (v92 != v50);
        float v62 = *(float *)(__src.i64[0] + 4 * v49);
        if (v51)
        {
          double v63 = INFINITY;
          if (v51 == 2) {
            double v63 = -INFINITY;
          }
          goto LABEL_73;
        }
        if (v85)
        {
          double v63 = (double)v85;
LABEL_73:
          *(float *)&int __e = 0.0;
          long double v65 = frexp(v63, &__e);
          double v66 = ldexp(v65, 11);
          float v64 = ldexp(round(v66), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        float v62 = *(float *)(__src.i64[0] + 4 * v49);
      }
      float v64 = 0.0;
LABEL_74:
      float v67 = v62 * v64;
      float v68 = 0.0;
      if (v67 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v69 = frexp(v67, &__e);
        double v70 = ldexp(v69, 11);
        float v68 = ldexp(round(v70), __e - 11);
      }
      std::function<float ()(float)>::operator()(a15, v68);
      if (v71 == INFINITY)
      {
        char v72 = 127;
      }
      else if (v71 == -INFINITY)
      {
        char v72 = 0x80;
      }
      else
      {
        int v73 = llroundf(v71);
        if (v73 >= 127) {
          int v73 = 127;
        }
        if (v73 <= -128) {
          char v72 = 0x80;
        }
        else {
          char v72 = v73;
        }
      }
      *(unsigned char *)(*a9
      if (v49 == v83) {
        goto LABEL_86;
      }
    }
  }
LABEL_90:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BDF6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  v18 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,unsigned char,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  v87[2] = *MEMORY[0x263EF8340];
  v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v17 = v14 >> 3;
  }
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v87, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  v18 = *a4;
  uint64_t v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v87, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v87, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  unint64_t v68 = (*a3)[1];
  unint64_t v69 = **a3;
  unint64_t v67 = (*a3)[2];
  unint64_t v81 = (*a3)[4];
  unint64_t v75 = *((void *)*a4 + 1);
  unint64_t v76 = *(void *)*a4;
  unint64_t v74 = *((void *)*a4 + 2);
  uint64_t v22 = **a5;
  uint64_t v64 = (*a5)[1];
  uint64_t v65 = (*a5)[2];
  unint64_t v23 = (*a5)[4];
  uint64_t v66 = (*a5)[3];
  double v24 = ldexp(1.0, a7);
  double v25 = exp2(-(double)(a8 + a7));
  int64x2_t __src = 0uLL;
  v87[0] = 0;
  unint64_t v72 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  float v27 = v25;
  double v28 = *a10;
  float v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    __int16 v84 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v84);
    *(float *)&int v85 = v30 * v27;
    std::vector<float>::assign((char **)&__src, v72, &v85);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(v85) = MIL::Fp16::FromFloat(Float, *v28);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
      float v32 = v31 * v27;
      float v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v87[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v87[0] - __src.i64[0];
        if ((v87[0] - __src.i64[0]) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v87, v38);
          float v33 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (float *)&v39[4 * v35];
        *uint64_t v40 = v32;
        float v34 = v40 + 1;
        while (v33 != Float)
        {
          int v41 = *((_DWORD *)v33 - 1);
          float v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v87[0] = &v39[4 * v38];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        float v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  if (v22)
  {
    unint64_t v42 = 0;
    float v43 = v24;
    while (!v64)
    {
LABEL_75:
      if (++v42 == v22) {
        goto LABEL_76;
      }
    }
    unint64_t v44 = 0;
    while (!v65)
    {
LABEL_74:
      if (++v44 == v64) {
        goto LABEL_75;
      }
    }
    unint64_t v45 = 0;
    while (!v66)
    {
LABEL_73:
      if (++v45 == v65) {
        goto LABEL_74;
      }
    }
    uint64_t v82 = 0;
    while (!v72)
    {
LABEL_72:
      if (++v82 == v66) {
        goto LABEL_73;
      }
    }
    uint64_t v78 = 0;
    while (1)
    {
      if (v81)
      {
        uint64_t v46 = 0;
        int v47 = 0;
        int v48 = 0;
        do
        {
          char v49 = *(unsigned char *)(a1
          if (!a11 || (unsigned int v50 = a12, v46 != *((void *)a4[1] - 2))) {
            unsigned int v50 = *(unsigned __int8 *)(a2
          }
          if (!v47 && a7 >= -20)
          {
            uint64_t v51 = (int)llroundf((float)((float)v49 * (float)v50) * v43) + (uint64_t)v48;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000) {
                int v48 = v51;
              }
              else {
                int v48 = -8388608;
              }
              int v47 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              int v47 = 1;
              int v48 = 2139095040;
            }
          }
          ++v46;
        }
        while (v81 != v46);
        float v52 = *(float *)(__src.i64[0] + 4 * v78);
        if (v47)
        {
          double v53 = INFINITY;
          if (v47 == 2) {
            double v53 = -INFINITY;
          }
          goto LABEL_68;
        }
        if (v48)
        {
          double v53 = (double)v48;
LABEL_68:
          *(float *)&int v85 = 0.0;
          long double v55 = frexp(v53, &v85);
          double v56 = ldexp(v55, 11);
          float v54 = ldexp(round(v56), v85 - 11);
          goto LABEL_69;
        }
      }
      else
      {
        float v52 = *(float *)(__src.i64[0] + 4 * v78);
      }
      float v54 = 0.0;
LABEL_69:
      float v57 = v52 * v54;
      float v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&int v85 = 0.0;
        long double v59 = frexp(v57, &v85);
        double v60 = ldexp(v59, 11);
        float v58 = ldexp(round(v60), v85 - 11);
      }
      BOOL v61 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a13, v58);
      __int16 v63 = MIL::Fp16::FromFloat(v61, v62);
      *(_WORD *)(*a9
               + 2
      if (v78 == v72) {
        goto LABEL_72;
      }
    }
  }
LABEL_76:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BDFDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20 = *(void **)(v18 - 160);
  if (v20)
  {
    *(void *)(v18 - 152) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,unsigned char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  v87[2] = *MEMORY[0x263EF8340];
  v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v17 = v14 >> 3;
  }
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v87, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v18 = *a4;
  uint64_t v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v87, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v87, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v68 = (*a3)[1];
  unint64_t v69 = **a3;
  unint64_t v67 = (*a3)[2];
  unint64_t v81 = (*a3)[4];
  unint64_t v75 = *((void *)*a4 + 1);
  unint64_t v76 = *(void *)*a4;
  unint64_t v74 = *((void *)*a4 + 2);
  uint64_t v22 = **a5;
  uint64_t v64 = (*a5)[1];
  uint64_t v65 = (*a5)[2];
  unint64_t v23 = (*a5)[4];
  uint64_t v66 = (*a5)[3];
  double v24 = ldexp(1.0, a7);
  double v25 = exp2(-(double)(a8 + a7));
  int64x2_t __src = 0uLL;
  v87[0] = 0;
  unint64_t v72 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  float v27 = v25;
  double v28 = *a10;
  float v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    __int16 v84 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v84);
    *(float *)&int v85 = v30 * v27;
    std::vector<float>::assign((char **)&__src, v72, &v85);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(v85) = MIL::Fp16::FromFloat(Float, *v28);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
      float v32 = v31 * v27;
      float v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v87[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v87[0] - __src.i64[0];
        if ((v87[0] - __src.i64[0]) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v87, v38);
          float v33 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (float *)&v39[4 * v35];
        *uint64_t v40 = v32;
        float v34 = v40 + 1;
        while (v33 != Float)
        {
          int v41 = *((_DWORD *)v33 - 1);
          float v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v87[0] = &v39[4 * v38];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        float v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  if (v22)
  {
    unint64_t v42 = 0;
    float v43 = v24;
    while (!v64)
    {
LABEL_84:
      if (++v42 == v22) {
        goto LABEL_85;
      }
    }
    unint64_t v44 = 0;
    while (!v65)
    {
LABEL_83:
      if (++v44 == v64) {
        goto LABEL_84;
      }
    }
    unint64_t v45 = 0;
    while (!v66)
    {
LABEL_82:
      if (++v45 == v65) {
        goto LABEL_83;
      }
    }
    uint64_t v82 = 0;
    while (!v72)
    {
LABEL_81:
      if (++v82 == v66) {
        goto LABEL_82;
      }
    }
    uint64_t v78 = 0;
    while (1)
    {
      if (v81)
      {
        uint64_t v46 = 0;
        int v47 = 0;
        int v48 = 0;
        do
        {
          char v49 = *(unsigned char *)(a1
          if (!a11 || (unsigned int v50 = a12, v46 != *((void *)a4[1] - 2))) {
            unsigned int v50 = *(unsigned __int8 *)(a2
          }
          if (!v47 && a7 >= -20)
          {
            uint64_t v51 = (int)llroundf((float)((float)v49 * (float)v50) * v43) + (uint64_t)v48;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000) {
                int v48 = v51;
              }
              else {
                int v48 = -8388608;
              }
              int v47 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              int v47 = 1;
              int v48 = 2139095040;
            }
          }
          ++v46;
        }
        while (v81 != v46);
        float v52 = *(float *)(__src.i64[0] + 4 * v78);
        if (v47)
        {
          double v53 = INFINITY;
          if (v47 == 2) {
            double v53 = -INFINITY;
          }
          goto LABEL_70;
        }
        if (v48)
        {
          double v53 = (double)v48;
LABEL_70:
          *(float *)&int v85 = 0.0;
          long double v55 = frexp(v53, &v85);
          double v56 = ldexp(v55, 11);
          float v54 = ldexp(round(v56), v85 - 11);
          goto LABEL_71;
        }
      }
      else
      {
        float v52 = *(float *)(__src.i64[0] + 4 * v78);
      }
      float v54 = 0.0;
LABEL_71:
      float v57 = v52 * v54;
      float v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&int v85 = 0.0;
        long double v59 = frexp(v57, &v85);
        double v60 = ldexp(v59, 11);
        float v58 = ldexp(round(v60), v85 - 11);
      }
      std::function<float ()(float)>::operator()(a13, v58);
      if (v61 == INFINITY)
      {
        LOBYTE(v62) = -1;
      }
      else if (v61 == -INFINITY)
      {
        LOBYTE(v62) = 0;
      }
      else
      {
        int v63 = llroundf(v61);
        if (v63 >= 255) {
          int v63 = 255;
        }
        int v62 = v63 & ~(v63 >> 31);
      }
      *(unsigned char *)(*a9
      if (v78 == v72) {
        goto LABEL_81;
      }
    }
  }
LABEL_85:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BE0578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,unsigned char,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  v87[2] = *MEMORY[0x263EF8340];
  v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v17 = v14 >> 3;
  }
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v87, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v18 = *a4;
  uint64_t v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v87, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v87, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v68 = (*a3)[1];
  unint64_t v69 = **a3;
  unint64_t v67 = (*a3)[2];
  unint64_t v81 = (*a3)[4];
  unint64_t v75 = *((void *)*a4 + 1);
  unint64_t v76 = *(void *)*a4;
  unint64_t v74 = *((void *)*a4 + 2);
  uint64_t v22 = **a5;
  uint64_t v64 = (*a5)[1];
  uint64_t v65 = (*a5)[2];
  unint64_t v23 = (*a5)[4];
  uint64_t v66 = (*a5)[3];
  double v24 = ldexp(1.0, a7);
  double v25 = exp2(-(double)(a8 + a7));
  int64x2_t __src = 0uLL;
  v87[0] = 0;
  unint64_t v72 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  float v27 = v25;
  double v28 = *a10;
  float v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    __int16 v84 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v84);
    *(float *)&int v85 = v30 * v27;
    std::vector<float>::assign((char **)&__src, v72, &v85);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(v85) = MIL::Fp16::FromFloat(Float, *v28);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
      float v32 = v31 * v27;
      float v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v87[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v87[0] - __src.i64[0];
        if ((v87[0] - __src.i64[0]) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v87, v38);
          float v33 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (float *)&v39[4 * v35];
        *uint64_t v40 = v32;
        float v34 = v40 + 1;
        while (v33 != Float)
        {
          int v41 = *((_DWORD *)v33 - 1);
          float v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v87[0] = &v39[4 * v38];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        float v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  if (v22)
  {
    unint64_t v42 = 0;
    float v43 = v24;
    while (!v64)
    {
LABEL_86:
      if (++v42 == v22) {
        goto LABEL_87;
      }
    }
    unint64_t v44 = 0;
    while (!v65)
    {
LABEL_85:
      if (++v44 == v64) {
        goto LABEL_86;
      }
    }
    unint64_t v45 = 0;
    while (!v66)
    {
LABEL_84:
      if (++v45 == v65) {
        goto LABEL_85;
      }
    }
    uint64_t v82 = 0;
    while (!v72)
    {
LABEL_83:
      if (++v82 == v66) {
        goto LABEL_84;
      }
    }
    uint64_t v78 = 0;
    while (1)
    {
      if (v81)
      {
        uint64_t v46 = 0;
        int v47 = 0;
        int v48 = 0;
        do
        {
          char v49 = *(unsigned char *)(a1
          if (!a11 || (unsigned int v50 = a12, v46 != *((void *)a4[1] - 2))) {
            unsigned int v50 = *(unsigned __int8 *)(a2
          }
          if (!v47 && a7 >= -20)
          {
            uint64_t v51 = (int)llroundf((float)((float)v49 * (float)v50) * v43) + (uint64_t)v48;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000) {
                int v48 = v51;
              }
              else {
                int v48 = -8388608;
              }
              int v47 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              int v47 = 1;
              int v48 = 2139095040;
            }
          }
          ++v46;
        }
        while (v81 != v46);
        float v52 = *(float *)(__src.i64[0] + 4 * v78);
        if (v47)
        {
          double v53 = INFINITY;
          if (v47 == 2) {
            double v53 = -INFINITY;
          }
          goto LABEL_70;
        }
        if (v48)
        {
          double v53 = (double)v48;
LABEL_70:
          *(float *)&int v85 = 0.0;
          long double v55 = frexp(v53, &v85);
          double v56 = ldexp(v55, 11);
          float v54 = ldexp(round(v56), v85 - 11);
          goto LABEL_71;
        }
      }
      else
      {
        float v52 = *(float *)(__src.i64[0] + 4 * v78);
      }
      float v54 = 0.0;
LABEL_71:
      float v57 = v52 * v54;
      float v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&int v85 = 0.0;
        long double v59 = frexp(v57, &v85);
        double v60 = ldexp(v59, 11);
        float v58 = ldexp(round(v60), v85 - 11);
      }
      std::function<float ()(float)>::operator()(a13, v58);
      if (v61 == INFINITY)
      {
        char v62 = 127;
      }
      else if (v61 == -INFINITY)
      {
        char v62 = 0x80;
      }
      else
      {
        int v63 = llroundf(v61);
        if (v63 >= 127) {
          int v63 = 127;
        }
        if (v63 <= -128) {
          char v62 = 0x80;
        }
        else {
          char v62 = v63;
        }
      }
      *(unsigned char *)(*a9
      if (v78 == v72) {
        goto LABEL_83;
      }
    }
  }
LABEL_87:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BE0D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,signed char,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  v88[2] = *MEMORY[0x263EF8340];
  v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v14 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  unint64_t v70 = (*a3)[1];
  unint64_t v71 = **a3;
  unint64_t v69 = (*a3)[2];
  unint64_t v82 = (*a3)[4];
  unint64_t v77 = *((void *)*a4 + 1);
  unint64_t v78 = *(void *)*a4;
  unint64_t v76 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v66 = (*a5)[1];
  uint64_t v67 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v68 = (*a5)[3];
  double v25 = exp2(-(double)(a8 + a7));
  int64x2_t __src = 0uLL;
  v88[0] = 0;
  unint64_t v74 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v27 = v25;
  double v28 = *a10;
  float v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    __int16 v85 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&int __e = v30 * v27;
    std::vector<float>::assign((char **)&__src, v74, &__e);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v28);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v32 = v31 * v27;
      float v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v38);
          float v33 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (float *)&v39[4 * v35];
        *uint64_t v40 = v32;
        float v34 = v40 + 1;
        while (v33 != Float)
        {
          int v41 = *((_DWORD *)v33 - 1);
          float v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v88[0] = &v39[4 * v38];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        float v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  uint64_t v65 = v23;
  if (v23)
  {
    unint64_t v42 = 0;
    while (!v66)
    {
LABEL_77:
      if (++v42 == v65) {
        goto LABEL_78;
      }
    }
    unint64_t v43 = 0;
    while (!v67)
    {
LABEL_76:
      if (++v43 == v66) {
        goto LABEL_77;
      }
    }
    unint64_t v44 = 0;
    while (!v68)
    {
LABEL_75:
      if (++v44 == v67) {
        goto LABEL_76;
      }
    }
    uint64_t v83 = 0;
    while (!v74)
    {
LABEL_74:
      if (++v83 == v68) {
        goto LABEL_75;
      }
    }
    uint64_t v79 = 0;
    while (1)
    {
      if (v82)
      {
        uint64_t v45 = 0;
        int v46 = 0;
        int v47 = 0;
        do
        {
          int v48 = *(char *)(a1
          if (!a11 || (char v49 = a12, v45 != *((void *)a4[1] - 2))) {
            char v49 = *(unsigned char *)(a2
          }
          if (!v46)
          {
            int v50 = v49 * v48;
            if (a7)
            {
              int v51 = (v50 + (1 << ~(_BYTE)a7)) >> -(char)a7;
              v50 <<= a7;
              if (a7 < 1) {
                int v50 = v51;
              }
            }
            uint64_t v52 = v47 + (uint64_t)v50;
            if (v52 <= 0x7FFFFFFF)
            {
              if (v52 >= (uint64_t)0xFFFFFFFF80000000) {
                int v47 = v52;
              }
              else {
                int v47 = -8388608;
              }
              int v46 = 2 * (v52 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              int v46 = 1;
              int v47 = 2139095040;
            }
          }
          ++v45;
        }
        while (v82 != v45);
        float v53 = *(float *)(__src.i64[0] + 4 * v79);
        if (v46)
        {
          double v54 = INFINITY;
          if (v46 == 2) {
            double v54 = -INFINITY;
          }
          goto LABEL_70;
        }
        if (v47)
        {
          double v54 = (double)v47;
LABEL_70:
          *(float *)&int __e = 0.0;
          long double v56 = frexp(v54, &__e);
          double v57 = ldexp(v56, 11);
          float v55 = ldexp(round(v57), __e - 11);
          goto LABEL_71;
        }
      }
      else
      {
        float v53 = *(float *)(__src.i64[0] + 4 * v79);
      }
      float v55 = 0.0;
LABEL_71:
      float v58 = v53 * v55;
      float v59 = 0.0;
      if (v58 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v60 = frexp(v58, &__e);
        double v61 = ldexp(v60, 11);
        float v59 = ldexp(round(v61), __e - 11);
      }
      char v62 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a13, v59);
      __int16 v64 = MIL::Fp16::FromFloat(v62, v63);
      *(_WORD *)(*a9
               + 2
      if (v79 == v74) {
        goto LABEL_74;
      }
    }
  }
LABEL_78:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BE143C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20 = *(void **)(v18 - 144);
  if (v20)
  {
    *(void *)(v18 - 136) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,signed char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  v88[2] = *MEMORY[0x263EF8340];
  v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v14 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v70 = (*a3)[1];
  unint64_t v71 = **a3;
  unint64_t v69 = (*a3)[2];
  unint64_t v82 = (*a3)[4];
  unint64_t v77 = *((void *)*a4 + 1);
  unint64_t v78 = *(void *)*a4;
  unint64_t v76 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v66 = (*a5)[1];
  uint64_t v67 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v68 = (*a5)[3];
  double v25 = exp2(-(double)(a8 + a7));
  int64x2_t __src = 0uLL;
  v88[0] = 0;
  unint64_t v74 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v27 = v25;
  double v28 = *a10;
  float v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    __int16 v85 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&int __e = v30 * v27;
    std::vector<float>::assign((char **)&__src, v74, &__e);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v28);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v32 = v31 * v27;
      float v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v38);
          float v33 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (float *)&v39[4 * v35];
        *uint64_t v40 = v32;
        float v34 = v40 + 1;
        while (v33 != Float)
        {
          int v41 = *((_DWORD *)v33 - 1);
          float v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v88[0] = &v39[4 * v38];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        float v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  uint64_t v65 = v23;
  if (v23)
  {
    unint64_t v42 = 0;
    while (!v66)
    {
LABEL_86:
      if (++v42 == v65) {
        goto LABEL_87;
      }
    }
    unint64_t v43 = 0;
    while (!v67)
    {
LABEL_85:
      if (++v43 == v66) {
        goto LABEL_86;
      }
    }
    unint64_t v44 = 0;
    while (!v68)
    {
LABEL_84:
      if (++v44 == v67) {
        goto LABEL_85;
      }
    }
    uint64_t v83 = 0;
    while (!v74)
    {
LABEL_83:
      if (++v83 == v68) {
        goto LABEL_84;
      }
    }
    uint64_t v79 = 0;
    while (1)
    {
      if (v82)
      {
        uint64_t v45 = 0;
        int v46 = 0;
        int v47 = 0;
        do
        {
          int v48 = *(char *)(a1
          if (!a11 || (char v49 = a12, v45 != *((void *)a4[1] - 2))) {
            char v49 = *(unsigned char *)(a2
          }
          if (!v46)
          {
            int v50 = v49 * v48;
            if (a7)
            {
              int v51 = (v50 + (1 << ~(_BYTE)a7)) >> -(char)a7;
              v50 <<= a7;
              if (a7 < 1) {
                int v50 = v51;
              }
            }
            uint64_t v52 = v47 + (uint64_t)v50;
            if (v52 <= 0x7FFFFFFF)
            {
              if (v52 >= (uint64_t)0xFFFFFFFF80000000) {
                int v47 = v52;
              }
              else {
                int v47 = -8388608;
              }
              int v46 = 2 * (v52 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              int v46 = 1;
              int v47 = 2139095040;
            }
          }
          ++v45;
        }
        while (v82 != v45);
        float v53 = *(float *)(__src.i64[0] + 4 * v79);
        if (v46)
        {
          double v54 = INFINITY;
          if (v46 == 2) {
            double v54 = -INFINITY;
          }
          goto LABEL_72;
        }
        if (v47)
        {
          double v54 = (double)v47;
LABEL_72:
          *(float *)&int __e = 0.0;
          long double v56 = frexp(v54, &__e);
          double v57 = ldexp(v56, 11);
          float v55 = ldexp(round(v57), __e - 11);
          goto LABEL_73;
        }
      }
      else
      {
        float v53 = *(float *)(__src.i64[0] + 4 * v79);
      }
      float v55 = 0.0;
LABEL_73:
      float v58 = v53 * v55;
      float v59 = 0.0;
      if (v58 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v60 = frexp(v58, &__e);
        double v61 = ldexp(v60, 11);
        float v59 = ldexp(round(v61), __e - 11);
      }
      std::function<float ()(float)>::operator()(a13, v59);
      if (v62 == INFINITY)
      {
        LOBYTE(v63) = -1;
      }
      else if (v62 == -INFINITY)
      {
        LOBYTE(v63) = 0;
      }
      else
      {
        int v64 = llroundf(v62);
        if (v64 >= 255) {
          int v64 = 255;
        }
        int v63 = v64 & ~(v64 >> 31);
      }
      *(unsigned char *)(*a9
      if (v79 == v74) {
        goto LABEL_83;
      }
    }
  }
LABEL_87:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BE1BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,signed char,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  v88[2] = *MEMORY[0x263EF8340];
  v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v14 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v70 = (*a3)[1];
  unint64_t v71 = **a3;
  unint64_t v69 = (*a3)[2];
  unint64_t v82 = (*a3)[4];
  unint64_t v77 = *((void *)*a4 + 1);
  unint64_t v78 = *(void *)*a4;
  unint64_t v76 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v66 = (*a5)[1];
  uint64_t v67 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v68 = (*a5)[3];
  double v25 = exp2(-(double)(a8 + a7));
  int64x2_t __src = 0uLL;
  v88[0] = 0;
  unint64_t v74 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v27 = v25;
  double v28 = *a10;
  float v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    __int16 v85 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&int __e = v30 * v27;
    std::vector<float>::assign((char **)&__src, v74, &__e);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v28);
      Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v32 = v31 * v27;
      float v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v38);
          float v33 = (MIL::Fp16 *)__src.i64[1];
          Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (float *)&v39[4 * v35];
        *uint64_t v40 = v32;
        float v34 = v40 + 1;
        while (v33 != Float)
        {
          int v41 = *((_DWORD *)v33 - 1);
          float v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v88[0] = &v39[4 * v38];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        float v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  uint64_t v65 = v23;
  if (v23)
  {
    unint64_t v42 = 0;
    while (!v66)
    {
LABEL_88:
      if (++v42 == v65) {
        goto LABEL_89;
      }
    }
    unint64_t v43 = 0;
    while (!v67)
    {
LABEL_87:
      if (++v43 == v66) {
        goto LABEL_88;
      }
    }
    unint64_t v44 = 0;
    while (!v68)
    {
LABEL_86:
      if (++v44 == v67) {
        goto LABEL_87;
      }
    }
    uint64_t v83 = 0;
    while (!v74)
    {
LABEL_85:
      if (++v83 == v68) {
        goto LABEL_86;
      }
    }
    uint64_t v79 = 0;
    while (1)
    {
      if (v82)
      {
        uint64_t v45 = 0;
        int v46 = 0;
        int v47 = 0;
        do
        {
          int v48 = *(char *)(a1
          if (!a11 || (char v49 = a12, v45 != *((void *)a4[1] - 2))) {
            char v49 = *(unsigned char *)(a2
          }
          if (!v46)
          {
            int v50 = v49 * v48;
            if (a7)
            {
              int v51 = (v50 + (1 << ~(_BYTE)a7)) >> -(char)a7;
              v50 <<= a7;
              if (a7 < 1) {
                int v50 = v51;
              }
            }
            uint64_t v52 = v47 + (uint64_t)v50;
            if (v52 <= 0x7FFFFFFF)
            {
              if (v52 >= (uint64_t)0xFFFFFFFF80000000) {
                int v47 = v52;
              }
              else {
                int v47 = -8388608;
              }
              int v46 = 2 * (v52 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              int v46 = 1;
              int v47 = 2139095040;
            }
          }
          ++v45;
        }
        while (v82 != v45);
        float v53 = *(float *)(__src.i64[0] + 4 * v79);
        if (v46)
        {
          double v54 = INFINITY;
          if (v46 == 2) {
            double v54 = -INFINITY;
          }
          goto LABEL_72;
        }
        if (v47)
        {
          double v54 = (double)v47;
LABEL_72:
          *(float *)&int __e = 0.0;
          long double v56 = frexp(v54, &__e);
          double v57 = ldexp(v56, 11);
          float v55 = ldexp(round(v57), __e - 11);
          goto LABEL_73;
        }
      }
      else
      {
        float v53 = *(float *)(__src.i64[0] + 4 * v79);
      }
      float v55 = 0.0;
LABEL_73:
      float v58 = v53 * v55;
      float v59 = 0.0;
      if (v58 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v60 = frexp(v58, &__e);
        double v61 = ldexp(v60, 11);
        float v59 = ldexp(round(v61), __e - 11);
      }
      std::function<float ()(float)>::operator()(a13, v59);
      if (v62 == INFINITY)
      {
        char v63 = 127;
      }
      else if (v62 == -INFINITY)
      {
        char v63 = 0x80;
      }
      else
      {
        int v64 = llroundf(v62);
        if (v64 >= 127) {
          int v64 = 127;
        }
        if (v64 <= -128) {
          char v63 = 0x80;
        }
        else {
          char v63 = v64;
        }
      }
      *(unsigned char *)(*a9
      if (v79 == v74) {
        goto LABEL_85;
      }
    }
  }
LABEL_89:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BE2340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu::~NeBatchMatmulCpu(MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu *this)
{
}

uint64_t MIL::ANEMachineIR::Interpreter::anonymous namespace'::GetRank5TensorIndex(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1[1] - *a1 != 40) {
  return a6
  }
       + (a5
        + (a4 + *(void *)(*a1 + 16) * a3 + *(void *)(*a1 + 8) * a2 * *(void *)(*a1 + 16))
        * *(void *)(*a1 + 24))
       * *(void *)(*a1 + 32);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,MIL::Fp16>()
{
  __assert_rtn("ComputeValue", "NeBatchMatmulCpu.cpp", 65, "o_shape.size() >= 3 && o_shape.size() <= 5");
}

{
  __assert_rtn("ComputeValue", "NeBatchMatmulCpu.cpp", 64, "y_shape.size() >= 3 && y_shape.size() <= 5");
}

{
  __assert_rtn("ComputeValue", "NeBatchMatmulCpu.cpp", 63, "x_shape.size() >= 3 && x_shape.size() <= 5");
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::GetRank5TensorIndex()
{
  __assert_rtn("GetRank5TensorIndex", "NeBatchMatmulCpu.cpp", 43, "shape5d.size() == 5");
}

void MilTranslator::MilTranslator::~MilTranslator(MilTranslator::MilTranslator *this)
{
  v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *MilTranslator::MilTranslator::MilTranslator(void *result, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a2[1];
  *result = *a2;
  result[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  result[2] = a3;
  uint64_t v5 = a4[1];
  result[3] = *a4;
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void MilTranslator::MilTranslator::Compile(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 48))(&v27);
  uint64_t Function = MIL::IRProgram::GetFunction();
  uint64_t v24 = v27;
  double v25 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v22 = *a1;
  uint64_t v23 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MilTranslator::OpTranslator::OpTranslator(v26, &v24, &v22, a4, a1[2], a3, 1);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  MilTranslator::OpTranslator::Translate((MilTranslator::OpTranslator *)v26, Function, a5);
  if (!*(_DWORD *)a5)
  {
    if (*(char *)(a5 + 31) < 0) {
      operator delete(*(void **)(a5 + 8));
    }
    MilTranslator::OpTranslator::GetBlockBuilder((uint64_t)v26, &v20);
    uint64_t v12 = a1[3];
    uint64_t v18 = v20;
    uint64_t v19 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MilTranslator::Passes::PassManager::Run(v12, &v18, a5);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (!*(_DWORD *)a5)
    {
      if (*(char *)(a5 + 31) < 0) {
        operator delete(*(void **)(a5 + 8));
      }
      v13 = (const void ***)(*(uint64_t (**)(uint64_t))(*(void *)Function + 128))(Function);
      std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100](v17, v13);
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
      uint64_t v15 = (long long **)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 88))(v14);
      memset(&v16, 0, sizeof(v16));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *v15, v15[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v15[1] - (char *)*v15) >> 3));
      MilTranslator::OpTranslator::ConstructProgram((uint64_t)v26, a2, v17, (uint64_t *)&v16, a5);
      if (!*(_DWORD *)a5)
      {
        if (*(char *)(a5 + 31) < 0) {
          operator delete(*(void **)(a5 + 8));
        }
        *(_DWORD *)a5 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 8), (char *)&unk_210C6BFE7);
      }
      float v29 = &v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)v17, (char *)v17[1]);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
  MilTranslator::OpTranslator::~OpTranslator((MilTranslator::OpTranslator *)v26);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_210BE27BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v9 = va_arg(va1, void);
  v11 = va_arg(va1, char *);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  std::string v16 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  *(void *)(v6 - 72) = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 72));
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)va, v11);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  MilTranslator::OpTranslator::~OpTranslator((MilTranslator::OpTranslator *)va1);
  v8 = *(std::__shared_weak_count **)(v6 - 80);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  _Unwind_Resume(a1);
}

void MilTranslator::RegisterDefaultOptimizationPasses()
{
}

void sub_210BE28E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MilTranslator::RegisterDefaultOptimizationPasses(a10);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::TranslateProgram()
{
  v0 = operator new(0x38uLL);
  v0[1] = 0;
  void *v0 = &unk_26C3198D0;
  v0[2] = 0;
  v0[3] = &unk_26C319920;
  v0[4] = 0;
  v0[5] = 0;
  v0[6] = 0;
  v1 = v0 + 3;
  v2 = v0;
  atomic_fetch_add_explicit(v0 + 1, 1uLL, memory_order_relaxed);
  MilTranslator::RegisterDefaultOptimizationPasses();
}

void sub_210BE2ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  uint64_t v20 = *v18;
  uint64_t *v18 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  MilTranslator::MilTranslator::~MilTranslator((MilTranslator::MilTranslator *)&a17);
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void MilTranslator::TranslateProgram(uint64_t a1)
{
  MIL::MILContext::Make(&v7, (MIL::MILContext *)a1);
  if (v7) {
    operator new();
  }
  v3 = (MIL::ParserOptions *)register_aneflow_opsets(0, v2);
  MIL::ParserOptions::Make(&v7, v3);
  uint64_t v4 = v7;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v6 = *(std::string *)a1;
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 48))(v4, &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 64))(v7, 1);
  MIL::Text::ParseProgramFromFile();
  if (v5) {
    operator new();
  }
  MilTranslator::TranslateProgram();
}

void sub_210BE2DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::CheckSupportedOps()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_210BE2ED4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210BE2F30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,MIL::IRValueType const*>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,MIL::IRValueType const*>,std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_210BE2F84(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,MIL::IRValueType const*>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,MIL::IRValueType const*>,std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    std::string v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  std::string v6 = (uint64_t **)std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__construct_node<std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (const void **)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (const void **)a2;
      do
      {
        uint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    uint64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    std::string v16 = a2;
    do
    {
      uint64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      std::string v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return (const void **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

void std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__construct_node<std::pair<std::string const,MIL::IRValueType const*> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  std::string v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v6 + 7) = *(void *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_210BE32E4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

MilTranslator::Passes::FuseConvScale *MilTranslator::Passes::FuseConvScale::FuseConvScale(MilTranslator::Passes::FuseConvScale *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "FuseConvScale");
  memset(v3, 0, sizeof(v3));
  int v4 = 1065353216;
  MilTranslator::Passes::Pass::Pass((uint64_t)this, (long long *)__p, (uint64_t)v3);
  *(void *)this = &unk_26C319848;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v3);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_26C31A290;
  return this;
}

void sub_210BE3660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MilTranslator::Passes::Pass::Pass(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C3198A8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  std::unordered_set<std::string>::unordered_set(a1 + 32, a3);
  return a1;
}

void sub_210BE370C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::Passes::PatternPass::Apply(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = (void **)(a3 + 8);
  while (1)
  {
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    uint64_t v11 = *a2;
    uint64_t v12 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 24))(v13, a1, &v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v13[0] == v13[1])
    {
      uint64_t v14 = (void **)v13;
      std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&v14);
      *(_DWORD *)a3 = 0;
      std::string::basic_string[abi:ne180100]<0>(v6, (char *)&unk_210C6BFE7);
      return;
    }
    int v8 = (std::__shared_weak_count *)a2[1];
    uint64_t v9 = *a2;
    v10 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)a1 + 32))(a1, &v9, v13);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (*(_DWORD *)a3) {
      break;
    }
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    uint64_t v14 = (void **)v13;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
  uint64_t v14 = (void **)v13;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void sub_210BE3884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  a16 = (void **)&a13;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_210BE3920(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MilTranslator::Passes::PassManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C3198D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MilTranslator::Passes::PassManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C3198D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_emplace<MilTranslator::Passes::PassManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void MilTranslator::Passes::PassManager::~PassManager(MilTranslator::Passes::PassManager *this)
{
  *(void *)this = &unk_26C319920;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<MilTranslator::Passes::Pass>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26C319920;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<MilTranslator::Passes::Pass>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x21667BBD0](this, 0xA1C4030951706);
}

void std::vector<std::unique_ptr<MilTranslator::Passes::Pass>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<MilTranslator::Passes::Pass>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<MilTranslator::Passes::Pass>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    int v4 = (void *)*--v3;
    result = v4;
    void *v3 = 0;
    if (v4) {
      result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::__shared_ptr_pointer<MIL::MILContext  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::IRProgram  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t MilTranslator::RegisterDefaultOptimizationPasses(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t MilTranslator::TranslateProgram(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void ANEMachineIR::Validators::ValidateBaseActivation(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v51, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v5 = MIL::IRValueType::AsTensorType(ParameterType);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
  double v54 = 0;
  float v55 = 0;
  uint64_t v56 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v54, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
  if (SHIBYTE(v53) < 0) {
    operator delete(v51);
  }
  uint64_t v7 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 176))(a1);
  if (*(void *)(v7 + 8) == *(void *)v7) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v7);
  uint64_t v9 = MIL::IRValueType::AsTensorType(Type);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v51, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
  unint64_t v11 = (v55 - (unsigned char *)v54) >> 3;
  if (v11 != (v52 - (unsigned char *)v51) >> 3)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    double v25 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v49 = *LocationPtr;
    int v50 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v47, "Activation input and output must have same rank.");
    MEMORY[0x21667B340](a2, &v49, 319, v47);
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    unint64_t v26 = v50;
    if (!v50) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v55 != (unsigned char *)v54)
  {
    unint64_t v12 = 0;
    if (v11 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = (v55 - (unsigned char *)v54) >> 3;
    }
    while (1)
    {
      if (v12 >= (v55 - (unsigned char *)v54) >> 3) {
        goto LABEL_51;
      }
      if (!(*(uint64_t (**)(void *))(*v54[v12] + 16))(v54[v12])) {
        break;
      }
      if (v12 >= (v52 - (unsigned char *)v51) >> 3) {
LABEL_51:
      }
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      if (!(*(uint64_t (**)(void))(**((void **)v51 + v12) + 16))(*((void *)v51 + v12))) {
        break;
      }
      if (v12 >= (v52 - (unsigned char *)v51) >> 3) {
        goto LABEL_51;
      }
      uint64_t v14 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v51 + v12));
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14);
      if (v12 >= (v55 - (unsigned char *)v54) >> 3) {
        goto LABEL_51;
      }
      uint64_t v16 = v15;
      uint64_t v17 = MIL::IRDimension::AsConstant((MIL::IRDimension *)v54[v12]);
      if (v16 != (*(uint64_t (**)(uint64_t))(*(void *)v17 + 48))(v17))
      {
        float v31 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
        float v32 = (std::__shared_weak_count *)v31[1];
        uint64_t v41 = *v31;
        unint64_t v42 = v32;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v39, "Activation input and output must have same shape.");
        MEMORY[0x21667B340](a2, &v41, 319, v39);
        if (v40 < 0) {
          operator delete(v39[0]);
        }
        unint64_t v26 = v42;
        if (v42) {
          goto LABEL_27;
        }
        goto LABEL_28;
      }
      if (v13 == ++v12) {
        goto LABEL_17;
      }
    }
    uint64_t v27 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    double v28 = (std::__shared_weak_count *)v27[1];
    uint64_t v45 = *v27;
    int v46 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v43, "Activation input and output must have known shape.");
    MEMORY[0x21667B340](a2, &v45, 319, v43);
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    unint64_t v26 = v46;
    if (v46) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t v18 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v19 = MIL::IRValueType::AsTensorType(v18);
  int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 88))(v19);
  if (v38 < 0) {
    operator delete(__p);
  }
  uint64_t v21 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 176))(a1);
  if (*(void *)(v21 + 8) == *(void *)v21) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v22 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v21);
  uint64_t v23 = MIL::IRValueType::AsTensorType(v22);
  if (v20 == (*(unsigned int (**)(uint64_t))(*(void *)v23 + 88))(v23))
  {
    MIL::ValidationResult::ValidationResult(a2);
    goto LABEL_28;
  }
  float v29 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  float v30 = (std::__shared_weak_count *)v29[1];
  uint64_t v35 = *v29;
  unint64_t v36 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "Activation inputs and outputs must have same data type.");
  MEMORY[0x21667B340](a2, &v35, 304, v33);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  unint64_t v26 = v36;
  if (v36) {
LABEL_27:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
LABEL_28:
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if (v54)
  {
    float v55 = v54;
    operator delete(v54);
  }
}

void sub_210BE4228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  uint64_t v41 = *(void **)(v39 - 96);
  if (v41)
  {
    *(void *)(v39 - 88) = v41;
    operator delete(v41);
  }
  unint64_t v42 = *(void **)(v39 - 72);
  if (v42)
  {
    *(void *)(v39 - 64) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANEMachineIR::Validators::ValidateLinear@<X0>(MIL::IRObject *a1@<X0>, uint64_t a2@<X8>)
{
  ANEMachineIR::Validators::ValidateBaseActivation(a1, (MIL::ValidationResult *)v4);
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v4))
  {
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v5;
    long long v5 = 0uLL;
    *(_OWORD *)(a2 + 24) = v6;
    *(void *)(a2 + 40) = v7;
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    *(void *)a2 = MEMORY[0x263F52F88] + 16;
    *(_DWORD *)(a2 + 48) = v8;
  }
  return MEMORY[0x21667B360](v4);
}

uint64_t ANEMachineIR::Validators::ValidateLrelu@<X0>(MIL::IRObject *a1@<X0>, uint64_t a2@<X8>)
{
  ANEMachineIR::Validators::ValidateBaseActivation(a1, (MIL::ValidationResult *)v24);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)v24) & 1) == 0)
  {
    *(_OWORD *)(a2 + 8) = v25;
    long long v25 = 0uLL;
    *(_OWORD *)(a2 + 24) = v26;
    *(void *)(a2 + 40) = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    *(void *)a2 = MEMORY[0x263F52F88] + 16;
    *(_DWORD *)(a2 + 48) = v28;
    return MEMORY[0x21667B360](v24);
  }
  float v23 = 1.0;
  char v22 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<float>(a1, &v22, &v23, (MIL::ValidationResult *)a2);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2))
  {
    MEMORY[0x21667B360](a2);
    if (!v22 || v23 == 1.0)
    {
      float v15 = 0.3;
      char v14 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
      MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<float>(a1, &v14, &v15, (MIL::ValidationResult *)a2);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2))
      {
        MEMORY[0x21667B360](a2);
        if (!v14 || v15 > 0.0 && v15 < 1.0)
        {
          MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
          return MEMORY[0x21667B360](v24);
        }
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
        uint64_t v9 = (std::__shared_weak_count *)LocationPtr[1];
        uint64_t v12 = *LocationPtr;
        uint64_t v13 = v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v10, "Alpha is out of range (0 < alpha < 1).");
        MEMORY[0x21667B340](a2, &v12, 319, v10);
        if (v11 < 0) {
          operator delete(v10[0]);
        }
        long long v6 = v13;
        if (v13) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      int v4 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      long long v5 = (std::__shared_weak_count *)v4[1];
      uint64_t v18 = *v4;
      uint64_t v19 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v16, "Scale must be 1, otherwise convert scale into post_scale and alpha. This restriction is an arbitrary behavior of pyANE compiler");
      MEMORY[0x21667B340](a2, &v18, 319, v16);
      if (v17 < 0) {
        operator delete(v16[0]);
      }
      long long v6 = v19;
      if (v19) {
LABEL_12:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  return MEMORY[0x21667B360](v24);
}

void sub_210BE463C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  MEMORY[0x21667B360](v31 - 72);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<float>(MIL::IRObject *a1@<X0>, unsigned char *a2@<X2>, _DWORD *a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (!ParameterValue)
  {
    *a2 = 0;
    goto LABEL_25;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue))
  {
    uint64_t v9 = (_DWORD *)MEMORY[0x21667B860]();
    if (v9)
    {
      *a3 = *v9;
      *a2 = 1;
LABEL_25:
      MIL::ValidationResult::ValidationResult(a4);
      return;
    }
  }
  *a2 = 0;
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  char v11 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v27 = *LocationPtr;
  int v28 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::operator+<char>();
  uint64_t v12 = std::string::append(&v22, "\" in operation \"");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
  int v15 = *(char *)(v14 + 23);
  if (v15 >= 0) {
    uint64_t v16 = (const std::string::value_type *)v14;
  }
  else {
    uint64_t v16 = *(const std::string::value_type **)v14;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(v14 + 8);
  }
  uint64_t v18 = std::string::append(&v23, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  int v20 = std::string::append(&v24, "\".");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v26 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](a4, &v27, 304, __p);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_210BE48F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v35 - 56);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANEMachineIR::Validators::ValidateNePiecewiseV2@<X0>(MIL::IRObject *a1@<X0>, uint64_t a2@<X8>)
{
  ANEMachineIR::Validators::ValidateBaseActivation(a1, (MIL::ValidationResult *)v109);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)v109) & 1) == 0)
  {
    long long v39 = v111;
    *(_OWORD *)(a2 + 8) = v110;
    long long v110 = 0uLL;
    *(_OWORD *)(a2 + 24) = v39;
    *(void *)(a2 + 40) = v112;
    long long v111 = 0uLL;
    uint64_t v112 = 0;
    *(void *)a2 = MEMORY[0x263F52F88] + 16;
    *(_DWORD *)(a2 + 48) = v113;
    return MEMORY[0x21667B360](v109);
  }
  int v4 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v107, "x_sat_left");
  __int16 v5 = MIL::Fp16::FromFloat(v4, 0.0);
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue))
    {
      uint64_t v7 = (__int16 *)MEMORY[0x21667B820]();
      if (v7) {
        __int16 v5 = *v7;
      }
    }
  }
  __int16 v108 = v5;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  int v8 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v107, "x_sat_right");
  __int16 v9 = MIL::Fp16::FromFloat(v8, 0.0);
  uint64_t v10 = MIL::IROperation::TryGetParameterValue();
  if (v10)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10))
    {
      char v11 = (__int16 *)MEMORY[0x21667B820]();
      if (v11) {
        __int16 v9 = *v11;
      }
    }
  }
  __int16 v106 = v9;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v107, "y_sat_left");
  __int16 v13 = MIL::Fp16::FromFloat(v12, 0.0);
  uint64_t v14 = MIL::IROperation::TryGetParameterValue();
  if (v14)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 40))(v14))
    {
      int v15 = (__int16 *)MEMORY[0x21667B820]();
      if (v15) {
        __int16 v13 = *v15;
      }
    }
  }
  __int16 v105 = v13;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v107, "y_sat_right");
  __int16 v17 = MIL::Fp16::FromFloat(v16, 0.0);
  uint64_t v18 = MIL::IROperation::TryGetParameterValue();
  if (v18)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v18 + 40))(v18))
    {
      long long v19 = (__int16 *)MEMORY[0x21667B820]();
      if (v19) {
        __int16 v17 = *v19;
      }
    }
  }
  __int16 v104 = v17;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  int v20 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v107, "slope_left");
  __int16 v21 = MIL::Fp16::FromFloat(v20, 0.0);
  uint64_t v22 = MIL::IROperation::TryGetParameterValue();
  if (v22)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22))
    {
      std::string v23 = (__int16 *)MEMORY[0x21667B820]();
      if (v23) {
        __int16 v21 = *v23;
      }
    }
  }
  __int16 v103 = v21;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  std::string v24 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v107, "slope_right");
  __int16 v25 = MIL::Fp16::FromFloat(v24, 0.0);
  uint64_t v26 = MIL::IROperation::TryGetParameterValue();
  if (v26)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v26 + 40))(v26))
    {
      uint64_t v27 = (__int16 *)MEMORY[0x21667B820]();
      if (v27) {
        __int16 v25 = *v27;
      }
    }
  }
  __int16 v102 = v25;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  int v28 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v107, "intercept_left");
  __int16 v29 = MIL::Fp16::FromFloat(v28, 0.0);
  uint64_t v30 = MIL::IROperation::TryGetParameterValue();
  if (v30)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30))
    {
      uint64_t v31 = (__int16 *)MEMORY[0x21667B820]();
      if (v31) {
        __int16 v29 = *v31;
      }
    }
  }
  __int16 v101 = v29;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  float v32 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v107, "intercept_right");
  __int16 v33 = MIL::Fp16::FromFloat(v32, 0.0);
  uint64_t v34 = MIL::IROperation::TryGetParameterValue();
  if (v34)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v34 + 40))(v34))
    {
      uint64_t v35 = (__int16 *)MEMORY[0x21667B820]();
      if (v35) {
        __int16 v33 = *v35;
      }
    }
  }
  __int16 v100 = v33;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v107, "in_abs");
  uint64_t v36 = MIL::IROperation::TryGetParameterValue();
  BOOL v38 = v36
     && (*(uint64_t (**)(uint64_t))(*(void *)v36 + 40))(v36)
     && (uint64_t v37 = (unsigned char *)MEMORY[0x21667B850]()) != 0
     && *v37 != 0;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v98, "lut_mode");
  std::string::basic_string[abi:ne180100]<0>(&v97, "sqrt");
  uint64_t v40 = MIL::IROperation::TryGetParameterValue();
  if (v40 && (*(uint64_t (**)(uint64_t))(*(void *)v40 + 40))(v40) && (uint64_t v41 = MEMORY[0x21667B830]()) != 0)
  {
    if (*(char *)(v41 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v41, *(void *)(v41 + 8));
    }
    else
    {
      long long v42 = *(_OWORD *)v41;
      v107.__r_.__value_.__r.__words[2] = *(void *)(v41 + 16);
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v42;
    }
  }
  else
  {
    std::string v107 = v97;
    memset(&v97, 0, sizeof(v97));
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v99 < 0) {
    operator delete(v98);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v108);
  float v44 = v43;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v106);
  if (v44 >= v45)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    int v51 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v95 = *LocationPtr;
    v96 = v51;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v93, "x_sat_left should be smaller than x_sat_right");
    MEMORY[0x21667B340](a2, &v95, 319, v93);
    if (v94 < 0) {
      operator delete(v93[0]);
    }
    uint64_t v49 = v96;
    if (!v96) {
      goto LABEL_82;
    }
LABEL_81:
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    goto LABEL_82;
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v108);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v106);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v105);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v104);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v103);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v103);
  if (fabsf(v46) == INFINITY)
  {
    int v47 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    char v48 = (std::__shared_weak_count *)v47[1];
    uint64_t v91 = *v47;
    unint64_t v92 = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "slope_left should not be NaN, +inf or -inf.");
    MEMORY[0x21667B340](a2, &v91, 319, __p);
    if (v90 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v49 = v92;
    if (!v92) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v102);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v102);
  if (fabsf(v53) == INFINITY)
  {
    double v54 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    float v55 = (std::__shared_weak_count *)v54[1];
    uint64_t v87 = *v54;
    unint64_t v88 = v55;
    if (v55) {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v85, "slope_right should not be NaN, +inf or -inf.");
    MEMORY[0x21667B340](a2, &v87, 319, v85);
    if (v86 < 0) {
      operator delete(v85[0]);
    }
    uint64_t v49 = v88;
    if (!v88) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v101);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v101);
  if (fabsf(v56) == INFINITY)
  {
    double v57 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    float v58 = (std::__shared_weak_count *)v57[1];
    uint64_t v83 = *v57;
    __int16 v84 = v58;
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v81, "intercept_left should not be NaN, +inf or -inf.");
    MEMORY[0x21667B340](a2, &v83, 319, v81);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    uint64_t v49 = v84;
    if (!v84) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v100);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v100);
  if (fabsf(v59) == INFINITY)
  {
    long double v60 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    double v61 = (std::__shared_weak_count *)v60[1];
    uint64_t v79 = *v60;
    unint64_t v80 = v61;
    if (v61) {
      atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v77, "intercept_right should not be NaN, +inf or -inf.");
    MEMORY[0x21667B340](a2, &v79, 319, v77);
    if (v78 < 0) {
      operator delete(v77[0]);
    }
    uint64_t v49 = v80;
    if (!v80) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  BOOL v62 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, "frac")
     || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, "int");
  BOOL v63 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, "inv")
     || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, "log2")
     || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, "sqr")
     || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, "sqrt")
     || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v107, "rsqrt");
  if (!v38 && v62)
  {
    uint64_t v67 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v68 = (std::__shared_weak_count *)v67[1];
    uint64_t v75 = *v67;
    unint64_t v76 = v68;
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v73, "If lut_mode is FRAC or INT then in_abs must be True.");
    MEMORY[0x21667B340](a2, &v75, 319, v73);
    if (v74 < 0) {
      operator delete(v73[0]);
    }
    uint64_t v49 = v76;
    if (!v76) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  if (v63)
  {
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v108);
    if (v64 < 0.0)
    {
      uint64_t v65 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      uint64_t v66 = (std::__shared_weak_count *)v65[1];
      uint64_t v71 = *v65;
      unint64_t v72 = v66;
      if (v66) {
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v69, "If lut_mode is INV, LOG2, SQR, SQRT, RSQRT, then x_sat_left should be non-negative");
      MEMORY[0x21667B340](a2, &v71, 319, v69);
      if (v70 < 0) {
        operator delete(v69[0]);
      }
      uint64_t v49 = v72;
      if (!v72) {
        goto LABEL_82;
      }
      goto LABEL_81;
    }
  }
  MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
LABEL_82:
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  return MEMORY[0x21667B360](v109);
}

void sub_210BE5518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,std::__shared_weak_count *a47)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  if (*(char *)(v47 - 137) < 0) {
    operator delete(*(void **)(v47 - 160));
  }
  MEMORY[0x21667B360](v47 - 120);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ParseNePoolParamValues(ANEMachineIR::Validators *this@<X0>, const MIL::IROperation *a2@<X1>, char **a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  ANEMachineIR::Utils::GetStaticTensorShape(a2, a2, (uint64_t)&v41);
  __int16 v9 = v41;
  int v8 = v42;
  std::string::basic_string[abi:ne180100]<0>(__p, "kernel_sizes");
  uint64_t v10 = v8 - v9;
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (MIL::ValidationResult::IsGood(a4))
  {
    MEMORY[0x21667B360](a4);
    std::string::basic_string[abi:ne180100]<0>(__p, "strides");
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (MIL::ValidationResult::IsGood(a4))
    {
      MEMORY[0x21667B360](a4);
      std::string::basic_string[abi:ne180100]<0>(__p, "custom_pads");
      uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
      uint64_t v12 = ParameterValue;
      if (v40 < 0)
      {
        operator delete(__p[0]);
        if (!v12)
        {
LABEL_15:
          std::string::basic_string[abi:ne180100]<0>(__p, "post_right_shift");
          uint64_t v13 = MIL::IROperation::TryGetParameterValue();
          if (v13
            && (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13)
            && (uint64_t v14 = (unsigned __int8 *)MEMORY[0x21667B840]()) != 0)
          {
            __int16 v15 = *v14;
          }
          else
          {
            __int16 v15 = 0;
          }
          *((_WORD *)a3 + 36) = v15 | 0x100;
          if (v40 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v16 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(__p, "post_scale");
          __int16 v17 = MIL::Fp16::FromFloat(v16, 1.0);
          uint64_t v18 = MIL::IROperation::TryGetParameterValue();
          if (v18)
          {
            if ((*(uint64_t (**)(uint64_t))(*(void *)v18 + 40))(v18))
            {
              long long v19 = (__int16 *)MEMORY[0x21667B820]();
              if (v19) {
                __int16 v17 = *v19;
              }
            }
          }
          if (!*((unsigned char *)a3 + 76)) {
            *((unsigned char *)a3 + 76) = 1;
          }
          *((_WORD *)a3 + 37) = v17;
          if (v40 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v20 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)this + 56))(this);
          int v21 = *(char *)(v20 + 23);
          if (v21 < 0)
          {
            if (*(void *)(v20 + 8) != 11) {
              goto LABEL_39;
            }
            uint64_t v20 = *(void *)v20;
          }
          else if (v21 != 11)
          {
            goto LABEL_39;
          }
          if (*(void *)v20 == 0x705F6776615F656ELL && *(void *)(v20 + 3) == 0x6C6F6F705F677661)
          {
            std::string v23 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(__p, "bias");
            __int16 v24 = MIL::Fp16::FromFloat(v23, 0.0);
            uint64_t v25 = MIL::IROperation::TryGetParameterValue();
            if (v25)
            {
              if ((*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25))
              {
                uint64_t v26 = (__int16 *)MEMORY[0x21667B820]();
                if (v26) {
                  __int16 v24 = *v26;
                }
              }
            }
            if (!*((unsigned char *)a3 + 80)) {
              *((unsigned char *)a3 + 80) = 1;
            }
            *((_WORD *)a3 + 39) = v24;
            if (v40 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "acc_left_shift");
            uint64_t v27 = MIL::IROperation::TryGetParameterValue();
            if (v27
              && (*(uint64_t (**)(uint64_t))(*(void *)v27 + 40))(v27)
              && (int v28 = (unsigned __int8 *)MEMORY[0x21667B840]()) != 0)
            {
              __int16 v29 = *v28;
            }
            else
            {
              __int16 v29 = 0;
            }
            *((_WORD *)a3 + 41) = v29 | 0x100;
            if (v40 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "acc_bias_shift");
            uint64_t v30 = MIL::IROperation::TryGetParameterValue();
            if (v30
              && (*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30)
              && (uint64_t v31 = (unsigned __int8 *)MEMORY[0x21667B840]()) != 0)
            {
              __int16 v32 = *v31;
            }
            else
            {
              __int16 v32 = 0;
            }
            *((_WORD *)a3 + 42) = v32 | 0x100;
            if (v40 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "include_pads");
            uint64_t v33 = MIL::IROperation::TryGetParameterValue();
            __int16 v35 = v33
               && (*(uint64_t (**)(uint64_t))(*(void *)v33 + 40))(v33)
               && (uint64_t v34 = (unsigned char *)MEMORY[0x21667B850]()) != 0
               && *v34 != 0;
            *((_WORD *)a3 + 43) = v35 | 0x100;
            if (v40 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "pre_relu");
            uint64_t v36 = MIL::IROperation::TryGetParameterValue();
            __int16 v38 = v36
               && (*(uint64_t (**)(uint64_t))(*(void *)v36 + 40))(v36)
               && (uint64_t v37 = (unsigned char *)MEMORY[0x21667B850]()) != 0
               && *v37 != 0;
            *((_WORD *)a3 + 44) = v38 | 0x100;
            if (v40 < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_49;
          }
LABEL_39:
          if (*((unsigned char *)a3 + 80)) {
            *((unsigned char *)a3 + 80) = 0;
          }
          if (*((unsigned char *)a3 + 83)) {
            *((unsigned char *)a3 + 83) = 0;
          }
          if (*((unsigned char *)a3 + 85)) {
            *((unsigned char *)a3 + 85) = 0;
          }
          if (*((unsigned char *)a3 + 87)) {
            *((unsigned char *)a3 + 87) = 0;
          }
          if (*((unsigned char *)a3 + 89)) {
            *((unsigned char *)a3 + 89) = 0;
          }
LABEL_49:
          MIL::ValidationResult::ValidationResult(a4);
          goto LABEL_50;
        }
      }
      else if (!ParameterValue)
      {
        goto LABEL_15;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "custom_pads");
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (MIL::ValidationResult::IsGood(a4))
      {
        MEMORY[0x21667B360](a4);
        goto LABEL_15;
      }
    }
  }
LABEL_50:
  if (v41)
  {
    long long v42 = v41;
    operator delete(v41);
  }
}

void sub_210BE5D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::GetParamValuesOfInt32Vector(MIL::IRObject *a1@<X0>, unint64_t a2@<X2>, char **a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v9 = MIL::IRValueType::AsTensorType(ParameterType);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  if (v10[1] == *v10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)*v10 + 16))();
  if (!v11)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v30 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v61 = *LocationPtr;
    BOOL v62 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    uint64_t v31 = std::string::append(&v58, "'  must have static shape.");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    std::string::size_type v60 = v31->__r_.__value_.__r.__words[2];
    long long v59 = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21667B340](a4, &v61, 302, &v59);
    if (SHIBYTE(v60) < 0) {
      operator delete((void *)v59);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    uint64_t v33 = v62;
    if (!v62) {
      return;
    }
LABEL_31:
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    return;
  }
  uint64_t v12 = v11;
  if ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11) == a2)
  {
    uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
    MIL::IRValue::AsTensor(ParameterValue);
    v58.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<int>();
    v58.__r_.__value_.__l.__size_ = v14;
    a3[1] = *a3;
    if (v14)
    {
      std::string::size_type v15 = 0;
      do
      {
        uint64_t v16 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v58, v15);
        __int16 v17 = v16;
        long long v19 = a3[1];
        unint64_t v18 = (unint64_t)a3[2];
        if ((unint64_t)v19 >= v18)
        {
          int v21 = *a3;
          uint64_t v22 = (v19 - *a3) >> 2;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v18 - (void)v21;
          if (v24 >> 1 > v23) {
            unint64_t v23 = v24 >> 1;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a3 + 2), v25);
            int v21 = *a3;
            long long v19 = a3[1];
          }
          else
          {
            uint64_t v26 = 0;
          }
          uint64_t v27 = &v26[4 * v22];
          *(_DWORD *)uint64_t v27 = *v17;
          uint64_t v20 = v27 + 4;
          while (v19 != v21)
          {
            int v28 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v27 - 1) = v28;
            v27 -= 4;
          }
          *a3 = v27;
          a3[1] = v20;
          a3[2] = &v26[4 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(_DWORD *)long long v19 = *v16;
          uint64_t v20 = v19 + 4;
        }
        a3[1] = v20;
        ++v15;
      }
      while (v15 < v58.__r_.__value_.__l.__size_);
    }
    MIL::ValidationResult::ValidationResult(a4);
    return;
  }
  uint64_t v34 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  __int16 v35 = (std::__shared_weak_count *)v34[1];
  uint64_t v56 = *v34;
  double v57 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::operator+<char>();
  uint64_t v36 = std::string::append(&v51, "' must have length of ");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v50, a2);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v38 = &v50;
  }
  else {
    __int16 v38 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v50.__r_.__value_.__l.__size_;
  }
  char v40 = std::string::append(&v52, (const std::string::value_type *)v38, size);
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  long long v42 = std::string::append(&v53, ", got ");
  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  unint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
  std::to_string(&v49, v44);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v45 = &v49;
  }
  else {
    float v45 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v46 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v46 = v49.__r_.__value_.__l.__size_;
  }
  uint64_t v47 = std::string::append(&v58, (const std::string::value_type *)v45, v46);
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  std::string::size_type v55 = v47->__r_.__value_.__r.__words[2];
  long long __p = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](a4, &v56, 319, &__p);
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  uint64_t v33 = v57;
  if (v57) {
    goto LABEL_31;
  }
}

void sub_210BE625C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v50 - 137) < 0) {
    operator delete(*(void **)(v50 - 160));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ParsePePoolParamValues(ANEMachineIR::Utils *this@<X1>, MIL::IRObject *a2@<X0>, uint64_t a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  ANEMachineIR::Utils::GetStaticTensorShape(this, this, (uint64_t)&v27);
  int v8 = v27;
  uint64_t v7 = v28;
  std::string::basic_string[abi:ne180100]<0>(__p, "kernel_sizes");
  unint64_t v9 = ((v7 - v8) >> 3) - 2;
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (MIL::ValidationResult::IsGood(a4))
  {
    MEMORY[0x21667B360](a4);
    std::string::basic_string[abi:ne180100]<0>(__p, "strides");
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (MIL::ValidationResult::IsGood(a4))
    {
      MEMORY[0x21667B360](a4);
      std::string::basic_string[abi:ne180100]<0>(__p, "custom_pads");
      uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
      uint64_t v11 = ParameterValue;
      if (v26 < 0)
      {
        operator delete(__p[0]);
        if (!v11)
        {
LABEL_15:
          uint64_t v12 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(__p, "post_scale");
          __int16 v13 = MIL::Fp16::FromFloat(v12, 1.0);
          uint64_t v14 = MIL::IROperation::TryGetParameterValue();
          if (v14)
          {
            if ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 40))(v14))
            {
              std::string::size_type v15 = (__int16 *)MEMORY[0x21667B820]();
              if (v15) {
                __int16 v13 = *v15;
              }
            }
          }
          if (!*(unsigned char *)(a3 + 74)) {
            *(unsigned char *)(a3 + 74) = 1;
          }
          *(_WORD *)(a3 + 72) = v13;
          if (v26 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v16 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 56))(a2);
          int v17 = *(char *)(v16 + 23);
          if (v17 < 0)
          {
            if (*(void *)(v16 + 8) != 11) {
              goto LABEL_32;
            }
            uint64_t v16 = *(void *)v16;
          }
          else if (v17 != 11)
          {
            goto LABEL_32;
          }
          if (*(void *)v16 == 0x705F6776615F6570 && *(void *)(v16 + 3) == 0x6C6F6F705F677661)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "include_pads");
            uint64_t v19 = MIL::IROperation::TryGetParameterValue();
            __int16 v21 = v19
               && (*(uint64_t (**)(uint64_t))(*(void *)v19 + 40))(v19)
               && (uint64_t v20 = (unsigned char *)MEMORY[0x21667B850]()) != 0
               && *v20 != 0;
            *(_WORD *)(a3 + 76) = v21 | 0x100;
            if (v26 < 0) {
              operator delete(__p[0]);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "pre_relu");
            uint64_t v22 = MIL::IROperation::TryGetParameterValue();
            __int16 v24 = v22
               && (*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22)
               && (unint64_t v23 = (unsigned char *)MEMORY[0x21667B850]()) != 0
               && *v23 != 0;
            *(_WORD *)(a3 + 78) = v24 | 0x100;
            if (v26 < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_36;
          }
LABEL_32:
          if (*(unsigned char *)(a3 + 77)) {
            *(unsigned char *)(a3 + 77) = 0;
          }
          if (*(unsigned char *)(a3 + 79)) {
            *(unsigned char *)(a3 + 79) = 0;
          }
LABEL_36:
          MIL::ValidationResult::ValidationResult(a4);
          goto LABEL_37;
        }
      }
      else if (!ParameterValue)
      {
        goto LABEL_15;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "custom_pads");
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (MIL::ValidationResult::IsGood(a4))
      {
        MEMORY[0x21667B360](a4);
        goto LABEL_15;
      }
    }
  }
LABEL_37:
  if (v27)
  {
    int v28 = v27;
    operator delete(v27);
  }
}

void sub_210BE6718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::InferOutputShape(uint64_t *a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X4>, uint64_t a6@<X5>, MIL::ValidationResult *a7@<X8>)
{
  unint64_t v10 = a5[1] - *a5;
  unint64_t v11 = v10 - 2;
  *(void *)(a6 + 8) = *(void *)a6;
  std::vector<unsigned long long>::reserve((void **)a6, v10);
  v205 = 0;
  v206 = 0;
  v207 = 0;
  uint64_t v12 = *(void *)(a4 + 8);
  if (*(void *)a4 == v12)
  {
    if (v10 != 2)
    {
      __int16 v13 = 0;
      uint64_t v14 = 0;
      if (2 * v11 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = 2 * v11;
      }
      do
      {
        if (v13 >= v207)
        {
          int v17 = v205;
          uint64_t v18 = (v13 - v205) >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v207 - v205;
          if ((v207 - v205) >> 1 > v19) {
            unint64_t v19 = v20 >> 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v207, v21);
            int v17 = v205;
            __int16 v13 = v206;
          }
          else
          {
            uint64_t v22 = 0;
          }
          unint64_t v23 = &v22[4 * v18];
          *(_DWORD *)unint64_t v23 = 0;
          uint64_t v16 = v23 + 4;
          while (v13 != v17)
          {
            int v24 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          v205 = v23;
          v206 = v16;
          v207 = &v22[4 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(_DWORD *)__int16 v13 = 0;
          uint64_t v16 = v13 + 4;
        }
        v206 = v16;
        ++v14;
        __int16 v13 = v16;
      }
      while (v14 != v15);
    }
  }
  else if (&v205 != (char **)a4)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v205, *(char **)a4, v12, (v12 - *(void *)a4) >> 2);
  }
  unint64_t v25 = *a5;
  uint64_t v26 = (char *)a5[1] - (char *)*a5;
  if (!v26) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v26 >> 3;
  uint64_t v28 = *v25;
  if (v10 == 5)
  {
    if (v27 <= 1) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v29 = v25[1];
  }
  else
  {
    uint64_t v29 = 1;
    if (v11 < 2)
    {
      int v32 = 0;
      uint64_t v31 = 1;
      uint64_t v30 = a2;
      goto LABEL_33;
    }
  }
  uint64_t v30 = a2;
  if (v27 <= v10 - 3) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v31 = v25[v10 - 3];
  int v32 = 1;
LABEL_33:
  if (v27 <= v11) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v33 = v10 - 1;
  if (v27 <= v10 - 1) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v34 = v25[v11];
  unint64_t v35 = v25[v33];
  uint64_t v36 = *v30;
  long long v37 = v30[1];
  unint64_t v38 = v37 - *v30;
  if (v38 != v33)
  {
    if (v10 == 5)
    {
      if (v37 == v36) {
        goto LABEL_231;
      }
      int v39 = *v36;
      if (!v32) {
        goto LABEL_42;
      }
    }
    else
    {
      int v39 = 1;
      if (!v32)
      {
LABEL_42:
        int v40 = 1;
        goto LABEL_55;
      }
    }
    if (v38 <= v10 - 4) {
      goto LABEL_231;
    }
    int v40 = v36[v10 - 4];
LABEL_55:
    unint64_t v48 = v10 - 3;
    if (v38 <= v10 - 3) {
      goto LABEL_231;
    }
    int v42 = v36[v48];
    if (v10 == 5)
    {
      if (*(void *)(a3 + 8) == *(void *)a3) {
        goto LABEL_231;
      }
      int v44 = **(_DWORD **)a3;
      if ((v32 & 1) == 0) {
        goto LABEL_59;
      }
    }
    else
    {
      int v44 = 1;
      if ((v32 & 1) == 0)
      {
LABEL_59:
        std::string v49 = *(int **)a3;
        unint64_t v50 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2;
        int v47 = 1;
LABEL_63:
        if (v50 > v48)
        {
          std::string v51 = &v49[v48];
          uint64_t v43 = 1;
          goto LABEL_70;
        }
LABEL_231:
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
    }
    std::string v49 = *(int **)a3;
    unint64_t v50 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2;
    if (v50 <= v10 - 4) {
      goto LABEL_231;
    }
    int v47 = v49[v10 - 4];
    goto LABEL_63;
  }
  if (v10 == 5)
  {
    int v39 = *v36;
    if (!v32)
    {
LABEL_38:
      int v40 = 1;
      goto LABEL_46;
    }
  }
  else
  {
    int v39 = 1;
    if (!v32) {
      goto LABEL_38;
    }
  }
  if (v33 <= v10 - 4) {
    goto LABEL_231;
  }
  int v40 = v36[v10 - 4];
LABEL_46:
  unint64_t v41 = v10 - 3;
  if (v33 <= v10 - 3 || v33 <= v11) {
    goto LABEL_231;
  }
  int v42 = v36[v41];
  uint64_t v43 = v36[v11];
  if (v10 == 5)
  {
    if (!((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2)) {
      goto LABEL_231;
    }
    int v44 = **(_DWORD **)a3;
    if ((v32 & 1) == 0) {
      goto LABEL_51;
    }
  }
  else
  {
    int v44 = 1;
    if ((v32 & 1) == 0)
    {
LABEL_51:
      float v45 = *(int **)a3;
      unint64_t v46 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2;
      int v47 = 1;
      goto LABEL_68;
    }
  }
  float v45 = *(int **)a3;
  unint64_t v46 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2;
  if (v46 <= v10 - 4) {
    goto LABEL_231;
  }
  int v47 = v45[v10 - 4];
LABEL_68:
  if (v46 <= v41) {
    goto LABEL_231;
  }
  std::string v51 = &v45[v41];
LABEL_70:
  unint64_t v52 = *v51;
  if (v10 == 5)
  {
    if ((unint64_t)(v206 - v205) <= 4) {
      goto LABEL_226;
    }
    uint64_t v53 = *(int *)v205;
    uint64_t v54 = *((int *)v205 + 1);
    if ((v32 & 1) == 0) {
      goto LABEL_73;
    }
  }
  else
  {
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    if ((v32 & 1) == 0)
    {
LABEL_73:
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      double v57 = v205;
      uint64_t v58 = 2 * v11;
      unint64_t v59 = (v206 - v205) >> 2;
      goto LABEL_78;
    }
  }
  uint64_t v58 = 2 * v11;
  unint64_t v60 = 2 * v11 - 4;
  double v57 = v205;
  unint64_t v59 = (v206 - v205) >> 2;
  if (v59 <= v60 || v59 <= v58 - 3) {
LABEL_226:
  }
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  uint64_t v55 = *(int *)&v205[4 * v60];
  uint64_t v56 = *(int *)&v205[4 * v58 - 12];
LABEL_78:
  uint64_t v61 = v58 - 2;
  if (v59 <= v58 - 2) {
    goto LABEL_226;
  }
  unint64_t v62 = v58 - 1;
  if (v59 <= v62) {
    goto LABEL_226;
  }
  unint64_t v179 = v43;
  unint64_t v183 = v35;
  uint64_t v63 = *(int *)&v57[4 * v61];
  uint64_t v64 = *(int *)&v57[4 * v62];
  uint64_t v66 = (char **)(a6 + 16);
  unint64_t v65 = *(void *)(a6 + 16);
  uint64_t v67 = *(void **)(a6 + 8);
  if ((unint64_t)v67 >= v65)
  {
    uint64_t v162 = v54;
    uint64_t v163 = v53;
    uint64_t v167 = v56;
    uint64_t v169 = v55;
    int v164 = v44;
    int v165 = v39;
    uint64_t v171 = v64;
    uint64_t v173 = v63;
    int v175 = v47;
    unint64_t v177 = v52;
    int v69 = v32;
    int v166 = v40;
    char v70 = *(void **)a6;
    uint64_t v71 = ((uint64_t)v67 - *(void *)a6) >> 3;
    unint64_t v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 61) {
      goto LABEL_227;
    }
    uint64_t v73 = v29;
    uint64_t v74 = v31;
    int v75 = v42;
    uint64_t v76 = v34;
    uint64_t v77 = v65 - (void)v70;
    if (v77 >> 2 > v72) {
      unint64_t v72 = v77 >> 2;
    }
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v78 = v72;
    }
    if (v78)
    {
      uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a6 + 16, v78);
      uint64_t v80 = v28;
      char v70 = *(void **)a6;
      uint64_t v67 = *(void **)(a6 + 8);
    }
    else
    {
      uint64_t v80 = v28;
      uint64_t v79 = 0;
    }
    unint64_t v81 = &v79[8 * v71];
    char v82 = &v79[8 * v78];
    *(void *)unint64_t v81 = v80;
    uint64_t v68 = (int64_t *)(v81 + 8);
    int v32 = v69;
    while (v67 != v70)
    {
      uint64_t v83 = *--v67;
      *((void *)v81 - 1) = v83;
      v81 -= 8;
    }
    *(void *)a6 = v81;
    *(void *)(a6 + 8) = v68;
    *(void *)(a6 + 16) = v82;
    if (v70) {
      operator delete(v70);
    }
    uint64_t v34 = v76;
    int v42 = v75;
    uint64_t v31 = v74;
    int v39 = v165;
    int v40 = v166;
    uint64_t v29 = v73;
    int v47 = v175;
    unint64_t v52 = v177;
    uint64_t v64 = v171;
    uint64_t v63 = v173;
    uint64_t v53 = v163;
    int v44 = v164;
    uint64_t v56 = v167;
    uint64_t v55 = v169;
    uint64_t v54 = v162;
  }
  else
  {
    *uint64_t v67 = v28;
    uint64_t v68 = v67 + 1;
  }
  *(void *)(a6 + 8) = v68;
  if (v11 == 3)
  {
    int64_t v84 = (v29 - v39 + v44 + v53 + v54) / (unint64_t)v44;
    if (v84 <= 0)
    {
      char v86 = (std::__shared_weak_count *)a1[1];
      uint64_t v203 = *a1;
      v204 = v86;
      if (v86) {
        atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::to_string(&v199, (v29 - v39 + v44 + v53 + v54) / (unint64_t)v44);
      uint64_t v87 = std::string::insert(&v199, 0, "Inferred zero or negative output size ");
      long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v200.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      unint64_t v89 = std::string::append(&v200, " on depth.");
      long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      std::string::size_type v202 = v89->__r_.__value_.__r.__words[2];
      long long v201 = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x21667B340](a7, &v203, 319, &v201);
      if (SHIBYTE(v202) < 0) {
        operator delete((void *)v201);
      }
      if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v200.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v199.__r_.__value_.__l.__data_);
      }
      uint64_t v91 = v204;
      if (!v204) {
        goto LABEL_222;
      }
LABEL_221:
      std::__shared_weak_count::__release_shared[abi:ne180100](v91);
      goto LABEL_222;
    }
    if (v68 >= (int64_t *)*v66)
    {
      uint64_t v168 = v56;
      uint64_t v170 = v55;
      uint64_t v172 = v64;
      uint64_t v174 = v63;
      int v176 = v47;
      unint64_t v178 = v52;
      unint64_t v92 = *(int64_t **)a6;
      uint64_t v93 = ((uint64_t)v68 - *(void *)a6) >> 3;
      unint64_t v94 = v93 + 1;
      if ((unint64_t)(v93 + 1) >> 61) {
        goto LABEL_227;
      }
      int v95 = v32;
      int v96 = v40;
      uint64_t v97 = v31;
      int v98 = v42;
      uint64_t v99 = v34;
      uint64_t v100 = *v66 - (char *)v92;
      if (v100 >> 2 > v94) {
        unint64_t v94 = v100 >> 2;
      }
      if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v101 = v94;
      }
      if (v101)
      {
        __int16 v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a6 + 16, v101);
        unint64_t v92 = *(int64_t **)a6;
        uint64_t v68 = *(int64_t **)(a6 + 8);
      }
      else
      {
        __int16 v102 = 0;
      }
      __int16 v103 = (int64_t *)&v102[8 * v93];
      __int16 v104 = &v102[8 * v101];
      *__int16 v103 = v84;
      __int16 v85 = v103 + 1;
      while (v68 != v92)
      {
        int64_t v105 = *--v68;
        *--__int16 v103 = v105;
      }
      *(void *)a6 = v103;
      *(void *)(a6 + 8) = v85;
      *(void *)(a6 + 16) = v104;
      if (v92) {
        operator delete(v92);
      }
      uint64_t v34 = v99;
      int v42 = v98;
      uint64_t v31 = v97;
      int v40 = v96;
      int v32 = v95;
      int v47 = v176;
      unint64_t v52 = v178;
      uint64_t v64 = v172;
      uint64_t v63 = v174;
      uint64_t v56 = v168;
      uint64_t v55 = v170;
    }
    else
    {
      *uint64_t v68 = v84;
      __int16 v85 = v68 + 1;
    }
    *(void *)(a6 + 8) = v85;
    uint64_t v68 = v85;
  }
  if (!v32) {
    goto LABEL_157;
  }
  int64_t v106 = (v31 - v40 + v47 + v55 + v56) / (unint64_t)v47;
  if (v106 <= 0)
  {
    __int16 v108 = (std::__shared_weak_count *)a1[1];
    uint64_t v197 = *a1;
    v198 = v108;
    if (v108) {
      atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::to_string(&v199, (v31 - v40 + v47 + v55 + v56) / (unint64_t)v47);
    v109 = std::string::insert(&v199, 0, "Inferred zero or negative output size ");
    long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    v200.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    long long v111 = std::string::append(&v200, " on height.");
    long long v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
    std::string::size_type v196 = v111->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v112;
    v111->__r_.__value_.__l.__size_ = 0;
    v111->__r_.__value_.__r.__words[2] = 0;
    v111->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21667B340](a7, &v197, 319, __p);
    if (SHIBYTE(v196) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v200.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v199.__r_.__value_.__l.__data_);
    }
    uint64_t v91 = v198;
    if (!v198) {
      goto LABEL_222;
    }
    goto LABEL_221;
  }
  if (v68 >= (int64_t *)*v66)
  {
    int v113 = *(int64_t **)a6;
    uint64_t v114 = ((uint64_t)v68 - *(void *)a6) >> 3;
    unint64_t v115 = v114 + 1;
    if ((unint64_t)(v114 + 1) >> 61) {
      goto LABEL_227;
    }
    unint64_t v116 = v52;
    int v117 = v42;
    uint64_t v118 = v34;
    uint64_t v119 = *v66 - (char *)v113;
    if (v119 >> 2 > v115) {
      unint64_t v115 = v119 >> 2;
    }
    if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v120 = v115;
    }
    if (v120)
    {
      v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a6 + 16, v120);
      int v113 = *(int64_t **)a6;
      uint64_t v68 = *(int64_t **)(a6 + 8);
    }
    else
    {
      v121 = 0;
    }
    v122 = (int64_t *)&v121[8 * v114];
    v123 = &v121[8 * v120];
    int64_t *v122 = v106;
    std::string v107 = v122 + 1;
    while (v68 != v113)
    {
      int64_t v124 = *--v68;
      *--v122 = v124;
    }
    *(void *)a6 = v122;
    *(void *)(a6 + 8) = v107;
    *(void *)(a6 + 16) = v123;
    if (v113) {
      operator delete(v113);
    }
    uint64_t v34 = v118;
    int v42 = v117;
    unint64_t v52 = v116;
  }
  else
  {
    *uint64_t v68 = v106;
    std::string v107 = v68 + 1;
  }
  *(void *)(a6 + 8) = v107;
  uint64_t v68 = v107;
LABEL_157:
  int64_t v125 = (v34 - v42 + v52 + v63 + v64) / v52;
  if (v125 <= 0)
  {
    v128 = (std::__shared_weak_count *)a1[1];
    uint64_t v193 = *a1;
    v194 = v128;
    if (v128) {
      atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::to_string(&v199, (v34 - v42 + v52 + v63 + v64) / v52);
    v129 = std::string::insert(&v199, 0, "Inferred zero or negative output size ");
    long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
    v200.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v130;
    v129->__r_.__value_.__l.__size_ = 0;
    v129->__r_.__value_.__r.__words[2] = 0;
    v129->__r_.__value_.__r.__words[0] = 0;
    v131 = std::string::append(&v200, " on width.");
    long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
    std::string::size_type v192 = v131->__r_.__value_.__r.__words[2];
    *(_OWORD *)v191 = v132;
    v131->__r_.__value_.__l.__size_ = 0;
    v131->__r_.__value_.__r.__words[2] = 0;
    v131->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21667B340](a7, &v193, 319, v191);
    if (SHIBYTE(v192) < 0) {
      operator delete(v191[0]);
    }
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v200.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v199.__r_.__value_.__l.__data_);
    }
    uint64_t v91 = v194;
    if (!v194) {
      goto LABEL_222;
    }
    goto LABEL_221;
  }
  v126 = *v66;
  if (v68 >= (int64_t *)*v66)
  {
    v133 = *(int64_t **)a6;
    uint64_t v134 = ((uint64_t)v68 - *(void *)a6) >> 3;
    unint64_t v135 = v134 + 1;
    if ((unint64_t)(v134 + 1) >> 61) {
      goto LABEL_227;
    }
    uint64_t v136 = v126 - (char *)v133;
    if (v136 >> 2 > v135) {
      unint64_t v135 = v136 >> 2;
    }
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v137 = v135;
    }
    if (v137)
    {
      v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a6 + 16, v137);
      v133 = *(int64_t **)a6;
      uint64_t v68 = *(int64_t **)(a6 + 8);
    }
    else
    {
      v138 = 0;
    }
    v139 = (int64_t *)&v138[8 * v134];
    v126 = &v138[8 * v137];
    int64_t *v139 = v125;
    v127 = (char *)(v139 + 1);
    while (v68 != v133)
    {
      int64_t v140 = *--v68;
      *--v139 = v140;
    }
    *(void *)a6 = v139;
    *(void *)(a6 + 8) = v127;
    *(void *)(a6 + 16) = v126;
    if (v133)
    {
      operator delete(v133);
      v126 = *v66;
    }
  }
  else
  {
    *uint64_t v68 = v125;
    v127 = (char *)(v68 + 1);
  }
  *(void *)(a6 + 8) = v127;
  unint64_t v141 = v183 / v179;
  if (v127 < v126)
  {
    *(void *)v127 = v141;
    v142 = v127 + 8;
    goto LABEL_200;
  }
  v143 = *(char **)a6;
  uint64_t v144 = (uint64_t)&v127[-*(void *)a6] >> 3;
  unint64_t v145 = v144 + 1;
  if ((unint64_t)(v144 + 1) >> 61) {
LABEL_227:
  }
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  uint64_t v146 = v126 - v143;
  if (v146 >> 2 > v145) {
    unint64_t v145 = v146 >> 2;
  }
  if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v147 = v145;
  }
  if (v147)
  {
    v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a6 + 16, v147);
    v143 = *(char **)a6;
    v127 = *(char **)(a6 + 8);
  }
  else
  {
    v148 = 0;
  }
  v149 = &v148[8 * v144];
  v150 = &v148[8 * v147];
  *(void *)v149 = v141;
  v142 = v149 + 8;
  while (v127 != v143)
  {
    uint64_t v151 = *((void *)v127 - 1);
    v127 -= 8;
    *((void *)v149 - 1) = v151;
    v149 -= 8;
  }
  *(void *)a6 = v149;
  *(void *)(a6 + 8) = v142;
  *(void *)(a6 + 16) = v150;
  if (v143) {
    operator delete(v143);
  }
LABEL_200:
  *(void *)(a6 + 8) = v142;
  uint64_t v152 = (uint64_t)v142 - *(void *)a6;
  if (v152 == (char *)a5[1] - (char *)*a5)
  {
    MIL::ValidationResult::ValidationResult(a7);
    goto LABEL_222;
  }
  v153 = (std::__shared_weak_count *)a1[1];
  uint64_t v189 = *a1;
  v190 = v153;
  if (v153)
  {
    atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v152 = *(void *)(a6 + 8) - *(void *)a6;
  }
  std::to_string(&v186, v152 >> 3);
  v154 = std::string::insert(&v186, 0, "Output rank ");
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  v199.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  v156 = std::string::append(&v199, " does not match rank of input tensor of shape ");
  long long v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
  v200.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v157;
  v156->__r_.__value_.__l.__size_ = 0;
  v156->__r_.__value_.__r.__words[2] = 0;
  v156->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v185, a5[1] - *a5);
  if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v158 = &v185;
  }
  else {
    v158 = (std::string *)v185.__r_.__value_.__r.__words[0];
  }
  if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v185.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v185.__r_.__value_.__l.__size_;
  }
  v160 = std::string::append(&v200, (const std::string::value_type *)v158, size);
  long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
  std::string::size_type v188 = v160->__r_.__value_.__r.__words[2];
  *(_OWORD *)v187 = v161;
  v160->__r_.__value_.__l.__size_ = 0;
  v160->__r_.__value_.__r.__words[2] = 0;
  v160->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](a7, &v189, 313, v187);
  if (SHIBYTE(v188) < 0) {
    operator delete(v187[0]);
  }
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v185.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v200.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v199.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  uint64_t v91 = v190;
  if (v190) {
    goto LABEL_221;
  }
LABEL_222:
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
}

void sub_210BE749C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v60 - 169) < 0) {
    operator delete(*(void **)(v60 - 192));
  }
  if (*(char *)(v60 - 201) < 0) {
    operator delete(*(void **)(v60 - 224));
  }
  unint64_t v62 = *(std::__shared_weak_count **)(v60 - 232);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  uint64_t v63 = *(void **)(v60 - 112);
  if (v63)
  {
    *(void *)(v60 - 104) = v63;
    operator delete(v63);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ValidateNePool(uint64_t *a1@<X0>, uint64_t a2@<X1>, ANEMachineIR::Utils *a3@<X2>, ANEMachineIR::Utils *a4@<X3>, uint64_t a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  uint64_t v12 = (std::__shared_weak_count *)a1[1];
  uint64_t v114 = *a1;
  unint64_t v115 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v131, "x");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v114, (uint64_t)a3, (uint64_t)&v131, a2, (MIL::ValidationResult *)v116);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  if (v115) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v115);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v116))
  {
    MEMORY[0x21667B360](v116);
    __int16 v13 = (void *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)a3 + 96))(a3);
    uint64_t v14 = (uint64_t)(v13[1] - *v13) >> 3;
    int v15 = (*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)a3 + 88))(a3);
    unint64_t v16 = v14 - 1;
    int v17 = *(int **)a5;
    uint64_t v18 = *(int **)(a5 + 8);
    if (v14 - 1 == ((uint64_t)v18 - *(void *)a5) >> 2)
    {
      uint64_t v20 = *(_DWORD **)(a5 + 24);
      unint64_t v19 = *(_DWORD **)(a5 + 32);
      if (v16 == v19 - v20)
      {
        uint64_t v21 = v14 - 2;
        if (v16 <= v14 - 2) {
          goto LABEL_183;
        }
        int v22 = v17[v21];
        int v23 = v20[v21];
        if (v22 == v23)
        {
          if (v14 != 5)
          {
            if (v16 < 3) {
              goto LABEL_152;
            }
            goto LABEL_138;
          }
          if (v19 == v20) {
            goto LABEL_184;
          }
          if (*v20 == 2) {
            int v24 = 16;
          }
          else {
            int v24 = 8;
          }
          if (v18 != v17)
          {
            if (*v17 > v24)
            {
              std::string::size_type v25 = a1[1];
              v127.__r_.__value_.__r.__words[0] = *a1;
              v127.__r_.__value_.__l.__size_ = v25;
              if (v25) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
              }
              std::to_string(&v129, v24);
              uint64_t v26 = std::string::insert(&v129, 0, "Expect kernel_sizes of depth in range [1, ");
              long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
              v130.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v27;
              v26->__r_.__value_.__l.__size_ = 0;
              v26->__r_.__value_.__r.__words[2] = 0;
              v26->__r_.__value_.__r.__words[0] = 0;
              uint64_t v28 = std::string::append(&v130, "], got ");
              long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
              v131.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v29;
              v28->__r_.__value_.__l.__size_ = 0;
              v28->__r_.__value_.__r.__words[2] = 0;
              v28->__r_.__value_.__r.__words[0] = 0;
              if (*(void *)(a5 + 8) == *(void *)a5) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              std::to_string(&v128, **(_DWORD **)a5);
              if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v30 = &v128;
              }
              else {
                uint64_t v30 = (std::string *)v128.__r_.__value_.__r.__words[0];
              }
              if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v128.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v128.__r_.__value_.__l.__size_;
              }
              goto LABEL_170;
            }
LABEL_138:
            unint64_t v91 = v14 - 4;
            if (v16 <= v14 - 4) {
              goto LABEL_184;
            }
            if (v20[v91] == 2) {
              int v92 = 32;
            }
            else {
              int v92 = 16;
            }
            if (v17[v91] > v92)
            {
              std::string::size_type v93 = a1[1];
              v127.__r_.__value_.__r.__words[0] = *a1;
              v127.__r_.__value_.__l.__size_ = v93;
              if (v93) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
              }
              std::to_string(&v129, v92);
              unint64_t v94 = std::string::insert(&v129, 0, "Expect kernel_sizes of height in range [1, ");
              long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
              v130.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v95;
              v94->__r_.__value_.__l.__size_ = 0;
              v94->__r_.__value_.__r.__words[2] = 0;
              v94->__r_.__value_.__r.__words[0] = 0;
              int v96 = std::string::append(&v130, "], got ");
              long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
              v131.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v97;
              v96->__r_.__value_.__l.__size_ = 0;
              v96->__r_.__value_.__r.__words[2] = 0;
              v96->__r_.__value_.__r.__words[0] = 0;
              if (v91 >= (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              std::to_string(&v128, *(_DWORD *)(*(void *)a5 + 4 * v91));
              if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v30 = &v128;
              }
              else {
                uint64_t v30 = (std::string *)v128.__r_.__value_.__r.__words[0];
              }
              if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v128.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v128.__r_.__value_.__l.__size_;
              }
LABEL_170:
              __int16 v108 = std::string::append(&v131, (const std::string::value_type *)v30, size);
              long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
              std::string::size_type v117 = v108->__r_.__value_.__r.__words[2];
              *(_OWORD *)unint64_t v116 = v109;
              v108->__r_.__value_.__l.__size_ = 0;
              v108->__r_.__value_.__r.__words[2] = 0;
              v108->__r_.__value_.__r.__words[0] = 0;
              MEMORY[0x21667B340](a6, &v127, 319, v116);
              if (SHIBYTE(v117) < 0) {
                operator delete(v116[0]);
              }
              if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v128.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v131.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v130.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v129.__r_.__value_.__l.__data_);
              }
              uint64_t v66 = (std::__shared_weak_count *)v127.__r_.__value_.__l.__size_;
              if (!v127.__r_.__value_.__l.__size_) {
                goto LABEL_85;
              }
              goto LABEL_84;
            }
LABEL_152:
            unint64_t v98 = v14 - 3;
            if (v15 == 4)
            {
              if (v16 > v98)
              {
                BOOL v99 = v20[v98] == 2;
                int v100 = 8;
                int v101 = 16;
LABEL_157:
                if (v99) {
                  int v102 = v101;
                }
                else {
                  int v102 = v100;
                }
                if (v17[v98] <= v102)
                {
                  MIL::ValidationResult::ValidationResult(a6);
LABEL_85:
                  if (MIL::ValidationResult::IsGood(a6))
                  {
                    MEMORY[0x21667B360](a6);
                    ANEMachineIR::Utils::GetStaticTensorShape(a3, v67, (uint64_t)v116);
                    ANEMachineIR::Utils::GetStaticTensorShape(a4, v68, (uint64_t)&v131);
                    if (MIL::ValidationResult::IsGood(a6))
                    {
                      int v69 = (MIL::ValidationResult *)MEMORY[0x21667B360](a6);
                      MIL::ValidationResult::ValidationResult(v69);
                    }
                    if (v131.__r_.__value_.__r.__words[0])
                    {
                      v131.__r_.__value_.__l.__size_ = v131.__r_.__value_.__r.__words[0];
                      operator delete(v131.__r_.__value_.__l.__data_);
                    }
                    if (v116[0])
                    {
                      v116[1] = v116[0];
                      operator delete(v116[0]);
                    }
                  }
                  return;
                }
                std::string::size_type v103 = a1[1];
                v127.__r_.__value_.__r.__words[0] = *a1;
                v127.__r_.__value_.__l.__size_ = v103;
                if (v103) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v103 + 8), 1uLL, memory_order_relaxed);
                }
                std::to_string(&v129, v102);
                __int16 v104 = std::string::insert(&v129, 0, "Expect kernel_sizes of width in range [1, ");
                long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
                v130.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v105;
                v104->__r_.__value_.__l.__size_ = 0;
                v104->__r_.__value_.__r.__words[2] = 0;
                v104->__r_.__value_.__r.__words[0] = 0;
                int64_t v106 = std::string::append(&v130, "], got ");
                long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
                v131.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v107;
                v106->__r_.__value_.__l.__size_ = 0;
                v106->__r_.__value_.__r.__words[2] = 0;
                v106->__r_.__value_.__r.__words[0] = 0;
                if (v98 >= (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                std::to_string(&v128, *(_DWORD *)(*(void *)a5 + 4 * v98));
                if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v30 = &v128;
                }
                else {
                  uint64_t v30 = (std::string *)v128.__r_.__value_.__r.__words[0];
                }
                if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v128.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v128.__r_.__value_.__l.__size_;
                }
                goto LABEL_170;
              }
            }
            else if (v16 > v98)
            {
              BOOL v99 = v20[v98] == 2;
              int v100 = 16;
              int v101 = 32;
              goto LABEL_157;
            }
LABEL_184:
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
LABEL_183:
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v70 = a1[1];
        uint64_t v123 = *a1;
        int64_t v124 = (std::__shared_weak_count *)v70;
        if (v70) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v125, "kernel_sizes");
        uint64_t v71 = std::string::insert(&v125, 0, "Expect same channel dimension for '");
        long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v126.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        uint64_t v73 = std::string::append(&v126, "' and '");
        long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v127.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v120, "strides");
        if ((v122 & 0x80u) == 0) {
          int v75 = (const std::string::value_type *)&v120;
        }
        else {
          int v75 = (const std::string::value_type *)v120;
        }
        if ((v122 & 0x80u) == 0) {
          std::string::size_type v76 = v122;
        }
        else {
          std::string::size_type v76 = (std::string::size_type)v121;
        }
        uint64_t v77 = std::string::append(&v127, v75, v76);
        long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v128.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        uint64_t v79 = std::string::append(&v128, "' got ");
        long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v129.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v119, v22);
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v81 = &v119;
        }
        else {
          unint64_t v81 = (std::string *)v119.__r_.__value_.__r.__words[0];
        }
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v82 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v82 = v119.__r_.__value_.__l.__size_;
        }
        uint64_t v83 = std::string::append(&v129, (const std::string::value_type *)v81, v82);
        long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
        v130.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v84;
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        __int16 v85 = std::string::append(&v130, " vs. ");
        long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        v131.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v118, v23);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v87 = &v118;
        }
        else {
          uint64_t v87 = (std::string *)v118.__r_.__value_.__r.__words[0];
        }
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v88 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v88 = v118.__r_.__value_.__l.__size_;
        }
        unint64_t v89 = std::string::append(&v131, (const std::string::value_type *)v87, v88);
        long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
        std::string::size_type v117 = v89->__r_.__value_.__r.__words[2];
        *(_OWORD *)unint64_t v116 = v90;
        v89->__r_.__value_.__l.__size_ = 0;
        v89->__r_.__value_.__r.__words[2] = 0;
        v89->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x21667B340](a6, &v123, 319, v116);
        if (SHIBYTE(v117) < 0) {
          operator delete(v116[0]);
        }
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v118.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v130.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v119.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v129.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v128.__r_.__value_.__l.__data_);
        }
        if ((char)v122 < 0) {
          operator delete(v120);
        }
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v127.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v126.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v125.__r_.__value_.__l.__data_);
        }
        uint64_t v66 = v124;
        if (!v124) {
          goto LABEL_85;
        }
LABEL_84:
        std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        goto LABEL_85;
      }
      uint64_t v52 = a1[1];
      unint64_t v120 = (void *)*a1;
      v121 = (std::__shared_weak_count *)v52;
      if (v52) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v53 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v127, "strides");
      uint64_t v54 = std::string::insert(v53, 0, "Expect '");
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v128.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      uint64_t v56 = std::string::append(&v128, "' to be array of size ");
      long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v129.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v126, v14 - 1);
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v58 = &v126;
      }
      else {
        uint64_t v58 = (std::string *)v126.__r_.__value_.__r.__words[0];
      }
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v59 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v59 = v126.__r_.__value_.__l.__size_;
      }
      uint64_t v60 = std::string::append(&v129, (const std::string::value_type *)v58, v59);
      long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v130.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      unint64_t v62 = std::string::append(&v130, ", got ");
      long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v131.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v125, (uint64_t)(*(void *)(a5 + 32) - *(void *)(a5 + 24)) >> 2);
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v50 = &v125;
      }
      else {
        unint64_t v50 = (std::string *)v125.__r_.__value_.__r.__words[0];
      }
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v51 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v51 = v125.__r_.__value_.__l.__size_;
      }
    }
    else
    {
      uint64_t v38 = a1[1];
      unint64_t v120 = (void *)*a1;
      v121 = (std::__shared_weak_count *)v38;
      if (v38) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
      }
      int v39 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v127, "kernel_sizes");
      int v40 = std::string::insert(v39, 0, "Expect '");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v128.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      int v42 = std::string::append(&v128, "' to be array of size ");
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v129.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v126, v14 - 1);
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v44 = &v126;
      }
      else {
        int v44 = (std::string *)v126.__r_.__value_.__r.__words[0];
      }
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v45 = v126.__r_.__value_.__l.__size_;
      }
      unint64_t v46 = std::string::append(&v129, (const std::string::value_type *)v44, v45);
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v130.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      unint64_t v48 = std::string::append(&v130, ", got ");
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v131.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v125, (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v50 = &v125;
      }
      else {
        unint64_t v50 = (std::string *)v125.__r_.__value_.__r.__words[0];
      }
      if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v51 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v51 = v125.__r_.__value_.__l.__size_;
      }
    }
    uint64_t v64 = std::string::append(&v131, (const std::string::value_type *)v50, v51);
    long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    std::string::size_type v117 = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v116 = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21667B340](a6, &v120, 319, v116);
    if (SHIBYTE(v117) < 0) {
      operator delete(v116[0]);
    }
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v125.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v131.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v130.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v126.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v128.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v127.__r_.__value_.__l.__data_);
    }
    uint64_t v66 = v121;
    if (!v121) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  int v32 = (std::__shared_weak_count *)a1[1];
  uint64_t v112 = *a1;
  int v113 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v33 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v130, "x");
  uint64_t v34 = std::string::insert(v33, 0, "Input '");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v131.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  uint64_t v36 = std::string::append(&v131, "' violates size constraints");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  std::string::size_type v111 = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](a6, &v112, 319, __p);
  if (SHIBYTE(v111) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  if (v113) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v113);
  }
  MEMORY[0x21667B360](v116);
}

void sub_210BE82D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v62 - 185) < 0) {
    operator delete(*(void **)(v62 - 208));
  }
  if (*(char *)(v62 - 89) < 0) {
    operator delete(*(void **)(v62 - 112));
  }
  if (*(char *)(v62 - 121) < 0) {
    operator delete(*(void **)(v62 - 144));
  }
  if (*(char *)(v62 - 153) < 0) {
    operator delete(*(void **)(v62 - 176));
  }
  uint64_t v64 = *(std::__shared_weak_count **)(v62 - 232);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ValidateOutputShape(uint64_t *a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X4>, uint64_t *a6@<X5>, MIL::ValidationResult *a7@<X8>)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  ANEMachineIR::Validators::InferOutputShape(a1, a2, a3, a4, a5, (uint64_t)&v30, a7);
  if (MIL::ValidationResult::IsGood(a7))
  {
    MEMORY[0x21667B360](a7);
    if (v31 - v30 == a6[1] - *a6 && !memcmp(v30, (const void *)*a6, v31 - v30))
    {
      MIL::ValidationResult::ValidationResult(a7);
    }
    else
    {
      ANEMachineIR::Utils::ShapeString(a6);
      ANEMachineIR::Utils::ShapeString((uint64_t *)&v30);
      unint64_t v10 = (std::__shared_weak_count *)a1[1];
      uint64_t v24 = *a1;
      std::string::size_type v25 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::operator+<char>();
      unint64_t v11 = std::string::append(&v19, " does not match inferred shape ");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if ((v27 & 0x80u) == 0) {
        __int16 v13 = (const std::string::value_type *)v26;
      }
      else {
        __int16 v13 = (const std::string::value_type *)v26[0];
      }
      if ((v27 & 0x80u) == 0) {
        std::string::size_type v14 = v27;
      }
      else {
        std::string::size_type v14 = (std::string::size_type)v26[1];
      }
      int v15 = std::string::append(&v20, v13, v14);
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      int v17 = std::string::append(&v21, ".");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      std::string::size_type v23 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x21667B340](a7, &v24, 313, __p);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if ((char)v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(v28);
      }
    }
  }
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
}

void sub_210BE886C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  if (*(char *)(v37 - 81) < 0) {
    operator delete(*(void **)(v37 - 104));
  }
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  int v39 = *(void **)(v37 - 56);
  if (v39)
  {
    *(void *)(v37 - 48) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ValidatePePool(uint64_t a1@<X0>, uint64_t a2@<X1>, ANEMachineIR::Utils *a3@<X2>, ANEMachineIR::Utils *a4@<X3>, uint64_t a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  uint64_t v246 = *MEMORY[0x263EF8340];
  long long v12 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v233 = *(void *)a1;
  v234 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v242, "x");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v233, (uint64_t)a3, (uint64_t)&v242, a2, (MIL::ValidationResult *)__p);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v242.__r_.__value_.__l.__data_);
  }
  if (v234) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v234);
  }
  v223 = a4;
  v224 = a6;
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p) & 1) == 0)
  {
    uint64_t v26 = *(std::__shared_weak_count **)(a1 + 8);
    uint64_t v231 = *(void *)a1;
    v232 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned __int8 v27 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v241, "x");
    uint64_t v28 = std::string::insert(v27, 0, "Input '");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v242.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    uint64_t v30 = std::string::append(&v242, "' violates size constraints");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    std::string::size_type v230 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)v229 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21667B340](a6, &v231, 319, v229);
    if (SHIBYTE(v230) < 0) {
      operator delete(v229[0]);
    }
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v241.__r_.__value_.__l.__data_);
    }
    if (v232) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v232);
    }
    MEMORY[0x21667B360](__p);
    return;
  }
  v222 = (uint64_t *)a1;
  MEMORY[0x21667B360](__p);
  __int16 v13 = (void *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)a3 + 96))(a3);
  uint64_t v14 = a5 + 24;
  uint64_t v15 = v13[1] - *v13;
  uint64_t v16 = v15 >> 3;
  unint64_t v17 = (v15 >> 3) - 2;
  if (v17 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    uint64_t v32 = *(std::__shared_weak_count **)(a1 + 8);
    v227 = *(void **)a1;
    v228 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v238, "kernel_sizes");
    unint64_t v33 = std::string::insert(&v238, 0, "Expect '");
    uint64_t v34 = a6;
    long long v35 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v239.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v35;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    uint64_t v36 = std::string::append(&v239, "' to be array of size ");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v240.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v245, (v15 >> 3) - 2);
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v38 = &v245;
    }
    else {
      uint64_t v38 = (std::string *)v245.__r_.__value_.__r.__words[0];
    }
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v245.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v245.__r_.__value_.__l.__size_;
    }
    int v40 = std::string::append(&v240, (const std::string::value_type *)v38, size);
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v241.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    int v42 = std::string::append(&v241, ", got ");
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v242.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v237, (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v44 = &v237;
    }
    else {
      int v44 = (std::string *)v237.__r_.__value_.__r.__words[0];
    }
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v45 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v45 = v237.__r_.__value_.__l.__size_;
    }
    goto LABEL_68;
  }
  if (v17 != (uint64_t)(*(void *)(a5 + 32) - *(void *)(a5 + 24)) >> 2)
  {
    unint64_t v46 = *(std::__shared_weak_count **)(a1 + 8);
    v227 = *(void **)a1;
    v228 = v46;
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v238, "strides");
    uint64_t v34 = a6;
    long long v47 = std::string::insert(&v238, 0, "Expect '");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v239.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    long long v49 = std::string::append(&v239, "' to be array of size ");
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v240.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v245, (v15 >> 3) - 2);
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v51 = &v245;
    }
    else {
      std::string::size_type v51 = (std::string *)v245.__r_.__value_.__r.__words[0];
    }
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v52 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v52 = v245.__r_.__value_.__l.__size_;
    }
    uint64_t v53 = std::string::append(&v240, (const std::string::value_type *)v51, v52);
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v241.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    long long v55 = std::string::append(&v241, ", got ");
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v242.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v237, (uint64_t)(*(void *)(a5 + 32) - *(void *)(a5 + 24)) >> 2);
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v44 = &v237;
    }
    else {
      int v44 = (std::string *)v237.__r_.__value_.__r.__words[0];
    }
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v45 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v45 = v237.__r_.__value_.__l.__size_;
    }
LABEL_68:
    long long v57 = std::string::append(&v242, (const std::string::value_type *)v44, v45);
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v236[0] = *((void *)&v57->__r_.__value_.__l + 2);
    *(_OWORD *)long long __p = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21667B340](v34, &v227, 319, __p);
    if (SHIBYTE(v236[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v237.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v241.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v245.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v240.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v239.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v238.__r_.__value_.__l.__data_);
    }
    if (v228) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v228);
    }
    goto LABEL_187;
  }
  uint64_t v18 = 0;
  v245.__r_.__value_.__r.__words[0] = (std::string::size_type)"kernel_sizes";
  v245.__r_.__value_.__l.__size_ = (std::string::size_type)"strides";
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, *(char **)((char *)&v245.__r_.__value_.__l.__data_ + v18));
    char v19 = HIBYTE(v236[0]);
    if (v15 == 40) {
      break;
    }
LABEL_23:
    if ((v236[0] & 0x8000000000000000) != 0) {
      operator delete(__p[0]);
    }
    v18 += 8;
    if (v18 == 16)
    {
      __p[0] = 0;
      __p[1] = 0;
      v236[0] = 0;
      if (v15 >> 3 == 5)
      {
        std::string::size_type v59 = operator new(8uLL);
        *std::string::size_type v59 = 0;
        uint64_t v60 = v59 + 1;
        __p[1] = v59 + 1;
        v236[0] = v59 + 1;
        __p[0] = v59;
        goto LABEL_94;
      }
      if (v17 <= 1)
      {
        uint64_t v70 = 0;
        int v69 = 0;
        uint64_t v73 = v16 - 3;
        uint64_t v34 = a6;
        uint64_t v62 = (std::string::size_type *)v222;
      }
      else
      {
        uint64_t v60 = 0;
        std::string::size_type v59 = 0;
LABEL_94:
        uint64_t v34 = a6;
        uint64_t v62 = (std::string::size_type *)v222;
        uint64_t v63 = v60 - (unsigned char *)v59;
        uint64_t v64 = (v60 - (unsigned char *)v59) >> 3;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 61) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        if (v63 >> 2 > v65) {
          unint64_t v65 = v63 >> 2;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v66)
        {
          uint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v236, v66);
          std::string::size_type v59 = __p[0];
          uint64_t v60 = __p[1];
        }
        else
        {
          uint64_t v67 = 0;
        }
        uint64_t v68 = &v67[8 * v64];
        int v69 = &v67[8 * v66];
        *(void *)uint64_t v68 = v16 - 4;
        uint64_t v70 = v68 + 8;
        uint64_t v71 = v68;
        if (v60 != (unsigned char *)v59)
        {
          uint64_t v71 = v68;
          do
          {
            uint64_t v72 = *((void *)v60 - 1);
            v60 -= 8;
            *((void *)v71 - 1) = v72;
            v71 -= 8;
          }
          while (v60 != (unsigned char *)v59);
        }
        __p[0] = v71;
        __p[1] = v68 + 8;
        v236[0] = v69;
        if (v59)
        {
          operator delete(v59);
          int v69 = (char *)v236[0];
        }
        __p[1] = v68 + 8;
        uint64_t v73 = v16 - 3;
        if (v70 < v69)
        {
          *((void *)v68 + 1) = v73;
          long long v74 = (unint64_t *)(v68 + 16);
          goto LABEL_125;
        }
      }
      int v75 = (char *)__p[0];
      uint64_t v76 = (v70 - (char *)__p[0]) >> 3;
      unint64_t v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 61) {
        std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v78 = v69 - (char *)__p[0];
      if (v78 >> 2 > v77) {
        unint64_t v77 = v78 >> 2;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79)
      {
        long long v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v236, v79);
        int v75 = (char *)__p[0];
        uint64_t v70 = (char *)__p[1];
      }
      else
      {
        long long v80 = 0;
      }
      unint64_t v81 = (uint64_t *)&v80[8 * v76];
      std::string::size_type v82 = &v80[8 * v79];
      *unint64_t v81 = v73;
      long long v74 = (unint64_t *)(v81 + 1);
      while (v70 != v75)
      {
        uint64_t v83 = *((void *)v70 - 1);
        v70 -= 8;
        *--unint64_t v81 = v83;
      }
      __p[0] = v81;
      __p[1] = v74;
      v236[0] = v82;
      if (v75) {
        operator delete(v75);
      }
LABEL_125:
      __p[1] = v74;
      long long v84 = (unint64_t *)__p[0];
      if (__p[0] == v74)
      {
LABEL_132:
        MIL::ValidationResult::ValidationResult(v34);
        uint64_t v14 = a5 + 24;
      }
      else
      {
        uint64_t v85 = *(void *)(a5 + 24);
        while (1)
        {
          unint64_t v86 = *v84;
          if ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2 <= *v84) {
LABEL_329:
          }
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          if ((*(_DWORD *)(*(void *)a5 + 4 * v86) - 6) <= 0xFFFFFFFA) {
            break;
          }
          if ((*(void *)(a5 + 32) - v85) >> 2 <= v86) {
            goto LABEL_329;
          }
          if ((*(_DWORD *)(v85 + 4 * v86) - 3) <= 0xFFFFFFFD)
          {
            std::string::size_type v94 = v62[1];
            v245.__r_.__value_.__r.__words[0] = *v62;
            v245.__r_.__value_.__l.__size_ = v94;
            if (v94) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v94 + 8), 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v239, "strides");
            uint64_t v14 = a5 + 24;
            long long v95 = std::string::insert(&v239, 0, "Expect ");
            long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
            v240.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v96;
            v95->__r_.__value_.__l.__size_ = 0;
            v95->__r_.__value_.__r.__words[2] = 0;
            v95->__r_.__value_.__r.__words[0] = 0;
            long long v97 = std::string::append(&v240, " in range [1, 2], got ");
            long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
            v241.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v98;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v97->__r_.__value_.__r.__words[0] = 0;
            uint64_t v99 = *(void *)(a5 + 24);
            if (v86 >= (*(void *)(a5 + 32) - v99) >> 2) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            std::to_string(&v238, *(_DWORD *)(v99 + 4 * v86));
            if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v92 = &v238;
            }
            else {
              int v92 = (std::string *)v238.__r_.__value_.__r.__words[0];
            }
            if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v93 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v93 = v238.__r_.__value_.__l.__size_;
            }
            goto LABEL_151;
          }
          if (++v84 == v74) {
            goto LABEL_132;
          }
        }
        std::string::size_type v87 = v62[1];
        v245.__r_.__value_.__r.__words[0] = *v62;
        v245.__r_.__value_.__l.__size_ = v87;
        if (v87) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v239, "kernel_sizes");
        uint64_t v14 = a5 + 24;
        std::string::size_type v88 = std::string::insert(&v239, 0, "Expect ");
        long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v240.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        long long v90 = std::string::append(&v240, " in range [1, 5], got ");
        long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        v241.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        if (v86 >= (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        std::to_string(&v238, *(_DWORD *)(*(void *)a5 + 4 * v86));
        if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v92 = &v238;
        }
        else {
          int v92 = (std::string *)v238.__r_.__value_.__r.__words[0];
        }
        if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v93 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v93 = v238.__r_.__value_.__l.__size_;
        }
LABEL_151:
        int v100 = std::string::append(&v241, (const std::string::value_type *)v92, v93);
        long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
        v242.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v101;
        v100->__r_.__value_.__l.__size_ = 0;
        v100->__r_.__value_.__r.__words[2] = 0;
        v100->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x21667B340](v34, &v245, 319, &v242);
        if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v242.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v238.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v241.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v240.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v239.__r_.__value_.__l.__data_);
        }
        if (v245.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v245.__r_.__value_.__l.__size_);
        }
      }
      int v102 = __p[0];
      if (__p[0])
      {
        __p[1] = __p[0];
LABEL_186:
        operator delete(v102);
        goto LABEL_187;
      }
      goto LABEL_187;
    }
  }
  if ((v236[0] & 0x8000000000000000) != 0)
  {
    if (__p[1] != (void *)12) {
      goto LABEL_21;
    }
    std::string v20 = (void **)__p[0];
  }
  else
  {
    if (HIBYTE(v236[0]) != 12) {
      goto LABEL_21;
    }
    std::string v20 = __p;
  }
  std::string v21 = *v20;
  int v22 = *((_DWORD *)v20 + 2);
  if (v21 != (void *)0x735F6C656E72656BLL || v22 != 1936030313)
  {
LABEL_21:
    uint64_t v24 = *(int **)(a5 + 24);
    if (*(int **)(a5 + 32) == v24) {
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  uint64_t v24 = *(int **)a5;
  if (*(void *)(a5 + 8) == *(void *)a5) {
LABEL_28:
  }
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
LABEL_22:
  int v25 = *v24;
  if (*v24 == 1) {
    goto LABEL_23;
  }
  std::string::size_type v61 = *(void *)(a1 + 8);
  v237.__r_.__value_.__r.__words[0] = *(void *)a1;
  v237.__r_.__value_.__l.__size_ = v61;
  if (v61)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
    char v19 = HIBYTE(v236[0]);
  }
  uint64_t v34 = a6;
  uint64_t v14 = a5 + 24;
  if (v19 < 0)
  {
    std::string::__init_copy_ctor_external(&v239, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v239.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v239.__r_.__value_.__r.__words[2] = v236[0];
  }
  std::string::size_type v103 = std::string::insert(&v239, 0, "PE does not support '");
  long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
  v240.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v104;
  v103->__r_.__value_.__l.__size_ = 0;
  v103->__r_.__value_.__r.__words[2] = 0;
  v103->__r_.__value_.__r.__words[0] = 0;
  long long v105 = std::string::append(&v240, "' in depth dimension, got: ");
  long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
  v241.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v106;
  v105->__r_.__value_.__l.__size_ = 0;
  v105->__r_.__value_.__r.__words[2] = 0;
  v105->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v238, v25);
  if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v107 = &v238;
  }
  else {
    long long v107 = (std::string *)v238.__r_.__value_.__r.__words[0];
  }
  if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v108 = HIBYTE(v238.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v108 = v238.__r_.__value_.__l.__size_;
  }
  long long v109 = std::string::append(&v241, (const std::string::value_type *)v107, v108);
  long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  v242.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](a6, &v237, 319, &v242);
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v242.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v241.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (v237.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v237.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v236[0]) < 0)
  {
    int v102 = __p[0];
    goto LABEL_186;
  }
LABEL_187:
  if (!MIL::ValidationResult::IsGood(v34)) {
    return;
  }
  uint64_t v221 = v14;
  MEMORY[0x21667B360](v34);
  ANEMachineIR::Utils::GetStaticTensorShape(a3, v111, (uint64_t)&v227);
  ANEMachineIR::Utils::GetStaticTensorShape(v223, v112, (uint64_t)&v225);
  uint64_t v114 = *(int **)(a5 + 48);
  int v113 = *(int **)(a5 + 56);
  if (v114 == v113)
  {
LABEL_288:
    if (MIL::ValidationResult::IsGood(v224))
    {
      std::string::size_type v192 = (MIL::ValidationResult *)MEMORY[0x21667B360](v224);
      MIL::ValidationResult::ValidationResult(v192);
    }
    goto LABEL_290;
  }
  uint64_t v115 = (char *)v113 - (char *)v114;
  if (v115 == 24 && (*v114 || v114[1]))
  {
    uint64_t v116 = v222[1];
    uint64_t v243 = *v222;
    v244 = (std::__shared_weak_count *)v116;
    if (v116) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v116 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v238, "custom_pads");
    std::string::size_type v117 = std::string::insert(&v238, 0, "PE does not support '");
    long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    v239.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    std::string v119 = std::string::append(&v239, "' in depth dimension, got ");
    long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
    v240.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v120;
    v119->__r_.__value_.__l.__size_ = 0;
    v119->__r_.__value_.__r.__words[2] = 0;
    v119->__r_.__value_.__r.__words[0] = 0;
    v121 = *(int **)(a5 + 48);
    if (*(int **)(a5 + 56) == v121) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    std::to_string(&v245, *v121);
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v122 = &v245;
    }
    else {
      unsigned __int8 v122 = (std::string *)v245.__r_.__value_.__r.__words[0];
    }
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v123 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v123 = v245.__r_.__value_.__l.__size_;
    }
    int64_t v124 = std::string::append(&v240, (const std::string::value_type *)v122, v123);
    long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
    v241.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v125;
    v124->__r_.__value_.__l.__size_ = 0;
    v124->__r_.__value_.__r.__words[2] = 0;
    v124->__r_.__value_.__r.__words[0] = 0;
    std::string v126 = std::string::append(&v241, ", ");
    long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
    v242.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v127;
    v126->__r_.__value_.__l.__size_ = 0;
    v126->__r_.__value_.__r.__words[2] = 0;
    v126->__r_.__value_.__r.__words[0] = 0;
    uint64_t v128 = *(void *)(a5 + 48);
    if ((unint64_t)(*(void *)(a5 + 56) - v128) <= 4) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    std::to_string(&v237, *(_DWORD *)(v128 + 4));
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v129 = &v237;
    }
    else {
      std::string v129 = (std::string *)v237.__r_.__value_.__r.__words[0];
    }
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v130 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v130 = v237.__r_.__value_.__l.__size_;
    }
    goto LABEL_208;
  }
  int64_t v134 = (char *)v228 - (unsigned char *)v227;
  int64_t v135 = ((char *)v228 - (unsigned char *)v227) >> 3;
  unint64_t v136 = v135 - 2;
  unint64_t v137 = v115 >> 2;
  if (v135 != 5)
  {
    if (v136 < 2)
    {
      if (v136 < (v226 - (unsigned char *)v225) >> 3)
      {
        unint64_t v169 = 2 * v136 - 2;
        if (v137 <= v169) {
          goto LABEL_331;
        }
        unint64_t v170 = v135 - 3;
        if (v170 >= (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2) {
          goto LABEL_331;
        }
        uint64_t v145 = 0;
        unsigned int v144 = 0;
        unsigned int v151 = 0;
        uint64_t v166 = 0;
        unint64_t v143 = 0;
        unint64_t v152 = *((void *)v227 + v136);
        int v153 = v114[v169];
        uint64_t v150 = *((void *)v225 + v136);
        int v161 = *(_DWORD *)(*(void *)a5 + 4 * v170);
        uint64_t v162 = *(_DWORD **)(a5 + 24);
        unint64_t v165 = (uint64_t)(*(void *)(a5 + 32) - (void)v162) >> 2;
        uint64_t v164 = 1;
        uint64_t v167 = 1;
        int v160 = 1;
        uint64_t v149 = 1;
        unint64_t v141 = 1;
        unint64_t v148 = 1;
        uint64_t v142 = 1;
        unsigned int v156 = 1;
        uint64_t v157 = 1;
        int v168 = 1;
        goto LABEL_255;
      }
    }
    else if ((unint64_t)v134 >= 0x11)
    {
      int64_t v140 = (unint64_t *)((char *)v227 + 8 * v136);
      unint64_t v143 = v135 - 3;
      v138 = v225;
      unint64_t v139 = (v226 - (unsigned char *)v225) >> 3;
      uint64_t v142 = 1;
      unint64_t v141 = 1;
      goto LABEL_232;
    }
LABEL_330:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  v138 = v225;
  unint64_t v139 = (v226 - (unsigned char *)v225) >> 3;
  if (v139 <= 1) {
    goto LABEL_330;
  }
  int64_t v140 = (unint64_t *)((char *)v227 + 24);
  unint64_t v141 = *((void *)v227 + 1);
  uint64_t v142 = *((void *)v225 + 1);
  unint64_t v143 = 2;
LABEL_232:
  if (v139 <= v143 || v139 <= v136) {
    goto LABEL_330;
  }
  if (v134 >> 3 == 5)
  {
    unsigned int v144 = *v114;
    uint64_t v145 = *v114;
  }
  else
  {
    uint64_t v145 = 0;
    unsigned int v144 = 0;
  }
  unint64_t v146 = 2 * v136 - 4;
  if (v137 <= v146) {
    goto LABEL_331;
  }
  unint64_t v147 = 2 * v136 - 2;
  if (v137 <= v147) {
    goto LABEL_331;
  }
  unint64_t v148 = *((void *)v227 + v143);
  uint64_t v149 = v138[v143];
  uint64_t v150 = v138[v136];
  unsigned int v151 = v114[v146];
  unint64_t v152 = *v140;
  int v153 = v114[v147];
  v154 = *(int **)a5;
  long long v155 = *(int **)(a5 + 8);
  if (v134 >> 3 != 5)
  {
    uint64_t v157 = 1;
    unsigned int v156 = 1;
    goto LABEL_243;
  }
  if (v155 == v154) {
    goto LABEL_331;
  }
  unsigned int v156 = *v154;
  uint64_t v157 = *v154;
LABEL_243:
  unint64_t v158 = v135 - 4;
  unint64_t v159 = v155 - v154;
  if (v159 <= v158 || v159 <= v143) {
    goto LABEL_331;
  }
  int v160 = v154[v158];
  int v161 = v154[v143];
  uint64_t v162 = *(_DWORD **)(a5 + 24);
  uint64_t v163 = *(_DWORD **)(a5 + 32);
  if (v134 >> 3 == 5)
  {
    if (v163 != v162)
    {
      LODWORD(v164) = *v162;
      goto LABEL_249;
    }
    goto LABEL_331;
  }
  LODWORD(v164) = 1;
LABEL_249:
  unint64_t v165 = v163 - v162;
  if (v165 <= v158) {
LABEL_331:
  }
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  uint64_t v166 = (int)v151;
  uint64_t v167 = v160;
  uint64_t v164 = (int)v164;
  int v168 = v162[v158];
LABEL_255:
  if (v165 <= v143) {
    goto LABEL_331;
  }
  if (v153 >= v161 || v151 >= v160 || v144 >= v156)
  {
    std::string::size_type v186 = v222[1];
    v240.__r_.__value_.__r.__words[0] = *v222;
    v240.__r_.__value_.__l.__size_ = v186;
    if (v186) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v186 + 8), 1uLL, memory_order_relaxed);
    }
    v187 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v241, "custom_pads");
    std::string::size_type v188 = std::string::insert(v187, 0, "PE pool value of ");
    long long v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
    v242.__r_.__value_.__r.__words[2] = v188->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v189;
    v188->__r_.__value_.__l.__size_ = 0;
    v188->__r_.__value_.__r.__words[2] = 0;
    v188->__r_.__value_.__r.__words[0] = 0;
    v190 = std::string::append(&v242, " exceed limits, must in range [0, K] where K is the kernel_size at that dimension");
    long long v191 = *(_OWORD *)&v190->__r_.__value_.__l.__data_;
    v236[0] = *((void *)&v190->__r_.__value_.__l + 2);
    *(_OWORD *)long long __p = v191;
    v190->__r_.__value_.__l.__size_ = 0;
    v190->__r_.__value_.__r.__words[2] = 0;
    v190->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21667B340](v224, &v240, 319, __p);
    if (SHIBYTE(v236[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v242.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v241.__r_.__value_.__l.__data_);
    }
    v133 = (std::__shared_weak_count *)v240.__r_.__value_.__l.__size_;
    if (!v240.__r_.__value_.__l.__size_) {
      goto LABEL_286;
    }
LABEL_285:
    std::__shared_weak_count::__release_shared[abi:ne180100](v133);
    goto LABEL_286;
  }
  uint64_t v171 = (int)v162[v143];
  if (v134 != 40)
  {
    if ((unint64_t)v134 >= 0x19) {
      goto LABEL_296;
    }
    goto LABEL_298;
  }
  uint64_t v172 = (v142 - 1) * v164;
  unint64_t v173 = v172 - v145;
  unint64_t v174 = v157 - v145 + v172;
  if (v141 <= v172 - v145 || v141 > v174)
  {
    uint64_t v175 = v222[1];
    uint64_t v243 = *v222;
    v244 = (std::__shared_weak_count *)v175;
    if (v175) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v175 + 8), 1uLL, memory_order_relaxed);
    }
    std::to_string(&v238, v173);
    int v176 = std::string::insert(&v238, 0, "Input dimension depth exceed limits, expect [");
    long long v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
    v239.__r_.__value_.__r.__words[2] = v176->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v177;
    v176->__r_.__value_.__l.__size_ = 0;
    v176->__r_.__value_.__r.__words[2] = 0;
    v176->__r_.__value_.__r.__words[0] = 0;
    unint64_t v178 = std::string::append(&v239, ", ");
    long long v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
    v240.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v179;
    v178->__r_.__value_.__l.__size_ = 0;
    v178->__r_.__value_.__r.__words[2] = 0;
    v178->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v245, v174);
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v180 = &v245;
    }
    else {
      v180 = (std::string *)v245.__r_.__value_.__r.__words[0];
    }
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v181 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v181 = v245.__r_.__value_.__l.__size_;
    }
    v182 = std::string::append(&v240, (const std::string::value_type *)v180, v181);
    long long v183 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
    v241.__r_.__value_.__r.__words[2] = v182->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v183;
    v182->__r_.__value_.__l.__size_ = 0;
    v182->__r_.__value_.__r.__words[2] = 0;
    v182->__r_.__value_.__r.__words[0] = 0;
    v184 = std::string::append(&v241, "), got ");
    long long v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
    v242.__r_.__value_.__r.__words[2] = v184->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v185;
    v184->__r_.__value_.__l.__size_ = 0;
    v184->__r_.__value_.__r.__words[2] = 0;
    v184->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v237, v141);
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v129 = &v237;
    }
    else {
      std::string v129 = (std::string *)v237.__r_.__value_.__r.__words[0];
    }
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v130 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v130 = v237.__r_.__value_.__l.__size_;
    }
    goto LABEL_208;
  }
LABEL_296:
  uint64_t v193 = (v149 - 1) * v168;
  unint64_t v194 = v193 - v166;
  unint64_t v195 = v193 + v167 - v166;
  if (v148 <= v193 - v166 || v148 > v195)
  {
    uint64_t v199 = v222[1];
    uint64_t v243 = *v222;
    v244 = (std::__shared_weak_count *)v199;
    if (v199) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v199 + 8), 1uLL, memory_order_relaxed);
    }
    std::to_string(&v238, v194);
    std::string v200 = std::string::insert(&v238, 0, "Input dimension height exceed limits, expect [");
    long long v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
    v239.__r_.__value_.__r.__words[2] = v200->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v201;
    v200->__r_.__value_.__l.__size_ = 0;
    v200->__r_.__value_.__r.__words[2] = 0;
    v200->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v202 = std::string::append(&v239, ", ");
    long long v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
    v240.__r_.__value_.__r.__words[2] = v202->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v203;
    v202->__r_.__value_.__l.__size_ = 0;
    v202->__r_.__value_.__r.__words[2] = 0;
    v202->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v245, v195);
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v204 = &v245;
    }
    else {
      v204 = (std::string *)v245.__r_.__value_.__r.__words[0];
    }
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v205 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v205 = v245.__r_.__value_.__l.__size_;
    }
    v206 = std::string::append(&v240, (const std::string::value_type *)v204, v205);
    long long v207 = *(_OWORD *)&v206->__r_.__value_.__l.__data_;
    v241.__r_.__value_.__r.__words[2] = v206->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v207;
    v206->__r_.__value_.__l.__size_ = 0;
    v206->__r_.__value_.__r.__words[2] = 0;
    v206->__r_.__value_.__r.__words[0] = 0;
    v208 = std::string::append(&v241, "), got ");
    long long v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
    v242.__r_.__value_.__r.__words[2] = v208->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v209;
    v208->__r_.__value_.__l.__size_ = 0;
    v208->__r_.__value_.__r.__words[2] = 0;
    v208->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v237, v148);
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v129 = &v237;
    }
    else {
      std::string v129 = (std::string *)v237.__r_.__value_.__r.__words[0];
    }
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v130 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v130 = v237.__r_.__value_.__l.__size_;
    }
  }
  else
  {
LABEL_298:
    uint64_t v196 = (v150 - 1) * v171;
    unint64_t v197 = v196 - v153;
    unint64_t v198 = v196 + v161 - (uint64_t)v153;
    if (v152 > v197 && v152 <= v198)
    {
      MIL::ValidationResult::ValidationResult(v224);
      goto LABEL_286;
    }
    uint64_t v210 = v222[1];
    uint64_t v243 = *v222;
    v244 = (std::__shared_weak_count *)v210;
    if (v210) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v210 + 8), 1uLL, memory_order_relaxed);
    }
    std::to_string(&v238, v197);
    v211 = std::string::insert(&v238, 0, "Input dimension width exceed limits, expect [");
    long long v212 = *(_OWORD *)&v211->__r_.__value_.__l.__data_;
    v239.__r_.__value_.__r.__words[2] = v211->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v212;
    v211->__r_.__value_.__l.__size_ = 0;
    v211->__r_.__value_.__r.__words[2] = 0;
    v211->__r_.__value_.__r.__words[0] = 0;
    v213 = std::string::append(&v239, ", ");
    long long v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
    v240.__r_.__value_.__r.__words[2] = v213->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v214;
    v213->__r_.__value_.__l.__size_ = 0;
    v213->__r_.__value_.__r.__words[2] = 0;
    v213->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v245, v198);
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v215 = &v245;
    }
    else {
      v215 = (std::string *)v245.__r_.__value_.__r.__words[0];
    }
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v216 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v216 = v245.__r_.__value_.__l.__size_;
    }
    v217 = std::string::append(&v240, (const std::string::value_type *)v215, v216);
    long long v218 = *(_OWORD *)&v217->__r_.__value_.__l.__data_;
    v241.__r_.__value_.__r.__words[2] = v217->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v218;
    v217->__r_.__value_.__l.__size_ = 0;
    v217->__r_.__value_.__r.__words[2] = 0;
    v217->__r_.__value_.__r.__words[0] = 0;
    v219 = std::string::append(&v241, "), got ");
    long long v220 = *(_OWORD *)&v219->__r_.__value_.__l.__data_;
    v242.__r_.__value_.__r.__words[2] = v219->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v220;
    v219->__r_.__value_.__l.__size_ = 0;
    v219->__r_.__value_.__r.__words[2] = 0;
    v219->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v237, v152);
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v129 = &v237;
    }
    else {
      std::string v129 = (std::string *)v237.__r_.__value_.__r.__words[0];
    }
    if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v130 = HIBYTE(v237.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v130 = v237.__r_.__value_.__l.__size_;
    }
  }
LABEL_208:
  std::string v131 = std::string::append(&v242, (const std::string::value_type *)v129, v130);
  long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
  v236[0] = *((void *)&v131->__r_.__value_.__l + 2);
  *(_OWORD *)long long __p = v132;
  v131->__r_.__value_.__l.__size_ = 0;
  v131->__r_.__value_.__r.__words[2] = 0;
  v131->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](v224, &v243, 319, __p);
  if (SHIBYTE(v236[0]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v242.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v241.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v240.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v238.__r_.__value_.__l.__data_);
  }
  v133 = v244;
  if (v244) {
    goto LABEL_285;
  }
LABEL_286:
  if (MIL::ValidationResult::IsGood(v224))
  {
    MEMORY[0x21667B360](v224);
    goto LABEL_288;
  }
LABEL_290:
  if (v225)
  {
    v226 = v225;
    operator delete(v225);
  }
  if (v227)
  {
    v228 = (std::__shared_weak_count *)v227;
    operator delete(v227);
  }
}

void sub_210BE9FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (*(char *)(v58 - 137) < 0) {
    operator delete(*(void **)(v58 - 160));
  }
  if (*(char *)(v58 - 169) < 0) {
    operator delete(*(void **)(v58 - 192));
  }
  if (*(char *)(v58 - 97) < 0) {
    operator delete(*(void **)(v58 - 120));
  }
  if (*(char *)(v58 - 201) < 0) {
    operator delete(*(void **)(v58 - 224));
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  uint64_t v60 = *(std::__shared_weak_count **)(v58 - 128);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ValidateNePool(ANEMachineIR::Validators *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  __int16 v5 = (const MIL::IROperation *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)a1 + 176))(a1);
  if (*(void *)(v6 + 8) == *(void *)v6) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v6);
  int v8 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
  char v15 = 0;
  char v16 = 0;
  char v17 = 0;
  *(_OWORD *)long long __p = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  uint64_t v18 = 0;
  ANEMachineIR::Validators::ParseNePoolParamValues(a1, v5, (char **)__p, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x21667B360](a2);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v10 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidateNePool(LocationPtr, v10, v5, v8, (uint64_t)__p, a2);
  }
  if (*(void *)v14)
  {
    *(void *)&v14[8] = *(void *)v14;
    operator delete(*(void **)v14);
  }
  if (*((void *)&v12 + 1))
  {
    *(void *)&long long v13 = *((void *)&v12 + 1);
    operator delete(*((void **)&v12 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void ANEMachineIR::Validators::ValidatePePool(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  __int16 v5 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 176))(a1);
  if (*(void *)(v6 + 8) == *(void *)v6) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v6);
  int v8 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
  char v15 = 0;
  *(_OWORD *)long long __p = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  int v16 = 0;
  ANEMachineIR::Validators::ParsePePoolParamValues(v5, a1, (uint64_t)__p, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x21667B360](a2);
    uint64_t LocationPtr = MIL::IRObject::GetLocationPtr(a1);
    uint64_t v10 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidatePePool(LocationPtr, v10, v5, v8, (uint64_t)__p, a2);
  }
  if (*(void *)v14)
  {
    *(void *)&v14[8] = *(void *)v14;
    operator delete(*(void **)v14);
  }
  if (*((void *)&v12 + 1))
  {
    *(void *)&long long v13 = *((void *)&v12 + 1);
    operator delete(*((void **)&v12 + 1));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void ANEMachineIR::H2022::BaseNeMatmul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BEACF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a20, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a30, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NeBatchMatmul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BECDA8(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 128));
  unint64_t v3 = STACK[0x3D0];
  STACK[0x3D0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x3C8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3C8]);
  }
  int v4 = (void *)STACK[0x3A8];
  if (STACK[0x3A8])
  {
    STACK[0x3B0] = (unint64_t)v4;
    operator delete(v4);
  }
  __int16 v5 = (void *)STACK[0x400];
  if (STACK[0x400])
  {
    STACK[0x408] = (unint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)STACK[0x418];
  if (STACK[0x418])
  {
    STACK[0x420] = (unint64_t)v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3D8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 224), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NeMatmul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BEF28C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 144));
  unint64_t v3 = STACK[0x308];
  STACK[0x308] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x300]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x300]);
  }
  int v4 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v4;
    operator delete(v4);
  }
  __int16 v5 = (void *)STACK[0x348];
  if (STACK[0x348])
  {
    STACK[0x350] = (unint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x310], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 216), 0);
  _Unwind_Resume(a1);
}

void MilTranslator::OpTranslator::TranslateReshape(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v97, "x");
  uint64_t v6 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, void))(*(void *)a2 + 120))(a2, &v97, 0);
  uint64_t v7 = v6;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v97.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_3:
      uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      unint64_t v9 = (std::__shared_weak_count *)LocationPtr[1];
      uint64_t v95 = *LocationPtr;
      long long v96 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v93, "x");
      ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
      uint64_t v11 = MIL::IRValueType::AsTensorType(ParameterType);
      std::string::basic_string[abi:ne180100]<0>(v89, "x");
      std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
      ANEMachineIR::Validators::ValidateLiveTensorSize(&v95, v11, (uint64_t)v89, (uint64_t)__p, (MIL::ValidationResult *)&v97);
      if (v88 < 0) {
        operator delete(__p[0]);
      }
      if (v90 < 0) {
        operator delete(v89[0]);
      }
      if (v94 < 0) {
        operator delete(v93[0]);
      }
      if (v96) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v96);
      }
      if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v97) & 1) == 0)
      {
        *(_DWORD *)a3 = 11;
        uint64_t Message = MIL::MILResult::GetMessage((MIL::MILResult *)&v97);
        if (*(char *)(Message + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(a3 + 8), *(const std::string::value_type **)Message, *(void *)(Message + 8));
        }
        else
        {
          long long v46 = *(_OWORD *)Message;
          *(void *)(a3 + 24) = *(void *)(Message + 16);
          *(_OWORD *)(a3 + 8) = v46;
        }
        goto LABEL_115;
      }
      long long v12 = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      long long v13 = (std::__shared_weak_count *)v12[1];
      uint64_t v91 = *v12;
      int v92 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
      uint64_t v15 = MIL::IRValueType::AsTensorType(OutputType);
      std::string::basic_string[abi:ne180100]<0>(v89, "output");
      std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
      ANEMachineIR::Validators::ValidateLiveTensorSize(&v91, v15, (uint64_t)v89, (uint64_t)__p, (MIL::ValidationResult *)v93);
      if (v88 < 0) {
        operator delete(__p[0]);
      }
      if (v90 < 0) {
        operator delete(v89[0]);
      }
      if (v92) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v92);
      }
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v93))
      {
        std::string::basic_string[abi:ne180100]<0>(v89, "x");
        int v16 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
        uint64_t v17 = MIL::IRValueType::AsTensorType(v16);
        int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 88))(v17);
        char v19 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
        uint64_t v20 = MIL::IRValueType::AsTensorType(v19);
        int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 88))(v20);
        if (v90 < 0) {
          operator delete(v89[0]);
        }
        if (v18 == v21)
        {
          int v22 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
          uint64_t v23 = MIL::IRValueType::AsTensorType(v22);
          unsigned int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 88))(v23);
          int v25 = "Unsupported dtype for reshape.";
          if (v24 <= 0xE && ((1 << v24) & 0x4210) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(v89, "x");
            uint64_t v26 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
            uint64_t v27 = MIL::IRValueType::AsTensorType(v26);
            uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v27 + 96))(v27);
            uint64_t v29 = (uint64_t)(v28[1] - *v28) >> 3;
            if (v90 < 0) {
              operator delete(v89[0]);
            }
            MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, v7, v29, (uint64_t)v89);
            uint64_t v30 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
            uint64_t v31 = MIL::IRValueType::AsTensorType(v30);
            uint64_t v32 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 96))(v31);
            uint64_t v34 = *v32;
            uint64_t v33 = v32[1];
            (*(void (**)(std::vector<int> *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(&v86, a2);
            if (v86.__end_ == v86.__begin_) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v35 = (v33 - v34) >> 3;
            MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, (uint64_t)v86.__begin_, v35, (uint64_t)__p);
            v85.__begin_ = (std::vector<int>::pointer)&v86;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
            MilTranslator::OpTranslator::GetTransposeOpParamPerm(v29, (uint64_t)v89, &v86);
            MilTranslator::OpTranslator::GetTransposeOpParamPerm(v35, (uint64_t)__p, &v85);
            std::string::basic_string[abi:ne180100]<0>(v82, "x");
            uint64_t v36 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
            long long v37 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v36);
            ANEMachineIR::Utils::GetStaticTensorShape(v37, v38, (uint64_t)v84);
            if (v83 < 0) {
              operator delete(v82[0]);
            }
            int v39 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
            int v40 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v39);
            ANEMachineIR::Utils::GetStaticTensorShape(v40, v41, (uint64_t)v82);
            MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v84, (unsigned int **)&v86, v81);
            MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v82, (unsigned int **)&v85, &v79);
            (*(void (**)(void **__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(&v75, a2);
            if (v76 == v75) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            if (*((char *)v75 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)v75, *((void *)v75 + 1));
            }
            else
            {
              long long v42 = *(_OWORD *)v75;
              v78.__r_.__value_.__r.__words[2] = *((void *)v75 + 2);
              *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v42;
            }
            uint64_t v72 = (MIL::IRNamedValueType *)&v75;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
            if (MilTranslator::OpTranslator::IsTransposeRequired(&v85)) {
              std::string::append(&v78, "_channel_last");
            }
            long long v49 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
            uint64_t v50 = MIL::IRValueType::AsTensorType(v49);
            (*(void (**)(uint64_t))(*(void *)v50 + 88))(v50);
            int v75 = 0;
            uint64_t v76 = 0;
            uint64_t v77 = 0;
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v75, v79, (uint64_t)v80, (v80 - (unsigned char *)v79) >> 3);
            MIL::IRTensorValueType::Make();
            if (v75)
            {
              uint64_t v76 = (std::__shared_weak_count *)v75;
              operator delete(v75);
            }
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v74, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
            }
            else {
              std::string v74 = v78;
            }
            MIL::IRNamedValueType::Make();
            if (v75) {
              operator new();
            }
            int v75 = 0;
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            uint64_t v72 = 0;
            uint64_t v73 = 0;
            if (MilTranslator::OpTranslator::IsTransposeRequired(&v85))
            {
              (*(void (**)(void **__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(&v75, a2);
              if (v76 == v75) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              if (*((char *)v75 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v75, *((void *)v75 + 1));
              }
              else
              {
                long long v51 = *(_OWORD *)v75;
                v70.__r_.__value_.__r.__words[2] = *((void *)v75 + 2);
                *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v51;
              }
              uint64_t v53 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
              MIL::IRValueType::AsTensorType(v53);
              MIL::IRNamedValueType::Make();
              std::shared_ptr<MIL::IRNamedValueType>::operator=[abi:ne180100]<MIL::IRNamedValueType,std::default_delete<MIL::IRNamedValueType>,void>(&v72, (uint64_t *)&v71);
              long long v54 = v71;
              uint64_t v71 = 0;
              if (v54)
              {
                MIL::IRNamedValueType::~IRNamedValueType(v54);
                MEMORY[0x21667BBD0]();
              }
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v70.__r_.__value_.__l.__data_);
              }
              long long v98 = &v75;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v98);
            }
            else
            {
              std::string::size_type v52 = v73;
              uint64_t v72 = 0;
              uint64_t v73 = 0;
              if (v52) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v52);
              }
            }
            uint64_t Function = MIL::IRProgram::GetFunction();
            uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 128))(Function);
            if (!std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__count_unique<std::string>(v56, (const void **)v7))
            {
              std::string::basic_string[abi:ne180100]<0>(&v75, "x");
              long long v57 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
              uint64_t v58 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v57);
              MilTranslator::OpTranslator::EnsureTransposeProducesChannelFirst((uint64_t)this, v7, v58);
              if (SHIBYTE(v77) < 0) {
                operator delete(v75);
              }
            }
            std::string::basic_string[abi:ne180100]<0>(&v68, "reshape");
            MilTranslator::OpTranslator::AddOperation((uint64_t)this);
            if (v69 < 0) {
              operator delete(v68);
            }
            std::string::basic_string[abi:ne180100]<0>(&v65, "x");
            if (*(char *)(v7 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
            }
            else
            {
              long long v59 = *(_OWORD *)v7;
              v64.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
              *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v59;
            }
            MIL::Builder::OperationBuilder::AddInput();
            if (v67) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v67);
            }
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v64.__r_.__value_.__l.__data_);
            }
            if (v66 < 0) {
              operator delete(v65);
            }
            uint64_t Name = MIL::IRNamedValueType::GetName(v72);
            if (*(char *)(Name + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)Name, *(void *)(Name + 8));
            }
            else
            {
              long long v61 = *(_OWORD *)Name;
              v62.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
              *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v61;
            }
            MIL::IRNamedValueType::GetType(v72);
            MIL::Builder::OperationBuilder::AddOutput();
            if (v63) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v63);
            }
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v62.__r_.__value_.__l.__data_);
            }
            *(_DWORD *)a3 = 0;
            std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
            if (v76) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v76);
            }
            if (v73) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v73);
            }
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v78.__r_.__value_.__l.__data_);
            }
            if (v79)
            {
              long long v80 = v79;
              operator delete(v79);
            }
            if (v81[0])
            {
              v81[1] = v81[0];
              operator delete(v81[0]);
            }
            if (v82[0])
            {
              v82[1] = v82[0];
              operator delete(v82[0]);
            }
            if (v84[0])
            {
              v84[1] = v84[0];
              operator delete(v84[0]);
            }
            if (v85.__begin_)
            {
              v85.__end_ = v85.__begin_;
              operator delete(v85.__begin_);
            }
            if (v86.__begin_)
            {
              v86.__end_ = v86.__begin_;
              operator delete(v86.__begin_);
            }
            if (v88 < 0) {
              operator delete(__p[0]);
            }
            if (v90 < 0) {
              operator delete(v89[0]);
            }
            goto LABEL_114;
          }
        }
        else
        {
          int v25 = "Input and output dtypes must match for reshape.";
        }
        *(_DWORD *)a3 = 11;
        std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v25);
      }
      else
      {
        *(_DWORD *)a3 = 11;
        uint64_t v47 = MIL::MILResult::GetMessage((MIL::MILResult *)v93);
        if (*(char *)(v47 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(a3 + 8), *(const std::string::value_type **)v47, *(void *)(v47 + 8));
        }
        else
        {
          long long v48 = *(_OWORD *)v47;
          *(void *)(a3 + 24) = *(void *)(v47 + 16);
          *(_OWORD *)(a3 + 8) = v48;
        }
      }
LABEL_114:
      MEMORY[0x21667B360](v93);
LABEL_115:
      MEMORY[0x21667B360](&v97);
      return;
    }
  }
  else if (v6)
  {
    goto LABEL_3;
  }
  *(_DWORD *)a3 = 4;
  (*(void (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
  std::operator+<char>();
  long long v43 = std::string::append(&v97, "' does not handle immediate values");
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  *(void *)(a3 + 24) = *((void *)&v43->__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 8) = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
}

void sub_210BF0644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,void *a36,uint64_t a37,uint64_t a38,void *a39,std::__shared_weak_count *a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a48) {
    operator delete(a48);
  }
  if (a51) {
    operator delete(a51);
  }
  if (a54) {
    operator delete(a54);
  }
  if (a57) {
    operator delete(a57);
  }
  if (a60) {
    operator delete(a60);
  }
  if (a63) {
    operator delete(a63);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (*(char *)(v72 - 225) < 0) {
    operator delete(*(void **)(v72 - 248));
  }
  MEMORY[0x21667B360](v72 - 200);
  MEMORY[0x21667B360](v72 - 128);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<MIL::IRNamedValueType>::operator=[abi:ne180100]<MIL::IRNamedValueType,std::default_delete<MIL::IRNamedValueType>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRNamedValueType>::shared_ptr[abi:ne180100]<MIL::IRNamedValueType,std::default_delete<MIL::IRNamedValueType>,void>((uint64_t *)&v6, a2);
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t *std::shared_ptr<MIL::IRNamedValueType>::shared_ptr[abi:ne180100]<MIL::IRNamedValueType,std::default_delete<MIL::IRNamedValueType>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

void ANEMachineIR::Validators::ParsePeReduceParamValues(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (ANEMachineIR::Utils::TryGetStaticTensorShape(a2, (uint64_t)&v32))
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "reduction");
    std::string::basic_string[abi:ne180100]<0>(&v24, "mean");
    uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
    if (ParameterValue
      && (*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue)
      && (uint64_t v8 = MEMORY[0x21667B830]()) != 0)
    {
      if (*(char *)(v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)v8;
        v27.__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
      }
    }
    else
    {
      std::string v27 = v24;
      memset(&v24, 0, sizeof(v24));
    }
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(a3, (long long *)&v27);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v27, "reduction_scale");
    uint64_t v11 = MIL::IROperation::TryGetParameterValue();
    float v12 = 1.0;
    if (v11)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11))
      {
        long long v13 = (float *)MEMORY[0x21667B860]();
        if (v13) {
          float v12 = *v13;
        }
      }
    }
    *(float *)(a3 + 64) = v12;
    *(unsigned char *)(a3 + 68) = 1;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v27, "reduction_epsilon");
    uint64_t v14 = MIL::IROperation::TryGetParameterValue();
    int v15 = 0;
    if (v14)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 40))(v14))
      {
        int v16 = (int *)MEMORY[0x21667B860]();
        if (v16) {
          int v15 = *v16;
        }
      }
    }
    *(_DWORD *)(a3 + 72) = v15;
    *(unsigned char *)(a3 + 76) = 1;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    uint64_t v17 = (v33 - v32) >> 3;
    if (v17 == 3)
    {
      std::string::basic_string[abi:ne180100]<0>(v25, "reduction_axes");
      char v19 = operator new(1uLL);
      int v21 = v19;
      *char v19 = 1;
      int v22 = v19 + 1;
      uint64_t v23 = v19 + 1;
      MIL::ANEMachineIR::GetScalarOrVectorOrDefault<signed char>((uint64_t)&v21, (unint64_t *)&v27);
      std::optional<std::vector<MIL::Fp16>>::operator=[abi:ne180100]<std::vector<MIL::Fp16>,void>(a3 + 32, (__n128 *)&v27);
    }
    else if (v17 == 4)
    {
      std::string::basic_string[abi:ne180100]<0>(v25, "reduction_axes");
      uint64_t v20 = operator new(2uLL);
      int v21 = v20;
      _WORD *v20 = 513;
      int v22 = v20 + 1;
      uint64_t v23 = v20 + 1;
      MIL::ANEMachineIR::GetScalarOrVectorOrDefault<signed char>((uint64_t)&v21, (unint64_t *)&v27);
      std::optional<std::vector<MIL::Fp16>>::operator=[abi:ne180100]<std::vector<MIL::Fp16>,void>(a3 + 32, (__n128 *)&v27);
    }
    else
    {
      if (v17 == 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v25, "reduction_axes");
        int v18 = (char *)operator new(3uLL);
        int v22 = v18 + 3;
        uint64_t v23 = v18 + 3;
        *(_WORD *)int v18 = 513;
        v18[2] = 3;
        int v21 = v18;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v25, "reduction_axes");
        int v21 = 0;
        int v22 = 0;
        uint64_t v23 = 0;
      }
      MIL::ANEMachineIR::GetScalarOrVectorOrDefault<signed char>((uint64_t)&v21, (unint64_t *)&v27);
      std::optional<std::vector<MIL::Fp16>>::operator=[abi:ne180100]<std::vector<MIL::Fp16>,void>(a3 + 32, (__n128 *)&v27);
    }
    if (v27.__r_.__value_.__r.__words[0])
    {
      v27.__r_.__value_.__l.__size_ = v27.__r_.__value_.__r.__words[0];
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (v21)
    {
      int v22 = v21;
      operator delete(v21);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    MIL::ValidationResult::ValidationResult(a4);
  }
  else
  {
    uint64_t v10 = (std::__shared_weak_count *)a1[1];
    uint64_t v30 = *a1;
    uint64_t v31 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "inputs must have static shape.");
    MEMORY[0x21667B340](a4, &v30, 309, __p);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
}

void sub_210BF0F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  int v39 = *(void **)(v37 - 72);
  if (v39)
  {
    *(void *)(v37 - 64) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void MIL::ANEMachineIR::GetScalarOrVectorOrDefault<signed char>(uint64_t a1@<X2>, unint64_t *a2@<X8>)
{
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue)
      && (long long v5 = (char *)MEMORY[0x21667B840]()) != 0)
    {
      char v6 = *v5;
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      uint64_t v7 = operator new(1uLL);
      *a2 = (unint64_t)v7;
      *v7++ = v6;
      a2[1] = (unint64_t)v7;
      a2[2] = (unint64_t)v7;
    }
    else
    {
      uint64_t v8 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      uint64_t v9 = MIL::IRValue::AsTensor(v8);
      uint64_t v10 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
      ANEMachineIR::Utils::GetStaticTensorShape(v10, v11, (uint64_t)&Data);
      if (v33 == Data) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      size_t v12 = *Data;
      uint64_t v33 = Data;
      operator delete(Data);
      Data = (size_t *)MIL::IRTensorValue::GetDataView<signed char>();
      uint64_t v33 = v13;
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      std::vector<unsigned char>::reserve(a2, v12);
      if (v12)
      {
        for (unint64_t i = 0; i != v12; ++i)
        {
          int v15 = (unsigned char *)MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](&Data, i);
          int v16 = v15;
          int v18 = (unsigned char *)a2[1];
          unint64_t v17 = a2[2];
          if ((unint64_t)v18 >= v17)
          {
            unint64_t v20 = *a2;
            int v21 = &v18[-*a2];
            unint64_t v22 = (unint64_t)(v21 + 1);
            if ((uint64_t)(v21 + 1) < 0) {
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v23 = v17 - v20;
            if (2 * v23 > v22) {
              unint64_t v22 = 2 * v23;
            }
            if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v24 = v22;
            }
            if (v24) {
              int v25 = (char *)operator new(v24);
            }
            else {
              int v25 = 0;
            }
            char v26 = &v21[(void)v25];
            v21[(void)v25] = *v16;
            uint64_t v19 = (uint64_t)&v21[(void)v25 + 1];
            if (v18 != (unsigned char *)v20)
            {
              std::string v27 = &v18[~v20];
              do
              {
                char v28 = *--v18;
                (v27--)[(void)v25] = v28;
              }
              while (v18 != (unsigned char *)v20);
              int v18 = (unsigned char *)*a2;
              char v26 = v25;
            }
            *a2 = (unint64_t)v26;
            a2[1] = v19;
            a2[2] = (unint64_t)&v25[v24];
            if (v18) {
              operator delete(v18);
            }
          }
          else
          {
            unsigned char *v18 = *v15;
            uint64_t v19 = (uint64_t)(v18 + 1);
          }
          a2[1] = v19;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    char v29 = *(const void **)a1;
    uint64_t v30 = *(void *)(a1 + 8);
    size_t v31 = v30 - *(void *)a1;
    std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(a2, v29, v30, v31);
  }
}

void sub_210BF130C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  long long v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ValidatePeReduce(uint64_t *a1@<X0>, ANEMachineIR::Utils *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, MIL::ValidationResult *a5@<X8>)
{
  uint64_t v10 = (void *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)a2 + 96))(a2);
  if (v10[1] - *v10 <= 0x17uLL)
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[1];
    uint64_t v128 = *a1;
    std::string v129 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Input rank must be >= 3");
    MEMORY[0x21667B340](a5, &v128, 319, __p);
    if (v127 < 0) {
      operator delete(__p[0]);
    }
    size_t v12 = v129;
    if (!v129) {
      return;
    }
    goto LABEL_114;
  }
  if (!*(unsigned char *)(a4 + 56)) {
    goto LABEL_95;
  }
  long long v13 = (void *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)a2 + 96))(a2);
  uint64_t v14 = v13[1] - *v13;
  ANEMachineIR::Utils::GetStaticTensorShape(a2, v15, (uint64_t)&v124);
  unint64_t v17 = *(unsigned char **)(a4 + 32);
  int v16 = *(unsigned char **)(a4 + 40);
  unint64_t v18 = v16 - v17;
  if (v16 == v17)
  {
    char v27 = 0;
    goto LABEL_72;
  }
  uint64_t v19 = 0;
  if (v18 <= 1) {
    uint64_t v20 = 1;
  }
  else {
    uint64_t v20 = v16 - v17;
  }
  uint64_t v21 = 1;
  char v22 = 1;
  do
  {
    uint64_t v23 = v19 + 1;
    if (v18 > v19 + 1)
    {
      int v24 = v17[v19];
      uint64_t v25 = v21;
      while (v24 != v17[v25])
      {
        if (v18 <= ++v25) {
          goto LABEL_20;
        }
      }
      char v22 = 0;
    }
LABEL_20:
    ++v21;
    uint64_t v19 = v23;
  }
  while (v23 != v20);
  if ((v22 & 1) == 0)
  {
    uint64_t v26 = a1[1];
    *(void *)&long long v137 = *a1;
    *((void *)&v137 + 1) = v26;
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v141, "PE reduce: duplicated axes not allowed.");
    MEMORY[0x21667B340](a5, &v137, 319, &v141);
    goto LABEL_87;
  }
  char v27 = 0;
  int v28 = 0;
  unint64_t v29 = v125 - (unsigned char *)v124;
  do
  {
    int v30 = *v17;
    if (v14 == 32)
    {
      if (v30 == 3)
      {
        if (v29 < 0x19) {
          goto LABEL_248;
        }
        uint64_t v31 = *((void *)v124 + 3);
      }
      else if (v30 == 1)
      {
        if (v29 < 9) {
          goto LABEL_248;
        }
        uint64_t v31 = *((void *)v124 + 1);
      }
      else
      {
        if (*v17) {
          goto LABEL_42;
        }
        if (v125 == v124) {
          goto LABEL_248;
        }
        uint64_t v31 = *(void *)v124;
      }
      if (v31 == 1)
      {
LABEL_42:
        char v32 = 0;
        goto LABEL_52;
      }
      char v32 = 0;
LABEL_51:
      ++v28;
      goto LABEL_52;
    }
    if (v14 != 40) {
      goto LABEL_42;
    }
    char v32 = 1;
    switch(*v17)
    {
      case 0:
        if (v125 == v124) {
          goto LABEL_248;
        }
        uint64_t v33 = *(void *)v124;
        break;
      case 1:
        if (v29 < 9) {
          goto LABEL_248;
        }
        uint64_t v33 = *((void *)v124 + 1);
        break;
      case 2:
        if (v29 < 0x11) {
          goto LABEL_248;
        }
        uint64_t v33 = *((void *)v124 + 2);
        break;
      case 4:
        if (v29 < 0x21) {
          goto LABEL_248;
        }
        uint64_t v33 = *((void *)v124 + 4);
        break;
      default:
        goto LABEL_52;
    }
    if (v33 != 1) {
      goto LABEL_51;
    }
LABEL_52:
    BOOL v35 = v14 == 24 && v30 == 1;
    if (v14 == 32 && v30 == 2) {
      BOOL v35 = 1;
    }
    if (v30 == 3) {
      char v37 = v32;
    }
    else {
      char v37 = 0;
    }
    v27 |= v35 | v37;
    ++v17;
  }
  while (v17 != v16);
  if (v28 >= 3)
  {
    uint64_t v38 = a1[1];
    *(void *)&long long v137 = *a1;
    *((void *)&v137 + 1) = v38;
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v141, "PE reduce: for N/D/H/C dims, reduce up to 2 dims is allowed.");
    MEMORY[0x21667B340](a5, &v137, 319, &v141);
    goto LABEL_87;
  }
LABEL_72:
  if (v14 == 24 && (v27 & 1) == 0)
  {
    if ((unint64_t)(v125 - (unsigned char *)v124) >= 9)
    {
      uint64_t v39 = *((void *)v124 + 1);
      goto LABEL_82;
    }
LABEL_248:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if ((v14 != 32) | v27 & 1)
  {
    if (!((v14 != 40) | v27 & 1))
    {
      if ((unint64_t)(v125 - (unsigned char *)v124) <= 0x18) {
        goto LABEL_248;
      }
      uint64_t v39 = *((void *)v124 + 3);
      goto LABEL_82;
    }
    goto LABEL_83;
  }
  if ((unint64_t)(v125 - (unsigned char *)v124) < 0x11) {
    goto LABEL_248;
  }
  uint64_t v39 = *((void *)v124 + 2);
LABEL_82:
  if (v39 == 1)
  {
LABEL_83:
    MIL::ValidationResult::ValidationResult(a5);
  }
  else
  {
    uint64_t v40 = a1[1];
    *(void *)&long long v137 = *a1;
    *((void *)&v137 + 1) = v40;
    if (v40) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v141, "PE reduce: for W dim, if its input dim size is not 1, it should be reduced (W should appear in reduction_axis).");
    MEMORY[0x21667B340](a5, &v137, 319, &v141);
LABEL_87:
    if (v143 < 0) {
      operator delete(v141);
    }
    if (*((void *)&v137 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v137 + 1));
    }
  }
  if (v124)
  {
    long long v125 = v124;
    operator delete(v124);
  }
  if (!MIL::ValidationResult::IsGood(a5)) {
    return;
  }
  MEMORY[0x21667B360](a5);
LABEL_95:
  if (*(unsigned char *)(a4 + 24))
  {
    int v41 = *(char *)(a4 + 23);
    if (v41 < 0)
    {
      if (*(void *)(a4 + 8) != 4) {
        goto LABEL_102;
      }
      long long v42 = *(_DWORD **)a4;
    }
    else
    {
      long long v42 = (_DWORD *)a4;
      if (v41 != 4)
      {
LABEL_102:
        long long v43 = (std::__shared_weak_count *)a1[1];
        uint64_t v122 = *a1;
        std::string::size_type v123 = v43;
        if (v43) {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v120, "Only mean reduction is supported at the moment.");
        MEMORY[0x21667B340](a5, &v122, 319, v120);
        if (v121 < 0) {
          operator delete(v120[0]);
        }
        size_t v12 = v123;
        if (!v123) {
          return;
        }
LABEL_114:
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        return;
      }
    }
    if (*v42 != 1851876717) {
      goto LABEL_102;
    }
  }
  if (!*(unsigned char *)(a4 + 104))
  {
    int v113 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    if (ANEMachineIR::Utils::TryGetStaticTensorShape((uint64_t)a2, (uint64_t)&v113))
    {
      long long v106 = 0;
      long long v107 = 0;
      uint64_t v108 = 0;
      if (ANEMachineIR::Utils::TryGetStaticTensorShape(a3, (uint64_t)&v106))
      {
        std::string::size_type v130 = 0;
        std::string v131 = 0;
        long long v132 = 0;
        long long v46 = v113;
        std::string::size_type v45 = v114;
        unint64_t v47 = v114 - (unsigned char *)v113;
        unint64_t v48 = (v114 - (unsigned char *)v113) >> 3;
        uint64_t v50 = *(void *)(a4 + 32);
        uint64_t v49 = *(void *)(a4 + 40);
        std::vector<unsigned long long>::reserve(&v130, v48);
        std::vector<BOOL>::vector(&v141, v48);
        if (v45 != v46)
        {
          unint64_t v51 = 0;
          std::string::size_type v52 = v141;
          if (v48 <= 1) {
            uint64_t v53 = 1;
          }
          else {
            uint64_t v53 = v48;
          }
          do
          {
            if (v142 <= v51) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            *(void *)&v52[(v51 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v51);
            ++v51;
          }
          while (v53 != v51);
        }
        if (v49 == v50)
        {
          if (v47 >= 0x11)
          {
            if (v142 <= 1) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            long long v61 = (uint64_t *)v141;
            uint64_t v62 = *(void *)v141;
            *(void *)v141 |= 2uLL;
            if (v47 >= 0x19)
            {
              if (v142 <= 2) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              *long long v61 = v62 | 6;
              if (v47 == 40)
              {
                if (v142 <= 3) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                *long long v61 = v62 | 0xE;
              }
            }
          }
        }
        else
        {
          uint64_t v54 = v49 - v50;
          long long v55 = *(char **)(a4 + 32);
          uint64_t v56 = *(void *)(a4 + 40) - (void)v55;
          long long v57 = v141;
          if ((unint64_t)(v49 - v50) <= 1) {
            uint64_t v54 = 1;
          }
          do
          {
            if (!v56) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            unint64_t v58 = *v55;
            if (v142 <= v58) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            *(void *)&v57[(v58 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v58;
            ++v55;
            --v56;
            --v54;
          }
          while (v54);
        }
        std::string v131 = (char *)v130;
        std::vector<unsigned long long>::reserve(&v130, v48);
        if (v45 != v46)
        {
          unint64_t v63 = 0;
          if (v48 <= 1) {
            unint64_t v48 = 1;
          }
          while (1)
          {
            if (v142 <= v63) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            if ((*(void *)&v141[(v63 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v63))
            {
              std::string v64 = v131;
              if (v131 >= v132)
              {
                char v69 = (char *)v130;
                uint64_t v70 = (v131 - (unsigned char *)v130) >> 3;
                unint64_t v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 61) {
                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v72 = v132 - (unsigned char *)v130;
                if ((v132 - (unsigned char *)v130) >> 2 > v71) {
                  unint64_t v71 = v72 >> 2;
                }
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v73 = v71;
                }
                if (v73)
                {
                  std::string v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v132, v73);
                  char v69 = (char *)v130;
                  std::string v64 = v131;
                }
                else
                {
                  std::string v74 = 0;
                }
                std::string v78 = &v74[8 * v70];
                *(void *)std::string v78 = 1;
                uint64_t v68 = v78 + 8;
                while (v64 != v69)
                {
                  uint64_t v79 = *((void *)v64 - 1);
                  v64 -= 8;
                  *((void *)v78 - 1) = v79;
                  v78 -= 8;
                }
LABEL_185:
                std::string::size_type v130 = v78;
                std::string v131 = v68;
                long long v132 = &v74[8 * v73];
                if (v69) {
                  operator delete(v69);
                }
                goto LABEL_187;
              }
              *(void *)std::string v131 = 1;
              unint64_t v65 = v64 + 8;
            }
            else
            {
              char v66 = v113;
              if (v63 >= (v114 - (unsigned char *)v113) >> 3) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v67 = v131;
              if (v131 >= v132)
              {
                char v69 = (char *)v130;
                uint64_t v75 = (v131 - (unsigned char *)v130) >> 3;
                unint64_t v76 = v75 + 1;
                if ((unint64_t)(v75 + 1) >> 61) {
                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v77 = v132 - (unsigned char *)v130;
                if ((v132 - (unsigned char *)v130) >> 2 > v76) {
                  unint64_t v76 = v77 >> 2;
                }
                if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v73 = v76;
                }
                if (v73)
                {
                  std::string v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v132, v73);
                  char v69 = (char *)v130;
                  uint64_t v67 = v131;
                }
                else
                {
                  std::string v74 = 0;
                }
                std::string v78 = &v74[8 * v75];
                *(void *)std::string v78 = v66[v63];
                uint64_t v68 = v78 + 8;
                while (v67 != v69)
                {
                  uint64_t v80 = *((void *)v67 - 1);
                  v67 -= 8;
                  *((void *)v78 - 1) = v80;
                  v78 -= 8;
                }
                goto LABEL_185;
              }
              *(void *)std::string v131 = *((void *)v113 + v63);
              unint64_t v65 = v67 + 8;
            }
            uint64_t v68 = v65;
LABEL_187:
            std::string v131 = v68;
            if (++v63 == v48) {
              goto LABEL_190;
            }
          }
        }
        uint64_t v68 = v131;
LABEL_190:
        unint64_t v81 = v130;
        uint64_t v82 = v68 - (unsigned char *)v130;
        if (v68 - (unsigned char *)v130 == v114 - (unsigned char *)v113)
        {
          MIL::ValidationResult::ValidationResult(a5);
        }
        else
        {
          char v83 = (std::__shared_weak_count *)a1[1];
          uint64_t v139 = *a1;
          int64_t v140 = v83;
          if (v83)
          {
            atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v82 = v131 - v81;
          }
          std::to_string(&v134, v82 >> 3);
          long long v84 = std::string::insert(&v134, 0, "Output rank ");
          long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
          v135.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v85;
          v84->__r_.__value_.__l.__size_ = 0;
          v84->__r_.__value_.__r.__words[2] = 0;
          v84->__r_.__value_.__r.__words[0] = 0;
          std::vector<int> v86 = std::string::append(&v135, " does not match rank of input tensor of shape ");
          long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
          v136.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v87;
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v133, (v114 - (unsigned char *)v113) >> 3);
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v88 = &v133;
          }
          else {
            char v88 = (std::string *)v133.__r_.__value_.__r.__words[0];
          }
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v133.__r_.__value_.__l.__size_;
          }
          char v90 = std::string::append(&v136, (const std::string::value_type *)v88, size);
          long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
          int64_t v138 = v90->__r_.__value_.__r.__words[2];
          long long v137 = v91;
          v90->__r_.__value_.__l.__size_ = 0;
          v90->__r_.__value_.__r.__words[2] = 0;
          v90->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x21667B340](a5, &v139, 313, &v137);
          if (SHIBYTE(v138) < 0) {
            operator delete((void *)v137);
          }
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v135.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v134.__r_.__value_.__l.__data_);
          }
          if (v140) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v140);
          }
        }
        if (v141) {
          operator delete(v141);
        }
        if (MIL::ValidationResult::IsGood(a5))
        {
          MEMORY[0x21667B360](a5);
          if (v131 - (unsigned char *)v130 == v107 - (unsigned char *)v106 && !memcmp(v130, v106, v131 - (unsigned char *)v130))
          {
            MIL::ValidationResult::ValidationResult(a5);
          }
          else
          {
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v106);
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v130);
            int v92 = (std::__shared_weak_count *)a1[1];
            uint64_t v139 = *a1;
            int64_t v140 = v92;
            if (v92) {
              atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::operator+<char>();
            std::string::size_type v93 = std::string::append(&v133, " does not match inferred shape ");
            long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
            v134.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v94;
            v93->__r_.__value_.__l.__size_ = 0;
            v93->__r_.__value_.__r.__words[2] = 0;
            v93->__r_.__value_.__r.__words[0] = 0;
            if (v138 >= 0) {
              uint64_t v95 = (const std::string::value_type *)&v137;
            }
            else {
              uint64_t v95 = (const std::string::value_type *)v137;
            }
            if (v138 >= 0) {
              std::string::size_type v96 = HIBYTE(v138);
            }
            else {
              std::string::size_type v96 = *((void *)&v137 + 1);
            }
            std::string v97 = std::string::append(&v134, v95, v96);
            long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
            v135.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v98;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v97->__r_.__value_.__r.__words[0] = 0;
            uint64_t v99 = std::string::append(&v135, ".");
            long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
            v136.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v100;
            v99->__r_.__value_.__l.__size_ = 0;
            v99->__r_.__value_.__r.__words[2] = 0;
            v99->__r_.__value_.__r.__words[0] = 0;
            MEMORY[0x21667B340](a5, &v139, 313, &v136);
            if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v136.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v135.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v134.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v133.__r_.__value_.__l.__data_);
            }
            if (v140) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v140);
            }
            if (SHIBYTE(v138) < 0) {
              operator delete((void *)v137);
            }
            if (v143 < 0) {
              operator delete(v141);
            }
          }
        }
        if (v130)
        {
          std::string v131 = (char *)v130;
          operator delete(v130);
        }
        if (MIL::ValidationResult::IsGood(a5))
        {
          long long v101 = (MIL::ValidationResult *)MEMORY[0x21667B360](a5);
          MIL::ValidationResult::ValidationResult(v101);
        }
      }
      else
      {
        uint64_t v60 = (std::__shared_weak_count *)a1[1];
        uint64_t v104 = *a1;
        long long v105 = v60;
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v102, "outputs must have static shape.");
        MEMORY[0x21667B340](a5, &v104, 313, v102);
        if (v103 < 0) {
          operator delete(v102[0]);
        }
        if (v105) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v105);
        }
      }
      if (v106)
      {
        long long v107 = v106;
        operator delete(v106);
      }
    }
    else
    {
      long long v59 = (std::__shared_weak_count *)a1[1];
      uint64_t v111 = *a1;
      uint64_t v112 = v59;
      if (v59) {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v109, "inputs must have static shape.");
      MEMORY[0x21667B340](a5, &v111, 309, v109);
      if (v110 < 0) {
        operator delete(v109[0]);
      }
      if (v112) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v112);
      }
    }
    if (v113)
    {
      uint64_t v114 = v113;
      operator delete(v113);
    }
    return;
  }
  long long v44 = (std::__shared_weak_count *)a1[1];
  uint64_t v118 = *a1;
  std::string v119 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v116, "reduction_post_processing is not supported at the moment.");
  MEMORY[0x21667B340](a5, &v118, 319, v116);
  if (v117 < 0) {
    operator delete(v116[0]);
  }
  size_t v12 = v119;
  if (v119) {
    goto LABEL_114;
  }
}

void sub_210BF2028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  std::string::size_type v45 = *(void **)(v43 - 112);
  if (v45) {
    operator delete(v45);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ValidatePeReduce(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  long long v5 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 176))(a1);
  if (*(void *)(v6 + 8) == *(void *)v6) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v6);
  uint64_t v8 = MIL::IRValueType::AsTensorType(Type);
  LOBYTE(__p[0]) = 0;
  char v13 = 0;
  LOBYTE(v14) = 0;
  char v16 = 0;
  char v17 = 0;
  char v18 = 0;
  char v19 = 0;
  char v20 = 0;
  LOBYTE(v21) = 0;
  char v23 = 0;
  uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  ANEMachineIR::Validators::ParsePeReduceParamValues(LocationPtr, (uint64_t)v5, (uint64_t)__p, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x21667B360](a2);
    uint64_t v10 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    (*(void (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidatePeReduce(v10, v5, v8, (uint64_t)__p, a2);
  }
  if (v23 && v22 < 0) {
    operator delete(v21);
  }
  if (v16 && v14)
  {
    int v15 = v14;
    operator delete(v14);
  }
  if (v13)
  {
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void ANEMachineIR::Validators::ValidateNeReduce(MIL::IRObject *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  long long v4 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v7 = *LocationPtr;
  uint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ne_reduce is not implemented.");
  MEMORY[0x21667B340](a2, &v7, 209, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_210BF25A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = a1[1];
    unint64_t v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      unint64_t v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v10 = *a1 + 8 * (v4 >> 6);
        int v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      unint64_t v6 = v5 - 1;
    }
    unint64_t v7 = v6 >> 6;
    if (v5 >= 0x41) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void MilTranslator::OpTranslator::TranslateConst(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  if (!(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 144))(a2))
  {
    uint64_t Attributes = MIL::IRObject::GetAttributes(a2);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v50, Attributes);
    std::string::basic_string[abi:ne180100]<0>(&v49, "val");
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>(&v50, (unsigned __int8 *)&v49);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (v51 == 1 && v10)
    {
      uint64_t v11 = (*(uint64_t (**)(void))(**((void **)v10 + 5) + 40))(*((void *)v10 + 5));
      if (v11)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
        unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12);
        if (v13 <= 0xE && ((1 << v13) & 0x4210) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "const");
          MilTranslator::OpTranslator::AddOperation((uint64_t)this);
          if (v43 < 0) {
            operator delete(__p);
          }
          (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(&v49, a2);
          if (v49.__r_.__value_.__l.__size_ == v49.__r_.__value_.__r.__words[0]) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          if (*(char *)(v49.__r_.__value_.__r.__words[0] + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v49.__r_.__value_.__l.__data_, *(void *)(v49.__r_.__value_.__r.__words[0] + 8));
          }
          else
          {
            long long v15 = *(_OWORD *)v49.__r_.__value_.__l.__data_;
            v40.__r_.__value_.__r.__words[2] = *(void *)(v49.__r_.__value_.__r.__words[0] + 16);
            *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v15;
          }
          MIL::IROperation::GetOutputType(a2);
          MIL::Builder::OperationBuilder::AddOutput();
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          }
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
          if ((char)v10[39] < 0) {
            std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v10 + 2), *((void *)v10 + 3));
          }
          else {
            std::string v38 = *(std::string *)(v10 + 16);
          }
          char v32 = (std::__shared_weak_count *)*((void *)v10 + 6);
          char v37 = v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::Builder::OperationBuilder::SetAttribute();
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
          if (v37) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v37);
          }
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)a3 = 0;
          std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
          if (v48.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v48.__r_.__value_.__l.__size_);
          }
          goto LABEL_58;
        }
        *(_DWORD *)a3 = 4;
        uint64_t v33 = a3 + 8;
        uint64_t Location = MIL::IRObject::GetLocation(a2);
        (*(void (**)(std::string *__return_ptr))(*(void *)Location + 24))(&v49);
        BOOL v35 = std::string::insert(&v49, 0, "DTypes not compatible with live tensors are not implemented in ANEFlow const. Violation at ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        *(void *)(v33 + 16) = *((void *)&v35->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v33 = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_58:
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)&v50);
          return;
        }
        uint64_t v31 = (void *)v49.__r_.__value_.__r.__words[0];
LABEL_38:
        operator delete(v31);
        goto LABEL_58;
      }
      *(_DWORD *)a3 = 4;
      uint64_t v16 = a3 + 8;
      std::string::basic_string[abi:ne180100]<0>(&v47, "val");
      int v24 = std::string::insert(&v47, 0, "Only tensors are handled for const attribute ");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      uint64_t v26 = std::string::append(&v48, ". Violated at ");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      uint64_t v28 = MIL::IRObject::GetLocation(a2);
      (*(void (**)(void **__return_ptr))(*(void *)v28 + 24))(&v44);
      if ((v46 & 0x80u) == 0) {
        char v22 = (const std::string::value_type *)&v44;
      }
      else {
        char v22 = (const std::string::value_type *)v44;
      }
      if ((v46 & 0x80u) == 0) {
        std::string::size_type v23 = v46;
      }
      else {
        std::string::size_type v23 = v45;
      }
    }
    else
    {
      *(_DWORD *)a3 = 4;
      uint64_t v16 = a3 + 8;
      std::string::basic_string[abi:ne180100]<0>(&v47, "val");
      char v17 = std::string::insert(&v47, 0, "Const expected to have exactly one bound attribute named ");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      char v19 = std::string::append(&v48, ". Violated at ");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = MIL::IRObject::GetLocation(a2);
      (*(void (**)(void **__return_ptr))(*(void *)v21 + 24))(&v44);
      if ((v46 & 0x80u) == 0) {
        char v22 = (const std::string::value_type *)&v44;
      }
      else {
        char v22 = (const std::string::value_type *)v44;
      }
      if ((v46 & 0x80u) == 0) {
        std::string::size_type v23 = v46;
      }
      else {
        std::string::size_type v23 = v45;
      }
    }
    unint64_t v29 = std::string::append(&v49, v22, v23);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    *(void *)(v16 + 16) = *((void *)&v29->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v16 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if ((char)v46 < 0) {
      operator delete(v44);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_58;
    }
    uint64_t v31 = (void *)v47.__r_.__value_.__r.__words[0];
    goto LABEL_38;
  }
  *(_DWORD *)a3 = 4;
  uint64_t v6 = MIL::IRObject::GetLocation(a2);
  (*(void (**)(std::string *__return_ptr))(*(void *)v6 + 24))(&v50);
  unint64_t v7 = std::string::insert(&v50, 0, "Const not expected to have bound parameters. Violated at ");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(void *)(a3 + 24) = *((void *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 8) = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
}

void sub_210BF2D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v45 - 89) < 0) {
    operator delete(*(void **)(v45 - 112));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v45 - 88);
  _Unwind_Resume(a1);
}

void sub_210BF2E60()
{
  if (*(char *)(v0 - 65) < 0) {
    operator delete(*(void **)(v0 - 88));
  }
  JUMPOUT(0x210BF2E58);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (unint64_t i = *(unsigned __int8 **)(a2 + 16); i; unint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_210BF2ED8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unsigned int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  char v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_210BF315C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_210BF31D4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *MIL::ANEMachineIR::Interpreter::ReshapeCpu::Run@<X0>(MIL::IROperation *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t v64 = (uint64_t)a2;
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  uint64_t v7 = InterpretedTensorValue;
  if ((SHIBYTE(v69) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue) {
      goto LABEL_3;
    }
LABEL_28:
    uint64_t v28 = "Value is not a tensor.";
    goto LABEL_30;
  }
  operator delete(__p);
  if (!v7) {
    goto LABEL_28;
  }
LABEL_3:
  uint64_t OutputType = MIL::IROperation::GetOutputType(a1);
  unint64_t v9 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)OutputType + 24))(OutputType);
  if (!v9)
  {
    uint64_t v28 = "Output type is not a tensor.";
    goto LABEL_30;
  }
  uint8x8_t v11 = v9;
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(v9, v10);
  if ((*(unsigned int (**)(ANEMachineIR::Utils *))(*(void *)v11 + 88))(v11) != 4)
  {
    if ((*(unsigned int (**)(ANEMachineIR::Utils *))(*(void *)v11 + 88))(v11) == 14)
    {
      uint64_t Data = MIL::IRTensorValue::GetDataView<unsigned char>();
      uint64_t v66 = v30;
      uint64_t v68 = 0;
      char v69 = 0;
      long long __p = 0;
      std::vector<unsigned char>::reserve((unint64_t *)&__p, NumberOfElementsFromStaticTensorShape);
      if (NumberOfElementsFromStaticTensorShape)
      {
        for (unint64_t i = 0; i != NumberOfElementsFromStaticTensorShape; ++i)
        {
          char v32 = (char *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&Data, i);
          uint64_t v33 = v32;
          uint64_t v34 = v68;
          if (v68 >= v69)
          {
            unint64_t v36 = (unint64_t)__p;
            uint64_t v37 = v68 - (unsigned char *)__p;
            uint64_t v38 = v68 - (unsigned char *)__p + 1;
            if (v38 < 0) {
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v39 = v69 - (unsigned char *)__p;
            if (2 * (v69 - (unsigned char *)__p) > (unint64_t)v38) {
              uint64_t v38 = 2 * v39;
            }
            if (v39 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v40 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v40 = v38;
            }
            if (v40) {
              int v41 = (char *)operator new(v40);
            }
            else {
              int v41 = 0;
            }
            long long v42 = &v41[v37];
            v41[v37] = *v33;
            uint64_t v35 = (uint64_t)&v41[v37 + 1];
            if (v34 != (char *)v36)
            {
              char v43 = &v34[~v36];
              do
              {
                char v44 = *--v34;
                (v43--)[(void)v41] = v44;
              }
              while (v34 != (char *)v36);
              uint64_t v34 = (char *)__p;
              long long v42 = v41;
            }
            long long __p = v42;
            uint64_t v68 = &v41[v37 + 1];
            char v69 = &v41[v40];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *uint64_t v68 = *v32;
            uint64_t v35 = (uint64_t)(v34 + 1);
          }
          uint64_t v68 = (char *)v35;
        }
      }
      (*(void (**)(uint64_t *__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&Data, a1);
      uint64_t v45 = (unsigned __int8 *)Data;
      if (v66 == Data) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      MIL::IRTensorValueType::MakeUInt8Value();
      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v64, v45, (uint64_t *)&p_Data);
      goto LABEL_77;
    }
    if ((*(unsigned int (**)(ANEMachineIR::Utils *))(*(void *)v11 + 88))(v11) == 9)
    {
      uint64_t Data = MIL::IRTensorValue::GetDataView<signed char>();
      uint64_t v66 = v46;
      uint64_t v68 = 0;
      char v69 = 0;
      long long __p = 0;
      std::vector<unsigned char>::reserve((unint64_t *)&__p, NumberOfElementsFromStaticTensorShape);
      if (NumberOfElementsFromStaticTensorShape)
      {
        for (unint64_t j = 0; j != NumberOfElementsFromStaticTensorShape; ++j)
        {
          std::string v48 = (char *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&Data, j);
          std::string v49 = v48;
          std::string v50 = v68;
          if (v68 >= v69)
          {
            unint64_t v52 = (unint64_t)__p;
            uint64_t v53 = v68 - (unsigned char *)__p;
            uint64_t v54 = v68 - (unsigned char *)__p + 1;
            if (v54 < 0) {
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v55 = v69 - (unsigned char *)__p;
            if (2 * (v69 - (unsigned char *)__p) > (unint64_t)v54) {
              uint64_t v54 = 2 * v55;
            }
            if (v55 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v56 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v56 = v54;
            }
            if (v56) {
              long long v57 = (char *)operator new(v56);
            }
            else {
              long long v57 = 0;
            }
            unint64_t v58 = &v57[v53];
            v57[v53] = *v49;
            uint64_t v51 = (uint64_t)&v57[v53 + 1];
            if (v50 != (char *)v52)
            {
              long long v59 = &v50[~v52];
              do
              {
                char v60 = *--v50;
                (v59--)[(void)v57] = v60;
              }
              while (v50 != (char *)v52);
              std::string v50 = (char *)__p;
              unint64_t v58 = v57;
            }
            long long __p = v58;
            uint64_t v68 = &v57[v53 + 1];
            char v69 = &v57[v56];
            if (v50) {
              operator delete(v50);
            }
          }
          else
          {
            *uint64_t v68 = *v48;
            uint64_t v51 = (uint64_t)(v50 + 1);
          }
          uint64_t v68 = (char *)v51;
        }
      }
      (*(void (**)(uint64_t *__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&Data, a1);
      long long v61 = (unsigned __int8 *)Data;
      if (v66 == Data) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      MIL::IRTensorValueType::MakeInt8Value();
      MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v64, v61, (uint64_t *)&p_Data);
      goto LABEL_77;
    }
    uint64_t v28 = "Unsupported dtype.";
LABEL_30:
    int v29 = 3;
    goto LABEL_82;
  }
  uint64_t Data = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
  uint64_t v66 = v13;
  uint64_t v68 = 0;
  char v69 = 0;
  long long __p = 0;
  std::vector<MIL::Fp16>::reserve(&__p, NumberOfElementsFromStaticTensorShape);
  if (NumberOfElementsFromStaticTensorShape)
  {
    for (unint64_t k = 0; k != NumberOfElementsFromStaticTensorShape; ++k)
    {
      unint64_t v15 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&Data, k);
      float v16 = v15;
      float v17 = v68;
      if (v68 >= v69)
      {
        unint64_t v19 = (char *)__p;
        uint64_t v20 = v68 - (unsigned char *)__p;
        if (v68 - (unsigned char *)__p <= -3) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v20 >> 1;
        if (v69 - (unsigned char *)__p <= (unint64_t)((v20 >> 1) + 1)) {
          uint64_t v22 = v21 + 1;
        }
        else {
          uint64_t v22 = v69 - (unsigned char *)__p;
        }
        if ((unint64_t)(v69 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v23 = v22;
        }
        if (v23)
        {
          int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v69, v23);
          unint64_t v19 = (char *)__p;
          float v17 = v68;
        }
        else
        {
          int v24 = 0;
        }
        long long v25 = &v24[2 * v21];
        *(_WORD *)long long v25 = *v16;
        BOOL v18 = v25 + 2;
        while (v17 != v19)
        {
          __int16 v26 = *((_WORD *)v17 - 1);
          v17 -= 2;
          *((_WORD *)v25 - 1) = v26;
          v25 -= 2;
        }
        long long __p = v25;
        uint64_t v68 = v18;
        char v69 = &v24[2 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(_WORD *)uint64_t v68 = *v15;
        BOOL v18 = v17 + 2;
      }
      uint64_t v68 = v18;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&Data, a1);
  long long v27 = (unsigned __int8 *)Data;
  if (v66 == Data) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  MIL::IRTensorValueType::MakeFloat16Value();
  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v64, v27, (uint64_t *)&p_Data);
LABEL_77:
  uint64_t v62 = p_Data;
  p_uint64_t Data = 0;
  if (v62) {
    (*((void (**)(void **))*v62 + 1))(v62);
  }
  p_uint64_t Data = (void **)&Data;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_Data);
  if (__p)
  {
    uint64_t v68 = (char *)__p;
    operator delete(__p);
  }
  int v29 = 0;
  uint64_t v28 = (char *)&unk_210C6BFE7;
LABEL_82:
  *(_DWORD *)a3 = v29;
  return std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v28);
}

void sub_210BF3888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  uint64_t v20 = (uint64_t)a19;
  a19 = 0;
  if (v20) {
    MIL::ANEMachineIR::Interpreter::TransposeCpu::Run(v20);
  }
  a19 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::ReshapeCpu::~ReshapeCpu(MIL::ANEMachineIR::Interpreter::ReshapeCpu *this)
{
}

unint64_t MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26418A7C0, MEMORY[0x263F8C050]);
  }
  return *a1 + a2;
}

void sub_210BF39D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Util::Span<signed char const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26418A7C0, MEMORY[0x263F8C050]);
  }
  return *a1 + a2;
}

void sub_210BF3A54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu::Run(MIL::IROperation *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 11) {
      goto LABEL_10;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 11)
  {
    goto LABEL_10;
  }
  if (*(void *)v6 != 0x705F6776615F6570 || *(void *)(v6 + 3) != 0x6C6F6F705F677661)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    uint64_t v9 = a3 + 8;
    std::string::basic_string[abi:ne180100]<0>(&v125, "pe_avg_pool");
    unint64_t v10 = std::string::insert(&v125, 0, "Expected '");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v136.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    unint64_t v12 = std::string::append(&v136, "' op. Got ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v114.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
    int v15 = *(char *)(v14 + 23);
    if (v15 >= 0) {
      float v16 = (const std::string::value_type *)v14;
    }
    else {
      float v16 = *(const std::string::value_type **)v14;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      std::string::size_type v17 = *(void *)(v14 + 8);
    }
    BOOL v18 = std::string::append(&v114, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(void *)(v9 + 16) = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v9 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v114.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v136.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v20 = (void *)v125.__r_.__value_.__r.__words[0];
LABEL_22:
      operator delete(v20);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v114, "x");
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v114);
  uint64_t v22 = InterpretedTensorValue;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v114.__r_.__value_.__l.__data_);
    if (v22)
    {
LABEL_26:
      std::string::basic_string[abi:ne180100]<0>(&v114, "kernel_sizes");
      uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(ParameterValue);
      uint64_t Data = MIL::IRTensorValue::GetDataView<int>();
      std::vector<int>::size_type __n = v24;
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v114.__r_.__value_.__l.__data_);
        std::vector<int>::size_type v24 = __n;
      }
      std::vector<int>::vector((std::vector<int> *)&v125, v24);
      if (v125.__r_.__value_.__l.__size_ != v125.__r_.__value_.__r.__words[0])
      {
        unint64_t v25 = 0;
        do
        {
          __int16 v26 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v25);
          std::string::size_type v27 = v125.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v125.__r_.__value_.__r.__words[0] + 4 * v25++) = *v26;
        }
        while (v25 < (uint64_t)(v125.__r_.__value_.__l.__size_ - v27) >> 2);
      }
      std::string::basic_string[abi:ne180100]<0>(&v114, "strides");
      uint64_t v28 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(v28);
      uint64_t v121 = MIL::IRTensorValue::GetDataView<int>();
      std::vector<int>::size_type v122 = v29;
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v114.__r_.__value_.__l.__data_);
        std::vector<int>::size_type v29 = v122;
      }
      std::vector<int>::vector(&v120, v29);
      if (v120.__end_ != v120.__begin_)
      {
        unint64_t v30 = 0;
        do
        {
          uint64_t v31 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v121, v30);
          std::vector<int>::pointer begin = v120.__begin_;
          v120.__begin_[v30++] = *v31;
        }
        while (v30 < v120.__end_ - begin);
      }
      uint64_t v33 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v114, "post_scale");
      __int16 v34 = MIL::Fp16::FromFloat(v33, 1.0);
      uint64_t v35 = MIL::IROperation::TryGetParameterValue();
      if (v35)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)v35 + 40))(v35))
        {
          unint64_t v36 = (__int16 *)MEMORY[0x21667B820]();
          if (v36) {
            __int16 v34 = *v36;
          }
        }
      }
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v114.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v114, "custom_pads");
      uint64_t v37 = MIL::IROperation::TryGetParameterValue();
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v114.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v114, "include_pads");
      uint64_t v38 = MIL::IROperation::TryGetParameterValue();
      char v107 = v38
          && (*(uint64_t (**)(uint64_t))(*(void *)v38 + 40))(v38)
          && (unint64_t v39 = (unsigned char *)MEMORY[0x21667B850]()) != 0
          && *v39 != 0;
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v114.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v114, "pre_relu");
      uint64_t v40 = MIL::IROperation::TryGetParameterValue();
      char v105 = v40
          && (*(uint64_t (**)(uint64_t))(*(void *)v40 + 40))(v40)
          && (int v41 = (unsigned char *)MEMORY[0x21667B850]()) != 0
          && *v41 != 0;
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v114.__r_.__value_.__l.__data_);
      }
      uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 32))(v22);
      int v43 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 88))(v42);
      uint64_t OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      uint64_t v45 = MIL::IRValueType::AsTensorType(OutputType);
      int v108 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 88))(v45);
      uint64_t v46 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      uint64_t v47 = MIL::IRValueType::AsTensorType(v46);
      size_t v106 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 16))(v47);
      std::string v48 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 32))(v22);
      ANEMachineIR::Utils::GetStaticTensorShape(v48, v49, (uint64_t)&v118);
      std::string v50 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      uint64_t v51 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v50);
      ANEMachineIR::Utils::GetStaticTensorShape(v51, v52, (uint64_t)v117);
      int v109 = v43;
      uint64_t v110 = (uint64_t)a2;
      if (!v37)
      {
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        uint64_t v60 = 0;
LABEL_70:
        v116[0] = v37;
        v116[1] = v60;
        v116[2] = v66;
        v116[3] = v65;
        v116[4] = v64;
        v116[5] = v63;
        if (v37 || v60 || v66 || v65 || v64 || v63)
        {
          *(_DWORD *)a3 = 3;
          std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Unimplemented pad: rdar://84906152");
          goto LABEL_133;
        }
        *(_OWORD *)&v114.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v115 = 0;
        MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v114, (uint64_t)&v136);
        if (LODWORD(v114.__r_.__value_.__l.__data_))
        {
          *(_DWORD *)a3 = v114.__r_.__value_.__l.__data_;
          *(_OWORD *)(a3 + 8) = *(_OWORD *)&v114.__r_.__value_.__r.__words[1];
          *(void *)(a3 + 24) = v115;
          *(_OWORD *)&v114.__r_.__value_.__r.__words[1] = 0uLL;
          uint64_t v115 = 0;
          goto LABEL_131;
        }
        switch(v109)
        {
          case 14:
            switch(v108)
            {
              case 14:
                uint64_t v97 = MIL::IRTensorValue::GetDataView<unsigned char>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v131, (uint64_t)&v136);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v131);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v111, a1);
                long long v98 = v111;
                if (v112 == v111) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v99 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v99);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v110, v98, (uint64_t *)&v126);
                long long v100 = v126;
                std::string v126 = 0;
                if (v100) {
                  (*((void (**)(void **))*v100 + 1))(v100);
                }
                goto LABEL_129;
              case 9:
                uint64_t v89 = MIL::IRTensorValue::GetDataView<unsigned char>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v130, (uint64_t)&v136);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v130);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v111, a1);
                char v90 = v111;
                if (v112 == v111) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                long long v91 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v91);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v110, v90, (uint64_t *)&v126);
                int v92 = v126;
                std::string v126 = 0;
                if (v92) {
                  (*((void (**)(void **))*v92 + 1))(v92);
                }
                goto LABEL_129;
              case 4:
                uint64_t v76 = MIL::IRTensorValue::GetDataView<unsigned char>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v132, (uint64_t)&v136);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v132);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v111, a1);
                uint64_t v77 = v111;
                if (v112 == v111) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                std::string v78 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v78);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v110, v77, (uint64_t *)&v126);
                uint64_t v79 = v126;
                std::string v126 = 0;
                if (v79) {
                  (*((void (**)(void **))*v79 + 1))(v79);
                }
                goto LABEL_129;
            }
            break;
          case 9:
            switch(v108)
            {
              case 14:
                uint64_t v85 = MIL::IRTensorValue::GetDataView<signed char>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v128, (uint64_t)&v136);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v128);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v111, a1);
                std::vector<int> v86 = v111;
                if (v112 == v111) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                long long v87 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v87);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v110, v86, (uint64_t *)&v126);
                char v88 = v126;
                std::string v126 = 0;
                if (v88) {
                  (*((void (**)(void **))*v88 + 1))(v88);
                }
                goto LABEL_129;
              case 9:
                uint64_t v81 = MIL::IRTensorValue::GetDataView<signed char>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v127, (uint64_t)&v136);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v127);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v111, a1);
                uint64_t v82 = v111;
                if (v112 == v111) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                char v83 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v83);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v110, v82, (uint64_t *)&v126);
                long long v84 = v126;
                std::string v126 = 0;
                if (v84) {
                  (*((void (**)(void **))*v84 + 1))(v84);
                }
                goto LABEL_129;
              case 4:
                uint64_t v72 = MIL::IRTensorValue::GetDataView<signed char>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v129, (uint64_t)&v136);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v129);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v111, a1);
                unint64_t v73 = v111;
                if (v112 == v111) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                std::string v74 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v74);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v110, v73, (uint64_t *)&v126);
                uint64_t v75 = v126;
                std::string v126 = 0;
                if (v75) {
                  (*((void (**)(void **))*v75 + 1))(v75);
                }
                goto LABEL_129;
            }
            break;
          case 4:
            switch(v108)
            {
              case 14:
                uint64_t v101 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v134, (uint64_t)&v136);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v134);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v111, a1);
                int v102 = v111;
                if (v112 == v111) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                char v103 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v103);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v110, v102, (uint64_t *)&v126);
                uint64_t v104 = v126;
                std::string v126 = 0;
                if (v104) {
                  (*((void (**)(void **))*v104 + 1))(v104);
                }
                goto LABEL_129;
              case 9:
                uint64_t v93 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v133, (uint64_t)&v136);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v133);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v111, a1);
                long long v94 = v111;
                if (v112 == v111) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v95 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v95);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v110, v94, (uint64_t *)&v126);
                std::string::size_type v96 = v126;
                std::string v126 = 0;
                if (v96) {
                  (*((void (**)(void **))*v96 + 1))(v96);
                }
                goto LABEL_129;
              case 4:
                uint64_t v68 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v135, (uint64_t)&v136);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v135);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v111, a1);
                char v69 = v111;
                if (v112 == v111) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v70 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v70);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v110, v69, (uint64_t *)&v126);
                unint64_t v71 = v126;
                std::string v126 = 0;
                if (v71) {
                  (*((void (**)(void **))*v71 + 1))(v71);
                }
LABEL_129:
                std::string v126 = (void **)&v111;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v126);
                *(_DWORD *)a3 = 0;
                std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                goto LABEL_131;
            }
            break;
          default:
            uint64_t v80 = "Unimplemented input dtype";
LABEL_105:
            *(_DWORD *)a3 = 3;
            std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v80);
LABEL_131:
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](&v136);
            if (SHIBYTE(v115) < 0) {
              operator delete((void *)v114.__r_.__value_.__l.__size_);
            }
LABEL_133:
            if (v117[0])
            {
              v117[1] = v117[0];
              operator delete(v117[0]);
            }
            if (v118)
            {
              std::string v119 = v118;
              operator delete(v118);
            }
            if (v120.__begin_)
            {
              v120.__end_ = v120.__begin_;
              operator delete(v120.__begin_);
            }
            uint64_t v20 = (void *)v125.__r_.__value_.__r.__words[0];
            if (v125.__r_.__value_.__r.__words[0])
            {
              v125.__r_.__value_.__l.__size_ = v125.__r_.__value_.__r.__words[0];
              goto LABEL_22;
            }
            return;
        }
        uint64_t v80 = "Unimplemented output dtype";
        goto LABEL_105;
      }
      __int16 v53 = v34;
      unint64_t v55 = v118;
      uint64_t v54 = v119;
      MIL::IRValue::AsTensor((MIL::IRValue *)v37);
      uint64_t v56 = MIL::IRTensorValue::GetDataView<int>();
      uint64_t v57 = (v54 - v55) >> 3;
      unint64_t v58 = v57 - 2;
      v114.__r_.__value_.__r.__words[0] = v56;
      v114.__r_.__value_.__l.__size_ = v59;
      if (v57 == 5)
      {
        uint64_t v37 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v114, 0);
        uint64_t v60 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v114, 1uLL);
      }
      else
      {
        if (v58 <= 1)
        {
          uint64_t v37 = 0;
          uint64_t v60 = 0;
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          uint64_t v67 = 2 * v58;
          goto LABEL_69;
        }
        uint64_t v37 = 0;
        uint64_t v60 = 0;
      }
      uint64_t v67 = 2 * v58;
      uint64_t v66 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v114, 2 * v58 - 4);
      uint64_t v65 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v114, 2 * v58 - 3);
LABEL_69:
      uint64_t v64 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v114, v67 - 2);
      uint64_t v63 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v114, v67 - 1);
      __int16 v34 = v53;
      goto LABEL_70;
    }
  }
  else if (InterpretedTensorValue)
  {
    goto LABEL_26;
  }
  *(_DWORD *)a3 = 2;
  std::string::basic_string[abi:ne180100]<0>(&v114, "x");
  long long v61 = std::string::insert(&v114, 0, "No value for ");
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  *(void *)(a3 + 24) = *((void *)&v61->__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 8) = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v20 = (void *)v114.__r_.__value_.__r.__words[0];
    goto LABEL_22;
  }
}

void sub_210BF4D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)(v46 - 128));
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a36) {
    operator delete(a36);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a46) {
    operator delete(a46);
  }
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, void *a9@<X8>, char a10, char a11, uint64_t a12)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  __int16 v115 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  std::string::size_type v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 3;
  if (v19 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    uint64_t v85 = "x_rank == o_shape.size()";
    int v86 = 64;
    goto LABEL_84;
  }
  unint64_t v20 = v19 - 2;
  uint64_t v21 = *(_DWORD **)a5;
  if (v19 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    uint64_t v85 = "kernel_sizes.size() == num_spatial_dims";
    int v86 = 65;
    goto LABEL_84;
  }
  uint64_t v22 = *(_DWORD **)a6;
  if (v20 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    uint64_t v85 = "strides.size() == num_spatial_dims";
    int v86 = 66;
LABEL_84:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v86, v85);
  }
  if (v19 == 5)
  {
    if (*v21 == 1)
    {
      if (*v22 == 1)
      {
        uint64_t v23 = v22 + 2;
        uint64_t v91 = (int)v22[1];
        std::vector<int>::size_type v24 = v21 + 2;
        uint64_t v100 = (int)v21[1];
        goto LABEL_11;
      }
      long long v87 = "sz == 1";
      int v88 = 77;
    }
    else
    {
      long long v87 = "kd == 1";
      int v88 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v88, v87);
  }
  if (v20 <= 1)
  {
    uint64_t v27 = 4 * v19 - 12;
    std::vector<int>::size_type v24 = (_DWORD *)((char *)v21 + v27);
    uint64_t v23 = (_DWORD *)((char *)v22 + v27);
    uint64_t v100 = 1;
    uint64_t v91 = 1;
  }
  else
  {
    uint64_t v25 = 4 * v19 - 16;
    uint64_t v100 = *(int *)((char *)v21 + v25);
    uint64_t v26 = 4 * v19 - 12;
    std::vector<int>::size_type v24 = (_DWORD *)((char *)v21 + v26);
    uint64_t v91 = *(int *)((char *)v22 + v25);
    uint64_t v23 = (_DWORD *)((char *)v22 + v26);
  }
LABEL_11:
  uint64_t v93 = *v23;
  unsigned int v101 = *v24;
  uint64_t v112 = 0;
  int v113 = 0;
  uint64_t v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v112, v17, v18, v19);
  long long __p = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v19 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v112, (uint64_t)(v112 + 8), __src.i8, v119, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v119, 2);
    uint64_t v29 = v100;
  }
  else
  {
    BOOL v28 = v19 == 4;
    uint64_t v29 = v100;
    if (v28)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v112, v112 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
    }
  }
  uint64_t v30 = *(void *)__p;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v92 = *((void *)__p + 2);
  uint64_t v94 = *((void *)__p + 3);
  unint64_t v97 = *((void *)__p + 4);
  uint64_t v99 = *((void *)v112 + 2);
  uint64_t v102 = *((void *)v112 + 3);
  v117[0] = &unk_26C319B10;
  v117[3] = v117;
  if (a11)
  {
    __src.i64[0] = (uint64_t)&unk_26C319B90;
    p_src = &__src;
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](&__src, v117);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](&__src);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v115);
  LODWORD(v107) = v32;
  std::vector<float>::vector(&__src, v97, &v107);
  if (v30)
  {
    uint64_t v104 = 0;
    int v33 = v101;
    if (v101 <= 1) {
      int v33 = 1;
    }
    uint64_t v34 = v33;
    uint64_t v89 = v30;
    uint64_t v90 = v31;
    do
    {
      if (!v31) {
        goto LABEL_73;
      }
      uint64_t v35 = 0;
      do
      {
        if (!v92) {
          goto LABEL_72;
        }
        for (uint64_t i = 0; i != v92; ++i)
        {
          if (!v94) {
            continue;
          }
          uint64_t v36 = 0;
          for (uint64_t j = 0; j != v94; ++j)
          {
            if (!v97) {
              goto LABEL_70;
            }
            for (uint64_t k = 0; k != v97; ++k)
            {
              float v108 = 0.0;
              long long v107 = xmmword_210C6B69C;
              if (!v29)
              {
                uint64_t v39 = 0;
                float v63 = 5.0;
                goto LABEL_60;
              }
              uint64_t v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v40 = v38 + i * v91;
                if ((a10 & 1) == 0 && (v40 < *(int *)(a7 + 8) || v40 >= v99 - *(int *)(a7 + 12))) {
                  goto LABEL_56;
                }
                float v106 = 0.0;
                *(_OWORD *)char v105 = xmmword_210C6B69C;
                if (v101)
                {
                  uint64_t v41 = a7;
                  uint64_t v42 = 0;
                  do
                  {
                    unint64_t v43 = v36 + v42;
                    if ((a10 & 1) != 0 || v43 >= *(int *)(v41 + 16) && v43 < v102 - *(int *)(v41 + 20))
                    {
                      LOWORD(__e) = std::function<MIL::Fp16 ()(MIL::Fp16)>::operator()((uint64_t)v117, *(_WORD *)(a1 + 2 * Index));
                      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                      float v46 = v45 * *(float *)(__src.i64[0] + 4 * k);
                      float v47 = 0.0;
                      if (v46 != 0.0)
                      {
                        int __e = 0;
                        long double v48 = frexp(v46, &__e);
                        double v49 = ldexp(v48, 11);
                        float v47 = ldexp(round(v49), __e - 11);
                      }
                      *(float *)&v105[v42] = v47;
                      ++v39;
                    }
                    ++v42;
                  }
                  while (v34 != v42);
                  float v50 = *(float *)v105 + *(float *)&v105[1];
                  float v51 = 0.0;
                  a7 = v41;
                  uint64_t v29 = v100;
                  if ((float)(*(float *)v105 + *(float *)&v105[1]) == 0.0) {
                    goto LABEL_49;
                  }
                }
                else
                {
                  float v50 = 5.0;
                }
                int __e = 0;
                long double v52 = frexp(v50, &__e);
                double v53 = ldexp(v52, 11);
                float v51 = ldexp(round(v53), __e - 11);
LABEL_49:
                float v54 = 0.0;
                float v55 = 0.0;
                if ((float)(v51 + *(float *)&v105[2]) != 0.0)
                {
                  int __e = 0;
                  long double v56 = frexp((float)(v51 + *(float *)&v105[2]), &__e);
                  double v57 = ldexp(v56, 11);
                  float v55 = ldexp(round(v57), __e - 11);
                }
                if ((float)(*(float *)&v105[3] + v106) != 0.0)
                {
                  int __e = 0;
                  long double v58 = frexp((float)(*(float *)&v105[3] + v106), &__e);
                  double v59 = ldexp(v58, 11);
                  float v54 = ldexp(round(v59), __e - 11);
                }
                float v60 = 0.0;
                if ((float)(v55 + v54) != 0.0)
                {
                  int __e = 0;
                  long double v61 = frexp((float)(v55 + v54), &__e);
                  double v62 = ldexp(v61, 11);
                  float v60 = ldexp(round(v62), __e - 11);
                }
                *((float *)&v107 + v38) = v60;
LABEL_56:
                ++v38;
              }
              while (v38 != v29);
              float v63 = *(float *)&v107 + *((float *)&v107 + 1);
              float v64 = 0.0;
              if ((float)(*(float *)&v107 + *((float *)&v107 + 1)) != 0.0)
              {
LABEL_60:
                v105[0] = 0;
                long double v65 = frexp(v63, v105);
                double v66 = ldexp(v65, 11);
                float v64 = ldexp(round(v66), v105[0] - 11);
              }
              float v67 = 0.0;
              float v68 = 0.0;
              if ((float)(v64 + *((float *)&v107 + 2)) != 0.0)
              {
                v105[0] = 0;
                long double v69 = frexp((float)(v64 + *((float *)&v107 + 2)), v105);
                double v70 = ldexp(v69, 11);
                float v68 = ldexp(round(v70), v105[0] - 11);
              }
              if ((float)(*((float *)&v107 + 3) + v108) != 0.0)
              {
                v105[0] = 0;
                long double v71 = frexp((float)(*((float *)&v107 + 3) + v108), v105);
                double v72 = ldexp(v71, 11);
                float v67 = ldexp(round(v72), v105[0] - 11);
              }
              float v73 = v68 + v67;
              float v74 = 0.0;
              if (v73 != 0.0)
              {
                v105[0] = 0;
                long double v75 = frexp(v73, v105);
                double v76 = ldexp(v75, 11);
                float v74 = ldexp(round(v76), v105[0] - 11);
              }
              LOWORD(v105[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v39];
              MIL::Fp16::GetFloat((MIL::Fp16 *)v105);
              float v78 = v74 * v77;
              float v79 = 0.0;
              if (v78 != 0.0)
              {
                v105[0] = 0;
                long double v80 = frexp(v78, v105);
                double v81 = ldexp(v80, 11);
                float v79 = ldexp(round(v81), v105[0] - 11);
              }
              uint64_t v82 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a12, v79);
              __int16 v84 = MIL::Fp16::FromFloat(v82, v83);
              *(_WORD *)(*a9
            }
LABEL_70:
            v36 += v93;
          }
        }
LABEL_72:
        ++v35;
        uint64_t v31 = v90;
      }
      while (v35 != v90);
LABEL_73:
      ++v104;
    }
    while (v104 != v89);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v117);
  if (__p)
  {
    uint64_t v110 = __p;
    operator delete(__p);
  }
  if (v112)
  {
    int v113 = v112;
    operator delete(v112);
  }
}

void sub_210BF5974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v39 = *(void **)(v37 - 208);
  if (v39)
  {
    *(void *)(v37 - 200) = v39;
    operator delete(v39);
  }
  unint64_t v40 = *(void **)a16;
  if (*(void *)a16)
  {
    *(void *)(a16 + 8) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  __int16 v115 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  float v16 = *(const void **)a3;
  uint64_t v17 = *(void *)(a3 + 8);
  unint64_t v18 = (v17 - *(void *)a3) >> 3;
  if (v18 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    uint64_t v85 = "x_rank == o_shape.size()";
    int v86 = 64;
    goto LABEL_92;
  }
  unint64_t v19 = v18 - 2;
  unint64_t v20 = *(_DWORD **)a5;
  if (v18 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    uint64_t v85 = "kernel_sizes.size() == num_spatial_dims";
    int v86 = 65;
    goto LABEL_92;
  }
  uint64_t v21 = *(_DWORD **)a6;
  if (v19 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    uint64_t v85 = "strides.size() == num_spatial_dims";
    int v86 = 66;
LABEL_92:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v86, v85);
  }
  if (v18 == 5)
  {
    uint64_t v22 = a7;
    if (*v20 == 1)
    {
      if (*v21 == 1)
      {
        uint64_t v23 = v21 + 2;
        uint64_t v91 = (int)v21[1];
        std::vector<int>::size_type v24 = v20 + 2;
        uint64_t v101 = (int)v20[1];
        goto LABEL_13;
      }
      long long v87 = "sz == 1";
      int v88 = 77;
    }
    else
    {
      long long v87 = "kd == 1";
      int v88 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v88, v87);
  }
  BOOL v25 = v19 > 1;
  uint64_t v22 = a7;
  uint64_t v26 = v18;
  if (v25)
  {
    uint64_t v27 = v26 * 4 - 16;
    uint64_t v101 = (int)v20[v26 - 4];
    uint64_t v28 = v26 * 4 - 12;
    std::vector<int>::size_type v24 = &v20[v26 - 3];
    uint64_t v91 = *(int *)((char *)v21 + v27);
    uint64_t v23 = (_DWORD *)((char *)v21 + v28);
  }
  else
  {
    uint64_t v29 = v26 * 4 - 12;
    std::vector<int>::size_type v24 = &v20[v26 - 3];
    uint64_t v23 = (_DWORD *)((char *)v21 + v29);
    uint64_t v101 = 1;
    uint64_t v91 = 1;
  }
LABEL_13:
  uint64_t v93 = *v23;
  unsigned int v100 = *v24;
  uint64_t v112 = 0;
  int v113 = 0;
  uint64_t v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v112, v16, v17, v18);
  long long __p = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v112, (uint64_t)(v112 + 8), __src.i8, v119, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v119, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v112, v112 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v30 = *(void *)__p;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v92 = *((void *)__p + 2);
  uint64_t v94 = *((void *)__p + 3);
  unint64_t v97 = *((void *)__p + 4);
  uint64_t v99 = *((void *)v112 + 2);
  uint64_t v102 = *((void *)v112 + 3);
  v117[0] = &unk_26C319C10;
  v117[3] = v117;
  if (a11)
  {
    __src.i64[0] = (uint64_t)&unk_26C319C90;
    p_src = &__src;
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](&__src, v117);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](&__src);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v115);
  LODWORD(v107) = v32;
  std::vector<float>::vector(&__src, v97, &v107);
  if (v30)
  {
    uint64_t v33 = 0;
    int v34 = v100;
    if (v100 <= 1) {
      int v34 = 1;
    }
    uint64_t v35 = v34;
    uint64_t v89 = v30;
    uint64_t v90 = v31;
    do
    {
      if (!v31) {
        goto LABEL_81;
      }
      uint64_t v36 = 0;
      do
      {
        if (!v92) {
          goto LABEL_80;
        }
        for (uint64_t i = 0; i != v92; ++i)
        {
          if (!v94) {
            continue;
          }
          uint64_t v37 = 0;
          for (uint64_t j = 0; j != v94; ++j)
          {
            if (!v97) {
              goto LABEL_78;
            }
            for (uint64_t k = 0; k != v97; ++k)
            {
              float v108 = 0.0;
              long long v107 = xmmword_210C6B69C;
              if (!v101)
              {
                uint64_t v40 = 0;
                float v63 = 5.0;
                goto LABEL_61;
              }
              uint64_t v39 = 0;
              uint64_t v40 = 0;
              do
              {
                unint64_t v41 = v39 + i * v91;
                if ((a10 & 1) == 0 && (v41 < *(int *)(v22 + 8) || v41 >= v99 - *(int *)(v22 + 12))) {
                  goto LABEL_57;
                }
                float v106 = 0.0;
                *(_OWORD *)char v105 = xmmword_210C6B69C;
                if (v100)
                {
                  uint64_t v42 = 0;
                  do
                  {
                    unint64_t v43 = v37 + v42;
                    if ((a10 & 1) != 0 || v43 >= *(int *)(a7 + 16) && v43 < v102 - *(int *)(a7 + 20))
                    {
                      LOWORD(__e) = std::function<MIL::Fp16 ()(MIL::Fp16)>::operator()((uint64_t)v117, *(_WORD *)(a1 + 2 * Index));
                      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                      float v46 = v45 * *(float *)(__src.i64[0] + 4 * k);
                      float v47 = 0.0;
                      if (v46 != 0.0)
                      {
                        int __e = 0;
                        long double v48 = frexp(v46, &__e);
                        double v49 = ldexp(v48, 11);
                        float v47 = ldexp(round(v49), __e - 11);
                      }
                      *(float *)&v105[v42] = v47;
                      ++v40;
                    }
                    ++v42;
                  }
                  while (v35 != v42);
                  float v50 = *(float *)v105 + *(float *)&v105[1];
                  float v51 = 0.0;
                  uint64_t v22 = a7;
                  if ((float)(*(float *)v105 + *(float *)&v105[1]) == 0.0) {
                    goto LABEL_50;
                  }
                }
                else
                {
                  float v50 = 5.0;
                }
                int __e = 0;
                long double v52 = frexp(v50, &__e);
                double v53 = ldexp(v52, 11);
                float v51 = ldexp(round(v53), __e - 11);
LABEL_50:
                float v54 = 0.0;
                float v55 = 0.0;
                if ((float)(v51 + *(float *)&v105[2]) != 0.0)
                {
                  int __e = 0;
                  long double v56 = frexp((float)(v51 + *(float *)&v105[2]), &__e);
                  double v57 = ldexp(v56, 11);
                  float v55 = ldexp(round(v57), __e - 11);
                }
                if ((float)(*(float *)&v105[3] + v106) != 0.0)
                {
                  int __e = 0;
                  long double v58 = frexp((float)(*(float *)&v105[3] + v106), &__e);
                  double v59 = ldexp(v58, 11);
                  float v54 = ldexp(round(v59), __e - 11);
                }
                float v60 = 0.0;
                if ((float)(v55 + v54) != 0.0)
                {
                  int __e = 0;
                  long double v61 = frexp((float)(v55 + v54), &__e);
                  double v62 = ldexp(v61, 11);
                  float v60 = ldexp(round(v62), __e - 11);
                }
                *((float *)&v107 + v39) = v60;
LABEL_57:
                ++v39;
              }
              while (v39 != v101);
              float v63 = *(float *)&v107 + *((float *)&v107 + 1);
              float v64 = 0.0;
              if ((float)(*(float *)&v107 + *((float *)&v107 + 1)) != 0.0)
              {
LABEL_61:
                v105[0] = 0;
                long double v65 = frexp(v63, v105);
                double v66 = ldexp(v65, 11);
                float v64 = ldexp(round(v66), v105[0] - 11);
              }
              float v67 = 0.0;
              float v68 = 0.0;
              if ((float)(v64 + *((float *)&v107 + 2)) != 0.0)
              {
                v105[0] = 0;
                long double v69 = frexp((float)(v64 + *((float *)&v107 + 2)), v105);
                double v70 = ldexp(v69, 11);
                float v68 = ldexp(round(v70), v105[0] - 11);
              }
              if ((float)(*((float *)&v107 + 3) + v108) != 0.0)
              {
                v105[0] = 0;
                long double v71 = frexp((float)(*((float *)&v107 + 3) + v108), v105);
                double v72 = ldexp(v71, 11);
                float v67 = ldexp(round(v72), v105[0] - 11);
              }
              float v73 = v68 + v67;
              float v74 = 0.0;
              if (v73 != 0.0)
              {
                v105[0] = 0;
                long double v75 = frexp(v73, v105);
                double v76 = ldexp(v75, 11);
                float v74 = ldexp(round(v76), v105[0] - 11);
              }
              LOWORD(v105[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v40];
              MIL::Fp16::GetFloat((MIL::Fp16 *)v105);
              float v78 = v74 * v77;
              float v79 = 0.0;
              if (v78 != 0.0)
              {
                v105[0] = 0;
                long double v80 = frexp(v78, v105);
                double v81 = ldexp(v80, 11);
                float v79 = ldexp(round(v81), v105[0] - 11);
              }
              std::function<float ()(float)>::operator()(a12, v79);
              if (v82 == INFINITY)
              {
                LOBYTE(v83) = -1;
              }
              else if (v82 == -INFINITY)
              {
                LOBYTE(v83) = 0;
              }
              else
              {
                int v84 = llroundf(v82);
                if (v84 >= 255) {
                  int v84 = 255;
                }
                int v83 = v84 & ~(v84 >> 31);
              }
            }
LABEL_78:
            v37 += v93;
          }
        }
LABEL_80:
        ++v36;
        uint64_t v31 = v90;
      }
      while (v36 != v90);
LABEL_81:
      ++v33;
    }
    while (v33 != v89);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v117);
  if (__p)
  {
    uint64_t v110 = __p;
    operator delete(__p);
  }
  if (v112)
  {
    int v113 = v112;
    operator delete(v112);
  }
}

void sub_210BF62C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v41 = *(void **)(v39 - 208);
  if (v41)
  {
    *(void *)(v39 - 200) = v41;
    operator delete(v41);
  }
  uint64_t v42 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  __int16 v115 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  float v16 = *(const void **)a3;
  uint64_t v17 = *(void *)(a3 + 8);
  unint64_t v18 = (v17 - *(void *)a3) >> 3;
  if (v18 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    uint64_t v85 = "x_rank == o_shape.size()";
    int v86 = 64;
    goto LABEL_94;
  }
  unint64_t v19 = v18 - 2;
  unint64_t v20 = *(_DWORD **)a5;
  if (v18 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    uint64_t v85 = "kernel_sizes.size() == num_spatial_dims";
    int v86 = 65;
    goto LABEL_94;
  }
  uint64_t v21 = *(_DWORD **)a6;
  if (v19 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    uint64_t v85 = "strides.size() == num_spatial_dims";
    int v86 = 66;
LABEL_94:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v86, v85);
  }
  if (v18 == 5)
  {
    uint64_t v22 = a7;
    if (*v20 == 1)
    {
      if (*v21 == 1)
      {
        uint64_t v23 = v21 + 2;
        uint64_t v91 = (int)v21[1];
        std::vector<int>::size_type v24 = v20 + 2;
        uint64_t v101 = (int)v20[1];
        goto LABEL_13;
      }
      long long v87 = "sz == 1";
      int v88 = 77;
    }
    else
    {
      long long v87 = "kd == 1";
      int v88 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v88, v87);
  }
  BOOL v25 = v19 > 1;
  uint64_t v22 = a7;
  uint64_t v26 = v18;
  if (v25)
  {
    uint64_t v27 = v26 * 4 - 16;
    uint64_t v101 = (int)v20[v26 - 4];
    uint64_t v28 = v26 * 4 - 12;
    std::vector<int>::size_type v24 = &v20[v26 - 3];
    uint64_t v91 = *(int *)((char *)v21 + v27);
    uint64_t v23 = (_DWORD *)((char *)v21 + v28);
  }
  else
  {
    uint64_t v29 = v26 * 4 - 12;
    std::vector<int>::size_type v24 = &v20[v26 - 3];
    uint64_t v23 = (_DWORD *)((char *)v21 + v29);
    uint64_t v101 = 1;
    uint64_t v91 = 1;
  }
LABEL_13:
  uint64_t v93 = *v23;
  unsigned int v100 = *v24;
  uint64_t v112 = 0;
  int v113 = 0;
  uint64_t v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v112, v16, v17, v18);
  long long __p = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v112, (uint64_t)(v112 + 8), __src.i8, v119, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v119, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v112, v112 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v30 = *(void *)__p;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v92 = *((void *)__p + 2);
  uint64_t v94 = *((void *)__p + 3);
  unint64_t v97 = *((void *)__p + 4);
  uint64_t v99 = *((void *)v112 + 2);
  uint64_t v102 = *((void *)v112 + 3);
  v117[0] = &unk_26C319D10;
  v117[3] = v117;
  if (a11)
  {
    __src.i64[0] = (uint64_t)&unk_26C319D90;
    p_src = &__src;
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](&__src, v117);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](&__src);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v115);
  LODWORD(v107) = v32;
  std::vector<float>::vector(&__src, v97, &v107);
  if (v30)
  {
    uint64_t v33 = 0;
    int v34 = v100;
    if (v100 <= 1) {
      int v34 = 1;
    }
    uint64_t v35 = v34;
    uint64_t v89 = v30;
    uint64_t v90 = v31;
    do
    {
      if (!v31) {
        goto LABEL_83;
      }
      uint64_t v36 = 0;
      do
      {
        if (!v92) {
          goto LABEL_82;
        }
        for (uint64_t i = 0; i != v92; ++i)
        {
          if (!v94) {
            continue;
          }
          uint64_t v37 = 0;
          for (uint64_t j = 0; j != v94; ++j)
          {
            if (!v97) {
              goto LABEL_80;
            }
            for (uint64_t k = 0; k != v97; ++k)
            {
              float v108 = 0.0;
              long long v107 = xmmword_210C6B69C;
              if (!v101)
              {
                uint64_t v40 = 0;
                float v63 = 5.0;
                goto LABEL_61;
              }
              uint64_t v39 = 0;
              uint64_t v40 = 0;
              do
              {
                unint64_t v41 = v39 + i * v91;
                if ((a10 & 1) == 0 && (v41 < *(int *)(v22 + 8) || v41 >= v99 - *(int *)(v22 + 12))) {
                  goto LABEL_57;
                }
                float v106 = 0.0;
                *(_OWORD *)char v105 = xmmword_210C6B69C;
                if (v100)
                {
                  uint64_t v42 = 0;
                  do
                  {
                    unint64_t v43 = v37 + v42;
                    if ((a10 & 1) != 0 || v43 >= *(int *)(a7 + 16) && v43 < v102 - *(int *)(a7 + 20))
                    {
                      LOWORD(__e) = std::function<MIL::Fp16 ()(MIL::Fp16)>::operator()((uint64_t)v117, *(_WORD *)(a1 + 2 * Index));
                      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                      float v46 = v45 * *(float *)(__src.i64[0] + 4 * k);
                      float v47 = 0.0;
                      if (v46 != 0.0)
                      {
                        int __e = 0;
                        long double v48 = frexp(v46, &__e);
                        double v49 = ldexp(v48, 11);
                        float v47 = ldexp(round(v49), __e - 11);
                      }
                      *(float *)&v105[v42] = v47;
                      ++v40;
                    }
                    ++v42;
                  }
                  while (v35 != v42);
                  float v50 = *(float *)v105 + *(float *)&v105[1];
                  float v51 = 0.0;
                  uint64_t v22 = a7;
                  if ((float)(*(float *)v105 + *(float *)&v105[1]) == 0.0) {
                    goto LABEL_50;
                  }
                }
                else
                {
                  float v50 = 5.0;
                }
                int __e = 0;
                long double v52 = frexp(v50, &__e);
                double v53 = ldexp(v52, 11);
                float v51 = ldexp(round(v53), __e - 11);
LABEL_50:
                float v54 = 0.0;
                float v55 = 0.0;
                if ((float)(v51 + *(float *)&v105[2]) != 0.0)
                {
                  int __e = 0;
                  long double v56 = frexp((float)(v51 + *(float *)&v105[2]), &__e);
                  double v57 = ldexp(v56, 11);
                  float v55 = ldexp(round(v57), __e - 11);
                }
                if ((float)(*(float *)&v105[3] + v106) != 0.0)
                {
                  int __e = 0;
                  long double v58 = frexp((float)(*(float *)&v105[3] + v106), &__e);
                  double v59 = ldexp(v58, 11);
                  float v54 = ldexp(round(v59), __e - 11);
                }
                float v60 = 0.0;
                if ((float)(v55 + v54) != 0.0)
                {
                  int __e = 0;
                  long double v61 = frexp((float)(v55 + v54), &__e);
                  double v62 = ldexp(v61, 11);
                  float v60 = ldexp(round(v62), __e - 11);
                }
                *((float *)&v107 + v39) = v60;
LABEL_57:
                ++v39;
              }
              while (v39 != v101);
              float v63 = *(float *)&v107 + *((float *)&v107 + 1);
              float v64 = 0.0;
              if ((float)(*(float *)&v107 + *((float *)&v107 + 1)) != 0.0)
              {
LABEL_61:
                v105[0] = 0;
                long double v65 = frexp(v63, v105);
                double v66 = ldexp(v65, 11);
                float v64 = ldexp(round(v66), v105[0] - 11);
              }
              float v67 = 0.0;
              float v68 = 0.0;
              if ((float)(v64 + *((float *)&v107 + 2)) != 0.0)
              {
                v105[0] = 0;
                long double v69 = frexp((float)(v64 + *((float *)&v107 + 2)), v105);
                double v70 = ldexp(v69, 11);
                float v68 = ldexp(round(v70), v105[0] - 11);
              }
              if ((float)(*((float *)&v107 + 3) + v108) != 0.0)
              {
                v105[0] = 0;
                long double v71 = frexp((float)(*((float *)&v107 + 3) + v108), v105);
                double v72 = ldexp(v71, 11);
                float v67 = ldexp(round(v72), v105[0] - 11);
              }
              float v73 = v68 + v67;
              float v74 = 0.0;
              if (v73 != 0.0)
              {
                v105[0] = 0;
                long double v75 = frexp(v73, v105);
                double v76 = ldexp(v75, 11);
                float v74 = ldexp(round(v76), v105[0] - 11);
              }
              LOWORD(v105[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v40];
              MIL::Fp16::GetFloat((MIL::Fp16 *)v105);
              float v78 = v74 * v77;
              float v79 = 0.0;
              if (v78 != 0.0)
              {
                v105[0] = 0;
                long double v80 = frexp(v78, v105);
                double v81 = ldexp(v80, 11);
                float v79 = ldexp(round(v81), v105[0] - 11);
              }
              std::function<float ()(float)>::operator()(a12, v79);
              if (v82 == INFINITY)
              {
                char v83 = 127;
              }
              else if (v82 == -INFINITY)
              {
                char v83 = 0x80;
              }
              else
              {
                int v84 = llroundf(v82);
                if (v84 >= 127) {
                  int v84 = 127;
                }
                if (v84 <= -128) {
                  char v83 = 0x80;
                }
                else {
                  char v83 = v84;
                }
              }
            }
LABEL_80:
            v37 += v93;
          }
        }
LABEL_82:
        ++v36;
        uint64_t v31 = v90;
      }
      while (v36 != v90);
LABEL_83:
      ++v33;
    }
    while (v33 != v89);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v117);
  if (__p)
  {
    uint64_t v110 = __p;
    operator delete(__p);
  }
  if (v112)
  {
    int v113 = v112;
    operator delete(v112);
  }
}

void sub_210BF6C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v41 = *(void **)(v39 - 208);
  if (v41)
  {
    *(void *)(v39 - 200) = v41;
    operator delete(v41);
  }
  uint64_t v42 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, void *a9@<X8>, char a10, uint64_t a11)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  __int16 v117 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  float v16 = *(const void **)a3;
  uint64_t v17 = *(void *)(a3 + 8);
  unint64_t v18 = (v17 - *(void *)a3) >> 3;
  if (v18 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v86 = "x_rank == o_shape.size()";
    int v87 = 64;
    goto LABEL_82;
  }
  unint64_t v19 = v18 - 2;
  unint64_t v20 = *(_DWORD **)a5;
  if (v18 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    int v86 = "kernel_sizes.size() == num_spatial_dims";
    int v87 = 65;
    goto LABEL_82;
  }
  uint64_t v21 = *(_DWORD **)a6;
  if (v19 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    int v86 = "strides.size() == num_spatial_dims";
    int v87 = 66;
LABEL_82:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v87, v86);
  }
  if (v18 == 5)
  {
    if (*v20 == 1)
    {
      if (*v21 == 1)
      {
        uint64_t v22 = v21 + 2;
        uint64_t v92 = (int)v21[1];
        uint64_t v23 = v20 + 2;
        uint64_t v101 = (int)v20[1];
        goto LABEL_11;
      }
      int v88 = "sz == 1";
      int v89 = 77;
    }
    else
    {
      int v88 = "kd == 1";
      int v89 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v89, v88);
  }
  if (v19 <= 1)
  {
    uint64_t v26 = 4 * v18 - 12;
    uint64_t v23 = (_DWORD *)((char *)v20 + v26);
    uint64_t v22 = (_DWORD *)((char *)v21 + v26);
    uint64_t v101 = 1;
    uint64_t v92 = 1;
  }
  else
  {
    uint64_t v24 = 4 * v18 - 16;
    uint64_t v101 = *(int *)((char *)v20 + v24);
    uint64_t v25 = 4 * v18 - 12;
    uint64_t v23 = (_DWORD *)((char *)v20 + v25);
    uint64_t v92 = *(int *)((char *)v21 + v24);
    uint64_t v22 = (_DWORD *)((char *)v21 + v25);
  }
LABEL_11:
  uint64_t v94 = *v22;
  unsigned int v102 = *v23;
  uint64_t v114 = 0;
  __int16 v115 = 0;
  uint64_t v116 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v114, v16, v17, v18);
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v111, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v114, (uint64_t)(v114 + 8), __src.i8, v120, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v111, (uint64_t)(v111 + 8), __src.i8, v120, 2);
    uint64_t v28 = v101;
  }
  else
  {
    BOOL v27 = v18 == 4;
    uint64_t v28 = v101;
    if (v27)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v114, v114 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v111, v111 + 8, &__src);
    }
  }
  uint64_t v29 = *(void *)v111;
  uint64_t v30 = *((void *)v111 + 1);
  uint64_t v93 = *((void *)v111 + 2);
  unint64_t v31 = *((void *)v111 + 4);
  uint64_t v95 = *((void *)v111 + 3);
  uint64_t v100 = *((void *)v114 + 2);
  uint64_t v103 = *((void *)v114 + 3);
  __src.i64[0] = (uint64_t)&unk_26C319E10;
  p_src = &__src;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v117);
  LODWORD(v108) = v32;
  std::vector<float>::vector(__p, v31, &v108);
  unint64_t v96 = v31;
  if (v29)
  {
    uint64_t v105 = 0;
    int v33 = v102;
    if (v102 <= 1) {
      int v33 = 1;
    }
    uint64_t v34 = v33;
    uint64_t v90 = v29;
    uint64_t v91 = v30;
    do
    {
      if (!v30) {
        goto LABEL_71;
      }
      uint64_t v35 = 0;
      do
      {
        unint64_t v36 = v96;
        if (!v93) {
          goto LABEL_70;
        }
        for (uint64_t i = 0; i != v93; ++i)
        {
          if (!v95) {
            continue;
          }
          uint64_t v37 = 0;
          for (uint64_t j = 0; j != v95; ++j)
          {
            if (!v36) {
              goto LABEL_68;
            }
            for (uint64_t k = 0; k != v36; ++k)
            {
              float v109 = 0.0;
              long long v108 = xmmword_210C6B69C;
              if (!v28)
              {
                uint64_t v40 = 0;
                float v64 = 5.0;
                goto LABEL_58;
              }
              uint64_t v39 = 0;
              uint64_t v40 = 0;
              do
              {
                unint64_t v41 = v39 + i * v92;
                if ((a10 & 1) == 0 && (v41 < *(int *)(a7 + 8) || v41 >= v100 - *(int *)(a7 + 12))) {
                  goto LABEL_54;
                }
                float v107 = 0.0;
                *(_OWORD *)float v106 = xmmword_210C6B69C;
                if (v102)
                {
                  uint64_t v42 = a7;
                  uint64_t v43 = 0;
                  do
                  {
                    unint64_t v44 = v37 + v43;
                    if ((a10 & 1) != 0 || v44 >= *(int *)(v42 + 16) && v44 < v103 - *(int *)(v42 + 20))
                    {
                      unsigned int v46 = std::function<unsigned char ()(unsigned char)>::operator()((uint64_t)&__src, *(unsigned char *)(a1 + Index));
                      float v47 = *((float *)__p[0] + k) * (float)v46;
                      float v48 = 0.0;
                      if (v47 != 0.0)
                      {
                        int __e = 0;
                        long double v49 = frexp(v47, &__e);
                        double v50 = ldexp(v49, 11);
                        float v48 = ldexp(round(v50), __e - 11);
                      }
                      *(float *)&v106[v43] = v48;
                      ++v40;
                    }
                    ++v43;
                  }
                  while (v34 != v43);
                  float v51 = *(float *)v106 + *(float *)&v106[1];
                  float v52 = 0.0;
                  a7 = v42;
                  uint64_t v28 = v101;
                  if ((float)(*(float *)v106 + *(float *)&v106[1]) == 0.0) {
                    goto LABEL_47;
                  }
                }
                else
                {
                  float v51 = 5.0;
                }
                int __e = 0;
                long double v53 = frexp(v51, &__e);
                double v54 = ldexp(v53, 11);
                float v52 = ldexp(round(v54), __e - 11);
LABEL_47:
                float v55 = 0.0;
                float v56 = 0.0;
                if ((float)(v52 + *(float *)&v106[2]) != 0.0)
                {
                  int __e = 0;
                  long double v57 = frexp((float)(v52 + *(float *)&v106[2]), &__e);
                  double v58 = ldexp(v57, 11);
                  float v56 = ldexp(round(v58), __e - 11);
                }
                if ((float)(*(float *)&v106[3] + v107) != 0.0)
                {
                  int __e = 0;
                  long double v59 = frexp((float)(*(float *)&v106[3] + v107), &__e);
                  double v60 = ldexp(v59, 11);
                  float v55 = ldexp(round(v60), __e - 11);
                }
                float v61 = 0.0;
                if ((float)(v56 + v55) != 0.0)
                {
                  int __e = 0;
                  long double v62 = frexp((float)(v56 + v55), &__e);
                  double v63 = ldexp(v62, 11);
                  float v61 = ldexp(round(v63), __e - 11);
                }
                *((float *)&v108 + v39) = v61;
LABEL_54:
                ++v39;
              }
              while (v39 != v28);
              float v64 = *(float *)&v108 + *((float *)&v108 + 1);
              float v65 = 0.0;
              unint64_t v36 = v96;
              if ((float)(*(float *)&v108 + *((float *)&v108 + 1)) != 0.0)
              {
LABEL_58:
                v106[0] = 0;
                long double v66 = frexp(v64, v106);
                double v67 = ldexp(v66, 11);
                float v65 = ldexp(round(v67), v106[0] - 11);
              }
              float v68 = 0.0;
              float v69 = 0.0;
              if ((float)(v65 + *((float *)&v108 + 2)) != 0.0)
              {
                v106[0] = 0;
                long double v70 = frexp((float)(v65 + *((float *)&v108 + 2)), v106);
                double v71 = ldexp(v70, 11);
                float v69 = ldexp(round(v71), v106[0] - 11);
              }
              if ((float)(*((float *)&v108 + 3) + v109) != 0.0)
              {
                v106[0] = 0;
                long double v72 = frexp((float)(*((float *)&v108 + 3) + v109), v106);
                double v73 = ldexp(v72, 11);
                float v68 = ldexp(round(v73), v106[0] - 11);
              }
              float v74 = v69 + v68;
              float v75 = 0.0;
              if (v74 != 0.0)
              {
                v106[0] = 0;
                long double v76 = frexp(v74, v106);
                double v77 = ldexp(v76, 11);
                float v75 = ldexp(round(v77), v106[0] - 11);
              }
              LOWORD(v106[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v40];
              MIL::Fp16::GetFloat((MIL::Fp16 *)v106);
              float v79 = v75 * v78;
              float v80 = 0.0;
              if (v79 != 0.0)
              {
                v106[0] = 0;
                long double v81 = frexp(v79, v106);
                double v82 = ldexp(v81, 11);
                float v80 = ldexp(round(v82), v106[0] - 11);
              }
              char v83 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a11, v80);
              __int16 v85 = MIL::Fp16::FromFloat(v83, v84);
              *(_WORD *)(*a9
            }
LABEL_68:
            v37 += v94;
          }
        }
LABEL_70:
        ++v35;
        uint64_t v30 = v91;
      }
      while (v35 != v91);
LABEL_71:
      ++v105;
    }
    while (v105 != v90);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100](&__src);
  if (v111)
  {
    uint64_t v112 = v111;
    operator delete(v111);
  }
  if (v114)
  {
    __int16 v115 = v114;
    operator delete(v114);
  }
}

void sub_210BF74F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  uint64_t v40 = *(void **)(v38 - 200);
  if (v40)
  {
    *(void *)(v38 - 192) = v40;
    operator delete(v40);
  }
  unint64_t v41 = *(void **)(v38 - 176);
  if (v41)
  {
    *(void *)(v38 - 168) = v41;
    operator delete(v41);
  }
  uint64_t v42 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, unint64_t *a9@<X8>, char a10, uint64_t a11)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  __int16 v117 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  int v15 = *(const void **)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  unint64_t v17 = (v16 - *(void *)a3) >> 3;
  if (v17 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v86 = "x_rank == o_shape.size()";
    int v87 = 64;
    goto LABEL_90;
  }
  unint64_t v18 = v17 - 2;
  unint64_t v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    int v86 = "kernel_sizes.size() == num_spatial_dims";
    int v87 = 65;
    goto LABEL_90;
  }
  unint64_t v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    int v86 = "strides.size() == num_spatial_dims";
    int v87 = 66;
LABEL_90:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v87, v86);
  }
  if (v17 == 5)
  {
    uint64_t v21 = a7;
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        uint64_t v22 = v20 + 2;
        uint64_t v92 = (int)v20[1];
        uint64_t v23 = v19 + 2;
        uint64_t v102 = (int)v19[1];
        goto LABEL_13;
      }
      int v88 = "sz == 1";
      int v89 = 77;
    }
    else
    {
      int v88 = "kd == 1";
      int v89 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v89, v88);
  }
  BOOL v24 = v18 > 1;
  uint64_t v21 = a7;
  uint64_t v25 = v17;
  if (v24)
  {
    uint64_t v26 = v25 * 4 - 16;
    uint64_t v102 = (int)v19[v25 - 4];
    uint64_t v27 = v25 * 4 - 12;
    uint64_t v23 = &v19[v25 - 3];
    uint64_t v92 = *(int *)((char *)v20 + v26);
    uint64_t v22 = (_DWORD *)((char *)v20 + v27);
  }
  else
  {
    uint64_t v28 = v25 * 4 - 12;
    uint64_t v23 = &v19[v25 - 3];
    uint64_t v22 = (_DWORD *)((char *)v20 + v28);
    uint64_t v102 = 1;
    uint64_t v92 = 1;
  }
LABEL_13:
  uint64_t v94 = *v22;
  unsigned int v101 = *v23;
  uint64_t v114 = 0;
  __int16 v115 = 0;
  uint64_t v116 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v114, v15, v16, v17);
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v111, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v114, (uint64_t)(v114 + 8), __src.i8, v120, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v111, (uint64_t)(v111 + 8), __src.i8, v120, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v114, v114 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v111, v111 + 8, &__src);
  }
  uint64_t v29 = *(void *)v111;
  uint64_t v30 = *((void *)v111 + 1);
  uint64_t v93 = *((void *)v111 + 2);
  unint64_t v31 = *((void *)v111 + 4);
  uint64_t v95 = *((void *)v111 + 3);
  uint64_t v100 = *((void *)v114 + 2);
  uint64_t v103 = *((void *)v114 + 3);
  __src.i64[0] = (uint64_t)&unk_26C319E90;
  p_src = &__src;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v117);
  LODWORD(v108) = v32;
  std::vector<float>::vector(v110, v31, &v108);
  unint64_t v96 = v31;
  if (v29)
  {
    uint64_t v33 = 0;
    int v34 = v101;
    if (v101 <= 1) {
      int v34 = 1;
    }
    uint64_t v35 = v34;
    uint64_t v90 = v29;
    uint64_t v91 = v30;
    do
    {
      if (!v30) {
        goto LABEL_79;
      }
      uint64_t v36 = 0;
      do
      {
        unint64_t v37 = v96;
        if (!v93) {
          goto LABEL_78;
        }
        for (uint64_t i = 0; i != v93; ++i)
        {
          if (!v95) {
            continue;
          }
          uint64_t v38 = 0;
          for (uint64_t j = 0; j != v95; ++j)
          {
            if (!v37) {
              goto LABEL_76;
            }
            for (uint64_t k = 0; k != v37; ++k)
            {
              float v109 = 0.0;
              long long v108 = xmmword_210C6B69C;
              if (!v102)
              {
                uint64_t v41 = 0;
                float v64 = 5.0;
                goto LABEL_59;
              }
              uint64_t v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v42 = v40 + i * v92;
                if ((a10 & 1) == 0 && (v42 < *(int *)(v21 + 8) || v42 >= v100 - *(int *)(v21 + 12))) {
                  goto LABEL_55;
                }
                float v107 = 0.0;
                *(_OWORD *)float v106 = xmmword_210C6B69C;
                if (v101)
                {
                  uint64_t v43 = 0;
                  do
                  {
                    unint64_t v44 = v38 + v43;
                    if ((a10 & 1) != 0 || v44 >= *(int *)(a7 + 16) && v44 < v103 - *(int *)(a7 + 20))
                    {
                      unsigned int v46 = std::function<unsigned char ()(unsigned char)>::operator()((uint64_t)&__src, *(unsigned char *)(a1 + Index));
                      float v47 = *((float *)v110[0] + k) * (float)v46;
                      float v48 = 0.0;
                      if (v47 != 0.0)
                      {
                        int __e = 0;
                        long double v49 = frexp(v47, &__e);
                        double v50 = ldexp(v49, 11);
                        float v48 = ldexp(round(v50), __e - 11);
                      }
                      *(float *)&v106[v43] = v48;
                      ++v41;
                    }
                    ++v43;
                  }
                  while (v35 != v43);
                  float v51 = *(float *)v106 + *(float *)&v106[1];
                  float v52 = 0.0;
                  uint64_t v21 = a7;
                  if ((float)(*(float *)v106 + *(float *)&v106[1]) == 0.0) {
                    goto LABEL_48;
                  }
                }
                else
                {
                  float v51 = 5.0;
                }
                int __e = 0;
                long double v53 = frexp(v51, &__e);
                double v54 = ldexp(v53, 11);
                float v52 = ldexp(round(v54), __e - 11);
LABEL_48:
                float v55 = 0.0;
                float v56 = 0.0;
                if ((float)(v52 + *(float *)&v106[2]) != 0.0)
                {
                  int __e = 0;
                  long double v57 = frexp((float)(v52 + *(float *)&v106[2]), &__e);
                  double v58 = ldexp(v57, 11);
                  float v56 = ldexp(round(v58), __e - 11);
                }
                if ((float)(*(float *)&v106[3] + v107) != 0.0)
                {
                  int __e = 0;
                  long double v59 = frexp((float)(*(float *)&v106[3] + v107), &__e);
                  double v60 = ldexp(v59, 11);
                  float v55 = ldexp(round(v60), __e - 11);
                }
                float v61 = 0.0;
                if ((float)(v56 + v55) != 0.0)
                {
                  int __e = 0;
                  long double v62 = frexp((float)(v56 + v55), &__e);
                  double v63 = ldexp(v62, 11);
                  float v61 = ldexp(round(v63), __e - 11);
                }
                *((float *)&v108 + v40) = v61;
LABEL_55:
                ++v40;
              }
              while (v40 != v102);
              float v64 = *(float *)&v108 + *((float *)&v108 + 1);
              float v65 = 0.0;
              unint64_t v37 = v96;
              if ((float)(*(float *)&v108 + *((float *)&v108 + 1)) != 0.0)
              {
LABEL_59:
                v106[0] = 0;
                long double v66 = frexp(v64, v106);
                double v67 = ldexp(v66, 11);
                float v65 = ldexp(round(v67), v106[0] - 11);
              }
              float v68 = 0.0;
              float v69 = 0.0;
              if ((float)(v65 + *((float *)&v108 + 2)) != 0.0)
              {
                v106[0] = 0;
                long double v70 = frexp((float)(v65 + *((float *)&v108 + 2)), v106);
                double v71 = ldexp(v70, 11);
                float v69 = ldexp(round(v71), v106[0] - 11);
              }
              if ((float)(*((float *)&v108 + 3) + v109) != 0.0)
              {
                v106[0] = 0;
                long double v72 = frexp((float)(*((float *)&v108 + 3) + v109), v106);
                double v73 = ldexp(v72, 11);
                float v68 = ldexp(round(v73), v106[0] - 11);
              }
              float v74 = v69 + v68;
              float v75 = 0.0;
              if (v74 != 0.0)
              {
                v106[0] = 0;
                long double v76 = frexp(v74, v106);
                double v77 = ldexp(v76, 11);
                float v75 = ldexp(round(v77), v106[0] - 11);
              }
              LOWORD(v106[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v41];
              MIL::Fp16::GetFloat((MIL::Fp16 *)v106);
              float v79 = v75 * v78;
              float v80 = 0.0;
              if (v79 != 0.0)
              {
                v106[0] = 0;
                long double v81 = frexp(v79, v106);
                double v82 = ldexp(v81, 11);
                float v80 = ldexp(round(v82), v106[0] - 11);
              }
              std::function<float ()(float)>::operator()(a11, v80);
              if (v83 == INFINITY)
              {
                LOBYTE(v84) = -1;
              }
              else if (v83 == -INFINITY)
              {
                LOBYTE(v84) = 0;
              }
              else
              {
                int v85 = llroundf(v83);
                if (v85 >= 255) {
                  int v85 = 255;
                }
                int v84 = v85 & ~(v85 >> 31);
              }
            }
LABEL_76:
            v38 += v94;
          }
        }
LABEL_78:
        ++v36;
        uint64_t v30 = v91;
      }
      while (v36 != v91);
LABEL_79:
      ++v33;
    }
    while (v33 != v90);
  }
  if (v110[0])
  {
    v110[1] = v110[0];
    operator delete(v110[0]);
  }
  std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100](&__src);
  if (v111)
  {
    uint64_t v112 = v111;
    operator delete(v111);
  }
  if (v114)
  {
    __int16 v115 = v114;
    operator delete(v114);
  }
}

void sub_210BF7DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unint64_t v20 = *(void **)(v18 - 200);
  if (v20)
  {
    *(void *)(v18 - 192) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(v18 - 176);
  if (v21)
  {
    *(void *)(v18 - 168) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, unint64_t *a9@<X8>, char a10, uint64_t a11)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  __int16 v117 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  int v15 = *(const void **)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  unint64_t v17 = (v16 - *(void *)a3) >> 3;
  if (v17 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v86 = "x_rank == o_shape.size()";
    int v87 = 64;
    goto LABEL_92;
  }
  unint64_t v18 = v17 - 2;
  unint64_t v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    int v86 = "kernel_sizes.size() == num_spatial_dims";
    int v87 = 65;
    goto LABEL_92;
  }
  unint64_t v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    int v86 = "strides.size() == num_spatial_dims";
    int v87 = 66;
LABEL_92:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v87, v86);
  }
  if (v17 == 5)
  {
    uint64_t v21 = a7;
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        uint64_t v22 = v20 + 2;
        uint64_t v92 = (int)v20[1];
        uint64_t v23 = v19 + 2;
        uint64_t v102 = (int)v19[1];
        goto LABEL_13;
      }
      int v88 = "sz == 1";
      int v89 = 77;
    }
    else
    {
      int v88 = "kd == 1";
      int v89 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v89, v88);
  }
  BOOL v24 = v18 > 1;
  uint64_t v21 = a7;
  uint64_t v25 = v17;
  if (v24)
  {
    uint64_t v26 = v25 * 4 - 16;
    uint64_t v102 = (int)v19[v25 - 4];
    uint64_t v27 = v25 * 4 - 12;
    uint64_t v23 = &v19[v25 - 3];
    uint64_t v92 = *(int *)((char *)v20 + v26);
    uint64_t v22 = (_DWORD *)((char *)v20 + v27);
  }
  else
  {
    uint64_t v28 = v25 * 4 - 12;
    uint64_t v23 = &v19[v25 - 3];
    uint64_t v22 = (_DWORD *)((char *)v20 + v28);
    uint64_t v102 = 1;
    uint64_t v92 = 1;
  }
LABEL_13:
  uint64_t v94 = *v22;
  unsigned int v101 = *v23;
  uint64_t v114 = 0;
  __int16 v115 = 0;
  uint64_t v116 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v114, v15, v16, v17);
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v111, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v114, (uint64_t)(v114 + 8), __src.i8, v120, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v111, (uint64_t)(v111 + 8), __src.i8, v120, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v114, v114 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v111, v111 + 8, &__src);
  }
  uint64_t v29 = *(void *)v111;
  uint64_t v30 = *((void *)v111 + 1);
  uint64_t v93 = *((void *)v111 + 2);
  unint64_t v31 = *((void *)v111 + 4);
  uint64_t v95 = *((void *)v111 + 3);
  uint64_t v100 = *((void *)v114 + 2);
  uint64_t v103 = *((void *)v114 + 3);
  __src.i64[0] = (uint64_t)&unk_26C319F10;
  p_src = &__src;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v117);
  LODWORD(v108) = v32;
  std::vector<float>::vector(v110, v31, &v108);
  unint64_t v96 = v31;
  if (v29)
  {
    uint64_t v33 = 0;
    int v34 = v101;
    if (v101 <= 1) {
      int v34 = 1;
    }
    uint64_t v35 = v34;
    uint64_t v90 = v29;
    uint64_t v91 = v30;
    do
    {
      if (!v30) {
        goto LABEL_81;
      }
      uint64_t v36 = 0;
      do
      {
        unint64_t v37 = v96;
        if (!v93) {
          goto LABEL_80;
        }
        for (uint64_t i = 0; i != v93; ++i)
        {
          if (!v95) {
            continue;
          }
          uint64_t v38 = 0;
          for (uint64_t j = 0; j != v95; ++j)
          {
            if (!v37) {
              goto LABEL_78;
            }
            for (uint64_t k = 0; k != v37; ++k)
            {
              float v109 = 0.0;
              long long v108 = xmmword_210C6B69C;
              if (!v102)
              {
                uint64_t v41 = 0;
                float v64 = 5.0;
                goto LABEL_59;
              }
              uint64_t v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v42 = v40 + i * v92;
                if ((a10 & 1) == 0 && (v42 < *(int *)(v21 + 8) || v42 >= v100 - *(int *)(v21 + 12))) {
                  goto LABEL_55;
                }
                float v107 = 0.0;
                *(_OWORD *)float v106 = xmmword_210C6B69C;
                if (v101)
                {
                  uint64_t v43 = 0;
                  do
                  {
                    unint64_t v44 = v38 + v43;
                    if ((a10 & 1) != 0 || v44 >= *(int *)(a7 + 16) && v44 < v103 - *(int *)(a7 + 20))
                    {
                      unsigned int v46 = std::function<unsigned char ()(unsigned char)>::operator()((uint64_t)&__src, *(unsigned char *)(a1 + Index));
                      float v47 = *((float *)v110[0] + k) * (float)v46;
                      float v48 = 0.0;
                      if (v47 != 0.0)
                      {
                        int __e = 0;
                        long double v49 = frexp(v47, &__e);
                        double v50 = ldexp(v49, 11);
                        float v48 = ldexp(round(v50), __e - 11);
                      }
                      *(float *)&v106[v43] = v48;
                      ++v41;
                    }
                    ++v43;
                  }
                  while (v35 != v43);
                  float v51 = *(float *)v106 + *(float *)&v106[1];
                  float v52 = 0.0;
                  uint64_t v21 = a7;
                  if ((float)(*(float *)v106 + *(float *)&v106[1]) == 0.0) {
                    goto LABEL_48;
                  }
                }
                else
                {
                  float v51 = 5.0;
                }
                int __e = 0;
                long double v53 = frexp(v51, &__e);
                double v54 = ldexp(v53, 11);
                float v52 = ldexp(round(v54), __e - 11);
LABEL_48:
                float v55 = 0.0;
                float v56 = 0.0;
                if ((float)(v52 + *(float *)&v106[2]) != 0.0)
                {
                  int __e = 0;
                  long double v57 = frexp((float)(v52 + *(float *)&v106[2]), &__e);
                  double v58 = ldexp(v57, 11);
                  float v56 = ldexp(round(v58), __e - 11);
                }
                if ((float)(*(float *)&v106[3] + v107) != 0.0)
                {
                  int __e = 0;
                  long double v59 = frexp((float)(*(float *)&v106[3] + v107), &__e);
                  double v60 = ldexp(v59, 11);
                  float v55 = ldexp(round(v60), __e - 11);
                }
                float v61 = 0.0;
                if ((float)(v56 + v55) != 0.0)
                {
                  int __e = 0;
                  long double v62 = frexp((float)(v56 + v55), &__e);
                  double v63 = ldexp(v62, 11);
                  float v61 = ldexp(round(v63), __e - 11);
                }
                *((float *)&v108 + v40) = v61;
LABEL_55:
                ++v40;
              }
              while (v40 != v102);
              float v64 = *(float *)&v108 + *((float *)&v108 + 1);
              float v65 = 0.0;
              unint64_t v37 = v96;
              if ((float)(*(float *)&v108 + *((float *)&v108 + 1)) != 0.0)
              {
LABEL_59:
                v106[0] = 0;
                long double v66 = frexp(v64, v106);
                double v67 = ldexp(v66, 11);
                float v65 = ldexp(round(v67), v106[0] - 11);
              }
              float v68 = 0.0;
              float v69 = 0.0;
              if ((float)(v65 + *((float *)&v108 + 2)) != 0.0)
              {
                v106[0] = 0;
                long double v70 = frexp((float)(v65 + *((float *)&v108 + 2)), v106);
                double v71 = ldexp(v70, 11);
                float v69 = ldexp(round(v71), v106[0] - 11);
              }
              if ((float)(*((float *)&v108 + 3) + v109) != 0.0)
              {
                v106[0] = 0;
                long double v72 = frexp((float)(*((float *)&v108 + 3) + v109), v106);
                double v73 = ldexp(v72, 11);
                float v68 = ldexp(round(v73), v106[0] - 11);
              }
              float v74 = v69 + v68;
              float v75 = 0.0;
              if (v74 != 0.0)
              {
                v106[0] = 0;
                long double v76 = frexp(v74, v106);
                double v77 = ldexp(v76, 11);
                float v75 = ldexp(round(v77), v106[0] - 11);
              }
              LOWORD(v106[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v41];
              MIL::Fp16::GetFloat((MIL::Fp16 *)v106);
              float v79 = v75 * v78;
              float v80 = 0.0;
              if (v79 != 0.0)
              {
                v106[0] = 0;
                long double v81 = frexp(v79, v106);
                double v82 = ldexp(v81, 11);
                float v80 = ldexp(round(v82), v106[0] - 11);
              }
              std::function<float ()(float)>::operator()(a11, v80);
              if (v83 == INFINITY)
              {
                char v84 = 127;
              }
              else if (v83 == -INFINITY)
              {
                char v84 = 0x80;
              }
              else
              {
                int v85 = llroundf(v83);
                if (v85 >= 127) {
                  int v85 = 127;
                }
                if (v85 <= -128) {
                  char v84 = 0x80;
                }
                else {
                  char v84 = v85;
                }
              }
            }
LABEL_78:
            v38 += v94;
          }
        }
LABEL_80:
        ++v36;
        uint64_t v30 = v91;
      }
      while (v36 != v91);
LABEL_81:
      ++v33;
    }
    while (v33 != v90);
  }
  if (v110[0])
  {
    v110[1] = v110[0];
    operator delete(v110[0]);
  }
  std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100](&__src);
  if (v111)
  {
    uint64_t v112 = v111;
    operator delete(v111);
  }
  if (v114)
  {
    __int16 v115 = v114;
    operator delete(v114);
  }
}

void sub_210BF8704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unint64_t v20 = *(void **)(v18 - 200);
  if (v20)
  {
    *(void *)(v18 - 192) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(v18 - 176);
  if (v21)
  {
    *(void *)(v18 - 168) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, void *a9@<X8>, char a10, char a11, uint64_t a12)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  __int16 v115 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  unint64_t v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 3;
  if (v19 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v85 = "x_rank == o_shape.size()";
    int v86 = 64;
    goto LABEL_84;
  }
  unint64_t v20 = v19 - 2;
  uint64_t v21 = *(_DWORD **)a5;
  if (v19 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    int v85 = "kernel_sizes.size() == num_spatial_dims";
    int v86 = 65;
    goto LABEL_84;
  }
  uint64_t v22 = *(_DWORD **)a6;
  if (v20 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    int v85 = "strides.size() == num_spatial_dims";
    int v86 = 66;
LABEL_84:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v86, v85);
  }
  if (v19 == 5)
  {
    if (*v21 == 1)
    {
      if (*v22 == 1)
      {
        uint64_t v23 = v22 + 2;
        uint64_t v91 = (int)v22[1];
        BOOL v24 = v21 + 2;
        uint64_t v100 = (int)v21[1];
        goto LABEL_11;
      }
      int v87 = "sz == 1";
      int v88 = 77;
    }
    else
    {
      int v87 = "kd == 1";
      int v88 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v88, v87);
  }
  if (v20 <= 1)
  {
    uint64_t v27 = 4 * v19 - 12;
    BOOL v24 = (_DWORD *)((char *)v21 + v27);
    uint64_t v23 = (_DWORD *)((char *)v22 + v27);
    uint64_t v100 = 1;
    uint64_t v91 = 1;
  }
  else
  {
    uint64_t v25 = 4 * v19 - 16;
    uint64_t v100 = *(int *)((char *)v21 + v25);
    uint64_t v26 = 4 * v19 - 12;
    BOOL v24 = (_DWORD *)((char *)v21 + v26);
    uint64_t v91 = *(int *)((char *)v22 + v25);
    uint64_t v23 = (_DWORD *)((char *)v22 + v26);
  }
LABEL_11:
  uint64_t v93 = *v23;
  unsigned int v101 = *v24;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v112, v17, v18, v19);
  long long __p = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v19 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v112, (uint64_t)(v112 + 8), __src.i8, v119, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v119, 2);
    uint64_t v29 = v100;
  }
  else
  {
    BOOL v28 = v19 == 4;
    uint64_t v29 = v100;
    if (v28)
    {
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&v112, v112 + 8, &__src);
      __src.i64[0] = 1;
      std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
    }
  }
  uint64_t v30 = *(void *)__p;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v92 = *((void *)__p + 2);
  uint64_t v94 = *((void *)__p + 3);
  unint64_t v97 = *((void *)__p + 4);
  uint64_t v99 = *((void *)v112 + 2);
  uint64_t v102 = *((void *)v112 + 3);
  v117[0] = &unk_26C319F90;
  v117[3] = v117;
  if (a11)
  {
    __src.i64[0] = (uint64_t)&unk_26C31A010;
    p_src = &__src;
    std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](&__src, v117);
    std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](&__src);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v115);
  LODWORD(v107) = v32;
  std::vector<float>::vector(&__src, v97, &v107);
  if (v30)
  {
    uint64_t v104 = 0;
    int v33 = v101;
    if (v101 <= 1) {
      int v33 = 1;
    }
    uint64_t v34 = v33;
    uint64_t v89 = v30;
    uint64_t v90 = v31;
    do
    {
      if (!v31) {
        goto LABEL_73;
      }
      uint64_t v35 = 0;
      do
      {
        if (!v92) {
          goto LABEL_72;
        }
        for (uint64_t i = 0; i != v92; ++i)
        {
          if (!v94) {
            continue;
          }
          uint64_t v36 = 0;
          for (uint64_t j = 0; j != v94; ++j)
          {
            if (!v97) {
              goto LABEL_70;
            }
            for (uint64_t k = 0; k != v97; ++k)
            {
              float v108 = 0.0;
              long long v107 = xmmword_210C6B69C;
              if (!v29)
              {
                uint64_t v39 = 0;
                float v63 = 5.0;
                goto LABEL_60;
              }
              uint64_t v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v40 = v38 + i * v91;
                if ((a10 & 1) == 0 && (v40 < *(int *)(a7 + 8) || v40 >= v99 - *(int *)(a7 + 12))) {
                  goto LABEL_56;
                }
                float v106 = 0.0;
                *(_OWORD *)uint64_t v105 = xmmword_210C6B69C;
                if (v101)
                {
                  uint64_t v41 = a7;
                  uint64_t v42 = 0;
                  do
                  {
                    unint64_t v43 = v36 + v42;
                    if ((a10 & 1) != 0 || v43 >= *(int *)(v41 + 16) && v43 < v102 - *(int *)(v41 + 20))
                    {
                      int v45 = std::function<signed char ()(signed char)>::operator()((uint64_t)v117, *(unsigned char *)(a1 + Index));
                      float v46 = *(float *)(__src.i64[0] + 4 * k) * (float)v45;
                      float v47 = 0.0;
                      if (v46 != 0.0)
                      {
                        int __e = 0;
                        long double v48 = frexp(v46, &__e);
                        double v49 = ldexp(v48, 11);
                        float v47 = ldexp(round(v49), __e - 11);
                      }
                      *(float *)&v105[v42] = v47;
                      ++v39;
                    }
                    ++v42;
                  }
                  while (v34 != v42);
                  float v50 = *(float *)v105 + *(float *)&v105[1];
                  float v51 = 0.0;
                  a7 = v41;
                  uint64_t v29 = v100;
                  if ((float)(*(float *)v105 + *(float *)&v105[1]) == 0.0) {
                    goto LABEL_49;
                  }
                }
                else
                {
                  float v50 = 5.0;
                }
                int __e = 0;
                long double v52 = frexp(v50, &__e);
                double v53 = ldexp(v52, 11);
                float v51 = ldexp(round(v53), __e - 11);
LABEL_49:
                float v54 = 0.0;
                float v55 = 0.0;
                if ((float)(v51 + *(float *)&v105[2]) != 0.0)
                {
                  int __e = 0;
                  long double v56 = frexp((float)(v51 + *(float *)&v105[2]), &__e);
                  double v57 = ldexp(v56, 11);
                  float v55 = ldexp(round(v57), __e - 11);
                }
                if ((float)(*(float *)&v105[3] + v106) != 0.0)
                {
                  int __e = 0;
                  long double v58 = frexp((float)(*(float *)&v105[3] + v106), &__e);
                  double v59 = ldexp(v58, 11);
                  float v54 = ldexp(round(v59), __e - 11);
                }
                float v60 = 0.0;
                if ((float)(v55 + v54) != 0.0)
                {
                  int __e = 0;
                  long double v61 = frexp((float)(v55 + v54), &__e);
                  double v62 = ldexp(v61, 11);
                  float v60 = ldexp(round(v62), __e - 11);
                }
                *((float *)&v107 + v38) = v60;
LABEL_56:
                ++v38;
              }
              while (v38 != v29);
              float v63 = *(float *)&v107 + *((float *)&v107 + 1);
              float v64 = 0.0;
              if ((float)(*(float *)&v107 + *((float *)&v107 + 1)) != 0.0)
              {
LABEL_60:
                v105[0] = 0;
                long double v65 = frexp(v63, v105);
                double v66 = ldexp(v65, 11);
                float v64 = ldexp(round(v66), v105[0] - 11);
              }
              float v67 = 0.0;
              float v68 = 0.0;
              if ((float)(v64 + *((float *)&v107 + 2)) != 0.0)
              {
                v105[0] = 0;
                long double v69 = frexp((float)(v64 + *((float *)&v107 + 2)), v105);
                double v70 = ldexp(v69, 11);
                float v68 = ldexp(round(v70), v105[0] - 11);
              }
              if ((float)(*((float *)&v107 + 3) + v108) != 0.0)
              {
                v105[0] = 0;
                long double v71 = frexp((float)(*((float *)&v107 + 3) + v108), v105);
                double v72 = ldexp(v71, 11);
                float v67 = ldexp(round(v72), v105[0] - 11);
              }
              float v73 = v68 + v67;
              float v74 = 0.0;
              if (v73 != 0.0)
              {
                v105[0] = 0;
                long double v75 = frexp(v73, v105);
                double v76 = ldexp(v75, 11);
                float v74 = ldexp(round(v76), v105[0] - 11);
              }
              LOWORD(v105[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v39];
              MIL::Fp16::GetFloat((MIL::Fp16 *)v105);
              float v78 = v74 * v77;
              float v79 = 0.0;
              if (v78 != 0.0)
              {
                v105[0] = 0;
                long double v80 = frexp(v78, v105);
                double v81 = ldexp(v80, 11);
                float v79 = ldexp(round(v81), v105[0] - 11);
              }
              double v82 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a12, v79);
              __int16 v84 = MIL::Fp16::FromFloat(v82, v83);
              *(_WORD *)(*a9
            }
LABEL_70:
            v36 += v93;
          }
        }
LABEL_72:
        ++v35;
        uint64_t v31 = v90;
      }
      while (v35 != v90);
LABEL_73:
      ++v104;
    }
    while (v104 != v89);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](v117);
  if (__p)
  {
    uint64_t v110 = __p;
    operator delete(__p);
  }
  if (v112)
  {
    uint64_t v113 = v112;
    operator delete(v112);
  }
}

void sub_210BF9018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v39 = *(void **)(v37 - 208);
  if (v39)
  {
    *(void *)(v37 - 200) = v39;
    operator delete(v39);
  }
  unint64_t v40 = *(void **)a16;
  if (*(void *)a16)
  {
    *(void *)(a16 + 8) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  __int16 v115 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  uint64_t v16 = *(const void **)a3;
  uint64_t v17 = *(void *)(a3 + 8);
  unint64_t v18 = (v17 - *(void *)a3) >> 3;
  if (v18 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v85 = "x_rank == o_shape.size()";
    int v86 = 64;
    goto LABEL_92;
  }
  unint64_t v19 = v18 - 2;
  unint64_t v20 = *(_DWORD **)a5;
  if (v18 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    int v85 = "kernel_sizes.size() == num_spatial_dims";
    int v86 = 65;
    goto LABEL_92;
  }
  uint64_t v21 = *(_DWORD **)a6;
  if (v19 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    int v85 = "strides.size() == num_spatial_dims";
    int v86 = 66;
LABEL_92:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v86, v85);
  }
  if (v18 == 5)
  {
    uint64_t v22 = a7;
    if (*v20 == 1)
    {
      if (*v21 == 1)
      {
        uint64_t v23 = v21 + 2;
        uint64_t v91 = (int)v21[1];
        BOOL v24 = v20 + 2;
        uint64_t v101 = (int)v20[1];
        goto LABEL_13;
      }
      int v87 = "sz == 1";
      int v88 = 77;
    }
    else
    {
      int v87 = "kd == 1";
      int v88 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v88, v87);
  }
  BOOL v25 = v19 > 1;
  uint64_t v22 = a7;
  uint64_t v26 = v18;
  if (v25)
  {
    uint64_t v27 = v26 * 4 - 16;
    uint64_t v101 = (int)v20[v26 - 4];
    uint64_t v28 = v26 * 4 - 12;
    BOOL v24 = &v20[v26 - 3];
    uint64_t v91 = *(int *)((char *)v21 + v27);
    uint64_t v23 = (_DWORD *)((char *)v21 + v28);
  }
  else
  {
    uint64_t v29 = v26 * 4 - 12;
    BOOL v24 = &v20[v26 - 3];
    uint64_t v23 = (_DWORD *)((char *)v21 + v29);
    uint64_t v101 = 1;
    uint64_t v91 = 1;
  }
LABEL_13:
  uint64_t v93 = *v23;
  unsigned int v100 = *v24;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v112, v16, v17, v18);
  long long __p = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v112, (uint64_t)(v112 + 8), __src.i8, v119, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v119, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v112, v112 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v30 = *(void *)__p;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v92 = *((void *)__p + 2);
  uint64_t v94 = *((void *)__p + 3);
  unint64_t v97 = *((void *)__p + 4);
  uint64_t v99 = *((void *)v112 + 2);
  uint64_t v102 = *((void *)v112 + 3);
  v117[0] = &unk_26C31A090;
  v117[3] = v117;
  if (a11)
  {
    __src.i64[0] = (uint64_t)&unk_26C31A110;
    p_src = &__src;
    std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](&__src, v117);
    std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](&__src);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v115);
  LODWORD(v107) = v32;
  std::vector<float>::vector(&__src, v97, &v107);
  if (v30)
  {
    uint64_t v33 = 0;
    int v34 = v100;
    if (v100 <= 1) {
      int v34 = 1;
    }
    uint64_t v35 = v34;
    uint64_t v89 = v30;
    uint64_t v90 = v31;
    do
    {
      if (!v31) {
        goto LABEL_81;
      }
      uint64_t v36 = 0;
      do
      {
        if (!v92) {
          goto LABEL_80;
        }
        for (uint64_t i = 0; i != v92; ++i)
        {
          if (!v94) {
            continue;
          }
          uint64_t v37 = 0;
          for (uint64_t j = 0; j != v94; ++j)
          {
            if (!v97) {
              goto LABEL_78;
            }
            for (uint64_t k = 0; k != v97; ++k)
            {
              float v108 = 0.0;
              long long v107 = xmmword_210C6B69C;
              if (!v101)
              {
                uint64_t v40 = 0;
                float v63 = 5.0;
                goto LABEL_61;
              }
              uint64_t v39 = 0;
              uint64_t v40 = 0;
              do
              {
                unint64_t v41 = v39 + i * v91;
                if ((a10 & 1) == 0 && (v41 < *(int *)(v22 + 8) || v41 >= v99 - *(int *)(v22 + 12))) {
                  goto LABEL_57;
                }
                float v106 = 0.0;
                *(_OWORD *)uint64_t v105 = xmmword_210C6B69C;
                if (v100)
                {
                  uint64_t v42 = 0;
                  do
                  {
                    unint64_t v43 = v37 + v42;
                    if ((a10 & 1) != 0 || v43 >= *(int *)(a7 + 16) && v43 < v102 - *(int *)(a7 + 20))
                    {
                      int v45 = std::function<signed char ()(signed char)>::operator()((uint64_t)v117, *(unsigned char *)(a1 + Index));
                      float v46 = *(float *)(__src.i64[0] + 4 * k) * (float)v45;
                      float v47 = 0.0;
                      if (v46 != 0.0)
                      {
                        int __e = 0;
                        long double v48 = frexp(v46, &__e);
                        double v49 = ldexp(v48, 11);
                        float v47 = ldexp(round(v49), __e - 11);
                      }
                      *(float *)&v105[v42] = v47;
                      ++v40;
                    }
                    ++v42;
                  }
                  while (v35 != v42);
                  float v50 = *(float *)v105 + *(float *)&v105[1];
                  float v51 = 0.0;
                  uint64_t v22 = a7;
                  if ((float)(*(float *)v105 + *(float *)&v105[1]) == 0.0) {
                    goto LABEL_50;
                  }
                }
                else
                {
                  float v50 = 5.0;
                }
                int __e = 0;
                long double v52 = frexp(v50, &__e);
                double v53 = ldexp(v52, 11);
                float v51 = ldexp(round(v53), __e - 11);
LABEL_50:
                float v54 = 0.0;
                float v55 = 0.0;
                if ((float)(v51 + *(float *)&v105[2]) != 0.0)
                {
                  int __e = 0;
                  long double v56 = frexp((float)(v51 + *(float *)&v105[2]), &__e);
                  double v57 = ldexp(v56, 11);
                  float v55 = ldexp(round(v57), __e - 11);
                }
                if ((float)(*(float *)&v105[3] + v106) != 0.0)
                {
                  int __e = 0;
                  long double v58 = frexp((float)(*(float *)&v105[3] + v106), &__e);
                  double v59 = ldexp(v58, 11);
                  float v54 = ldexp(round(v59), __e - 11);
                }
                float v60 = 0.0;
                if ((float)(v55 + v54) != 0.0)
                {
                  int __e = 0;
                  long double v61 = frexp((float)(v55 + v54), &__e);
                  double v62 = ldexp(v61, 11);
                  float v60 = ldexp(round(v62), __e - 11);
                }
                *((float *)&v107 + v39) = v60;
LABEL_57:
                ++v39;
              }
              while (v39 != v101);
              float v63 = *(float *)&v107 + *((float *)&v107 + 1);
              float v64 = 0.0;
              if ((float)(*(float *)&v107 + *((float *)&v107 + 1)) != 0.0)
              {
LABEL_61:
                v105[0] = 0;
                long double v65 = frexp(v63, v105);
                double v66 = ldexp(v65, 11);
                float v64 = ldexp(round(v66), v105[0] - 11);
              }
              float v67 = 0.0;
              float v68 = 0.0;
              if ((float)(v64 + *((float *)&v107 + 2)) != 0.0)
              {
                v105[0] = 0;
                long double v69 = frexp((float)(v64 + *((float *)&v107 + 2)), v105);
                double v70 = ldexp(v69, 11);
                float v68 = ldexp(round(v70), v105[0] - 11);
              }
              if ((float)(*((float *)&v107 + 3) + v108) != 0.0)
              {
                v105[0] = 0;
                long double v71 = frexp((float)(*((float *)&v107 + 3) + v108), v105);
                double v72 = ldexp(v71, 11);
                float v67 = ldexp(round(v72), v105[0] - 11);
              }
              float v73 = v68 + v67;
              float v74 = 0.0;
              if (v73 != 0.0)
              {
                v105[0] = 0;
                long double v75 = frexp(v73, v105);
                double v76 = ldexp(v75, 11);
                float v74 = ldexp(round(v76), v105[0] - 11);
              }
              LOWORD(v105[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v40];
              MIL::Fp16::GetFloat((MIL::Fp16 *)v105);
              float v78 = v74 * v77;
              float v79 = 0.0;
              if (v78 != 0.0)
              {
                v105[0] = 0;
                long double v80 = frexp(v78, v105);
                double v81 = ldexp(v80, 11);
                float v79 = ldexp(round(v81), v105[0] - 11);
              }
              std::function<float ()(float)>::operator()(a12, v79);
              if (v82 == INFINITY)
              {
                LOBYTE(v83) = -1;
              }
              else if (v82 == -INFINITY)
              {
                LOBYTE(v83) = 0;
              }
              else
              {
                int v84 = llroundf(v82);
                if (v84 >= 255) {
                  int v84 = 255;
                }
                int v83 = v84 & ~(v84 >> 31);
              }
            }
LABEL_78:
            v37 += v93;
          }
        }
LABEL_80:
        ++v36;
        uint64_t v31 = v90;
      }
      while (v36 != v90);
LABEL_81:
      ++v33;
    }
    while (v33 != v89);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](v117);
  if (__p)
  {
    uint64_t v110 = __p;
    operator delete(__p);
  }
  if (v112)
  {
    uint64_t v113 = v112;
    operator delete(v112);
  }
}

void sub_210BF9964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v41 = *(void **)(v39 - 208);
  if (v41)
  {
    *(void *)(v39 - 200) = v41;
    operator delete(v41);
  }
  uint64_t v42 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  __int16 v115 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  uint64_t v16 = *(const void **)a3;
  uint64_t v17 = *(void *)(a3 + 8);
  unint64_t v18 = (v17 - *(void *)a3) >> 3;
  if (v18 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v85 = "x_rank == o_shape.size()";
    int v86 = 64;
    goto LABEL_94;
  }
  unint64_t v19 = v18 - 2;
  unint64_t v20 = *(_DWORD **)a5;
  if (v18 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    int v85 = "kernel_sizes.size() == num_spatial_dims";
    int v86 = 65;
    goto LABEL_94;
  }
  uint64_t v21 = *(_DWORD **)a6;
  if (v19 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    int v85 = "strides.size() == num_spatial_dims";
    int v86 = 66;
LABEL_94:
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v86, v85);
  }
  if (v18 == 5)
  {
    uint64_t v22 = a7;
    if (*v20 == 1)
    {
      if (*v21 == 1)
      {
        uint64_t v23 = v21 + 2;
        uint64_t v91 = (int)v21[1];
        BOOL v24 = v20 + 2;
        uint64_t v101 = (int)v20[1];
        goto LABEL_13;
      }
      int v87 = "sz == 1";
      int v88 = 77;
    }
    else
    {
      int v87 = "kd == 1";
      int v88 = 76;
    }
    __assert_rtn("ComputeValueAvgPool", "PePoolCpu.cpp", v88, v87);
  }
  BOOL v25 = v19 > 1;
  uint64_t v22 = a7;
  uint64_t v26 = v18;
  if (v25)
  {
    uint64_t v27 = v26 * 4 - 16;
    uint64_t v101 = (int)v20[v26 - 4];
    uint64_t v28 = v26 * 4 - 12;
    BOOL v24 = &v20[v26 - 3];
    uint64_t v91 = *(int *)((char *)v21 + v27);
    uint64_t v23 = (_DWORD *)((char *)v21 + v28);
  }
  else
  {
    uint64_t v29 = v26 * 4 - 12;
    BOOL v24 = &v20[v26 - 3];
    uint64_t v23 = (_DWORD *)((char *)v21 + v29);
    uint64_t v101 = 1;
    uint64_t v91 = 1;
  }
LABEL_13:
  uint64_t v93 = *v23;
  unsigned int v100 = *v24;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v112, v16, v17, v18);
  long long __p = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v112, (uint64_t)(v112 + 8), __src.i8, v119, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v119, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v112, v112 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v30 = *(void *)__p;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v92 = *((void *)__p + 2);
  uint64_t v94 = *((void *)__p + 3);
  unint64_t v97 = *((void *)__p + 4);
  uint64_t v99 = *((void *)v112 + 2);
  uint64_t v102 = *((void *)v112 + 3);
  v117[0] = &unk_26C31A190;
  v117[3] = v117;
  if (a11)
  {
    __src.i64[0] = (uint64_t)&unk_26C31A210;
    p_src = &__src;
    std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](&__src, v117);
    std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](&__src);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v115);
  LODWORD(v107) = v32;
  std::vector<float>::vector(&__src, v97, &v107);
  if (v30)
  {
    uint64_t v33 = 0;
    int v34 = v100;
    if (v100 <= 1) {
      int v34 = 1;
    }
    uint64_t v35 = v34;
    uint64_t v89 = v30;
    uint64_t v90 = v31;
    do
    {
      if (!v31) {
        goto LABEL_83;
      }
      uint64_t v36 = 0;
      do
      {
        if (!v92) {
          goto LABEL_82;
        }
        for (uint64_t i = 0; i != v92; ++i)
        {
          if (!v94) {
            continue;
          }
          uint64_t v37 = 0;
          for (uint64_t j = 0; j != v94; ++j)
          {
            if (!v97) {
              goto LABEL_80;
            }
            for (uint64_t k = 0; k != v97; ++k)
            {
              float v108 = 0.0;
              long long v107 = xmmword_210C6B69C;
              if (!v101)
              {
                uint64_t v40 = 0;
                float v63 = 5.0;
                goto LABEL_61;
              }
              uint64_t v39 = 0;
              uint64_t v40 = 0;
              do
              {
                unint64_t v41 = v39 + i * v91;
                if ((a10 & 1) == 0 && (v41 < *(int *)(v22 + 8) || v41 >= v99 - *(int *)(v22 + 12))) {
                  goto LABEL_57;
                }
                float v106 = 0.0;
                *(_OWORD *)uint64_t v105 = xmmword_210C6B69C;
                if (v100)
                {
                  uint64_t v42 = 0;
                  do
                  {
                    unint64_t v43 = v37 + v42;
                    if ((a10 & 1) != 0 || v43 >= *(int *)(a7 + 16) && v43 < v102 - *(int *)(a7 + 20))
                    {
                      int v45 = std::function<signed char ()(signed char)>::operator()((uint64_t)v117, *(unsigned char *)(a1 + Index));
                      float v46 = *(float *)(__src.i64[0] + 4 * k) * (float)v45;
                      float v47 = 0.0;
                      if (v46 != 0.0)
                      {
                        int __e = 0;
                        long double v48 = frexp(v46, &__e);
                        double v49 = ldexp(v48, 11);
                        float v47 = ldexp(round(v49), __e - 11);
                      }
                      *(float *)&v105[v42] = v47;
                      ++v40;
                    }
                    ++v42;
                  }
                  while (v35 != v42);
                  float v50 = *(float *)v105 + *(float *)&v105[1];
                  float v51 = 0.0;
                  uint64_t v22 = a7;
                  if ((float)(*(float *)v105 + *(float *)&v105[1]) == 0.0) {
                    goto LABEL_50;
                  }
                }
                else
                {
                  float v50 = 5.0;
                }
                int __e = 0;
                long double v52 = frexp(v50, &__e);
                double v53 = ldexp(v52, 11);
                float v51 = ldexp(round(v53), __e - 11);
LABEL_50:
                float v54 = 0.0;
                float v55 = 0.0;
                if ((float)(v51 + *(float *)&v105[2]) != 0.0)
                {
                  int __e = 0;
                  long double v56 = frexp((float)(v51 + *(float *)&v105[2]), &__e);
                  double v57 = ldexp(v56, 11);
                  float v55 = ldexp(round(v57), __e - 11);
                }
                if ((float)(*(float *)&v105[3] + v106) != 0.0)
                {
                  int __e = 0;
                  long double v58 = frexp((float)(*(float *)&v105[3] + v106), &__e);
                  double v59 = ldexp(v58, 11);
                  float v54 = ldexp(round(v59), __e - 11);
                }
                float v60 = 0.0;
                if ((float)(v55 + v54) != 0.0)
                {
                  int __e = 0;
                  long double v61 = frexp((float)(v55 + v54), &__e);
                  double v62 = ldexp(v61, 11);
                  float v60 = ldexp(round(v62), __e - 11);
                }
                *((float *)&v107 + v39) = v60;
LABEL_57:
                ++v39;
              }
              while (v39 != v101);
              float v63 = *(float *)&v107 + *((float *)&v107 + 1);
              float v64 = 0.0;
              if ((float)(*(float *)&v107 + *((float *)&v107 + 1)) != 0.0)
              {
LABEL_61:
                v105[0] = 0;
                long double v65 = frexp(v63, v105);
                double v66 = ldexp(v65, 11);
                float v64 = ldexp(round(v66), v105[0] - 11);
              }
              float v67 = 0.0;
              float v68 = 0.0;
              if ((float)(v64 + *((float *)&v107 + 2)) != 0.0)
              {
                v105[0] = 0;
                long double v69 = frexp((float)(v64 + *((float *)&v107 + 2)), v105);
                double v70 = ldexp(v69, 11);
                float v68 = ldexp(round(v70), v105[0] - 11);
              }
              if ((float)(*((float *)&v107 + 3) + v108) != 0.0)
              {
                v105[0] = 0;
                long double v71 = frexp((float)(*((float *)&v107 + 3) + v108), v105);
                double v72 = ldexp(v71, 11);
                float v67 = ldexp(round(v72), v105[0] - 11);
              }
              float v73 = v68 + v67;
              float v74 = 0.0;
              if (v73 != 0.0)
              {
                v105[0] = 0;
                long double v75 = frexp(v73, v105);
                double v76 = ldexp(v75, 11);
                float v74 = ldexp(round(v76), v105[0] - 11);
              }
              LOWORD(v105[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v40];
              MIL::Fp16::GetFloat((MIL::Fp16 *)v105);
              float v78 = v74 * v77;
              float v79 = 0.0;
              if (v78 != 0.0)
              {
                v105[0] = 0;
                long double v80 = frexp(v78, v105);
                double v81 = ldexp(v80, 11);
                float v79 = ldexp(round(v81), v105[0] - 11);
              }
              std::function<float ()(float)>::operator()(a12, v79);
              if (v82 == INFINITY)
              {
                char v83 = 127;
              }
              else if (v82 == -INFINITY)
              {
                char v83 = 0x80;
              }
              else
              {
                int v84 = llroundf(v82);
                if (v84 >= 127) {
                  int v84 = 127;
                }
                if (v84 <= -128) {
                  char v83 = 0x80;
                }
                else {
                  char v83 = v84;
                }
              }
            }
LABEL_80:
            v37 += v93;
          }
        }
LABEL_82:
        ++v36;
        uint64_t v31 = v90;
      }
      while (v36 != v90);
LABEL_83:
      ++v33;
    }
    while (v33 != v89);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](v117);
  if (__p)
  {
    uint64_t v110 = __p;
    operator delete(__p);
  }
  if (v112)
  {
    uint64_t v113 = v112;
    operator delete(v112);
  }
}

void sub_210BFA2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v41 = *(void **)(v39 - 208);
  if (v41)
  {
    *(void *)(v39 - 200) = v41;
    operator delete(v41);
  }
  uint64_t v42 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu::Run(MIL::IROperation *a1@<X1>, void *a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 11)
    {
LABEL_10:
      *a3 = 1;
      uint64_t v9 = a3 + 2;
      std::string::basic_string[abi:ne180100]<0>(&v20, "pe_max_pool");
      unint64_t v10 = std::string::insert(&v20, 0, "Expected '");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = std::string::append(&v21, "' op. Got ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      uint64_t v14 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
      int v15 = *(char *)(v14 + 23);
      if (v15 >= 0) {
        uint64_t v16 = (const std::string::value_type *)v14;
      }
      else {
        uint64_t v16 = *(const std::string::value_type **)v14;
      }
      if (v15 >= 0) {
        std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        std::string::size_type v17 = *(void *)(v14 + 8);
      }
      unint64_t v18 = std::string::append(&v22, v16, v17);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      *((void *)v9 + 2) = *((void *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v9 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      return;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 11)
  {
    goto LABEL_10;
  }
  if (*(void *)v6 != 0x705F78616D5F6570 || *(void *)(v6 + 3) != 0x6C6F6F705F78616DLL) {
    goto LABEL_10;
  }
}

void sub_210BFA534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_210BFB3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,int a25,__int16 a26,char a27,char a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)(v60 - 120));
  if (a32 < 0) {
    operator delete(a24);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a38) {
    operator delete(a38);
  }
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::PeMinPoolCpu::Run(MIL::IROperation *a1@<X1>, void *a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 11)
    {
LABEL_10:
      *a3 = 1;
      uint64_t v9 = a3 + 2;
      std::string::basic_string[abi:ne180100]<0>(&v20, "pe_min_pool");
      unint64_t v10 = std::string::insert(&v20, 0, "Expected '");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = std::string::append(&v21, "' op. Got ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      uint64_t v14 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
      int v15 = *(char *)(v14 + 23);
      if (v15 >= 0) {
        uint64_t v16 = (const std::string::value_type *)v14;
      }
      else {
        uint64_t v16 = *(const std::string::value_type **)v14;
      }
      if (v15 >= 0) {
        std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        std::string::size_type v17 = *(void *)(v14 + 8);
      }
      unint64_t v18 = std::string::append(&v22, v16, v17);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      *((void *)v9 + 2) = *((void *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v9 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      return;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 11)
  {
    goto LABEL_10;
  }
  if (*(void *)v6 != 0x705F6E696D5F6570 || *(void *)(v6 + 3) != 0x6C6F6F705F6E696DLL) {
    goto LABEL_10;
  }
}

void sub_210BFB8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu::~PeAvgPoolCpu(MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu *this)
{
}

void MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu::~PeMaxPoolCpu(MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu *this)
{
}

void MIL::ANEMachineIR::Interpreter::PeMinPoolCpu::~PeMinPoolCpu(MIL::ANEMachineIR::Interpreter::PeMinPoolCpu *this)
{
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, char a10)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  __int16 v78 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  int v15 = *(const void **)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  unint64_t v17 = (v16 - *(void *)a3) >> 3;
  if (v17 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    float v54 = "x_rank == o_shape.size()";
    int v55 = 189;
    goto LABEL_62;
  }
  unint64_t v18 = v17 - 2;
  long long v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    float v54 = "kernel_sizes.size() == num_spatial_dims";
    int v55 = 190;
    goto LABEL_62;
  }
  std::string v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    float v54 = "strides.size() == num_spatial_dims";
    int v55 = 191;
LABEL_62:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v55, v54);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        std::string v21 = v20 + 2;
        uint64_t v60 = (int)v20[1];
        std::string v22 = v19 + 2;
        uint64_t v70 = (int)v19[1];
        goto LABEL_11;
      }
      long double v56 = "sz == 1";
      int v57 = 202;
    }
    else
    {
      long double v56 = "kd == 1";
      int v57 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v57, v56);
  }
  if (v18 <= 1)
  {
    uint64_t v25 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v25);
    std::string v21 = (_DWORD *)((char *)v20 + v25);
    uint64_t v70 = 1;
    uint64_t v60 = 1;
  }
  else
  {
    uint64_t v23 = 4 * v17 - 16;
    uint64_t v70 = *(int *)((char *)v19 + v23);
    uint64_t v24 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v24);
    uint64_t v60 = *(int *)((char *)v20 + v23);
    std::string v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_11:
  uint64_t v62 = *v21;
  unsigned int v69 = *v22;
  long double v75 = 0;
  double v76 = 0;
  uint64_t v77 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v75, v15, v16, v17);
  long long __p = 0;
  float v73 = 0;
  uint64_t v74 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v75, (uint64_t)v75 + 8, __src.i8, v81, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v81, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v75, (char *)v75 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v26 = *(void *)__p;
  uint64_t v27 = *((void *)__p + 1);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v28 = *((void *)__p + 4);
  uint64_t v63 = *((void *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v78);
  int __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    uint64_t v30 = 0;
    int v31 = v69;
    if (v69 <= 1) {
      int v31 = 1;
    }
    uint64_t v32 = v31;
    double v66 = a9;
    uint64_t v58 = v26;
    uint64_t v59 = v27;
    unint64_t v64 = v28;
    do
    {
      if (v27)
      {
        uint64_t v33 = 0;
        do
        {
          if (v61)
          {
            for (uint64_t i = 0; i != v61; ++i)
            {
              if (v63)
              {
                uint64_t v34 = 0;
                for (uint64_t j = 0; j != v63; ++j)
                {
                  if (v28)
                  {
                    uint64_t v35 = 0;
                    do
                    {
                      if (v70)
                      {
                        uint64_t v36 = 0;
                        uint64_t v37 = 0;
                        do
                        {
                          if (v69)
                          {
                            uint64_t v38 = 0;
                            do
                            {
                              uint64_t v39 = *(unsigned __int16 *)(a1
                                                        + 2
                              if (v38 | v36)
                              {
                                if (a10)
                                {
                                  LOWORD(__e) = v37;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  float v41 = v40;
                                  LOWORD(__e) = v39;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  if (v41 < v42) {
                                    uint64_t v39 = v39;
                                  }
                                  else {
                                    uint64_t v39 = v37;
                                  }
                                }
                                else
                                {
                                  LOWORD(__e) = v37;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  float v44 = v43;
                                  LOWORD(__e) = v39;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  if (v44 > v45) {
                                    uint64_t v39 = v39;
                                  }
                                  else {
                                    uint64_t v39 = v37;
                                  }
                                }
                              }
                              ++v38;
                              LODWORD(v37) = v39;
                            }
                            while (v32 != v38);
                          }
                          else
                          {
                            uint64_t v39 = v37;
                          }
                          ++v36;
                          uint64_t v37 = v39;
                        }
                        while (v36 != v70);
                      }
                      else
                      {
                        LOWORD(v39) = 0;
                      }
                      LOWORD(__e) = v39;
                      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                      float v47 = v46 * *(float *)(__src.i64[0] + 4 * v35);
                      float v48 = 0.0;
                      if (v47 != 0.0)
                      {
                        int __e = 0;
                        long double v49 = frexp(v47, &__e);
                        double v50 = ldexp(v49, 11);
                        float v48 = ldexp(round(v50), __e - 11);
                      }
                      float v51 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a8, v48);
                      __int16 v53 = MIL::Fp16::FromFloat(v51, v52);
                      *(_WORD *)(*v66
                               + 2
                      unint64_t v28 = v64;
                    }
                    while (v35 != v64);
                  }
                  v34 += v62;
                }
              }
            }
          }
          ++v33;
          uint64_t v27 = v59;
        }
        while (v33 != v59);
      }
      ++v30;
    }
    while (v30 != v58);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    float v73 = __p;
    operator delete(__p);
  }
  if (v75)
  {
    double v76 = v75;
    operator delete(v75);
  }
}

void sub_210BFBEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  uint64_t v32 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<unsigned char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, char a10)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  __int16 v78 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  int v15 = *(const void **)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  unint64_t v17 = (v16 - *(void *)a3) >> 3;
  if (v17 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    float v54 = "x_rank == o_shape.size()";
    int v55 = 189;
    goto LABEL_71;
  }
  unint64_t v18 = v17 - 2;
  long long v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    float v54 = "kernel_sizes.size() == num_spatial_dims";
    int v55 = 190;
    goto LABEL_71;
  }
  std::string v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    float v54 = "strides.size() == num_spatial_dims";
    int v55 = 191;
LABEL_71:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v55, v54);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        std::string v21 = v20 + 2;
        uint64_t v60 = (int)v20[1];
        std::string v22 = v19 + 2;
        uint64_t v70 = (int)v19[1];
        goto LABEL_13;
      }
      long double v56 = "sz == 1";
      int v57 = 202;
    }
    else
    {
      long double v56 = "kd == 1";
      int v57 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v57, v56);
  }
  if (v18 <= 1)
  {
    uint64_t v25 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v25);
    std::string v21 = (_DWORD *)((char *)v20 + v25);
    uint64_t v70 = 1;
    uint64_t v60 = 1;
  }
  else
  {
    uint64_t v23 = 4 * v17 - 16;
    uint64_t v70 = *(int *)((char *)v19 + v23);
    uint64_t v24 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v24);
    uint64_t v60 = *(int *)((char *)v20 + v23);
    std::string v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_13:
  uint64_t v62 = *v21;
  unsigned int v69 = *v22;
  long double v75 = 0;
  double v76 = 0;
  uint64_t v77 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v75, v15, v16, v17);
  long long __p = 0;
  float v73 = 0;
  uint64_t v74 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v75, (uint64_t)v75 + 8, __src.i8, v81, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v81, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v75, (char *)v75 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v26 = *(void *)__p;
  uint64_t v27 = *((void *)__p + 1);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v28 = *((void *)__p + 4);
  uint64_t v63 = *((void *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v78);
  int __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    uint64_t v30 = 0;
    int v31 = v69;
    if (v69 <= 1) {
      int v31 = 1;
    }
    uint64_t v32 = v31;
    double v66 = a9;
    uint64_t v58 = v26;
    uint64_t v59 = v27;
    unint64_t v64 = v28;
    do
    {
      if (v27)
      {
        uint64_t v33 = 0;
        do
        {
          if (v61)
          {
            for (uint64_t i = 0; i != v61; ++i)
            {
              if (v63)
              {
                uint64_t v34 = 0;
                for (uint64_t j = 0; j != v63; ++j)
                {
                  if (v28)
                  {
                    uint64_t v35 = 0;
                    do
                    {
                      if (v70)
                      {
                        uint64_t v36 = 0;
                        uint64_t v37 = 0;
                        do
                        {
                          if (v69)
                          {
                            uint64_t v38 = 0;
                            do
                            {
                              uint64_t v39 = *(unsigned __int16 *)(a1
                                                        + 2
                              if (v38 | v36)
                              {
                                if (a10)
                                {
                                  LOWORD(__e) = v37;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  float v41 = v40;
                                  LOWORD(__e) = v39;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  if (v41 < v42) {
                                    uint64_t v39 = v39;
                                  }
                                  else {
                                    uint64_t v39 = v37;
                                  }
                                }
                                else
                                {
                                  LOWORD(__e) = v37;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  float v44 = v43;
                                  LOWORD(__e) = v39;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  if (v44 > v45) {
                                    uint64_t v39 = v39;
                                  }
                                  else {
                                    uint64_t v39 = v37;
                                  }
                                }
                              }
                              ++v38;
                              LODWORD(v37) = v39;
                            }
                            while (v32 != v38);
                          }
                          else
                          {
                            uint64_t v39 = v37;
                          }
                          ++v36;
                          uint64_t v37 = v39;
                        }
                        while (v36 != v70);
                      }
                      else
                      {
                        LOWORD(v39) = 0;
                      }
                      LOWORD(__e) = v39;
                      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                      unint64_t v28 = v64;
                      float v47 = v46 * *(float *)(__src.i64[0] + 4 * v35);
                      float v48 = 0.0;
                      if (v47 != 0.0)
                      {
                        int __e = 0;
                        long double v49 = frexp(v47, &__e);
                        double v50 = ldexp(v49, 11);
                        float v48 = ldexp(round(v50), __e - 11);
                      }
                      std::function<float ()(float)>::operator()(a8, v48);
                      if (v51 == INFINITY)
                      {
                        LOBYTE(v52) = -1;
                      }
                      else if (v51 == -INFINITY)
                      {
                        LOBYTE(v52) = 0;
                      }
                      else
                      {
                        int v53 = llroundf(v51);
                        if (v53 >= 255) {
                          int v53 = 255;
                        }
                        int v52 = v53 & ~(v53 >> 31);
                      }
                      *(unsigned char *)(*v66
                    }
                    while (v35 != v64);
                  }
                  v34 += v62;
                }
              }
            }
          }
          ++v33;
          uint64_t v27 = v59;
        }
        while (v33 != v59);
      }
      ++v30;
    }
    while (v30 != v58);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    float v73 = __p;
    operator delete(__p);
  }
  if (v75)
  {
    double v76 = v75;
    operator delete(v75);
  }
}

void sub_210BFC52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  uint64_t v32 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<signed char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, char a10)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  __int16 v78 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  int v15 = *(const void **)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  unint64_t v17 = (v16 - *(void *)a3) >> 3;
  if (v17 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    float v54 = "x_rank == o_shape.size()";
    int v55 = 189;
    goto LABEL_73;
  }
  unint64_t v18 = v17 - 2;
  long long v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    float v54 = "kernel_sizes.size() == num_spatial_dims";
    int v55 = 190;
    goto LABEL_73;
  }
  std::string v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    float v54 = "strides.size() == num_spatial_dims";
    int v55 = 191;
LABEL_73:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v55, v54);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        std::string v21 = v20 + 2;
        uint64_t v60 = (int)v20[1];
        std::string v22 = v19 + 2;
        uint64_t v70 = (int)v19[1];
        goto LABEL_13;
      }
      long double v56 = "sz == 1";
      int v57 = 202;
    }
    else
    {
      long double v56 = "kd == 1";
      int v57 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v57, v56);
  }
  if (v18 <= 1)
  {
    uint64_t v25 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v25);
    std::string v21 = (_DWORD *)((char *)v20 + v25);
    uint64_t v70 = 1;
    uint64_t v60 = 1;
  }
  else
  {
    uint64_t v23 = 4 * v17 - 16;
    uint64_t v70 = *(int *)((char *)v19 + v23);
    uint64_t v24 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v24);
    uint64_t v60 = *(int *)((char *)v20 + v23);
    std::string v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_13:
  uint64_t v62 = *v21;
  unsigned int v69 = *v22;
  long double v75 = 0;
  double v76 = 0;
  uint64_t v77 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v75, v15, v16, v17);
  long long __p = 0;
  float v73 = 0;
  uint64_t v74 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v75, (uint64_t)v75 + 8, __src.i8, v81, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v81, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v75, (char *)v75 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v26 = *(void *)__p;
  uint64_t v27 = *((void *)__p + 1);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v28 = *((void *)__p + 4);
  uint64_t v63 = *((void *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v78);
  int __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    uint64_t v30 = 0;
    int v31 = v69;
    if (v69 <= 1) {
      int v31 = 1;
    }
    uint64_t v32 = v31;
    double v66 = a9;
    uint64_t v58 = v26;
    uint64_t v59 = v27;
    unint64_t v64 = v28;
    do
    {
      if (v27)
      {
        uint64_t v33 = 0;
        do
        {
          if (v61)
          {
            for (uint64_t i = 0; i != v61; ++i)
            {
              if (v63)
              {
                uint64_t v34 = 0;
                for (uint64_t j = 0; j != v63; ++j)
                {
                  if (v28)
                  {
                    uint64_t v35 = 0;
                    do
                    {
                      if (v70)
                      {
                        uint64_t v36 = 0;
                        uint64_t v37 = 0;
                        do
                        {
                          if (v69)
                          {
                            uint64_t v38 = 0;
                            do
                            {
                              uint64_t v39 = *(unsigned __int16 *)(a1
                                                        + 2
                              if (v38 | v36)
                              {
                                if (a10)
                                {
                                  LOWORD(__e) = v37;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  float v41 = v40;
                                  LOWORD(__e) = v39;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  if (v41 < v42) {
                                    uint64_t v39 = v39;
                                  }
                                  else {
                                    uint64_t v39 = v37;
                                  }
                                }
                                else
                                {
                                  LOWORD(__e) = v37;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  float v44 = v43;
                                  LOWORD(__e) = v39;
                                  MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                                  if (v44 > v45) {
                                    uint64_t v39 = v39;
                                  }
                                  else {
                                    uint64_t v39 = v37;
                                  }
                                }
                              }
                              ++v38;
                              LODWORD(v37) = v39;
                            }
                            while (v32 != v38);
                          }
                          else
                          {
                            uint64_t v39 = v37;
                          }
                          ++v36;
                          uint64_t v37 = v39;
                        }
                        while (v36 != v70);
                      }
                      else
                      {
                        LOWORD(v39) = 0;
                      }
                      LOWORD(__e) = v39;
                      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
                      unint64_t v28 = v64;
                      float v47 = v46 * *(float *)(__src.i64[0] + 4 * v35);
                      float v48 = 0.0;
                      if (v47 != 0.0)
                      {
                        int __e = 0;
                        long double v49 = frexp(v47, &__e);
                        double v50 = ldexp(v49, 11);
                        float v48 = ldexp(round(v50), __e - 11);
                      }
                      std::function<float ()(float)>::operator()(a8, v48);
                      if (v51 == INFINITY)
                      {
                        char v52 = 127;
                      }
                      else if (v51 == -INFINITY)
                      {
                        char v52 = 0x80;
                      }
                      else
                      {
                        int v53 = llroundf(v51);
                        if (v53 >= 127) {
                          int v53 = 127;
                        }
                        if (v53 <= -128) {
                          char v52 = 0x80;
                        }
                        else {
                          char v52 = v53;
                        }
                      }
                      *(unsigned char *)(*v66
                    }
                    while (v35 != v64);
                  }
                  v34 += v62;
                }
              }
            }
          }
          ++v33;
          uint64_t v27 = v59;
        }
        while (v33 != v59);
      }
      ++v30;
    }
    while (v30 != v58);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    float v73 = __p;
    operator delete(__p);
  }
  if (v75)
  {
    double v76 = v75;
    operator delete(v75);
  }
}

void sub_210BFCB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  uint64_t v32 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, char a10)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  __int16 v72 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  int v15 = *(const void **)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  unint64_t v17 = (v16 - *(void *)a3) >> 3;
  if (v17 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    float v48 = "x_rank == o_shape.size()";
    int v49 = 189;
    goto LABEL_57;
  }
  unint64_t v18 = v17 - 2;
  long long v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    float v48 = "kernel_sizes.size() == num_spatial_dims";
    int v49 = 190;
    goto LABEL_57;
  }
  std::string v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    float v48 = "strides.size() == num_spatial_dims";
    int v49 = 191;
LABEL_57:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v49, v48);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        std::string v21 = v20 + 2;
        uint64_t v54 = (int)v20[1];
        std::string v22 = v19 + 2;
        uint64_t v64 = (int)v19[1];
        goto LABEL_11;
      }
      double v50 = "sz == 1";
      int v51 = 202;
    }
    else
    {
      double v50 = "kd == 1";
      int v51 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v51, v50);
  }
  if (v18 <= 1)
  {
    uint64_t v25 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v25);
    std::string v21 = (_DWORD *)((char *)v20 + v25);
    uint64_t v64 = 1;
    uint64_t v54 = 1;
  }
  else
  {
    uint64_t v23 = 4 * v17 - 16;
    uint64_t v64 = *(int *)((char *)v19 + v23);
    uint64_t v24 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v24);
    uint64_t v54 = *(int *)((char *)v20 + v23);
    std::string v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_11:
  uint64_t v56 = *v21;
  unsigned int v63 = *v22;
  unsigned int v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v69, v15, v16, v17);
  long long __p = 0;
  float v67 = 0;
  uint64_t v68 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v69, (uint64_t)v69 + 8, __src.i8, v75, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v75, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v69, (char *)v69 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v26 = *(void *)__p;
  uint64_t v27 = *((void *)__p + 1);
  uint64_t v55 = *((void *)__p + 2);
  unint64_t v28 = *((void *)__p + 4);
  uint64_t v57 = *((void *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v72);
  int __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    uint64_t v30 = 0;
    int v31 = v63;
    if (v63 <= 1) {
      int v31 = 1;
    }
    uint64_t v32 = v31;
    uint64_t v60 = a9;
    uint64_t v52 = v26;
    uint64_t v53 = v27;
    unint64_t v58 = v28;
    do
    {
      if (v27)
      {
        uint64_t v33 = 0;
        do
        {
          if (v55)
          {
            for (uint64_t i = 0; i != v55; ++i)
            {
              if (v57)
              {
                uint64_t v34 = 0;
                for (uint64_t j = 0; j != v57; ++j)
                {
                  if (v28)
                  {
                    uint64_t v35 = 0;
                    do
                    {
                      unsigned __int8 v36 = a10 - 1;
                      if (v64)
                      {
                        uint64_t v37 = 0;
                        unsigned __int8 v36 = a10 - 1;
                        do
                        {
                          if (v63)
                          {
                            uint64_t v38 = 0;
                            do
                            {
                              unsigned int v40 = *(unsigned __int8 *)(a1 + Index);
                              if (v38 | v37)
                              {
                                if (a10)
                                {
                                  if (v36 <= v40) {
                                    unsigned __int8 v36 = *(unsigned char *)(a1 + Index);
                                  }
                                }
                                else if (v36 >= v40)
                                {
                                  unsigned __int8 v36 = *(unsigned char *)(a1 + Index);
                                }
                              }
                              else
                              {
                                unsigned __int8 v36 = *(unsigned char *)(a1 + Index);
                              }
                              ++v38;
                            }
                            while (v32 != v38);
                          }
                          ++v37;
                        }
                        while (v37 != v64);
                      }
                      float v41 = *(float *)(__src.i64[0] + 4 * v35) * (float)v36;
                      float v42 = 0.0;
                      if (v41 != 0.0)
                      {
                        int __e = 0;
                        long double v43 = frexp(v41, &__e);
                        double v44 = ldexp(v43, 11);
                        float v42 = ldexp(round(v44), __e - 11);
                      }
                      float v45 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a8, v42);
                      __int16 v47 = MIL::Fp16::FromFloat(v45, v46);
                      *(_WORD *)(*v60
                               + 2
                      unint64_t v28 = v58;
                    }
                    while (v35 != v58);
                  }
                  v34 += v56;
                }
              }
            }
          }
          ++v33;
          uint64_t v27 = v53;
        }
        while (v33 != v53);
      }
      ++v30;
    }
    while (v30 != v52);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    float v67 = __p;
    operator delete(__p);
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
}

void sub_210BFD10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  uint64_t v32 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<unsigned char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, char a10)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  __int16 v72 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  int v15 = *(const void **)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  unint64_t v17 = (v16 - *(void *)a3) >> 3;
  if (v17 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    float v48 = "x_rank == o_shape.size()";
    int v49 = 189;
    goto LABEL_66;
  }
  unint64_t v18 = v17 - 2;
  long long v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    float v48 = "kernel_sizes.size() == num_spatial_dims";
    int v49 = 190;
    goto LABEL_66;
  }
  std::string v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    float v48 = "strides.size() == num_spatial_dims";
    int v49 = 191;
LABEL_66:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v49, v48);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        std::string v21 = v20 + 2;
        uint64_t v54 = (int)v20[1];
        std::string v22 = v19 + 2;
        uint64_t v64 = (int)v19[1];
        goto LABEL_13;
      }
      double v50 = "sz == 1";
      int v51 = 202;
    }
    else
    {
      double v50 = "kd == 1";
      int v51 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v51, v50);
  }
  if (v18 <= 1)
  {
    uint64_t v25 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v25);
    std::string v21 = (_DWORD *)((char *)v20 + v25);
    uint64_t v64 = 1;
    uint64_t v54 = 1;
  }
  else
  {
    uint64_t v23 = 4 * v17 - 16;
    uint64_t v64 = *(int *)((char *)v19 + v23);
    uint64_t v24 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v24);
    uint64_t v54 = *(int *)((char *)v20 + v23);
    std::string v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_13:
  uint64_t v56 = *v21;
  unsigned int v63 = *v22;
  unsigned int v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v69, v15, v16, v17);
  long long __p = 0;
  float v67 = 0;
  uint64_t v68 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v69, (uint64_t)v69 + 8, __src.i8, v75, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v75, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v69, (char *)v69 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v26 = *(void *)__p;
  uint64_t v27 = *((void *)__p + 1);
  uint64_t v55 = *((void *)__p + 2);
  unint64_t v28 = *((void *)__p + 4);
  uint64_t v57 = *((void *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v72);
  int __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    uint64_t v30 = 0;
    int v31 = v63;
    if (v63 <= 1) {
      int v31 = 1;
    }
    uint64_t v32 = v31;
    uint64_t v60 = a9;
    uint64_t v52 = v26;
    uint64_t v53 = v27;
    unint64_t v58 = v28;
    do
    {
      if (v27)
      {
        uint64_t v33 = 0;
        do
        {
          if (v55)
          {
            for (uint64_t i = 0; i != v55; ++i)
            {
              if (v57)
              {
                uint64_t v34 = 0;
                for (uint64_t j = 0; j != v57; ++j)
                {
                  if (v28)
                  {
                    uint64_t v35 = 0;
                    do
                    {
                      unsigned __int8 v36 = a10 - 1;
                      if (v64)
                      {
                        uint64_t v37 = 0;
                        unsigned __int8 v36 = a10 - 1;
                        do
                        {
                          if (v63)
                          {
                            uint64_t v38 = 0;
                            do
                            {
                              unsigned int v40 = *(unsigned __int8 *)(a1 + Index);
                              if (v38 | v37)
                              {
                                if (a10)
                                {
                                  if (v36 <= v40) {
                                    unsigned __int8 v36 = *(unsigned char *)(a1 + Index);
                                  }
                                }
                                else if (v36 >= v40)
                                {
                                  unsigned __int8 v36 = *(unsigned char *)(a1 + Index);
                                }
                              }
                              else
                              {
                                unsigned __int8 v36 = *(unsigned char *)(a1 + Index);
                              }
                              ++v38;
                            }
                            while (v32 != v38);
                          }
                          ++v37;
                        }
                        while (v37 != v64);
                      }
                      float v41 = *(float *)(__src.i64[0] + 4 * v35) * (float)v36;
                      float v42 = 0.0;
                      if (v41 != 0.0)
                      {
                        int __e = 0;
                        long double v43 = frexp(v41, &__e);
                        double v44 = ldexp(v43, 11);
                        float v42 = ldexp(round(v44), __e - 11);
                      }
                      std::function<float ()(float)>::operator()(a8, v42);
                      unint64_t v28 = v58;
                      if (v45 == INFINITY)
                      {
                        LOBYTE(v46) = -1;
                      }
                      else if (v45 == -INFINITY)
                      {
                        LOBYTE(v46) = 0;
                      }
                      else
                      {
                        int v47 = llroundf(v45);
                        if (v47 >= 255) {
                          int v47 = 255;
                        }
                        int v46 = v47 & ~(v47 >> 31);
                      }
                      *(unsigned char *)(*v60
                    }
                    while (v35 != v58);
                  }
                  v34 += v56;
                }
              }
            }
          }
          ++v33;
          uint64_t v27 = v53;
        }
        while (v33 != v53);
      }
      ++v30;
    }
    while (v30 != v52);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    float v67 = __p;
    operator delete(__p);
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
}

void sub_210BFD6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  uint64_t v32 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<signed char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, char a10)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  __int16 v72 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  int v15 = *(const void **)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  unint64_t v17 = (v16 - *(void *)a3) >> 3;
  if (v17 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    float v48 = "x_rank == o_shape.size()";
    int v49 = 189;
    goto LABEL_68;
  }
  unint64_t v18 = v17 - 2;
  long long v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    float v48 = "kernel_sizes.size() == num_spatial_dims";
    int v49 = 190;
    goto LABEL_68;
  }
  std::string v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    float v48 = "strides.size() == num_spatial_dims";
    int v49 = 191;
LABEL_68:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v49, v48);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        std::string v21 = v20 + 2;
        uint64_t v54 = (int)v20[1];
        std::string v22 = v19 + 2;
        uint64_t v64 = (int)v19[1];
        goto LABEL_13;
      }
      double v50 = "sz == 1";
      int v51 = 202;
    }
    else
    {
      double v50 = "kd == 1";
      int v51 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v51, v50);
  }
  if (v18 <= 1)
  {
    uint64_t v25 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v25);
    std::string v21 = (_DWORD *)((char *)v20 + v25);
    uint64_t v64 = 1;
    uint64_t v54 = 1;
  }
  else
  {
    uint64_t v23 = 4 * v17 - 16;
    uint64_t v64 = *(int *)((char *)v19 + v23);
    uint64_t v24 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v24);
    uint64_t v54 = *(int *)((char *)v20 + v23);
    std::string v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_13:
  uint64_t v56 = *v21;
  unsigned int v63 = *v22;
  unsigned int v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v69, v15, v16, v17);
  long long __p = 0;
  float v67 = 0;
  uint64_t v68 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v69, (uint64_t)v69 + 8, __src.i8, v75, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v75, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v69, (char *)v69 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v26 = *(void *)__p;
  uint64_t v27 = *((void *)__p + 1);
  uint64_t v55 = *((void *)__p + 2);
  unint64_t v28 = *((void *)__p + 4);
  uint64_t v57 = *((void *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v72);
  int __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    uint64_t v30 = 0;
    int v31 = v63;
    if (v63 <= 1) {
      int v31 = 1;
    }
    uint64_t v32 = v31;
    uint64_t v60 = a9;
    uint64_t v52 = v26;
    uint64_t v53 = v27;
    unint64_t v58 = v28;
    do
    {
      if (v27)
      {
        uint64_t v33 = 0;
        do
        {
          if (v55)
          {
            for (uint64_t i = 0; i != v55; ++i)
            {
              if (v57)
              {
                uint64_t v34 = 0;
                for (uint64_t j = 0; j != v57; ++j)
                {
                  if (v28)
                  {
                    uint64_t v35 = 0;
                    do
                    {
                      unsigned __int8 v36 = a10 - 1;
                      if (v64)
                      {
                        uint64_t v37 = 0;
                        unsigned __int8 v36 = a10 - 1;
                        do
                        {
                          if (v63)
                          {
                            uint64_t v38 = 0;
                            do
                            {
                              unsigned int v40 = *(unsigned __int8 *)(a1 + Index);
                              if (v38 | v37)
                              {
                                if (a10)
                                {
                                  if (v36 <= v40) {
                                    unsigned __int8 v36 = *(unsigned char *)(a1 + Index);
                                  }
                                }
                                else if (v36 >= v40)
                                {
                                  unsigned __int8 v36 = *(unsigned char *)(a1 + Index);
                                }
                              }
                              else
                              {
                                unsigned __int8 v36 = *(unsigned char *)(a1 + Index);
                              }
                              ++v38;
                            }
                            while (v32 != v38);
                          }
                          ++v37;
                        }
                        while (v37 != v64);
                      }
                      float v41 = *(float *)(__src.i64[0] + 4 * v35) * (float)v36;
                      float v42 = 0.0;
                      if (v41 != 0.0)
                      {
                        int __e = 0;
                        long double v43 = frexp(v41, &__e);
                        double v44 = ldexp(v43, 11);
                        float v42 = ldexp(round(v44), __e - 11);
                      }
                      std::function<float ()(float)>::operator()(a8, v42);
                      unint64_t v28 = v58;
                      if (v45 == INFINITY)
                      {
                        char v46 = 127;
                      }
                      else if (v45 == -INFINITY)
                      {
                        char v46 = 0x80;
                      }
                      else
                      {
                        int v47 = llroundf(v45);
                        if (v47 >= 127) {
                          int v47 = 127;
                        }
                        if (v47 <= -128) {
                          char v46 = 0x80;
                        }
                        else {
                          char v46 = v47;
                        }
                      }
                      *(unsigned char *)(*v60
                    }
                    while (v35 != v58);
                  }
                  v34 += v56;
                }
              }
            }
          }
          ++v33;
          uint64_t v27 = v53;
        }
        while (v33 != v53);
      }
      ++v30;
    }
    while (v30 != v52);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    float v67 = __p;
    operator delete(__p);
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
}

void sub_210BFDCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  uint64_t v32 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<MIL::Fp16,signed char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, char a10)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  __int16 v74 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  int v15 = *(const void **)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  unint64_t v17 = (v16 - *(void *)a3) >> 3;
  if (v17 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v49 = "x_rank == o_shape.size()";
    int v50 = 189;
    goto LABEL_60;
  }
  unint64_t v18 = v17 - 2;
  long long v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    int v49 = "kernel_sizes.size() == num_spatial_dims";
    int v50 = 190;
    goto LABEL_60;
  }
  std::string v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    int v49 = "strides.size() == num_spatial_dims";
    int v50 = 191;
LABEL_60:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v50, v49);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        std::string v21 = v20 + 2;
        uint64_t v55 = (int)v20[1];
        std::string v22 = v19 + 2;
        uint64_t v66 = (int)v19[1];
        goto LABEL_11;
      }
      int v51 = "sz == 1";
      int v52 = 202;
    }
    else
    {
      int v51 = "kd == 1";
      int v52 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v52, v51);
  }
  if (v18 <= 1)
  {
    uint64_t v25 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v25);
    std::string v21 = (_DWORD *)((char *)v20 + v25);
    uint64_t v66 = 1;
    uint64_t v55 = 1;
  }
  else
  {
    uint64_t v23 = 4 * v17 - 16;
    uint64_t v66 = *(int *)((char *)v19 + v23);
    uint64_t v24 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v24);
    uint64_t v55 = *(int *)((char *)v20 + v23);
    std::string v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_11:
  uint64_t v57 = *v21;
  unsigned int v65 = *v22;
  uint64_t v71 = 0;
  __int16 v72 = 0;
  uint64_t v73 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v71, v15, v16, v17);
  long long __p = 0;
  unsigned int v69 = 0;
  uint64_t v70 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v71, (uint64_t)v71 + 8, __src.i8, v77, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v77, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v71, (char *)v71 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v26 = *(void *)__p;
  uint64_t v27 = *((void *)__p + 1);
  uint64_t v56 = *((void *)__p + 2);
  unint64_t v28 = *((void *)__p + 4);
  uint64_t v58 = *((void *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v74);
  int __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    uint64_t v30 = 0;
    if (a10) {
      char v31 = 0x80;
    }
    else {
      char v31 = 127;
    }
    char v64 = v31;
    int v32 = v65;
    if (v65 <= 1) {
      int v32 = 1;
    }
    uint64_t v33 = v32;
    uint64_t v61 = a9;
    uint64_t v53 = v26;
    uint64_t v54 = v27;
    unint64_t v59 = v28;
    do
    {
      if (v27)
      {
        uint64_t v34 = 0;
        do
        {
          if (v56)
          {
            for (uint64_t i = 0; i != v56; ++i)
            {
              if (v58)
              {
                uint64_t v35 = 0;
                for (uint64_t j = 0; j != v58; ++j)
                {
                  if (v28)
                  {
                    uint64_t v36 = 0;
                    do
                    {
                      char v37 = v64;
                      if (v66)
                      {
                        uint64_t v38 = 0;
                        char v37 = v64;
                        do
                        {
                          if (v65)
                          {
                            uint64_t v39 = 0;
                            do
                            {
                              char v41 = *(unsigned char *)(a1 + Index);
                              if (v39 | v38)
                              {
                                if (a10)
                                {
                                  if (v37 <= v41) {
                                    char v37 = *(unsigned char *)(a1 + Index);
                                  }
                                }
                                else if (v37 > v41)
                                {
                                  char v37 = *(unsigned char *)(a1 + Index);
                                }
                              }
                              else
                              {
                                char v37 = *(unsigned char *)(a1 + Index);
                              }
                              ++v39;
                            }
                            while (v33 != v39);
                          }
                          ++v38;
                        }
                        while (v38 != v66);
                      }
                      float v42 = *(float *)(__src.i64[0] + 4 * v36) * (float)v37;
                      float v43 = 0.0;
                      if (v42 != 0.0)
                      {
                        int __e = 0;
                        long double v44 = frexp(v42, &__e);
                        double v45 = ldexp(v44, 11);
                        float v43 = ldexp(round(v45), __e - 11);
                      }
                      char v46 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a8, v43);
                      __int16 v48 = MIL::Fp16::FromFloat(v46, v47);
                      *(_WORD *)(*v61
                               + 2
                      unint64_t v28 = v59;
                    }
                    while (v36 != v59);
                  }
                  v35 += v57;
                }
              }
            }
          }
          ++v34;
          uint64_t v27 = v54;
        }
        while (v34 != v54);
      }
      ++v30;
    }
    while (v30 != v53);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    unsigned int v69 = __p;
    operator delete(__p);
  }
  if (v71)
  {
    __int16 v72 = v71;
    operator delete(v71);
  }
}

void sub_210BFE28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  int v32 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<unsigned char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, char a10)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  __int16 v74 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  int v15 = *(const void **)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  unint64_t v17 = (v16 - *(void *)a3) >> 3;
  if (v17 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v49 = "x_rank == o_shape.size()";
    int v50 = 189;
    goto LABEL_69;
  }
  unint64_t v18 = v17 - 2;
  long long v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    int v49 = "kernel_sizes.size() == num_spatial_dims";
    int v50 = 190;
    goto LABEL_69;
  }
  std::string v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    int v49 = "strides.size() == num_spatial_dims";
    int v50 = 191;
LABEL_69:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v50, v49);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        std::string v21 = v20 + 2;
        uint64_t v55 = (int)v20[1];
        std::string v22 = v19 + 2;
        uint64_t v66 = (int)v19[1];
        goto LABEL_13;
      }
      int v51 = "sz == 1";
      int v52 = 202;
    }
    else
    {
      int v51 = "kd == 1";
      int v52 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v52, v51);
  }
  if (v18 <= 1)
  {
    uint64_t v25 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v25);
    std::string v21 = (_DWORD *)((char *)v20 + v25);
    uint64_t v66 = 1;
    uint64_t v55 = 1;
  }
  else
  {
    uint64_t v23 = 4 * v17 - 16;
    uint64_t v66 = *(int *)((char *)v19 + v23);
    uint64_t v24 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v24);
    uint64_t v55 = *(int *)((char *)v20 + v23);
    std::string v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_13:
  uint64_t v57 = *v21;
  unsigned int v65 = *v22;
  uint64_t v71 = 0;
  __int16 v72 = 0;
  uint64_t v73 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v71, v15, v16, v17);
  long long __p = 0;
  unsigned int v69 = 0;
  uint64_t v70 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v71, (uint64_t)v71 + 8, __src.i8, v77, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v77, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v71, (char *)v71 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v26 = *(void *)__p;
  uint64_t v27 = *((void *)__p + 1);
  uint64_t v56 = *((void *)__p + 2);
  unint64_t v28 = *((void *)__p + 4);
  uint64_t v58 = *((void *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v74);
  int __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    uint64_t v30 = 0;
    if (a10) {
      char v31 = 0x80;
    }
    else {
      char v31 = 127;
    }
    char v64 = v31;
    int v32 = v65;
    if (v65 <= 1) {
      int v32 = 1;
    }
    uint64_t v33 = v32;
    uint64_t v61 = a9;
    uint64_t v53 = v26;
    uint64_t v54 = v27;
    unint64_t v59 = v28;
    do
    {
      if (v27)
      {
        uint64_t v34 = 0;
        do
        {
          if (v56)
          {
            for (uint64_t i = 0; i != v56; ++i)
            {
              if (v58)
              {
                uint64_t v35 = 0;
                for (uint64_t j = 0; j != v58; ++j)
                {
                  if (v28)
                  {
                    uint64_t v36 = 0;
                    do
                    {
                      char v37 = v64;
                      if (v66)
                      {
                        uint64_t v38 = 0;
                        char v37 = v64;
                        do
                        {
                          if (v65)
                          {
                            uint64_t v39 = 0;
                            do
                            {
                              char v41 = *(unsigned char *)(a1 + Index);
                              if (v39 | v38)
                              {
                                if (a10)
                                {
                                  if (v37 <= v41) {
                                    char v37 = *(unsigned char *)(a1 + Index);
                                  }
                                }
                                else if (v37 > v41)
                                {
                                  char v37 = *(unsigned char *)(a1 + Index);
                                }
                              }
                              else
                              {
                                char v37 = *(unsigned char *)(a1 + Index);
                              }
                              ++v39;
                            }
                            while (v33 != v39);
                          }
                          ++v38;
                        }
                        while (v38 != v66);
                      }
                      float v42 = *(float *)(__src.i64[0] + 4 * v36) * (float)v37;
                      float v43 = 0.0;
                      if (v42 != 0.0)
                      {
                        int __e = 0;
                        long double v44 = frexp(v42, &__e);
                        double v45 = ldexp(v44, 11);
                        float v43 = ldexp(round(v45), __e - 11);
                      }
                      std::function<float ()(float)>::operator()(a8, v43);
                      unint64_t v28 = v59;
                      if (v46 == INFINITY)
                      {
                        LOBYTE(v47) = -1;
                      }
                      else if (v46 == -INFINITY)
                      {
                        LOBYTE(v47) = 0;
                      }
                      else
                      {
                        int v48 = llroundf(v46);
                        if (v48 >= 255) {
                          int v48 = 255;
                        }
                        int v47 = v48 & ~(v48 >> 31);
                      }
                      *(unsigned char *)(*v61
                    }
                    while (v36 != v59);
                  }
                  v35 += v57;
                }
              }
            }
          }
          ++v34;
          uint64_t v27 = v54;
        }
        while (v34 != v54);
      }
      ++v30;
    }
    while (v30 != v53);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    unsigned int v69 = __p;
    operator delete(__p);
  }
  if (v71)
  {
    __int16 v72 = v71;
    operator delete(v71);
  }
}

void sub_210BFE87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  int v32 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<signed char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, unint64_t *a9@<X8>, char a10)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  __int16 v74 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  int v15 = *(const void **)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  unint64_t v17 = (v16 - *(void *)a3) >> 3;
  if (v17 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v49 = "x_rank == o_shape.size()";
    int v50 = 189;
    goto LABEL_71;
  }
  unint64_t v18 = v17 - 2;
  long long v19 = *(_DWORD **)a5;
  if (v17 - 2 != (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2)
  {
    int v49 = "kernel_sizes.size() == num_spatial_dims";
    int v50 = 190;
    goto LABEL_71;
  }
  std::string v20 = *(_DWORD **)a6;
  if (v18 != (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2)
  {
    int v49 = "strides.size() == num_spatial_dims";
    int v50 = 191;
LABEL_71:
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v50, v49);
  }
  if (v17 == 5)
  {
    if (*v19 == 1)
    {
      if (*v20 == 1)
      {
        std::string v21 = v20 + 2;
        uint64_t v55 = (int)v20[1];
        std::string v22 = v19 + 2;
        uint64_t v66 = (int)v19[1];
        goto LABEL_13;
      }
      int v51 = "sz == 1";
      int v52 = 202;
    }
    else
    {
      int v51 = "kd == 1";
      int v52 = 201;
    }
    __assert_rtn("ComputeValueMinMaxPool", "PePoolCpu.cpp", v52, v51);
  }
  if (v18 <= 1)
  {
    uint64_t v25 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v25);
    std::string v21 = (_DWORD *)((char *)v20 + v25);
    uint64_t v66 = 1;
    uint64_t v55 = 1;
  }
  else
  {
    uint64_t v23 = 4 * v17 - 16;
    uint64_t v66 = *(int *)((char *)v19 + v23);
    uint64_t v24 = 4 * v17 - 12;
    std::string v22 = (_DWORD *)((char *)v19 + v24);
    uint64_t v55 = *(int *)((char *)v20 + v23);
    std::string v21 = (_DWORD *)((char *)v20 + v24);
  }
LABEL_13:
  uint64_t v57 = *v21;
  unsigned int v65 = *v22;
  uint64_t v71 = 0;
  __int16 v72 = 0;
  uint64_t v73 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v71, v15, v16, v17);
  long long __p = 0;
  unsigned int v69 = 0;
  uint64_t v70 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v71, (uint64_t)v71 + 8, __src.i8, v77, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, __src.i8, v77, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v71, (char *)v71 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, &__src);
  }
  uint64_t v26 = *(void *)__p;
  uint64_t v27 = *((void *)__p + 1);
  uint64_t v56 = *((void *)__p + 2);
  unint64_t v28 = *((void *)__p + 4);
  uint64_t v58 = *((void *)__p + 3);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v74);
  int __e = v29;
  std::vector<float>::vector(&__src, v28, &__e);
  if (v26)
  {
    uint64_t v30 = 0;
    if (a10) {
      char v31 = 0x80;
    }
    else {
      char v31 = 127;
    }
    char v64 = v31;
    int v32 = v65;
    if (v65 <= 1) {
      int v32 = 1;
    }
    uint64_t v33 = v32;
    uint64_t v61 = a9;
    uint64_t v53 = v26;
    uint64_t v54 = v27;
    unint64_t v59 = v28;
    do
    {
      if (v27)
      {
        uint64_t v34 = 0;
        do
        {
          if (v56)
          {
            for (uint64_t i = 0; i != v56; ++i)
            {
              if (v58)
              {
                uint64_t v35 = 0;
                for (uint64_t j = 0; j != v58; ++j)
                {
                  if (v28)
                  {
                    uint64_t v36 = 0;
                    do
                    {
                      char v37 = v64;
                      if (v66)
                      {
                        uint64_t v38 = 0;
                        char v37 = v64;
                        do
                        {
                          if (v65)
                          {
                            uint64_t v39 = 0;
                            do
                            {
                              char v41 = *(unsigned char *)(a1 + Index);
                              if (v39 | v38)
                              {
                                if (a10)
                                {
                                  if (v37 <= v41) {
                                    char v37 = *(unsigned char *)(a1 + Index);
                                  }
                                }
                                else if (v37 > v41)
                                {
                                  char v37 = *(unsigned char *)(a1 + Index);
                                }
                              }
                              else
                              {
                                char v37 = *(unsigned char *)(a1 + Index);
                              }
                              ++v39;
                            }
                            while (v33 != v39);
                          }
                          ++v38;
                        }
                        while (v38 != v66);
                      }
                      float v42 = *(float *)(__src.i64[0] + 4 * v36) * (float)v37;
                      float v43 = 0.0;
                      if (v42 != 0.0)
                      {
                        int __e = 0;
                        long double v44 = frexp(v42, &__e);
                        double v45 = ldexp(v44, 11);
                        float v43 = ldexp(round(v45), __e - 11);
                      }
                      std::function<float ()(float)>::operator()(a8, v43);
                      unint64_t v28 = v59;
                      if (v46 == INFINITY)
                      {
                        char v47 = 127;
                      }
                      else if (v46 == -INFINITY)
                      {
                        char v47 = 0x80;
                      }
                      else
                      {
                        int v48 = llroundf(v46);
                        if (v48 >= 127) {
                          int v48 = 127;
                        }
                        if (v48 <= -128) {
                          char v47 = 0x80;
                        }
                        else {
                          char v47 = v48;
                        }
                      }
                      *(unsigned char *)(*v61
                    }
                    while (v36 != v59);
                  }
                  v35 += v57;
                }
              }
            }
          }
          ++v34;
          uint64_t v27 = v54;
        }
        while (v34 != v54);
      }
      ++v30;
    }
    while (v30 != v53);
  }
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
  if (__p)
  {
    unsigned int v69 = __p;
    operator delete(__p);
  }
  if (v71)
  {
    __int16 v72 = v71;
    operator delete(v71);
  }
}

void sub_210BFEE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  int v32 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    int v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_210BFEFAC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C319B10;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C319B10;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C319B90;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C319B90;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  __int16 v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0) {
    float v3 = 0.0;
  }
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C319C10;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C319C10;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C319C90;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C319C90;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  __int16 v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0) {
    float v3 = 0.0;
  }
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C319D10;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C319D10;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C319D90;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C319D90;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  __int16 v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0) {
    float v3 = 0.0;
  }
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C319E10;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C319E10;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C319E90;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C319E90;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C319F10;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C319F10;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C319F90;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C319F90;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C31A010;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C31A010;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C31A090;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C31A090;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C31A110;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C31A110;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C31A190;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C31A190;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C31A210;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C31A210;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void ANEMachineIR::H2020::BasePeElementWiseBinary::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C017A8(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x348]);
  unint64_t v3 = STACK[0x278];
  STACK[0x278] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x270]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x270]);
  }
  long long v4 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v4;
    operator delete(v4);
  }
  __int16 v5 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(v1 - 112);
  if (v6)
  {
    *(void *)(v1 - 104) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x280], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x340], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeAdd::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeAdd;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C0219C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeAddAbs::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeAddAbs;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C0227C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeAddMul::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeAddMul;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C0235C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeAddSquare::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeAddSquare;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C0243C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeEqual::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeEqual;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C0251C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeGreater::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeGreater;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C025FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeGreaterEqual::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeGreaterEqual;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C026DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeLess::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeLess;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C027BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeLessEqual::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeLessEqual;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C0289C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeMaximum::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeMaximum;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C0297C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeMinimum::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeMinimum;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C02A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeMul::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeMul;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C02B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeNotEqual::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeNotEqual;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseBinary::Make();
}

void sub_210C02C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::BasePeElementWiseUnary::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C0422C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x298]);
  if (a72) {
    (*(void (**)(uint64_t))(*(void *)a72 + 8))(a72);
  }
  if (a71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a71);
  }
  if (__p) {
    operator delete(__p);
  }
  __int16 v74 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v74;
    operator delete(v74);
  }
  long double v75 = *(void **)(v72 - 112);
  if (v75)
  {
    *(void *)(v72 - 104) = v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x200], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeAbs::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeAbs;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseUnary::Make();
}

void sub_210C04A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeSquare::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeSquare;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePeElementWiseUnary::Make();
}

void sub_210C04B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeActivation::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C05894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,void **a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v58 - 112));
  if (a51) {
    (*(void (**)(uint64_t))(*(void *)a51 + 8))(a51);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  uint64_t v60 = *(void **)(v58 - 248);
  if (v60)
  {
    *(void *)(v58 - 240) = v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v58 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeAdd::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C071D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v68 - 248);
  if (v71)
  {
    *(void *)(v68 - 240) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 208), 0);
  _Unwind_Resume(a1);
}

void sub_210C07874()
{
}

void ANEMachineIR::H2020::NeMaximum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C08910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v68 - 248);
  if (v71)
  {
    *(void *)(v68 - 240) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeMinimum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C09F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v68 - 248);
  if (v71)
  {
    *(void *)(v68 - 240) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeMul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C0B830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v68 - 248);
  if (v71)
  {
    *(void *)(v68 - 240) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeSquare::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C0CE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,void **a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v64 - 112));
  if (a51) {
    (*(void (**)(uint64_t))(*(void *)a51 + 8))(a51);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  uint64_t v66 = *(void **)(v64 - 248);
  if (v66)
  {
    *(void *)(v64 - 240) = v66;
    operator delete(v66);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v64 - 208), 0);
  _Unwind_Resume(a1);
}

void MilTranslator::Passes::FuseConvScale::Match(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  MIL::Builder::BlockBuilder::GetOperations(&v57, *(MIL::Builder::BlockBuilder **)a1);
  uint64_t v4 = v57;
  uint64_t v5 = v58;
  if (v57 == v58)
  {
LABEL_12:
    long long __p = &v57;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    unint64_t v10 = 0;
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (!v10) {
      return;
    }
    goto LABEL_14;
  }
  while (1)
  {
    uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)v4);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
    int v8 = *(char *)(v7 + 23);
    if (v8 < 0) {
      break;
    }
    if (v8 == 7) {
      goto LABEL_7;
    }
LABEL_11:
    v4 += 16;
    if (v4 == v5) {
      goto LABEL_12;
    }
  }
  if (*(void *)(v7 + 8) != 7) {
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)v7;
LABEL_7:
  if (*(_DWORD *)v7 != 1667196270 || *(_DWORD *)(v7 + 3) != 1986948963) {
    goto LABEL_11;
  }
  long long v11 = *(MIL::Builder::OperationBuilder **)v4;
  unint64_t v10 = *(std::__shared_weak_count **)(v4 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long __p = &v57;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (!v11) {
    goto LABEL_13;
  }
  MIL::Builder::OperationBuilder::GetChildOperations(&v57, v11);
  if (v60 != 1
    || (MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)&__p, v11),
        unint64_t v12 = (std::__shared_weak_count *)__p,
        long long v13 = v63,
        p_p = &__p,
        std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&p_p),
        v12 != v13))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_22;
  }
  int v15 = *(MIL::Builder::OperationBuilder **)(v59 + 16);
  uint64_t v14 = *(std::__shared_weak_count **)(v59 + 24);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = MIL::Builder::OperationBuilder::GetOperator(v15);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
  int v18 = *(char *)(v17 + 23);
  if (v18 < 0)
  {
    if (*(void *)(v17 + 8) != 6) {
      goto LABEL_35;
    }
    uint64_t v17 = *(void *)v17;
  }
  else if (v18 != 6)
  {
    goto LABEL_35;
  }
  if (*(_DWORD *)v17 != 1834968430 || *(_WORD *)(v17 + 4) != 27765)
  {
LABEL_35:
    uint64_t v20 = MIL::Builder::OperationBuilder::GetOperator(v15);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
    int v22 = *(char *)(v21 + 23);
    if (v22 < 0)
    {
      if (*(void *)(v21 + 8) != 6) {
        goto LABEL_84;
      }
      uint64_t v21 = *(void *)v21;
    }
    else if (v22 != 6)
    {
      goto LABEL_84;
    }
    if (*(_DWORD *)v21 != 1834968432 || *(_WORD *)(v21 + 4) != 27765)
    {
LABEL_84:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      goto LABEL_85;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t ArgumentForParameter = MIL::Builder::OperationBuilder::GetArgumentForParameter();
  if (SHIBYTE(v64) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "y");
  uint64_t v25 = MIL::Builder::OperationBuilder::GetArgumentForParameter();
  if (SHIBYTE(v64) < 0) {
    operator delete(__p);
  }
  if (ArgumentForParameter != MIL::Builder::OperationBuilder::GetOutput(v11)
    && v25 != MIL::Builder::OperationBuilder::GetOutput(v11))
  {
    goto LABEL_84;
  }
  uint64_t Output = MIL::Builder::OperationBuilder::GetOutput(v11);
  uint64_t v27 = (MIL::Builder::Variable *)(ArgumentForParameter == Output ? v25 : ArgumentForParameter);
  uint64_t Value = MIL::Builder::Variable::TryGetValue(v27);
  if (!Value) {
    goto LABEL_84;
  }
  int v29 = (MIL::Builder::Variable *)(ArgumentForParameter == Output ? ArgumentForParameter : v25);
  Type = (MIL::IRValueType *)MIL::Builder::Variable::TryGetType(v29);
  if (!Type) {
    goto LABEL_84;
  }
  uint64_t v31 = MIL::IRValueType::AsTensorType(Type);
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)Value + 32))(Value);
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
  if (!v31) {
    goto LABEL_84;
  }
  uint64_t v34 = v33;
  if (!v33) {
    goto LABEL_84;
  }
  uint64_t v35 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 96))(v31);
  uint64_t v36 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v34 + 96))(v34);
  uint64_t v37 = *v36;
  uint64_t v38 = v36[1];
  if (*v36 != v38)
  {
    uint64_t v39 = v35[1];
    if (v39 == *v35) {
      goto LABEL_96;
    }
    if (*(void *)(v39 - 8) != *(void *)(v38 - 8)) {
      goto LABEL_84;
    }
    uint64_t v40 = v38 - v37;
    if (v40 != 8)
    {
      unint64_t v41 = 0;
      unint64_t v42 = v40 >> 3;
      while (v42 > v41)
      {
        uint64_t v43 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v37 + 8 * v41));
        if ((*(uint64_t (**)(uint64_t))(*(void *)v43 + 48))(v43) != 1) {
          goto LABEL_84;
        }
        ++v41;
        uint64_t v37 = *v36;
        unint64_t v42 = (v36[1] - *v36) >> 3;
        if (v41 >= v42 - 1) {
          goto LABEL_69;
        }
      }
LABEL_96:
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
  }
LABEL_69:
  long double v44 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v11);
  double v45 = (MIL::IRValueType *)MIL::Builder::Variable::TryGetType(v44);
  if (v45)
  {
    uint64_t v46 = MIL::IRValueType::AsTensorType(v45);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v46 + 88))(v46) != 4) {
      goto LABEL_84;
    }
  }
  uint64_t v55 = v11;
  uint64_t v56 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  char v47 = (MIL::Builder::Variable *)ANEMachineIR::Utils::TryGetArgumentForParameter();
  if (SHIBYTE(v64) < 0) {
    operator delete(__p);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  if (v47 && !MIL::Builder::Variable::TryGetType(v47)) {
    goto LABEL_84;
  }
  int v48 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v53 = *(MIL::Builder::BlockBuilder **)a1;
  uint64_t v54 = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Outputuint64_t Name = (unsigned __int8 **)MIL::Builder::OperationBuilder::GetOutputName(v15);
  IsBlockuint64_t Output = ANEMachineIR::Utils::IsBlockOutput(&v53, OutputName);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (IsBlockOutput) {
    goto LABEL_84;
  }
  long long __p = v11;
  unsigned int v63 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v64 = v15;
  unsigned int v65 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector[abi:ne180100](a2, &__p, 2uLL);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    int v52 = *(std::__shared_weak_count **)((char *)&__p + i);
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
  }
LABEL_85:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
LABEL_22:
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&v57);
  if (v10) {
LABEL_14:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
}

void sub_210C0D948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v29 = 24;
  while (1)
  {
    uint64_t v30 = *(std::__shared_weak_count **)(v27 + v29);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    v29 -= 16;
    if (v29 == -8)
    {
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&a14);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      _Unwind_Resume(a1);
    }
  }
}

void *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector[abi:ne180100](void *a1, void *a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__vallocate[abi:ne180100](a1, a3);
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder>*>(v4, a2, &a2[2 * a3], (void *)a1[1]);
  }
  return a1;
}

void sub_210C0DABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void MilTranslator::Passes::FuseConvScale::Replace(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1] - *a1 == 32)
  {
    uint64_t v129 = a2;
    uint64_t v6 = *(MIL::Builder::OperationBuilder **)v3;
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v3 = *a1;
      if ((unint64_t)(a1[1] - *a1) <= 0x10) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
    }
    uint64_t v7 = *(std::__shared_weak_count **)(v3 + 24);
    std::string::size_type v130 = *(MIL::Builder::OperationBuilder **)(v3 + 16);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v128 = v7;
    std::string::basic_string[abi:ne180100]<0>(&v221, "ne_conv");
    v213 = v130;
    long long v214 = v128;
    if (v128) {
      atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Builder::BlockBuilder::AddOperation();
    if (v214) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v214);
    }
    char v127 = a1;
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    std::string::basic_string[abi:ne180100]<0>(&v221, "x");
    uint64_t ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
    uint64_t Name = MIL::Builder::Variable::GetName(ArgumentForParameter);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)Name, *(void *)(Name + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)Name;
      v209.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
      *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v10;
    }
    MIL::Builder::OperationBuilder::AddInput();
    if (v212) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v212);
    }
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v209.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    if (v211 < 0) {
      operator delete(__p);
    }
    long long v13 = std::string::basic_string[abi:ne180100]<0>(&v221, "dense_kernel");
    long long v207 = v6;
    v208 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v205 = v215;
    v206 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v13, (uint64_t *)&v207);
    if (v206) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v206);
    }
    if (v208) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v208);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    uint64_t v14 = std::string::basic_string[abi:ne180100]<0>(&v221, "strides");
    long long v203 = v6;
    v204 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v201 = v215;
    std::string::size_type v202 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v14, (uint64_t *)&v203);
    if (v202) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v202);
    }
    if (v204) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v204);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    int v15 = std::string::basic_string[abi:ne180100]<0>(&v221, "pad_mode");
    uint64_t v199 = v6;
    std::string v200 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v197 = v215;
    unint64_t v198 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v15, (uint64_t *)&v199);
    if (v198) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v198);
    }
    if (v200) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v200);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    uint64_t v16 = std::string::basic_string[abi:ne180100]<0>(&v221, "pad");
    unint64_t v195 = v6;
    uint64_t v196 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v193 = v215;
    unint64_t v194 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v16, (uint64_t *)&v195);
    if (v194) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v194);
    }
    if (v196) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v196);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    uint64_t v17 = std::string::basic_string[abi:ne180100]<0>(&v221, "dilations");
    long long v191 = v6;
    std::string::size_type v192 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v189 = v215;
    v190 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v17, (uint64_t *)&v191);
    if (v190) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v190);
    }
    if (v192) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v192);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    int v18 = std::string::basic_string[abi:ne180100]<0>(&v221, "num_groups");
    v187 = v6;
    std::string::size_type v188 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v185 = v215;
    std::string::size_type v186 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v18, (uint64_t *)&v187);
    if (v186) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v186);
    }
    if (v188) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v188);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    long long v19 = std::string::basic_string[abi:ne180100]<0>(&v221, "group_kernel_reuse");
    long long v183 = v6;
    v184 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v181 = v215;
    v182 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v19, (uint64_t *)&v183);
    if (v182) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v182);
    }
    if (v184) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v184);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    uint64_t v20 = std::string::basic_string[abi:ne180100]<0>(&v221, "bias");
    long long v179 = v6;
    v180 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v177 = v215;
    unint64_t v178 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v20, (uint64_t *)&v179);
    if (v178) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v178);
    }
    if (v180) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v180);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    uint64_t v21 = std::string::basic_string[abi:ne180100]<0>(&v221, "acc_left_shift");
    uint64_t v175 = v6;
    int v176 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v173 = v215;
    unint64_t v174 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v21, (uint64_t *)&v175);
    if (v174) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v174);
    }
    if (v176) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v176);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    int v22 = std::string::basic_string[abi:ne180100]<0>(&v221, "acc_bias_shift");
    uint64_t v171 = v6;
    uint64_t v172 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v169 = v215;
    unint64_t v170 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v22, (uint64_t *)&v171);
    if (v170) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v170);
    }
    if (v172) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v172);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    uint64_t v23 = std::string::basic_string[abi:ne180100]<0>(&v221, "post_right_shift");
    uint64_t v167 = v6;
    int v168 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v165 = v215;
    uint64_t v166 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v23, (uint64_t *)&v167);
    if (v166) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v166);
    }
    if (v168) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v168);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    uint64_t v24 = std::string::basic_string[abi:ne180100]<0>(&v221, "transposed");
    uint64_t v163 = v6;
    uint64_t v164 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v161 = v215;
    uint64_t v162 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v24, (uint64_t *)&v163);
    if (v162) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v162);
    }
    if (v164) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v164);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    uint64_t v25 = std::string::basic_string[abi:ne180100]<0>(&v221, "pre_relu");
    unint64_t v159 = v6;
    int v160 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v157 = v215;
    unint64_t v158 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v25, (uint64_t *)&v159);
    if (v158) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v158);
    }
    if (v160) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v160);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    uint64_t v26 = std::string::basic_string[abi:ne180100]<0>(&v221, "alternative_format_kernel_coefficients");
    long long v155 = v6;
    unsigned int v156 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v153 = v215;
    v154 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v26, (uint64_t *)&v155);
    if (v154) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v154);
    }
    if (v156) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v156);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    uint64_t v27 = std::string::basic_string[abi:ne180100]<0>(&v221, "sparse_mask");
    unsigned int v151 = v6;
    unint64_t v152 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v149 = v215;
    uint64_t v150 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v27, (uint64_t *)&v151);
    if (v150) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v150);
    }
    if (v152) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v152);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    unint64_t v28 = std::string::basic_string[abi:ne180100]<0>(&v221, "sparse_num_nonzero");
    unint64_t v147 = v6;
    unint64_t v148 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v145 = v215;
    unint64_t v146 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v28, (uint64_t *)&v147);
    if (v146) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v146);
    }
    if (v148) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v148);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    uint64_t v29 = std::string::basic_string[abi:ne180100]<0>(&v221, "sparse_num_nonzero_per_filter");
    char v143 = v6;
    unsigned int v144 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v141 = v215;
    unint64_t v142 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v29, (uint64_t *)&v143);
    if (v142) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v142);
    }
    if (v144) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v144);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    uint64_t v30 = std::string::basic_string[abi:ne180100]<0>(&v221, "palette_table");
    uint64_t v139 = v6;
    int64_t v140 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v137 = v215;
    int64_t v138 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v30, (uint64_t *)&v139);
    if (v138) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v138);
    }
    if (v140) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v140);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v221, "x");
    uint64_t v31 = MIL::Builder::OperationBuilder::GetArgumentForParameter();
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v221, "y");
    uint64_t v32 = MIL::Builder::OperationBuilder::GetArgumentForParameter();
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    if (v31 == MIL::Builder::OperationBuilder::GetOutput(v6)) {
      uint64_t v33 = (MIL::Builder::Variable *)v32;
    }
    else {
      uint64_t v33 = (MIL::Builder::Variable *)v31;
    }
    uint64_t Value = (MIL::IRValue *)MIL::Builder::Variable::GetValue(v33);
    uint64_t v35 = (MIL::IRValue *)MIL::IRValue::AsTensor(Value);
    std::string v135 = v6;
    std::string v136 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v221, "post_scale");
    uint64_t v36 = (MIL::Builder::Variable *)ANEMachineIR::Utils::TryGetArgumentForParameter();
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    if (v136) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v136);
    }
    memset(&v221, 0, sizeof(v221));
    if (v36)
    {
      Type = (MIL::IRValueType *)MIL::Builder::Variable::TryGetType(v36);
      uint64_t v38 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(Type);
      if (MIL::IRTensorValueType::IsScalar(v38))
      {
        LOWORD(__src.__r_.__value_.__l.__data_) = MIL::Builder::Variable::GetScalarValue<MIL::Fp16>();
        std::vector<MIL::Fp16>::__assign_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>((char *)&v221, (char *)&__src, (uint64_t)__src.__r_.__value_.__r.__words + 2, 1uLL);
      }
      else
      {
        unint64_t v41 = (*(uint64_t (**)(MIL::IRValueType *))(*(void *)Type + 16))(Type);
        std::vector<MIL::Fp16>::reserve((void **)&v221.__r_.__value_.__l.__data_, v41);
        unint64_t v42 = (MIL::IRValue *)MIL::Builder::Variable::GetValue(v36);
        MIL::IRValue::AsTensor(v42);
        unint64_t v43 = 0;
        __src.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        __src.__r_.__value_.__l.__size_ = v44;
        while (v43 < (*(uint64_t (**)(MIL::IRValueType *))(*(void *)Type + 16))(Type))
        {
          double v45 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&__src, v43);
          uint64_t v46 = v45;
          std::string::size_type size = v221.__r_.__value_.__l.__size_;
          if (v221.__r_.__value_.__l.__size_ >= v221.__r_.__value_.__r.__words[2])
          {
            int v49 = (void *)v221.__r_.__value_.__r.__words[0];
            int64_t v50 = v221.__r_.__value_.__l.__size_ - v221.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v221.__r_.__value_.__l.__size_ - v221.__r_.__value_.__r.__words[0]) <= -3) {
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v51 = v50 >> 1;
            if (v221.__r_.__value_.__r.__words[2] - v221.__r_.__value_.__r.__words[0] <= (v50 >> 1) + 1) {
              std::string::size_type v52 = v51 + 1;
            }
            else {
              std::string::size_type v52 = v221.__r_.__value_.__r.__words[2] - v221.__r_.__value_.__r.__words[0];
            }
            if (v221.__r_.__value_.__r.__words[2] - v221.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v53 = v52;
            }
            if (v53)
            {
              uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v221.__r_.__value_.__r.__words[2], v53);
              std::string::size_type size = v221.__r_.__value_.__l.__size_;
              int v49 = (void *)v221.__r_.__value_.__r.__words[0];
            }
            else
            {
              uint64_t v54 = 0;
            }
            uint64_t v55 = &v54[2 * v51];
            *(_WORD *)uint64_t v55 = *v46;
            std::string::size_type v48 = (std::string::size_type)(v55 + 2);
            while ((void *)size != v49)
            {
              __int16 v56 = *(_WORD *)(size - 2);
              size -= 2;
              *((_WORD *)v55 - 1) = v56;
              v55 -= 2;
            }
            v221.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
            v221.__r_.__value_.__l.__size_ = v48;
            v221.__r_.__value_.__r.__words[2] = (std::string::size_type)&v54[2 * v53];
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            *(_WORD *)v221.__r_.__value_.__l.__size_ = *v45;
            std::string::size_type v48 = size + 2;
          }
          v221.__r_.__value_.__l.__size_ = v48;
          ++v43;
        }
      }
    }
    else
    {
      uint64_t v39 = (MIL::IRTensorValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)v35 + 32))(v35);
      IsScalar = (MIL::Fp16 *)MIL::IRTensorValueType::IsScalar(v39);
      if (IsScalar)
      {
        LOWORD(__src.__r_.__value_.__l.__data_) = MIL::Fp16::FromFloat(IsScalar, 1.0);
        std::vector<MIL::Fp16>::__assign_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>((char *)&v221, (char *)&__src, (uint64_t)__src.__r_.__value_.__r.__words + 2, 1uLL);
      }
      else
      {
        uint64_t v57 = MIL::IRValue::AsTensor(v35);
        uint64_t v58 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 32))(v57);
        unint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 16))(v58);
        std::vector<MIL::Fp16>::reserve((void **)&v221.__r_.__value_.__l.__data_, v59);
        if (v59)
        {
          for (uint64_t i = 0; i != v59; ++i)
          {
            uint64_t v60 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v60, 1.0);
            __int16 v62 = (__int16)v60;
            std::string::size_type v63 = v221.__r_.__value_.__l.__size_;
            if (v221.__r_.__value_.__l.__size_ >= v221.__r_.__value_.__r.__words[2])
            {
              uint64_t v60 = (MIL::Fp16 *)v221.__r_.__value_.__r.__words[0];
              int64_t v65 = v221.__r_.__value_.__l.__size_ - v221.__r_.__value_.__r.__words[0];
              if ((uint64_t)(v221.__r_.__value_.__l.__size_ - v221.__r_.__value_.__r.__words[0]) <= -3) {
                std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v66 = v65 >> 1;
              if (v221.__r_.__value_.__r.__words[2] - v221.__r_.__value_.__r.__words[0] <= (v65 >> 1) + 1) {
                std::string::size_type v67 = v66 + 1;
              }
              else {
                std::string::size_type v67 = v221.__r_.__value_.__r.__words[2] - v221.__r_.__value_.__r.__words[0];
              }
              if (v221.__r_.__value_.__r.__words[2] - v221.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v68 = v67;
              }
              if (v68)
              {
                unsigned int v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v221.__r_.__value_.__r.__words[2], v68);
                std::string::size_type v63 = v221.__r_.__value_.__l.__size_;
                uint64_t v60 = (MIL::Fp16 *)v221.__r_.__value_.__r.__words[0];
              }
              else
              {
                unsigned int v69 = 0;
              }
              uint64_t v70 = &v69[2 * v66];
              *(_WORD *)uint64_t v70 = v62;
              std::string::size_type v64 = (std::string::size_type)(v70 + 2);
              while ((MIL::Fp16 *)v63 != v60)
              {
                __int16 v71 = *(_WORD *)(v63 - 2);
                v63 -= 2;
                *((_WORD *)v70 - 1) = v71;
                v70 -= 2;
              }
              v221.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
              v221.__r_.__value_.__l.__size_ = v64;
              v221.__r_.__value_.__r.__words[2] = (std::string::size_type)&v69[2 * v68];
              if (v60) {
                operator delete(v60);
              }
            }
            else
            {
              *(_WORD *)v221.__r_.__value_.__l.__size_ = (_WORD)v60;
              std::string::size_type v64 = v63 + 2;
            }
            v221.__r_.__value_.__l.__size_ = v64;
          }
        }
      }
    }
    uint64_t v72 = (*(uint64_t (**)(MIL::IRValue *))(*(void *)v35 + 32))(v35);
    int v73 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 88))(v72);
    switch(v73)
    {
      case 14:
        int v84 = (MIL::IRTensorValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)v35 + 32))(v35);
        if (!MIL::IRTensorValueType::IsScalar(v84))
        {
          uint64_t Data = MIL::IRTensorValue::GetDataView<unsigned char>();
          long long v220 = v110;
          if (v110)
          {
            uint64_t v111 = 0;
            unint64_t v112 = 0;
            do
            {
              if (v112 >= (uint64_t)(v221.__r_.__value_.__l.__size_ - v221.__r_.__value_.__r.__words[0]) >> 1) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              MIL::Fp16::GetFloat((MIL::Fp16 *)(v221.__r_.__value_.__r.__words[0] + v111));
              float v114 = v113;
              __int16 v115 = (MIL::Fp16 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(&Data, v112);
              LOBYTE(v116) = *(unsigned char *)v115;
              __int16 v117 = MIL::Fp16::FromFloat(v115, v114 * (float)v116);
              *(_WORD *)(v221.__r_.__value_.__r.__words[0] + 2 * v112++) = v117;
              v111 += 2;
            }
            while (v112 < (unint64_t)v220);
          }
          goto LABEL_346;
        }
        int v85 = (unsigned char *)MEMORY[0x21667B870](v35);
        std::string::basic_string[abi:ne180100]<0>(&__src, "post_scale");
        if (v221.__r_.__value_.__l.__size_ == v221.__r_.__value_.__r.__words[0]) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)v221.__r_.__value_.__l.__data_);
        LOBYTE(v87) = *v85;
        MIL::Fp16::FromFloat(Float, v88 * (float)v87);
        MIL::Builder::OperationBuilder::AddInputFloat16();
        break;
      case 9:
        long double v80 = (MIL::IRTensorValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)v35 + 32))(v35);
        if (!MIL::IRTensorValueType::IsScalar(v80))
        {
          uint64_t Data = MIL::IRTensorValue::GetDataView<signed char>();
          long long v220 = v103;
          if (v103)
          {
            uint64_t v104 = 0;
            unint64_t v105 = 0;
            do
            {
              if (v105 >= (uint64_t)(v221.__r_.__value_.__l.__size_ - v221.__r_.__value_.__r.__words[0]) >> 1) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              MIL::Fp16::GetFloat((MIL::Fp16 *)(v221.__r_.__value_.__r.__words[0] + v104));
              float v107 = v106;
              float v108 = (MIL::Fp16 *)MIL::Util::Span<signed char const,18446744073709551615ul>::At(&Data, v105);
              __int16 v109 = MIL::Fp16::FromFloat(v108, v107 * (float)*(char *)v108);
              *(_WORD *)(v221.__r_.__value_.__r.__words[0] + 2 * v105++) = v109;
              v104 += 2;
            }
            while (v105 < (unint64_t)v220);
          }
          goto LABEL_346;
        }
        double v81 = (char *)MEMORY[0x21667B840](v35);
        std::string::basic_string[abi:ne180100]<0>(&__src, "post_scale");
        if (v221.__r_.__value_.__l.__size_ == v221.__r_.__value_.__r.__words[0]) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v82 = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)v221.__r_.__value_.__l.__data_);
        MIL::Fp16::FromFloat(v82, v83 * (float)*v81);
        MIL::Builder::OperationBuilder::AddInputFloat16();
        break;
      case 4:
        __int16 v74 = (MIL::IRTensorValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)v35 + 32))(v35);
        if (MIL::IRTensorValueType::IsScalar(v74))
        {
          long double v75 = (MIL::Fp16 *)MEMORY[0x21667B820](v35);
          std::string::basic_string[abi:ne180100]<0>(&__src, "post_scale");
          if (v221.__r_.__value_.__l.__size_ == v221.__r_.__value_.__r.__words[0]) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          MIL::Fp16::GetFloat((MIL::Fp16 *)v221.__r_.__value_.__l.__data_);
          float v77 = v76;
          uint64_t v78 = (MIL::Fp16 *)MIL::Fp16::GetFloat(v75);
          MIL::Fp16::FromFloat(v78, v77 * v79);
          MIL::Builder::OperationBuilder::AddInputFloat16();
          break;
        }
        uint64_t Data = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        long long v220 = v118;
        if (v118)
        {
          uint64_t v119 = 0;
          unint64_t v120 = 0;
          do
          {
            if (v120 >= (uint64_t)(v221.__r_.__value_.__l.__size_ - v221.__r_.__value_.__r.__words[0]) >> 1) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            MIL::Fp16::GetFloat((MIL::Fp16 *)(v221.__r_.__value_.__r.__words[0] + v119));
            float v122 = v121;
            std::string::size_type v123 = (MIL::Fp16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&Data, v120);
            int64_t v124 = (MIL::Fp16 *)MIL::Fp16::GetFloat(v123);
            __int16 v126 = MIL::Fp16::FromFloat(v124, v122 * v125);
            *(_WORD *)(v221.__r_.__value_.__r.__words[0] + 2 * v120++) = v126;
            v119 += 2;
          }
          while (v120 < (unint64_t)v220);
        }
LABEL_346:
        std::string::basic_string[abi:ne180100]<0>(&__src, "post_scale");
        MIL::Builder::OperationBuilder::AddInputFloat16();
        uint64_t v89 = v217;
        if (!v217) {
          goto LABEL_277;
        }
        goto LABEL_276;
      default:
        uint64_t v91 = "Unsupported scale data type, must be one of [fp16, int8, uint8]";
        int v90 = 11;
LABEL_281:
        *(_DWORD *)uint64_t v129 = v90;
        uint64_t v92 = (void **)(v129 + 8);
        std::string::basic_string[abi:ne180100]<0>((void *)(v129 + 8), v91);
        if (v221.__r_.__value_.__r.__words[0])
        {
          v221.__r_.__value_.__l.__size_ = v221.__r_.__value_.__r.__words[0];
          operator delete(v221.__r_.__value_.__l.__data_);
        }
        if (!*(_DWORD *)v129)
        {
          if (*(char *)(v129 + 31) < 0) {
            operator delete(*v92);
          }
          uint64_t Output = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v130);
          uint64_t v94 = MIL::Builder::Variable::GetName(Output);
          if (*(char *)(v94 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)v94, *(void *)(v94 + 8));
          }
          else
          {
            long long v95 = *(_OWORD *)v94;
            v221.__r_.__value_.__r.__words[2] = *(void *)(v94 + 16);
            *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v95;
          }
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v96 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v96 = v221.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__src, v96 + 6);
          if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_src = &__src;
          }
          else {
            p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
          }
          if (v96)
          {
            if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v98 = &v221;
            }
            else {
              long long v98 = (std::string *)v221.__r_.__value_.__r.__words[0];
            }
            memmove(p_src, v98, v96);
          }
          strcpy((char *)p_src + v96, "_fused");
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v133, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
          }
          else {
            std::string v133 = __src;
          }
          uint64_t v99 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v130);
          MIL::Builder::Variable::TryGetType(v99);
          MIL::Builder::OperationBuilder::AddOutput();
          if (v134) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v134);
          }
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v132, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
          }
          else {
            std::string v132 = __src;
          }
          MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v132.__r_.__value_.__l.__data_);
          }
          uint64_t v100 = *v127;
          uint64_t v101 = v127[1];
          if (*v127 != v101)
          {
            do
            {
              uint64_t v102 = *(std::__shared_weak_count **)(v100 + 8);
              if (v102)
              {
                atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
                std::string v131 = v102;
                atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              else
              {
                std::string v131 = 0;
              }
              MIL::Builder::BlockBuilder::RemoveOperation();
              if (v131) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v131);
              }
              if (v102) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v102);
              }
              v100 += 16;
            }
            while (v100 != v101);
          }
          *(_DWORD *)uint64_t v129 = 0;
          std::string::basic_string[abi:ne180100]<0>(v92, (char *)&unk_210C6BFE7);
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__src.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v221.__r_.__value_.__l.__data_);
          }
        }
        if (v216) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v216);
        }
        if (v128) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v128);
        }
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        return;
    }
    uint64_t v89 = v220;
    if (!v220)
    {
LABEL_277:
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__src.__r_.__value_.__l.__data_);
      }
      int v90 = 0;
      uint64_t v91 = (char *)&unk_210C6BFE7;
      goto LABEL_281;
    }
LABEL_276:
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
    goto LABEL_277;
  }
  *(_DWORD *)a2 = 14;
  std::operator+<char>();
  long long v11 = std::string::append(&v221, "'s pattern");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(void *)(a2 + 24) = *((void *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)(a2 + 8) = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v221.__r_.__value_.__l.__data_);
  }
}

void sub_210C0EFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (*(char *)(v11 - 161) < 0) {
    operator delete(*(void **)(v11 - 184));
  }
  long long v13 = *(void **)(v11 - 144);
  if (v13)
  {
    *(void *)(v11 - 136) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(v11 - 208);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(a1);
}

void MilTranslator::Passes::FuseConvScale::~FuseConvScale(void **this)
{
  MilTranslator::Passes::Pass::~Pass(this);
  JUMPOUT(0x21667BBD0);
}

void MilTranslator::Passes::Pass::~Pass(void **this)
{
  *this = &unk_26C3198A8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    unint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

char *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  long long v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    long long v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

void ANEMachineIR::H2022::Opsets::aneflowh2022Opset::Register(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *this, MIL::MILContext *a2)
{
  char v3 = 12;
  strcpy((char *)__p, "aneflowh2022");
  operator new();
}

void sub_210C0F7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::IROpset *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18 = a11;
  a11 = 0;
  if (v18) {
    ANEMachineIR::H2021::Opsets::aneflowh2021Opset::Register();
  }
  std::unique_ptr<ANEMachineIR::H2021::Opsets::aneflowh2021Opset>::reset[abi:ne180100](&a10, 0);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const char *ANEMachineIR::H2022::Opsets::aneflowh2022Opset::GetOpsetName(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *this)
{
  return "aneflowh2022";
}

void ANEMachineIR::H2022::Opsets::aneflowh2022Opset::aneflowh2022Opset(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *this, MIL::MILContext *a2)
{
  ANEMachineIR::H2022::Opsets::aneflowh2022Opset::GetOps((uint64_t)v2);
}

void sub_210C0F87C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Opsets::aneflowh2022Opset::GetOps(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v3, "base_ne_matmul");
  ANEMachineIR::H2022::BaseNeMatmul::Make();
}

void sub_210C10C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v17 = *(void *)(v15 - 40);
  *(void *)(v15 - 40) = 0;
  if (v17) {
    ANEMachineIR::H2021::Opsets::aneflowh2021Opset::GetOps();
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v14);
  _Unwind_Resume(a1);
}

const char *ANEMachineIR::H2022::Opsets::aneflowh2022Opset::GetName(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *this)
{
  return "aneflowh2022";
}

void ANEMachineIR::H2022::Opsets::aneflowh2022Opset::~aneflowh2022Opset(ANEMachineIR::H2022::Opsets::aneflowh2022Opset *this)
{
  MIL::IROpset::~IROpset(this);
  JUMPOUT(0x21667BBD0);
}

uint64_t ANEMachineIR::Validators::ValidatePostRightShiftRange@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::Validators::BinaryPointFormatOffsets(ANEMachineIR::Validators *this, int a2)
{
  if (this) {
    int v2 = 10;
  }
  else {
    int v2 = 0;
  }
  if (this) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 10;
  }
  if (a2) {
    int v4 = v2 + 10;
  }
  else {
    int v4 = v2;
  }
  if (!a2) {
    v3 += 10;
  }
  return v4 & 0xFFFFE1FF | (((v3 >> 1) & 0xF) << 9);
}

BOOL ANEMachineIR::Validators::NeuralEngineComputedBinaryPointAndShiftLegal(ANEMachineIR::Validators *this, uint64_t a2, uint64_t a3)
{
  return (uint64_t)this + a2 + a3 < 32;
}

BOOL ANEMachineIR::Validators::NeuralEngineAccumulatorInitLegal(__int16 a1, char a2, char a3, char a4)
{
  __int16 v10 = a1;
  float v4 = (float)(1 << (a3 + a2 + a4));
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v10);
  float v6 = v5 * v4;
  double v7 = floor(v6 + 0.5);
  if (v6 >= 0.0) {
    double v8 = v7;
  }
  else {
    double v8 = -v7;
  }
  return (unint64_t)((uint64_t)v8 + 0x7FFFFFFF) < 0xFFFFFFFF;
}

BOOL ANEMachineIR::Validators::NeuralEngineBiasShifterExponentLegal(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = -14;
  if (((a1 >> 10) & 0x1F) != 0) {
    uint64_t v4 = ((a1 >> 10) & 0x1F) - 15;
  }
  return (unint64_t)(a3 + a2 - a4 + 0x80000000 + v4) < 0x8000000C;
}

void MilTranslator::OpTranslator::TranslateElementWiseBinary(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    v94.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v7;
  }
  {
    *(_DWORD *)a3 = 4;
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v65, "' not implemented");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)(a3 + 24) = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)(a3 + 8) = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_122;
    }
    uint64_t v11 = (void *)v65.__r_.__value_.__r.__words[0];
    goto LABEL_121;
  }
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  if ((char)v8[63] < 0) {
    std::string::__init_copy_ctor_external(&v93, *((const std::string::value_type **)v8 + 5), *((void *)v8 + 6));
  }
  else {
    std::string v93 = *(std::string *)(v8 + 40);
  }
  std::string::basic_string[abi:ne180100]<0>(&v65, "x");
  uint64_t v12 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, void))(*(void *)a2 + 120))(a2, &v65, 0);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v65, "y");
  uint64_t v13 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, void))(*(void *)a2 + 120))(a2, &v65, 0);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v65, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v15 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v65, "y");
  uint64_t v16 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v17 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v16);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v65.__r_.__value_.__l.__data_);
    if (!v12) {
      goto LABEL_26;
    }
  }
  else if (!v12)
  {
    goto LABEL_26;
  }
  if (v13)
  {
    MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, v12, v15, &v92);
    MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, v13, v17, &v91);
    uint64_t v18 = (uint64_t *)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 176))(a2);
    uint64_t v19 = *v18;
    if (v18[1] == *v18) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v21 = *(MIL::IRNamedValueType **)v19;
    uint64_t v20 = *(std::__shared_weak_count **)(v19 + 8);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v21);
    uint64_t v23 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
    ANEMachineIR::Utils::GetStaticTensorShape(v15, v24, (uint64_t)v90);
    ANEMachineIR::Utils::GetStaticTensorShape(v17, v25, (uint64_t)v89);
    ANEMachineIR::Utils::GetStaticTensorShape(v23, v26, (uint64_t)&v87);
    uint64_t v27 = (void *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)v15 + 96))(v15);
    MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, v12, (uint64_t)(v27[1] - *v27) >> 3, (uint64_t)&__s);
    MilTranslator::OpTranslator::GetTransposeOpParamPerm((v88 - (unsigned char *)v87) >> 3, (uint64_t)&__s, &v83);
    MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v90, (unsigned int **)&v83, v82);
    MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v89, (unsigned int **)&v83, v81);
    MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)&v87, (unsigned int **)&v83, v80);
    (*(void (**)(ANEMachineIR::Utils *))(*(void *)v15 + 88))(v15);
    uint64_t v28 = MIL::IRTensorValueType::Make();
    (*(void (**)(ANEMachineIR::Utils *))(*(void *)v17 + 88))(v17);
    uint64_t v29 = MIL::IRTensorValueType::Make();
    (*(void (**)(ANEMachineIR::Utils *))(*(void *)v23 + 88))(v23);
    uint64_t v30 = MIL::IRTensorValueType::Make();
    uint64_t Name = MIL::IRNamedValueType::GetName(v21);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)Name, *(void *)(Name + 8));
    }
    else
    {
      long long v32 = *(_OWORD *)Name;
      __str.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v32;
    }
    IsTransposeRequired = (MIL::Fp16 *)MilTranslator::OpTranslator::IsTransposeRequired(&v83);
    if (IsTransposeRequired)
    {
      std::string::append(&__str, "_channel_last");
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v62, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else {
        std::string v62 = __s;
      }
      int v63 = v85;
      char v64 = v86;
      std::string::operator=(&v62, &__str);
      uint64_t v38 = (long long *)MIL::IRNamedValueType::GetName(v21);
      std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&v65, v38, (long long *)&v62);
      IsTransposeRequired = (MIL::Fp16 *)std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>((uint64_t)this + 296, (unsigned __int8 *)&v65, (long long *)&v65);
      if (v67 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
    }
    LODWORD(v65.__r_.__value_.__l.__data_) = 1065353216;
    v65.__r_.__value_.__s.__data_[4] = 1;
    LODWORD(v65.__r_.__value_.__r.__words[1]) = 1065353216;
    v65.__r_.__value_.__s.__data_[12] = 1;
    LOWORD(v65.__r_.__value_.__r.__words[2]) = MIL::Fp16::FromFloat(IsTransposeRequired, 1.0);
    v65.__r_.__value_.__s.__data_[18] = 1;
    LOBYTE(__p) = 0;
    char v68 = 0;
    LOBYTE(v69) = 0;
    char v71 = 0;
    char v72 = 0;
    char v73 = 0;
    char v74 = 0;
    char v75 = 0;
    LOBYTE(v76) = 0;
    char v78 = 0;
    uint64_t LocationPtr = (std::string::size_type *)MIL::IRObject::GetLocationPtr(a2);
    ANEMachineIR::Validators::ValidatePeElementWiseBinary(LocationPtr, (uint64_t)&v93, v28, v29, v30, (MIL::ValidationResult *)&v62);
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v62))
    {
      MEMORY[0x21667B360](&v62);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v57, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
      }
      else {
        std::string v57 = v93;
      }
      MilTranslator::OpTranslator::AddOperation((uint64_t)this);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v54, "x");
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v53, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
      }
      else {
        std::string v53 = v92;
      }
      MIL::Builder::OperationBuilder::AddInput();
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (v55 < 0) {
        operator delete(v54);
      }
      std::string::basic_string[abi:ne180100]<0>(&v50, "y");
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v49, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
      }
      else {
        std::string v49 = v91;
      }
      MIL::Builder::OperationBuilder::AddInput();
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      if (v51 < 0) {
        operator delete(v50);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v47, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v47 = __str;
      }
      MIL::Builder::OperationBuilder::AddOutput();
      if (v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)a3 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
      if (v62.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v62.__r_.__value_.__l.__size_);
      }
    }
    else
    {
      *(_DWORD *)a3 = 6;
      uint64_t v40 = a3 + 8;
      (*(void (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
      std::operator+<char>();
      unint64_t v41 = std::string::append(&v60, "', violations: ");
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      MIL::MILResult::GetMessageWithLocation((uint64_t *)v58, (MIL::MILResult *)&v62);
      if ((v59 & 0x80u) == 0) {
        unint64_t v43 = v58;
      }
      else {
        unint64_t v43 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v44 = v59;
      }
      else {
        std::string::size_type v44 = (std::string::size_type)v58[1];
      }
      double v45 = std::string::append(&v61, (const std::string::value_type *)v43, v44);
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      *(void *)(v40 + 16) = *((void *)&v45->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v40 = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      MEMORY[0x21667B360](&v62);
    }
    if (v78 && v77 < 0) {
      operator delete(v76);
    }
    if (v71 && v69)
    {
      uint64_t v70 = v69;
      operator delete(v69);
    }
    if (v68 && v67 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v80[0])
    {
      v80[1] = v80[0];
      operator delete(v80[0]);
    }
    if (v81[0])
    {
      v81[1] = v81[0];
      operator delete(v81[0]);
    }
    if (v82[0])
    {
      v82[1] = v82[0];
      operator delete(v82[0]);
    }
    if (v83.__begin_)
    {
      v83.__end_ = v83.__begin_;
      operator delete(v83.__begin_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v87)
    {
      float v88 = v87;
      operator delete(v87);
    }
    if (v89[0])
    {
      v89[1] = v89[0];
      operator delete(v89[0]);
    }
    if (v90[0])
    {
      v90[1] = v90[0];
      operator delete(v90[0]);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_119;
    }
    uint64_t v36 = (void *)v92.__r_.__value_.__r.__words[0];
    goto LABEL_118;
  }
LABEL_26:
  *(_DWORD *)a3 = 4;
  uint64_t v33 = a3 + 8;
  (*(void (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
  std::operator+<char>();
  uint64_t v34 = std::string::append(&v65, "' does not handle immediate values");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  *(void *)(v33 + 16) = *((void *)&v34->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v33 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v36 = (void *)v65.__r_.__value_.__r.__words[0];
LABEL_118:
    operator delete(v36);
  }
LABEL_119:
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_122;
  }
  uint64_t v11 = (void *)v93.__r_.__value_.__r.__words[0];
LABEL_121:
  operator delete(v11);
LABEL_122:
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
}

void sub_210C12018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,std::__shared_weak_count *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  ANEMachineIR::Validators::PeElementWiseBinaryParamValues::~PeElementWiseBinaryParamValues((void **)&a55);
  if (a73 < 0) {
    operator delete(a72);
  }
  char v77 = a74;
  if (a74)
  {
    STACK[0x200] = (unint64_t)a74;
    operator delete(v77);
  }
  char v78 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v78;
    operator delete(v78);
  }
  float v79 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v79;
    operator delete(v79);
  }
  long double v80 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v80;
    operator delete(v80);
  }
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  double v81 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v81;
    operator delete(v81);
  }
  uint64_t v82 = *(void **)(v75 - 240);
  if (v82)
  {
    *(void *)(v75 - 232) = v82;
    operator delete(v82);
  }
  std::vector<int> v83 = *(void **)(v75 - 216);
  if (v83)
  {
    *(void *)(v75 - 208) = v83;
    operator delete(v83);
  }
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  if (*(char *)(v75 - 169) < 0) {
    operator delete(*(void **)(v75 - 192));
  }
  if (*(char *)(v75 - 145) < 0) {
    operator delete(*(void **)(v75 - 168));
  }
  if (*(char *)(v75 - 121) < 0) {
    operator delete(*(void **)(v75 - 144));
  }
  if (*(char *)(v75 - 89) < 0) {
    operator delete(*(void **)(v75 - 112));
  }
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(void *a1, char *a2, char *a3)
{
  float v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_210C12348(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  float v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_210C1239C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, a2, (long long *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_210C12420(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_210C126A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_210C12718(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_210C127AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_210C12A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_210C12AF0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_TranslateElementWiseBinary_cpp()
{
  v5[6] = *MEMORY[0x263EF8340];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v3, "add", "pe_add");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[7],0>(v4, "mul", "pe_mul");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[11],0>(v5, "maximum", "pe_maximum");
  for (uint64_t i = 0; i != -18; i -= 6)
  {
    uint64_t v1 = &v3[i * 8];
    if (SHIBYTE(v5[i + 5]) < 0) {
      operator delete(*((void **)v1 + 15));
    }
    if ((char)v1[119] < 0) {
      operator delete(*((void **)v1 + 12));
    }
  }
}

void sub_210C12C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void _GLOBAL__sub_I_TranslateElementWiseBinary_cpp_cold_1(uint64_t a1, uint64_t a2)
{
  do
  {
    if (*(char *)(a1 - 1) < 0) {
      operator delete(*(void **)(a1 - 24));
    }
    if (*(char *)(a1 - 25) < 0) {
      operator delete(*(void **)(a1 - 48));
    }
    a1 -= 48;
  }
  while (a1 != a2);
}

void _GLOBAL__sub_I_TranslateElementWiseBinary_cpp_cold_2(uint64_t a1, uint64_t a2)
{
  do
  {
    if (*(char *)(a1 - 1) < 0) {
      operator delete(*(void **)(a1 - 24));
    }
    if (*(char *)(a1 - 25) < 0) {
      operator delete(*(void **)(a1 - 48));
    }
    a1 -= 48;
  }
  while (a1 != a2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateNeConv@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateNeConv(this, a2);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateNeConv@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateNeConv(this, a2);
}

void ANEMachineIR::H2020::Reshape::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C13840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *__p,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,void **a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v63 - 112));
  if (a60) {
    (*(void (**)(uint64_t))(*(void *)a60 + 8))(a60);
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::string v65 = *(void **)(v63 - 248);
  if (v65)
  {
    *(void *)(v63 - 240) = v65;
    operator delete(v65);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Transpose::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C14A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v60 - 112));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  std::string v62 = *(void **)(v60 - 160);
  if (v62)
  {
    *(void *)(v60 - 152) = v62;
    operator delete(v62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v60 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ValidateConst(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v59, "val");
  uint64_t Attribute = MIL::IRObject::TryGetAttribute();
  uint64_t v5 = Attribute;
  if ((v60 & 0x80000000) == 0)
  {
    if (Attribute) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    unint64_t v16 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v57 = *LocationPtr;
    uint64_t v58 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v55, "Attribute val is undefined for const op");
    MEMORY[0x21667B340](a2, &v57, 315, v55);
    if (v56 < 0) {
      operator delete(v55[0]);
    }
    uint64_t v14 = v58;
    if (v58) {
      goto LABEL_45;
    }
    return;
  }
  operator delete(v59);
  if (!v5) {
    goto LABEL_13;
  }
LABEL_3:
  long long v6 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  if (ANEMachineIR::Utils::IsStaticTensorType(v6, v7))
  {
    uint64_t OutputType = (ANEMachineIR::Utils *)MIL::IROperation::GetOutputType(a1);
    if (ANEMachineIR::Utils::IsStaticTensorType(OutputType, v9))
    {
      unint64_t v10 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      uint64_t v11 = MIL::IRValueType::AsTensorType(v10);
      if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v11 + 80))(v11) + 24))
      {
        uint8x8_t v12 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
        unint64_t v13 = (std::__shared_weak_count *)v12[1];
        uint64_t v45 = *v12;
        long long v46 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "Aneflow dialect's const output does not support type attributes.");
        MEMORY[0x21667B340](a2, &v45, 315, __p);
        if (v44 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v14 = v46;
        if (!v46) {
          return;
        }
LABEL_45:
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        return;
      }
      uint64_t v21 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 176))(a1);
      if (*(void *)(v21 + 8) == *(void *)v21) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v21);
      uint64_t v23 = MIL::IRValueType::AsTensorType(Type);
      unint64_t v24 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
      uint64_t v25 = MIL::IRValueType::AsTensorType(v24);
      int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 88))(v23);
      if (v26 == (*(unsigned int (**)(uint64_t))(*(void *)v25 + 88))(v25))
      {
        uint64_t v27 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 96))(v23);
        uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 96))(v25);
        uint64_t v29 = *v27;
        uint64_t v30 = v27[1];
        if (v30 - *v27 == v28[1] - *v28)
        {
          if (v30 == v29)
          {
LABEL_39:
            MIL::ValidationResult::ValidationResult(a2);
            return;
          }
          uint64_t v31 = v28;
          unint64_t v32 = 0;
          while (1)
          {
            uint64_t v33 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v29 + 8 * v32));
            uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 48))(v33);
            if (v32 >= (uint64_t)(v31[1] - *v31) >> 3) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v35 = v34;
            uint64_t v36 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v31 + 8 * v32));
            if (v35 != (*(uint64_t (**)(uint64_t))(*(void *)v36 + 48))(v36)) {
              break;
            }
            ++v32;
            uint64_t v29 = *v27;
            if (v32 >= (v27[1] - *v27) >> 3) {
              goto LABEL_39;
            }
          }
        }
      }
      uint64_t v37 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      uint64_t v38 = (std::__shared_weak_count *)v37[1];
      uint64_t v41 = *v37;
      long long v42 = v38;
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v39, "Attribute val has incompatible type with operation output");
      MEMORY[0x21667B340](a2, &v41, 306, v39);
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      uint64_t v14 = v42;
      if (v42) {
        goto LABEL_45;
      }
    }
    else
    {
      BOOL v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      unint64_t v20 = (std::__shared_weak_count *)v19[1];
      uint64_t v49 = *v19;
      int64_t v50 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v47, "Output must be tensor with static shape");
      MEMORY[0x21667B340](a2, &v49, 315, v47);
      if (v48 < 0) {
        operator delete(v47[0]);
      }
      uint64_t v14 = v50;
      if (v50) {
        goto LABEL_45;
      }
    }
  }
  else
  {
    float v17 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    float v18 = (std::__shared_weak_count *)v17[1];
    uint64_t v53 = *v17;
    uint64_t v54 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v51, "Attribute val must be tensor with static shape");
    MEMORY[0x21667B340](a2, &v53, 315, v51);
    if (v52 < 0) {
      operator delete(v51[0]);
    }
    uint64_t v14 = v54;
    if (v54) {
      goto LABEL_45;
    }
  }
}

void sub_210C153CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::H2021::Validators::ValidateNeReduce(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeReduce(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Reshape::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C15FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *__p,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,void **a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v63 - 112));
  if (a60) {
    (*(void (**)(uint64_t))(*(void *)a60 + 8))(a60);
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::string v65 = *(void **)(v63 - 248);
  if (v65)
  {
    *(void *)(v63 - 240) = v65;
    operator delete(v65);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Transpose::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C171F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v60 - 112));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  std::string v62 = *(void **)(v60 - 160);
  if (v62)
  {
    *(void *)(v60 - 152) = v62;
    operator delete(v62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v60 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Validators::ValidateNeReduce(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeReduce(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

uint64_t ANEMachineIR::H2021::Validators::ValidateBasePeElementWiseBinary@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateBasePeElementWiseUnary@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateNeActivation@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

void ANEMachineIR::H2021::Validators::ValidateNeAdd(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidateNeMaximum(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

uint64_t ANEMachineIR::H2021::Validators::ValidateNeMinimum@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateNeMul@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateNeSquare@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

void ANEMachineIR::H2021::Validators::ValidatePeAbs(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeSquare(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeAdd(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeAddAbs(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeAddMul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeAddSquare(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeMaximum(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeMinimum(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeMul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeNotEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeLess(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeLessEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeGreater(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeGreaterEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::BaseNePool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C18E78(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 128));
  unint64_t v3 = STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  unint64_t v4 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 176);
  if (v6)
  {
    *(void *)(v1 - 168) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 248), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeAvgPool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C1B16C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 112));
  unint64_t v3 = STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  unint64_t v4 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x350];
  if (STACK[0x350])
  {
    STACK[0x358] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 160);
  if (v6)
  {
    *(void *)(v1 - 152) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeMaxPool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidateNeMaxPool;
  v2[3] = v2;
  ANEMachineIR::H2020::BaseNePool::Make();
}

void sub_210C1BB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeMinPool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidateNeMinPool;
  v2[3] = v2;
  ANEMachineIR::H2020::BaseNePool::Make();
}

void sub_210C1BBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::BasePePool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C1D228(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 128));
  unint64_t v3 = STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  unint64_t v4 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 176);
  if (v6)
  {
    *(void *)(v1 - 168) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 248), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeAvgPool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C1F18C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 112));
  unint64_t v3 = STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  unint64_t v4 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 160);
  if (v6)
  {
    *(void *)(v1 - 152) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeMaxPool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeMaxPool;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePePool::Make();
}

void sub_210C1FA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeMinPool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidatePeMinPool;
  v2[3] = v2;
  ANEMachineIR::H2020::BasePePool::Make();
}

void sub_210C1FB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::BaseNeMatmul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C20020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a20, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a30, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeBatchMatmul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C220D8(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 128));
  unint64_t v3 = STACK[0x3D0];
  STACK[0x3D0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x3C8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3C8]);
  }
  unint64_t v4 = (void *)STACK[0x3A8];
  if (STACK[0x3A8])
  {
    STACK[0x3B0] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x400];
  if (STACK[0x400])
  {
    STACK[0x408] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = (void *)STACK[0x418];
  if (STACK[0x418])
  {
    STACK[0x420] = (unint64_t)v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3D8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 224), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeMatmul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C245BC(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 144));
  unint64_t v3 = STACK[0x308];
  STACK[0x308] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x300]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x300]);
  }
  unint64_t v4 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x348];
  if (STACK[0x348])
  {
    STACK[0x350] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x310], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 216), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ValidateNeAdd(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v62 = *MEMORY[0x263EF8340];
  v60[0] = "x";
  v60[1] = "y";
  do
  {
    std::string::basic_string[abi:ne180100]<0>(v58, (char *)v60[v4]);
    uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    long long v6 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v56 = *LocationPtr;
    uint64_t v57 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v8 = MIL::IRValueType::AsTensorType(ParameterType);
    uint64_t v9 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v56, v8, (uint64_t)v58, v9, a2);
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (!MIL::ValidationResult::IsGood(a2))
    {
      if (v59 < 0) {
        operator delete(v58[0]);
      }
      return;
    }
    MEMORY[0x21667B360](a2);
    if (v59 < 0) {
      operator delete(v58[0]);
    }
    ++v4;
  }
  while (v4 != 2);
  std::string::basic_string[abi:ne180100]<0>(v58, "x");
  unint64_t v10 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v11 = MIL::IRValueType::AsTensorType(v10);
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v58, "y");
  uint8x8_t v12 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v13 = MIL::IRValueType::AsTensorType(v12);
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  uint64_t v14 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 176))(a1);
  if (*(void *)(v14 + 8) == *(void *)v14) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v14);
  uint64_t v16 = MIL::IRValueType::AsTensorType(Type);
  float v17 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(a1);
  uint64_t v18 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
  std::string::basic_string[abi:ne180100]<0>(v58, "x");
  std::string::basic_string[abi:ne180100]<0>(v60, "y");
  if (v61 < 0) {
    operator delete(v60[0]);
  }
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x21667B360](a2);
    __int16 v55 = 0;
    std::string::basic_string[abi:ne180100]<0>(v58, "post_right_shift");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v55, (unsigned char *)&v55 + 1, a2);
    if (v59 < 0) {
      operator delete(v58[0]);
    }
    if (MIL::ValidationResult::IsGood(a2))
    {
      BOOL v19 = (MIL::Fp16 *)MEMORY[0x21667B360](a2);
      if (!(_BYTE)v55) {
        goto LABEL_30;
      }
      unint64_t v20 = (void *)MIL::IRObject::GetLocationPtr(a1);
      uint64_t v21 = (std::__shared_weak_count *)v20[1];
      *(void *)&v53[3] = *v20;
      uint64_t v54 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      ANEMachineIR::Validators::ValidatePostRightShiftRange(a2);
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
      if (MIL::ValidationResult::IsGood(a2))
      {
        BOOL v19 = (MIL::Fp16 *)MEMORY[0x21667B360](a2);
LABEL_30:
        LOWORD(v60[0]) = MIL::Fp16::FromFloat(v19, 1.0);
        HIBYTE(v53[2]) = 0;
        std::string::basic_string[abi:ne180100]<0>(v58, "post_scale");
        MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(a1, (unsigned char *)&v53[2] + 1, v60, a2);
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        if (MIL::ValidationResult::IsGood(a2))
        {
          size_t v22 = (MIL::Fp16 *)MEMORY[0x21667B360](a2);
          v53[1] = MIL::Fp16::FromFloat(v22, 0.0);
          HIBYTE(v53[0]) = 0;
          std::string::basic_string[abi:ne180100]<0>(v58, "bias");
          MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(a1, (unsigned char *)v53 + 1, &v53[1], a2);
          if (v59 < 0) {
            operator delete(v58[0]);
          }
          if (MIL::ValidationResult::IsGood(a2))
          {
            MEMORY[0x21667B360](a2);
            LOBYTE(v53[0]) = 0;
            char v52 = 0;
            std::string::basic_string[abi:ne180100]<0>(v58, "acc_left_shift");
            MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v52, v53, a2);
            if (v59 < 0) {
              operator delete(v58[0]);
            }
            if (MIL::ValidationResult::IsGood(a2))
            {
              MEMORY[0x21667B360](a2);
              char v51 = 0;
              char v50 = 0;
              std::string::basic_string[abi:ne180100]<0>(v58, "acc_bias_shift");
              MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v50, &v51, a2);
              if (v59 < 0) {
                operator delete(v58[0]);
              }
              if (MIL::ValidationResult::IsGood(a2))
              {
                uint64_t v23 = (MIL::Fp16 *)MEMORY[0x21667B360](a2);
                __int16 v49 = MIL::Fp16::FromFloat(v23, 1.0);
                char v48 = 0;
                std::string::basic_string[abi:ne180100]<0>(v58, "x_scale");
                MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(a1, &v48, &v49, a2);
                if (v59 < 0) {
                  operator delete(v58[0]);
                }
                if (MIL::ValidationResult::IsGood(a2))
                {
                  unint64_t v24 = (MIL::Fp16 *)MEMORY[0x21667B360](a2);
                  __int16 v47 = MIL::Fp16::FromFloat(v24, 1.0);
                  char v46 = 0;
                  std::string::basic_string[abi:ne180100]<0>(v58, "y_scale");
                  MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(a1, &v46, &v47, a2);
                  if (v59 < 0) {
                    operator delete(v58[0]);
                  }
                  if (MIL::ValidationResult::IsGood(a2))
                  {
                    MEMORY[0x21667B360](a2);
                    BOOL v25 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v11) == 4;
                    __int16 v26 = ANEMachineIR::Validators::BinaryPointFormatOffsets((ANEMachineIR::Validators *)1, v25);
                    if (ANEMachineIR::Validators::NeuralEngineComputedBinaryPointAndShiftLegal((ANEMachineIR::Validators *)SLOBYTE(v53[0]), SHIBYTE(v55), (char)v26))
                    {
                      if (ANEMachineIR::Validators::NeuralEngineBiasShifterExponentLegal((unsigned __int16)v53[1], v51, SLOBYTE(v53[0]), SHIBYTE(v26)))
                      {
                        if (ANEMachineIR::Validators::NeuralEngineAccumulatorInitLegal(v53[1], v51, v53[0], v26))
                        {
                          MIL::ValidationResult::ValidationResult(a2);
                          return;
                        }
                        unint64_t v32 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
                        uint64_t v33 = (std::__shared_weak_count *)v32[1];
                        uint64_t v36 = *v32;
                        uint64_t v37 = v33;
                        if (v33) {
                          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        std::string::basic_string[abi:ne180100]<0>(v34, "Initialized bias out of bounds of hardware constraints.");
                        MEMORY[0x21667B340](a2, &v36, 309, v34);
                        if (v35 < 0) {
                          operator delete(v34[0]);
                        }
                        uint64_t v29 = v37;
                        if (v37) {
                          goto LABEL_72;
                        }
                        return;
                      }
                      uint64_t v30 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
                      uint64_t v31 = (std::__shared_weak_count *)v30[1];
                      uint64_t v40 = *v30;
                      uint64_t v41 = v31;
                      if (v31) {
                        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      std::string::basic_string[abi:ne180100]<0>(v38, "Bias shift exponent outside of hardware capabilities. Computed shift must 32 bit and be <= 11.");
                      MEMORY[0x21667B340](a2, &v40, 309, v38);
                      if (v39 < 0) {
                        operator delete(v38[0]);
                      }
                      uint64_t v29 = v41;
                      if (!v41) {
                        return;
                      }
                    }
                    else
                    {
                      uint64_t v27 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
                      uint64_t v28 = (std::__shared_weak_count *)v27[1];
                      uint64_t v44 = *v27;
                      uint64_t v45 = v28;
                      if (v28) {
                        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      std::string::basic_string[abi:ne180100]<0>(__p, "Computed binary point plus post-right shift bounded by accumulator dest size. See op definition.");
                      MEMORY[0x21667B340](a2, &v44, 309, __p);
                      if (v43 < 0) {
                        operator delete(__p[0]);
                      }
                      uint64_t v29 = v45;
                      if (!v45) {
                        return;
                      }
                    }
LABEL_72:
                    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_210C255AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ValidateCompatibleNeInterleavableShapes(std::string::size_type *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, MIL::ValidationResult *a8@<X8>)
{
  int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 88))(a4);
  if (v16 == (*(unsigned int (**)(uint64_t))(*(void *)a6 + 88))(a6))
  {
    if (a4 == a6)
    {
      uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)a7 + 96))(a7);
      uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 96))(a4);
      size_t v48 = *(void *)(v46 + 8) - *(void *)v46;
      if (v48 == *(void *)(v47 + 8) - *(void *)v47 && !memcmp(*(const void **)v46, *(const void **)v47, v48))
      {
        char v59 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 96))(a4);
        uint64_t v60 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 96))(a4);
        uint64_t v61 = v59[1];
        if (v61 == *v59) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v62 = v60;
        unint64_t v63 = ((uint64_t)(v60[1] - *v60) >> 3) - 1;
        uint64_t v64 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v61 - 8));
        uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v64 + 48))(v64);
        if (v63 >= (uint64_t)(v62[1] - *v62) >> 3) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v66 = v65;
        uint64_t v67 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v62 + 8 * v63));
        if ((unint64_t)((*(uint64_t (**)(uint64_t))(*(void *)v67 + 48))(v67) + v66) <= 0x10000)
        {
          MIL::ValidationResult::ValidationResult(a8);
        }
        else
        {
          char v68 = (std::__shared_weak_count *)a1[1];
          std::string::size_type v102 = *a1;
          uint64_t v103 = v68;
          if (v68) {
            atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::operator+<char>();
          unsigned int v69 = std::string::append(&v93, "\" and \"");
          long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          v94.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          int v71 = *(char *)(a5 + 23);
          if (v71 >= 0) {
            char v72 = (const std::string::value_type *)a5;
          }
          else {
            char v72 = *(const std::string::value_type **)a5;
          }
          if (v71 >= 0) {
            std::string::size_type v73 = *(unsigned __int8 *)(a5 + 23);
          }
          else {
            std::string::size_type v73 = *(void *)(a5 + 8);
          }
          char v74 = std::string::append(&v94, v72, v73);
          long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
          v95.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v75;
          v74->__r_.__value_.__l.__size_ = 0;
          v74->__r_.__value_.__r.__words[2] = 0;
          v74->__r_.__value_.__r.__words[0] = 0;
          float v76 = std::string::append(&v95, "\" must be less than ");
          long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v96.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&__p, 0x10000uLL);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          long double v80 = std::string::append(&v96, (const std::string::value_type *)p_p, size);
          long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          v97.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v81;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          uint64_t v82 = std::string::append(&v97, " in operation \"");
          long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v98.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v83;
          v82->__r_.__value_.__l.__size_ = 0;
          v82->__r_.__value_.__r.__words[2] = 0;
          v82->__r_.__value_.__r.__words[0] = 0;
          int v84 = *(char *)(a2 + 23);
          if (v84 >= 0) {
            int v85 = (const std::string::value_type *)a2;
          }
          else {
            int v85 = *(const std::string::value_type **)a2;
          }
          if (v84 >= 0) {
            std::string::size_type v86 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            std::string::size_type v86 = *(void *)(a2 + 8);
          }
          unsigned int v87 = std::string::append(&v98, v85, v86);
          long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          v99.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v88;
          v87->__r_.__value_.__l.__size_ = 0;
          v87->__r_.__value_.__r.__words[2] = 0;
          v87->__r_.__value_.__r.__words[0] = 0;
          uint64_t v89 = std::string::append(&v99, "\".");
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          std::string::size_type v101 = v89->__r_.__value_.__r.__words[2];
          long long v100 = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x21667B340](a8, &v102, 309, &v100);
          if (SHIBYTE(v101) < 0) {
            operator delete((void *)v100);
          }
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v99.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v98.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v95.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v94.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          if (v103) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v103);
          }
        }
        if (MIL::ValidationResult::IsGood(a8))
        {
          std::string v91 = (MIL::ValidationResult *)MEMORY[0x21667B360](a8);
          MIL::ValidationResult::ValidationResult(v91);
        }
      }
      else
      {
        std::string::size_type v49 = a1[1];
        v96.__r_.__value_.__r.__words[0] = *a1;
        v96.__r_.__value_.__l.__size_ = v49;
        if (v49) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
        }
        std::operator+<char>();
        char v50 = std::string::append(&v97, "\" operation requires identical shape for \"");
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        int v52 = *(char *)(a3 + 23);
        if (v52 >= 0) {
          uint64_t v53 = (const std::string::value_type *)a3;
        }
        else {
          uint64_t v53 = *(const std::string::value_type **)a3;
        }
        if (v52 >= 0) {
          std::string::size_type v54 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v54 = *(void *)(a3 + 8);
        }
        __int16 v55 = std::string::append(&v98, v53, v54);
        long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        uint64_t v57 = std::string::append(&v99, "\" and output.");
        long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        std::string::size_type v101 = v57->__r_.__value_.__r.__words[2];
        long long v100 = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x21667B340](a8, &v96, 313, &v100);
        if (SHIBYTE(v101) < 0) {
          operator delete((void *)v100);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v98.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        uint64_t v45 = (std::__shared_weak_count *)v96.__r_.__value_.__l.__size_;
        if (v96.__r_.__value_.__l.__size_) {
          goto LABEL_44;
        }
      }
      return;
    }
    std::string::size_type v17 = a1[1];
    v94.__r_.__value_.__r.__words[0] = *a1;
    v94.__r_.__value_.__l.__size_ = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    uint64_t v18 = std::string::append(&v95, "\" operation requires identical shapes for \"");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    int v20 = *(char *)(a3 + 23);
    if (v20 >= 0) {
      uint64_t v21 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v21 = *(const std::string::value_type **)a3;
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v22 = *(void *)(a3 + 8);
    }
    uint64_t v23 = std::string::append(&v96, v21, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v97.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    BOOL v25 = std::string::append(&v97, "\" and \"");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    int v27 = *(char *)(a5 + 23);
    if (v27 >= 0) {
      uint64_t v28 = (const std::string::value_type *)a5;
    }
    else {
      uint64_t v28 = *(const std::string::value_type **)a5;
    }
    if (v27 >= 0) {
      std::string::size_type v29 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v29 = *(void *)(a5 + 8);
    }
  }
  else
  {
    std::string::size_type v30 = a1[1];
    v94.__r_.__value_.__r.__words[0] = *a1;
    v94.__r_.__value_.__l.__size_ = v30;
    if (v30) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    uint64_t v31 = std::string::append(&v95, "\" operation requires identical data types for \"");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    int v33 = *(char *)(a3 + 23);
    if (v33 >= 0) {
      uint64_t v34 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v34 = *(const std::string::value_type **)a3;
    }
    if (v33 >= 0) {
      std::string::size_type v35 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v35 = *(void *)(a3 + 8);
    }
    uint64_t v36 = std::string::append(&v96, v34, v35);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v97.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    uint64_t v38 = std::string::append(&v97, "\" and \"");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    int v40 = *(char *)(a5 + 23);
    if (v40 >= 0) {
      uint64_t v28 = (const std::string::value_type *)a5;
    }
    else {
      uint64_t v28 = *(const std::string::value_type **)a5;
    }
    if (v40 >= 0) {
      std::string::size_type v29 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v29 = *(void *)(a5 + 8);
    }
  }
  uint64_t v41 = std::string::append(&v98, v28, v29);
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  char v43 = std::string::append(&v99, "\".");
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v101 = v43->__r_.__value_.__r.__words[2];
  long long v100 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](a8, &v94, 304, &v100);
  if (SHIBYTE(v101) < 0) {
    operator delete((void *)v100);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  uint64_t v45 = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
  if (v94.__r_.__value_.__l.__size_) {
LABEL_44:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
}

void sub_210C25F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0) {
    operator delete(*(void **)(v54 - 160));
  }
  if (a54 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  long long v56 = *(std::__shared_weak_count **)(v54 - 88);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ValidateNeMaximum(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v38 = *MEMORY[0x263EF8340];
  v36[0] = "x";
  v36[1] = "y";
  do
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)v36[v4]);
    uint64_t LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a1);
    long long v6 = (std::__shared_weak_count *)LocationPtr[1];
    *(void *)&v32[1] = *LocationPtr;
    int v33 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v8 = MIL::IRValueType::AsTensorType(ParameterType);
    uint64_t v9 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v32[1], v8, (uint64_t)__p, v9, a2);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (!MIL::ValidationResult::IsGood(a2))
    {
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      return;
    }
    MEMORY[0x21667B360](a2);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    ++v4;
  }
  while (v4 != 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  unint64_t v10 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v11 = MIL::IRValueType::AsTensorType(v10);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  uint8x8_t v12 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v13 = MIL::IRValueType::AsTensorType(v12);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 176))(a1);
  if (*(void *)(v14 + 8) == *(void *)v14) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v14);
  uint64_t v16 = MIL::IRValueType::AsTensorType(Type);
  std::string::size_type v17 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(a1);
  uint64_t v18 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  std::string::basic_string[abi:ne180100]<0>(v36, "y");
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x21667B360](a2);
    v32[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "post_right_shift");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, v32, (unsigned char *)v32 + 1, a2);
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    if (MIL::ValidationResult::IsGood(a2))
    {
      MEMORY[0x21667B360](a2);
      if (!LOBYTE(v32[0]))
      {
LABEL_30:
        LOWORD(v36[0]) = 0;
        char v29 = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "post_scale");
        MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(a1, &v29, v36, a2);
        if (v35 < 0) {
          operator delete(__p[0]);
        }
        if (MIL::ValidationResult::IsGood(a2))
        {
          MEMORY[0x21667B360](a2);
          BOOL v21 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v11) == 4;
          char v22 = ANEMachineIR::Validators::BinaryPointFormatOffsets((ANEMachineIR::Validators *)1, v21);
          if (ANEMachineIR::Validators::NeuralEngineComputedBinaryPointAndShiftLegal(0, SHIBYTE(v32[0]), v22))
          {
            MIL::ValidationResult::ValidationResult(a2);
          }
          else
          {
            uint64_t v23 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
            long long v24 = (std::__shared_weak_count *)v23[1];
            uint64_t v27 = *v23;
            uint64_t v28 = v24;
            if (v24) {
              atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v25, "Computed binary point plus post-right shift bounded by accumulator dest size. See op definition.");
            MEMORY[0x21667B340](a2, &v27, 309, v25);
            if (v26 < 0) {
              operator delete(v25[0]);
            }
            if (v28) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v28);
            }
          }
        }
        return;
      }
      long long v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      int v20 = (std::__shared_weak_count *)v19[1];
      uint64_t v30 = *v19;
      uint64_t v31 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      ANEMachineIR::Validators::ValidatePostRightShiftRange(a2);
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      if (MIL::ValidationResult::IsGood(a2))
      {
        MEMORY[0x21667B360](a2);
        goto LABEL_30;
      }
    }
  }
}

void sub_210C26608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANEMachineIR::Validators::ParsePeElementWiseUnaryParamValues@<X0>(ANEMachineIR::Validators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  __int16 v13 = 0;
  char v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(this, &v12, &v13, a3);
  if (v11 < 0) {
    operator delete(__p);
  }
  uint64_t result = MIL::ValidationResult::IsGood(a3);
  if (result)
  {
    uint64_t v8 = (MIL::Fp16 *)MEMORY[0x21667B360](a3);
    if (v12) {
      __int16 v9 = v13;
    }
    else {
      __int16 v9 = MIL::Fp16::FromFloat(v8, 1.0);
    }
    if (!*((unsigned char *)a2 + 2)) {
      *((unsigned char *)a2 + 2) = 1;
    }
    *(_WORD *)a2 = v9;
    return MIL::ValidationResult::ValidationResult(a3);
  }
  return result;
}

uint64_t ANEMachineIR::Validators::ParsePeElementWiseBinaryParamValues@<X0>(ANEMachineIR::Validators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  __int16 v21 = 0;
  char v20 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "post_scale");
  MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(this, &v20, &v21, a3);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = MIL::ValidationResult::IsGood(a3);
  if (result)
  {
    uint64_t v8 = (MIL::Fp16 *)MEMORY[0x21667B360](a3);
    if (v20) {
      __int16 v9 = v21;
    }
    else {
      __int16 v9 = MIL::Fp16::FromFloat(v8, 1.0);
    }
    if (!*((unsigned char *)a2 + 18)) {
      *((unsigned char *)a2 + 18) = 1;
    }
    *((_WORD *)a2 + 8) = v9;
    float v17 = 0.0;
    unsigned __int8 v16 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "x_scale");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<float>(this, &v16, &v17, a3);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t result = MIL::ValidationResult::IsGood(a3);
    if (result)
    {
      MEMORY[0x21667B360](a3);
      int v10 = v16;
      float v11 = v17;
      if (!*((unsigned char *)a2 + 4)) {
        *((unsigned char *)a2 + 4) = 1;
      }
      if (!v10) {
        float v11 = 1.0;
      }
      *(float *)a2 = v11;
      float v15 = 0.0;
      unsigned __int8 v14 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "y_scale");
      MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<float>(this, &v14, &v15, a3);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      uint64_t result = MIL::ValidationResult::IsGood(a3);
      if (result)
      {
        MEMORY[0x21667B360](a3);
        int v12 = v14;
        float v13 = v15;
        if (!*((unsigned char *)a2 + 12)) {
          *((unsigned char *)a2 + 12) = 1;
        }
        if (!v12) {
          float v13 = 1.0;
        }
        *((float *)a2 + 2) = v13;
        return MIL::ValidationResult::ValidationResult(a3);
      }
    }
  }
  return result;
}

void sub_210C26978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  MEMORY[0x21667B360](v16);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::Validators::ValidatePeElementWiseUnary@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  int v10 = (std::__shared_weak_count *)a1[1];
  uint64_t v18 = *a1;
  char v19 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v18, a3, (uint64_t)__p, a2, a5);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t result = MIL::ValidationResult::IsGood(a5);
  if (result)
  {
    MEMORY[0x21667B360](a5);
    int v12 = (std::__shared_weak_count *)a1[1];
    uint64_t v14 = *a1;
    float v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v14, a4, (uint64_t)__p, a2, a5);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    uint64_t result = MIL::ValidationResult::IsGood(a5);
    if (result)
    {
      float v13 = (MIL::ValidationResult *)MEMORY[0x21667B360](a5);
      return MIL::ValidationResult::ValidationResult(v13);
    }
  }
  return result;
}

void sub_210C26AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  MEMORY[0x21667B360](v19);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::Validators::ValidatePeElementWiseBinary@<X0>(std::string::size_type *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  int v12 = (std::__shared_weak_count *)a1[1];
  std::string::size_type v62 = *a1;
  unint64_t v63 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v62, a3, (uint64_t)&__p, a2, a6);
  if (SHIBYTE(v69) < 0) {
    operator delete((void *)__p);
  }
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  uint64_t result = MIL::ValidationResult::IsGood(a6);
  if (result)
  {
    MEMORY[0x21667B360](a6);
    uint64_t v14 = (std::__shared_weak_count *)a1[1];
    std::string::size_type v60 = *a1;
    uint64_t v61 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "y");
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v60, a4, (uint64_t)&__p, a2, a6);
    if (SHIBYTE(v69) < 0) {
      operator delete((void *)__p);
    }
    if (v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    }
    uint64_t result = MIL::ValidationResult::IsGood(a6);
    if (result)
    {
      MEMORY[0x21667B360](a6);
      float v15 = (std::__shared_weak_count *)a1[1];
      std::string::size_type v58 = *a1;
      char v59 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "output");
      ANEMachineIR::Validators::ValidateLiveTensorSize(&v58, a5, (uint64_t)&__p, a2, a6);
      if (SHIBYTE(v69) < 0) {
        operator delete((void *)__p);
      }
      if (v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      }
      uint64_t result = MIL::ValidationResult::IsGood(a6);
      if (result)
      {
        MEMORY[0x21667B360](a6);
        std::string::basic_string[abi:ne180100]<0>(&v55, "x");
        std::string::basic_string[abi:ne180100]<0>(&v52, "y");
        int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 88))(a3);
        if (v16 == (*(unsigned int (**)(uint64_t))(*(void *)a4 + 88))(a4))
        {
          memset(&v72, 0, sizeof(v72));
          memset(&v71, 0, sizeof(v71));
          if ((ANEMachineIR::Utils::TryGetStaticTensorShape(a3, (uint64_t)&v72) & 1) != 0
            && ANEMachineIR::Utils::TryGetStaticTensorShape(a4, (uint64_t)&v71))
          {
            memset(&v70, 0, sizeof(v70));
            std::string::size_type v17 = a1[1];
            v64.__r_.__value_.__r.__words[0] = *a1;
            v64.__r_.__value_.__l.__size_ = v17;
            if (v17) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
            }
            ANEMachineIR::Utils::BroadcastShapes((uint64_t *)&v64, (uint64_t)&v72, (uint64_t)&v71, &v70.__r_.__value_.__l.__data_, (MIL::ValidationResult *)&__p);
            if (v64.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v64.__r_.__value_.__l.__size_);
            }
            if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
            {
              memset(&__s1, 0, sizeof(__s1));
              char StaticTensorShape = ANEMachineIR::Utils::TryGetStaticTensorShape(a5, (uint64_t)&__s1);
              uint64_t v19 = (void *)__s1.__r_.__value_.__r.__words[0];
              BOOL v20 = (StaticTensorShape & 1) != 0
                 && __s1.__r_.__value_.__l.__size_ - __s1.__r_.__value_.__r.__words[0] == v70.__r_.__value_.__l.__size_
                                                                                        - v70.__r_.__value_.__r.__words[0]
                 && memcmp(__s1.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_ - __s1.__r_.__value_.__r.__words[0]) == 0;
              if (v19)
              {
                __s1.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
                operator delete(v19);
              }
            }
            else
            {
              BOOL v20 = 0;
            }
            MEMORY[0x21667B360](&__p);
            if (v70.__r_.__value_.__r.__words[0])
            {
              v70.__r_.__value_.__l.__size_ = v70.__r_.__value_.__r.__words[0];
              operator delete(v70.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            BOOL v20 = 0;
          }
          if (v71.__r_.__value_.__r.__words[0])
          {
            v71.__r_.__value_.__l.__size_ = v71.__r_.__value_.__r.__words[0];
            operator delete(v71.__r_.__value_.__l.__data_);
          }
          if (v72.__r_.__value_.__r.__words[0])
          {
            v72.__r_.__value_.__l.__size_ = v72.__r_.__value_.__r.__words[0];
            operator delete(v72.__r_.__value_.__l.__data_);
          }
          if (v20)
          {
            MIL::ValidationResult::ValidationResult(a6);
LABEL_84:
            if ((char)v54 < 0) {
              operator delete(v52);
            }
            if ((char)v57 < 0) {
              operator delete(v55);
            }
            uint64_t result = MIL::ValidationResult::IsGood(a6);
            if (result)
            {
              long long v51 = (MIL::ValidationResult *)MEMORY[0x21667B360](a6);
              return MIL::ValidationResult::ValidationResult(v51);
            }
            return result;
          }
          uint64_t v36 = (std::__shared_weak_count *)a1[1];
          std::string::size_type v65 = *a1;
          uint64_t v66 = v36;
          if (v36) {
            atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::operator+<char>();
          char v37 = std::string::append(&v64, "\" operation requires broadcastable shape for \"");
          long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          __s1.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          if ((v57 & 0x80u) == 0) {
            long long v39 = (const std::string::value_type *)&v55;
          }
          else {
            long long v39 = (const std::string::value_type *)v55;
          }
          if ((v57 & 0x80u) == 0) {
            std::string::size_type v40 = v57;
          }
          else {
            std::string::size_type v40 = v56;
          }
          uint64_t v41 = std::string::append(&__s1, v39, v40);
          long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v70.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          char v43 = std::string::append(&v70, "\", \"");
          long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v71.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          if ((v54 & 0x80u) == 0) {
            uint64_t v45 = (const std::string::value_type *)&v52;
          }
          else {
            uint64_t v45 = (const std::string::value_type *)v52;
          }
          if ((v54 & 0x80u) == 0) {
            std::string::size_type v46 = v54;
          }
          else {
            std::string::size_type v46 = v53;
          }
          uint64_t v47 = std::string::append(&v71, v45, v46);
          long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v72.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v49 = std::string::append(&v72, "\", and output.");
          long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          std::string::size_type v69 = v49->__r_.__value_.__r.__words[2];
          long long __p = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x21667B340](a6, &v65, 313, &__p);
        }
        else
        {
          __int16 v21 = (std::__shared_weak_count *)a1[1];
          std::string::size_type v65 = *a1;
          uint64_t v66 = v21;
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::operator+<char>();
          char v22 = std::string::append(&v64, "\" operation requires identical data types for \"");
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          __s1.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          if ((v57 & 0x80u) == 0) {
            long long v24 = (const std::string::value_type *)&v55;
          }
          else {
            long long v24 = (const std::string::value_type *)v55;
          }
          if ((v57 & 0x80u) == 0) {
            std::string::size_type v25 = v57;
          }
          else {
            std::string::size_type v25 = v56;
          }
          char v26 = std::string::append(&__s1, v24, v25);
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v70.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          uint64_t v28 = std::string::append(&v70, "\" and \"");
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v71.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if ((v54 & 0x80u) == 0) {
            uint64_t v30 = (const std::string::value_type *)&v52;
          }
          else {
            uint64_t v30 = (const std::string::value_type *)v52;
          }
          if ((v54 & 0x80u) == 0) {
            std::string::size_type v31 = v54;
          }
          else {
            std::string::size_type v31 = v53;
          }
          long long v32 = std::string::append(&v71, v30, v31);
          long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
          v72.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v33;
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          v32->__r_.__value_.__r.__words[0] = 0;
          uint64_t v34 = std::string::append(&v72, "\".");
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          std::string::size_type v69 = v34->__r_.__value_.__r.__words[2];
          long long __p = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x21667B340](a6, &v65, 304, &__p);
        }
        if (SHIBYTE(v69) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (v66) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        }
        goto LABEL_84;
      }
    }
  }
  return result;
}

void sub_210C271B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x21667B360](&a43);
  long long v50 = *(void **)(v48 - 176);
  if (v50)
  {
    *(void *)(v48 - 168) = v50;
    operator delete(v50);
  }
  long long v51 = *(void **)(v48 - 144);
  if (v51)
  {
    *(void *)(v48 - 136) = v51;
    operator delete(v51);
  }
  int v52 = *(void **)(v48 - 112);
  if (v52)
  {
    *(void *)(v48 - 104) = v52;
    operator delete(v52);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::ValidatePeElementWiseUnary(ANEMachineIR::Validators *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  v13[0] = 0;
  v13[2] = 0;
  LOBYTE(v14) = 0;
  char v16 = 0;
  LOBYTE(v17) = 0;
  char v18 = 0;
  char v19 = 0;
  char v20 = 0;
  char v21 = 0;
  char v22 = 0;
  LOBYTE(v23) = 0;
  char v25 = 0;
  ANEMachineIR::Validators::ParsePeElementWiseUnaryParamValues(a1, (const MIL::IROperation *)v13, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x21667B360](a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v5 = MIL::IRValueType::AsTensorType(ParameterType);
    if (v12 < 0) {
      operator delete(__p);
    }
    uint64_t v6 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)a1 + 176))(a1);
    if (*(void *)(v6 + 8) == *(void *)v6) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v6);
    uint64_t v8 = MIL::IRValueType::AsTensorType(Type);
    uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v10 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidatePeElementWiseUnary(LocationPtr, v10, v5, v8, a2);
  }
  if (v25 && v24 < 0) {
    operator delete(v23);
  }
  if (v18 && v17) {
    operator delete(v17);
  }
  if (v16)
  {
    if (v15 < 0) {
      operator delete(v14);
    }
  }
}

void sub_210C27550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
}

void ANEMachineIR::Validators::PeElementWiseUnaryParamValues::~PeElementWiseUnaryParamValues(void **this)
{
  if (*((unsigned char *)this + 112) && *((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((unsigned char *)this + 64))
  {
    int v2 = this[5];
    if (v2)
    {
      this[6] = v2;
      operator delete(v2);
    }
  }
  if (*((unsigned char *)this + 32))
  {
    if (*((char *)this + 31) < 0) {
      operator delete(this[1]);
    }
  }
}

void ANEMachineIR::Validators::ValidatePeElementWiseBinary(ANEMachineIR::Validators *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  v15[0] = 0;
  v15[4] = 0;
  v15[8] = 0;
  v15[12] = 0;
  v15[16] = 0;
  v15[18] = 0;
  LOBYTE(v16) = 0;
  char v18 = 0;
  LOBYTE(v19) = 0;
  char v20 = 0;
  char v21 = 0;
  char v22 = 0;
  char v23 = 0;
  char v24 = 0;
  LOBYTE(v25) = 0;
  char v27 = 0;
  ANEMachineIR::Validators::ParsePeElementWiseBinaryParamValues(a1, (const MIL::IROperation *)v15, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x21667B360](a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v5 = MIL::IRValueType::AsTensorType(ParameterType);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "y");
    uint64_t v6 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v7 = MIL::IRValueType::AsTensorType(v6);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)a1 + 176))(a1);
    if (*(void *)(v8 + 8) == *(void *)v8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v8);
    uint64_t v10 = MIL::IRValueType::AsTensorType(Type);
    uint64_t LocationPtr = (std::string::size_type *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v12 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidatePeElementWiseBinary(LocationPtr, v12, v5, v7, v10, a2);
  }
  if (v27 && v26 < 0) {
    operator delete(v25);
  }
  if (v20 && v19) {
    operator delete(v19);
  }
  if (v18)
  {
    if (v17 < 0) {
      operator delete(v16);
    }
  }
}

void sub_210C277E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
}

void MilTranslator::Passes::FuseConvActivation::Match(MIL::Builder::BlockBuilder **a1@<X1>, void *a2@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  MIL::Builder::BlockBuilder::GetOperations(&v34, *a1);
  uint64_t v3 = v34;
  uint64_t v4 = v35;
  if (v34 == v35)
  {
LABEL_12:
    long long v39 = (MIL::Builder::BlockBuilder **)&v34;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
    __int16 v9 = 0;
LABEL_13:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (!v9) {
      return;
    }
    goto LABEL_14;
  }
  while (1)
  {
    uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)v3);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
    int v7 = *(char *)(v6 + 23);
    if (v7 < 0) {
      break;
    }
    if (v7 == 7) {
      goto LABEL_7;
    }
LABEL_11:
    v3 += 16;
    if (v3 == v4) {
      goto LABEL_12;
    }
  }
  if (*(void *)(v6 + 8) != 7) {
    goto LABEL_11;
  }
  uint64_t v6 = *(void *)v6;
LABEL_7:
  if (*(_DWORD *)v6 != 1667196270 || *(_DWORD *)(v6 + 3) != 1986948963) {
    goto LABEL_11;
  }
  uint64_t v10 = *(MIL::Builder::OperationBuilder **)v3;
  __int16 v9 = *(std::__shared_weak_count **)(v3 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v39 = (MIL::Builder::BlockBuilder **)&v34;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (!v10) {
    goto LABEL_13;
  }
  MIL::Builder::OperationBuilder::GetChildOperations(&v34, v10);
  if (v37 != 1
    || (MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)&v39, v10),
        float v11 = (void **)v39,
        uint64_t v12 = (void **)&v40->__vftable,
        long long v38 = (void ***)&v39,
        std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38),
        v11 != v12))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_22;
  }
  char v14 = *(MIL::Builder::OperationBuilder **)(v36 + 16);
  float v13 = *(std::__shared_weak_count **)(v36 + 24);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = MIL::Builder::OperationBuilder::GetOperator(v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
  int v17 = *(char *)(v16 + 23);
  if (v17 < 0)
  {
    if (*(void *)(v16 + 8) != 13) {
      goto LABEL_53;
    }
    uint64_t v16 = *(void *)v16;
  }
  else if (v17 != 13)
  {
    goto LABEL_53;
  }
  BOOL v18 = *(void *)v16 == 0x76697463615F656ELL && *(void *)(v16 + 5) == 0x6E6F697461766974;
  if (v18
    && (MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)&v39, v14),
        int64_t v19 = (char *)v40 - (char *)v39,
        long long v38 = (void ***)&v39,
        std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38),
        v19 == 16))
  {
    MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)&v39, v14);
    char v21 = *v39;
    char v20 = (std::__shared_weak_count *)v39[1];
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v38 = (void ***)&v39;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v39, v21);
    int64_t v22 = (char *)v40 - (char *)v39;
    long long v38 = (void ***)&v39;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    if (v22 != 16) {
      goto LABEL_56;
    }
    uint64_t Output = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v10);
    Type = (MIL::IRValueType *)MIL::Builder::Variable::TryGetType(Output);
    char v25 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v14);
    uint64_t v26 = MIL::Builder::Variable::TryGetType(v25);
    if (!Type) {
      goto LABEL_56;
    }
    char v27 = (MIL::IRValueType *)v26;
    if (v26
      && (uint64_t v28 = MIL::IRValueType::AsTensorType(Type),
          int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 88))(v28),
          uint64_t v30 = MIL::IRValueType::AsTensorType(v27),
          v29 == (*(unsigned int (**)(uint64_t))(*(void *)v30 + 88))(v30))
      && (uint64_t v31 = MIL::IRValueType::AsTensorType(v27),
          (*(unsigned int (**)(uint64_t))(*(void *)v31 + 88))(v31) == 4))
    {
      long long v39 = (MIL::Builder::BlockBuilder **)v10;
      std::string::size_type v40 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v41 = v14;
      long long v42 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector[abi:ne180100](a2, &v39, 2uLL);
      for (uint64_t i = 3; i != -1; i -= 2)
      {
        long long v33 = (std::__shared_weak_count *)(&v39)[i];
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
      }
    }
    else
    {
LABEL_56:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  else
  {
LABEL_53:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
LABEL_22:
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&v34);
  if (v9) {
LABEL_14:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_210C27C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v7 = 24;
  while (1)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(v4 + v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    v7 -= 16;
    if (v7 == -8)
    {
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)va);
      if (v2) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v2);
      }
      _Unwind_Resume(a1);
    }
  }
}

void MilTranslator::Passes::FuseConvActivation::Replace(MIL::Builder::BlockBuilder **a1@<X1>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a2;
  if ((char *)a2[1] - (char *)*a2 == 32)
  {
    uint64_t v8 = *v4;
    uint64_t v7 = (std::__shared_weak_count *)v4[1];
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a2;
      if ((unint64_t)((char *)a2[1] - (char *)*a2) <= 0x10) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
    }
    uint64_t v10 = (MIL::Builder::OperationBuilder *)v4[2];
    __int16 v9 = (std::__shared_weak_count *)v4[3];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v151, "ne_conv");
    unint64_t v147 = v10;
    unint64_t v148 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Builder::BlockBuilder::AddOperation();
    if (v148) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v148);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v144, "x");
    std::string::basic_string[abi:ne180100]<0>(&v151, "x");
    uint64_t ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
    uint64_t Name = MIL::Builder::Variable::GetName(ArgumentForParameter);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)Name, *(void *)(Name + 8));
    }
    else
    {
      long long v13 = *(_OWORD *)Name;
      v143.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v13;
    }
    MIL::Builder::OperationBuilder::AddInput();
    if (v146) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v146);
    }
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v143.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    if (v145 < 0) {
      operator delete(v144);
    }
    uint64_t v16 = std::string::basic_string[abi:ne180100]<0>(&v151, "dense_kernel");
    uint64_t v141 = v8;
    unint64_t v142 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v139 = v149;
    int64_t v140 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v16, &v141);
    if (v140) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v140);
    }
    if (v142) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v142);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    int v17 = std::string::basic_string[abi:ne180100]<0>(&v151, "strides");
    uint64_t v137 = v8;
    int64_t v138 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v135 = v149;
    std::string v136 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v17, &v137);
    if (v136) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v136);
    }
    if (v138) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v138);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    BOOL v18 = std::string::basic_string[abi:ne180100]<0>(&v151, "pad_mode");
    uint64_t v133 = v8;
    std::string v134 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v131 = v149;
    std::string v132 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v18, &v133);
    if (v132) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v132);
    }
    if (v134) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v134);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    int64_t v19 = std::string::basic_string[abi:ne180100]<0>(&v151, "pad");
    uint64_t v129 = v8;
    std::string::size_type v130 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v127 = v149;
    uint64_t v128 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v19, &v129);
    if (v128) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v128);
    }
    if (v130) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v130);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    char v20 = std::string::basic_string[abi:ne180100]<0>(&v151, "dilations");
    uint64_t v125 = v8;
    __int16 v126 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v123 = v149;
    int64_t v124 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v20, &v125);
    if (v124) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v124);
    }
    if (v126) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v126);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    char v21 = std::string::basic_string[abi:ne180100]<0>(&v151, "num_groups");
    uint64_t v121 = v8;
    float v122 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v119 = v149;
    unint64_t v120 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v21, &v121);
    if (v120) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v120);
    }
    if (v122) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v122);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    int64_t v22 = std::string::basic_string[abi:ne180100]<0>(&v151, "group_kernel_reuse");
    uint64_t v117 = v8;
    uint64_t v118 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v115 = v149;
    unsigned int v116 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v22, &v117);
    if (v116) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v116);
    }
    if (v118) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v118);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    char v23 = std::string::basic_string[abi:ne180100]<0>(&v151, "bias");
    uint64_t v113 = v8;
    float v114 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v111 = v149;
    unint64_t v112 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v23, &v113);
    if (v112) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v112);
    }
    if (v114) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v114);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    char v24 = std::string::basic_string[abi:ne180100]<0>(&v151, "acc_left_shift");
    uint64_t v109 = v8;
    uint64_t v110 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v107 = v149;
    float v108 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v24, &v109);
    if (v108) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v108);
    }
    if (v110) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v110);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    char v25 = std::string::basic_string[abi:ne180100]<0>(&v151, "acc_bias_shift");
    uint64_t v105 = v8;
    float v106 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v103 = v149;
    uint64_t v104 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v25, &v105);
    if (v104) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v104);
    }
    if (v106) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    uint64_t v26 = std::string::basic_string[abi:ne180100]<0>(&v151, "post_right_shift");
    uint64_t v101 = v8;
    std::string::size_type v102 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v99 = v149;
    long long v100 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v26, &v101);
    if (v100) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v100);
    }
    if (v102) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v102);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    char v27 = std::string::basic_string[abi:ne180100]<0>(&v151, "transposed");
    uint64_t v97 = v8;
    std::string v98 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v95 = v149;
    std::string v96 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v27, &v97);
    if (v96) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v96);
    }
    if (v98) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v98);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    uint64_t v28 = std::string::basic_string[abi:ne180100]<0>(&v151, "pre_relu");
    uint64_t v93 = v8;
    std::string v94 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v91 = v149;
    std::string v92 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v28, &v93);
    if (v92) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v92);
    }
    if (v94) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v94);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    int v29 = std::string::basic_string[abi:ne180100]<0>(&v151, "alternative_format_kernel_coefficients");
    uint64_t v89 = v8;
    long long v90 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v87 = v149;
    long long v88 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v29, &v89);
    if (v88) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v88);
    }
    if (v90) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v90);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    uint64_t v30 = std::string::basic_string[abi:ne180100]<0>(&v151, "sparse_mask");
    uint64_t v85 = v8;
    std::string::size_type v86 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v83 = v149;
    int v84 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v30, &v85);
    if (v84) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v84);
    }
    if (v86) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v86);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    uint64_t v31 = std::string::basic_string[abi:ne180100]<0>(&v151, "sparse_num_nonzero");
    uint64_t v81 = v8;
    uint64_t v82 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v79 = v149;
    long double v80 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v31, &v81);
    if (v80) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v80);
    }
    if (v82) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v82);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    long long v32 = std::string::basic_string[abi:ne180100]<0>(&v151, "sparse_num_nonzero_per_filter");
    uint64_t v77 = v8;
    char v78 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v75 = v149;
    float v76 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v32, &v77);
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
    if (v78) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    long long v33 = std::string::basic_string[abi:ne180100]<0>(&v151, "palette_table");
    uint64_t v73 = v8;
    char v74 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v71 = v149;
    std::string v72 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v33, &v73);
    if (v72) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v72);
    }
    if (v74) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    MIL::Builder::BlockBuilder::GetOpsetName(*a1);
    MIL::Builder::OperationBuilder::AddBlock();
    MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)&__p, v10);
    MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v151, *(MIL::Builder::BlockBuilder **)__p.__r_.__value_.__l.__data_);
    uint64_t v35 = *(MIL::Builder::OperationBuilder **)v151.__r_.__value_.__l.__data_;
    uint64_t v34 = *(std::__shared_weak_count **)(v151.__r_.__value_.__r.__words[0] + 8);
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    p_p = (MIL::Builder::OperationBuilder *)&v151;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    p_p = (MIL::Builder::OperationBuilder *)&__p;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    std::string::basic_string[abi:ne180100]<0>(&v151, "x");
    uint64_t v36 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
    uint64_t v37 = MIL::Builder::Variable::GetName(v36);
    if (*(char *)(v37 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v37, *(void *)(v37 + 8));
    }
    else
    {
      long long v38 = *(_OWORD *)v37;
      v68.__r_.__value_.__r.__words[2] = *(void *)(v37 + 16);
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v38;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    long long v39 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
    MIL::Builder::Variable::TryGetType(v39);
    MIL::Builder::BlockBuilder::AddInput();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(v35);
    (*(void (**)(uint64_t))(*(void *)Operator + 16))(Operator);
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    MIL::Builder::BlockBuilder::AddOperation();
    uint64_t v41 = std::string::basic_string[abi:ne180100]<0>(&v151, "x");
    std::string::size_type v62 = v35;
    unint64_t v63 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v60 = p_p;
    uint64_t v61 = v67;
    if (v67) {
      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::TryCopyOpInput((uint64_t)v41, (uint64_t *)&v62);
    if (v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    }
    if (v63) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v63);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    MIL::Builder::OperationBuilder::GetOutputs((uint64_t *)&v151, v35);
    uint64_t v42 = MIL::Builder::Variable::GetName(*(MIL::Builder::Variable **)v151.__r_.__value_.__l.__data_);
    if (*(char *)(v42 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v42, *(void *)(v42 + 8));
    }
    else
    {
      long long v43 = *(_OWORD *)v42;
      v58.__r_.__value_.__r.__words[2] = *(void *)(v42 + 16);
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v43;
    }
    MIL::Builder::OperationBuilder::GetOutputs((uint64_t *)&__p, v35);
    MIL::Builder::Variable::TryGetType(*(MIL::Builder::Variable **)__p.__r_.__value_.__l.__data_);
    MIL::Builder::OperationBuilder::AddOutput();
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (v151.__r_.__value_.__r.__words[0])
    {
      v151.__r_.__value_.__l.__size_ = v151.__r_.__value_.__r.__words[0];
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    MIL::Builder::OperationBuilder::GetOutputs((uint64_t *)&v151, p_p);
    MIL::Builder::Variable::GetName(*(MIL::Builder::Variable **)v151.__r_.__value_.__l.__data_);
    MIL::Builder::BlockBuilder::AddOutput();
    if (v151.__r_.__value_.__r.__words[0])
    {
      v151.__r_.__value_.__l.__size_ = v151.__r_.__value_.__r.__words[0];
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    uint64_t Output = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v10);
    uint64_t v45 = MIL::Builder::Variable::GetName(Output);
    if (*(char *)(v45 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)v45, *(void *)(v45 + 8));
    }
    else
    {
      long long v46 = *(_OWORD *)v45;
      v151.__r_.__value_.__r.__words[2] = *(void *)(v45 + 16);
      *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v46;
    }
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v151.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v151.__r_.__value_.__l.__size_;
    }
    uint64_t v48 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 6);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v49 = &v151;
      }
      else {
        std::string::size_type v49 = (std::string *)v151.__r_.__value_.__r.__words[0];
      }
      memmove(v48, v49, size);
    }
    strcpy((char *)v48 + size, "_fused");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v56, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v56 = __p;
    }
    long long v50 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v10);
    MIL::Builder::Variable::TryGetType(v50);
    MIL::Builder::OperationBuilder::AddOutput();
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v55, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v55 = __p;
    }
    MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    long long v51 = *a2;
    int v52 = a2[1];
    if (*a2 != v52)
    {
      do
      {
        std::string::size_type v53 = (std::__shared_weak_count *)v51[1];
        if (v53)
        {
          atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
          unsigned __int8 v54 = v53;
          atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          unsigned __int8 v54 = 0;
        }
        MIL::Builder::BlockBuilder::RemoveOperation();
        if (v54) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v54);
        }
        if (v53) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        }
        v51 += 2;
      }
      while (v51 != v52);
    }
    *(_DWORD *)a3 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    if (v67) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    }
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (v70) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v70);
    }
    if (v150) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v150);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    *(_DWORD *)a3 = 14;
    std::operator+<char>();
    char v14 = std::string::append(&v151, "'s pattern");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(void *)(a3 + 24) = *((void *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)(a3 + 8) = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
  }
}

void sub_210C28C64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MilTranslator::Passes::FuseConvActivation::~FuseConvActivation(void **this)
{
  MilTranslator::Passes::Pass::~Pass(this);
  JUMPOUT(0x21667BBD0);
}

void ANEMachineIR::H2022::Validators::ValidateNeReduce(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeReduce(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void *MIL::ANEMachineIR::Interpreter::ConstCpu::Run@<X0>(_DWORD *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  uint64_t Attribute = MIL::IRObject::TryGetAttribute();
  uint64_t v3 = Attribute;
  if ((v9 & 0x80000000) == 0)
  {
    if (Attribute) {
      goto LABEL_3;
    }
LABEL_6:
    *a1 = 2;
    uint64_t v6 = "No value.";
    uint64_t v5 = a1 + 2;
    return std::string::basic_string[abi:ne180100]<0>(v5, v6);
  }
  operator delete(__p);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v5 = a1 + 2;
  if (v4)
  {
    *a1 = 0;
    uint64_t v6 = (char *)&unk_210C6BFE7;
  }
  else
  {
    *a1 = 3;
    uint64_t v6 = "Value is not a tensor.";
  }
  return std::string::basic_string[abi:ne180100]<0>(v5, v6);
}

void sub_210C29248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::ConstCpu::~ConstCpu(MIL::ANEMachineIR::Interpreter::ConstCpu *this)
{
}

uint64_t ANEMachineIR::H2022::Validators::ValidateBaseNeMatmul@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2022::Validators::ValidateNeBatchMatmul(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidateNeMatmul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Const::Make(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  v6[0] = &unk_26C315638;
  v6[1] = ANEMachineIR::H2020::Validators::ValidateConst;
  v6[3] = v6;
  char v4 = HIBYTE(v2);
  v5[0] = &unk_26C31A3B0;
  v5[3] = v5;
  MIL::IROperator::Make();
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](v6);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_210C293B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((void *)(v5 - 56));
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  ANEMachineIR::H2022::Const::Make((uint64_t)va, (uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C31A3B0;
  return result;
}

void std::__function::__func<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C31A3B0;
}

void std::__function::__func<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  MIL::IRObject::TryGetAttributeSharedPtr();
  if (v1 < 0) {
    operator delete(__p);
  }
}

void sub_210C294C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2020::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void ANEMachineIR::Validators::ValidateReshape(MIL::IROperation *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t OutputType = (ANEMachineIR::Utils *)MIL::IROperation::GetOutputType(a1);
  if ((ANEMachineIR::Utils::IsStaticTensorType(OutputType, v5) & 1) == 0)
  {
    uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v30 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v76 = *LocationPtr;
    uint64_t v77 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v74, "Output must be tensor with static shape");
    MEMORY[0x21667B340](a2, &v76, 315, v74);
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    uint64_t v31 = v77;
    if (!v77) {
      return;
    }
LABEL_50:
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  ParameterType = (ANEMachineIR::Utils *)MIL::IROperation::GetParameterType();
  if (SHIBYTE(v54) < 0) {
    operator delete(__p);
  }
  if ((ANEMachineIR::Utils::IsStaticTensorType(ParameterType, v6) & 1) == 0)
  {
    long long v32 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    long long v33 = (std::__shared_weak_count *)v32[1];
    uint64_t v72 = *v32;
    uint64_t v73 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v70, "'x' must be tensor with static shape");
    MEMORY[0x21667B340](a2, &v72, 315, v70);
    if (v71 < 0) {
      operator delete(v70[0]);
    }
    uint64_t v31 = v73;
    if (!v73) {
      return;
    }
    goto LABEL_50;
  }
  uint64_t v8 = MIL::IRValueType::AsTensorType(ParameterType);
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
  if (v9[1] == *v9)
  {
    uint64_t v34 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v35 = (std::__shared_weak_count *)v34[1];
    uint64_t v68 = *v34;
    std::string::size_type v69 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v66, "'x' cannot be scalar");
    MEMORY[0x21667B340](a2, &v68, 315, v66);
    if (v67 < 0) {
      operator delete(v66[0]);
    }
    uint64_t v31 = v69;
    if (!v69) {
      return;
    }
    goto LABEL_50;
  }
  uint64_t v10 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  uint64_t v11 = MIL::IRValueType::AsTensorType(v10);
  uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v11);
  if (v12[1] == *v12)
  {
    uint64_t v36 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v37 = (std::__shared_weak_count *)v36[1];
    uint64_t v64 = *v36;
    uint64_t v65 = v37;
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v62, "Output cannot be scalar");
    MEMORY[0x21667B340](a2, &v64, 315, v62);
    if (v63 < 0) {
      operator delete(v62[0]);
    }
    uint64_t v31 = v65;
    if (!v65) {
      return;
    }
    goto LABEL_50;
  }
  uint64_t v13 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  char v14 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v13);
  uint64_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(v14, v15);
  int v17 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (NumberOfElementsFromStaticTensorShape == ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(v17, v18))
  {
    int64_t v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    char v20 = (std::__shared_weak_count *)v19[1];
    uint64_t v51 = *v19;
    int v52 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = MIL::IRValueType::AsTensorType(ParameterType);
    std::string::basic_string[abi:ne180100]<0>(&v46, "x");
    uint64_t v22 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v51, v21, (uint64_t)&v46, v22, (MIL::ValidationResult *)&__p);
    if (SHIBYTE(v47) < 0) {
      operator delete(v46);
    }
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    char v23 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    char v24 = (std::__shared_weak_count *)v23[1];
    uint64_t v44 = *v23;
    uint64_t v45 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v25 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    uint64_t v26 = MIL::IRValueType::AsTensorType(v25);
    (*(void (**)(void *__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(v43, a1);
    uint64_t v27 = v43[0];
    uint64_t v28 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v44, v26, v27, v28, (MIL::ValidationResult *)&v46);
    char v78 = (void **)v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v78);
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
    {
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v46))
      {
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
LABEL_55:
        MEMORY[0x21667B360](&v46);
        MEMORY[0x21667B360](&__p);
        return;
      }
      std::string::size_type v40 = &v50;
      *(_OWORD *)(a2 + 8) = v47;
      long long v47 = 0uLL;
      uint64_t v41 = &v48;
      *(_OWORD *)(a2 + 24) = v48;
      uint64_t v42 = v49;
    }
    else
    {
      std::string::size_type v40 = &v57;
      *(_OWORD *)(a2 + 8) = v54;
      long long v54 = 0uLL;
      uint64_t v41 = &v55;
      *(_OWORD *)(a2 + 24) = v55;
      uint64_t v42 = v56;
    }
    *(void *)(a2 + 40) = v42;
    *(void *)uint64_t v41 = 0;
    *((void *)v41 + 1) = 0;
    *((void *)v41 + 2) = 0;
    *(void *)a2 = MEMORY[0x263F52F88] + 16;
    *(_DWORD *)(a2 + 48) = *(_DWORD *)v40;
    goto LABEL_55;
  }
  long long v38 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  long long v39 = (std::__shared_weak_count *)v38[1];
  uint64_t v60 = *v38;
  uint64_t v61 = v39;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v58, "'x' and output must have equal number of elements.");
  MEMORY[0x21667B340](a2, &v60, 315, v58);
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  uint64_t v31 = v61;
  if (v61) {
    goto LABEL_50;
  }
}

void sub_210C29A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,std::__shared_weak_count *a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  _Unwind_Resume(exception_object);
}

void sub_210C29BAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x210C29BA4);
}

void ANEMachineIR::Validators::ValidateTranspose(MIL::IROperation *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t OutputType = (ANEMachineIR::Utils *)MIL::IROperation::GetOutputType(a1);
  if ((ANEMachineIR::Utils::IsStaticTensorType(OutputType, v5) & 1) == 0)
  {
    uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v34 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v168 = *LocationPtr;
    uint64_t v169 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v166, "Output must be tensor with static shape");
    MEMORY[0x21667B340](a2, &v168, 315, v166);
    if (v167 < 0) {
      operator delete(v166[0]);
    }
    uint64_t v35 = v169;
    if (!v169) {
      return;
    }
LABEL_45:
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v163, "x");
  ParameterType = (ANEMachineIR::Utils *)MIL::IROperation::GetParameterType();
  if (v165 < 0) {
    operator delete(v163);
  }
  char IsStaticTensorType = ANEMachineIR::Utils::IsStaticTensorType(ParameterType, v6);
  uint64_t v9 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  if ((IsStaticTensorType & 1) == 0)
  {
    uint64_t v36 = (std::__shared_weak_count *)v9[1];
    uint64_t v161 = *v9;
    uint64_t v162 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v159, "'x' must be tensor with static shape");
    MEMORY[0x21667B340](a2, &v161, 315, v159);
    if (v160 < 0) {
      operator delete(v159[0]);
    }
    uint64_t v35 = v162;
    if (!v162) {
      return;
    }
    goto LABEL_45;
  }
  uint64_t v10 = (std::__shared_weak_count *)v9[1];
  uint64_t v157 = *v9;
  unint64_t v158 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = MIL::IRValueType::AsTensorType(ParameterType);
  std::string::basic_string[abi:ne180100]<0>(&v163, "x");
  uint64_t v12 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v157, v11, (uint64_t)&v163, v12, a2);
  if (v165 < 0) {
    operator delete(v163);
  }
  if (v158) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v158);
  }
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x21667B360](a2);
    uint64_t v13 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
    ANEMachineIR::Utils::GetStaticTensorShape(v13, v14, (uint64_t)&v163);
    uint64_t v16 = v163;
    long long v15 = v164;
    std::string::basic_string[abi:ne180100]<0>(&v152, "perm");
    uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue();
    MIL::IRValue::AsTensor(ParameterValue);
    uint64_t Data = MIL::IRTensorValue::GetDataView<int>();
    unint64_t v156 = v18;
    if (SHIBYTE(v154) < 0)
    {
      operator delete(v152);
      unint64_t v18 = v156;
    }
    unint64_t v152 = 0;
    uint64_t v153 = 0;
    v154 = 0;
    if (v18)
    {
      unint64_t v19 = 0;
      do
      {
        char v20 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v19);
        uint64_t v21 = v20;
        uint64_t v22 = v153;
        if (v153 >= v154)
        {
          char v24 = v152;
          uint64_t v25 = (v153 - v152) >> 2;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v27 = v154 - v152;
          if ((v154 - v152) >> 1 > v26) {
            unint64_t v26 = v27 >> 1;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v154, v28);
            char v24 = v152;
            uint64_t v22 = v153;
          }
          else
          {
            int v29 = 0;
          }
          uint64_t v30 = &v29[4 * v25];
          *(_DWORD *)uint64_t v30 = *v21;
          char v23 = v30 + 4;
          while (v22 != v24)
          {
            int v31 = *((_DWORD *)v22 - 1);
            v22 -= 4;
            *((_DWORD *)v30 - 1) = v31;
            v30 -= 4;
          }
          unint64_t v152 = v30;
          uint64_t v153 = v23;
          v154 = &v29[4 * v28];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v153 = *v20;
          char v23 = v22 + 4;
        }
        uint64_t v153 = v23;
        ++v19;
      }
      while (v156 > v19);
      long long v32 = v152;
    }
    else
    {
      long long v32 = 0;
      char v23 = 0;
    }
    if ((v23 - v32) >> 2 == (v164 - (unsigned char *)v163) >> 3)
    {
      ANEMachineIR::Utils::InferPositiveAxes((uint64_t)&v152, &v147);
      memset(&v146, 0, sizeof(v146));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v146, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_, (uint64_t)(v147.__r_.__value_.__l.__size_ - v147.__r_.__value_.__r.__words[0]) >> 2);
      std::__sort<std::__less<int,int> &,int *>();
      if (v146.__r_.__value_.__l.__size_ == v146.__r_.__value_.__r.__words[0])
      {
LABEL_54:
        long long v39 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        std::string::size_type v40 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v39);
        ANEMachineIR::Utils::GetStaticTensorShape(v40, v41, (uint64_t)&v145);
        unint64_t v42 = (v164 - (unsigned char *)v163) >> 3;
        if (v42 != (uint64_t)(v147.__r_.__value_.__l.__size_ - v147.__r_.__value_.__r.__words[0]) >> 2) {
          __assert_rtn("InferTransposeOutputShape", "ShapeValidators.cpp", 97, "input_shape.size() == perm_positive.size()");
        }
        memset(&v144, 0, sizeof(v144));
        std::vector<unsigned long long>::resize((uint64_t)&v144, v42);
        long long v43 = (int *)v147.__r_.__value_.__r.__words[0];
        if (v147.__r_.__value_.__l.__size_ != v147.__r_.__value_.__r.__words[0])
        {
          unint64_t v44 = (uint64_t)(v147.__r_.__value_.__l.__size_ - v147.__r_.__value_.__r.__words[0]) >> 2;
          uint64_t v45 = v163;
          unint64_t v46 = (v164 - (unsigned char *)v163) >> 3;
          long long v47 = (void *)v144.__r_.__value_.__r.__words[0];
          if (v44 <= 1) {
            unint64_t v44 = 1;
          }
          do
          {
            unint64_t v49 = *v43++;
            unint64_t v48 = v49;
            if (v46 <= v49) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            *v47++ = v45[v48];
            --v44;
          }
          while (v44);
        }
        if (v144.__r_.__value_.__l.__size_ - v144.__r_.__value_.__r.__words[0] == v145.__r_.__value_.__l.__size_
                                                                                 - v145.__r_.__value_.__r.__words[0])
        {
          if (!memcmp(v144.__r_.__value_.__l.__data_, v145.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_ - v144.__r_.__value_.__r.__words[0]))
          {
            float v114 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
            uint64_t v115 = (std::__shared_weak_count *)v114[1];
            uint64_t v121 = *v114;
            float v122 = v115;
            if (v115) {
              atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned int v116 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            uint64_t v117 = MIL::IRValueType::AsTensorType(v116);
            (*(void (**)(std::string *__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v143, a1);
            uint64_t v118 = v143.__r_.__value_.__r.__words[0];
            uint64_t v119 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
            ANEMachineIR::Validators::ValidateLiveTensorSize(&v121, v117, v118, v119, a2);
            v142.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
            if (v122) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v122);
            }
            if (MIL::ValidationResult::IsGood(a2))
            {
              unint64_t v120 = (MIL::ValidationResult *)MEMORY[0x21667B360](a2);
              MIL::ValidationResult::ValidationResult(v120);
            }
          }
          else
          {
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v145);
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v144);
            uint64_t v50 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
            uint64_t v51 = (std::__shared_weak_count *)v50[1];
            uint64_t v125 = *v50;
            __int16 v126 = v51;
            if (v51) {
              atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::operator+<char>();
            int v52 = std::string::append(&v135, " does not match inferred shape ");
            long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
            v140.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v53;
            v52->__r_.__value_.__l.__size_ = 0;
            v52->__r_.__value_.__r.__words[2] = 0;
            v52->__r_.__value_.__r.__words[0] = 0;
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v54 = &v142;
            }
            else {
              long long v54 = (std::string *)v142.__r_.__value_.__r.__words[0];
            }
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v142.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v142.__r_.__value_.__l.__size_;
            }
            uint64_t v56 = std::string::append(&v140, (const std::string::value_type *)v54, size);
            long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            v141.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v57;
            v56->__r_.__value_.__l.__size_ = 0;
            v56->__r_.__value_.__r.__words[2] = 0;
            v56->__r_.__value_.__r.__words[0] = 0;
            std::string v58 = std::string::append(&v141, ".");
            long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
            std::string::size_type v124 = v58->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v59;
            v58->__r_.__value_.__l.__size_ = 0;
            v58->__r_.__value_.__r.__words[2] = 0;
            v58->__r_.__value_.__r.__words[0] = 0;
            MEMORY[0x21667B340](a2, &v125, 313, __p);
            if (SHIBYTE(v124) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v141.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v140.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v135.__r_.__value_.__l.__data_);
            }
            if (v126) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v126);
            }
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v142.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v143.__r_.__value_.__l.__data_);
            }
          }
        }
        else
        {
          char v78 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
          uint64_t v79 = (std::__shared_weak_count *)v78[1];
          uint64_t v129 = *v78;
          std::string::size_type v130 = v79;
          if (v79) {
            atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::to_string(&v140, (uint64_t)(v145.__r_.__value_.__l.__size_ - v145.__r_.__value_.__r.__words[0]) >> 3);
          long double v80 = std::string::insert(&v140, 0, "Output rank ");
          long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          v141.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v81;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          uint64_t v82 = std::string::append(&v141, " does not match rank of inferred shape ");
          long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v142.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v83;
          v82->__r_.__value_.__l.__size_ = 0;
          v82->__r_.__value_.__r.__words[2] = 0;
          v82->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v135, (uint64_t)(v144.__r_.__value_.__l.__size_ - v144.__r_.__value_.__r.__words[0]) >> 3);
          if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v84 = &v135;
          }
          else {
            int v84 = (std::string *)v135.__r_.__value_.__r.__words[0];
          }
          if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v85 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v85 = v135.__r_.__value_.__l.__size_;
          }
          std::string::size_type v86 = std::string::append(&v142, (const std::string::value_type *)v84, v85);
          long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
          v143.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v87;
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          long long v88 = std::string::append(&v143, ".");
          long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          std::string::size_type v128 = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v127 = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x21667B340](a2, &v129, 313, v127);
          if (SHIBYTE(v128) < 0) {
            operator delete(v127[0]);
          }
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v135.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v142.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v141.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v140.__r_.__value_.__l.__data_);
          }
          if (v130) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v130);
          }
        }
        if (v144.__r_.__value_.__r.__words[0])
        {
          v144.__r_.__value_.__l.__size_ = v144.__r_.__value_.__r.__words[0];
          operator delete(v144.__r_.__value_.__l.__data_);
        }
        if (v145.__r_.__value_.__r.__words[0])
        {
          v145.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
          operator delete(v145.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        uint64_t v37 = 0;
        unint64_t v38 = (uint64_t)(v146.__r_.__value_.__l.__size_ - v146.__r_.__value_.__r.__words[0]) >> 2;
        if (v38 <= 1) {
          unint64_t v38 = 1;
        }
        while (v37 == *(_DWORD *)(v146.__r_.__value_.__r.__words[0] + 4 * v37))
        {
          if (v38 == ++v37) {
            goto LABEL_54;
          }
        }
        long long v90 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
        uint64_t v91 = (std::__shared_weak_count *)v90[1];
        uint64_t v138 = *v90;
        uint64_t v139 = v91;
        if (v91) {
          atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v134, "perm");
        std::string v92 = std::string::insert(&v134, 0, "Values of '");
        long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
        v135.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v93;
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        std::string v94 = std::string::append(&v135, "' ");
        long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
        v140.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v95;
        v94->__r_.__value_.__l.__size_ = 0;
        v94->__r_.__value_.__r.__words[2] = 0;
        v94->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v133, (v153 - v152) >> 2);
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v96 = &v133;
        }
        else {
          std::string v96 = (std::string *)v133.__r_.__value_.__r.__words[0];
        }
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v97 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v97 = v133.__r_.__value_.__l.__size_;
        }
        std::string v98 = std::string::append(&v140, (const std::string::value_type *)v96, v97);
        long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        v141.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v99;
        v98->__r_.__value_.__l.__size_ = 0;
        v98->__r_.__value_.__r.__words[2] = 0;
        v98->__r_.__value_.__r.__words[0] = 0;
        long long v100 = std::string::append(&v141, " must be in range [-");
        long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
        v142.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v101;
        v100->__r_.__value_.__l.__size_ = 0;
        v100->__r_.__value_.__r.__words[2] = 0;
        v100->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v132, (v15 - v16) >> 3);
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v102 = &v132;
        }
        else {
          std::string::size_type v102 = (std::string *)v132.__r_.__value_.__r.__words[0];
        }
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v103 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v103 = v132.__r_.__value_.__l.__size_;
        }
        uint64_t v104 = std::string::append(&v142, (const std::string::value_type *)v102, v103);
        long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
        v143.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v105;
        v104->__r_.__value_.__l.__size_ = 0;
        v104->__r_.__value_.__r.__words[2] = 0;
        v104->__r_.__value_.__r.__words[0] = 0;
        float v106 = std::string::append(&v143, ", ");
        long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
        v144.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v107;
        v106->__r_.__value_.__l.__size_ = 0;
        v106->__r_.__value_.__r.__words[2] = 0;
        v106->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v131, (v15 - v16) >> 3);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v108 = &v131;
        }
        else {
          float v108 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v109 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v109 = v131.__r_.__value_.__l.__size_;
        }
        uint64_t v110 = std::string::append(&v144, (const std::string::value_type *)v108, v109);
        long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        v145.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        unint64_t v112 = std::string::append(&v145, ")");
        long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
        std::string::size_type v137 = v112->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string v136 = v113;
        v112->__r_.__value_.__l.__size_ = 0;
        v112->__r_.__value_.__r.__words[2] = 0;
        v112->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x21667B340](a2, &v138, 315, v136);
        if (SHIBYTE(v137) < 0) {
          operator delete(v136[0]);
        }
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v145.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v144.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v143.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v132.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v142.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v141.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v133.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v140.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v135.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        if (v139) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v139);
        }
      }
      if (v146.__r_.__value_.__r.__words[0])
      {
        v146.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
        operator delete(v146.__r_.__value_.__l.__data_);
      }
      if (v147.__r_.__value_.__r.__words[0])
      {
        v147.__r_.__value_.__l.__size_ = v147.__r_.__value_.__r.__words[0];
        operator delete(v147.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v60 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      uint64_t v61 = (std::__shared_weak_count *)v60[1];
      uint64_t v150 = *v60;
      std::string v151 = v61;
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v142, "perm");
      std::string::size_type v62 = std::string::insert(&v142, 0, "Size of '");
      long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v143.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      uint64_t v64 = std::string::append(&v143, "' ");
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v141, (v153 - v152) >> 2);
      if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v66 = &v141;
      }
      else {
        uint64_t v66 = (std::string *)v141.__r_.__value_.__r.__words[0];
      }
      if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v67 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v67 = v141.__r_.__value_.__l.__size_;
      }
      uint64_t v68 = std::string::append(&v144, (const std::string::value_type *)v66, v67);
      long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v145.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      std::string v70 = std::string::append(&v145, " does not match rank of x ");
      long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v140, (v15 - v16) >> 3);
      if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v72 = &v140;
      }
      else {
        uint64_t v72 = (std::string *)v140.__r_.__value_.__r.__words[0];
      }
      if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v73 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v73 = v140.__r_.__value_.__l.__size_;
      }
      char v74 = std::string::append(&v146, (const std::string::value_type *)v72, v73);
      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v147.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      uint64_t v76 = std::string::append(&v147, ".");
      long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      std::string::size_type v149 = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)unint64_t v148 = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x21667B340](a2, &v150, 315, v148);
      if (SHIBYTE(v149) < 0) {
        operator delete(v148[0]);
      }
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v147.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v140.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v146.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v145.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v141.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v144.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v143.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v142.__r_.__value_.__l.__data_);
      }
      if (v151) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v151);
      }
    }
    if (v152)
    {
      uint64_t v153 = v152;
      operator delete(v152);
    }
    if (v163)
    {
      uint64_t v164 = v163;
      operator delete(v163);
    }
  }
}

void std::vector<unsigned long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned long long>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      char v14 = 0;
    }
    long long v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    int v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t ANEMachineIR::H2020::Validators::ValidateNeConv@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateNeConv(this, a2);
}

void ANEMachineIR::H2020::BaseNeMatmul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C2B4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a20, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a30, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeBatchMatmul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C2D564(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 128));
  unint64_t v3 = STACK[0x3D0];
  STACK[0x3D0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x3C8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3C8]);
  }
  uint64_t v4 = (void *)STACK[0x3A8];
  if (STACK[0x3A8])
  {
    STACK[0x3B0] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x400];
  if (STACK[0x400])
  {
    STACK[0x408] = (unint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)STACK[0x418];
  if (STACK[0x418])
  {
    STACK[0x420] = (unint64_t)v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3D8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 224), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeMatmul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210C2FA48(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 144));
  unint64_t v3 = STACK[0x308];
  STACK[0x308] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x300]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x300]);
  }
  uint64_t v4 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x348];
  if (STACK[0x348])
  {
    STACK[0x350] = (unint64_t)v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x310], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 216), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateBasePeElementWiseBinary@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateBasePeElementWiseUnary@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateNeActivation@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

void ANEMachineIR::H2022::Validators::ValidateNeAdd(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidateNeMaximum(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

uint64_t ANEMachineIR::H2022::Validators::ValidateNeMinimum@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateNeMul@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateNeSquare@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

void ANEMachineIR::H2022::Validators::ValidatePeAbs(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeSquare(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeAdd(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeAddAbs(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeAddMul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeAddSquare(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeMaximum(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeMinimum(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeMul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeNotEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeLess(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeLessEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeGreater(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeGreaterEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void MilTranslator::OpTranslator::TranslateActivation(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    v93.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v7;
  }
  {
    *(_DWORD *)a3 = 4;
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v75, "' not implemented");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)(a3 + 24) = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)(a3 + 8) = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_151;
    }
    uint64_t v11 = (void *)v75.__r_.__value_.__r.__words[0];
    goto LABEL_150;
  }
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
  if ((char)v8[63] < 0) {
    std::string::__init_copy_ctor_external(&v92, *((const std::string::value_type **)v8 + 5), *((void *)v8 + 6));
  }
  else {
    std::string v92 = *(std::string *)(v8 + 40);
  }
  std::string::basic_string[abi:ne180100]<0>(&v75, "x");
  uint64_t v12 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, void))(*(void *)a2 + 120))(a2, &v75, 0);
  uint64_t v13 = v12;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v75.__r_.__value_.__l.__data_);
    if (v13)
    {
LABEL_12:
      if (*(char *)(v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)v13, *(void *)(v13 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v13;
        v91.__r_.__value_.__r.__words[2] = *(void *)(v13 + 16);
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v14;
      }
      std::string::basic_string[abi:ne180100]<0>(&v75, "x");
      ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
      uint64_t v16 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, (uint64_t)&v91, v16, &v90);
      int v17 = (uint64_t *)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 176))(a2);
      uint64_t v18 = *v17;
      if (v17[1] == *v17) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v19 = *(MIL::IRNamedValueType **)v18;
      char v20 = *(std::__shared_weak_count **)(v18 + 8);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v19);
      uint64_t v22 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
      ANEMachineIR::Utils::GetStaticTensorShape(v22, v23, (uint64_t)&v88);
      char v24 = (void *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)v16 + 96))(v16);
      MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, (uint64_t)&v91, (uint64_t)(v24[1] - *v24) >> 3, (uint64_t)&__sz);
      MilTranslator::OpTranslator::GetTransposeOpParamPerm((v89 - (unsigned char *)v88) >> 3, (uint64_t)&__sz, &v84);
      MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)&v88, (unsigned int **)&v84, &v82);
      (*(void (**)(ANEMachineIR::Utils *))(*(void *)v22 + 88))(v22);
      uint64_t v25 = MIL::IRTensorValueType::Make();
      uint64_t Name = MIL::IRNamedValueType::GetName(v19);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)Name, *(void *)(Name + 8));
      }
      else
      {
        long long v27 = *(_OWORD *)Name;
        __str.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v27;
      }
      if (MilTranslator::OpTranslator::IsTransposeRequired(&v84))
      {
        std::string::append(&__str, "_channel_last");
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v78, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        }
        else {
          std::string v78 = __sz;
        }
        int v79 = v86;
        char v80 = v87;
        std::string::operator=(&v78, &__str);
        unint64_t v28 = (long long *)MIL::IRNamedValueType::GetName(v19);
        std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&v75, v28, (long long *)&v78);
        std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>((uint64_t)this + 296, (unsigned __int8 *)&v75, (long long *)&v75);
        if (v77 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v74, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v74 = __str;
      }
      MIL::IRNamedValueType::Make();
      v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
      if (v70) {
        operator new();
      }
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = 0uLL;
      std::string v70 = 0;
      memset(&v78, 0, sizeof(v78));
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      v75.__r_.__value_.__s.__data_[8] = 0;
      v78.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x10uLL);
      v78.__r_.__value_.__l.__size_ = v78.__r_.__value_.__r.__words[0];
      v78.__r_.__value_.__r.__words[2] = v78.__r_.__value_.__r.__words[0] + 16;
      v78.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType> const*,std::shared_ptr<MIL::IRNamedValueType> const*,std::shared_ptr<MIL::IRNamedValueType>*>((uint64_t)&v78.__r_.__value_.__r.__words[2], &v94, &v94.__r_.__value_.__r.__words[2], v78.__r_.__value_.__l.__data_);
      if (v94.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v94.__r_.__value_.__l.__size_);
      }
      std::string v70 = 0;
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      uint64_t v30 = (std::__shared_weak_count *)LocationPtr[1];
      uint64_t v72 = *LocationPtr;
      std::string::size_type v73 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v94, "ne_activation");
      ANEMachineIR::Validators::ValidateLiveTensorSize(&v72, v25, (uint64_t)&__str, (uint64_t)&v94, (MIL::ValidationResult *)&v75);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if (v73) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v73);
      }
      if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v75) & 1) == 0)
      {
        *(_DWORD *)a3 = 12;
        uint64_t Message = MIL::MILResult::GetMessage((MIL::MILResult *)&v75);
        if (*(char *)(Message + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(a3 + 8), *(const std::string::value_type **)Message, *(void *)(Message + 8));
        }
        else
        {
          long long v32 = *(_OWORD *)Message;
          *(void *)(a3 + 24) = *(void *)(Message + 16);
          *(_OWORD *)(a3 + 8) = v32;
        }
        MEMORY[0x21667B360](&v75);
LABEL_132:
        v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
        std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (v82)
        {
          long long v83 = v82;
          operator delete(v82);
        }
        if (v84.__begin_)
        {
          v84.__end_ = v84.__begin_;
          operator delete(v84.__begin_);
        }
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__sz.__r_.__value_.__l.__data_);
        }
        if (v88)
        {
          long long v89 = v88;
          operator delete(v88);
        }
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        goto LABEL_148;
      }
      MEMORY[0x21667B360](&v75);
      uint64_t v50 = v20;
      std::string::basic_string[abi:ne180100]<0>(&v68, "ne_activation");
      MilTranslator::OpTranslator::AddOperation((uint64_t)this);
      if (v69 < 0) {
        operator delete(v68);
      }
      std::string::basic_string[abi:ne180100]<0>(&v65, "x");
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v64, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
      }
      else {
        std::string v64 = v90;
      }
      MIL::Builder::OperationBuilder::AddInput();
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (v66 < 0) {
        operator delete(v65);
      }
      uint64_t v33 = MIL::IRNamedValueType::GetName(v19);
      uint64_t v34 = (char *)v33;
      if (*(char *)(v33 + 23) >= 0) {
        size_t v35 = *(unsigned __int8 *)(v33 + 23);
      }
      else {
        size_t v35 = *(void *)(v33 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v75, v35 + 1);
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &v75;
      }
      else {
        uint64_t v36 = (std::string *)v75.__r_.__value_.__r.__words[0];
      }
      if (v35)
      {
        if (v34[23] >= 0) {
          uint64_t v37 = v34;
        }
        else {
          uint64_t v37 = *(char **)v34;
        }
        memmove(v36, v37, v35);
      }
      *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v35) = 95;
      unint64_t v38 = std::string::append(&v75, "pre_activation");
      long long v39 = (std::string::value_type *)v38->__r_.__value_.__r.__words[0];
      std::string::size_type size = v38->__r_.__value_.__l.__size_;
      v63[0] = v38->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v63 + 3) = *(_DWORD *)((char *)&v38->__r_.__value_.__r.__words[2] + 3);
      int v41 = SHIBYTE(v38->__r_.__value_.__r.__words[2]);
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      uint64_t v42 = MIL::IRNamedValueType::GetName(v19);
      long long v43 = (char *)v42;
      if (*(char *)(v42 + 23) >= 0) {
        size_t v44 = *(unsigned __int8 *)(v42 + 23);
      }
      else {
        size_t v44 = *(void *)(v42 + 8);
      }
      uint64_t v45 = &v94;
      std::string::basic_string[abi:ne180100]((uint64_t)&v94, v44 + 1);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v45 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      if (v44)
      {
        if (v43[23] >= 0) {
          unint64_t v46 = v43;
        }
        else {
          unint64_t v46 = *(char **)v43;
        }
        memmove(v45, v46, v44);
      }
      *(_WORD *)((char *)&v45->__r_.__value_.__l.__data_ + v44) = 95;
      long long v47 = std::string::append(&v94, "post_activation");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      memset(&v94, 0, sizeof(v94));
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v94, v82, (uint64_t)v83, (v83 - (unsigned char *)v82) >> 3);
      MIL::IRTensorValueType::Make();
      if (v94.__r_.__value_.__r.__words[0])
      {
        v94.__r_.__value_.__l.__size_ = v94.__r_.__value_.__r.__words[0];
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      OpsetString = ANEMachineIR::GetOpsetString(**((_DWORD **)this + 12));
      std::string::basic_string[abi:ne180100]<0>(&v94, OpsetString);
      MIL::Builder::OperationBuilder::AddBlock();
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if (v41 < 0)
      {
        std::string::__init_copy_ctor_external(&v61, v39, size);
      }
      else
      {
        v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
        v61.__r_.__value_.__l.__size_ = size;
        LODWORD(v61.__r_.__value_.__r.__words[2]) = v63[0];
        *(_DWORD *)((char *)&v61.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v63 + 3);
        *((unsigned char *)&v61.__r_.__value_.__s + 23) = v41;
      }
      MIL::Builder::BlockBuilder::AddInput();
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      MIL::Builder::BlockBuilder::AddOperation();
      std::string::basic_string[abi:ne180100]<0>(&v56, "x");
      if (v41 < 0)
      {
        std::string::__init_copy_ctor_external(&v55, v39, size);
      }
      else
      {
        v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
        v55.__r_.__value_.__l.__size_ = size;
        LODWORD(v55.__r_.__value_.__r.__words[2]) = v63[0];
        *(_DWORD *)((char *)&v55.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v63 + 3);
        *((unsigned char *)&v55.__r_.__value_.__s + 23) = v41;
      }
      MIL::Builder::OperationBuilder::AddInput();
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (v57 < 0) {
        operator delete(v56);
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v53, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
      }
      else {
        std::string v53 = v75;
      }
      MIL::Builder::OperationBuilder::AddOutput();
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      MIL::Builder::BlockBuilder::AddOutput();
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v51, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v51 = __str;
      }
      MIL::Builder::OperationBuilder::AddOutput();
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)a3 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
      if (v94.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v94.__r_.__value_.__l.__size_);
      }
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v75.__r_.__value_.__l.__data_);
        if ((v41 & 0x80000000) == 0) {
          goto LABEL_129;
        }
      }
      else if ((v41 & 0x80000000) == 0)
      {
LABEL_129:
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
        char v20 = v50;
        goto LABEL_132;
      }
      operator delete(v39);
      goto LABEL_129;
    }
  }
  else if (v12)
  {
    goto LABEL_12;
  }
  *(_DWORD *)a3 = 4;
  std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Immediate value inputs not handled.");
LABEL_148:
  if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_151;
  }
  uint64_t v11 = (void *)v92.__r_.__value_.__r.__words[0];
LABEL_150:
  operator delete(v11);
LABEL_151:
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
}

void sub_210C30F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  char v77 = *(std::__shared_weak_count **)(v75 - 120);
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (v74 < 0) {
    operator delete(v73);
  }
  if (a55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a55);
  }
  a62 = &a72;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a73);
  }
  std::string v78 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v78;
    operator delete(v78);
  }
  int v79 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v79;
    operator delete(v79);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  char v80 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v80;
    operator delete(v80);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (*(char *)(v75 - 225) < 0) {
    operator delete(*(void **)(v75 - 248));
  }
  if (*(char *)(v75 - 201) < 0) {
    operator delete(*(void **)(v75 - 224));
  }
  if (*(char *)(v75 - 169) < 0) {
    operator delete(*(void **)(v75 - 192));
  }
  if (*(char *)(v75 - 137) < 0) {
    operator delete(*(void **)(v75 - 160));
  }
  _Unwind_Resume(a1);
}

void sub_210C3130C()
{
}

void sub_210C31324()
{
}

void sub_210C3132C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    JUMPOUT(0x210C312D0);
  }
  JUMPOUT(0x210C312D4);
}

void sub_210C31340()
{
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_210C31384(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_210C313D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType> const*,std::shared_ptr<MIL::IRNamedValueType> const*,std::shared_ptr<MIL::IRNamedValueType>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  long long v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    long long v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t _GLOBAL__sub_I_TranslateActivation_cpp()
{
  void v4[6] = *MEMORY[0x263EF8340];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v3, "relu", "relu");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v4, "sigmoid", "sigmoid");
  for (uint64_t i = 0; i != -12; i -= 6)
  {
    uint64_t v1 = &v3[i * 8];
    if (SHIBYTE(v4[i + 5]) < 0) {
      operator delete(*((void **)v1 + 9));
    }
    if ((char)v1[71] < 0) {
      operator delete(*((void **)v1 + 6));
    }
  }
}

void sub_210C315B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void _GLOBAL__sub_I_TranslateActivation_cpp_cold_1(uint64_t a1, uint64_t a2)
{
  do
  {
    if (*(char *)(a1 - 1) < 0) {
      operator delete(*(void **)(a1 - 24));
    }
    if (*(char *)(a1 - 25) < 0) {
      operator delete(*(void **)(a1 - 48));
    }
    a1 -= 48;
  }
  while (a1 != a2);
}

void **MilTranslator::Passes::PassManager::Register(uint64_t a1, uint64_t *a2)
{
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t result = (void **)(a1 + 24);
  unint64_t v5 = v6;
  long long v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    long long v10 = (uint64_t *)(result - 2);
    uint64_t v11 = (uint64_t)*(result - 2);
    uint64_t v12 = ((uint64_t)v7 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v5 - v11;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    v19[4] = result;
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)result, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = &v16[8 * v12];
    v19[0] = v16;
    v19[1] = v17;
    v19[3] = &v16[8 * v15];
    uint64_t v18 = *a2;
    *a2 = 0;
    *(void *)int v17 = v18;
    v19[2] = v17 + 8;
    std::vector<std::unique_ptr<MilTranslator::Passes::Pass>>::__swap_out_circular_buffer(v10, v19);
    uint64_t v9 = *(void **)(a1 + 16);
    uint64_t result = std::__split_buffer<std::unique_ptr<MilTranslator::Passes::Pass>>::~__split_buffer(v19);
  }
  else
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    *long long v7 = v8;
    uint64_t v9 = v7 + 1;
    *(void *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 16) = v9;
  return result;
}

void sub_210C31740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<MilTranslator::Passes::Pass>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MilTranslator::Passes::PassManager::Run@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  memset(v31, 0, sizeof(v31));
  int v32 = 1065353216;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  unint64_t v5 = *(uint64_t **)(a1 + 16);
  if (v4 == v5)
  {
LABEL_19:
    *(_DWORD *)a3 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
  }
  else
  {
    long long v7 = (void **)(a3 + 8);
    while (1)
    {
      std::unordered_set<std::string>::unordered_set((uint64_t)&v30, *v4 + 32);
      uint64_t v8 = (unsigned __int8 *)v30.__r_.__value_.__r.__words[2];
      if (v30.__r_.__value_.__r.__words[2]) {
        break;
      }
LABEL_6:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v30);
      uint64_t v9 = *v4;
      long long v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v24 = *a2;
      uint64_t v25 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 16))(v9, &v24);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (*(_DWORD *)a3) {
        return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v31);
      }
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v7);
      }
      uint64_t v11 = *v4;
      if (*(char *)(*v4 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v11 + 8), *(void *)(v11 + 16));
      }
      else
      {
        long long v12 = *(_OWORD *)(v11 + 8);
        v30.__r_.__value_.__r.__words[2] = *(void *)(v11 + 24);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v12;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v31, (unsigned __int8 *)&v30, (uint64_t)&v30);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (++v4 == v5) {
        goto LABEL_19;
      }
    }
    while (std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>(v31, v8 + 16))
    {
      uint64_t v8 = *(unsigned __int8 **)v8;
      if (!v8) {
        goto LABEL_6;
      }
    }
    *(_DWORD *)a3 = 15;
    std::operator+<char>();
    uint64_t v13 = std::string::append(&v27, "' needs to be run before '");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    uint64_t v15 = *v4;
    if (*(char *)(*v4 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v15 + 8), *(void *)(v15 + 16));
    }
    else
    {
      long long v16 = *(_OWORD *)(v15 + 8);
      v26.__r_.__value_.__r.__words[2] = *(void *)(v15 + 24);
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v16;
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v17 = &v26;
    }
    else {
      int v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    unint64_t v19 = std::string::append(&v28, (const std::string::value_type *)v17, size);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v29, "'");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    *(void *)(a3 + 24) = *((void *)&v21->__r_.__value_.__l + 2);
    *(_OWORD *)long long v7 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v30);
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v31);
}

void sub_210C319FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a37);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v42 - 128);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<MilTranslator::Passes::Pass>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<MilTranslator::Passes::Pass>>,std::reverse_iterator<std::unique_ptr<MilTranslator::Passes::Pass>*>,std::reverse_iterator<std::unique_ptr<MilTranslator::Passes::Pass>*>,std::reverse_iterator<std::unique_ptr<MilTranslator::Passes::Pass>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<MilTranslator::Passes::Pass>>,std::reverse_iterator<std::unique_ptr<MilTranslator::Passes::Pass>*>,std::reverse_iterator<std::unique_ptr<MilTranslator::Passes::Pass>*>,std::reverse_iterator<std::unique_ptr<MilTranslator::Passes::Pass>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<MilTranslator::Passes::Pass>>,std::reverse_iterator<std::unique_ptr<MilTranslator::Passes::Pass>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<MilTranslator::Passes::Pass>>,std::reverse_iterator<std::unique_ptr<MilTranslator::Passes::Pass>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<MilTranslator::Passes::Pass>>,std::reverse_iterator<std::unique_ptr<MilTranslator::Passes::Pass>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<MilTranslator::Passes::Pass>>,std::reverse_iterator<std::unique_ptr<MilTranslator::Passes::Pass>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  unint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    unsigned __int8 *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<MilTranslator::Passes::Pass>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<MilTranslator::Passes::Pass>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    *uint64_t v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v16;
  *long long v16 = i;
  *(void *)(v23 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_210C31F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::Utils::ShapeString(uint64_t *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    char v4 = 91;
    do
    {
      char v9 = v4;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
      std::ostream::operator<<();
      v2 += 8;
      char v4 = 44;
    }
    while (v2 != v3);
  }
  char v9 = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v6[1] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21667BB30](&v8);
}

void sub_210C3211C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ANEMachineIR::Utils::BroadcastShapes(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  a4[1] = *a4;
  long long v105 = 0;
  float v106 = 0;
  uint64_t v107 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v105, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  std::string::size_type v102 = 0;
  std::string::size_type v103 = 0;
  uint64_t v104 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v102, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  unint64_t v10 = v105;
  char v9 = v106;
  unint64_t v11 = (v106 - (unsigned char *)v105) >> 3;
  if (v106 == (unsigned char *)v105)
  {
LABEL_7:
    unint64_t v14 = (v103 - (unsigned char *)v102) >> 3;
    if (v103 != (unsigned char *)v102)
    {
      unint64_t v15 = 0;
      if (v14 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = (v103 - (unsigned char *)v102) >> 3;
      }
      while (v102[v15])
      {
        if (v16 == ++v15) {
          goto LABEL_13;
        }
      }
      char v57 = (std::__shared_weak_count *)a1[1];
      uint64_t v92 = *a1;
      std::string v93 = v57;
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::to_string(&v95, v15);
      std::string v58 = std::string::insert(&v95, 0, "Zero detected for 'y' at dimension ");
      long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v96.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      uint64_t v60 = std::string::append(&v96, " in shape ");
      long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v97.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      ANEMachineIR::Utils::ShapeString((uint64_t *)&v102);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string v64 = std::string::append(&v97, (const std::string::value_type *)p_p, size);
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      std::string::size_type v91 = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string v90 = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x21667B340](a5, &v92, 319, v90);
      if (SHIBYTE(v91) < 0) {
        operator delete(v90[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      uint64_t v56 = v93;
      if (v93) {
        goto LABEL_92;
      }
      goto LABEL_93;
    }
LABEL_13:
    if (v14 > v11)
    {
      v96.__r_.__value_.__r.__words[0] = 1;
      std::vector<unsigned long long>::vector(&v97, v14 - v11, &v96);
      std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long *>,std::__wrap_iter<unsigned long long *>>((uint64_t)&v105, (uint64_t)v105, v97.__r_.__value_.__l.__data_, (char *)v97.__r_.__value_.__l.__size_, (uint64_t)(v97.__r_.__value_.__l.__size_ - v97.__r_.__value_.__r.__words[0]) >> 3);
      if (v97.__r_.__value_.__r.__words[0])
      {
        v97.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      unint64_t v10 = v105;
      char v9 = v106;
      unint64_t v14 = (v103 - (unsigned char *)v102) >> 3;
      unint64_t v11 = (v106 - (unsigned char *)v105) >> 3;
    }
    if (v11 > v14)
    {
      v96.__r_.__value_.__r.__words[0] = 1;
      std::vector<unsigned long long>::vector(&v97, v11 - v14, &v96);
      std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long *>,std::__wrap_iter<unsigned long long *>>((uint64_t)&v102, (uint64_t)v102, v97.__r_.__value_.__l.__data_, (char *)v97.__r_.__value_.__l.__size_, (uint64_t)(v97.__r_.__value_.__l.__size_ - v97.__r_.__value_.__r.__words[0]) >> 3);
      if (v97.__r_.__value_.__r.__words[0])
      {
        v97.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      unint64_t v10 = v105;
      char v9 = v106;
    }
    if (v9 == v10)
    {
LABEL_72:
      MIL::ValidationResult::ValidationResult(a5);
      goto LABEL_93;
    }
    unint64_t v17 = 0;
    while (1)
    {
      uint64_t v18 = v10[v17];
      BOOL v19 = v102;
      if (v18 == 1)
      {
        unint64_t v21 = a4[1];
        unint64_t v20 = (unint64_t)a4[2];
        if ((unint64_t)v21 >= v20)
        {
          std::string v26 = *a4;
          uint64_t v32 = (v21 - *a4) >> 3;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61) {
            goto LABEL_150;
          }
          uint64_t v34 = v20 - (void)v26;
          if (v34 >> 2 > v33) {
            unint64_t v33 = v34 >> 2;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35)
          {
            uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v35);
            std::string v26 = *a4;
            unint64_t v21 = a4[1];
          }
          else
          {
            uint64_t v36 = 0;
          }
          int v41 = &v36[8 * v32];
          *(void *)int v41 = v19[v17];
          size_t v22 = v41 + 8;
          while (v21 != v26)
          {
            uint64_t v42 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v41 - 1) = v42;
            v41 -= 8;
          }
          long long v43 = &v36[8 * v35];
          *a4 = v41;
          goto LABEL_69;
        }
        *(void *)unint64_t v21 = v102[v17];
        size_t v22 = v21 + 8;
      }
      else
      {
        uint64_t v23 = v102[v17];
        if (v23 == 1)
        {
          unint64_t v25 = a4[1];
          unint64_t v24 = (unint64_t)a4[2];
          if ((unint64_t)v25 >= v24)
          {
            std::string v26 = *a4;
            uint64_t v27 = (v25 - *a4) >> 3;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61) {
              goto LABEL_150;
            }
            uint64_t v29 = v24 - (void)v26;
            if (v29 >> 2 > v28) {
              unint64_t v28 = v29 >> 2;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30)
            {
              int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v30);
              std::string v26 = *a4;
              unint64_t v25 = a4[1];
              uint64_t v18 = v10[v17];
            }
            else
            {
              int v31 = 0;
            }
            size_t v44 = &v31[8 * v27];
            *(void *)size_t v44 = v18;
            size_t v22 = v44 + 8;
            while (v25 != v26)
            {
              uint64_t v45 = *((void *)v25 - 1);
              v25 -= 8;
              *((void *)v44 - 1) = v45;
              v44 -= 8;
            }
            goto LABEL_68;
          }
        }
        else
        {
          if (v18 != v23)
          {
            char v66 = (std::__shared_weak_count *)a1[1];
            uint64_t v88 = *a1;
            long long v89 = v66;
            if (v66) {
              atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::to_string(&v85, v17);
            std::string::size_type v67 = std::string::insert(&v85, 0, "Incompatible at dimension ");
            long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            char v69 = std::string::append(&__p, " in shapes ");
            long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
            v95.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v70;
            v69->__r_.__value_.__l.__size_ = 0;
            v69->__r_.__value_.__r.__words[2] = 0;
            v69->__r_.__value_.__r.__words[0] = 0;
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v105);
            if ((v84 & 0x80u) == 0) {
              long long v71 = v83;
            }
            else {
              long long v71 = (void **)v83[0];
            }
            if ((v84 & 0x80u) == 0) {
              std::string::size_type v72 = v84;
            }
            else {
              std::string::size_type v72 = (std::string::size_type)v83[1];
            }
            std::string::size_type v73 = std::string::append(&v95, (const std::string::value_type *)v71, v72);
            long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
            v96.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v74;
            v73->__r_.__value_.__l.__size_ = 0;
            v73->__r_.__value_.__r.__words[2] = 0;
            v73->__r_.__value_.__r.__words[0] = 0;
            uint64_t v75 = std::string::append(&v96, " vs. ");
            long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
            v97.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v76;
            v75->__r_.__value_.__l.__size_ = 0;
            v75->__r_.__value_.__r.__words[2] = 0;
            v75->__r_.__value_.__r.__words[0] = 0;
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v102);
            if ((v82 & 0x80u) == 0) {
              char v77 = v81;
            }
            else {
              char v77 = (void **)v81[0];
            }
            if ((v82 & 0x80u) == 0) {
              std::string::size_type v78 = v82;
            }
            else {
              std::string::size_type v78 = (std::string::size_type)v81[1];
            }
            int v79 = std::string::append(&v97, (const std::string::value_type *)v77, v78);
            long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            std::string::size_type v87 = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)int v86 = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            MEMORY[0x21667B340](a5, &v88, 319, v86);
            if (SHIBYTE(v87) < 0) {
              operator delete(v86[0]);
            }
            if ((char)v82 < 0) {
              operator delete(v81[0]);
            }
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v97.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v96.__r_.__value_.__l.__data_);
            }
            if ((char)v84 < 0) {
              operator delete(v83[0]);
            }
            if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v95.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v85.__r_.__value_.__l.__data_);
            }
            uint64_t v56 = v89;
            if (!v89) {
              goto LABEL_93;
            }
LABEL_92:
            std::__shared_weak_count::__release_shared[abi:ne180100](v56);
            goto LABEL_93;
          }
          unint64_t v25 = a4[1];
          unint64_t v37 = (unint64_t)a4[2];
          if ((unint64_t)v25 >= v37)
          {
            std::string v26 = *a4;
            uint64_t v38 = (v25 - *a4) >> 3;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 61) {
LABEL_150:
            }
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            uint64_t v40 = v37 - (void)v26;
            if (v40 >> 2 > v39) {
              unint64_t v39 = v40 >> 2;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v39;
            }
            if (v30)
            {
              int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v30);
              std::string v26 = *a4;
              unint64_t v25 = a4[1];
              uint64_t v18 = v10[v17];
            }
            else
            {
              int v31 = 0;
            }
            size_t v44 = &v31[8 * v38];
            *(void *)size_t v44 = v18;
            size_t v22 = v44 + 8;
            while (v25 != v26)
            {
              uint64_t v46 = *((void *)v25 - 1);
              v25 -= 8;
              *((void *)v44 - 1) = v46;
              v44 -= 8;
            }
LABEL_68:
            long long v43 = &v31[8 * v30];
            *a4 = v44;
LABEL_69:
            a4[1] = v22;
            a4[2] = v43;
            if (v26) {
              operator delete(v26);
            }
            goto LABEL_71;
          }
        }
        *(void *)unint64_t v25 = v18;
        size_t v22 = v25 + 8;
      }
LABEL_71:
      a4[1] = v22;
      ++v17;
      unint64_t v10 = v105;
      if (v17 >= (v106 - (unsigned char *)v105) >> 3) {
        goto LABEL_72;
      }
    }
  }
  unint64_t v12 = 0;
  if (v11 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = (v106 - (unsigned char *)v105) >> 3;
  }
  while (v105[v12])
  {
    if (v13 == ++v12) {
      goto LABEL_7;
    }
  }
  long long v47 = (std::__shared_weak_count *)a1[1];
  uint64_t v100 = *a1;
  long long v101 = v47;
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::to_string(&v95, v12);
  long long v48 = std::string::insert(&v95, 0, "Zero detected for 'x' at dimension ");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  uint64_t v50 = std::string::append(&v96, " in shape ");
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v97.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  ANEMachineIR::Utils::ShapeString((uint64_t *)&v105);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v52 = &__p;
  }
  else {
    int v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
  }
  long long v54 = std::string::append(&v97, (const std::string::value_type *)v52, v53);
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  std::string::size_type v99 = v54->__r_.__value_.__r.__words[2];
  long long v98 = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](a5, &v100, 319, &v98);
  if (SHIBYTE(v99) < 0) {
    operator delete((void *)v98);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  uint64_t v56 = v101;
  if (v101) {
    goto LABEL_92;
  }
LABEL_93:
  if (v102)
  {
    std::string::size_type v103 = v102;
    operator delete(v102);
  }
  if (v105)
  {
    float v106 = v105;
    operator delete(v105);
  }
}

void sub_210C32938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v62 - 201) < 0) {
    operator delete(*(void **)(v62 - 224));
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  std::string v64 = *(void **)(v62 - 144);
  if (v64)
  {
    *(void *)(v62 - 136) = v64;
    operator delete(v64);
  }
  long long v65 = *(void **)(v62 - 120);
  if (v65)
  {
    *(void *)(v62 - 112) = v65;
    operator delete(v65);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::Utils::GetStaticTensorShape(ANEMachineIR::Utils *this@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = (MIL::IRDimension ***)(*(uint64_t (**)(ANEMachineIR::Utils *, const MIL::IRTensorValueType *))(*(void *)this + 96))(this, a2);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::vector<unsigned long long>::reserve((void **)a3, v4[1] - *v4);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      uint64_t v7 = MIL::IRDimension::AsConstant(*v5);
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
      uint64_t v9 = v8;
      unint64_t v11 = *(uint64_t **)(a3 + 8);
      unint64_t v10 = *(void *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = *(uint64_t **)a3;
        uint64_t v14 = ((uint64_t)v11 - *(void *)a3) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a3 + 16, v17);
          uint64_t v13 = *(uint64_t **)a3;
          unint64_t v11 = *(uint64_t **)(a3 + 8);
        }
        else
        {
          uint64_t v18 = 0;
        }
        BOOL v19 = (uint64_t *)&v18[8 * v14];
        *BOOL v19 = v9;
        unint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          uint64_t v20 = *--v11;
          *--BOOL v19 = v20;
        }
        *(void *)a3 = v19;
        *(void *)(a3 + 8) = v12;
        *(void *)(a3 + 16) = &v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        uint64_t *v11 = v8;
        unint64_t v12 = v11 + 1;
      }
      *(void *)(a3 + 8) = v12;
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_210C32CF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANEMachineIR::Utils::TryGetStaticTensorShape(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v3 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  std::vector<unsigned long long>::reserve((void **)a2, (v3[1] - *v3) >> 3);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 == v5) {
    return 1;
  }
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v4 + 16))();
    if (!result) {
      break;
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    uint64_t v8 = v7;
    unint64_t v10 = *(uint64_t **)(a2 + 8);
    unint64_t v9 = *(void *)(a2 + 16);
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = *(uint64_t **)a2;
      uint64_t v13 = ((uint64_t)v10 - *(void *)a2) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a2 + 16, v16);
        unint64_t v12 = *(uint64_t **)a2;
        unint64_t v10 = *(uint64_t **)(a2 + 8);
      }
      else
      {
        unint64_t v17 = 0;
      }
      uint64_t v18 = (uint64_t *)&v17[8 * v13];
      uint64_t *v18 = v8;
      unint64_t v11 = v18 + 1;
      while (v10 != v12)
      {
        uint64_t v19 = *--v10;
        *--uint64_t v18 = v19;
      }
      *(void *)a2 = v18;
      *(void *)(a2 + 8) = v11;
      *(void *)(a2 + 16) = &v17[8 * v16];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t *v10 = v7;
      unint64_t v11 = v10 + 1;
    }
    *(void *)(a2 + 8) = v11;
    v4 += 8;
    if (v4 == v5) {
      return 1;
    }
  }
  *(void *)(a2 + 8) = *(void *)a2;
  return result;
}

uint64_t ANEMachineIR::Utils::IsStaticTensorType(ANEMachineIR::Utils *this, const MIL::IRValueType *a2)
{
  uint64_t result = (*(uint64_t (**)(ANEMachineIR::Utils *, const MIL::IRValueType *))(*(void *)this + 24))(this, a2);
  if (result)
  {
    uint64_t v4 = MIL::IRValueType::AsTensorType(this);
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
    uint64_t v6 = v5[1];
    if (*v5 == v6)
    {
      return 1;
    }
    else
    {
      uint64_t v7 = *v5 + 8;
      do
      {
        uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(v7 - 8) + 16))(*(void *)(v7 - 8));
        BOOL v9 = v8 == 0;
        uint64_t result = v8 != 0;
        BOOL v9 = v9 || v7 == v6;
        v7 += 8;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(ANEMachineIR::Utils *this, const MIL::IRTensorValueType *a2)
{
  ANEMachineIR::Utils::GetStaticTensorShape(this, a2, (uint64_t)&v6);
  uint64_t v2 = 1;
  if (v6 != v7)
  {
    uint64_t v3 = v6;
    do
    {
      uint64_t v4 = *v3++;
      v2 *= v4;
    }
    while (v3 != v7);
  }
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  return v2;
}

uint64_t ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t result = 1;
  while (v1 != v2)
  {
    uint64_t v4 = *v1++;
    result *= v4;
  }
  return result;
}

void *ANEMachineIR::Utils::InferPositiveAxes@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)a1 == v4)
  {
LABEL_5:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a2, v3, v4, (v4 - (uint64_t)v3) >> 2);
  }
  else
  {
    uint64_t v6 = *(_DWORD **)a1;
    while ((*v6 & 0x80000000) == 0)
    {
      if (++v6 == (_DWORD *)v4) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = v4 - (void)v3;
    unint64_t v9 = (v4 - (uint64_t)v3) >> 2;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a2, v3, v4, v9);
    if (v8 << 30)
    {
      unint64_t v10 = (int)(v8 >> 2);
      unint64_t v11 = *(_DWORD **)a1;
      uint64_t v12 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
      uint64_t v13 = (_DWORD *)*a2;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      do
      {
        if (!v12) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        if ((*v11 & 0x80000000) != 0) {
          _DWORD *v13 = *v11 + v9;
        }
        --v12;
        ++v11;
        ++v13;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

void sub_210C33100(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_210C33184(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long *>,std::__wrap_iter<unsigned long long *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    unint64_t v28 = &v18[8 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    unint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)unint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    unint64_t v35 = v30;
    uint64_t v5 = std::vector<unsigned long long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    unint64_t v21 = &__src[8 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    unint64_t v24 = &v5[8 * a5];
    unint64_t v25 = &v23[-8 * a5];
    std::string v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      std::string v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)std::string v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  unint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_210C33378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t register_aneflow_opsets(ANEMachineIR::H2020::Opsets *a1, MIL::MILContext *a2)
{
  ANEMachineIR::H2020::Opsets::RegisterMilAneflowOpsets(a1, a2);
  ANEMachineIR::H2021::Opsets::RegisterMilAneflowOpsets(a1, v3);
  ANEMachineIR::H2022::Opsets::RegisterMilAneflowOpsets(a1, v4);
  return 1;
}

void make_milaneflow_context(MIL::MILContext *a1)
{
  MIL::MILContext::Make((uint64_t *)&v5, a1);
  uint64_t v1 = v5;
  ANEMachineIR::H2020::Opsets::RegisterMilAneflowOpsets(v5, v2);
  ANEMachineIR::H2021::Opsets::RegisterMilAneflowOpsets(v1, v3);
  ANEMachineIR::H2022::Opsets::RegisterMilAneflowOpsets(v1, v4);
  operator new();
}

void sub_210C3348C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x21667BBD0](v10, 0x20C40A4A59CD2);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t milaneflow_free_context(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(std::__shared_weak_count **)(result + 8);
    if (v1) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    }
    JUMPOUT(0x21667BBD0);
  }
  return result;
}

uint64_t milaneflow_error_message_size(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0) {
      return *(void *)(result + 8);
    }
    else {
      return *(unsigned __int8 *)(result + 23);
    }
  }
  return result;
}

uint64_t milaneflow_copy_error_message(uint64_t __src, char *__dst)
{
  if (__src)
  {
    uint64_t v2 = __src;
    if (*(char *)(__src + 23) < 0)
    {
      uint64_t v4 = *(const char **)__src;
      size_t v3 = *(void *)(__src + 8);
    }
    else
    {
      size_t v3 = *(unsigned __int8 *)(__src + 23);
      uint64_t v4 = (const char *)__src;
    }
    strncpy(__dst, v4, v3);
    if (*(char *)(v2 + 23) < 0) {
      return *(void *)(v2 + 8);
    }
    else {
      return *(unsigned __int8 *)(v2 + 23);
    }
  }
  return __src;
}

uint64_t milaneflow_location_message_size(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 47) < 0) {
      return *(void *)(result + 32);
    }
    else {
      return *(unsigned __int8 *)(result + 47);
    }
  }
  return result;
}

uint64_t milaneflow_copy_location_message(uint64_t result, char *__dst)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(char *)(result + 47) < 0)
    {
      size_t v3 = *(const char **)(result + 24);
      size_t v4 = *(void *)(result + 32);
    }
    else
    {
      size_t v3 = (const char *)(result + 24);
      size_t v4 = *(unsigned __int8 *)(result + 47);
    }
    strncpy(__dst, v3, v4);
    if (*(char *)(v2 + 47) < 0) {
      return *(void *)(v2 + 32);
    }
    else {
      return *(unsigned __int8 *)(v2 + 47);
    }
  }
  return result;
}

void milaneflow_free_execution_result(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x21667BBD0);
  }
}

uint64_t milaneflow_try_program_from_file(uint64_t *a1, char *a2, char *a3)
{
  uint64_t v8 = 0;
  size_t v3 = (std::__shared_weak_count *)a1[1];
  uint64_t v5 = *a1;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v7) {
    operator new();
  }
  return v8;
}

void sub_210C3377C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  MEMORY[0x21667BBD0](v13, 0x20C40A4A59CD2);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::ParseProgramShared(MIL::ParserOptions *a1, char *a2, int a3, char *a4, void *a5)
{
  MIL::ParserOptions::Make(&v22, a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 64))(v22, 1);
  if (a4)
  {
    uint64_t v10 = v22;
    std::string::basic_string[abi:ne180100]<0>(__p, a4);
    (*(void (**)(uint64_t, void **))(*(void *)v10 + 48))(v10, __p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  *a5 = 0;
  if (a3)
  {
    uint64_t v11 = v22;
    std::string::basic_string[abi:ne180100]<0>(v18, a2);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v11 + 32))(v11, v18, 1);
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    long long v17 = *(_OWORD *)a1;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    MIL::Text::ParseProgramFromFile();
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v17 + 1);
    if (!*((void *)&v17 + 1)) {
      goto LABEL_13;
    }
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    goto LABEL_13;
  }
  long long v16 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  MIL::Text::ParseProgram();
  if (v15 < 0) {
    operator delete(v14);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t result = v22;
  uint64_t v22 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_210C339C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  uint64_t v35 = *(void *)(v32 - 72);
  *(void *)(v32 - 72) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  if (a2 == 2)
  {
    __cxa_begin_catch(exception_object);
    operator new();
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    operator new();
  }
  _Unwind_Resume(exception_object);
}

uint64_t milaneflow_try_program_from_string(uint64_t *a1, char *a2, char *a3)
{
  uint64_t v8 = 0;
  size_t v3 = (std::__shared_weak_count *)a1[1];
  uint64_t v5 = *a1;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v7) {
    operator new();
  }
  return v8;
}

void sub_210C33D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  MEMORY[0x21667BBD0](v13, 0x20C40A4A59CD2);
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t milaneflow_free_program_handle(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    size_t v4 = *(std::__shared_weak_count **)(result + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t result = MEMORY[0x21667BBD0](v3, 0x20C40A4A59CD2);
  }
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x21667BBD0);
  }
  return result;
}

uint64_t milaneflow_free_function_handle(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = *(void *)(result + 64);
    if (v4)
    {
      uint64_t v5 = *(void *)(result + 72);
      uint64_t v6 = *(void **)(result + 64);
      if (v5 != v4)
      {
        do
        {
          v5 -= 88;
        }
        while (v5 != v4);
        uint64_t v6 = (void *)v3[8];
      }
      v3[9] = v4;
      operator delete(v6);
    }
    uint64_t v7 = v3[5];
    if (v7)
    {
      uint64_t v8 = v3[6];
      uint64_t v9 = (void *)v3[5];
      if (v8 != v7)
      {
        do
        {
          v8 -= 88;
        }
        while (v8 != v7);
        uint64_t v9 = (void *)v3[5];
      }
      v3[6] = v7;
      operator delete(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)v3[1];
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t result = MEMORY[0x21667BBD0](v3, 0x1060C4098404D11);
  }
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x21667BBD0);
  }
  return result;
}

void milaneflow_try_function(uint64_t *a1, int a2, char *__s, char *a4)
{
  uint64_t v5 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v5 + 56))(v5, __p);
  uint64_t v7 = v6;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(__p, a4);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 64))(v7, __p);
      uint64_t v9 = v8;
      if (v14 < 0)
      {
        operator delete(__p[0]);
        if (v9)
        {
LABEL_5:
          int v12 = 0;
          std::string::basic_string[abi:ne180100]<0>(__p, a4);
          char v10 = ANEMachineIR::LookupOpsetString((uint64_t *)__p, &v12);
          char v11 = v10;
          if (v14 < 0)
          {
            operator delete(__p[0]);
            if (v11) {
LABEL_7:
            }
              operator new();
          }
          else if (v10)
          {
            goto LABEL_7;
          }
          operator new();
        }
      }
      else if (v8)
      {
        goto LABEL_5;
      }
      operator new();
    }
  }
  else if (v6)
  {
    goto LABEL_3;
  }
  operator new();
}

void sub_210C34278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x21667BBD0](v15, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t milaneflow_function_name_list(void *a1)
{
  if (*(void *)((*(uint64_t (**)(void))(*(void *)*a1 + 72))(*a1) + 24)) {
    operator new[]();
  }
  return 0;
}

uint64_t milaneflow_opset_name_list(uint64_t *a1, int a2, char *__s)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v3 + 56))(v3, &__p);
  uint64_t v5 = v4;
  if (v10 < 0)
  {
    operator delete(__p);
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v6 = 0;
    return v6 >> 3;
  }
  if (!v4) {
    goto LABEL_6;
  }
LABEL_3:
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 56))(&__p, v5);
  uint64_t v6 = v9 - (unsigned char *)__p;
  if (v9 != __p) {
    operator new[]();
  }
  if (__p) {
    operator delete(__p);
  }
  return v6 >> 3;
}

void sub_210C344E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t milaneflow_function_input_name_list(uint64_t a1)
{
  if (*(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16)) + 16)) {
    operator new[]();
  }
  return 0;
}

uint64_t milaneflow_function_output_name_list(uint64_t a1)
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24));
  if (v1[1] - *v1) {
    operator new[]();
  }
  return 0;
}

void milaneflow_free_name_list(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x21667BBB0);
  }
}

uint64_t milaneflow_try_input_io_handle(uint64_t a1, int a2, char *__s)
{
  uint64_t v3 = *(void *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v3 + 152))(v3, __p);
  uint64_t v5 = v4;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      return v5;
    }
LABEL_5:
    operator new();
  }
  if (!v4) {
    goto LABEL_5;
  }
  return v5;
}

void sub_210C3480C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x21667BBD0](v15, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t milaneflow_try_output_io_handle(uint64_t a1, int a2, char *__s)
{
  uint64_t v3 = *(void *)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)(v3 + 64) + 24))(v3 + 64, __p, 1);
  uint64_t v5 = v4;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      return v5;
    }
LABEL_5:
    operator new();
  }
  if (!v4) {
    goto LABEL_5;
  }
  return v5;
}

void sub_210C349B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x21667BBD0](v15, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

void milaneflow_free_io_handle(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x21667BBD0);
  }
}

uint64_t milaneflow_function_io_dtype(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (!v4) {
    return 0;
  }
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 88))(v4);
  if (v5 == 4)
  {
    int v7 = 0;
    goto LABEL_9;
  }
  if (v5 == 9)
  {
    int v7 = 2;
    goto LABEL_9;
  }
  uint64_t v6 = 0;
  if (v5 == 14)
  {
    int v7 = 1;
LABEL_9:
    *a3 = v7;
    return 1;
  }
  return v6;
}

BOOL milaneflow_function_io_rank(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
    *a3 = (uint64_t)(v6[1] - *v6) >> 3;
  }
  return v5 != 0;
}

uint64_t milaneflow_function_io_dim_size(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result)
  {
    uint64_t v7 = result;
    char v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 96))(result);
    if (a3 >= (uint64_t)(v8[1] - *v8) >> 3)
    {
      return 0;
    }
    else
    {
      uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
      if (a3 >= (uint64_t)(v9[1] - *v9) >> 3) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(*v9 + 8 * a3) + 16))(*(void *)(*v9 + 8 * a3));
      if (result)
      {
        *a4 = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
        return 1;
      }
    }
  }
  return result;
}

void milaneflow_make_strided_bind_options(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a1 - 6 <= 0xFFFFFFFFFFFFFFFALL) {
    operator new();
  }
  if (a4)
  {
    if (a1 - 1 < a3 && a4 != 1) {
      operator new();
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v18 = 0;
    std::vector<unsigned long long>::reserve(__p, a1);
    uint64_t v6 = 0;
    uint64_t v7 = (char *)__p[1];
    while (1)
    {
      if (v7 >= v18)
      {
        uint64_t v9 = (char *)__p[0];
        uint64_t v10 = (v7 - (char *)__p[0]) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v18 - (char *)__p[0];
        if ((v18 - (char *)__p[0]) >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v18, v13);
          uint64_t v9 = (char *)__p[0];
          uint64_t v7 = (char *)__p[1];
        }
        else
        {
          char v14 = 0;
        }
        uint64_t v15 = &v14[8 * v10];
        *(void *)uint64_t v15 = *(void *)(a2 + 8 * v6);
        char v8 = v15 + 8;
        while (v7 != v9)
        {
          uint64_t v16 = *((void *)v7 - 1);
          v7 -= 8;
          *((void *)v15 - 1) = v16;
          v15 -= 8;
        }
        __p[0] = v15;
        __p[1] = v8;
        uint64_t v18 = &v14[8 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *(void *)uint64_t v7 = *(void *)(a2 + 8 * v6);
        char v8 = v7 + 8;
      }
      __p[1] = v8;
      ++v6;
      uint64_t v7 = (char *)v8;
      if (v6 == a1) {
        operator new();
      }
    }
  }
  operator new();
}

void sub_210C34F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  MEMORY[0x21667BBD0](v10, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

void **milaneflow_free_strided_bind_options(void **result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *result;
    if (v4)
    {
      v3[1] = v4;
      operator delete(v4);
    }
    uint64_t result = (void **)MEMORY[0x21667BBD0](v3, 0x1010C401C72BCECLL);
  }
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x21667BBD0);
  }
  return result;
}

void milaneflow_free_bind_result(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x21667BBD0);
  }
}

uint64_t milaneflow_bind_function_input(uint64_t a1, int a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v10 + 152))(v10, __p);
  uint64_t v12 = v11;
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_3;
    }
LABEL_12:
    operator new();
  }
  operator delete(__p[0]);
  if (!v12) {
    goto LABEL_12;
  }
LABEL_3:
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
  if (!v13) {
    operator new();
  }
  uint64_t v14 = v13;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v70 = 0;
  v73[0] = 0;
  v73[1] = 0;
  uint64_t v74 = 0;
  MEMORY[0x21667BA20](__p, __s);
  LOBYTE(v75) = 1;
  *(void *)&long long v71 = v14;
  *((void *)&v75 + 1) = a6;
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 88))(v14);
  if (v15 == 4)
  {
    int v17 = 2;
  }
  else
  {
    if (v15 != 9 && v15 != 14) {
      operator new();
    }
    int v17 = 1;
  }
  unsigned int v63 = v17;
  memset(&v76, 0, sizeof(v76));
  uint64_t v18 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 96))(v14);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  if (*v18 == v20)
  {
    std::string::size_type size = v76.__r_.__value_.__l.__size_;
  }
  else
  {
    do
    {
      uint64_t v21 = (*(uint64_t (**)(void))(**(void **)v19 + 16))();
      if (!v21) {
        operator new();
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21);
      uint64_t v23 = v22;
      std::string::size_type v24 = v76.__r_.__value_.__l.__size_;
      if (v76.__r_.__value_.__l.__size_ >= v76.__r_.__value_.__r.__words[2])
      {
        std::string v26 = (void *)v76.__r_.__value_.__r.__words[0];
        uint64_t v27 = (uint64_t)(v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) >> 3;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        int64_t v29 = v76.__r_.__value_.__r.__words[2] - v76.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v76.__r_.__value_.__r.__words[2] - v76.__r_.__value_.__r.__words[0]) >> 2 > v28) {
          unint64_t v28 = v29 >> 2;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v76.__r_.__value_.__r.__words[2], v30);
          std::string::size_type v24 = v76.__r_.__value_.__l.__size_;
          std::string v26 = (void *)v76.__r_.__value_.__r.__words[0];
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v32 = (uint64_t *)&v31[8 * v27];
        *uint64_t v32 = v23;
        std::string::size_type size = (std::string::size_type)(v32 + 1);
        while ((void *)v24 != v26)
        {
          uint64_t v33 = *(void *)(v24 - 8);
          v24 -= 8;
          *--uint64_t v32 = v33;
        }
        v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
        v76.__r_.__value_.__l.__size_ = size;
        v76.__r_.__value_.__r.__words[2] = (std::string::size_type)&v31[8 * v30];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *(void *)v76.__r_.__value_.__l.__size_ = v22;
        std::string::size_type size = v24 + 8;
      }
      v76.__r_.__value_.__l.__size_ = size;
      v19 += 8;
    }
    while (v19 != v20);
  }
  memset(&v68, 0, sizeof(v68));
  v67.__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned long long>::assign(&v68.__r_.__value_.__l.__data_, (uint64_t)(size - v76.__r_.__value_.__r.__words[0]) >> 3, &v67);
  std::string::size_type v34 = v76.__r_.__value_.__r.__words[0];
  if ((uint64_t)(v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) >= 9)
  {
    uint64_t v35 = v63;
    std::string::size_type v36 = v68.__r_.__value_.__r.__words[0];
    std::string::size_type v37 = ((v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) >> 3) - 1;
    do
    {
      v35 *= *(void *)(v34 + 8 * v37);
      *(void *)(v36 + 8 * v37) = v35;
      unint64_t v38 = v37-- + 1;
    }
    while (v38 > 2);
  }
  if (a4)
  {
    size_t v39 = v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0];
    uint64_t v40 = (uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 3;
    uint64_t v42 = *(void **)a4;
    uint64_t v41 = *(void *)(a4 + 8);
    uint64_t v43 = v41 - *(void *)a4;
    if (v40 != v43 >> 3) {
      operator new();
    }
    uint64_t v44 = *(void *)(a4 + 32);
    *((void *)&v71 + 1) = v44;
    uint64_t v72 = *(void *)(a4 + 24);
    int v46 = v43 == v39 && !memcmp(v42, v68.__r_.__value_.__l.__data_, v39) && v44 == 1;
    LOBYTE(v75) = v46;
    if (v73 != (void **)a4)
    {
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v73, (char *)v42, v41, v40);
      int v46 = v75;
    }
    if (!v46)
    {
      uint64_t Location = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 24));
      (*(void (**)(std::string *__return_ptr))(*(void *)Location + 24))(&v67);
      std::string v64 = 0;
      long long v65 = 0;
      uint64_t v66 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v64, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_, (uint64_t)(v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) >> 3);
      if (v64)
      {
        long long v65 = v64;
        operator delete(v64);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if (v54)
      {
        uint64_t v55 = 0;
        goto LABEL_78;
      }
    }
  }
  else
  {
    LOBYTE(v75) = 1;
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v73, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_, (uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 3);
  }
  long long v48 = *(char **)(a1 + 40);
  long long v47 = *(char **)(a1 + 48);
  if (v48 != v47) {
    operator new();
  }
  unint64_t v49 = *(void *)(a1 + 56);
  if ((unint64_t)v48 >= v49)
  {
    uint64_t v56 = 0x2E8BA2E8BA2E8BA3 * ((v47 - v48) >> 3);
    unint64_t v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) > 0x2E8BA2E8BA2E8BALL) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v58 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v49 - (void)v48) >> 3);
    if (2 * v58 > v57) {
      unint64_t v57 = 2 * v58;
    }
    if (v58 >= 0x1745D1745D1745DLL) {
      unint64_t v59 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v59 = v57;
    }
    if (v59)
    {
      if (v59 > 0x2E8BA2E8BA2E8BALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v60 = (char *)operator new(88 * v59);
    }
    else
    {
      uint64_t v60 = 0;
    }
    long long v61 = &v60[88 * v56];
    *(_OWORD *)long long v61 = *(_OWORD *)__p;
    *((void *)v61 + 2) = v70;
    __p[1] = 0;
    uint64_t v70 = 0;
    __p[0] = 0;
    *(_OWORD *)(v61 + 24) = v71;
    *((void *)v61 + 5) = v72;
    *((_OWORD *)v61 + 3) = *(_OWORD *)v73;
    *((void *)v61 + 8) = v74;
    v73[1] = 0;
    uint64_t v74 = 0;
    v73[0] = 0;
    *(_OWORD *)(v61 + 72) = v75;
    int v52 = v61 + 88;
    *(void *)(a1 + 40) = v61;
    *(void *)(a1 + 48) = v61 + 88;
    *(void *)(a1 + 56) = &v60[88 * v59];
    if (v48) {
      operator delete(v48);
    }
  }
  else
  {
    long long v50 = *(_OWORD *)__p;
    *((void *)v48 + 2) = v70;
    *(_OWORD *)long long v48 = v50;
    __p[1] = 0;
    uint64_t v70 = 0;
    __p[0] = 0;
    uint64_t v51 = v72;
    *(_OWORD *)(v48 + 24) = v71;
    *((void *)v48 + 5) = v51;
    *((void *)v48 + 6) = 0;
    *((void *)v48 + 7) = 0;
    *((void *)v48 + 8) = 0;
    *((_OWORD *)v48 + 3) = *(_OWORD *)v73;
    *((void *)v48 + 8) = v74;
    v73[0] = 0;
    v73[1] = 0;
    uint64_t v74 = 0;
    *(_OWORD *)(v48 + 72) = v75;
    int v52 = v48 + 88;
  }
  *(void *)(a1 + 48) = v52;
  uint64_t v55 = 1;
LABEL_78:
  if (v68.__r_.__value_.__r.__words[0])
  {
    v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (v76.__r_.__value_.__r.__words[0])
  {
    v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(__p[0]);
  }
  return v55;
}

void sub_210C35B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a27) {
    operator delete(a27);
  }
  uint64_t v41 = *(void **)(v39 - 112);
  if (v41)
  {
    *(void *)(v39 - 104) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::CheckCustomStrides<unsigned char const>(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(a5 + 32);
  if (!v5 || v5 != 1 && *(void *)(a5 + 40) >= (unint64_t)(a2 - 1)) {
    operator new();
  }
  if (!*(unsigned char *)(a5 + 72))
  {
    uint64_t v6 = a2 - 1;
    if (a2 - 1 >= 0)
    {
      unint64_t v7 = v5 * a4;
      do
      {
        unint64_t v8 = *(void *)(*(void *)(a5 + 48) + 8 * v6);
        if (v8 < v7) {
          operator new();
        }
        if (!v6) {
          break;
        }
        unint64_t v9 = *(void *)(*a3 + 8 * v6);
        unint64_t v7 = v9 * v8;
        if (*(void *)(a5 + 40) == v6)
        {
          if (v9 % v5) {
            uint64_t v10 = *(void *)(a5 + 32);
          }
          else {
            uint64_t v10 = 0;
          }
          unint64_t v7 = v10 + v7 / v5;
        }
      }
      while (v6-- > 0);
    }
  }
  return 0;
}

void sub_210C36040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  MEMORY[0x21667BBD0](v33, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::BindTask<unsigned char const>::~BindTask(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t milaneflow_bind_function_output(uint64_t a1, int a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)(v10 + 64) + 24))(v10 + 64, __p, 1);
  uint64_t v12 = v11;
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_3;
    }
LABEL_12:
    operator new();
  }
  operator delete(__p[0]);
  if (!v12) {
    goto LABEL_12;
  }
LABEL_3:
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
  if (!v13) {
    operator new();
  }
  uint64_t v14 = v13;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v70 = 0;
  v72[0] = 0;
  v72[1] = 0;
  uint64_t v73 = 0;
  MEMORY[0x21667BA20](__p, __s);
  LOBYTE(v74) = 1;
  *(void *)long long v71 = v14;
  *((void *)&v74 + 1) = a6;
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 88))(v14);
  if (v15 == 4)
  {
    int v17 = 2;
  }
  else
  {
    if (v15 != 9 && v15 != 14) {
      operator new();
    }
    int v17 = 1;
  }
  unsigned int v63 = v17;
  memset(&v75, 0, sizeof(v75));
  uint64_t v18 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 96))(v14);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  if (*v18 == v20)
  {
    std::string::size_type size = v75.__r_.__value_.__l.__size_;
  }
  else
  {
    do
    {
      uint64_t v21 = (*(uint64_t (**)(void))(**(void **)v19 + 16))();
      if (!v21) {
        operator new();
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21);
      uint64_t v23 = v22;
      std::string::size_type v24 = v75.__r_.__value_.__l.__size_;
      if (v75.__r_.__value_.__l.__size_ >= v75.__r_.__value_.__r.__words[2])
      {
        std::string v26 = (void *)v75.__r_.__value_.__r.__words[0];
        uint64_t v27 = (uint64_t)(v75.__r_.__value_.__l.__size_ - v75.__r_.__value_.__r.__words[0]) >> 3;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        int64_t v29 = v75.__r_.__value_.__r.__words[2] - v75.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v75.__r_.__value_.__r.__words[2] - v75.__r_.__value_.__r.__words[0]) >> 2 > v28) {
          unint64_t v28 = v29 >> 2;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v75.__r_.__value_.__r.__words[2], v30);
          std::string::size_type v24 = v75.__r_.__value_.__l.__size_;
          std::string v26 = (void *)v75.__r_.__value_.__r.__words[0];
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v32 = (uint64_t *)&v31[8 * v27];
        *uint64_t v32 = v23;
        std::string::size_type size = (std::string::size_type)(v32 + 1);
        while ((void *)v24 != v26)
        {
          uint64_t v33 = *(void *)(v24 - 8);
          v24 -= 8;
          *--uint64_t v32 = v33;
        }
        v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
        v75.__r_.__value_.__l.__size_ = size;
        v75.__r_.__value_.__r.__words[2] = (std::string::size_type)&v31[8 * v30];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *(void *)v75.__r_.__value_.__l.__size_ = v22;
        std::string::size_type size = v24 + 8;
      }
      v75.__r_.__value_.__l.__size_ = size;
      v19 += 8;
    }
    while (v19 != v20);
  }
  memset(&v68, 0, sizeof(v68));
  v67.__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned long long>::assign(&v68.__r_.__value_.__l.__data_, (uint64_t)(size - v75.__r_.__value_.__r.__words[0]) >> 3, &v67);
  std::string::size_type v34 = v75.__r_.__value_.__r.__words[0];
  if ((uint64_t)(v75.__r_.__value_.__l.__size_ - v75.__r_.__value_.__r.__words[0]) >= 9)
  {
    uint64_t v35 = v63;
    std::string::size_type v36 = v68.__r_.__value_.__r.__words[0];
    std::string::size_type v37 = ((v75.__r_.__value_.__l.__size_ - v75.__r_.__value_.__r.__words[0]) >> 3) - 1;
    do
    {
      v35 *= *(void *)(v34 + 8 * v37);
      *(void *)(v36 + 8 * v37) = v35;
      unint64_t v38 = v37-- + 1;
    }
    while (v38 > 2);
  }
  if (a4)
  {
    size_t v39 = v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0];
    uint64_t v40 = (uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 3;
    uint64_t v42 = *(void **)a4;
    uint64_t v41 = *(void *)(a4 + 8);
    uint64_t v43 = v41 - *(void *)a4;
    if (v40 != v43 >> 3) {
      operator new();
    }
    uint64_t v44 = *(void *)(a4 + 32);
    *(void *)&v71[8] = v44;
    *(void *)&v71[16] = *(void *)(a4 + 24);
    int v46 = v43 == v39 && !memcmp(v42, v68.__r_.__value_.__l.__data_, v39) && v44 == 1;
    LOBYTE(v74) = v46;
    if (v72 != (void **)a4)
    {
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v72, (char *)v42, v41, v40);
      int v46 = v74;
    }
    if (!v46)
    {
      uint64_t Location = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 24));
      (*(void (**)(std::string *__return_ptr))(*(void *)Location + 24))(&v67);
      std::string v64 = 0;
      long long v65 = 0;
      uint64_t v66 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v64, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_, (uint64_t)(v75.__r_.__value_.__l.__size_ - v75.__r_.__value_.__r.__words[0]) >> 3);
      if (v64)
      {
        long long v65 = v64;
        operator delete(v64);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if (v54)
      {
        uint64_t v55 = 0;
        goto LABEL_78;
      }
    }
  }
  else
  {
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v72, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_, (uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 3);
    LOBYTE(v74) = 1;
    *(_OWORD *)&v71[8] = xmmword_210C6BDE0;
  }
  long long v48 = *(char **)(a1 + 64);
  long long v47 = *(char **)(a1 + 72);
  if (v48 != v47) {
    operator new();
  }
  unint64_t v49 = *(void *)(a1 + 80);
  if ((unint64_t)v48 >= v49)
  {
    uint64_t v56 = 0x2E8BA2E8BA2E8BA3 * ((v47 - v48) >> 3);
    unint64_t v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) > 0x2E8BA2E8BA2E8BALL) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v58 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v49 - (void)v48) >> 3);
    if (2 * v58 > v57) {
      unint64_t v57 = 2 * v58;
    }
    if (v58 >= 0x1745D1745D1745DLL) {
      unint64_t v59 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v59 = v57;
    }
    if (v59)
    {
      if (v59 > 0x2E8BA2E8BA2E8BALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v60 = (char *)operator new(88 * v59);
    }
    else
    {
      uint64_t v60 = 0;
    }
    long long v61 = &v60[88 * v56];
    *(_OWORD *)long long v61 = *(_OWORD *)__p;
    *((void *)v61 + 2) = v70;
    __p[1] = 0;
    uint64_t v70 = 0;
    __p[0] = 0;
    *(_OWORD *)(v61 + 24) = *(_OWORD *)v71;
    *((void *)v61 + 5) = *(void *)&v71[16];
    *((_OWORD *)v61 + 3) = *(_OWORD *)v72;
    *((void *)v61 + 8) = v73;
    v72[1] = 0;
    uint64_t v73 = 0;
    v72[0] = 0;
    *(_OWORD *)(v61 + 72) = v74;
    int v52 = v61 + 88;
    *(void *)(a1 + 64) = v61;
    *(void *)(a1 + 72) = v61 + 88;
    *(void *)(a1 + 80) = &v60[88 * v59];
    if (v48) {
      operator delete(v48);
    }
  }
  else
  {
    long long v50 = *(_OWORD *)__p;
    *((void *)v48 + 2) = v70;
    *(_OWORD *)long long v48 = v50;
    __p[1] = 0;
    uint64_t v70 = 0;
    __p[0] = 0;
    uint64_t v51 = *(void *)&v71[16];
    *(_OWORD *)(v48 + 24) = *(_OWORD *)v71;
    *((void *)v48 + 5) = v51;
    *((void *)v48 + 6) = 0;
    *((void *)v48 + 7) = 0;
    *((void *)v48 + 8) = 0;
    *((_OWORD *)v48 + 3) = *(_OWORD *)v72;
    *((void *)v48 + 8) = v73;
    v72[0] = 0;
    v72[1] = 0;
    uint64_t v73 = 0;
    *(_OWORD *)(v48 + 72) = v74;
    int v52 = v48 + 88;
  }
  *(void *)(a1 + 72) = v52;
  uint64_t v55 = 1;
LABEL_78:
  if (v68.__r_.__value_.__r.__words[0])
  {
    v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (v75.__r_.__value_.__r.__words[0])
  {
    v75.__r_.__value_.__l.__size_ = v75.__r_.__value_.__r.__words[0];
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(__p[0]);
  }
  return v55;
}

void sub_210C36C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a27) {
    operator delete(a27);
  }
  uint64_t v41 = *(void **)(v39 - 112);
  if (v41)
  {
    *(void *)(v39 - 104) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::CheckCustomStrides<unsigned char>(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(a5 + 32);
  if (!v5 || v5 != 1 && *(void *)(a5 + 40) >= (unint64_t)(a2 - 1)) {
    operator new();
  }
  if (!*(unsigned char *)(a5 + 72))
  {
    uint64_t v6 = a2 - 1;
    if (a2 - 1 >= 0)
    {
      unint64_t v7 = v5 * a4;
      do
      {
        unint64_t v8 = *(void *)(*(void *)(a5 + 48) + 8 * v6);
        if (v8 < v7) {
          operator new();
        }
        if (!v6) {
          break;
        }
        unint64_t v9 = *(void *)(*a3 + 8 * v6);
        unint64_t v7 = v9 * v8;
        if (*(void *)(a5 + 40) == v6)
        {
          if (v9 % v5) {
            uint64_t v10 = *(void *)(a5 + 32);
          }
          else {
            uint64_t v10 = 0;
          }
          unint64_t v7 = v10 + v7 / v5;
        }
      }
      while (v6-- > 0);
    }
  }
  return 0;
}

void sub_210C370F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  MEMORY[0x21667BBD0](v33, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

void milaneflow_execute_function(MIL::ANEMachineIR::Interpreter::DelegateByNameOp *a1)
{
}

void sub_210C38C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  MEMORY[0x21667BBD0](v36, 0x1012C403467C318);
  uint64_t v39 = *(void **)(v37 - 112);
  if (v39)
  {
    *(void *)(v37 - 104) = v39;
    operator delete(v39);
  }
  MIL::ANEMachineIR::Interpreter::FunctionInterpretStatus::~FunctionInterpretStatus((MIL::ANEMachineIR::Interpreter::FunctionInterpretStatus *)&__p);
  *(void *)(v37 - 240) = a12;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table(a13);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::~__hash_table(v37 - 192);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::FunctionInterpretStatus::~FunctionInterpretStatus(MIL::ANEMachineIR::Interpreter::FunctionInterpretStatus *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void std::allocator_traits<std::allocator<anonymous namespace'::BindTask<unsigned char>>>::destroy[abi:ne180100]<anonymous namespace'::BindTask<unsigned char>,void>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRTensorValue const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::shared_ptr<MIL::MILContext>::shared_ptr[abi:ne180100]<MIL::MILContext,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_210C38FD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<MIL::MILContext>::shared_ptr[abi:ne180100]<MIL::MILContext,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::MILContext *,std::shared_ptr<MIL::MILContext>::__shared_ptr_default_delete<MIL::MILContext,MIL::MILContext>,std::allocator<MIL::MILContext>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext *,std::shared_ptr<MIL::MILContext>::__shared_ptr_default_delete<MIL::MILContext,MIL::MILContext>,std::allocator<MIL::MILContext>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext *,std::shared_ptr<MIL::MILContext>::__shared_ptr_default_delete<MIL::MILContext,MIL::MILContext>,std::allocator<MIL::MILContext>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<MIL::IRProgram>::shared_ptr[abi:ne180100]<MIL::IRProgram,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_210C39100(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<MIL::IRProgram>::shared_ptr[abi:ne180100]<MIL::IRProgram,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::IRProgram *,std::shared_ptr<MIL::IRProgram>::__shared_ptr_default_delete<MIL::IRProgram,MIL::IRProgram>,std::allocator<MIL::IRProgram>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram *,std::shared_ptr<MIL::IRProgram>::__shared_ptr_default_delete<MIL::IRProgram,MIL::IRProgram>,std::allocator<MIL::IRProgram>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram *,std::shared_ptr<MIL::IRProgram>::__shared_ptr_default_delete<MIL::IRProgram,MIL::IRProgram>,std::allocator<MIL::IRProgram>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<MIL::MILContext>::shared_ptr[abi:ne180100]<MIL::MILContext,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t std::shared_ptr<MIL::IRProgram>::shared_ptr[abi:ne180100]<MIL::IRProgram,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t MIL::IROperator::Make()
{
  return MEMORY[0x270F47C90]();
}

{
  return MEMORY[0x270F47CA0]();
}

uint64_t MIL::MILContext::Make(MIL::MILContext *this)
{
  return MEMORY[0x270F47CA8](this);
}

uint64_t MIL::Validation::TensorDTypeConstraints::Make(MIL::Validation::TensorDTypeConstraints *this)
{
  return MEMORY[0x270F47CB8](this);
}

uint64_t MIL::Validation::OpOutputConstraintTarget::Make(MIL::Validation::OpOutputConstraintTarget *this)
{
  return MEMORY[0x270F47CC0](this);
}

uint64_t MIL::Validation::TensorRankValueConstraints::Make(MIL::Validation::TensorRankValueConstraints *this)
{
  return MEMORY[0x270F47CC8](this);
}

uint64_t MIL::Validation::OpParameterConstraintTarget::Make()
{
  return MEMORY[0x270F47CD0]();
}

uint64_t MIL::Validation::TensorSymbolicShapeConstraints::Make(MIL::Validation::TensorSymbolicShapeConstraints *this)
{
  return MEMORY[0x270F47CD8](this);
}

uint64_t MIL::Validation::PossibleStringValuesConstraints::Make(MIL::Validation::PossibleStringValuesConstraints *this)
{
  return MEMORY[0x270F47CE0](this);
}

uint64_t MIL::IRParameter::MakeTypeSet()
{
  return MEMORY[0x270F47CF8]();
}

uint64_t MIL::IRParameter::Make()
{
  return MEMORY[0x270F47D00]();
}

uint64_t MIL::ParserOptions::Make(MIL::ParserOptions *this)
{
  return MEMORY[0x270F47D10](this);
}

uint64_t MIL::IRNamedValueType::Make()
{
  return MEMORY[0x270F47D28]();
}

void MIL::IRNamedValueType::~IRNamedValueType(MIL::IRNamedValueType *this)
{
}

uint64_t MIL::ValidationResult::ValidationResult()
{
  return MEMORY[0x270F47D78]();
}

uint64_t MIL::ValidationResult::ValidationResult(MIL::ValidationResult *this)
{
  return MEMORY[0x270F47D80](this);
}

void MIL::ValidationResult::~ValidationResult(MIL::ValidationResult *this)
{
}

uint64_t MIL::IRTensorValueType::MakeScalar()
{
  return MEMORY[0x270F47DA8]();
}

uint64_t MIL::IRTensorValueType::MakeWithShape()
{
  return MEMORY[0x270F47DB0]();
}

uint64_t MIL::IRTensorValueType::Make()
{
  return MEMORY[0x270F47DC0]();
}

uint64_t MIL::IRUnknownDimension::Make(MIL::IRUnknownDimension *this, MIL::MILContext *a2)
{
  return MEMORY[0x270F47DE0](this, a2);
}

uint64_t MIL::Blob::StorageWriter::WriteData<MIL::Fp16>()
{
  return MEMORY[0x270F47E18]();
}

uint64_t MIL::Blob::StorageWriter::WriteData<unsigned char>()
{
  return MEMORY[0x270F47E20]();
}

uint64_t MIL::Blob::StorageWriter::StorageWriter()
{
  return MEMORY[0x270F47E28]();
}

void MIL::Blob::StorageWriter::~StorageWriter(MIL::Blob::StorageWriter *this)
{
}

uint64_t MIL::Fp16::FromFloat(MIL::Fp16 *this, float a2)
{
  return MEMORY[0x270F47E40](this, a2);
}

uint64_t MIL::Text::ParseProgram()
{
  return MEMORY[0x270F47E48]();
}

uint64_t MIL::Text::ParseProgramFromFile()
{
  return MEMORY[0x270F47E68]();
}

uint64_t MIL::Builder::BlockBuilder::GetContext(MIL::Builder::BlockBuilder *this)
{
  return MEMORY[0x270F47EA0](this);
}

uint64_t MIL::Builder::BlockBuilder::AddOperation()
{
  return MEMORY[0x270F47EA8]();
}

uint64_t MIL::Builder::BlockBuilder::GetOperations(MIL::Builder::BlockBuilder *this)
{
  return MEMORY[0x270F47EB0](this);
}

uint64_t MIL::Builder::BlockBuilder::RemoveOperation()
{
  return MEMORY[0x270F47EB8]();
}

uint64_t MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable()
{
  return MEMORY[0x270F47EC0]();
}

uint64_t MIL::Builder::BlockBuilder::AddInput()
{
  return MEMORY[0x270F47EC8]();
}

uint64_t MIL::Builder::BlockBuilder::AddOutput()
{
  return MEMORY[0x270F47ED0]();
}

uint64_t MIL::Builder::ProgramBuilder::AddFunction()
{
  return MEMORY[0x270F47ED8]();
}

uint64_t MIL::Builder::ProgramBuilder::GetFunction()
{
  return MEMORY[0x270F47EE0]();
}

uint64_t MIL::Builder::ProgramBuilder::CreateProgram(MIL::Builder::ProgramBuilder *this)
{
  return MEMORY[0x270F47EE8](this);
}

uint64_t MIL::Builder::ProgramBuilder::Make()
{
  return MEMORY[0x270F47EF0]();
}

uint64_t MIL::Builder::FunctionBuilder::SetSpecialization()
{
  return MEMORY[0x270F47EF8]();
}

uint64_t MIL::Builder::FunctionBuilder::AddBlock()
{
  return MEMORY[0x270F47F00]();
}

uint64_t MIL::Builder::FunctionBuilder::AddInput()
{
  return MEMORY[0x270F47F08]();
}

uint64_t MIL::Builder::OperationBuilder::AddInputBool()
{
  return MEMORY[0x270F47F10]();
}

uint64_t MIL::Builder::OperationBuilder::AddInputInt8()
{
  return MEMORY[0x270F47F18]();
}

uint64_t MIL::Builder::OperationBuilder::SetAttribute()
{
  return MEMORY[0x270F47F20]();
}

uint64_t MIL::Builder::OperationBuilder::AddInputInt32()
{
  return MEMORY[0x270F47F28]();
}

{
  return MEMORY[0x270F47F30]();
}

uint64_t MIL::Builder::OperationBuilder::AddInputString()
{
  return MEMORY[0x270F47F38]();
}

uint64_t MIL::Builder::OperationBuilder::AddInputFloat16()
{
  return MEMORY[0x270F47F40]();
}

{
  return MEMORY[0x270F47F48]();
}

uint64_t MIL::Builder::OperationBuilder::GetChildOperations(MIL::Builder::OperationBuilder *this)
{
  return MEMORY[0x270F47F50](this);
}

uint64_t MIL::Builder::OperationBuilder::AddBlock()
{
  return MEMORY[0x270F47F58]();
}

uint64_t MIL::Builder::OperationBuilder::AddInput()
{
  return MEMORY[0x270F47F60]();
}

{
  return MEMORY[0x270F47F68]();
}

uint64_t MIL::Builder::OperationBuilder::AddOutput()
{
  return MEMORY[0x270F47F70]();
}

uint64_t MIL::Builder::OperationBuilder::GetBlocks(MIL::Builder::OperationBuilder *this)
{
  return MEMORY[0x270F47F78](this);
}

uint64_t MIL::IROpset::IROpset()
{
  return MEMORY[0x270F47F90]();
}

void MIL::IROpset::~IROpset(MIL::IROpset *this)
{
}

uint64_t MIL::MILContext::GetOpset()
{
  return MEMORY[0x270F48028]();
}

uint64_t MIL::IRDimension::AsConstant(MIL::IRDimension *this)
{
  return MEMORY[0x270F48030](this);
}

uint64_t MIL::IROperation::GetOutputType(MIL::IROperation *this)
{
  return MEMORY[0x270F48048](this);
}

uint64_t MIL::IROperation::GetParameterType()
{
  return MEMORY[0x270F48070]();
}

uint64_t MIL::IROperation::GetParameterValue()
{
  return MEMORY[0x270F48080]();
}

uint64_t MIL::IROperation::TryGetParameterType()
{
  return MEMORY[0x270F48098]();
}

uint64_t MIL::IROperation::TryGetParameterValue()
{
  return MEMORY[0x270F480A0]();
}

uint64_t MIL::IRValueType::AsTensorType(MIL::IRValueType *this)
{
  return MEMORY[0x270F480B8](this);
}

uint64_t MIL::IRTensorValue::GetDataView<MIL::Fp16>()
{
  return MEMORY[0x270F48100]();
}

uint64_t MIL::IRTensorValue::GetDataView<signed char>()
{
  return MEMORY[0x270F48150]();
}

uint64_t MIL::IRTensorValue::GetDataView<unsigned char>()
{
  return MEMORY[0x270F48188]();
}

uint64_t MIL::IRTensorValue::GetDataView<int>()
{
  return MEMORY[0x270F48198]();
}

uint64_t MIL::IRNamedValueType::GetName(MIL::IRNamedValueType *this)
{
  return MEMORY[0x270F482A8](this);
}

uint64_t MIL::IRNamedValueType::GetType(MIL::IRNamedValueType *this)
{
  return MEMORY[0x270F482B0](this);
}

uint64_t MIL::ValidationResult::IsGood(MIL::ValidationResult *this)
{
  return MEMORY[0x270F482D0](this);
}

uint64_t MIL::IRTensorValueType::MakeInt8Value()
{
  return MEMORY[0x270F48300]();
}

uint64_t MIL::IRTensorValueType::MakeUInt8Value()
{
  return MEMORY[0x270F48320]();
}

uint64_t MIL::IRTensorValueType::MakeFloat16Value()
{
  return MEMORY[0x270F48350]();
}

uint64_t MIL::IRTensorValueType::MakeValueFromBlobFile()
{
  return MEMORY[0x270F48368]();
}

uint64_t MIL::IRTensorValueType::IsScalar(MIL::IRTensorValueType *this)
{
  return MEMORY[0x270F48388](this);
}

uint64_t MIL::Fp16::GetFloat(MIL::Fp16 *this)
{
  return MEMORY[0x270F484F0](this);
}

uint64_t MIL::Builder::BlockBuilder::GetOpsetName(MIL::Builder::BlockBuilder *this)
{
  return MEMORY[0x270F48530](this);
}

uint64_t MIL::Builder::BlockBuilder::GetOutputNames(MIL::Builder::BlockBuilder *this)
{
  return MEMORY[0x270F48538](this);
}

uint64_t MIL::Builder::OperationBuilder::GetOutputs(MIL::Builder::OperationBuilder *this)
{
  return MEMORY[0x270F48540](this);
}

uint64_t MIL::Builder::OperationBuilder::GetOperator(MIL::Builder::OperationBuilder *this)
{
  return MEMORY[0x270F48548](this);
}

uint64_t MIL::Builder::OperationBuilder::GetOutputName(MIL::Builder::OperationBuilder *this)
{
  return MEMORY[0x270F48550](this);
}

uint64_t MIL::Builder::OperationBuilder::GetArgumentForParameter()
{
  return MEMORY[0x270F48558]();
}

uint64_t MIL::Builder::OperationBuilder::GetOutput(MIL::Builder::OperationBuilder *this)
{
  return MEMORY[0x270F48560](this);
}

uint64_t MIL::Builder::Variable::TryGetType(MIL::Builder::Variable *this)
{
  return MEMORY[0x270F48568](this);
}

uint64_t MIL::Builder::Variable::TryGetValue(MIL::Builder::Variable *this)
{
  return MEMORY[0x270F48570](this);
}

uint64_t MIL::Builder::Variable::GetScalarValue<MIL::Fp16>()
{
  return MEMORY[0x270F48578]();
}

uint64_t MIL::Builder::Variable::GetName(MIL::Builder::Variable *this)
{
  return MEMORY[0x270F48580](this);
}

uint64_t MIL::Builder::Variable::GetValue(MIL::Builder::Variable *this)
{
  return MEMORY[0x270F48588](this);
}

uint64_t MIL::IROpset::TryGetOperatorSharedPtr()
{
  return MEMORY[0x270F48598]();
}

uint64_t MIL::IRValue::TryGetScalar<MIL::Fp16>()
{
  return MEMORY[0x270F485B0]();
}

uint64_t MIL::IRValue::TryGetScalar<std::string>()
{
  return MEMORY[0x270F485D0]();
}

uint64_t MIL::IRValue::TryGetScalar<signed char>()
{
  return MEMORY[0x270F485D8]();
}

uint64_t MIL::IRValue::TryGetScalar<BOOL>()
{
  return MEMORY[0x270F485E0]();
}

uint64_t MIL::IRValue::TryGetScalar<float>()
{
  return MEMORY[0x270F485F0]();
}

uint64_t MIL::IRValue::TryGetScalar<unsigned char>()
{
  return MEMORY[0x270F48600]();
}

uint64_t MIL::IRValue::TryGetScalar<int>()
{
  return MEMORY[0x270F48610]();
}

uint64_t MIL::IRValue::AsTensor(MIL::IRValue *this)
{
  return MEMORY[0x270F48650](this);
}

uint64_t MIL::IRValue::GetScalar<std::string>()
{
  return MEMORY[0x270F48668]();
}

uint64_t MIL::IRValue::GetScalar<BOOL>()
{
  return MEMORY[0x270F48688]();
}

uint64_t MIL::IRObject::GetLocation(MIL::IRObject *this)
{
  return MEMORY[0x270F48700](this);
}

uint64_t MIL::IRObject::GetAttributes(MIL::IRObject *this)
{
  return MEMORY[0x270F48718](this);
}

uint64_t MIL::IRObject::GetLocationPtr(MIL::IRObject *this)
{
  return MEMORY[0x270F48728](this);
}

uint64_t MIL::IRObject::TryGetAttribute()
{
  return MEMORY[0x270F48740]();
}

uint64_t MIL::IRObject::TryGetAttributeSharedPtr()
{
  return MEMORY[0x270F48748]();
}

uint64_t MIL::IRProgram::GetFunction()
{
  return MEMORY[0x270F48758]();
}

uint64_t MIL::MILResult::GetMessage(MIL::MILResult *this)
{
  return MEMORY[0x270F48760](this);
}

uint64_t MIL::MILResult::GetMessageWithLocation(MIL::MILResult *this)
{
  return MEMORY[0x270F48768](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98238](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x270F983C8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983C0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984E0](this, __pos, __s);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987E0]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

uint64_t std::__sort<std::__less<int,int> &,int *>()
{
  return MEMORY[0x270F98BE8]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

{
  return (std::string *)MEMORY[0x270F98E30](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E28](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x270F98F00](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void bzero(void *a1, size_t a2)
{
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

long double frexp(long double __x, int *__e)
{
  MEMORY[0x270ED9A68](__e, __x);
  return result;
}

float frexpf(float a1, int *a2)
{
  MEMORY[0x270ED9A70](a2, a1);
  return result;
}

int ilogbf(float a1)
{
  return MEMORY[0x270ED9E90](a1);
}

long double ldexp(long double __x, int __e)
{
  MEMORY[0x270EDA028](*(void *)&__e, __x);
  return result;
}

float ldexpf(float a1, int a2)
{
  MEMORY[0x270EDA030](*(void *)&a2, a1);
  return result;
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

float modff(float a1, float *a2)
{
  MEMORY[0x270EDA5B0](a2, a1);
  return result;
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

float tanhf(float a1)
{
  MEMORY[0x270EDB828](a1);
  return result;
}